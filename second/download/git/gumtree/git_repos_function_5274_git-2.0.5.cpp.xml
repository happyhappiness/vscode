<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5274_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mingw_execve<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">cmd<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">argv<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier><specifier pos:line="1" pos:column="68">const<pos:position pos:line="1" pos:column="73"/></specifier> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">env<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/* check if git_command is a shell script */</comment>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><call><name pos:line="4" pos:column="14">try_shell_exec<pos:position pos:line="4" pos:column="28"/></name><argument_list pos:line="4" pos:column="28">(<argument><expr><name pos:line="4" pos:column="29">cmd<pos:position pos:line="4" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="34">argv<pos:position pos:line="4" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="4" pos:column="40">(<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="41">char<pos:position pos:line="4" pos:column="45"/></name> <operator pos:line="4" pos:column="46">*<pos:position pos:line="4" pos:column="47"/></operator><operator pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></operator><operator pos:line="4" pos:column="48">)<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="49">env<pos:position pos:line="4" pos:column="52"/></name></expr></argument>)<pos:position pos:line="4" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="54"/></condition><then pos:line="4" pos:column="54"> <block pos:line="4" pos:column="55">{
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">int<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">pid<pos:position pos:line="5" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="26">status<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>

		<expr_stmt><expr><name pos:line="7" pos:column="17">pid<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">=<pos:position pos:line="7" pos:column="22"/></operator> <call><name pos:line="7" pos:column="23">mingw_spawnve<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">(<argument><expr><name pos:line="7" pos:column="37">cmd<pos:position pos:line="7" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="42">(<pos:position pos:line="7" pos:column="43"/></operator><specifier pos:line="7" pos:column="43">const<pos:position pos:line="7" pos:column="48"/></specifier> <name pos:line="7" pos:column="49">char<pos:position pos:line="7" pos:column="53"/></name> <operator pos:line="7" pos:column="54">*<pos:position pos:line="7" pos:column="55"/></operator><operator pos:line="7" pos:column="55">*<pos:position pos:line="7" pos:column="56"/></operator><operator pos:line="7" pos:column="56">)<pos:position pos:line="7" pos:column="57"/></operator><name pos:line="7" pos:column="57">argv<pos:position pos:line="7" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="63">(<pos:position pos:line="7" pos:column="64"/></operator><name pos:line="7" pos:column="64">char<pos:position pos:line="7" pos:column="68"/></name> <operator pos:line="7" pos:column="69">*<pos:position pos:line="7" pos:column="70"/></operator><operator pos:line="7" pos:column="70">*<pos:position pos:line="7" pos:column="71"/></operator><operator pos:line="7" pos:column="71">)<pos:position pos:line="7" pos:column="72"/></operator><name pos:line="7" pos:column="72">env<pos:position pos:line="7" pos:column="75"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="77">0<pos:position pos:line="7" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="80"/></expr_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">pid<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">&lt;<pos:position pos:line="8" pos:column="29"/></operator> <literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal></expr>)<pos:position pos:line="8" pos:column="29"/></condition><then pos:line="8" pos:column="29">
			<block type="pseudo"><return pos:line="9" pos:column="25">return;<pos:position pos:line="9" pos:column="32"/></return></block></then></if>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">waitpid<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">pid<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="34">&amp;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="35">status<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="43">0<pos:position pos:line="10" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call> <operator pos:line="10" pos:column="46">&lt;<pos:position pos:line="10" pos:column="50"/></operator> <literal type="number" pos:line="10" pos:column="48">0<pos:position pos:line="10" pos:column="49"/></literal></expr>)<pos:position pos:line="10" pos:column="50"/></condition><then pos:line="10" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="25">status<pos:position pos:line="11" pos:column="31"/></name> <operator pos:line="11" pos:column="32">=<pos:position pos:line="11" pos:column="33"/></operator> <literal type="number" pos:line="11" pos:column="34">255<pos:position pos:line="11" pos:column="37"/></literal></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">exit<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">status<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
