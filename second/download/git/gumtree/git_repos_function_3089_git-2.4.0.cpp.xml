<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3089_git-2.4.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">fetch_symref<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">path<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier><modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">symref<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">unsigned<pos:position pos:line="1" pos:column="67"/></name> <name pos:line="1" pos:column="68">char<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">sha1<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">url<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><call><name pos:line="3" pos:column="21">xstrfmt<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><literal type="string" pos:line="3" pos:column="29">"%s%s"<pos:position pos:line="3" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="3" pos:column="37">repo<pos:position pos:line="3" pos:column="41"/></name><operator pos:line="3" pos:column="41">-&gt;<pos:position pos:line="3" pos:column="46"/></operator><name pos:line="3" pos:column="43">url<pos:position pos:line="3" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="48">path<pos:position pos:line="3" pos:column="52"/></name></expr></argument>)<pos:position pos:line="3" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">buffer<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name pos:line="4" pos:column="32">STRBUF_INIT<pos:position pos:line="4" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">name<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name pos:line="7" pos:column="13">http_get_strbuf<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">url<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="34">&amp;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="35">buffer<pos:position pos:line="7" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="43">NULL<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call> <operator pos:line="7" pos:column="49">!=<pos:position pos:line="7" pos:column="51"/></operator> <name pos:line="7" pos:column="52">HTTP_OK<pos:position pos:line="7" pos:column="59"/></name></expr>)<pos:position pos:line="7" pos:column="60"/></condition><then pos:line="7" pos:column="60">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="17">die<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><literal type="string" pos:line="8" pos:column="21">"Couldn't get %s for remote symref\n%s"<pos:position pos:line="8" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="62">url<pos:position pos:line="8" pos:column="65"/></name></expr></argument>,
		    <argument><expr><name pos:line="9" pos:column="21">curl_errorstr<pos:position pos:line="9" pos:column="34"/></name></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="36"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">free<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><name pos:line="10" pos:column="14">url<pos:position pos:line="10" pos:column="17"/></name></expr></argument>)<pos:position pos:line="10" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">free<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><operator pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">symref<pos:position pos:line="12" pos:column="21"/></name></expr></argument>)<pos:position pos:line="12" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="13" pos:column="9">*<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">symref<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">=<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="19">NULL<pos:position pos:line="13" pos:column="23"/></name></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">hashclr<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">sha1<pos:position pos:line="14" pos:column="21"/></name></expr></argument>)<pos:position pos:line="14" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="23"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">buffer<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">.<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">len<pos:position pos:line="16" pos:column="23"/></name></name> <operator pos:line="16" pos:column="24">==<pos:position pos:line="16" pos:column="26"/></operator> <literal type="number" pos:line="16" pos:column="27">0<pos:position pos:line="16" pos:column="28"/></literal></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29">
		<block type="pseudo"><return pos:line="17" pos:column="17">return;<pos:position pos:line="17" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="19" pos:column="9">/* Cut off trailing newline. */</comment>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">strbuf_rtrim<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><operator pos:line="20" pos:column="22">&amp;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="23">buffer<pos:position pos:line="20" pos:column="29"/></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>

	<comment type="block" pos:line="22" pos:column="9">/* If it's a symref, set the refname; otherwise try for a sha1 */</comment>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">skip_prefix<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name><name pos:line="23" pos:column="25">buffer<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">.<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">buf<pos:position pos:line="23" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="37">"ref: "<pos:position pos:line="23" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="46">&amp;<pos:position pos:line="23" pos:column="51"/></operator><name pos:line="23" pos:column="47">name<pos:position pos:line="23" pos:column="51"/></name></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="53"/></condition><then pos:line="23" pos:column="53"> <block pos:line="23" pos:column="54">{
		<expr_stmt><expr><operator pos:line="24" pos:column="17">*<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">symref<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">=<pos:position pos:line="24" pos:column="26"/></operator> <call><name pos:line="24" pos:column="27">xmemdupz<pos:position pos:line="24" pos:column="35"/></name><argument_list pos:line="24" pos:column="35">(<argument><expr><name pos:line="24" pos:column="36">name<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="42">buffer<pos:position pos:line="24" pos:column="48"/></name><operator pos:line="24" pos:column="48">.<pos:position pos:line="24" pos:column="49"/></operator><name pos:line="24" pos:column="49">len<pos:position pos:line="24" pos:column="52"/></name></name> <operator pos:line="24" pos:column="53">-<pos:position pos:line="24" pos:column="54"/></operator> <operator pos:line="24" pos:column="55">(<pos:position pos:line="24" pos:column="56"/></operator><name pos:line="24" pos:column="56">name<pos:position pos:line="24" pos:column="60"/></name> <operator pos:line="24" pos:column="61">-<pos:position pos:line="24" pos:column="62"/></operator> <name><name pos:line="24" pos:column="63">buffer<pos:position pos:line="24" pos:column="69"/></name><operator pos:line="24" pos:column="69">.<pos:position pos:line="24" pos:column="70"/></operator><name pos:line="24" pos:column="70">buf<pos:position pos:line="24" pos:column="73"/></name></name><operator pos:line="24" pos:column="73">)<pos:position pos:line="24" pos:column="74"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="76"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then> <else pos:line="25" pos:column="11">else <block pos:line="25" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">get_sha1_hex<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name><name pos:line="26" pos:column="30">buffer<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">.<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="37">buf<pos:position pos:line="26" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="42">sha1<pos:position pos:line="26" pos:column="46"/></name></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="29" pos:column="9">strbuf_release<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><operator pos:line="29" pos:column="24">&amp;<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="25">buffer<pos:position pos:line="29" pos:column="31"/></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
