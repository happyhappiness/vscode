<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3435_git-2.7.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">imap_cmd<pos:position pos:line="1" pos:column="23"/></name></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">issue_imap_cmd<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">imap_store<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">ctx<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
				       <parameter><decl><type><name><name pos:line="2" pos:column="40">struct<pos:position pos:line="2" pos:column="46"/></name> <name pos:line="2" pos:column="47">imap_cmd_cb<pos:position pos:line="2" pos:column="58"/></name></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">cb<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>,
				       <parameter><decl><type><specifier pos:line="3" pos:column="40">const<pos:position pos:line="3" pos:column="45"/></specifier> <name pos:line="3" pos:column="46">char<pos:position pos:line="3" pos:column="50"/></name> <modifier pos:line="3" pos:column="51">*<pos:position pos:line="3" pos:column="52"/></modifier></type><name pos:line="3" pos:column="52">fmt<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="57">va_list<pos:position pos:line="3" pos:column="64"/></name></type> <name pos:line="3" pos:column="65">ap<pos:position pos:line="3" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="68"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">imap<pos:position pos:line="5" pos:column="20"/></name></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">imap<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name><name pos:line="5" pos:column="29">ctx<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">imap<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">imap_cmd<pos:position pos:line="6" pos:column="24"/></name></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">cmd<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">n<pos:position pos:line="7" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="16">bufl<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name></type> <name><name pos:line="8" pos:column="14">buf<pos:position pos:line="8" pos:column="17"/></name><index pos:line="8" pos:column="17">[<expr><literal type="number" pos:line="8" pos:column="18">1024<pos:position pos:line="8" pos:column="22"/></literal></expr>]<pos:position pos:line="8" pos:column="23"/></index></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">cmd<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <call><name pos:line="10" pos:column="15">xmalloc<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><sizeof pos:line="10" pos:column="23">sizeof<argument_list pos:line="10" pos:column="29">(<argument><expr pos:line="10" pos:column="30">struct <name pos:line="10" pos:column="37">imap_cmd<pos:position pos:line="10" pos:column="45"/></name></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">nfvasprintf<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><operator pos:line="11" pos:column="21">&amp;<pos:position pos:line="11" pos:column="26"/></operator><name><name pos:line="11" pos:column="22">cmd<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">-&gt;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="27">cmd<pos:position pos:line="11" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="32">fmt<pos:position pos:line="11" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="37">ap<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">cmd<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">-&gt;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="14">tag<pos:position pos:line="12" pos:column="17"/></name></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <operator pos:line="12" pos:column="20">++<pos:position pos:line="12" pos:column="22"/></operator><name><name pos:line="12" pos:column="22">imap<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">-&gt;<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="28">nexttag<pos:position pos:line="12" pos:column="35"/></name></name></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">cb<pos:position pos:line="14" pos:column="15"/></name></expr>)<pos:position pos:line="14" pos:column="16"/></condition><then pos:line="14" pos:column="16">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="17">cmd<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">-&gt;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="22">cb<pos:position pos:line="15" pos:column="24"/></name></name> <operator pos:line="15" pos:column="25">=<pos:position pos:line="15" pos:column="26"/></operator> <operator pos:line="15" pos:column="27">*<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="28">cb<pos:position pos:line="15" pos:column="30"/></name></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt></block></then>
	<else pos:line="16" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">memset<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><operator pos:line="17" pos:column="24">&amp;<pos:position pos:line="17" pos:column="29"/></operator><name><name pos:line="17" pos:column="25">cmd<pos:position pos:line="17" pos:column="28"/></name><operator pos:line="17" pos:column="28">-&gt;<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="30">cb<pos:position pos:line="17" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="34">0<pos:position pos:line="17" pos:column="35"/></literal></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="37">sizeof<argument_list pos:line="17" pos:column="43">(<argument><expr><name><name pos:line="17" pos:column="44">cmd<pos:position pos:line="17" pos:column="47"/></name><operator pos:line="17" pos:column="47">-&gt;<pos:position pos:line="17" pos:column="52"/></operator><name pos:line="17" pos:column="49">cb<pos:position pos:line="17" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="54"/></expr_stmt></block></else></if>

	<while pos:line="19" pos:column="9">while <condition pos:line="19" pos:column="15">(<expr><name><name pos:line="19" pos:column="16">imap<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">-&gt;<pos:position pos:line="19" pos:column="25"/></operator><name pos:line="19" pos:column="22">literal_pending<pos:position pos:line="19" pos:column="37"/></name></name></expr>)<pos:position pos:line="19" pos:column="38"/></condition>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">get_cmd_result<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">ctx<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="37">NULL<pos:position pos:line="20" pos:column="41"/></name></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt></block></while>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name><name pos:line="22" pos:column="14">cmd<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">-&gt;<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="19">cb<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">.<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">data<pos:position pos:line="22" pos:column="26"/></name></name></expr>)<pos:position pos:line="22" pos:column="27"/></condition><then pos:line="22" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">bufl<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">=<pos:position pos:line="23" pos:column="23"/></operator> <call><name pos:line="23" pos:column="24">nfsnprintf<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">buf<pos:position pos:line="23" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="40">sizeof<argument_list pos:line="23" pos:column="46">(<argument><expr><name pos:line="23" pos:column="47">buf<pos:position pos:line="23" pos:column="50"/></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="53">"%d %s\r\n"<pos:position pos:line="23" pos:column="64"/></literal></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="66">cmd<pos:position pos:line="23" pos:column="69"/></name><operator pos:line="23" pos:column="69">-&gt;<pos:position pos:line="23" pos:column="74"/></operator><name pos:line="23" pos:column="71">tag<pos:position pos:line="23" pos:column="74"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="76">cmd<pos:position pos:line="23" pos:column="79"/></name><operator pos:line="23" pos:column="79">-&gt;<pos:position pos:line="23" pos:column="84"/></operator><name pos:line="23" pos:column="81">cmd<pos:position pos:line="23" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="86"/></expr_stmt></block></then>
	<else pos:line="24" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">bufl<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <call><name pos:line="25" pos:column="24">nfsnprintf<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">buf<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="40">sizeof<argument_list pos:line="25" pos:column="46">(<argument><expr><name pos:line="25" pos:column="47">buf<pos:position pos:line="25" pos:column="50"/></name></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="53">"%d %s{%d%s}\r\n"<pos:position pos:line="25" pos:column="70"/></literal></expr></argument>,
				  <argument><expr><name><name pos:line="26" pos:column="35">cmd<pos:position pos:line="26" pos:column="38"/></name><operator pos:line="26" pos:column="38">-&gt;<pos:position pos:line="26" pos:column="43"/></operator><name pos:line="26" pos:column="40">tag<pos:position pos:line="26" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="45">cmd<pos:position pos:line="26" pos:column="48"/></name><operator pos:line="26" pos:column="48">-&gt;<pos:position pos:line="26" pos:column="53"/></operator><name pos:line="26" pos:column="50">cmd<pos:position pos:line="26" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="55">cmd<pos:position pos:line="26" pos:column="58"/></name><operator pos:line="26" pos:column="58">-&gt;<pos:position pos:line="26" pos:column="63"/></operator><name pos:line="26" pos:column="60">cb<pos:position pos:line="26" pos:column="62"/></name><operator pos:line="26" pos:column="62">.<pos:position pos:line="26" pos:column="63"/></operator><name pos:line="26" pos:column="63">dlen<pos:position pos:line="26" pos:column="67"/></name></name></expr></argument>,
				  <argument><expr><ternary><condition><expr><call><name pos:line="27" pos:column="35">CAP<pos:position pos:line="27" pos:column="38"/></name><argument_list pos:line="27" pos:column="38">(<argument><expr><name pos:line="27" pos:column="39">LITERALPLUS<pos:position pos:line="27" pos:column="50"/></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr> ?<pos:position pos:line="27" pos:column="53"/></condition><then pos:line="27" pos:column="53"> <expr><literal type="string" pos:line="27" pos:column="54">"+"<pos:position pos:line="27" pos:column="57"/></literal></expr> <pos:position pos:line="27" pos:column="58"/></then><else pos:line="27" pos:column="58">: <expr><literal type="string" pos:line="27" pos:column="60">""<pos:position pos:line="27" pos:column="62"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="27" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="64"/></expr_stmt></block></else></if>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><literal type="number" pos:line="29" pos:column="13">0<pos:position pos:line="29" pos:column="14"/></literal> <operator pos:line="29" pos:column="15">&lt;<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="17">verbosity<pos:position pos:line="29" pos:column="26"/></name></expr>)<pos:position pos:line="29" pos:column="27"/></condition><then pos:line="29" pos:column="27"> <block pos:line="29" pos:column="28">{
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name><name pos:line="30" pos:column="21">imap<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">-&gt;<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="27">num_in_progress<pos:position pos:line="30" pos:column="42"/></name></name></expr>)<pos:position pos:line="30" pos:column="43"/></condition><then pos:line="30" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">printf<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><literal type="string" pos:line="31" pos:column="32">"(%d in progress) "<pos:position pos:line="31" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="53">imap<pos:position pos:line="31" pos:column="57"/></name><operator pos:line="31" pos:column="57">-&gt;<pos:position pos:line="31" pos:column="62"/></operator><name pos:line="31" pos:column="59">num_in_progress<pos:position pos:line="31" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="76"/></expr_stmt></block></then></if>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><operator pos:line="32" pos:column="21">!<pos:position pos:line="32" pos:column="22"/></operator><call><name pos:line="32" pos:column="22">starts_with<pos:position pos:line="32" pos:column="33"/></name><argument_list pos:line="32" pos:column="33">(<argument><expr><name><name pos:line="32" pos:column="34">cmd<pos:position pos:line="32" pos:column="37"/></name><operator pos:line="32" pos:column="37">-&gt;<pos:position pos:line="32" pos:column="42"/></operator><name pos:line="32" pos:column="39">cmd<pos:position pos:line="32" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="44">"LOGIN"<pos:position pos:line="32" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="53"/></condition><then pos:line="32" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="25">printf<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><literal type="string" pos:line="33" pos:column="32">"&gt;&gt;&gt; %s"<pos:position pos:line="33" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="42">buf<pos:position pos:line="33" pos:column="45"/></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt></block></then>
		<else pos:line="34" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="25">printf<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><literal type="string" pos:line="35" pos:column="32">"&gt;&gt;&gt; %d LOGIN &lt;user&gt; &lt;pass&gt;\n"<pos:position pos:line="35" pos:column="83"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="64">cmd<pos:position pos:line="35" pos:column="67"/></name><operator pos:line="35" pos:column="67">-&gt;<pos:position pos:line="35" pos:column="72"/></operator><name pos:line="35" pos:column="69">tag<pos:position pos:line="35" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="74"/></expr_stmt></block></else></if>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">socket_write<pos:position pos:line="37" pos:column="25"/></name><argument_list pos:line="37" pos:column="25">(<argument><expr><operator pos:line="37" pos:column="26">&amp;<pos:position pos:line="37" pos:column="31"/></operator><name><name pos:line="37" pos:column="27">imap<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">-&gt;<pos:position pos:line="37" pos:column="36"/></operator><name pos:line="37" pos:column="33">buf<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">.<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="37">sock<pos:position pos:line="37" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="43">buf<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">bufl<pos:position pos:line="37" pos:column="52"/></name></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call> <operator pos:line="37" pos:column="54">!=<pos:position pos:line="37" pos:column="56"/></operator> <name pos:line="37" pos:column="57">bufl<pos:position pos:line="37" pos:column="61"/></name></expr>)<pos:position pos:line="37" pos:column="62"/></condition><then pos:line="37" pos:column="62"> <block pos:line="37" pos:column="63">{
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">free<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name><name pos:line="38" pos:column="22">cmd<pos:position pos:line="38" pos:column="25"/></name><operator pos:line="38" pos:column="25">-&gt;<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="27">cmd<pos:position pos:line="38" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">free<pos:position pos:line="39" pos:column="21"/></name><argument_list pos:line="39" pos:column="21">(<argument><expr><name pos:line="39" pos:column="22">cmd<pos:position pos:line="39" pos:column="25"/></name></expr></argument>)<pos:position pos:line="39" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">cb<pos:position pos:line="40" pos:column="23"/></name></expr>)<pos:position pos:line="40" pos:column="24"/></condition><then pos:line="40" pos:column="24">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="25">free<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">(<argument><expr><name><name pos:line="41" pos:column="30">cb<pos:position pos:line="41" pos:column="32"/></name><operator pos:line="41" pos:column="32">-&gt;<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="34">data<pos:position pos:line="41" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt></block></then></if>
		<return pos:line="42" pos:column="17">return <expr><name pos:line="42" pos:column="24">NULL<pos:position pos:line="42" pos:column="28"/></name></expr>;<pos:position pos:line="42" pos:column="29"/></return>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name><name pos:line="44" pos:column="13">cmd<pos:position pos:line="44" pos:column="16"/></name><operator pos:line="44" pos:column="16">-&gt;<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="18">cb<pos:position pos:line="44" pos:column="20"/></name><operator pos:line="44" pos:column="20">.<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="21">data<pos:position pos:line="44" pos:column="25"/></name></name></expr>)<pos:position pos:line="44" pos:column="26"/></condition><then pos:line="44" pos:column="26"> <block pos:line="44" pos:column="27">{
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><call><name pos:line="45" pos:column="21">CAP<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">LITERALPLUS<pos:position pos:line="45" pos:column="36"/></name></expr></argument>)<pos:position pos:line="45" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="38"/></condition><then pos:line="45" pos:column="38"> <block pos:line="45" pos:column="39">{
			<expr_stmt><expr><name pos:line="46" pos:column="25">n<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">=<pos:position pos:line="46" pos:column="28"/></operator> <call><name pos:line="46" pos:column="29">socket_write<pos:position pos:line="46" pos:column="41"/></name><argument_list pos:line="46" pos:column="41">(<argument><expr><operator pos:line="46" pos:column="42">&amp;<pos:position pos:line="46" pos:column="47"/></operator><name><name pos:line="46" pos:column="43">imap<pos:position pos:line="46" pos:column="47"/></name><operator pos:line="46" pos:column="47">-&gt;<pos:position pos:line="46" pos:column="52"/></operator><name pos:line="46" pos:column="49">buf<pos:position pos:line="46" pos:column="52"/></name><operator pos:line="46" pos:column="52">.<pos:position pos:line="46" pos:column="53"/></operator><name pos:line="46" pos:column="53">sock<pos:position pos:line="46" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="59">cmd<pos:position pos:line="46" pos:column="62"/></name><operator pos:line="46" pos:column="62">-&gt;<pos:position pos:line="46" pos:column="67"/></operator><name pos:line="46" pos:column="64">cb<pos:position pos:line="46" pos:column="66"/></name><operator pos:line="46" pos:column="66">.<pos:position pos:line="46" pos:column="67"/></operator><name pos:line="46" pos:column="67">data<pos:position pos:line="46" pos:column="71"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="73">cmd<pos:position pos:line="46" pos:column="76"/></name><operator pos:line="46" pos:column="76">-&gt;<pos:position pos:line="46" pos:column="81"/></operator><name pos:line="46" pos:column="78">cb<pos:position pos:line="46" pos:column="80"/></name><operator pos:line="46" pos:column="80">.<pos:position pos:line="46" pos:column="81"/></operator><name pos:line="46" pos:column="81">dlen<pos:position pos:line="46" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="87"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">free<pos:position pos:line="47" pos:column="29"/></name><argument_list pos:line="47" pos:column="29">(<argument><expr><name><name pos:line="47" pos:column="30">cmd<pos:position pos:line="47" pos:column="33"/></name><operator pos:line="47" pos:column="33">-&gt;<pos:position pos:line="47" pos:column="38"/></operator><name pos:line="47" pos:column="35">cb<pos:position pos:line="47" pos:column="37"/></name><operator pos:line="47" pos:column="37">.<pos:position pos:line="47" pos:column="38"/></operator><name pos:line="47" pos:column="38">data<pos:position pos:line="47" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="44"/></expr_stmt>
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><name pos:line="48" pos:column="29">n<pos:position pos:line="48" pos:column="30"/></name> <operator pos:line="48" pos:column="31">!=<pos:position pos:line="48" pos:column="33"/></operator> <name><name pos:line="48" pos:column="34">cmd<pos:position pos:line="48" pos:column="37"/></name><operator pos:line="48" pos:column="37">-&gt;<pos:position pos:line="48" pos:column="42"/></operator><name pos:line="48" pos:column="39">cb<pos:position pos:line="48" pos:column="41"/></name><operator pos:line="48" pos:column="41">.<pos:position pos:line="48" pos:column="42"/></operator><name pos:line="48" pos:column="42">dlen<pos:position pos:line="48" pos:column="46"/></name></name> <operator pos:line="48" pos:column="47">||<pos:position pos:line="48" pos:column="49"/></operator>
			    <call><name pos:line="49" pos:column="29">socket_write<pos:position pos:line="49" pos:column="41"/></name><argument_list pos:line="49" pos:column="41">(<argument><expr><operator pos:line="49" pos:column="42">&amp;<pos:position pos:line="49" pos:column="47"/></operator><name><name pos:line="49" pos:column="43">imap<pos:position pos:line="49" pos:column="47"/></name><operator pos:line="49" pos:column="47">-&gt;<pos:position pos:line="49" pos:column="52"/></operator><name pos:line="49" pos:column="49">buf<pos:position pos:line="49" pos:column="52"/></name><operator pos:line="49" pos:column="52">.<pos:position pos:line="49" pos:column="53"/></operator><name pos:line="49" pos:column="53">sock<pos:position pos:line="49" pos:column="57"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="59">"\r\n"<pos:position pos:line="49" pos:column="65"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="67">2<pos:position pos:line="49" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="69"/></argument_list></call> <operator pos:line="49" pos:column="70">!=<pos:position pos:line="49" pos:column="72"/></operator> <literal type="number" pos:line="49" pos:column="73">2<pos:position pos:line="49" pos:column="74"/></literal></expr>)<pos:position pos:line="49" pos:column="75"/></condition><then pos:line="49" pos:column="75"> <block pos:line="49" pos:column="76">{
				<expr_stmt><expr><call><name pos:line="50" pos:column="33">free<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name><name pos:line="50" pos:column="38">cmd<pos:position pos:line="50" pos:column="41"/></name><operator pos:line="50" pos:column="41">-&gt;<pos:position pos:line="50" pos:column="46"/></operator><name pos:line="50" pos:column="43">cmd<pos:position pos:line="50" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="51" pos:column="33">free<pos:position pos:line="51" pos:column="37"/></name><argument_list pos:line="51" pos:column="37">(<argument><expr><name pos:line="51" pos:column="38">cmd<pos:position pos:line="51" pos:column="41"/></name></expr></argument>)<pos:position pos:line="51" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="43"/></expr_stmt>
				<return pos:line="52" pos:column="33">return <expr><name pos:line="52" pos:column="40">NULL<pos:position pos:line="52" pos:column="44"/></name></expr>;<pos:position pos:line="52" pos:column="45"/></return>
			}<pos:position pos:line="53" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="54" pos:column="25">cmd<pos:position pos:line="54" pos:column="28"/></name><operator pos:line="54" pos:column="28">-&gt;<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="30">cb<pos:position pos:line="54" pos:column="32"/></name><operator pos:line="54" pos:column="32">.<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="33">data<pos:position pos:line="54" pos:column="37"/></name></name> <operator pos:line="54" pos:column="38">=<pos:position pos:line="54" pos:column="39"/></operator> <name pos:line="54" pos:column="40">NULL<pos:position pos:line="54" pos:column="44"/></name></expr>;<pos:position pos:line="54" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="55" pos:column="18"/></block></then> <else pos:line="55" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="56" pos:column="25">imap<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">-&gt;<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="31">literal_pending<pos:position pos:line="56" pos:column="46"/></name></name> <operator pos:line="56" pos:column="47">=<pos:position pos:line="56" pos:column="48"/></operator> <literal type="number" pos:line="56" pos:column="49">1<pos:position pos:line="56" pos:column="50"/></literal></expr>;<pos:position pos:line="56" pos:column="51"/></expr_stmt></block></else></if>
	}<pos:position pos:line="57" pos:column="10"/></block></then> <elseif pos:line="57" pos:column="11">else <if pos:line="57" pos:column="16">if <condition pos:line="57" pos:column="19">(<expr><name><name pos:line="57" pos:column="20">cmd<pos:position pos:line="57" pos:column="23"/></name><operator pos:line="57" pos:column="23">-&gt;<pos:position pos:line="57" pos:column="28"/></operator><name pos:line="57" pos:column="25">cb<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">.<pos:position pos:line="57" pos:column="28"/></operator><name pos:line="57" pos:column="28">cont<pos:position pos:line="57" pos:column="32"/></name></name></expr>)<pos:position pos:line="57" pos:column="33"/></condition><then pos:line="57" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="58" pos:column="17">imap<pos:position pos:line="58" pos:column="21"/></name><operator pos:line="58" pos:column="21">-&gt;<pos:position pos:line="58" pos:column="26"/></operator><name pos:line="58" pos:column="23">literal_pending<pos:position pos:line="58" pos:column="38"/></name></name> <operator pos:line="58" pos:column="39">=<pos:position pos:line="58" pos:column="40"/></operator> <literal type="number" pos:line="58" pos:column="41">1<pos:position pos:line="58" pos:column="42"/></literal></expr>;<pos:position pos:line="58" pos:column="43"/></expr_stmt></block></then></if></elseif></if>
	<expr_stmt><expr><name><name pos:line="59" pos:column="9">cmd<pos:position pos:line="59" pos:column="12"/></name><operator pos:line="59" pos:column="12">-&gt;<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="14">next<pos:position pos:line="59" pos:column="18"/></name></name> <operator pos:line="59" pos:column="19">=<pos:position pos:line="59" pos:column="20"/></operator> <name pos:line="59" pos:column="21">NULL<pos:position pos:line="59" pos:column="25"/></name></expr>;<pos:position pos:line="59" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="60" pos:column="9">*<pos:position pos:line="60" pos:column="10"/></operator><name><name pos:line="60" pos:column="10">imap<pos:position pos:line="60" pos:column="14"/></name><operator pos:line="60" pos:column="14">-&gt;<pos:position pos:line="60" pos:column="19"/></operator><name pos:line="60" pos:column="16">in_progress_append<pos:position pos:line="60" pos:column="34"/></name></name> <operator pos:line="60" pos:column="35">=<pos:position pos:line="60" pos:column="36"/></operator> <name pos:line="60" pos:column="37">cmd<pos:position pos:line="60" pos:column="40"/></name></expr>;<pos:position pos:line="60" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="61" pos:column="9">imap<pos:position pos:line="61" pos:column="13"/></name><operator pos:line="61" pos:column="13">-&gt;<pos:position pos:line="61" pos:column="18"/></operator><name pos:line="61" pos:column="15">in_progress_append<pos:position pos:line="61" pos:column="33"/></name></name> <operator pos:line="61" pos:column="34">=<pos:position pos:line="61" pos:column="35"/></operator> <operator pos:line="61" pos:column="36">&amp;<pos:position pos:line="61" pos:column="41"/></operator><name><name pos:line="61" pos:column="37">cmd<pos:position pos:line="61" pos:column="40"/></name><operator pos:line="61" pos:column="40">-&gt;<pos:position pos:line="61" pos:column="45"/></operator><name pos:line="61" pos:column="42">next<pos:position pos:line="61" pos:column="46"/></name></name></expr>;<pos:position pos:line="61" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="62" pos:column="9">imap<pos:position pos:line="62" pos:column="13"/></name><operator pos:line="62" pos:column="13">-&gt;<pos:position pos:line="62" pos:column="18"/></operator><name pos:line="62" pos:column="15">num_in_progress<pos:position pos:line="62" pos:column="30"/></name></name><operator pos:line="62" pos:column="30">++<pos:position pos:line="62" pos:column="32"/></operator></expr>;<pos:position pos:line="62" pos:column="33"/></expr_stmt>
	<return pos:line="63" pos:column="9">return <expr><name pos:line="63" pos:column="16">cmd<pos:position pos:line="63" pos:column="19"/></name></expr>;<pos:position pos:line="63" pos:column="20"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
