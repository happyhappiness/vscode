<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_268_git-2.14.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">rebuild_bitmap<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">uint32_t<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">reposition<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>,
			  <parameter><decl><type><name><name pos:line="2" pos:column="27">struct<pos:position pos:line="2" pos:column="33"/></name> <name pos:line="2" pos:column="34">ewah_bitmap<pos:position pos:line="2" pos:column="45"/></name></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">source<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>,
			  <parameter><decl><type><name><name pos:line="3" pos:column="27">struct<pos:position pos:line="3" pos:column="33"/></name> <name pos:line="3" pos:column="34">bitmap<pos:position pos:line="3" pos:column="40"/></name></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">dest<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="47"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">uint32_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">pos<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><literal type="number" pos:line="5" pos:column="24">0<pos:position pos:line="5" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">ewah_iterator<pos:position pos:line="6" pos:column="29"/></name></name></type> <name pos:line="6" pos:column="30">it<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">eword_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">word<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">ewah_iterator_init<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><operator pos:line="9" pos:column="28">&amp;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="29">it<pos:position pos:line="9" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="33">source<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>

	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><call><name pos:line="11" pos:column="16">ewah_iterator_next<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><operator pos:line="11" pos:column="35">&amp;<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="36">word<pos:position pos:line="11" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="42">&amp;<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="43">it<pos:position pos:line="11" pos:column="45"/></name></expr></argument>)<pos:position pos:line="11" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="47"/></condition> <block pos:line="11" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">uint32_t<pos:position pos:line="12" pos:column="25"/></name></type> <name pos:line="12" pos:column="26">offset<pos:position pos:line="12" pos:column="32"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="34">bit_pos<pos:position pos:line="12" pos:column="41"/></name></decl>;<pos:position pos:line="12" pos:column="42"/></decl_stmt>

		<for pos:line="14" pos:column="17">for <control pos:line="14" pos:column="21">(<init><expr><name pos:line="14" pos:column="22">offset<pos:position pos:line="14" pos:column="28"/></name> <operator pos:line="14" pos:column="29">=<pos:position pos:line="14" pos:column="30"/></operator> <literal type="number" pos:line="14" pos:column="31">0<pos:position pos:line="14" pos:column="32"/></literal></expr>;<pos:position pos:line="14" pos:column="33"/></init> <condition><expr><name pos:line="14" pos:column="34">offset<pos:position pos:line="14" pos:column="40"/></name> <operator pos:line="14" pos:column="41">&lt;<pos:position pos:line="14" pos:column="45"/></operator> <name pos:line="14" pos:column="43">BITS_IN_EWORD<pos:position pos:line="14" pos:column="56"/></name></expr>;<pos:position pos:line="14" pos:column="57"/></condition> <incr><expr><operator pos:line="14" pos:column="58">++<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="60">offset<pos:position pos:line="14" pos:column="66"/></name></expr></incr>)<pos:position pos:line="14" pos:column="67"/></control> <block pos:line="14" pos:column="68">{
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><operator pos:line="15" pos:column="29">(<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">word<pos:position pos:line="15" pos:column="34"/></name> <operator pos:line="15" pos:column="35">&gt;&gt;<pos:position pos:line="15" pos:column="40"/></operator> <name pos:line="15" pos:column="38">offset<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">)<pos:position pos:line="15" pos:column="45"/></operator> <operator pos:line="15" pos:column="46">==<pos:position pos:line="15" pos:column="48"/></operator> <literal type="number" pos:line="15" pos:column="49">0<pos:position pos:line="15" pos:column="50"/></literal></expr>)<pos:position pos:line="15" pos:column="51"/></condition><then pos:line="15" pos:column="51">
				<block type="pseudo"><break pos:line="16" pos:column="33">break;<pos:position pos:line="16" pos:column="39"/></break></block></then></if>

			<expr_stmt><expr><name pos:line="18" pos:column="25">offset<pos:position pos:line="18" pos:column="31"/></name> <operator pos:line="18" pos:column="32">+=<pos:position pos:line="18" pos:column="34"/></operator> <call><name pos:line="18" pos:column="35">ewah_bit_ctz64<pos:position pos:line="18" pos:column="49"/></name><argument_list pos:line="18" pos:column="49">(<argument><expr><name pos:line="18" pos:column="50">word<pos:position pos:line="18" pos:column="54"/></name> <operator pos:line="18" pos:column="55">&gt;&gt;<pos:position pos:line="18" pos:column="60"/></operator> <name pos:line="18" pos:column="58">offset<pos:position pos:line="18" pos:column="64"/></name></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="66"/></expr_stmt>

			<expr_stmt><expr><name pos:line="20" pos:column="25">bit_pos<pos:position pos:line="20" pos:column="32"/></name> <operator pos:line="20" pos:column="33">=<pos:position pos:line="20" pos:column="34"/></operator> <name><name pos:line="20" pos:column="35">reposition<pos:position pos:line="20" pos:column="45"/></name><index pos:line="20" pos:column="45">[<expr><name pos:line="20" pos:column="46">pos<pos:position pos:line="20" pos:column="49"/></name> <operator pos:line="20" pos:column="50">+<pos:position pos:line="20" pos:column="51"/></operator> <name pos:line="20" pos:column="52">offset<pos:position pos:line="20" pos:column="58"/></name></expr>]<pos:position pos:line="20" pos:column="59"/></index></name></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><name pos:line="21" pos:column="29">bit_pos<pos:position pos:line="21" pos:column="36"/></name> <operator pos:line="21" pos:column="37">&gt;<pos:position pos:line="21" pos:column="41"/></operator> <literal type="number" pos:line="21" pos:column="39">0<pos:position pos:line="21" pos:column="40"/></literal></expr>)<pos:position pos:line="21" pos:column="41"/></condition><then pos:line="21" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="33">bitmap_set<pos:position pos:line="22" pos:column="43"/></name><argument_list pos:line="22" pos:column="43">(<argument><expr><name pos:line="22" pos:column="44">dest<pos:position pos:line="22" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="50">bit_pos<pos:position pos:line="22" pos:column="57"/></name> <operator pos:line="22" pos:column="58">-<pos:position pos:line="22" pos:column="59"/></operator> <literal type="number" pos:line="22" pos:column="60">1<pos:position pos:line="22" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="63"/></expr_stmt></block></then>
			<else pos:line="23" pos:column="25">else <comment type="block" pos:line="23" pos:column="30">/* can't reuse, we don't have the object */</comment>
				<block type="pseudo"><return pos:line="24" pos:column="33">return <expr><operator pos:line="24" pos:column="40">-<pos:position pos:line="24" pos:column="41"/></operator><literal type="number" pos:line="24" pos:column="41">1<pos:position pos:line="24" pos:column="42"/></literal></expr>;<pos:position pos:line="24" pos:column="43"/></return></block></else></if>
		}<pos:position pos:line="25" pos:column="18"/></block></for>

		<expr_stmt><expr><name pos:line="27" pos:column="17">pos<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">+=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">BITS_IN_EWORD<pos:position pos:line="27" pos:column="37"/></name></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></while>
	<return pos:line="29" pos:column="9">return <expr><literal type="number" pos:line="29" pos:column="16">0<pos:position pos:line="29" pos:column="17"/></literal></expr>;<pos:position pos:line="29" pos:column="18"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
