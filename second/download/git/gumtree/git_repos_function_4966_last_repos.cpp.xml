<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4966_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">blk_SHA1_Update<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">blk_SHA_CTX<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">ctx<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">void<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">data<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">unsigned<pos:position pos:line="1" pos:column="66"/></name> <name pos:line="1" pos:column="67">long<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">len<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">lenW<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name><name pos:line="3" pos:column="29">ctx<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">-&gt;<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="34">size<pos:position pos:line="3" pos:column="38"/></name></name> <operator pos:line="3" pos:column="39">&amp;<pos:position pos:line="3" pos:column="44"/></operator> <literal type="number" pos:line="3" pos:column="41">63<pos:position pos:line="3" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="44"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="5" pos:column="9">ctx<pos:position pos:line="5" pos:column="12"/></name><operator pos:line="5" pos:column="12">-&gt;<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="14">size<pos:position pos:line="5" pos:column="18"/></name></name> <operator pos:line="5" pos:column="19">+=<pos:position pos:line="5" pos:column="21"/></operator> <name pos:line="5" pos:column="22">len<pos:position pos:line="5" pos:column="25"/></name></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* Read the data into W and process blocks as they get full */</comment>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">lenW<pos:position pos:line="8" pos:column="17"/></name></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18"> <block pos:line="8" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">unsigned<pos:position pos:line="9" pos:column="25"/></name> <name pos:line="9" pos:column="26">int<pos:position pos:line="9" pos:column="29"/></name></type> <name pos:line="9" pos:column="30">left<pos:position pos:line="9" pos:column="34"/></name> <init pos:line="9" pos:column="35">= <expr><literal type="number" pos:line="9" pos:column="37">64<pos:position pos:line="9" pos:column="39"/></literal> <operator pos:line="9" pos:column="40">-<pos:position pos:line="9" pos:column="41"/></operator> <name pos:line="9" pos:column="42">lenW<pos:position pos:line="9" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="47"/></decl_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name pos:line="10" pos:column="21">len<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">&lt;<pos:position pos:line="10" pos:column="29"/></operator> <name pos:line="10" pos:column="27">left<pos:position pos:line="10" pos:column="31"/></name></expr>)<pos:position pos:line="10" pos:column="32"/></condition><then pos:line="10" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="25">left<pos:position pos:line="11" pos:column="29"/></name> <operator pos:line="11" pos:column="30">=<pos:position pos:line="11" pos:column="31"/></operator> <name pos:line="11" pos:column="32">len<pos:position pos:line="11" pos:column="35"/></name></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">memcpy<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">lenW<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">+<pos:position pos:line="12" pos:column="30"/></operator> <operator pos:line="12" pos:column="31">(<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="32">char<pos:position pos:line="12" pos:column="36"/></name> <operator pos:line="12" pos:column="37">*<pos:position pos:line="12" pos:column="38"/></operator><operator pos:line="12" pos:column="38">)<pos:position pos:line="12" pos:column="39"/></operator><name><name pos:line="12" pos:column="39">ctx<pos:position pos:line="12" pos:column="42"/></name><operator pos:line="12" pos:column="42">-&gt;<pos:position pos:line="12" pos:column="47"/></operator><name pos:line="12" pos:column="44">W<pos:position pos:line="12" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="47">data<pos:position pos:line="12" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="53">left<pos:position pos:line="12" pos:column="57"/></name></expr></argument>)<pos:position pos:line="12" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">lenW<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">=<pos:position pos:line="13" pos:column="23"/></operator> <operator pos:line="13" pos:column="24">(<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="25">lenW<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">+<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="32">left<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">)<pos:position pos:line="13" pos:column="37"/></operator> <operator pos:line="13" pos:column="38">&amp;<pos:position pos:line="13" pos:column="43"/></operator> <literal type="number" pos:line="13" pos:column="40">63<pos:position pos:line="13" pos:column="42"/></literal></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">len<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">-=<pos:position pos:line="14" pos:column="23"/></operator> <name pos:line="14" pos:column="24">left<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">data<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">=<pos:position pos:line="15" pos:column="23"/></operator> <operator pos:line="15" pos:column="24">(<pos:position pos:line="15" pos:column="25"/></operator><operator pos:line="15" pos:column="25">(<pos:position pos:line="15" pos:column="26"/></operator><specifier pos:line="15" pos:column="26">const<pos:position pos:line="15" pos:column="31"/></specifier> <name pos:line="15" pos:column="32">char<pos:position pos:line="15" pos:column="36"/></name> <operator pos:line="15" pos:column="37">*<pos:position pos:line="15" pos:column="38"/></operator><operator pos:line="15" pos:column="38">)<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="39">data<pos:position pos:line="15" pos:column="43"/></name> <operator pos:line="15" pos:column="44">+<pos:position pos:line="15" pos:column="45"/></operator> <name pos:line="15" pos:column="46">left<pos:position pos:line="15" pos:column="50"/></name><operator pos:line="15" pos:column="50">)<pos:position pos:line="15" pos:column="51"/></operator></expr>;<pos:position pos:line="15" pos:column="52"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">lenW<pos:position pos:line="16" pos:column="25"/></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26">
			<block type="pseudo"><return pos:line="17" pos:column="25">return;<pos:position pos:line="17" pos:column="32"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">blk_SHA1_Block<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">ctx<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="37">ctx<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">-&gt;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="42">W<pos:position pos:line="18" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	<while pos:line="20" pos:column="9">while <condition pos:line="20" pos:column="15">(<expr><name pos:line="20" pos:column="16">len<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">&gt;=<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="23">64<pos:position pos:line="20" pos:column="25"/></literal></expr>)<pos:position pos:line="20" pos:column="26"/></condition> <block pos:line="20" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">blk_SHA1_Block<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">ctx<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="37">data<pos:position pos:line="21" pos:column="41"/></name></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">data<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <operator pos:line="22" pos:column="24">(<pos:position pos:line="22" pos:column="25"/></operator><operator pos:line="22" pos:column="25">(<pos:position pos:line="22" pos:column="26"/></operator><specifier pos:line="22" pos:column="26">const<pos:position pos:line="22" pos:column="31"/></specifier> <name pos:line="22" pos:column="32">char<pos:position pos:line="22" pos:column="36"/></name> <operator pos:line="22" pos:column="37">*<pos:position pos:line="22" pos:column="38"/></operator><operator pos:line="22" pos:column="38">)<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="39">data<pos:position pos:line="22" pos:column="43"/></name> <operator pos:line="22" pos:column="44">+<pos:position pos:line="22" pos:column="45"/></operator> <literal type="number" pos:line="22" pos:column="46">64<pos:position pos:line="22" pos:column="48"/></literal><operator pos:line="22" pos:column="48">)<pos:position pos:line="22" pos:column="49"/></operator></expr>;<pos:position pos:line="22" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">len<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">-=<pos:position pos:line="23" pos:column="23"/></operator> <literal type="number" pos:line="23" pos:column="24">64<pos:position pos:line="23" pos:column="26"/></literal></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></while>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">len<pos:position pos:line="25" pos:column="16"/></name></expr>)<pos:position pos:line="25" pos:column="17"/></condition><then pos:line="25" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">memcpy<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name><name pos:line="26" pos:column="24">ctx<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-&gt;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="29">W<pos:position pos:line="26" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="32">data<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="38">len<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt></block></then></if>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
