<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4680_git-2.4.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">sha1_object<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">data<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="43">struct<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">object_entry<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">obj_entry<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="2" pos:column="25">unsigned<pos:position pos:line="2" pos:column="33"/></name> <name pos:line="2" pos:column="34">long<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">size<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="45">enum<pos:position pos:line="2" pos:column="49"/></name> <name pos:line="2" pos:column="50">object_type<pos:position pos:line="2" pos:column="61"/></name></name></type> <name pos:line="2" pos:column="62">type<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="3" pos:column="25">const<pos:position pos:line="3" pos:column="30"/></specifier> <name pos:line="3" pos:column="31">unsigned<pos:position pos:line="3" pos:column="39"/></name> <name pos:line="3" pos:column="40">char<pos:position pos:line="3" pos:column="44"/></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="46">sha1<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="51"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">void<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">new_data<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><name pos:line="5" pos:column="26">NULL<pos:position pos:line="5" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">collision_test_needed<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">assert<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">data<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">||<pos:position pos:line="8" pos:column="23"/></operator> <name pos:line="8" pos:column="24">obj_entry<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">read_lock<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">()<pos:position pos:line="10" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name pos:line="11" pos:column="9">collision_test_needed<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">=<pos:position pos:line="11" pos:column="32"/></operator> <call><name pos:line="11" pos:column="33">has_sha1_file<pos:position pos:line="11" pos:column="46"/></name><argument_list pos:line="11" pos:column="46">(<argument><expr><name pos:line="11" pos:column="47">sha1<pos:position pos:line="11" pos:column="51"/></name></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">read_unlock<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">()<pos:position pos:line="12" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="23"/></expr_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">collision_test_needed<pos:position pos:line="14" pos:column="34"/></name> <operator pos:line="14" pos:column="35">&amp;&amp;<pos:position pos:line="14" pos:column="45"/></operator> <operator pos:line="14" pos:column="38">!<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="39">data<pos:position pos:line="14" pos:column="43"/></name></expr>)<pos:position pos:line="14" pos:column="44"/></condition><then pos:line="14" pos:column="44"> <block pos:line="14" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">read_lock<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">()<pos:position pos:line="15" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><call><name pos:line="16" pos:column="22">check_collison<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><name pos:line="16" pos:column="37">obj_entry<pos:position pos:line="16" pos:column="46"/></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="48"/></condition><then pos:line="16" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="25">collision_test_needed<pos:position pos:line="17" pos:column="46"/></name> <operator pos:line="17" pos:column="47">=<pos:position pos:line="17" pos:column="48"/></operator> <literal type="number" pos:line="17" pos:column="49">0<pos:position pos:line="17" pos:column="50"/></literal></expr>;<pos:position pos:line="17" pos:column="51"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">read_unlock<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">()<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">collision_test_needed<pos:position pos:line="20" pos:column="34"/></name></expr>)<pos:position pos:line="20" pos:column="35"/></condition><then pos:line="20" pos:column="35"> <block pos:line="20" pos:column="36">{
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">void<pos:position pos:line="21" pos:column="21"/></name> <modifier pos:line="21" pos:column="22">*<pos:position pos:line="21" pos:column="23"/></modifier></type><name pos:line="21" pos:column="23">has_data<pos:position pos:line="21" pos:column="31"/></name></decl>;<pos:position pos:line="21" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="22" pos:column="17">enum<pos:position pos:line="22" pos:column="21"/></name> <name pos:line="22" pos:column="22">object_type<pos:position pos:line="22" pos:column="33"/></name></name></type> <name pos:line="22" pos:column="34">has_type<pos:position pos:line="22" pos:column="42"/></name></decl>;<pos:position pos:line="22" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">unsigned<pos:position pos:line="23" pos:column="25"/></name> <name pos:line="23" pos:column="26">long<pos:position pos:line="23" pos:column="30"/></name></type> <name pos:line="23" pos:column="31">has_size<pos:position pos:line="23" pos:column="39"/></name></decl>;<pos:position pos:line="23" pos:column="40"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">read_lock<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">()<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="25" pos:column="17">has_type<pos:position pos:line="25" pos:column="25"/></name> <operator pos:line="25" pos:column="26">=<pos:position pos:line="25" pos:column="27"/></operator> <call><name pos:line="25" pos:column="28">sha1_object_info<pos:position pos:line="25" pos:column="44"/></name><argument_list pos:line="25" pos:column="44">(<argument><expr><name pos:line="25" pos:column="45">sha1<pos:position pos:line="25" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="51">&amp;<pos:position pos:line="25" pos:column="56"/></operator><name pos:line="25" pos:column="52">has_size<pos:position pos:line="25" pos:column="60"/></name></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="62"/></expr_stmt>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">has_type<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">!=<pos:position pos:line="26" pos:column="32"/></operator> <name pos:line="26" pos:column="33">type<pos:position pos:line="26" pos:column="37"/></name> <operator pos:line="26" pos:column="38">||<pos:position pos:line="26" pos:column="40"/></operator> <name pos:line="26" pos:column="41">has_size<pos:position pos:line="26" pos:column="49"/></name> <operator pos:line="26" pos:column="50">!=<pos:position pos:line="26" pos:column="52"/></operator> <name pos:line="26" pos:column="53">size<pos:position pos:line="26" pos:column="57"/></name></expr>)<pos:position pos:line="26" pos:column="58"/></condition><then pos:line="26" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">die<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><call><name pos:line="27" pos:column="29">_<pos:position pos:line="27" pos:column="30"/></name><argument_list pos:line="27" pos:column="30">(<argument><expr><literal type="string" pos:line="27" pos:column="31">"SHA1 COLLISION FOUND WITH %s !"<pos:position pos:line="27" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="66">sha1_to_hex<pos:position pos:line="27" pos:column="77"/></name><argument_list pos:line="27" pos:column="77">(<argument><expr><name pos:line="27" pos:column="78">sha1<pos:position pos:line="27" pos:column="82"/></name></expr></argument>)<pos:position pos:line="27" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="85"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="28" pos:column="17">has_data<pos:position pos:line="28" pos:column="25"/></name> <operator pos:line="28" pos:column="26">=<pos:position pos:line="28" pos:column="27"/></operator> <call><name pos:line="28" pos:column="28">read_sha1_file<pos:position pos:line="28" pos:column="42"/></name><argument_list pos:line="28" pos:column="42">(<argument><expr><name pos:line="28" pos:column="43">sha1<pos:position pos:line="28" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="49">&amp;<pos:position pos:line="28" pos:column="54"/></operator><name pos:line="28" pos:column="50">has_type<pos:position pos:line="28" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="60">&amp;<pos:position pos:line="28" pos:column="65"/></operator><name pos:line="28" pos:column="61">has_size<pos:position pos:line="28" pos:column="69"/></name></expr></argument>)<pos:position pos:line="28" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="71"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">read_unlock<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">()<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">!<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">data<pos:position pos:line="30" pos:column="26"/></name></expr>)<pos:position pos:line="30" pos:column="27"/></condition><then pos:line="30" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="25">data<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">=<pos:position pos:line="31" pos:column="31"/></operator> <name pos:line="31" pos:column="32">new_data<pos:position pos:line="31" pos:column="40"/></name> <operator pos:line="31" pos:column="41">=<pos:position pos:line="31" pos:column="42"/></operator> <call><name pos:line="31" pos:column="43">get_data_from_pack<pos:position pos:line="31" pos:column="61"/></name><argument_list pos:line="31" pos:column="61">(<argument><expr><name pos:line="31" pos:column="62">obj_entry<pos:position pos:line="31" pos:column="71"/></name></expr></argument>)<pos:position pos:line="31" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="73"/></expr_stmt></block></then></if>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><operator pos:line="32" pos:column="21">!<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">has_data<pos:position pos:line="32" pos:column="30"/></name></expr>)<pos:position pos:line="32" pos:column="31"/></condition><then pos:line="32" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="25">die<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><call><name pos:line="33" pos:column="29">_<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><literal type="string" pos:line="33" pos:column="31">"cannot read existing object %s"<pos:position pos:line="33" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="66">sha1_to_hex<pos:position pos:line="33" pos:column="77"/></name><argument_list pos:line="33" pos:column="77">(<argument><expr><name pos:line="33" pos:column="78">sha1<pos:position pos:line="33" pos:column="82"/></name></expr></argument>)<pos:position pos:line="33" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="85"/></expr_stmt></block></then></if>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">size<pos:position pos:line="34" pos:column="25"/></name> <operator pos:line="34" pos:column="26">!=<pos:position pos:line="34" pos:column="28"/></operator> <name pos:line="34" pos:column="29">has_size<pos:position pos:line="34" pos:column="37"/></name> <operator pos:line="34" pos:column="38">||<pos:position pos:line="34" pos:column="40"/></operator> <name pos:line="34" pos:column="41">type<pos:position pos:line="34" pos:column="45"/></name> <operator pos:line="34" pos:column="46">!=<pos:position pos:line="34" pos:column="48"/></operator> <name pos:line="34" pos:column="49">has_type<pos:position pos:line="34" pos:column="57"/></name> <operator pos:line="34" pos:column="58">||<pos:position pos:line="34" pos:column="60"/></operator>
		    <call><name pos:line="35" pos:column="21">memcmp<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">data<pos:position pos:line="35" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="34">has_data<pos:position pos:line="35" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="44">size<pos:position pos:line="35" pos:column="48"/></name></expr></argument>)<pos:position pos:line="35" pos:column="49"/></argument_list></call> <operator pos:line="35" pos:column="50">!=<pos:position pos:line="35" pos:column="52"/></operator> <literal type="number" pos:line="35" pos:column="53">0<pos:position pos:line="35" pos:column="54"/></literal></expr>)<pos:position pos:line="35" pos:column="55"/></condition><then pos:line="35" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="25">die<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><call><name pos:line="36" pos:column="29">_<pos:position pos:line="36" pos:column="30"/></name><argument_list pos:line="36" pos:column="30">(<argument><expr><literal type="string" pos:line="36" pos:column="31">"SHA1 COLLISION FOUND WITH %s !"<pos:position pos:line="36" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="66">sha1_to_hex<pos:position pos:line="36" pos:column="77"/></name><argument_list pos:line="36" pos:column="77">(<argument><expr><name pos:line="36" pos:column="78">sha1<pos:position pos:line="36" pos:column="82"/></name></expr></argument>)<pos:position pos:line="36" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="85"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">free<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><name pos:line="37" pos:column="22">has_data<pos:position pos:line="37" pos:column="30"/></name></expr></argument>)<pos:position pos:line="37" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">strict<pos:position pos:line="40" pos:column="19"/></name></expr>)<pos:position pos:line="40" pos:column="20"/></condition><then pos:line="40" pos:column="20"> <block pos:line="40" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">read_lock<pos:position pos:line="41" pos:column="26"/></name><argument_list pos:line="41" pos:column="26">()<pos:position pos:line="41" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="29"/></expr_stmt>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">type<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">==<pos:position pos:line="42" pos:column="28"/></operator> <name pos:line="42" pos:column="29">OBJ_BLOB<pos:position pos:line="42" pos:column="37"/></name></expr>)<pos:position pos:line="42" pos:column="38"/></condition><then pos:line="42" pos:column="38"> <block pos:line="42" pos:column="39">{
			<decl_stmt><decl><type><name><name pos:line="43" pos:column="25">struct<pos:position pos:line="43" pos:column="31"/></name> <name pos:line="43" pos:column="32">blob<pos:position pos:line="43" pos:column="36"/></name></name> <modifier pos:line="43" pos:column="37">*<pos:position pos:line="43" pos:column="38"/></modifier></type><name pos:line="43" pos:column="38">blob<pos:position pos:line="43" pos:column="42"/></name> <init pos:line="43" pos:column="43">= <expr><call><name pos:line="43" pos:column="45">lookup_blob<pos:position pos:line="43" pos:column="56"/></name><argument_list pos:line="43" pos:column="56">(<argument><expr><name pos:line="43" pos:column="57">sha1<pos:position pos:line="43" pos:column="61"/></name></expr></argument>)<pos:position pos:line="43" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="43" pos:column="63"/></decl_stmt>
			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><name pos:line="44" pos:column="29">blob<pos:position pos:line="44" pos:column="33"/></name></expr>)<pos:position pos:line="44" pos:column="34"/></condition><then pos:line="44" pos:column="34">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="45" pos:column="33">blob<pos:position pos:line="45" pos:column="37"/></name><operator pos:line="45" pos:column="37">-&gt;<pos:position pos:line="45" pos:column="42"/></operator><name pos:line="45" pos:column="39">object<pos:position pos:line="45" pos:column="45"/></name><operator pos:line="45" pos:column="45">.<pos:position pos:line="45" pos:column="46"/></operator><name pos:line="45" pos:column="46">flags<pos:position pos:line="45" pos:column="51"/></name></name> <operator pos:line="45" pos:column="52">|=<pos:position pos:line="45" pos:column="54"/></operator> <name pos:line="45" pos:column="55">FLAG_CHECKED<pos:position pos:line="45" pos:column="67"/></name></expr>;<pos:position pos:line="45" pos:column="68"/></expr_stmt></block></then>
			<else pos:line="46" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="33">die<pos:position pos:line="47" pos:column="36"/></name><argument_list pos:line="47" pos:column="36">(<argument><expr><call><name pos:line="47" pos:column="37">_<pos:position pos:line="47" pos:column="38"/></name><argument_list pos:line="47" pos:column="38">(<argument><expr><literal type="string" pos:line="47" pos:column="39">"invalid blob object %s"<pos:position pos:line="47" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="66">sha1_to_hex<pos:position pos:line="47" pos:column="77"/></name><argument_list pos:line="47" pos:column="77">(<argument><expr><name pos:line="47" pos:column="78">sha1<pos:position pos:line="47" pos:column="82"/></name></expr></argument>)<pos:position pos:line="47" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="85"/></expr_stmt></block></else></if>
		}<pos:position pos:line="48" pos:column="18"/></block></then> <else pos:line="48" pos:column="19">else <block pos:line="48" pos:column="24">{
			<decl_stmt><decl><type><name><name pos:line="49" pos:column="25">struct<pos:position pos:line="49" pos:column="31"/></name> <name pos:line="49" pos:column="32">object<pos:position pos:line="49" pos:column="38"/></name></name> <modifier pos:line="49" pos:column="39">*<pos:position pos:line="49" pos:column="40"/></modifier></type><name pos:line="49" pos:column="40">obj<pos:position pos:line="49" pos:column="43"/></name></decl>;<pos:position pos:line="49" pos:column="44"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="50" pos:column="25">int<pos:position pos:line="50" pos:column="28"/></name></type> <name pos:line="50" pos:column="29">eaten<pos:position pos:line="50" pos:column="34"/></name></decl>;<pos:position pos:line="50" pos:column="35"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">void<pos:position pos:line="51" pos:column="29"/></name> <modifier pos:line="51" pos:column="30">*<pos:position pos:line="51" pos:column="31"/></modifier></type><name pos:line="51" pos:column="31">buf<pos:position pos:line="51" pos:column="34"/></name> <init pos:line="51" pos:column="35">= <expr><operator pos:line="51" pos:column="37">(<pos:position pos:line="51" pos:column="38"/></operator><name pos:line="51" pos:column="38">void<pos:position pos:line="51" pos:column="42"/></name> <operator pos:line="51" pos:column="43">*<pos:position pos:line="51" pos:column="44"/></operator><operator pos:line="51" pos:column="44">)<pos:position pos:line="51" pos:column="45"/></operator> <name pos:line="51" pos:column="46">data<pos:position pos:line="51" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="51" pos:column="51"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="53" pos:column="25">assert<pos:position pos:line="53" pos:column="31"/></name><argument_list pos:line="53" pos:column="31">(<argument><expr><name pos:line="53" pos:column="32">data<pos:position pos:line="53" pos:column="36"/></name> <operator pos:line="53" pos:column="37">&amp;&amp;<pos:position pos:line="53" pos:column="47"/></operator> <literal type="string" pos:line="53" pos:column="40">"data can only be NULL for large _blobs_"<pos:position pos:line="53" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="83"/></expr_stmt>

			<comment type="block" pos:line="55" pos:column="25">/*
			 * we do not need to free the memory here, as the
			 * buf is deleted by the caller.
			 */</comment>
			<expr_stmt><expr><name pos:line="59" pos:column="25">obj<pos:position pos:line="59" pos:column="28"/></name> <operator pos:line="59" pos:column="29">=<pos:position pos:line="59" pos:column="30"/></operator> <call><name pos:line="59" pos:column="31">parse_object_buffer<pos:position pos:line="59" pos:column="50"/></name><argument_list pos:line="59" pos:column="50">(<argument><expr><name pos:line="59" pos:column="51">sha1<pos:position pos:line="59" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="57">type<pos:position pos:line="59" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="63">size<pos:position pos:line="59" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="69">buf<pos:position pos:line="59" pos:column="72"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="74">&amp;<pos:position pos:line="59" pos:column="79"/></operator><name pos:line="59" pos:column="75">eaten<pos:position pos:line="59" pos:column="80"/></name></expr></argument>)<pos:position pos:line="59" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="82"/></expr_stmt>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><operator pos:line="60" pos:column="29">!<pos:position pos:line="60" pos:column="30"/></operator><name pos:line="60" pos:column="30">obj<pos:position pos:line="60" pos:column="33"/></name></expr>)<pos:position pos:line="60" pos:column="34"/></condition><then pos:line="60" pos:column="34">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="33">die<pos:position pos:line="61" pos:column="36"/></name><argument_list pos:line="61" pos:column="36">(<argument><expr><call><name pos:line="61" pos:column="37">_<pos:position pos:line="61" pos:column="38"/></name><argument_list pos:line="61" pos:column="38">(<argument><expr><literal type="string" pos:line="61" pos:column="39">"invalid %s"<pos:position pos:line="61" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><name><typename pos:line="61" pos:column="54">typename<pos:position pos:line="61" pos:column="62"/></typename></name><operator pos:line="61" pos:column="62">(<pos:position pos:line="61" pos:column="63"/></operator><name pos:line="61" pos:column="63">type<pos:position pos:line="61" pos:column="67"/></name><operator pos:line="61" pos:column="67">)<pos:position pos:line="61" pos:column="68"/></operator></expr></argument>)<pos:position pos:line="61" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="70"/></expr_stmt></block></then></if>
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><name pos:line="62" pos:column="29">do_fsck_object<pos:position pos:line="62" pos:column="43"/></name> <operator pos:line="62" pos:column="44">&amp;&amp;<pos:position pos:line="62" pos:column="54"/></operator>
			    <call><name pos:line="63" pos:column="29">fsck_object<pos:position pos:line="63" pos:column="40"/></name><argument_list pos:line="63" pos:column="40">(<argument><expr><name pos:line="63" pos:column="41">obj<pos:position pos:line="63" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="46">buf<pos:position pos:line="63" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="51">size<pos:position pos:line="63" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="57">1<pos:position pos:line="63" pos:column="58"/></literal></expr></argument>,
				    <argument><expr><name pos:line="64" pos:column="37">fsck_error_function<pos:position pos:line="64" pos:column="56"/></name></expr></argument>)<pos:position pos:line="64" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="58"/></condition><then pos:line="64" pos:column="58">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="33">die<pos:position pos:line="65" pos:column="36"/></name><argument_list pos:line="65" pos:column="36">(<argument><expr><call><name pos:line="65" pos:column="37">_<pos:position pos:line="65" pos:column="38"/></name><argument_list pos:line="65" pos:column="38">(<argument><expr><literal type="string" pos:line="65" pos:column="39">"Error in object"<pos:position pos:line="65" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="59"/></expr_stmt></block></then></if>
			<if pos:line="66" pos:column="25">if <condition pos:line="66" pos:column="28">(<expr><call><name pos:line="66" pos:column="29">fsck_walk<pos:position pos:line="66" pos:column="38"/></name><argument_list pos:line="66" pos:column="38">(<argument><expr><name pos:line="66" pos:column="39">obj<pos:position pos:line="66" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="44">mark_link<pos:position pos:line="66" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="55">NULL<pos:position pos:line="66" pos:column="59"/></name></expr></argument>)<pos:position pos:line="66" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="61"/></condition><then pos:line="66" pos:column="61">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="33">die<pos:position pos:line="67" pos:column="36"/></name><argument_list pos:line="67" pos:column="36">(<argument><expr><call><name pos:line="67" pos:column="37">_<pos:position pos:line="67" pos:column="38"/></name><argument_list pos:line="67" pos:column="38">(<argument><expr><literal type="string" pos:line="67" pos:column="39">"Not all child objects of %s are reachable"<pos:position pos:line="67" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="83"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="67" pos:column="85">sha1_to_hex<pos:position pos:line="67" pos:column="96"/></name><argument_list pos:line="67" pos:column="96">(<argument><expr><name><name pos:line="67" pos:column="97">obj<pos:position pos:line="67" pos:column="100"/></name><operator pos:line="67" pos:column="100">-&gt;<pos:position pos:line="67" pos:column="105"/></operator><name pos:line="67" pos:column="102">sha1<pos:position pos:line="67" pos:column="106"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="107"/></argument_list></call></expr></argument>)<pos:position pos:line="67" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="109"/></expr_stmt></block></then></if>

			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><name><name pos:line="69" pos:column="29">obj<pos:position pos:line="69" pos:column="32"/></name><operator pos:line="69" pos:column="32">-&gt;<pos:position pos:line="69" pos:column="37"/></operator><name pos:line="69" pos:column="34">type<pos:position pos:line="69" pos:column="38"/></name></name> <operator pos:line="69" pos:column="39">==<pos:position pos:line="69" pos:column="41"/></operator> <name pos:line="69" pos:column="42">OBJ_TREE<pos:position pos:line="69" pos:column="50"/></name></expr>)<pos:position pos:line="69" pos:column="51"/></condition><then pos:line="69" pos:column="51"> <block pos:line="69" pos:column="52">{
				<decl_stmt><decl><type><name><name pos:line="70" pos:column="33">struct<pos:position pos:line="70" pos:column="39"/></name> <name pos:line="70" pos:column="40">tree<pos:position pos:line="70" pos:column="44"/></name></name> <modifier pos:line="70" pos:column="45">*<pos:position pos:line="70" pos:column="46"/></modifier></type><name pos:line="70" pos:column="46">item<pos:position pos:line="70" pos:column="50"/></name> <init pos:line="70" pos:column="51">= <expr><operator pos:line="70" pos:column="53">(<pos:position pos:line="70" pos:column="54"/></operator>struct <name pos:line="70" pos:column="61">tree<pos:position pos:line="70" pos:column="65"/></name> <operator pos:line="70" pos:column="66">*<pos:position pos:line="70" pos:column="67"/></operator><operator pos:line="70" pos:column="67">)<pos:position pos:line="70" pos:column="68"/></operator> <name pos:line="70" pos:column="69">obj<pos:position pos:line="70" pos:column="72"/></name></expr></init></decl>;<pos:position pos:line="70" pos:column="73"/></decl_stmt>
				<expr_stmt><expr><name><name pos:line="71" pos:column="33">item<pos:position pos:line="71" pos:column="37"/></name><operator pos:line="71" pos:column="37">-&gt;<pos:position pos:line="71" pos:column="42"/></operator><name pos:line="71" pos:column="39">buffer<pos:position pos:line="71" pos:column="45"/></name></name> <operator pos:line="71" pos:column="46">=<pos:position pos:line="71" pos:column="47"/></operator> <name pos:line="71" pos:column="48">NULL<pos:position pos:line="71" pos:column="52"/></name></expr>;<pos:position pos:line="71" pos:column="53"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="72" pos:column="33">obj<pos:position pos:line="72" pos:column="36"/></name><operator pos:line="72" pos:column="36">-&gt;<pos:position pos:line="72" pos:column="41"/></operator><name pos:line="72" pos:column="38">parsed<pos:position pos:line="72" pos:column="44"/></name></name> <operator pos:line="72" pos:column="45">=<pos:position pos:line="72" pos:column="46"/></operator> <literal type="number" pos:line="72" pos:column="47">0<pos:position pos:line="72" pos:column="48"/></literal></expr>;<pos:position pos:line="72" pos:column="49"/></expr_stmt>
			}<pos:position pos:line="73" pos:column="26"/></block></then></if>
			<if pos:line="74" pos:column="25">if <condition pos:line="74" pos:column="28">(<expr><name><name pos:line="74" pos:column="29">obj<pos:position pos:line="74" pos:column="32"/></name><operator pos:line="74" pos:column="32">-&gt;<pos:position pos:line="74" pos:column="37"/></operator><name pos:line="74" pos:column="34">type<pos:position pos:line="74" pos:column="38"/></name></name> <operator pos:line="74" pos:column="39">==<pos:position pos:line="74" pos:column="41"/></operator> <name pos:line="74" pos:column="42">OBJ_COMMIT<pos:position pos:line="74" pos:column="52"/></name></expr>)<pos:position pos:line="74" pos:column="53"/></condition><then pos:line="74" pos:column="53"> <block pos:line="74" pos:column="54">{
				<decl_stmt><decl><type><name><name pos:line="75" pos:column="33">struct<pos:position pos:line="75" pos:column="39"/></name> <name pos:line="75" pos:column="40">commit<pos:position pos:line="75" pos:column="46"/></name></name> <modifier pos:line="75" pos:column="47">*<pos:position pos:line="75" pos:column="48"/></modifier></type><name pos:line="75" pos:column="48">commit<pos:position pos:line="75" pos:column="54"/></name> <init pos:line="75" pos:column="55">= <expr><operator pos:line="75" pos:column="57">(<pos:position pos:line="75" pos:column="58"/></operator>struct <name pos:line="75" pos:column="65">commit<pos:position pos:line="75" pos:column="71"/></name> <operator pos:line="75" pos:column="72">*<pos:position pos:line="75" pos:column="73"/></operator><operator pos:line="75" pos:column="73">)<pos:position pos:line="75" pos:column="74"/></operator> <name pos:line="75" pos:column="75">obj<pos:position pos:line="75" pos:column="78"/></name></expr></init></decl>;<pos:position pos:line="75" pos:column="79"/></decl_stmt>
				<if pos:line="76" pos:column="33">if <condition pos:line="76" pos:column="36">(<expr><call><name pos:line="76" pos:column="37">detach_commit_buffer<pos:position pos:line="76" pos:column="57"/></name><argument_list pos:line="76" pos:column="57">(<argument><expr><name pos:line="76" pos:column="58">commit<pos:position pos:line="76" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="66">NULL<pos:position pos:line="76" pos:column="70"/></name></expr></argument>)<pos:position pos:line="76" pos:column="71"/></argument_list></call> <operator pos:line="76" pos:column="72">!=<pos:position pos:line="76" pos:column="74"/></operator> <name pos:line="76" pos:column="75">data<pos:position pos:line="76" pos:column="79"/></name></expr>)<pos:position pos:line="76" pos:column="80"/></condition><then pos:line="76" pos:column="80">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="41">die<pos:position pos:line="77" pos:column="44"/></name><argument_list pos:line="77" pos:column="44">(<argument><expr><literal type="string" pos:line="77" pos:column="45">"BUG: parse_object_buffer transmogrified our buffer"<pos:position pos:line="77" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="99"/></expr_stmt></block></then></if>
			}<pos:position pos:line="78" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="79" pos:column="25">obj<pos:position pos:line="79" pos:column="28"/></name><operator pos:line="79" pos:column="28">-&gt;<pos:position pos:line="79" pos:column="33"/></operator><name pos:line="79" pos:column="30">flags<pos:position pos:line="79" pos:column="35"/></name></name> <operator pos:line="79" pos:column="36">|=<pos:position pos:line="79" pos:column="38"/></operator> <name pos:line="79" pos:column="39">FLAG_CHECKED<pos:position pos:line="79" pos:column="51"/></name></expr>;<pos:position pos:line="79" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="80" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="81" pos:column="17">read_unlock<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">()<pos:position pos:line="81" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="82" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="84" pos:column="9">free<pos:position pos:line="84" pos:column="13"/></name><argument_list pos:line="84" pos:column="13">(<argument><expr><name pos:line="84" pos:column="14">new_data<pos:position pos:line="84" pos:column="22"/></name></expr></argument>)<pos:position pos:line="84" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="24"/></expr_stmt>
}<pos:position pos:line="85" pos:column="2"/></block></function></unit>
