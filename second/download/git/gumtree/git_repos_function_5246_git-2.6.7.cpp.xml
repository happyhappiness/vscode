<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5246_git-2.6.7.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_read_tree<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">argc<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier><modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">argv<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">unused_prefix<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">stage<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><literal type="number" pos:line="3" pos:column="24">0<pos:position pos:line="3" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">sha1<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">20<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">tree_desc<pos:position pos:line="5" pos:column="25"/></name></name></type> <name><name pos:line="5" pos:column="26">t<pos:position pos:line="5" pos:column="27"/></name><index pos:line="5" pos:column="27">[<expr><name pos:line="5" pos:column="28">MAX_UNPACK_TREES<pos:position pos:line="5" pos:column="44"/></name></expr>]<pos:position pos:line="5" pos:column="45"/></index></name></decl>;<pos:position pos:line="5" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">unpack_trees_options<pos:position pos:line="6" pos:column="36"/></name></name></type> <name pos:line="6" pos:column="37">opts<pos:position pos:line="6" pos:column="41"/></name></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">prefix_set<pos:position pos:line="7" pos:column="23"/></name> <init pos:line="7" pos:column="24">= <expr><literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name><name pos:line="8" pos:column="15">struct<pos:position pos:line="8" pos:column="21"/></name> <name pos:line="8" pos:column="22">option<pos:position pos:line="8" pos:column="28"/></name></name></type> <name><name pos:line="8" pos:column="29">read_tree_options<pos:position pos:line="8" pos:column="46"/></name><index pos:line="8" pos:column="46">[]<pos:position pos:line="8" pos:column="48"/></index></name> <init pos:line="8" pos:column="49">= <expr><block pos:line="8" pos:column="51">{
		<expr><block pos:line="9" pos:column="17">{ <expr><name pos:line="9" pos:column="19">OPTION_CALLBACK<pos:position pos:line="9" pos:column="34"/></name></expr>, <expr><literal type="number" pos:line="9" pos:column="36">0<pos:position pos:line="9" pos:column="37"/></literal></expr>, <expr><literal type="string" pos:line="9" pos:column="39">"index-output"<pos:position pos:line="9" pos:column="53"/></literal></expr>, <expr><name pos:line="9" pos:column="55">NULL<pos:position pos:line="9" pos:column="59"/></name></expr>, <expr><call><name pos:line="9" pos:column="61">N_<pos:position pos:line="9" pos:column="63"/></name><argument_list pos:line="9" pos:column="63">(<argument><expr><literal type="string" pos:line="9" pos:column="64">"file"<pos:position pos:line="9" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>,
		  <expr><call><name pos:line="10" pos:column="19">N_<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><literal type="string" pos:line="10" pos:column="22">"write resulting index to &lt;file&gt;"<pos:position pos:line="10" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr>,
		  <expr><name pos:line="11" pos:column="19">PARSE_OPT_NONEG<pos:position pos:line="11" pos:column="34"/></name></expr>, <expr><name pos:line="11" pos:column="36">index_output_cb<pos:position pos:line="11" pos:column="51"/></name></expr> }<pos:position pos:line="11" pos:column="53"/></block></expr>,
		<expr><call><name pos:line="12" pos:column="17">OPT_SET_INT<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><literal type="number" pos:line="12" pos:column="29">0<pos:position pos:line="12" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="32">"empty"<pos:position pos:line="12" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="41">&amp;<pos:position pos:line="12" pos:column="46"/></operator><name pos:line="12" pos:column="42">read_empty<pos:position pos:line="12" pos:column="52"/></name></expr></argument>,
			    <argument><expr><call><name pos:line="13" pos:column="29">N_<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><literal type="string" pos:line="13" pos:column="32">"only empty the index"<pos:position pos:line="13" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="57">1<pos:position pos:line="13" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr>,
		<expr><call><name pos:line="14" pos:column="17">OPT__VERBOSE<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><operator pos:line="14" pos:column="30">&amp;<pos:position pos:line="14" pos:column="35"/></operator><name><name pos:line="14" pos:column="31">opts<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">.<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="36">verbose_update<pos:position pos:line="14" pos:column="50"/></name></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="52">N_<pos:position pos:line="14" pos:column="54"/></name><argument_list pos:line="14" pos:column="54">(<argument><expr><literal type="string" pos:line="14" pos:column="55">"be verbose"<pos:position pos:line="14" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="69"/></argument_list></call></expr>,
		<expr><call><name pos:line="15" pos:column="17">OPT_GROUP<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><call><name pos:line="15" pos:column="27">N_<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><literal type="string" pos:line="15" pos:column="30">"Merging"<pos:position pos:line="15" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>,
		<expr><call><name pos:line="16" pos:column="17">OPT_SET_INT<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><literal type="char" pos:line="16" pos:column="29">'m'<pos:position pos:line="16" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="34">NULL<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="40">&amp;<pos:position pos:line="16" pos:column="45"/></operator><name><name pos:line="16" pos:column="41">opts<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">.<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">merge<pos:position pos:line="16" pos:column="51"/></name></name></expr></argument>,
			    <argument><expr><call><name pos:line="17" pos:column="29">N_<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><literal type="string" pos:line="17" pos:column="32">"perform a merge in addition to a read"<pos:position pos:line="17" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="74">1<pos:position pos:line="17" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="76"/></argument_list></call></expr>,
		<expr><call><name pos:line="18" pos:column="17">OPT_SET_INT<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><literal type="number" pos:line="18" pos:column="29">0<pos:position pos:line="18" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="32">"trivial"<pos:position pos:line="18" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="43">&amp;<pos:position pos:line="18" pos:column="48"/></operator><name><name pos:line="18" pos:column="44">opts<pos:position pos:line="18" pos:column="48"/></name><operator pos:line="18" pos:column="48">.<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="49">trivial_merges_only<pos:position pos:line="18" pos:column="68"/></name></name></expr></argument>,
			    <argument><expr><call><name pos:line="19" pos:column="29">N_<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><literal type="string" pos:line="19" pos:column="32">"3-way merge if no file level merging required"<pos:position pos:line="19" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="80"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="82">1<pos:position pos:line="19" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="84"/></argument_list></call></expr>,
		<expr><call><name pos:line="20" pos:column="17">OPT_SET_INT<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><literal type="number" pos:line="20" pos:column="29">0<pos:position pos:line="20" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="32">"aggressive"<pos:position pos:line="20" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="46">&amp;<pos:position pos:line="20" pos:column="51"/></operator><name><name pos:line="20" pos:column="47">opts<pos:position pos:line="20" pos:column="51"/></name><operator pos:line="20" pos:column="51">.<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="52">aggressive<pos:position pos:line="20" pos:column="62"/></name></name></expr></argument>,
			    <argument><expr><call><name pos:line="21" pos:column="29">N_<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><literal type="string" pos:line="21" pos:column="32">"3-way merge in presence of adds and removes"<pos:position pos:line="21" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="80">1<pos:position pos:line="21" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="82"/></argument_list></call></expr>,
		<expr><call><name pos:line="22" pos:column="17">OPT_SET_INT<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><literal type="number" pos:line="22" pos:column="29">0<pos:position pos:line="22" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="32">"reset"<pos:position pos:line="22" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="41">&amp;<pos:position pos:line="22" pos:column="46"/></operator><name><name pos:line="22" pos:column="42">opts<pos:position pos:line="22" pos:column="46"/></name><operator pos:line="22" pos:column="46">.<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="47">reset<pos:position pos:line="22" pos:column="52"/></name></name></expr></argument>,
			    <argument><expr><call><name pos:line="23" pos:column="29">N_<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><literal type="string" pos:line="23" pos:column="32">"same as -m, but discard unmerged entries"<pos:position pos:line="23" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="77">1<pos:position pos:line="23" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="79"/></argument_list></call></expr>,
		<expr><block pos:line="24" pos:column="17">{ <expr><name pos:line="24" pos:column="19">OPTION_STRING<pos:position pos:line="24" pos:column="32"/></name></expr>, <expr><literal type="number" pos:line="24" pos:column="34">0<pos:position pos:line="24" pos:column="35"/></literal></expr>, <expr><literal type="string" pos:line="24" pos:column="37">"prefix"<pos:position pos:line="24" pos:column="45"/></literal></expr>, <expr><operator pos:line="24" pos:column="47">&amp;<pos:position pos:line="24" pos:column="52"/></operator><name><name pos:line="24" pos:column="48">opts<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">.<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="53">prefix<pos:position pos:line="24" pos:column="59"/></name></name></expr>, <expr><call><name pos:line="24" pos:column="61">N_<pos:position pos:line="24" pos:column="63"/></name><argument_list pos:line="24" pos:column="63">(<argument><expr><literal type="string" pos:line="24" pos:column="64">"&lt;subdirectory&gt;/"<pos:position pos:line="24" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="82"/></argument_list></call></expr>,
		  <expr><call><name pos:line="25" pos:column="19">N_<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><literal type="string" pos:line="25" pos:column="22">"read the tree into the index under &lt;subdirectory&gt;/"<pos:position pos:line="25" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="75"/></argument_list></call></expr>,
		  <expr><name pos:line="26" pos:column="19">PARSE_OPT_NONEG<pos:position pos:line="26" pos:column="34"/></name> <operator pos:line="26" pos:column="35">|<pos:position pos:line="26" pos:column="36"/></operator> <name pos:line="26" pos:column="37">PARSE_OPT_LITERAL_ARGHELP<pos:position pos:line="26" pos:column="62"/></name></expr> }<pos:position pos:line="26" pos:column="64"/></block></expr>,
		<expr><call><name pos:line="27" pos:column="17">OPT_SET_INT<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><literal type="char" pos:line="27" pos:column="29">'u'<pos:position pos:line="27" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="34">NULL<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="40">&amp;<pos:position pos:line="27" pos:column="45"/></operator><name><name pos:line="27" pos:column="41">opts<pos:position pos:line="27" pos:column="45"/></name><operator pos:line="27" pos:column="45">.<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="46">update<pos:position pos:line="27" pos:column="52"/></name></name></expr></argument>,
			    <argument><expr><call><name pos:line="28" pos:column="29">N_<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><literal type="string" pos:line="28" pos:column="32">"update working tree with merge result"<pos:position pos:line="28" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="74">1<pos:position pos:line="28" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="76"/></argument_list></call></expr>,
		<expr><block pos:line="29" pos:column="17">{ <expr><name pos:line="29" pos:column="19">OPTION_CALLBACK<pos:position pos:line="29" pos:column="34"/></name></expr>, <expr><literal type="number" pos:line="29" pos:column="36">0<pos:position pos:line="29" pos:column="37"/></literal></expr>, <expr><literal type="string" pos:line="29" pos:column="39">"exclude-per-directory"<pos:position pos:line="29" pos:column="62"/></literal></expr>, <expr><operator pos:line="29" pos:column="64">&amp;<pos:position pos:line="29" pos:column="69"/></operator><name pos:line="29" pos:column="65">opts<pos:position pos:line="29" pos:column="69"/></name></expr>,
		  <expr><call><name pos:line="30" pos:column="19">N_<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><literal type="string" pos:line="30" pos:column="22">"gitignore"<pos:position pos:line="30" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="34"/></argument_list></call></expr>,
		  <expr><call><name pos:line="31" pos:column="19">N_<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">(<argument><expr><literal type="string" pos:line="31" pos:column="22">"allow explicitly ignored files to be overwritten"<pos:position pos:line="31" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="73"/></argument_list></call></expr>,
		  <expr><name pos:line="32" pos:column="19">PARSE_OPT_NONEG<pos:position pos:line="32" pos:column="34"/></name></expr>, <expr><name pos:line="32" pos:column="36">exclude_per_directory_cb<pos:position pos:line="32" pos:column="60"/></name></expr> }<pos:position pos:line="32" pos:column="62"/></block></expr>,
		<expr><call><name pos:line="33" pos:column="17">OPT_SET_INT<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><literal type="char" pos:line="33" pos:column="29">'i'<pos:position pos:line="33" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="34">NULL<pos:position pos:line="33" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="40">&amp;<pos:position pos:line="33" pos:column="45"/></operator><name><name pos:line="33" pos:column="41">opts<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">.<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="46">index_only<pos:position pos:line="33" pos:column="56"/></name></name></expr></argument>,
			    <argument><expr><call><name pos:line="34" pos:column="29">N_<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><literal type="string" pos:line="34" pos:column="32">"don't check the working tree after merging"<pos:position pos:line="34" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="77"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="79">1<pos:position pos:line="34" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="81"/></argument_list></call></expr>,
		<expr><call><name pos:line="35" pos:column="17">OPT__DRY_RUN<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><operator pos:line="35" pos:column="30">&amp;<pos:position pos:line="35" pos:column="35"/></operator><name><name pos:line="35" pos:column="31">opts<pos:position pos:line="35" pos:column="35"/></name><operator pos:line="35" pos:column="35">.<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="36">dry_run<pos:position pos:line="35" pos:column="43"/></name></name></expr></argument>, <argument><expr><call><name pos:line="35" pos:column="45">N_<pos:position pos:line="35" pos:column="47"/></name><argument_list pos:line="35" pos:column="47">(<argument><expr><literal type="string" pos:line="35" pos:column="48">"don't update the index or the work tree"<pos:position pos:line="35" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="91"/></argument_list></call></expr>,
		<expr><call><name pos:line="36" pos:column="17">OPT_SET_INT<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><literal type="number" pos:line="36" pos:column="29">0<pos:position pos:line="36" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="32">"no-sparse-checkout"<pos:position pos:line="36" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="54">&amp;<pos:position pos:line="36" pos:column="59"/></operator><name><name pos:line="36" pos:column="55">opts<pos:position pos:line="36" pos:column="59"/></name><operator pos:line="36" pos:column="59">.<pos:position pos:line="36" pos:column="60"/></operator><name pos:line="36" pos:column="60">skip_sparse_checkout<pos:position pos:line="36" pos:column="80"/></name></name></expr></argument>,
			    <argument><expr><call><name pos:line="37" pos:column="29">N_<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><literal type="string" pos:line="37" pos:column="32">"skip applying sparse checkout filter"<pos:position pos:line="37" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="73">1<pos:position pos:line="37" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="75"/></argument_list></call></expr>,
		<expr><call><name pos:line="38" pos:column="17">OPT_SET_INT<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">(<argument><expr><literal type="number" pos:line="38" pos:column="29">0<pos:position pos:line="38" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="32">"debug-unpack"<pos:position pos:line="38" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="38" pos:column="48">&amp;<pos:position pos:line="38" pos:column="53"/></operator><name><name pos:line="38" pos:column="49">opts<pos:position pos:line="38" pos:column="53"/></name><operator pos:line="38" pos:column="53">.<pos:position pos:line="38" pos:column="54"/></operator><name pos:line="38" pos:column="54">debug_unpack<pos:position pos:line="38" pos:column="66"/></name></name></expr></argument>,
			    <argument><expr><call><name pos:line="39" pos:column="29">N_<pos:position pos:line="39" pos:column="31"/></name><argument_list pos:line="39" pos:column="31">(<argument><expr><literal type="string" pos:line="39" pos:column="32">"debug unpack-trees"<pos:position pos:line="39" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="55">1<pos:position pos:line="39" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr>,
		<macro><name pos:line="40" pos:column="17">OPT_END<pos:position pos:line="40" pos:column="24"/></name><argument_list pos:line="40" pos:column="24">()<pos:position pos:line="40" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="41" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="41" pos:column="11"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="43" pos:column="9">memset<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><operator pos:line="43" pos:column="16">&amp;<pos:position pos:line="43" pos:column="21"/></operator><name pos:line="43" pos:column="17">opts<pos:position pos:line="43" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="23">0<pos:position pos:line="43" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="26">sizeof<argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">opts<pos:position pos:line="43" pos:column="37"/></name></expr></argument>)<pos:position pos:line="43" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="44" pos:column="9">opts<pos:position pos:line="44" pos:column="13"/></name><operator pos:line="44" pos:column="13">.<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">head_idx<pos:position pos:line="44" pos:column="22"/></name></name> <operator pos:line="44" pos:column="23">=<pos:position pos:line="44" pos:column="24"/></operator> <operator pos:line="44" pos:column="25">-<pos:position pos:line="44" pos:column="26"/></operator><literal type="number" pos:line="44" pos:column="26">1<pos:position pos:line="44" pos:column="27"/></literal></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="45" pos:column="9">opts<pos:position pos:line="45" pos:column="13"/></name><operator pos:line="45" pos:column="13">.<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="14">src_index<pos:position pos:line="45" pos:column="23"/></name></name> <operator pos:line="45" pos:column="24">=<pos:position pos:line="45" pos:column="25"/></operator> <operator pos:line="45" pos:column="26">&amp;<pos:position pos:line="45" pos:column="31"/></operator><name pos:line="45" pos:column="27">the_index<pos:position pos:line="45" pos:column="36"/></name></expr>;<pos:position pos:line="45" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="46" pos:column="9">opts<pos:position pos:line="46" pos:column="13"/></name><operator pos:line="46" pos:column="13">.<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">dst_index<pos:position pos:line="46" pos:column="23"/></name></name> <operator pos:line="46" pos:column="24">=<pos:position pos:line="46" pos:column="25"/></operator> <operator pos:line="46" pos:column="26">&amp;<pos:position pos:line="46" pos:column="31"/></operator><name pos:line="46" pos:column="27">the_index<pos:position pos:line="46" pos:column="36"/></name></expr>;<pos:position pos:line="46" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="48" pos:column="9">git_config<pos:position pos:line="48" pos:column="19"/></name><argument_list pos:line="48" pos:column="19">(<argument><expr><name pos:line="48" pos:column="20">git_default_config<pos:position pos:line="48" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="40">NULL<pos:position pos:line="48" pos:column="44"/></name></expr></argument>)<pos:position pos:line="48" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="46"/></expr_stmt>

	<expr_stmt><expr><name pos:line="50" pos:column="9">argc<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <call><name pos:line="50" pos:column="16">parse_options<pos:position pos:line="50" pos:column="29"/></name><argument_list pos:line="50" pos:column="29">(<argument><expr><name pos:line="50" pos:column="30">argc<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="36">argv<pos:position pos:line="50" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="42">unused_prefix<pos:position pos:line="50" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="57">read_tree_options<pos:position pos:line="50" pos:column="74"/></name></expr></argument>,
			     <argument><expr><name pos:line="51" pos:column="30">read_tree_usage<pos:position pos:line="51" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="47">0<pos:position pos:line="51" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="50"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="53" pos:column="9">hold_locked_index<pos:position pos:line="53" pos:column="26"/></name><argument_list pos:line="53" pos:column="26">(<argument><expr><operator pos:line="53" pos:column="27">&amp;<pos:position pos:line="53" pos:column="32"/></operator><name pos:line="53" pos:column="28">lock_file<pos:position pos:line="53" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="39">1<pos:position pos:line="53" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><name pos:line="55" pos:column="9">prefix_set<pos:position pos:line="55" pos:column="19"/></name> <operator pos:line="55" pos:column="20">=<pos:position pos:line="55" pos:column="21"/></operator> <ternary><condition><expr><name><name pos:line="55" pos:column="22">opts<pos:position pos:line="55" pos:column="26"/></name><operator pos:line="55" pos:column="26">.<pos:position pos:line="55" pos:column="27"/></operator><name pos:line="55" pos:column="27">prefix<pos:position pos:line="55" pos:column="33"/></name></name></expr> ?<pos:position pos:line="55" pos:column="35"/></condition><then pos:line="55" pos:column="35"> <expr><literal type="number" pos:line="55" pos:column="36">1<pos:position pos:line="55" pos:column="37"/></literal></expr> <pos:position pos:line="55" pos:column="38"/></then><else pos:line="55" pos:column="38">: <expr><literal type="number" pos:line="55" pos:column="40">0<pos:position pos:line="55" pos:column="41"/></literal></expr></else></ternary></expr>;<pos:position pos:line="55" pos:column="42"/></expr_stmt>
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><literal type="number" pos:line="56" pos:column="13">1<pos:position pos:line="56" pos:column="14"/></literal> <operator pos:line="56" pos:column="15">&lt;<pos:position pos:line="56" pos:column="19"/></operator> <name><name pos:line="56" pos:column="17">opts<pos:position pos:line="56" pos:column="21"/></name><operator pos:line="56" pos:column="21">.<pos:position pos:line="56" pos:column="22"/></operator><name pos:line="56" pos:column="22">merge<pos:position pos:line="56" pos:column="27"/></name></name> <operator pos:line="56" pos:column="28">+<pos:position pos:line="56" pos:column="29"/></operator> <name><name pos:line="56" pos:column="30">opts<pos:position pos:line="56" pos:column="34"/></name><operator pos:line="56" pos:column="34">.<pos:position pos:line="56" pos:column="35"/></operator><name pos:line="56" pos:column="35">reset<pos:position pos:line="56" pos:column="40"/></name></name> <operator pos:line="56" pos:column="41">+<pos:position pos:line="56" pos:column="42"/></operator> <name pos:line="56" pos:column="43">prefix_set<pos:position pos:line="56" pos:column="53"/></name></expr>)<pos:position pos:line="56" pos:column="54"/></condition><then pos:line="56" pos:column="54">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="17">die<pos:position pos:line="57" pos:column="20"/></name><argument_list pos:line="57" pos:column="20">(<argument><expr><literal type="string" pos:line="57" pos:column="21">"Which one? -m, --reset, or --prefix?"<pos:position pos:line="57" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="61"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="59" pos:column="9">/*
	 * NEEDSWORK
	 *
	 * The old index should be read anyway even if we're going to
	 * destroy all index entries because we still need to preserve
	 * certain information such as index version or split-index
	 * mode.
	 */</comment>

	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name><name pos:line="68" pos:column="13">opts<pos:position pos:line="68" pos:column="17"/></name><operator pos:line="68" pos:column="17">.<pos:position pos:line="68" pos:column="18"/></operator><name pos:line="68" pos:column="18">reset<pos:position pos:line="68" pos:column="23"/></name></name> <operator pos:line="68" pos:column="24">||<pos:position pos:line="68" pos:column="26"/></operator> <name><name pos:line="68" pos:column="27">opts<pos:position pos:line="68" pos:column="31"/></name><operator pos:line="68" pos:column="31">.<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="32">merge<pos:position pos:line="68" pos:column="37"/></name></name> <operator pos:line="68" pos:column="38">||<pos:position pos:line="68" pos:column="40"/></operator> <name><name pos:line="68" pos:column="41">opts<pos:position pos:line="68" pos:column="45"/></name><operator pos:line="68" pos:column="45">.<pos:position pos:line="68" pos:column="46"/></operator><name pos:line="68" pos:column="46">prefix<pos:position pos:line="68" pos:column="52"/></name></name></expr>)<pos:position pos:line="68" pos:column="53"/></condition><then pos:line="68" pos:column="53"> <block pos:line="68" pos:column="54">{
		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><call><name pos:line="69" pos:column="21">read_cache_unmerged<pos:position pos:line="69" pos:column="40"/></name><argument_list pos:line="69" pos:column="40">()<pos:position pos:line="69" pos:column="42"/></argument_list></call> <operator pos:line="69" pos:column="43">&amp;&amp;<pos:position pos:line="69" pos:column="53"/></operator> <operator pos:line="69" pos:column="46">(<pos:position pos:line="69" pos:column="47"/></operator><name><name pos:line="69" pos:column="47">opts<pos:position pos:line="69" pos:column="51"/></name><operator pos:line="69" pos:column="51">.<pos:position pos:line="69" pos:column="52"/></operator><name pos:line="69" pos:column="52">prefix<pos:position pos:line="69" pos:column="58"/></name></name> <operator pos:line="69" pos:column="59">||<pos:position pos:line="69" pos:column="61"/></operator> <name><name pos:line="69" pos:column="62">opts<pos:position pos:line="69" pos:column="66"/></name><operator pos:line="69" pos:column="66">.<pos:position pos:line="69" pos:column="67"/></operator><name pos:line="69" pos:column="67">merge<pos:position pos:line="69" pos:column="72"/></name></name><operator pos:line="69" pos:column="72">)<pos:position pos:line="69" pos:column="73"/></operator></expr>)<pos:position pos:line="69" pos:column="74"/></condition><then pos:line="69" pos:column="74">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="25">die<pos:position pos:line="70" pos:column="28"/></name><argument_list pos:line="70" pos:column="28">(<argument><expr><literal type="string" pos:line="70" pos:column="29">"You need to resolve your current index first"<pos:position pos:line="70" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="77"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="71" pos:column="17">stage<pos:position pos:line="71" pos:column="22"/></name> <operator pos:line="71" pos:column="23">=<pos:position pos:line="71" pos:column="24"/></operator> <name><name pos:line="71" pos:column="25">opts<pos:position pos:line="71" pos:column="29"/></name><operator pos:line="71" pos:column="29">.<pos:position pos:line="71" pos:column="30"/></operator><name pos:line="71" pos:column="30">merge<pos:position pos:line="71" pos:column="35"/></name></name> <operator pos:line="71" pos:column="36">=<pos:position pos:line="71" pos:column="37"/></operator> <literal type="number" pos:line="71" pos:column="38">1<pos:position pos:line="71" pos:column="39"/></literal></expr>;<pos:position pos:line="71" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="72" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="73" pos:column="9">resolve_undo_clear<pos:position pos:line="73" pos:column="27"/></name><argument_list pos:line="73" pos:column="27">()<pos:position pos:line="73" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="30"/></expr_stmt>

	<for pos:line="75" pos:column="9">for <control pos:line="75" pos:column="13">(<init><expr><name pos:line="75" pos:column="14">i<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">=<pos:position pos:line="75" pos:column="17"/></operator> <literal type="number" pos:line="75" pos:column="18">0<pos:position pos:line="75" pos:column="19"/></literal></expr>;<pos:position pos:line="75" pos:column="20"/></init> <condition><expr><name pos:line="75" pos:column="21">i<pos:position pos:line="75" pos:column="22"/></name> <operator pos:line="75" pos:column="23">&lt;<pos:position pos:line="75" pos:column="27"/></operator> <name pos:line="75" pos:column="25">argc<pos:position pos:line="75" pos:column="29"/></name></expr>;<pos:position pos:line="75" pos:column="30"/></condition> <incr><expr><name pos:line="75" pos:column="31">i<pos:position pos:line="75" pos:column="32"/></name><operator pos:line="75" pos:column="32">++<pos:position pos:line="75" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="75" pos:column="35"/></control> <block pos:line="75" pos:column="36">{
		<decl_stmt><decl><type><specifier pos:line="76" pos:column="17">const<pos:position pos:line="76" pos:column="22"/></specifier> <name pos:line="76" pos:column="23">char<pos:position pos:line="76" pos:column="27"/></name> <modifier pos:line="76" pos:column="28">*<pos:position pos:line="76" pos:column="29"/></modifier></type><name pos:line="76" pos:column="29">arg<pos:position pos:line="76" pos:column="32"/></name> <init pos:line="76" pos:column="33">= <expr><name><name pos:line="76" pos:column="35">argv<pos:position pos:line="76" pos:column="39"/></name><index pos:line="76" pos:column="39">[<expr><name pos:line="76" pos:column="40">i<pos:position pos:line="76" pos:column="41"/></name></expr>]<pos:position pos:line="76" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="76" pos:column="43"/></decl_stmt>

		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><call><name pos:line="78" pos:column="21">get_sha1<pos:position pos:line="78" pos:column="29"/></name><argument_list pos:line="78" pos:column="29">(<argument><expr><name pos:line="78" pos:column="30">arg<pos:position pos:line="78" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="35">sha1<pos:position pos:line="78" pos:column="39"/></name></expr></argument>)<pos:position pos:line="78" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="41"/></condition><then pos:line="78" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="25">die<pos:position pos:line="79" pos:column="28"/></name><argument_list pos:line="79" pos:column="28">(<argument><expr><literal type="string" pos:line="79" pos:column="29">"Not a valid object name %s"<pos:position pos:line="79" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="59">arg<pos:position pos:line="79" pos:column="62"/></name></expr></argument>)<pos:position pos:line="79" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="64"/></expr_stmt></block></then></if>
		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><call><name pos:line="80" pos:column="21">list_tree<pos:position pos:line="80" pos:column="30"/></name><argument_list pos:line="80" pos:column="30">(<argument><expr><name pos:line="80" pos:column="31">sha1<pos:position pos:line="80" pos:column="35"/></name></expr></argument>)<pos:position pos:line="80" pos:column="36"/></argument_list></call> <operator pos:line="80" pos:column="37">&lt;<pos:position pos:line="80" pos:column="41"/></operator> <literal type="number" pos:line="80" pos:column="39">0<pos:position pos:line="80" pos:column="40"/></literal></expr>)<pos:position pos:line="80" pos:column="41"/></condition><then pos:line="80" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="25">die<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">(<argument><expr><literal type="string" pos:line="81" pos:column="29">"failed to unpack tree object %s"<pos:position pos:line="81" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="64">arg<pos:position pos:line="81" pos:column="67"/></name></expr></argument>)<pos:position pos:line="81" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="69"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="82" pos:column="17">stage<pos:position pos:line="82" pos:column="22"/></name><operator pos:line="82" pos:column="22">++<pos:position pos:line="82" pos:column="24"/></operator></expr>;<pos:position pos:line="82" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="83" pos:column="10"/></block></for>
	<if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name pos:line="84" pos:column="13">nr_trees<pos:position pos:line="84" pos:column="21"/></name> <operator pos:line="84" pos:column="22">==<pos:position pos:line="84" pos:column="24"/></operator> <literal type="number" pos:line="84" pos:column="25">0<pos:position pos:line="84" pos:column="26"/></literal> <operator pos:line="84" pos:column="27">&amp;&amp;<pos:position pos:line="84" pos:column="37"/></operator> <operator pos:line="84" pos:column="30">!<pos:position pos:line="84" pos:column="31"/></operator><name pos:line="84" pos:column="31">read_empty<pos:position pos:line="84" pos:column="41"/></name></expr>)<pos:position pos:line="84" pos:column="42"/></condition><then pos:line="84" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="17">warning<pos:position pos:line="85" pos:column="24"/></name><argument_list pos:line="85" pos:column="24">(<argument><expr><literal type="string" pos:line="85" pos:column="25">"read-tree: emptying the index with no arguments is deprecated; use --empty"<pos:position pos:line="85" pos:column="101"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="103"/></expr_stmt></block></then>
	<elseif pos:line="86" pos:column="9">else <if pos:line="86" pos:column="14">if <condition pos:line="86" pos:column="17">(<expr><name pos:line="86" pos:column="18">nr_trees<pos:position pos:line="86" pos:column="26"/></name> <operator pos:line="86" pos:column="27">&gt;<pos:position pos:line="86" pos:column="31"/></operator> <literal type="number" pos:line="86" pos:column="29">0<pos:position pos:line="86" pos:column="30"/></literal> <operator pos:line="86" pos:column="31">&amp;&amp;<pos:position pos:line="86" pos:column="41"/></operator> <name pos:line="86" pos:column="34">read_empty<pos:position pos:line="86" pos:column="44"/></name></expr>)<pos:position pos:line="86" pos:column="45"/></condition><then pos:line="86" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="17">die<pos:position pos:line="87" pos:column="20"/></name><argument_list pos:line="87" pos:column="20">(<argument><expr><literal type="string" pos:line="87" pos:column="21">"passing trees as arguments contradicts --empty"<pos:position pos:line="87" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="71"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><literal type="number" pos:line="89" pos:column="13">1<pos:position pos:line="89" pos:column="14"/></literal> <operator pos:line="89" pos:column="15">&lt;<pos:position pos:line="89" pos:column="19"/></operator> <name><name pos:line="89" pos:column="17">opts<pos:position pos:line="89" pos:column="21"/></name><operator pos:line="89" pos:column="21">.<pos:position pos:line="89" pos:column="22"/></operator><name pos:line="89" pos:column="22">index_only<pos:position pos:line="89" pos:column="32"/></name></name> <operator pos:line="89" pos:column="33">+<pos:position pos:line="89" pos:column="34"/></operator> <name><name pos:line="89" pos:column="35">opts<pos:position pos:line="89" pos:column="39"/></name><operator pos:line="89" pos:column="39">.<pos:position pos:line="89" pos:column="40"/></operator><name pos:line="89" pos:column="40">update<pos:position pos:line="89" pos:column="46"/></name></name></expr>)<pos:position pos:line="89" pos:column="47"/></condition><then pos:line="89" pos:column="47">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="17">die<pos:position pos:line="90" pos:column="20"/></name><argument_list pos:line="90" pos:column="20">(<argument><expr><literal type="string" pos:line="90" pos:column="21">"-u and -i at the same time makes no sense"<pos:position pos:line="90" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="66"/></expr_stmt></block></then></if>
	<if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><operator pos:line="91" pos:column="13">(<pos:position pos:line="91" pos:column="14"/></operator><name><name pos:line="91" pos:column="14">opts<pos:position pos:line="91" pos:column="18"/></name><operator pos:line="91" pos:column="18">.<pos:position pos:line="91" pos:column="19"/></operator><name pos:line="91" pos:column="19">update<pos:position pos:line="91" pos:column="25"/></name></name> <operator pos:line="91" pos:column="26">||<pos:position pos:line="91" pos:column="28"/></operator> <name><name pos:line="91" pos:column="29">opts<pos:position pos:line="91" pos:column="33"/></name><operator pos:line="91" pos:column="33">.<pos:position pos:line="91" pos:column="34"/></operator><name pos:line="91" pos:column="34">index_only<pos:position pos:line="91" pos:column="44"/></name></name><operator pos:line="91" pos:column="44">)<pos:position pos:line="91" pos:column="45"/></operator> <operator pos:line="91" pos:column="46">&amp;&amp;<pos:position pos:line="91" pos:column="56"/></operator> <operator pos:line="91" pos:column="49">!<pos:position pos:line="91" pos:column="50"/></operator><name><name pos:line="91" pos:column="50">opts<pos:position pos:line="91" pos:column="54"/></name><operator pos:line="91" pos:column="54">.<pos:position pos:line="91" pos:column="55"/></operator><name pos:line="91" pos:column="55">merge<pos:position pos:line="91" pos:column="60"/></name></name></expr>)<pos:position pos:line="91" pos:column="61"/></condition><then pos:line="91" pos:column="61">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="17">die<pos:position pos:line="92" pos:column="20"/></name><argument_list pos:line="92" pos:column="20">(<argument><expr><literal type="string" pos:line="92" pos:column="21">"%s is meaningless without -m, --reset, or --prefix"<pos:position pos:line="92" pos:column="73"/></literal></expr></argument>,
		    <argument><expr><ternary><condition><expr><name><name pos:line="93" pos:column="21">opts<pos:position pos:line="93" pos:column="25"/></name><operator pos:line="93" pos:column="25">.<pos:position pos:line="93" pos:column="26"/></operator><name pos:line="93" pos:column="26">update<pos:position pos:line="93" pos:column="32"/></name></name></expr> ?<pos:position pos:line="93" pos:column="34"/></condition><then pos:line="93" pos:column="34"> <expr><literal type="string" pos:line="93" pos:column="35">"-u"<pos:position pos:line="93" pos:column="39"/></literal></expr> <pos:position pos:line="93" pos:column="40"/></then><else pos:line="93" pos:column="40">: <expr><literal type="string" pos:line="93" pos:column="42">"-i"<pos:position pos:line="93" pos:column="46"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="93" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="48"/></expr_stmt></block></then></if>
	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><operator pos:line="94" pos:column="13">(<pos:position pos:line="94" pos:column="14"/></operator><name><name pos:line="94" pos:column="14">opts<pos:position pos:line="94" pos:column="18"/></name><operator pos:line="94" pos:column="18">.<pos:position pos:line="94" pos:column="19"/></operator><name pos:line="94" pos:column="19">dir<pos:position pos:line="94" pos:column="22"/></name></name> <operator pos:line="94" pos:column="23">&amp;&amp;<pos:position pos:line="94" pos:column="33"/></operator> <operator pos:line="94" pos:column="26">!<pos:position pos:line="94" pos:column="27"/></operator><name><name pos:line="94" pos:column="27">opts<pos:position pos:line="94" pos:column="31"/></name><operator pos:line="94" pos:column="31">.<pos:position pos:line="94" pos:column="32"/></operator><name pos:line="94" pos:column="32">update<pos:position pos:line="94" pos:column="38"/></name></name><operator pos:line="94" pos:column="38">)<pos:position pos:line="94" pos:column="39"/></operator></expr>)<pos:position pos:line="94" pos:column="40"/></condition><then pos:line="94" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="95" pos:column="17">die<pos:position pos:line="95" pos:column="20"/></name><argument_list pos:line="95" pos:column="20">(<argument><expr><literal type="string" pos:line="95" pos:column="21">"--exclude-per-directory is meaningless unless -u"<pos:position pos:line="95" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="73"/></expr_stmt></block></then></if>
	<if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><name><name pos:line="96" pos:column="13">opts<pos:position pos:line="96" pos:column="17"/></name><operator pos:line="96" pos:column="17">.<pos:position pos:line="96" pos:column="18"/></operator><name pos:line="96" pos:column="18">merge<pos:position pos:line="96" pos:column="23"/></name></name> <operator pos:line="96" pos:column="24">&amp;&amp;<pos:position pos:line="96" pos:column="34"/></operator> <operator pos:line="96" pos:column="27">!<pos:position pos:line="96" pos:column="28"/></operator><name><name pos:line="96" pos:column="28">opts<pos:position pos:line="96" pos:column="32"/></name><operator pos:line="96" pos:column="32">.<pos:position pos:line="96" pos:column="33"/></operator><name pos:line="96" pos:column="33">index_only<pos:position pos:line="96" pos:column="43"/></name></name></expr>)<pos:position pos:line="96" pos:column="44"/></condition><then pos:line="96" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="97" pos:column="17">setup_work_tree<pos:position pos:line="97" pos:column="32"/></name><argument_list pos:line="97" pos:column="32">()<pos:position pos:line="97" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="35"/></expr_stmt></block></then></if>

	<if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><name><name pos:line="99" pos:column="13">opts<pos:position pos:line="99" pos:column="17"/></name><operator pos:line="99" pos:column="17">.<pos:position pos:line="99" pos:column="18"/></operator><name pos:line="99" pos:column="18">merge<pos:position pos:line="99" pos:column="23"/></name></name></expr>)<pos:position pos:line="99" pos:column="24"/></condition><then pos:line="99" pos:column="24"> <block pos:line="99" pos:column="25">{
		<if pos:line="100" pos:column="17">if <condition pos:line="100" pos:column="20">(<expr><name pos:line="100" pos:column="21">stage<pos:position pos:line="100" pos:column="26"/></name> <operator pos:line="100" pos:column="27">&lt;<pos:position pos:line="100" pos:column="31"/></operator> <literal type="number" pos:line="100" pos:column="29">2<pos:position pos:line="100" pos:column="30"/></literal></expr>)<pos:position pos:line="100" pos:column="31"/></condition><then pos:line="100" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="101" pos:column="25">die<pos:position pos:line="101" pos:column="28"/></name><argument_list pos:line="101" pos:column="28">(<argument><expr><literal type="string" pos:line="101" pos:column="29">"just how do you expect me to merge %d trees?"<pos:position pos:line="101" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="77">stage<pos:position pos:line="101" pos:column="82"/></name><operator pos:line="101" pos:column="82">-<pos:position pos:line="101" pos:column="83"/></operator><literal type="number" pos:line="101" pos:column="83">1<pos:position pos:line="101" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="86"/></expr_stmt></block></then></if>
		<switch pos:line="102" pos:column="17">switch <condition pos:line="102" pos:column="24">(<expr><name pos:line="102" pos:column="25">stage<pos:position pos:line="102" pos:column="30"/></name> <operator pos:line="102" pos:column="31">-<pos:position pos:line="102" pos:column="32"/></operator> <literal type="number" pos:line="102" pos:column="33">1<pos:position pos:line="102" pos:column="34"/></literal></expr>)<pos:position pos:line="102" pos:column="35"/></condition> <block pos:line="102" pos:column="36">{
		<case pos:line="103" pos:column="17">case <expr><literal type="number" pos:line="103" pos:column="22">1<pos:position pos:line="103" pos:column="23"/></literal></expr>:<pos:position pos:line="103" pos:column="24"/></case>
			<expr_stmt><expr><name><name pos:line="104" pos:column="25">opts<pos:position pos:line="104" pos:column="29"/></name><operator pos:line="104" pos:column="29">.<pos:position pos:line="104" pos:column="30"/></operator><name pos:line="104" pos:column="30">fn<pos:position pos:line="104" pos:column="32"/></name></name> <operator pos:line="104" pos:column="33">=<pos:position pos:line="104" pos:column="34"/></operator> <ternary><condition><expr><name><name pos:line="104" pos:column="35">opts<pos:position pos:line="104" pos:column="39"/></name><operator pos:line="104" pos:column="39">.<pos:position pos:line="104" pos:column="40"/></operator><name pos:line="104" pos:column="40">prefix<pos:position pos:line="104" pos:column="46"/></name></name></expr> ?<pos:position pos:line="104" pos:column="48"/></condition><then pos:line="104" pos:column="48"> <expr><name pos:line="104" pos:column="49">bind_merge<pos:position pos:line="104" pos:column="59"/></name></expr> <pos:position pos:line="104" pos:column="60"/></then><else pos:line="104" pos:column="60">: <expr><name pos:line="104" pos:column="62">oneway_merge<pos:position pos:line="104" pos:column="74"/></name></expr></else></ternary></expr>;<pos:position pos:line="104" pos:column="75"/></expr_stmt>
			<break pos:line="105" pos:column="25">break;<pos:position pos:line="105" pos:column="31"/></break>
		<case pos:line="106" pos:column="17">case <expr><literal type="number" pos:line="106" pos:column="22">2<pos:position pos:line="106" pos:column="23"/></literal></expr>:<pos:position pos:line="106" pos:column="24"/></case>
			<expr_stmt><expr><name><name pos:line="107" pos:column="25">opts<pos:position pos:line="107" pos:column="29"/></name><operator pos:line="107" pos:column="29">.<pos:position pos:line="107" pos:column="30"/></operator><name pos:line="107" pos:column="30">fn<pos:position pos:line="107" pos:column="32"/></name></name> <operator pos:line="107" pos:column="33">=<pos:position pos:line="107" pos:column="34"/></operator> <name pos:line="107" pos:column="35">twoway_merge<pos:position pos:line="107" pos:column="47"/></name></expr>;<pos:position pos:line="107" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="108" pos:column="25">opts<pos:position pos:line="108" pos:column="29"/></name><operator pos:line="108" pos:column="29">.<pos:position pos:line="108" pos:column="30"/></operator><name pos:line="108" pos:column="30">initial_checkout<pos:position pos:line="108" pos:column="46"/></name></name> <operator pos:line="108" pos:column="47">=<pos:position pos:line="108" pos:column="48"/></operator> <call><name pos:line="108" pos:column="49">is_cache_unborn<pos:position pos:line="108" pos:column="64"/></name><argument_list pos:line="108" pos:column="64">()<pos:position pos:line="108" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="67"/></expr_stmt>
			<break pos:line="109" pos:column="25">break;<pos:position pos:line="109" pos:column="31"/></break>
		<case pos:line="110" pos:column="17">case <expr><literal type="number" pos:line="110" pos:column="22">3<pos:position pos:line="110" pos:column="23"/></literal></expr>:<pos:position pos:line="110" pos:column="24"/></case>
		<default pos:line="111" pos:column="17">default:<pos:position pos:line="111" pos:column="25"/></default>
			<expr_stmt><expr><name><name pos:line="112" pos:column="25">opts<pos:position pos:line="112" pos:column="29"/></name><operator pos:line="112" pos:column="29">.<pos:position pos:line="112" pos:column="30"/></operator><name pos:line="112" pos:column="30">fn<pos:position pos:line="112" pos:column="32"/></name></name> <operator pos:line="112" pos:column="33">=<pos:position pos:line="112" pos:column="34"/></operator> <name pos:line="112" pos:column="35">threeway_merge<pos:position pos:line="112" pos:column="49"/></name></expr>;<pos:position pos:line="112" pos:column="50"/></expr_stmt>
			<break pos:line="113" pos:column="25">break;<pos:position pos:line="113" pos:column="31"/></break>
		}<pos:position pos:line="114" pos:column="18"/></block></switch>

		<if pos:line="116" pos:column="17">if <condition pos:line="116" pos:column="20">(<expr><name pos:line="116" pos:column="21">stage<pos:position pos:line="116" pos:column="26"/></name> <operator pos:line="116" pos:column="27">-<pos:position pos:line="116" pos:column="28"/></operator> <literal type="number" pos:line="116" pos:column="29">1<pos:position pos:line="116" pos:column="30"/></literal> <operator pos:line="116" pos:column="31">&gt;=<pos:position pos:line="116" pos:column="36"/></operator> <literal type="number" pos:line="116" pos:column="34">3<pos:position pos:line="116" pos:column="35"/></literal></expr>)<pos:position pos:line="116" pos:column="36"/></condition><then pos:line="116" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="117" pos:column="25">opts<pos:position pos:line="117" pos:column="29"/></name><operator pos:line="117" pos:column="29">.<pos:position pos:line="117" pos:column="30"/></operator><name pos:line="117" pos:column="30">head_idx<pos:position pos:line="117" pos:column="38"/></name></name> <operator pos:line="117" pos:column="39">=<pos:position pos:line="117" pos:column="40"/></operator> <name pos:line="117" pos:column="41">stage<pos:position pos:line="117" pos:column="46"/></name> <operator pos:line="117" pos:column="47">-<pos:position pos:line="117" pos:column="48"/></operator> <literal type="number" pos:line="117" pos:column="49">2<pos:position pos:line="117" pos:column="50"/></literal></expr>;<pos:position pos:line="117" pos:column="51"/></expr_stmt></block></then>
		<else pos:line="118" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="119" pos:column="25">opts<pos:position pos:line="119" pos:column="29"/></name><operator pos:line="119" pos:column="29">.<pos:position pos:line="119" pos:column="30"/></operator><name pos:line="119" pos:column="30">head_idx<pos:position pos:line="119" pos:column="38"/></name></name> <operator pos:line="119" pos:column="39">=<pos:position pos:line="119" pos:column="40"/></operator> <literal type="number" pos:line="119" pos:column="41">1<pos:position pos:line="119" pos:column="42"/></literal></expr>;<pos:position pos:line="119" pos:column="43"/></expr_stmt></block></else></if>
	}<pos:position pos:line="120" pos:column="10"/></block></then></if>

	<if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><name><name pos:line="122" pos:column="13">opts<pos:position pos:line="122" pos:column="17"/></name><operator pos:line="122" pos:column="17">.<pos:position pos:line="122" pos:column="18"/></operator><name pos:line="122" pos:column="18">debug_unpack<pos:position pos:line="122" pos:column="30"/></name></name></expr>)<pos:position pos:line="122" pos:column="31"/></condition><then pos:line="122" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="123" pos:column="17">opts<pos:position pos:line="123" pos:column="21"/></name><operator pos:line="123" pos:column="21">.<pos:position pos:line="123" pos:column="22"/></operator><name pos:line="123" pos:column="22">fn<pos:position pos:line="123" pos:column="24"/></name></name> <operator pos:line="123" pos:column="25">=<pos:position pos:line="123" pos:column="26"/></operator> <name pos:line="123" pos:column="27">debug_merge<pos:position pos:line="123" pos:column="38"/></name></expr>;<pos:position pos:line="123" pos:column="39"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="125" pos:column="9">cache_tree_free<pos:position pos:line="125" pos:column="24"/></name><argument_list pos:line="125" pos:column="24">(<argument><expr><operator pos:line="125" pos:column="25">&amp;<pos:position pos:line="125" pos:column="30"/></operator><name pos:line="125" pos:column="26">active_cache_tree<pos:position pos:line="125" pos:column="43"/></name></expr></argument>)<pos:position pos:line="125" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="45"/></expr_stmt>
	<for pos:line="126" pos:column="9">for <control pos:line="126" pos:column="13">(<init><expr><name pos:line="126" pos:column="14">i<pos:position pos:line="126" pos:column="15"/></name> <operator pos:line="126" pos:column="16">=<pos:position pos:line="126" pos:column="17"/></operator> <literal type="number" pos:line="126" pos:column="18">0<pos:position pos:line="126" pos:column="19"/></literal></expr>;<pos:position pos:line="126" pos:column="20"/></init> <condition><expr><name pos:line="126" pos:column="21">i<pos:position pos:line="126" pos:column="22"/></name> <operator pos:line="126" pos:column="23">&lt;<pos:position pos:line="126" pos:column="27"/></operator> <name pos:line="126" pos:column="25">nr_trees<pos:position pos:line="126" pos:column="33"/></name></expr>;<pos:position pos:line="126" pos:column="34"/></condition> <incr><expr><name pos:line="126" pos:column="35">i<pos:position pos:line="126" pos:column="36"/></name><operator pos:line="126" pos:column="36">++<pos:position pos:line="126" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="126" pos:column="39"/></control> <block pos:line="126" pos:column="40">{
		<decl_stmt><decl><type><name><name pos:line="127" pos:column="17">struct<pos:position pos:line="127" pos:column="23"/></name> <name pos:line="127" pos:column="24">tree<pos:position pos:line="127" pos:column="28"/></name></name> <modifier pos:line="127" pos:column="29">*<pos:position pos:line="127" pos:column="30"/></modifier></type><name pos:line="127" pos:column="30">tree<pos:position pos:line="127" pos:column="34"/></name> <init pos:line="127" pos:column="35">= <expr><name><name pos:line="127" pos:column="37">trees<pos:position pos:line="127" pos:column="42"/></name><index pos:line="127" pos:column="42">[<expr><name pos:line="127" pos:column="43">i<pos:position pos:line="127" pos:column="44"/></name></expr>]<pos:position pos:line="127" pos:column="45"/></index></name></expr></init></decl>;<pos:position pos:line="127" pos:column="46"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="128" pos:column="17">parse_tree<pos:position pos:line="128" pos:column="27"/></name><argument_list pos:line="128" pos:column="27">(<argument><expr><name pos:line="128" pos:column="28">tree<pos:position pos:line="128" pos:column="32"/></name></expr></argument>)<pos:position pos:line="128" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="129" pos:column="17">init_tree_desc<pos:position pos:line="129" pos:column="31"/></name><argument_list pos:line="129" pos:column="31">(<argument><expr><name pos:line="129" pos:column="32">t<pos:position pos:line="129" pos:column="33"/></name><operator pos:line="129" pos:column="33">+<pos:position pos:line="129" pos:column="34"/></operator><name pos:line="129" pos:column="34">i<pos:position pos:line="129" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="37">tree<pos:position pos:line="129" pos:column="41"/></name><operator pos:line="129" pos:column="41">-&gt;<pos:position pos:line="129" pos:column="46"/></operator><name pos:line="129" pos:column="43">buffer<pos:position pos:line="129" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="51">tree<pos:position pos:line="129" pos:column="55"/></name><operator pos:line="129" pos:column="55">-&gt;<pos:position pos:line="129" pos:column="60"/></operator><name pos:line="129" pos:column="57">size<pos:position pos:line="129" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="130" pos:column="10"/></block></for>
	<if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><call><name pos:line="131" pos:column="13">unpack_trees<pos:position pos:line="131" pos:column="25"/></name><argument_list pos:line="131" pos:column="25">(<argument><expr><name pos:line="131" pos:column="26">nr_trees<pos:position pos:line="131" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="36">t<pos:position pos:line="131" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="131" pos:column="39">&amp;<pos:position pos:line="131" pos:column="44"/></operator><name pos:line="131" pos:column="40">opts<pos:position pos:line="131" pos:column="44"/></name></expr></argument>)<pos:position pos:line="131" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="131" pos:column="46"/></condition><then pos:line="131" pos:column="46">
		<block type="pseudo"><return pos:line="132" pos:column="17">return <expr><literal type="number" pos:line="132" pos:column="24">128<pos:position pos:line="132" pos:column="27"/></literal></expr>;<pos:position pos:line="132" pos:column="28"/></return></block></then></if>

	<if pos:line="134" pos:column="9">if <condition pos:line="134" pos:column="12">(<expr><name><name pos:line="134" pos:column="13">opts<pos:position pos:line="134" pos:column="17"/></name><operator pos:line="134" pos:column="17">.<pos:position pos:line="134" pos:column="18"/></operator><name pos:line="134" pos:column="18">debug_unpack<pos:position pos:line="134" pos:column="30"/></name></name> <operator pos:line="134" pos:column="31">||<pos:position pos:line="134" pos:column="33"/></operator> <name><name pos:line="134" pos:column="34">opts<pos:position pos:line="134" pos:column="38"/></name><operator pos:line="134" pos:column="38">.<pos:position pos:line="134" pos:column="39"/></operator><name pos:line="134" pos:column="39">dry_run<pos:position pos:line="134" pos:column="46"/></name></name></expr>)<pos:position pos:line="134" pos:column="47"/></condition><then pos:line="134" pos:column="47">
		<block type="pseudo"><return pos:line="135" pos:column="17">return <expr><literal type="number" pos:line="135" pos:column="24">0<pos:position pos:line="135" pos:column="25"/></literal></expr>;<pos:position pos:line="135" pos:column="26"/></return></block></then></if> <comment type="block" pos:line="135" pos:column="27">/* do not write the index out */</comment>

	<comment type="block" pos:line="137" pos:column="9">/*
	 * When reading only one tree (either the most basic form,
	 * "-m ent" or "--reset ent" form), we can obtain a fully
	 * valid cache-tree because the index must match exactly
	 * what came from the tree.
	 */</comment>
	<if pos:line="143" pos:column="9">if <condition pos:line="143" pos:column="12">(<expr><name pos:line="143" pos:column="13">nr_trees<pos:position pos:line="143" pos:column="21"/></name> <operator pos:line="143" pos:column="22">==<pos:position pos:line="143" pos:column="24"/></operator> <literal type="number" pos:line="143" pos:column="25">1<pos:position pos:line="143" pos:column="26"/></literal> <operator pos:line="143" pos:column="27">&amp;&amp;<pos:position pos:line="143" pos:column="37"/></operator> <operator pos:line="143" pos:column="30">!<pos:position pos:line="143" pos:column="31"/></operator><name><name pos:line="143" pos:column="31">opts<pos:position pos:line="143" pos:column="35"/></name><operator pos:line="143" pos:column="35">.<pos:position pos:line="143" pos:column="36"/></operator><name pos:line="143" pos:column="36">prefix<pos:position pos:line="143" pos:column="42"/></name></name></expr>)<pos:position pos:line="143" pos:column="43"/></condition><then pos:line="143" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="144" pos:column="17">prime_cache_tree<pos:position pos:line="144" pos:column="33"/></name><argument_list pos:line="144" pos:column="33">(<argument><expr><operator pos:line="144" pos:column="34">&amp;<pos:position pos:line="144" pos:column="39"/></operator><name pos:line="144" pos:column="35">the_index<pos:position pos:line="144" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="144" pos:column="46">trees<pos:position pos:line="144" pos:column="51"/></name><index pos:line="144" pos:column="51">[<expr><literal type="number" pos:line="144" pos:column="52">0<pos:position pos:line="144" pos:column="53"/></literal></expr>]<pos:position pos:line="144" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="144" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="56"/></expr_stmt></block></then></if>

	<if pos:line="146" pos:column="9">if <condition pos:line="146" pos:column="12">(<expr><call><name pos:line="146" pos:column="13">write_locked_index<pos:position pos:line="146" pos:column="31"/></name><argument_list pos:line="146" pos:column="31">(<argument><expr><operator pos:line="146" pos:column="32">&amp;<pos:position pos:line="146" pos:column="37"/></operator><name pos:line="146" pos:column="33">the_index<pos:position pos:line="146" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="146" pos:column="44">&amp;<pos:position pos:line="146" pos:column="49"/></operator><name pos:line="146" pos:column="45">lock_file<pos:position pos:line="146" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="56">COMMIT_LOCK<pos:position pos:line="146" pos:column="67"/></name></expr></argument>)<pos:position pos:line="146" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="146" pos:column="69"/></condition><then pos:line="146" pos:column="69">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="147" pos:column="17">die<pos:position pos:line="147" pos:column="20"/></name><argument_list pos:line="147" pos:column="20">(<argument><expr><literal type="string" pos:line="147" pos:column="21">"unable to write new index file"<pos:position pos:line="147" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="55"/></expr_stmt></block></then></if>
	<return pos:line="148" pos:column="9">return <expr><literal type="number" pos:line="148" pos:column="16">0<pos:position pos:line="148" pos:column="17"/></literal></expr>;<pos:position pos:line="148" pos:column="18"/></return>
}<pos:position pos:line="149" pos:column="2"/></block></function></unit>
