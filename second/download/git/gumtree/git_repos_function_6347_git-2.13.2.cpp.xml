<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6347_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">commit_ref_update<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">files_ref_store<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">refs<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
			     <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">ref_lock<pos:position pos:line="2" pos:column="45"/></name></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">lock<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="3" pos:column="30">const<pos:position pos:line="3" pos:column="35"/></specifier> <name pos:line="3" pos:column="36">unsigned<pos:position pos:line="3" pos:column="44"/></name> <name pos:line="3" pos:column="45">char<pos:position pos:line="3" pos:column="49"/></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">sha1<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="57">const<pos:position pos:line="3" pos:column="62"/></specifier> <name pos:line="3" pos:column="63">char<pos:position pos:line="3" pos:column="67"/></name> <modifier pos:line="3" pos:column="68">*<pos:position pos:line="3" pos:column="69"/></modifier></type><name pos:line="3" pos:column="69">logmsg<pos:position pos:line="3" pos:column="75"/></name></decl></parameter>,
			     <parameter><decl><type><name><name pos:line="4" pos:column="30">struct<pos:position pos:line="4" pos:column="36"/></name> <name pos:line="4" pos:column="37">strbuf<pos:position pos:line="4" pos:column="43"/></name></name> <modifier pos:line="4" pos:column="44">*<pos:position pos:line="4" pos:column="45"/></modifier></type><name pos:line="4" pos:column="45">err<pos:position pos:line="4" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="49"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="6" pos:column="9">files_assert_main_repository<pos:position pos:line="6" pos:column="37"/></name><argument_list pos:line="6" pos:column="37">(<argument><expr><name pos:line="6" pos:column="38">refs<pos:position pos:line="6" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="44">"commit_ref_update"<pos:position pos:line="6" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="65"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">clear_loose_ref_cache<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">refs<pos:position pos:line="8" pos:column="35"/></name></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">files_log_ref_write<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">refs<pos:position pos:line="9" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="39">lock<pos:position pos:line="9" pos:column="43"/></name><operator pos:line="9" pos:column="43">-&gt;<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="45">ref_name<pos:position pos:line="9" pos:column="53"/></name></name></expr></argument>,
				<argument><expr><name><name pos:line="10" pos:column="33">lock<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">-&gt;<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="39">old_oid<pos:position pos:line="10" pos:column="46"/></name><operator pos:line="10" pos:column="46">.<pos:position pos:line="10" pos:column="47"/></operator><name pos:line="10" pos:column="47">hash<pos:position pos:line="10" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="53">sha1<pos:position pos:line="10" pos:column="57"/></name></expr></argument>,
				<argument><expr><name pos:line="11" pos:column="33">logmsg<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="41">0<pos:position pos:line="11" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="44">err<pos:position pos:line="11" pos:column="47"/></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="49"/></condition><then pos:line="11" pos:column="49"> <block pos:line="11" pos:column="50">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">char<pos:position pos:line="12" pos:column="21"/></name> <modifier pos:line="12" pos:column="22">*<pos:position pos:line="12" pos:column="23"/></modifier></type><name pos:line="12" pos:column="23">old_msg<pos:position pos:line="12" pos:column="30"/></name> <init pos:line="12" pos:column="31">= <expr><call><name pos:line="12" pos:column="33">strbuf_detach<pos:position pos:line="12" pos:column="46"/></name><argument_list pos:line="12" pos:column="46">(<argument><expr><name pos:line="12" pos:column="47">err<pos:position pos:line="12" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="52">NULL<pos:position pos:line="12" pos:column="56"/></name></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="58"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">strbuf_addf<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">err<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="34">"cannot update the ref '%s': %s"<pos:position pos:line="13" pos:column="66"/></literal></expr></argument>,
			    <argument><expr><name><name pos:line="14" pos:column="29">lock<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">-&gt;<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="35">ref_name<pos:position pos:line="14" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="45">old_msg<pos:position pos:line="14" pos:column="52"/></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">free<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">old_msg<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">unlock_ref<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">lock<pos:position pos:line="16" pos:column="32"/></name></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
		<return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">-<pos:position pos:line="17" pos:column="25"/></operator><literal type="number" pos:line="17" pos:column="25">1<pos:position pos:line="17" pos:column="26"/></literal></expr>;<pos:position pos:line="17" pos:column="27"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">strcmp<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name><name pos:line="20" pos:column="20">lock<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">-&gt;<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="26">ref_name<pos:position pos:line="20" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="36">"HEAD"<pos:position pos:line="20" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call> <operator pos:line="20" pos:column="44">!=<pos:position pos:line="20" pos:column="46"/></operator> <literal type="number" pos:line="20" pos:column="47">0<pos:position pos:line="20" pos:column="48"/></literal></expr>)<pos:position pos:line="20" pos:column="49"/></condition><then pos:line="20" pos:column="49"> <block pos:line="20" pos:column="50">{
		<comment type="block" pos:line="21" pos:column="17">/*
		 * Special hack: If a branch is updated directly and HEAD
		 * points to it (may happen on the remote side of a push
		 * for example) then logically the HEAD reflog should be
		 * updated too.
		 * A generic solution implies reverse symref information,
		 * but finding all symrefs pointing to the given branch
		 * would be rather costly for this rare event (the direct
		 * update of a branch) to be worth it.  So let's cheat and
		 * check with HEAD only which should cover 99% of all usage
		 * scenarios (even 100% of the default ones).
		 */</comment>
		<decl_stmt><decl><type><name pos:line="33" pos:column="17">unsigned<pos:position pos:line="33" pos:column="25"/></name> <name pos:line="33" pos:column="26">char<pos:position pos:line="33" pos:column="30"/></name></type> <name><name pos:line="33" pos:column="31">head_sha1<pos:position pos:line="33" pos:column="40"/></name><index pos:line="33" pos:column="40">[<expr><literal type="number" pos:line="33" pos:column="41">20<pos:position pos:line="33" pos:column="43"/></literal></expr>]<pos:position pos:line="33" pos:column="44"/></index></name></decl>;<pos:position pos:line="33" pos:column="45"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="34" pos:column="17">int<pos:position pos:line="34" pos:column="20"/></name></type> <name pos:line="34" pos:column="21">head_flag<pos:position pos:line="34" pos:column="30"/></name></decl>;<pos:position pos:line="34" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="35" pos:column="17">const<pos:position pos:line="35" pos:column="22"/></specifier> <name pos:line="35" pos:column="23">char<pos:position pos:line="35" pos:column="27"/></name> <modifier pos:line="35" pos:column="28">*<pos:position pos:line="35" pos:column="29"/></modifier></type><name pos:line="35" pos:column="29">head_ref<pos:position pos:line="35" pos:column="37"/></name></decl>;<pos:position pos:line="35" pos:column="38"/></decl_stmt>

		<expr_stmt><expr><name pos:line="37" pos:column="17">head_ref<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">=<pos:position pos:line="37" pos:column="27"/></operator> <call><name pos:line="37" pos:column="28">refs_resolve_ref_unsafe<pos:position pos:line="37" pos:column="51"/></name><argument_list pos:line="37" pos:column="51">(<argument><expr><operator pos:line="37" pos:column="52">&amp;<pos:position pos:line="37" pos:column="57"/></operator><name><name pos:line="37" pos:column="53">refs<pos:position pos:line="37" pos:column="57"/></name><operator pos:line="37" pos:column="57">-&gt;<pos:position pos:line="37" pos:column="62"/></operator><name pos:line="37" pos:column="59">base<pos:position pos:line="37" pos:column="63"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="65">"HEAD"<pos:position pos:line="37" pos:column="71"/></literal></expr></argument>,
						   <argument><expr><name pos:line="38" pos:column="52">RESOLVE_REF_READING<pos:position pos:line="38" pos:column="71"/></name></expr></argument>,
						   <argument><expr><name pos:line="39" pos:column="52">head_sha1<pos:position pos:line="39" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="63">&amp;<pos:position pos:line="39" pos:column="68"/></operator><name pos:line="39" pos:column="64">head_flag<pos:position pos:line="39" pos:column="73"/></name></expr></argument>)<pos:position pos:line="39" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="75"/></expr_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">head_ref<pos:position pos:line="40" pos:column="29"/></name> <operator pos:line="40" pos:column="30">&amp;&amp;<pos:position pos:line="40" pos:column="40"/></operator> <operator pos:line="40" pos:column="33">(<pos:position pos:line="40" pos:column="34"/></operator><name pos:line="40" pos:column="34">head_flag<pos:position pos:line="40" pos:column="43"/></name> <operator pos:line="40" pos:column="44">&amp;<pos:position pos:line="40" pos:column="49"/></operator> <name pos:line="40" pos:column="46">REF_ISSYMREF<pos:position pos:line="40" pos:column="58"/></name><operator pos:line="40" pos:column="58">)<pos:position pos:line="40" pos:column="59"/></operator> <operator pos:line="40" pos:column="60">&amp;&amp;<pos:position pos:line="40" pos:column="70"/></operator>
		    <operator pos:line="41" pos:column="21">!<pos:position pos:line="41" pos:column="22"/></operator><call><name pos:line="41" pos:column="22">strcmp<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">(<argument><expr><name pos:line="41" pos:column="29">head_ref<pos:position pos:line="41" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="39">lock<pos:position pos:line="41" pos:column="43"/></name><operator pos:line="41" pos:column="43">-&gt;<pos:position pos:line="41" pos:column="48"/></operator><name pos:line="41" pos:column="45">ref_name<pos:position pos:line="41" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="55"/></condition><then pos:line="41" pos:column="55"> <block pos:line="41" pos:column="56">{
			<decl_stmt><decl><type><name><name pos:line="42" pos:column="25">struct<pos:position pos:line="42" pos:column="31"/></name> <name pos:line="42" pos:column="32">strbuf<pos:position pos:line="42" pos:column="38"/></name></name></type> <name pos:line="42" pos:column="39">log_err<pos:position pos:line="42" pos:column="46"/></name> <init pos:line="42" pos:column="47">= <expr><name pos:line="42" pos:column="49">STRBUF_INIT<pos:position pos:line="42" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="42" pos:column="61"/></decl_stmt>
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><call><name pos:line="43" pos:column="29">files_log_ref_write<pos:position pos:line="43" pos:column="48"/></name><argument_list pos:line="43" pos:column="48">(<argument><expr><name pos:line="43" pos:column="49">refs<pos:position pos:line="43" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="55">"HEAD"<pos:position pos:line="43" pos:column="61"/></literal></expr></argument>,
						<argument><expr><name><name pos:line="44" pos:column="49">lock<pos:position pos:line="44" pos:column="53"/></name><operator pos:line="44" pos:column="53">-&gt;<pos:position pos:line="44" pos:column="58"/></operator><name pos:line="44" pos:column="55">old_oid<pos:position pos:line="44" pos:column="62"/></name><operator pos:line="44" pos:column="62">.<pos:position pos:line="44" pos:column="63"/></operator><name pos:line="44" pos:column="63">hash<pos:position pos:line="44" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="69">sha1<pos:position pos:line="44" pos:column="73"/></name></expr></argument>,
						<argument><expr><name pos:line="45" pos:column="49">logmsg<pos:position pos:line="45" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="57">0<pos:position pos:line="45" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="60">&amp;<pos:position pos:line="45" pos:column="65"/></operator><name pos:line="45" pos:column="61">log_err<pos:position pos:line="45" pos:column="68"/></name></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="70"/></condition><then pos:line="45" pos:column="70"> <block pos:line="45" pos:column="71">{
				<expr_stmt><expr><call><name pos:line="46" pos:column="33">error<pos:position pos:line="46" pos:column="38"/></name><argument_list pos:line="46" pos:column="38">(<argument><expr><literal type="string" pos:line="46" pos:column="39">"%s"<pos:position pos:line="46" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="45">log_err<pos:position pos:line="46" pos:column="52"/></name><operator pos:line="46" pos:column="52">.<pos:position pos:line="46" pos:column="53"/></operator><name pos:line="46" pos:column="53">buf<pos:position pos:line="46" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="47" pos:column="33">strbuf_release<pos:position pos:line="47" pos:column="47"/></name><argument_list pos:line="47" pos:column="47">(<argument><expr><operator pos:line="47" pos:column="48">&amp;<pos:position pos:line="47" pos:column="53"/></operator><name pos:line="47" pos:column="49">log_err<pos:position pos:line="47" pos:column="56"/></name></expr></argument>)<pos:position pos:line="47" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="48" pos:column="26"/></block></then></if>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>

	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name pos:line="52" pos:column="13">commit_ref<pos:position pos:line="52" pos:column="23"/></name><argument_list pos:line="52" pos:column="23">(<argument><expr><name pos:line="52" pos:column="24">lock<pos:position pos:line="52" pos:column="28"/></name></expr></argument>)<pos:position pos:line="52" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="30"/></condition><then pos:line="52" pos:column="30"> <block pos:line="52" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">strbuf_addf<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name pos:line="53" pos:column="29">err<pos:position pos:line="53" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="34">"couldn't set '%s'"<pos:position pos:line="53" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="55">lock<pos:position pos:line="53" pos:column="59"/></name><operator pos:line="53" pos:column="59">-&gt;<pos:position pos:line="53" pos:column="64"/></operator><name pos:line="53" pos:column="61">ref_name<pos:position pos:line="53" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="71"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">unlock_ref<pos:position pos:line="54" pos:column="27"/></name><argument_list pos:line="54" pos:column="27">(<argument><expr><name pos:line="54" pos:column="28">lock<pos:position pos:line="54" pos:column="32"/></name></expr></argument>)<pos:position pos:line="54" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="34"/></expr_stmt>
		<return pos:line="55" pos:column="17">return <expr><operator pos:line="55" pos:column="24">-<pos:position pos:line="55" pos:column="25"/></operator><literal type="number" pos:line="55" pos:column="25">1<pos:position pos:line="55" pos:column="26"/></literal></expr>;<pos:position pos:line="55" pos:column="27"/></return>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="58" pos:column="9">unlock_ref<pos:position pos:line="58" pos:column="19"/></name><argument_list pos:line="58" pos:column="19">(<argument><expr><name pos:line="58" pos:column="20">lock<pos:position pos:line="58" pos:column="24"/></name></expr></argument>)<pos:position pos:line="58" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="26"/></expr_stmt>
	<return pos:line="59" pos:column="9">return <expr><literal type="number" pos:line="59" pos:column="16">0<pos:position pos:line="59" pos:column="17"/></literal></expr>;<pos:position pos:line="59" pos:column="18"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
