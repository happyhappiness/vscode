<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_663_git-2.10.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">stop_progress_msg<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">progress<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier><modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">p_progress<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">msg<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">progress<pos:position pos:line="3" pos:column="24"/></name></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type><name pos:line="3" pos:column="26">progress<pos:position pos:line="3" pos:column="34"/></name> <init pos:line="3" pos:column="35">= <expr><operator pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></operator><name pos:line="3" pos:column="38">p_progress<pos:position pos:line="3" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="49"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">progress<pos:position pos:line="4" pos:column="22"/></name></expr>)<pos:position pos:line="4" pos:column="23"/></condition><then pos:line="4" pos:column="23">
		<block type="pseudo"><return pos:line="5" pos:column="17">return;<pos:position pos:line="5" pos:column="24"/></return></block></then></if>
	<expr_stmt><expr><operator pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">p_progress<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">=<pos:position pos:line="6" pos:column="22"/></operator> <name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">progress<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">-&gt;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="23">last_value<pos:position pos:line="7" pos:column="33"/></name></name> <operator pos:line="7" pos:column="34">!=<pos:position pos:line="7" pos:column="36"/></operator> <operator pos:line="7" pos:column="37">-<pos:position pos:line="7" pos:column="38"/></operator><literal type="number" pos:line="7" pos:column="38">1<pos:position pos:line="7" pos:column="39"/></literal></expr>)<pos:position pos:line="7" pos:column="40"/></condition><then pos:line="7" pos:column="40"> <block pos:line="7" pos:column="41">{
		<comment type="block" pos:line="8" pos:column="17">/* Force the last update */</comment>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">char<pos:position pos:line="9" pos:column="21"/></name></type> <name><name pos:line="9" pos:column="22">buf<pos:position pos:line="9" pos:column="25"/></name><index pos:line="9" pos:column="25">[<expr><literal type="number" pos:line="9" pos:column="26">128<pos:position pos:line="9" pos:column="29"/></literal></expr>]<pos:position pos:line="9" pos:column="30"/></index></name></decl>, <modifier pos:line="9" pos:column="32">*<pos:position pos:line="9" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="9" pos:column="33">bufp<pos:position pos:line="9" pos:column="37"/></name></decl>;<pos:position pos:line="9" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">size_t<pos:position pos:line="10" pos:column="23"/></name></type> <name pos:line="10" pos:column="24">len<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><call><name pos:line="10" pos:column="30">strlen<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name pos:line="10" pos:column="37">msg<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call> <operator pos:line="10" pos:column="42">+<pos:position pos:line="10" pos:column="43"/></operator> <literal type="number" pos:line="10" pos:column="44">5<pos:position pos:line="10" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="11" pos:column="17">struct<pos:position pos:line="11" pos:column="23"/></name> <name pos:line="11" pos:column="24">throughput<pos:position pos:line="11" pos:column="34"/></name></name> <modifier pos:line="11" pos:column="35">*<pos:position pos:line="11" pos:column="36"/></modifier></type><name pos:line="11" pos:column="36">tp<pos:position pos:line="11" pos:column="38"/></name> <init pos:line="11" pos:column="39">= <expr><name><name pos:line="11" pos:column="41">progress<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">-&gt;<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="51">throughput<pos:position pos:line="11" pos:column="61"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="62"/></decl_stmt>

		<expr_stmt><expr><name pos:line="13" pos:column="17">bufp<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">=<pos:position pos:line="13" pos:column="23"/></operator> <ternary><condition><expr><operator pos:line="13" pos:column="24">(<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="25">len<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">&lt;<pos:position pos:line="13" pos:column="33"/></operator> <sizeof pos:line="13" pos:column="31">sizeof<argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">buf<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></sizeof><operator pos:line="13" pos:column="42">)<pos:position pos:line="13" pos:column="43"/></operator></expr> ?<pos:position pos:line="13" pos:column="45"/></condition><then pos:line="13" pos:column="45"> <expr><name pos:line="13" pos:column="46">buf<pos:position pos:line="13" pos:column="49"/></name></expr> <pos:position pos:line="13" pos:column="50"/></then><else pos:line="13" pos:column="50">: <expr><call><name pos:line="13" pos:column="52">xmallocz<pos:position pos:line="13" pos:column="60"/></name><argument_list pos:line="13" pos:column="60">(<argument><expr><name pos:line="13" pos:column="61">len<pos:position pos:line="13" pos:column="64"/></name></expr></argument>)<pos:position pos:line="13" pos:column="65"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="13" pos:column="66"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">tp<pos:position pos:line="14" pos:column="23"/></name></expr>)<pos:position pos:line="14" pos:column="24"/></condition><then pos:line="14" pos:column="24"> <block pos:line="14" pos:column="25">{
			<decl_stmt><decl><type><name pos:line="15" pos:column="25">unsigned<pos:position pos:line="15" pos:column="33"/></name> <name pos:line="15" pos:column="34">int<pos:position pos:line="15" pos:column="37"/></name></type> <name pos:line="15" pos:column="38">rate<pos:position pos:line="15" pos:column="42"/></name> <init pos:line="15" pos:column="43">= <expr><ternary><condition><expr><operator pos:line="15" pos:column="45">!<pos:position pos:line="15" pos:column="46"/></operator><name><name pos:line="15" pos:column="46">tp<pos:position pos:line="15" pos:column="48"/></name><operator pos:line="15" pos:column="48">-&gt;<pos:position pos:line="15" pos:column="53"/></operator><name pos:line="15" pos:column="50">avg_misecs<pos:position pos:line="15" pos:column="60"/></name></name></expr> ?<pos:position pos:line="15" pos:column="62"/></condition><then pos:line="15" pos:column="62"> <expr><literal type="number" pos:line="15" pos:column="63">0<pos:position pos:line="15" pos:column="64"/></literal></expr> <pos:position pos:line="15" pos:column="65"/></then><else pos:line="15" pos:column="65">:
					<expr><name><name pos:line="16" pos:column="41">tp<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">-&gt;<pos:position pos:line="16" pos:column="48"/></operator><name pos:line="16" pos:column="45">avg_bytes<pos:position pos:line="16" pos:column="54"/></name></name> <operator pos:line="16" pos:column="55">/<pos:position pos:line="16" pos:column="56"/></operator> <name><name pos:line="16" pos:column="57">tp<pos:position pos:line="16" pos:column="59"/></name><operator pos:line="16" pos:column="59">-&gt;<pos:position pos:line="16" pos:column="64"/></operator><name pos:line="16" pos:column="61">avg_misecs<pos:position pos:line="16" pos:column="71"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="16" pos:column="72"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">throughput_string<pos:position pos:line="17" pos:column="42"/></name><argument_list pos:line="17" pos:column="42">(<argument><expr><operator pos:line="17" pos:column="43">&amp;<pos:position pos:line="17" pos:column="48"/></operator><name><name pos:line="17" pos:column="44">tp<pos:position pos:line="17" pos:column="46"/></name><operator pos:line="17" pos:column="46">-&gt;<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="48">display<pos:position pos:line="17" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="57">tp<pos:position pos:line="17" pos:column="59"/></name><operator pos:line="17" pos:column="59">-&gt;<pos:position pos:line="17" pos:column="64"/></operator><name pos:line="17" pos:column="61">curr_total<pos:position pos:line="17" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="73">rate<pos:position pos:line="17" pos:column="77"/></name></expr></argument>)<pos:position pos:line="17" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="79"/></expr_stmt>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="19" pos:column="17">progress_update<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">=<pos:position pos:line="19" pos:column="34"/></operator> <literal type="number" pos:line="19" pos:column="35">1<pos:position pos:line="19" pos:column="36"/></literal></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">xsnprintf<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><name pos:line="20" pos:column="27">bufp<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="33">len<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">+<pos:position pos:line="20" pos:column="38"/></operator> <literal type="number" pos:line="20" pos:column="39">1<pos:position pos:line="20" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="42">", %s.\n"<pos:position pos:line="20" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="53">msg<pos:position pos:line="20" pos:column="56"/></name></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">display<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">progress<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="35">progress<pos:position pos:line="21" pos:column="43"/></name><operator pos:line="21" pos:column="43">-&gt;<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="45">last_value<pos:position pos:line="21" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="57">bufp<pos:position pos:line="21" pos:column="61"/></name></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">buf<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">!=<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="28">bufp<pos:position pos:line="22" pos:column="32"/></name></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">free<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">bufp<pos:position pos:line="23" pos:column="34"/></name></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt></block></then></if>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">clear_progress_signal<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">()<pos:position pos:line="25" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">progress<pos:position pos:line="26" pos:column="21"/></name><operator pos:line="26" pos:column="21">-&gt;<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="23">throughput<pos:position pos:line="26" pos:column="33"/></name></name></expr>)<pos:position pos:line="26" pos:column="34"/></condition><then pos:line="26" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="17">strbuf_release<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><operator pos:line="27" pos:column="32">&amp;<pos:position pos:line="27" pos:column="37"/></operator><name><name pos:line="27" pos:column="33">progress<pos:position pos:line="27" pos:column="41"/></name><operator pos:line="27" pos:column="41">-&gt;<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="43">throughput<pos:position pos:line="27" pos:column="53"/></name><operator pos:line="27" pos:column="53">-&gt;<pos:position pos:line="27" pos:column="58"/></operator><name pos:line="27" pos:column="55">display<pos:position pos:line="27" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="64"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">free<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><name><name pos:line="28" pos:column="14">progress<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">-&gt;<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="24">throughput<pos:position pos:line="28" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">free<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><name pos:line="29" pos:column="14">progress<pos:position pos:line="29" pos:column="22"/></name></expr></argument>)<pos:position pos:line="29" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
