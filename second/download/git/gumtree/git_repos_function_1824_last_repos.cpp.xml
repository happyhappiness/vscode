<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1824_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">file_change_cr<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">s<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="43">struct<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">branch<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">b<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">rename<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">d<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name><name pos:line="4" pos:column="16">struct<pos:position pos:line="4" pos:column="22"/></name> <name pos:line="4" pos:column="23">strbuf<pos:position pos:line="4" pos:column="29"/></name></name></type> <name pos:line="4" pos:column="30">s_uq<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><name pos:line="4" pos:column="37">STRBUF_INIT<pos:position pos:line="4" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">static<pos:position pos:line="5" pos:column="15"/></specifier> <type><name><name pos:line="5" pos:column="16">struct<pos:position pos:line="5" pos:column="22"/></name> <name pos:line="5" pos:column="23">strbuf<pos:position pos:line="5" pos:column="29"/></name></name></type> <name pos:line="5" pos:column="30">d_uq<pos:position pos:line="5" pos:column="34"/></name> <init pos:line="5" pos:column="35">= <expr><name pos:line="5" pos:column="37">STRBUF_INIT<pos:position pos:line="5" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">endp<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">tree_entry<pos:position pos:line="7" pos:column="26"/></name></name></type> <name pos:line="7" pos:column="27">leaf<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">strbuf_reset<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><operator pos:line="9" pos:column="22">&amp;<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="23">s_uq<pos:position pos:line="9" pos:column="27"/></name></expr></argument>)<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="29"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><call><name pos:line="10" pos:column="14">unquote_c_style<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><operator pos:line="10" pos:column="30">&amp;<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="31">s_uq<pos:position pos:line="10" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="37">s<pos:position pos:line="10" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="40">&amp;<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="41">endp<pos:position pos:line="10" pos:column="45"/></name></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="47"/></condition><then pos:line="10" pos:column="47"> <block pos:line="10" pos:column="48">{
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">endp<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">!=<pos:position pos:line="11" pos:column="29"/></operator> <literal type="char" pos:line="11" pos:column="30">' '<pos:position pos:line="11" pos:column="33"/></literal></expr>)<pos:position pos:line="11" pos:column="34"/></condition><then pos:line="11" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">die<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><literal type="string" pos:line="12" pos:column="29">"Missing space after source: %s"<pos:position pos:line="12" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="63">command_buf<pos:position pos:line="12" pos:column="74"/></name><operator pos:line="12" pos:column="74">.<pos:position pos:line="12" pos:column="75"/></operator><name pos:line="12" pos:column="75">buf<pos:position pos:line="12" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="80"/></expr_stmt></block></then></if>
	}<pos:position pos:line="13" pos:column="10"/></block></then> <else pos:line="13" pos:column="11">else <block pos:line="13" pos:column="16">{
		<expr_stmt><expr><name pos:line="14" pos:column="17">endp<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">=<pos:position pos:line="14" pos:column="23"/></operator> <call><name pos:line="14" pos:column="24">strchr<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">s<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="14" pos:column="34">' '<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">endp<pos:position pos:line="15" pos:column="26"/></name></expr>)<pos:position pos:line="15" pos:column="27"/></condition><then pos:line="15" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">die<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><literal type="string" pos:line="16" pos:column="29">"Missing space after source: %s"<pos:position pos:line="16" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="63">command_buf<pos:position pos:line="16" pos:column="74"/></name><operator pos:line="16" pos:column="74">.<pos:position pos:line="16" pos:column="75"/></operator><name pos:line="16" pos:column="75">buf<pos:position pos:line="16" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="80"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">strbuf_add<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><operator pos:line="17" pos:column="28">&amp;<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="29">s_uq<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="35">s<pos:position pos:line="17" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="38">endp<pos:position pos:line="17" pos:column="42"/></name> <operator pos:line="17" pos:column="43">-<pos:position pos:line="17" pos:column="44"/></operator> <name pos:line="17" pos:column="45">s<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></else></if>
	<expr_stmt><expr><name pos:line="19" pos:column="9">s<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <name><name pos:line="19" pos:column="13">s_uq<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">.<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">buf<pos:position pos:line="19" pos:column="21"/></name></name></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>

	<expr_stmt><expr><name pos:line="21" pos:column="9">endp<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">++<pos:position pos:line="21" pos:column="15"/></operator></expr>;<pos:position pos:line="21" pos:column="16"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><operator pos:line="22" pos:column="14">*<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">endp<pos:position pos:line="22" pos:column="19"/></name></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">die<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><literal type="string" pos:line="23" pos:column="21">"Missing dest: %s"<pos:position pos:line="23" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="41">command_buf<pos:position pos:line="23" pos:column="52"/></name><operator pos:line="23" pos:column="52">.<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="53">buf<pos:position pos:line="23" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="25" pos:column="9">d<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <name pos:line="25" pos:column="13">endp<pos:position pos:line="25" pos:column="17"/></name></expr>;<pos:position pos:line="25" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">strbuf_reset<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><operator pos:line="26" pos:column="22">&amp;<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="23">d_uq<pos:position pos:line="26" pos:column="27"/></name></expr></argument>)<pos:position pos:line="26" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><call><name pos:line="27" pos:column="14">unquote_c_style<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><operator pos:line="27" pos:column="30">&amp;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="31">d_uq<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">d<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="40">&amp;<pos:position pos:line="27" pos:column="45"/></operator><name pos:line="27" pos:column="41">endp<pos:position pos:line="27" pos:column="45"/></name></expr></argument>)<pos:position pos:line="27" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="47"/></condition><then pos:line="27" pos:column="47"> <block pos:line="27" pos:column="48">{
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><operator pos:line="28" pos:column="21">*<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">endp<pos:position pos:line="28" pos:column="26"/></name></expr>)<pos:position pos:line="28" pos:column="27"/></condition><then pos:line="28" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">die<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><literal type="string" pos:line="29" pos:column="29">"Garbage after dest in: %s"<pos:position pos:line="29" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="58">command_buf<pos:position pos:line="29" pos:column="69"/></name><operator pos:line="29" pos:column="69">.<pos:position pos:line="29" pos:column="70"/></operator><name pos:line="29" pos:column="70">buf<pos:position pos:line="29" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="75"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="30" pos:column="17">d<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <name><name pos:line="30" pos:column="21">d_uq<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">.<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="26">buf<pos:position pos:line="30" pos:column="29"/></name></name></expr>;<pos:position pos:line="30" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">memset<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><operator pos:line="33" pos:column="16">&amp;<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="17">leaf<pos:position pos:line="33" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="23">0<pos:position pos:line="33" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="26">sizeof<argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">leaf<pos:position pos:line="33" pos:column="37"/></name></expr></argument>)<pos:position pos:line="33" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">rename<pos:position pos:line="34" pos:column="19"/></name></expr>)<pos:position pos:line="34" pos:column="20"/></condition><then pos:line="34" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="17">tree_content_remove<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><operator pos:line="35" pos:column="37">&amp;<pos:position pos:line="35" pos:column="42"/></operator><name><name pos:line="35" pos:column="38">b<pos:position pos:line="35" pos:column="39"/></name><operator pos:line="35" pos:column="39">-&gt;<pos:position pos:line="35" pos:column="44"/></operator><name pos:line="35" pos:column="41">branch_tree<pos:position pos:line="35" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="54">s<pos:position pos:line="35" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="57">&amp;<pos:position pos:line="35" pos:column="62"/></operator><name pos:line="35" pos:column="58">leaf<pos:position pos:line="35" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="64">1<pos:position pos:line="35" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="67"/></expr_stmt></block></then>
	<else pos:line="36" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="17">tree_content_get<pos:position pos:line="37" pos:column="33"/></name><argument_list pos:line="37" pos:column="33">(<argument><expr><operator pos:line="37" pos:column="34">&amp;<pos:position pos:line="37" pos:column="39"/></operator><name><name pos:line="37" pos:column="35">b<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">-&gt;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="38">branch_tree<pos:position pos:line="37" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="51">s<pos:position pos:line="37" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="54">&amp;<pos:position pos:line="37" pos:column="59"/></operator><name pos:line="37" pos:column="55">leaf<pos:position pos:line="37" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="61">1<pos:position pos:line="37" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="64"/></expr_stmt></block></else></if>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><name><name pos:line="38" pos:column="14">leaf<pos:position pos:line="38" pos:column="18"/></name><operator pos:line="38" pos:column="18">.<pos:position pos:line="38" pos:column="19"/></operator><name pos:line="38" pos:column="19">versions<pos:position pos:line="38" pos:column="27"/></name><index pos:line="38" pos:column="27">[<expr><literal type="number" pos:line="38" pos:column="28">1<pos:position pos:line="38" pos:column="29"/></literal></expr>]<pos:position pos:line="38" pos:column="30"/></index></name><operator pos:line="38" pos:column="30">.<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="31">mode<pos:position pos:line="38" pos:column="35"/></name></expr>)<pos:position pos:line="38" pos:column="36"/></condition><then pos:line="38" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="17">die<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><literal type="string" pos:line="39" pos:column="21">"Path %s not in branch"<pos:position pos:line="39" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="46">s<pos:position pos:line="39" pos:column="47"/></name></expr></argument>)<pos:position pos:line="39" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="49"/></expr_stmt></block></then></if>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><operator pos:line="40" pos:column="13">!<pos:position pos:line="40" pos:column="14"/></operator><operator pos:line="40" pos:column="14">*<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="15">d<pos:position pos:line="40" pos:column="16"/></name></expr>)<pos:position pos:line="40" pos:column="17"/></condition><then pos:line="40" pos:column="17"> <block pos:line="40" pos:column="18">{	<comment type="block" pos:line="40" pos:column="25">/* C "path/to/subdir" "" */</comment>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">tree_content_replace<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">(<argument><expr><operator pos:line="41" pos:column="38">&amp;<pos:position pos:line="41" pos:column="43"/></operator><name><name pos:line="41" pos:column="39">b<pos:position pos:line="41" pos:column="40"/></name><operator pos:line="41" pos:column="40">-&gt;<pos:position pos:line="41" pos:column="45"/></operator><name pos:line="41" pos:column="42">branch_tree<pos:position pos:line="41" pos:column="53"/></name></name></expr></argument>,
			<argument><expr><operator pos:line="42" pos:column="25">&amp;<pos:position pos:line="42" pos:column="30"/></operator><name><name pos:line="42" pos:column="26">leaf<pos:position pos:line="42" pos:column="30"/></name><operator pos:line="42" pos:column="30">.<pos:position pos:line="42" pos:column="31"/></operator><name pos:line="42" pos:column="31">versions<pos:position pos:line="42" pos:column="39"/></name><index pos:line="42" pos:column="39">[<expr><literal type="number" pos:line="42" pos:column="40">1<pos:position pos:line="42" pos:column="41"/></literal></expr>]<pos:position pos:line="42" pos:column="42"/></index></name><operator pos:line="42" pos:column="42">.<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="43">oid<pos:position pos:line="42" pos:column="46"/></name></expr></argument>,
			<argument><expr><name><name pos:line="43" pos:column="25">leaf<pos:position pos:line="43" pos:column="29"/></name><operator pos:line="43" pos:column="29">.<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="30">versions<pos:position pos:line="43" pos:column="38"/></name><index pos:line="43" pos:column="38">[<expr><literal type="number" pos:line="43" pos:column="39">1<pos:position pos:line="43" pos:column="40"/></literal></expr>]<pos:position pos:line="43" pos:column="41"/></index></name><operator pos:line="43" pos:column="41">.<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="42">mode<pos:position pos:line="43" pos:column="46"/></name></expr></argument>,
			<argument><expr><name><name pos:line="44" pos:column="25">leaf<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">.<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="30">tree<pos:position pos:line="44" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt>
		<return pos:line="45" pos:column="17">return;<pos:position pos:line="45" pos:column="24"/></return>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">tree_content_set<pos:position pos:line="47" pos:column="25"/></name><argument_list pos:line="47" pos:column="25">(<argument><expr><operator pos:line="47" pos:column="26">&amp;<pos:position pos:line="47" pos:column="31"/></operator><name><name pos:line="47" pos:column="27">b<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">-&gt;<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="30">branch_tree<pos:position pos:line="47" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="43">d<pos:position pos:line="47" pos:column="44"/></name></expr></argument>,
		<argument><expr><operator pos:line="48" pos:column="17">&amp;<pos:position pos:line="48" pos:column="22"/></operator><name><name pos:line="48" pos:column="18">leaf<pos:position pos:line="48" pos:column="22"/></name><operator pos:line="48" pos:column="22">.<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="23">versions<pos:position pos:line="48" pos:column="31"/></name><index pos:line="48" pos:column="31">[<expr><literal type="number" pos:line="48" pos:column="32">1<pos:position pos:line="48" pos:column="33"/></literal></expr>]<pos:position pos:line="48" pos:column="34"/></index></name><operator pos:line="48" pos:column="34">.<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="35">oid<pos:position pos:line="48" pos:column="38"/></name></expr></argument>,
		<argument><expr><name><name pos:line="49" pos:column="17">leaf<pos:position pos:line="49" pos:column="21"/></name><operator pos:line="49" pos:column="21">.<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="22">versions<pos:position pos:line="49" pos:column="30"/></name><index pos:line="49" pos:column="30">[<expr><literal type="number" pos:line="49" pos:column="31">1<pos:position pos:line="49" pos:column="32"/></literal></expr>]<pos:position pos:line="49" pos:column="33"/></index></name><operator pos:line="49" pos:column="33">.<pos:position pos:line="49" pos:column="34"/></operator><name pos:line="49" pos:column="34">mode<pos:position pos:line="49" pos:column="38"/></name></expr></argument>,
		<argument><expr><name><name pos:line="50" pos:column="17">leaf<pos:position pos:line="50" pos:column="21"/></name><operator pos:line="50" pos:column="21">.<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">tree<pos:position pos:line="50" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
