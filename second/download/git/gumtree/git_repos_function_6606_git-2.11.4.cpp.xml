<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6606_git-2.11.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">re_dfastate_t<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">merge_state_with_log<pos:position pos:line="3" pos:column="21"/></name> <parameter_list pos:line="3" pos:column="22">(<parameter><decl><type><name pos:line="3" pos:column="23">reg_errcode_t<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">err<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="43">re_match_context_t<pos:position pos:line="3" pos:column="61"/></name> <modifier pos:line="3" pos:column="62">*<pos:position pos:line="3" pos:column="63"/></modifier></type><name pos:line="3" pos:column="63">mctx<pos:position pos:line="3" pos:column="67"/></name></decl></parameter>,
		      <parameter><decl><type><name pos:line="4" pos:column="23">re_dfastate_t<pos:position pos:line="4" pos:column="36"/></name> <modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">next_state<pos:position pos:line="4" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="49"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">re_dfa_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier><specifier pos:line="6" pos:column="19">const<pos:position pos:line="6" pos:column="24"/></specifier></type> <name pos:line="6" pos:column="25">dfa<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name><name pos:line="6" pos:column="31">mctx<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">dfa<pos:position pos:line="6" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">cur_idx<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><call><name pos:line="7" pos:column="17">re_string_cur_idx<pos:position pos:line="7" pos:column="34"/></name> <argument_list pos:line="7" pos:column="35">(<argument><expr><operator pos:line="7" pos:column="36">&amp;<pos:position pos:line="7" pos:column="41"/></operator><name><name pos:line="7" pos:column="37">mctx<pos:position pos:line="7" pos:column="41"/></name><operator pos:line="7" pos:column="41">-&gt;<pos:position pos:line="7" pos:column="46"/></operator><name pos:line="7" pos:column="43">input<pos:position pos:line="7" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="50"/></decl_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">cur_idx<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">&gt;<pos:position pos:line="9" pos:column="19"/></operator> <name><name pos:line="9" pos:column="17">mctx<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">-&gt;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="23">state_log_top<pos:position pos:line="9" pos:column="36"/></name></name></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37">
    <block pos:line="10" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="11" pos:column="7">mctx<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">state_log<pos:position pos:line="11" pos:column="22"/></name><index pos:line="11" pos:column="22">[<expr><name pos:line="11" pos:column="23">cur_idx<pos:position pos:line="11" pos:column="30"/></name></expr>]<pos:position pos:line="11" pos:column="31"/></index></name> <operator pos:line="11" pos:column="32">=<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="34">next_state<pos:position pos:line="11" pos:column="44"/></name></expr>;<pos:position pos:line="11" pos:column="45"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="12" pos:column="7">mctx<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">-&gt;<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="13">state_log_top<pos:position pos:line="12" pos:column="26"/></name></name> <operator pos:line="12" pos:column="27">=<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="29">cur_idx<pos:position pos:line="12" pos:column="36"/></name></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then>
  <elseif pos:line="14" pos:column="3">else <if pos:line="14" pos:column="8">if <condition pos:line="14" pos:column="11">(<expr><name><name pos:line="14" pos:column="12">mctx<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">state_log<pos:position pos:line="14" pos:column="27"/></name><index pos:line="14" pos:column="27">[<expr><name pos:line="14" pos:column="28">cur_idx<pos:position pos:line="14" pos:column="35"/></name></expr>]<pos:position pos:line="14" pos:column="36"/></index></name> <operator pos:line="14" pos:column="37">==<pos:position pos:line="14" pos:column="39"/></operator> <name pos:line="14" pos:column="40">NULL<pos:position pos:line="14" pos:column="44"/></name></expr>)<pos:position pos:line="14" pos:column="45"/></condition><then pos:line="14" pos:column="45">
    <block pos:line="15" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="16" pos:column="7">mctx<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">-&gt;<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="13">state_log<pos:position pos:line="16" pos:column="22"/></name><index pos:line="16" pos:column="22">[<expr><name pos:line="16" pos:column="23">cur_idx<pos:position pos:line="16" pos:column="30"/></name></expr>]<pos:position pos:line="16" pos:column="31"/></index></name> <operator pos:line="16" pos:column="32">=<pos:position pos:line="16" pos:column="33"/></operator> <name pos:line="16" pos:column="34">next_state<pos:position pos:line="16" pos:column="44"/></name></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if></elseif>
  <else pos:line="18" pos:column="3">else
    <block pos:line="19" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="20" pos:column="7">re_dfastate_t<pos:position pos:line="20" pos:column="20"/></name> <modifier pos:line="20" pos:column="21">*<pos:position pos:line="20" pos:column="22"/></modifier></type><name pos:line="20" pos:column="22">pstate<pos:position pos:line="20" pos:column="28"/></name></decl>;<pos:position pos:line="20" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="21" pos:column="7">unsigned<pos:position pos:line="21" pos:column="15"/></name> <name pos:line="21" pos:column="16">int<pos:position pos:line="21" pos:column="19"/></name></type> <name pos:line="21" pos:column="20">context<pos:position pos:line="21" pos:column="27"/></name></decl>;<pos:position pos:line="21" pos:column="28"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="22" pos:column="7">re_node_set<pos:position pos:line="22" pos:column="18"/></name></type> <name pos:line="22" pos:column="19">next_nodes<pos:position pos:line="22" pos:column="29"/></name></decl>, <modifier pos:line="22" pos:column="31">*<pos:position pos:line="22" pos:column="32"/></modifier><decl><type ref="prev"/><name pos:line="22" pos:column="32">log_nodes<pos:position pos:line="22" pos:column="41"/></name></decl>, <modifier pos:line="22" pos:column="43">*<pos:position pos:line="22" pos:column="44"/></modifier><decl><type ref="prev"/><name pos:line="22" pos:column="44">table_nodes<pos:position pos:line="22" pos:column="55"/></name> <init pos:line="22" pos:column="56">= <expr><name pos:line="22" pos:column="58">NULL<pos:position pos:line="22" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="63"/></decl_stmt>
      <comment type="block" pos:line="23" pos:column="7">/* If (state_log[cur_idx] != 0), it implies that cur_idx is
	 the destination of a multibyte char/collating element/
	 back reference.  Then the next state is the union set of
	 these destinations and the results of the transition table.  */</comment>
      <expr_stmt><expr><name pos:line="27" pos:column="7">pstate<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <name><name pos:line="27" pos:column="16">mctx<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">-&gt;<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="22">state_log<pos:position pos:line="27" pos:column="31"/></name><index pos:line="27" pos:column="31">[<expr><name pos:line="27" pos:column="32">cur_idx<pos:position pos:line="27" pos:column="39"/></name></expr>]<pos:position pos:line="27" pos:column="40"/></index></name></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name pos:line="28" pos:column="7">log_nodes<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <name><name pos:line="28" pos:column="19">pstate<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">-&gt;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="27">entrance_nodes<pos:position pos:line="28" pos:column="41"/></name></name></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
      <if pos:line="29" pos:column="7">if <condition pos:line="29" pos:column="10">(<expr><name pos:line="29" pos:column="11">next_state<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">!=<pos:position pos:line="29" pos:column="24"/></operator> <name pos:line="29" pos:column="25">NULL<pos:position pos:line="29" pos:column="29"/></name></expr>)<pos:position pos:line="29" pos:column="30"/></condition><then pos:line="29" pos:column="30">
	<block pos:line="30" pos:column="9">{
	  <expr_stmt><expr><name pos:line="31" pos:column="11">table_nodes<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">=<pos:position pos:line="31" pos:column="24"/></operator> <name><name pos:line="31" pos:column="25">next_state<pos:position pos:line="31" pos:column="35"/></name><operator pos:line="31" pos:column="35">-&gt;<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="37">entrance_nodes<pos:position pos:line="31" pos:column="51"/></name></name></expr>;<pos:position pos:line="31" pos:column="52"/></expr_stmt>
	  <expr_stmt><expr><operator pos:line="32" pos:column="11">*<pos:position pos:line="32" pos:column="12"/></operator><name pos:line="32" pos:column="12">err<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <call><name pos:line="32" pos:column="18">re_node_set_init_union<pos:position pos:line="32" pos:column="40"/></name> <argument_list pos:line="32" pos:column="41">(<argument><expr><operator pos:line="32" pos:column="42">&amp;<pos:position pos:line="32" pos:column="47"/></operator><name pos:line="32" pos:column="43">next_nodes<pos:position pos:line="32" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="55">table_nodes<pos:position pos:line="32" pos:column="66"/></name></expr></argument>,
					     <argument><expr><name pos:line="33" pos:column="46">log_nodes<pos:position pos:line="33" pos:column="55"/></name></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt>
	  <if pos:line="34" pos:column="11">if <condition pos:line="34" pos:column="14">(<expr><call><name pos:line="34" pos:column="15">BE<pos:position pos:line="34" pos:column="17"/></name> <argument_list pos:line="34" pos:column="18">(<argument><expr><operator pos:line="34" pos:column="19">*<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="20">err<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">!=<pos:position pos:line="34" pos:column="26"/></operator> <name pos:line="34" pos:column="27">REG_NOERROR<pos:position pos:line="34" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="40">0<pos:position pos:line="34" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="43"/></condition><then pos:line="34" pos:column="43">
	    <block type="pseudo"><return pos:line="35" pos:column="13">return <expr><name pos:line="35" pos:column="20">NULL<pos:position pos:line="35" pos:column="24"/></name></expr>;<pos:position pos:line="35" pos:column="25"/></return></block></then></if>
	}<pos:position pos:line="36" pos:column="10"/></block></then>
      <else pos:line="37" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="9">next_nodes<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">=<pos:position pos:line="38" pos:column="21"/></operator> <operator pos:line="38" pos:column="22">*<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">log_nodes<pos:position pos:line="38" pos:column="32"/></name></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt></block></else></if>
      <comment type="block" pos:line="39" pos:column="7">/* Note: We already add the nodes of the initial state,
	 then we don't need to add them here.  */</comment>

      <expr_stmt><expr><name pos:line="42" pos:column="7">context<pos:position pos:line="42" pos:column="14"/></name> <operator pos:line="42" pos:column="15">=<pos:position pos:line="42" pos:column="16"/></operator> <call><name pos:line="42" pos:column="17">re_string_context_at<pos:position pos:line="42" pos:column="37"/></name> <argument_list pos:line="42" pos:column="38">(<argument><expr><operator pos:line="42" pos:column="39">&amp;<pos:position pos:line="42" pos:column="44"/></operator><name><name pos:line="42" pos:column="40">mctx<pos:position pos:line="42" pos:column="44"/></name><operator pos:line="42" pos:column="44">-&gt;<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="46">input<pos:position pos:line="42" pos:column="51"/></name></name></expr></argument>,
				      <argument><expr><call><name pos:line="43" pos:column="39">re_string_cur_idx<pos:position pos:line="43" pos:column="56"/></name> <argument_list pos:line="43" pos:column="57">(<argument><expr><operator pos:line="43" pos:column="58">&amp;<pos:position pos:line="43" pos:column="63"/></operator><name><name pos:line="43" pos:column="59">mctx<pos:position pos:line="43" pos:column="63"/></name><operator pos:line="43" pos:column="63">-&gt;<pos:position pos:line="43" pos:column="68"/></operator><name pos:line="43" pos:column="65">input<pos:position pos:line="43" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="71"/></argument_list></call> <operator pos:line="43" pos:column="72">-<pos:position pos:line="43" pos:column="73"/></operator> <literal type="number" pos:line="43" pos:column="74">1<pos:position pos:line="43" pos:column="75"/></literal></expr></argument>,
				      <argument><expr><name><name pos:line="44" pos:column="39">mctx<pos:position pos:line="44" pos:column="43"/></name><operator pos:line="44" pos:column="43">-&gt;<pos:position pos:line="44" pos:column="48"/></operator><name pos:line="44" pos:column="45">eflags<pos:position pos:line="44" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><name pos:line="45" pos:column="7">next_state<pos:position pos:line="45" pos:column="17"/></name> <operator pos:line="45" pos:column="18">=<pos:position pos:line="45" pos:column="19"/></operator> <name><name pos:line="45" pos:column="20">mctx<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">-&gt;<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="26">state_log<pos:position pos:line="45" pos:column="35"/></name><index pos:line="45" pos:column="35">[<expr><name pos:line="45" pos:column="36">cur_idx<pos:position pos:line="45" pos:column="43"/></name></expr>]<pos:position pos:line="45" pos:column="44"/></index></name>
	<operator pos:line="46" pos:column="9">=<pos:position pos:line="46" pos:column="10"/></operator> <call><name pos:line="46" pos:column="11">re_acquire_state_context<pos:position pos:line="46" pos:column="35"/></name> <argument_list pos:line="46" pos:column="36">(<argument><expr><name pos:line="46" pos:column="37">err<pos:position pos:line="46" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="42">dfa<pos:position pos:line="46" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="47">&amp;<pos:position pos:line="46" pos:column="52"/></operator><name pos:line="46" pos:column="48">next_nodes<pos:position pos:line="46" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="60">context<pos:position pos:line="46" pos:column="67"/></name></expr></argument>)<pos:position pos:line="46" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="69"/></expr_stmt>
      <comment type="block" pos:line="47" pos:column="7">/* We don't need to check errors here, since the return value of
	 this function is next_state and ERR is already set.  */</comment>

      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><name pos:line="50" pos:column="11">table_nodes<pos:position pos:line="50" pos:column="22"/></name> <operator pos:line="50" pos:column="23">!=<pos:position pos:line="50" pos:column="25"/></operator> <name pos:line="50" pos:column="26">NULL<pos:position pos:line="50" pos:column="30"/></name></expr>)<pos:position pos:line="50" pos:column="31"/></condition><then pos:line="50" pos:column="31">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="9">re_node_set_free<pos:position pos:line="51" pos:column="25"/></name> <argument_list pos:line="51" pos:column="26">(<argument><expr><operator pos:line="51" pos:column="27">&amp;<pos:position pos:line="51" pos:column="32"/></operator><name pos:line="51" pos:column="28">next_nodes<pos:position pos:line="51" pos:column="38"/></name></expr></argument>)<pos:position pos:line="51" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="40"/></expr_stmt></block></then></if>
    }<pos:position pos:line="52" pos:column="6"/></block></else></if>

  <if pos:line="54" pos:column="3">if <condition pos:line="54" pos:column="6">(<expr><call><name pos:line="54" pos:column="7">BE<pos:position pos:line="54" pos:column="9"/></name> <argument_list pos:line="54" pos:column="10">(<argument><expr><name><name pos:line="54" pos:column="11">dfa<pos:position pos:line="54" pos:column="14"/></name><operator pos:line="54" pos:column="14">-&gt;<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="16">nbackref<pos:position pos:line="54" pos:column="24"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="26">0<pos:position pos:line="54" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="28"/></argument_list></call> <operator pos:line="54" pos:column="29">&amp;&amp;<pos:position pos:line="54" pos:column="39"/></operator> <name pos:line="54" pos:column="32">next_state<pos:position pos:line="54" pos:column="42"/></name> <operator pos:line="54" pos:column="43">!=<pos:position pos:line="54" pos:column="45"/></operator> <name pos:line="54" pos:column="46">NULL<pos:position pos:line="54" pos:column="50"/></name></expr>)<pos:position pos:line="54" pos:column="51"/></condition><then pos:line="54" pos:column="51">
    <block pos:line="55" pos:column="5">{
      <comment type="block" pos:line="56" pos:column="7">/* Check OP_OPEN_SUBEXP in the current state in case that we use them
	 later.  We must check them here, since the back references in the
	 next state might use them.  */</comment>
      <expr_stmt><expr><operator pos:line="59" pos:column="7">*<pos:position pos:line="59" pos:column="8"/></operator><name pos:line="59" pos:column="8">err<pos:position pos:line="59" pos:column="11"/></name> <operator pos:line="59" pos:column="12">=<pos:position pos:line="59" pos:column="13"/></operator> <call><name pos:line="59" pos:column="14">check_subexp_matching_top<pos:position pos:line="59" pos:column="39"/></name> <argument_list pos:line="59" pos:column="40">(<argument><expr><name pos:line="59" pos:column="41">mctx<pos:position pos:line="59" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="47">&amp;<pos:position pos:line="59" pos:column="52"/></operator><name><name pos:line="59" pos:column="48">next_state<pos:position pos:line="59" pos:column="58"/></name><operator pos:line="59" pos:column="58">-&gt;<pos:position pos:line="59" pos:column="63"/></operator><name pos:line="59" pos:column="60">nodes<pos:position pos:line="59" pos:column="65"/></name></name></expr></argument>,
					<argument><expr><name pos:line="60" pos:column="41">cur_idx<pos:position pos:line="60" pos:column="48"/></name></expr></argument>)<pos:position pos:line="60" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="50"/></expr_stmt>
      <if pos:line="61" pos:column="7">if <condition pos:line="61" pos:column="10">(<expr><call><name pos:line="61" pos:column="11">BE<pos:position pos:line="61" pos:column="13"/></name> <argument_list pos:line="61" pos:column="14">(<argument><expr><operator pos:line="61" pos:column="15">*<pos:position pos:line="61" pos:column="16"/></operator><name pos:line="61" pos:column="16">err<pos:position pos:line="61" pos:column="19"/></name> <operator pos:line="61" pos:column="20">!=<pos:position pos:line="61" pos:column="22"/></operator> <name pos:line="61" pos:column="23">REG_NOERROR<pos:position pos:line="61" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="36">0<pos:position pos:line="61" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="39"/></condition><then pos:line="61" pos:column="39">
	<block type="pseudo"><return pos:line="62" pos:column="9">return <expr><name pos:line="62" pos:column="16">NULL<pos:position pos:line="62" pos:column="20"/></name></expr>;<pos:position pos:line="62" pos:column="21"/></return></block></then></if>

      <comment type="block" pos:line="64" pos:column="7">/* If the next state has back references.  */</comment>
      <if pos:line="65" pos:column="7">if <condition pos:line="65" pos:column="10">(<expr><name><name pos:line="65" pos:column="11">next_state<pos:position pos:line="65" pos:column="21"/></name><operator pos:line="65" pos:column="21">-&gt;<pos:position pos:line="65" pos:column="26"/></operator><name pos:line="65" pos:column="23">has_backref<pos:position pos:line="65" pos:column="34"/></name></name></expr>)<pos:position pos:line="65" pos:column="35"/></condition><then pos:line="65" pos:column="35">
	<block pos:line="66" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="67" pos:column="11">*<pos:position pos:line="67" pos:column="12"/></operator><name pos:line="67" pos:column="12">err<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">=<pos:position pos:line="67" pos:column="17"/></operator> <call><name pos:line="67" pos:column="18">transit_state_bkref<pos:position pos:line="67" pos:column="37"/></name> <argument_list pos:line="67" pos:column="38">(<argument><expr><name pos:line="67" pos:column="39">mctx<pos:position pos:line="67" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="45">&amp;<pos:position pos:line="67" pos:column="50"/></operator><name><name pos:line="67" pos:column="46">next_state<pos:position pos:line="67" pos:column="56"/></name><operator pos:line="67" pos:column="56">-&gt;<pos:position pos:line="67" pos:column="61"/></operator><name pos:line="67" pos:column="58">nodes<pos:position pos:line="67" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="65"/></expr_stmt>
	  <if pos:line="68" pos:column="11">if <condition pos:line="68" pos:column="14">(<expr><call><name pos:line="68" pos:column="15">BE<pos:position pos:line="68" pos:column="17"/></name> <argument_list pos:line="68" pos:column="18">(<argument><expr><operator pos:line="68" pos:column="19">*<pos:position pos:line="68" pos:column="20"/></operator><name pos:line="68" pos:column="20">err<pos:position pos:line="68" pos:column="23"/></name> <operator pos:line="68" pos:column="24">!=<pos:position pos:line="68" pos:column="26"/></operator> <name pos:line="68" pos:column="27">REG_NOERROR<pos:position pos:line="68" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="40">0<pos:position pos:line="68" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="43"/></condition><then pos:line="68" pos:column="43">
	    <block type="pseudo"><return pos:line="69" pos:column="13">return <expr><name pos:line="69" pos:column="20">NULL<pos:position pos:line="69" pos:column="24"/></name></expr>;<pos:position pos:line="69" pos:column="25"/></return></block></then></if>
	  <expr_stmt><expr><name pos:line="70" pos:column="11">next_state<pos:position pos:line="70" pos:column="21"/></name> <operator pos:line="70" pos:column="22">=<pos:position pos:line="70" pos:column="23"/></operator> <name><name pos:line="70" pos:column="24">mctx<pos:position pos:line="70" pos:column="28"/></name><operator pos:line="70" pos:column="28">-&gt;<pos:position pos:line="70" pos:column="33"/></operator><name pos:line="70" pos:column="30">state_log<pos:position pos:line="70" pos:column="39"/></name><index pos:line="70" pos:column="39">[<expr><name pos:line="70" pos:column="40">cur_idx<pos:position pos:line="70" pos:column="47"/></name></expr>]<pos:position pos:line="70" pos:column="48"/></index></name></expr>;<pos:position pos:line="70" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="71" pos:column="10"/></block></then></if>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if>

  <return pos:line="74" pos:column="3">return <expr><name pos:line="74" pos:column="10">next_state<pos:position pos:line="74" pos:column="20"/></name></expr>;<pos:position pos:line="74" pos:column="21"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
