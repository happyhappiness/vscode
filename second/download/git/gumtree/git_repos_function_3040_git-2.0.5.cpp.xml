<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3040_git-2.0.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">vwritef<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name pos:line="1" pos:column="14">int<pos:position pos:line="1" pos:column="17"/></name></type> <name pos:line="1" pos:column="18">fd<pos:position pos:line="1" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">prefix<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">err<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">va_list<pos:position pos:line="1" pos:column="66"/></name></type> <name pos:line="1" pos:column="67">params<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">msg<pos:position pos:line="3" pos:column="17"/></name><index pos:line="3" pos:column="17">[<expr><literal type="number" pos:line="3" pos:column="18">4096<pos:position pos:line="3" pos:column="22"/></literal></expr>]<pos:position pos:line="3" pos:column="23"/></index></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">len<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><call><name pos:line="4" pos:column="19">vsnprintf<pos:position pos:line="4" pos:column="28"/></name><argument_list pos:line="4" pos:column="28">(<argument><expr><name pos:line="4" pos:column="29">msg<pos:position pos:line="4" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="4" pos:column="34">sizeof<argument_list pos:line="4" pos:column="40">(<argument><expr><name pos:line="4" pos:column="41">msg<pos:position pos:line="4" pos:column="44"/></name></expr></argument>)<pos:position pos:line="4" pos:column="45"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="4" pos:column="47">err<pos:position pos:line="4" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="52">params<pos:position pos:line="4" pos:column="58"/></name></expr></argument>)<pos:position pos:line="4" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="60"/></decl_stmt>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">&gt;<pos:position pos:line="5" pos:column="21"/></operator> <sizeof pos:line="5" pos:column="19">sizeof<argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">msg<pos:position pos:line="5" pos:column="29"/></name></expr></argument>)<pos:position pos:line="5" pos:column="30"/></argument_list></sizeof></expr>)<pos:position pos:line="5" pos:column="31"/></condition><then pos:line="5" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="6" pos:column="17">len<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">=<pos:position pos:line="6" pos:column="22"/></operator> <sizeof pos:line="6" pos:column="23">sizeof<argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">msg<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></sizeof></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">write_in_full<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><name pos:line="8" pos:column="23">fd<pos:position pos:line="8" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="27">prefix<pos:position pos:line="8" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="35">strlen<pos:position pos:line="8" pos:column="41"/></name><argument_list pos:line="8" pos:column="41">(<argument><expr><name pos:line="8" pos:column="42">prefix<pos:position pos:line="8" pos:column="48"/></name></expr></argument>)<pos:position pos:line="8" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">write_in_full<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">fd<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="27">msg<pos:position pos:line="9" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="32">len<pos:position pos:line="9" pos:column="35"/></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">write_in_full<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">fd<pos:position pos:line="10" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="27">"\n"<pos:position pos:line="10" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="33">1<pos:position pos:line="10" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="36"/></expr_stmt>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
