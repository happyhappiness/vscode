<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2700_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">is_submodule_commit_present<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">path<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">unsigned<pos:position pos:line="1" pos:column="66"/></name> <name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name></type> <name><name pos:line="1" pos:column="72">sha1<pos:position pos:line="1" pos:column="76"/></name><index pos:line="1" pos:column="76">[<expr><literal type="number" pos:line="1" pos:column="77">20<pos:position pos:line="1" pos:column="79"/></literal></expr>]<pos:position pos:line="1" pos:column="80"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">is_present<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><literal type="number" pos:line="3" pos:column="26">0<pos:position pos:line="3" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><call><name pos:line="4" pos:column="14">add_submodule_odb<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">(<argument><expr><name pos:line="4" pos:column="32">path<pos:position pos:line="4" pos:column="36"/></name></expr></argument>)<pos:position pos:line="4" pos:column="37"/></argument_list></call> <operator pos:line="4" pos:column="38">&amp;&amp;<pos:position pos:line="4" pos:column="48"/></operator> <call><name pos:line="4" pos:column="41">lookup_commit_reference<pos:position pos:line="4" pos:column="64"/></name><argument_list pos:line="4" pos:column="64">(<argument><expr><name pos:line="4" pos:column="65">sha1<pos:position pos:line="4" pos:column="69"/></name></expr></argument>)<pos:position pos:line="4" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="71"/></condition><then pos:line="4" pos:column="71"> <block pos:line="4" pos:column="72">{
		<comment type="block" pos:line="5" pos:column="17">/* Even if the submodule is checked out and the commit is
		 * present, make sure it is reachable from a ref. */</comment>
		<decl_stmt><decl><type><name><name pos:line="7" pos:column="17">struct<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">child_process<pos:position pos:line="7" pos:column="37"/></name></name></type> <name pos:line="7" pos:column="38">cp<pos:position pos:line="7" pos:column="40"/></name></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name pos:line="8" pos:column="23">char<pos:position pos:line="8" pos:column="27"/></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name><name pos:line="8" pos:column="29">argv<pos:position pos:line="8" pos:column="33"/></name><index pos:line="8" pos:column="33">[]<pos:position pos:line="8" pos:column="35"/></index></name> <init pos:line="8" pos:column="36">= <expr><block pos:line="8" pos:column="38">{<expr><literal type="string" pos:line="8" pos:column="39">"rev-list"<pos:position pos:line="8" pos:column="49"/></literal></expr>, <expr><literal type="string" pos:line="8" pos:column="51">"-n"<pos:position pos:line="8" pos:column="55"/></literal></expr>, <expr><literal type="string" pos:line="8" pos:column="57">"1"<pos:position pos:line="8" pos:column="60"/></literal></expr>, <expr><name pos:line="8" pos:column="62">NULL<pos:position pos:line="8" pos:column="66"/></name></expr>, <expr><literal type="string" pos:line="8" pos:column="68">"--not"<pos:position pos:line="8" pos:column="75"/></literal></expr>, <expr><literal type="string" pos:line="8" pos:column="77">"--all"<pos:position pos:line="8" pos:column="84"/></literal></expr>, <expr><name pos:line="8" pos:column="86">NULL<pos:position pos:line="8" pos:column="90"/></name></expr>}<pos:position pos:line="8" pos:column="91"/></block></expr></init></decl>;<pos:position pos:line="8" pos:column="92"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="9" pos:column="17">struct<pos:position pos:line="9" pos:column="23"/></name> <name pos:line="9" pos:column="24">strbuf<pos:position pos:line="9" pos:column="30"/></name></name></type> <name pos:line="9" pos:column="31">buf<pos:position pos:line="9" pos:column="34"/></name> <init pos:line="9" pos:column="35">= <expr><name pos:line="9" pos:column="37">STRBUF_INIT<pos:position pos:line="9" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="49"/></decl_stmt>

		<expr_stmt><expr><name><name pos:line="11" pos:column="17">argv<pos:position pos:line="11" pos:column="21"/></name><index pos:line="11" pos:column="21">[<expr><literal type="number" pos:line="11" pos:column="22">3<pos:position pos:line="11" pos:column="23"/></literal></expr>]<pos:position pos:line="11" pos:column="24"/></index></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <call><name pos:line="11" pos:column="27">sha1_to_hex<pos:position pos:line="11" pos:column="38"/></name><argument_list pos:line="11" pos:column="38">(<argument><expr><name pos:line="11" pos:column="39">sha1<pos:position pos:line="11" pos:column="43"/></name></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">memset<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><operator pos:line="12" pos:column="24">&amp;<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="25">cp<pos:position pos:line="12" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="29">0<pos:position pos:line="12" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="32">sizeof<argument_list pos:line="12" pos:column="38">(<argument><expr><name pos:line="12" pos:column="39">cp<pos:position pos:line="12" pos:column="41"/></name></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="13" pos:column="17">cp<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">argv<pos:position pos:line="13" pos:column="24"/></name></name> <operator pos:line="13" pos:column="25">=<pos:position pos:line="13" pos:column="26"/></operator> <name pos:line="13" pos:column="27">argv<pos:position pos:line="13" pos:column="31"/></name></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="14" pos:column="17">cp<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">.<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">env<pos:position pos:line="14" pos:column="23"/></name></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <name pos:line="14" pos:column="26">local_repo_env<pos:position pos:line="14" pos:column="40"/></name></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="15" pos:column="17">cp<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">.<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">git_cmd<pos:position pos:line="15" pos:column="27"/></name></name> <operator pos:line="15" pos:column="28">=<pos:position pos:line="15" pos:column="29"/></operator> <literal type="number" pos:line="15" pos:column="30">1<pos:position pos:line="15" pos:column="31"/></literal></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="16" pos:column="17">cp<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">.<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">no_stdin<pos:position pos:line="16" pos:column="28"/></name></name> <operator pos:line="16" pos:column="29">=<pos:position pos:line="16" pos:column="30"/></operator> <literal type="number" pos:line="16" pos:column="31">1<pos:position pos:line="16" pos:column="32"/></literal></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="17" pos:column="17">cp<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">out<pos:position pos:line="17" pos:column="23"/></name></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <operator pos:line="17" pos:column="26">-<pos:position pos:line="17" pos:column="27"/></operator><literal type="number" pos:line="17" pos:column="27">1<pos:position pos:line="17" pos:column="28"/></literal></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="18" pos:column="17">cp<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">.<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">dir<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <name pos:line="18" pos:column="26">path<pos:position pos:line="18" pos:column="30"/></name></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><operator pos:line="19" pos:column="21">!<pos:position pos:line="19" pos:column="22"/></operator><call><name pos:line="19" pos:column="22">run_command<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">(<argument><expr><operator pos:line="19" pos:column="34">&amp;<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="35">cp<pos:position pos:line="19" pos:column="37"/></name></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call> <operator pos:line="19" pos:column="39">&amp;&amp;<pos:position pos:line="19" pos:column="49"/></operator> <operator pos:line="19" pos:column="42">!<pos:position pos:line="19" pos:column="43"/></operator><call><name pos:line="19" pos:column="43">strbuf_read<pos:position pos:line="19" pos:column="54"/></name><argument_list pos:line="19" pos:column="54">(<argument><expr><operator pos:line="19" pos:column="55">&amp;<pos:position pos:line="19" pos:column="60"/></operator><name pos:line="19" pos:column="56">buf<pos:position pos:line="19" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="61">cp<pos:position pos:line="19" pos:column="63"/></name><operator pos:line="19" pos:column="63">.<pos:position pos:line="19" pos:column="64"/></operator><name pos:line="19" pos:column="64">out<pos:position pos:line="19" pos:column="67"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="69">1024<pos:position pos:line="19" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="75"/></condition><then pos:line="19" pos:column="75">
			<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="25">is_present<pos:position pos:line="20" pos:column="35"/></name> <operator pos:line="20" pos:column="36">=<pos:position pos:line="20" pos:column="37"/></operator> <literal type="number" pos:line="20" pos:column="38">1<pos:position pos:line="20" pos:column="39"/></literal></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="22" pos:column="17">close<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><name><name pos:line="22" pos:column="23">cp<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">.<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">out<pos:position pos:line="22" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">strbuf_release<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><operator pos:line="23" pos:column="32">&amp;<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="33">buf<pos:position pos:line="23" pos:column="36"/></name></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
	<return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">is_present<pos:position pos:line="25" pos:column="26"/></name></expr>;<pos:position pos:line="25" pos:column="27"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
