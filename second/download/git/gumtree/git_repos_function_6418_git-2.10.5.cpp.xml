<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6418_git-2.10.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">proceed_next_node<pos:position pos:line="3" pos:column="18"/></name> <parameter_list pos:line="3" pos:column="19">(<parameter><decl><type><specifier pos:line="3" pos:column="20">const<pos:position pos:line="3" pos:column="25"/></specifier> <name pos:line="3" pos:column="26">re_match_context_t<pos:position pos:line="3" pos:column="44"/></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="46">mctx<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="52">int<pos:position pos:line="3" pos:column="55"/></name></type> <name pos:line="3" pos:column="56">nregs<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="63">regmatch_t<pos:position pos:line="3" pos:column="73"/></name> <modifier pos:line="3" pos:column="74">*<pos:position pos:line="3" pos:column="75"/></modifier></type><name pos:line="3" pos:column="75">regs<pos:position pos:line="3" pos:column="79"/></name></decl></parameter>,
		   <parameter><decl><type><name pos:line="4" pos:column="20">int<pos:position pos:line="4" pos:column="23"/></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">pidx<pos:position pos:line="4" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="31">int<pos:position pos:line="4" pos:column="34"/></name></type> <name pos:line="4" pos:column="35">node<pos:position pos:line="4" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="41">re_node_set<pos:position pos:line="4" pos:column="52"/></name> <modifier pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></modifier></type><name pos:line="4" pos:column="54">eps_via_nodes<pos:position pos:line="4" pos:column="67"/></name></decl></parameter>,
		   <parameter><decl><type><name><name pos:line="5" pos:column="20">struct<pos:position pos:line="5" pos:column="26"/></name> <name pos:line="5" pos:column="27">re_fail_stack_t<pos:position pos:line="5" pos:column="42"/></name></name> <modifier pos:line="5" pos:column="43">*<pos:position pos:line="5" pos:column="44"/></modifier></type><name pos:line="5" pos:column="44">fs<pos:position pos:line="5" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="47"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">re_dfa_t<pos:position pos:line="7" pos:column="17"/></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier><specifier pos:line="7" pos:column="19">const<pos:position pos:line="7" pos:column="24"/></specifier></type> <name pos:line="7" pos:column="25">dfa<pos:position pos:line="7" pos:column="28"/></name> <init pos:line="7" pos:column="29">= <expr><name><name pos:line="7" pos:column="31">mctx<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">-&gt;<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="37">dfa<pos:position pos:line="7" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">i<pos:position pos:line="8" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="10">err<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><call><name pos:line="9" pos:column="7">IS_EPSILON_NODE<pos:position pos:line="9" pos:column="22"/></name> <argument_list pos:line="9" pos:column="23">(<argument><expr><name><name pos:line="9" pos:column="24">dfa<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">-&gt;<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="29">nodes<pos:position pos:line="9" pos:column="34"/></name><index pos:line="9" pos:column="34">[<expr><name pos:line="9" pos:column="35">node<pos:position pos:line="9" pos:column="39"/></name></expr>]<pos:position pos:line="9" pos:column="40"/></index></name><operator pos:line="9" pos:column="40">.<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="41">type<pos:position pos:line="9" pos:column="45"/></name></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="47"/></condition><then pos:line="9" pos:column="47">
    <block pos:line="10" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="11" pos:column="7">re_node_set<pos:position pos:line="11" pos:column="18"/></name> <modifier pos:line="11" pos:column="19">*<pos:position pos:line="11" pos:column="20"/></modifier></type><name pos:line="11" pos:column="20">cur_nodes<pos:position pos:line="11" pos:column="29"/></name> <init pos:line="11" pos:column="30">= <expr><operator pos:line="11" pos:column="32">&amp;<pos:position pos:line="11" pos:column="37"/></operator><name><name pos:line="11" pos:column="33">mctx<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">-&gt;<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="39">state_log<pos:position pos:line="11" pos:column="48"/></name><index pos:line="11" pos:column="48">[<expr><operator pos:line="11" pos:column="49">*<pos:position pos:line="11" pos:column="50"/></operator><name pos:line="11" pos:column="50">pidx<pos:position pos:line="11" pos:column="54"/></name></expr>]<pos:position pos:line="11" pos:column="55"/></index></name><operator pos:line="11" pos:column="55">-&gt;<pos:position pos:line="11" pos:column="60"/></operator><name pos:line="11" pos:column="57">nodes<pos:position pos:line="11" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="63"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="12" pos:column="7">re_node_set<pos:position pos:line="12" pos:column="18"/></name> <modifier pos:line="12" pos:column="19">*<pos:position pos:line="12" pos:column="20"/></modifier></type><name pos:line="12" pos:column="20">edests<pos:position pos:line="12" pos:column="26"/></name> <init pos:line="12" pos:column="27">= <expr><operator pos:line="12" pos:column="29">&amp;<pos:position pos:line="12" pos:column="34"/></operator><name><name pos:line="12" pos:column="30">dfa<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">-&gt;<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="35">edests<pos:position pos:line="12" pos:column="41"/></name><index pos:line="12" pos:column="41">[<expr><name pos:line="12" pos:column="42">node<pos:position pos:line="12" pos:column="46"/></name></expr>]<pos:position pos:line="12" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="12" pos:column="48"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="13" pos:column="7">int<pos:position pos:line="13" pos:column="10"/></name></type> <name pos:line="13" pos:column="11">dest_node<pos:position pos:line="13" pos:column="20"/></name></decl>;<pos:position pos:line="13" pos:column="21"/></decl_stmt>
      <expr_stmt><expr><name pos:line="14" pos:column="7">err<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <call><name pos:line="14" pos:column="13">re_node_set_insert<pos:position pos:line="14" pos:column="31"/></name> <argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">eps_via_nodes<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="48">node<pos:position pos:line="14" pos:column="52"/></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>
      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><call><name pos:line="15" pos:column="11">BE<pos:position pos:line="15" pos:column="13"/></name> <argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">err<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">&lt;<pos:position pos:line="15" pos:column="23"/></operator> <literal type="number" pos:line="15" pos:column="21">0<pos:position pos:line="15" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="24">0<pos:position pos:line="15" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="27"/></condition><then pos:line="15" pos:column="27">
	<block type="pseudo"><return pos:line="16" pos:column="9">return <expr><operator pos:line="16" pos:column="16">-<pos:position pos:line="16" pos:column="17"/></operator><literal type="number" pos:line="16" pos:column="17">2<pos:position pos:line="16" pos:column="18"/></literal></expr>;<pos:position pos:line="16" pos:column="19"/></return></block></then></if>
      <comment type="block" pos:line="17" pos:column="7">/* Pick up a valid destination, or return -1 if none is found.  */</comment>
      <for pos:line="18" pos:column="7">for <control pos:line="18" pos:column="11">(<init><expr><name pos:line="18" pos:column="12">dest_node<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <operator pos:line="18" pos:column="24">-<pos:position pos:line="18" pos:column="25"/></operator><literal type="number" pos:line="18" pos:column="25">1<pos:position pos:line="18" pos:column="26"/></literal></expr><operator pos:line="18" pos:column="26">,<pos:position pos:line="18" pos:column="27"/></operator> <expr><name pos:line="18" pos:column="28">i<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">=<pos:position pos:line="18" pos:column="31"/></operator> <literal type="number" pos:line="18" pos:column="32">0<pos:position pos:line="18" pos:column="33"/></literal></expr>;<pos:position pos:line="18" pos:column="34"/></init> <condition><expr><name pos:line="18" pos:column="35">i<pos:position pos:line="18" pos:column="36"/></name> <operator pos:line="18" pos:column="37">&lt;<pos:position pos:line="18" pos:column="41"/></operator> <name><name pos:line="18" pos:column="39">edests<pos:position pos:line="18" pos:column="45"/></name><operator pos:line="18" pos:column="45">-&gt;<pos:position pos:line="18" pos:column="50"/></operator><name pos:line="18" pos:column="47">nelem<pos:position pos:line="18" pos:column="52"/></name></name></expr>;<pos:position pos:line="18" pos:column="53"/></condition> <incr><expr><operator pos:line="18" pos:column="54">++<pos:position pos:line="18" pos:column="56"/></operator><name pos:line="18" pos:column="56">i<pos:position pos:line="18" pos:column="57"/></name></expr></incr>)<pos:position pos:line="18" pos:column="58"/></control>
	<block pos:line="19" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="20" pos:column="11">int<pos:position pos:line="20" pos:column="14"/></name></type> <name pos:line="20" pos:column="15">candidate<pos:position pos:line="20" pos:column="24"/></name> <init pos:line="20" pos:column="25">= <expr><name><name pos:line="20" pos:column="27">edests<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">-&gt;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="35">elems<pos:position pos:line="20" pos:column="40"/></name><index pos:line="20" pos:column="40">[<expr><name pos:line="20" pos:column="41">i<pos:position pos:line="20" pos:column="42"/></name></expr>]<pos:position pos:line="20" pos:column="43"/></index></name></expr></init></decl>;<pos:position pos:line="20" pos:column="44"/></decl_stmt>
	  <if pos:line="21" pos:column="11">if <condition pos:line="21" pos:column="14">(<expr><operator pos:line="21" pos:column="15">!<pos:position pos:line="21" pos:column="16"/></operator><call><name pos:line="21" pos:column="16">re_node_set_contains<pos:position pos:line="21" pos:column="36"/></name> <argument_list pos:line="21" pos:column="37">(<argument><expr><name pos:line="21" pos:column="38">cur_nodes<pos:position pos:line="21" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="49">candidate<pos:position pos:line="21" pos:column="58"/></name></expr></argument>)<pos:position pos:line="21" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="60"/></condition><then pos:line="21" pos:column="60">
	    <block type="pseudo"><continue pos:line="22" pos:column="13">continue;<pos:position pos:line="22" pos:column="22"/></continue></block></then></if>
	  <if pos:line="23" pos:column="11">if <condition pos:line="23" pos:column="14">(<expr><name pos:line="23" pos:column="15">dest_node<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">==<pos:position pos:line="23" pos:column="27"/></operator> <operator pos:line="23" pos:column="28">-<pos:position pos:line="23" pos:column="29"/></operator><literal type="number" pos:line="23" pos:column="29">1<pos:position pos:line="23" pos:column="30"/></literal></expr>)<pos:position pos:line="23" pos:column="31"/></condition><then pos:line="23" pos:column="31">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="13">dest_node<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <name pos:line="24" pos:column="25">candidate<pos:position pos:line="24" pos:column="34"/></name></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt></block></then>

	  <else pos:line="26" pos:column="11">else
	    <block pos:line="27" pos:column="13">{
	      <comment type="block" pos:line="28" pos:column="15">/* In order to avoid infinite loop like "(a*)*", return the second
		 epsilon-transition if the first was already considered.  */</comment>
	      <if pos:line="30" pos:column="15">if <condition pos:line="30" pos:column="18">(<expr><call><name pos:line="30" pos:column="19">re_node_set_contains<pos:position pos:line="30" pos:column="39"/></name> <argument_list pos:line="30" pos:column="40">(<argument><expr><name pos:line="30" pos:column="41">eps_via_nodes<pos:position pos:line="30" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="56">dest_node<pos:position pos:line="30" pos:column="65"/></name></expr></argument>)<pos:position pos:line="30" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="67"/></condition><then pos:line="30" pos:column="67">
		<block type="pseudo"><return pos:line="31" pos:column="17">return <expr><name pos:line="31" pos:column="24">candidate<pos:position pos:line="31" pos:column="33"/></name></expr>;<pos:position pos:line="31" pos:column="34"/></return></block></then>

	      <comment type="block" pos:line="33" pos:column="15">/* Otherwise, push the second epsilon-transition on the fail stack.  */</comment>
	      <elseif pos:line="34" pos:column="15">else <if pos:line="34" pos:column="20">if <condition pos:line="34" pos:column="23">(<expr><name pos:line="34" pos:column="24">fs<pos:position pos:line="34" pos:column="26"/></name> <operator pos:line="34" pos:column="27">!=<pos:position pos:line="34" pos:column="29"/></operator> <name pos:line="34" pos:column="30">NULL<pos:position pos:line="34" pos:column="34"/></name>
		       <operator pos:line="35" pos:column="24">&amp;&amp;<pos:position pos:line="35" pos:column="34"/></operator> <call><name pos:line="35" pos:column="27">push_fail_stack<pos:position pos:line="35" pos:column="42"/></name> <argument_list pos:line="35" pos:column="43">(<argument><expr><name pos:line="35" pos:column="44">fs<pos:position pos:line="35" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="48">*<pos:position pos:line="35" pos:column="49"/></operator><name pos:line="35" pos:column="49">pidx<pos:position pos:line="35" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="55">candidate<pos:position pos:line="35" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="66">nregs<pos:position pos:line="35" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="73">regs<pos:position pos:line="35" pos:column="77"/></name></expr></argument>,
					   <argument><expr><name pos:line="36" pos:column="44">eps_via_nodes<pos:position pos:line="36" pos:column="57"/></name></expr></argument>)<pos:position pos:line="36" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="59"/></condition><then pos:line="36" pos:column="59">
		<block type="pseudo"><return pos:line="37" pos:column="17">return <expr><operator pos:line="37" pos:column="24">-<pos:position pos:line="37" pos:column="25"/></operator><literal type="number" pos:line="37" pos:column="25">2<pos:position pos:line="37" pos:column="26"/></literal></expr>;<pos:position pos:line="37" pos:column="27"/></return></block></then></if></elseif></if>

	      <comment type="block" pos:line="39" pos:column="15">/* We know we are going to exit.  */</comment>
	      <break pos:line="40" pos:column="15">break;<pos:position pos:line="40" pos:column="21"/></break>
	    }<pos:position pos:line="41" pos:column="14"/></block></else></if>
	}<pos:position pos:line="42" pos:column="10"/></block></for>
      <return pos:line="43" pos:column="7">return <expr><name pos:line="43" pos:column="14">dest_node<pos:position pos:line="43" pos:column="23"/></name></expr>;<pos:position pos:line="43" pos:column="24"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then>
  <else pos:line="45" pos:column="3">else
    <block pos:line="46" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="47" pos:column="7">int<pos:position pos:line="47" pos:column="10"/></name></type> <name pos:line="47" pos:column="11">naccepted<pos:position pos:line="47" pos:column="20"/></name> <init pos:line="47" pos:column="21">= <expr><literal type="number" pos:line="47" pos:column="23">0<pos:position pos:line="47" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="47" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="48" pos:column="7">re_token_type_t<pos:position pos:line="48" pos:column="22"/></name></type> <name pos:line="48" pos:column="23">type<pos:position pos:line="48" pos:column="27"/></name> <init pos:line="48" pos:column="28">= <expr><name><name pos:line="48" pos:column="30">dfa<pos:position pos:line="48" pos:column="33"/></name><operator pos:line="48" pos:column="33">-&gt;<pos:position pos:line="48" pos:column="38"/></operator><name pos:line="48" pos:column="35">nodes<pos:position pos:line="48" pos:column="40"/></name><index pos:line="48" pos:column="40">[<expr><name pos:line="48" pos:column="41">node<pos:position pos:line="48" pos:column="45"/></name></expr>]<pos:position pos:line="48" pos:column="46"/></index></name><operator pos:line="48" pos:column="46">.<pos:position pos:line="48" pos:column="47"/></operator><name pos:line="48" pos:column="47">type<pos:position pos:line="48" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="48" pos:column="52"/></decl_stmt>

<cpp:ifdef pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">ifdef<pos:position pos:line="50" pos:column="7"/></cpp:directive> <name pos:line="50" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="50" pos:column="22"/></name></cpp:ifdef>
      <if pos:line="51" pos:column="7">if <condition pos:line="51" pos:column="10">(<expr><name><name pos:line="51" pos:column="11">dfa<pos:position pos:line="51" pos:column="14"/></name><operator pos:line="51" pos:column="14">-&gt;<pos:position pos:line="51" pos:column="19"/></operator><name pos:line="51" pos:column="16">nodes<pos:position pos:line="51" pos:column="21"/></name><index pos:line="51" pos:column="21">[<expr><name pos:line="51" pos:column="22">node<pos:position pos:line="51" pos:column="26"/></name></expr>]<pos:position pos:line="51" pos:column="27"/></index></name><operator pos:line="51" pos:column="27">.<pos:position pos:line="51" pos:column="28"/></operator><name pos:line="51" pos:column="28">accept_mb<pos:position pos:line="51" pos:column="37"/></name></expr>)<pos:position pos:line="51" pos:column="38"/></condition><then pos:line="51" pos:column="38">
	<block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="9">naccepted<pos:position pos:line="52" pos:column="18"/></name> <operator pos:line="52" pos:column="19">=<pos:position pos:line="52" pos:column="20"/></operator> <call><name pos:line="52" pos:column="21">check_node_accept_bytes<pos:position pos:line="52" pos:column="44"/></name> <argument_list pos:line="52" pos:column="45">(<argument><expr><name pos:line="52" pos:column="46">dfa<pos:position pos:line="52" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="51">node<pos:position pos:line="52" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="57">&amp;<pos:position pos:line="52" pos:column="62"/></operator><name><name pos:line="52" pos:column="58">mctx<pos:position pos:line="52" pos:column="62"/></name><operator pos:line="52" pos:column="62">-&gt;<pos:position pos:line="52" pos:column="67"/></operator><name pos:line="52" pos:column="64">input<pos:position pos:line="52" pos:column="69"/></name></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="71">*<pos:position pos:line="52" pos:column="72"/></operator><name pos:line="52" pos:column="72">pidx<pos:position pos:line="52" pos:column="76"/></name></expr></argument>)<pos:position pos:line="52" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="78"/></expr_stmt></block></then>
      <elseif pos:line="53" pos:column="7">else
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="54" pos:column="8">/* RE_ENABLE_I18N */</comment>
      <if pos:line="55" pos:column="7">if <condition pos:line="55" pos:column="10">(<expr><name pos:line="55" pos:column="11">type<pos:position pos:line="55" pos:column="15"/></name> <operator pos:line="55" pos:column="16">==<pos:position pos:line="55" pos:column="18"/></operator> <name pos:line="55" pos:column="19">OP_BACK_REF<pos:position pos:line="55" pos:column="30"/></name></expr>)<pos:position pos:line="55" pos:column="31"/></condition><then pos:line="55" pos:column="31">
	<block pos:line="56" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="57" pos:column="11">int<pos:position pos:line="57" pos:column="14"/></name></type> <name pos:line="57" pos:column="15">subexp_idx<pos:position pos:line="57" pos:column="25"/></name> <init pos:line="57" pos:column="26">= <expr><name><name pos:line="57" pos:column="28">dfa<pos:position pos:line="57" pos:column="31"/></name><operator pos:line="57" pos:column="31">-&gt;<pos:position pos:line="57" pos:column="36"/></operator><name pos:line="57" pos:column="33">nodes<pos:position pos:line="57" pos:column="38"/></name><index pos:line="57" pos:column="38">[<expr><name pos:line="57" pos:column="39">node<pos:position pos:line="57" pos:column="43"/></name></expr>]<pos:position pos:line="57" pos:column="44"/></index></name><operator pos:line="57" pos:column="44">.<pos:position pos:line="57" pos:column="45"/></operator><name><name pos:line="57" pos:column="45">opr<pos:position pos:line="57" pos:column="48"/></name><operator pos:line="57" pos:column="48">.<pos:position pos:line="57" pos:column="49"/></operator><name pos:line="57" pos:column="49">idx<pos:position pos:line="57" pos:column="52"/></name></name> <operator pos:line="57" pos:column="53">+<pos:position pos:line="57" pos:column="54"/></operator> <literal type="number" pos:line="57" pos:column="55">1<pos:position pos:line="57" pos:column="56"/></literal></expr></init></decl>;<pos:position pos:line="57" pos:column="57"/></decl_stmt>
	  <expr_stmt><expr><name pos:line="58" pos:column="11">naccepted<pos:position pos:line="58" pos:column="20"/></name> <operator pos:line="58" pos:column="21">=<pos:position pos:line="58" pos:column="22"/></operator> <name><name pos:line="58" pos:column="23">regs<pos:position pos:line="58" pos:column="27"/></name><index pos:line="58" pos:column="27">[<expr><name pos:line="58" pos:column="28">subexp_idx<pos:position pos:line="58" pos:column="38"/></name></expr>]<pos:position pos:line="58" pos:column="39"/></index></name><operator pos:line="58" pos:column="39">.<pos:position pos:line="58" pos:column="40"/></operator><name pos:line="58" pos:column="40">rm_eo<pos:position pos:line="58" pos:column="45"/></name> <operator pos:line="58" pos:column="46">-<pos:position pos:line="58" pos:column="47"/></operator> <name><name pos:line="58" pos:column="48">regs<pos:position pos:line="58" pos:column="52"/></name><index pos:line="58" pos:column="52">[<expr><name pos:line="58" pos:column="53">subexp_idx<pos:position pos:line="58" pos:column="63"/></name></expr>]<pos:position pos:line="58" pos:column="64"/></index></name><operator pos:line="58" pos:column="64">.<pos:position pos:line="58" pos:column="65"/></operator><name pos:line="58" pos:column="65">rm_so<pos:position pos:line="58" pos:column="70"/></name></expr>;<pos:position pos:line="58" pos:column="71"/></expr_stmt>
	  <if pos:line="59" pos:column="11">if <condition pos:line="59" pos:column="14">(<expr><name pos:line="59" pos:column="15">fs<pos:position pos:line="59" pos:column="17"/></name> <operator pos:line="59" pos:column="18">!=<pos:position pos:line="59" pos:column="20"/></operator> <name pos:line="59" pos:column="21">NULL<pos:position pos:line="59" pos:column="25"/></name></expr>)<pos:position pos:line="59" pos:column="26"/></condition><then pos:line="59" pos:column="26">
	    <block pos:line="60" pos:column="13">{
	      <if pos:line="61" pos:column="15">if <condition pos:line="61" pos:column="18">(<expr><name><name pos:line="61" pos:column="19">regs<pos:position pos:line="61" pos:column="23"/></name><index pos:line="61" pos:column="23">[<expr><name pos:line="61" pos:column="24">subexp_idx<pos:position pos:line="61" pos:column="34"/></name></expr>]<pos:position pos:line="61" pos:column="35"/></index></name><operator pos:line="61" pos:column="35">.<pos:position pos:line="61" pos:column="36"/></operator><name pos:line="61" pos:column="36">rm_so<pos:position pos:line="61" pos:column="41"/></name> <operator pos:line="61" pos:column="42">==<pos:position pos:line="61" pos:column="44"/></operator> <operator pos:line="61" pos:column="45">-<pos:position pos:line="61" pos:column="46"/></operator><literal type="number" pos:line="61" pos:column="46">1<pos:position pos:line="61" pos:column="47"/></literal> <operator pos:line="61" pos:column="48">||<pos:position pos:line="61" pos:column="50"/></operator> <name><name pos:line="61" pos:column="51">regs<pos:position pos:line="61" pos:column="55"/></name><index pos:line="61" pos:column="55">[<expr><name pos:line="61" pos:column="56">subexp_idx<pos:position pos:line="61" pos:column="66"/></name></expr>]<pos:position pos:line="61" pos:column="67"/></index></name><operator pos:line="61" pos:column="67">.<pos:position pos:line="61" pos:column="68"/></operator><name pos:line="61" pos:column="68">rm_eo<pos:position pos:line="61" pos:column="73"/></name> <operator pos:line="61" pos:column="74">==<pos:position pos:line="61" pos:column="76"/></operator> <operator pos:line="61" pos:column="77">-<pos:position pos:line="61" pos:column="78"/></operator><literal type="number" pos:line="61" pos:column="78">1<pos:position pos:line="61" pos:column="79"/></literal></expr>)<pos:position pos:line="61" pos:column="80"/></condition><then pos:line="61" pos:column="80">
		<block type="pseudo"><return pos:line="62" pos:column="17">return <expr><operator pos:line="62" pos:column="24">-<pos:position pos:line="62" pos:column="25"/></operator><literal type="number" pos:line="62" pos:column="25">1<pos:position pos:line="62" pos:column="26"/></literal></expr>;<pos:position pos:line="62" pos:column="27"/></return></block></then>
	      <elseif pos:line="63" pos:column="15">else <if pos:line="63" pos:column="20">if <condition pos:line="63" pos:column="23">(<expr><name pos:line="63" pos:column="24">naccepted<pos:position pos:line="63" pos:column="33"/></name></expr>)<pos:position pos:line="63" pos:column="34"/></condition><then pos:line="63" pos:column="34">
		<block pos:line="64" pos:column="17">{
		  <decl_stmt><decl><type><name pos:line="65" pos:column="19">char<pos:position pos:line="65" pos:column="23"/></name> <modifier pos:line="65" pos:column="24">*<pos:position pos:line="65" pos:column="25"/></modifier></type><name pos:line="65" pos:column="25">buf<pos:position pos:line="65" pos:column="28"/></name> <init pos:line="65" pos:column="29">= <expr><operator pos:line="65" pos:column="31">(<pos:position pos:line="65" pos:column="32"/></operator><name pos:line="65" pos:column="32">char<pos:position pos:line="65" pos:column="36"/></name> <operator pos:line="65" pos:column="37">*<pos:position pos:line="65" pos:column="38"/></operator><operator pos:line="65" pos:column="38">)<pos:position pos:line="65" pos:column="39"/></operator> <call><name pos:line="65" pos:column="40">re_string_get_buffer<pos:position pos:line="65" pos:column="60"/></name> <argument_list pos:line="65" pos:column="61">(<argument><expr><operator pos:line="65" pos:column="62">&amp;<pos:position pos:line="65" pos:column="67"/></operator><name><name pos:line="65" pos:column="63">mctx<pos:position pos:line="65" pos:column="67"/></name><operator pos:line="65" pos:column="67">-&gt;<pos:position pos:line="65" pos:column="72"/></operator><name pos:line="65" pos:column="69">input<pos:position pos:line="65" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="65" pos:column="76"/></decl_stmt>
		  <if pos:line="66" pos:column="19">if <condition pos:line="66" pos:column="22">(<expr><call><name pos:line="66" pos:column="23">memcmp<pos:position pos:line="66" pos:column="29"/></name> <argument_list pos:line="66" pos:column="30">(<argument><expr><name pos:line="66" pos:column="31">buf<pos:position pos:line="66" pos:column="34"/></name> <operator pos:line="66" pos:column="35">+<pos:position pos:line="66" pos:column="36"/></operator> <name><name pos:line="66" pos:column="37">regs<pos:position pos:line="66" pos:column="41"/></name><index pos:line="66" pos:column="41">[<expr><name pos:line="66" pos:column="42">subexp_idx<pos:position pos:line="66" pos:column="52"/></name></expr>]<pos:position pos:line="66" pos:column="53"/></index></name><operator pos:line="66" pos:column="53">.<pos:position pos:line="66" pos:column="54"/></operator><name pos:line="66" pos:column="54">rm_so<pos:position pos:line="66" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="61">buf<pos:position pos:line="66" pos:column="64"/></name> <operator pos:line="66" pos:column="65">+<pos:position pos:line="66" pos:column="66"/></operator> <operator pos:line="66" pos:column="67">*<pos:position pos:line="66" pos:column="68"/></operator><name pos:line="66" pos:column="68">pidx<pos:position pos:line="66" pos:column="72"/></name></expr></argument>,
			      <argument><expr><name pos:line="67" pos:column="31">naccepted<pos:position pos:line="67" pos:column="40"/></name></expr></argument>)<pos:position pos:line="67" pos:column="41"/></argument_list></call> <operator pos:line="67" pos:column="42">!=<pos:position pos:line="67" pos:column="44"/></operator> <literal type="number" pos:line="67" pos:column="45">0<pos:position pos:line="67" pos:column="46"/></literal></expr>)<pos:position pos:line="67" pos:column="47"/></condition><then pos:line="67" pos:column="47">
		    <block type="pseudo"><return pos:line="68" pos:column="21">return <expr><operator pos:line="68" pos:column="28">-<pos:position pos:line="68" pos:column="29"/></operator><literal type="number" pos:line="68" pos:column="29">1<pos:position pos:line="68" pos:column="30"/></literal></expr>;<pos:position pos:line="68" pos:column="31"/></return></block></then></if>
		}<pos:position pos:line="69" pos:column="18"/></block></then></if></elseif></if>
	    }<pos:position pos:line="70" pos:column="14"/></block></then></if>

	  <if pos:line="72" pos:column="11">if <condition pos:line="72" pos:column="14">(<expr><name pos:line="72" pos:column="15">naccepted<pos:position pos:line="72" pos:column="24"/></name> <operator pos:line="72" pos:column="25">==<pos:position pos:line="72" pos:column="27"/></operator> <literal type="number" pos:line="72" pos:column="28">0<pos:position pos:line="72" pos:column="29"/></literal></expr>)<pos:position pos:line="72" pos:column="30"/></condition><then pos:line="72" pos:column="30">
	    <block pos:line="73" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="74" pos:column="15">int<pos:position pos:line="74" pos:column="18"/></name></type> <name pos:line="74" pos:column="19">dest_node<pos:position pos:line="74" pos:column="28"/></name></decl>;<pos:position pos:line="74" pos:column="29"/></decl_stmt>
	      <expr_stmt><expr><name pos:line="75" pos:column="15">err<pos:position pos:line="75" pos:column="18"/></name> <operator pos:line="75" pos:column="19">=<pos:position pos:line="75" pos:column="20"/></operator> <call><name pos:line="75" pos:column="21">re_node_set_insert<pos:position pos:line="75" pos:column="39"/></name> <argument_list pos:line="75" pos:column="40">(<argument><expr><name pos:line="75" pos:column="41">eps_via_nodes<pos:position pos:line="75" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="56">node<pos:position pos:line="75" pos:column="60"/></name></expr></argument>)<pos:position pos:line="75" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="62"/></expr_stmt>
	      <if pos:line="76" pos:column="15">if <condition pos:line="76" pos:column="18">(<expr><call><name pos:line="76" pos:column="19">BE<pos:position pos:line="76" pos:column="21"/></name> <argument_list pos:line="76" pos:column="22">(<argument><expr><name pos:line="76" pos:column="23">err<pos:position pos:line="76" pos:column="26"/></name> <operator pos:line="76" pos:column="27">&lt;<pos:position pos:line="76" pos:column="31"/></operator> <literal type="number" pos:line="76" pos:column="29">0<pos:position pos:line="76" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="32">0<pos:position pos:line="76" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="35"/></condition><then pos:line="76" pos:column="35">
		<block type="pseudo"><return pos:line="77" pos:column="17">return <expr><operator pos:line="77" pos:column="24">-<pos:position pos:line="77" pos:column="25"/></operator><literal type="number" pos:line="77" pos:column="25">2<pos:position pos:line="77" pos:column="26"/></literal></expr>;<pos:position pos:line="77" pos:column="27"/></return></block></then></if>
	      <expr_stmt><expr><name pos:line="78" pos:column="15">dest_node<pos:position pos:line="78" pos:column="24"/></name> <operator pos:line="78" pos:column="25">=<pos:position pos:line="78" pos:column="26"/></operator> <name><name pos:line="78" pos:column="27">dfa<pos:position pos:line="78" pos:column="30"/></name><operator pos:line="78" pos:column="30">-&gt;<pos:position pos:line="78" pos:column="35"/></operator><name pos:line="78" pos:column="32">edests<pos:position pos:line="78" pos:column="38"/></name><index pos:line="78" pos:column="38">[<expr><name pos:line="78" pos:column="39">node<pos:position pos:line="78" pos:column="43"/></name></expr>]<pos:position pos:line="78" pos:column="44"/></index></name><operator pos:line="78" pos:column="44">.<pos:position pos:line="78" pos:column="45"/></operator><name><name pos:line="78" pos:column="45">elems<pos:position pos:line="78" pos:column="50"/></name><index pos:line="78" pos:column="50">[<expr><literal type="number" pos:line="78" pos:column="51">0<pos:position pos:line="78" pos:column="52"/></literal></expr>]<pos:position pos:line="78" pos:column="53"/></index></name></expr>;<pos:position pos:line="78" pos:column="54"/></expr_stmt>
	      <if pos:line="79" pos:column="15">if <condition pos:line="79" pos:column="18">(<expr><call><name pos:line="79" pos:column="19">re_node_set_contains<pos:position pos:line="79" pos:column="39"/></name> <argument_list pos:line="79" pos:column="40">(<argument><expr><operator pos:line="79" pos:column="41">&amp;<pos:position pos:line="79" pos:column="46"/></operator><name><name pos:line="79" pos:column="42">mctx<pos:position pos:line="79" pos:column="46"/></name><operator pos:line="79" pos:column="46">-&gt;<pos:position pos:line="79" pos:column="51"/></operator><name pos:line="79" pos:column="48">state_log<pos:position pos:line="79" pos:column="57"/></name><index pos:line="79" pos:column="57">[<expr><operator pos:line="79" pos:column="58">*<pos:position pos:line="79" pos:column="59"/></operator><name pos:line="79" pos:column="59">pidx<pos:position pos:line="79" pos:column="63"/></name></expr>]<pos:position pos:line="79" pos:column="64"/></index></name><operator pos:line="79" pos:column="64">-&gt;<pos:position pos:line="79" pos:column="69"/></operator><name pos:line="79" pos:column="66">nodes<pos:position pos:line="79" pos:column="71"/></name></expr></argument>,
					<argument><expr><name pos:line="80" pos:column="41">dest_node<pos:position pos:line="80" pos:column="50"/></name></expr></argument>)<pos:position pos:line="80" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="52"/></condition><then pos:line="80" pos:column="52">
		<block type="pseudo"><return pos:line="81" pos:column="17">return <expr><name pos:line="81" pos:column="24">dest_node<pos:position pos:line="81" pos:column="33"/></name></expr>;<pos:position pos:line="81" pos:column="34"/></return></block></then></if>
	    }<pos:position pos:line="82" pos:column="14"/></block></then></if>
	}<pos:position pos:line="83" pos:column="10"/></block></then></if></elseif></if>

      <if pos:line="85" pos:column="7">if <condition pos:line="85" pos:column="10">(<expr><name pos:line="85" pos:column="11">naccepted<pos:position pos:line="85" pos:column="20"/></name> <operator pos:line="85" pos:column="21">!=<pos:position pos:line="85" pos:column="23"/></operator> <literal type="number" pos:line="85" pos:column="24">0<pos:position pos:line="85" pos:column="25"/></literal>
	  <operator pos:line="86" pos:column="11">||<pos:position pos:line="86" pos:column="13"/></operator> <call><name pos:line="86" pos:column="14">check_node_accept<pos:position pos:line="86" pos:column="31"/></name> <argument_list pos:line="86" pos:column="32">(<argument><expr><name pos:line="86" pos:column="33">mctx<pos:position pos:line="86" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="39">dfa<pos:position pos:line="86" pos:column="42"/></name><operator pos:line="86" pos:column="42">-&gt;<pos:position pos:line="86" pos:column="47"/></operator><name pos:line="86" pos:column="44">nodes<pos:position pos:line="86" pos:column="49"/></name></name> <operator pos:line="86" pos:column="50">+<pos:position pos:line="86" pos:column="51"/></operator> <name pos:line="86" pos:column="52">node<pos:position pos:line="86" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="58">*<pos:position pos:line="86" pos:column="59"/></operator><name pos:line="86" pos:column="59">pidx<pos:position pos:line="86" pos:column="63"/></name></expr></argument>)<pos:position pos:line="86" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="65"/></condition><then pos:line="86" pos:column="65">
	<block pos:line="87" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="88" pos:column="11">int<pos:position pos:line="88" pos:column="14"/></name></type> <name pos:line="88" pos:column="15">dest_node<pos:position pos:line="88" pos:column="24"/></name> <init pos:line="88" pos:column="25">= <expr><name><name pos:line="88" pos:column="27">dfa<pos:position pos:line="88" pos:column="30"/></name><operator pos:line="88" pos:column="30">-&gt;<pos:position pos:line="88" pos:column="35"/></operator><name pos:line="88" pos:column="32">nexts<pos:position pos:line="88" pos:column="37"/></name><index pos:line="88" pos:column="37">[<expr><name pos:line="88" pos:column="38">node<pos:position pos:line="88" pos:column="42"/></name></expr>]<pos:position pos:line="88" pos:column="43"/></index></name></expr></init></decl>;<pos:position pos:line="88" pos:column="44"/></decl_stmt>
	  <expr_stmt><expr><operator pos:line="89" pos:column="11">*<pos:position pos:line="89" pos:column="12"/></operator><name pos:line="89" pos:column="12">pidx<pos:position pos:line="89" pos:column="16"/></name> <operator pos:line="89" pos:column="17">=<pos:position pos:line="89" pos:column="18"/></operator> <ternary><condition><expr><operator pos:line="89" pos:column="19">(<pos:position pos:line="89" pos:column="20"/></operator><name pos:line="89" pos:column="20">naccepted<pos:position pos:line="89" pos:column="29"/></name> <operator pos:line="89" pos:column="30">==<pos:position pos:line="89" pos:column="32"/></operator> <literal type="number" pos:line="89" pos:column="33">0<pos:position pos:line="89" pos:column="34"/></literal><operator pos:line="89" pos:column="34">)<pos:position pos:line="89" pos:column="35"/></operator></expr> ?<pos:position pos:line="89" pos:column="37"/></condition><then pos:line="89" pos:column="37"> <expr><operator pos:line="89" pos:column="38">*<pos:position pos:line="89" pos:column="39"/></operator><name pos:line="89" pos:column="39">pidx<pos:position pos:line="89" pos:column="43"/></name> <operator pos:line="89" pos:column="44">+<pos:position pos:line="89" pos:column="45"/></operator> <literal type="number" pos:line="89" pos:column="46">1<pos:position pos:line="89" pos:column="47"/></literal></expr> <pos:position pos:line="89" pos:column="48"/></then><else pos:line="89" pos:column="48">: <expr><operator pos:line="89" pos:column="50">*<pos:position pos:line="89" pos:column="51"/></operator><name pos:line="89" pos:column="51">pidx<pos:position pos:line="89" pos:column="55"/></name> <operator pos:line="89" pos:column="56">+<pos:position pos:line="89" pos:column="57"/></operator> <name pos:line="89" pos:column="58">naccepted<pos:position pos:line="89" pos:column="67"/></name></expr></else></ternary></expr>;<pos:position pos:line="89" pos:column="68"/></expr_stmt>
	  <if pos:line="90" pos:column="11">if <condition pos:line="90" pos:column="14">(<expr><name pos:line="90" pos:column="15">fs<pos:position pos:line="90" pos:column="17"/></name> <operator pos:line="90" pos:column="18">&amp;&amp;<pos:position pos:line="90" pos:column="28"/></operator> <operator pos:line="90" pos:column="21">(<pos:position pos:line="90" pos:column="22"/></operator><operator pos:line="90" pos:column="22">*<pos:position pos:line="90" pos:column="23"/></operator><name pos:line="90" pos:column="23">pidx<pos:position pos:line="90" pos:column="27"/></name> <operator pos:line="90" pos:column="28">&gt;<pos:position pos:line="90" pos:column="32"/></operator> <name><name pos:line="90" pos:column="30">mctx<pos:position pos:line="90" pos:column="34"/></name><operator pos:line="90" pos:column="34">-&gt;<pos:position pos:line="90" pos:column="39"/></operator><name pos:line="90" pos:column="36">match_last<pos:position pos:line="90" pos:column="46"/></name></name> <operator pos:line="90" pos:column="47">||<pos:position pos:line="90" pos:column="49"/></operator> <name><name pos:line="90" pos:column="50">mctx<pos:position pos:line="90" pos:column="54"/></name><operator pos:line="90" pos:column="54">-&gt;<pos:position pos:line="90" pos:column="59"/></operator><name pos:line="90" pos:column="56">state_log<pos:position pos:line="90" pos:column="65"/></name><index pos:line="90" pos:column="65">[<expr><operator pos:line="90" pos:column="66">*<pos:position pos:line="90" pos:column="67"/></operator><name pos:line="90" pos:column="67">pidx<pos:position pos:line="90" pos:column="71"/></name></expr>]<pos:position pos:line="90" pos:column="72"/></index></name> <operator pos:line="90" pos:column="73">==<pos:position pos:line="90" pos:column="75"/></operator> <name pos:line="90" pos:column="76">NULL<pos:position pos:line="90" pos:column="80"/></name>
		     <operator pos:line="91" pos:column="22">||<pos:position pos:line="91" pos:column="24"/></operator> <operator pos:line="91" pos:column="25">!<pos:position pos:line="91" pos:column="26"/></operator><call><name pos:line="91" pos:column="26">re_node_set_contains<pos:position pos:line="91" pos:column="46"/></name> <argument_list pos:line="91" pos:column="47">(<argument><expr><operator pos:line="91" pos:column="48">&amp;<pos:position pos:line="91" pos:column="53"/></operator><name><name pos:line="91" pos:column="49">mctx<pos:position pos:line="91" pos:column="53"/></name><operator pos:line="91" pos:column="53">-&gt;<pos:position pos:line="91" pos:column="58"/></operator><name pos:line="91" pos:column="55">state_log<pos:position pos:line="91" pos:column="64"/></name><index pos:line="91" pos:column="64">[<expr><operator pos:line="91" pos:column="65">*<pos:position pos:line="91" pos:column="66"/></operator><name pos:line="91" pos:column="66">pidx<pos:position pos:line="91" pos:column="70"/></name></expr>]<pos:position pos:line="91" pos:column="71"/></index></name><operator pos:line="91" pos:column="71">-&gt;<pos:position pos:line="91" pos:column="76"/></operator><name pos:line="91" pos:column="73">nodes<pos:position pos:line="91" pos:column="78"/></name></expr></argument>,
					       <argument><expr><name pos:line="92" pos:column="48">dest_node<pos:position pos:line="92" pos:column="57"/></name></expr></argument>)<pos:position pos:line="92" pos:column="58"/></argument_list></call><operator pos:line="92" pos:column="58">)<pos:position pos:line="92" pos:column="59"/></operator></expr>)<pos:position pos:line="92" pos:column="60"/></condition><then pos:line="92" pos:column="60">
	    <block type="pseudo"><return pos:line="93" pos:column="13">return <expr><operator pos:line="93" pos:column="20">-<pos:position pos:line="93" pos:column="21"/></operator><literal type="number" pos:line="93" pos:column="21">1<pos:position pos:line="93" pos:column="22"/></literal></expr>;<pos:position pos:line="93" pos:column="23"/></return></block></then></if>
	  <expr_stmt><expr><call><name pos:line="94" pos:column="11">re_node_set_empty<pos:position pos:line="94" pos:column="28"/></name> <argument_list pos:line="94" pos:column="29">(<argument><expr><name pos:line="94" pos:column="30">eps_via_nodes<pos:position pos:line="94" pos:column="43"/></name></expr></argument>)<pos:position pos:line="94" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="45"/></expr_stmt>
	  <return pos:line="95" pos:column="11">return <expr><name pos:line="95" pos:column="18">dest_node<pos:position pos:line="95" pos:column="27"/></name></expr>;<pos:position pos:line="95" pos:column="28"/></return>
	}<pos:position pos:line="96" pos:column="10"/></block></then></if>
    }<pos:position pos:line="97" pos:column="6"/></block></else></if>
  <return pos:line="98" pos:column="3">return <expr><operator pos:line="98" pos:column="10">-<pos:position pos:line="98" pos:column="11"/></operator><literal type="number" pos:line="98" pos:column="11">1<pos:position pos:line="98" pos:column="12"/></literal></expr>;<pos:position pos:line="98" pos:column="13"/></return>
}<pos:position pos:line="99" pos:column="2"/></block></function></unit>
