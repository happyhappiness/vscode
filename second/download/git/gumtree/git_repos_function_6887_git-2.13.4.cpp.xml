<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6887_git-2.13.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">check_node_accept_bytes<pos:position pos:line="3" pos:column="24"/></name> <parameter_list pos:line="3" pos:column="25">(<parameter><decl><type><specifier pos:line="3" pos:column="26">const<pos:position pos:line="3" pos:column="31"/></specifier> <name pos:line="3" pos:column="32">re_dfa_t<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">dfa<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="47">int<pos:position pos:line="3" pos:column="50"/></name></type> <name pos:line="3" pos:column="51">node_idx<pos:position pos:line="3" pos:column="59"/></name></decl></parameter>,
			 <parameter><decl><type><specifier pos:line="4" pos:column="26">const<pos:position pos:line="4" pos:column="31"/></specifier> <name pos:line="4" pos:column="32">re_string_t<pos:position pos:line="4" pos:column="43"/></name> <modifier pos:line="4" pos:column="44">*<pos:position pos:line="4" pos:column="45"/></modifier></type><name pos:line="4" pos:column="45">input<pos:position pos:line="4" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="52">int<pos:position pos:line="4" pos:column="55"/></name></type> <name pos:line="4" pos:column="56">str_idx<pos:position pos:line="4" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="64"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">re_token_t<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">node<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">dfa<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">-&gt;<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="33">nodes<pos:position pos:line="6" pos:column="38"/></name></name> <operator pos:line="6" pos:column="39">+<pos:position pos:line="6" pos:column="40"/></operator> <name pos:line="6" pos:column="41">node_idx<pos:position pos:line="6" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="50"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">char_len<pos:position pos:line="7" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="17">elem_len<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">i<pos:position pos:line="8" pos:column="8"/></name></decl>;<pos:position pos:line="8" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">wint_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">wc<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><call><name pos:line="11" pos:column="7">BE<pos:position pos:line="11" pos:column="9"/></name> <argument_list pos:line="11" pos:column="10">(<argument><expr><name><name pos:line="11" pos:column="11">node<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">type<pos:position pos:line="11" pos:column="21"/></name></name> <operator pos:line="11" pos:column="22">==<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">OP_UTF8_PERIOD<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="41">0<pos:position pos:line="11" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="44"/></condition><then pos:line="11" pos:column="44">
    <block pos:line="12" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="13" pos:column="7">unsigned<pos:position pos:line="13" pos:column="15"/></name> <name pos:line="13" pos:column="16">char<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">c<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><call><name pos:line="13" pos:column="25">re_string_byte_at<pos:position pos:line="13" pos:column="42"/></name> <argument_list pos:line="13" pos:column="43">(<argument><expr><name pos:line="13" pos:column="44">input<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="51">str_idx<pos:position pos:line="13" pos:column="58"/></name></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="61">d<pos:position pos:line="13" pos:column="62"/></name></decl>;<pos:position pos:line="13" pos:column="63"/></decl_stmt>
      <if pos:line="14" pos:column="7">if <condition pos:line="14" pos:column="10">(<expr><call><name pos:line="14" pos:column="11">BE<pos:position pos:line="14" pos:column="13"/></name> <argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">c<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">&lt;<pos:position pos:line="14" pos:column="21"/></operator> <literal type="number" pos:line="14" pos:column="19">0xc2<pos:position pos:line="14" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="25">1<pos:position pos:line="14" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="28"/></condition><then pos:line="14" pos:column="28">
	<block type="pseudo"><return pos:line="15" pos:column="9">return <expr><literal type="number" pos:line="15" pos:column="16">0<pos:position pos:line="15" pos:column="17"/></literal></expr>;<pos:position pos:line="15" pos:column="18"/></return></block></then></if>

      <if pos:line="17" pos:column="7">if <condition pos:line="17" pos:column="10">(<expr><name pos:line="17" pos:column="11">str_idx<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">+<pos:position pos:line="17" pos:column="20"/></operator> <literal type="number" pos:line="17" pos:column="21">2<pos:position pos:line="17" pos:column="22"/></literal> <operator pos:line="17" pos:column="23">&gt;<pos:position pos:line="17" pos:column="27"/></operator> <name><name pos:line="17" pos:column="25">input<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">len<pos:position pos:line="17" pos:column="35"/></name></name></expr>)<pos:position pos:line="17" pos:column="36"/></condition><then pos:line="17" pos:column="36">
	<block type="pseudo"><return pos:line="18" pos:column="9">return <expr><literal type="number" pos:line="18" pos:column="16">0<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></return></block></then></if>

      <expr_stmt><expr><name pos:line="20" pos:column="7">d<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">=<pos:position pos:line="20" pos:column="10"/></operator> <call><name pos:line="20" pos:column="11">re_string_byte_at<pos:position pos:line="20" pos:column="28"/></name> <argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">input<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="37">str_idx<pos:position pos:line="20" pos:column="44"/></name> <operator pos:line="20" pos:column="45">+<pos:position pos:line="20" pos:column="46"/></operator> <literal type="number" pos:line="20" pos:column="47">1<pos:position pos:line="20" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
      <if pos:line="21" pos:column="7">if <condition pos:line="21" pos:column="10">(<expr><name pos:line="21" pos:column="11">c<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">&lt;<pos:position pos:line="21" pos:column="17"/></operator> <literal type="number" pos:line="21" pos:column="15">0xe0<pos:position pos:line="21" pos:column="19"/></literal></expr>)<pos:position pos:line="21" pos:column="20"/></condition><then pos:line="21" pos:column="20">
	<block type="pseudo"><return pos:line="22" pos:column="9">return <expr><ternary><condition><expr><operator pos:line="22" pos:column="16">(<pos:position pos:line="22" pos:column="17"/></operator><name><name pos:line="22" pos:column="17">d<pos:position pos:line="22" pos:column="18"/></name> <argument_list type="generic" pos:line="22" pos:column="19">&lt; <argument><expr><literal type="number" pos:line="22" pos:column="21">0x80<pos:position pos:line="22" pos:column="25"/></literal> <operator pos:line="22" pos:column="26">||<pos:position pos:line="22" pos:column="28"/></operator> <name pos:line="22" pos:column="29">d<pos:position pos:line="22" pos:column="30"/></name></expr></argument> &gt;<pos:position pos:line="22" pos:column="35"/></argument_list></name> <literal type="number" pos:line="22" pos:column="33">0xbf<pos:position pos:line="22" pos:column="37"/></literal><operator pos:line="22" pos:column="37">)<pos:position pos:line="22" pos:column="38"/></operator></expr> ?<pos:position pos:line="22" pos:column="40"/></condition><then pos:line="22" pos:column="40"> <expr><literal type="number" pos:line="22" pos:column="41">0<pos:position pos:line="22" pos:column="42"/></literal></expr> <pos:position pos:line="22" pos:column="43"/></then><else pos:line="22" pos:column="43">: <expr><literal type="number" pos:line="22" pos:column="45">2<pos:position pos:line="22" pos:column="46"/></literal></expr></else></ternary></expr>;<pos:position pos:line="22" pos:column="47"/></return></block></then>
      <elseif pos:line="23" pos:column="7">else <if pos:line="23" pos:column="12">if <condition pos:line="23" pos:column="15">(<expr><name pos:line="23" pos:column="16">c<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">&lt;<pos:position pos:line="23" pos:column="22"/></operator> <literal type="number" pos:line="23" pos:column="20">0xf0<pos:position pos:line="23" pos:column="24"/></literal></expr>)<pos:position pos:line="23" pos:column="25"/></condition><then pos:line="23" pos:column="25">
	<block pos:line="24" pos:column="9">{
	  <expr_stmt><expr><name pos:line="25" pos:column="11">char_len<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <literal type="number" pos:line="25" pos:column="22">3<pos:position pos:line="25" pos:column="23"/></literal></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>
	  <if pos:line="26" pos:column="11">if <condition pos:line="26" pos:column="14">(<expr><name pos:line="26" pos:column="15">c<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">==<pos:position pos:line="26" pos:column="19"/></operator> <literal type="number" pos:line="26" pos:column="20">0xe0<pos:position pos:line="26" pos:column="24"/></literal> <operator pos:line="26" pos:column="25">&amp;&amp;<pos:position pos:line="26" pos:column="35"/></operator> <name pos:line="26" pos:column="28">d<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">&lt;<pos:position pos:line="26" pos:column="34"/></operator> <literal type="number" pos:line="26" pos:column="32">0xa0<pos:position pos:line="26" pos:column="36"/></literal></expr>)<pos:position pos:line="26" pos:column="37"/></condition><then pos:line="26" pos:column="37">
	    <block type="pseudo"><return pos:line="27" pos:column="13">return <expr><literal type="number" pos:line="27" pos:column="20">0<pos:position pos:line="27" pos:column="21"/></literal></expr>;<pos:position pos:line="27" pos:column="22"/></return></block></then></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if></elseif>
      <elseif pos:line="29" pos:column="7">else <if pos:line="29" pos:column="12">if <condition pos:line="29" pos:column="15">(<expr><name pos:line="29" pos:column="16">c<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">&lt;<pos:position pos:line="29" pos:column="22"/></operator> <literal type="number" pos:line="29" pos:column="20">0xf8<pos:position pos:line="29" pos:column="24"/></literal></expr>)<pos:position pos:line="29" pos:column="25"/></condition><then pos:line="29" pos:column="25">
	<block pos:line="30" pos:column="9">{
	  <expr_stmt><expr><name pos:line="31" pos:column="11">char_len<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">=<pos:position pos:line="31" pos:column="21"/></operator> <literal type="number" pos:line="31" pos:column="22">4<pos:position pos:line="31" pos:column="23"/></literal></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
	  <if pos:line="32" pos:column="11">if <condition pos:line="32" pos:column="14">(<expr><name pos:line="32" pos:column="15">c<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">==<pos:position pos:line="32" pos:column="19"/></operator> <literal type="number" pos:line="32" pos:column="20">0xf0<pos:position pos:line="32" pos:column="24"/></literal> <operator pos:line="32" pos:column="25">&amp;&amp;<pos:position pos:line="32" pos:column="35"/></operator> <name pos:line="32" pos:column="28">d<pos:position pos:line="32" pos:column="29"/></name> <operator pos:line="32" pos:column="30">&lt;<pos:position pos:line="32" pos:column="34"/></operator> <literal type="number" pos:line="32" pos:column="32">0x90<pos:position pos:line="32" pos:column="36"/></literal></expr>)<pos:position pos:line="32" pos:column="37"/></condition><then pos:line="32" pos:column="37">
	    <block type="pseudo"><return pos:line="33" pos:column="13">return <expr><literal type="number" pos:line="33" pos:column="20">0<pos:position pos:line="33" pos:column="21"/></literal></expr>;<pos:position pos:line="33" pos:column="22"/></return></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if></elseif>
      <elseif pos:line="35" pos:column="7">else <if pos:line="35" pos:column="12">if <condition pos:line="35" pos:column="15">(<expr><name pos:line="35" pos:column="16">c<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">&lt;<pos:position pos:line="35" pos:column="22"/></operator> <literal type="number" pos:line="35" pos:column="20">0xfc<pos:position pos:line="35" pos:column="24"/></literal></expr>)<pos:position pos:line="35" pos:column="25"/></condition><then pos:line="35" pos:column="25">
	<block pos:line="36" pos:column="9">{
	  <expr_stmt><expr><name pos:line="37" pos:column="11">char_len<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">=<pos:position pos:line="37" pos:column="21"/></operator> <literal type="number" pos:line="37" pos:column="22">5<pos:position pos:line="37" pos:column="23"/></literal></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>
	  <if pos:line="38" pos:column="11">if <condition pos:line="38" pos:column="14">(<expr><name pos:line="38" pos:column="15">c<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">==<pos:position pos:line="38" pos:column="19"/></operator> <literal type="number" pos:line="38" pos:column="20">0xf8<pos:position pos:line="38" pos:column="24"/></literal> <operator pos:line="38" pos:column="25">&amp;&amp;<pos:position pos:line="38" pos:column="35"/></operator> <name pos:line="38" pos:column="28">d<pos:position pos:line="38" pos:column="29"/></name> <operator pos:line="38" pos:column="30">&lt;<pos:position pos:line="38" pos:column="34"/></operator> <literal type="number" pos:line="38" pos:column="32">0x88<pos:position pos:line="38" pos:column="36"/></literal></expr>)<pos:position pos:line="38" pos:column="37"/></condition><then pos:line="38" pos:column="37">
	    <block type="pseudo"><return pos:line="39" pos:column="13">return <expr><literal type="number" pos:line="39" pos:column="20">0<pos:position pos:line="39" pos:column="21"/></literal></expr>;<pos:position pos:line="39" pos:column="22"/></return></block></then></if>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if></elseif>
      <elseif pos:line="41" pos:column="7">else <if pos:line="41" pos:column="12">if <condition pos:line="41" pos:column="15">(<expr><name pos:line="41" pos:column="16">c<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">&lt;<pos:position pos:line="41" pos:column="22"/></operator> <literal type="number" pos:line="41" pos:column="20">0xfe<pos:position pos:line="41" pos:column="24"/></literal></expr>)<pos:position pos:line="41" pos:column="25"/></condition><then pos:line="41" pos:column="25">
	<block pos:line="42" pos:column="9">{
	  <expr_stmt><expr><name pos:line="43" pos:column="11">char_len<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">=<pos:position pos:line="43" pos:column="21"/></operator> <literal type="number" pos:line="43" pos:column="22">6<pos:position pos:line="43" pos:column="23"/></literal></expr>;<pos:position pos:line="43" pos:column="24"/></expr_stmt>
	  <if pos:line="44" pos:column="11">if <condition pos:line="44" pos:column="14">(<expr><name pos:line="44" pos:column="15">c<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">==<pos:position pos:line="44" pos:column="19"/></operator> <literal type="number" pos:line="44" pos:column="20">0xfc<pos:position pos:line="44" pos:column="24"/></literal> <operator pos:line="44" pos:column="25">&amp;&amp;<pos:position pos:line="44" pos:column="35"/></operator> <name pos:line="44" pos:column="28">d<pos:position pos:line="44" pos:column="29"/></name> <operator pos:line="44" pos:column="30">&lt;<pos:position pos:line="44" pos:column="34"/></operator> <literal type="number" pos:line="44" pos:column="32">0x84<pos:position pos:line="44" pos:column="36"/></literal></expr>)<pos:position pos:line="44" pos:column="37"/></condition><then pos:line="44" pos:column="37">
	    <block type="pseudo"><return pos:line="45" pos:column="13">return <expr><literal type="number" pos:line="45" pos:column="20">0<pos:position pos:line="45" pos:column="21"/></literal></expr>;<pos:position pos:line="45" pos:column="22"/></return></block></then></if>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if></elseif>
      <else pos:line="47" pos:column="7">else
	<block type="pseudo"><return pos:line="48" pos:column="9">return <expr><literal type="number" pos:line="48" pos:column="16">0<pos:position pos:line="48" pos:column="17"/></literal></expr>;<pos:position pos:line="48" pos:column="18"/></return></block></else></if>

      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><name pos:line="50" pos:column="11">str_idx<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">+<pos:position pos:line="50" pos:column="20"/></operator> <name pos:line="50" pos:column="21">char_len<pos:position pos:line="50" pos:column="29"/></name> <operator pos:line="50" pos:column="30">&gt;<pos:position pos:line="50" pos:column="34"/></operator> <name><name pos:line="50" pos:column="32">input<pos:position pos:line="50" pos:column="37"/></name><operator pos:line="50" pos:column="37">-&gt;<pos:position pos:line="50" pos:column="42"/></operator><name pos:line="50" pos:column="39">len<pos:position pos:line="50" pos:column="42"/></name></name></expr>)<pos:position pos:line="50" pos:column="43"/></condition><then pos:line="50" pos:column="43">
	<block type="pseudo"><return pos:line="51" pos:column="9">return <expr><literal type="number" pos:line="51" pos:column="16">0<pos:position pos:line="51" pos:column="17"/></literal></expr>;<pos:position pos:line="51" pos:column="18"/></return></block></then></if>

      <for pos:line="53" pos:column="7">for <control pos:line="53" pos:column="11">(<init><expr><name pos:line="53" pos:column="12">i<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <literal type="number" pos:line="53" pos:column="16">1<pos:position pos:line="53" pos:column="17"/></literal></expr>;<pos:position pos:line="53" pos:column="18"/></init> <condition><expr><name pos:line="53" pos:column="19">i<pos:position pos:line="53" pos:column="20"/></name> <operator pos:line="53" pos:column="21">&lt;<pos:position pos:line="53" pos:column="25"/></operator> <name pos:line="53" pos:column="23">char_len<pos:position pos:line="53" pos:column="31"/></name></expr>;<pos:position pos:line="53" pos:column="32"/></condition> <incr><expr><operator pos:line="53" pos:column="33">++<pos:position pos:line="53" pos:column="35"/></operator><name pos:line="53" pos:column="35">i<pos:position pos:line="53" pos:column="36"/></name></expr></incr>)<pos:position pos:line="53" pos:column="37"/></control>
	<block pos:line="54" pos:column="9">{
	  <expr_stmt><expr><name pos:line="55" pos:column="11">d<pos:position pos:line="55" pos:column="12"/></name> <operator pos:line="55" pos:column="13">=<pos:position pos:line="55" pos:column="14"/></operator> <call><name pos:line="55" pos:column="15">re_string_byte_at<pos:position pos:line="55" pos:column="32"/></name> <argument_list pos:line="55" pos:column="33">(<argument><expr><name pos:line="55" pos:column="34">input<pos:position pos:line="55" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="41">str_idx<pos:position pos:line="55" pos:column="48"/></name> <operator pos:line="55" pos:column="49">+<pos:position pos:line="55" pos:column="50"/></operator> <name pos:line="55" pos:column="51">i<pos:position pos:line="55" pos:column="52"/></name></expr></argument>)<pos:position pos:line="55" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="54"/></expr_stmt>
	  <if pos:line="56" pos:column="11">if <condition pos:line="56" pos:column="14">(<expr><name><name pos:line="56" pos:column="15">d<pos:position pos:line="56" pos:column="16"/></name> <argument_list type="generic" pos:line="56" pos:column="17">&lt; <argument><expr><literal type="number" pos:line="56" pos:column="19">0x80<pos:position pos:line="56" pos:column="23"/></literal> <operator pos:line="56" pos:column="24">||<pos:position pos:line="56" pos:column="26"/></operator> <name pos:line="56" pos:column="27">d<pos:position pos:line="56" pos:column="28"/></name></expr></argument> &gt;<pos:position pos:line="56" pos:column="33"/></argument_list></name> <literal type="number" pos:line="56" pos:column="31">0xbf<pos:position pos:line="56" pos:column="35"/></literal></expr>)<pos:position pos:line="56" pos:column="36"/></condition><then pos:line="56" pos:column="36">
	    <block type="pseudo"><return pos:line="57" pos:column="13">return <expr><literal type="number" pos:line="57" pos:column="20">0<pos:position pos:line="57" pos:column="21"/></literal></expr>;<pos:position pos:line="57" pos:column="22"/></return></block></then></if>
	}<pos:position pos:line="58" pos:column="10"/></block></for>
      <return pos:line="59" pos:column="7">return <expr><name pos:line="59" pos:column="14">char_len<pos:position pos:line="59" pos:column="22"/></name></expr>;<pos:position pos:line="59" pos:column="23"/></return>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name pos:line="62" pos:column="3">char_len<pos:position pos:line="62" pos:column="11"/></name> <operator pos:line="62" pos:column="12">=<pos:position pos:line="62" pos:column="13"/></operator> <call><name pos:line="62" pos:column="14">re_string_char_size_at<pos:position pos:line="62" pos:column="36"/></name> <argument_list pos:line="62" pos:column="37">(<argument><expr><name pos:line="62" pos:column="38">input<pos:position pos:line="62" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="45">str_idx<pos:position pos:line="62" pos:column="52"/></name></expr></argument>)<pos:position pos:line="62" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="54"/></expr_stmt>
  <if pos:line="63" pos:column="3">if <condition pos:line="63" pos:column="6">(<expr><name><name pos:line="63" pos:column="7">node<pos:position pos:line="63" pos:column="11"/></name><operator pos:line="63" pos:column="11">-&gt;<pos:position pos:line="63" pos:column="16"/></operator><name pos:line="63" pos:column="13">type<pos:position pos:line="63" pos:column="17"/></name></name> <operator pos:line="63" pos:column="18">==<pos:position pos:line="63" pos:column="20"/></operator> <name pos:line="63" pos:column="21">OP_PERIOD<pos:position pos:line="63" pos:column="30"/></name></expr>)<pos:position pos:line="63" pos:column="31"/></condition><then pos:line="63" pos:column="31">
    <block pos:line="64" pos:column="5">{
      <if pos:line="65" pos:column="7">if <condition pos:line="65" pos:column="10">(<expr><name pos:line="65" pos:column="11">char_len<pos:position pos:line="65" pos:column="19"/></name> <operator pos:line="65" pos:column="20">&lt;=<pos:position pos:line="65" pos:column="25"/></operator> <literal type="number" pos:line="65" pos:column="23">1<pos:position pos:line="65" pos:column="24"/></literal></expr>)<pos:position pos:line="65" pos:column="25"/></condition><then pos:line="65" pos:column="25">
	<block type="pseudo"><return pos:line="66" pos:column="9">return <expr><literal type="number" pos:line="66" pos:column="16">0<pos:position pos:line="66" pos:column="17"/></literal></expr>;<pos:position pos:line="66" pos:column="18"/></return></block></then></if>
      <comment type="block" pos:line="67" pos:column="7">/* FIXME: I don't think this if is needed, as both '\n'
	 and '\0' are char_len == 1.  */</comment>
      <comment type="block" pos:line="69" pos:column="7">/* '.' accepts any one character except the following two cases.  */</comment>
      <if pos:line="70" pos:column="7">if <condition pos:line="70" pos:column="10">(<expr><operator pos:line="70" pos:column="11">(<pos:position pos:line="70" pos:column="12"/></operator><operator pos:line="70" pos:column="12">!<pos:position pos:line="70" pos:column="13"/></operator><operator pos:line="70" pos:column="13">(<pos:position pos:line="70" pos:column="14"/></operator><name><name pos:line="70" pos:column="14">dfa<pos:position pos:line="70" pos:column="17"/></name><operator pos:line="70" pos:column="17">-&gt;<pos:position pos:line="70" pos:column="22"/></operator><name pos:line="70" pos:column="19">syntax<pos:position pos:line="70" pos:column="25"/></name></name> <operator pos:line="70" pos:column="26">&amp;<pos:position pos:line="70" pos:column="31"/></operator> <name pos:line="70" pos:column="28">RE_DOT_NEWLINE<pos:position pos:line="70" pos:column="42"/></name><operator pos:line="70" pos:column="42">)<pos:position pos:line="70" pos:column="43"/></operator> <operator pos:line="70" pos:column="44">&amp;&amp;<pos:position pos:line="70" pos:column="54"/></operator>
	   <call><name pos:line="71" pos:column="12">re_string_byte_at<pos:position pos:line="71" pos:column="29"/></name> <argument_list pos:line="71" pos:column="30">(<argument><expr><name pos:line="71" pos:column="31">input<pos:position pos:line="71" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="38">str_idx<pos:position pos:line="71" pos:column="45"/></name></expr></argument>)<pos:position pos:line="71" pos:column="46"/></argument_list></call> <operator pos:line="71" pos:column="47">==<pos:position pos:line="71" pos:column="49"/></operator> <literal type="char" pos:line="71" pos:column="50">'\n'<pos:position pos:line="71" pos:column="54"/></literal><operator pos:line="71" pos:column="54">)<pos:position pos:line="71" pos:column="55"/></operator> <operator pos:line="71" pos:column="56">||<pos:position pos:line="71" pos:column="58"/></operator>
	  <operator pos:line="72" pos:column="11">(<pos:position pos:line="72" pos:column="12"/></operator><operator pos:line="72" pos:column="12">(<pos:position pos:line="72" pos:column="13"/></operator><name><name pos:line="72" pos:column="13">dfa<pos:position pos:line="72" pos:column="16"/></name><operator pos:line="72" pos:column="16">-&gt;<pos:position pos:line="72" pos:column="21"/></operator><name pos:line="72" pos:column="18">syntax<pos:position pos:line="72" pos:column="24"/></name></name> <operator pos:line="72" pos:column="25">&amp;<pos:position pos:line="72" pos:column="30"/></operator> <name pos:line="72" pos:column="27">RE_DOT_NOT_NULL<pos:position pos:line="72" pos:column="42"/></name><operator pos:line="72" pos:column="42">)<pos:position pos:line="72" pos:column="43"/></operator> <operator pos:line="72" pos:column="44">&amp;&amp;<pos:position pos:line="72" pos:column="54"/></operator>
	   <call><name pos:line="73" pos:column="12">re_string_byte_at<pos:position pos:line="73" pos:column="29"/></name> <argument_list pos:line="73" pos:column="30">(<argument><expr><name pos:line="73" pos:column="31">input<pos:position pos:line="73" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="38">str_idx<pos:position pos:line="73" pos:column="45"/></name></expr></argument>)<pos:position pos:line="73" pos:column="46"/></argument_list></call> <operator pos:line="73" pos:column="47">==<pos:position pos:line="73" pos:column="49"/></operator> <literal type="char" pos:line="73" pos:column="50">'\0'<pos:position pos:line="73" pos:column="54"/></literal><operator pos:line="73" pos:column="54">)<pos:position pos:line="73" pos:column="55"/></operator></expr>)<pos:position pos:line="73" pos:column="56"/></condition><then pos:line="73" pos:column="56">
	<block type="pseudo"><return pos:line="74" pos:column="9">return <expr><literal type="number" pos:line="74" pos:column="16">0<pos:position pos:line="74" pos:column="17"/></literal></expr>;<pos:position pos:line="74" pos:column="18"/></return></block></then></if>
      <return pos:line="75" pos:column="7">return <expr><name pos:line="75" pos:column="14">char_len<pos:position pos:line="75" pos:column="22"/></name></expr>;<pos:position pos:line="75" pos:column="23"/></return>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name pos:line="78" pos:column="3">elem_len<pos:position pos:line="78" pos:column="11"/></name> <operator pos:line="78" pos:column="12">=<pos:position pos:line="78" pos:column="13"/></operator> <call><name pos:line="78" pos:column="14">re_string_elem_size_at<pos:position pos:line="78" pos:column="36"/></name> <argument_list pos:line="78" pos:column="37">(<argument><expr><name pos:line="78" pos:column="38">input<pos:position pos:line="78" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="45">str_idx<pos:position pos:line="78" pos:column="52"/></name></expr></argument>)<pos:position pos:line="78" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><name pos:line="79" pos:column="3">wc<pos:position pos:line="79" pos:column="5"/></name> <operator pos:line="79" pos:column="6">=<pos:position pos:line="79" pos:column="7"/></operator> <call><name pos:line="79" pos:column="8">__btowc<pos:position pos:line="79" pos:column="15"/></name><argument_list pos:line="79" pos:column="15">(<argument><expr><operator pos:line="79" pos:column="16">*<pos:position pos:line="79" pos:column="17"/></operator><operator pos:line="79" pos:column="17">(<pos:position pos:line="79" pos:column="18"/></operator><name><name pos:line="79" pos:column="18">input<pos:position pos:line="79" pos:column="23"/></name><operator pos:line="79" pos:column="23">-&gt;<pos:position pos:line="79" pos:column="28"/></operator><name pos:line="79" pos:column="25">mbs<pos:position pos:line="79" pos:column="28"/></name></name><operator pos:line="79" pos:column="28">+<pos:position pos:line="79" pos:column="29"/></operator><name pos:line="79" pos:column="29">str_idx<pos:position pos:line="79" pos:column="36"/></name><operator pos:line="79" pos:column="36">)<pos:position pos:line="79" pos:column="37"/></operator></expr></argument>)<pos:position pos:line="79" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="39"/></expr_stmt>
  <if pos:line="80" pos:column="3">if <condition pos:line="80" pos:column="6">(<expr><operator pos:line="80" pos:column="7">(<pos:position pos:line="80" pos:column="8"/></operator><operator pos:line="80" pos:column="8">(<pos:position pos:line="80" pos:column="9"/></operator><name pos:line="80" pos:column="9">elem_len<pos:position pos:line="80" pos:column="17"/></name> <operator pos:line="80" pos:column="18">&lt;=<pos:position pos:line="80" pos:column="23"/></operator> <literal type="number" pos:line="80" pos:column="21">1<pos:position pos:line="80" pos:column="22"/></literal> <operator pos:line="80" pos:column="23">&amp;&amp;<pos:position pos:line="80" pos:column="33"/></operator> <name pos:line="80" pos:column="26">char_len<pos:position pos:line="80" pos:column="34"/></name> <operator pos:line="80" pos:column="35">&lt;=<pos:position pos:line="80" pos:column="40"/></operator> <literal type="number" pos:line="80" pos:column="38">1<pos:position pos:line="80" pos:column="39"/></literal><operator pos:line="80" pos:column="39">)<pos:position pos:line="80" pos:column="40"/></operator> <operator pos:line="80" pos:column="41">||<pos:position pos:line="80" pos:column="43"/></operator> <name pos:line="80" pos:column="44">char_len<pos:position pos:line="80" pos:column="52"/></name> <operator pos:line="80" pos:column="53">==<pos:position pos:line="80" pos:column="55"/></operator> <literal type="number" pos:line="80" pos:column="56">0<pos:position pos:line="80" pos:column="57"/></literal><operator pos:line="80" pos:column="57">)<pos:position pos:line="80" pos:column="58"/></operator> <operator pos:line="80" pos:column="59">&amp;&amp;<pos:position pos:line="80" pos:column="69"/></operator> <operator pos:line="80" pos:column="62">(<pos:position pos:line="80" pos:column="63"/></operator><name pos:line="80" pos:column="63">wc<pos:position pos:line="80" pos:column="65"/></name> <operator pos:line="80" pos:column="66">!=<pos:position pos:line="80" pos:column="68"/></operator> <name pos:line="80" pos:column="69">WEOF<pos:position pos:line="80" pos:column="73"/></name> <operator pos:line="80" pos:column="74">&amp;&amp;<pos:position pos:line="80" pos:column="84"/></operator> <name pos:line="80" pos:column="77">wc<pos:position pos:line="80" pos:column="79"/></name> <operator pos:line="80" pos:column="80">&lt;<pos:position pos:line="80" pos:column="84"/></operator> <name pos:line="80" pos:column="82">SBC_MAX<pos:position pos:line="80" pos:column="89"/></name><operator pos:line="80" pos:column="89">)<pos:position pos:line="80" pos:column="90"/></operator></expr>)<pos:position pos:line="80" pos:column="91"/></condition><then pos:line="80" pos:column="91">
    <block type="pseudo"><return pos:line="81" pos:column="5">return <expr><literal type="number" pos:line="81" pos:column="12">0<pos:position pos:line="81" pos:column="13"/></literal></expr>;<pos:position pos:line="81" pos:column="14"/></return></block></then></if>

  <if pos:line="83" pos:column="3">if <condition pos:line="83" pos:column="6">(<expr><name><name pos:line="83" pos:column="7">node<pos:position pos:line="83" pos:column="11"/></name><operator pos:line="83" pos:column="11">-&gt;<pos:position pos:line="83" pos:column="16"/></operator><name pos:line="83" pos:column="13">type<pos:position pos:line="83" pos:column="17"/></name></name> <operator pos:line="83" pos:column="18">==<pos:position pos:line="83" pos:column="20"/></operator> <name pos:line="83" pos:column="21">COMPLEX_BRACKET<pos:position pos:line="83" pos:column="36"/></name></expr>)<pos:position pos:line="83" pos:column="37"/></condition><then pos:line="83" pos:column="37">
    <block pos:line="84" pos:column="5">{
      <decl_stmt><decl><type><specifier pos:line="85" pos:column="7">const<pos:position pos:line="85" pos:column="12"/></specifier> <name pos:line="85" pos:column="13">re_charset_t<pos:position pos:line="85" pos:column="25"/></name> <modifier pos:line="85" pos:column="26">*<pos:position pos:line="85" pos:column="27"/></modifier></type><name pos:line="85" pos:column="27">cset<pos:position pos:line="85" pos:column="31"/></name> <init pos:line="85" pos:column="32">= <expr><name><name pos:line="85" pos:column="34">node<pos:position pos:line="85" pos:column="38"/></name><operator pos:line="85" pos:column="38">-&gt;<pos:position pos:line="85" pos:column="43"/></operator><name pos:line="85" pos:column="40">opr<pos:position pos:line="85" pos:column="43"/></name><operator pos:line="85" pos:column="43">.<pos:position pos:line="85" pos:column="44"/></operator><name pos:line="85" pos:column="44">mbcset<pos:position pos:line="85" pos:column="50"/></name></name></expr></init></decl>;<pos:position pos:line="85" pos:column="51"/></decl_stmt>
<cpp:ifdef pos:line="86" pos:column="1"># <cpp:directive pos:line="86" pos:column="3">ifdef<pos:position pos:line="86" pos:column="8"/></cpp:directive> <name pos:line="86" pos:column="9">_LIBC<pos:position pos:line="86" pos:column="14"/></name></cpp:ifdef>
      <decl_stmt><decl><type><specifier pos:line="87" pos:column="7">const<pos:position pos:line="87" pos:column="12"/></specifier> <name pos:line="87" pos:column="13">unsigned<pos:position pos:line="87" pos:column="21"/></name> <name pos:line="87" pos:column="22">char<pos:position pos:line="87" pos:column="26"/></name> <modifier pos:line="87" pos:column="27">*<pos:position pos:line="87" pos:column="28"/></modifier></type><name pos:line="87" pos:column="28">pin<pos:position pos:line="87" pos:column="31"/></name>
	<init pos:line="88" pos:column="9">= <expr><operator pos:line="88" pos:column="11">(<pos:position pos:line="88" pos:column="12"/></operator><operator pos:line="88" pos:column="12">(<pos:position pos:line="88" pos:column="13"/></operator><specifier pos:line="88" pos:column="13">const<pos:position pos:line="88" pos:column="18"/></specifier> <name pos:line="88" pos:column="19">unsigned<pos:position pos:line="88" pos:column="27"/></name> <name pos:line="88" pos:column="28">char<pos:position pos:line="88" pos:column="32"/></name> <operator pos:line="88" pos:column="33">*<pos:position pos:line="88" pos:column="34"/></operator><operator pos:line="88" pos:column="34">)<pos:position pos:line="88" pos:column="35"/></operator> <call><name pos:line="88" pos:column="36">re_string_get_buffer<pos:position pos:line="88" pos:column="56"/></name> <argument_list pos:line="88" pos:column="57">(<argument><expr><name pos:line="88" pos:column="58">input<pos:position pos:line="88" pos:column="63"/></name></expr></argument>)<pos:position pos:line="88" pos:column="64"/></argument_list></call> <operator pos:line="88" pos:column="65">+<pos:position pos:line="88" pos:column="66"/></operator> <name pos:line="88" pos:column="67">str_idx<pos:position pos:line="88" pos:column="74"/></name><operator pos:line="88" pos:column="74">)<pos:position pos:line="88" pos:column="75"/></operator></expr></init></decl>;<pos:position pos:line="88" pos:column="76"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="89" pos:column="7">int<pos:position pos:line="89" pos:column="10"/></name></type> <name pos:line="89" pos:column="11">j<pos:position pos:line="89" pos:column="12"/></name></decl>;<pos:position pos:line="89" pos:column="13"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="90" pos:column="7">uint32_t<pos:position pos:line="90" pos:column="15"/></name></type> <name pos:line="90" pos:column="16">nrules<pos:position pos:line="90" pos:column="22"/></name></decl>;<pos:position pos:line="90" pos:column="23"/></decl_stmt>
<cpp:endif pos:line="91" pos:column="1"># <cpp:directive pos:line="91" pos:column="3">endif<pos:position pos:line="91" pos:column="8"/></cpp:directive></cpp:endif> <comment type="block" pos:line="91" pos:column="9">/* _LIBC */</comment>
      <decl_stmt><decl><type><name pos:line="92" pos:column="7">int<pos:position pos:line="92" pos:column="10"/></name></type> <name pos:line="92" pos:column="11">match_len<pos:position pos:line="92" pos:column="20"/></name> <init pos:line="92" pos:column="21">= <expr><literal type="number" pos:line="92" pos:column="23">0<pos:position pos:line="92" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="92" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="93" pos:column="7">wchar_t<pos:position pos:line="93" pos:column="14"/></name></type> <name pos:line="93" pos:column="15">wc<pos:position pos:line="93" pos:column="17"/></name> <init pos:line="93" pos:column="18">= <expr><operator pos:line="93" pos:column="20">(<pos:position pos:line="93" pos:column="21"/></operator><ternary><condition><expr><operator pos:line="93" pos:column="21">(<pos:position pos:line="93" pos:column="22"/></operator><name><name pos:line="93" pos:column="22">cset<pos:position pos:line="93" pos:column="26"/></name><operator pos:line="93" pos:column="26">-&gt;<pos:position pos:line="93" pos:column="31"/></operator><name pos:line="93" pos:column="28">nranges<pos:position pos:line="93" pos:column="35"/></name></name> <operator pos:line="93" pos:column="36">||<pos:position pos:line="93" pos:column="38"/></operator> <name><name pos:line="93" pos:column="39">cset<pos:position pos:line="93" pos:column="43"/></name><operator pos:line="93" pos:column="43">-&gt;<pos:position pos:line="93" pos:column="48"/></operator><name pos:line="93" pos:column="45">nchar_classes<pos:position pos:line="93" pos:column="58"/></name></name> <operator pos:line="93" pos:column="59">||<pos:position pos:line="93" pos:column="61"/></operator> <name><name pos:line="93" pos:column="62">cset<pos:position pos:line="93" pos:column="66"/></name><operator pos:line="93" pos:column="66">-&gt;<pos:position pos:line="93" pos:column="71"/></operator><name pos:line="93" pos:column="68">nmbchars<pos:position pos:line="93" pos:column="76"/></name></name><operator pos:line="93" pos:column="76">)<pos:position pos:line="93" pos:column="77"/></operator></expr>
		    ?<pos:position pos:line="94" pos:column="22"/></condition><then pos:line="94" pos:column="22"> <expr><call><name pos:line="94" pos:column="23">re_string_wchar_at<pos:position pos:line="94" pos:column="41"/></name> <argument_list pos:line="94" pos:column="42">(<argument><expr><name pos:line="94" pos:column="43">input<pos:position pos:line="94" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="50">str_idx<pos:position pos:line="94" pos:column="57"/></name></expr></argument>)<pos:position pos:line="94" pos:column="58"/></argument_list></call></expr> <pos:position pos:line="94" pos:column="59"/></then><else pos:line="94" pos:column="59">: <expr><literal type="number" pos:line="94" pos:column="61">0<pos:position pos:line="94" pos:column="62"/></literal></expr></else></ternary><operator pos:line="94" pos:column="62">)<pos:position pos:line="94" pos:column="63"/></operator></expr></init></decl>;<pos:position pos:line="94" pos:column="64"/></decl_stmt>

      <comment type="block" pos:line="96" pos:column="7">/* match with multibyte character?  */</comment>
      <for pos:line="97" pos:column="7">for <control pos:line="97" pos:column="11">(<init><expr><name pos:line="97" pos:column="12">i<pos:position pos:line="97" pos:column="13"/></name> <operator pos:line="97" pos:column="14">=<pos:position pos:line="97" pos:column="15"/></operator> <literal type="number" pos:line="97" pos:column="16">0<pos:position pos:line="97" pos:column="17"/></literal></expr>;<pos:position pos:line="97" pos:column="18"/></init> <condition><expr><name pos:line="97" pos:column="19">i<pos:position pos:line="97" pos:column="20"/></name> <operator pos:line="97" pos:column="21">&lt;<pos:position pos:line="97" pos:column="25"/></operator> <name><name pos:line="97" pos:column="23">cset<pos:position pos:line="97" pos:column="27"/></name><operator pos:line="97" pos:column="27">-&gt;<pos:position pos:line="97" pos:column="32"/></operator><name pos:line="97" pos:column="29">nmbchars<pos:position pos:line="97" pos:column="37"/></name></name></expr>;<pos:position pos:line="97" pos:column="38"/></condition> <incr><expr><operator pos:line="97" pos:column="39">++<pos:position pos:line="97" pos:column="41"/></operator><name pos:line="97" pos:column="41">i<pos:position pos:line="97" pos:column="42"/></name></expr></incr>)<pos:position pos:line="97" pos:column="43"/></control>
	<block type="pseudo"><if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">wc<pos:position pos:line="98" pos:column="15"/></name> <operator pos:line="98" pos:column="16">==<pos:position pos:line="98" pos:column="18"/></operator> <name><name pos:line="98" pos:column="19">cset<pos:position pos:line="98" pos:column="23"/></name><operator pos:line="98" pos:column="23">-&gt;<pos:position pos:line="98" pos:column="28"/></operator><name pos:line="98" pos:column="25">mbchars<pos:position pos:line="98" pos:column="32"/></name><index pos:line="98" pos:column="32">[<expr><name pos:line="98" pos:column="33">i<pos:position pos:line="98" pos:column="34"/></name></expr>]<pos:position pos:line="98" pos:column="35"/></index></name></expr>)<pos:position pos:line="98" pos:column="36"/></condition><then pos:line="98" pos:column="36">
	  <block pos:line="99" pos:column="11">{
	    <expr_stmt><expr><name pos:line="100" pos:column="13">match_len<pos:position pos:line="100" pos:column="22"/></name> <operator pos:line="100" pos:column="23">=<pos:position pos:line="100" pos:column="24"/></operator> <name pos:line="100" pos:column="25">char_len<pos:position pos:line="100" pos:column="33"/></name></expr>;<pos:position pos:line="100" pos:column="34"/></expr_stmt>
	    <goto pos:line="101" pos:column="13">goto <name pos:line="101" pos:column="18">check_node_accept_bytes_match<pos:position pos:line="101" pos:column="47"/></name>;<pos:position pos:line="101" pos:column="48"/></goto>
	  }<pos:position pos:line="102" pos:column="12"/></block></then></if></block></for>
      <comment type="block" pos:line="103" pos:column="7">/* match with character_class?  */</comment>
      <for pos:line="104" pos:column="7">for <control pos:line="104" pos:column="11">(<init><expr><name pos:line="104" pos:column="12">i<pos:position pos:line="104" pos:column="13"/></name> <operator pos:line="104" pos:column="14">=<pos:position pos:line="104" pos:column="15"/></operator> <literal type="number" pos:line="104" pos:column="16">0<pos:position pos:line="104" pos:column="17"/></literal></expr>;<pos:position pos:line="104" pos:column="18"/></init> <condition><expr><name pos:line="104" pos:column="19">i<pos:position pos:line="104" pos:column="20"/></name> <operator pos:line="104" pos:column="21">&lt;<pos:position pos:line="104" pos:column="25"/></operator> <name><name pos:line="104" pos:column="23">cset<pos:position pos:line="104" pos:column="27"/></name><operator pos:line="104" pos:column="27">-&gt;<pos:position pos:line="104" pos:column="32"/></operator><name pos:line="104" pos:column="29">nchar_classes<pos:position pos:line="104" pos:column="42"/></name></name></expr>;<pos:position pos:line="104" pos:column="43"/></condition> <incr><expr><operator pos:line="104" pos:column="44">++<pos:position pos:line="104" pos:column="46"/></operator><name pos:line="104" pos:column="46">i<pos:position pos:line="104" pos:column="47"/></name></expr></incr>)<pos:position pos:line="104" pos:column="48"/></control>
	<block pos:line="105" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="106" pos:column="11">wctype_t<pos:position pos:line="106" pos:column="19"/></name></type> <name pos:line="106" pos:column="20">wt<pos:position pos:line="106" pos:column="22"/></name> <init pos:line="106" pos:column="23">= <expr><name><name pos:line="106" pos:column="25">cset<pos:position pos:line="106" pos:column="29"/></name><operator pos:line="106" pos:column="29">-&gt;<pos:position pos:line="106" pos:column="34"/></operator><name pos:line="106" pos:column="31">char_classes<pos:position pos:line="106" pos:column="43"/></name><index pos:line="106" pos:column="43">[<expr><name pos:line="106" pos:column="44">i<pos:position pos:line="106" pos:column="45"/></name></expr>]<pos:position pos:line="106" pos:column="46"/></index></name></expr></init></decl>;<pos:position pos:line="106" pos:column="47"/></decl_stmt>
	  <if pos:line="107" pos:column="11">if <condition pos:line="107" pos:column="14">(<expr><call><name pos:line="107" pos:column="15">__iswctype<pos:position pos:line="107" pos:column="25"/></name> <argument_list pos:line="107" pos:column="26">(<argument><expr><name pos:line="107" pos:column="27">wc<pos:position pos:line="107" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="31">wt<pos:position pos:line="107" pos:column="33"/></name></expr></argument>)<pos:position pos:line="107" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="107" pos:column="35"/></condition><then pos:line="107" pos:column="35">
	    <block pos:line="108" pos:column="13">{
	      <expr_stmt><expr><name pos:line="109" pos:column="15">match_len<pos:position pos:line="109" pos:column="24"/></name> <operator pos:line="109" pos:column="25">=<pos:position pos:line="109" pos:column="26"/></operator> <name pos:line="109" pos:column="27">char_len<pos:position pos:line="109" pos:column="35"/></name></expr>;<pos:position pos:line="109" pos:column="36"/></expr_stmt>
	      <goto pos:line="110" pos:column="15">goto <name pos:line="110" pos:column="20">check_node_accept_bytes_match<pos:position pos:line="110" pos:column="49"/></name>;<pos:position pos:line="110" pos:column="50"/></goto>
	    }<pos:position pos:line="111" pos:column="14"/></block></then></if>
	}<pos:position pos:line="112" pos:column="10"/></block></for>

<cpp:ifdef pos:line="114" pos:column="1"># <cpp:directive pos:line="114" pos:column="3">ifdef<pos:position pos:line="114" pos:column="8"/></cpp:directive> <name pos:line="114" pos:column="9">_LIBC<pos:position pos:line="114" pos:column="14"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="115" pos:column="7">nrules<pos:position pos:line="115" pos:column="13"/></name> <operator pos:line="115" pos:column="14">=<pos:position pos:line="115" pos:column="15"/></operator> <call><name pos:line="115" pos:column="16">_NL_CURRENT_WORD<pos:position pos:line="115" pos:column="32"/></name> <argument_list pos:line="115" pos:column="33">(<argument><expr><name pos:line="115" pos:column="34">LC_COLLATE<pos:position pos:line="115" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="46">_NL_COLLATE_NRULES<pos:position pos:line="115" pos:column="64"/></name></expr></argument>)<pos:position pos:line="115" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="66"/></expr_stmt>
      <if pos:line="116" pos:column="7">if <condition pos:line="116" pos:column="10">(<expr><name pos:line="116" pos:column="11">nrules<pos:position pos:line="116" pos:column="17"/></name> <operator pos:line="116" pos:column="18">!=<pos:position pos:line="116" pos:column="20"/></operator> <literal type="number" pos:line="116" pos:column="21">0<pos:position pos:line="116" pos:column="22"/></literal></expr>)<pos:position pos:line="116" pos:column="23"/></condition><then pos:line="116" pos:column="23">
	<block pos:line="117" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="118" pos:column="11">unsigned<pos:position pos:line="118" pos:column="19"/></name> <name pos:line="118" pos:column="20">int<pos:position pos:line="118" pos:column="23"/></name></type> <name pos:line="118" pos:column="24">in_collseq<pos:position pos:line="118" pos:column="34"/></name> <init pos:line="118" pos:column="35">= <expr><literal type="number" pos:line="118" pos:column="37">0<pos:position pos:line="118" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="118" pos:column="39"/></decl_stmt>
	  <decl_stmt><decl><type><specifier pos:line="119" pos:column="11">const<pos:position pos:line="119" pos:column="16"/></specifier> <name pos:line="119" pos:column="17">int32_t<pos:position pos:line="119" pos:column="24"/></name> <modifier pos:line="119" pos:column="25">*<pos:position pos:line="119" pos:column="26"/></modifier></type><name pos:line="119" pos:column="26">table<pos:position pos:line="119" pos:column="31"/></name></decl>, <modifier pos:line="119" pos:column="33">*<pos:position pos:line="119" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="119" pos:column="34">indirect<pos:position pos:line="119" pos:column="42"/></name></decl>;<pos:position pos:line="119" pos:column="43"/></decl_stmt>
	  <decl_stmt><decl><type><specifier pos:line="120" pos:column="11">const<pos:position pos:line="120" pos:column="16"/></specifier> <name pos:line="120" pos:column="17">unsigned<pos:position pos:line="120" pos:column="25"/></name> <name pos:line="120" pos:column="26">char<pos:position pos:line="120" pos:column="30"/></name> <modifier pos:line="120" pos:column="31">*<pos:position pos:line="120" pos:column="32"/></modifier></type><name pos:line="120" pos:column="32">weights<pos:position pos:line="120" pos:column="39"/></name></decl>, <modifier pos:line="120" pos:column="41">*<pos:position pos:line="120" pos:column="42"/></modifier><decl><type ref="prev"/><name pos:line="120" pos:column="42">extra<pos:position pos:line="120" pos:column="47"/></name></decl>;<pos:position pos:line="120" pos:column="48"/></decl_stmt>
	  <decl_stmt><decl><type><specifier pos:line="121" pos:column="11">const<pos:position pos:line="121" pos:column="16"/></specifier> <name pos:line="121" pos:column="17">char<pos:position pos:line="121" pos:column="21"/></name> <modifier pos:line="121" pos:column="22">*<pos:position pos:line="121" pos:column="23"/></modifier></type><name pos:line="121" pos:column="23">collseqwc<pos:position pos:line="121" pos:column="32"/></name></decl>;<pos:position pos:line="121" pos:column="33"/></decl_stmt>
	  <comment type="block" pos:line="122" pos:column="11">/* This #include defines a local function!  */</comment>
<cpp:include pos:line="123" pos:column="1">#  <cpp:directive pos:line="123" pos:column="4">include<pos:position pos:line="123" pos:column="11"/></cpp:directive> <cpp:file pos:line="123" pos:column="12">&lt;locale/weight.h&gt;<pos:position pos:line="123" pos:column="32"/></cpp:file></cpp:include>

	  <comment type="block" pos:line="125" pos:column="11">/* match with collating_symbol?  */</comment>
	  <if pos:line="126" pos:column="11">if <condition pos:line="126" pos:column="14">(<expr><name><name pos:line="126" pos:column="15">cset<pos:position pos:line="126" pos:column="19"/></name><operator pos:line="126" pos:column="19">-&gt;<pos:position pos:line="126" pos:column="24"/></operator><name pos:line="126" pos:column="21">ncoll_syms<pos:position pos:line="126" pos:column="31"/></name></name></expr>)<pos:position pos:line="126" pos:column="32"/></condition><then pos:line="126" pos:column="32">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="127" pos:column="13">extra<pos:position pos:line="127" pos:column="18"/></name> <operator pos:line="127" pos:column="19">=<pos:position pos:line="127" pos:column="20"/></operator> <operator pos:line="127" pos:column="21">(<pos:position pos:line="127" pos:column="22"/></operator><specifier pos:line="127" pos:column="22">const<pos:position pos:line="127" pos:column="27"/></specifier> <name pos:line="127" pos:column="28">unsigned<pos:position pos:line="127" pos:column="36"/></name> <name pos:line="127" pos:column="37">char<pos:position pos:line="127" pos:column="41"/></name> <operator pos:line="127" pos:column="42">*<pos:position pos:line="127" pos:column="43"/></operator><operator pos:line="127" pos:column="43">)<pos:position pos:line="127" pos:column="44"/></operator>
	      <call><name pos:line="128" pos:column="15">_NL_CURRENT<pos:position pos:line="128" pos:column="26"/></name> <argument_list pos:line="128" pos:column="27">(<argument><expr><name pos:line="128" pos:column="28">LC_COLLATE<pos:position pos:line="128" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="40">_NL_COLLATE_SYMB_EXTRAMB<pos:position pos:line="128" pos:column="64"/></name></expr></argument>)<pos:position pos:line="128" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="66"/></expr_stmt></block></then></if>
	  <for pos:line="129" pos:column="11">for <control pos:line="129" pos:column="15">(<init><expr><name pos:line="129" pos:column="16">i<pos:position pos:line="129" pos:column="17"/></name> <operator pos:line="129" pos:column="18">=<pos:position pos:line="129" pos:column="19"/></operator> <literal type="number" pos:line="129" pos:column="20">0<pos:position pos:line="129" pos:column="21"/></literal></expr>;<pos:position pos:line="129" pos:column="22"/></init> <condition><expr><name pos:line="129" pos:column="23">i<pos:position pos:line="129" pos:column="24"/></name> <operator pos:line="129" pos:column="25">&lt;<pos:position pos:line="129" pos:column="29"/></operator> <name><name pos:line="129" pos:column="27">cset<pos:position pos:line="129" pos:column="31"/></name><operator pos:line="129" pos:column="31">-&gt;<pos:position pos:line="129" pos:column="36"/></operator><name pos:line="129" pos:column="33">ncoll_syms<pos:position pos:line="129" pos:column="43"/></name></name></expr>;<pos:position pos:line="129" pos:column="44"/></condition> <incr><expr><operator pos:line="129" pos:column="45">++<pos:position pos:line="129" pos:column="47"/></operator><name pos:line="129" pos:column="47">i<pos:position pos:line="129" pos:column="48"/></name></expr></incr>)<pos:position pos:line="129" pos:column="49"/></control>
	    <block pos:line="130" pos:column="13">{
	      <decl_stmt><decl><type><specifier pos:line="131" pos:column="15">const<pos:position pos:line="131" pos:column="20"/></specifier> <name pos:line="131" pos:column="21">unsigned<pos:position pos:line="131" pos:column="29"/></name> <name pos:line="131" pos:column="30">char<pos:position pos:line="131" pos:column="34"/></name> <modifier pos:line="131" pos:column="35">*<pos:position pos:line="131" pos:column="36"/></modifier></type><name pos:line="131" pos:column="36">coll_sym<pos:position pos:line="131" pos:column="44"/></name> <init pos:line="131" pos:column="45">= <expr><name pos:line="131" pos:column="47">extra<pos:position pos:line="131" pos:column="52"/></name> <operator pos:line="131" pos:column="53">+<pos:position pos:line="131" pos:column="54"/></operator> <name><name pos:line="131" pos:column="55">cset<pos:position pos:line="131" pos:column="59"/></name><operator pos:line="131" pos:column="59">-&gt;<pos:position pos:line="131" pos:column="64"/></operator><name pos:line="131" pos:column="61">coll_syms<pos:position pos:line="131" pos:column="70"/></name><index pos:line="131" pos:column="70">[<expr><name pos:line="131" pos:column="71">i<pos:position pos:line="131" pos:column="72"/></name></expr>]<pos:position pos:line="131" pos:column="73"/></index></name></expr></init></decl>;<pos:position pos:line="131" pos:column="74"/></decl_stmt>
	      <comment type="block" pos:line="132" pos:column="15">/* Compare the length of input collating element and
		 the length of current collating element.  */</comment>
	      <if pos:line="134" pos:column="15">if <condition pos:line="134" pos:column="18">(<expr><operator pos:line="134" pos:column="19">*<pos:position pos:line="134" pos:column="20"/></operator><name pos:line="134" pos:column="20">coll_sym<pos:position pos:line="134" pos:column="28"/></name> <operator pos:line="134" pos:column="29">!=<pos:position pos:line="134" pos:column="31"/></operator> <name pos:line="134" pos:column="32">elem_len<pos:position pos:line="134" pos:column="40"/></name></expr>)<pos:position pos:line="134" pos:column="41"/></condition><then pos:line="134" pos:column="41">
		<block type="pseudo"><continue pos:line="135" pos:column="17">continue;<pos:position pos:line="135" pos:column="26"/></continue></block></then></if>
	      <comment type="block" pos:line="136" pos:column="15">/* Compare each bytes.  */</comment>
	      <for pos:line="137" pos:column="15">for <control pos:line="137" pos:column="19">(<init><expr><name pos:line="137" pos:column="20">j<pos:position pos:line="137" pos:column="21"/></name> <operator pos:line="137" pos:column="22">=<pos:position pos:line="137" pos:column="23"/></operator> <literal type="number" pos:line="137" pos:column="24">0<pos:position pos:line="137" pos:column="25"/></literal></expr>;<pos:position pos:line="137" pos:column="26"/></init> <condition><expr><name pos:line="137" pos:column="27">j<pos:position pos:line="137" pos:column="28"/></name> <operator pos:line="137" pos:column="29">&lt;<pos:position pos:line="137" pos:column="33"/></operator> <operator pos:line="137" pos:column="31">*<pos:position pos:line="137" pos:column="32"/></operator><name pos:line="137" pos:column="32">coll_sym<pos:position pos:line="137" pos:column="40"/></name></expr>;<pos:position pos:line="137" pos:column="41"/></condition> <incr><expr><name pos:line="137" pos:column="42">j<pos:position pos:line="137" pos:column="43"/></name><operator pos:line="137" pos:column="43">++<pos:position pos:line="137" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="137" pos:column="46"/></control>
		<block type="pseudo"><if pos:line="138" pos:column="17">if <condition pos:line="138" pos:column="20">(<expr><name><name pos:line="138" pos:column="21">pin<pos:position pos:line="138" pos:column="24"/></name><index pos:line="138" pos:column="24">[<expr><name pos:line="138" pos:column="25">j<pos:position pos:line="138" pos:column="26"/></name></expr>]<pos:position pos:line="138" pos:column="27"/></index></name> <operator pos:line="138" pos:column="28">!=<pos:position pos:line="138" pos:column="30"/></operator> <name><name pos:line="138" pos:column="31">coll_sym<pos:position pos:line="138" pos:column="39"/></name><index pos:line="138" pos:column="39">[<expr><literal type="number" pos:line="138" pos:column="40">1<pos:position pos:line="138" pos:column="41"/></literal> <operator pos:line="138" pos:column="42">+<pos:position pos:line="138" pos:column="43"/></operator> <name pos:line="138" pos:column="44">j<pos:position pos:line="138" pos:column="45"/></name></expr>]<pos:position pos:line="138" pos:column="46"/></index></name></expr>)<pos:position pos:line="138" pos:column="47"/></condition><then pos:line="138" pos:column="47">
		  <block type="pseudo"><break pos:line="139" pos:column="19">break;<pos:position pos:line="139" pos:column="25"/></break></block></then></if></block></for>
	      <if pos:line="140" pos:column="15">if <condition pos:line="140" pos:column="18">(<expr><name pos:line="140" pos:column="19">j<pos:position pos:line="140" pos:column="20"/></name> <operator pos:line="140" pos:column="21">==<pos:position pos:line="140" pos:column="23"/></operator> <operator pos:line="140" pos:column="24">*<pos:position pos:line="140" pos:column="25"/></operator><name pos:line="140" pos:column="25">coll_sym<pos:position pos:line="140" pos:column="33"/></name></expr>)<pos:position pos:line="140" pos:column="34"/></condition><then pos:line="140" pos:column="34">
		<block pos:line="141" pos:column="17">{
		  <comment type="block" pos:line="142" pos:column="19">/* Match if every bytes is equal.  */</comment>
		  <expr_stmt><expr><name pos:line="143" pos:column="19">match_len<pos:position pos:line="143" pos:column="28"/></name> <operator pos:line="143" pos:column="29">=<pos:position pos:line="143" pos:column="30"/></operator> <name pos:line="143" pos:column="31">j<pos:position pos:line="143" pos:column="32"/></name></expr>;<pos:position pos:line="143" pos:column="33"/></expr_stmt>
		  <goto pos:line="144" pos:column="19">goto <name pos:line="144" pos:column="24">check_node_accept_bytes_match<pos:position pos:line="144" pos:column="53"/></name>;<pos:position pos:line="144" pos:column="54"/></goto>
		}<pos:position pos:line="145" pos:column="18"/></block></then></if>
	    }<pos:position pos:line="146" pos:column="14"/></block></for>

	  <if pos:line="148" pos:column="11">if <condition pos:line="148" pos:column="14">(<expr><name><name pos:line="148" pos:column="15">cset<pos:position pos:line="148" pos:column="19"/></name><operator pos:line="148" pos:column="19">-&gt;<pos:position pos:line="148" pos:column="24"/></operator><name pos:line="148" pos:column="21">nranges<pos:position pos:line="148" pos:column="28"/></name></name></expr>)<pos:position pos:line="148" pos:column="29"/></condition><then pos:line="148" pos:column="29">
	    <block pos:line="149" pos:column="13">{
	      <if pos:line="150" pos:column="15">if <condition pos:line="150" pos:column="18">(<expr><name pos:line="150" pos:column="19">elem_len<pos:position pos:line="150" pos:column="27"/></name> <operator pos:line="150" pos:column="28">&lt;=<pos:position pos:line="150" pos:column="33"/></operator> <name pos:line="150" pos:column="31">char_len<pos:position pos:line="150" pos:column="39"/></name></expr>)<pos:position pos:line="150" pos:column="40"/></condition><then pos:line="150" pos:column="40">
		<block pos:line="151" pos:column="17">{
		  <expr_stmt><expr><name pos:line="152" pos:column="19">collseqwc<pos:position pos:line="152" pos:column="28"/></name> <operator pos:line="152" pos:column="29">=<pos:position pos:line="152" pos:column="30"/></operator> <call><name pos:line="152" pos:column="31">_NL_CURRENT<pos:position pos:line="152" pos:column="42"/></name> <argument_list pos:line="152" pos:column="43">(<argument><expr><name pos:line="152" pos:column="44">LC_COLLATE<pos:position pos:line="152" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="56">_NL_COLLATE_COLLSEQWC<pos:position pos:line="152" pos:column="77"/></name></expr></argument>)<pos:position pos:line="152" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="79"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="153" pos:column="19">in_collseq<pos:position pos:line="153" pos:column="29"/></name> <operator pos:line="153" pos:column="30">=<pos:position pos:line="153" pos:column="31"/></operator> <call><name pos:line="153" pos:column="32">__collseq_table_lookup<pos:position pos:line="153" pos:column="54"/></name> <argument_list pos:line="153" pos:column="55">(<argument><expr><name pos:line="153" pos:column="56">collseqwc<pos:position pos:line="153" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="67">wc<pos:position pos:line="153" pos:column="69"/></name></expr></argument>)<pos:position pos:line="153" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="71"/></expr_stmt>
		}<pos:position pos:line="154" pos:column="18"/></block></then>
	      <else pos:line="155" pos:column="15">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="156" pos:column="17">in_collseq<pos:position pos:line="156" pos:column="27"/></name> <operator pos:line="156" pos:column="28">=<pos:position pos:line="156" pos:column="29"/></operator> <call><name pos:line="156" pos:column="30">find_collation_sequence_value<pos:position pos:line="156" pos:column="59"/></name> <argument_list pos:line="156" pos:column="60">(<argument><expr><name pos:line="156" pos:column="61">pin<pos:position pos:line="156" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="66">elem_len<pos:position pos:line="156" pos:column="74"/></name></expr></argument>)<pos:position pos:line="156" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="76"/></expr_stmt></block></else></if>
	    }<pos:position pos:line="157" pos:column="14"/></block></then></if>
	  <comment type="block" pos:line="158" pos:column="11">/* match with range expression?  */</comment>
	  <for pos:line="159" pos:column="11">for <control pos:line="159" pos:column="15">(<init><expr><name pos:line="159" pos:column="16">i<pos:position pos:line="159" pos:column="17"/></name> <operator pos:line="159" pos:column="18">=<pos:position pos:line="159" pos:column="19"/></operator> <literal type="number" pos:line="159" pos:column="20">0<pos:position pos:line="159" pos:column="21"/></literal></expr>;<pos:position pos:line="159" pos:column="22"/></init> <condition><expr><name pos:line="159" pos:column="23">i<pos:position pos:line="159" pos:column="24"/></name> <operator pos:line="159" pos:column="25">&lt;<pos:position pos:line="159" pos:column="29"/></operator> <name><name pos:line="159" pos:column="27">cset<pos:position pos:line="159" pos:column="31"/></name><operator pos:line="159" pos:column="31">-&gt;<pos:position pos:line="159" pos:column="36"/></operator><name pos:line="159" pos:column="33">nranges<pos:position pos:line="159" pos:column="40"/></name></name></expr>;<pos:position pos:line="159" pos:column="41"/></condition> <incr><expr><operator pos:line="159" pos:column="42">++<pos:position pos:line="159" pos:column="44"/></operator><name pos:line="159" pos:column="44">i<pos:position pos:line="159" pos:column="45"/></name></expr></incr>)<pos:position pos:line="159" pos:column="46"/></control>
	    <block type="pseudo"><if pos:line="160" pos:column="13">if <condition pos:line="160" pos:column="16">(<expr><name><name pos:line="160" pos:column="17">cset<pos:position pos:line="160" pos:column="21"/></name><operator pos:line="160" pos:column="21">-&gt;<pos:position pos:line="160" pos:column="26"/></operator><name pos:line="160" pos:column="23">range_starts<pos:position pos:line="160" pos:column="35"/></name><index pos:line="160" pos:column="35">[<expr><name pos:line="160" pos:column="36">i<pos:position pos:line="160" pos:column="37"/></name></expr>]<pos:position pos:line="160" pos:column="38"/></index></name> <operator pos:line="160" pos:column="39">&lt;=<pos:position pos:line="160" pos:column="44"/></operator> <name pos:line="160" pos:column="42">in_collseq<pos:position pos:line="160" pos:column="52"/></name>
		<operator pos:line="161" pos:column="17">&amp;&amp;<pos:position pos:line="161" pos:column="27"/></operator> <name pos:line="161" pos:column="20">in_collseq<pos:position pos:line="161" pos:column="30"/></name> <operator pos:line="161" pos:column="31">&lt;=<pos:position pos:line="161" pos:column="36"/></operator> <name><name pos:line="161" pos:column="34">cset<pos:position pos:line="161" pos:column="38"/></name><operator pos:line="161" pos:column="38">-&gt;<pos:position pos:line="161" pos:column="43"/></operator><name pos:line="161" pos:column="40">range_ends<pos:position pos:line="161" pos:column="50"/></name><index pos:line="161" pos:column="50">[<expr><name pos:line="161" pos:column="51">i<pos:position pos:line="161" pos:column="52"/></name></expr>]<pos:position pos:line="161" pos:column="53"/></index></name></expr>)<pos:position pos:line="161" pos:column="54"/></condition><then pos:line="161" pos:column="54">
	      <block pos:line="162" pos:column="15">{
		<expr_stmt><expr><name pos:line="163" pos:column="17">match_len<pos:position pos:line="163" pos:column="26"/></name> <operator pos:line="163" pos:column="27">=<pos:position pos:line="163" pos:column="28"/></operator> <name pos:line="163" pos:column="29">elem_len<pos:position pos:line="163" pos:column="37"/></name></expr>;<pos:position pos:line="163" pos:column="38"/></expr_stmt>
		<goto pos:line="164" pos:column="17">goto <name pos:line="164" pos:column="22">check_node_accept_bytes_match<pos:position pos:line="164" pos:column="51"/></name>;<pos:position pos:line="164" pos:column="52"/></goto>
	      }<pos:position pos:line="165" pos:column="16"/></block></then></if></block></for>

	  <comment type="block" pos:line="167" pos:column="11">/* match with equivalence_class?  */</comment>
	  <if pos:line="168" pos:column="11">if <condition pos:line="168" pos:column="14">(<expr><name><name pos:line="168" pos:column="15">cset<pos:position pos:line="168" pos:column="19"/></name><operator pos:line="168" pos:column="19">-&gt;<pos:position pos:line="168" pos:column="24"/></operator><name pos:line="168" pos:column="21">nequiv_classes<pos:position pos:line="168" pos:column="35"/></name></name></expr>)<pos:position pos:line="168" pos:column="36"/></condition><then pos:line="168" pos:column="36">
	    <block pos:line="169" pos:column="13">{
	      <decl_stmt><decl><type><specifier pos:line="170" pos:column="15">const<pos:position pos:line="170" pos:column="20"/></specifier> <name pos:line="170" pos:column="21">unsigned<pos:position pos:line="170" pos:column="29"/></name> <name pos:line="170" pos:column="30">char<pos:position pos:line="170" pos:column="34"/></name> <modifier pos:line="170" pos:column="35">*<pos:position pos:line="170" pos:column="36"/></modifier></type><name pos:line="170" pos:column="36">cp<pos:position pos:line="170" pos:column="38"/></name> <init pos:line="170" pos:column="39">= <expr><name pos:line="170" pos:column="41">pin<pos:position pos:line="170" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="170" pos:column="45"/></decl_stmt>
	      <expr_stmt><expr><name pos:line="171" pos:column="15">table<pos:position pos:line="171" pos:column="20"/></name> <operator pos:line="171" pos:column="21">=<pos:position pos:line="171" pos:column="22"/></operator> <operator pos:line="171" pos:column="23">(<pos:position pos:line="171" pos:column="24"/></operator><specifier pos:line="171" pos:column="24">const<pos:position pos:line="171" pos:column="29"/></specifier> <name pos:line="171" pos:column="30">int32_t<pos:position pos:line="171" pos:column="37"/></name> <operator pos:line="171" pos:column="38">*<pos:position pos:line="171" pos:column="39"/></operator><operator pos:line="171" pos:column="39">)<pos:position pos:line="171" pos:column="40"/></operator>
		<call><name pos:line="172" pos:column="17">_NL_CURRENT<pos:position pos:line="172" pos:column="28"/></name> <argument_list pos:line="172" pos:column="29">(<argument><expr><name pos:line="172" pos:column="30">LC_COLLATE<pos:position pos:line="172" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="42">_NL_COLLATE_TABLEMB<pos:position pos:line="172" pos:column="61"/></name></expr></argument>)<pos:position pos:line="172" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="63"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="173" pos:column="15">weights<pos:position pos:line="173" pos:column="22"/></name> <operator pos:line="173" pos:column="23">=<pos:position pos:line="173" pos:column="24"/></operator> <operator pos:line="173" pos:column="25">(<pos:position pos:line="173" pos:column="26"/></operator><specifier pos:line="173" pos:column="26">const<pos:position pos:line="173" pos:column="31"/></specifier> <name pos:line="173" pos:column="32">unsigned<pos:position pos:line="173" pos:column="40"/></name> <name pos:line="173" pos:column="41">char<pos:position pos:line="173" pos:column="45"/></name> <operator pos:line="173" pos:column="46">*<pos:position pos:line="173" pos:column="47"/></operator><operator pos:line="173" pos:column="47">)<pos:position pos:line="173" pos:column="48"/></operator>
		<call><name pos:line="174" pos:column="17">_NL_CURRENT<pos:position pos:line="174" pos:column="28"/></name> <argument_list pos:line="174" pos:column="29">(<argument><expr><name pos:line="174" pos:column="30">LC_COLLATE<pos:position pos:line="174" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="174" pos:column="42">_NL_COLLATE_WEIGHTMB<pos:position pos:line="174" pos:column="62"/></name></expr></argument>)<pos:position pos:line="174" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="64"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="175" pos:column="15">extra<pos:position pos:line="175" pos:column="20"/></name> <operator pos:line="175" pos:column="21">=<pos:position pos:line="175" pos:column="22"/></operator> <operator pos:line="175" pos:column="23">(<pos:position pos:line="175" pos:column="24"/></operator><specifier pos:line="175" pos:column="24">const<pos:position pos:line="175" pos:column="29"/></specifier> <name pos:line="175" pos:column="30">unsigned<pos:position pos:line="175" pos:column="38"/></name> <name pos:line="175" pos:column="39">char<pos:position pos:line="175" pos:column="43"/></name> <operator pos:line="175" pos:column="44">*<pos:position pos:line="175" pos:column="45"/></operator><operator pos:line="175" pos:column="45">)<pos:position pos:line="175" pos:column="46"/></operator>
		<call><name pos:line="176" pos:column="17">_NL_CURRENT<pos:position pos:line="176" pos:column="28"/></name> <argument_list pos:line="176" pos:column="29">(<argument><expr><name pos:line="176" pos:column="30">LC_COLLATE<pos:position pos:line="176" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="42">_NL_COLLATE_EXTRAMB<pos:position pos:line="176" pos:column="61"/></name></expr></argument>)<pos:position pos:line="176" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="63"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="177" pos:column="15">indirect<pos:position pos:line="177" pos:column="23"/></name> <operator pos:line="177" pos:column="24">=<pos:position pos:line="177" pos:column="25"/></operator> <operator pos:line="177" pos:column="26">(<pos:position pos:line="177" pos:column="27"/></operator><specifier pos:line="177" pos:column="27">const<pos:position pos:line="177" pos:column="32"/></specifier> <name pos:line="177" pos:column="33">int32_t<pos:position pos:line="177" pos:column="40"/></name> <operator pos:line="177" pos:column="41">*<pos:position pos:line="177" pos:column="42"/></operator><operator pos:line="177" pos:column="42">)<pos:position pos:line="177" pos:column="43"/></operator>
		<call><name pos:line="178" pos:column="17">_NL_CURRENT<pos:position pos:line="178" pos:column="28"/></name> <argument_list pos:line="178" pos:column="29">(<argument><expr><name pos:line="178" pos:column="30">LC_COLLATE<pos:position pos:line="178" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="42">_NL_COLLATE_INDIRECTMB<pos:position pos:line="178" pos:column="64"/></name></expr></argument>)<pos:position pos:line="178" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="66"/></expr_stmt>
	      <decl_stmt><decl><type><name pos:line="179" pos:column="15">int32_t<pos:position pos:line="179" pos:column="22"/></name></type> <name pos:line="179" pos:column="23">idx<pos:position pos:line="179" pos:column="26"/></name> <init pos:line="179" pos:column="27">= <expr><call><name pos:line="179" pos:column="29">findidx<pos:position pos:line="179" pos:column="36"/></name> <argument_list pos:line="179" pos:column="37">(<argument><expr><operator pos:line="179" pos:column="38">&amp;<pos:position pos:line="179" pos:column="43"/></operator><name pos:line="179" pos:column="39">cp<pos:position pos:line="179" pos:column="41"/></name></expr></argument>)<pos:position pos:line="179" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="179" pos:column="43"/></decl_stmt>
	      <if pos:line="180" pos:column="15">if <condition pos:line="180" pos:column="18">(<expr><name pos:line="180" pos:column="19">idx<pos:position pos:line="180" pos:column="22"/></name> <operator pos:line="180" pos:column="23">&gt;<pos:position pos:line="180" pos:column="27"/></operator> <literal type="number" pos:line="180" pos:column="25">0<pos:position pos:line="180" pos:column="26"/></literal></expr>)<pos:position pos:line="180" pos:column="27"/></condition><then pos:line="180" pos:column="27">
		<block type="pseudo"><for pos:line="181" pos:column="17">for <control pos:line="181" pos:column="21">(<init><expr><name pos:line="181" pos:column="22">i<pos:position pos:line="181" pos:column="23"/></name> <operator pos:line="181" pos:column="24">=<pos:position pos:line="181" pos:column="25"/></operator> <literal type="number" pos:line="181" pos:column="26">0<pos:position pos:line="181" pos:column="27"/></literal></expr>;<pos:position pos:line="181" pos:column="28"/></init> <condition><expr><name pos:line="181" pos:column="29">i<pos:position pos:line="181" pos:column="30"/></name> <operator pos:line="181" pos:column="31">&lt;<pos:position pos:line="181" pos:column="35"/></operator> <name><name pos:line="181" pos:column="33">cset<pos:position pos:line="181" pos:column="37"/></name><operator pos:line="181" pos:column="37">-&gt;<pos:position pos:line="181" pos:column="42"/></operator><name pos:line="181" pos:column="39">nequiv_classes<pos:position pos:line="181" pos:column="53"/></name></name></expr>;<pos:position pos:line="181" pos:column="54"/></condition> <incr><expr><operator pos:line="181" pos:column="55">++<pos:position pos:line="181" pos:column="57"/></operator><name pos:line="181" pos:column="57">i<pos:position pos:line="181" pos:column="58"/></name></expr></incr>)<pos:position pos:line="181" pos:column="59"/></control>
		  <block pos:line="182" pos:column="19">{
		    <decl_stmt><decl><type><name pos:line="183" pos:column="21">int32_t<pos:position pos:line="183" pos:column="28"/></name></type> <name pos:line="183" pos:column="29">equiv_class_idx<pos:position pos:line="183" pos:column="44"/></name> <init pos:line="183" pos:column="45">= <expr><name><name pos:line="183" pos:column="47">cset<pos:position pos:line="183" pos:column="51"/></name><operator pos:line="183" pos:column="51">-&gt;<pos:position pos:line="183" pos:column="56"/></operator><name pos:line="183" pos:column="53">equiv_classes<pos:position pos:line="183" pos:column="66"/></name><index pos:line="183" pos:column="66">[<expr><name pos:line="183" pos:column="67">i<pos:position pos:line="183" pos:column="68"/></name></expr>]<pos:position pos:line="183" pos:column="69"/></index></name></expr></init></decl>;<pos:position pos:line="183" pos:column="70"/></decl_stmt>
		    <decl_stmt><decl><type><name pos:line="184" pos:column="21">size_t<pos:position pos:line="184" pos:column="27"/></name></type> <name pos:line="184" pos:column="28">weight_len<pos:position pos:line="184" pos:column="38"/></name> <init pos:line="184" pos:column="39">= <expr><name><name pos:line="184" pos:column="41">weights<pos:position pos:line="184" pos:column="48"/></name><index pos:line="184" pos:column="48">[<expr><name pos:line="184" pos:column="49">idx<pos:position pos:line="184" pos:column="52"/></name> <operator pos:line="184" pos:column="53">&amp;<pos:position pos:line="184" pos:column="58"/></operator> <literal type="number" pos:line="184" pos:column="55">0xffffff<pos:position pos:line="184" pos:column="63"/></literal></expr>]<pos:position pos:line="184" pos:column="64"/></index></name></expr></init></decl>;<pos:position pos:line="184" pos:column="65"/></decl_stmt>
		    <if pos:line="185" pos:column="21">if <condition pos:line="185" pos:column="24">(<expr><name pos:line="185" pos:column="25">weight_len<pos:position pos:line="185" pos:column="35"/></name> <operator pos:line="185" pos:column="36">==<pos:position pos:line="185" pos:column="38"/></operator> <name><name pos:line="185" pos:column="39">weights<pos:position pos:line="185" pos:column="46"/></name><index pos:line="185" pos:column="46">[<expr><name pos:line="185" pos:column="47">equiv_class_idx<pos:position pos:line="185" pos:column="62"/></name> <operator pos:line="185" pos:column="63">&amp;<pos:position pos:line="185" pos:column="68"/></operator> <literal type="number" pos:line="185" pos:column="65">0xffffff<pos:position pos:line="185" pos:column="73"/></literal></expr>]<pos:position pos:line="185" pos:column="74"/></index></name>
			<operator pos:line="186" pos:column="25">&amp;&amp;<pos:position pos:line="186" pos:column="35"/></operator> <operator pos:line="186" pos:column="28">(<pos:position pos:line="186" pos:column="29"/></operator><name pos:line="186" pos:column="29">idx<pos:position pos:line="186" pos:column="32"/></name> <operator pos:line="186" pos:column="33">&gt;&gt;<pos:position pos:line="186" pos:column="38"/></operator> <literal type="number" pos:line="186" pos:column="36">24<pos:position pos:line="186" pos:column="38"/></literal><operator pos:line="186" pos:column="38">)<pos:position pos:line="186" pos:column="39"/></operator> <operator pos:line="186" pos:column="40">==<pos:position pos:line="186" pos:column="42"/></operator> <operator pos:line="186" pos:column="43">(<pos:position pos:line="186" pos:column="44"/></operator><name pos:line="186" pos:column="44">equiv_class_idx<pos:position pos:line="186" pos:column="59"/></name> <operator pos:line="186" pos:column="60">&gt;&gt;<pos:position pos:line="186" pos:column="65"/></operator> <literal type="number" pos:line="186" pos:column="63">24<pos:position pos:line="186" pos:column="65"/></literal><operator pos:line="186" pos:column="65">)<pos:position pos:line="186" pos:column="66"/></operator></expr>)<pos:position pos:line="186" pos:column="67"/></condition><then pos:line="186" pos:column="67">
		      <block pos:line="187" pos:column="23">{
			<decl_stmt><decl><type><name pos:line="188" pos:column="25">int<pos:position pos:line="188" pos:column="28"/></name></type> <name pos:line="188" pos:column="29">cnt<pos:position pos:line="188" pos:column="32"/></name> <init pos:line="188" pos:column="33">= <expr><literal type="number" pos:line="188" pos:column="35">0<pos:position pos:line="188" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="188" pos:column="37"/></decl_stmt>

			<expr_stmt><expr><name pos:line="190" pos:column="25">idx<pos:position pos:line="190" pos:column="28"/></name> <operator pos:line="190" pos:column="29">&amp;=<pos:position pos:line="190" pos:column="35"/></operator> <literal type="number" pos:line="190" pos:column="32">0xffffff<pos:position pos:line="190" pos:column="40"/></literal></expr>;<pos:position pos:line="190" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="191" pos:column="25">equiv_class_idx<pos:position pos:line="191" pos:column="40"/></name> <operator pos:line="191" pos:column="41">&amp;=<pos:position pos:line="191" pos:column="47"/></operator> <literal type="number" pos:line="191" pos:column="44">0xffffff<pos:position pos:line="191" pos:column="52"/></literal></expr>;<pos:position pos:line="191" pos:column="53"/></expr_stmt>

			<while pos:line="193" pos:column="25">while <condition pos:line="193" pos:column="31">(<expr><name pos:line="193" pos:column="32">cnt<pos:position pos:line="193" pos:column="35"/></name> <operator pos:line="193" pos:column="36">&lt;=<pos:position pos:line="193" pos:column="41"/></operator> <name pos:line="193" pos:column="39">weight_len<pos:position pos:line="193" pos:column="49"/></name>
			       <operator pos:line="194" pos:column="32">&amp;&amp;<pos:position pos:line="194" pos:column="42"/></operator> <operator pos:line="194" pos:column="35">(<pos:position pos:line="194" pos:column="36"/></operator><name><name pos:line="194" pos:column="36">weights<pos:position pos:line="194" pos:column="43"/></name><index pos:line="194" pos:column="43">[<expr><name pos:line="194" pos:column="44">equiv_class_idx<pos:position pos:line="194" pos:column="59"/></name> <operator pos:line="194" pos:column="60">+<pos:position pos:line="194" pos:column="61"/></operator> <literal type="number" pos:line="194" pos:column="62">1<pos:position pos:line="194" pos:column="63"/></literal> <operator pos:line="194" pos:column="64">+<pos:position pos:line="194" pos:column="65"/></operator> <name pos:line="194" pos:column="66">cnt<pos:position pos:line="194" pos:column="69"/></name></expr>]<pos:position pos:line="194" pos:column="70"/></index></name>
				   <operator pos:line="195" pos:column="36">==<pos:position pos:line="195" pos:column="38"/></operator> <name><name pos:line="195" pos:column="39">weights<pos:position pos:line="195" pos:column="46"/></name><index pos:line="195" pos:column="46">[<expr><name pos:line="195" pos:column="47">idx<pos:position pos:line="195" pos:column="50"/></name> <operator pos:line="195" pos:column="51">+<pos:position pos:line="195" pos:column="52"/></operator> <literal type="number" pos:line="195" pos:column="53">1<pos:position pos:line="195" pos:column="54"/></literal> <operator pos:line="195" pos:column="55">+<pos:position pos:line="195" pos:column="56"/></operator> <name pos:line="195" pos:column="57">cnt<pos:position pos:line="195" pos:column="60"/></name></expr>]<pos:position pos:line="195" pos:column="61"/></index></name><operator pos:line="195" pos:column="61">)<pos:position pos:line="195" pos:column="62"/></operator></expr>)<pos:position pos:line="195" pos:column="63"/></condition>
			  <block type="pseudo"><expr_stmt><expr><operator pos:line="196" pos:column="27">++<pos:position pos:line="196" pos:column="29"/></operator><name pos:line="196" pos:column="29">cnt<pos:position pos:line="196" pos:column="32"/></name></expr>;<pos:position pos:line="196" pos:column="33"/></expr_stmt></block></while>
			<if pos:line="197" pos:column="25">if <condition pos:line="197" pos:column="28">(<expr><name pos:line="197" pos:column="29">cnt<pos:position pos:line="197" pos:column="32"/></name> <operator pos:line="197" pos:column="33">&gt;<pos:position pos:line="197" pos:column="37"/></operator> <name pos:line="197" pos:column="35">weight_len<pos:position pos:line="197" pos:column="45"/></name></expr>)<pos:position pos:line="197" pos:column="46"/></condition><then pos:line="197" pos:column="46">
			  <block pos:line="198" pos:column="27">{
			    <expr_stmt><expr><name pos:line="199" pos:column="29">match_len<pos:position pos:line="199" pos:column="38"/></name> <operator pos:line="199" pos:column="39">=<pos:position pos:line="199" pos:column="40"/></operator> <name pos:line="199" pos:column="41">elem_len<pos:position pos:line="199" pos:column="49"/></name></expr>;<pos:position pos:line="199" pos:column="50"/></expr_stmt>
			    <goto pos:line="200" pos:column="29">goto <name pos:line="200" pos:column="34">check_node_accept_bytes_match<pos:position pos:line="200" pos:column="63"/></name>;<pos:position pos:line="200" pos:column="64"/></goto>
			  }<pos:position pos:line="201" pos:column="28"/></block></then></if>
		      }<pos:position pos:line="202" pos:column="24"/></block></then></if>
		  }<pos:position pos:line="203" pos:column="20"/></block></for></block></then></if>
	    }<pos:position pos:line="204" pos:column="14"/></block></then></if>
	}<pos:position pos:line="205" pos:column="10"/></block></then>
      <else pos:line="206" pos:column="7">else
<cpp:endif pos:line="207" pos:column="1"># <cpp:directive pos:line="207" pos:column="3">endif<pos:position pos:line="207" pos:column="8"/></cpp:directive></cpp:endif> <comment type="block" pos:line="207" pos:column="9">/* _LIBC */</comment>
	<block pos:line="208" pos:column="9">{
	  <comment type="block" pos:line="209" pos:column="11">/* match with range expression?  */</comment>
<cpp:if pos:line="210" pos:column="1">#<cpp:directive pos:line="210" pos:column="2">if<pos:position pos:line="210" pos:column="4"/></cpp:directive> <expr><name pos:line="210" pos:column="5">__GNUC__<pos:position pos:line="210" pos:column="13"/></name> <operator pos:line="210" pos:column="14">&gt;=<pos:position pos:line="210" pos:column="19"/></operator> <literal type="number" pos:line="210" pos:column="17">2<pos:position pos:line="210" pos:column="18"/></literal></expr></cpp:if>
	  <decl_stmt><decl><type><name pos:line="211" pos:column="11">wchar_t<pos:position pos:line="211" pos:column="18"/></name></type> <name><name pos:line="211" pos:column="19">cmp_buf<pos:position pos:line="211" pos:column="26"/></name><index pos:line="211" pos:column="26">[]<pos:position pos:line="211" pos:column="28"/></index></name> <init pos:line="211" pos:column="29">= <expr><block pos:line="211" pos:column="31">{<expr><literal type="string" pos:line="211" pos:column="32">L'<pos:position pos:line="211" pos:column="34"/></literal>\0'<pos:position pos:line="211" pos:column="37"/></expr>, <expr><literal type="string" pos:line="211" pos:column="39">L'<pos:position pos:line="211" pos:column="41"/></literal>\0'<pos:position pos:line="211" pos:column="44"/></expr>, <expr><name pos:line="211" pos:column="46">wc<pos:position pos:line="211" pos:column="48"/></name></expr>, <expr><literal type="string" pos:line="211" pos:column="50">L'<pos:position pos:line="211" pos:column="52"/></literal>\0'<pos:position pos:line="211" pos:column="55"/></expr>, <expr><literal type="string" pos:line="211" pos:column="57">L'<pos:position pos:line="211" pos:column="59"/></literal>\0'<pos:position pos:line="211" pos:column="62"/></expr>, <expr><literal type="string" pos:line="211" pos:column="64">L'<pos:position pos:line="211" pos:column="66"/></literal>\0'<pos:position pos:line="211" pos:column="69"/></expr>}<pos:position pos:line="211" pos:column="70"/></block></expr></init></decl>;<pos:position pos:line="211" pos:column="71"/></decl_stmt>
<cpp:else pos:line="212" pos:column="1">#<cpp:directive pos:line="212" pos:column="2">else<pos:position pos:line="212" pos:column="6"/></cpp:directive></cpp:else>
	  <decl_stmt><decl><type><name pos:line="213" pos:column="11">wchar_t<pos:position pos:line="213" pos:column="18"/></name></type> <name><name pos:line="213" pos:column="19">cmp_buf<pos:position pos:line="213" pos:column="26"/></name><index pos:line="213" pos:column="26">[]<pos:position pos:line="213" pos:column="28"/></index></name> <init pos:line="213" pos:column="29">= <expr><block pos:line="213" pos:column="31">{<expr><literal type="string" pos:line="213" pos:column="32">L'<pos:position pos:line="213" pos:column="34"/></literal>\0'<pos:position pos:line="213" pos:column="37"/></expr>, <expr><literal type="string" pos:line="213" pos:column="39">L'<pos:position pos:line="213" pos:column="41"/></literal>\0'<pos:position pos:line="213" pos:column="44"/></expr>, <expr><literal type="string" pos:line="213" pos:column="46">L'<pos:position pos:line="213" pos:column="48"/></literal>\0'<pos:position pos:line="213" pos:column="51"/></expr>, <expr><literal type="string" pos:line="213" pos:column="53">L'<pos:position pos:line="213" pos:column="55"/></literal>\0'<pos:position pos:line="213" pos:column="58"/></expr>, <expr><literal type="string" pos:line="213" pos:column="60">L'<pos:position pos:line="213" pos:column="62"/></literal>\0'<pos:position pos:line="213" pos:column="65"/></expr>, <expr><literal type="string" pos:line="213" pos:column="67">L'<pos:position pos:line="213" pos:column="69"/></literal>\0'<pos:position pos:line="213" pos:column="72"/></expr>}<pos:position pos:line="213" pos:column="73"/></block></expr></init></decl>;<pos:position pos:line="213" pos:column="74"/></decl_stmt>
	  <expr_stmt><expr><name><name pos:line="214" pos:column="11">cmp_buf<pos:position pos:line="214" pos:column="18"/></name><index pos:line="214" pos:column="18">[<expr><literal type="number" pos:line="214" pos:column="19">2<pos:position pos:line="214" pos:column="20"/></literal></expr>]<pos:position pos:line="214" pos:column="21"/></index></name> <operator pos:line="214" pos:column="22">=<pos:position pos:line="214" pos:column="23"/></operator> <name pos:line="214" pos:column="24">wc<pos:position pos:line="214" pos:column="26"/></name></expr>;<pos:position pos:line="214" pos:column="27"/></expr_stmt>
<cpp:endif pos:line="215" pos:column="1">#<cpp:directive pos:line="215" pos:column="2">endif<pos:position pos:line="215" pos:column="7"/></cpp:directive></cpp:endif>
	  <for pos:line="216" pos:column="11">for <control pos:line="216" pos:column="15">(<init><expr><name pos:line="216" pos:column="16">i<pos:position pos:line="216" pos:column="17"/></name> <operator pos:line="216" pos:column="18">=<pos:position pos:line="216" pos:column="19"/></operator> <literal type="number" pos:line="216" pos:column="20">0<pos:position pos:line="216" pos:column="21"/></literal></expr>;<pos:position pos:line="216" pos:column="22"/></init> <condition><expr><name pos:line="216" pos:column="23">i<pos:position pos:line="216" pos:column="24"/></name> <operator pos:line="216" pos:column="25">&lt;<pos:position pos:line="216" pos:column="29"/></operator> <name><name pos:line="216" pos:column="27">cset<pos:position pos:line="216" pos:column="31"/></name><operator pos:line="216" pos:column="31">-&gt;<pos:position pos:line="216" pos:column="36"/></operator><name pos:line="216" pos:column="33">nranges<pos:position pos:line="216" pos:column="40"/></name></name></expr>;<pos:position pos:line="216" pos:column="41"/></condition> <incr><expr><operator pos:line="216" pos:column="42">++<pos:position pos:line="216" pos:column="44"/></operator><name pos:line="216" pos:column="44">i<pos:position pos:line="216" pos:column="45"/></name></expr></incr>)<pos:position pos:line="216" pos:column="46"/></control>
	    <block pos:line="217" pos:column="13">{
	      <expr_stmt><expr><name><name pos:line="218" pos:column="15">cmp_buf<pos:position pos:line="218" pos:column="22"/></name><index pos:line="218" pos:column="22">[<expr><literal type="number" pos:line="218" pos:column="23">0<pos:position pos:line="218" pos:column="24"/></literal></expr>]<pos:position pos:line="218" pos:column="25"/></index></name> <operator pos:line="218" pos:column="26">=<pos:position pos:line="218" pos:column="27"/></operator> <name><name pos:line="218" pos:column="28">cset<pos:position pos:line="218" pos:column="32"/></name><operator pos:line="218" pos:column="32">-&gt;<pos:position pos:line="218" pos:column="37"/></operator><name pos:line="218" pos:column="34">range_starts<pos:position pos:line="218" pos:column="46"/></name><index pos:line="218" pos:column="46">[<expr><name pos:line="218" pos:column="47">i<pos:position pos:line="218" pos:column="48"/></name></expr>]<pos:position pos:line="218" pos:column="49"/></index></name></expr>;<pos:position pos:line="218" pos:column="50"/></expr_stmt>
	      <expr_stmt><expr><name><name pos:line="219" pos:column="15">cmp_buf<pos:position pos:line="219" pos:column="22"/></name><index pos:line="219" pos:column="22">[<expr><literal type="number" pos:line="219" pos:column="23">4<pos:position pos:line="219" pos:column="24"/></literal></expr>]<pos:position pos:line="219" pos:column="25"/></index></name> <operator pos:line="219" pos:column="26">=<pos:position pos:line="219" pos:column="27"/></operator> <name><name pos:line="219" pos:column="28">cset<pos:position pos:line="219" pos:column="32"/></name><operator pos:line="219" pos:column="32">-&gt;<pos:position pos:line="219" pos:column="37"/></operator><name pos:line="219" pos:column="34">range_ends<pos:position pos:line="219" pos:column="44"/></name><index pos:line="219" pos:column="44">[<expr><name pos:line="219" pos:column="45">i<pos:position pos:line="219" pos:column="46"/></name></expr>]<pos:position pos:line="219" pos:column="47"/></index></name></expr>;<pos:position pos:line="219" pos:column="48"/></expr_stmt>
	      <if pos:line="220" pos:column="15">if <condition pos:line="220" pos:column="18">(<expr><call><name pos:line="220" pos:column="19">wcscoll<pos:position pos:line="220" pos:column="26"/></name> <argument_list pos:line="220" pos:column="27">(<argument><expr><name pos:line="220" pos:column="28">cmp_buf<pos:position pos:line="220" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="220" pos:column="37">cmp_buf<pos:position pos:line="220" pos:column="44"/></name> <operator pos:line="220" pos:column="45">+<pos:position pos:line="220" pos:column="46"/></operator> <literal type="number" pos:line="220" pos:column="47">2<pos:position pos:line="220" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="220" pos:column="49"/></argument_list></call> <operator pos:line="220" pos:column="50">&lt;=<pos:position pos:line="220" pos:column="55"/></operator> <literal type="number" pos:line="220" pos:column="53">0<pos:position pos:line="220" pos:column="54"/></literal>
		  <operator pos:line="221" pos:column="19">&amp;&amp;<pos:position pos:line="221" pos:column="29"/></operator> <call><name pos:line="221" pos:column="22">wcscoll<pos:position pos:line="221" pos:column="29"/></name> <argument_list pos:line="221" pos:column="30">(<argument><expr><name pos:line="221" pos:column="31">cmp_buf<pos:position pos:line="221" pos:column="38"/></name> <operator pos:line="221" pos:column="39">+<pos:position pos:line="221" pos:column="40"/></operator> <literal type="number" pos:line="221" pos:column="41">2<pos:position pos:line="221" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="221" pos:column="44">cmp_buf<pos:position pos:line="221" pos:column="51"/></name> <operator pos:line="221" pos:column="52">+<pos:position pos:line="221" pos:column="53"/></operator> <literal type="number" pos:line="221" pos:column="54">4<pos:position pos:line="221" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="221" pos:column="56"/></argument_list></call> <operator pos:line="221" pos:column="57">&lt;=<pos:position pos:line="221" pos:column="62"/></operator> <literal type="number" pos:line="221" pos:column="60">0<pos:position pos:line="221" pos:column="61"/></literal></expr>)<pos:position pos:line="221" pos:column="62"/></condition><then pos:line="221" pos:column="62">
		<block pos:line="222" pos:column="17">{
		  <expr_stmt><expr><name pos:line="223" pos:column="19">match_len<pos:position pos:line="223" pos:column="28"/></name> <operator pos:line="223" pos:column="29">=<pos:position pos:line="223" pos:column="30"/></operator> <name pos:line="223" pos:column="31">char_len<pos:position pos:line="223" pos:column="39"/></name></expr>;<pos:position pos:line="223" pos:column="40"/></expr_stmt>
		  <goto pos:line="224" pos:column="19">goto <name pos:line="224" pos:column="24">check_node_accept_bytes_match<pos:position pos:line="224" pos:column="53"/></name>;<pos:position pos:line="224" pos:column="54"/></goto>
		}<pos:position pos:line="225" pos:column="18"/></block></then></if>
	    }<pos:position pos:line="226" pos:column="14"/></block></for>
	}<pos:position pos:line="227" pos:column="10"/></block></else></if>
    <label><name pos:line="228" pos:column="5">check_node_accept_bytes_match<pos:position pos:line="228" pos:column="34"/></name>:<pos:position pos:line="228" pos:column="35"/></label>
      <if pos:line="229" pos:column="7">if <condition pos:line="229" pos:column="10">(<expr><operator pos:line="229" pos:column="11">!<pos:position pos:line="229" pos:column="12"/></operator><name><name pos:line="229" pos:column="12">cset<pos:position pos:line="229" pos:column="16"/></name><operator pos:line="229" pos:column="16">-&gt;<pos:position pos:line="229" pos:column="21"/></operator><name pos:line="229" pos:column="18">non_match<pos:position pos:line="229" pos:column="27"/></name></name></expr>)<pos:position pos:line="229" pos:column="28"/></condition><then pos:line="229" pos:column="28">
	<block type="pseudo"><return pos:line="230" pos:column="9">return <expr><name pos:line="230" pos:column="16">match_len<pos:position pos:line="230" pos:column="25"/></name></expr>;<pos:position pos:line="230" pos:column="26"/></return></block></then>
      <else pos:line="231" pos:column="7">else
	<block pos:line="232" pos:column="9">{
	  <if pos:line="233" pos:column="11">if <condition pos:line="233" pos:column="14">(<expr><name pos:line="233" pos:column="15">match_len<pos:position pos:line="233" pos:column="24"/></name> <operator pos:line="233" pos:column="25">&gt;<pos:position pos:line="233" pos:column="29"/></operator> <literal type="number" pos:line="233" pos:column="27">0<pos:position pos:line="233" pos:column="28"/></literal></expr>)<pos:position pos:line="233" pos:column="29"/></condition><then pos:line="233" pos:column="29">
	    <block type="pseudo"><return pos:line="234" pos:column="13">return <expr><literal type="number" pos:line="234" pos:column="20">0<pos:position pos:line="234" pos:column="21"/></literal></expr>;<pos:position pos:line="234" pos:column="22"/></return></block></then>
	  <else pos:line="235" pos:column="11">else
	    <block type="pseudo"><return pos:line="236" pos:column="13">return <expr><ternary><condition><expr><operator pos:line="236" pos:column="20">(<pos:position pos:line="236" pos:column="21"/></operator><name pos:line="236" pos:column="21">elem_len<pos:position pos:line="236" pos:column="29"/></name> <operator pos:line="236" pos:column="30">&gt;<pos:position pos:line="236" pos:column="34"/></operator> <name pos:line="236" pos:column="32">char_len<pos:position pos:line="236" pos:column="40"/></name><operator pos:line="236" pos:column="40">)<pos:position pos:line="236" pos:column="41"/></operator></expr> ?<pos:position pos:line="236" pos:column="43"/></condition><then pos:line="236" pos:column="43"> <expr><name pos:line="236" pos:column="44">elem_len<pos:position pos:line="236" pos:column="52"/></name></expr> <pos:position pos:line="236" pos:column="53"/></then><else pos:line="236" pos:column="53">: <expr><name pos:line="236" pos:column="55">char_len<pos:position pos:line="236" pos:column="63"/></name></expr></else></ternary></expr>;<pos:position pos:line="236" pos:column="64"/></return></block></else></if>
	}<pos:position pos:line="237" pos:column="10"/></block></else></if>
    }<pos:position pos:line="238" pos:column="6"/></block></then></if>
  <return pos:line="239" pos:column="3">return <expr><literal type="number" pos:line="239" pos:column="10">0<pos:position pos:line="239" pos:column="11"/></literal></expr>;<pos:position pos:line="239" pos:column="12"/></return>
}<pos:position pos:line="240" pos:column="2"/></block></function></unit>
