<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_797.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_rm<pos:position pos:line="1" pos:column="11"/></name><parameter_list pos:line="1" pos:column="11">(<parameter><decl><type><name pos:line="1" pos:column="12">int<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">argc<pos:position pos:line="1" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier><modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">argv<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">prefix<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">pathspec<pos:position pos:line="4" pos:column="24"/></name></name></type> <name pos:line="4" pos:column="25">pathspec<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">seen<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">gitmodules_config<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">()<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">git_config<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">git_default_config<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">NULL<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">argc<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">=<pos:position pos:line="10" pos:column="15"/></operator> <call><name pos:line="10" pos:column="16">parse_options<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">argc<pos:position pos:line="10" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="36">argv<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="42">prefix<pos:position pos:line="10" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="50">builtin_rm_options<pos:position pos:line="10" pos:column="68"/></name></expr></argument>,
			     <argument><expr><name pos:line="11" pos:column="30">builtin_rm_usage<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="48">0<pos:position pos:line="11" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">argc<pos:position pos:line="12" pos:column="18"/></name></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">usage_with_options<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><name pos:line="13" pos:column="36">builtin_rm_usage<pos:position pos:line="13" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="54">builtin_rm_options<pos:position pos:line="13" pos:column="72"/></name></expr></argument>)<pos:position pos:line="13" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="74"/></expr_stmt></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">index_only<pos:position pos:line="15" pos:column="24"/></name></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">setup_work_tree<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">()<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">hold_locked_index<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">(<argument><expr><operator pos:line="18" pos:column="27">&amp;<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="28">lock_file<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="39">LOCK_DIE_ON_ERROR<pos:position pos:line="18" pos:column="56"/></name></expr></argument>)<pos:position pos:line="18" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="58"/></expr_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">read_cache<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">()<pos:position pos:line="20" pos:column="25"/></argument_list></call> <operator pos:line="20" pos:column="26">&lt;<pos:position pos:line="20" pos:column="30"/></operator> <literal type="number" pos:line="20" pos:column="28">0<pos:position pos:line="20" pos:column="29"/></literal></expr>)<pos:position pos:line="20" pos:column="30"/></condition><then pos:line="20" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="17">die<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><call><name pos:line="21" pos:column="21">_<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><literal type="string" pos:line="21" pos:column="23">"index file corrupt"<pos:position pos:line="21" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">parse_pathspec<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><operator pos:line="23" pos:column="24">&amp;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="25">pathspec<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="35">0<pos:position pos:line="23" pos:column="36"/></literal></expr></argument>,
		       <argument><expr><name pos:line="24" pos:column="24">PATHSPEC_PREFER_CWD<pos:position pos:line="24" pos:column="43"/></name> <operator pos:line="24" pos:column="44">|<pos:position pos:line="24" pos:column="45"/></operator>
		       <name pos:line="25" pos:column="24">PATHSPEC_STRIP_SUBMODULE_SLASH_CHEAP<pos:position pos:line="25" pos:column="60"/></name></expr></argument>,
		       <argument><expr><name pos:line="26" pos:column="24">prefix<pos:position pos:line="26" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="32">argv<pos:position pos:line="26" pos:column="36"/></name></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">refresh_index<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><operator pos:line="27" pos:column="23">&amp;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="24">the_index<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="35">REFRESH_QUIET<pos:position pos:line="27" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="50">&amp;<pos:position pos:line="27" pos:column="55"/></operator><name pos:line="27" pos:column="51">pathspec<pos:position pos:line="27" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="61">NULL<pos:position pos:line="27" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="67">NULL<pos:position pos:line="27" pos:column="71"/></name></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="73"/></expr_stmt>

	<expr_stmt><expr><name pos:line="29" pos:column="9">seen<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <call><name pos:line="29" pos:column="16">xcalloc<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><name><name pos:line="29" pos:column="24">pathspec<pos:position pos:line="29" pos:column="32"/></name><operator pos:line="29" pos:column="32">.<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="33">nr<pos:position pos:line="29" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="37">1<pos:position pos:line="29" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>

	<for pos:line="31" pos:column="9">for <control pos:line="31" pos:column="13">(<init><expr><name pos:line="31" pos:column="14">i<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <literal type="number" pos:line="31" pos:column="18">0<pos:position pos:line="31" pos:column="19"/></literal></expr>;<pos:position pos:line="31" pos:column="20"/></init> <condition><expr><name pos:line="31" pos:column="21">i<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">&lt;<pos:position pos:line="31" pos:column="27"/></operator> <name pos:line="31" pos:column="25">active_nr<pos:position pos:line="31" pos:column="34"/></name></expr>;<pos:position pos:line="31" pos:column="35"/></condition> <incr><expr><name pos:line="31" pos:column="36">i<pos:position pos:line="31" pos:column="37"/></name><operator pos:line="31" pos:column="37">++<pos:position pos:line="31" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="31" pos:column="40"/></control> <block pos:line="31" pos:column="41">{
		<decl_stmt><decl><type><specifier pos:line="32" pos:column="17">const<pos:position pos:line="32" pos:column="22"/></specifier> <name><name pos:line="32" pos:column="23">struct<pos:position pos:line="32" pos:column="29"/></name> <name pos:line="32" pos:column="30">cache_entry<pos:position pos:line="32" pos:column="41"/></name></name> <modifier pos:line="32" pos:column="42">*<pos:position pos:line="32" pos:column="43"/></modifier></type><name pos:line="32" pos:column="43">ce<pos:position pos:line="32" pos:column="45"/></name> <init pos:line="32" pos:column="46">= <expr><name><name pos:line="32" pos:column="48">active_cache<pos:position pos:line="32" pos:column="60"/></name><index pos:line="32" pos:column="60">[<expr><name pos:line="32" pos:column="61">i<pos:position pos:line="32" pos:column="62"/></name></expr>]<pos:position pos:line="32" pos:column="63"/></index></name></expr></init></decl>;<pos:position pos:line="32" pos:column="64"/></decl_stmt>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><operator pos:line="33" pos:column="21">!<pos:position pos:line="33" pos:column="22"/></operator><call><name pos:line="33" pos:column="22">ce_path_match<pos:position pos:line="33" pos:column="35"/></name><argument_list pos:line="33" pos:column="35">(<argument><expr><name pos:line="33" pos:column="36">ce<pos:position pos:line="33" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="40">&amp;<pos:position pos:line="33" pos:column="45"/></operator><name pos:line="33" pos:column="41">pathspec<pos:position pos:line="33" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="51">seen<pos:position pos:line="33" pos:column="55"/></name></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="57"/></condition><then pos:line="33" pos:column="57">
			<block type="pseudo"><continue pos:line="34" pos:column="25">continue;<pos:position pos:line="34" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">ALLOC_GROW<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name><name pos:line="35" pos:column="28">list<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">.<pos:position pos:line="35" pos:column="33"/></operator><name pos:line="35" pos:column="33">entry<pos:position pos:line="35" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="40">list<pos:position pos:line="35" pos:column="44"/></name><operator pos:line="35" pos:column="44">.<pos:position pos:line="35" pos:column="45"/></operator><name pos:line="35" pos:column="45">nr<pos:position pos:line="35" pos:column="47"/></name></name> <operator pos:line="35" pos:column="48">+<pos:position pos:line="35" pos:column="49"/></operator> <literal type="number" pos:line="35" pos:column="50">1<pos:position pos:line="35" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="53">list<pos:position pos:line="35" pos:column="57"/></name><operator pos:line="35" pos:column="57">.<pos:position pos:line="35" pos:column="58"/></operator><name pos:line="35" pos:column="58">alloc<pos:position pos:line="35" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="36" pos:column="17">list<pos:position pos:line="36" pos:column="21"/></name><operator pos:line="36" pos:column="21">.<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="22">entry<pos:position pos:line="36" pos:column="27"/></name><index pos:line="36" pos:column="27">[<expr><name><name pos:line="36" pos:column="28">list<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">.<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="33">nr<pos:position pos:line="36" pos:column="35"/></name></name></expr>]<pos:position pos:line="36" pos:column="36"/></index></name><operator pos:line="36" pos:column="36">.<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="37">name<pos:position pos:line="36" pos:column="41"/></name> <operator pos:line="36" pos:column="42">=<pos:position pos:line="36" pos:column="43"/></operator> <call><name pos:line="36" pos:column="44">xstrdup<pos:position pos:line="36" pos:column="51"/></name><argument_list pos:line="36" pos:column="51">(<argument><expr><name><name pos:line="36" pos:column="52">ce<pos:position pos:line="36" pos:column="54"/></name><operator pos:line="36" pos:column="54">-&gt;<pos:position pos:line="36" pos:column="59"/></operator><name pos:line="36" pos:column="56">name<pos:position pos:line="36" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="37" pos:column="17">list<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">.<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">entry<pos:position pos:line="37" pos:column="27"/></name><index pos:line="37" pos:column="27">[<expr><name><name pos:line="37" pos:column="28">list<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">.<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="33">nr<pos:position pos:line="37" pos:column="35"/></name></name></expr>]<pos:position pos:line="37" pos:column="36"/></index></name><operator pos:line="37" pos:column="36">.<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="37">is_submodule<pos:position pos:line="37" pos:column="49"/></name> <operator pos:line="37" pos:column="50">=<pos:position pos:line="37" pos:column="51"/></operator> <call><name pos:line="37" pos:column="52">S_ISGITLINK<pos:position pos:line="37" pos:column="63"/></name><argument_list pos:line="37" pos:column="63">(<argument><expr><name><name pos:line="37" pos:column="64">ce<pos:position pos:line="37" pos:column="66"/></name><operator pos:line="37" pos:column="66">-&gt;<pos:position pos:line="37" pos:column="71"/></operator><name pos:line="37" pos:column="68">ce_mode<pos:position pos:line="37" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="77"/></expr_stmt>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name><name pos:line="38" pos:column="21">list<pos:position pos:line="38" pos:column="25"/></name><operator pos:line="38" pos:column="25">.<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="26">entry<pos:position pos:line="38" pos:column="31"/></name><index pos:line="38" pos:column="31">[<expr><name><name pos:line="38" pos:column="32">list<pos:position pos:line="38" pos:column="36"/></name><operator pos:line="38" pos:column="36">.<pos:position pos:line="38" pos:column="37"/></operator><name pos:line="38" pos:column="37">nr<pos:position pos:line="38" pos:column="39"/></name></name><operator pos:line="38" pos:column="39">++<pos:position pos:line="38" pos:column="41"/></operator></expr>]<pos:position pos:line="38" pos:column="42"/></index></name><operator pos:line="38" pos:column="42">.<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="43">is_submodule<pos:position pos:line="38" pos:column="55"/></name> <operator pos:line="38" pos:column="56">&amp;&amp;<pos:position pos:line="38" pos:column="66"/></operator>
		    <operator pos:line="39" pos:column="21">!<pos:position pos:line="39" pos:column="22"/></operator><call><name pos:line="39" pos:column="22">is_staging_gitmodules_ok<pos:position pos:line="39" pos:column="46"/></name><argument_list pos:line="39" pos:column="46">()<pos:position pos:line="39" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="49"/></condition><then pos:line="39" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="25">die<pos:position pos:line="40" pos:column="28"/></name> <argument_list pos:line="40" pos:column="29">(<argument><expr><call><name pos:line="40" pos:column="30">_<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">(<argument><expr><literal type="string" pos:line="40" pos:column="32">"Please stage your changes to .gitmodules or stash them to proceed"<pos:position pos:line="40" pos:column="99"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="100"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="102"/></expr_stmt></block></then></if>
	}<pos:position pos:line="41" pos:column="10"/></block></for>

	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name><name pos:line="43" pos:column="13">pathspec<pos:position pos:line="43" pos:column="21"/></name><operator pos:line="43" pos:column="21">.<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">nr<pos:position pos:line="43" pos:column="24"/></name></name></expr>)<pos:position pos:line="43" pos:column="25"/></condition><then pos:line="43" pos:column="25"> <block pos:line="43" pos:column="26">{
		<decl_stmt><decl><type><specifier pos:line="44" pos:column="17">const<pos:position pos:line="44" pos:column="22"/></specifier> <name pos:line="44" pos:column="23">char<pos:position pos:line="44" pos:column="27"/></name> <modifier pos:line="44" pos:column="28">*<pos:position pos:line="44" pos:column="29"/></modifier></type><name pos:line="44" pos:column="29">original<pos:position pos:line="44" pos:column="37"/></name></decl>;<pos:position pos:line="44" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">int<pos:position pos:line="45" pos:column="20"/></name></type> <name pos:line="45" pos:column="21">seen_any<pos:position pos:line="45" pos:column="29"/></name> <init pos:line="45" pos:column="30">= <expr><literal type="number" pos:line="45" pos:column="32">0<pos:position pos:line="45" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="45" pos:column="34"/></decl_stmt>
		<for pos:line="46" pos:column="17">for <control pos:line="46" pos:column="21">(<init><expr><name pos:line="46" pos:column="22">i<pos:position pos:line="46" pos:column="23"/></name> <operator pos:line="46" pos:column="24">=<pos:position pos:line="46" pos:column="25"/></operator> <literal type="number" pos:line="46" pos:column="26">0<pos:position pos:line="46" pos:column="27"/></literal></expr>;<pos:position pos:line="46" pos:column="28"/></init> <condition><expr><name pos:line="46" pos:column="29">i<pos:position pos:line="46" pos:column="30"/></name> <operator pos:line="46" pos:column="31">&lt;<pos:position pos:line="46" pos:column="35"/></operator> <name><name pos:line="46" pos:column="33">pathspec<pos:position pos:line="46" pos:column="41"/></name><operator pos:line="46" pos:column="41">.<pos:position pos:line="46" pos:column="42"/></operator><name pos:line="46" pos:column="42">nr<pos:position pos:line="46" pos:column="44"/></name></name></expr>;<pos:position pos:line="46" pos:column="45"/></condition> <incr><expr><name pos:line="46" pos:column="46">i<pos:position pos:line="46" pos:column="47"/></name><operator pos:line="46" pos:column="47">++<pos:position pos:line="46" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="46" pos:column="50"/></control> <block pos:line="46" pos:column="51">{
			<expr_stmt><expr><name pos:line="47" pos:column="25">original<pos:position pos:line="47" pos:column="33"/></name> <operator pos:line="47" pos:column="34">=<pos:position pos:line="47" pos:column="35"/></operator> <name><name pos:line="47" pos:column="36">pathspec<pos:position pos:line="47" pos:column="44"/></name><operator pos:line="47" pos:column="44">.<pos:position pos:line="47" pos:column="45"/></operator><name pos:line="47" pos:column="45">items<pos:position pos:line="47" pos:column="50"/></name><index pos:line="47" pos:column="50">[<expr><name pos:line="47" pos:column="51">i<pos:position pos:line="47" pos:column="52"/></name></expr>]<pos:position pos:line="47" pos:column="53"/></index></name><operator pos:line="47" pos:column="53">.<pos:position pos:line="47" pos:column="54"/></operator><name pos:line="47" pos:column="54">original<pos:position pos:line="47" pos:column="62"/></name></expr>;<pos:position pos:line="47" pos:column="63"/></expr_stmt>
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><operator pos:line="48" pos:column="29">!<pos:position pos:line="48" pos:column="30"/></operator><name><name pos:line="48" pos:column="30">seen<pos:position pos:line="48" pos:column="34"/></name><index pos:line="48" pos:column="34">[<expr><name pos:line="48" pos:column="35">i<pos:position pos:line="48" pos:column="36"/></name></expr>]<pos:position pos:line="48" pos:column="37"/></index></name></expr>)<pos:position pos:line="48" pos:column="38"/></condition><then pos:line="48" pos:column="38"> <block pos:line="48" pos:column="39">{
				<if pos:line="49" pos:column="33">if <condition pos:line="49" pos:column="36">(<expr><operator pos:line="49" pos:column="37">!<pos:position pos:line="49" pos:column="38"/></operator><name pos:line="49" pos:column="38">ignore_unmatch<pos:position pos:line="49" pos:column="52"/></name></expr>)<pos:position pos:line="49" pos:column="53"/></condition><then pos:line="49" pos:column="53"> <block pos:line="49" pos:column="54">{
					<expr_stmt><expr><call><name pos:line="50" pos:column="41">die<pos:position pos:line="50" pos:column="44"/></name><argument_list pos:line="50" pos:column="44">(<argument><expr><call><name pos:line="50" pos:column="45">_<pos:position pos:line="50" pos:column="46"/></name><argument_list pos:line="50" pos:column="46">(<argument><expr><literal type="string" pos:line="50" pos:column="47">"pathspec '%s' did not match any files"<pos:position pos:line="50" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="87"/></argument_list></call></expr></argument>,
					    <argument><expr><name pos:line="51" pos:column="45">original<pos:position pos:line="51" pos:column="53"/></name></expr></argument>)<pos:position pos:line="51" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="55"/></expr_stmt>
				}<pos:position pos:line="52" pos:column="34"/></block></then></if>
			}<pos:position pos:line="53" pos:column="26"/></block></then>
			<else pos:line="54" pos:column="25">else <block pos:line="54" pos:column="30">{
				<expr_stmt><expr><name pos:line="55" pos:column="33">seen_any<pos:position pos:line="55" pos:column="41"/></name> <operator pos:line="55" pos:column="42">=<pos:position pos:line="55" pos:column="43"/></operator> <literal type="number" pos:line="55" pos:column="44">1<pos:position pos:line="55" pos:column="45"/></literal></expr>;<pos:position pos:line="55" pos:column="46"/></expr_stmt>
			}<pos:position pos:line="56" pos:column="26"/></block></else></if>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><operator pos:line="57" pos:column="29">!<pos:position pos:line="57" pos:column="30"/></operator><name pos:line="57" pos:column="30">recursive<pos:position pos:line="57" pos:column="39"/></name> <operator pos:line="57" pos:column="40">&amp;&amp;<pos:position pos:line="57" pos:column="50"/></operator> <name><name pos:line="57" pos:column="43">seen<pos:position pos:line="57" pos:column="47"/></name><index pos:line="57" pos:column="47">[<expr><name pos:line="57" pos:column="48">i<pos:position pos:line="57" pos:column="49"/></name></expr>]<pos:position pos:line="57" pos:column="50"/></index></name> <operator pos:line="57" pos:column="51">==<pos:position pos:line="57" pos:column="53"/></operator> <name pos:line="57" pos:column="54">MATCHED_RECURSIVELY<pos:position pos:line="57" pos:column="73"/></name></expr>)<pos:position pos:line="57" pos:column="74"/></condition><then pos:line="57" pos:column="74">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="33">die<pos:position pos:line="58" pos:column="36"/></name><argument_list pos:line="58" pos:column="36">(<argument><expr><call><name pos:line="58" pos:column="37">_<pos:position pos:line="58" pos:column="38"/></name><argument_list pos:line="58" pos:column="38">(<argument><expr><literal type="string" pos:line="58" pos:column="39">"not removing '%s' recursively without -r"<pos:position pos:line="58" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="82"/></argument_list></call></expr></argument>,
				    <argument><expr><ternary><condition><expr><operator pos:line="59" pos:column="37">*<pos:position pos:line="59" pos:column="38"/></operator><name pos:line="59" pos:column="38">original<pos:position pos:line="59" pos:column="46"/></name></expr> ?<pos:position pos:line="59" pos:column="48"/></condition><then pos:line="59" pos:column="48"> <expr><name pos:line="59" pos:column="49">original<pos:position pos:line="59" pos:column="57"/></name></expr> <pos:position pos:line="59" pos:column="58"/></then><else pos:line="59" pos:column="58">: <expr><literal type="string" pos:line="59" pos:column="60">"."<pos:position pos:line="59" pos:column="63"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="59" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="65"/></expr_stmt></block></then></if>
		}<pos:position pos:line="60" pos:column="18"/></block></for>

		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><operator pos:line="62" pos:column="21">!<pos:position pos:line="62" pos:column="22"/></operator><name pos:line="62" pos:column="22">seen_any<pos:position pos:line="62" pos:column="30"/></name></expr>)<pos:position pos:line="62" pos:column="31"/></condition><then pos:line="62" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="25">exit<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><literal type="number" pos:line="63" pos:column="30">0<pos:position pos:line="63" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="33"/></expr_stmt></block></then></if>
	}<pos:position pos:line="64" pos:column="10"/></block></then></if>

	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><operator pos:line="66" pos:column="13">!<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="14">index_only<pos:position pos:line="66" pos:column="24"/></name></expr>)<pos:position pos:line="66" pos:column="25"/></condition><then pos:line="66" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="17">submodules_absorb_gitdir_if_needed<pos:position pos:line="67" pos:column="51"/></name><argument_list pos:line="67" pos:column="51">(<argument><expr><name pos:line="67" pos:column="52">prefix<pos:position pos:line="67" pos:column="58"/></name></expr></argument>)<pos:position pos:line="67" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="60"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="69" pos:column="9">/*
	 * If not forced, the file, the index and the HEAD (if exists)
	 * must match; but the file can already been removed, since
	 * this sequence is a natural "novice" way:
	 *
	 *	rm F; git rm F
	 *
	 * Further, if HEAD commit exists, "diff-index --cached" must
	 * report no changes unless forced.
	 */</comment>
	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><operator pos:line="79" pos:column="13">!<pos:position pos:line="79" pos:column="14"/></operator><name pos:line="79" pos:column="14">force<pos:position pos:line="79" pos:column="19"/></name></expr>)<pos:position pos:line="79" pos:column="20"/></condition><then pos:line="79" pos:column="20"> <block pos:line="79" pos:column="21">{
		<decl_stmt><decl><type><name><name pos:line="80" pos:column="17">struct<pos:position pos:line="80" pos:column="23"/></name> <name pos:line="80" pos:column="24">object_id<pos:position pos:line="80" pos:column="33"/></name></name></type> <name pos:line="80" pos:column="34">oid<pos:position pos:line="80" pos:column="37"/></name></decl>;<pos:position pos:line="80" pos:column="38"/></decl_stmt>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><call><name pos:line="81" pos:column="21">get_oid<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">(<argument><expr><literal type="string" pos:line="81" pos:column="29">"HEAD"<pos:position pos:line="81" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="81" pos:column="37">&amp;<pos:position pos:line="81" pos:column="42"/></operator><name pos:line="81" pos:column="38">oid<pos:position pos:line="81" pos:column="41"/></name></expr></argument>)<pos:position pos:line="81" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="43"/></condition><then pos:line="81" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="25">oidclr<pos:position pos:line="82" pos:column="31"/></name><argument_list pos:line="82" pos:column="31">(<argument><expr><operator pos:line="82" pos:column="32">&amp;<pos:position pos:line="82" pos:column="37"/></operator><name pos:line="82" pos:column="33">oid<pos:position pos:line="82" pos:column="36"/></name></expr></argument>)<pos:position pos:line="82" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="38"/></expr_stmt></block></then></if>
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><call><name pos:line="83" pos:column="21">check_local_mod<pos:position pos:line="83" pos:column="36"/></name><argument_list pos:line="83" pos:column="36">(<argument><expr><operator pos:line="83" pos:column="37">&amp;<pos:position pos:line="83" pos:column="42"/></operator><name pos:line="83" pos:column="38">oid<pos:position pos:line="83" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="43">index_only<pos:position pos:line="83" pos:column="53"/></name></expr></argument>)<pos:position pos:line="83" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="55"/></condition><then pos:line="83" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="84" pos:column="25">exit<pos:position pos:line="84" pos:column="29"/></name><argument_list pos:line="84" pos:column="29">(<argument><expr><literal type="number" pos:line="84" pos:column="30">1<pos:position pos:line="84" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="33"/></expr_stmt></block></then></if>
	}<pos:position pos:line="85" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="87" pos:column="9">/*
	 * First remove the names from the index: we won't commit
	 * the index unless all of them succeed.
	 */</comment>
	<for pos:line="91" pos:column="9">for <control pos:line="91" pos:column="13">(<init><expr><name pos:line="91" pos:column="14">i<pos:position pos:line="91" pos:column="15"/></name> <operator pos:line="91" pos:column="16">=<pos:position pos:line="91" pos:column="17"/></operator> <literal type="number" pos:line="91" pos:column="18">0<pos:position pos:line="91" pos:column="19"/></literal></expr>;<pos:position pos:line="91" pos:column="20"/></init> <condition><expr><name pos:line="91" pos:column="21">i<pos:position pos:line="91" pos:column="22"/></name> <operator pos:line="91" pos:column="23">&lt;<pos:position pos:line="91" pos:column="27"/></operator> <name><name pos:line="91" pos:column="25">list<pos:position pos:line="91" pos:column="29"/></name><operator pos:line="91" pos:column="29">.<pos:position pos:line="91" pos:column="30"/></operator><name pos:line="91" pos:column="30">nr<pos:position pos:line="91" pos:column="32"/></name></name></expr>;<pos:position pos:line="91" pos:column="33"/></condition> <incr><expr><name pos:line="91" pos:column="34">i<pos:position pos:line="91" pos:column="35"/></name><operator pos:line="91" pos:column="35">++<pos:position pos:line="91" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="91" pos:column="38"/></control> <block pos:line="91" pos:column="39">{
		<decl_stmt><decl><type><specifier pos:line="92" pos:column="17">const<pos:position pos:line="92" pos:column="22"/></specifier> <name pos:line="92" pos:column="23">char<pos:position pos:line="92" pos:column="27"/></name> <modifier pos:line="92" pos:column="28">*<pos:position pos:line="92" pos:column="29"/></modifier></type><name pos:line="92" pos:column="29">path<pos:position pos:line="92" pos:column="33"/></name> <init pos:line="92" pos:column="34">= <expr><name><name pos:line="92" pos:column="36">list<pos:position pos:line="92" pos:column="40"/></name><operator pos:line="92" pos:column="40">.<pos:position pos:line="92" pos:column="41"/></operator><name pos:line="92" pos:column="41">entry<pos:position pos:line="92" pos:column="46"/></name><index pos:line="92" pos:column="46">[<expr><name pos:line="92" pos:column="47">i<pos:position pos:line="92" pos:column="48"/></name></expr>]<pos:position pos:line="92" pos:column="49"/></index></name><operator pos:line="92" pos:column="49">.<pos:position pos:line="92" pos:column="50"/></operator><name pos:line="92" pos:column="50">name<pos:position pos:line="92" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="92" pos:column="55"/></decl_stmt>
		<if pos:line="93" pos:column="17">if <condition pos:line="93" pos:column="20">(<expr><operator pos:line="93" pos:column="21">!<pos:position pos:line="93" pos:column="22"/></operator><name pos:line="93" pos:column="22">quiet<pos:position pos:line="93" pos:column="27"/></name></expr>)<pos:position pos:line="93" pos:column="28"/></condition><then pos:line="93" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="94" pos:column="25">printf<pos:position pos:line="94" pos:column="31"/></name><argument_list pos:line="94" pos:column="31">(<argument><expr><literal type="string" pos:line="94" pos:column="32">"rm '%s'\n"<pos:position pos:line="94" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="45">path<pos:position pos:line="94" pos:column="49"/></name></expr></argument>)<pos:position pos:line="94" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="51"/></expr_stmt></block></then></if>

		<if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><call><name pos:line="96" pos:column="21">remove_file_from_cache<pos:position pos:line="96" pos:column="43"/></name><argument_list pos:line="96" pos:column="43">(<argument><expr><name pos:line="96" pos:column="44">path<pos:position pos:line="96" pos:column="48"/></name></expr></argument>)<pos:position pos:line="96" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="50"/></condition><then pos:line="96" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="97" pos:column="25">die<pos:position pos:line="97" pos:column="28"/></name><argument_list pos:line="97" pos:column="28">(<argument><expr><call><name pos:line="97" pos:column="29">_<pos:position pos:line="97" pos:column="30"/></name><argument_list pos:line="97" pos:column="30">(<argument><expr><literal type="string" pos:line="97" pos:column="31">"git rm: unable to remove %s"<pos:position pos:line="97" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="97" pos:column="63">path<pos:position pos:line="97" pos:column="67"/></name></expr></argument>)<pos:position pos:line="97" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="69"/></expr_stmt></block></then></if>
	}<pos:position pos:line="98" pos:column="10"/></block></for>

	<if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><name pos:line="100" pos:column="13">show_only<pos:position pos:line="100" pos:column="22"/></name></expr>)<pos:position pos:line="100" pos:column="23"/></condition><then pos:line="100" pos:column="23">
		<block type="pseudo"><return pos:line="101" pos:column="17">return <expr><literal type="number" pos:line="101" pos:column="24">0<pos:position pos:line="101" pos:column="25"/></literal></expr>;<pos:position pos:line="101" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="103" pos:column="9">/*
	 * Then, unless we used "--cached", remove the filenames from
	 * the workspace. If we fail to remove the first one, we
	 * abort the "git rm" (but once we've successfully removed
	 * any file at all, we'll go ahead and commit to it all:
	 * by then we've already committed ourselves and can't fail
	 * in the middle)
	 */</comment>
	<if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<expr><operator pos:line="111" pos:column="13">!<pos:position pos:line="111" pos:column="14"/></operator><name pos:line="111" pos:column="14">index_only<pos:position pos:line="111" pos:column="24"/></name></expr>)<pos:position pos:line="111" pos:column="25"/></condition><then pos:line="111" pos:column="25"> <block pos:line="111" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="112" pos:column="17">int<pos:position pos:line="112" pos:column="20"/></name></type> <name pos:line="112" pos:column="21">removed<pos:position pos:line="112" pos:column="28"/></name> <init pos:line="112" pos:column="29">= <expr><literal type="number" pos:line="112" pos:column="31">0<pos:position pos:line="112" pos:column="32"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="112" pos:column="34">gitmodules_modified<pos:position pos:line="112" pos:column="53"/></name> <init pos:line="112" pos:column="54">= <expr><literal type="number" pos:line="112" pos:column="56">0<pos:position pos:line="112" pos:column="57"/></literal></expr></init></decl>;<pos:position pos:line="112" pos:column="58"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="113" pos:column="17">struct<pos:position pos:line="113" pos:column="23"/></name> <name pos:line="113" pos:column="24">strbuf<pos:position pos:line="113" pos:column="30"/></name></name></type> <name pos:line="113" pos:column="31">buf<pos:position pos:line="113" pos:column="34"/></name> <init pos:line="113" pos:column="35">= <expr><name pos:line="113" pos:column="37">STRBUF_INIT<pos:position pos:line="113" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="113" pos:column="49"/></decl_stmt>
		<for pos:line="114" pos:column="17">for <control pos:line="114" pos:column="21">(<init><expr><name pos:line="114" pos:column="22">i<pos:position pos:line="114" pos:column="23"/></name> <operator pos:line="114" pos:column="24">=<pos:position pos:line="114" pos:column="25"/></operator> <literal type="number" pos:line="114" pos:column="26">0<pos:position pos:line="114" pos:column="27"/></literal></expr>;<pos:position pos:line="114" pos:column="28"/></init> <condition><expr><name pos:line="114" pos:column="29">i<pos:position pos:line="114" pos:column="30"/></name> <operator pos:line="114" pos:column="31">&lt;<pos:position pos:line="114" pos:column="35"/></operator> <name><name pos:line="114" pos:column="33">list<pos:position pos:line="114" pos:column="37"/></name><operator pos:line="114" pos:column="37">.<pos:position pos:line="114" pos:column="38"/></operator><name pos:line="114" pos:column="38">nr<pos:position pos:line="114" pos:column="40"/></name></name></expr>;<pos:position pos:line="114" pos:column="41"/></condition> <incr><expr><name pos:line="114" pos:column="42">i<pos:position pos:line="114" pos:column="43"/></name><operator pos:line="114" pos:column="43">++<pos:position pos:line="114" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="114" pos:column="46"/></control> <block pos:line="114" pos:column="47">{
			<decl_stmt><decl><type><specifier pos:line="115" pos:column="25">const<pos:position pos:line="115" pos:column="30"/></specifier> <name pos:line="115" pos:column="31">char<pos:position pos:line="115" pos:column="35"/></name> <modifier pos:line="115" pos:column="36">*<pos:position pos:line="115" pos:column="37"/></modifier></type><name pos:line="115" pos:column="37">path<pos:position pos:line="115" pos:column="41"/></name> <init pos:line="115" pos:column="42">= <expr><name><name pos:line="115" pos:column="44">list<pos:position pos:line="115" pos:column="48"/></name><operator pos:line="115" pos:column="48">.<pos:position pos:line="115" pos:column="49"/></operator><name pos:line="115" pos:column="49">entry<pos:position pos:line="115" pos:column="54"/></name><index pos:line="115" pos:column="54">[<expr><name pos:line="115" pos:column="55">i<pos:position pos:line="115" pos:column="56"/></name></expr>]<pos:position pos:line="115" pos:column="57"/></index></name><operator pos:line="115" pos:column="57">.<pos:position pos:line="115" pos:column="58"/></operator><name pos:line="115" pos:column="58">name<pos:position pos:line="115" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="115" pos:column="63"/></decl_stmt>
			<if pos:line="116" pos:column="25">if <condition pos:line="116" pos:column="28">(<expr><name><name pos:line="116" pos:column="29">list<pos:position pos:line="116" pos:column="33"/></name><operator pos:line="116" pos:column="33">.<pos:position pos:line="116" pos:column="34"/></operator><name pos:line="116" pos:column="34">entry<pos:position pos:line="116" pos:column="39"/></name><index pos:line="116" pos:column="39">[<expr><name pos:line="116" pos:column="40">i<pos:position pos:line="116" pos:column="41"/></name></expr>]<pos:position pos:line="116" pos:column="42"/></index></name><operator pos:line="116" pos:column="42">.<pos:position pos:line="116" pos:column="43"/></operator><name pos:line="116" pos:column="43">is_submodule<pos:position pos:line="116" pos:column="55"/></name></expr>)<pos:position pos:line="116" pos:column="56"/></condition><then pos:line="116" pos:column="56"> <block pos:line="116" pos:column="57">{
				<expr_stmt><expr><call><name pos:line="117" pos:column="33">strbuf_reset<pos:position pos:line="117" pos:column="45"/></name><argument_list pos:line="117" pos:column="45">(<argument><expr><operator pos:line="117" pos:column="46">&amp;<pos:position pos:line="117" pos:column="51"/></operator><name pos:line="117" pos:column="47">buf<pos:position pos:line="117" pos:column="50"/></name></expr></argument>)<pos:position pos:line="117" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="52"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="118" pos:column="33">strbuf_addstr<pos:position pos:line="118" pos:column="46"/></name><argument_list pos:line="118" pos:column="46">(<argument><expr><operator pos:line="118" pos:column="47">&amp;<pos:position pos:line="118" pos:column="52"/></operator><name pos:line="118" pos:column="48">buf<pos:position pos:line="118" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="53">path<pos:position pos:line="118" pos:column="57"/></name></expr></argument>)<pos:position pos:line="118" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="59"/></expr_stmt>
				<if pos:line="119" pos:column="33">if <condition pos:line="119" pos:column="36">(<expr><call><name pos:line="119" pos:column="37">remove_dir_recursively<pos:position pos:line="119" pos:column="59"/></name><argument_list pos:line="119" pos:column="59">(<argument><expr><operator pos:line="119" pos:column="60">&amp;<pos:position pos:line="119" pos:column="65"/></operator><name pos:line="119" pos:column="61">buf<pos:position pos:line="119" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="119" pos:column="66">0<pos:position pos:line="119" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="119" pos:column="69"/></condition><then pos:line="119" pos:column="69">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="41">die<pos:position pos:line="120" pos:column="44"/></name><argument_list pos:line="120" pos:column="44">(<argument><expr><call><name pos:line="120" pos:column="45">_<pos:position pos:line="120" pos:column="46"/></name><argument_list pos:line="120" pos:column="46">(<argument><expr><literal type="string" pos:line="120" pos:column="47">"could not remove '%s'"<pos:position pos:line="120" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="120" pos:column="73">path<pos:position pos:line="120" pos:column="77"/></name></expr></argument>)<pos:position pos:line="120" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="79"/></expr_stmt></block></then></if>

				<expr_stmt><expr><name pos:line="122" pos:column="33">removed<pos:position pos:line="122" pos:column="40"/></name> <operator pos:line="122" pos:column="41">=<pos:position pos:line="122" pos:column="42"/></operator> <literal type="number" pos:line="122" pos:column="43">1<pos:position pos:line="122" pos:column="44"/></literal></expr>;<pos:position pos:line="122" pos:column="45"/></expr_stmt>
				<if pos:line="123" pos:column="33">if <condition pos:line="123" pos:column="36">(<expr><operator pos:line="123" pos:column="37">!<pos:position pos:line="123" pos:column="38"/></operator><call><name pos:line="123" pos:column="38">remove_path_from_gitmodules<pos:position pos:line="123" pos:column="65"/></name><argument_list pos:line="123" pos:column="65">(<argument><expr><name pos:line="123" pos:column="66">path<pos:position pos:line="123" pos:column="70"/></name></expr></argument>)<pos:position pos:line="123" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="123" pos:column="72"/></condition><then pos:line="123" pos:column="72">
					<block type="pseudo"><expr_stmt><expr><name pos:line="124" pos:column="41">gitmodules_modified<pos:position pos:line="124" pos:column="60"/></name> <operator pos:line="124" pos:column="61">=<pos:position pos:line="124" pos:column="62"/></operator> <literal type="number" pos:line="124" pos:column="63">1<pos:position pos:line="124" pos:column="64"/></literal></expr>;<pos:position pos:line="124" pos:column="65"/></expr_stmt></block></then></if>
				<continue pos:line="125" pos:column="33">continue;<pos:position pos:line="125" pos:column="42"/></continue>
			}<pos:position pos:line="126" pos:column="26"/></block></then></if>
			<if pos:line="127" pos:column="25">if <condition pos:line="127" pos:column="28">(<expr><operator pos:line="127" pos:column="29">!<pos:position pos:line="127" pos:column="30"/></operator><call><name pos:line="127" pos:column="30">remove_path<pos:position pos:line="127" pos:column="41"/></name><argument_list pos:line="127" pos:column="41">(<argument><expr><name pos:line="127" pos:column="42">path<pos:position pos:line="127" pos:column="46"/></name></expr></argument>)<pos:position pos:line="127" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="127" pos:column="48"/></condition><then pos:line="127" pos:column="48"> <block pos:line="127" pos:column="49">{
				<expr_stmt><expr><name pos:line="128" pos:column="33">removed<pos:position pos:line="128" pos:column="40"/></name> <operator pos:line="128" pos:column="41">=<pos:position pos:line="128" pos:column="42"/></operator> <literal type="number" pos:line="128" pos:column="43">1<pos:position pos:line="128" pos:column="44"/></literal></expr>;<pos:position pos:line="128" pos:column="45"/></expr_stmt>
				<continue pos:line="129" pos:column="33">continue;<pos:position pos:line="129" pos:column="42"/></continue>
			}<pos:position pos:line="130" pos:column="26"/></block></then></if>
			<if pos:line="131" pos:column="25">if <condition pos:line="131" pos:column="28">(<expr><operator pos:line="131" pos:column="29">!<pos:position pos:line="131" pos:column="30"/></operator><name pos:line="131" pos:column="30">removed<pos:position pos:line="131" pos:column="37"/></name></expr>)<pos:position pos:line="131" pos:column="38"/></condition><then pos:line="131" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="132" pos:column="33">die_errno<pos:position pos:line="132" pos:column="42"/></name><argument_list pos:line="132" pos:column="42">(<argument><expr><literal type="string" pos:line="132" pos:column="43">"git rm: '%s'"<pos:position pos:line="132" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="132" pos:column="59">path<pos:position pos:line="132" pos:column="63"/></name></expr></argument>)<pos:position pos:line="132" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="65"/></expr_stmt></block></then></if>
		}<pos:position pos:line="133" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="134" pos:column="17">strbuf_release<pos:position pos:line="134" pos:column="31"/></name><argument_list pos:line="134" pos:column="31">(<argument><expr><operator pos:line="134" pos:column="32">&amp;<pos:position pos:line="134" pos:column="37"/></operator><name pos:line="134" pos:column="33">buf<pos:position pos:line="134" pos:column="36"/></name></expr></argument>)<pos:position pos:line="134" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="38"/></expr_stmt>
		<if pos:line="135" pos:column="17">if <condition pos:line="135" pos:column="20">(<expr><name pos:line="135" pos:column="21">gitmodules_modified<pos:position pos:line="135" pos:column="40"/></name></expr>)<pos:position pos:line="135" pos:column="41"/></condition><then pos:line="135" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="136" pos:column="25">stage_updated_gitmodules<pos:position pos:line="136" pos:column="49"/></name><argument_list pos:line="136" pos:column="49">()<pos:position pos:line="136" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="52"/></expr_stmt></block></then></if>
	}<pos:position pos:line="137" pos:column="10"/></block></then></if>

	<if pos:line="139" pos:column="9">if <condition pos:line="139" pos:column="12">(<expr><name pos:line="139" pos:column="13">active_cache_changed<pos:position pos:line="139" pos:column="33"/></name></expr>)<pos:position pos:line="139" pos:column="34"/></condition><then pos:line="139" pos:column="34"> <block pos:line="139" pos:column="35">{
		<if pos:line="140" pos:column="17">if <condition pos:line="140" pos:column="20">(<expr><call><name pos:line="140" pos:column="21">write_locked_index<pos:position pos:line="140" pos:column="39"/></name><argument_list pos:line="140" pos:column="39">(<argument><expr><operator pos:line="140" pos:column="40">&amp;<pos:position pos:line="140" pos:column="45"/></operator><name pos:line="140" pos:column="41">the_index<pos:position pos:line="140" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="140" pos:column="52">&amp;<pos:position pos:line="140" pos:column="57"/></operator><name pos:line="140" pos:column="53">lock_file<pos:position pos:line="140" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="64">COMMIT_LOCK<pos:position pos:line="140" pos:column="75"/></name></expr></argument>)<pos:position pos:line="140" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="140" pos:column="77"/></condition><then pos:line="140" pos:column="77">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="141" pos:column="25">die<pos:position pos:line="141" pos:column="28"/></name><argument_list pos:line="141" pos:column="28">(<argument><expr><call><name pos:line="141" pos:column="29">_<pos:position pos:line="141" pos:column="30"/></name><argument_list pos:line="141" pos:column="30">(<argument><expr><literal type="string" pos:line="141" pos:column="31">"Unable to write new index file"<pos:position pos:line="141" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="141" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="66"/></expr_stmt></block></then></if>
	}<pos:position pos:line="142" pos:column="10"/></block></then></if>

	<return pos:line="144" pos:column="9">return <expr><literal type="number" pos:line="144" pos:column="16">0<pos:position pos:line="144" pos:column="17"/></literal></expr>;<pos:position pos:line="144" pos:column="18"/></return>
}<pos:position pos:line="145" pos:column="2"/></block></function></unit>
