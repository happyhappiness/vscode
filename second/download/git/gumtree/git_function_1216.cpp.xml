<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1216.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">append_merge_parents<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">commit_list<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier><modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">tail<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">merge_head<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">line<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name pos:line="4" pos:column="30">STRBUF_INIT<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">merge_head<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">=<pos:position pos:line="6" pos:column="21"/></operator> <call><name pos:line="6" pos:column="22">open<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><call><name pos:line="6" pos:column="27">git_path_merge_head<pos:position pos:line="6" pos:column="46"/></name><argument_list pos:line="6" pos:column="46">()<pos:position pos:line="6" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="6" pos:column="50">O_RDONLY<pos:position pos:line="6" pos:column="58"/></name></expr></argument>)<pos:position pos:line="6" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="60"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">merge_head<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">&lt;<pos:position pos:line="7" pos:column="28"/></operator> <literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr>)<pos:position pos:line="7" pos:column="28"/></condition><then pos:line="7" pos:column="28"> <block pos:line="7" pos:column="29">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">errno<pos:position pos:line="8" pos:column="26"/></name> <operator pos:line="8" pos:column="27">==<pos:position pos:line="8" pos:column="29"/></operator> <name pos:line="8" pos:column="30">ENOENT<pos:position pos:line="8" pos:column="36"/></name></expr>)<pos:position pos:line="8" pos:column="37"/></condition><then pos:line="8" pos:column="37">
			<block type="pseudo"><return pos:line="9" pos:column="25">return;<pos:position pos:line="9" pos:column="32"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">die<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><literal type="string" pos:line="10" pos:column="21">"cannot open '%s' for reading"<pos:position pos:line="10" pos:column="51"/></literal></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="53">git_path_merge_head<pos:position pos:line="10" pos:column="72"/></name><argument_list pos:line="10" pos:column="72">()<pos:position pos:line="10" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="76"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<while pos:line="13" pos:column="9">while <condition pos:line="13" pos:column="15">(<expr><operator pos:line="13" pos:column="16">!<pos:position pos:line="13" pos:column="17"/></operator><call><name pos:line="13" pos:column="17">strbuf_getwholeline_fd<pos:position pos:line="13" pos:column="39"/></name><argument_list pos:line="13" pos:column="39">(<argument><expr><operator pos:line="13" pos:column="40">&amp;<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="41">line<pos:position pos:line="13" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="47">merge_head<pos:position pos:line="13" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="59">'\n'<pos:position pos:line="13" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="65"/></condition> <block pos:line="13" pos:column="66">{
		<decl_stmt><decl><type><name><name pos:line="14" pos:column="17">struct<pos:position pos:line="14" pos:column="23"/></name> <name pos:line="14" pos:column="24">object_id<pos:position pos:line="14" pos:column="33"/></name></name></type> <name pos:line="14" pos:column="34">oid<pos:position pos:line="14" pos:column="37"/></name></decl>;<pos:position pos:line="14" pos:column="38"/></decl_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name><name pos:line="15" pos:column="21">line<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">.<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="26">len<pos:position pos:line="15" pos:column="29"/></name></name> <operator pos:line="15" pos:column="30">&lt;<pos:position pos:line="15" pos:column="34"/></operator> <name pos:line="15" pos:column="32">GIT_SHA1_HEXSZ<pos:position pos:line="15" pos:column="46"/></name> <operator pos:line="15" pos:column="47">||<pos:position pos:line="15" pos:column="49"/></operator> <call><name pos:line="15" pos:column="50">get_oid_hex<pos:position pos:line="15" pos:column="61"/></name><argument_list pos:line="15" pos:column="61">(<argument><expr><name><name pos:line="15" pos:column="62">line<pos:position pos:line="15" pos:column="66"/></name><operator pos:line="15" pos:column="66">.<pos:position pos:line="15" pos:column="67"/></operator><name pos:line="15" pos:column="67">buf<pos:position pos:line="15" pos:column="70"/></name></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="72">&amp;<pos:position pos:line="15" pos:column="77"/></operator><name pos:line="15" pos:column="73">oid<pos:position pos:line="15" pos:column="76"/></name></expr></argument>)<pos:position pos:line="15" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="78"/></condition><then pos:line="15" pos:column="78">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">die<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><literal type="string" pos:line="16" pos:column="29">"unknown line in '%s': %s"<pos:position pos:line="16" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="57">git_path_merge_head<pos:position pos:line="16" pos:column="76"/></name><argument_list pos:line="16" pos:column="76">()<pos:position pos:line="16" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="80">line<pos:position pos:line="16" pos:column="84"/></name><operator pos:line="16" pos:column="84">.<pos:position pos:line="16" pos:column="85"/></operator><name pos:line="16" pos:column="85">buf<pos:position pos:line="16" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="90"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="17" pos:column="17">tail<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <call><name pos:line="17" pos:column="24">append_parent<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><name pos:line="17" pos:column="38">tail<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="44">&amp;<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="45">oid<pos:position pos:line="17" pos:column="48"/></name></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">close<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">merge_head<pos:position pos:line="19" pos:column="25"/></name></expr></argument>)<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">strbuf_release<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><operator pos:line="20" pos:column="24">&amp;<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="25">line<pos:position pos:line="20" pos:column="29"/></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
