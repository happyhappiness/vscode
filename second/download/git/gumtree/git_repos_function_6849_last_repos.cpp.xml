<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6849_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">FORCEINLINE<pos:position pos:line="1" pos:column="19"/></name> <name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">pthread_try_lock<pos:position pos:line="1" pos:column="40"/></name> <parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name pos:line="1" pos:column="42">MLOCK_T<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">sl<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list> <block pos:line="1" pos:column="55">{
  <decl_stmt><decl><type><specifier pos:line="2" pos:column="3">volatile<pos:position pos:line="2" pos:column="11"/></specifier> <name pos:line="2" pos:column="12">unsigned<pos:position pos:line="2" pos:column="20"/></name> <name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name><modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type> <name pos:line="2" pos:column="26">lp<pos:position pos:line="2" pos:column="28"/></name> <init pos:line="2" pos:column="29">= <expr><operator pos:line="2" pos:column="31">&amp;<pos:position pos:line="2" pos:column="36"/></operator><name><name pos:line="2" pos:column="32">sl<pos:position pos:line="2" pos:column="34"/></name><operator pos:line="2" pos:column="34">-&gt;<pos:position pos:line="2" pos:column="39"/></operator><name pos:line="2" pos:column="36">l<pos:position pos:line="2" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="2" pos:column="38"/></decl_stmt>
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><operator pos:line="3" pos:column="7">*<pos:position pos:line="3" pos:column="8"/></operator><name pos:line="3" pos:column="8">lp<pos:position pos:line="3" pos:column="10"/></name> <operator pos:line="3" pos:column="11">!=<pos:position pos:line="3" pos:column="13"/></operator> <literal type="number" pos:line="3" pos:column="14">0<pos:position pos:line="3" pos:column="15"/></literal></expr>)<pos:position pos:line="3" pos:column="16"/></condition><then pos:line="3" pos:column="16"> <block pos:line="3" pos:column="17">{
      <if pos:line="4" pos:column="7">if <condition pos:line="4" pos:column="10">(<expr><name><name pos:line="4" pos:column="11">sl<pos:position pos:line="4" pos:column="13"/></name><operator pos:line="4" pos:column="13">-&gt;<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="15">threadid<pos:position pos:line="4" pos:column="23"/></name></name> <operator pos:line="4" pos:column="24">==<pos:position pos:line="4" pos:column="26"/></operator> <name pos:line="4" pos:column="27">CURRENT_THREAD<pos:position pos:line="4" pos:column="41"/></name></expr>)<pos:position pos:line="4" pos:column="42"/></condition><then pos:line="4" pos:column="42"> <block pos:line="4" pos:column="43">{
	<expr_stmt><expr><operator pos:line="5" pos:column="9">++<pos:position pos:line="5" pos:column="11"/></operator><name><name pos:line="5" pos:column="11">sl<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">-&gt;<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="15">c<pos:position pos:line="5" pos:column="16"/></name></name></expr>;<pos:position pos:line="5" pos:column="17"/></expr_stmt>
	<return pos:line="6" pos:column="9">return <expr><literal type="number" pos:line="6" pos:column="16">1<pos:position pos:line="6" pos:column="17"/></literal></expr>;<pos:position pos:line="6" pos:column="18"/></return>
      }<pos:position pos:line="7" pos:column="8"/></block></then></if>
  }<pos:position pos:line="8" pos:column="4"/></block></then>
  <else pos:line="9" pos:column="3">else <block pos:line="9" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">cmp<pos:position pos:line="10" pos:column="12"/></name> <init pos:line="10" pos:column="13">= <expr><literal type="number" pos:line="10" pos:column="15">0<pos:position pos:line="10" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">val<pos:position pos:line="11" pos:column="12"/></name> <init pos:line="11" pos:column="13">= <expr><literal type="number" pos:line="11" pos:column="15">1<pos:position pos:line="11" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">ret<pos:position pos:line="12" pos:column="12"/></name></decl>;<pos:position pos:line="12" pos:column="13"/></decl_stmt>
    <asm pos:line="13" pos:column="5">__asm__ <specifier pos:line="13" pos:column="13">__volatile__<pos:position pos:line="13" pos:column="25"/></specifier>  ("lock; cmpxchgl %1, %2"
			   : "=a" (ret)
			   : "r" (val), "m" (*(lp)), "0"(cmp)
			   : "memory", "cc");<pos:position pos:line="16" pos:column="46"/></asm>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">ret<pos:position pos:line="17" pos:column="13"/></name></expr>)<pos:position pos:line="17" pos:column="14"/></condition><then pos:line="17" pos:column="14"> <block pos:line="17" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="18" pos:column="7">assert<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><operator pos:line="18" pos:column="14">!<pos:position pos:line="18" pos:column="15"/></operator><name><name pos:line="18" pos:column="15">sl<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">-&gt;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="19">threadid<pos:position pos:line="18" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="19" pos:column="7">sl<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">-&gt;<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="11">c<pos:position pos:line="19" pos:column="12"/></name></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <literal type="number" pos:line="19" pos:column="15">1<pos:position pos:line="19" pos:column="16"/></literal></expr>;<pos:position pos:line="19" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="20" pos:column="7">sl<pos:position pos:line="20" pos:column="9"/></name><operator pos:line="20" pos:column="9">-&gt;<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="11">threadid<pos:position pos:line="20" pos:column="19"/></name></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">CURRENT_THREAD<pos:position pos:line="20" pos:column="36"/></name></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
      <return pos:line="21" pos:column="7">return <expr><literal type="number" pos:line="21" pos:column="14">1<pos:position pos:line="21" pos:column="15"/></literal></expr>;<pos:position pos:line="21" pos:column="16"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
  }<pos:position pos:line="23" pos:column="4"/></block></else></if>
  <return pos:line="24" pos:column="3">return <expr><literal type="number" pos:line="24" pos:column="10">0<pos:position pos:line="24" pos:column="11"/></literal></expr>;<pos:position pos:line="24" pos:column="12"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
