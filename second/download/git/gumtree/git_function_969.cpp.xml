<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_969.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">format_and_print_ref_item<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">ref_array_item<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">item<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">int<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">maxwidth<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>,
				      <parameter><decl><type><name><name pos:line="2" pos:column="39">struct<pos:position pos:line="2" pos:column="45"/></name> <name pos:line="2" pos:column="46">ref_filter<pos:position pos:line="2" pos:column="56"/></name></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">filter<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="66">const<pos:position pos:line="2" pos:column="71"/></specifier> <name pos:line="2" pos:column="72">char<pos:position pos:line="2" pos:column="76"/></name> <modifier pos:line="2" pos:column="77">*<pos:position pos:line="2" pos:column="78"/></modifier></type><name pos:line="2" pos:column="78">remote_prefix<pos:position pos:line="2" pos:column="91"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="92"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">c<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">current<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><literal type="number" pos:line="5" pos:column="23">0<pos:position pos:line="5" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">color<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">out<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><name pos:line="7" pos:column="29">STRBUF_INIT<pos:position pos:line="7" pos:column="40"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="42">name<pos:position pos:line="7" pos:column="46"/></name> <init pos:line="7" pos:column="47">= <expr><name pos:line="7" pos:column="49">STRBUF_INIT<pos:position pos:line="7" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="61"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">prefix_to_show<pos:position pos:line="8" pos:column="35"/></name> <init pos:line="8" pos:column="36">= <expr><literal type="string" pos:line="8" pos:column="38">""<pos:position pos:line="8" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">prefix_to_skip<pos:position pos:line="9" pos:column="35"/></name> <init pos:line="9" pos:column="36">= <expr><name pos:line="9" pos:column="38">NULL<pos:position pos:line="9" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">desc<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><name><name pos:line="10" pos:column="28">item<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">refname<pos:position pos:line="10" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">to_free<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><name pos:line="11" pos:column="25">NULL<pos:position pos:line="11" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>

	<switch pos:line="13" pos:column="9">switch <condition pos:line="13" pos:column="16">(<expr><name><name pos:line="13" pos:column="17">item<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">-&gt;<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="23">kind<pos:position pos:line="13" pos:column="27"/></name></name></expr>)<pos:position pos:line="13" pos:column="28"/></condition> <block pos:line="13" pos:column="29">{
	<case pos:line="14" pos:column="9">case <expr><name pos:line="14" pos:column="14">FILTER_REFS_BRANCHES<pos:position pos:line="14" pos:column="34"/></name></expr>:<pos:position pos:line="14" pos:column="35"/></case>
		<expr_stmt><expr><name pos:line="15" pos:column="17">prefix_to_skip<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">=<pos:position pos:line="15" pos:column="33"/></operator> <literal type="string" pos:line="15" pos:column="34">"refs/heads/"<pos:position pos:line="15" pos:column="47"/></literal></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">skip_prefix<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">desc<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="35">prefix_to_skip<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="51">&amp;<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="52">desc<pos:position pos:line="16" pos:column="56"/></name></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="58"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><name><name pos:line="17" pos:column="22">filter<pos:position pos:line="17" pos:column="28"/></name><operator pos:line="17" pos:column="28">-&gt;<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="30">detached<pos:position pos:line="17" pos:column="38"/></name></name> <operator pos:line="17" pos:column="39">&amp;&amp;<pos:position pos:line="17" pos:column="49"/></operator> <operator pos:line="17" pos:column="42">!<pos:position pos:line="17" pos:column="43"/></operator><call><name pos:line="17" pos:column="43">strcmp<pos:position pos:line="17" pos:column="49"/></name><argument_list pos:line="17" pos:column="49">(<argument><expr><name pos:line="17" pos:column="50">desc<pos:position pos:line="17" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="56">head<pos:position pos:line="17" pos:column="60"/></name></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="62"/></condition><then pos:line="17" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="25">current<pos:position pos:line="18" pos:column="32"/></name> <operator pos:line="18" pos:column="33">=<pos:position pos:line="18" pos:column="34"/></operator> <literal type="number" pos:line="18" pos:column="35">1<pos:position pos:line="18" pos:column="36"/></literal></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt></block></then>
		<else pos:line="19" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="25">color<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">=<pos:position pos:line="20" pos:column="32"/></operator> <name pos:line="20" pos:column="33">BRANCH_COLOR_LOCAL<pos:position pos:line="20" pos:column="51"/></name></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt></block></else></if>
		<break pos:line="21" pos:column="17">break;<pos:position pos:line="21" pos:column="23"/></break>
	<case pos:line="22" pos:column="9">case <expr><name pos:line="22" pos:column="14">FILTER_REFS_REMOTES<pos:position pos:line="22" pos:column="33"/></name></expr>:<pos:position pos:line="22" pos:column="34"/></case>
		<expr_stmt><expr><name pos:line="23" pos:column="17">prefix_to_skip<pos:position pos:line="23" pos:column="31"/></name> <operator pos:line="23" pos:column="32">=<pos:position pos:line="23" pos:column="33"/></operator> <literal type="string" pos:line="23" pos:column="34">"refs/remotes/"<pos:position pos:line="23" pos:column="49"/></literal></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">skip_prefix<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><name pos:line="24" pos:column="29">desc<pos:position pos:line="24" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="35">prefix_to_skip<pos:position pos:line="24" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="51">&amp;<pos:position pos:line="24" pos:column="56"/></operator><name pos:line="24" pos:column="52">desc<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name pos:line="25" pos:column="17">color<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">=<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="25">BRANCH_COLOR_REMOTE<pos:position pos:line="25" pos:column="44"/></name></expr>;<pos:position pos:line="25" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="26" pos:column="17">prefix_to_show<pos:position pos:line="26" pos:column="31"/></name> <operator pos:line="26" pos:column="32">=<pos:position pos:line="26" pos:column="33"/></operator> <name pos:line="26" pos:column="34">remote_prefix<pos:position pos:line="26" pos:column="47"/></name></expr>;<pos:position pos:line="26" pos:column="48"/></expr_stmt>
		<break pos:line="27" pos:column="17">break;<pos:position pos:line="27" pos:column="23"/></break>
	<case pos:line="28" pos:column="9">case <expr><name pos:line="28" pos:column="14">FILTER_REFS_DETACHED_HEAD<pos:position pos:line="28" pos:column="39"/></name></expr>:<pos:position pos:line="28" pos:column="40"/></case>
		<expr_stmt><expr><name pos:line="29" pos:column="17">desc<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <name pos:line="29" pos:column="24">to_free<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">=<pos:position pos:line="29" pos:column="33"/></operator> <call><name pos:line="29" pos:column="34">get_head_description<pos:position pos:line="29" pos:column="54"/></name><argument_list pos:line="29" pos:column="54">()<pos:position pos:line="29" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">current<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">=<pos:position pos:line="30" pos:column="26"/></operator> <literal type="number" pos:line="30" pos:column="27">1<pos:position pos:line="30" pos:column="28"/></literal></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
		<break pos:line="31" pos:column="17">break;<pos:position pos:line="31" pos:column="23"/></break>
	<default pos:line="32" pos:column="9">default:<pos:position pos:line="32" pos:column="17"/></default>
		<expr_stmt><expr><name pos:line="33" pos:column="17">color<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">=<pos:position pos:line="33" pos:column="24"/></operator> <name pos:line="33" pos:column="25">BRANCH_COLOR_PLAIN<pos:position pos:line="33" pos:column="43"/></name></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
		<break pos:line="34" pos:column="17">break;<pos:position pos:line="34" pos:column="23"/></break>
	}<pos:position pos:line="35" pos:column="10"/></block></switch>

	<expr_stmt><expr><name pos:line="37" pos:column="9">c<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <literal type="char" pos:line="37" pos:column="13">' '<pos:position pos:line="37" pos:column="16"/></literal></expr>;<pos:position pos:line="37" pos:column="17"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">current<pos:position pos:line="38" pos:column="20"/></name></expr>)<pos:position pos:line="38" pos:column="21"/></condition><then pos:line="38" pos:column="21"> <block pos:line="38" pos:column="22">{
		<expr_stmt><expr><name pos:line="39" pos:column="17">c<pos:position pos:line="39" pos:column="18"/></name> <operator pos:line="39" pos:column="19">=<pos:position pos:line="39" pos:column="20"/></operator> <literal type="char" pos:line="39" pos:column="21">'*'<pos:position pos:line="39" pos:column="24"/></literal></expr>;<pos:position pos:line="39" pos:column="25"/></expr_stmt>
		<expr_stmt><expr><name pos:line="40" pos:column="17">color<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">=<pos:position pos:line="40" pos:column="24"/></operator> <name pos:line="40" pos:column="25">BRANCH_COLOR_CURRENT<pos:position pos:line="40" pos:column="45"/></name></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="43" pos:column="9">strbuf_addf<pos:position pos:line="43" pos:column="20"/></name><argument_list pos:line="43" pos:column="20">(<argument><expr><operator pos:line="43" pos:column="21">&amp;<pos:position pos:line="43" pos:column="26"/></operator><name pos:line="43" pos:column="22">name<pos:position pos:line="43" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="28">"%s%s"<pos:position pos:line="43" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="36">prefix_to_show<pos:position pos:line="43" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="52">desc<pos:position pos:line="43" pos:column="56"/></name></expr></argument>)<pos:position pos:line="43" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="58"/></expr_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name><name pos:line="44" pos:column="13">filter<pos:position pos:line="44" pos:column="19"/></name><operator pos:line="44" pos:column="19">-&gt;<pos:position pos:line="44" pos:column="24"/></operator><name pos:line="44" pos:column="21">verbose<pos:position pos:line="44" pos:column="28"/></name></name></expr>)<pos:position pos:line="44" pos:column="29"/></condition><then pos:line="44" pos:column="29"> <block pos:line="44" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">int<pos:position pos:line="45" pos:column="20"/></name></type> <name pos:line="45" pos:column="21">utf8_compensation<pos:position pos:line="45" pos:column="38"/></name> <init pos:line="45" pos:column="39">= <expr><call><name pos:line="45" pos:column="41">strlen<pos:position pos:line="45" pos:column="47"/></name><argument_list pos:line="45" pos:column="47">(<argument><expr><name><name pos:line="45" pos:column="48">name<pos:position pos:line="45" pos:column="52"/></name><operator pos:line="45" pos:column="52">.<pos:position pos:line="45" pos:column="53"/></operator><name pos:line="45" pos:column="53">buf<pos:position pos:line="45" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="57"/></argument_list></call> <operator pos:line="45" pos:column="58">-<pos:position pos:line="45" pos:column="59"/></operator> <call><name pos:line="45" pos:column="60">utf8_strwidth<pos:position pos:line="45" pos:column="73"/></name><argument_list pos:line="45" pos:column="73">(<argument><expr><name><name pos:line="45" pos:column="74">name<pos:position pos:line="45" pos:column="78"/></name><operator pos:line="45" pos:column="78">.<pos:position pos:line="45" pos:column="79"/></operator><name pos:line="45" pos:column="79">buf<pos:position pos:line="45" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="45" pos:column="84"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">strbuf_addf<pos:position pos:line="46" pos:column="28"/></name><argument_list pos:line="46" pos:column="28">(<argument><expr><operator pos:line="46" pos:column="29">&amp;<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="30">out<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="35">"%c %s%-*s%s"<pos:position pos:line="46" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="50">c<pos:position pos:line="46" pos:column="51"/></name></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="53">branch_get_color<pos:position pos:line="46" pos:column="69"/></name><argument_list pos:line="46" pos:column="69">(<argument><expr><name pos:line="46" pos:column="70">color<pos:position pos:line="46" pos:column="75"/></name></expr></argument>)<pos:position pos:line="46" pos:column="76"/></argument_list></call></expr></argument>,
			    <argument><expr><name pos:line="47" pos:column="29">maxwidth<pos:position pos:line="47" pos:column="37"/></name> <operator pos:line="47" pos:column="38">+<pos:position pos:line="47" pos:column="39"/></operator> <name pos:line="47" pos:column="40">utf8_compensation<pos:position pos:line="47" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="59">name<pos:position pos:line="47" pos:column="63"/></name><operator pos:line="47" pos:column="63">.<pos:position pos:line="47" pos:column="64"/></operator><name pos:line="47" pos:column="64">buf<pos:position pos:line="47" pos:column="67"/></name></name></expr></argument>,
			    <argument><expr><call><name pos:line="48" pos:column="29">branch_get_color<pos:position pos:line="48" pos:column="45"/></name><argument_list pos:line="48" pos:column="45">(<argument><expr><name pos:line="48" pos:column="46">BRANCH_COLOR_RESET<pos:position pos:line="48" pos:column="64"/></name></expr></argument>)<pos:position pos:line="48" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="67"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></then> <else pos:line="49" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="17">strbuf_addf<pos:position pos:line="50" pos:column="28"/></name><argument_list pos:line="50" pos:column="28">(<argument><expr><operator pos:line="50" pos:column="29">&amp;<pos:position pos:line="50" pos:column="34"/></operator><name pos:line="50" pos:column="30">out<pos:position pos:line="50" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="35">"%c %s%s%s"<pos:position pos:line="50" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="48">c<pos:position pos:line="50" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="50" pos:column="51">branch_get_color<pos:position pos:line="50" pos:column="67"/></name><argument_list pos:line="50" pos:column="67">(<argument><expr><name pos:line="50" pos:column="68">color<pos:position pos:line="50" pos:column="73"/></name></expr></argument>)<pos:position pos:line="50" pos:column="74"/></argument_list></call></expr></argument>,
			    <argument><expr><name><name pos:line="51" pos:column="29">name<pos:position pos:line="51" pos:column="33"/></name><operator pos:line="51" pos:column="33">.<pos:position pos:line="51" pos:column="34"/></operator><name pos:line="51" pos:column="34">buf<pos:position pos:line="51" pos:column="37"/></name></name></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="39">branch_get_color<pos:position pos:line="51" pos:column="55"/></name><argument_list pos:line="51" pos:column="55">(<argument><expr><name pos:line="51" pos:column="56">BRANCH_COLOR_RESET<pos:position pos:line="51" pos:column="74"/></name></expr></argument>)<pos:position pos:line="51" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="77"/></expr_stmt></block></else></if>

	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name><name pos:line="53" pos:column="13">item<pos:position pos:line="53" pos:column="17"/></name><operator pos:line="53" pos:column="17">-&gt;<pos:position pos:line="53" pos:column="22"/></operator><name pos:line="53" pos:column="19">symref<pos:position pos:line="53" pos:column="25"/></name></name></expr>)<pos:position pos:line="53" pos:column="26"/></condition><then pos:line="53" pos:column="26"> <block pos:line="53" pos:column="27">{
		<decl_stmt><decl><type><specifier pos:line="54" pos:column="17">const<pos:position pos:line="54" pos:column="22"/></specifier> <name pos:line="54" pos:column="23">char<pos:position pos:line="54" pos:column="27"/></name> <modifier pos:line="54" pos:column="28">*<pos:position pos:line="54" pos:column="29"/></modifier></type><name pos:line="54" pos:column="29">symref<pos:position pos:line="54" pos:column="35"/></name> <init pos:line="54" pos:column="36">= <expr><name><name pos:line="54" pos:column="38">item<pos:position pos:line="54" pos:column="42"/></name><operator pos:line="54" pos:column="42">-&gt;<pos:position pos:line="54" pos:column="47"/></operator><name pos:line="54" pos:column="44">symref<pos:position pos:line="54" pos:column="50"/></name></name></expr></init></decl>;<pos:position pos:line="54" pos:column="51"/></decl_stmt>
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name pos:line="55" pos:column="21">prefix_to_skip<pos:position pos:line="55" pos:column="35"/></name></expr>)<pos:position pos:line="55" pos:column="36"/></condition><then pos:line="55" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="25">skip_prefix<pos:position pos:line="56" pos:column="36"/></name><argument_list pos:line="56" pos:column="36">(<argument><expr><name pos:line="56" pos:column="37">symref<pos:position pos:line="56" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="45">prefix_to_skip<pos:position pos:line="56" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="61">&amp;<pos:position pos:line="56" pos:column="66"/></operator><name pos:line="56" pos:column="62">symref<pos:position pos:line="56" pos:column="68"/></name></expr></argument>)<pos:position pos:line="56" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="70"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">strbuf_addf<pos:position pos:line="57" pos:column="28"/></name><argument_list pos:line="57" pos:column="28">(<argument><expr><operator pos:line="57" pos:column="29">&amp;<pos:position pos:line="57" pos:column="34"/></operator><name pos:line="57" pos:column="30">out<pos:position pos:line="57" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="35">" -&gt; %s"<pos:position pos:line="57" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="45">symref<pos:position pos:line="57" pos:column="51"/></name></expr></argument>)<pos:position pos:line="57" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="53"/></expr_stmt>
	}<pos:position pos:line="58" pos:column="10"/></block></then>
	<elseif pos:line="59" pos:column="9">else <if pos:line="59" pos:column="14">if <condition pos:line="59" pos:column="17">(<expr><name><name pos:line="59" pos:column="18">filter<pos:position pos:line="59" pos:column="24"/></name><operator pos:line="59" pos:column="24">-&gt;<pos:position pos:line="59" pos:column="29"/></operator><name pos:line="59" pos:column="26">verbose<pos:position pos:line="59" pos:column="33"/></name></name></expr>)<pos:position pos:line="59" pos:column="34"/></condition><then pos:line="59" pos:column="34">
		<comment type="block" pos:line="60" pos:column="17">/* " f7c0c00 [ahead 58, behind 197] vcs-svn: drop obj_pool.h" */</comment>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="17">add_verbose_info<pos:position pos:line="61" pos:column="33"/></name><argument_list pos:line="61" pos:column="33">(<argument><expr><operator pos:line="61" pos:column="34">&amp;<pos:position pos:line="61" pos:column="39"/></operator><name pos:line="61" pos:column="35">out<pos:position pos:line="61" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="40">item<pos:position pos:line="61" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="46">filter<pos:position pos:line="61" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="54">desc<pos:position pos:line="61" pos:column="58"/></name></expr></argument>)<pos:position pos:line="61" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="60"/></expr_stmt></block></then></if></elseif></if>
	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><call><name pos:line="62" pos:column="13">column_active<pos:position pos:line="62" pos:column="26"/></name><argument_list pos:line="62" pos:column="26">(<argument><expr><name pos:line="62" pos:column="27">colopts<pos:position pos:line="62" pos:column="34"/></name></expr></argument>)<pos:position pos:line="62" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="36"/></condition><then pos:line="62" pos:column="36"> <block pos:line="62" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">assert<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">(<argument><expr><operator pos:line="63" pos:column="24">!<pos:position pos:line="63" pos:column="25"/></operator><name><name pos:line="63" pos:column="25">filter<pos:position pos:line="63" pos:column="31"/></name><operator pos:line="63" pos:column="31">-&gt;<pos:position pos:line="63" pos:column="36"/></operator><name pos:line="63" pos:column="33">verbose<pos:position pos:line="63" pos:column="40"/></name></name> <operator pos:line="63" pos:column="41">&amp;&amp;<pos:position pos:line="63" pos:column="51"/></operator> <literal type="string" pos:line="63" pos:column="44">"--column and --verbose are incompatible"<pos:position pos:line="63" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="87"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">string_list_append<pos:position pos:line="64" pos:column="35"/></name><argument_list pos:line="64" pos:column="35">(<argument><expr><operator pos:line="64" pos:column="36">&amp;<pos:position pos:line="64" pos:column="41"/></operator><name pos:line="64" pos:column="37">output<pos:position pos:line="64" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="45">out<pos:position pos:line="64" pos:column="48"/></name><operator pos:line="64" pos:column="48">.<pos:position pos:line="64" pos:column="49"/></operator><name pos:line="64" pos:column="49">buf<pos:position pos:line="64" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="65" pos:column="10"/></block></then> <else pos:line="65" pos:column="11">else <block pos:line="65" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">printf<pos:position pos:line="66" pos:column="23"/></name><argument_list pos:line="66" pos:column="23">(<argument><expr><literal type="string" pos:line="66" pos:column="24">"%s\n"<pos:position pos:line="66" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="32">out<pos:position pos:line="66" pos:column="35"/></name><operator pos:line="66" pos:column="35">.<pos:position pos:line="66" pos:column="36"/></operator><name pos:line="66" pos:column="36">buf<pos:position pos:line="66" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="68" pos:column="9">strbuf_release<pos:position pos:line="68" pos:column="23"/></name><argument_list pos:line="68" pos:column="23">(<argument><expr><operator pos:line="68" pos:column="24">&amp;<pos:position pos:line="68" pos:column="29"/></operator><name pos:line="68" pos:column="25">name<pos:position pos:line="68" pos:column="29"/></name></expr></argument>)<pos:position pos:line="68" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="69" pos:column="9">strbuf_release<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><operator pos:line="69" pos:column="24">&amp;<pos:position pos:line="69" pos:column="29"/></operator><name pos:line="69" pos:column="25">out<pos:position pos:line="69" pos:column="28"/></name></expr></argument>)<pos:position pos:line="69" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="70" pos:column="9">free<pos:position pos:line="70" pos:column="13"/></name><argument_list pos:line="70" pos:column="13">(<argument><expr><name pos:line="70" pos:column="14">to_free<pos:position pos:line="70" pos:column="21"/></name></expr></argument>)<pos:position pos:line="70" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="23"/></expr_stmt>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
