<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6978_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">expand_bkref_cache<pos:position pos:line="3" pos:column="19"/></name> <parameter_list pos:line="3" pos:column="20">(<parameter><decl><type><name pos:line="3" pos:column="21">re_match_context_t<pos:position pos:line="3" pos:column="39"/></name> <modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier></type><name pos:line="3" pos:column="41">mctx<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="47">re_node_set<pos:position pos:line="3" pos:column="58"/></name> <modifier pos:line="3" pos:column="59">*<pos:position pos:line="3" pos:column="60"/></modifier></type><name pos:line="3" pos:column="60">cur_nodes<pos:position pos:line="3" pos:column="69"/></name></decl></parameter>,
		    <parameter><decl><type><name pos:line="4" pos:column="21">int<pos:position pos:line="4" pos:column="24"/></name></type> <name pos:line="4" pos:column="25">cur_str<pos:position pos:line="4" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="34">int<pos:position pos:line="4" pos:column="37"/></name></type> <name pos:line="4" pos:column="38">subexp_num<pos:position pos:line="4" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="50">int<pos:position pos:line="4" pos:column="53"/></name></type> <name pos:line="4" pos:column="54">type<pos:position pos:line="4" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="59"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">re_dfa_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier><specifier pos:line="6" pos:column="19">const<pos:position pos:line="6" pos:column="24"/></specifier></type> <name pos:line="6" pos:column="25">dfa<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name><name pos:line="6" pos:column="31">mctx<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">dfa<pos:position pos:line="6" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">reg_errcode_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">err<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">cache_idx_start<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><call><name pos:line="8" pos:column="25">search_cur_bkref_entry<pos:position pos:line="8" pos:column="47"/></name> <argument_list pos:line="8" pos:column="48">(<argument><expr><name pos:line="8" pos:column="49">mctx<pos:position pos:line="8" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="55">cur_str<pos:position pos:line="8" pos:column="62"/></name></expr></argument>)<pos:position pos:line="8" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="64"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">re_backref_cache_entry<pos:position pos:line="9" pos:column="32"/></name></name> <modifier pos:line="9" pos:column="33">*<pos:position pos:line="9" pos:column="34"/></modifier></type><name pos:line="9" pos:column="34">ent<pos:position pos:line="9" pos:column="37"/></name></decl>;<pos:position pos:line="9" pos:column="38"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">cache_idx_start<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">==<pos:position pos:line="11" pos:column="25"/></operator> <operator pos:line="11" pos:column="26">-<pos:position pos:line="11" pos:column="27"/></operator><literal type="number" pos:line="11" pos:column="27">1<pos:position pos:line="11" pos:column="28"/></literal></expr>)<pos:position pos:line="11" pos:column="29"/></condition><then pos:line="11" pos:column="29">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">REG_NOERROR<pos:position pos:line="12" pos:column="23"/></name></expr>;<pos:position pos:line="12" pos:column="24"/></return></block></then></if>

 <label><name pos:line="14" pos:column="2">restart<pos:position pos:line="14" pos:column="9"/></name>:<pos:position pos:line="14" pos:column="10"/></label>
  <expr_stmt><expr><name pos:line="15" pos:column="3">ent<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <name><name pos:line="15" pos:column="9">mctx<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">-&gt;<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="15">bkref_ents<pos:position pos:line="15" pos:column="25"/></name></name> <operator pos:line="15" pos:column="26">+<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="28">cache_idx_start<pos:position pos:line="15" pos:column="43"/></name></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt>
  <do pos:line="16" pos:column="3">do
    <block pos:line="17" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="18" pos:column="7">int<pos:position pos:line="18" pos:column="10"/></name></type> <name pos:line="18" pos:column="11">to_idx<pos:position pos:line="18" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="18" pos:column="19">next_node<pos:position pos:line="18" pos:column="28"/></name></decl>;<pos:position pos:line="18" pos:column="29"/></decl_stmt>

      <comment type="block" pos:line="20" pos:column="7">/* Is this entry ENT is appropriate?  */</comment>
      <if pos:line="21" pos:column="7">if <condition pos:line="21" pos:column="10">(<expr><operator pos:line="21" pos:column="11">!<pos:position pos:line="21" pos:column="12"/></operator><call><name pos:line="21" pos:column="12">re_node_set_contains<pos:position pos:line="21" pos:column="32"/></name> <argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">cur_nodes<pos:position pos:line="21" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="45">ent<pos:position pos:line="21" pos:column="48"/></name><operator pos:line="21" pos:column="48">-&gt;<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="50">node<pos:position pos:line="21" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="56"/></condition><then pos:line="21" pos:column="56">
	<block type="pseudo"><continue pos:line="22" pos:column="9">continue;<pos:position pos:line="22" pos:column="18"/></continue></block></then></if> <comment type="block" pos:line="22" pos:column="19">/* No.  */</comment>

      <expr_stmt><expr><name pos:line="24" pos:column="7">to_idx<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <name pos:line="24" pos:column="16">cur_str<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">+<pos:position pos:line="24" pos:column="25"/></operator> <name><name pos:line="24" pos:column="26">ent<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">-&gt;<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="31">subexp_to<pos:position pos:line="24" pos:column="40"/></name></name> <operator pos:line="24" pos:column="41">-<pos:position pos:line="24" pos:column="42"/></operator> <name><name pos:line="24" pos:column="43">ent<pos:position pos:line="24" pos:column="46"/></name><operator pos:line="24" pos:column="46">-&gt;<pos:position pos:line="24" pos:column="51"/></operator><name pos:line="24" pos:column="48">subexp_from<pos:position pos:line="24" pos:column="59"/></name></name></expr>;<pos:position pos:line="24" pos:column="60"/></expr_stmt>
      <comment type="block" pos:line="25" pos:column="7">/* Calculate the destination of the back reference, and append it
	 to MCTX-&gt;STATE_LOG.  */</comment>
      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><name pos:line="27" pos:column="11">to_idx<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">==<pos:position pos:line="27" pos:column="20"/></operator> <name pos:line="27" pos:column="21">cur_str<pos:position pos:line="27" pos:column="28"/></name></expr>)<pos:position pos:line="27" pos:column="29"/></condition><then pos:line="27" pos:column="29">
	<block pos:line="28" pos:column="9">{
	  <comment type="block" pos:line="29" pos:column="11">/* The backreference did epsilon transit, we must re-check all the
	     node in the current state.  */</comment>
	  <decl_stmt><decl><type><name pos:line="31" pos:column="11">re_node_set<pos:position pos:line="31" pos:column="22"/></name></type> <name pos:line="31" pos:column="23">new_dests<pos:position pos:line="31" pos:column="32"/></name></decl>;<pos:position pos:line="31" pos:column="33"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="32" pos:column="11">reg_errcode_t<pos:position pos:line="32" pos:column="24"/></name></type> <name pos:line="32" pos:column="25">err2<pos:position pos:line="32" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="32" pos:column="31">err3<pos:position pos:line="32" pos:column="35"/></name></decl>;<pos:position pos:line="32" pos:column="36"/></decl_stmt>
	  <expr_stmt><expr><name pos:line="33" pos:column="11">next_node<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <name><name pos:line="33" pos:column="23">dfa<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">-&gt;<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="28">edests<pos:position pos:line="33" pos:column="34"/></name><index pos:line="33" pos:column="34">[<expr><name><name pos:line="33" pos:column="35">ent<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">-&gt;<pos:position pos:line="33" pos:column="43"/></operator><name pos:line="33" pos:column="40">node<pos:position pos:line="33" pos:column="44"/></name></name></expr>]<pos:position pos:line="33" pos:column="45"/></index></name><operator pos:line="33" pos:column="45">.<pos:position pos:line="33" pos:column="46"/></operator><name><name pos:line="33" pos:column="46">elems<pos:position pos:line="33" pos:column="51"/></name><index pos:line="33" pos:column="51">[<expr><literal type="number" pos:line="33" pos:column="52">0<pos:position pos:line="33" pos:column="53"/></literal></expr>]<pos:position pos:line="33" pos:column="54"/></index></name></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
	  <if pos:line="34" pos:column="11">if <condition pos:line="34" pos:column="14">(<expr><call><name pos:line="34" pos:column="15">re_node_set_contains<pos:position pos:line="34" pos:column="35"/></name> <argument_list pos:line="34" pos:column="36">(<argument><expr><name pos:line="34" pos:column="37">cur_nodes<pos:position pos:line="34" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="48">next_node<pos:position pos:line="34" pos:column="57"/></name></expr></argument>)<pos:position pos:line="34" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="59"/></condition><then pos:line="34" pos:column="59">
	    <block type="pseudo"><continue pos:line="35" pos:column="13">continue;<pos:position pos:line="35" pos:column="22"/></continue></block></then></if>
	  <expr_stmt><expr><name pos:line="36" pos:column="11">err<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">=<pos:position pos:line="36" pos:column="16"/></operator> <call><name pos:line="36" pos:column="17">re_node_set_init_1<pos:position pos:line="36" pos:column="35"/></name> <argument_list pos:line="36" pos:column="36">(<argument><expr><operator pos:line="36" pos:column="37">&amp;<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="38">new_dests<pos:position pos:line="36" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">next_node<pos:position pos:line="36" pos:column="58"/></name></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="60"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="37" pos:column="11">err2<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">check_arrival_expand_ecl<pos:position pos:line="37" pos:column="42"/></name> <argument_list pos:line="37" pos:column="43">(<argument><expr><name pos:line="37" pos:column="44">dfa<pos:position pos:line="37" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="49">&amp;<pos:position pos:line="37" pos:column="54"/></operator><name pos:line="37" pos:column="50">new_dests<pos:position pos:line="37" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="61">subexp_num<pos:position pos:line="37" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="73">type<pos:position pos:line="37" pos:column="77"/></name></expr></argument>)<pos:position pos:line="37" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="79"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="38" pos:column="11">err3<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <call><name pos:line="38" pos:column="18">re_node_set_merge<pos:position pos:line="38" pos:column="35"/></name> <argument_list pos:line="38" pos:column="36">(<argument><expr><name pos:line="38" pos:column="37">cur_nodes<pos:position pos:line="38" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="48">&amp;<pos:position pos:line="38" pos:column="53"/></operator><name pos:line="38" pos:column="49">new_dests<pos:position pos:line="38" pos:column="58"/></name></expr></argument>)<pos:position pos:line="38" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="60"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="39" pos:column="11">re_node_set_free<pos:position pos:line="39" pos:column="27"/></name> <argument_list pos:line="39" pos:column="28">(<argument><expr><operator pos:line="39" pos:column="29">&amp;<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="30">new_dests<pos:position pos:line="39" pos:column="39"/></name></expr></argument>)<pos:position pos:line="39" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="41"/></expr_stmt>
	  <if pos:line="40" pos:column="11">if <condition pos:line="40" pos:column="14">(<expr><call><name pos:line="40" pos:column="15">BE<pos:position pos:line="40" pos:column="17"/></name> <argument_list pos:line="40" pos:column="18">(<argument><expr><name pos:line="40" pos:column="19">err<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">!=<pos:position pos:line="40" pos:column="25"/></operator> <name pos:line="40" pos:column="26">REG_NOERROR<pos:position pos:line="40" pos:column="37"/></name> <operator pos:line="40" pos:column="38">||<pos:position pos:line="40" pos:column="40"/></operator> <name pos:line="40" pos:column="41">err2<pos:position pos:line="40" pos:column="45"/></name> <operator pos:line="40" pos:column="46">!=<pos:position pos:line="40" pos:column="48"/></operator> <name pos:line="40" pos:column="49">REG_NOERROR<pos:position pos:line="40" pos:column="60"/></name>
		  <operator pos:line="41" pos:column="19">||<pos:position pos:line="41" pos:column="21"/></operator> <name pos:line="41" pos:column="22">err3<pos:position pos:line="41" pos:column="26"/></name> <operator pos:line="41" pos:column="27">!=<pos:position pos:line="41" pos:column="29"/></operator> <name pos:line="41" pos:column="30">REG_NOERROR<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="43">0<pos:position pos:line="41" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="46"/></condition><then pos:line="41" pos:column="46">
	    <block pos:line="42" pos:column="13">{
	      <expr_stmt><expr><name pos:line="43" pos:column="15">err<pos:position pos:line="43" pos:column="18"/></name> <operator pos:line="43" pos:column="19">=<pos:position pos:line="43" pos:column="20"/></operator> <operator pos:line="43" pos:column="21">(<pos:position pos:line="43" pos:column="22"/></operator><ternary><condition><expr><name pos:line="43" pos:column="22">err<pos:position pos:line="43" pos:column="25"/></name> <operator pos:line="43" pos:column="26">!=<pos:position pos:line="43" pos:column="28"/></operator> <name pos:line="43" pos:column="29">REG_NOERROR<pos:position pos:line="43" pos:column="40"/></name></expr> ?<pos:position pos:line="43" pos:column="42"/></condition><then pos:line="43" pos:column="42"> <expr><name pos:line="43" pos:column="43">err<pos:position pos:line="43" pos:column="46"/></name></expr>
		     <pos:position pos:line="44" pos:column="8"/></then><else pos:line="44" pos:column="22">: <expr><operator pos:line="44" pos:column="24">(<pos:position pos:line="44" pos:column="25"/></operator><ternary><condition><expr><name pos:line="44" pos:column="25">err2<pos:position pos:line="44" pos:column="29"/></name> <operator pos:line="44" pos:column="30">!=<pos:position pos:line="44" pos:column="32"/></operator> <name pos:line="44" pos:column="33">REG_NOERROR<pos:position pos:line="44" pos:column="44"/></name></expr> ?<pos:position pos:line="44" pos:column="46"/></condition><then pos:line="44" pos:column="46"> <expr><name pos:line="44" pos:column="47">err2<pos:position pos:line="44" pos:column="51"/></name></expr> <pos:position pos:line="44" pos:column="52"/></then><else pos:line="44" pos:column="52">: <expr><name pos:line="44" pos:column="54">err3<pos:position pos:line="44" pos:column="58"/></name></expr></else></ternary><operator pos:line="44" pos:column="58">)<pos:position pos:line="44" pos:column="59"/></operator></expr></else></ternary><operator pos:line="44" pos:column="59">)<pos:position pos:line="44" pos:column="60"/></operator></expr>;<pos:position pos:line="44" pos:column="61"/></expr_stmt>
	      <return pos:line="45" pos:column="15">return <expr><name pos:line="45" pos:column="22">err<pos:position pos:line="45" pos:column="25"/></name></expr>;<pos:position pos:line="45" pos:column="26"/></return>
	    }<pos:position pos:line="46" pos:column="14"/></block></then></if>
	  <comment type="block" pos:line="47" pos:column="11">/* TODO: It is still inefficient...  */</comment>
	  <goto pos:line="48" pos:column="11">goto <name pos:line="48" pos:column="16">restart<pos:position pos:line="48" pos:column="23"/></name>;<pos:position pos:line="48" pos:column="24"/></goto>
	}<pos:position pos:line="49" pos:column="10"/></block></then>
      <else pos:line="50" pos:column="7">else
	<block pos:line="51" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="52" pos:column="11">re_node_set<pos:position pos:line="52" pos:column="22"/></name></type> <name pos:line="52" pos:column="23">union_set<pos:position pos:line="52" pos:column="32"/></name></decl>;<pos:position pos:line="52" pos:column="33"/></decl_stmt>
	  <expr_stmt><expr><name pos:line="53" pos:column="11">next_node<pos:position pos:line="53" pos:column="20"/></name> <operator pos:line="53" pos:column="21">=<pos:position pos:line="53" pos:column="22"/></operator> <name><name pos:line="53" pos:column="23">dfa<pos:position pos:line="53" pos:column="26"/></name><operator pos:line="53" pos:column="26">-&gt;<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="28">nexts<pos:position pos:line="53" pos:column="33"/></name><index pos:line="53" pos:column="33">[<expr><name><name pos:line="53" pos:column="34">ent<pos:position pos:line="53" pos:column="37"/></name><operator pos:line="53" pos:column="37">-&gt;<pos:position pos:line="53" pos:column="42"/></operator><name pos:line="53" pos:column="39">node<pos:position pos:line="53" pos:column="43"/></name></name></expr>]<pos:position pos:line="53" pos:column="44"/></index></name></expr>;<pos:position pos:line="53" pos:column="45"/></expr_stmt>
	  <if pos:line="54" pos:column="11">if <condition pos:line="54" pos:column="14">(<expr><name><name pos:line="54" pos:column="15">mctx<pos:position pos:line="54" pos:column="19"/></name><operator pos:line="54" pos:column="19">-&gt;<pos:position pos:line="54" pos:column="24"/></operator><name pos:line="54" pos:column="21">state_log<pos:position pos:line="54" pos:column="30"/></name><index pos:line="54" pos:column="30">[<expr><name pos:line="54" pos:column="31">to_idx<pos:position pos:line="54" pos:column="37"/></name></expr>]<pos:position pos:line="54" pos:column="38"/></index></name></expr>)<pos:position pos:line="54" pos:column="39"/></condition><then pos:line="54" pos:column="39">
	    <block pos:line="55" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="56" pos:column="15">int<pos:position pos:line="56" pos:column="18"/></name></type> <name pos:line="56" pos:column="19">ret<pos:position pos:line="56" pos:column="22"/></name></decl>;<pos:position pos:line="56" pos:column="23"/></decl_stmt>
	      <if pos:line="57" pos:column="15">if <condition pos:line="57" pos:column="18">(<expr><call><name pos:line="57" pos:column="19">re_node_set_contains<pos:position pos:line="57" pos:column="39"/></name> <argument_list pos:line="57" pos:column="40">(<argument><expr><operator pos:line="57" pos:column="41">&amp;<pos:position pos:line="57" pos:column="46"/></operator><name><name pos:line="57" pos:column="42">mctx<pos:position pos:line="57" pos:column="46"/></name><operator pos:line="57" pos:column="46">-&gt;<pos:position pos:line="57" pos:column="51"/></operator><name pos:line="57" pos:column="48">state_log<pos:position pos:line="57" pos:column="57"/></name><index pos:line="57" pos:column="57">[<expr><name pos:line="57" pos:column="58">to_idx<pos:position pos:line="57" pos:column="64"/></name></expr>]<pos:position pos:line="57" pos:column="65"/></index></name><operator pos:line="57" pos:column="65">-&gt;<pos:position pos:line="57" pos:column="70"/></operator><name pos:line="57" pos:column="67">nodes<pos:position pos:line="57" pos:column="72"/></name></expr></argument>,
					<argument><expr><name pos:line="58" pos:column="41">next_node<pos:position pos:line="58" pos:column="50"/></name></expr></argument>)<pos:position pos:line="58" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="52"/></condition><then pos:line="58" pos:column="52">
		<block type="pseudo"><continue pos:line="59" pos:column="17">continue;<pos:position pos:line="59" pos:column="26"/></continue></block></then></if>
	      <expr_stmt><expr><name pos:line="60" pos:column="15">err<pos:position pos:line="60" pos:column="18"/></name> <operator pos:line="60" pos:column="19">=<pos:position pos:line="60" pos:column="20"/></operator> <call><name pos:line="60" pos:column="21">re_node_set_init_copy<pos:position pos:line="60" pos:column="42"/></name> <argument_list pos:line="60" pos:column="43">(<argument><expr><operator pos:line="60" pos:column="44">&amp;<pos:position pos:line="60" pos:column="49"/></operator><name pos:line="60" pos:column="45">union_set<pos:position pos:line="60" pos:column="54"/></name></expr></argument>,
					   <argument><expr><operator pos:line="61" pos:column="44">&amp;<pos:position pos:line="61" pos:column="49"/></operator><name><name pos:line="61" pos:column="45">mctx<pos:position pos:line="61" pos:column="49"/></name><operator pos:line="61" pos:column="49">-&gt;<pos:position pos:line="61" pos:column="54"/></operator><name pos:line="61" pos:column="51">state_log<pos:position pos:line="61" pos:column="60"/></name><index pos:line="61" pos:column="60">[<expr><name pos:line="61" pos:column="61">to_idx<pos:position pos:line="61" pos:column="67"/></name></expr>]<pos:position pos:line="61" pos:column="68"/></index></name><operator pos:line="61" pos:column="68">-&gt;<pos:position pos:line="61" pos:column="73"/></operator><name pos:line="61" pos:column="70">nodes<pos:position pos:line="61" pos:column="75"/></name></expr></argument>)<pos:position pos:line="61" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="77"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="62" pos:column="15">ret<pos:position pos:line="62" pos:column="18"/></name> <operator pos:line="62" pos:column="19">=<pos:position pos:line="62" pos:column="20"/></operator> <call><name pos:line="62" pos:column="21">re_node_set_insert<pos:position pos:line="62" pos:column="39"/></name> <argument_list pos:line="62" pos:column="40">(<argument><expr><operator pos:line="62" pos:column="41">&amp;<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="42">union_set<pos:position pos:line="62" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="53">next_node<pos:position pos:line="62" pos:column="62"/></name></expr></argument>)<pos:position pos:line="62" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="64"/></expr_stmt>
	      <if pos:line="63" pos:column="15">if <condition pos:line="63" pos:column="18">(<expr><call><name pos:line="63" pos:column="19">BE<pos:position pos:line="63" pos:column="21"/></name> <argument_list pos:line="63" pos:column="22">(<argument><expr><name pos:line="63" pos:column="23">err<pos:position pos:line="63" pos:column="26"/></name> <operator pos:line="63" pos:column="27">!=<pos:position pos:line="63" pos:column="29"/></operator> <name pos:line="63" pos:column="30">REG_NOERROR<pos:position pos:line="63" pos:column="41"/></name> <operator pos:line="63" pos:column="42">||<pos:position pos:line="63" pos:column="44"/></operator> <name pos:line="63" pos:column="45">ret<pos:position pos:line="63" pos:column="48"/></name> <operator pos:line="63" pos:column="49">&lt;<pos:position pos:line="63" pos:column="53"/></operator> <literal type="number" pos:line="63" pos:column="51">0<pos:position pos:line="63" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="54">0<pos:position pos:line="63" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="57"/></condition><then pos:line="63" pos:column="57">
		<block pos:line="64" pos:column="17">{
		  <expr_stmt><expr><call><name pos:line="65" pos:column="19">re_node_set_free<pos:position pos:line="65" pos:column="35"/></name> <argument_list pos:line="65" pos:column="36">(<argument><expr><operator pos:line="65" pos:column="37">&amp;<pos:position pos:line="65" pos:column="42"/></operator><name pos:line="65" pos:column="38">union_set<pos:position pos:line="65" pos:column="47"/></name></expr></argument>)<pos:position pos:line="65" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="49"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="66" pos:column="19">err<pos:position pos:line="66" pos:column="22"/></name> <operator pos:line="66" pos:column="23">=<pos:position pos:line="66" pos:column="24"/></operator> <ternary><condition><expr><name pos:line="66" pos:column="25">err<pos:position pos:line="66" pos:column="28"/></name> <operator pos:line="66" pos:column="29">!=<pos:position pos:line="66" pos:column="31"/></operator> <name pos:line="66" pos:column="32">REG_NOERROR<pos:position pos:line="66" pos:column="43"/></name></expr> ?<pos:position pos:line="66" pos:column="45"/></condition><then pos:line="66" pos:column="45"> <expr><name pos:line="66" pos:column="46">err<pos:position pos:line="66" pos:column="49"/></name></expr> <pos:position pos:line="66" pos:column="50"/></then><else pos:line="66" pos:column="50">: <expr><name pos:line="66" pos:column="52">REG_ESPACE<pos:position pos:line="66" pos:column="62"/></name></expr></else></ternary></expr>;<pos:position pos:line="66" pos:column="63"/></expr_stmt>
		  <return pos:line="67" pos:column="19">return <expr><name pos:line="67" pos:column="26">err<pos:position pos:line="67" pos:column="29"/></name></expr>;<pos:position pos:line="67" pos:column="30"/></return>
		}<pos:position pos:line="68" pos:column="18"/></block></then></if>
	    }<pos:position pos:line="69" pos:column="14"/></block></then>
	  <else pos:line="70" pos:column="11">else
	    <block pos:line="71" pos:column="13">{
	      <expr_stmt><expr><name pos:line="72" pos:column="15">err<pos:position pos:line="72" pos:column="18"/></name> <operator pos:line="72" pos:column="19">=<pos:position pos:line="72" pos:column="20"/></operator> <call><name pos:line="72" pos:column="21">re_node_set_init_1<pos:position pos:line="72" pos:column="39"/></name> <argument_list pos:line="72" pos:column="40">(<argument><expr><operator pos:line="72" pos:column="41">&amp;<pos:position pos:line="72" pos:column="46"/></operator><name pos:line="72" pos:column="42">union_set<pos:position pos:line="72" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="53">next_node<pos:position pos:line="72" pos:column="62"/></name></expr></argument>)<pos:position pos:line="72" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="64"/></expr_stmt>
	      <if pos:line="73" pos:column="15">if <condition pos:line="73" pos:column="18">(<expr><call><name pos:line="73" pos:column="19">BE<pos:position pos:line="73" pos:column="21"/></name> <argument_list pos:line="73" pos:column="22">(<argument><expr><name pos:line="73" pos:column="23">err<pos:position pos:line="73" pos:column="26"/></name> <operator pos:line="73" pos:column="27">!=<pos:position pos:line="73" pos:column="29"/></operator> <name pos:line="73" pos:column="30">REG_NOERROR<pos:position pos:line="73" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="43">0<pos:position pos:line="73" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="46"/></condition><then pos:line="73" pos:column="46">
		<block type="pseudo"><return pos:line="74" pos:column="17">return <expr><name pos:line="74" pos:column="24">err<pos:position pos:line="74" pos:column="27"/></name></expr>;<pos:position pos:line="74" pos:column="28"/></return></block></then></if>
	    }<pos:position pos:line="75" pos:column="14"/></block></else></if>
	  <expr_stmt><expr><name><name pos:line="76" pos:column="11">mctx<pos:position pos:line="76" pos:column="15"/></name><operator pos:line="76" pos:column="15">-&gt;<pos:position pos:line="76" pos:column="20"/></operator><name pos:line="76" pos:column="17">state_log<pos:position pos:line="76" pos:column="26"/></name><index pos:line="76" pos:column="26">[<expr><name pos:line="76" pos:column="27">to_idx<pos:position pos:line="76" pos:column="33"/></name></expr>]<pos:position pos:line="76" pos:column="34"/></index></name> <operator pos:line="76" pos:column="35">=<pos:position pos:line="76" pos:column="36"/></operator> <call><name pos:line="76" pos:column="37">re_acquire_state<pos:position pos:line="76" pos:column="53"/></name> <argument_list pos:line="76" pos:column="54">(<argument><expr><operator pos:line="76" pos:column="55">&amp;<pos:position pos:line="76" pos:column="60"/></operator><name pos:line="76" pos:column="56">err<pos:position pos:line="76" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="61">dfa<pos:position pos:line="76" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="66">&amp;<pos:position pos:line="76" pos:column="71"/></operator><name pos:line="76" pos:column="67">union_set<pos:position pos:line="76" pos:column="76"/></name></expr></argument>)<pos:position pos:line="76" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="78"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="77" pos:column="11">re_node_set_free<pos:position pos:line="77" pos:column="27"/></name> <argument_list pos:line="77" pos:column="28">(<argument><expr><operator pos:line="77" pos:column="29">&amp;<pos:position pos:line="77" pos:column="34"/></operator><name pos:line="77" pos:column="30">union_set<pos:position pos:line="77" pos:column="39"/></name></expr></argument>)<pos:position pos:line="77" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="41"/></expr_stmt>
	  <if pos:line="78" pos:column="11">if <condition pos:line="78" pos:column="14">(<expr><call><name pos:line="78" pos:column="15">BE<pos:position pos:line="78" pos:column="17"/></name> <argument_list pos:line="78" pos:column="18">(<argument><expr><name><name pos:line="78" pos:column="19">mctx<pos:position pos:line="78" pos:column="23"/></name><operator pos:line="78" pos:column="23">-&gt;<pos:position pos:line="78" pos:column="28"/></operator><name pos:line="78" pos:column="25">state_log<pos:position pos:line="78" pos:column="34"/></name><index pos:line="78" pos:column="34">[<expr><name pos:line="78" pos:column="35">to_idx<pos:position pos:line="78" pos:column="41"/></name></expr>]<pos:position pos:line="78" pos:column="42"/></index></name> <operator pos:line="78" pos:column="43">==<pos:position pos:line="78" pos:column="45"/></operator> <name pos:line="78" pos:column="46">NULL<pos:position pos:line="78" pos:column="50"/></name>
		  <operator pos:line="79" pos:column="19">&amp;&amp;<pos:position pos:line="79" pos:column="29"/></operator> <name pos:line="79" pos:column="22">err<pos:position pos:line="79" pos:column="25"/></name> <operator pos:line="79" pos:column="26">!=<pos:position pos:line="79" pos:column="28"/></operator> <name pos:line="79" pos:column="29">REG_NOERROR<pos:position pos:line="79" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="42">0<pos:position pos:line="79" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="45"/></condition><then pos:line="79" pos:column="45">
	    <block type="pseudo"><return pos:line="80" pos:column="13">return <expr><name pos:line="80" pos:column="20">err<pos:position pos:line="80" pos:column="23"/></name></expr>;<pos:position pos:line="80" pos:column="24"/></return></block></then></if>
	}<pos:position pos:line="81" pos:column="10"/></block></else></if>
    }<pos:position pos:line="82" pos:column="6"/></block>
  while <condition pos:line="83" pos:column="9">(<expr><name pos:line="83" pos:column="10">ent<pos:position pos:line="83" pos:column="13"/></name><operator pos:line="83" pos:column="13">++<pos:position pos:line="83" pos:column="15"/></operator><operator pos:line="83" pos:column="15">-&gt;<pos:position pos:line="83" pos:column="20"/></operator><name pos:line="83" pos:column="17">more<pos:position pos:line="83" pos:column="21"/></name></expr>)<pos:position pos:line="83" pos:column="22"/></condition>;<pos:position pos:line="83" pos:column="23"/></do>
  <return pos:line="84" pos:column="3">return <expr><name pos:line="84" pos:column="10">REG_NOERROR<pos:position pos:line="84" pos:column="21"/></name></expr>;<pos:position pos:line="84" pos:column="22"/></return>
}<pos:position pos:line="85" pos:column="2"/></block></function></unit>
