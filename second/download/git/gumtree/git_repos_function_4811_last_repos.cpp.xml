<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4811_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">xdl_change_compact<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">xdfile_t<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">xdf<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">xdfile_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">xdfo<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">long<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">flags<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list> <block pos:line="1" pos:column="67">{
	<decl_stmt><decl><type><name><name pos:line="2" pos:column="9">struct<pos:position pos:line="2" pos:column="15"/></name> <name pos:line="2" pos:column="16">xdlgroup<pos:position pos:line="2" pos:column="24"/></name></name></type> <name pos:line="2" pos:column="25">g<pos:position pos:line="2" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="2" pos:column="28">go<pos:position pos:line="2" pos:column="30"/></name></decl>;<pos:position pos:line="2" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">long<pos:position pos:line="3" pos:column="13"/></name></type> <name pos:line="3" pos:column="14">earliest_end<pos:position pos:line="3" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="28">end_matching_other<pos:position pos:line="3" pos:column="46"/></name></decl>;<pos:position pos:line="3" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">long<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">groupsize<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">group_init<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">(<argument><expr><name pos:line="6" pos:column="20">xdf<pos:position pos:line="6" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="25">&amp;<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="26">g<pos:position pos:line="6" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">group_init<pos:position pos:line="7" pos:column="19"/></name><argument_list pos:line="7" pos:column="19">(<argument><expr><name pos:line="7" pos:column="20">xdfo<pos:position pos:line="7" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="26">&amp;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="27">go<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>

	<while pos:line="9" pos:column="9">while <condition pos:line="9" pos:column="15">(<expr><literal type="number" pos:line="9" pos:column="16">1<pos:position pos:line="9" pos:column="17"/></literal></expr>)<pos:position pos:line="9" pos:column="18"/></condition> <block pos:line="9" pos:column="19">{
		<comment type="block" pos:line="10" pos:column="17">/* If the group is empty in the to-be-compacted file, skip it: */</comment>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name><name pos:line="11" pos:column="21">g<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">.<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">end<pos:position pos:line="11" pos:column="26"/></name></name> <operator pos:line="11" pos:column="27">==<pos:position pos:line="11" pos:column="29"/></operator> <name><name pos:line="11" pos:column="30">g<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">.<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">start<pos:position pos:line="11" pos:column="37"/></name></name></expr>)<pos:position pos:line="11" pos:column="38"/></condition><then pos:line="11" pos:column="38">
			<block type="pseudo"><goto pos:line="12" pos:column="25">goto <name pos:line="12" pos:column="30">next<pos:position pos:line="12" pos:column="34"/></name>;<pos:position pos:line="12" pos:column="35"/></goto></block></then></if>

		<comment type="block" pos:line="14" pos:column="17">/*
		 * Now shift the change up and then down as far as possible in
		 * each direction. If it bumps into any other changes, merge them.
		 */</comment>
		<do pos:line="18" pos:column="17">do <block pos:line="18" pos:column="20">{
			<expr_stmt><expr><name pos:line="19" pos:column="25">groupsize<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">=<pos:position pos:line="19" pos:column="36"/></operator> <name><name pos:line="19" pos:column="37">g<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">.<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="39">end<pos:position pos:line="19" pos:column="42"/></name></name> <operator pos:line="19" pos:column="43">-<pos:position pos:line="19" pos:column="44"/></operator> <name><name pos:line="19" pos:column="45">g<pos:position pos:line="19" pos:column="46"/></name><operator pos:line="19" pos:column="46">.<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="47">start<pos:position pos:line="19" pos:column="52"/></name></name></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt>

			<comment type="block" pos:line="21" pos:column="25">/*
			 * Keep track of the last "end" index that causes this
			 * group to align with a group of changed lines in the
			 * other file. -1 indicates that we haven't found such
			 * a match yet:
			 */</comment>
			<expr_stmt><expr><name pos:line="27" pos:column="25">end_matching_other<pos:position pos:line="27" pos:column="43"/></name> <operator pos:line="27" pos:column="44">=<pos:position pos:line="27" pos:column="45"/></operator> <operator pos:line="27" pos:column="46">-<pos:position pos:line="27" pos:column="47"/></operator><literal type="number" pos:line="27" pos:column="47">1<pos:position pos:line="27" pos:column="48"/></literal></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>

			<comment type="block" pos:line="29" pos:column="25">/* Shift the group backward as much as possible: */</comment>
			<while pos:line="30" pos:column="25">while <condition pos:line="30" pos:column="31">(<expr><operator pos:line="30" pos:column="32">!<pos:position pos:line="30" pos:column="33"/></operator><call><name pos:line="30" pos:column="33">group_slide_up<pos:position pos:line="30" pos:column="47"/></name><argument_list pos:line="30" pos:column="47">(<argument><expr><name pos:line="30" pos:column="48">xdf<pos:position pos:line="30" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="53">&amp;<pos:position pos:line="30" pos:column="58"/></operator><name pos:line="30" pos:column="54">g<pos:position pos:line="30" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="57">flags<pos:position pos:line="30" pos:column="62"/></name></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="64"/></condition>
				<block type="pseudo"><if pos:line="31" pos:column="33">if <condition pos:line="31" pos:column="36">(<expr><call><name pos:line="31" pos:column="37">group_previous<pos:position pos:line="31" pos:column="51"/></name><argument_list pos:line="31" pos:column="51">(<argument><expr><name pos:line="31" pos:column="52">xdfo<pos:position pos:line="31" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="58">&amp;<pos:position pos:line="31" pos:column="63"/></operator><name pos:line="31" pos:column="59">go<pos:position pos:line="31" pos:column="61"/></name></expr></argument>)<pos:position pos:line="31" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="63"/></condition><then pos:line="31" pos:column="63">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="41">xdl_bug<pos:position pos:line="32" pos:column="48"/></name><argument_list pos:line="32" pos:column="48">(<argument><expr><literal type="string" pos:line="32" pos:column="49">"group sync broken sliding up"<pos:position pos:line="32" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="81"/></expr_stmt></block></then></if></block></while>

			<comment type="block" pos:line="34" pos:column="25">/*
			 * This is this highest that this group can be shifted.
			 * Record its end index:
			 */</comment>
			<expr_stmt><expr><name pos:line="38" pos:column="25">earliest_end<pos:position pos:line="38" pos:column="37"/></name> <operator pos:line="38" pos:column="38">=<pos:position pos:line="38" pos:column="39"/></operator> <name><name pos:line="38" pos:column="40">g<pos:position pos:line="38" pos:column="41"/></name><operator pos:line="38" pos:column="41">.<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="42">end<pos:position pos:line="38" pos:column="45"/></name></name></expr>;<pos:position pos:line="38" pos:column="46"/></expr_stmt>

			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><name><name pos:line="40" pos:column="29">go<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">.<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="32">end<pos:position pos:line="40" pos:column="35"/></name></name> <operator pos:line="40" pos:column="36">&gt;<pos:position pos:line="40" pos:column="40"/></operator> <name><name pos:line="40" pos:column="38">go<pos:position pos:line="40" pos:column="40"/></name><operator pos:line="40" pos:column="40">.<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="41">start<pos:position pos:line="40" pos:column="46"/></name></name></expr>)<pos:position pos:line="40" pos:column="47"/></condition><then pos:line="40" pos:column="47">
				<block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="33">end_matching_other<pos:position pos:line="41" pos:column="51"/></name> <operator pos:line="41" pos:column="52">=<pos:position pos:line="41" pos:column="53"/></operator> <name><name pos:line="41" pos:column="54">g<pos:position pos:line="41" pos:column="55"/></name><operator pos:line="41" pos:column="55">.<pos:position pos:line="41" pos:column="56"/></operator><name pos:line="41" pos:column="56">end<pos:position pos:line="41" pos:column="59"/></name></name></expr>;<pos:position pos:line="41" pos:column="60"/></expr_stmt></block></then></if>

			<comment type="block" pos:line="43" pos:column="25">/* Now shift the group forward as far as possible: */</comment>
			<while pos:line="44" pos:column="25">while <condition pos:line="44" pos:column="31">(<expr><literal type="number" pos:line="44" pos:column="32">1<pos:position pos:line="44" pos:column="33"/></literal></expr>)<pos:position pos:line="44" pos:column="34"/></condition> <block pos:line="44" pos:column="35">{
				<if pos:line="45" pos:column="33">if <condition pos:line="45" pos:column="36">(<expr><call><name pos:line="45" pos:column="37">group_slide_down<pos:position pos:line="45" pos:column="53"/></name><argument_list pos:line="45" pos:column="53">(<argument><expr><name pos:line="45" pos:column="54">xdf<pos:position pos:line="45" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="59">&amp;<pos:position pos:line="45" pos:column="64"/></operator><name pos:line="45" pos:column="60">g<pos:position pos:line="45" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="63">flags<pos:position pos:line="45" pos:column="68"/></name></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="70"/></condition><then pos:line="45" pos:column="70">
					<block type="pseudo"><break pos:line="46" pos:column="41">break;<pos:position pos:line="46" pos:column="47"/></break></block></then></if>
				<if pos:line="47" pos:column="33">if <condition pos:line="47" pos:column="36">(<expr><call><name pos:line="47" pos:column="37">group_next<pos:position pos:line="47" pos:column="47"/></name><argument_list pos:line="47" pos:column="47">(<argument><expr><name pos:line="47" pos:column="48">xdfo<pos:position pos:line="47" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="54">&amp;<pos:position pos:line="47" pos:column="59"/></operator><name pos:line="47" pos:column="55">go<pos:position pos:line="47" pos:column="57"/></name></expr></argument>)<pos:position pos:line="47" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="59"/></condition><then pos:line="47" pos:column="59">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="41">xdl_bug<pos:position pos:line="48" pos:column="48"/></name><argument_list pos:line="48" pos:column="48">(<argument><expr><literal type="string" pos:line="48" pos:column="49">"group sync broken sliding down"<pos:position pos:line="48" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="83"/></expr_stmt></block></then></if>

				<if pos:line="50" pos:column="33">if <condition pos:line="50" pos:column="36">(<expr><name><name pos:line="50" pos:column="37">go<pos:position pos:line="50" pos:column="39"/></name><operator pos:line="50" pos:column="39">.<pos:position pos:line="50" pos:column="40"/></operator><name pos:line="50" pos:column="40">end<pos:position pos:line="50" pos:column="43"/></name></name> <operator pos:line="50" pos:column="44">&gt;<pos:position pos:line="50" pos:column="48"/></operator> <name><name pos:line="50" pos:column="46">go<pos:position pos:line="50" pos:column="48"/></name><operator pos:line="50" pos:column="48">.<pos:position pos:line="50" pos:column="49"/></operator><name pos:line="50" pos:column="49">start<pos:position pos:line="50" pos:column="54"/></name></name></expr>)<pos:position pos:line="50" pos:column="55"/></condition><then pos:line="50" pos:column="55">
					<block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="41">end_matching_other<pos:position pos:line="51" pos:column="59"/></name> <operator pos:line="51" pos:column="60">=<pos:position pos:line="51" pos:column="61"/></operator> <name><name pos:line="51" pos:column="62">g<pos:position pos:line="51" pos:column="63"/></name><operator pos:line="51" pos:column="63">.<pos:position pos:line="51" pos:column="64"/></operator><name pos:line="51" pos:column="64">end<pos:position pos:line="51" pos:column="67"/></name></name></expr>;<pos:position pos:line="51" pos:column="68"/></expr_stmt></block></then></if>
			}<pos:position pos:line="52" pos:column="26"/></block></while>
		}<pos:position pos:line="53" pos:column="18"/></block> while <condition pos:line="53" pos:column="25">(<expr><name pos:line="53" pos:column="26">groupsize<pos:position pos:line="53" pos:column="35"/></name> <operator pos:line="53" pos:column="36">!=<pos:position pos:line="53" pos:column="38"/></operator> <name><name pos:line="53" pos:column="39">g<pos:position pos:line="53" pos:column="40"/></name><operator pos:line="53" pos:column="40">.<pos:position pos:line="53" pos:column="41"/></operator><name pos:line="53" pos:column="41">end<pos:position pos:line="53" pos:column="44"/></name></name> <operator pos:line="53" pos:column="45">-<pos:position pos:line="53" pos:column="46"/></operator> <name><name pos:line="53" pos:column="47">g<pos:position pos:line="53" pos:column="48"/></name><operator pos:line="53" pos:column="48">.<pos:position pos:line="53" pos:column="49"/></operator><name pos:line="53" pos:column="49">start<pos:position pos:line="53" pos:column="54"/></name></name></expr>)<pos:position pos:line="53" pos:column="55"/></condition>;<pos:position pos:line="53" pos:column="56"/></do>

		<comment type="block" pos:line="55" pos:column="17">/*
		 * If the group can be shifted, then we can possibly use this
		 * freedom to produce a more intuitive diff.
		 *
		 * The group is currently shifted as far down as possible, so the
		 * heuristics below only have to handle upwards shifts.
		 */</comment>

		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name><name pos:line="63" pos:column="21">g<pos:position pos:line="63" pos:column="22"/></name><operator pos:line="63" pos:column="22">.<pos:position pos:line="63" pos:column="23"/></operator><name pos:line="63" pos:column="23">end<pos:position pos:line="63" pos:column="26"/></name></name> <operator pos:line="63" pos:column="27">==<pos:position pos:line="63" pos:column="29"/></operator> <name pos:line="63" pos:column="30">earliest_end<pos:position pos:line="63" pos:column="42"/></name></expr>)<pos:position pos:line="63" pos:column="43"/></condition><then pos:line="63" pos:column="43"> <block pos:line="63" pos:column="44">{
			<comment type="block" pos:line="64" pos:column="25">/* no shifting was possible */</comment>
		}<pos:position pos:line="65" pos:column="18"/></block></then> <elseif pos:line="65" pos:column="19">else <if pos:line="65" pos:column="24">if <condition pos:line="65" pos:column="27">(<expr><name pos:line="65" pos:column="28">end_matching_other<pos:position pos:line="65" pos:column="46"/></name> <operator pos:line="65" pos:column="47">!=<pos:position pos:line="65" pos:column="49"/></operator> <operator pos:line="65" pos:column="50">-<pos:position pos:line="65" pos:column="51"/></operator><literal type="number" pos:line="65" pos:column="51">1<pos:position pos:line="65" pos:column="52"/></literal></expr>)<pos:position pos:line="65" pos:column="53"/></condition><then pos:line="65" pos:column="53"> <block pos:line="65" pos:column="54">{
			<comment type="block" pos:line="66" pos:column="25">/*
			 * Move the possibly merged group of changes back to line
			 * up with the last group of changes from the other file
			 * that it can align with.
			 */</comment>
			<while pos:line="71" pos:column="25">while <condition pos:line="71" pos:column="31">(<expr><name><name pos:line="71" pos:column="32">go<pos:position pos:line="71" pos:column="34"/></name><operator pos:line="71" pos:column="34">.<pos:position pos:line="71" pos:column="35"/></operator><name pos:line="71" pos:column="35">end<pos:position pos:line="71" pos:column="38"/></name></name> <operator pos:line="71" pos:column="39">==<pos:position pos:line="71" pos:column="41"/></operator> <name><name pos:line="71" pos:column="42">go<pos:position pos:line="71" pos:column="44"/></name><operator pos:line="71" pos:column="44">.<pos:position pos:line="71" pos:column="45"/></operator><name pos:line="71" pos:column="45">start<pos:position pos:line="71" pos:column="50"/></name></name></expr>)<pos:position pos:line="71" pos:column="51"/></condition> <block pos:line="71" pos:column="52">{
				<if pos:line="72" pos:column="33">if <condition pos:line="72" pos:column="36">(<expr><call><name pos:line="72" pos:column="37">group_slide_up<pos:position pos:line="72" pos:column="51"/></name><argument_list pos:line="72" pos:column="51">(<argument><expr><name pos:line="72" pos:column="52">xdf<pos:position pos:line="72" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="57">&amp;<pos:position pos:line="72" pos:column="62"/></operator><name pos:line="72" pos:column="58">g<pos:position pos:line="72" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="61">flags<pos:position pos:line="72" pos:column="66"/></name></expr></argument>)<pos:position pos:line="72" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="68"/></condition><then pos:line="72" pos:column="68">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="41">xdl_bug<pos:position pos:line="73" pos:column="48"/></name><argument_list pos:line="73" pos:column="48">(<argument><expr><literal type="string" pos:line="73" pos:column="49">"match disappeared"<pos:position pos:line="73" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="70"/></expr_stmt></block></then></if>
				<if pos:line="74" pos:column="33">if <condition pos:line="74" pos:column="36">(<expr><call><name pos:line="74" pos:column="37">group_previous<pos:position pos:line="74" pos:column="51"/></name><argument_list pos:line="74" pos:column="51">(<argument><expr><name pos:line="74" pos:column="52">xdfo<pos:position pos:line="74" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="58">&amp;<pos:position pos:line="74" pos:column="63"/></operator><name pos:line="74" pos:column="59">go<pos:position pos:line="74" pos:column="61"/></name></expr></argument>)<pos:position pos:line="74" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="63"/></condition><then pos:line="74" pos:column="63">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="41">xdl_bug<pos:position pos:line="75" pos:column="48"/></name><argument_list pos:line="75" pos:column="48">(<argument><expr><literal type="string" pos:line="75" pos:column="49">"group sync broken sliding to match"<pos:position pos:line="75" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="87"/></expr_stmt></block></then></if>
			}<pos:position pos:line="76" pos:column="26"/></block></while>
		}<pos:position pos:line="77" pos:column="18"/></block></then></if></elseif> <elseif pos:line="77" pos:column="19">else <if pos:line="77" pos:column="24">if <condition pos:line="77" pos:column="27">(<expr><name pos:line="77" pos:column="28">flags<pos:position pos:line="77" pos:column="33"/></name> <operator pos:line="77" pos:column="34">&amp;<pos:position pos:line="77" pos:column="39"/></operator> <name pos:line="77" pos:column="36">XDF_INDENT_HEURISTIC<pos:position pos:line="77" pos:column="56"/></name></expr>)<pos:position pos:line="77" pos:column="57"/></condition><then pos:line="77" pos:column="57"> <block pos:line="77" pos:column="58">{
			<comment type="block" pos:line="78" pos:column="25">/*
			 * Indent heuristic: a group of pure add/delete lines
			 * implies two splits, one between the end of the "before"
			 * context and the start of the group, and another between
			 * the end of the group and the beginning of the "after"
			 * context. Some splits are aesthetically better and some
			 * are worse. We compute a badness "score" for each split,
			 * and add the scores for the two splits to define a
			 * "score" for each position that the group can be shifted
			 * to. Then we pick the shift with the lowest score.
			 */</comment>
			<decl_stmt><decl><type><name pos:line="89" pos:column="25">long<pos:position pos:line="89" pos:column="29"/></name></type> <name pos:line="89" pos:column="30">shift<pos:position pos:line="89" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="89" pos:column="37">best_shift<pos:position pos:line="89" pos:column="47"/></name> <init pos:line="89" pos:column="48">= <expr><operator pos:line="89" pos:column="50">-<pos:position pos:line="89" pos:column="51"/></operator><literal type="number" pos:line="89" pos:column="51">1<pos:position pos:line="89" pos:column="52"/></literal></expr></init></decl>;<pos:position pos:line="89" pos:column="53"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="90" pos:column="25">struct<pos:position pos:line="90" pos:column="31"/></name> <name pos:line="90" pos:column="32">split_score<pos:position pos:line="90" pos:column="43"/></name></name></type> <name pos:line="90" pos:column="44">best_score<pos:position pos:line="90" pos:column="54"/></name></decl>;<pos:position pos:line="90" pos:column="55"/></decl_stmt>

			<for pos:line="92" pos:column="25">for <control pos:line="92" pos:column="29">(<init><expr><name pos:line="92" pos:column="30">shift<pos:position pos:line="92" pos:column="35"/></name> <operator pos:line="92" pos:column="36">=<pos:position pos:line="92" pos:column="37"/></operator> <name pos:line="92" pos:column="38">earliest_end<pos:position pos:line="92" pos:column="50"/></name></expr>;<pos:position pos:line="92" pos:column="51"/></init> <condition><expr><name pos:line="92" pos:column="52">shift<pos:position pos:line="92" pos:column="57"/></name> <operator pos:line="92" pos:column="58">&lt;=<pos:position pos:line="92" pos:column="63"/></operator> <name><name pos:line="92" pos:column="61">g<pos:position pos:line="92" pos:column="62"/></name><operator pos:line="92" pos:column="62">.<pos:position pos:line="92" pos:column="63"/></operator><name pos:line="92" pos:column="63">end<pos:position pos:line="92" pos:column="66"/></name></name></expr>;<pos:position pos:line="92" pos:column="67"/></condition> <incr><expr><name pos:line="92" pos:column="68">shift<pos:position pos:line="92" pos:column="73"/></name><operator pos:line="92" pos:column="73">++<pos:position pos:line="92" pos:column="75"/></operator></expr></incr>)<pos:position pos:line="92" pos:column="76"/></control> <block pos:line="92" pos:column="77">{
				<decl_stmt><decl><type><name><name pos:line="93" pos:column="33">struct<pos:position pos:line="93" pos:column="39"/></name> <name pos:line="93" pos:column="40">split_measurement<pos:position pos:line="93" pos:column="57"/></name></name></type> <name pos:line="93" pos:column="58">m<pos:position pos:line="93" pos:column="59"/></name></decl>;<pos:position pos:line="93" pos:column="60"/></decl_stmt>
				<decl_stmt><decl><type><name><name pos:line="94" pos:column="33">struct<pos:position pos:line="94" pos:column="39"/></name> <name pos:line="94" pos:column="40">split_score<pos:position pos:line="94" pos:column="51"/></name></name></type> <name pos:line="94" pos:column="52">score<pos:position pos:line="94" pos:column="57"/></name> <init pos:line="94" pos:column="58">= <expr><block pos:line="94" pos:column="60">{<expr><literal type="number" pos:line="94" pos:column="61">0<pos:position pos:line="94" pos:column="62"/></literal></expr>, <expr><literal type="number" pos:line="94" pos:column="64">0<pos:position pos:line="94" pos:column="65"/></literal></expr>}<pos:position pos:line="94" pos:column="66"/></block></expr></init></decl>;<pos:position pos:line="94" pos:column="67"/></decl_stmt>

				<expr_stmt><expr><call><name pos:line="96" pos:column="33">measure_split<pos:position pos:line="96" pos:column="46"/></name><argument_list pos:line="96" pos:column="46">(<argument><expr><name pos:line="96" pos:column="47">xdf<pos:position pos:line="96" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="52">shift<pos:position pos:line="96" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="59">&amp;<pos:position pos:line="96" pos:column="64"/></operator><name pos:line="96" pos:column="60">m<pos:position pos:line="96" pos:column="61"/></name></expr></argument>)<pos:position pos:line="96" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="63"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="97" pos:column="33">score_add_split<pos:position pos:line="97" pos:column="48"/></name><argument_list pos:line="97" pos:column="48">(<argument><expr><operator pos:line="97" pos:column="49">&amp;<pos:position pos:line="97" pos:column="54"/></operator><name pos:line="97" pos:column="50">m<pos:position pos:line="97" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="53">&amp;<pos:position pos:line="97" pos:column="58"/></operator><name pos:line="97" pos:column="54">score<pos:position pos:line="97" pos:column="59"/></name></expr></argument>)<pos:position pos:line="97" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="61"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="98" pos:column="33">measure_split<pos:position pos:line="98" pos:column="46"/></name><argument_list pos:line="98" pos:column="46">(<argument><expr><name pos:line="98" pos:column="47">xdf<pos:position pos:line="98" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="52">shift<pos:position pos:line="98" pos:column="57"/></name> <operator pos:line="98" pos:column="58">-<pos:position pos:line="98" pos:column="59"/></operator> <name pos:line="98" pos:column="60">groupsize<pos:position pos:line="98" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="98" pos:column="71">&amp;<pos:position pos:line="98" pos:column="76"/></operator><name pos:line="98" pos:column="72">m<pos:position pos:line="98" pos:column="73"/></name></expr></argument>)<pos:position pos:line="98" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="99" pos:column="33">score_add_split<pos:position pos:line="99" pos:column="48"/></name><argument_list pos:line="99" pos:column="48">(<argument><expr><operator pos:line="99" pos:column="49">&amp;<pos:position pos:line="99" pos:column="54"/></operator><name pos:line="99" pos:column="50">m<pos:position pos:line="99" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="53">&amp;<pos:position pos:line="99" pos:column="58"/></operator><name pos:line="99" pos:column="54">score<pos:position pos:line="99" pos:column="59"/></name></expr></argument>)<pos:position pos:line="99" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="61"/></expr_stmt>
				<if pos:line="100" pos:column="33">if <condition pos:line="100" pos:column="36">(<expr><name pos:line="100" pos:column="37">best_shift<pos:position pos:line="100" pos:column="47"/></name> <operator pos:line="100" pos:column="48">==<pos:position pos:line="100" pos:column="50"/></operator> <operator pos:line="100" pos:column="51">-<pos:position pos:line="100" pos:column="52"/></operator><literal type="number" pos:line="100" pos:column="52">1<pos:position pos:line="100" pos:column="53"/></literal> <operator pos:line="100" pos:column="54">||<pos:position pos:line="100" pos:column="56"/></operator>
				    <call><name pos:line="101" pos:column="37">score_cmp<pos:position pos:line="101" pos:column="46"/></name><argument_list pos:line="101" pos:column="46">(<argument><expr><operator pos:line="101" pos:column="47">&amp;<pos:position pos:line="101" pos:column="52"/></operator><name pos:line="101" pos:column="48">score<pos:position pos:line="101" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="55">&amp;<pos:position pos:line="101" pos:column="60"/></operator><name pos:line="101" pos:column="56">best_score<pos:position pos:line="101" pos:column="66"/></name></expr></argument>)<pos:position pos:line="101" pos:column="67"/></argument_list></call> <operator pos:line="101" pos:column="68">&lt;=<pos:position pos:line="101" pos:column="73"/></operator> <literal type="number" pos:line="101" pos:column="71">0<pos:position pos:line="101" pos:column="72"/></literal></expr>)<pos:position pos:line="101" pos:column="73"/></condition><then pos:line="101" pos:column="73"> <block pos:line="101" pos:column="74">{
					<expr_stmt><expr><name><name pos:line="102" pos:column="41">best_score<pos:position pos:line="102" pos:column="51"/></name><operator pos:line="102" pos:column="51">.<pos:position pos:line="102" pos:column="52"/></operator><name pos:line="102" pos:column="52">effective_indent<pos:position pos:line="102" pos:column="68"/></name></name> <operator pos:line="102" pos:column="69">=<pos:position pos:line="102" pos:column="70"/></operator> <name><name pos:line="102" pos:column="71">score<pos:position pos:line="102" pos:column="76"/></name><operator pos:line="102" pos:column="76">.<pos:position pos:line="102" pos:column="77"/></operator><name pos:line="102" pos:column="77">effective_indent<pos:position pos:line="102" pos:column="93"/></name></name></expr>;<pos:position pos:line="102" pos:column="94"/></expr_stmt>
					<expr_stmt><expr><name><name pos:line="103" pos:column="41">best_score<pos:position pos:line="103" pos:column="51"/></name><operator pos:line="103" pos:column="51">.<pos:position pos:line="103" pos:column="52"/></operator><name pos:line="103" pos:column="52">penalty<pos:position pos:line="103" pos:column="59"/></name></name> <operator pos:line="103" pos:column="60">=<pos:position pos:line="103" pos:column="61"/></operator> <name><name pos:line="103" pos:column="62">score<pos:position pos:line="103" pos:column="67"/></name><operator pos:line="103" pos:column="67">.<pos:position pos:line="103" pos:column="68"/></operator><name pos:line="103" pos:column="68">penalty<pos:position pos:line="103" pos:column="75"/></name></name></expr>;<pos:position pos:line="103" pos:column="76"/></expr_stmt>
					<expr_stmt><expr><name pos:line="104" pos:column="41">best_shift<pos:position pos:line="104" pos:column="51"/></name> <operator pos:line="104" pos:column="52">=<pos:position pos:line="104" pos:column="53"/></operator> <name pos:line="104" pos:column="54">shift<pos:position pos:line="104" pos:column="59"/></name></expr>;<pos:position pos:line="104" pos:column="60"/></expr_stmt>
				}<pos:position pos:line="105" pos:column="34"/></block></then></if>
			}<pos:position pos:line="106" pos:column="26"/></block></for>

			<while pos:line="108" pos:column="25">while <condition pos:line="108" pos:column="31">(<expr><name><name pos:line="108" pos:column="32">g<pos:position pos:line="108" pos:column="33"/></name><operator pos:line="108" pos:column="33">.<pos:position pos:line="108" pos:column="34"/></operator><name pos:line="108" pos:column="34">end<pos:position pos:line="108" pos:column="37"/></name></name> <operator pos:line="108" pos:column="38">&gt;<pos:position pos:line="108" pos:column="42"/></operator> <name pos:line="108" pos:column="40">best_shift<pos:position pos:line="108" pos:column="50"/></name></expr>)<pos:position pos:line="108" pos:column="51"/></condition> <block pos:line="108" pos:column="52">{
				<if pos:line="109" pos:column="33">if <condition pos:line="109" pos:column="36">(<expr><call><name pos:line="109" pos:column="37">group_slide_up<pos:position pos:line="109" pos:column="51"/></name><argument_list pos:line="109" pos:column="51">(<argument><expr><name pos:line="109" pos:column="52">xdf<pos:position pos:line="109" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="57">&amp;<pos:position pos:line="109" pos:column="62"/></operator><name pos:line="109" pos:column="58">g<pos:position pos:line="109" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="61">flags<pos:position pos:line="109" pos:column="66"/></name></expr></argument>)<pos:position pos:line="109" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="68"/></condition><then pos:line="109" pos:column="68">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="110" pos:column="41">xdl_bug<pos:position pos:line="110" pos:column="48"/></name><argument_list pos:line="110" pos:column="48">(<argument><expr><literal type="string" pos:line="110" pos:column="49">"best shift unreached"<pos:position pos:line="110" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="73"/></expr_stmt></block></then></if>
				<if pos:line="111" pos:column="33">if <condition pos:line="111" pos:column="36">(<expr><call><name pos:line="111" pos:column="37">group_previous<pos:position pos:line="111" pos:column="51"/></name><argument_list pos:line="111" pos:column="51">(<argument><expr><name pos:line="111" pos:column="52">xdfo<pos:position pos:line="111" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="58">&amp;<pos:position pos:line="111" pos:column="63"/></operator><name pos:line="111" pos:column="59">go<pos:position pos:line="111" pos:column="61"/></name></expr></argument>)<pos:position pos:line="111" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="111" pos:column="63"/></condition><then pos:line="111" pos:column="63">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="112" pos:column="41">xdl_bug<pos:position pos:line="112" pos:column="48"/></name><argument_list pos:line="112" pos:column="48">(<argument><expr><literal type="string" pos:line="112" pos:column="49">"group sync broken sliding to blank line"<pos:position pos:line="112" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="92"/></expr_stmt></block></then></if>
			}<pos:position pos:line="113" pos:column="26"/></block></while>
		}<pos:position pos:line="114" pos:column="18"/></block></then></if></elseif></if>

	<label><name pos:line="116" pos:column="9">next<pos:position pos:line="116" pos:column="13"/></name>:<pos:position pos:line="116" pos:column="14"/></label>
		<comment type="block" pos:line="117" pos:column="17">/* Move past the just-processed group: */</comment>
		<if pos:line="118" pos:column="17">if <condition pos:line="118" pos:column="20">(<expr><call><name pos:line="118" pos:column="21">group_next<pos:position pos:line="118" pos:column="31"/></name><argument_list pos:line="118" pos:column="31">(<argument><expr><name pos:line="118" pos:column="32">xdf<pos:position pos:line="118" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="118" pos:column="37">&amp;<pos:position pos:line="118" pos:column="42"/></operator><name pos:line="118" pos:column="38">g<pos:position pos:line="118" pos:column="39"/></name></expr></argument>)<pos:position pos:line="118" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="118" pos:column="41"/></condition><then pos:line="118" pos:column="41">
			<block type="pseudo"><break pos:line="119" pos:column="25">break;<pos:position pos:line="119" pos:column="31"/></break></block></then></if>
		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><call><name pos:line="120" pos:column="21">group_next<pos:position pos:line="120" pos:column="31"/></name><argument_list pos:line="120" pos:column="31">(<argument><expr><name pos:line="120" pos:column="32">xdfo<pos:position pos:line="120" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="38">&amp;<pos:position pos:line="120" pos:column="43"/></operator><name pos:line="120" pos:column="39">go<pos:position pos:line="120" pos:column="41"/></name></expr></argument>)<pos:position pos:line="120" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="120" pos:column="43"/></condition><then pos:line="120" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="121" pos:column="25">xdl_bug<pos:position pos:line="121" pos:column="32"/></name><argument_list pos:line="121" pos:column="32">(<argument><expr><literal type="string" pos:line="121" pos:column="33">"group sync broken moving to next group"<pos:position pos:line="121" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="75"/></expr_stmt></block></then></if>
	}<pos:position pos:line="122" pos:column="10"/></block></while>

	<if pos:line="124" pos:column="9">if <condition pos:line="124" pos:column="12">(<expr><operator pos:line="124" pos:column="13">!<pos:position pos:line="124" pos:column="14"/></operator><call><name pos:line="124" pos:column="14">group_next<pos:position pos:line="124" pos:column="24"/></name><argument_list pos:line="124" pos:column="24">(<argument><expr><name pos:line="124" pos:column="25">xdfo<pos:position pos:line="124" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="124" pos:column="31">&amp;<pos:position pos:line="124" pos:column="36"/></operator><name pos:line="124" pos:column="32">go<pos:position pos:line="124" pos:column="34"/></name></expr></argument>)<pos:position pos:line="124" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="124" pos:column="36"/></condition><then pos:line="124" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="125" pos:column="17">xdl_bug<pos:position pos:line="125" pos:column="24"/></name><argument_list pos:line="125" pos:column="24">(<argument><expr><literal type="string" pos:line="125" pos:column="25">"group sync broken at end of file"<pos:position pos:line="125" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="61"/></expr_stmt></block></then></if>

	<return pos:line="127" pos:column="9">return <expr><literal type="number" pos:line="127" pos:column="16">0<pos:position pos:line="127" pos:column="17"/></literal></expr>;<pos:position pos:line="127" pos:column="18"/></return>
}<pos:position pos:line="128" pos:column="2"/></block></function></unit>
