<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1001.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">grep_submodule_launch<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">grep_opt<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">opt<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
				 <parameter><decl><type><specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <name><name pos:line="2" pos:column="40">struct<pos:position pos:line="2" pos:column="46"/></name> <name pos:line="2" pos:column="47">grep_source<pos:position pos:line="2" pos:column="58"/></name></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">gs<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">child_process<pos:position pos:line="4" pos:column="29"/></name></name></type> <name pos:line="4" pos:column="30">cp<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><name pos:line="4" pos:column="35">CHILD_PROCESS_INIT<pos:position pos:line="4" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="21">i<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">end_of_base<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">name<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">child_output<pos:position pos:line="8" pos:column="35"/></name> <init pos:line="8" pos:column="36">= <expr><name pos:line="8" pos:column="38">STRBUF_INIT<pos:position pos:line="8" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="50"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">end_of_base<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">=<pos:position pos:line="10" pos:column="22"/></operator> <call><name pos:line="10" pos:column="23">strchr<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name><name pos:line="10" pos:column="30">gs<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">name<pos:position pos:line="10" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="10" pos:column="40">':'<pos:position pos:line="10" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">gs<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">identifier<pos:position pos:line="11" pos:column="27"/></name></name> <operator pos:line="11" pos:column="28">&amp;&amp;<pos:position pos:line="11" pos:column="38"/></operator> <name pos:line="11" pos:column="31">end_of_base<pos:position pos:line="11" pos:column="42"/></name></expr>)<pos:position pos:line="11" pos:column="43"/></condition><then pos:line="11" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">name<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <name pos:line="12" pos:column="24">end_of_base<pos:position pos:line="12" pos:column="35"/></name> <operator pos:line="12" pos:column="36">+<pos:position pos:line="12" pos:column="37"/></operator> <literal type="number" pos:line="12" pos:column="38">1<pos:position pos:line="12" pos:column="39"/></literal></expr>;<pos:position pos:line="12" pos:column="40"/></expr_stmt></block></then>
	<else pos:line="13" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="17">name<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">=<pos:position pos:line="14" pos:column="23"/></operator> <name><name pos:line="14" pos:column="24">gs<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">-&gt;<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="28">name<pos:position pos:line="14" pos:column="32"/></name></name></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">prepare_submodule_repo_env<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><operator pos:line="16" pos:column="36">&amp;<pos:position pos:line="16" pos:column="41"/></operator><name><name pos:line="16" pos:column="37">cp<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">.<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="40">env_array<pos:position pos:line="16" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">argv_array_push<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><operator pos:line="17" pos:column="25">&amp;<pos:position pos:line="17" pos:column="30"/></operator><name><name pos:line="17" pos:column="26">cp<pos:position pos:line="17" pos:column="28"/></name><operator pos:line="17" pos:column="28">.<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="29">env_array<pos:position pos:line="17" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="40">GIT_DIR_ENVIRONMENT<pos:position pos:line="17" pos:column="59"/></name></expr></argument>)<pos:position pos:line="17" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="61"/></expr_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name><name pos:line="19" pos:column="13">opt<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">-&gt;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="18">relative<pos:position pos:line="19" pos:column="26"/></name></name> <operator pos:line="19" pos:column="27">&amp;&amp;<pos:position pos:line="19" pos:column="37"/></operator> <name><name pos:line="19" pos:column="30">opt<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">-&gt;<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="35">prefix_length<pos:position pos:line="19" pos:column="48"/></name></name></expr>)<pos:position pos:line="19" pos:column="49"/></condition><then pos:line="19" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">argv_array_pushf<pos:position pos:line="20" pos:column="33"/></name><argument_list pos:line="20" pos:column="33">(<argument><expr><operator pos:line="20" pos:column="34">&amp;<pos:position pos:line="20" pos:column="39"/></operator><name><name pos:line="20" pos:column="35">cp<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">.<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="38">env_array<pos:position pos:line="20" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="49">"%s=%s"<pos:position pos:line="20" pos:column="56"/></literal></expr></argument>,
				 <argument><expr><name pos:line="21" pos:column="34">GIT_TOPLEVEL_PREFIX_ENVIRONMENT<pos:position pos:line="21" pos:column="65"/></name></expr></argument>,
				 <argument><expr><name><name pos:line="22" pos:column="34">opt<pos:position pos:line="22" pos:column="37"/></name><operator pos:line="22" pos:column="37">-&gt;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="39">prefix<pos:position pos:line="22" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="24" pos:column="9">/* Add super prefix */</comment>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">argv_array_pushf<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><operator pos:line="25" pos:column="26">&amp;<pos:position pos:line="25" pos:column="31"/></operator><name><name pos:line="25" pos:column="27">cp<pos:position pos:line="25" pos:column="29"/></name><operator pos:line="25" pos:column="29">.<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="30">args<pos:position pos:line="25" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="36">"--super-prefix=%s%s/"<pos:position pos:line="25" pos:column="58"/></literal></expr></argument>,
			 <argument><expr><ternary><condition><expr><name pos:line="26" pos:column="26">super_prefix<pos:position pos:line="26" pos:column="38"/></name></expr> ?<pos:position pos:line="26" pos:column="40"/></condition><then pos:line="26" pos:column="40"> <expr><name pos:line="26" pos:column="41">super_prefix<pos:position pos:line="26" pos:column="53"/></name></expr> <pos:position pos:line="26" pos:column="54"/></then><else pos:line="26" pos:column="54">: <expr><literal type="string" pos:line="26" pos:column="56">""<pos:position pos:line="26" pos:column="58"/></literal></expr></else></ternary></expr></argument>,
			 <argument><expr><name pos:line="27" pos:column="26">name<pos:position pos:line="27" pos:column="30"/></name></expr></argument>)<pos:position pos:line="27" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">argv_array_push<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><operator pos:line="28" pos:column="25">&amp;<pos:position pos:line="28" pos:column="30"/></operator><name><name pos:line="28" pos:column="26">cp<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">.<pos:position pos:line="28" pos:column="29"/></operator><name pos:line="28" pos:column="29">args<pos:position pos:line="28" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="35">"grep"<pos:position pos:line="28" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt>

	<comment type="block" pos:line="30" pos:column="9">/*
	 * Add basename of parent project
	 * When performing grep on a tree object the filename is prefixed
	 * with the object's name: 'tree-name:filename'.  In order to
	 * provide uniformity of output we want to pass the name of the
	 * parent project's object name to the submodule so the submodule can
	 * prefix its output with the parent's name and not its own SHA1.
	 */</comment>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name><name pos:line="38" pos:column="13">gs<pos:position pos:line="38" pos:column="15"/></name><operator pos:line="38" pos:column="15">-&gt;<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="17">identifier<pos:position pos:line="38" pos:column="27"/></name></name> <operator pos:line="38" pos:column="28">&amp;&amp;<pos:position pos:line="38" pos:column="38"/></operator> <name pos:line="38" pos:column="31">end_of_base<pos:position pos:line="38" pos:column="42"/></name></expr>)<pos:position pos:line="38" pos:column="43"/></condition><then pos:line="38" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="17">argv_array_pushf<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><operator pos:line="39" pos:column="34">&amp;<pos:position pos:line="39" pos:column="39"/></operator><name><name pos:line="39" pos:column="35">cp<pos:position pos:line="39" pos:column="37"/></name><operator pos:line="39" pos:column="37">.<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="38">args<pos:position pos:line="39" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="44">"--parent-basename=%.*s"<pos:position pos:line="39" pos:column="68"/></literal></expr></argument>,
				 <argument><expr><call pos:line="40" pos:column="34">(<name pos:line="40" pos:column="35">int<pos:position pos:line="40" pos:column="38"/></name>) <argument_list pos:line="40" pos:column="40">(<argument><expr><name pos:line="40" pos:column="41">end_of_base<pos:position pos:line="40" pos:column="52"/></name> <operator pos:line="40" pos:column="53">-<pos:position pos:line="40" pos:column="54"/></operator> <name><name pos:line="40" pos:column="55">gs<pos:position pos:line="40" pos:column="57"/></name><operator pos:line="40" pos:column="57">-&gt;<pos:position pos:line="40" pos:column="62"/></operator><name pos:line="40" pos:column="59">name<pos:position pos:line="40" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="64"/></argument_list></call></expr></argument>,
				 <argument><expr><name><name pos:line="41" pos:column="34">gs<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">-&gt;<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="38">name<pos:position pos:line="41" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="44"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="43" pos:column="9">/* Add options */</comment>
	<for pos:line="44" pos:column="9">for <control pos:line="44" pos:column="13">(<init><expr><name pos:line="44" pos:column="14">i<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <literal type="number" pos:line="44" pos:column="18">0<pos:position pos:line="44" pos:column="19"/></literal></expr>;<pos:position pos:line="44" pos:column="20"/></init> <condition><expr><name pos:line="44" pos:column="21">i<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">&lt;<pos:position pos:line="44" pos:column="27"/></operator> <name><name pos:line="44" pos:column="25">submodule_options<pos:position pos:line="44" pos:column="42"/></name><operator pos:line="44" pos:column="42">.<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="43">argc<pos:position pos:line="44" pos:column="47"/></name></name></expr>;<pos:position pos:line="44" pos:column="48"/></condition> <incr><expr><name pos:line="44" pos:column="49">i<pos:position pos:line="44" pos:column="50"/></name><operator pos:line="44" pos:column="50">++<pos:position pos:line="44" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="44" pos:column="53"/></control> <block pos:line="44" pos:column="54">{
		<comment type="block" pos:line="45" pos:column="17">/*
		 * If there is a tree identifier for the submodule, add the
		 * rev after adding the submodule options but before the
		 * pathspecs.  To do this we listen for the '--' and insert the
		 * sha1 before pushing the '--' onto the child process argv
		 * array.
		 */</comment>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name><name pos:line="52" pos:column="21">gs<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">-&gt;<pos:position pos:line="52" pos:column="28"/></operator><name pos:line="52" pos:column="25">identifier<pos:position pos:line="52" pos:column="35"/></name></name> <operator pos:line="52" pos:column="36">&amp;&amp;<pos:position pos:line="52" pos:column="46"/></operator>
		    <operator pos:line="53" pos:column="21">!<pos:position pos:line="53" pos:column="22"/></operator><call><name pos:line="53" pos:column="22">strcmp<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><literal type="string" pos:line="53" pos:column="29">"--"<pos:position pos:line="53" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="35">submodule_options<pos:position pos:line="53" pos:column="52"/></name><operator pos:line="53" pos:column="52">.<pos:position pos:line="53" pos:column="53"/></operator><name pos:line="53" pos:column="53">argv<pos:position pos:line="53" pos:column="57"/></name><index pos:line="53" pos:column="57">[<expr><name pos:line="53" pos:column="58">i<pos:position pos:line="53" pos:column="59"/></name></expr>]<pos:position pos:line="53" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="53" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="62"/></condition><then pos:line="53" pos:column="62"> <block pos:line="53" pos:column="63">{
			<expr_stmt><expr><call><name pos:line="54" pos:column="25">argv_array_push<pos:position pos:line="54" pos:column="40"/></name><argument_list pos:line="54" pos:column="40">(<argument><expr><operator pos:line="54" pos:column="41">&amp;<pos:position pos:line="54" pos:column="46"/></operator><name><name pos:line="54" pos:column="42">cp<pos:position pos:line="54" pos:column="44"/></name><operator pos:line="54" pos:column="44">.<pos:position pos:line="54" pos:column="45"/></operator><name pos:line="54" pos:column="45">args<pos:position pos:line="54" pos:column="49"/></name></name></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="51">sha1_to_hex<pos:position pos:line="54" pos:column="62"/></name><argument_list pos:line="54" pos:column="62">(<argument><expr><name><name pos:line="54" pos:column="63">gs<pos:position pos:line="54" pos:column="65"/></name><operator pos:line="54" pos:column="65">-&gt;<pos:position pos:line="54" pos:column="70"/></operator><name pos:line="54" pos:column="67">identifier<pos:position pos:line="54" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="80"/></expr_stmt>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="57" pos:column="17">argv_array_push<pos:position pos:line="57" pos:column="32"/></name><argument_list pos:line="57" pos:column="32">(<argument><expr><operator pos:line="57" pos:column="33">&amp;<pos:position pos:line="57" pos:column="38"/></operator><name><name pos:line="57" pos:column="34">cp<pos:position pos:line="57" pos:column="36"/></name><operator pos:line="57" pos:column="36">.<pos:position pos:line="57" pos:column="37"/></operator><name pos:line="57" pos:column="37">args<pos:position pos:line="57" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="43">submodule_options<pos:position pos:line="57" pos:column="60"/></name><operator pos:line="57" pos:column="60">.<pos:position pos:line="57" pos:column="61"/></operator><name pos:line="57" pos:column="61">argv<pos:position pos:line="57" pos:column="65"/></name><index pos:line="57" pos:column="65">[<expr><name pos:line="57" pos:column="66">i<pos:position pos:line="57" pos:column="67"/></name></expr>]<pos:position pos:line="57" pos:column="68"/></index></name></expr></argument>)<pos:position pos:line="57" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="70"/></expr_stmt>
	}<pos:position pos:line="58" pos:column="10"/></block></for>

	<expr_stmt><expr><name><name pos:line="60" pos:column="9">cp<pos:position pos:line="60" pos:column="11"/></name><operator pos:line="60" pos:column="11">.<pos:position pos:line="60" pos:column="12"/></operator><name pos:line="60" pos:column="12">git_cmd<pos:position pos:line="60" pos:column="19"/></name></name> <operator pos:line="60" pos:column="20">=<pos:position pos:line="60" pos:column="21"/></operator> <literal type="number" pos:line="60" pos:column="22">1<pos:position pos:line="60" pos:column="23"/></literal></expr>;<pos:position pos:line="60" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="61" pos:column="9">cp<pos:position pos:line="61" pos:column="11"/></name><operator pos:line="61" pos:column="11">.<pos:position pos:line="61" pos:column="12"/></operator><name pos:line="61" pos:column="12">dir<pos:position pos:line="61" pos:column="15"/></name></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <name><name pos:line="61" pos:column="18">gs<pos:position pos:line="61" pos:column="20"/></name><operator pos:line="61" pos:column="20">-&gt;<pos:position pos:line="61" pos:column="25"/></operator><name pos:line="61" pos:column="22">path<pos:position pos:line="61" pos:column="26"/></name></name></expr>;<pos:position pos:line="61" pos:column="27"/></expr_stmt>

	<comment type="block" pos:line="63" pos:column="9">/*
	 * Capture output to output buffer and check the return code from the
	 * child process.  A '0' indicates a hit, a '1' indicates no hit and
	 * anything else is an error.
	 */</comment>
	<expr_stmt><expr><name pos:line="68" pos:column="9">status<pos:position pos:line="68" pos:column="15"/></name> <operator pos:line="68" pos:column="16">=<pos:position pos:line="68" pos:column="17"/></operator> <call><name pos:line="68" pos:column="18">capture_command<pos:position pos:line="68" pos:column="33"/></name><argument_list pos:line="68" pos:column="33">(<argument><expr><operator pos:line="68" pos:column="34">&amp;<pos:position pos:line="68" pos:column="39"/></operator><name pos:line="68" pos:column="35">cp<pos:position pos:line="68" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="39">&amp;<pos:position pos:line="68" pos:column="44"/></operator><name pos:line="68" pos:column="40">child_output<pos:position pos:line="68" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="54">0<pos:position pos:line="68" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="57"/></expr_stmt>
	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">status<pos:position pos:line="69" pos:column="19"/></name> <operator pos:line="69" pos:column="20">&amp;&amp;<pos:position pos:line="69" pos:column="30"/></operator> <operator pos:line="69" pos:column="23">(<pos:position pos:line="69" pos:column="24"/></operator><name pos:line="69" pos:column="24">status<pos:position pos:line="69" pos:column="30"/></name> <operator pos:line="69" pos:column="31">!=<pos:position pos:line="69" pos:column="33"/></operator> <literal type="number" pos:line="69" pos:column="34">1<pos:position pos:line="69" pos:column="35"/></literal><operator pos:line="69" pos:column="35">)<pos:position pos:line="69" pos:column="36"/></operator></expr>)<pos:position pos:line="69" pos:column="37"/></condition><then pos:line="69" pos:column="37"> <block pos:line="69" pos:column="38">{
		<comment type="block" pos:line="70" pos:column="17">/* flush the buffer */</comment>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">write_or_die<pos:position pos:line="71" pos:column="29"/></name><argument_list pos:line="71" pos:column="29">(<argument><expr><literal type="number" pos:line="71" pos:column="30">1<pos:position pos:line="71" pos:column="31"/></literal></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="33">child_output<pos:position pos:line="71" pos:column="45"/></name><operator pos:line="71" pos:column="45">.<pos:position pos:line="71" pos:column="46"/></operator><name pos:line="71" pos:column="46">buf<pos:position pos:line="71" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="51">child_output<pos:position pos:line="71" pos:column="63"/></name><operator pos:line="71" pos:column="63">.<pos:position pos:line="71" pos:column="64"/></operator><name pos:line="71" pos:column="64">len<pos:position pos:line="71" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">die<pos:position pos:line="72" pos:column="20"/></name><argument_list pos:line="72" pos:column="20">(<argument><expr><literal type="string" pos:line="72" pos:column="21">"process for submodule '%s' failed with exit code: %d"<pos:position pos:line="72" pos:column="75"/></literal></expr></argument>,
		    <argument><expr><name><name pos:line="73" pos:column="21">gs<pos:position pos:line="73" pos:column="23"/></name><operator pos:line="73" pos:column="23">-&gt;<pos:position pos:line="73" pos:column="28"/></operator><name pos:line="73" pos:column="25">name<pos:position pos:line="73" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="31">status<pos:position pos:line="73" pos:column="37"/></name></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="74" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name><name pos:line="76" pos:column="9">opt<pos:position pos:line="76" pos:column="12"/></name><operator pos:line="76" pos:column="12">-&gt;<pos:position pos:line="76" pos:column="17"/></operator><name pos:line="76" pos:column="14">output<pos:position pos:line="76" pos:column="20"/></name></name><argument_list pos:line="76" pos:column="20">(<argument><expr><name pos:line="76" pos:column="21">opt<pos:position pos:line="76" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="26">child_output<pos:position pos:line="76" pos:column="38"/></name><operator pos:line="76" pos:column="38">.<pos:position pos:line="76" pos:column="39"/></operator><name pos:line="76" pos:column="39">buf<pos:position pos:line="76" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="44">child_output<pos:position pos:line="76" pos:column="56"/></name><operator pos:line="76" pos:column="56">.<pos:position pos:line="76" pos:column="57"/></operator><name pos:line="76" pos:column="57">len<pos:position pos:line="76" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="77" pos:column="9">strbuf_release<pos:position pos:line="77" pos:column="23"/></name><argument_list pos:line="77" pos:column="23">(<argument><expr><operator pos:line="77" pos:column="24">&amp;<pos:position pos:line="77" pos:column="29"/></operator><name pos:line="77" pos:column="25">child_output<pos:position pos:line="77" pos:column="37"/></name></expr></argument>)<pos:position pos:line="77" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="39"/></expr_stmt>
	<comment type="block" pos:line="78" pos:column="9">/* invert the return code to make a hit equal to 1 */</comment>
	<return pos:line="79" pos:column="9">return <expr><operator pos:line="79" pos:column="16">!<pos:position pos:line="79" pos:column="17"/></operator><name pos:line="79" pos:column="17">status<pos:position pos:line="79" pos:column="23"/></name></expr>;<pos:position pos:line="79" pos:column="24"/></return>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
