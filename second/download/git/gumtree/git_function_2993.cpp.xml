<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2993.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">udt_do_read<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">unidirectional_transfer<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">t<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">ssize_t<pos:position pos:line="3" pos:column="16"/></name></type> <name pos:line="3" pos:column="17">bytes<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name><name pos:line="5" pos:column="13">t<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">-&gt;<pos:position pos:line="5" pos:column="19"/></operator><name pos:line="5" pos:column="16">bufuse<pos:position pos:line="5" pos:column="22"/></name></name> <operator pos:line="5" pos:column="23">==<pos:position pos:line="5" pos:column="25"/></operator> <name pos:line="5" pos:column="26">BUFFERSIZE<pos:position pos:line="5" pos:column="36"/></name></expr>)<pos:position pos:line="5" pos:column="37"/></condition><then pos:line="5" pos:column="37">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></return></block></then></if>	<comment type="block" pos:line="6" pos:column="33">/* No space for more. */</comment>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">transfer_debug<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><literal type="string" pos:line="8" pos:column="24">"%s is readable"<pos:position pos:line="8" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="42">t<pos:position pos:line="8" pos:column="43"/></name><operator pos:line="8" pos:column="43">-&gt;<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="45">src_name<pos:position pos:line="8" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><name pos:line="9" pos:column="9">bytes<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <call><name pos:line="9" pos:column="17">read<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name><name pos:line="9" pos:column="22">t<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">-&gt;<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="25">src<pos:position pos:line="9" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="30">t<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">-&gt;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="33">buf<pos:position pos:line="9" pos:column="36"/></name></name> <operator pos:line="9" pos:column="37">+<pos:position pos:line="9" pos:column="38"/></operator> <name><name pos:line="9" pos:column="39">t<pos:position pos:line="9" pos:column="40"/></name><operator pos:line="9" pos:column="40">-&gt;<pos:position pos:line="9" pos:column="45"/></operator><name pos:line="9" pos:column="42">bufuse<pos:position pos:line="9" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="50">BUFFERSIZE<pos:position pos:line="9" pos:column="60"/></name> <operator pos:line="9" pos:column="61">-<pos:position pos:line="9" pos:column="62"/></operator> <name><name pos:line="9" pos:column="63">t<pos:position pos:line="9" pos:column="64"/></name><operator pos:line="9" pos:column="64">-&gt;<pos:position pos:line="9" pos:column="69"/></operator><name pos:line="9" pos:column="66">bufuse<pos:position pos:line="9" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="74"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">bytes<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">&lt;<pos:position pos:line="10" pos:column="23"/></operator> <literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal> <operator pos:line="10" pos:column="23">&amp;&amp;<pos:position pos:line="10" pos:column="33"/></operator> <name pos:line="10" pos:column="26">errno<pos:position pos:line="10" pos:column="31"/></name> <operator pos:line="10" pos:column="32">!=<pos:position pos:line="10" pos:column="34"/></operator> <name pos:line="10" pos:column="35">EWOULDBLOCK<pos:position pos:line="10" pos:column="46"/></name> <operator pos:line="10" pos:column="47">&amp;&amp;<pos:position pos:line="10" pos:column="57"/></operator> <name pos:line="10" pos:column="50">errno<pos:position pos:line="10" pos:column="55"/></name> <operator pos:line="10" pos:column="56">!=<pos:position pos:line="10" pos:column="58"/></operator> <name pos:line="10" pos:column="59">EAGAIN<pos:position pos:line="10" pos:column="65"/></name> <operator pos:line="10" pos:column="66">&amp;&amp;<pos:position pos:line="10" pos:column="76"/></operator>
		<name pos:line="11" pos:column="17">errno<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">!=<pos:position pos:line="11" pos:column="25"/></operator> <name pos:line="11" pos:column="26">EINTR<pos:position pos:line="11" pos:column="31"/></name></expr>)<pos:position pos:line="11" pos:column="32"/></condition><then pos:line="11" pos:column="32"> <block pos:line="11" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">error<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><literal type="string" pos:line="12" pos:column="23">"read(%s) failed: %s"<pos:position pos:line="12" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="46">t<pos:position pos:line="12" pos:column="47"/></name><operator pos:line="12" pos:column="47">-&gt;<pos:position pos:line="12" pos:column="52"/></operator><name pos:line="12" pos:column="49">src_name<pos:position pos:line="12" pos:column="57"/></name></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="59">strerror<pos:position pos:line="12" pos:column="67"/></name><argument_list pos:line="12" pos:column="67">(<argument><expr><name pos:line="12" pos:column="68">errno<pos:position pos:line="12" pos:column="73"/></name></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="76"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><operator pos:line="13" pos:column="24">-<pos:position pos:line="13" pos:column="25"/></operator><literal type="number" pos:line="13" pos:column="25">1<pos:position pos:line="13" pos:column="26"/></literal></expr>;<pos:position pos:line="13" pos:column="27"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then> <elseif pos:line="14" pos:column="11">else <if pos:line="14" pos:column="16">if <condition pos:line="14" pos:column="19">(<expr><name pos:line="14" pos:column="20">bytes<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">==<pos:position pos:line="14" pos:column="28"/></operator> <literal type="number" pos:line="14" pos:column="29">0<pos:position pos:line="14" pos:column="30"/></literal></expr>)<pos:position pos:line="14" pos:column="31"/></condition><then pos:line="14" pos:column="31"> <block pos:line="14" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">transfer_debug<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><literal type="string" pos:line="15" pos:column="32">"%s EOF (with %i bytes in buffer)"<pos:position pos:line="15" pos:column="66"/></literal></expr></argument>,
			<argument><expr><name><name pos:line="16" pos:column="25">t<pos:position pos:line="16" pos:column="26"/></name><operator pos:line="16" pos:column="26">-&gt;<pos:position pos:line="16" pos:column="31"/></operator><name pos:line="16" pos:column="28">src_name<pos:position pos:line="16" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="38">(<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="39">int<pos:position pos:line="16" pos:column="42"/></name><operator pos:line="16" pos:column="42">)<pos:position pos:line="16" pos:column="43"/></operator><name><name pos:line="16" pos:column="43">t<pos:position pos:line="16" pos:column="44"/></name><operator pos:line="16" pos:column="44">-&gt;<pos:position pos:line="16" pos:column="49"/></operator><name pos:line="16" pos:column="46">bufuse<pos:position pos:line="16" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="17" pos:column="17">t<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">state<pos:position pos:line="17" pos:column="25"/></name></name> <operator pos:line="17" pos:column="26">=<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="28">SSTATE_FLUSHING<pos:position pos:line="17" pos:column="43"/></name></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if></elseif> <elseif pos:line="18" pos:column="11">else <if pos:line="18" pos:column="16">if <condition pos:line="18" pos:column="19">(<expr><name pos:line="18" pos:column="20">bytes<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">&gt;<pos:position pos:line="18" pos:column="30"/></operator> <literal type="number" pos:line="18" pos:column="28">0<pos:position pos:line="18" pos:column="29"/></literal></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30"> <block pos:line="18" pos:column="31">{
		<expr_stmt><expr><name><name pos:line="19" pos:column="17">t<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">bufuse<pos:position pos:line="19" pos:column="26"/></name></name> <operator pos:line="19" pos:column="27">+=<pos:position pos:line="19" pos:column="29"/></operator> <name pos:line="19" pos:column="30">bytes<pos:position pos:line="19" pos:column="35"/></name></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">transfer_debug<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><literal type="string" pos:line="20" pos:column="32">"Read %i bytes from %s (buffer now at %i)"<pos:position pos:line="20" pos:column="74"/></literal></expr></argument>,
			<argument><expr><operator pos:line="21" pos:column="25">(<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">int<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">)<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="30">bytes<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="37">t<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">-&gt;<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="40">src_name<pos:position pos:line="21" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="50">(<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="51">int<pos:position pos:line="21" pos:column="54"/></name><operator pos:line="21" pos:column="54">)<pos:position pos:line="21" pos:column="55"/></operator><name><name pos:line="21" pos:column="55">t<pos:position pos:line="21" pos:column="56"/></name><operator pos:line="21" pos:column="56">-&gt;<pos:position pos:line="21" pos:column="61"/></operator><name pos:line="21" pos:column="58">bufuse<pos:position pos:line="21" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if></elseif></if>
	<return pos:line="23" pos:column="9">return <expr><literal type="number" pos:line="23" pos:column="16">0<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
