<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2218_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">report_pack_garbage<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">string_list<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">list<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">baselen<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><operator pos:line="3" pos:column="26">-<pos:position pos:line="3" pos:column="27"/></operator><literal type="number" pos:line="3" pos:column="27">1<pos:position pos:line="3" pos:column="28"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="30">first<pos:position pos:line="3" pos:column="35"/></name> <init pos:line="3" pos:column="36">= <expr><literal type="number" pos:line="3" pos:column="38">0<pos:position pos:line="3" pos:column="39"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="41">seen_bits<pos:position pos:line="3" pos:column="50"/></name> <init pos:line="3" pos:column="51">= <expr><literal type="number" pos:line="3" pos:column="53">0<pos:position pos:line="3" pos:column="54"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="55"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">report_garbage<pos:position pos:line="5" pos:column="28"/></name></expr>)<pos:position pos:line="5" pos:column="29"/></condition><then pos:line="5" pos:column="29">
		<block type="pseudo"><return pos:line="6" pos:column="17">return;<pos:position pos:line="6" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">string_list_sort<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">list<pos:position pos:line="8" pos:column="30"/></name></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt>

	<for pos:line="10" pos:column="9">for <control pos:line="10" pos:column="13">(<init><expr><name pos:line="10" pos:column="14">i<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <literal type="number" pos:line="10" pos:column="18">0<pos:position pos:line="10" pos:column="19"/></literal></expr>;<pos:position pos:line="10" pos:column="20"/></init> <condition><expr><name pos:line="10" pos:column="21">i<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">&lt;<pos:position pos:line="10" pos:column="27"/></operator> <name><name pos:line="10" pos:column="25">list<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">-&gt;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="31">nr<pos:position pos:line="10" pos:column="33"/></name></name></expr>;<pos:position pos:line="10" pos:column="34"/></condition> <incr><expr><name pos:line="10" pos:column="35">i<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">++<pos:position pos:line="10" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="10" pos:column="39"/></control> <block pos:line="10" pos:column="40">{
		<decl_stmt><decl><type><specifier pos:line="11" pos:column="17">const<pos:position pos:line="11" pos:column="22"/></specifier> <name pos:line="11" pos:column="23">char<pos:position pos:line="11" pos:column="27"/></name> <modifier pos:line="11" pos:column="28">*<pos:position pos:line="11" pos:column="29"/></modifier></type><name pos:line="11" pos:column="29">path<pos:position pos:line="11" pos:column="33"/></name> <init pos:line="11" pos:column="34">= <expr><name><name pos:line="11" pos:column="36">list<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">-&gt;<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="42">items<pos:position pos:line="11" pos:column="47"/></name><index pos:line="11" pos:column="47">[<expr><name pos:line="11" pos:column="48">i<pos:position pos:line="11" pos:column="49"/></name></expr>]<pos:position pos:line="11" pos:column="50"/></index></name><operator pos:line="11" pos:column="50">.<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="51">string<pos:position pos:line="11" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="58"/></decl_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">baselen<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">!=<pos:position pos:line="12" pos:column="31"/></operator> <operator pos:line="12" pos:column="32">-<pos:position pos:line="12" pos:column="33"/></operator><literal type="number" pos:line="12" pos:column="33">1<pos:position pos:line="12" pos:column="34"/></literal> <operator pos:line="12" pos:column="35">&amp;&amp;<pos:position pos:line="12" pos:column="45"/></operator>
		    <call><name pos:line="13" pos:column="21">strncmp<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">path<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="35">list<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">-&gt;<pos:position pos:line="13" pos:column="44"/></operator><name pos:line="13" pos:column="41">items<pos:position pos:line="13" pos:column="46"/></name><index pos:line="13" pos:column="46">[<expr><name pos:line="13" pos:column="47">first<pos:position pos:line="13" pos:column="52"/></name></expr>]<pos:position pos:line="13" pos:column="53"/></index></name><operator pos:line="13" pos:column="53">.<pos:position pos:line="13" pos:column="54"/></operator><name pos:line="13" pos:column="54">string<pos:position pos:line="13" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="62">baselen<pos:position pos:line="13" pos:column="69"/></name></expr></argument>)<pos:position pos:line="13" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="71"/></condition><then pos:line="13" pos:column="71"> <block pos:line="13" pos:column="72">{
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">report_helper<pos:position pos:line="14" pos:column="38"/></name><argument_list pos:line="14" pos:column="38">(<argument><expr><name pos:line="14" pos:column="39">list<pos:position pos:line="14" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="45">seen_bits<pos:position pos:line="14" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="56">first<pos:position pos:line="14" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="63">i<pos:position pos:line="14" pos:column="64"/></name></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><name pos:line="15" pos:column="25">baselen<pos:position pos:line="15" pos:column="32"/></name> <operator pos:line="15" pos:column="33">=<pos:position pos:line="15" pos:column="34"/></operator> <operator pos:line="15" pos:column="35">-<pos:position pos:line="15" pos:column="36"/></operator><literal type="number" pos:line="15" pos:column="36">1<pos:position pos:line="15" pos:column="37"/></literal></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><name pos:line="16" pos:column="25">seen_bits<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">=<pos:position pos:line="16" pos:column="36"/></operator> <literal type="number" pos:line="16" pos:column="37">0<pos:position pos:line="16" pos:column="38"/></literal></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">baselen<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">==<pos:position pos:line="18" pos:column="31"/></operator> <operator pos:line="18" pos:column="32">-<pos:position pos:line="18" pos:column="33"/></operator><literal type="number" pos:line="18" pos:column="33">1<pos:position pos:line="18" pos:column="34"/></literal></expr>)<pos:position pos:line="18" pos:column="35"/></condition><then pos:line="18" pos:column="35"> <block pos:line="18" pos:column="36">{
			<decl_stmt><decl><type><specifier pos:line="19" pos:column="25">const<pos:position pos:line="19" pos:column="30"/></specifier> <name pos:line="19" pos:column="31">char<pos:position pos:line="19" pos:column="35"/></name> <modifier pos:line="19" pos:column="36">*<pos:position pos:line="19" pos:column="37"/></modifier></type><name pos:line="19" pos:column="37">dot<pos:position pos:line="19" pos:column="40"/></name> <init pos:line="19" pos:column="41">= <expr><call><name pos:line="19" pos:column="43">strrchr<pos:position pos:line="19" pos:column="50"/></name><argument_list pos:line="19" pos:column="50">(<argument><expr><name pos:line="19" pos:column="51">path<pos:position pos:line="19" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="57">'.'<pos:position pos:line="19" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="62"/></decl_stmt>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><operator pos:line="20" pos:column="29">!<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">dot<pos:position pos:line="20" pos:column="33"/></name></expr>)<pos:position pos:line="20" pos:column="34"/></condition><then pos:line="20" pos:column="34"> <block pos:line="20" pos:column="35">{
				<expr_stmt><expr><call><name pos:line="21" pos:column="33">report_garbage<pos:position pos:line="21" pos:column="47"/></name><argument_list pos:line="21" pos:column="47">(<argument><expr><name pos:line="21" pos:column="48">PACKDIR_FILE_GARBAGE<pos:position pos:line="21" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="70">path<pos:position pos:line="21" pos:column="74"/></name></expr></argument>)<pos:position pos:line="21" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="76"/></expr_stmt>
				<continue pos:line="22" pos:column="33">continue;<pos:position pos:line="22" pos:column="42"/></continue>
			}<pos:position pos:line="23" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="24" pos:column="25">baselen<pos:position pos:line="24" pos:column="32"/></name> <operator pos:line="24" pos:column="33">=<pos:position pos:line="24" pos:column="34"/></operator> <name pos:line="24" pos:column="35">dot<pos:position pos:line="24" pos:column="38"/></name> <operator pos:line="24" pos:column="39">-<pos:position pos:line="24" pos:column="40"/></operator> <name pos:line="24" pos:column="41">path<pos:position pos:line="24" pos:column="45"/></name> <operator pos:line="24" pos:column="46">+<pos:position pos:line="24" pos:column="47"/></operator> <literal type="number" pos:line="24" pos:column="48">1<pos:position pos:line="24" pos:column="49"/></literal></expr>;<pos:position pos:line="24" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><name pos:line="25" pos:column="25">first<pos:position pos:line="25" pos:column="30"/></name> <operator pos:line="25" pos:column="31">=<pos:position pos:line="25" pos:column="32"/></operator> <name pos:line="25" pos:column="33">i<pos:position pos:line="25" pos:column="34"/></name></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><call><name pos:line="27" pos:column="22">strcmp<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">path<pos:position pos:line="27" pos:column="33"/></name> <operator pos:line="27" pos:column="34">+<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="36">baselen<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="45">"pack"<pos:position pos:line="27" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="53"/></condition><then pos:line="27" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="25">seen_bits<pos:position pos:line="28" pos:column="34"/></name> <operator pos:line="28" pos:column="35">|=<pos:position pos:line="28" pos:column="37"/></operator> <literal type="number" pos:line="28" pos:column="38">1<pos:position pos:line="28" pos:column="39"/></literal></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt></block></then>
		<elseif pos:line="29" pos:column="17">else <if pos:line="29" pos:column="22">if <condition pos:line="29" pos:column="25">(<expr><operator pos:line="29" pos:column="26">!<pos:position pos:line="29" pos:column="27"/></operator><call><name pos:line="29" pos:column="27">strcmp<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><name pos:line="29" pos:column="34">path<pos:position pos:line="29" pos:column="38"/></name> <operator pos:line="29" pos:column="39">+<pos:position pos:line="29" pos:column="40"/></operator> <name pos:line="29" pos:column="41">baselen<pos:position pos:line="29" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="50">"idx"<pos:position pos:line="29" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="57"/></condition><then pos:line="29" pos:column="57">
			<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="25">seen_bits<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">|=<pos:position pos:line="30" pos:column="37"/></operator> <literal type="number" pos:line="30" pos:column="38">2<pos:position pos:line="30" pos:column="39"/></literal></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="31" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">report_helper<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">list<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="29">seen_bits<pos:position pos:line="32" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="40">first<pos:position pos:line="32" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="47">list<pos:position pos:line="32" pos:column="51"/></name><operator pos:line="32" pos:column="51">-&gt;<pos:position pos:line="32" pos:column="56"/></operator><name pos:line="32" pos:column="53">nr<pos:position pos:line="32" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
