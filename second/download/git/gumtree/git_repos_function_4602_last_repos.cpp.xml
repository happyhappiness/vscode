<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4602_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">canonical_name<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">host<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">strbuf<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">out<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">status<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><operator pos:line="3" pos:column="22">-<pos:position pos:line="3" pos:column="23"/></operator><literal type="number" pos:line="3" pos:column="23">1<pos:position pos:line="3" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>

<cpp:ifndef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifndef<pos:position pos:line="5" pos:column="8"/></cpp:directive> <name pos:line="5" pos:column="9">NO_IPV6<pos:position pos:line="5" pos:column="16"/></name></cpp:ifndef>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">addrinfo<pos:position pos:line="6" pos:column="24"/></name></name></type> <name pos:line="6" pos:column="25">hints<pos:position pos:line="6" pos:column="30"/></name></decl>, <modifier pos:line="6" pos:column="32">*<pos:position pos:line="6" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="33">ai<pos:position pos:line="6" pos:column="35"/></name></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">memset<pos:position pos:line="7" pos:column="15"/></name> <argument_list pos:line="7" pos:column="16">(<argument><expr><operator pos:line="7" pos:column="17">&amp;<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="18">hints<pos:position pos:line="7" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="25">'\0'<pos:position pos:line="7" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="31">sizeof <argument_list pos:line="7" pos:column="38">(<argument><expr><name pos:line="7" pos:column="39">hints<pos:position pos:line="7" pos:column="44"/></name></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="8" pos:column="9">hints<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">.<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">ai_flags<pos:position pos:line="8" pos:column="23"/></name></name> <operator pos:line="8" pos:column="24">=<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="26">AI_CANONNAME<pos:position pos:line="8" pos:column="38"/></name></expr>;<pos:position pos:line="8" pos:column="39"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">getaddrinfo<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">host<pos:position pos:line="9" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="32">NULL<pos:position pos:line="9" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="38">&amp;<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="39">hints<pos:position pos:line="9" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="46">&amp;<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="47">ai<pos:position pos:line="9" pos:column="49"/></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51"> <block pos:line="9" pos:column="52">{
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name pos:line="10" pos:column="21">ai<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">&amp;&amp;<pos:position pos:line="10" pos:column="34"/></operator> <name><name pos:line="10" pos:column="27">ai<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">-&gt;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="31">ai_canonname<pos:position pos:line="10" pos:column="43"/></name></name> <operator pos:line="10" pos:column="44">&amp;&amp;<pos:position pos:line="10" pos:column="54"/></operator> <call><name pos:line="10" pos:column="47">strchr<pos:position pos:line="10" pos:column="53"/></name><argument_list pos:line="10" pos:column="53">(<argument><expr><name><name pos:line="10" pos:column="54">ai<pos:position pos:line="10" pos:column="56"/></name><operator pos:line="10" pos:column="56">-&gt;<pos:position pos:line="10" pos:column="61"/></operator><name pos:line="10" pos:column="58">ai_canonname<pos:position pos:line="10" pos:column="70"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="10" pos:column="72">'.'<pos:position pos:line="10" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="77"/></condition><then pos:line="10" pos:column="77"> <block pos:line="10" pos:column="78">{
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">strbuf_addstr<pos:position pos:line="11" pos:column="38"/></name><argument_list pos:line="11" pos:column="38">(<argument><expr><name pos:line="11" pos:column="39">out<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="44">ai<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">-&gt;<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="48">ai_canonname<pos:position pos:line="11" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name pos:line="12" pos:column="25">status<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">=<pos:position pos:line="12" pos:column="33"/></operator> <literal type="number" pos:line="12" pos:column="34">0<pos:position pos:line="12" pos:column="35"/></literal></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">freeaddrinfo<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">ai<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
	<decl_stmt><decl><type><name><name pos:line="17" pos:column="9">struct<pos:position pos:line="17" pos:column="15"/></name> <name pos:line="17" pos:column="16">hostent<pos:position pos:line="17" pos:column="23"/></name></name> <modifier pos:line="17" pos:column="24">*<pos:position pos:line="17" pos:column="25"/></modifier></type><name pos:line="17" pos:column="25">he<pos:position pos:line="17" pos:column="27"/></name> <init pos:line="17" pos:column="28">= <expr><call><name pos:line="17" pos:column="30">gethostbyname<pos:position pos:line="17" pos:column="43"/></name><argument_list pos:line="17" pos:column="43">(<argument><expr><name pos:line="17" pos:column="44">host<pos:position pos:line="17" pos:column="48"/></name></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="50"/></decl_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">he<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">&amp;&amp;<pos:position pos:line="18" pos:column="26"/></operator> <call><name pos:line="18" pos:column="19">strchr<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><name><name pos:line="18" pos:column="26">he<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">-&gt;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="30">h_name<pos:position pos:line="18" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="38">'.'<pos:position pos:line="18" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43"> <block pos:line="18" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">strbuf_addstr<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">out<pos:position pos:line="19" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="36">he<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">-&gt;<pos:position pos:line="19" pos:column="43"/></operator><name pos:line="19" pos:column="40">h_name<pos:position pos:line="19" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">status<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="26">0<pos:position pos:line="20" pos:column="27"/></literal></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="22" pos:column="8">/* NO_IPV6 */</comment>

	<return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">status<pos:position pos:line="24" pos:column="22"/></name></expr>;<pos:position pos:line="24" pos:column="23"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
