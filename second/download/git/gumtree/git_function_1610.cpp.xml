<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1610.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">resolve_symlink<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">p<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">size_t<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">s<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">depth<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">MAXDEPTH<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>

	<while pos:line="5" pos:column="9">while <condition pos:line="5" pos:column="15">(<expr><name pos:line="5" pos:column="16">depth<pos:position pos:line="5" pos:column="21"/></name><operator pos:line="5" pos:column="21">--<pos:position pos:line="5" pos:column="23"/></operator></expr>)<pos:position pos:line="5" pos:column="24"/></condition> <block pos:line="5" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">char<pos:position pos:line="6" pos:column="21"/></name></type> <name><name pos:line="6" pos:column="22">link<pos:position pos:line="6" pos:column="26"/></name><index pos:line="6" pos:column="26">[<expr><name pos:line="6" pos:column="27">PATH_MAX<pos:position pos:line="6" pos:column="35"/></name></expr>]<pos:position pos:line="6" pos:column="36"/></index></name></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">int<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">link_len<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><call><name pos:line="7" pos:column="32">readlink<pos:position pos:line="7" pos:column="40"/></name><argument_list pos:line="7" pos:column="40">(<argument><expr><name pos:line="7" pos:column="41">p<pos:position pos:line="7" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="44">link<pos:position pos:line="7" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="50">sizeof<argument_list pos:line="7" pos:column="56">(<argument><expr><name pos:line="7" pos:column="57">link<pos:position pos:line="7" pos:column="61"/></name></expr></argument>)<pos:position pos:line="7" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="64"/></decl_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">link_len<pos:position pos:line="8" pos:column="29"/></name> <operator pos:line="8" pos:column="30">&lt;<pos:position pos:line="8" pos:column="34"/></operator> <literal type="number" pos:line="8" pos:column="32">0<pos:position pos:line="8" pos:column="33"/></literal></expr>)<pos:position pos:line="8" pos:column="34"/></condition><then pos:line="8" pos:column="34"> <block pos:line="8" pos:column="35">{
			<comment type="block" pos:line="9" pos:column="25">/* not a symlink anymore */</comment>
			<return pos:line="10" pos:column="25">return <expr><name pos:line="10" pos:column="32">p<pos:position pos:line="10" pos:column="33"/></name></expr>;<pos:position pos:line="10" pos:column="34"/></return>
		}<pos:position pos:line="11" pos:column="18"/></block></then>
		<elseif pos:line="12" pos:column="17">else <if pos:line="12" pos:column="22">if <condition pos:line="12" pos:column="25">(<expr><name pos:line="12" pos:column="26">link_len<pos:position pos:line="12" pos:column="34"/></name> <operator pos:line="12" pos:column="35">&lt;<pos:position pos:line="12" pos:column="39"/></operator> <sizeof pos:line="12" pos:column="37">sizeof<argument_list pos:line="12" pos:column="43">(<argument><expr><name pos:line="12" pos:column="44">link<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></sizeof></expr>)<pos:position pos:line="12" pos:column="50"/></condition><then pos:line="12" pos:column="50">
			<comment type="block" pos:line="13" pos:column="25">/* readlink() never null-terminates */</comment>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="14" pos:column="25">link<pos:position pos:line="14" pos:column="29"/></name><index pos:line="14" pos:column="29">[<expr><name pos:line="14" pos:column="30">link_len<pos:position pos:line="14" pos:column="38"/></name></expr>]<pos:position pos:line="14" pos:column="39"/></index></name> <operator pos:line="14" pos:column="40">=<pos:position pos:line="14" pos:column="41"/></operator> <literal type="char" pos:line="14" pos:column="42">'\0'<pos:position pos:line="14" pos:column="46"/></literal></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt></block></then></if></elseif>
		<else pos:line="15" pos:column="17">else <block pos:line="15" pos:column="22">{
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">warning<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><literal type="string" pos:line="16" pos:column="33">"%s: symlink too long"<pos:position pos:line="16" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="57">p<pos:position pos:line="16" pos:column="58"/></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="60"/></expr_stmt>
			<return pos:line="17" pos:column="25">return <expr><name pos:line="17" pos:column="32">p<pos:position pos:line="17" pos:column="33"/></name></expr>;<pos:position pos:line="17" pos:column="34"/></return>
		}<pos:position pos:line="18" pos:column="18"/></block></else></if>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name pos:line="20" pos:column="21">is_absolute_path<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">(<argument><expr><name pos:line="20" pos:column="38">link<pos:position pos:line="20" pos:column="42"/></name></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44"> <block pos:line="20" pos:column="45">{
			<comment type="block" pos:line="21" pos:column="25">/* absolute path simply replaces p */</comment>
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name pos:line="22" pos:column="29">link_len<pos:position pos:line="22" pos:column="37"/></name> <operator pos:line="22" pos:column="38">&lt;<pos:position pos:line="22" pos:column="42"/></operator> <name pos:line="22" pos:column="40">s<pos:position pos:line="22" pos:column="41"/></name></expr>)<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="33">strcpy<pos:position pos:line="23" pos:column="39"/></name><argument_list pos:line="23" pos:column="39">(<argument><expr><name pos:line="23" pos:column="40">p<pos:position pos:line="23" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="43">link<pos:position pos:line="23" pos:column="47"/></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt></block></then>
			<else pos:line="24" pos:column="25">else <block pos:line="24" pos:column="30">{
				<expr_stmt><expr><call><name pos:line="25" pos:column="33">warning<pos:position pos:line="25" pos:column="40"/></name><argument_list pos:line="25" pos:column="40">(<argument><expr><literal type="string" pos:line="25" pos:column="41">"%s: symlink too long"<pos:position pos:line="25" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="65">p<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
				<return pos:line="26" pos:column="33">return <expr><name pos:line="26" pos:column="40">p<pos:position pos:line="26" pos:column="41"/></name></expr>;<pos:position pos:line="26" pos:column="42"/></return>
			}<pos:position pos:line="27" pos:column="26"/></block></else></if>
		}<pos:position pos:line="28" pos:column="18"/></block></then> <else pos:line="28" pos:column="19">else <block pos:line="28" pos:column="24">{
			<comment type="block" pos:line="29" pos:column="25">/*
			 * link is a relative path, so I must replace the
			 * last element of p with it.
			 */</comment>
			<decl_stmt><decl><type><name pos:line="33" pos:column="25">char<pos:position pos:line="33" pos:column="29"/></name> <modifier pos:line="33" pos:column="30">*<pos:position pos:line="33" pos:column="31"/></modifier></type><name pos:line="33" pos:column="31">r<pos:position pos:line="33" pos:column="32"/></name> <init pos:line="33" pos:column="33">= <expr><operator pos:line="33" pos:column="35">(<pos:position pos:line="33" pos:column="36"/></operator><name pos:line="33" pos:column="36">char<pos:position pos:line="33" pos:column="40"/></name> <operator pos:line="33" pos:column="41">*<pos:position pos:line="33" pos:column="42"/></operator><operator pos:line="33" pos:column="42">)<pos:position pos:line="33" pos:column="43"/></operator><call><name pos:line="33" pos:column="43">last_path_elm<pos:position pos:line="33" pos:column="56"/></name><argument_list pos:line="33" pos:column="56">(<argument><expr><name pos:line="33" pos:column="57">p<pos:position pos:line="33" pos:column="58"/></name></expr></argument>)<pos:position pos:line="33" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="60"/></decl_stmt>
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><name pos:line="34" pos:column="29">r<pos:position pos:line="34" pos:column="30"/></name> <operator pos:line="34" pos:column="31">-<pos:position pos:line="34" pos:column="32"/></operator> <name pos:line="34" pos:column="33">p<pos:position pos:line="34" pos:column="34"/></name> <operator pos:line="34" pos:column="35">+<pos:position pos:line="34" pos:column="36"/></operator> <name pos:line="34" pos:column="37">link_len<pos:position pos:line="34" pos:column="45"/></name> <operator pos:line="34" pos:column="46">&lt;<pos:position pos:line="34" pos:column="50"/></operator> <name pos:line="34" pos:column="48">s<pos:position pos:line="34" pos:column="49"/></name></expr>)<pos:position pos:line="34" pos:column="50"/></condition><then pos:line="34" pos:column="50">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="33">strcpy<pos:position pos:line="35" pos:column="39"/></name><argument_list pos:line="35" pos:column="39">(<argument><expr><name pos:line="35" pos:column="40">r<pos:position pos:line="35" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="43">link<pos:position pos:line="35" pos:column="47"/></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt></block></then>
			<else pos:line="36" pos:column="25">else <block pos:line="36" pos:column="30">{
				<expr_stmt><expr><call><name pos:line="37" pos:column="33">warning<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><literal type="string" pos:line="37" pos:column="41">"%s: symlink too long"<pos:position pos:line="37" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="65">p<pos:position pos:line="37" pos:column="66"/></name></expr></argument>)<pos:position pos:line="37" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="68"/></expr_stmt>
				<return pos:line="38" pos:column="33">return <expr><name pos:line="38" pos:column="40">p<pos:position pos:line="38" pos:column="41"/></name></expr>;<pos:position pos:line="38" pos:column="42"/></return>
			}<pos:position pos:line="39" pos:column="26"/></block></else></if>
		}<pos:position pos:line="40" pos:column="18"/></block></else></if>
	}<pos:position pos:line="41" pos:column="10"/></block></while>
	<return pos:line="42" pos:column="9">return <expr><name pos:line="42" pos:column="16">p<pos:position pos:line="42" pos:column="17"/></name></expr>;<pos:position pos:line="42" pos:column="18"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
