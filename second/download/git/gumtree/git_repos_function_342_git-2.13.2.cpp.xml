<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_342_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">has_dir_name<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">index_state<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">istate<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">cache_entry<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">ce<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">int<pos:position pos:line="2" pos:column="58"/></name></type> <name pos:line="2" pos:column="59">pos<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="64">int<pos:position pos:line="2" pos:column="67"/></name></type> <name pos:line="2" pos:column="68">ok_to_replace<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="82"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">retval<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><literal type="number" pos:line="4" pos:column="22">0<pos:position pos:line="4" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">stage<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><call><name pos:line="5" pos:column="21">ce_stage<pos:position pos:line="5" pos:column="29"/></name><argument_list pos:line="5" pos:column="29">(<argument><expr><name pos:line="5" pos:column="30">ce<pos:position pos:line="5" pos:column="32"/></name></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">name<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">ce<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">-&gt;<pos:position pos:line="6" pos:column="35"/></operator><name pos:line="6" pos:column="32">name<pos:position pos:line="6" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">slash<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><name pos:line="7" pos:column="29">name<pos:position pos:line="7" pos:column="33"/></name> <operator pos:line="7" pos:column="34">+<pos:position pos:line="7" pos:column="35"/></operator> <call><name pos:line="7" pos:column="36">ce_namelen<pos:position pos:line="7" pos:column="46"/></name><argument_list pos:line="7" pos:column="46">(<argument><expr><name pos:line="7" pos:column="47">ce<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">len_eq_last<pos:position pos:line="8" pos:column="27"/></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">cmp_last<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>

	<comment type="block" pos:line="11" pos:column="9">/*
	 * We are frequently called during an iteration on a sorted
	 * list of pathnames and while building a new index.  Therefore,
	 * there is a high probability that this entry will eventually
	 * be appended to the index, rather than inserted in the middle.
	 * If we can confirm that, we can avoid binary searches on the
	 * components of the pathname.
	 *
	 * Compare the entry's full path with the last path in the index.
	 */</comment>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name><name pos:line="21" pos:column="13">istate<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">-&gt;<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="21">cache_nr<pos:position pos:line="21" pos:column="29"/></name></name> <operator pos:line="21" pos:column="30">&gt;<pos:position pos:line="21" pos:column="34"/></operator> <literal type="number" pos:line="21" pos:column="32">0<pos:position pos:line="21" pos:column="33"/></literal></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34"> <block pos:line="21" pos:column="35">{
		<expr_stmt><expr><name pos:line="22" pos:column="17">cmp_last<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">=<pos:position pos:line="22" pos:column="27"/></operator> <call><name pos:line="22" pos:column="28">strcmp_offset<pos:position pos:line="22" pos:column="41"/></name><argument_list pos:line="22" pos:column="41">(<argument><expr><name pos:line="22" pos:column="42">name<pos:position pos:line="22" pos:column="46"/></name></expr></argument>,
			<argument><expr><name><name pos:line="23" pos:column="25">istate<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">-&gt;<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="33">cache<pos:position pos:line="23" pos:column="38"/></name><index pos:line="23" pos:column="38">[<expr><name><name pos:line="23" pos:column="39">istate<pos:position pos:line="23" pos:column="45"/></name><operator pos:line="23" pos:column="45">-&gt;<pos:position pos:line="23" pos:column="50"/></operator><name pos:line="23" pos:column="47">cache_nr<pos:position pos:line="23" pos:column="55"/></name></name> <operator pos:line="23" pos:column="56">-<pos:position pos:line="23" pos:column="57"/></operator> <literal type="number" pos:line="23" pos:column="58">1<pos:position pos:line="23" pos:column="59"/></literal></expr>]<pos:position pos:line="23" pos:column="60"/></index></name><operator pos:line="23" pos:column="60">-&gt;<pos:position pos:line="23" pos:column="65"/></operator><name pos:line="23" pos:column="62">name<pos:position pos:line="23" pos:column="66"/></name></expr></argument>,
			<argument><expr><operator pos:line="24" pos:column="25">&amp;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="26">len_eq_last<pos:position pos:line="24" pos:column="37"/></name></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">cmp_last<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">&gt;<pos:position pos:line="25" pos:column="34"/></operator> <literal type="number" pos:line="25" pos:column="32">0<pos:position pos:line="25" pos:column="33"/></literal></expr>)<pos:position pos:line="25" pos:column="34"/></condition><then pos:line="25" pos:column="34"> <block pos:line="25" pos:column="35">{
			<if pos:line="26" pos:column="25">if <condition pos:line="26" pos:column="28">(<expr><name pos:line="26" pos:column="29">len_eq_last<pos:position pos:line="26" pos:column="40"/></name> <operator pos:line="26" pos:column="41">==<pos:position pos:line="26" pos:column="43"/></operator> <literal type="number" pos:line="26" pos:column="44">0<pos:position pos:line="26" pos:column="45"/></literal></expr>)<pos:position pos:line="26" pos:column="46"/></condition><then pos:line="26" pos:column="46"> <block pos:line="26" pos:column="47">{
				<comment type="block" pos:line="27" pos:column="33">/*
				 * The entry sorts AFTER the last one in the
				 * index and their paths have no common prefix,
				 * so there cannot be a F/D conflict.
				 */</comment>
				<return pos:line="32" pos:column="33">return <expr><name pos:line="32" pos:column="40">retval<pos:position pos:line="32" pos:column="46"/></name></expr>;<pos:position pos:line="32" pos:column="47"/></return>
			}<pos:position pos:line="33" pos:column="26"/></block></then> <else pos:line="33" pos:column="27">else <block pos:line="33" pos:column="32">{
				<comment type="block" pos:line="34" pos:column="33">/*
				 * The entry sorts AFTER the last one in the
				 * index, but has a common prefix.  Fall through
				 * to the loop below to disect the entry's path
				 * and see where the difference is.
				 */</comment>
			}<pos:position pos:line="40" pos:column="26"/></block></else></if>
		}<pos:position pos:line="41" pos:column="18"/></block></then> <elseif pos:line="41" pos:column="19">else <if pos:line="41" pos:column="24">if <condition pos:line="41" pos:column="27">(<expr><name pos:line="41" pos:column="28">cmp_last<pos:position pos:line="41" pos:column="36"/></name> <operator pos:line="41" pos:column="37">==<pos:position pos:line="41" pos:column="39"/></operator> <literal type="number" pos:line="41" pos:column="40">0<pos:position pos:line="41" pos:column="41"/></literal></expr>)<pos:position pos:line="41" pos:column="42"/></condition><then pos:line="41" pos:column="42"> <block pos:line="41" pos:column="43">{
			<comment type="block" pos:line="42" pos:column="25">/*
			 * The entry exactly matches the last one in the
			 * index, but because of multiple stage and CE_REMOVE
			 * items, we fall through and let the regular search
			 * code handle it.
			 */</comment>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

	<for pos:line="51" pos:column="9">for <control pos:line="51" pos:column="13">(<init pos:line="51" pos:column="14">;<pos:position pos:line="51" pos:column="15"/></init><condition pos:line="51" pos:column="15">;<pos:position pos:line="51" pos:column="16"/></condition><incr/>)<pos:position pos:line="51" pos:column="17"/></control> <block pos:line="51" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">size_t<pos:position pos:line="52" pos:column="23"/></name></type> <name pos:line="52" pos:column="24">len<pos:position pos:line="52" pos:column="27"/></name></decl>;<pos:position pos:line="52" pos:column="28"/></decl_stmt>

		<for pos:line="54" pos:column="17">for <control pos:line="54" pos:column="21">(<init pos:line="54" pos:column="22">;<pos:position pos:line="54" pos:column="23"/></init><condition pos:line="54" pos:column="23">;<pos:position pos:line="54" pos:column="24"/></condition><incr/>)<pos:position pos:line="54" pos:column="25"/></control> <block pos:line="54" pos:column="26">{
			<if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><operator pos:line="55" pos:column="29">*<pos:position pos:line="55" pos:column="30"/></operator><operator pos:line="55" pos:column="30">--<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="32">slash<pos:position pos:line="55" pos:column="37"/></name> <operator pos:line="55" pos:column="38">==<pos:position pos:line="55" pos:column="40"/></operator> <literal type="char" pos:line="55" pos:column="41">'/'<pos:position pos:line="55" pos:column="44"/></literal></expr>)<pos:position pos:line="55" pos:column="45"/></condition><then pos:line="55" pos:column="45">
				<block type="pseudo"><break pos:line="56" pos:column="33">break;<pos:position pos:line="56" pos:column="39"/></break></block></then></if>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><name pos:line="57" pos:column="29">slash<pos:position pos:line="57" pos:column="34"/></name> <operator pos:line="57" pos:column="35">&lt;=<pos:position pos:line="57" pos:column="40"/></operator> <name><name pos:line="57" pos:column="38">ce<pos:position pos:line="57" pos:column="40"/></name><operator pos:line="57" pos:column="40">-&gt;<pos:position pos:line="57" pos:column="45"/></operator><name pos:line="57" pos:column="42">name<pos:position pos:line="57" pos:column="46"/></name></name></expr>)<pos:position pos:line="57" pos:column="47"/></condition><then pos:line="57" pos:column="47">
				<block type="pseudo"><return pos:line="58" pos:column="33">return <expr><name pos:line="58" pos:column="40">retval<pos:position pos:line="58" pos:column="46"/></name></expr>;<pos:position pos:line="58" pos:column="47"/></return></block></then></if>
		}<pos:position pos:line="59" pos:column="18"/></block></for>
		<expr_stmt><expr><name pos:line="60" pos:column="17">len<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <name pos:line="60" pos:column="23">slash<pos:position pos:line="60" pos:column="28"/></name> <operator pos:line="60" pos:column="29">-<pos:position pos:line="60" pos:column="30"/></operator> <name pos:line="60" pos:column="31">name<pos:position pos:line="60" pos:column="35"/></name></expr>;<pos:position pos:line="60" pos:column="36"/></expr_stmt>

		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name pos:line="62" pos:column="21">cmp_last<pos:position pos:line="62" pos:column="29"/></name> <operator pos:line="62" pos:column="30">&gt;<pos:position pos:line="62" pos:column="34"/></operator> <literal type="number" pos:line="62" pos:column="32">0<pos:position pos:line="62" pos:column="33"/></literal></expr>)<pos:position pos:line="62" pos:column="34"/></condition><then pos:line="62" pos:column="34"> <block pos:line="62" pos:column="35">{
			<comment type="block" pos:line="63" pos:column="25">/*
			 * (len + 1) is a directory boundary (including
			 * the trailing slash).  And since the loop is
			 * decrementing "slash", the first iteration is
			 * the longest directory prefix; subsequent
			 * iterations consider parent directories.
			 */</comment>

			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><name pos:line="71" pos:column="29">len<pos:position pos:line="71" pos:column="32"/></name> <operator pos:line="71" pos:column="33">+<pos:position pos:line="71" pos:column="34"/></operator> <literal type="number" pos:line="71" pos:column="35">1<pos:position pos:line="71" pos:column="36"/></literal> <operator pos:line="71" pos:column="37">&lt;=<pos:position pos:line="71" pos:column="42"/></operator> <name pos:line="71" pos:column="40">len_eq_last<pos:position pos:line="71" pos:column="51"/></name></expr>)<pos:position pos:line="71" pos:column="52"/></condition><then pos:line="71" pos:column="52"> <block pos:line="71" pos:column="53">{
				<comment type="block" pos:line="72" pos:column="33">/*
				 * The directory prefix (including the trailing
				 * slash) also appears as a prefix in the last
				 * entry, so the remainder cannot collide (because
				 * strcmp said the whole path was greater).
				 *
				 * EQ: last: xxx/A
				 *     this: xxx/B
				 *
				 * LT: last: xxx/file_A
				 *     this: xxx/file_B
				 */</comment>
				<return pos:line="84" pos:column="33">return <expr><name pos:line="84" pos:column="40">retval<pos:position pos:line="84" pos:column="46"/></name></expr>;<pos:position pos:line="84" pos:column="47"/></return>
			}<pos:position pos:line="85" pos:column="26"/></block></then></if>

			<if pos:line="87" pos:column="25">if <condition pos:line="87" pos:column="28">(<expr><name pos:line="87" pos:column="29">len<pos:position pos:line="87" pos:column="32"/></name> <operator pos:line="87" pos:column="33">&gt;<pos:position pos:line="87" pos:column="37"/></operator> <name pos:line="87" pos:column="35">len_eq_last<pos:position pos:line="87" pos:column="46"/></name></expr>)<pos:position pos:line="87" pos:column="47"/></condition><then pos:line="87" pos:column="47"> <block pos:line="87" pos:column="48">{
				<comment type="block" pos:line="88" pos:column="33">/*
				 * This part of the directory prefix (excluding
				 * the trailing slash) is longer than the known
				 * equal portions, so this sub-directory cannot
				 * collide with a file.
				 *
				 * GT: last: xxxA
				 *     this: xxxB/file
				 */</comment>
				<return pos:line="97" pos:column="33">return <expr><name pos:line="97" pos:column="40">retval<pos:position pos:line="97" pos:column="46"/></name></expr>;<pos:position pos:line="97" pos:column="47"/></return>
			}<pos:position pos:line="98" pos:column="26"/></block></then></if>

			<if pos:line="100" pos:column="25">if <condition pos:line="100" pos:column="28">(<expr><name><name pos:line="100" pos:column="29">istate<pos:position pos:line="100" pos:column="35"/></name><operator pos:line="100" pos:column="35">-&gt;<pos:position pos:line="100" pos:column="40"/></operator><name pos:line="100" pos:column="37">cache_nr<pos:position pos:line="100" pos:column="45"/></name></name> <operator pos:line="100" pos:column="46">&gt;<pos:position pos:line="100" pos:column="50"/></operator> <literal type="number" pos:line="100" pos:column="48">0<pos:position pos:line="100" pos:column="49"/></literal> <operator pos:line="100" pos:column="50">&amp;&amp;<pos:position pos:line="100" pos:column="60"/></operator>
				<call><name pos:line="101" pos:column="33">ce_namelen<pos:position pos:line="101" pos:column="43"/></name><argument_list pos:line="101" pos:column="43">(<argument><expr><name><name pos:line="101" pos:column="44">istate<pos:position pos:line="101" pos:column="50"/></name><operator pos:line="101" pos:column="50">-&gt;<pos:position pos:line="101" pos:column="55"/></operator><name pos:line="101" pos:column="52">cache<pos:position pos:line="101" pos:column="57"/></name><index pos:line="101" pos:column="57">[<expr><name><name pos:line="101" pos:column="58">istate<pos:position pos:line="101" pos:column="64"/></name><operator pos:line="101" pos:column="64">-&gt;<pos:position pos:line="101" pos:column="69"/></operator><name pos:line="101" pos:column="66">cache_nr<pos:position pos:line="101" pos:column="74"/></name></name> <operator pos:line="101" pos:column="75">-<pos:position pos:line="101" pos:column="76"/></operator> <literal type="number" pos:line="101" pos:column="77">1<pos:position pos:line="101" pos:column="78"/></literal></expr>]<pos:position pos:line="101" pos:column="79"/></index></name></expr></argument>)<pos:position pos:line="101" pos:column="80"/></argument_list></call> <operator pos:line="101" pos:column="81">&gt;<pos:position pos:line="101" pos:column="85"/></operator> <name pos:line="101" pos:column="83">len<pos:position pos:line="101" pos:column="86"/></name></expr>)<pos:position pos:line="101" pos:column="87"/></condition><then pos:line="101" pos:column="87"> <block pos:line="101" pos:column="88">{
				<comment type="block" pos:line="102" pos:column="33">/*
				 * The directory prefix lines up with part of
				 * a longer file or directory name, but sorts
				 * after it, so this sub-directory cannot
				 * collide with a file.
				 *
				 * last: xxx/yy-file (because '-' sorts before '/')
				 * this: xxx/yy/abc
				 */</comment>
				<return pos:line="111" pos:column="33">return <expr><name pos:line="111" pos:column="40">retval<pos:position pos:line="111" pos:column="46"/></name></expr>;<pos:position pos:line="111" pos:column="47"/></return>
			}<pos:position pos:line="112" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="114" pos:column="25">/*
			 * This is a possible collision. Fall through and
			 * let the regular search code handle it.
			 *
			 * last: xxx
			 * this: xxx/file
			 */</comment>
		}<pos:position pos:line="121" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="123" pos:column="17">pos<pos:position pos:line="123" pos:column="20"/></name> <operator pos:line="123" pos:column="21">=<pos:position pos:line="123" pos:column="22"/></operator> <call><name pos:line="123" pos:column="23">index_name_stage_pos<pos:position pos:line="123" pos:column="43"/></name><argument_list pos:line="123" pos:column="43">(<argument><expr><name pos:line="123" pos:column="44">istate<pos:position pos:line="123" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="52">name<pos:position pos:line="123" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="58">len<pos:position pos:line="123" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="63">stage<pos:position pos:line="123" pos:column="68"/></name></expr></argument>)<pos:position pos:line="123" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="70"/></expr_stmt>
		<if pos:line="124" pos:column="17">if <condition pos:line="124" pos:column="20">(<expr><name pos:line="124" pos:column="21">pos<pos:position pos:line="124" pos:column="24"/></name> <operator pos:line="124" pos:column="25">&gt;=<pos:position pos:line="124" pos:column="30"/></operator> <literal type="number" pos:line="124" pos:column="28">0<pos:position pos:line="124" pos:column="29"/></literal></expr>)<pos:position pos:line="124" pos:column="30"/></condition><then pos:line="124" pos:column="30"> <block pos:line="124" pos:column="31">{
			<comment type="block" pos:line="125" pos:column="25">/*
			 * Found one, but not so fast.  This could
			 * be a marker that says "I was here, but
			 * I am being removed".  Such an entry is
			 * not a part of the resulting tree, and
			 * it is Ok to have a directory at the same
			 * path.
			 */</comment>
			<if pos:line="133" pos:column="25">if <condition pos:line="133" pos:column="28">(<expr><operator pos:line="133" pos:column="29">!<pos:position pos:line="133" pos:column="30"/></operator><operator pos:line="133" pos:column="30">(<pos:position pos:line="133" pos:column="31"/></operator><name><name pos:line="133" pos:column="31">istate<pos:position pos:line="133" pos:column="37"/></name><operator pos:line="133" pos:column="37">-&gt;<pos:position pos:line="133" pos:column="42"/></operator><name pos:line="133" pos:column="39">cache<pos:position pos:line="133" pos:column="44"/></name><index pos:line="133" pos:column="44">[<expr><name pos:line="133" pos:column="45">pos<pos:position pos:line="133" pos:column="48"/></name></expr>]<pos:position pos:line="133" pos:column="49"/></index></name><operator pos:line="133" pos:column="49">-&gt;<pos:position pos:line="133" pos:column="54"/></operator><name pos:line="133" pos:column="51">ce_flags<pos:position pos:line="133" pos:column="59"/></name> <operator pos:line="133" pos:column="60">&amp;<pos:position pos:line="133" pos:column="65"/></operator> <name pos:line="133" pos:column="62">CE_REMOVE<pos:position pos:line="133" pos:column="71"/></name><operator pos:line="133" pos:column="71">)<pos:position pos:line="133" pos:column="72"/></operator></expr>)<pos:position pos:line="133" pos:column="73"/></condition><then pos:line="133" pos:column="73"> <block pos:line="133" pos:column="74">{
				<expr_stmt><expr><name pos:line="134" pos:column="33">retval<pos:position pos:line="134" pos:column="39"/></name> <operator pos:line="134" pos:column="40">=<pos:position pos:line="134" pos:column="41"/></operator> <operator pos:line="134" pos:column="42">-<pos:position pos:line="134" pos:column="43"/></operator><literal type="number" pos:line="134" pos:column="43">1<pos:position pos:line="134" pos:column="44"/></literal></expr>;<pos:position pos:line="134" pos:column="45"/></expr_stmt>
				<if pos:line="135" pos:column="33">if <condition pos:line="135" pos:column="36">(<expr><operator pos:line="135" pos:column="37">!<pos:position pos:line="135" pos:column="38"/></operator><name pos:line="135" pos:column="38">ok_to_replace<pos:position pos:line="135" pos:column="51"/></name></expr>)<pos:position pos:line="135" pos:column="52"/></condition><then pos:line="135" pos:column="52">
					<block type="pseudo"><break pos:line="136" pos:column="41">break;<pos:position pos:line="136" pos:column="47"/></break></block></then></if>
				<expr_stmt><expr><call><name pos:line="137" pos:column="33">remove_index_entry_at<pos:position pos:line="137" pos:column="54"/></name><argument_list pos:line="137" pos:column="54">(<argument><expr><name pos:line="137" pos:column="55">istate<pos:position pos:line="137" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="63">pos<pos:position pos:line="137" pos:column="66"/></name></expr></argument>)<pos:position pos:line="137" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="68"/></expr_stmt>
				<continue pos:line="138" pos:column="33">continue;<pos:position pos:line="138" pos:column="42"/></continue>
			}<pos:position pos:line="139" pos:column="26"/></block></then></if>
		}<pos:position pos:line="140" pos:column="18"/></block></then>
		<else pos:line="141" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="142" pos:column="25">pos<pos:position pos:line="142" pos:column="28"/></name> <operator pos:line="142" pos:column="29">=<pos:position pos:line="142" pos:column="30"/></operator> <operator pos:line="142" pos:column="31">-<pos:position pos:line="142" pos:column="32"/></operator><name pos:line="142" pos:column="32">pos<pos:position pos:line="142" pos:column="35"/></name><operator pos:line="142" pos:column="35">-<pos:position pos:line="142" pos:column="36"/></operator><literal type="number" pos:line="142" pos:column="36">1<pos:position pos:line="142" pos:column="37"/></literal></expr>;<pos:position pos:line="142" pos:column="38"/></expr_stmt></block></else></if>

		<comment type="block" pos:line="144" pos:column="17">/*
		 * Trivial optimization: if we find an entry that
		 * already matches the sub-directory, then we know
		 * we're ok, and we can exit.
		 */</comment>
		<while pos:line="149" pos:column="17">while <condition pos:line="149" pos:column="23">(<expr><name pos:line="149" pos:column="24">pos<pos:position pos:line="149" pos:column="27"/></name> <operator pos:line="149" pos:column="28">&lt;<pos:position pos:line="149" pos:column="32"/></operator> <name><name pos:line="149" pos:column="30">istate<pos:position pos:line="149" pos:column="36"/></name><operator pos:line="149" pos:column="36">-&gt;<pos:position pos:line="149" pos:column="41"/></operator><name pos:line="149" pos:column="38">cache_nr<pos:position pos:line="149" pos:column="46"/></name></name></expr>)<pos:position pos:line="149" pos:column="47"/></condition> <block pos:line="149" pos:column="48">{
			<decl_stmt><decl><type><name><name pos:line="150" pos:column="25">struct<pos:position pos:line="150" pos:column="31"/></name> <name pos:line="150" pos:column="32">cache_entry<pos:position pos:line="150" pos:column="43"/></name></name> <modifier pos:line="150" pos:column="44">*<pos:position pos:line="150" pos:column="45"/></modifier></type><name pos:line="150" pos:column="45">p<pos:position pos:line="150" pos:column="46"/></name> <init pos:line="150" pos:column="47">= <expr><name><name pos:line="150" pos:column="49">istate<pos:position pos:line="150" pos:column="55"/></name><operator pos:line="150" pos:column="55">-&gt;<pos:position pos:line="150" pos:column="60"/></operator><name pos:line="150" pos:column="57">cache<pos:position pos:line="150" pos:column="62"/></name><index pos:line="150" pos:column="62">[<expr><name pos:line="150" pos:column="63">pos<pos:position pos:line="150" pos:column="66"/></name></expr>]<pos:position pos:line="150" pos:column="67"/></index></name></expr></init></decl>;<pos:position pos:line="150" pos:column="68"/></decl_stmt>
			<if pos:line="151" pos:column="25">if <condition pos:line="151" pos:column="28">(<expr><operator pos:line="151" pos:column="29">(<pos:position pos:line="151" pos:column="30"/></operator><call><name pos:line="151" pos:column="30">ce_namelen<pos:position pos:line="151" pos:column="40"/></name><argument_list pos:line="151" pos:column="40">(<argument><expr><name pos:line="151" pos:column="41">p<pos:position pos:line="151" pos:column="42"/></name></expr></argument>)<pos:position pos:line="151" pos:column="43"/></argument_list></call> <operator pos:line="151" pos:column="44">&lt;=<pos:position pos:line="151" pos:column="49"/></operator> <name pos:line="151" pos:column="47">len<pos:position pos:line="151" pos:column="50"/></name><operator pos:line="151" pos:column="50">)<pos:position pos:line="151" pos:column="51"/></operator> <operator pos:line="151" pos:column="52">||<pos:position pos:line="151" pos:column="54"/></operator>
			    <operator pos:line="152" pos:column="29">(<pos:position pos:line="152" pos:column="30"/></operator><name><name pos:line="152" pos:column="30">p<pos:position pos:line="152" pos:column="31"/></name><operator pos:line="152" pos:column="31">-&gt;<pos:position pos:line="152" pos:column="36"/></operator><name pos:line="152" pos:column="33">name<pos:position pos:line="152" pos:column="37"/></name><index pos:line="152" pos:column="37">[<expr><name pos:line="152" pos:column="38">len<pos:position pos:line="152" pos:column="41"/></name></expr>]<pos:position pos:line="152" pos:column="42"/></index></name> <operator pos:line="152" pos:column="43">!=<pos:position pos:line="152" pos:column="45"/></operator> <literal type="char" pos:line="152" pos:column="46">'/'<pos:position pos:line="152" pos:column="49"/></literal><operator pos:line="152" pos:column="49">)<pos:position pos:line="152" pos:column="50"/></operator> <operator pos:line="152" pos:column="51">||<pos:position pos:line="152" pos:column="53"/></operator>
			    <call><name pos:line="153" pos:column="29">memcmp<pos:position pos:line="153" pos:column="35"/></name><argument_list pos:line="153" pos:column="35">(<argument><expr><name><name pos:line="153" pos:column="36">p<pos:position pos:line="153" pos:column="37"/></name><operator pos:line="153" pos:column="37">-&gt;<pos:position pos:line="153" pos:column="42"/></operator><name pos:line="153" pos:column="39">name<pos:position pos:line="153" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="45">name<pos:position pos:line="153" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="51">len<pos:position pos:line="153" pos:column="54"/></name></expr></argument>)<pos:position pos:line="153" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="153" pos:column="56"/></condition><then pos:line="153" pos:column="56">
				<block type="pseudo"><break pos:line="154" pos:column="33">break;<pos:position pos:line="154" pos:column="39"/></break></block></then></if> <comment type="block" pos:line="154" pos:column="40">/* not our subdirectory */</comment>
			<if pos:line="155" pos:column="25">if <condition pos:line="155" pos:column="28">(<expr><call><name pos:line="155" pos:column="29">ce_stage<pos:position pos:line="155" pos:column="37"/></name><argument_list pos:line="155" pos:column="37">(<argument><expr><name pos:line="155" pos:column="38">p<pos:position pos:line="155" pos:column="39"/></name></expr></argument>)<pos:position pos:line="155" pos:column="40"/></argument_list></call> <operator pos:line="155" pos:column="41">==<pos:position pos:line="155" pos:column="43"/></operator> <name pos:line="155" pos:column="44">stage<pos:position pos:line="155" pos:column="49"/></name> <operator pos:line="155" pos:column="50">&amp;&amp;<pos:position pos:line="155" pos:column="60"/></operator> <operator pos:line="155" pos:column="53">!<pos:position pos:line="155" pos:column="54"/></operator><operator pos:line="155" pos:column="54">(<pos:position pos:line="155" pos:column="55"/></operator><name><name pos:line="155" pos:column="55">p<pos:position pos:line="155" pos:column="56"/></name><operator pos:line="155" pos:column="56">-&gt;<pos:position pos:line="155" pos:column="61"/></operator><name pos:line="155" pos:column="58">ce_flags<pos:position pos:line="155" pos:column="66"/></name></name> <operator pos:line="155" pos:column="67">&amp;<pos:position pos:line="155" pos:column="72"/></operator> <name pos:line="155" pos:column="69">CE_REMOVE<pos:position pos:line="155" pos:column="78"/></name><operator pos:line="155" pos:column="78">)<pos:position pos:line="155" pos:column="79"/></operator></expr>)<pos:position pos:line="155" pos:column="80"/></condition><then pos:line="155" pos:column="80">
				<comment type="block" pos:line="156" pos:column="33">/*
				 * p is at the same stage as our entry, and
				 * is a subdirectory of what we are looking
				 * at, so we cannot have conflicts at our
				 * level or anything shorter.
				 */</comment>
				<block type="pseudo"><return pos:line="162" pos:column="33">return <expr><name pos:line="162" pos:column="40">retval<pos:position pos:line="162" pos:column="46"/></name></expr>;<pos:position pos:line="162" pos:column="47"/></return></block></then></if>
			<expr_stmt><expr><name pos:line="163" pos:column="25">pos<pos:position pos:line="163" pos:column="28"/></name><operator pos:line="163" pos:column="28">++<pos:position pos:line="163" pos:column="30"/></operator></expr>;<pos:position pos:line="163" pos:column="31"/></expr_stmt>
		}<pos:position pos:line="164" pos:column="18"/></block></while>
	}<pos:position pos:line="165" pos:column="10"/></block></for>
	<return pos:line="166" pos:column="9">return <expr><name pos:line="166" pos:column="16">retval<pos:position pos:line="166" pos:column="22"/></name></expr>;<pos:position pos:line="166" pos:column="23"/></return>
}<pos:position pos:line="167" pos:column="2"/></block></function></unit>
