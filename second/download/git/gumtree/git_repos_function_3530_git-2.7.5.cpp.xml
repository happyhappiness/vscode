<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3530_git-2.7.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">peel_onion<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">name<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">len<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">unsigned<pos:position pos:line="1" pos:column="58"/></name> <name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">sha1<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">char<pos:position pos:line="3" pos:column="22"/></name></type> <name><name pos:line="3" pos:column="23">outer<pos:position pos:line="3" pos:column="28"/></name><index pos:line="3" pos:column="28">[<expr><literal type="number" pos:line="3" pos:column="29">20<pos:position pos:line="3" pos:column="31"/></literal></expr>]<pos:position pos:line="3" pos:column="32"/></index></name></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">sp<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">int<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">expected_type<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><literal type="number" pos:line="5" pos:column="38">0<pos:position pos:line="5" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">lookup_flags<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><literal type="number" pos:line="6" pos:column="33">0<pos:position pos:line="6" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">object<pos:position pos:line="7" pos:column="22"/></name></name> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">o<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * "ref^{type}" dereferences ref repeatedly until you cannot
	 * dereference anymore, or you get an object of given type,
	 * whichever comes first.  "ref^{}" means just dereference
	 * tags until you get a non-tag.  "ref^0" is a shorthand for
	 * "ref^{commit}".  "commit^{tree}" could be used to find the
	 * top-level tree of the given commit.
	 */</comment>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">len<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">&lt;<pos:position pos:line="17" pos:column="21"/></operator> <literal type="number" pos:line="17" pos:column="19">4<pos:position pos:line="17" pos:column="20"/></literal> <operator pos:line="17" pos:column="21">||<pos:position pos:line="17" pos:column="23"/></operator> <name><name pos:line="17" pos:column="24">name<pos:position pos:line="17" pos:column="28"/></name><index pos:line="17" pos:column="28">[<expr><name pos:line="17" pos:column="29">len<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">-<pos:position pos:line="17" pos:column="33"/></operator><literal type="number" pos:line="17" pos:column="33">1<pos:position pos:line="17" pos:column="34"/></literal></expr>]<pos:position pos:line="17" pos:column="35"/></index></name> <operator pos:line="17" pos:column="36">!=<pos:position pos:line="17" pos:column="38"/></operator> <literal type="char" pos:line="17" pos:column="39">'}'<pos:position pos:line="17" pos:column="42"/></literal></expr>)<pos:position pos:line="17" pos:column="43"/></condition><then pos:line="17" pos:column="43">
		<block type="pseudo"><return pos:line="18" pos:column="17">return <expr><operator pos:line="18" pos:column="24">-<pos:position pos:line="18" pos:column="25"/></operator><literal type="number" pos:line="18" pos:column="25">1<pos:position pos:line="18" pos:column="26"/></literal></expr>;<pos:position pos:line="18" pos:column="27"/></return></block></then></if>

	<for pos:line="20" pos:column="9">for <control pos:line="20" pos:column="13">(<init><expr><name pos:line="20" pos:column="14">sp<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <name pos:line="20" pos:column="19">name<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">+<pos:position pos:line="20" pos:column="25"/></operator> <name pos:line="20" pos:column="26">len<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">-<pos:position pos:line="20" pos:column="31"/></operator> <literal type="number" pos:line="20" pos:column="32">1<pos:position pos:line="20" pos:column="33"/></literal></expr>;<pos:position pos:line="20" pos:column="34"/></init> <condition><expr><name pos:line="20" pos:column="35">name<pos:position pos:line="20" pos:column="39"/></name> <operator pos:line="20" pos:column="40">&lt;=<pos:position pos:line="20" pos:column="45"/></operator> <name pos:line="20" pos:column="43">sp<pos:position pos:line="20" pos:column="45"/></name></expr>;<pos:position pos:line="20" pos:column="46"/></condition> <incr><expr><name pos:line="20" pos:column="47">sp<pos:position pos:line="20" pos:column="49"/></name><operator pos:line="20" pos:column="49">--<pos:position pos:line="20" pos:column="51"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="52"/></control> <block pos:line="20" pos:column="53">{
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">int<pos:position pos:line="21" pos:column="20"/></name></type> <name pos:line="21" pos:column="21">ch<pos:position pos:line="21" pos:column="23"/></name> <init pos:line="21" pos:column="24">= <expr><operator pos:line="21" pos:column="26">*<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="27">sp<pos:position pos:line="21" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="30"/></decl_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">ch<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">==<pos:position pos:line="22" pos:column="26"/></operator> <literal type="char" pos:line="22" pos:column="27">'{'<pos:position pos:line="22" pos:column="30"/></literal> <operator pos:line="22" pos:column="31">&amp;&amp;<pos:position pos:line="22" pos:column="41"/></operator> <name pos:line="22" pos:column="34">name<pos:position pos:line="22" pos:column="38"/></name> <operator pos:line="22" pos:column="39">&lt;<pos:position pos:line="22" pos:column="43"/></operator> <name pos:line="22" pos:column="41">sp<pos:position pos:line="22" pos:column="43"/></name> <operator pos:line="22" pos:column="44">&amp;&amp;<pos:position pos:line="22" pos:column="54"/></operator> <name><name pos:line="22" pos:column="47">sp<pos:position pos:line="22" pos:column="49"/></name><index pos:line="22" pos:column="49">[<expr><operator pos:line="22" pos:column="50">-<pos:position pos:line="22" pos:column="51"/></operator><literal type="number" pos:line="22" pos:column="51">1<pos:position pos:line="22" pos:column="52"/></literal></expr>]<pos:position pos:line="22" pos:column="53"/></index></name> <operator pos:line="22" pos:column="54">==<pos:position pos:line="22" pos:column="56"/></operator> <literal type="char" pos:line="22" pos:column="57">'^'<pos:position pos:line="22" pos:column="60"/></literal></expr>)<pos:position pos:line="22" pos:column="61"/></condition><then pos:line="22" pos:column="61">
			<block type="pseudo"><break pos:line="23" pos:column="25">break;<pos:position pos:line="23" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="24" pos:column="10"/></block></for>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">sp<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">&lt;=<pos:position pos:line="25" pos:column="21"/></operator> <name pos:line="25" pos:column="19">name<pos:position pos:line="25" pos:column="23"/></name></expr>)<pos:position pos:line="25" pos:column="24"/></condition><then pos:line="25" pos:column="24">
		<block type="pseudo"><return pos:line="26" pos:column="17">return <expr><operator pos:line="26" pos:column="24">-<pos:position pos:line="26" pos:column="25"/></operator><literal type="number" pos:line="26" pos:column="25">1<pos:position pos:line="26" pos:column="26"/></literal></expr>;<pos:position pos:line="26" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="28" pos:column="9">sp<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">++<pos:position pos:line="28" pos:column="13"/></operator></expr>;<pos:position pos:line="28" pos:column="14"/></expr_stmt> <comment type="block" pos:line="28" pos:column="15">/* beginning of type name, or closing brace for empty */</comment>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name pos:line="29" pos:column="13">starts_with<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">sp<pos:position pos:line="29" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="29">"commit}"<pos:position pos:line="29" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="40"/></condition><then pos:line="29" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="17">expected_type<pos:position pos:line="30" pos:column="30"/></name> <operator pos:line="30" pos:column="31">=<pos:position pos:line="30" pos:column="32"/></operator> <name pos:line="30" pos:column="33">OBJ_COMMIT<pos:position pos:line="30" pos:column="43"/></name></expr>;<pos:position pos:line="30" pos:column="44"/></expr_stmt></block></then>
	<elseif pos:line="31" pos:column="9">else <if pos:line="31" pos:column="14">if <condition pos:line="31" pos:column="17">(<expr><call><name pos:line="31" pos:column="18">starts_with<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">sp<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="34">"tag}"<pos:position pos:line="31" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="42"/></condition><then pos:line="31" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="17">expected_type<pos:position pos:line="32" pos:column="30"/></name> <operator pos:line="32" pos:column="31">=<pos:position pos:line="32" pos:column="32"/></operator> <name pos:line="32" pos:column="33">OBJ_TAG<pos:position pos:line="32" pos:column="40"/></name></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="33" pos:column="9">else <if pos:line="33" pos:column="14">if <condition pos:line="33" pos:column="17">(<expr><call><name pos:line="33" pos:column="18">starts_with<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">sp<pos:position pos:line="33" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="34">"tree}"<pos:position pos:line="33" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="43"/></condition><then pos:line="33" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="17">expected_type<pos:position pos:line="34" pos:column="30"/></name> <operator pos:line="34" pos:column="31">=<pos:position pos:line="34" pos:column="32"/></operator> <name pos:line="34" pos:column="33">OBJ_TREE<pos:position pos:line="34" pos:column="41"/></name></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="35" pos:column="9">else <if pos:line="35" pos:column="14">if <condition pos:line="35" pos:column="17">(<expr><call><name pos:line="35" pos:column="18">starts_with<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">sp<pos:position pos:line="35" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="34">"blob}"<pos:position pos:line="35" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="43"/></condition><then pos:line="35" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="17">expected_type<pos:position pos:line="36" pos:column="30"/></name> <operator pos:line="36" pos:column="31">=<pos:position pos:line="36" pos:column="32"/></operator> <name pos:line="36" pos:column="33">OBJ_BLOB<pos:position pos:line="36" pos:column="41"/></name></expr>;<pos:position pos:line="36" pos:column="42"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="37" pos:column="9">else <if pos:line="37" pos:column="14">if <condition pos:line="37" pos:column="17">(<expr><call><name pos:line="37" pos:column="18">starts_with<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">sp<pos:position pos:line="37" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="34">"object}"<pos:position pos:line="37" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="45"/></condition><then pos:line="37" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="17">expected_type<pos:position pos:line="38" pos:column="30"/></name> <operator pos:line="38" pos:column="31">=<pos:position pos:line="38" pos:column="32"/></operator> <name pos:line="38" pos:column="33">OBJ_ANY<pos:position pos:line="38" pos:column="40"/></name></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="39" pos:column="9">else <if pos:line="39" pos:column="14">if <condition pos:line="39" pos:column="17">(<expr><name><name pos:line="39" pos:column="18">sp<pos:position pos:line="39" pos:column="20"/></name><index pos:line="39" pos:column="20">[<expr><literal type="number" pos:line="39" pos:column="21">0<pos:position pos:line="39" pos:column="22"/></literal></expr>]<pos:position pos:line="39" pos:column="23"/></index></name> <operator pos:line="39" pos:column="24">==<pos:position pos:line="39" pos:column="26"/></operator> <literal type="char" pos:line="39" pos:column="27">'}'<pos:position pos:line="39" pos:column="30"/></literal></expr>)<pos:position pos:line="39" pos:column="31"/></condition><then pos:line="39" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="17">expected_type<pos:position pos:line="40" pos:column="30"/></name> <operator pos:line="40" pos:column="31">=<pos:position pos:line="40" pos:column="32"/></operator> <name pos:line="40" pos:column="33">OBJ_NONE<pos:position pos:line="40" pos:column="41"/></name></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="41" pos:column="9">else <if pos:line="41" pos:column="14">if <condition pos:line="41" pos:column="17">(<expr><name><name pos:line="41" pos:column="18">sp<pos:position pos:line="41" pos:column="20"/></name><index pos:line="41" pos:column="20">[<expr><literal type="number" pos:line="41" pos:column="21">0<pos:position pos:line="41" pos:column="22"/></literal></expr>]<pos:position pos:line="41" pos:column="23"/></index></name> <operator pos:line="41" pos:column="24">==<pos:position pos:line="41" pos:column="26"/></operator> <literal type="char" pos:line="41" pos:column="27">'/'<pos:position pos:line="41" pos:column="30"/></literal></expr>)<pos:position pos:line="41" pos:column="31"/></condition><then pos:line="41" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="17">expected_type<pos:position pos:line="42" pos:column="30"/></name> <operator pos:line="42" pos:column="31">=<pos:position pos:line="42" pos:column="32"/></operator> <name pos:line="42" pos:column="33">OBJ_COMMIT<pos:position pos:line="42" pos:column="43"/></name></expr>;<pos:position pos:line="42" pos:column="44"/></expr_stmt></block></then></if></elseif>
	<else pos:line="43" pos:column="9">else
		<block type="pseudo"><return pos:line="44" pos:column="17">return <expr><operator pos:line="44" pos:column="24">-<pos:position pos:line="44" pos:column="25"/></operator><literal type="number" pos:line="44" pos:column="25">1<pos:position pos:line="44" pos:column="26"/></literal></expr>;<pos:position pos:line="44" pos:column="27"/></return></block></else></if>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">expected_type<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">==<pos:position pos:line="46" pos:column="29"/></operator> <name pos:line="46" pos:column="30">OBJ_COMMIT<pos:position pos:line="46" pos:column="40"/></name></expr>)<pos:position pos:line="46" pos:column="41"/></condition><then pos:line="46" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="17">lookup_flags<pos:position pos:line="47" pos:column="29"/></name> <operator pos:line="47" pos:column="30">=<pos:position pos:line="47" pos:column="31"/></operator> <name pos:line="47" pos:column="32">GET_SHA1_COMMITTISH<pos:position pos:line="47" pos:column="51"/></name></expr>;<pos:position pos:line="47" pos:column="52"/></expr_stmt></block></then>
	<elseif pos:line="48" pos:column="9">else <if pos:line="48" pos:column="14">if <condition pos:line="48" pos:column="17">(<expr><name pos:line="48" pos:column="18">expected_type<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">==<pos:position pos:line="48" pos:column="34"/></operator> <name pos:line="48" pos:column="35">OBJ_TREE<pos:position pos:line="48" pos:column="43"/></name></expr>)<pos:position pos:line="48" pos:column="44"/></condition><then pos:line="48" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="17">lookup_flags<pos:position pos:line="49" pos:column="29"/></name> <operator pos:line="49" pos:column="30">=<pos:position pos:line="49" pos:column="31"/></operator> <name pos:line="49" pos:column="32">GET_SHA1_TREEISH<pos:position pos:line="49" pos:column="48"/></name></expr>;<pos:position pos:line="49" pos:column="49"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><call><name pos:line="51" pos:column="13">get_sha1_1<pos:position pos:line="51" pos:column="23"/></name><argument_list pos:line="51" pos:column="23">(<argument><expr><name pos:line="51" pos:column="24">name<pos:position pos:line="51" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="30">sp<pos:position pos:line="51" pos:column="32"/></name> <operator pos:line="51" pos:column="33">-<pos:position pos:line="51" pos:column="34"/></operator> <name pos:line="51" pos:column="35">name<pos:position pos:line="51" pos:column="39"/></name> <operator pos:line="51" pos:column="40">-<pos:position pos:line="51" pos:column="41"/></operator> <literal type="number" pos:line="51" pos:column="42">2<pos:position pos:line="51" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="45">outer<pos:position pos:line="51" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="52">lookup_flags<pos:position pos:line="51" pos:column="64"/></name></expr></argument>)<pos:position pos:line="51" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="66"/></condition><then pos:line="51" pos:column="66">
		<block type="pseudo"><return pos:line="52" pos:column="17">return <expr><operator pos:line="52" pos:column="24">-<pos:position pos:line="52" pos:column="25"/></operator><literal type="number" pos:line="52" pos:column="25">1<pos:position pos:line="52" pos:column="26"/></literal></expr>;<pos:position pos:line="52" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="54" pos:column="9">o<pos:position pos:line="54" pos:column="10"/></name> <operator pos:line="54" pos:column="11">=<pos:position pos:line="54" pos:column="12"/></operator> <call><name pos:line="54" pos:column="13">parse_object<pos:position pos:line="54" pos:column="25"/></name><argument_list pos:line="54" pos:column="25">(<argument><expr><name pos:line="54" pos:column="26">outer<pos:position pos:line="54" pos:column="31"/></name></expr></argument>)<pos:position pos:line="54" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="33"/></expr_stmt>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="14">o<pos:position pos:line="55" pos:column="15"/></name></expr>)<pos:position pos:line="55" pos:column="16"/></condition><then pos:line="55" pos:column="16">
		<block type="pseudo"><return pos:line="56" pos:column="17">return <expr><operator pos:line="56" pos:column="24">-<pos:position pos:line="56" pos:column="25"/></operator><literal type="number" pos:line="56" pos:column="25">1<pos:position pos:line="56" pos:column="26"/></literal></expr>;<pos:position pos:line="56" pos:column="27"/></return></block></then></if>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><operator pos:line="57" pos:column="13">!<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="14">expected_type<pos:position pos:line="57" pos:column="27"/></name></expr>)<pos:position pos:line="57" pos:column="28"/></condition><then pos:line="57" pos:column="28"> <block pos:line="57" pos:column="29">{
		<expr_stmt><expr><name pos:line="58" pos:column="17">o<pos:position pos:line="58" pos:column="18"/></name> <operator pos:line="58" pos:column="19">=<pos:position pos:line="58" pos:column="20"/></operator> <call><name pos:line="58" pos:column="21">deref_tag<pos:position pos:line="58" pos:column="30"/></name><argument_list pos:line="58" pos:column="30">(<argument><expr><name pos:line="58" pos:column="31">o<pos:position pos:line="58" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="34">name<pos:position pos:line="58" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="40">sp<pos:position pos:line="58" pos:column="42"/></name> <operator pos:line="58" pos:column="43">-<pos:position pos:line="58" pos:column="44"/></operator> <name pos:line="58" pos:column="45">name<pos:position pos:line="58" pos:column="49"/></name> <operator pos:line="58" pos:column="50">-<pos:position pos:line="58" pos:column="51"/></operator> <literal type="number" pos:line="58" pos:column="52">2<pos:position pos:line="58" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="55"/></expr_stmt>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><operator pos:line="59" pos:column="21">!<pos:position pos:line="59" pos:column="22"/></operator><name pos:line="59" pos:column="22">o<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">||<pos:position pos:line="59" pos:column="26"/></operator> <operator pos:line="59" pos:column="27">(<pos:position pos:line="59" pos:column="28"/></operator><operator pos:line="59" pos:column="28">!<pos:position pos:line="59" pos:column="29"/></operator><name><name pos:line="59" pos:column="29">o<pos:position pos:line="59" pos:column="30"/></name><operator pos:line="59" pos:column="30">-&gt;<pos:position pos:line="59" pos:column="35"/></operator><name pos:line="59" pos:column="32">parsed<pos:position pos:line="59" pos:column="38"/></name></name> <operator pos:line="59" pos:column="39">&amp;&amp;<pos:position pos:line="59" pos:column="49"/></operator> <operator pos:line="59" pos:column="42">!<pos:position pos:line="59" pos:column="43"/></operator><call><name pos:line="59" pos:column="43">parse_object<pos:position pos:line="59" pos:column="55"/></name><argument_list pos:line="59" pos:column="55">(<argument><expr><name><name pos:line="59" pos:column="56">o<pos:position pos:line="59" pos:column="57"/></name><operator pos:line="59" pos:column="57">-&gt;<pos:position pos:line="59" pos:column="62"/></operator><name pos:line="59" pos:column="59">oid<pos:position pos:line="59" pos:column="62"/></name><operator pos:line="59" pos:column="62">.<pos:position pos:line="59" pos:column="63"/></operator><name pos:line="59" pos:column="63">hash<pos:position pos:line="59" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="68"/></argument_list></call><operator pos:line="59" pos:column="68">)<pos:position pos:line="59" pos:column="69"/></operator></expr>)<pos:position pos:line="59" pos:column="70"/></condition><then pos:line="59" pos:column="70">
			<block type="pseudo"><return pos:line="60" pos:column="25">return <expr><operator pos:line="60" pos:column="32">-<pos:position pos:line="60" pos:column="33"/></operator><literal type="number" pos:line="60" pos:column="33">1<pos:position pos:line="60" pos:column="34"/></literal></expr>;<pos:position pos:line="60" pos:column="35"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="61" pos:column="17">hashcpy<pos:position pos:line="61" pos:column="24"/></name><argument_list pos:line="61" pos:column="24">(<argument><expr><name pos:line="61" pos:column="25">sha1<pos:position pos:line="61" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="31">o<pos:position pos:line="61" pos:column="32"/></name><operator pos:line="61" pos:column="32">-&gt;<pos:position pos:line="61" pos:column="37"/></operator><name pos:line="61" pos:column="34">oid<pos:position pos:line="61" pos:column="37"/></name><operator pos:line="61" pos:column="37">.<pos:position pos:line="61" pos:column="38"/></operator><name pos:line="61" pos:column="38">hash<pos:position pos:line="61" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="44"/></expr_stmt>
		<return pos:line="62" pos:column="17">return <expr><literal type="number" pos:line="62" pos:column="24">0<pos:position pos:line="62" pos:column="25"/></literal></expr>;<pos:position pos:line="62" pos:column="26"/></return>
	}<pos:position pos:line="63" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="65" pos:column="9">/*
	 * At this point, the syntax look correct, so
	 * if we do not get the needed object, we should
	 * barf.
	 */</comment>
	<expr_stmt><expr><name pos:line="70" pos:column="9">o<pos:position pos:line="70" pos:column="10"/></name> <operator pos:line="70" pos:column="11">=<pos:position pos:line="70" pos:column="12"/></operator> <call><name pos:line="70" pos:column="13">peel_to_type<pos:position pos:line="70" pos:column="25"/></name><argument_list pos:line="70" pos:column="25">(<argument><expr><name pos:line="70" pos:column="26">name<pos:position pos:line="70" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="32">len<pos:position pos:line="70" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="37">o<pos:position pos:line="70" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="40">expected_type<pos:position pos:line="70" pos:column="53"/></name></expr></argument>)<pos:position pos:line="70" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="55"/></expr_stmt>
	<if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><operator pos:line="71" pos:column="13">!<pos:position pos:line="71" pos:column="14"/></operator><name pos:line="71" pos:column="14">o<pos:position pos:line="71" pos:column="15"/></name></expr>)<pos:position pos:line="71" pos:column="16"/></condition><then pos:line="71" pos:column="16">
		<block type="pseudo"><return pos:line="72" pos:column="17">return <expr><operator pos:line="72" pos:column="24">-<pos:position pos:line="72" pos:column="25"/></operator><literal type="number" pos:line="72" pos:column="25">1<pos:position pos:line="72" pos:column="26"/></literal></expr>;<pos:position pos:line="72" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="74" pos:column="9">hashcpy<pos:position pos:line="74" pos:column="16"/></name><argument_list pos:line="74" pos:column="16">(<argument><expr><name pos:line="74" pos:column="17">sha1<pos:position pos:line="74" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="23">o<pos:position pos:line="74" pos:column="24"/></name><operator pos:line="74" pos:column="24">-&gt;<pos:position pos:line="74" pos:column="29"/></operator><name pos:line="74" pos:column="26">oid<pos:position pos:line="74" pos:column="29"/></name><operator pos:line="74" pos:column="29">.<pos:position pos:line="74" pos:column="30"/></operator><name pos:line="74" pos:column="30">hash<pos:position pos:line="74" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="36"/></expr_stmt>
	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name><name pos:line="75" pos:column="13">sp<pos:position pos:line="75" pos:column="15"/></name><index pos:line="75" pos:column="15">[<expr><literal type="number" pos:line="75" pos:column="16">0<pos:position pos:line="75" pos:column="17"/></literal></expr>]<pos:position pos:line="75" pos:column="18"/></index></name> <operator pos:line="75" pos:column="19">==<pos:position pos:line="75" pos:column="21"/></operator> <literal type="char" pos:line="75" pos:column="22">'/'<pos:position pos:line="75" pos:column="25"/></literal></expr>)<pos:position pos:line="75" pos:column="26"/></condition><then pos:line="75" pos:column="26"> <block pos:line="75" pos:column="27">{
		<comment type="block" pos:line="76" pos:column="17">/* "$commit^{/foo}" */</comment>
		<decl_stmt><decl><type><name pos:line="77" pos:column="17">char<pos:position pos:line="77" pos:column="21"/></name> <modifier pos:line="77" pos:column="22">*<pos:position pos:line="77" pos:column="23"/></modifier></type><name pos:line="77" pos:column="23">prefix<pos:position pos:line="77" pos:column="29"/></name></decl>;<pos:position pos:line="77" pos:column="30"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="78" pos:column="17">int<pos:position pos:line="78" pos:column="20"/></name></type> <name pos:line="78" pos:column="21">ret<pos:position pos:line="78" pos:column="24"/></name></decl>;<pos:position pos:line="78" pos:column="25"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="79" pos:column="17">struct<pos:position pos:line="79" pos:column="23"/></name> <name pos:line="79" pos:column="24">commit_list<pos:position pos:line="79" pos:column="35"/></name></name> <modifier pos:line="79" pos:column="36">*<pos:position pos:line="79" pos:column="37"/></modifier></type><name pos:line="79" pos:column="37">list<pos:position pos:line="79" pos:column="41"/></name> <init pos:line="79" pos:column="42">= <expr><name pos:line="79" pos:column="44">NULL<pos:position pos:line="79" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="79" pos:column="49"/></decl_stmt>

		<comment type="block" pos:line="81" pos:column="17">/*
		 * $commit^{/}. Some regex implementation may reject.
		 * We don't need regex anyway. '' pattern always matches.
		 */</comment>
		<if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><name><name pos:line="85" pos:column="21">sp<pos:position pos:line="85" pos:column="23"/></name><index pos:line="85" pos:column="23">[<expr><literal type="number" pos:line="85" pos:column="24">1<pos:position pos:line="85" pos:column="25"/></literal></expr>]<pos:position pos:line="85" pos:column="26"/></index></name> <operator pos:line="85" pos:column="27">==<pos:position pos:line="85" pos:column="29"/></operator> <literal type="char" pos:line="85" pos:column="30">'}'<pos:position pos:line="85" pos:column="33"/></literal></expr>)<pos:position pos:line="85" pos:column="34"/></condition><then pos:line="85" pos:column="34">
			<block type="pseudo"><return pos:line="86" pos:column="25">return <expr><literal type="number" pos:line="86" pos:column="32">0<pos:position pos:line="86" pos:column="33"/></literal></expr>;<pos:position pos:line="86" pos:column="34"/></return></block></then></if>

		<expr_stmt><expr><name pos:line="88" pos:column="17">prefix<pos:position pos:line="88" pos:column="23"/></name> <operator pos:line="88" pos:column="24">=<pos:position pos:line="88" pos:column="25"/></operator> <call><name pos:line="88" pos:column="26">xstrndup<pos:position pos:line="88" pos:column="34"/></name><argument_list pos:line="88" pos:column="34">(<argument><expr><name pos:line="88" pos:column="35">sp<pos:position pos:line="88" pos:column="37"/></name> <operator pos:line="88" pos:column="38">+<pos:position pos:line="88" pos:column="39"/></operator> <literal type="number" pos:line="88" pos:column="40">1<pos:position pos:line="88" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="43">name<pos:position pos:line="88" pos:column="47"/></name> <operator pos:line="88" pos:column="48">+<pos:position pos:line="88" pos:column="49"/></operator> <name pos:line="88" pos:column="50">len<pos:position pos:line="88" pos:column="53"/></name> <operator pos:line="88" pos:column="54">-<pos:position pos:line="88" pos:column="55"/></operator> <literal type="number" pos:line="88" pos:column="56">1<pos:position pos:line="88" pos:column="57"/></literal> <operator pos:line="88" pos:column="58">-<pos:position pos:line="88" pos:column="59"/></operator> <operator pos:line="88" pos:column="60">(<pos:position pos:line="88" pos:column="61"/></operator><name pos:line="88" pos:column="61">sp<pos:position pos:line="88" pos:column="63"/></name> <operator pos:line="88" pos:column="64">+<pos:position pos:line="88" pos:column="65"/></operator> <literal type="number" pos:line="88" pos:column="66">1<pos:position pos:line="88" pos:column="67"/></literal><operator pos:line="88" pos:column="67">)<pos:position pos:line="88" pos:column="68"/></operator></expr></argument>)<pos:position pos:line="88" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="89" pos:column="17">commit_list_insert<pos:position pos:line="89" pos:column="35"/></name><argument_list pos:line="89" pos:column="35">(<argument><expr><operator pos:line="89" pos:column="36">(<pos:position pos:line="89" pos:column="37"/></operator>struct <name pos:line="89" pos:column="44">commit<pos:position pos:line="89" pos:column="50"/></name> <operator pos:line="89" pos:column="51">*<pos:position pos:line="89" pos:column="52"/></operator><operator pos:line="89" pos:column="52">)<pos:position pos:line="89" pos:column="53"/></operator><name pos:line="89" pos:column="53">o<pos:position pos:line="89" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="56">&amp;<pos:position pos:line="89" pos:column="61"/></operator><name pos:line="89" pos:column="57">list<pos:position pos:line="89" pos:column="61"/></name></expr></argument>)<pos:position pos:line="89" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><name pos:line="90" pos:column="17">ret<pos:position pos:line="90" pos:column="20"/></name> <operator pos:line="90" pos:column="21">=<pos:position pos:line="90" pos:column="22"/></operator> <call><name pos:line="90" pos:column="23">get_sha1_oneline<pos:position pos:line="90" pos:column="39"/></name><argument_list pos:line="90" pos:column="39">(<argument><expr><name pos:line="90" pos:column="40">prefix<pos:position pos:line="90" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="48">sha1<pos:position pos:line="90" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="54">list<pos:position pos:line="90" pos:column="58"/></name></expr></argument>)<pos:position pos:line="90" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="91" pos:column="17">free<pos:position pos:line="91" pos:column="21"/></name><argument_list pos:line="91" pos:column="21">(<argument><expr><name pos:line="91" pos:column="22">prefix<pos:position pos:line="91" pos:column="28"/></name></expr></argument>)<pos:position pos:line="91" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="30"/></expr_stmt>
		<return pos:line="92" pos:column="17">return <expr><name pos:line="92" pos:column="24">ret<pos:position pos:line="92" pos:column="27"/></name></expr>;<pos:position pos:line="92" pos:column="28"/></return>
	}<pos:position pos:line="93" pos:column="10"/></block></then></if>
	<return pos:line="94" pos:column="9">return <expr><literal type="number" pos:line="94" pos:column="16">0<pos:position pos:line="94" pos:column="17"/></literal></expr>;<pos:position pos:line="94" pos:column="18"/></return>
}<pos:position pos:line="95" pos:column="2"/></block></function></unit>
