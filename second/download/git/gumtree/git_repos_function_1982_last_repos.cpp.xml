<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1982_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_mailmap_line<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">string_list<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">map<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">buffer<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier><modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">repo_abbrev<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">name1<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><name pos:line="4" pos:column="23">NULL<pos:position pos:line="4" pos:column="27"/></name></expr></init></decl>, <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="30">email1<pos:position pos:line="4" pos:column="36"/></name> <init pos:line="4" pos:column="37">= <expr><name pos:line="4" pos:column="39">NULL<pos:position pos:line="4" pos:column="43"/></name></expr></init></decl>, <modifier pos:line="4" pos:column="45">*<pos:position pos:line="4" pos:column="46"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="46">name2<pos:position pos:line="4" pos:column="51"/></name> <init pos:line="4" pos:column="52">= <expr><name pos:line="4" pos:column="54">NULL<pos:position pos:line="4" pos:column="58"/></name></expr></init></decl>, <modifier pos:line="4" pos:column="60">*<pos:position pos:line="4" pos:column="61"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="61">email2<pos:position pos:line="4" pos:column="67"/></name> <init pos:line="4" pos:column="68">= <expr><name pos:line="4" pos:column="70">NULL<pos:position pos:line="4" pos:column="74"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="75"/></decl_stmt>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name><name pos:line="5" pos:column="13">buffer<pos:position pos:line="5" pos:column="19"/></name><index pos:line="5" pos:column="19">[<expr><literal type="number" pos:line="5" pos:column="20">0<pos:position pos:line="5" pos:column="21"/></literal></expr>]<pos:position pos:line="5" pos:column="22"/></index></name> <operator pos:line="5" pos:column="23">==<pos:position pos:line="5" pos:column="25"/></operator> <literal type="char" pos:line="5" pos:column="26">'#'<pos:position pos:line="5" pos:column="29"/></literal></expr>)<pos:position pos:line="5" pos:column="30"/></condition><then pos:line="5" pos:column="30"> <block pos:line="5" pos:column="31">{
		<decl_stmt><decl><specifier pos:line="6" pos:column="17">static<pos:position pos:line="6" pos:column="23"/></specifier> <type><specifier pos:line="6" pos:column="24">const<pos:position pos:line="6" pos:column="29"/></specifier> <name pos:line="6" pos:column="30">char<pos:position pos:line="6" pos:column="34"/></name></type> <name><name pos:line="6" pos:column="35">abbrev<pos:position pos:line="6" pos:column="41"/></name><index pos:line="6" pos:column="41">[]<pos:position pos:line="6" pos:column="43"/></index></name> <init pos:line="6" pos:column="44">= <expr><literal type="string" pos:line="6" pos:column="46">"# repo-abbrev:"<pos:position pos:line="6" pos:column="62"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="63"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">int<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">abblen<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><sizeof pos:line="7" pos:column="30">sizeof<argument_list pos:line="7" pos:column="36">(<argument><expr><name pos:line="7" pos:column="37">abbrev<pos:position pos:line="7" pos:column="43"/></name></expr></argument>)<pos:position pos:line="7" pos:column="44"/></argument_list></sizeof> <operator pos:line="7" pos:column="45">-<pos:position pos:line="7" pos:column="46"/></operator> <literal type="number" pos:line="7" pos:column="47">1<pos:position pos:line="7" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="49"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">len<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><call><name pos:line="8" pos:column="27">strlen<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">buffer<pos:position pos:line="8" pos:column="40"/></name></expr></argument>)<pos:position pos:line="8" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="42"/></decl_stmt>

		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">repo_abbrev<pos:position pos:line="10" pos:column="33"/></name></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34">
			<block type="pseudo"><return pos:line="11" pos:column="25">return;<pos:position pos:line="11" pos:column="32"/></return></block></then></if>

		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">len<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">&amp;&amp;<pos:position pos:line="13" pos:column="35"/></operator> <name><name pos:line="13" pos:column="28">buffer<pos:position pos:line="13" pos:column="34"/></name><index pos:line="13" pos:column="34">[<expr><name pos:line="13" pos:column="35">len<pos:position pos:line="13" pos:column="38"/></name> <operator pos:line="13" pos:column="39">-<pos:position pos:line="13" pos:column="40"/></operator> <literal type="number" pos:line="13" pos:column="41">1<pos:position pos:line="13" pos:column="42"/></literal></expr>]<pos:position pos:line="13" pos:column="43"/></index></name> <operator pos:line="13" pos:column="44">==<pos:position pos:line="13" pos:column="46"/></operator> <literal type="char" pos:line="13" pos:column="47">'\n'<pos:position pos:line="13" pos:column="51"/></literal></expr>)<pos:position pos:line="13" pos:column="52"/></condition><then pos:line="13" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="14" pos:column="25">buffer<pos:position pos:line="14" pos:column="31"/></name><index pos:line="14" pos:column="31">[<expr><operator pos:line="14" pos:column="32">--<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="34">len<pos:position pos:line="14" pos:column="37"/></name></expr>]<pos:position pos:line="14" pos:column="38"/></index></name> <operator pos:line="14" pos:column="39">=<pos:position pos:line="14" pos:column="40"/></operator> <literal type="number" pos:line="14" pos:column="41">0<pos:position pos:line="14" pos:column="42"/></literal></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt></block></then></if>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><call><name pos:line="15" pos:column="22">strncmp<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">buffer<pos:position pos:line="15" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="38">abbrev<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">abblen<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="54"/></condition><then pos:line="15" pos:column="54"> <block pos:line="15" pos:column="55">{
			<decl_stmt><decl><type><name pos:line="16" pos:column="25">char<pos:position pos:line="16" pos:column="29"/></name> <modifier pos:line="16" pos:column="30">*<pos:position pos:line="16" pos:column="31"/></modifier></type><name pos:line="16" pos:column="31">cp<pos:position pos:line="16" pos:column="33"/></name></decl>;<pos:position pos:line="16" pos:column="34"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="18" pos:column="25">free<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><operator pos:line="18" pos:column="30">*<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">repo_abbrev<pos:position pos:line="18" pos:column="42"/></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>

			<for pos:line="20" pos:column="25">for <control pos:line="20" pos:column="29">(<init><expr><name pos:line="20" pos:column="30">cp<pos:position pos:line="20" pos:column="32"/></name> <operator pos:line="20" pos:column="33">=<pos:position pos:line="20" pos:column="34"/></operator> <name pos:line="20" pos:column="35">buffer<pos:position pos:line="20" pos:column="41"/></name> <operator pos:line="20" pos:column="42">+<pos:position pos:line="20" pos:column="43"/></operator> <name pos:line="20" pos:column="44">abblen<pos:position pos:line="20" pos:column="50"/></name></expr>;<pos:position pos:line="20" pos:column="51"/></init> <condition><expr><call><name pos:line="20" pos:column="52">isspace<pos:position pos:line="20" pos:column="59"/></name><argument_list pos:line="20" pos:column="59">(<argument><expr><operator pos:line="20" pos:column="60">*<pos:position pos:line="20" pos:column="61"/></operator><name pos:line="20" pos:column="61">cp<pos:position pos:line="20" pos:column="63"/></name></expr></argument>)<pos:position pos:line="20" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="65"/></condition> <incr><expr><name pos:line="20" pos:column="66">cp<pos:position pos:line="20" pos:column="68"/></name><operator pos:line="20" pos:column="68">++<pos:position pos:line="20" pos:column="70"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="71"/></control>
				<block type="pseudo"><empty_stmt pos:line="21" pos:column="33">;<pos:position pos:line="21" pos:column="34"/></empty_stmt></block></for> <comment type="block" pos:line="21" pos:column="35">/* nothing */</comment>
			<expr_stmt><expr><operator pos:line="22" pos:column="25">*<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">repo_abbrev<pos:position pos:line="22" pos:column="37"/></name> <operator pos:line="22" pos:column="38">=<pos:position pos:line="22" pos:column="39"/></operator> <call><name pos:line="22" pos:column="40">xstrdup<pos:position pos:line="22" pos:column="47"/></name><argument_list pos:line="22" pos:column="47">(<argument><expr><name pos:line="22" pos:column="48">cp<pos:position pos:line="22" pos:column="50"/></name></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>
		<return pos:line="24" pos:column="17">return;<pos:position pos:line="24" pos:column="24"/></return>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">(<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">name2<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <call><name pos:line="26" pos:column="22">parse_name_and_email<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument><expr><name pos:line="26" pos:column="43">buffer<pos:position pos:line="26" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="51">&amp;<pos:position pos:line="26" pos:column="56"/></operator><name pos:line="26" pos:column="52">name1<pos:position pos:line="26" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="59">&amp;<pos:position pos:line="26" pos:column="64"/></operator><name pos:line="26" pos:column="60">email1<pos:position pos:line="26" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="68">0<pos:position pos:line="26" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="70"/></argument_list></call><operator pos:line="26" pos:column="70">)<pos:position pos:line="26" pos:column="71"/></operator> <operator pos:line="26" pos:column="72">!=<pos:position pos:line="26" pos:column="74"/></operator> <name pos:line="26" pos:column="75">NULL<pos:position pos:line="26" pos:column="79"/></name></expr>)<pos:position pos:line="26" pos:column="80"/></condition><then pos:line="26" pos:column="80">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="17">parse_name_and_email<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name pos:line="27" pos:column="38">name2<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="45">&amp;<pos:position pos:line="27" pos:column="50"/></operator><name pos:line="27" pos:column="46">name2<pos:position pos:line="27" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="53">&amp;<pos:position pos:line="27" pos:column="58"/></operator><name pos:line="27" pos:column="54">email2<pos:position pos:line="27" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="62">1<pos:position pos:line="27" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="65"/></expr_stmt></block></then></if>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">email1<pos:position pos:line="29" pos:column="19"/></name></expr>)<pos:position pos:line="29" pos:column="20"/></condition><then pos:line="29" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="17">add_mapping<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><name pos:line="30" pos:column="29">map<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="34">name1<pos:position pos:line="30" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="41">email1<pos:position pos:line="30" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="49">name2<pos:position pos:line="30" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="56">email2<pos:position pos:line="30" pos:column="62"/></name></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="64"/></expr_stmt></block></then></if>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
