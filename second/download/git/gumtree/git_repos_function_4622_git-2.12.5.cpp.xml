<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4622_git-2.12.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type> <name pos:line="1" pos:column="8">ewah_add_empty_words<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">ewah_bitmap<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">self<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">int<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">v<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">size_t<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">number<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">number<pos:position pos:line="3" pos:column="19"/></name> <operator pos:line="3" pos:column="20">==<pos:position pos:line="3" pos:column="22"/></operator> <literal type="number" pos:line="3" pos:column="23">0<pos:position pos:line="3" pos:column="24"/></literal></expr>)<pos:position pos:line="3" pos:column="25"/></condition><then pos:line="3" pos:column="25">
		<block type="pseudo"><return pos:line="4" pos:column="17">return <expr><literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr>;<pos:position pos:line="4" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="6" pos:column="9">self<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">-&gt;<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="15">bit_size<pos:position pos:line="6" pos:column="23"/></name></name> <operator pos:line="6" pos:column="24">+=<pos:position pos:line="6" pos:column="26"/></operator> <name pos:line="6" pos:column="27">number<pos:position pos:line="6" pos:column="33"/></name> <operator pos:line="6" pos:column="34">*<pos:position pos:line="6" pos:column="35"/></operator> <name pos:line="6" pos:column="36">BITS_IN_EWORD<pos:position pos:line="6" pos:column="49"/></name></expr>;<pos:position pos:line="6" pos:column="50"/></expr_stmt>
	<return pos:line="7" pos:column="9">return <expr><call><name pos:line="7" pos:column="16">add_empty_words<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><name pos:line="7" pos:column="32">self<pos:position pos:line="7" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="38">v<pos:position pos:line="7" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="41">number<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="49"/></return>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
