<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_91_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">add_rfc822_quoted<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">strbuf<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">out<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="51">const<pos:position pos:line="1" pos:column="56"/></specifier> <name pos:line="1" pos:column="57">char<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">s<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">int<pos:position pos:line="1" pos:column="69"/></name></type> <name pos:line="1" pos:column="70">len<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/* just a guess, we may have to also backslash-quote */</comment>
	<expr_stmt><expr><call><name pos:line="6" pos:column="9">strbuf_grow<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><name pos:line="6" pos:column="21">out<pos:position pos:line="6" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="26">len<pos:position pos:line="6" pos:column="29"/></name> <operator pos:line="6" pos:column="30">+<pos:position pos:line="6" pos:column="31"/></operator> <literal type="number" pos:line="6" pos:column="32">2<pos:position pos:line="6" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">strbuf_addch<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">out<pos:position pos:line="8" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="8" pos:column="27">'"'<pos:position pos:line="8" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt>
	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init><expr><name pos:line="9" pos:column="14">i<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr>;<pos:position pos:line="9" pos:column="20"/></init> <condition><expr><name pos:line="9" pos:column="21">i<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&lt;<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="25">len<pos:position pos:line="9" pos:column="28"/></name></expr>;<pos:position pos:line="9" pos:column="29"/></condition> <incr><expr><name pos:line="9" pos:column="30">i<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">++<pos:position pos:line="9" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="34"/></control> <block pos:line="9" pos:column="35">{
		<switch pos:line="10" pos:column="17">switch <condition pos:line="10" pos:column="24">(<expr><name><name pos:line="10" pos:column="25">s<pos:position pos:line="10" pos:column="26"/></name><index pos:line="10" pos:column="26">[<expr><name pos:line="10" pos:column="27">i<pos:position pos:line="10" pos:column="28"/></name></expr>]<pos:position pos:line="10" pos:column="29"/></index></name></expr>)<pos:position pos:line="10" pos:column="30"/></condition> <block pos:line="10" pos:column="31">{
		<case pos:line="11" pos:column="17">case <expr><literal type="char" pos:line="11" pos:column="22">'"'<pos:position pos:line="11" pos:column="25"/></literal></expr>:<pos:position pos:line="11" pos:column="26"/></case>
		<case pos:line="12" pos:column="17">case <expr><literal type="char" pos:line="12" pos:column="22">'\\'<pos:position pos:line="12" pos:column="26"/></literal></expr>:<pos:position pos:line="12" pos:column="27"/></case>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">strbuf_addch<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">out<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="43">'\\'<pos:position pos:line="13" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt>
			<comment type="block" pos:line="14" pos:column="25">/* fall through */</comment>
		<default pos:line="15" pos:column="17">default:<pos:position pos:line="15" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">strbuf_addch<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">out<pos:position pos:line="16" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="43">s<pos:position pos:line="16" pos:column="44"/></name><index pos:line="16" pos:column="44">[<expr><name pos:line="16" pos:column="45">i<pos:position pos:line="16" pos:column="46"/></name></expr>]<pos:position pos:line="16" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></switch>
	}<pos:position pos:line="18" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">strbuf_addch<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">out<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="27">'"'<pos:position pos:line="19" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
