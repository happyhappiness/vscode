<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1268_git-2.4.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">hash_list<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">parse_merge<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">unsigned<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">int<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">count<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">hash_list<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">list<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><name pos:line="3" pos:column="34">NULL<pos:position pos:line="3" pos:column="38"/></name></expr></init></decl>, <modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier><modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="42">tail<pos:position pos:line="3" pos:column="46"/></name> <init pos:line="3" pos:column="47">= <expr><operator pos:line="3" pos:column="49">&amp;<pos:position pos:line="3" pos:column="54"/></operator><name pos:line="3" pos:column="50">list<pos:position pos:line="3" pos:column="54"/></name></expr></init></decl>, <modifier pos:line="3" pos:column="56">*<pos:position pos:line="3" pos:column="57"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="57">n<pos:position pos:line="3" pos:column="58"/></name></decl>;<pos:position pos:line="3" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">from<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">branch<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">s<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>

	<expr_stmt><expr><operator pos:line="7" pos:column="9">*<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">count<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr>;<pos:position pos:line="7" pos:column="20"/></expr_stmt>
	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><call><name pos:line="8" pos:column="16">skip_prefix<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name><name pos:line="8" pos:column="28">command_buf<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">.<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="40">buf<pos:position pos:line="8" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="45">"merge "<pos:position pos:line="8" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="8" pos:column="55">&amp;<pos:position pos:line="8" pos:column="60"/></operator><name pos:line="8" pos:column="56">from<pos:position pos:line="8" pos:column="60"/></name></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="62"/></condition> <block pos:line="8" pos:column="63">{
		<expr_stmt><expr><name pos:line="9" pos:column="17">n<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <call><name pos:line="9" pos:column="21">xmalloc<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><sizeof pos:line="9" pos:column="29">sizeof<argument_list pos:line="9" pos:column="35">(<argument><expr><operator pos:line="9" pos:column="36">*<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="37">n<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="10" pos:column="17">s<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">lookup_branch<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><name pos:line="10" pos:column="35">from<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">s<pos:position pos:line="11" pos:column="22"/></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">hashcpy<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name><name pos:line="12" pos:column="33">n<pos:position pos:line="12" pos:column="34"/></name><operator pos:line="12" pos:column="34">-&gt;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="36">sha1<pos:position pos:line="12" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="42">s<pos:position pos:line="12" pos:column="43"/></name><operator pos:line="12" pos:column="43">-&gt;<pos:position pos:line="12" pos:column="48"/></operator><name pos:line="12" pos:column="45">sha1<pos:position pos:line="12" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt></block></then>
		<elseif pos:line="13" pos:column="17">else <if pos:line="13" pos:column="22">if <condition pos:line="13" pos:column="25">(<expr><operator pos:line="13" pos:column="26">*<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">from<pos:position pos:line="13" pos:column="31"/></name> <operator pos:line="13" pos:column="32">==<pos:position pos:line="13" pos:column="34"/></operator> <literal type="char" pos:line="13" pos:column="35">':'<pos:position pos:line="13" pos:column="38"/></literal></expr>)<pos:position pos:line="13" pos:column="39"/></condition><then pos:line="13" pos:column="39"> <block pos:line="13" pos:column="40">{
			<decl_stmt><decl><type><name pos:line="14" pos:column="25">uintmax_t<pos:position pos:line="14" pos:column="34"/></name></type> <name pos:line="14" pos:column="35">idnum<pos:position pos:line="14" pos:column="40"/></name> <init pos:line="14" pos:column="41">= <expr><call><name pos:line="14" pos:column="43">parse_mark_ref_eol<pos:position pos:line="14" pos:column="61"/></name><argument_list pos:line="14" pos:column="61">(<argument><expr><name pos:line="14" pos:column="62">from<pos:position pos:line="14" pos:column="66"/></name></expr></argument>)<pos:position pos:line="14" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="68"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="15" pos:column="25">struct<pos:position pos:line="15" pos:column="31"/></name> <name pos:line="15" pos:column="32">object_entry<pos:position pos:line="15" pos:column="44"/></name></name> <modifier pos:line="15" pos:column="45">*<pos:position pos:line="15" pos:column="46"/></modifier></type><name pos:line="15" pos:column="46">oe<pos:position pos:line="15" pos:column="48"/></name> <init pos:line="15" pos:column="49">= <expr><call><name pos:line="15" pos:column="51">find_mark<pos:position pos:line="15" pos:column="60"/></name><argument_list pos:line="15" pos:column="60">(<argument><expr><name pos:line="15" pos:column="61">idnum<pos:position pos:line="15" pos:column="66"/></name></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="68"/></decl_stmt>
			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><name><name pos:line="16" pos:column="29">oe<pos:position pos:line="16" pos:column="31"/></name><operator pos:line="16" pos:column="31">-&gt;<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="33">type<pos:position pos:line="16" pos:column="37"/></name></name> <operator pos:line="16" pos:column="38">!=<pos:position pos:line="16" pos:column="40"/></operator> <name pos:line="16" pos:column="41">OBJ_COMMIT<pos:position pos:line="16" pos:column="51"/></name></expr>)<pos:position pos:line="16" pos:column="52"/></condition><then pos:line="16" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="33">die<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><literal type="string" pos:line="17" pos:column="37">"Mark :%"<pos:position pos:line="17" pos:column="46"/></literal> <name pos:line="17" pos:column="47">PRIuMAX<pos:position pos:line="17" pos:column="54"/></name> <literal type="string" pos:line="17" pos:column="55">" not a commit"<pos:position pos:line="17" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="72">idnum<pos:position pos:line="17" pos:column="77"/></name></expr></argument>)<pos:position pos:line="17" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="79"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">hashcpy<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name><name pos:line="18" pos:column="33">n<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">-&gt;<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="36">sha1<pos:position pos:line="18" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="42">oe<pos:position pos:line="18" pos:column="44"/></name><operator pos:line="18" pos:column="44">-&gt;<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="46">idx<pos:position pos:line="18" pos:column="49"/></name><operator pos:line="18" pos:column="49">.<pos:position pos:line="18" pos:column="50"/></operator><name pos:line="18" pos:column="50">sha1<pos:position pos:line="18" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if></elseif> <elseif pos:line="19" pos:column="19">else <if pos:line="19" pos:column="24">if <condition pos:line="19" pos:column="27">(<expr><operator pos:line="19" pos:column="28">!<pos:position pos:line="19" pos:column="29"/></operator><call><name pos:line="19" pos:column="29">get_sha1<pos:position pos:line="19" pos:column="37"/></name><argument_list pos:line="19" pos:column="37">(<argument><expr><name pos:line="19" pos:column="38">from<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="44">n<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">-&gt;<pos:position pos:line="19" pos:column="50"/></operator><name pos:line="19" pos:column="47">sha1<pos:position pos:line="19" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="53"/></condition><then pos:line="19" pos:column="53"> <block pos:line="19" pos:column="54">{
			<decl_stmt><decl><type><name pos:line="20" pos:column="25">unsigned<pos:position pos:line="20" pos:column="33"/></name> <name pos:line="20" pos:column="34">long<pos:position pos:line="20" pos:column="38"/></name></type> <name pos:line="20" pos:column="39">size<pos:position pos:line="20" pos:column="43"/></name></decl>;<pos:position pos:line="20" pos:column="44"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="21" pos:column="25">char<pos:position pos:line="21" pos:column="29"/></name> <modifier pos:line="21" pos:column="30">*<pos:position pos:line="21" pos:column="31"/></modifier></type><name pos:line="21" pos:column="31">buf<pos:position pos:line="21" pos:column="34"/></name> <init pos:line="21" pos:column="35">= <expr><call><name pos:line="21" pos:column="37">read_object_with_reference<pos:position pos:line="21" pos:column="63"/></name><argument_list pos:line="21" pos:column="63">(<argument><expr><name><name pos:line="21" pos:column="64">n<pos:position pos:line="21" pos:column="65"/></name><operator pos:line="21" pos:column="65">-&gt;<pos:position pos:line="21" pos:column="70"/></operator><name pos:line="21" pos:column="67">sha1<pos:position pos:line="21" pos:column="71"/></name></name></expr></argument>,
				<argument><expr><name pos:line="22" pos:column="33">commit_type<pos:position pos:line="22" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="46">&amp;<pos:position pos:line="22" pos:column="51"/></operator><name pos:line="22" pos:column="47">size<pos:position pos:line="22" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="53">n<pos:position pos:line="22" pos:column="54"/></name><operator pos:line="22" pos:column="54">-&gt;<pos:position pos:line="22" pos:column="59"/></operator><name pos:line="22" pos:column="56">sha1<pos:position pos:line="22" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="62"/></decl_stmt>
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><operator pos:line="23" pos:column="29">!<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="30">buf<pos:position pos:line="23" pos:column="33"/></name> <operator pos:line="23" pos:column="34">||<pos:position pos:line="23" pos:column="36"/></operator> <name pos:line="23" pos:column="37">size<pos:position pos:line="23" pos:column="41"/></name> <operator pos:line="23" pos:column="42">&lt;<pos:position pos:line="23" pos:column="46"/></operator> <literal type="number" pos:line="23" pos:column="44">46<pos:position pos:line="23" pos:column="46"/></literal></expr>)<pos:position pos:line="23" pos:column="47"/></condition><then pos:line="23" pos:column="47">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="33">die<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">(<argument><expr><literal type="string" pos:line="24" pos:column="37">"Not a valid commit: %s"<pos:position pos:line="24" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="63">from<pos:position pos:line="24" pos:column="67"/></name></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">free<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">buf<pos:position pos:line="25" pos:column="33"/></name></expr></argument>)<pos:position pos:line="25" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if></elseif> <else pos:line="26" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">die<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><literal type="string" pos:line="27" pos:column="29">"Invalid ref name or SHA1 expression: %s"<pos:position pos:line="27" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="72">from<pos:position pos:line="27" pos:column="76"/></name></expr></argument>)<pos:position pos:line="27" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="78"/></expr_stmt></block></else></if>

		<expr_stmt><expr><name><name pos:line="29" pos:column="17">n<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">-&gt;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="20">next<pos:position pos:line="29" pos:column="24"/></name></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">NULL<pos:position pos:line="29" pos:column="31"/></name></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="30" pos:column="17">*<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">tail<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">=<pos:position pos:line="30" pos:column="24"/></operator> <name pos:line="30" pos:column="25">n<pos:position pos:line="30" pos:column="26"/></name></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="31" pos:column="17">tail<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <operator pos:line="31" pos:column="24">&amp;<pos:position pos:line="31" pos:column="29"/></operator><name><name pos:line="31" pos:column="25">n<pos:position pos:line="31" pos:column="26"/></name><operator pos:line="31" pos:column="26">-&gt;<pos:position pos:line="31" pos:column="31"/></operator><name pos:line="31" pos:column="28">next<pos:position pos:line="31" pos:column="32"/></name></name></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>

		<expr_stmt><expr><operator pos:line="33" pos:column="17">(<pos:position pos:line="33" pos:column="18"/></operator><operator pos:line="33" pos:column="18">*<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="19">count<pos:position pos:line="33" pos:column="24"/></name><operator pos:line="33" pos:column="24">)<pos:position pos:line="33" pos:column="25"/></operator><operator pos:line="33" pos:column="25">++<pos:position pos:line="33" pos:column="27"/></operator></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">read_next_command<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">()<pos:position pos:line="34" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></while>
	<return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">list<pos:position pos:line="36" pos:column="20"/></name></expr>;<pos:position pos:line="36" pos:column="21"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
