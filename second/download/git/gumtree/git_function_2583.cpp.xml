<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2583.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_plain_rerere<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">string_list<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">rr<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">fd<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">string_list<pos:position pos:line="3" pos:column="27"/></name></name></type> <name pos:line="3" pos:column="28">conflict<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><name pos:line="3" pos:column="39">STRING_LIST_INIT_DUP<pos:position pos:line="3" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">string_list<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">update<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><name pos:line="4" pos:column="37">STRING_LIST_INIT_DUP<pos:position pos:line="4" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">find_conflict<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><operator pos:line="7" pos:column="23">&amp;<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="24">conflict<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * MERGE_RR records paths with conflicts immediately after merge
	 * failed.  Some of the conflicted paths might have been hand resolved
	 * in the working tree since then, but the initial run would catch all
	 * and register their preimages.
	 */</comment>

	<for pos:line="16" pos:column="9">for <control pos:line="16" pos:column="13">(<init><expr><name pos:line="16" pos:column="14">i<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <literal type="number" pos:line="16" pos:column="18">0<pos:position pos:line="16" pos:column="19"/></literal></expr>;<pos:position pos:line="16" pos:column="20"/></init> <condition><expr><name pos:line="16" pos:column="21">i<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">&lt;<pos:position pos:line="16" pos:column="27"/></operator> <name><name pos:line="16" pos:column="25">conflict<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">.<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="34">nr<pos:position pos:line="16" pos:column="36"/></name></name></expr>;<pos:position pos:line="16" pos:column="37"/></condition> <incr><expr><name pos:line="16" pos:column="38">i<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">++<pos:position pos:line="16" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="16" pos:column="42"/></control> <block pos:line="16" pos:column="43">{
		<decl_stmt><decl><type><specifier pos:line="17" pos:column="17">const<pos:position pos:line="17" pos:column="22"/></specifier> <name pos:line="17" pos:column="23">char<pos:position pos:line="17" pos:column="27"/></name> <modifier pos:line="17" pos:column="28">*<pos:position pos:line="17" pos:column="29"/></modifier></type><name pos:line="17" pos:column="29">path<pos:position pos:line="17" pos:column="33"/></name> <init pos:line="17" pos:column="34">= <expr><name><name pos:line="17" pos:column="36">conflict<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">.<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="45">items<pos:position pos:line="17" pos:column="50"/></name><index pos:line="17" pos:column="50">[<expr><name pos:line="17" pos:column="51">i<pos:position pos:line="17" pos:column="52"/></name></expr>]<pos:position pos:line="17" pos:column="53"/></index></name><operator pos:line="17" pos:column="53">.<pos:position pos:line="17" pos:column="54"/></operator><name pos:line="17" pos:column="54">string<pos:position pos:line="17" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="61"/></decl_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><call><name pos:line="18" pos:column="22">string_list_has_string<pos:position pos:line="18" pos:column="44"/></name><argument_list pos:line="18" pos:column="44">(<argument><expr><name pos:line="18" pos:column="45">rr<pos:position pos:line="18" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="49">path<pos:position pos:line="18" pos:column="53"/></name></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="55"/></condition><then pos:line="18" pos:column="55"> <block pos:line="18" pos:column="56">{
			<decl_stmt><decl><type><name pos:line="19" pos:column="25">unsigned<pos:position pos:line="19" pos:column="33"/></name> <name pos:line="19" pos:column="34">char<pos:position pos:line="19" pos:column="38"/></name></type> <name><name pos:line="19" pos:column="39">sha1<pos:position pos:line="19" pos:column="43"/></name><index pos:line="19" pos:column="43">[<expr><literal type="number" pos:line="19" pos:column="44">20<pos:position pos:line="19" pos:column="46"/></literal></expr>]<pos:position pos:line="19" pos:column="47"/></index></name></decl>;<pos:position pos:line="19" pos:column="48"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="20" pos:column="25">char<pos:position pos:line="20" pos:column="29"/></name> <modifier pos:line="20" pos:column="30">*<pos:position pos:line="20" pos:column="31"/></modifier></type><name pos:line="20" pos:column="31">hex<pos:position pos:line="20" pos:column="34"/></name></decl>;<pos:position pos:line="20" pos:column="35"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="21" pos:column="25">int<pos:position pos:line="21" pos:column="28"/></name></type> <name pos:line="21" pos:column="29">ret<pos:position pos:line="21" pos:column="32"/></name></decl>;<pos:position pos:line="21" pos:column="33"/></decl_stmt>
			<expr_stmt><expr><name pos:line="22" pos:column="25">ret<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">=<pos:position pos:line="22" pos:column="30"/></operator> <call><name pos:line="22" pos:column="31">handle_file<pos:position pos:line="22" pos:column="42"/></name><argument_list pos:line="22" pos:column="42">(<argument><expr><name pos:line="22" pos:column="43">path<pos:position pos:line="22" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="49">sha1<pos:position pos:line="22" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="55">NULL<pos:position pos:line="22" pos:column="59"/></name></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="61"/></expr_stmt>
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><name pos:line="23" pos:column="29">ret<pos:position pos:line="23" pos:column="32"/></name> <operator pos:line="23" pos:column="33">&lt;<pos:position pos:line="23" pos:column="37"/></operator> <literal type="number" pos:line="23" pos:column="35">1<pos:position pos:line="23" pos:column="36"/></literal></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37">
				<block type="pseudo"><continue pos:line="24" pos:column="33">continue;<pos:position pos:line="24" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="25" pos:column="25">hex<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">=<pos:position pos:line="25" pos:column="30"/></operator> <call><name pos:line="25" pos:column="31">xstrdup<pos:position pos:line="25" pos:column="38"/></name><argument_list pos:line="25" pos:column="38">(<argument><expr><call><name pos:line="25" pos:column="39">sha1_to_hex<pos:position pos:line="25" pos:column="50"/></name><argument_list pos:line="25" pos:column="50">(<argument><expr><name pos:line="25" pos:column="51">sha1<pos:position pos:line="25" pos:column="55"/></name></expr></argument>)<pos:position pos:line="25" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">string_list_insert<pos:position pos:line="26" pos:column="43"/></name><argument_list pos:line="26" pos:column="43">(<argument><expr><name pos:line="26" pos:column="44">rr<pos:position pos:line="26" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="48">path<pos:position pos:line="26" pos:column="52"/></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call><operator pos:line="26" pos:column="53">-&gt;<pos:position pos:line="26" pos:column="58"/></operator><name pos:line="26" pos:column="55">util<pos:position pos:line="26" pos:column="59"/></name> <operator pos:line="26" pos:column="60">=<pos:position pos:line="26" pos:column="61"/></operator> <name pos:line="26" pos:column="62">hex<pos:position pos:line="26" pos:column="65"/></name></expr>;<pos:position pos:line="26" pos:column="66"/></expr_stmt>
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><call><name pos:line="27" pos:column="29">mkdir_in_gitdir<pos:position pos:line="27" pos:column="44"/></name><argument_list pos:line="27" pos:column="44">(<argument><expr><call><name pos:line="27" pos:column="45">git_path<pos:position pos:line="27" pos:column="53"/></name><argument_list pos:line="27" pos:column="53">(<argument><expr><literal type="string" pos:line="27" pos:column="54">"rr-cache/%s"<pos:position pos:line="27" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="69">hex<pos:position pos:line="27" pos:column="72"/></name></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="75"/></condition><then pos:line="27" pos:column="75">
				<block type="pseudo"><continue pos:line="28" pos:column="33">continue;<pos:position pos:line="28" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">handle_file<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">(<argument><expr><name pos:line="29" pos:column="37">path<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="43">NULL<pos:position pos:line="29" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="49">rerere_path<pos:position pos:line="29" pos:column="60"/></name><argument_list pos:line="29" pos:column="60">(<argument><expr><name pos:line="29" pos:column="61">hex<pos:position pos:line="29" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="66">"preimage"<pos:position pos:line="29" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="79"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">fprintf<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">stderr<pos:position pos:line="30" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="41">"Recorded preimage for '%s'\n"<pos:position pos:line="30" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="73">path<pos:position pos:line="30" pos:column="77"/></name></expr></argument>)<pos:position pos:line="30" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="79"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if>
	}<pos:position pos:line="32" pos:column="10"/></block></for>

	<comment type="block" pos:line="34" pos:column="9">/*
	 * Now some of the paths that had conflicts earlier might have been
	 * hand resolved.  Others may be similar to a conflict already that
	 * was resolved before.
	 */</comment>

	<for pos:line="40" pos:column="9">for <control pos:line="40" pos:column="13">(<init><expr><name pos:line="40" pos:column="14">i<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <literal type="number" pos:line="40" pos:column="18">0<pos:position pos:line="40" pos:column="19"/></literal></expr>;<pos:position pos:line="40" pos:column="20"/></init> <condition><expr><name pos:line="40" pos:column="21">i<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">&lt;<pos:position pos:line="40" pos:column="27"/></operator> <name><name pos:line="40" pos:column="25">rr<pos:position pos:line="40" pos:column="27"/></name><operator pos:line="40" pos:column="27">-&gt;<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="29">nr<pos:position pos:line="40" pos:column="31"/></name></name></expr>;<pos:position pos:line="40" pos:column="32"/></condition> <incr><expr><name pos:line="40" pos:column="33">i<pos:position pos:line="40" pos:column="34"/></name><operator pos:line="40" pos:column="34">++<pos:position pos:line="40" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="40" pos:column="37"/></control> <block pos:line="40" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="41" pos:column="17">int<pos:position pos:line="41" pos:column="20"/></name></type> <name pos:line="41" pos:column="21">ret<pos:position pos:line="41" pos:column="24"/></name></decl>;<pos:position pos:line="41" pos:column="25"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="42" pos:column="17">const<pos:position pos:line="42" pos:column="22"/></specifier> <name pos:line="42" pos:column="23">char<pos:position pos:line="42" pos:column="27"/></name> <modifier pos:line="42" pos:column="28">*<pos:position pos:line="42" pos:column="29"/></modifier></type><name pos:line="42" pos:column="29">path<pos:position pos:line="42" pos:column="33"/></name> <init pos:line="42" pos:column="34">= <expr><name><name pos:line="42" pos:column="36">rr<pos:position pos:line="42" pos:column="38"/></name><operator pos:line="42" pos:column="38">-&gt;<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="40">items<pos:position pos:line="42" pos:column="45"/></name><index pos:line="42" pos:column="45">[<expr><name pos:line="42" pos:column="46">i<pos:position pos:line="42" pos:column="47"/></name></expr>]<pos:position pos:line="42" pos:column="48"/></index></name><operator pos:line="42" pos:column="48">.<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="49">string<pos:position pos:line="42" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="42" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="43" pos:column="17">const<pos:position pos:line="43" pos:column="22"/></specifier> <name pos:line="43" pos:column="23">char<pos:position pos:line="43" pos:column="27"/></name> <modifier pos:line="43" pos:column="28">*<pos:position pos:line="43" pos:column="29"/></modifier></type><name pos:line="43" pos:column="29">name<pos:position pos:line="43" pos:column="33"/></name> <init pos:line="43" pos:column="34">= <expr><operator pos:line="43" pos:column="36">(<pos:position pos:line="43" pos:column="37"/></operator><specifier pos:line="43" pos:column="37">const<pos:position pos:line="43" pos:column="42"/></specifier> <name pos:line="43" pos:column="43">char<pos:position pos:line="43" pos:column="47"/></name> <operator pos:line="43" pos:column="48">*<pos:position pos:line="43" pos:column="49"/></operator><operator pos:line="43" pos:column="49">)<pos:position pos:line="43" pos:column="50"/></operator><name><name pos:line="43" pos:column="50">rr<pos:position pos:line="43" pos:column="52"/></name><operator pos:line="43" pos:column="52">-&gt;<pos:position pos:line="43" pos:column="57"/></operator><name pos:line="43" pos:column="54">items<pos:position pos:line="43" pos:column="59"/></name><index pos:line="43" pos:column="59">[<expr><name pos:line="43" pos:column="60">i<pos:position pos:line="43" pos:column="61"/></name></expr>]<pos:position pos:line="43" pos:column="62"/></index></name><operator pos:line="43" pos:column="62">.<pos:position pos:line="43" pos:column="63"/></operator><name pos:line="43" pos:column="63">util<pos:position pos:line="43" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="43" pos:column="68"/></decl_stmt>

		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><call><name pos:line="45" pos:column="21">has_rerere_resolution<pos:position pos:line="45" pos:column="42"/></name><argument_list pos:line="45" pos:column="42">(<argument><expr><name pos:line="45" pos:column="43">name<pos:position pos:line="45" pos:column="47"/></name></expr></argument>)<pos:position pos:line="45" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="49"/></condition><then pos:line="45" pos:column="49"> <block pos:line="45" pos:column="50">{
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><operator pos:line="46" pos:column="29">!<pos:position pos:line="46" pos:column="30"/></operator><call><name pos:line="46" pos:column="30">merge<pos:position pos:line="46" pos:column="35"/></name><argument_list pos:line="46" pos:column="35">(<argument><expr><name pos:line="46" pos:column="36">name<pos:position pos:line="46" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="42">path<pos:position pos:line="46" pos:column="46"/></name></expr></argument>)<pos:position pos:line="46" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="48"/></condition><then pos:line="46" pos:column="48"> <block pos:line="46" pos:column="49">{
				<decl_stmt><decl><type><specifier pos:line="47" pos:column="33">const<pos:position pos:line="47" pos:column="38"/></specifier> <name pos:line="47" pos:column="39">char<pos:position pos:line="47" pos:column="43"/></name> <modifier pos:line="47" pos:column="44">*<pos:position pos:line="47" pos:column="45"/></modifier></type><name pos:line="47" pos:column="45">msg<pos:position pos:line="47" pos:column="48"/></name></decl>;<pos:position pos:line="47" pos:column="49"/></decl_stmt>
				<if pos:line="48" pos:column="33">if <condition pos:line="48" pos:column="36">(<expr><name pos:line="48" pos:column="37">rerere_autoupdate<pos:position pos:line="48" pos:column="54"/></name></expr>)<pos:position pos:line="48" pos:column="55"/></condition><then pos:line="48" pos:column="55"> <block pos:line="48" pos:column="56">{
					<expr_stmt><expr><call><name pos:line="49" pos:column="41">string_list_insert<pos:position pos:line="49" pos:column="59"/></name><argument_list pos:line="49" pos:column="59">(<argument><expr><operator pos:line="49" pos:column="60">&amp;<pos:position pos:line="49" pos:column="65"/></operator><name pos:line="49" pos:column="61">update<pos:position pos:line="49" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="69">path<pos:position pos:line="49" pos:column="73"/></name></expr></argument>)<pos:position pos:line="49" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="75"/></expr_stmt>
					<expr_stmt><expr><name pos:line="50" pos:column="41">msg<pos:position pos:line="50" pos:column="44"/></name> <operator pos:line="50" pos:column="45">=<pos:position pos:line="50" pos:column="46"/></operator> <literal type="string" pos:line="50" pos:column="47">"Staged '%s' using previous resolution.\n"<pos:position pos:line="50" pos:column="89"/></literal></expr>;<pos:position pos:line="50" pos:column="90"/></expr_stmt>
				}<pos:position pos:line="51" pos:column="34"/></block></then> <else pos:line="51" pos:column="35">else
					<block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="41">msg<pos:position pos:line="52" pos:column="44"/></name> <operator pos:line="52" pos:column="45">=<pos:position pos:line="52" pos:column="46"/></operator> <literal type="string" pos:line="52" pos:column="47">"Resolved '%s' using previous resolution.\n"<pos:position pos:line="52" pos:column="91"/></literal></expr>;<pos:position pos:line="52" pos:column="92"/></expr_stmt></block></else></if>
				<expr_stmt><expr><call><name pos:line="53" pos:column="33">fprintf<pos:position pos:line="53" pos:column="40"/></name><argument_list pos:line="53" pos:column="40">(<argument><expr><name pos:line="53" pos:column="41">stderr<pos:position pos:line="53" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="49">msg<pos:position pos:line="53" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="54">path<pos:position pos:line="53" pos:column="58"/></name></expr></argument>)<pos:position pos:line="53" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="60"/></expr_stmt>
				<goto pos:line="54" pos:column="33">goto <name pos:line="54" pos:column="38">mark_resolved<pos:position pos:line="54" pos:column="51"/></name>;<pos:position pos:line="54" pos:column="52"/></goto>
			}<pos:position pos:line="55" pos:column="26"/></block></then></if>
		}<pos:position pos:line="56" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="58" pos:column="17">/* Let's see if we have resolved it. */</comment>
		<expr_stmt><expr><name pos:line="59" pos:column="17">ret<pos:position pos:line="59" pos:column="20"/></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <call><name pos:line="59" pos:column="23">handle_file<pos:position pos:line="59" pos:column="34"/></name><argument_list pos:line="59" pos:column="34">(<argument><expr><name pos:line="59" pos:column="35">path<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="41">NULL<pos:position pos:line="59" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="47">NULL<pos:position pos:line="59" pos:column="51"/></name></expr></argument>)<pos:position pos:line="59" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="53"/></expr_stmt>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">ret<pos:position pos:line="60" pos:column="24"/></name></expr>)<pos:position pos:line="60" pos:column="25"/></condition><then pos:line="60" pos:column="25">
			<block type="pseudo"><continue pos:line="61" pos:column="25">continue;<pos:position pos:line="61" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="63" pos:column="17">fprintf<pos:position pos:line="63" pos:column="24"/></name><argument_list pos:line="63" pos:column="24">(<argument><expr><name pos:line="63" pos:column="25">stderr<pos:position pos:line="63" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="33">"Recorded resolution for '%s'.\n"<pos:position pos:line="63" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="68">path<pos:position pos:line="63" pos:column="72"/></name></expr></argument>)<pos:position pos:line="63" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">copy_file<pos:position pos:line="64" pos:column="26"/></name><argument_list pos:line="64" pos:column="26">(<argument><expr><call><name pos:line="64" pos:column="27">rerere_path<pos:position pos:line="64" pos:column="38"/></name><argument_list pos:line="64" pos:column="38">(<argument><expr><name pos:line="64" pos:column="39">name<pos:position pos:line="64" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="45">"postimage"<pos:position pos:line="64" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="64" pos:column="59">path<pos:position pos:line="64" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="65">0666<pos:position pos:line="64" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="71"/></expr_stmt>
	<label><name pos:line="65" pos:column="9">mark_resolved<pos:position pos:line="65" pos:column="22"/></name>:<pos:position pos:line="65" pos:column="23"/></label>
		<expr_stmt><expr><name><name pos:line="66" pos:column="17">rr<pos:position pos:line="66" pos:column="19"/></name><operator pos:line="66" pos:column="19">-&gt;<pos:position pos:line="66" pos:column="24"/></operator><name pos:line="66" pos:column="21">items<pos:position pos:line="66" pos:column="26"/></name><index pos:line="66" pos:column="26">[<expr><name pos:line="66" pos:column="27">i<pos:position pos:line="66" pos:column="28"/></name></expr>]<pos:position pos:line="66" pos:column="29"/></index></name><operator pos:line="66" pos:column="29">.<pos:position pos:line="66" pos:column="30"/></operator><name pos:line="66" pos:column="30">util<pos:position pos:line="66" pos:column="34"/></name> <operator pos:line="66" pos:column="35">=<pos:position pos:line="66" pos:column="36"/></operator> <name pos:line="66" pos:column="37">NULL<pos:position pos:line="66" pos:column="41"/></name></expr>;<pos:position pos:line="66" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></for>

	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name><name pos:line="69" pos:column="13">update<pos:position pos:line="69" pos:column="19"/></name><operator pos:line="69" pos:column="19">.<pos:position pos:line="69" pos:column="20"/></operator><name pos:line="69" pos:column="20">nr<pos:position pos:line="69" pos:column="22"/></name></name></expr>)<pos:position pos:line="69" pos:column="23"/></condition><then pos:line="69" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="17">update_paths<pos:position pos:line="70" pos:column="29"/></name><argument_list pos:line="70" pos:column="29">(<argument><expr><operator pos:line="70" pos:column="30">&amp;<pos:position pos:line="70" pos:column="35"/></operator><name pos:line="70" pos:column="31">update<pos:position pos:line="70" pos:column="37"/></name></expr></argument>)<pos:position pos:line="70" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="39"/></expr_stmt></block></then></if>

	<return pos:line="72" pos:column="9">return <expr><call><name pos:line="72" pos:column="16">write_rr<pos:position pos:line="72" pos:column="24"/></name><argument_list pos:line="72" pos:column="24">(<argument><expr><name pos:line="72" pos:column="25">rr<pos:position pos:line="72" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="29">fd<pos:position pos:line="72" pos:column="31"/></name></expr></argument>)<pos:position pos:line="72" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="33"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
