<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1163_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">reencode_string_iconv<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">in<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">size_t<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">insz<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">iconv_t<pos:position pos:line="1" pos:column="65"/></name></type> <name pos:line="1" pos:column="66">conv<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="72">int<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">outsz_p<pos:position pos:line="1" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="85"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">outsz<pos:position pos:line="3" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="23">outalloc<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">out<pos:position pos:line="4" pos:column="18"/></name></decl>, <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="21">outpos<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">iconv_ibp<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">cp<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">outsz<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator> <name pos:line="7" pos:column="17">insz<pos:position pos:line="7" pos:column="21"/></name></expr>;<pos:position pos:line="7" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">outalloc<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator> <name pos:line="8" pos:column="20">outsz<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">+<pos:position pos:line="8" pos:column="27"/></operator> <literal type="number" pos:line="8" pos:column="28">1<pos:position pos:line="8" pos:column="29"/></literal></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt> <comment type="block" pos:line="8" pos:column="31">/* for terminating NUL */</comment>
	<expr_stmt><expr><name pos:line="9" pos:column="9">out<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">xmalloc<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">outalloc<pos:position pos:line="9" pos:column="31"/></name></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="10" pos:column="9">outpos<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">out<pos:position pos:line="10" pos:column="21"/></name></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name pos:line="11" pos:column="9">cp<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <operator pos:line="11" pos:column="14">(<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">iconv_ibp<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">)<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="25">in<pos:position pos:line="11" pos:column="27"/></name></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>

	<while pos:line="13" pos:column="9">while <condition pos:line="13" pos:column="15">(<expr><literal type="number" pos:line="13" pos:column="16">1<pos:position pos:line="13" pos:column="17"/></literal></expr>)<pos:position pos:line="13" pos:column="18"/></condition> <block pos:line="13" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">size_t<pos:position pos:line="14" pos:column="23"/></name></type> <name pos:line="14" pos:column="24">cnt<pos:position pos:line="14" pos:column="27"/></name> <init pos:line="14" pos:column="28">= <expr><call><name pos:line="14" pos:column="30">iconv<pos:position pos:line="14" pos:column="35"/></name><argument_list pos:line="14" pos:column="35">(<argument><expr><name pos:line="14" pos:column="36">conv<pos:position pos:line="14" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="42">&amp;<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="43">cp<pos:position pos:line="14" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="47">&amp;<pos:position pos:line="14" pos:column="52"/></operator><name pos:line="14" pos:column="48">insz<pos:position pos:line="14" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="54">&amp;<pos:position pos:line="14" pos:column="59"/></operator><name pos:line="14" pos:column="55">outpos<pos:position pos:line="14" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="63">&amp;<pos:position pos:line="14" pos:column="68"/></operator><name pos:line="14" pos:column="64">outsz<pos:position pos:line="14" pos:column="69"/></name></expr></argument>)<pos:position pos:line="14" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="71"/></decl_stmt>

		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">cnt<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">==<pos:position pos:line="16" pos:column="27"/></operator> <operator pos:line="16" pos:column="28">(<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="29">size_t<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">)<pos:position pos:line="16" pos:column="36"/></operator> <operator pos:line="16" pos:column="37">-<pos:position pos:line="16" pos:column="38"/></operator><literal type="number" pos:line="16" pos:column="38">1<pos:position pos:line="16" pos:column="39"/></literal></expr>)<pos:position pos:line="16" pos:column="40"/></condition><then pos:line="16" pos:column="40"> <block pos:line="16" pos:column="41">{
			<decl_stmt><decl><type><name pos:line="17" pos:column="25">size_t<pos:position pos:line="17" pos:column="31"/></name></type> <name pos:line="17" pos:column="32">sofar<pos:position pos:line="17" pos:column="37"/></name></decl>;<pos:position pos:line="17" pos:column="38"/></decl_stmt>
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><name pos:line="18" pos:column="29">errno<pos:position pos:line="18" pos:column="34"/></name> <operator pos:line="18" pos:column="35">!=<pos:position pos:line="18" pos:column="37"/></operator> <name pos:line="18" pos:column="38">E2BIG<pos:position pos:line="18" pos:column="43"/></name></expr>)<pos:position pos:line="18" pos:column="44"/></condition><then pos:line="18" pos:column="44"> <block pos:line="18" pos:column="45">{
				<expr_stmt><expr><call><name pos:line="19" pos:column="33">free<pos:position pos:line="19" pos:column="37"/></name><argument_list pos:line="19" pos:column="37">(<argument><expr><name pos:line="19" pos:column="38">out<pos:position pos:line="19" pos:column="41"/></name></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
				<return pos:line="20" pos:column="33">return <expr><name pos:line="20" pos:column="40">NULL<pos:position pos:line="20" pos:column="44"/></name></expr>;<pos:position pos:line="20" pos:column="45"/></return>
			}<pos:position pos:line="21" pos:column="26"/></block></then></if>
			<comment type="block" pos:line="22" pos:column="25">/* insz has remaining number of bytes.
			 * since we started outsz the same as insz,
			 * it is likely that insz is not enough for
			 * converting the rest.
			 */</comment>
			<expr_stmt><expr><name pos:line="27" pos:column="25">sofar<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">=<pos:position pos:line="27" pos:column="32"/></operator> <name pos:line="27" pos:column="33">outpos<pos:position pos:line="27" pos:column="39"/></name> <operator pos:line="27" pos:column="40">-<pos:position pos:line="27" pos:column="41"/></operator> <name pos:line="27" pos:column="42">out<pos:position pos:line="27" pos:column="45"/></name></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="28" pos:column="25">outalloc<pos:position pos:line="28" pos:column="33"/></name> <operator pos:line="28" pos:column="34">=<pos:position pos:line="28" pos:column="35"/></operator> <name pos:line="28" pos:column="36">sofar<pos:position pos:line="28" pos:column="41"/></name> <operator pos:line="28" pos:column="42">+<pos:position pos:line="28" pos:column="43"/></operator> <name pos:line="28" pos:column="44">insz<pos:position pos:line="28" pos:column="48"/></name> <operator pos:line="28" pos:column="49">*<pos:position pos:line="28" pos:column="50"/></operator> <literal type="number" pos:line="28" pos:column="51">2<pos:position pos:line="28" pos:column="52"/></literal> <operator pos:line="28" pos:column="53">+<pos:position pos:line="28" pos:column="54"/></operator> <literal type="number" pos:line="28" pos:column="55">32<pos:position pos:line="28" pos:column="57"/></literal></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name pos:line="29" pos:column="25">out<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">=<pos:position pos:line="29" pos:column="30"/></operator> <call><name pos:line="29" pos:column="31">xrealloc<pos:position pos:line="29" pos:column="39"/></name><argument_list pos:line="29" pos:column="39">(<argument><expr><name pos:line="29" pos:column="40">out<pos:position pos:line="29" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="45">outalloc<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name pos:line="30" pos:column="25">outpos<pos:position pos:line="30" pos:column="31"/></name> <operator pos:line="30" pos:column="32">=<pos:position pos:line="30" pos:column="33"/></operator> <name pos:line="30" pos:column="34">out<pos:position pos:line="30" pos:column="37"/></name> <operator pos:line="30" pos:column="38">+<pos:position pos:line="30" pos:column="39"/></operator> <name pos:line="30" pos:column="40">sofar<pos:position pos:line="30" pos:column="45"/></name></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="31" pos:column="25">outsz<pos:position pos:line="31" pos:column="30"/></name> <operator pos:line="31" pos:column="31">=<pos:position pos:line="31" pos:column="32"/></operator> <name pos:line="31" pos:column="33">outalloc<pos:position pos:line="31" pos:column="41"/></name> <operator pos:line="31" pos:column="42">-<pos:position pos:line="31" pos:column="43"/></operator> <name pos:line="31" pos:column="44">sofar<pos:position pos:line="31" pos:column="49"/></name> <operator pos:line="31" pos:column="50">-<pos:position pos:line="31" pos:column="51"/></operator> <literal type="number" pos:line="31" pos:column="52">1<pos:position pos:line="31" pos:column="53"/></literal></expr>;<pos:position pos:line="31" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="32" pos:column="18"/></block></then>
		<else pos:line="33" pos:column="17">else <block pos:line="33" pos:column="22">{
			<expr_stmt><expr><operator pos:line="34" pos:column="25">*<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="26">outpos<pos:position pos:line="34" pos:column="32"/></name> <operator pos:line="34" pos:column="33">=<pos:position pos:line="34" pos:column="34"/></operator> <literal type="char" pos:line="34" pos:column="35">'\0'<pos:position pos:line="34" pos:column="39"/></literal></expr>;<pos:position pos:line="34" pos:column="40"/></expr_stmt>
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><name pos:line="35" pos:column="29">outsz_p<pos:position pos:line="35" pos:column="36"/></name></expr>)<pos:position pos:line="35" pos:column="37"/></condition><then pos:line="35" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="36" pos:column="33">*<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="34">outsz_p<pos:position pos:line="36" pos:column="41"/></name> <operator pos:line="36" pos:column="42">=<pos:position pos:line="36" pos:column="43"/></operator> <name pos:line="36" pos:column="44">outpos<pos:position pos:line="36" pos:column="50"/></name> <operator pos:line="36" pos:column="51">-<pos:position pos:line="36" pos:column="52"/></operator> <name pos:line="36" pos:column="53">out<pos:position pos:line="36" pos:column="56"/></name></expr>;<pos:position pos:line="36" pos:column="57"/></expr_stmt></block></then></if>
			<break pos:line="37" pos:column="25">break;<pos:position pos:line="37" pos:column="31"/></break>
		}<pos:position pos:line="38" pos:column="18"/></block></else></if>
	}<pos:position pos:line="39" pos:column="10"/></block></while>
	<return pos:line="40" pos:column="9">return <expr><name pos:line="40" pos:column="16">out<pos:position pos:line="40" pos:column="19"/></name></expr>;<pos:position pos:line="40" pos:column="20"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
