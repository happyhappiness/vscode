<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2564_git-2.13.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">add_lines<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">strbuf<pos:position pos:line="1" pos:column="36"/></name></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">out<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">prefix1<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="3" pos:column="25">const<pos:position pos:line="3" pos:column="30"/></specifier> <name pos:line="3" pos:column="31">char<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">prefix2<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="4" pos:column="25">const<pos:position pos:line="4" pos:column="30"/></specifier> <name pos:line="4" pos:column="31">char<pos:position pos:line="4" pos:column="35"/></name> <modifier pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></modifier></type><name pos:line="4" pos:column="37">buf<pos:position pos:line="4" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="42">size_t<pos:position pos:line="4" pos:column="48"/></name></type> <name pos:line="4" pos:column="49">size<pos:position pos:line="4" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="54"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><name pos:line="6" pos:column="16">size<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition> <block pos:line="6" pos:column="22">{
		<decl_stmt><decl><type><specifier pos:line="7" pos:column="17">const<pos:position pos:line="7" pos:column="22"/></specifier> <name pos:line="7" pos:column="23">char<pos:position pos:line="7" pos:column="27"/></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">prefix<pos:position pos:line="7" pos:column="35"/></name></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name pos:line="8" pos:column="23">char<pos:position pos:line="8" pos:column="27"/></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">next<pos:position pos:line="8" pos:column="33"/></name> <init pos:line="8" pos:column="34">= <expr><call><name pos:line="8" pos:column="36">memchr<pos:position pos:line="8" pos:column="42"/></name><argument_list pos:line="8" pos:column="42">(<argument><expr><name pos:line="8" pos:column="43">buf<pos:position pos:line="8" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="8" pos:column="48">'\n'<pos:position pos:line="8" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="54">size<pos:position pos:line="8" pos:column="58"/></name></expr></argument>)<pos:position pos:line="8" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
		<expr_stmt><expr><name pos:line="9" pos:column="17">next<pos:position pos:line="9" pos:column="21"/></name> <operator pos:line="9" pos:column="22">=<pos:position pos:line="9" pos:column="23"/></operator> <ternary><condition><expr><name pos:line="9" pos:column="24">next<pos:position pos:line="9" pos:column="28"/></name></expr> ?<pos:position pos:line="9" pos:column="30"/></condition><then pos:line="9" pos:column="30"> <expr><operator pos:line="9" pos:column="31">(<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="32">next<pos:position pos:line="9" pos:column="36"/></name> <operator pos:line="9" pos:column="37">+<pos:position pos:line="9" pos:column="38"/></operator> <literal type="number" pos:line="9" pos:column="39">1<pos:position pos:line="9" pos:column="40"/></literal><operator pos:line="9" pos:column="40">)<pos:position pos:line="9" pos:column="41"/></operator></expr> <pos:position pos:line="9" pos:column="42"/></then><else pos:line="9" pos:column="42">: <expr><operator pos:line="9" pos:column="44">(<pos:position pos:line="9" pos:column="45"/></operator><name pos:line="9" pos:column="45">buf<pos:position pos:line="9" pos:column="48"/></name> <operator pos:line="9" pos:column="49">+<pos:position pos:line="9" pos:column="50"/></operator> <name pos:line="9" pos:column="51">size<pos:position pos:line="9" pos:column="55"/></name><operator pos:line="9" pos:column="55">)<pos:position pos:line="9" pos:column="56"/></operator></expr></else></ternary></expr>;<pos:position pos:line="9" pos:column="57"/></expr_stmt>

		<expr_stmt><expr><name pos:line="11" pos:column="17">prefix<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">=<pos:position pos:line="11" pos:column="25"/></operator> <operator pos:line="11" pos:column="26">(<pos:position pos:line="11" pos:column="27"/></operator><ternary><condition><expr><operator pos:line="11" pos:column="27">(<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">prefix2<pos:position pos:line="11" pos:column="35"/></name> <operator pos:line="11" pos:column="36">&amp;&amp;<pos:position pos:line="11" pos:column="46"/></operator> <operator pos:line="11" pos:column="39">(<pos:position pos:line="11" pos:column="40"/></operator><name><name pos:line="11" pos:column="40">buf<pos:position pos:line="11" pos:column="43"/></name><index pos:line="11" pos:column="43">[<expr><literal type="number" pos:line="11" pos:column="44">0<pos:position pos:line="11" pos:column="45"/></literal></expr>]<pos:position pos:line="11" pos:column="46"/></index></name> <operator pos:line="11" pos:column="47">==<pos:position pos:line="11" pos:column="49"/></operator> <literal type="char" pos:line="11" pos:column="50">'\n'<pos:position pos:line="11" pos:column="54"/></literal> <operator pos:line="11" pos:column="55">||<pos:position pos:line="11" pos:column="57"/></operator> <name><name pos:line="11" pos:column="58">buf<pos:position pos:line="11" pos:column="61"/></name><index pos:line="11" pos:column="61">[<expr><literal type="number" pos:line="11" pos:column="62">0<pos:position pos:line="11" pos:column="63"/></literal></expr>]<pos:position pos:line="11" pos:column="64"/></index></name> <operator pos:line="11" pos:column="65">==<pos:position pos:line="11" pos:column="67"/></operator> <literal type="char" pos:line="11" pos:column="68">'\t'<pos:position pos:line="11" pos:column="72"/></literal><operator pos:line="11" pos:column="72">)<pos:position pos:line="11" pos:column="73"/></operator><operator pos:line="11" pos:column="73">)<pos:position pos:line="11" pos:column="74"/></operator></expr>
			  ?<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28"> <expr><name pos:line="12" pos:column="29">prefix2<pos:position pos:line="12" pos:column="36"/></name></expr> <pos:position pos:line="12" pos:column="37"/></then><else pos:line="12" pos:column="37">: <expr><name pos:line="12" pos:column="39">prefix1<pos:position pos:line="12" pos:column="46"/></name></expr></else></ternary><operator pos:line="12" pos:column="46">)<pos:position pos:line="12" pos:column="47"/></operator></expr>;<pos:position pos:line="12" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">strbuf_addstr<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">out<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="36">prefix<pos:position pos:line="13" pos:column="42"/></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">strbuf_add<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">out<pos:position pos:line="14" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="33">buf<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">next<pos:position pos:line="14" pos:column="42"/></name> <operator pos:line="14" pos:column="43">-<pos:position pos:line="14" pos:column="44"/></operator> <name pos:line="14" pos:column="45">buf<pos:position pos:line="14" pos:column="48"/></name></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">size<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">-=<pos:position pos:line="15" pos:column="24"/></operator> <name pos:line="15" pos:column="25">next<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">-<pos:position pos:line="15" pos:column="31"/></operator> <name pos:line="15" pos:column="32">buf<pos:position pos:line="15" pos:column="35"/></name></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">buf<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="23">next<pos:position pos:line="16" pos:column="27"/></name></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">strbuf_complete_line<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">out<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
