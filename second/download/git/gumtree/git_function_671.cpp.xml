<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_671.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">process_command_line_args<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">list_head<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">arg_head<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
				      <parameter><decl><type><name><name pos:line="2" pos:column="39">struct<pos:position pos:line="2" pos:column="45"/></name> <name pos:line="2" pos:column="46">string_list<pos:position pos:line="2" pos:column="57"/></name></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">trailers<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">string_list_item<pos:position pos:line="4" pos:column="32"/></name></name> <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">tr<pos:position pos:line="4" pos:column="36"/></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">arg_item<pos:position pos:line="5" pos:column="24"/></name></name> <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="26">item<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">tok<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><name pos:line="6" pos:column="29">STRBUF_INIT<pos:position pos:line="6" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">val<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><name pos:line="7" pos:column="29">STRBUF_INIT<pos:position pos:line="7" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name><name pos:line="8" pos:column="15">struct<pos:position pos:line="8" pos:column="21"/></name> <name pos:line="8" pos:column="22">conf_info<pos:position pos:line="8" pos:column="31"/></name></name> <modifier pos:line="8" pos:column="32">*<pos:position pos:line="8" pos:column="33"/></modifier></type><name pos:line="8" pos:column="33">conf<pos:position pos:line="8" pos:column="37"/></name></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">list_head<pos:position pos:line="9" pos:column="25"/></name></name> <modifier pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></modifier></type><name pos:line="9" pos:column="27">pos<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>

	<comment type="block" pos:line="11" pos:column="9">/*
	 * In command-line arguments, '=' is accepted (in addition to the
	 * separators that are defined).
	 */</comment>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">char<pos:position pos:line="15" pos:column="13"/></name> <modifier pos:line="15" pos:column="14">*<pos:position pos:line="15" pos:column="15"/></modifier></type><name pos:line="15" pos:column="15">cl_separators<pos:position pos:line="15" pos:column="28"/></name> <init pos:line="15" pos:column="29">= <expr><call><name pos:line="15" pos:column="31">xstrfmt<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><literal type="string" pos:line="15" pos:column="39">"=%s"<pos:position pos:line="15" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">separators<pos:position pos:line="15" pos:column="56"/></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="58"/></decl_stmt>

	<comment type="block" pos:line="17" pos:column="9">/* Add an arg item for each configured trailer with a command */</comment>
	<macro><name pos:line="18" pos:column="9">list_for_each<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument pos:line="18" pos:column="23">pos<pos:position pos:line="18" pos:column="26"/></argument>, <argument pos:line="18" pos:column="28">&amp;conf_head<pos:position pos:line="18" pos:column="38"/></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></macro> <block pos:line="18" pos:column="40">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">item<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <call><name pos:line="19" pos:column="24">list_entry<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><name pos:line="19" pos:column="35">pos<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr pos:line="19" pos:column="40">struct <name pos:line="19" pos:column="47">arg_item<pos:position pos:line="19" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="57">list<pos:position pos:line="19" pos:column="61"/></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="63"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name><name pos:line="20" pos:column="21">item<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">-&gt;<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="27">conf<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">.<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">command<pos:position pos:line="20" pos:column="39"/></name></name></expr>)<pos:position pos:line="20" pos:column="40"/></condition><then pos:line="20" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">add_arg_item<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><name pos:line="21" pos:column="38">arg_head<pos:position pos:line="21" pos:column="46"/></name></expr></argument>,
				     <argument><expr><call><name pos:line="22" pos:column="38">xstrdup<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><call><name pos:line="22" pos:column="46">token_from_item<pos:position pos:line="22" pos:column="61"/></name><argument_list pos:line="22" pos:column="61">(<argument><expr><name pos:line="22" pos:column="62">item<pos:position pos:line="22" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="68">NULL<pos:position pos:line="22" pos:column="72"/></name></expr></argument>)<pos:position pos:line="22" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="74"/></argument_list></call></expr></argument>,
				     <argument><expr><call><name pos:line="23" pos:column="38">xstrdup<pos:position pos:line="23" pos:column="45"/></name><argument_list pos:line="23" pos:column="45">(<argument><expr><literal type="string" pos:line="23" pos:column="46">""<pos:position pos:line="23" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr></argument>,
				     <argument><expr><operator pos:line="24" pos:column="38">&amp;<pos:position pos:line="24" pos:column="43"/></operator><name><name pos:line="24" pos:column="39">item<pos:position pos:line="24" pos:column="43"/></name><operator pos:line="24" pos:column="43">-&gt;<pos:position pos:line="24" pos:column="48"/></operator><name pos:line="24" pos:column="45">conf<pos:position pos:line="24" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="51"/></expr_stmt></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block>

	<comment type="block" pos:line="27" pos:column="9">/* Add an arg item for each trailer on the command line */</comment>
	<macro><name pos:line="28" pos:column="9">for_each_string_list_item<pos:position pos:line="28" pos:column="34"/></name><argument_list pos:line="28" pos:column="34">(<argument pos:line="28" pos:column="35">tr<pos:position pos:line="28" pos:column="37"/></argument>, <argument pos:line="28" pos:column="39">trailers<pos:position pos:line="28" pos:column="47"/></argument>)<pos:position pos:line="28" pos:column="48"/></argument_list></macro> <block pos:line="28" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="29" pos:column="17">int<pos:position pos:line="29" pos:column="20"/></name></type> <name pos:line="29" pos:column="21">separator_pos<pos:position pos:line="29" pos:column="34"/></name> <init pos:line="29" pos:column="35">= <expr><call><name pos:line="29" pos:column="37">find_separator<pos:position pos:line="29" pos:column="51"/></name><argument_list pos:line="29" pos:column="51">(<argument><expr><name><name pos:line="29" pos:column="52">tr<pos:position pos:line="29" pos:column="54"/></name><operator pos:line="29" pos:column="54">-&gt;<pos:position pos:line="29" pos:column="59"/></operator><name pos:line="29" pos:column="56">string<pos:position pos:line="29" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="64">cl_separators<pos:position pos:line="29" pos:column="77"/></name></expr></argument>)<pos:position pos:line="29" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="79"/></decl_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">separator_pos<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">==<pos:position pos:line="30" pos:column="37"/></operator> <literal type="number" pos:line="30" pos:column="38">0<pos:position pos:line="30" pos:column="39"/></literal></expr>)<pos:position pos:line="30" pos:column="40"/></condition><then pos:line="30" pos:column="40"> <block pos:line="30" pos:column="41">{
			<decl_stmt><decl><type><name><name pos:line="31" pos:column="25">struct<pos:position pos:line="31" pos:column="31"/></name> <name pos:line="31" pos:column="32">strbuf<pos:position pos:line="31" pos:column="38"/></name></name></type> <name pos:line="31" pos:column="39">sb<pos:position pos:line="31" pos:column="41"/></name> <init pos:line="31" pos:column="42">= <expr><name pos:line="31" pos:column="44">STRBUF_INIT<pos:position pos:line="31" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="56"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">strbuf_addstr<pos:position pos:line="32" pos:column="38"/></name><argument_list pos:line="32" pos:column="38">(<argument><expr><operator pos:line="32" pos:column="39">&amp;<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="40">sb<pos:position pos:line="32" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="44">tr<pos:position pos:line="32" pos:column="46"/></name><operator pos:line="32" pos:column="46">-&gt;<pos:position pos:line="32" pos:column="51"/></operator><name pos:line="32" pos:column="48">string<pos:position pos:line="32" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">strbuf_trim<pos:position pos:line="33" pos:column="36"/></name><argument_list pos:line="33" pos:column="36">(<argument><expr><operator pos:line="33" pos:column="37">&amp;<pos:position pos:line="33" pos:column="42"/></operator><name pos:line="33" pos:column="38">sb<pos:position pos:line="33" pos:column="40"/></name></expr></argument>)<pos:position pos:line="33" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">error<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><call><name pos:line="34" pos:column="31">_<pos:position pos:line="34" pos:column="32"/></name><argument_list pos:line="34" pos:column="32">(<argument><expr><literal type="string" pos:line="34" pos:column="33">"empty trailer token in trailer '%.*s'"<pos:position pos:line="34" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="73"/></argument_list></call></expr></argument>,
			      <argument><expr><operator pos:line="35" pos:column="31">(<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="32">int<pos:position pos:line="35" pos:column="35"/></name><operator pos:line="35" pos:column="35">)<pos:position pos:line="35" pos:column="36"/></operator> <name><name pos:line="35" pos:column="37">sb<pos:position pos:line="35" pos:column="39"/></name><operator pos:line="35" pos:column="39">.<pos:position pos:line="35" pos:column="40"/></operator><name pos:line="35" pos:column="40">len<pos:position pos:line="35" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="45">sb<pos:position pos:line="35" pos:column="47"/></name><operator pos:line="35" pos:column="47">.<pos:position pos:line="35" pos:column="48"/></operator><name pos:line="35" pos:column="48">buf<pos:position pos:line="35" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="53"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">strbuf_release<pos:position pos:line="36" pos:column="39"/></name><argument_list pos:line="36" pos:column="39">(<argument><expr><operator pos:line="36" pos:column="40">&amp;<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="41">sb<pos:position pos:line="36" pos:column="43"/></name></expr></argument>)<pos:position pos:line="36" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="37" pos:column="18"/></block></then> <else pos:line="37" pos:column="19">else <block pos:line="37" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">parse_trailer<pos:position pos:line="38" pos:column="38"/></name><argument_list pos:line="38" pos:column="38">(<argument><expr><operator pos:line="38" pos:column="39">&amp;<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="40">tok<pos:position pos:line="38" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="45">&amp;<pos:position pos:line="38" pos:column="50"/></operator><name pos:line="38" pos:column="46">val<pos:position pos:line="38" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="51">&amp;<pos:position pos:line="38" pos:column="56"/></operator><name pos:line="38" pos:column="52">conf<pos:position pos:line="38" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="58">tr<pos:position pos:line="38" pos:column="60"/></name><operator pos:line="38" pos:column="60">-&gt;<pos:position pos:line="38" pos:column="65"/></operator><name pos:line="38" pos:column="62">string<pos:position pos:line="38" pos:column="68"/></name></name></expr></argument>,
				      <argument><expr><name pos:line="39" pos:column="39">separator_pos<pos:position pos:line="39" pos:column="52"/></name></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">add_arg_item<pos:position pos:line="40" pos:column="37"/></name><argument_list pos:line="40" pos:column="37">(<argument><expr><name pos:line="40" pos:column="38">arg_head<pos:position pos:line="40" pos:column="46"/></name></expr></argument>,
				     <argument><expr><call><name pos:line="41" pos:column="38">strbuf_detach<pos:position pos:line="41" pos:column="51"/></name><argument_list pos:line="41" pos:column="51">(<argument><expr><operator pos:line="41" pos:column="52">&amp;<pos:position pos:line="41" pos:column="57"/></operator><name pos:line="41" pos:column="53">tok<pos:position pos:line="41" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="58">NULL<pos:position pos:line="41" pos:column="62"/></name></expr></argument>)<pos:position pos:line="41" pos:column="63"/></argument_list></call></expr></argument>,
				     <argument><expr><call><name pos:line="42" pos:column="38">strbuf_detach<pos:position pos:line="42" pos:column="51"/></name><argument_list pos:line="42" pos:column="51">(<argument><expr><operator pos:line="42" pos:column="52">&amp;<pos:position pos:line="42" pos:column="57"/></operator><name pos:line="42" pos:column="53">val<pos:position pos:line="42" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="58">NULL<pos:position pos:line="42" pos:column="62"/></name></expr></argument>)<pos:position pos:line="42" pos:column="63"/></argument_list></call></expr></argument>,
				     <argument><expr><name pos:line="43" pos:column="38">conf<pos:position pos:line="43" pos:column="42"/></name></expr></argument>)<pos:position pos:line="43" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></else></if>
	}<pos:position pos:line="45" pos:column="10"/></block>

	<expr_stmt><expr><call><name pos:line="47" pos:column="9">free<pos:position pos:line="47" pos:column="13"/></name><argument_list pos:line="47" pos:column="13">(<argument><expr><name pos:line="47" pos:column="14">cl_separators<pos:position pos:line="47" pos:column="27"/></name></expr></argument>)<pos:position pos:line="47" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="29"/></expr_stmt>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
