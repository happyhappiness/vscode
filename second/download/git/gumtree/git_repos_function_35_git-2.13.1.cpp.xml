<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_35_git-2.13.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">handle_ssh_variant<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">ssh_command<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">int<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">is_cmdline<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
			       <parameter><decl><type><name pos:line="2" pos:column="32">int<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">port_option<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">needs_batch<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">variant<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">p<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><name pos:line="5" pos:column="19">NULL<pos:position pos:line="5" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name pos:line="7" pos:column="13">override_ssh_variant<pos:position pos:line="7" pos:column="33"/></name><argument_list pos:line="7" pos:column="33">(<argument><expr><name pos:line="7" pos:column="34">port_option<pos:position pos:line="7" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="47">needs_batch<pos:position pos:line="7" pos:column="58"/></name></expr></argument>)<pos:position pos:line="7" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="60"/></condition><then pos:line="7" pos:column="60">
		<block type="pseudo"><return pos:line="8" pos:column="17">return;<pos:position pos:line="8" pos:column="24"/></return></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">is_cmdline<pos:position pos:line="10" pos:column="24"/></name></expr>)<pos:position pos:line="10" pos:column="25"/></condition><then pos:line="10" pos:column="25"> <block pos:line="10" pos:column="26">{
		<expr_stmt><expr><name pos:line="11" pos:column="17">p<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <call><name pos:line="11" pos:column="21">xstrdup<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">ssh_command<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="12" pos:column="17">variant<pos:position pos:line="12" pos:column="24"/></name> <operator pos:line="12" pos:column="25">=<pos:position pos:line="12" pos:column="26"/></operator> <call><name pos:line="12" pos:column="27">basename<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">(<argument><expr><name pos:line="12" pos:column="36">p<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then> <else pos:line="13" pos:column="11">else <block pos:line="13" pos:column="16">{
		<decl_stmt><decl><type><specifier pos:line="14" pos:column="17">const<pos:position pos:line="14" pos:column="22"/></specifier> <name pos:line="14" pos:column="23">char<pos:position pos:line="14" pos:column="27"/></name> <modifier pos:line="14" pos:column="28">*<pos:position pos:line="14" pos:column="29"/></modifier><modifier pos:line="14" pos:column="29">*<pos:position pos:line="14" pos:column="30"/></modifier></type><name pos:line="14" pos:column="30">ssh_argv<pos:position pos:line="14" pos:column="38"/></name></decl>;<pos:position pos:line="14" pos:column="39"/></decl_stmt>

		<expr_stmt><expr><name pos:line="16" pos:column="17">p<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <call><name pos:line="16" pos:column="21">xstrdup<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">ssh_command<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><call><name pos:line="17" pos:column="21">split_cmdline<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><name pos:line="17" pos:column="35">p<pos:position pos:line="17" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="38">&amp;<pos:position pos:line="17" pos:column="43"/></operator><name pos:line="17" pos:column="39">ssh_argv<pos:position pos:line="17" pos:column="47"/></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call> <operator pos:line="17" pos:column="49">&gt;<pos:position pos:line="17" pos:column="53"/></operator> <literal type="number" pos:line="17" pos:column="51">0<pos:position pos:line="17" pos:column="52"/></literal></expr>)<pos:position pos:line="17" pos:column="53"/></condition><then pos:line="17" pos:column="53"> <block pos:line="17" pos:column="54">{
			<expr_stmt><expr><name pos:line="18" pos:column="25">variant<pos:position pos:line="18" pos:column="32"/></name> <operator pos:line="18" pos:column="33">=<pos:position pos:line="18" pos:column="34"/></operator> <call><name pos:line="18" pos:column="35">basename<pos:position pos:line="18" pos:column="43"/></name><argument_list pos:line="18" pos:column="43">(<argument><expr><operator pos:line="18" pos:column="44">(<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="45">char<pos:position pos:line="18" pos:column="49"/></name> <operator pos:line="18" pos:column="50">*<pos:position pos:line="18" pos:column="51"/></operator><operator pos:line="18" pos:column="51">)<pos:position pos:line="18" pos:column="52"/></operator><name><name pos:line="18" pos:column="52">ssh_argv<pos:position pos:line="18" pos:column="60"/></name><index pos:line="18" pos:column="60">[<expr><literal type="number" pos:line="18" pos:column="61">0<pos:position pos:line="18" pos:column="62"/></literal></expr>]<pos:position pos:line="18" pos:column="63"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="65"/></expr_stmt>
			<comment type="block" pos:line="19" pos:column="25">/*
			 * At this point, variant points into the buffer
			 * referenced by p, hence we do not need ssh_argv
			 * any longer.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">free<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">ssh_argv<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></then> <else pos:line="25" pos:column="19">else <block pos:line="25" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">free<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">p<pos:position pos:line="26" pos:column="31"/></name></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
			<return pos:line="27" pos:column="25">return;<pos:position pos:line="27" pos:column="32"/></return>
		}<pos:position pos:line="28" pos:column="18"/></block></else></if>
	}<pos:position pos:line="29" pos:column="10"/></block></else></if>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><call><name pos:line="31" pos:column="14">strcasecmp<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">variant<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="34">"plink"<pos:position pos:line="31" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call> <operator pos:line="31" pos:column="43">||<pos:position pos:line="31" pos:column="45"/></operator>
	    <operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><call><name pos:line="32" pos:column="14">strcasecmp<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">(<argument><expr><name pos:line="32" pos:column="25">variant<pos:position pos:line="32" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="34">"plink.exe"<pos:position pos:line="32" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="47"/></condition><then pos:line="32" pos:column="47">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="33" pos:column="17">*<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">port_option<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">=<pos:position pos:line="33" pos:column="31"/></operator> <literal type="char" pos:line="33" pos:column="32">'P'<pos:position pos:line="33" pos:column="35"/></literal></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt></block></then>
	<elseif pos:line="34" pos:column="9">else <if pos:line="34" pos:column="14">if <condition pos:line="34" pos:column="17">(<expr><operator pos:line="34" pos:column="18">!<pos:position pos:line="34" pos:column="19"/></operator><call><name pos:line="34" pos:column="19">strcasecmp<pos:position pos:line="34" pos:column="29"/></name><argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">variant<pos:position pos:line="34" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="39">"tortoiseplink"<pos:position pos:line="34" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></call> <operator pos:line="34" pos:column="56">||<pos:position pos:line="34" pos:column="58"/></operator>
		 <operator pos:line="35" pos:column="18">!<pos:position pos:line="35" pos:column="19"/></operator><call><name pos:line="35" pos:column="19">strcasecmp<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">variant<pos:position pos:line="35" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="39">"tortoiseplink.exe"<pos:position pos:line="35" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="60"/></condition><then pos:line="35" pos:column="60"> <block pos:line="35" pos:column="61">{
		<expr_stmt><expr><operator pos:line="36" pos:column="17">*<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="18">port_option<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">=<pos:position pos:line="36" pos:column="31"/></operator> <literal type="char" pos:line="36" pos:column="32">'P'<pos:position pos:line="36" pos:column="35"/></literal></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="37" pos:column="17">*<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="18">needs_batch<pos:position pos:line="37" pos:column="29"/></name> <operator pos:line="37" pos:column="30">=<pos:position pos:line="37" pos:column="31"/></operator> <literal type="number" pos:line="37" pos:column="32">1<pos:position pos:line="37" pos:column="33"/></literal></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if></elseif></if>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">free<pos:position pos:line="39" pos:column="13"/></name><argument_list pos:line="39" pos:column="13">(<argument><expr><name pos:line="39" pos:column="14">p<pos:position pos:line="39" pos:column="15"/></name></expr></argument>)<pos:position pos:line="39" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="17"/></expr_stmt>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
