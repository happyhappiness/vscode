<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_118_git-2.3.10.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">pp_title_line<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">pretty_print_context<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">pp<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
		   <parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier><modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">msg_p<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>,
		   <parameter><decl><type><name><name pos:line="3" pos:column="20">struct<pos:position pos:line="3" pos:column="26"/></name> <name pos:line="3" pos:column="27">strbuf<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">sb<pos:position pos:line="3" pos:column="37"/></name></decl></parameter>,
		   <parameter><decl><type><specifier pos:line="4" pos:column="20">const<pos:position pos:line="4" pos:column="25"/></specifier> <name pos:line="4" pos:column="26">char<pos:position pos:line="4" pos:column="30"/></name> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">encoding<pos:position pos:line="4" pos:column="40"/></name></decl></parameter>,
		   <parameter><decl><type><name pos:line="5" pos:column="20">int<pos:position pos:line="5" pos:column="23"/></name></type> <name pos:line="5" pos:column="24">need_8bit_cte<pos:position pos:line="5" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="38"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="7" pos:column="9">static<pos:position pos:line="7" pos:column="15"/></specifier> <type><specifier pos:line="7" pos:column="16">const<pos:position pos:line="7" pos:column="21"/></specifier> <name pos:line="7" pos:column="22">int<pos:position pos:line="7" pos:column="25"/></name></type> <name pos:line="7" pos:column="26">max_length<pos:position pos:line="7" pos:column="36"/></name> <init pos:line="7" pos:column="37">= <expr><literal type="number" pos:line="7" pos:column="39">78<pos:position pos:line="7" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="42"/></decl_stmt> <comment type="block" pos:line="7" pos:column="43">/* per rfc2047 */</comment>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">title<pos:position pos:line="8" pos:column="28"/></name></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">strbuf_init<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><operator pos:line="10" pos:column="21">&amp;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="22">title<pos:position pos:line="10" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="29">80<pos:position pos:line="10" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">msg_p<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <call><name pos:line="11" pos:column="18">format_subject<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><operator pos:line="11" pos:column="33">&amp;<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="34">title<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="41">*<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="42">msg_p<pos:position pos:line="11" pos:column="47"/></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name><name pos:line="12" pos:column="33">pp<pos:position pos:line="12" pos:column="35"/></name><operator pos:line="12" pos:column="35">-&gt;<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="37">preserve_subject<pos:position pos:line="12" pos:column="53"/></name></name></expr> ?<pos:position pos:line="12" pos:column="55"/></condition><then pos:line="12" pos:column="55"> <expr><literal type="string" pos:line="12" pos:column="56">"\n"<pos:position pos:line="12" pos:column="60"/></literal></expr> <pos:position pos:line="12" pos:column="61"/></then><else pos:line="12" pos:column="61">: <expr><literal type="string" pos:line="12" pos:column="63">" "<pos:position pos:line="12" pos:column="66"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="12" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="68"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">strbuf_grow<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">sb<pos:position pos:line="14" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="25">title<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">.<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="31">len<pos:position pos:line="14" pos:column="34"/></name></name> <operator pos:line="14" pos:column="35">+<pos:position pos:line="14" pos:column="36"/></operator> <literal type="number" pos:line="14" pos:column="37">1024<pos:position pos:line="14" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">pp<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">-&gt;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="17">subject<pos:position pos:line="15" pos:column="24"/></name></name></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25"> <block pos:line="15" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">strbuf_addstr<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">sb<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="35">pp<pos:position pos:line="16" pos:column="37"/></name><operator pos:line="16" pos:column="37">-&gt;<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="39">subject<pos:position pos:line="16" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><call><name pos:line="17" pos:column="21">needs_rfc2047_encoding<pos:position pos:line="17" pos:column="43"/></name><argument_list pos:line="17" pos:column="43">(<argument><expr><name><name pos:line="17" pos:column="44">title<pos:position pos:line="17" pos:column="49"/></name><operator pos:line="17" pos:column="49">.<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="50">buf<pos:position pos:line="17" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="55">title<pos:position pos:line="17" pos:column="60"/></name><operator pos:line="17" pos:column="60">.<pos:position pos:line="17" pos:column="61"/></operator><name pos:line="17" pos:column="61">len<pos:position pos:line="17" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="66">RFC2047_SUBJECT<pos:position pos:line="17" pos:column="81"/></name></expr></argument>)<pos:position pos:line="17" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="83"/></condition><then pos:line="17" pos:column="83">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="25">add_rfc2047<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">(<argument><expr><name pos:line="18" pos:column="37">sb<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="41">title<pos:position pos:line="18" pos:column="46"/></name><operator pos:line="18" pos:column="46">.<pos:position pos:line="18" pos:column="47"/></operator><name pos:line="18" pos:column="47">buf<pos:position pos:line="18" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="52">title<pos:position pos:line="18" pos:column="57"/></name><operator pos:line="18" pos:column="57">.<pos:position pos:line="18" pos:column="58"/></operator><name pos:line="18" pos:column="58">len<pos:position pos:line="18" pos:column="61"/></name></name></expr></argument>,
						<argument><expr><name pos:line="19" pos:column="49">encoding<pos:position pos:line="19" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="59">RFC2047_SUBJECT<pos:position pos:line="19" pos:column="74"/></name></expr></argument>)<pos:position pos:line="19" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="76"/></expr_stmt></block></then>
		<else pos:line="20" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">strbuf_add_wrapped_bytes<pos:position pos:line="21" pos:column="49"/></name><argument_list pos:line="21" pos:column="49">(<argument><expr><name pos:line="21" pos:column="50">sb<pos:position pos:line="21" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="54">title<pos:position pos:line="21" pos:column="59"/></name><operator pos:line="21" pos:column="59">.<pos:position pos:line="21" pos:column="60"/></operator><name pos:line="21" pos:column="60">buf<pos:position pos:line="21" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="65">title<pos:position pos:line="21" pos:column="70"/></name><operator pos:line="21" pos:column="70">.<pos:position pos:line="21" pos:column="71"/></operator><name pos:line="21" pos:column="71">len<pos:position pos:line="21" pos:column="74"/></name></name></expr></argument>,
					 <argument><expr><operator pos:line="22" pos:column="42">-<pos:position pos:line="22" pos:column="43"/></operator><call><name pos:line="22" pos:column="43">last_line_length<pos:position pos:line="22" pos:column="59"/></name><argument_list pos:line="22" pos:column="59">(<argument><expr><name pos:line="22" pos:column="60">sb<pos:position pos:line="22" pos:column="62"/></name></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="65">1<pos:position pos:line="22" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="68">max_length<pos:position pos:line="22" pos:column="78"/></name></expr></argument>)<pos:position pos:line="22" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="80"/></expr_stmt></block></else></if>
	}<pos:position pos:line="23" pos:column="10"/></block></then> <else pos:line="23" pos:column="11">else <block pos:line="23" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">strbuf_addbuf<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name pos:line="24" pos:column="31">sb<pos:position pos:line="24" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="35">&amp;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="36">title<pos:position pos:line="24" pos:column="41"/></name></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">strbuf_addch<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">sb<pos:position pos:line="26" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="26" pos:column="26">'\n'<pos:position pos:line="26" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">need_8bit_cte<pos:position pos:line="28" pos:column="26"/></name> <operator pos:line="28" pos:column="27">==<pos:position pos:line="28" pos:column="29"/></operator> <literal type="number" pos:line="28" pos:column="30">0<pos:position pos:line="28" pos:column="31"/></literal></expr>)<pos:position pos:line="28" pos:column="32"/></condition><then pos:line="28" pos:column="32"> <block pos:line="28" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="29" pos:column="17">int<pos:position pos:line="29" pos:column="20"/></name></type> <name pos:line="29" pos:column="21">i<pos:position pos:line="29" pos:column="22"/></name></decl>;<pos:position pos:line="29" pos:column="23"/></decl_stmt>
		<for pos:line="30" pos:column="17">for <control pos:line="30" pos:column="21">(<init><expr><name pos:line="30" pos:column="22">i<pos:position pos:line="30" pos:column="23"/></name> <operator pos:line="30" pos:column="24">=<pos:position pos:line="30" pos:column="25"/></operator> <literal type="number" pos:line="30" pos:column="26">0<pos:position pos:line="30" pos:column="27"/></literal></expr>;<pos:position pos:line="30" pos:column="28"/></init> <condition><expr><name pos:line="30" pos:column="29">i<pos:position pos:line="30" pos:column="30"/></name> <operator pos:line="30" pos:column="31">&lt;<pos:position pos:line="30" pos:column="35"/></operator> <name><name pos:line="30" pos:column="33">pp<pos:position pos:line="30" pos:column="35"/></name><operator pos:line="30" pos:column="35">-&gt;<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="37">in_body_headers<pos:position pos:line="30" pos:column="52"/></name><operator pos:line="30" pos:column="52">.<pos:position pos:line="30" pos:column="53"/></operator><name pos:line="30" pos:column="53">nr<pos:position pos:line="30" pos:column="55"/></name></name></expr>;<pos:position pos:line="30" pos:column="56"/></condition> <incr><expr><name pos:line="30" pos:column="57">i<pos:position pos:line="30" pos:column="58"/></name><operator pos:line="30" pos:column="58">++<pos:position pos:line="30" pos:column="60"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="61"/></control> <block pos:line="30" pos:column="62">{
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><call><name pos:line="31" pos:column="29">has_non_ascii<pos:position pos:line="31" pos:column="42"/></name><argument_list pos:line="31" pos:column="42">(<argument><expr><name><name pos:line="31" pos:column="43">pp<pos:position pos:line="31" pos:column="45"/></name><operator pos:line="31" pos:column="45">-&gt;<pos:position pos:line="31" pos:column="50"/></operator><name pos:line="31" pos:column="47">in_body_headers<pos:position pos:line="31" pos:column="62"/></name><operator pos:line="31" pos:column="62">.<pos:position pos:line="31" pos:column="63"/></operator><name pos:line="31" pos:column="63">items<pos:position pos:line="31" pos:column="68"/></name><index pos:line="31" pos:column="68">[<expr><name pos:line="31" pos:column="69">i<pos:position pos:line="31" pos:column="70"/></name></expr>]<pos:position pos:line="31" pos:column="71"/></index></name><operator pos:line="31" pos:column="71">.<pos:position pos:line="31" pos:column="72"/></operator><name pos:line="31" pos:column="72">string<pos:position pos:line="31" pos:column="78"/></name></expr></argument>)<pos:position pos:line="31" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="80"/></condition><then pos:line="31" pos:column="80"> <block pos:line="31" pos:column="81">{
				<expr_stmt><expr><name pos:line="32" pos:column="33">need_8bit_cte<pos:position pos:line="32" pos:column="46"/></name> <operator pos:line="32" pos:column="47">=<pos:position pos:line="32" pos:column="48"/></operator> <literal type="number" pos:line="32" pos:column="49">1<pos:position pos:line="32" pos:column="50"/></literal></expr>;<pos:position pos:line="32" pos:column="51"/></expr_stmt>
				<break pos:line="33" pos:column="33">break;<pos:position pos:line="33" pos:column="39"/></break>
			}<pos:position pos:line="34" pos:column="26"/></block></then></if>
		}<pos:position pos:line="35" pos:column="18"/></block></for>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">need_8bit_cte<pos:position pos:line="38" pos:column="26"/></name> <operator pos:line="38" pos:column="27">&gt;<pos:position pos:line="38" pos:column="31"/></operator> <literal type="number" pos:line="38" pos:column="29">0<pos:position pos:line="38" pos:column="30"/></literal></expr>)<pos:position pos:line="38" pos:column="31"/></condition><then pos:line="38" pos:column="31"> <block pos:line="38" pos:column="32">{
		<decl_stmt><decl><type><specifier pos:line="39" pos:column="17">const<pos:position pos:line="39" pos:column="22"/></specifier> <name pos:line="39" pos:column="23">char<pos:position pos:line="39" pos:column="27"/></name> <modifier pos:line="39" pos:column="28">*<pos:position pos:line="39" pos:column="29"/></modifier></type><name pos:line="39" pos:column="29">header_fmt<pos:position pos:line="39" pos:column="39"/></name> <init pos:line="39" pos:column="40">=
			<expr><literal type="string" pos:line="40" pos:column="25">"MIME-Version: 1.0\n"<pos:position pos:line="40" pos:column="46"/></literal>
			<literal type="string" pos:line="41" pos:column="25">"Content-Type: text/plain; charset=%s\n"<pos:position pos:line="41" pos:column="65"/></literal>
			<literal type="string" pos:line="42" pos:column="25">"Content-Transfer-Encoding: 8bit\n"<pos:position pos:line="42" pos:column="60"/></literal></expr></init></decl>;<pos:position pos:line="42" pos:column="61"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">strbuf_addf<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name pos:line="43" pos:column="29">sb<pos:position pos:line="43" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="33">header_fmt<pos:position pos:line="43" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="45">encoding<pos:position pos:line="43" pos:column="53"/></name></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="55"/></expr_stmt>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name><name pos:line="45" pos:column="13">pp<pos:position pos:line="45" pos:column="15"/></name><operator pos:line="45" pos:column="15">-&gt;<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="17">after_subject<pos:position pos:line="45" pos:column="30"/></name></name></expr>)<pos:position pos:line="45" pos:column="31"/></condition><then pos:line="45" pos:column="31"> <block pos:line="45" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">strbuf_addstr<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">(<argument><expr><name pos:line="46" pos:column="31">sb<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="35">pp<pos:position pos:line="46" pos:column="37"/></name><operator pos:line="46" pos:column="37">-&gt;<pos:position pos:line="46" pos:column="42"/></operator><name pos:line="46" pos:column="39">after_subject<pos:position pos:line="46" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></then></if>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name><name pos:line="48" pos:column="13">pp<pos:position pos:line="48" pos:column="15"/></name><operator pos:line="48" pos:column="15">-&gt;<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="17">fmt<pos:position pos:line="48" pos:column="20"/></name></name> <operator pos:line="48" pos:column="21">==<pos:position pos:line="48" pos:column="23"/></operator> <name pos:line="48" pos:column="24">CMIT_FMT_EMAIL<pos:position pos:line="48" pos:column="38"/></name></expr>)<pos:position pos:line="48" pos:column="39"/></condition><then pos:line="48" pos:column="39"> <block pos:line="48" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">strbuf_addch<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">sb<pos:position pos:line="49" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="49" pos:column="34">'\n'<pos:position pos:line="49" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>

	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name><name pos:line="52" pos:column="13">pp<pos:position pos:line="52" pos:column="15"/></name><operator pos:line="52" pos:column="15">-&gt;<pos:position pos:line="52" pos:column="20"/></operator><name pos:line="52" pos:column="17">in_body_headers<pos:position pos:line="52" pos:column="32"/></name><operator pos:line="52" pos:column="32">.<pos:position pos:line="52" pos:column="33"/></operator><name pos:line="52" pos:column="33">nr<pos:position pos:line="52" pos:column="35"/></name></name></expr>)<pos:position pos:line="52" pos:column="36"/></condition><then pos:line="52" pos:column="36"> <block pos:line="52" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="53" pos:column="17">int<pos:position pos:line="53" pos:column="20"/></name></type> <name pos:line="53" pos:column="21">i<pos:position pos:line="53" pos:column="22"/></name></decl>;<pos:position pos:line="53" pos:column="23"/></decl_stmt>
		<for pos:line="54" pos:column="17">for <control pos:line="54" pos:column="21">(<init><expr><name pos:line="54" pos:column="22">i<pos:position pos:line="54" pos:column="23"/></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <literal type="number" pos:line="54" pos:column="26">0<pos:position pos:line="54" pos:column="27"/></literal></expr>;<pos:position pos:line="54" pos:column="28"/></init> <condition><expr><name pos:line="54" pos:column="29">i<pos:position pos:line="54" pos:column="30"/></name> <operator pos:line="54" pos:column="31">&lt;<pos:position pos:line="54" pos:column="35"/></operator> <name><name pos:line="54" pos:column="33">pp<pos:position pos:line="54" pos:column="35"/></name><operator pos:line="54" pos:column="35">-&gt;<pos:position pos:line="54" pos:column="40"/></operator><name pos:line="54" pos:column="37">in_body_headers<pos:position pos:line="54" pos:column="52"/></name><operator pos:line="54" pos:column="52">.<pos:position pos:line="54" pos:column="53"/></operator><name pos:line="54" pos:column="53">nr<pos:position pos:line="54" pos:column="55"/></name></name></expr>;<pos:position pos:line="54" pos:column="56"/></condition> <incr><expr><name pos:line="54" pos:column="57">i<pos:position pos:line="54" pos:column="58"/></name><operator pos:line="54" pos:column="58">++<pos:position pos:line="54" pos:column="60"/></operator></expr></incr>)<pos:position pos:line="54" pos:column="61"/></control> <block pos:line="54" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">strbuf_addstr<pos:position pos:line="55" pos:column="38"/></name><argument_list pos:line="55" pos:column="38">(<argument><expr><name pos:line="55" pos:column="39">sb<pos:position pos:line="55" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="43">pp<pos:position pos:line="55" pos:column="45"/></name><operator pos:line="55" pos:column="45">-&gt;<pos:position pos:line="55" pos:column="50"/></operator><name pos:line="55" pos:column="47">in_body_headers<pos:position pos:line="55" pos:column="62"/></name><operator pos:line="55" pos:column="62">.<pos:position pos:line="55" pos:column="63"/></operator><name pos:line="55" pos:column="63">items<pos:position pos:line="55" pos:column="68"/></name><index pos:line="55" pos:column="68">[<expr><name pos:line="55" pos:column="69">i<pos:position pos:line="55" pos:column="70"/></name></expr>]<pos:position pos:line="55" pos:column="71"/></index></name><operator pos:line="55" pos:column="71">.<pos:position pos:line="55" pos:column="72"/></operator><name pos:line="55" pos:column="72">string<pos:position pos:line="55" pos:column="78"/></name></expr></argument>)<pos:position pos:line="55" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="80"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">free<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name><name pos:line="56" pos:column="30">pp<pos:position pos:line="56" pos:column="32"/></name><operator pos:line="56" pos:column="32">-&gt;<pos:position pos:line="56" pos:column="37"/></operator><name pos:line="56" pos:column="34">in_body_headers<pos:position pos:line="56" pos:column="49"/></name><operator pos:line="56" pos:column="49">.<pos:position pos:line="56" pos:column="50"/></operator><name pos:line="56" pos:column="50">items<pos:position pos:line="56" pos:column="55"/></name><index pos:line="56" pos:column="55">[<expr><name pos:line="56" pos:column="56">i<pos:position pos:line="56" pos:column="57"/></name></expr>]<pos:position pos:line="56" pos:column="58"/></index></name><operator pos:line="56" pos:column="58">.<pos:position pos:line="56" pos:column="59"/></operator><name pos:line="56" pos:column="59">string<pos:position pos:line="56" pos:column="65"/></name></expr></argument>)<pos:position pos:line="56" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="67"/></expr_stmt>
		}<pos:position pos:line="57" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">string_list_clear<pos:position pos:line="58" pos:column="34"/></name><argument_list pos:line="58" pos:column="34">(<argument><expr><operator pos:line="58" pos:column="35">&amp;<pos:position pos:line="58" pos:column="40"/></operator><name><name pos:line="58" pos:column="36">pp<pos:position pos:line="58" pos:column="38"/></name><operator pos:line="58" pos:column="38">-&gt;<pos:position pos:line="58" pos:column="43"/></operator><name pos:line="58" pos:column="40">in_body_headers<pos:position pos:line="58" pos:column="55"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="57">0<pos:position pos:line="58" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">strbuf_addch<pos:position pos:line="59" pos:column="29"/></name><argument_list pos:line="59" pos:column="29">(<argument><expr><name pos:line="59" pos:column="30">sb<pos:position pos:line="59" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="59" pos:column="34">'\n'<pos:position pos:line="59" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="62" pos:column="9">strbuf_release<pos:position pos:line="62" pos:column="23"/></name><argument_list pos:line="62" pos:column="23">(<argument><expr><operator pos:line="62" pos:column="24">&amp;<pos:position pos:line="62" pos:column="29"/></operator><name pos:line="62" pos:column="25">title<pos:position pos:line="62" pos:column="30"/></name></expr></argument>)<pos:position pos:line="62" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="32"/></expr_stmt>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
