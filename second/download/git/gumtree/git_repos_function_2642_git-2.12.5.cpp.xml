<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2642_git-2.12.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">xmkstemp_mode<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">char<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier><specifier pos:line="1" pos:column="25">template<pos:position pos:line="1" pos:column="33"/></specifier></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">mode<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">origtemplate<pos:position pos:line="4" pos:column="26"/></name><index pos:line="4" pos:column="26">[<expr><name pos:line="4" pos:column="27">PATH_MAX<pos:position pos:line="4" pos:column="35"/></name></expr>]<pos:position pos:line="4" pos:column="36"/></index></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
	<macro><name pos:line="5" pos:column="9">strlcpy<pos:position pos:line="5" pos:column="16"/></name><argument_list pos:line="5" pos:column="16">(<argument pos:line="5" pos:column="17">origtemplate<pos:position pos:line="5" pos:column="29"/></argument>, <argument pos:line="5" pos:column="31">template<pos:position pos:line="5" pos:column="39"/></argument>, <argument pos:line="5" pos:column="41">sizeof(origtemplate)<pos:position pos:line="5" pos:column="61"/></argument>)<pos:position pos:line="5" pos:column="62"/></argument_list></macro><empty_stmt pos:line="5" pos:column="62">;<pos:position pos:line="5" pos:column="63"/></empty_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">fd<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <macro><name pos:line="7" pos:column="14">git_mkstemp_mode<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument pos:line="7" pos:column="31">template<pos:position pos:line="7" pos:column="39"/></argument>, <argument pos:line="7" pos:column="41">mode<pos:position pos:line="7" pos:column="45"/></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></macro></expr>;<pos:position pos:line="7" pos:column="47"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">fd<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">&lt;<pos:position pos:line="8" pos:column="20"/></operator> <literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20"> <block pos:line="8" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">saved_errno<pos:position pos:line="9" pos:column="32"/></name> <init pos:line="9" pos:column="33">= <expr><name pos:line="9" pos:column="35">errno<pos:position pos:line="9" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="41"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="10" pos:column="17">const<pos:position pos:line="10" pos:column="22"/></specifier> <name pos:line="10" pos:column="23">char<pos:position pos:line="10" pos:column="27"/></name> <modifier pos:line="10" pos:column="28">*<pos:position pos:line="10" pos:column="29"/></modifier></type><name pos:line="10" pos:column="29">nonrelative_template<pos:position pos:line="10" pos:column="49"/></name></decl>;<pos:position pos:line="10" pos:column="50"/></decl_stmt>

		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator></expr></condition></if><template pos:line="12" pos:column="22">template<parameter><type><pos:position pos:line="12" pos:column="30"/></type>[0]<pos:position pos:line="12" pos:column="33"/></parameter>)
			<template pos:line="13" pos:column="25">template = <parameter><type><name pos:line="13" pos:column="36">origtemplate<pos:position pos:line="13" pos:column="48"/></name></type>;

		nonrelative_template = absolute_path(template<pos:position pos:line="15" pos:column="62"/></parameter>)<empty_stmt pos:line="15" pos:column="63">;<pos:position pos:line="15" pos:column="64"/></empty_stmt></template></template>
		<expr_stmt><expr><name pos:line="16" pos:column="17">errno<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="25">saved_errno<pos:position pos:line="16" pos:column="36"/></name></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">die_errno<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><literal type="string" pos:line="17" pos:column="27">"Unable to create temporary file '%s'"<pos:position pos:line="17" pos:column="65"/></literal></expr></argument>,
			<argument><expr><name pos:line="18" pos:column="25">nonrelative_template<pos:position pos:line="18" pos:column="45"/></name></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	<return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">fd<pos:position pos:line="20" pos:column="18"/></name></expr>;<pos:position pos:line="20" pos:column="19"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
