<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6861_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">update_cur_sifted_state<pos:position pos:line="3" pos:column="24"/></name> <parameter_list pos:line="3" pos:column="25">(<parameter><decl><type><specifier pos:line="3" pos:column="26">const<pos:position pos:line="3" pos:column="31"/></specifier> <name pos:line="3" pos:column="32">re_match_context_t<pos:position pos:line="3" pos:column="50"/></name> <modifier pos:line="3" pos:column="51">*<pos:position pos:line="3" pos:column="52"/></modifier></type><name pos:line="3" pos:column="52">mctx<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="4" pos:column="26">re_sift_context_t<pos:position pos:line="4" pos:column="43"/></name> <modifier pos:line="4" pos:column="44">*<pos:position pos:line="4" pos:column="45"/></modifier></type><name pos:line="4" pos:column="45">sctx<pos:position pos:line="4" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="51">int<pos:position pos:line="4" pos:column="54"/></name></type> <name pos:line="4" pos:column="55">str_idx<pos:position pos:line="4" pos:column="62"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="5" pos:column="26">re_node_set<pos:position pos:line="5" pos:column="37"/></name> <modifier pos:line="5" pos:column="38">*<pos:position pos:line="5" pos:column="39"/></modifier></type><name pos:line="5" pos:column="39">dest_nodes<pos:position pos:line="5" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="50"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">re_dfa_t<pos:position pos:line="7" pos:column="17"/></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier><specifier pos:line="7" pos:column="19">const<pos:position pos:line="7" pos:column="24"/></specifier></type> <name pos:line="7" pos:column="25">dfa<pos:position pos:line="7" pos:column="28"/></name> <init pos:line="7" pos:column="29">= <expr><name><name pos:line="7" pos:column="31">mctx<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">-&gt;<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="37">dfa<pos:position pos:line="7" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">reg_errcode_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">err<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><name pos:line="8" pos:column="23">REG_NOERROR<pos:position pos:line="8" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">re_node_set<pos:position pos:line="9" pos:column="20"/></name> <modifier pos:line="9" pos:column="21">*<pos:position pos:line="9" pos:column="22"/></modifier></type><name pos:line="9" pos:column="22">candidates<pos:position pos:line="9" pos:column="32"/></name></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">candidates<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">=<pos:position pos:line="10" pos:column="15"/></operator> <operator pos:line="10" pos:column="16">(<pos:position pos:line="10" pos:column="17"/></operator><ternary><condition><expr><operator pos:line="10" pos:column="17">(<pos:position pos:line="10" pos:column="18"/></operator><name><name pos:line="10" pos:column="18">mctx<pos:position pos:line="10" pos:column="22"/></name><operator pos:line="10" pos:column="22">-&gt;<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="24">state_log<pos:position pos:line="10" pos:column="33"/></name><index pos:line="10" pos:column="33">[<expr><name pos:line="10" pos:column="34">str_idx<pos:position pos:line="10" pos:column="41"/></name></expr>]<pos:position pos:line="10" pos:column="42"/></index></name> <operator pos:line="10" pos:column="43">==<pos:position pos:line="10" pos:column="45"/></operator> <name pos:line="10" pos:column="46">NULL<pos:position pos:line="10" pos:column="50"/></name><operator pos:line="10" pos:column="50">)<pos:position pos:line="10" pos:column="51"/></operator></expr> ?<pos:position pos:line="10" pos:column="53"/></condition><then pos:line="10" pos:column="53"> <expr><name pos:line="10" pos:column="54">NULL<pos:position pos:line="10" pos:column="58"/></name></expr>
		<pos:position pos:line="11" pos:column="3"/></then><else pos:line="11" pos:column="17">: <expr><operator pos:line="11" pos:column="19">&amp;<pos:position pos:line="11" pos:column="24"/></operator><name><name pos:line="11" pos:column="20">mctx<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">-&gt;<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="26">state_log<pos:position pos:line="11" pos:column="35"/></name><index pos:line="11" pos:column="35">[<expr><name pos:line="11" pos:column="36">str_idx<pos:position pos:line="11" pos:column="43"/></name></expr>]<pos:position pos:line="11" pos:column="44"/></index></name><operator pos:line="11" pos:column="44">-&gt;<pos:position pos:line="11" pos:column="49"/></operator><name pos:line="11" pos:column="46">nodes<pos:position pos:line="11" pos:column="51"/></name></expr></else></ternary><operator pos:line="11" pos:column="51">)<pos:position pos:line="11" pos:column="52"/></operator></expr>;<pos:position pos:line="11" pos:column="53"/></expr_stmt>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name><name pos:line="13" pos:column="7">dest_nodes<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">nelem<pos:position pos:line="13" pos:column="24"/></name></name> <operator pos:line="13" pos:column="25">==<pos:position pos:line="13" pos:column="27"/></operator> <literal type="number" pos:line="13" pos:column="28">0<pos:position pos:line="13" pos:column="29"/></literal></expr>)<pos:position pos:line="13" pos:column="30"/></condition><then pos:line="13" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="14" pos:column="5">sctx<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">-&gt;<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="11">sifted_states<pos:position pos:line="14" pos:column="24"/></name><index pos:line="14" pos:column="24">[<expr><name pos:line="14" pos:column="25">str_idx<pos:position pos:line="14" pos:column="32"/></name></expr>]<pos:position pos:line="14" pos:column="33"/></index></name> <operator pos:line="14" pos:column="34">=<pos:position pos:line="14" pos:column="35"/></operator> <name pos:line="14" pos:column="36">NULL<pos:position pos:line="14" pos:column="40"/></name></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt></block></then>
  <else pos:line="15" pos:column="3">else
    <block pos:line="16" pos:column="5">{
      <if pos:line="17" pos:column="7">if <condition pos:line="17" pos:column="10">(<expr><name pos:line="17" pos:column="11">candidates<pos:position pos:line="17" pos:column="21"/></name></expr>)<pos:position pos:line="17" pos:column="22"/></condition><then pos:line="17" pos:column="22">
	<block pos:line="18" pos:column="9">{
	  <comment type="block" pos:line="19" pos:column="11">/* At first, add the nodes which can epsilon transit to a node in
	     DEST_NODE.  */</comment>
	  <expr_stmt><expr><name pos:line="21" pos:column="11">err<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">add_epsilon_src_nodes<pos:position pos:line="21" pos:column="38"/></name> <argument_list pos:line="21" pos:column="39">(<argument><expr><name pos:line="21" pos:column="40">dfa<pos:position pos:line="21" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="45">dest_nodes<pos:position pos:line="21" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="57">candidates<pos:position pos:line="21" pos:column="67"/></name></expr></argument>)<pos:position pos:line="21" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="69"/></expr_stmt>
	  <if pos:line="22" pos:column="11">if <condition pos:line="22" pos:column="14">(<expr><call><name pos:line="22" pos:column="15">BE<pos:position pos:line="22" pos:column="17"/></name> <argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">err<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">!=<pos:position pos:line="22" pos:column="25"/></operator> <name pos:line="22" pos:column="26">REG_NOERROR<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="39">0<pos:position pos:line="22" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42">
	    <block type="pseudo"><return pos:line="23" pos:column="13">return <expr><name pos:line="23" pos:column="20">err<pos:position pos:line="23" pos:column="23"/></name></expr>;<pos:position pos:line="23" pos:column="24"/></return></block></then></if>

	  <comment type="block" pos:line="25" pos:column="11">/* Then, check the limitations in the current sift_context.  */</comment>
	  <if pos:line="26" pos:column="11">if <condition pos:line="26" pos:column="14">(<expr><name><name pos:line="26" pos:column="15">sctx<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">-&gt;<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="21">limits<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">.<pos:position pos:line="26" pos:column="28"/></operator><name pos:line="26" pos:column="28">nelem<pos:position pos:line="26" pos:column="33"/></name></name></expr>)<pos:position pos:line="26" pos:column="34"/></condition><then pos:line="26" pos:column="34">
	    <block pos:line="27" pos:column="13">{
	      <expr_stmt><expr><name pos:line="28" pos:column="15">err<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <call><name pos:line="28" pos:column="21">check_subexp_limits<pos:position pos:line="28" pos:column="40"/></name> <argument_list pos:line="28" pos:column="41">(<argument><expr><name pos:line="28" pos:column="42">dfa<pos:position pos:line="28" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="47">dest_nodes<pos:position pos:line="28" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="59">candidates<pos:position pos:line="28" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="71">&amp;<pos:position pos:line="28" pos:column="76"/></operator><name><name pos:line="28" pos:column="72">sctx<pos:position pos:line="28" pos:column="76"/></name><operator pos:line="28" pos:column="76">-&gt;<pos:position pos:line="28" pos:column="81"/></operator><name pos:line="28" pos:column="78">limits<pos:position pos:line="28" pos:column="84"/></name></name></expr></argument>,
					 <argument><expr><name><name pos:line="29" pos:column="42">mctx<pos:position pos:line="29" pos:column="46"/></name><operator pos:line="29" pos:column="46">-&gt;<pos:position pos:line="29" pos:column="51"/></operator><name pos:line="29" pos:column="48">bkref_ents<pos:position pos:line="29" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="60">str_idx<pos:position pos:line="29" pos:column="67"/></name></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="69"/></expr_stmt>
	      <if pos:line="30" pos:column="15">if <condition pos:line="30" pos:column="18">(<expr><call><name pos:line="30" pos:column="19">BE<pos:position pos:line="30" pos:column="21"/></name> <argument_list pos:line="30" pos:column="22">(<argument><expr><name pos:line="30" pos:column="23">err<pos:position pos:line="30" pos:column="26"/></name> <operator pos:line="30" pos:column="27">!=<pos:position pos:line="30" pos:column="29"/></operator> <name pos:line="30" pos:column="30">REG_NOERROR<pos:position pos:line="30" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="43">0<pos:position pos:line="30" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="46"/></condition><then pos:line="30" pos:column="46">
		<block type="pseudo"><return pos:line="31" pos:column="17">return <expr><name pos:line="31" pos:column="24">err<pos:position pos:line="31" pos:column="27"/></name></expr>;<pos:position pos:line="31" pos:column="28"/></return></block></then></if>
	    }<pos:position pos:line="32" pos:column="14"/></block></then></if>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="35" pos:column="7">sctx<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">-&gt;<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="13">sifted_states<pos:position pos:line="35" pos:column="26"/></name><index pos:line="35" pos:column="26">[<expr><name pos:line="35" pos:column="27">str_idx<pos:position pos:line="35" pos:column="34"/></name></expr>]<pos:position pos:line="35" pos:column="35"/></index></name> <operator pos:line="35" pos:column="36">=<pos:position pos:line="35" pos:column="37"/></operator> <call><name pos:line="35" pos:column="38">re_acquire_state<pos:position pos:line="35" pos:column="54"/></name> <argument_list pos:line="35" pos:column="55">(<argument><expr><operator pos:line="35" pos:column="56">&amp;<pos:position pos:line="35" pos:column="61"/></operator><name pos:line="35" pos:column="57">err<pos:position pos:line="35" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="62">dfa<pos:position pos:line="35" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="67">dest_nodes<pos:position pos:line="35" pos:column="77"/></name></expr></argument>)<pos:position pos:line="35" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="79"/></expr_stmt>
      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><call><name pos:line="36" pos:column="11">BE<pos:position pos:line="36" pos:column="13"/></name> <argument_list pos:line="36" pos:column="14">(<argument><expr><name pos:line="36" pos:column="15">err<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">!=<pos:position pos:line="36" pos:column="21"/></operator> <name pos:line="36" pos:column="22">REG_NOERROR<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="35">0<pos:position pos:line="36" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="38"/></condition><then pos:line="36" pos:column="38">
	<block type="pseudo"><return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">err<pos:position pos:line="37" pos:column="19"/></name></expr>;<pos:position pos:line="37" pos:column="20"/></return></block></then></if>
    }<pos:position pos:line="38" pos:column="6"/></block></else></if>

  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><name pos:line="40" pos:column="7">candidates<pos:position pos:line="40" pos:column="17"/></name> <operator pos:line="40" pos:column="18">&amp;&amp;<pos:position pos:line="40" pos:column="28"/></operator> <name><name pos:line="40" pos:column="21">mctx<pos:position pos:line="40" pos:column="25"/></name><operator pos:line="40" pos:column="25">-&gt;<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="27">state_log<pos:position pos:line="40" pos:column="36"/></name><index pos:line="40" pos:column="36">[<expr><name pos:line="40" pos:column="37">str_idx<pos:position pos:line="40" pos:column="44"/></name></expr>]<pos:position pos:line="40" pos:column="45"/></index></name><operator pos:line="40" pos:column="45">-&gt;<pos:position pos:line="40" pos:column="50"/></operator><name pos:line="40" pos:column="47">has_backref<pos:position pos:line="40" pos:column="58"/></name></expr>)<pos:position pos:line="40" pos:column="59"/></condition><then pos:line="40" pos:column="59">
    <block pos:line="41" pos:column="5">{
      <expr_stmt><expr><name pos:line="42" pos:column="7">err<pos:position pos:line="42" pos:column="10"/></name> <operator pos:line="42" pos:column="11">=<pos:position pos:line="42" pos:column="12"/></operator> <call><name pos:line="42" pos:column="13">sift_states_bkref<pos:position pos:line="42" pos:column="30"/></name> <argument_list pos:line="42" pos:column="31">(<argument><expr><name pos:line="42" pos:column="32">mctx<pos:position pos:line="42" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="38">sctx<pos:position pos:line="42" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="44">str_idx<pos:position pos:line="42" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="53">candidates<pos:position pos:line="42" pos:column="63"/></name></expr></argument>)<pos:position pos:line="42" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="65"/></expr_stmt>
      <if pos:line="43" pos:column="7">if <condition pos:line="43" pos:column="10">(<expr><call><name pos:line="43" pos:column="11">BE<pos:position pos:line="43" pos:column="13"/></name> <argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">err<pos:position pos:line="43" pos:column="18"/></name> <operator pos:line="43" pos:column="19">!=<pos:position pos:line="43" pos:column="21"/></operator> <name pos:line="43" pos:column="22">REG_NOERROR<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="35">0<pos:position pos:line="43" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="38"/></condition><then pos:line="43" pos:column="38">
	<block type="pseudo"><return pos:line="44" pos:column="9">return <expr><name pos:line="44" pos:column="16">err<pos:position pos:line="44" pos:column="19"/></name></expr>;<pos:position pos:line="44" pos:column="20"/></return></block></then></if>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
  <return pos:line="46" pos:column="3">return <expr><name pos:line="46" pos:column="10">REG_NOERROR<pos:position pos:line="46" pos:column="21"/></name></expr>;<pos:position pos:line="46" pos:column="22"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
