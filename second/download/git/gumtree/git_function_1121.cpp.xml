<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1121.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">refs_verify_refname_available<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name><name pos:line="1" pos:column="35">struct<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">ref_store<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">refs<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
				  <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">refname<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
				  <parameter><decl><type><specifier pos:line="3" pos:column="35">const<pos:position pos:line="3" pos:column="40"/></specifier> <name><name pos:line="3" pos:column="41">struct<pos:position pos:line="3" pos:column="47"/></name> <name pos:line="3" pos:column="48">string_list<pos:position pos:line="3" pos:column="59"/></name></name> <modifier pos:line="3" pos:column="60">*<pos:position pos:line="3" pos:column="61"/></modifier></type><name pos:line="3" pos:column="61">extras<pos:position pos:line="3" pos:column="67"/></name></decl></parameter>,
				  <parameter><decl><type><specifier pos:line="4" pos:column="35">const<pos:position pos:line="4" pos:column="40"/></specifier> <name><name pos:line="4" pos:column="41">struct<pos:position pos:line="4" pos:column="47"/></name> <name pos:line="4" pos:column="48">string_list<pos:position pos:line="4" pos:column="59"/></name></name> <modifier pos:line="4" pos:column="60">*<pos:position pos:line="4" pos:column="61"/></modifier></type><name pos:line="4" pos:column="61">skip<pos:position pos:line="4" pos:column="65"/></name></decl></parameter>,
				  <parameter><decl><type><name><name pos:line="5" pos:column="35">struct<pos:position pos:line="5" pos:column="41"/></name> <name pos:line="5" pos:column="42">strbuf<pos:position pos:line="5" pos:column="48"/></name></name> <modifier pos:line="5" pos:column="49">*<pos:position pos:line="5" pos:column="50"/></modifier></type><name pos:line="5" pos:column="50">err<pos:position pos:line="5" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="54"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">slash<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">extra_refname<pos:position pos:line="8" pos:column="34"/></name></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">strbuf<pos:position pos:line="9" pos:column="22"/></name></name></type> <name pos:line="9" pos:column="23">dirname<pos:position pos:line="9" pos:column="30"/></name> <init pos:line="9" pos:column="31">= <expr><name pos:line="9" pos:column="33">STRBUF_INIT<pos:position pos:line="9" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">strbuf<pos:position pos:line="10" pos:column="22"/></name></name></type> <name pos:line="10" pos:column="23">referent<pos:position pos:line="10" pos:column="31"/></name> <init pos:line="10" pos:column="32">= <expr><name pos:line="10" pos:column="34">STRBUF_INIT<pos:position pos:line="10" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">object_id<pos:position pos:line="11" pos:column="25"/></name></name></type> <name pos:line="11" pos:column="26">oid<pos:position pos:line="11" pos:column="29"/></name></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">unsigned<pos:position pos:line="12" pos:column="17"/></name> <name pos:line="12" pos:column="18">int<pos:position pos:line="12" pos:column="21"/></name></type> <name pos:line="12" pos:column="22">type<pos:position pos:line="12" pos:column="26"/></name></decl>;<pos:position pos:line="12" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="13" pos:column="9">struct<pos:position pos:line="13" pos:column="15"/></name> <name pos:line="13" pos:column="16">ref_iterator<pos:position pos:line="13" pos:column="28"/></name></name> <modifier pos:line="13" pos:column="29">*<pos:position pos:line="13" pos:column="30"/></modifier></type><name pos:line="13" pos:column="30">iter<pos:position pos:line="13" pos:column="34"/></name></decl>;<pos:position pos:line="13" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">ok<pos:position pos:line="14" pos:column="15"/></name></decl>;<pos:position pos:line="14" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">ret<pos:position pos:line="15" pos:column="16"/></name> <init pos:line="15" pos:column="17">= <expr><operator pos:line="15" pos:column="19">-<pos:position pos:line="15" pos:column="20"/></operator><literal type="number" pos:line="15" pos:column="20">1<pos:position pos:line="15" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="22"/></decl_stmt>

	<comment type="block" pos:line="17" pos:column="9">/*
	 * For the sake of comments in this function, suppose that
	 * refname is "refs/foo/bar".
	 */</comment>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">assert<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">err<pos:position pos:line="22" pos:column="19"/></name></expr></argument>)<pos:position pos:line="22" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="21"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">strbuf_grow<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><operator pos:line="24" pos:column="21">&amp;<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="22">dirname<pos:position pos:line="24" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="31">strlen<pos:position pos:line="24" pos:column="37"/></name><argument_list pos:line="24" pos:column="37">(<argument><expr><name pos:line="24" pos:column="38">refname<pos:position pos:line="24" pos:column="45"/></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call> <operator pos:line="24" pos:column="47">+<pos:position pos:line="24" pos:column="48"/></operator> <literal type="number" pos:line="24" pos:column="49">1<pos:position pos:line="24" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt>
	<for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">slash<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <call><name pos:line="25" pos:column="22">strchr<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name pos:line="25" pos:column="29">refname<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="25" pos:column="38">'/'<pos:position pos:line="25" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="43"/></init> <condition><expr><name pos:line="25" pos:column="44">slash<pos:position pos:line="25" pos:column="49"/></name></expr>;<pos:position pos:line="25" pos:column="50"/></condition> <incr><expr><name pos:line="25" pos:column="51">slash<pos:position pos:line="25" pos:column="56"/></name> <operator pos:line="25" pos:column="57">=<pos:position pos:line="25" pos:column="58"/></operator> <call><name pos:line="25" pos:column="59">strchr<pos:position pos:line="25" pos:column="65"/></name><argument_list pos:line="25" pos:column="65">(<argument><expr><name pos:line="25" pos:column="66">slash<pos:position pos:line="25" pos:column="71"/></name> <operator pos:line="25" pos:column="72">+<pos:position pos:line="25" pos:column="73"/></operator> <literal type="number" pos:line="25" pos:column="74">1<pos:position pos:line="25" pos:column="75"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="25" pos:column="77">'/'<pos:position pos:line="25" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="81"/></argument_list></call></expr></incr>)<pos:position pos:line="25" pos:column="82"/></control> <block pos:line="25" pos:column="83">{
		<comment type="block" pos:line="26" pos:column="17">/* Expand dirname to the new prefix, not including the trailing slash: */</comment>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">strbuf_add<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><operator pos:line="27" pos:column="28">&amp;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="29">dirname<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="38">refname<pos:position pos:line="27" pos:column="45"/></name> <operator pos:line="27" pos:column="46">+<pos:position pos:line="27" pos:column="47"/></operator> <name><name pos:line="27" pos:column="48">dirname<pos:position pos:line="27" pos:column="55"/></name><operator pos:line="27" pos:column="55">.<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="56">len<pos:position pos:line="27" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="61">slash<pos:position pos:line="27" pos:column="66"/></name> <operator pos:line="27" pos:column="67">-<pos:position pos:line="27" pos:column="68"/></operator> <name pos:line="27" pos:column="69">refname<pos:position pos:line="27" pos:column="76"/></name> <operator pos:line="27" pos:column="77">-<pos:position pos:line="27" pos:column="78"/></operator> <name><name pos:line="27" pos:column="79">dirname<pos:position pos:line="27" pos:column="86"/></name><operator pos:line="27" pos:column="86">.<pos:position pos:line="27" pos:column="87"/></operator><name pos:line="27" pos:column="87">len<pos:position pos:line="27" pos:column="90"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="92"/></expr_stmt>

		<comment type="block" pos:line="29" pos:column="17">/*
		 * We are still at a leading dir of the refname (e.g.,
		 * "refs/foo"; if there is a reference with that name,
		 * it is a conflict, *unless* it is in skip.
		 */</comment>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">skip<pos:position pos:line="34" pos:column="25"/></name> <operator pos:line="34" pos:column="26">&amp;&amp;<pos:position pos:line="34" pos:column="36"/></operator> <call><name pos:line="34" pos:column="29">string_list_has_string<pos:position pos:line="34" pos:column="51"/></name><argument_list pos:line="34" pos:column="51">(<argument><expr><name pos:line="34" pos:column="52">skip<pos:position pos:line="34" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="58">dirname<pos:position pos:line="34" pos:column="65"/></name><operator pos:line="34" pos:column="65">.<pos:position pos:line="34" pos:column="66"/></operator><name pos:line="34" pos:column="66">buf<pos:position pos:line="34" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="71"/></condition><then pos:line="34" pos:column="71">
			<block type="pseudo"><continue pos:line="35" pos:column="25">continue;<pos:position pos:line="35" pos:column="34"/></continue></block></then></if>

		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><operator pos:line="37" pos:column="21">!<pos:position pos:line="37" pos:column="22"/></operator><call><name pos:line="37" pos:column="22">refs_read_raw_ref<pos:position pos:line="37" pos:column="39"/></name><argument_list pos:line="37" pos:column="39">(<argument><expr><name pos:line="37" pos:column="40">refs<pos:position pos:line="37" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="46">dirname<pos:position pos:line="37" pos:column="53"/></name><operator pos:line="37" pos:column="53">.<pos:position pos:line="37" pos:column="54"/></operator><name pos:line="37" pos:column="54">buf<pos:position pos:line="37" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="59">oid<pos:position pos:line="37" pos:column="62"/></name><operator pos:line="37" pos:column="62">.<pos:position pos:line="37" pos:column="63"/></operator><name pos:line="37" pos:column="63">hash<pos:position pos:line="37" pos:column="67"/></name></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="69">&amp;<pos:position pos:line="37" pos:column="74"/></operator><name pos:line="37" pos:column="70">referent<pos:position pos:line="37" pos:column="78"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="80">&amp;<pos:position pos:line="37" pos:column="85"/></operator><name pos:line="37" pos:column="81">type<pos:position pos:line="37" pos:column="85"/></name></expr></argument>)<pos:position pos:line="37" pos:column="86"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="87"/></condition><then pos:line="37" pos:column="87"> <block pos:line="37" pos:column="88">{
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">strbuf_addf<pos:position pos:line="38" pos:column="36"/></name><argument_list pos:line="38" pos:column="36">(<argument><expr><name pos:line="38" pos:column="37">err<pos:position pos:line="38" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="42">"'%s' exists; cannot create '%s'"<pos:position pos:line="38" pos:column="75"/></literal></expr></argument>,
				    <argument><expr><name><name pos:line="39" pos:column="37">dirname<pos:position pos:line="39" pos:column="44"/></name><operator pos:line="39" pos:column="44">.<pos:position pos:line="39" pos:column="45"/></operator><name pos:line="39" pos:column="45">buf<pos:position pos:line="39" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="50">refname<pos:position pos:line="39" pos:column="57"/></name></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="59"/></expr_stmt>
			<goto pos:line="40" pos:column="25">goto <name pos:line="40" pos:column="30">cleanup<pos:position pos:line="40" pos:column="37"/></name>;<pos:position pos:line="40" pos:column="38"/></goto>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>

		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">extras<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">&amp;&amp;<pos:position pos:line="43" pos:column="38"/></operator> <call><name pos:line="43" pos:column="31">string_list_has_string<pos:position pos:line="43" pos:column="53"/></name><argument_list pos:line="43" pos:column="53">(<argument><expr><name pos:line="43" pos:column="54">extras<pos:position pos:line="43" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="62">dirname<pos:position pos:line="43" pos:column="69"/></name><operator pos:line="43" pos:column="69">.<pos:position pos:line="43" pos:column="70"/></operator><name pos:line="43" pos:column="70">buf<pos:position pos:line="43" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="75"/></condition><then pos:line="43" pos:column="75"> <block pos:line="43" pos:column="76">{
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">strbuf_addf<pos:position pos:line="44" pos:column="36"/></name><argument_list pos:line="44" pos:column="36">(<argument><expr><name pos:line="44" pos:column="37">err<pos:position pos:line="44" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="42">"cannot process '%s' and '%s' at the same time"<pos:position pos:line="44" pos:column="89"/></literal></expr></argument>,
				    <argument><expr><name pos:line="45" pos:column="37">refname<pos:position pos:line="45" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="46">dirname<pos:position pos:line="45" pos:column="53"/></name><operator pos:line="45" pos:column="53">.<pos:position pos:line="45" pos:column="54"/></operator><name pos:line="45" pos:column="54">buf<pos:position pos:line="45" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="59"/></expr_stmt>
			<goto pos:line="46" pos:column="25">goto <name pos:line="46" pos:column="30">cleanup<pos:position pos:line="46" pos:column="37"/></name>;<pos:position pos:line="46" pos:column="38"/></goto>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>
	}<pos:position pos:line="48" pos:column="10"/></block></for>

	<comment type="block" pos:line="50" pos:column="9">/*
	 * We are at the leaf of our refname (e.g., "refs/foo/bar").
	 * There is no point in searching for a reference with that
	 * name, because a refname isn't considered to conflict with
	 * itself. But we still need to check for references whose
	 * names are in the "refs/foo/bar/" namespace, because they
	 * *do* conflict.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">strbuf_addstr<pos:position pos:line="58" pos:column="22"/></name><argument_list pos:line="58" pos:column="22">(<argument><expr><operator pos:line="58" pos:column="23">&amp;<pos:position pos:line="58" pos:column="28"/></operator><name pos:line="58" pos:column="24">dirname<pos:position pos:line="58" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="33">refname<pos:position pos:line="58" pos:column="40"/></name> <operator pos:line="58" pos:column="41">+<pos:position pos:line="58" pos:column="42"/></operator> <name><name pos:line="58" pos:column="43">dirname<pos:position pos:line="58" pos:column="50"/></name><operator pos:line="58" pos:column="50">.<pos:position pos:line="58" pos:column="51"/></operator><name pos:line="58" pos:column="51">len<pos:position pos:line="58" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="59" pos:column="9">strbuf_addch<pos:position pos:line="59" pos:column="21"/></name><argument_list pos:line="59" pos:column="21">(<argument><expr><operator pos:line="59" pos:column="22">&amp;<pos:position pos:line="59" pos:column="27"/></operator><name pos:line="59" pos:column="23">dirname<pos:position pos:line="59" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="59" pos:column="32">'/'<pos:position pos:line="59" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><name pos:line="61" pos:column="9">iter<pos:position pos:line="61" pos:column="13"/></name> <operator pos:line="61" pos:column="14">=<pos:position pos:line="61" pos:column="15"/></operator> <call><name pos:line="61" pos:column="16">refs_ref_iterator_begin<pos:position pos:line="61" pos:column="39"/></name><argument_list pos:line="61" pos:column="39">(<argument><expr><name pos:line="61" pos:column="40">refs<pos:position pos:line="61" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="46">dirname<pos:position pos:line="61" pos:column="53"/></name><operator pos:line="61" pos:column="53">.<pos:position pos:line="61" pos:column="54"/></operator><name pos:line="61" pos:column="54">buf<pos:position pos:line="61" pos:column="57"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="59">0<pos:position pos:line="61" pos:column="60"/></literal></expr></argument>,
				       <argument><expr><name pos:line="62" pos:column="40">DO_FOR_EACH_INCLUDE_BROKEN<pos:position pos:line="62" pos:column="66"/></name></expr></argument>)<pos:position pos:line="62" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="68"/></expr_stmt>
	<while pos:line="63" pos:column="9">while <condition pos:line="63" pos:column="15">(<expr><operator pos:line="63" pos:column="16">(<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="17">ok<pos:position pos:line="63" pos:column="19"/></name> <operator pos:line="63" pos:column="20">=<pos:position pos:line="63" pos:column="21"/></operator> <call><name pos:line="63" pos:column="22">ref_iterator_advance<pos:position pos:line="63" pos:column="42"/></name><argument_list pos:line="63" pos:column="42">(<argument><expr><name pos:line="63" pos:column="43">iter<pos:position pos:line="63" pos:column="47"/></name></expr></argument>)<pos:position pos:line="63" pos:column="48"/></argument_list></call><operator pos:line="63" pos:column="48">)<pos:position pos:line="63" pos:column="49"/></operator> <operator pos:line="63" pos:column="50">==<pos:position pos:line="63" pos:column="52"/></operator> <name pos:line="63" pos:column="53">ITER_OK<pos:position pos:line="63" pos:column="60"/></name></expr>)<pos:position pos:line="63" pos:column="61"/></condition> <block pos:line="63" pos:column="62">{
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">skip<pos:position pos:line="64" pos:column="25"/></name> <operator pos:line="64" pos:column="26">&amp;&amp;<pos:position pos:line="64" pos:column="36"/></operator>
		    <call><name pos:line="65" pos:column="21">string_list_has_string<pos:position pos:line="65" pos:column="43"/></name><argument_list pos:line="65" pos:column="43">(<argument><expr><name pos:line="65" pos:column="44">skip<pos:position pos:line="65" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="50">iter<pos:position pos:line="65" pos:column="54"/></name><operator pos:line="65" pos:column="54">-&gt;<pos:position pos:line="65" pos:column="59"/></operator><name pos:line="65" pos:column="56">refname<pos:position pos:line="65" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="65"/></condition><then pos:line="65" pos:column="65">
			<block type="pseudo"><continue pos:line="66" pos:column="25">continue;<pos:position pos:line="66" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="68" pos:column="17">strbuf_addf<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><name pos:line="68" pos:column="29">err<pos:position pos:line="68" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="34">"'%s' exists; cannot create '%s'"<pos:position pos:line="68" pos:column="67"/></literal></expr></argument>,
			    <argument><expr><name><name pos:line="69" pos:column="29">iter<pos:position pos:line="69" pos:column="33"/></name><operator pos:line="69" pos:column="33">-&gt;<pos:position pos:line="69" pos:column="38"/></operator><name pos:line="69" pos:column="35">refname<pos:position pos:line="69" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="44">refname<pos:position pos:line="69" pos:column="51"/></name></expr></argument>)<pos:position pos:line="69" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">ref_iterator_abort<pos:position pos:line="70" pos:column="35"/></name><argument_list pos:line="70" pos:column="35">(<argument><expr><name pos:line="70" pos:column="36">iter<pos:position pos:line="70" pos:column="40"/></name></expr></argument>)<pos:position pos:line="70" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="42"/></expr_stmt>
		<goto pos:line="71" pos:column="17">goto <name pos:line="71" pos:column="22">cleanup<pos:position pos:line="71" pos:column="29"/></name>;<pos:position pos:line="71" pos:column="30"/></goto>
	}<pos:position pos:line="72" pos:column="10"/></block></while>

	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">ok<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">!=<pos:position pos:line="74" pos:column="18"/></operator> <name pos:line="74" pos:column="19">ITER_DONE<pos:position pos:line="74" pos:column="28"/></name></expr>)<pos:position pos:line="74" pos:column="29"/></condition><then pos:line="74" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="17">die<pos:position pos:line="75" pos:column="20"/></name><argument_list pos:line="75" pos:column="20">(<argument><expr><literal type="string" pos:line="75" pos:column="21">"BUG: error while iterating over references"<pos:position pos:line="75" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="67"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="77" pos:column="9">extra_refname<pos:position pos:line="77" pos:column="22"/></name> <operator pos:line="77" pos:column="23">=<pos:position pos:line="77" pos:column="24"/></operator> <call><name pos:line="77" pos:column="25">find_descendant_ref<pos:position pos:line="77" pos:column="44"/></name><argument_list pos:line="77" pos:column="44">(<argument><expr><name><name pos:line="77" pos:column="45">dirname<pos:position pos:line="77" pos:column="52"/></name><operator pos:line="77" pos:column="52">.<pos:position pos:line="77" pos:column="53"/></operator><name pos:line="77" pos:column="53">buf<pos:position pos:line="77" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="58">extras<pos:position pos:line="77" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="66">skip<pos:position pos:line="77" pos:column="70"/></name></expr></argument>)<pos:position pos:line="77" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="72"/></expr_stmt>
	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name pos:line="78" pos:column="13">extra_refname<pos:position pos:line="78" pos:column="26"/></name></expr>)<pos:position pos:line="78" pos:column="27"/></condition><then pos:line="78" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="17">strbuf_addf<pos:position pos:line="79" pos:column="28"/></name><argument_list pos:line="79" pos:column="28">(<argument><expr><name pos:line="79" pos:column="29">err<pos:position pos:line="79" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="34">"cannot process '%s' and '%s' at the same time"<pos:position pos:line="79" pos:column="81"/></literal></expr></argument>,
			    <argument><expr><name pos:line="80" pos:column="29">refname<pos:position pos:line="80" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="38">extra_refname<pos:position pos:line="80" pos:column="51"/></name></expr></argument>)<pos:position pos:line="80" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="53"/></expr_stmt></block></then>
	<else pos:line="81" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="82" pos:column="17">ret<pos:position pos:line="82" pos:column="20"/></name> <operator pos:line="82" pos:column="21">=<pos:position pos:line="82" pos:column="22"/></operator> <literal type="number" pos:line="82" pos:column="23">0<pos:position pos:line="82" pos:column="24"/></literal></expr>;<pos:position pos:line="82" pos:column="25"/></expr_stmt></block></else></if>

<label><name pos:line="84" pos:column="1">cleanup<pos:position pos:line="84" pos:column="8"/></name>:<pos:position pos:line="84" pos:column="9"/></label>
	<expr_stmt><expr><call><name pos:line="85" pos:column="9">strbuf_release<pos:position pos:line="85" pos:column="23"/></name><argument_list pos:line="85" pos:column="23">(<argument><expr><operator pos:line="85" pos:column="24">&amp;<pos:position pos:line="85" pos:column="29"/></operator><name pos:line="85" pos:column="25">referent<pos:position pos:line="85" pos:column="33"/></name></expr></argument>)<pos:position pos:line="85" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="86" pos:column="9">strbuf_release<pos:position pos:line="86" pos:column="23"/></name><argument_list pos:line="86" pos:column="23">(<argument><expr><operator pos:line="86" pos:column="24">&amp;<pos:position pos:line="86" pos:column="29"/></operator><name pos:line="86" pos:column="25">dirname<pos:position pos:line="86" pos:column="32"/></name></expr></argument>)<pos:position pos:line="86" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="34"/></expr_stmt>
	<return pos:line="87" pos:column="9">return <expr><name pos:line="87" pos:column="16">ret<pos:position pos:line="87" pos:column="19"/></name></expr>;<pos:position pos:line="87" pos:column="20"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
