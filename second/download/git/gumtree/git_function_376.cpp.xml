<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_376.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">print_object_or_die<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">batch_options<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">opt<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="60">struct<pos:position pos:line="1" pos:column="66"/></name> <name pos:line="1" pos:column="67">expand_data<pos:position pos:line="1" pos:column="78"/></name></name> <modifier pos:line="1" pos:column="79">*<pos:position pos:line="1" pos:column="80"/></modifier></type><name pos:line="1" pos:column="80">data<pos:position pos:line="1" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="85"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name><name pos:line="3" pos:column="15">struct<pos:position pos:line="3" pos:column="21"/></name> <name pos:line="3" pos:column="22">object_id<pos:position pos:line="3" pos:column="31"/></name></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">oid<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><operator pos:line="3" pos:column="39">&amp;<pos:position pos:line="3" pos:column="44"/></operator><name><name pos:line="3" pos:column="40">data<pos:position pos:line="3" pos:column="44"/></name><operator pos:line="3" pos:column="44">-&gt;<pos:position pos:line="3" pos:column="49"/></operator><name pos:line="3" pos:column="46">oid<pos:position pos:line="3" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="50"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">assert<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name><name pos:line="5" pos:column="16">data<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">-&gt;<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="22">info<pos:position pos:line="5" pos:column="26"/></name><operator pos:line="5" pos:column="26">.<pos:position pos:line="5" pos:column="27"/></operator><name pos:line="5" pos:column="27">typep<pos:position pos:line="5" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="34"/></expr_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">data<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">-&gt;<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="19">type<pos:position pos:line="7" pos:column="23"/></name></name> <operator pos:line="7" pos:column="24">==<pos:position pos:line="7" pos:column="26"/></operator> <name pos:line="7" pos:column="27">OBJ_BLOB<pos:position pos:line="7" pos:column="35"/></name></expr>)<pos:position pos:line="7" pos:column="36"/></condition><then pos:line="7" pos:column="36"> <block pos:line="7" pos:column="37">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name><name pos:line="8" pos:column="21">opt<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">buffer_output<pos:position pos:line="8" pos:column="39"/></name></name></expr>)<pos:position pos:line="8" pos:column="40"/></condition><then pos:line="8" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="25">fflush<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><name pos:line="9" pos:column="32">stdout<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt></block></then></if>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name><name pos:line="10" pos:column="21">opt<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">-&gt;<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="26">cmdmode<pos:position pos:line="10" pos:column="33"/></name></name></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34"> <block pos:line="10" pos:column="35">{
			<decl_stmt><decl><type><name pos:line="11" pos:column="25">char<pos:position pos:line="11" pos:column="29"/></name> <modifier pos:line="11" pos:column="30">*<pos:position pos:line="11" pos:column="31"/></modifier></type><name pos:line="11" pos:column="31">contents<pos:position pos:line="11" pos:column="39"/></name></decl>;<pos:position pos:line="11" pos:column="40"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="12" pos:column="25">unsigned<pos:position pos:line="12" pos:column="33"/></name> <name pos:line="12" pos:column="34">long<pos:position pos:line="12" pos:column="38"/></name></type> <name pos:line="12" pos:column="39">size<pos:position pos:line="12" pos:column="43"/></name></decl>;<pos:position pos:line="12" pos:column="44"/></decl_stmt>

			<if pos:line="14" pos:column="25">if <condition pos:line="14" pos:column="28">(<expr><operator pos:line="14" pos:column="29">!<pos:position pos:line="14" pos:column="30"/></operator><name><name pos:line="14" pos:column="30">data<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">-&gt;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="36">rest<pos:position pos:line="14" pos:column="40"/></name></name></expr>)<pos:position pos:line="14" pos:column="41"/></condition><then pos:line="14" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="33">die<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><literal type="string" pos:line="15" pos:column="37">"missing path for '%s'"<pos:position pos:line="15" pos:column="60"/></literal></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="62">oid_to_hex<pos:position pos:line="15" pos:column="72"/></name><argument_list pos:line="15" pos:column="72">(<argument><expr><name pos:line="15" pos:column="73">oid<pos:position pos:line="15" pos:column="76"/></name></expr></argument>)<pos:position pos:line="15" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="79"/></expr_stmt></block></then></if>

			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><name><name pos:line="17" pos:column="29">opt<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">-&gt;<pos:position pos:line="17" pos:column="37"/></operator><name pos:line="17" pos:column="34">cmdmode<pos:position pos:line="17" pos:column="41"/></name></name> <operator pos:line="17" pos:column="42">==<pos:position pos:line="17" pos:column="44"/></operator> <literal type="char" pos:line="17" pos:column="45">'w'<pos:position pos:line="17" pos:column="48"/></literal></expr>)<pos:position pos:line="17" pos:column="49"/></condition><then pos:line="17" pos:column="49"> <block pos:line="17" pos:column="50">{
				<if pos:line="18" pos:column="33">if <condition pos:line="18" pos:column="36">(<expr><call><name pos:line="18" pos:column="37">filter_object<pos:position pos:line="18" pos:column="50"/></name><argument_list pos:line="18" pos:column="50">(<argument><expr><name><name pos:line="18" pos:column="51">data<pos:position pos:line="18" pos:column="55"/></name><operator pos:line="18" pos:column="55">-&gt;<pos:position pos:line="18" pos:column="60"/></operator><name pos:line="18" pos:column="57">rest<pos:position pos:line="18" pos:column="61"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="63">0100644<pos:position pos:line="18" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="72">oid<pos:position pos:line="18" pos:column="75"/></name></expr></argument>,
						  <argument><expr><operator pos:line="19" pos:column="51">&amp;<pos:position pos:line="19" pos:column="56"/></operator><name pos:line="19" pos:column="52">contents<pos:position pos:line="19" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="62">&amp;<pos:position pos:line="19" pos:column="67"/></operator><name pos:line="19" pos:column="63">size<pos:position pos:line="19" pos:column="67"/></name></expr></argument>)<pos:position pos:line="19" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="69"/></condition><then pos:line="19" pos:column="69">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="41">die<pos:position pos:line="20" pos:column="44"/></name><argument_list pos:line="20" pos:column="44">(<argument><expr><literal type="string" pos:line="20" pos:column="45">"could not convert '%s' %s"<pos:position pos:line="20" pos:column="72"/></literal></expr></argument>,
					    <argument><expr><call><name pos:line="21" pos:column="45">oid_to_hex<pos:position pos:line="21" pos:column="55"/></name><argument_list pos:line="21" pos:column="55">(<argument><expr><name pos:line="21" pos:column="56">oid<pos:position pos:line="21" pos:column="59"/></name></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="62">data<pos:position pos:line="21" pos:column="66"/></name><operator pos:line="21" pos:column="66">-&gt;<pos:position pos:line="21" pos:column="71"/></operator><name pos:line="21" pos:column="68">rest<pos:position pos:line="21" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="74"/></expr_stmt></block></then></if>
			}<pos:position pos:line="22" pos:column="26"/></block></then> <elseif pos:line="22" pos:column="27">else <if pos:line="22" pos:column="32">if <condition pos:line="22" pos:column="35">(<expr><name><name pos:line="22" pos:column="36">opt<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">-&gt;<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="41">cmdmode<pos:position pos:line="22" pos:column="48"/></name></name> <operator pos:line="22" pos:column="49">==<pos:position pos:line="22" pos:column="51"/></operator> <literal type="char" pos:line="22" pos:column="52">'c'<pos:position pos:line="22" pos:column="55"/></literal></expr>)<pos:position pos:line="22" pos:column="56"/></condition><then pos:line="22" pos:column="56"> <block pos:line="22" pos:column="57">{
				<decl_stmt><decl><type><name><name pos:line="23" pos:column="33">enum<pos:position pos:line="23" pos:column="37"/></name> <name pos:line="23" pos:column="38">object_type<pos:position pos:line="23" pos:column="49"/></name></name></type> <name pos:line="23" pos:column="50">type<pos:position pos:line="23" pos:column="54"/></name></decl>;<pos:position pos:line="23" pos:column="55"/></decl_stmt>
				<if pos:line="24" pos:column="33">if <condition pos:line="24" pos:column="36">(<expr><operator pos:line="24" pos:column="37">!<pos:position pos:line="24" pos:column="38"/></operator><call><name pos:line="24" pos:column="38">textconv_object<pos:position pos:line="24" pos:column="53"/></name><argument_list pos:line="24" pos:column="53">(<argument><expr><name><name pos:line="24" pos:column="54">data<pos:position pos:line="24" pos:column="58"/></name><operator pos:line="24" pos:column="58">-&gt;<pos:position pos:line="24" pos:column="63"/></operator><name pos:line="24" pos:column="60">rest<pos:position pos:line="24" pos:column="64"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="66">0100644<pos:position pos:line="24" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="75">oid<pos:position pos:line="24" pos:column="78"/></name></expr></argument>,
						     <argument><expr><literal type="number" pos:line="25" pos:column="54">1<pos:position pos:line="25" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="25" pos:column="57">&amp;<pos:position pos:line="25" pos:column="62"/></operator><name pos:line="25" pos:column="58">contents<pos:position pos:line="25" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="68">&amp;<pos:position pos:line="25" pos:column="73"/></operator><name pos:line="25" pos:column="69">size<pos:position pos:line="25" pos:column="73"/></name></expr></argument>)<pos:position pos:line="25" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="75"/></condition><then pos:line="25" pos:column="75">
					<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="41">contents<pos:position pos:line="26" pos:column="49"/></name> <operator pos:line="26" pos:column="50">=<pos:position pos:line="26" pos:column="51"/></operator> <call><name pos:line="26" pos:column="52">read_sha1_file<pos:position pos:line="26" pos:column="66"/></name><argument_list pos:line="26" pos:column="66">(<argument><expr><name><name pos:line="26" pos:column="67">oid<pos:position pos:line="26" pos:column="70"/></name><operator pos:line="26" pos:column="70">-&gt;<pos:position pos:line="26" pos:column="75"/></operator><name pos:line="26" pos:column="72">hash<pos:position pos:line="26" pos:column="76"/></name></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="78">&amp;<pos:position pos:line="26" pos:column="83"/></operator><name pos:line="26" pos:column="79">type<pos:position pos:line="26" pos:column="83"/></name></expr></argument>,
								  <argument><expr><operator pos:line="27" pos:column="67">&amp;<pos:position pos:line="27" pos:column="72"/></operator><name pos:line="27" pos:column="68">size<pos:position pos:line="27" pos:column="72"/></name></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="74"/></expr_stmt></block></then></if>
				<if pos:line="28" pos:column="33">if <condition pos:line="28" pos:column="36">(<expr><operator pos:line="28" pos:column="37">!<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="38">contents<pos:position pos:line="28" pos:column="46"/></name></expr>)<pos:position pos:line="28" pos:column="47"/></condition><then pos:line="28" pos:column="47">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="41">die<pos:position pos:line="29" pos:column="44"/></name><argument_list pos:line="29" pos:column="44">(<argument><expr><literal type="string" pos:line="29" pos:column="45">"could not convert '%s' %s"<pos:position pos:line="29" pos:column="72"/></literal></expr></argument>,
					    <argument><expr><call><name pos:line="30" pos:column="45">oid_to_hex<pos:position pos:line="30" pos:column="55"/></name><argument_list pos:line="30" pos:column="55">(<argument><expr><name pos:line="30" pos:column="56">oid<pos:position pos:line="30" pos:column="59"/></name></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="62">data<pos:position pos:line="30" pos:column="66"/></name><operator pos:line="30" pos:column="66">-&gt;<pos:position pos:line="30" pos:column="71"/></operator><name pos:line="30" pos:column="68">rest<pos:position pos:line="30" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt></block></then></if>
			}<pos:position pos:line="31" pos:column="26"/></block></then></if></elseif> <else pos:line="31" pos:column="27">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="33">die<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">(<argument><expr><literal type="string" pos:line="32" pos:column="37">"BUG: invalid cmdmode: %c"<pos:position pos:line="32" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="65">opt<pos:position pos:line="32" pos:column="68"/></name><operator pos:line="32" pos:column="68">-&gt;<pos:position pos:line="32" pos:column="73"/></operator><name pos:line="32" pos:column="70">cmdmode<pos:position pos:line="32" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="79"/></expr_stmt></block></else></if>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">batch_write<pos:position pos:line="33" pos:column="36"/></name><argument_list pos:line="33" pos:column="36">(<argument><expr><name pos:line="33" pos:column="37">opt<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="42">contents<pos:position pos:line="33" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="52">size<pos:position pos:line="33" pos:column="56"/></name></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">free<pos:position pos:line="34" pos:column="29"/></name><argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">contents<pos:position pos:line="34" pos:column="38"/></name></expr></argument>)<pos:position pos:line="34" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></then> <elseif pos:line="35" pos:column="19">else <if pos:line="35" pos:column="24">if <condition pos:line="35" pos:column="27">(<expr><call><name pos:line="35" pos:column="28">stream_blob_to_fd<pos:position pos:line="35" pos:column="45"/></name><argument_list pos:line="35" pos:column="45">(<argument><expr><literal type="number" pos:line="35" pos:column="46">1<pos:position pos:line="35" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="49">oid<pos:position pos:line="35" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="54">NULL<pos:position pos:line="35" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="60">0<pos:position pos:line="35" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="62"/></argument_list></call> <operator pos:line="35" pos:column="63">&lt;<pos:position pos:line="35" pos:column="67"/></operator> <literal type="number" pos:line="35" pos:column="65">0<pos:position pos:line="35" pos:column="66"/></literal></expr>)<pos:position pos:line="35" pos:column="67"/></condition><then pos:line="35" pos:column="67">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="25">die<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><literal type="string" pos:line="36" pos:column="29">"unable to stream %s to stdout"<pos:position pos:line="36" pos:column="60"/></literal></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="62">oid_to_hex<pos:position pos:line="36" pos:column="72"/></name><argument_list pos:line="36" pos:column="72">(<argument><expr><name pos:line="36" pos:column="73">oid<pos:position pos:line="36" pos:column="76"/></name></expr></argument>)<pos:position pos:line="36" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="79"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="37" pos:column="10"/></block></then>
	<else pos:line="38" pos:column="9">else <block pos:line="38" pos:column="14">{
		<decl_stmt><decl><type><name><name pos:line="39" pos:column="17">enum<pos:position pos:line="39" pos:column="21"/></name> <name pos:line="39" pos:column="22">object_type<pos:position pos:line="39" pos:column="33"/></name></name></type> <name pos:line="39" pos:column="34">type<pos:position pos:line="39" pos:column="38"/></name></decl>;<pos:position pos:line="39" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">unsigned<pos:position pos:line="40" pos:column="25"/></name> <name pos:line="40" pos:column="26">long<pos:position pos:line="40" pos:column="30"/></name></type> <name pos:line="40" pos:column="31">size<pos:position pos:line="40" pos:column="35"/></name></decl>;<pos:position pos:line="40" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="41" pos:column="17">void<pos:position pos:line="41" pos:column="21"/></name> <modifier pos:line="41" pos:column="22">*<pos:position pos:line="41" pos:column="23"/></modifier></type><name pos:line="41" pos:column="23">contents<pos:position pos:line="41" pos:column="31"/></name></decl>;<pos:position pos:line="41" pos:column="32"/></decl_stmt>

		<expr_stmt><expr><name pos:line="43" pos:column="17">contents<pos:position pos:line="43" pos:column="25"/></name> <operator pos:line="43" pos:column="26">=<pos:position pos:line="43" pos:column="27"/></operator> <call><name pos:line="43" pos:column="28">read_sha1_file<pos:position pos:line="43" pos:column="42"/></name><argument_list pos:line="43" pos:column="42">(<argument><expr><name><name pos:line="43" pos:column="43">oid<pos:position pos:line="43" pos:column="46"/></name><operator pos:line="43" pos:column="46">-&gt;<pos:position pos:line="43" pos:column="51"/></operator><name pos:line="43" pos:column="48">hash<pos:position pos:line="43" pos:column="52"/></name></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="54">&amp;<pos:position pos:line="43" pos:column="59"/></operator><name pos:line="43" pos:column="55">type<pos:position pos:line="43" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="61">&amp;<pos:position pos:line="43" pos:column="66"/></operator><name pos:line="43" pos:column="62">size<pos:position pos:line="43" pos:column="66"/></name></expr></argument>)<pos:position pos:line="43" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="68"/></expr_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><operator pos:line="44" pos:column="21">!<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">contents<pos:position pos:line="44" pos:column="30"/></name></expr>)<pos:position pos:line="44" pos:column="31"/></condition><then pos:line="44" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="25">die<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><literal type="string" pos:line="45" pos:column="29">"object %s disappeared"<pos:position pos:line="45" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="54">oid_to_hex<pos:position pos:line="45" pos:column="64"/></name><argument_list pos:line="45" pos:column="64">(<argument><expr><name pos:line="45" pos:column="65">oid<pos:position pos:line="45" pos:column="68"/></name></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="71"/></expr_stmt></block></then></if>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name pos:line="46" pos:column="21">type<pos:position pos:line="46" pos:column="25"/></name> <operator pos:line="46" pos:column="26">!=<pos:position pos:line="46" pos:column="28"/></operator> <name><name pos:line="46" pos:column="29">data<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">-&gt;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="35">type<pos:position pos:line="46" pos:column="39"/></name></name></expr>)<pos:position pos:line="46" pos:column="40"/></condition><then pos:line="46" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="25">die<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><literal type="string" pos:line="47" pos:column="29">"object %s changed type!?"<pos:position pos:line="47" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="57">oid_to_hex<pos:position pos:line="47" pos:column="67"/></name><argument_list pos:line="47" pos:column="67">(<argument><expr><name pos:line="47" pos:column="68">oid<pos:position pos:line="47" pos:column="71"/></name></expr></argument>)<pos:position pos:line="47" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="74"/></expr_stmt></block></then></if>
		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><name><name pos:line="48" pos:column="21">data<pos:position pos:line="48" pos:column="25"/></name><operator pos:line="48" pos:column="25">-&gt;<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="27">info<pos:position pos:line="48" pos:column="31"/></name><operator pos:line="48" pos:column="31">.<pos:position pos:line="48" pos:column="32"/></operator><name pos:line="48" pos:column="32">sizep<pos:position pos:line="48" pos:column="37"/></name></name> <operator pos:line="48" pos:column="38">&amp;&amp;<pos:position pos:line="48" pos:column="48"/></operator> <name pos:line="48" pos:column="41">size<pos:position pos:line="48" pos:column="45"/></name> <operator pos:line="48" pos:column="46">!=<pos:position pos:line="48" pos:column="48"/></operator> <name><name pos:line="48" pos:column="49">data<pos:position pos:line="48" pos:column="53"/></name><operator pos:line="48" pos:column="53">-&gt;<pos:position pos:line="48" pos:column="58"/></operator><name pos:line="48" pos:column="55">size<pos:position pos:line="48" pos:column="59"/></name></name></expr>)<pos:position pos:line="48" pos:column="60"/></condition><then pos:line="48" pos:column="60">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="25">die<pos:position pos:line="49" pos:column="28"/></name><argument_list pos:line="49" pos:column="28">(<argument><expr><literal type="string" pos:line="49" pos:column="29">"object %s changed size!?"<pos:position pos:line="49" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="57">oid_to_hex<pos:position pos:line="49" pos:column="67"/></name><argument_list pos:line="49" pos:column="67">(<argument><expr><name pos:line="49" pos:column="68">oid<pos:position pos:line="49" pos:column="71"/></name></expr></argument>)<pos:position pos:line="49" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="74"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="51" pos:column="17">batch_write<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">opt<pos:position pos:line="51" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="34">contents<pos:position pos:line="51" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="44">size<pos:position pos:line="51" pos:column="48"/></name></expr></argument>)<pos:position pos:line="51" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">free<pos:position pos:line="52" pos:column="21"/></name><argument_list pos:line="52" pos:column="21">(<argument><expr><name pos:line="52" pos:column="22">contents<pos:position pos:line="52" pos:column="30"/></name></expr></argument>)<pos:position pos:line="52" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="53" pos:column="10"/></block></else></if>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
