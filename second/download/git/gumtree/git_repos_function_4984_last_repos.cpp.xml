<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4984_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">exec_woman_emacs<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">path<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">page<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><call><name pos:line="3" pos:column="14">check_emacsclient_version<pos:position pos:line="3" pos:column="39"/></name><argument_list pos:line="3" pos:column="39">()<pos:position pos:line="3" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="42"/></condition><then pos:line="3" pos:column="42"> <block pos:line="3" pos:column="43">{
		<comment type="block" pos:line="4" pos:column="17">/* This works only with emacsclient version &gt;= 22. */</comment>
		<decl_stmt><decl><type><name><name pos:line="5" pos:column="17">struct<pos:position pos:line="5" pos:column="23"/></name> <name pos:line="5" pos:column="24">strbuf<pos:position pos:line="5" pos:column="30"/></name></name></type> <name pos:line="5" pos:column="31">man_page<pos:position pos:line="5" pos:column="39"/></name> <init pos:line="5" pos:column="40">= <expr><name pos:line="5" pos:column="42">STRBUF_INIT<pos:position pos:line="5" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="54"/></decl_stmt>

		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><operator pos:line="7" pos:column="21">!<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">path<pos:position pos:line="7" pos:column="26"/></name></expr>)<pos:position pos:line="7" pos:column="27"/></condition><then pos:line="7" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="25">path<pos:position pos:line="8" pos:column="29"/></name> <operator pos:line="8" pos:column="30">=<pos:position pos:line="8" pos:column="31"/></operator> <literal type="string" pos:line="8" pos:column="32">"emacsclient"<pos:position pos:line="8" pos:column="45"/></literal></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">strbuf_addf<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><operator pos:line="9" pos:column="29">&amp;<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="30">man_page<pos:position pos:line="9" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="40">"(woman \"%s\")"<pos:position pos:line="9" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="58">page<pos:position pos:line="9" pos:column="62"/></name></expr></argument>)<pos:position pos:line="9" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">execlp<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">path<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="30">"emacsclient"<pos:position pos:line="10" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="45">"-e"<pos:position pos:line="10" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="51">man_page<pos:position pos:line="10" pos:column="59"/></name><operator pos:line="10" pos:column="59">.<pos:position pos:line="10" pos:column="60"/></operator><name pos:line="10" pos:column="60">buf<pos:position pos:line="10" pos:column="63"/></name></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="65">(<pos:position pos:line="10" pos:column="66"/></operator><name pos:line="10" pos:column="66">char<pos:position pos:line="10" pos:column="70"/></name> <operator pos:line="10" pos:column="71">*<pos:position pos:line="10" pos:column="72"/></operator><operator pos:line="10" pos:column="72">)<pos:position pos:line="10" pos:column="73"/></operator><name pos:line="10" pos:column="73">NULL<pos:position pos:line="10" pos:column="77"/></name></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">warning_errno<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><call><name pos:line="11" pos:column="31">_<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><literal type="string" pos:line="11" pos:column="33">"failed to exec '%s'"<pos:position pos:line="11" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="11" pos:column="57">path<pos:position pos:line="11" pos:column="61"/></name></expr></argument>)<pos:position pos:line="11" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
