<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1470.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">real_path_internal<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">path<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">int<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">die_on_error<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name></type> <name><name pos:line="3" pos:column="21">bufs<pos:position pos:line="3" pos:column="25"/></name><index pos:line="3" pos:column="25">[<expr><literal type="number" pos:line="3" pos:column="26">2<pos:position pos:line="3" pos:column="27"/></literal></expr>]<pos:position pos:line="3" pos:column="28"/></index><index pos:line="3" pos:column="28">[<expr><name pos:line="3" pos:column="29">PATH_MAX<pos:position pos:line="3" pos:column="37"/></name> <operator pos:line="3" pos:column="38">+<pos:position pos:line="3" pos:column="39"/></operator> <literal type="number" pos:line="3" pos:column="40">1<pos:position pos:line="3" pos:column="41"/></literal></expr>]<pos:position pos:line="3" pos:column="42"/></index></name></decl>, <modifier pos:line="3" pos:column="44">*<pos:position pos:line="3" pos:column="45"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="45">buf<pos:position pos:line="3" pos:column="48"/></name> <init pos:line="3" pos:column="49">= <expr><name><name pos:line="3" pos:column="51">bufs<pos:position pos:line="3" pos:column="55"/></name><index pos:line="3" pos:column="55">[<expr><literal type="number" pos:line="3" pos:column="56">0<pos:position pos:line="3" pos:column="57"/></literal></expr>]<pos:position pos:line="3" pos:column="58"/></index></name></expr></init></decl>, <modifier pos:line="3" pos:column="60">*<pos:position pos:line="3" pos:column="61"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="61">next_buf<pos:position pos:line="3" pos:column="69"/></name> <init pos:line="3" pos:column="70">= <expr><name><name pos:line="3" pos:column="72">bufs<pos:position pos:line="3" pos:column="76"/></name><index pos:line="3" pos:column="76">[<expr><literal type="number" pos:line="3" pos:column="77">1<pos:position pos:line="3" pos:column="78"/></literal></expr>]<pos:position pos:line="3" pos:column="79"/></index></name></expr></init></decl>;<pos:position pos:line="3" pos:column="80"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">retval<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name pos:line="4" pos:column="24">NULL<pos:position pos:line="4" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * If we have to temporarily chdir(), store the original CWD
	 * here so that we can chdir() back to it at the end of the
	 * function:
	 */</comment>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name></type> <name><name pos:line="11" pos:column="14">cwd<pos:position pos:line="11" pos:column="17"/></name><index pos:line="11" pos:column="17">[<expr><literal type="number" pos:line="11" pos:column="18">1024<pos:position pos:line="11" pos:column="22"/></literal></expr>]<pos:position pos:line="11" pos:column="23"/></index></name> <init pos:line="11" pos:column="24">= <expr><literal type="string" pos:line="11" pos:column="26">""<pos:position pos:line="11" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">buf_index<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><literal type="number" pos:line="13" pos:column="25">1<pos:position pos:line="13" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">depth<pos:position pos:line="15" pos:column="18"/></name> <init pos:line="15" pos:column="19">= <expr><name pos:line="15" pos:column="21">MAXDEPTH<pos:position pos:line="15" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">char<pos:position pos:line="16" pos:column="13"/></name> <modifier pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></modifier></type><name pos:line="16" pos:column="15">last_elem<pos:position pos:line="16" pos:column="24"/></name> <init pos:line="16" pos:column="25">= <expr><name pos:line="16" pos:column="27">NULL<pos:position pos:line="16" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="17" pos:column="9">struct<pos:position pos:line="17" pos:column="15"/></name> <name pos:line="17" pos:column="16">stat<pos:position pos:line="17" pos:column="20"/></name></name></type> <name pos:line="17" pos:column="21">st<pos:position pos:line="17" pos:column="23"/></name></decl>;<pos:position pos:line="17" pos:column="24"/></decl_stmt>

	<comment type="block" pos:line="19" pos:column="9">/* We've already done it */</comment>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">path<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">==<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">buf<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">||<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="28">path<pos:position pos:line="20" pos:column="32"/></name> <operator pos:line="20" pos:column="33">==<pos:position pos:line="20" pos:column="35"/></operator> <name pos:line="20" pos:column="36">next_buf<pos:position pos:line="20" pos:column="44"/></name></expr>)<pos:position pos:line="20" pos:column="45"/></condition><then pos:line="20" pos:column="45">
		<block type="pseudo"><return pos:line="21" pos:column="17">return <expr><name pos:line="21" pos:column="24">path<pos:position pos:line="21" pos:column="28"/></name></expr>;<pos:position pos:line="21" pos:column="29"/></return></block></then></if>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><operator pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">path<pos:position pos:line="23" pos:column="19"/></name></expr>)<pos:position pos:line="23" pos:column="20"/></condition><then pos:line="23" pos:column="20"> <block pos:line="23" pos:column="21">{
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">die_on_error<pos:position pos:line="24" pos:column="33"/></name></expr>)<pos:position pos:line="24" pos:column="34"/></condition><then pos:line="24" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">die<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><literal type="string" pos:line="25" pos:column="29">"The empty string is not a valid path"<pos:position pos:line="25" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="69"/></expr_stmt></block></then>
		<else pos:line="26" pos:column="17">else
			<block type="pseudo"><goto pos:line="27" pos:column="25">goto <name pos:line="27" pos:column="30">error_out<pos:position pos:line="27" pos:column="39"/></name>;<pos:position pos:line="27" pos:column="40"/></goto></block></else></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">strlcpy<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">buf<pos:position pos:line="30" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="26">path<pos:position pos:line="30" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="32">PATH_MAX<pos:position pos:line="30" pos:column="40"/></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call> <operator pos:line="30" pos:column="42">&gt;=<pos:position pos:line="30" pos:column="47"/></operator> <name pos:line="30" pos:column="45">PATH_MAX<pos:position pos:line="30" pos:column="53"/></name></expr>)<pos:position pos:line="30" pos:column="54"/></condition><then pos:line="30" pos:column="54"> <block pos:line="30" pos:column="55">{
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">die_on_error<pos:position pos:line="31" pos:column="33"/></name></expr>)<pos:position pos:line="31" pos:column="34"/></condition><then pos:line="31" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="25">die<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><literal type="string" pos:line="32" pos:column="29">"Too long path: %.*s"<pos:position pos:line="32" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="52">60<pos:position pos:line="32" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="56">path<pos:position pos:line="32" pos:column="60"/></name></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt></block></then>
		<else pos:line="33" pos:column="17">else
			<block type="pseudo"><goto pos:line="34" pos:column="25">goto <name pos:line="34" pos:column="30">error_out<pos:position pos:line="34" pos:column="39"/></name>;<pos:position pos:line="34" pos:column="40"/></goto></block></else></if>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<while pos:line="37" pos:column="9">while <condition pos:line="37" pos:column="15">(<expr><name pos:line="37" pos:column="16">depth<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">--<pos:position pos:line="37" pos:column="23"/></operator></expr>)<pos:position pos:line="37" pos:column="24"/></condition> <block pos:line="37" pos:column="25">{
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><operator pos:line="38" pos:column="21">!<pos:position pos:line="38" pos:column="22"/></operator><call><name pos:line="38" pos:column="22">is_directory<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">buf<pos:position pos:line="38" pos:column="38"/></name></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="40"/></condition><then pos:line="38" pos:column="40"> <block pos:line="38" pos:column="41">{
			<decl_stmt><decl><type><name pos:line="39" pos:column="25">char<pos:position pos:line="39" pos:column="29"/></name> <modifier pos:line="39" pos:column="30">*<pos:position pos:line="39" pos:column="31"/></modifier></type><name pos:line="39" pos:column="31">last_slash<pos:position pos:line="39" pos:column="41"/></name> <init pos:line="39" pos:column="42">= <expr><call><name pos:line="39" pos:column="44">find_last_dir_sep<pos:position pos:line="39" pos:column="61"/></name><argument_list pos:line="39" pos:column="61">(<argument><expr><name pos:line="39" pos:column="62">buf<pos:position pos:line="39" pos:column="65"/></name></expr></argument>)<pos:position pos:line="39" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="67"/></decl_stmt>
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><name pos:line="40" pos:column="29">last_slash<pos:position pos:line="40" pos:column="39"/></name></expr>)<pos:position pos:line="40" pos:column="40"/></condition><then pos:line="40" pos:column="40"> <block pos:line="40" pos:column="41">{
				<expr_stmt><expr><name pos:line="41" pos:column="33">last_elem<pos:position pos:line="41" pos:column="42"/></name> <operator pos:line="41" pos:column="43">=<pos:position pos:line="41" pos:column="44"/></operator> <call><name pos:line="41" pos:column="45">xstrdup<pos:position pos:line="41" pos:column="52"/></name><argument_list pos:line="41" pos:column="52">(<argument><expr><name pos:line="41" pos:column="53">last_slash<pos:position pos:line="41" pos:column="63"/></name> <operator pos:line="41" pos:column="64">+<pos:position pos:line="41" pos:column="65"/></operator> <literal type="number" pos:line="41" pos:column="66">1<pos:position pos:line="41" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="69"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="42" pos:column="33">last_slash<pos:position pos:line="42" pos:column="43"/></name><index pos:line="42" pos:column="43">[<expr><literal type="number" pos:line="42" pos:column="44">1<pos:position pos:line="42" pos:column="45"/></literal></expr>]<pos:position pos:line="42" pos:column="46"/></index></name> <operator pos:line="42" pos:column="47">=<pos:position pos:line="42" pos:column="48"/></operator> <literal type="char" pos:line="42" pos:column="49">'\0'<pos:position pos:line="42" pos:column="53"/></literal></expr>;<pos:position pos:line="42" pos:column="54"/></expr_stmt>
			}<pos:position pos:line="43" pos:column="26"/></block></then> <else pos:line="43" pos:column="27">else <block pos:line="43" pos:column="32">{
				<expr_stmt><expr><name pos:line="44" pos:column="33">last_elem<pos:position pos:line="44" pos:column="42"/></name> <operator pos:line="44" pos:column="43">=<pos:position pos:line="44" pos:column="44"/></operator> <call><name pos:line="44" pos:column="45">xstrdup<pos:position pos:line="44" pos:column="52"/></name><argument_list pos:line="44" pos:column="52">(<argument><expr><name pos:line="44" pos:column="53">buf<pos:position pos:line="44" pos:column="56"/></name></expr></argument>)<pos:position pos:line="44" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><operator pos:line="45" pos:column="33">*<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="34">buf<pos:position pos:line="45" pos:column="37"/></name> <operator pos:line="45" pos:column="38">=<pos:position pos:line="45" pos:column="39"/></operator> <literal type="char" pos:line="45" pos:column="40">'\0'<pos:position pos:line="45" pos:column="44"/></literal></expr>;<pos:position pos:line="45" pos:column="45"/></expr_stmt>
			}<pos:position pos:line="46" pos:column="26"/></block></else></if>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>

		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><operator pos:line="49" pos:column="21">*<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="22">buf<pos:position pos:line="49" pos:column="25"/></name></expr>)<pos:position pos:line="49" pos:column="26"/></condition><then pos:line="49" pos:column="26"> <block pos:line="49" pos:column="27">{
			<if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<expr><operator pos:line="50" pos:column="29">!<pos:position pos:line="50" pos:column="30"/></operator><operator pos:line="50" pos:column="30">*<pos:position pos:line="50" pos:column="31"/></operator><name pos:line="50" pos:column="31">cwd<pos:position pos:line="50" pos:column="34"/></name> <operator pos:line="50" pos:column="35">&amp;&amp;<pos:position pos:line="50" pos:column="45"/></operator> <operator pos:line="50" pos:column="38">!<pos:position pos:line="50" pos:column="39"/></operator><call><name pos:line="50" pos:column="39">getcwd<pos:position pos:line="50" pos:column="45"/></name><argument_list pos:line="50" pos:column="45">(<argument><expr><name pos:line="50" pos:column="46">cwd<pos:position pos:line="50" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="51">sizeof<argument_list pos:line="50" pos:column="57">(<argument><expr><name pos:line="50" pos:column="58">cwd<pos:position pos:line="50" pos:column="61"/></name></expr></argument>)<pos:position pos:line="50" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="50" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="64"/></condition><then pos:line="50" pos:column="64"> <block pos:line="50" pos:column="65">{
				<if pos:line="51" pos:column="33">if <condition pos:line="51" pos:column="36">(<expr><name pos:line="51" pos:column="37">die_on_error<pos:position pos:line="51" pos:column="49"/></name></expr>)<pos:position pos:line="51" pos:column="50"/></condition><then pos:line="51" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="41">die_errno<pos:position pos:line="52" pos:column="50"/></name><argument_list pos:line="52" pos:column="50">(<argument><expr><literal type="string" pos:line="52" pos:column="51">"Could not get current working directory"<pos:position pos:line="52" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="94"/></expr_stmt></block></then>
				<else pos:line="53" pos:column="33">else
					<block type="pseudo"><goto pos:line="54" pos:column="41">goto <name pos:line="54" pos:column="46">error_out<pos:position pos:line="54" pos:column="55"/></name>;<pos:position pos:line="54" pos:column="56"/></goto></block></else></if>
			}<pos:position pos:line="55" pos:column="26"/></block></then></if>

			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><call><name pos:line="57" pos:column="29">chdir<pos:position pos:line="57" pos:column="34"/></name><argument_list pos:line="57" pos:column="34">(<argument><expr><name pos:line="57" pos:column="35">buf<pos:position pos:line="57" pos:column="38"/></name></expr></argument>)<pos:position pos:line="57" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="40"/></condition><then pos:line="57" pos:column="40"> <block pos:line="57" pos:column="41">{
				<if pos:line="58" pos:column="33">if <condition pos:line="58" pos:column="36">(<expr><name pos:line="58" pos:column="37">die_on_error<pos:position pos:line="58" pos:column="49"/></name></expr>)<pos:position pos:line="58" pos:column="50"/></condition><then pos:line="58" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="41">die_errno<pos:position pos:line="59" pos:column="50"/></name><argument_list pos:line="59" pos:column="50">(<argument><expr><literal type="string" pos:line="59" pos:column="51">"Could not switch to '%s'"<pos:position pos:line="59" pos:column="77"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="79">buf<pos:position pos:line="59" pos:column="82"/></name></expr></argument>)<pos:position pos:line="59" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="84"/></expr_stmt></block></then>
				<else pos:line="60" pos:column="33">else
					<block type="pseudo"><goto pos:line="61" pos:column="41">goto <name pos:line="61" pos:column="46">error_out<pos:position pos:line="61" pos:column="55"/></name>;<pos:position pos:line="61" pos:column="56"/></goto></block></else></if>
			}<pos:position pos:line="62" pos:column="26"/></block></then></if>
		}<pos:position pos:line="63" pos:column="18"/></block></then></if>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><operator pos:line="64" pos:column="21">!<pos:position pos:line="64" pos:column="22"/></operator><call><name pos:line="64" pos:column="22">getcwd<pos:position pos:line="64" pos:column="28"/></name><argument_list pos:line="64" pos:column="28">(<argument><expr><name pos:line="64" pos:column="29">buf<pos:position pos:line="64" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="34">PATH_MAX<pos:position pos:line="64" pos:column="42"/></name></expr></argument>)<pos:position pos:line="64" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="44"/></condition><then pos:line="64" pos:column="44"> <block pos:line="64" pos:column="45">{
			<if pos:line="65" pos:column="25">if <condition pos:line="65" pos:column="28">(<expr><name pos:line="65" pos:column="29">die_on_error<pos:position pos:line="65" pos:column="41"/></name></expr>)<pos:position pos:line="65" pos:column="42"/></condition><then pos:line="65" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="33">die_errno<pos:position pos:line="66" pos:column="42"/></name><argument_list pos:line="66" pos:column="42">(<argument><expr><literal type="string" pos:line="66" pos:column="43">"Could not get current working directory"<pos:position pos:line="66" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="86"/></expr_stmt></block></then>
			<else pos:line="67" pos:column="25">else
				<block type="pseudo"><goto pos:line="68" pos:column="33">goto <name pos:line="68" pos:column="38">error_out<pos:position pos:line="68" pos:column="47"/></name>;<pos:position pos:line="68" pos:column="48"/></goto></block></else></if>
		}<pos:position pos:line="69" pos:column="18"/></block></then></if>

		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name pos:line="71" pos:column="21">last_elem<pos:position pos:line="71" pos:column="30"/></name></expr>)<pos:position pos:line="71" pos:column="31"/></condition><then pos:line="71" pos:column="31"> <block pos:line="71" pos:column="32">{
			<decl_stmt><decl><type><name pos:line="72" pos:column="25">size_t<pos:position pos:line="72" pos:column="31"/></name></type> <name pos:line="72" pos:column="32">len<pos:position pos:line="72" pos:column="35"/></name> <init pos:line="72" pos:column="36">= <expr><call><name pos:line="72" pos:column="38">strlen<pos:position pos:line="72" pos:column="44"/></name><argument_list pos:line="72" pos:column="44">(<argument><expr><name pos:line="72" pos:column="45">buf<pos:position pos:line="72" pos:column="48"/></name></expr></argument>)<pos:position pos:line="72" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="72" pos:column="50"/></decl_stmt>
			<if pos:line="73" pos:column="25">if <condition pos:line="73" pos:column="28">(<expr><name pos:line="73" pos:column="29">len<pos:position pos:line="73" pos:column="32"/></name> <operator pos:line="73" pos:column="33">+<pos:position pos:line="73" pos:column="34"/></operator> <call><name pos:line="73" pos:column="35">strlen<pos:position pos:line="73" pos:column="41"/></name><argument_list pos:line="73" pos:column="41">(<argument><expr><name pos:line="73" pos:column="42">last_elem<pos:position pos:line="73" pos:column="51"/></name></expr></argument>)<pos:position pos:line="73" pos:column="52"/></argument_list></call> <operator pos:line="73" pos:column="53">+<pos:position pos:line="73" pos:column="54"/></operator> <literal type="number" pos:line="73" pos:column="55">2<pos:position pos:line="73" pos:column="56"/></literal> <operator pos:line="73" pos:column="57">&gt;<pos:position pos:line="73" pos:column="61"/></operator> <name pos:line="73" pos:column="59">PATH_MAX<pos:position pos:line="73" pos:column="67"/></name></expr>)<pos:position pos:line="73" pos:column="68"/></condition><then pos:line="73" pos:column="68"> <block pos:line="73" pos:column="69">{
				<if pos:line="74" pos:column="33">if <condition pos:line="74" pos:column="36">(<expr><name pos:line="74" pos:column="37">die_on_error<pos:position pos:line="74" pos:column="49"/></name></expr>)<pos:position pos:line="74" pos:column="50"/></condition><then pos:line="74" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="41">die<pos:position pos:line="75" pos:column="44"/></name><argument_list pos:line="75" pos:column="44">(<argument><expr><literal type="string" pos:line="75" pos:column="45">"Too long path name: '%s/%s'"<pos:position pos:line="75" pos:column="74"/></literal></expr></argument>,
					    <argument><expr><name pos:line="76" pos:column="45">buf<pos:position pos:line="76" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="50">last_elem<pos:position pos:line="76" pos:column="59"/></name></expr></argument>)<pos:position pos:line="76" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="61"/></expr_stmt></block></then>
				<else pos:line="77" pos:column="33">else
					<block type="pseudo"><goto pos:line="78" pos:column="41">goto <name pos:line="78" pos:column="46">error_out<pos:position pos:line="78" pos:column="55"/></name>;<pos:position pos:line="78" pos:column="56"/></goto></block></else></if>
			}<pos:position pos:line="79" pos:column="26"/></block></then></if>
			<if pos:line="80" pos:column="25">if <condition pos:line="80" pos:column="28">(<expr><name pos:line="80" pos:column="29">len<pos:position pos:line="80" pos:column="32"/></name> <operator pos:line="80" pos:column="33">&amp;&amp;<pos:position pos:line="80" pos:column="43"/></operator> <operator pos:line="80" pos:column="36">!<pos:position pos:line="80" pos:column="37"/></operator><call><name pos:line="80" pos:column="37">is_dir_sep<pos:position pos:line="80" pos:column="47"/></name><argument_list pos:line="80" pos:column="47">(<argument><expr><name><name pos:line="80" pos:column="48">buf<pos:position pos:line="80" pos:column="51"/></name><index pos:line="80" pos:column="51">[<expr><name pos:line="80" pos:column="52">len<pos:position pos:line="80" pos:column="55"/></name> <operator pos:line="80" pos:column="56">-<pos:position pos:line="80" pos:column="57"/></operator> <literal type="number" pos:line="80" pos:column="58">1<pos:position pos:line="80" pos:column="59"/></literal></expr>]<pos:position pos:line="80" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="80" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="62"/></condition><then pos:line="80" pos:column="62">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="81" pos:column="33">buf<pos:position pos:line="81" pos:column="36"/></name><index pos:line="81" pos:column="36">[<expr><name pos:line="81" pos:column="37">len<pos:position pos:line="81" pos:column="40"/></name><operator pos:line="81" pos:column="40">++<pos:position pos:line="81" pos:column="42"/></operator></expr>]<pos:position pos:line="81" pos:column="43"/></index></name> <operator pos:line="81" pos:column="44">=<pos:position pos:line="81" pos:column="45"/></operator> <literal type="char" pos:line="81" pos:column="46">'/'<pos:position pos:line="81" pos:column="49"/></literal></expr>;<pos:position pos:line="81" pos:column="50"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="82" pos:column="25">strcpy<pos:position pos:line="82" pos:column="31"/></name><argument_list pos:line="82" pos:column="31">(<argument><expr><name pos:line="82" pos:column="32">buf<pos:position pos:line="82" pos:column="35"/></name> <operator pos:line="82" pos:column="36">+<pos:position pos:line="82" pos:column="37"/></operator> <name pos:line="82" pos:column="38">len<pos:position pos:line="82" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="43">last_elem<pos:position pos:line="82" pos:column="52"/></name></expr></argument>)<pos:position pos:line="82" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="83" pos:column="25">free<pos:position pos:line="83" pos:column="29"/></name><argument_list pos:line="83" pos:column="29">(<argument><expr><name pos:line="83" pos:column="30">last_elem<pos:position pos:line="83" pos:column="39"/></name></expr></argument>)<pos:position pos:line="83" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="84" pos:column="25">last_elem<pos:position pos:line="84" pos:column="34"/></name> <operator pos:line="84" pos:column="35">=<pos:position pos:line="84" pos:column="36"/></operator> <name pos:line="84" pos:column="37">NULL<pos:position pos:line="84" pos:column="41"/></name></expr>;<pos:position pos:line="84" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="85" pos:column="18"/></block></then></if>

		<if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><operator pos:line="87" pos:column="21">!<pos:position pos:line="87" pos:column="22"/></operator><call><name pos:line="87" pos:column="22">lstat<pos:position pos:line="87" pos:column="27"/></name><argument_list pos:line="87" pos:column="27">(<argument><expr><name pos:line="87" pos:column="28">buf<pos:position pos:line="87" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="33">&amp;<pos:position pos:line="87" pos:column="38"/></operator><name pos:line="87" pos:column="34">st<pos:position pos:line="87" pos:column="36"/></name></expr></argument>)<pos:position pos:line="87" pos:column="37"/></argument_list></call> <operator pos:line="87" pos:column="38">&amp;&amp;<pos:position pos:line="87" pos:column="48"/></operator> <call><name pos:line="87" pos:column="41">S_ISLNK<pos:position pos:line="87" pos:column="48"/></name><argument_list pos:line="87" pos:column="48">(<argument><expr><name><name pos:line="87" pos:column="49">st<pos:position pos:line="87" pos:column="51"/></name><operator pos:line="87" pos:column="51">.<pos:position pos:line="87" pos:column="52"/></operator><name pos:line="87" pos:column="52">st_mode<pos:position pos:line="87" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="61"/></condition><then pos:line="87" pos:column="61"> <block pos:line="87" pos:column="62">{
			<decl_stmt><decl><type><name pos:line="88" pos:column="25">ssize_t<pos:position pos:line="88" pos:column="32"/></name></type> <name pos:line="88" pos:column="33">len<pos:position pos:line="88" pos:column="36"/></name> <init pos:line="88" pos:column="37">= <expr><call><name pos:line="88" pos:column="39">readlink<pos:position pos:line="88" pos:column="47"/></name><argument_list pos:line="88" pos:column="47">(<argument><expr><name pos:line="88" pos:column="48">buf<pos:position pos:line="88" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="53">next_buf<pos:position pos:line="88" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="63">PATH_MAX<pos:position pos:line="88" pos:column="71"/></name></expr></argument>)<pos:position pos:line="88" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="88" pos:column="73"/></decl_stmt>
			<if pos:line="89" pos:column="25">if <condition pos:line="89" pos:column="28">(<expr><name pos:line="89" pos:column="29">len<pos:position pos:line="89" pos:column="32"/></name> <operator pos:line="89" pos:column="33">&lt;<pos:position pos:line="89" pos:column="37"/></operator> <literal type="number" pos:line="89" pos:column="35">0<pos:position pos:line="89" pos:column="36"/></literal></expr>)<pos:position pos:line="89" pos:column="37"/></condition><then pos:line="89" pos:column="37"> <block pos:line="89" pos:column="38">{
				<if pos:line="90" pos:column="33">if <condition pos:line="90" pos:column="36">(<expr><name pos:line="90" pos:column="37">die_on_error<pos:position pos:line="90" pos:column="49"/></name></expr>)<pos:position pos:line="90" pos:column="50"/></condition><then pos:line="90" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="91" pos:column="41">die_errno<pos:position pos:line="91" pos:column="50"/></name><argument_list pos:line="91" pos:column="50">(<argument><expr><literal type="string" pos:line="91" pos:column="51">"Invalid symlink '%s'"<pos:position pos:line="91" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="75">buf<pos:position pos:line="91" pos:column="78"/></name></expr></argument>)<pos:position pos:line="91" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="80"/></expr_stmt></block></then>
				<else pos:line="92" pos:column="33">else
					<block type="pseudo"><goto pos:line="93" pos:column="41">goto <name pos:line="93" pos:column="46">error_out<pos:position pos:line="93" pos:column="55"/></name>;<pos:position pos:line="93" pos:column="56"/></goto></block></else></if>
			}<pos:position pos:line="94" pos:column="26"/></block></then></if>
			<if pos:line="95" pos:column="25">if <condition pos:line="95" pos:column="28">(<expr><name pos:line="95" pos:column="29">PATH_MAX<pos:position pos:line="95" pos:column="37"/></name> <operator pos:line="95" pos:column="38">&lt;=<pos:position pos:line="95" pos:column="43"/></operator> <name pos:line="95" pos:column="41">len<pos:position pos:line="95" pos:column="44"/></name></expr>)<pos:position pos:line="95" pos:column="45"/></condition><then pos:line="95" pos:column="45"> <block pos:line="95" pos:column="46">{
				<if pos:line="96" pos:column="33">if <condition pos:line="96" pos:column="36">(<expr><name pos:line="96" pos:column="37">die_on_error<pos:position pos:line="96" pos:column="49"/></name></expr>)<pos:position pos:line="96" pos:column="50"/></condition><then pos:line="96" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="97" pos:column="41">die<pos:position pos:line="97" pos:column="44"/></name><argument_list pos:line="97" pos:column="44">(<argument><expr><literal type="string" pos:line="97" pos:column="45">"symbolic link too long: %s"<pos:position pos:line="97" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="75">buf<pos:position pos:line="97" pos:column="78"/></name></expr></argument>)<pos:position pos:line="97" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="80"/></expr_stmt></block></then>
				<else pos:line="98" pos:column="33">else
					<block type="pseudo"><goto pos:line="99" pos:column="41">goto <name pos:line="99" pos:column="46">error_out<pos:position pos:line="99" pos:column="55"/></name>;<pos:position pos:line="99" pos:column="56"/></goto></block></else></if>
			}<pos:position pos:line="100" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="101" pos:column="25">next_buf<pos:position pos:line="101" pos:column="33"/></name><index pos:line="101" pos:column="33">[<expr><name pos:line="101" pos:column="34">len<pos:position pos:line="101" pos:column="37"/></name></expr>]<pos:position pos:line="101" pos:column="38"/></index></name> <operator pos:line="101" pos:column="39">=<pos:position pos:line="101" pos:column="40"/></operator> <literal type="char" pos:line="101" pos:column="41">'\0'<pos:position pos:line="101" pos:column="45"/></literal></expr>;<pos:position pos:line="101" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="102" pos:column="25">buf<pos:position pos:line="102" pos:column="28"/></name> <operator pos:line="102" pos:column="29">=<pos:position pos:line="102" pos:column="30"/></operator> <name pos:line="102" pos:column="31">next_buf<pos:position pos:line="102" pos:column="39"/></name></expr>;<pos:position pos:line="102" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="103" pos:column="25">buf_index<pos:position pos:line="103" pos:column="34"/></name> <operator pos:line="103" pos:column="35">=<pos:position pos:line="103" pos:column="36"/></operator> <literal type="number" pos:line="103" pos:column="37">1<pos:position pos:line="103" pos:column="38"/></literal> <operator pos:line="103" pos:column="39">-<pos:position pos:line="103" pos:column="40"/></operator> <name pos:line="103" pos:column="41">buf_index<pos:position pos:line="103" pos:column="50"/></name></expr>;<pos:position pos:line="103" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name pos:line="104" pos:column="25">next_buf<pos:position pos:line="104" pos:column="33"/></name> <operator pos:line="104" pos:column="34">=<pos:position pos:line="104" pos:column="35"/></operator> <name><name pos:line="104" pos:column="36">bufs<pos:position pos:line="104" pos:column="40"/></name><index pos:line="104" pos:column="40">[<expr><name pos:line="104" pos:column="41">buf_index<pos:position pos:line="104" pos:column="50"/></name></expr>]<pos:position pos:line="104" pos:column="51"/></index></name></expr>;<pos:position pos:line="104" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="105" pos:column="18"/></block></then> <else pos:line="105" pos:column="19">else
			<block type="pseudo"><break pos:line="106" pos:column="25">break;<pos:position pos:line="106" pos:column="31"/></break></block></else></if>
	}<pos:position pos:line="107" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="109" pos:column="9">retval<pos:position pos:line="109" pos:column="15"/></name> <operator pos:line="109" pos:column="16">=<pos:position pos:line="109" pos:column="17"/></operator> <name pos:line="109" pos:column="18">buf<pos:position pos:line="109" pos:column="21"/></name></expr>;<pos:position pos:line="109" pos:column="22"/></expr_stmt>
<label><name pos:line="110" pos:column="1">error_out<pos:position pos:line="110" pos:column="10"/></name>:<pos:position pos:line="110" pos:column="11"/></label>
	<expr_stmt><expr><call><name pos:line="111" pos:column="9">free<pos:position pos:line="111" pos:column="13"/></name><argument_list pos:line="111" pos:column="13">(<argument><expr><name pos:line="111" pos:column="14">last_elem<pos:position pos:line="111" pos:column="23"/></name></expr></argument>)<pos:position pos:line="111" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="25"/></expr_stmt>
	<if pos:line="112" pos:column="9">if <condition pos:line="112" pos:column="12">(<expr><operator pos:line="112" pos:column="13">*<pos:position pos:line="112" pos:column="14"/></operator><name pos:line="112" pos:column="14">cwd<pos:position pos:line="112" pos:column="17"/></name> <operator pos:line="112" pos:column="18">&amp;&amp;<pos:position pos:line="112" pos:column="28"/></operator> <call><name pos:line="112" pos:column="21">chdir<pos:position pos:line="112" pos:column="26"/></name><argument_list pos:line="112" pos:column="26">(<argument><expr><name pos:line="112" pos:column="27">cwd<pos:position pos:line="112" pos:column="30"/></name></expr></argument>)<pos:position pos:line="112" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="112" pos:column="32"/></condition><then pos:line="112" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="113" pos:column="17">die_errno<pos:position pos:line="113" pos:column="26"/></name><argument_list pos:line="113" pos:column="26">(<argument><expr><literal type="string" pos:line="113" pos:column="27">"Could not change back to '%s'"<pos:position pos:line="113" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="60">cwd<pos:position pos:line="113" pos:column="63"/></name></expr></argument>)<pos:position pos:line="113" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="65"/></expr_stmt></block></then></if>

	<return pos:line="115" pos:column="9">return <expr><name pos:line="115" pos:column="16">retval<pos:position pos:line="115" pos:column="22"/></name></expr>;<pos:position pos:line="115" pos:column="23"/></return>
}<pos:position pos:line="116" pos:column="2"/></block></function></unit>
