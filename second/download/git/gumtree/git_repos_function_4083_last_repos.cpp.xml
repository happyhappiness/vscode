<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4083_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">push_update_refs_status<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">helper_data<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">data<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
				    <parameter><decl><type><name><name pos:line="2" pos:column="37">struct<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">ref<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">remote_refs<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>,
				    <parameter><decl><type><name pos:line="3" pos:column="37">int<pos:position pos:line="3" pos:column="40"/></name></type> <name pos:line="3" pos:column="41">flags<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="47"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">buf<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name pos:line="5" pos:column="29">STRBUF_INIT<pos:position pos:line="5" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">ref<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">ref<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><name pos:line="6" pos:column="27">remote_refs<pos:position pos:line="6" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">ret<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init pos:line="9" pos:column="14">;<pos:position pos:line="9" pos:column="15"/></init><condition pos:line="9" pos:column="15">;<pos:position pos:line="9" pos:column="16"/></condition><incr/>)<pos:position pos:line="9" pos:column="17"/></control> <block pos:line="9" pos:column="18">{
		<macro><name pos:line="10" pos:column="17">char<pos:position pos:line="10" pos:column="21"/></name></macro> <expr_stmt><expr><operator pos:line="10" pos:column="22">*<pos:position pos:line="10" pos:column="23"/></operator><specifier pos:line="10" pos:column="23">private<pos:position pos:line="10" pos:column="30"/></specifier></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>

		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">recvline<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><name pos:line="12" pos:column="30">data<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="36">&amp;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="37">buf<pos:position pos:line="12" pos:column="40"/></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42"> <block pos:line="12" pos:column="43">{
			<expr_stmt><expr><name pos:line="13" pos:column="25">ret<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">=<pos:position pos:line="13" pos:column="30"/></operator> <literal type="number" pos:line="13" pos:column="31">1<pos:position pos:line="13" pos:column="32"/></literal></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
			<break pos:line="14" pos:column="25">break;<pos:position pos:line="14" pos:column="31"/></break>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><name><name pos:line="17" pos:column="22">buf<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">.<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">len<pos:position pos:line="17" pos:column="29"/></name></name></expr>)<pos:position pos:line="17" pos:column="30"/></condition><then pos:line="17" pos:column="30">
			<block type="pseudo"><break pos:line="18" pos:column="25">break;<pos:position pos:line="18" pos:column="31"/></break></block></then></if>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name pos:line="20" pos:column="21">push_update_ref_status<pos:position pos:line="20" pos:column="43"/></name><argument_list pos:line="20" pos:column="43">(<argument><expr><operator pos:line="20" pos:column="44">&amp;<pos:position pos:line="20" pos:column="49"/></operator><name pos:line="20" pos:column="45">buf<pos:position pos:line="20" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="50">&amp;<pos:position pos:line="20" pos:column="55"/></operator><name pos:line="20" pos:column="51">ref<pos:position pos:line="20" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="56">remote_refs<pos:position pos:line="20" pos:column="67"/></name></expr></argument>)<pos:position pos:line="20" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="69"/></condition><then pos:line="20" pos:column="69">
			<block type="pseudo"><continue pos:line="21" pos:column="25">continue;<pos:position pos:line="21" pos:column="34"/></continue></block></then></if>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">flags<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">&amp;<pos:position pos:line="23" pos:column="32"/></operator> <name pos:line="23" pos:column="29">TRANSPORT_PUSH_DRY_RUN<pos:position pos:line="23" pos:column="51"/></name> <operator pos:line="23" pos:column="52">||<pos:position pos:line="23" pos:column="54"/></operator> <operator pos:line="23" pos:column="55">!<pos:position pos:line="23" pos:column="56"/></operator><name><name pos:line="23" pos:column="56">data<pos:position pos:line="23" pos:column="60"/></name><operator pos:line="23" pos:column="60">-&gt;<pos:position pos:line="23" pos:column="65"/></operator><name pos:line="23" pos:column="62">refspecs<pos:position pos:line="23" pos:column="70"/></name></name> <operator pos:line="23" pos:column="71">||<pos:position pos:line="23" pos:column="73"/></operator> <name><name pos:line="23" pos:column="74">data<pos:position pos:line="23" pos:column="78"/></name><operator pos:line="23" pos:column="78">-&gt;<pos:position pos:line="23" pos:column="83"/></operator><name pos:line="23" pos:column="80">no_private_update<pos:position pos:line="23" pos:column="97"/></name></name></expr>)<pos:position pos:line="23" pos:column="98"/></condition><then pos:line="23" pos:column="98">
			<block type="pseudo"><continue pos:line="24" pos:column="25">continue;<pos:position pos:line="24" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="26" pos:column="17">/* propagate back the update to the remote namespace */</comment>
		<expr_stmt><expr><specifier pos:line="27" pos:column="17">private<pos:position pos:line="27" pos:column="24"/></specifier> <operator pos:line="27" pos:column="25">=<pos:position pos:line="27" pos:column="26"/></operator> <call><name pos:line="27" pos:column="27">apply_refspecs<pos:position pos:line="27" pos:column="41"/></name><argument_list pos:line="27" pos:column="41">(<argument><expr><name><name pos:line="27" pos:column="42">data<pos:position pos:line="27" pos:column="46"/></name><operator pos:line="27" pos:column="46">-&gt;<pos:position pos:line="27" pos:column="51"/></operator><name pos:line="27" pos:column="48">refspecs<pos:position pos:line="27" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="58">data<pos:position pos:line="27" pos:column="62"/></name><operator pos:line="27" pos:column="62">-&gt;<pos:position pos:line="27" pos:column="67"/></operator><name pos:line="27" pos:column="64">refspec_nr<pos:position pos:line="27" pos:column="74"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="76">ref<pos:position pos:line="27" pos:column="79"/></name><operator pos:line="27" pos:column="79">-&gt;<pos:position pos:line="27" pos:column="84"/></operator><name pos:line="27" pos:column="81">name<pos:position pos:line="27" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="87"/></expr_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><operator pos:line="28" pos:column="21">!<pos:position pos:line="28" pos:column="22"/></operator><specifier pos:line="28" pos:column="22">private<pos:position pos:line="28" pos:column="29"/></specifier></expr>)<pos:position pos:line="28" pos:column="30"/></condition><then pos:line="28" pos:column="30">
			<block type="pseudo"><continue pos:line="29" pos:column="25">continue;<pos:position pos:line="29" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">update_ref<pos:position pos:line="30" pos:column="27"/></name><argument_list pos:line="30" pos:column="27">(<argument><expr><literal type="string" pos:line="30" pos:column="28">"update by helper"<pos:position pos:line="30" pos:column="46"/></literal></expr></argument>, <argument><expr><specifier pos:line="30" pos:column="48">private<pos:position pos:line="30" pos:column="55"/></specifier></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="57">ref<pos:position pos:line="30" pos:column="60"/></name><operator pos:line="30" pos:column="60">-&gt;<pos:position pos:line="30" pos:column="65"/></operator><name pos:line="30" pos:column="62">new_oid<pos:position pos:line="30" pos:column="69"/></name><operator pos:line="30" pos:column="69">.<pos:position pos:line="30" pos:column="70"/></operator><name pos:line="30" pos:column="70">hash<pos:position pos:line="30" pos:column="74"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="76">NULL<pos:position pos:line="30" pos:column="80"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="82">0<pos:position pos:line="30" pos:column="83"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="85">0<pos:position pos:line="30" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="88"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">free<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">(<argument><expr><specifier pos:line="31" pos:column="22">private<pos:position pos:line="31" pos:column="29"/></specifier></expr></argument>)<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">strbuf_release<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><operator pos:line="33" pos:column="24">&amp;<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="25">buf<pos:position pos:line="33" pos:column="28"/></name></expr></argument>)<pos:position pos:line="33" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt>
	<return pos:line="34" pos:column="9">return <expr><name pos:line="34" pos:column="16">ret<pos:position pos:line="34" pos:column="19"/></name></expr>;<pos:position pos:line="34" pos:column="20"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
