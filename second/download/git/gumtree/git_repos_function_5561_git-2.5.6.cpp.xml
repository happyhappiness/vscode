<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5561_git-2.5.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">long<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">apply_delta<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">off_t<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">len<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">line_buffer<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">input<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">old_data<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">uint32_t<pos:position pos:line="2" pos:column="55"/></name></type> <name pos:line="2" pos:column="56">old_mode<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">long<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">ret<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">sliding_view<pos:position pos:line="5" pos:column="28"/></name></name></type> <name pos:line="5" pos:column="29">preimage<pos:position pos:line="5" pos:column="37"/></name> <init pos:line="5" pos:column="38">= <expr><call><name pos:line="5" pos:column="40">SLIDING_VIEW_INIT<pos:position pos:line="5" pos:column="57"/></name><argument_list pos:line="5" pos:column="57">(<argument><expr><operator pos:line="5" pos:column="58">&amp;<pos:position pos:line="5" pos:column="63"/></operator><name pos:line="5" pos:column="59">report_buffer<pos:position pos:line="5" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="74">0<pos:position pos:line="5" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="77"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">FILE<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">out<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">init_postimage<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">()<pos:position pos:line="8" pos:column="29"/></argument_list></call> <operator pos:line="8" pos:column="30">||<pos:position pos:line="8" pos:column="32"/></operator> <operator pos:line="8" pos:column="33">!<pos:position pos:line="8" pos:column="34"/></operator><operator pos:line="8" pos:column="34">(<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="35">out<pos:position pos:line="8" pos:column="38"/></name> <operator pos:line="8" pos:column="39">=<pos:position pos:line="8" pos:column="40"/></operator> <call><name pos:line="8" pos:column="41">buffer_tmpfile_rewind<pos:position pos:line="8" pos:column="62"/></name><argument_list pos:line="8" pos:column="62">(<argument><expr><operator pos:line="8" pos:column="63">&amp;<pos:position pos:line="8" pos:column="68"/></operator><name pos:line="8" pos:column="64">postimage<pos:position pos:line="8" pos:column="73"/></name></expr></argument>)<pos:position pos:line="8" pos:column="74"/></argument_list></call><operator pos:line="8" pos:column="74">)<pos:position pos:line="8" pos:column="75"/></operator></expr>)<pos:position pos:line="8" pos:column="76"/></condition><then pos:line="8" pos:column="76">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">die<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><literal type="string" pos:line="9" pos:column="21">"cannot open temporary file for blob retrieval"<pos:position pos:line="9" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="70"/></expr_stmt></block></then></if>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">old_data<pos:position pos:line="10" pos:column="21"/></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22"> <block pos:line="10" pos:column="23">{
		<decl_stmt><decl><type><specifier pos:line="11" pos:column="17">const<pos:position pos:line="11" pos:column="22"/></specifier> <name pos:line="11" pos:column="23">char<pos:position pos:line="11" pos:column="27"/></name> <modifier pos:line="11" pos:column="28">*<pos:position pos:line="11" pos:column="29"/></modifier></type><name pos:line="11" pos:column="29">response<pos:position pos:line="11" pos:column="37"/></name></decl>;<pos:position pos:line="11" pos:column="38"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">printf<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><literal type="string" pos:line="12" pos:column="24">"cat-blob %s\n"<pos:position pos:line="12" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="41">old_data<pos:position pos:line="12" pos:column="49"/></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">fflush<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">stdout<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">response<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">=<pos:position pos:line="14" pos:column="27"/></operator> <call><name pos:line="14" pos:column="28">get_response_line<pos:position pos:line="14" pos:column="45"/></name><argument_list pos:line="14" pos:column="45">()<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">parse_cat_response_line<pos:position pos:line="15" pos:column="44"/></name><argument_list pos:line="15" pos:column="44">(<argument><expr><name pos:line="15" pos:column="45">response<pos:position pos:line="15" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="55">&amp;<pos:position pos:line="15" pos:column="60"/></operator><name><name pos:line="15" pos:column="56">preimage<pos:position pos:line="15" pos:column="64"/></name><operator pos:line="15" pos:column="64">.<pos:position pos:line="15" pos:column="65"/></operator><name pos:line="15" pos:column="65">max_off<pos:position pos:line="15" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="74"/></condition><then pos:line="15" pos:column="74">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">die<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><literal type="string" pos:line="16" pos:column="29">"invalid cat-blob response: %s"<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="62">response<pos:position pos:line="16" pos:column="70"/></name></expr></argument>)<pos:position pos:line="16" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="72"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">check_preimage_overflow<pos:position pos:line="17" pos:column="40"/></name><argument_list pos:line="17" pos:column="40">(<argument><expr><name><name pos:line="17" pos:column="41">preimage<pos:position pos:line="17" pos:column="49"/></name><operator pos:line="17" pos:column="49">.<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="50">max_off<pos:position pos:line="17" pos:column="57"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="59">1<pos:position pos:line="17" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="62"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">old_mode<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">==<pos:position pos:line="19" pos:column="24"/></operator> <name pos:line="19" pos:column="25">REPO_MODE_LNK<pos:position pos:line="19" pos:column="38"/></name></expr>)<pos:position pos:line="19" pos:column="39"/></condition><then pos:line="19" pos:column="39"> <block pos:line="19" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">strbuf_addstr<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><operator pos:line="20" pos:column="31">&amp;<pos:position pos:line="20" pos:column="36"/></operator><name><name pos:line="20" pos:column="32">preimage<pos:position pos:line="20" pos:column="40"/></name><operator pos:line="20" pos:column="40">.<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="41">buf<pos:position pos:line="20" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="46">"link "<pos:position pos:line="20" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">check_preimage_overflow<pos:position pos:line="21" pos:column="40"/></name><argument_list pos:line="21" pos:column="40">(<argument><expr><name><name pos:line="21" pos:column="41">preimage<pos:position pos:line="21" pos:column="49"/></name><operator pos:line="21" pos:column="49">.<pos:position pos:line="21" pos:column="50"/></operator><name pos:line="21" pos:column="50">max_off<pos:position pos:line="21" pos:column="57"/></name></name></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="59">strlen<pos:position pos:line="21" pos:column="65"/></name><argument_list pos:line="21" pos:column="65">(<argument><expr><literal type="string" pos:line="21" pos:column="66">"link "<pos:position pos:line="21" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">preimage<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">.<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">max_off<pos:position pos:line="22" pos:column="33"/></name></name> <operator pos:line="22" pos:column="34">+=<pos:position pos:line="22" pos:column="36"/></operator> <call><name pos:line="22" pos:column="37">strlen<pos:position pos:line="22" pos:column="43"/></name><argument_list pos:line="22" pos:column="43">(<argument><expr><literal type="string" pos:line="22" pos:column="44">"link "<pos:position pos:line="22" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">check_preimage_overflow<pos:position pos:line="23" pos:column="40"/></name><argument_list pos:line="23" pos:column="40">(<argument><expr><name><name pos:line="23" pos:column="41">preimage<pos:position pos:line="23" pos:column="49"/></name><operator pos:line="23" pos:column="49">.<pos:position pos:line="23" pos:column="50"/></operator><name pos:line="23" pos:column="50">max_off<pos:position pos:line="23" pos:column="57"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="59">1<pos:position pos:line="23" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="62"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">svndiff0_apply<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">input<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="35">len<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="40">&amp;<pos:position pos:line="25" pos:column="45"/></operator><name pos:line="25" pos:column="41">preimage<pos:position pos:line="25" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="51">out<pos:position pos:line="25" pos:column="54"/></name></expr></argument>)<pos:position pos:line="25" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="56"/></condition><then pos:line="25" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">die<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><literal type="string" pos:line="26" pos:column="21">"cannot apply delta"<pos:position pos:line="26" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt></block></then></if>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">old_data<pos:position pos:line="27" pos:column="21"/></name></expr>)<pos:position pos:line="27" pos:column="22"/></condition><then pos:line="27" pos:column="22"> <block pos:line="27" pos:column="23">{
		<comment type="block" pos:line="28" pos:column="17">/* Read the remainder of preimage and trailing newline. */</comment>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">assert<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><operator pos:line="29" pos:column="24">!<pos:position pos:line="29" pos:column="25"/></operator><call><name pos:line="29" pos:column="25">signed_add_overflows<pos:position pos:line="29" pos:column="45"/></name><argument_list pos:line="29" pos:column="45">(<argument><expr><name><name pos:line="29" pos:column="46">preimage<pos:position pos:line="29" pos:column="54"/></name><operator pos:line="29" pos:column="54">.<pos:position pos:line="29" pos:column="55"/></operator><name pos:line="29" pos:column="55">max_off<pos:position pos:line="29" pos:column="62"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="64">1<pos:position pos:line="29" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">preimage<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">.<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="26">max_off<pos:position pos:line="30" pos:column="33"/></name></name><operator pos:line="30" pos:column="33">++<pos:position pos:line="30" pos:column="35"/></operator></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt>	<comment type="block" pos:line="30" pos:column="41">/* room for newline */</comment>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><call><name pos:line="31" pos:column="21">move_window<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><operator pos:line="31" pos:column="33">&amp;<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="34">preimage<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="44">preimage<pos:position pos:line="31" pos:column="52"/></name><operator pos:line="31" pos:column="52">.<pos:position pos:line="31" pos:column="53"/></operator><name pos:line="31" pos:column="53">max_off<pos:position pos:line="31" pos:column="60"/></name></name> <operator pos:line="31" pos:column="61">-<pos:position pos:line="31" pos:column="62"/></operator> <literal type="number" pos:line="31" pos:column="63">1<pos:position pos:line="31" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="66">1<pos:position pos:line="31" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="69"/></condition><then pos:line="31" pos:column="69">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="25">die<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><literal type="string" pos:line="32" pos:column="29">"cannot seek to end of input"<pos:position pos:line="32" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="60"/></expr_stmt></block></then></if>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name><name pos:line="33" pos:column="21">preimage<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">.<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="30">buf<pos:position pos:line="33" pos:column="33"/></name><operator pos:line="33" pos:column="33">.<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">buf<pos:position pos:line="33" pos:column="37"/></name><index pos:line="33" pos:column="37">[<expr><literal type="number" pos:line="33" pos:column="38">0<pos:position pos:line="33" pos:column="39"/></literal></expr>]<pos:position pos:line="33" pos:column="40"/></index></name> <operator pos:line="33" pos:column="41">!=<pos:position pos:line="33" pos:column="43"/></operator> <literal type="char" pos:line="33" pos:column="44">'\n'<pos:position pos:line="33" pos:column="48"/></literal></expr>)<pos:position pos:line="33" pos:column="49"/></condition><then pos:line="33" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">die<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><literal type="string" pos:line="34" pos:column="29">"missing newline after cat-blob response"<pos:position pos:line="34" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="72"/></expr_stmt></block></then></if>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="36" pos:column="9">ret<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <call><name pos:line="36" pos:column="15">buffer_tmpfile_prepare_to_read<pos:position pos:line="36" pos:column="45"/></name><argument_list pos:line="36" pos:column="45">(<argument><expr><operator pos:line="36" pos:column="46">&amp;<pos:position pos:line="36" pos:column="51"/></operator><name pos:line="36" pos:column="47">postimage<pos:position pos:line="36" pos:column="56"/></name></expr></argument>)<pos:position pos:line="36" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="58"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">ret<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">&lt;<pos:position pos:line="37" pos:column="21"/></operator> <literal type="number" pos:line="37" pos:column="19">0<pos:position pos:line="37" pos:column="20"/></literal></expr>)<pos:position pos:line="37" pos:column="21"/></condition><then pos:line="37" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="17">die<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><literal type="string" pos:line="38" pos:column="21">"cannot read temporary file for blob retrieval"<pos:position pos:line="38" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="70"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">strbuf_release<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><operator pos:line="39" pos:column="24">&amp;<pos:position pos:line="39" pos:column="29"/></operator><name><name pos:line="39" pos:column="25">preimage<pos:position pos:line="39" pos:column="33"/></name><operator pos:line="39" pos:column="33">.<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="34">buf<pos:position pos:line="39" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt>
	<return pos:line="40" pos:column="9">return <expr><name pos:line="40" pos:column="16">ret<pos:position pos:line="40" pos:column="19"/></name></expr>;<pos:position pos:line="40" pos:column="20"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
