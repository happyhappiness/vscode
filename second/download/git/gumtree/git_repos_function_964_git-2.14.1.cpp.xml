<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_964_git-2.14.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">is_executable<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">name<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">stat<pos:position pos:line="3" pos:column="20"/></name></name></type> <name pos:line="3" pos:column="21">st<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">stat<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">(<argument><expr><name pos:line="5" pos:column="18">name<pos:position pos:line="5" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="24">&amp;<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="25">st<pos:position pos:line="5" pos:column="27"/></name></expr></argument>)<pos:position pos:line="5" pos:column="28"/></argument_list></call> <operator pos:line="5" pos:column="29">||<pos:position pos:line="5" pos:column="31"/></operator> <comment type="block" pos:line="5" pos:column="32">/* stat, not lstat */</comment>
	    <operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">S_ISREG<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name><name pos:line="6" pos:column="22">st<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">.<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="25">st_mode<pos:position pos:line="6" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="34"/></condition><then pos:line="6" pos:column="34">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></return></block></then></if>

<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><call><name pos:line="9" pos:column="5">defined<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">GIT_WINDOWS_NATIVE<pos:position pos:line="9" pos:column="31"/></name></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr></cpp:if>
	<comment type="block" pos:line="10" pos:column="9">/*
	 * On Windows there is no executable bit. The file extension
	 * indicates whether it can be run as an executable, and Git
	 * has special-handling to detect scripts and launch them
	 * through the indicated script interpreter. We test for the
	 * file extension first because virus scanners may make
	 * it quite expensive to open many files.
	 */</comment>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">ends_with<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">name<pos:position pos:line="18" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="29">".exe"<pos:position pos:line="18" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="37"/></condition><then pos:line="18" pos:column="37">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">S_IXUSR<pos:position pos:line="19" pos:column="31"/></name></expr>;<pos:position pos:line="19" pos:column="32"/></return></block></then></if>

<block pos:line="21" pos:column="1">{
	<comment type="block" pos:line="22" pos:column="9">/*
	 * Now that we know it does not have an executable extension,
	 * peek into the file instead.
	 */</comment>
	<decl_stmt><decl><type><name pos:line="26" pos:column="9">char<pos:position pos:line="26" pos:column="13"/></name></type> <name><name pos:line="26" pos:column="14">buf<pos:position pos:line="26" pos:column="17"/></name><index pos:line="26" pos:column="17">[<expr><literal type="number" pos:line="26" pos:column="18">3<pos:position pos:line="26" pos:column="19"/></literal></expr>]<pos:position pos:line="26" pos:column="20"/></index></name> <init pos:line="26" pos:column="21">= <expr><block pos:line="26" pos:column="23">{ <expr><literal type="number" pos:line="26" pos:column="25">0<pos:position pos:line="26" pos:column="26"/></literal></expr> }<pos:position pos:line="26" pos:column="28"/></block></expr></init></decl>;<pos:position pos:line="26" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="27" pos:column="9">int<pos:position pos:line="27" pos:column="12"/></name></type> <name pos:line="27" pos:column="13">n<pos:position pos:line="27" pos:column="14"/></name></decl>;<pos:position pos:line="27" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="28" pos:column="9">int<pos:position pos:line="28" pos:column="12"/></name></type> <name pos:line="28" pos:column="13">fd<pos:position pos:line="28" pos:column="15"/></name> <init pos:line="28" pos:column="16">= <expr><call><name pos:line="28" pos:column="18">open<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">name<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">O_RDONLY<pos:position pos:line="28" pos:column="37"/></name></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="39"/></decl_stmt>
	<expr_stmt><expr><name><name pos:line="29" pos:column="9">st<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">.<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="12">st_mode<pos:position pos:line="29" pos:column="19"/></name></name> <operator pos:line="29" pos:column="20">&amp;=<pos:position pos:line="29" pos:column="26"/></operator> <operator pos:line="29" pos:column="23">~<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="24">S_IXUSR<pos:position pos:line="29" pos:column="31"/></name></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">fd<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">&gt;=<pos:position pos:line="30" pos:column="21"/></operator> <literal type="number" pos:line="30" pos:column="19">0<pos:position pos:line="30" pos:column="20"/></literal></expr>)<pos:position pos:line="30" pos:column="21"/></condition><then pos:line="30" pos:column="21"> <block pos:line="30" pos:column="22">{
		<expr_stmt><expr><name pos:line="31" pos:column="17">n<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <call><name pos:line="31" pos:column="21">read<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">fd<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="30">buf<pos:position pos:line="31" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="35">2<pos:position pos:line="31" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">n<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">==<pos:position pos:line="32" pos:column="25"/></operator> <literal type="number" pos:line="32" pos:column="26">2<pos:position pos:line="32" pos:column="27"/></literal></expr>)<pos:position pos:line="32" pos:column="28"/></condition><then pos:line="32" pos:column="28">
			<comment type="block" pos:line="33" pos:column="25">/* look for a she-bang */</comment>
			<block type="pseudo"><if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><operator pos:line="34" pos:column="29">!<pos:position pos:line="34" pos:column="30"/></operator><call><name pos:line="34" pos:column="30">strcmp<pos:position pos:line="34" pos:column="36"/></name><argument_list pos:line="34" pos:column="36">(<argument><expr><name pos:line="34" pos:column="37">buf<pos:position pos:line="34" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="42">"#!"<pos:position pos:line="34" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="48"/></condition><then pos:line="34" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="33">st<pos:position pos:line="35" pos:column="35"/></name><operator pos:line="35" pos:column="35">.<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="36">st_mode<pos:position pos:line="35" pos:column="43"/></name></name> <operator pos:line="35" pos:column="44">|=<pos:position pos:line="35" pos:column="46"/></operator> <name pos:line="35" pos:column="47">S_IXUSR<pos:position pos:line="35" pos:column="54"/></name></expr>;<pos:position pos:line="35" pos:column="55"/></expr_stmt></block></then></if></block></then></if>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">close<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">fd<pos:position pos:line="36" pos:column="25"/></name></expr></argument>)<pos:position pos:line="36" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>
}<pos:position pos:line="38" pos:column="2"/></block>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>
	<return pos:line="40" pos:column="9">return <expr><name><name pos:line="40" pos:column="16">st<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">.<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="19">st_mode<pos:position pos:line="40" pos:column="26"/></name></name> <operator pos:line="40" pos:column="27">&amp;<pos:position pos:line="40" pos:column="32"/></operator> <name pos:line="40" pos:column="29">S_IXUSR<pos:position pos:line="40" pos:column="36"/></name></expr>;<pos:position pos:line="40" pos:column="37"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
