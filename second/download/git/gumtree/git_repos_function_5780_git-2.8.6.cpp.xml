<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5780_git-2.8.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lock_packed_refs<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">flags<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">int<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">timeout_configured<pos:position pos:line="3" pos:column="38"/></name> <init pos:line="3" pos:column="39">= <expr><literal type="number" pos:line="3" pos:column="41">0<pos:position pos:line="3" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">int<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">timeout_value<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><literal type="number" pos:line="4" pos:column="36">1000<pos:position pos:line="4" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">packed_ref_cache<pos:position pos:line="6" pos:column="32"/></name></name> <modifier pos:line="6" pos:column="33">*<pos:position pos:line="6" pos:column="34"/></modifier></type><name pos:line="6" pos:column="34">packed_ref_cache<pos:position pos:line="6" pos:column="50"/></name></decl>;<pos:position pos:line="6" pos:column="51"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">timeout_configured<pos:position pos:line="8" pos:column="32"/></name></expr>)<pos:position pos:line="8" pos:column="33"/></condition><then pos:line="8" pos:column="33"> <block pos:line="8" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">git_config_get_int<pos:position pos:line="9" pos:column="35"/></name><argument_list pos:line="9" pos:column="35">(<argument><expr><literal type="string" pos:line="9" pos:column="36">"core.packedrefstimeout"<pos:position pos:line="9" pos:column="60"/></literal></expr></argument>, <argument><expr><operator pos:line="9" pos:column="62">&amp;<pos:position pos:line="9" pos:column="67"/></operator><name pos:line="9" pos:column="63">timeout_value<pos:position pos:line="9" pos:column="76"/></name></expr></argument>)<pos:position pos:line="9" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="78"/></expr_stmt>
		<expr_stmt><expr><name pos:line="10" pos:column="17">timeout_configured<pos:position pos:line="10" pos:column="35"/></name> <operator pos:line="10" pos:column="36">=<pos:position pos:line="10" pos:column="37"/></operator> <literal type="number" pos:line="10" pos:column="38">1<pos:position pos:line="10" pos:column="39"/></literal></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">hold_lock_file_for_update_timeout<pos:position pos:line="13" pos:column="46"/></name><argument_list pos:line="13" pos:column="46">(
			    <argument><expr><operator pos:line="14" pos:column="29">&amp;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="30">packlock<pos:position pos:line="14" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="40">git_path<pos:position pos:line="14" pos:column="48"/></name><argument_list pos:line="14" pos:column="48">(<argument><expr><literal type="string" pos:line="14" pos:column="49">"packed-refs"<pos:position pos:line="14" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr></argument>,
			    <argument><expr><name pos:line="15" pos:column="29">flags<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">timeout_value<pos:position pos:line="15" pos:column="49"/></name></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call> <operator pos:line="15" pos:column="51">&lt;<pos:position pos:line="15" pos:column="55"/></operator> <literal type="number" pos:line="15" pos:column="53">0<pos:position pos:line="15" pos:column="54"/></literal></expr>)<pos:position pos:line="15" pos:column="55"/></condition><then pos:line="15" pos:column="55">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">-<pos:position pos:line="16" pos:column="25"/></operator><literal type="number" pos:line="16" pos:column="25">1<pos:position pos:line="16" pos:column="26"/></literal></expr>;<pos:position pos:line="16" pos:column="27"/></return></block></then></if>
	<comment type="block" pos:line="17" pos:column="9">/*
	 * Get the current packed-refs while holding the lock.  If the
	 * packed-refs file has been modified since we last read it,
	 * this will automatically invalidate the cache and re-read
	 * the packed-refs file.
	 */</comment>
	<expr_stmt><expr><name pos:line="23" pos:column="9">packed_ref_cache<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">=<pos:position pos:line="23" pos:column="27"/></operator> <call><name pos:line="23" pos:column="28">get_packed_ref_cache<pos:position pos:line="23" pos:column="48"/></name><argument_list pos:line="23" pos:column="48">(<argument><expr><operator pos:line="23" pos:column="49">&amp;<pos:position pos:line="23" pos:column="54"/></operator><name pos:line="23" pos:column="50">ref_cache<pos:position pos:line="23" pos:column="59"/></name></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">packed_ref_cache<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">-&gt;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="27">lock<pos:position pos:line="24" pos:column="31"/></name></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <operator pos:line="24" pos:column="34">&amp;<pos:position pos:line="24" pos:column="39"/></operator><name pos:line="24" pos:column="35">packlock<pos:position pos:line="24" pos:column="43"/></name></expr>;<pos:position pos:line="24" pos:column="44"/></expr_stmt>
	<comment type="block" pos:line="25" pos:column="9">/* Increment the reference count to prevent it from being freed: */</comment>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">acquire_packed_ref_cache<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">packed_ref_cache<pos:position pos:line="26" pos:column="50"/></name></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="52"/></expr_stmt>
	<return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">0<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
