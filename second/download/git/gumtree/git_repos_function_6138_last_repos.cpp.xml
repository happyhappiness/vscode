<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6138_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">grep_tree<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">grep_opt<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">opt<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name><name pos:line="1" pos:column="50">struct<pos:position pos:line="1" pos:column="56"/></name> <name pos:line="1" pos:column="57">pathspec<pos:position pos:line="1" pos:column="65"/></name></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">pathspec<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>,
		     <parameter><decl><type><name><name pos:line="2" pos:column="22">struct<pos:position pos:line="2" pos:column="28"/></name> <name pos:line="2" pos:column="29">tree_desc<pos:position pos:line="2" pos:column="38"/></name></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">tree<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="46">struct<pos:position pos:line="2" pos:column="52"/></name> <name pos:line="2" pos:column="53">strbuf<pos:position pos:line="2" pos:column="59"/></name></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">base<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">int<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">tn_len<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="3" pos:column="22">int<pos:position pos:line="3" pos:column="25"/></name></type> <name pos:line="3" pos:column="26">check_attr<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="37"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">hit<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">enum<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">interesting<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">match<pos:position pos:line="6" pos:column="31"/></name> <init pos:line="6" pos:column="32">= <expr><name pos:line="6" pos:column="34">entry_not_interesting<pos:position pos:line="6" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">name_entry<pos:position pos:line="7" pos:column="26"/></name></name></type> <name pos:line="7" pos:column="27">entry<pos:position pos:line="7" pos:column="32"/></name></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">old_baselen<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><name><name pos:line="8" pos:column="27">base<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">-&gt;<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="33">len<pos:position pos:line="8" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">strbuf<pos:position pos:line="9" pos:column="22"/></name></name></type> <name pos:line="9" pos:column="23">name<pos:position pos:line="9" pos:column="27"/></name> <init pos:line="9" pos:column="28">= <expr><name pos:line="9" pos:column="30">STRBUF_INIT<pos:position pos:line="9" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">name_base_len<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><literal type="number" pos:line="10" pos:column="29">0<pos:position pos:line="10" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">super_prefix<pos:position pos:line="11" pos:column="25"/></name></expr>)<pos:position pos:line="11" pos:column="26"/></condition><then pos:line="11" pos:column="26"> <block pos:line="11" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">strbuf_addstr<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><operator pos:line="12" pos:column="31">&amp;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="32">name<pos:position pos:line="12" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="38">super_prefix<pos:position pos:line="12" pos:column="50"/></name></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">name_base_len<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">=<pos:position pos:line="13" pos:column="32"/></operator> <name><name pos:line="13" pos:column="33">name<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">.<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">len<pos:position pos:line="13" pos:column="41"/></name></name></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<while pos:line="16" pos:column="9">while <condition pos:line="16" pos:column="15">(<expr><call><name pos:line="16" pos:column="16">tree_entry<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">tree<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="33">&amp;<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="34">entry<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="41"/></condition> <block pos:line="16" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">int<pos:position pos:line="17" pos:column="20"/></name></type> <name pos:line="17" pos:column="21">te_len<pos:position pos:line="17" pos:column="27"/></name> <init pos:line="17" pos:column="28">= <expr><call><name pos:line="17" pos:column="30">tree_entry_len<pos:position pos:line="17" pos:column="44"/></name><argument_list pos:line="17" pos:column="44">(<argument><expr><operator pos:line="17" pos:column="45">&amp;<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="46">entry<pos:position pos:line="17" pos:column="51"/></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="53"/></decl_stmt>

		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">match<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">!=<pos:position pos:line="19" pos:column="29"/></operator> <name pos:line="19" pos:column="30">all_entries_interesting<pos:position pos:line="19" pos:column="53"/></name></expr>)<pos:position pos:line="19" pos:column="54"/></condition><then pos:line="19" pos:column="54"> <block pos:line="19" pos:column="55">{
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">strbuf_addstr<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">(<argument><expr><operator pos:line="20" pos:column="39">&amp;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="40">name<pos:position pos:line="20" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="46">base<pos:position pos:line="20" pos:column="50"/></name><operator pos:line="20" pos:column="50">-&gt;<pos:position pos:line="20" pos:column="55"/></operator><name pos:line="20" pos:column="52">buf<pos:position pos:line="20" pos:column="55"/></name></name> <operator pos:line="20" pos:column="56">+<pos:position pos:line="20" pos:column="57"/></operator> <name pos:line="20" pos:column="58">tn_len<pos:position pos:line="20" pos:column="64"/></name></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><name pos:line="21" pos:column="25">match<pos:position pos:line="21" pos:column="30"/></name> <operator pos:line="21" pos:column="31">=<pos:position pos:line="21" pos:column="32"/></operator> <call><name pos:line="21" pos:column="33">tree_entry_interesting<pos:position pos:line="21" pos:column="55"/></name><argument_list pos:line="21" pos:column="55">(<argument><expr><operator pos:line="21" pos:column="56">&amp;<pos:position pos:line="21" pos:column="61"/></operator><name pos:line="21" pos:column="57">entry<pos:position pos:line="21" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="64">&amp;<pos:position pos:line="21" pos:column="69"/></operator><name pos:line="21" pos:column="65">name<pos:position pos:line="21" pos:column="69"/></name></expr></argument>,
						       <argument><expr><literal type="number" pos:line="22" pos:column="56">0<pos:position pos:line="22" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="59">pathspec<pos:position pos:line="22" pos:column="67"/></name></expr></argument>)<pos:position pos:line="22" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">strbuf_setlen<pos:position pos:line="23" pos:column="38"/></name><argument_list pos:line="23" pos:column="38">(<argument><expr><operator pos:line="23" pos:column="39">&amp;<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="40">name<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="46">name_base_len<pos:position pos:line="23" pos:column="59"/></name></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="61"/></expr_stmt>

			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><name pos:line="25" pos:column="29">match<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">==<pos:position pos:line="25" pos:column="37"/></operator> <name pos:line="25" pos:column="38">all_entries_not_interesting<pos:position pos:line="25" pos:column="65"/></name></expr>)<pos:position pos:line="25" pos:column="66"/></condition><then pos:line="25" pos:column="66">
				<block type="pseudo"><break pos:line="26" pos:column="33">break;<pos:position pos:line="26" pos:column="39"/></break></block></then></if>
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><name pos:line="27" pos:column="29">match<pos:position pos:line="27" pos:column="34"/></name> <operator pos:line="27" pos:column="35">==<pos:position pos:line="27" pos:column="37"/></operator> <name pos:line="27" pos:column="38">entry_not_interesting<pos:position pos:line="27" pos:column="59"/></name></expr>)<pos:position pos:line="27" pos:column="60"/></condition><then pos:line="27" pos:column="60">
				<block type="pseudo"><continue pos:line="28" pos:column="33">continue;<pos:position pos:line="28" pos:column="42"/></continue></block></then></if>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="31" pos:column="17">strbuf_add<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">base<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="34">entry<pos:position pos:line="31" pos:column="39"/></name><operator pos:line="31" pos:column="39">.<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="40">path<pos:position pos:line="31" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="46">te_len<pos:position pos:line="31" pos:column="52"/></name></expr></argument>)<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="54"/></expr_stmt>

		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><call><name pos:line="33" pos:column="21">S_ISREG<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name><name pos:line="33" pos:column="29">entry<pos:position pos:line="33" pos:column="34"/></name><operator pos:line="33" pos:column="34">.<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="35">mode<pos:position pos:line="33" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="41"/></condition><then pos:line="33" pos:column="41"> <block pos:line="33" pos:column="42">{
			<expr_stmt><expr><name pos:line="34" pos:column="25">hit<pos:position pos:line="34" pos:column="28"/></name> <operator pos:line="34" pos:column="29">|=<pos:position pos:line="34" pos:column="31"/></operator> <call><name pos:line="34" pos:column="32">grep_oid<pos:position pos:line="34" pos:column="40"/></name><argument_list pos:line="34" pos:column="40">(<argument><expr><name pos:line="34" pos:column="41">opt<pos:position pos:line="34" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="46">entry<pos:position pos:line="34" pos:column="51"/></name><operator pos:line="34" pos:column="51">.<pos:position pos:line="34" pos:column="52"/></operator><name pos:line="34" pos:column="52">oid<pos:position pos:line="34" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="57">base<pos:position pos:line="34" pos:column="61"/></name><operator pos:line="34" pos:column="61">-&gt;<pos:position pos:line="34" pos:column="66"/></operator><name pos:line="34" pos:column="63">buf<pos:position pos:line="34" pos:column="66"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="68">tn_len<pos:position pos:line="34" pos:column="74"/></name></expr></argument>,
					 <argument><expr><ternary><condition><expr><name pos:line="35" pos:column="42">check_attr<pos:position pos:line="35" pos:column="52"/></name></expr> ?<pos:position pos:line="35" pos:column="54"/></condition><then pos:line="35" pos:column="54"> <expr><name><name pos:line="35" pos:column="55">base<pos:position pos:line="35" pos:column="59"/></name><operator pos:line="35" pos:column="59">-&gt;<pos:position pos:line="35" pos:column="64"/></operator><name pos:line="35" pos:column="61">buf<pos:position pos:line="35" pos:column="64"/></name></name> <operator pos:line="35" pos:column="65">+<pos:position pos:line="35" pos:column="66"/></operator> <name pos:line="35" pos:column="67">tn_len<pos:position pos:line="35" pos:column="73"/></name></expr> <pos:position pos:line="35" pos:column="74"/></then><else pos:line="35" pos:column="74">: <expr><name pos:line="35" pos:column="76">NULL<pos:position pos:line="35" pos:column="80"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="35" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="82"/></expr_stmt>
		}<pos:position pos:line="36" pos:column="18"/></block></then> <elseif pos:line="36" pos:column="19">else <if pos:line="36" pos:column="24">if <condition pos:line="36" pos:column="27">(<expr><call><name pos:line="36" pos:column="28">S_ISDIR<pos:position pos:line="36" pos:column="35"/></name><argument_list pos:line="36" pos:column="35">(<argument><expr><name><name pos:line="36" pos:column="36">entry<pos:position pos:line="36" pos:column="41"/></name><operator pos:line="36" pos:column="41">.<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="42">mode<pos:position pos:line="36" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="48"/></condition><then pos:line="36" pos:column="48"> <block pos:line="36" pos:column="49">{
			<decl_stmt><decl><type><name><name pos:line="37" pos:column="25">enum<pos:position pos:line="37" pos:column="29"/></name> <name pos:line="37" pos:column="30">object_type<pos:position pos:line="37" pos:column="41"/></name></name></type> <name pos:line="37" pos:column="42">type<pos:position pos:line="37" pos:column="46"/></name></decl>;<pos:position pos:line="37" pos:column="47"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="38" pos:column="25">struct<pos:position pos:line="38" pos:column="31"/></name> <name pos:line="38" pos:column="32">tree_desc<pos:position pos:line="38" pos:column="41"/></name></name></type> <name pos:line="38" pos:column="42">sub<pos:position pos:line="38" pos:column="45"/></name></decl>;<pos:position pos:line="38" pos:column="46"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="39" pos:column="25">void<pos:position pos:line="39" pos:column="29"/></name> <modifier pos:line="39" pos:column="30">*<pos:position pos:line="39" pos:column="31"/></modifier></type><name pos:line="39" pos:column="31">data<pos:position pos:line="39" pos:column="35"/></name></decl>;<pos:position pos:line="39" pos:column="36"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="40" pos:column="25">unsigned<pos:position pos:line="40" pos:column="33"/></name> <name pos:line="40" pos:column="34">long<pos:position pos:line="40" pos:column="38"/></name></type> <name pos:line="40" pos:column="39">size<pos:position pos:line="40" pos:column="43"/></name></decl>;<pos:position pos:line="40" pos:column="44"/></decl_stmt>

			<expr_stmt><expr><name pos:line="42" pos:column="25">data<pos:position pos:line="42" pos:column="29"/></name> <operator pos:line="42" pos:column="30">=<pos:position pos:line="42" pos:column="31"/></operator> <call><name pos:line="42" pos:column="32">lock_and_read_oid_file<pos:position pos:line="42" pos:column="54"/></name><argument_list pos:line="42" pos:column="54">(<argument><expr><name><name pos:line="42" pos:column="55">entry<pos:position pos:line="42" pos:column="60"/></name><operator pos:line="42" pos:column="60">.<pos:position pos:line="42" pos:column="61"/></operator><name pos:line="42" pos:column="61">oid<pos:position pos:line="42" pos:column="64"/></name></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="66">&amp;<pos:position pos:line="42" pos:column="71"/></operator><name pos:line="42" pos:column="67">type<pos:position pos:line="42" pos:column="71"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="73">&amp;<pos:position pos:line="42" pos:column="78"/></operator><name pos:line="42" pos:column="74">size<pos:position pos:line="42" pos:column="78"/></name></expr></argument>)<pos:position pos:line="42" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="80"/></expr_stmt>
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><operator pos:line="43" pos:column="29">!<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="30">data<pos:position pos:line="43" pos:column="34"/></name></expr>)<pos:position pos:line="43" pos:column="35"/></condition><then pos:line="43" pos:column="35">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="33">die<pos:position pos:line="44" pos:column="36"/></name><argument_list pos:line="44" pos:column="36">(<argument><expr><call><name pos:line="44" pos:column="37">_<pos:position pos:line="44" pos:column="38"/></name><argument_list pos:line="44" pos:column="38">(<argument><expr><literal type="string" pos:line="44" pos:column="39">"unable to read tree (%s)"<pos:position pos:line="44" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="66"/></argument_list></call></expr></argument>,
				    <argument><expr><call><name pos:line="45" pos:column="37">oid_to_hex<pos:position pos:line="45" pos:column="47"/></name><argument_list pos:line="45" pos:column="47">(<argument><expr><name><name pos:line="45" pos:column="48">entry<pos:position pos:line="45" pos:column="53"/></name><operator pos:line="45" pos:column="53">.<pos:position pos:line="45" pos:column="54"/></operator><name pos:line="45" pos:column="54">oid<pos:position pos:line="45" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="60"/></expr_stmt></block></then></if>

			<expr_stmt><expr><call><name pos:line="47" pos:column="25">strbuf_addch<pos:position pos:line="47" pos:column="37"/></name><argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">base<pos:position pos:line="47" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="47" pos:column="44">'/'<pos:position pos:line="47" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">init_tree_desc<pos:position pos:line="48" pos:column="39"/></name><argument_list pos:line="48" pos:column="39">(<argument><expr><operator pos:line="48" pos:column="40">&amp;<pos:position pos:line="48" pos:column="45"/></operator><name pos:line="48" pos:column="41">sub<pos:position pos:line="48" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="46">data<pos:position pos:line="48" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="52">size<pos:position pos:line="48" pos:column="56"/></name></expr></argument>)<pos:position pos:line="48" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name pos:line="49" pos:column="25">hit<pos:position pos:line="49" pos:column="28"/></name> <operator pos:line="49" pos:column="29">|=<pos:position pos:line="49" pos:column="31"/></operator> <call><name pos:line="49" pos:column="32">grep_tree<pos:position pos:line="49" pos:column="41"/></name><argument_list pos:line="49" pos:column="41">(<argument><expr><name pos:line="49" pos:column="42">opt<pos:position pos:line="49" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="47">pathspec<pos:position pos:line="49" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="57">&amp;<pos:position pos:line="49" pos:column="62"/></operator><name pos:line="49" pos:column="58">sub<pos:position pos:line="49" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="63">base<pos:position pos:line="49" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="69">tn_len<pos:position pos:line="49" pos:column="75"/></name></expr></argument>,
					 <argument><expr><name pos:line="50" pos:column="42">check_attr<pos:position pos:line="50" pos:column="52"/></name></expr></argument>)<pos:position pos:line="50" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">free<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">data<pos:position pos:line="51" pos:column="34"/></name></expr></argument>)<pos:position pos:line="51" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if></elseif> <elseif pos:line="52" pos:column="19">else <if pos:line="52" pos:column="24">if <condition pos:line="52" pos:column="27">(<expr><name pos:line="52" pos:column="28">recurse_submodules<pos:position pos:line="52" pos:column="46"/></name> <operator pos:line="52" pos:column="47">&amp;&amp;<pos:position pos:line="52" pos:column="57"/></operator> <call><name pos:line="52" pos:column="50">S_ISGITLINK<pos:position pos:line="52" pos:column="61"/></name><argument_list pos:line="52" pos:column="61">(<argument><expr><name><name pos:line="52" pos:column="62">entry<pos:position pos:line="52" pos:column="67"/></name><operator pos:line="52" pos:column="67">.<pos:position pos:line="52" pos:column="68"/></operator><name pos:line="52" pos:column="68">mode<pos:position pos:line="52" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="74"/></condition><then pos:line="52" pos:column="74"> <block pos:line="52" pos:column="75">{
			<expr_stmt><expr><name pos:line="53" pos:column="25">hit<pos:position pos:line="53" pos:column="28"/></name> <operator pos:line="53" pos:column="29">|=<pos:position pos:line="53" pos:column="31"/></operator> <call><name pos:line="53" pos:column="32">grep_submodule<pos:position pos:line="53" pos:column="46"/></name><argument_list pos:line="53" pos:column="46">(<argument><expr><name pos:line="53" pos:column="47">opt<pos:position pos:line="53" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="52">entry<pos:position pos:line="53" pos:column="57"/></name><operator pos:line="53" pos:column="57">.<pos:position pos:line="53" pos:column="58"/></operator><name pos:line="53" pos:column="58">oid<pos:position pos:line="53" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="63">base<pos:position pos:line="53" pos:column="67"/></name><operator pos:line="53" pos:column="67">-&gt;<pos:position pos:line="53" pos:column="72"/></operator><name pos:line="53" pos:column="69">buf<pos:position pos:line="53" pos:column="72"/></name></name></expr></argument>,
					      <argument><expr><name><name pos:line="54" pos:column="47">base<pos:position pos:line="54" pos:column="51"/></name><operator pos:line="54" pos:column="51">-&gt;<pos:position pos:line="54" pos:column="56"/></operator><name pos:line="54" pos:column="53">buf<pos:position pos:line="54" pos:column="56"/></name></name> <operator pos:line="54" pos:column="57">+<pos:position pos:line="54" pos:column="58"/></operator> <name pos:line="54" pos:column="59">tn_len<pos:position pos:line="54" pos:column="65"/></name></expr></argument>)<pos:position pos:line="54" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="67"/></expr_stmt>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if></elseif></if>

		<expr_stmt><expr><call><name pos:line="57" pos:column="17">strbuf_setlen<pos:position pos:line="57" pos:column="30"/></name><argument_list pos:line="57" pos:column="30">(<argument><expr><name pos:line="57" pos:column="31">base<pos:position pos:line="57" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="37">old_baselen<pos:position pos:line="57" pos:column="48"/></name></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="50"/></expr_stmt>

		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name pos:line="59" pos:column="21">hit<pos:position pos:line="59" pos:column="24"/></name> <operator pos:line="59" pos:column="25">&amp;&amp;<pos:position pos:line="59" pos:column="35"/></operator> <name><name pos:line="59" pos:column="28">opt<pos:position pos:line="59" pos:column="31"/></name><operator pos:line="59" pos:column="31">-&gt;<pos:position pos:line="59" pos:column="36"/></operator><name pos:line="59" pos:column="33">status_only<pos:position pos:line="59" pos:column="44"/></name></name></expr>)<pos:position pos:line="59" pos:column="45"/></condition><then pos:line="59" pos:column="45">
			<block type="pseudo"><break pos:line="60" pos:column="25">break;<pos:position pos:line="60" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="61" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="63" pos:column="9">strbuf_release<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">(<argument><expr><operator pos:line="63" pos:column="24">&amp;<pos:position pos:line="63" pos:column="29"/></operator><name pos:line="63" pos:column="25">name<pos:position pos:line="63" pos:column="29"/></name></expr></argument>)<pos:position pos:line="63" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="31"/></expr_stmt>
	<return pos:line="64" pos:column="9">return <expr><name pos:line="64" pos:column="16">hit<pos:position pos:line="64" pos:column="19"/></name></expr>;<pos:position pos:line="64" pos:column="20"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
