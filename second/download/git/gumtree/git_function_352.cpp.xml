<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_352.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">run_remote_archiver<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">argc<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier><modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">argv<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
			       <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">remote<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="52">const<pos:position pos:line="2" pos:column="57"/></specifier> <name pos:line="2" pos:column="58">char<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">exec<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>,
			       <parameter><decl><type><specifier pos:line="3" pos:column="32">const<pos:position pos:line="3" pos:column="37"/></specifier> <name pos:line="3" pos:column="38">char<pos:position pos:line="3" pos:column="42"/></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">name_hint<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="54"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">buf<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name><name pos:line="6" pos:column="13">fd<pos:position pos:line="6" pos:column="15"/></name><index pos:line="6" pos:column="15">[<expr><literal type="number" pos:line="6" pos:column="16">2<pos:position pos:line="6" pos:column="17"/></literal></expr>]<pos:position pos:line="6" pos:column="18"/></index></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="20">i<pos:position pos:line="6" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="23">rv<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">transport<pos:position pos:line="7" pos:column="25"/></name></name> <modifier pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></modifier></type><name pos:line="7" pos:column="27">transport<pos:position pos:line="7" pos:column="36"/></name></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">remote<pos:position pos:line="8" pos:column="22"/></name></name> <modifier pos:line="8" pos:column="23">*<pos:position pos:line="8" pos:column="24"/></modifier></type><name pos:line="8" pos:column="24">_remote<pos:position pos:line="8" pos:column="31"/></name></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">_remote<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <call><name pos:line="10" pos:column="19">remote_get<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">remote<pos:position pos:line="10" pos:column="36"/></name></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name><name pos:line="11" pos:column="14">_remote<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">-&gt;<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="23">url<pos:position pos:line="11" pos:column="26"/></name><index pos:line="11" pos:column="26">[<expr><literal type="number" pos:line="11" pos:column="27">0<pos:position pos:line="11" pos:column="28"/></literal></expr>]<pos:position pos:line="11" pos:column="29"/></index></name></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">die<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><call><name pos:line="12" pos:column="21">_<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><literal type="string" pos:line="12" pos:column="23">"git archive: Remote with no URL"<pos:position pos:line="12" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="59"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="13" pos:column="9">transport<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <call><name pos:line="13" pos:column="21">transport_get<pos:position pos:line="13" pos:column="34"/></name><argument_list pos:line="13" pos:column="34">(<argument><expr><name pos:line="13" pos:column="35">_remote<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="44">_remote<pos:position pos:line="13" pos:column="51"/></name><operator pos:line="13" pos:column="51">-&gt;<pos:position pos:line="13" pos:column="56"/></operator><name pos:line="13" pos:column="53">url<pos:position pos:line="13" pos:column="56"/></name><index pos:line="13" pos:column="56">[<expr><literal type="number" pos:line="13" pos:column="57">0<pos:position pos:line="13" pos:column="58"/></literal></expr>]<pos:position pos:line="13" pos:column="59"/></index></name></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">transport_connect<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><name pos:line="14" pos:column="27">transport<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="38">"git-upload-archive"<pos:position pos:line="14" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="60">exec<pos:position pos:line="14" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="66">fd<pos:position pos:line="14" pos:column="68"/></name></expr></argument>)<pos:position pos:line="14" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="70"/></expr_stmt>

	<comment type="block" pos:line="16" pos:column="9">/*
	 * Inject a fake --format field at the beginning of the
	 * arguments, with the format inferred from our output
	 * filename. This way explicit --format options can override
	 * it.
	 */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">name_hint<pos:position pos:line="22" pos:column="22"/></name></expr>)<pos:position pos:line="22" pos:column="23"/></condition><then pos:line="22" pos:column="23"> <block pos:line="22" pos:column="24">{
		<decl_stmt><decl><type><specifier pos:line="23" pos:column="17">const<pos:position pos:line="23" pos:column="22"/></specifier> <name pos:line="23" pos:column="23">char<pos:position pos:line="23" pos:column="27"/></name> <modifier pos:line="23" pos:column="28">*<pos:position pos:line="23" pos:column="29"/></modifier></type><name pos:line="23" pos:column="29">format<pos:position pos:line="23" pos:column="35"/></name> <init pos:line="23" pos:column="36">= <expr><call><name pos:line="23" pos:column="38">archive_format_from_filename<pos:position pos:line="23" pos:column="66"/></name><argument_list pos:line="23" pos:column="66">(<argument><expr><name pos:line="23" pos:column="67">name_hint<pos:position pos:line="23" pos:column="76"/></name></expr></argument>)<pos:position pos:line="23" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="78"/></decl_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">format<pos:position pos:line="24" pos:column="27"/></name></expr>)<pos:position pos:line="24" pos:column="28"/></condition><then pos:line="24" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">packet_write<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">(<argument><expr><name><name pos:line="25" pos:column="38">fd<pos:position pos:line="25" pos:column="40"/></name><index pos:line="25" pos:column="40">[<expr><literal type="number" pos:line="25" pos:column="41">1<pos:position pos:line="25" pos:column="42"/></literal></expr>]<pos:position pos:line="25" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="45">"argument --format=%s\n"<pos:position pos:line="25" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="71">format<pos:position pos:line="25" pos:column="77"/></name></expr></argument>)<pos:position pos:line="25" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="79"/></expr_stmt></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<for pos:line="27" pos:column="9">for <control pos:line="27" pos:column="13">(<init><expr><name pos:line="27" pos:column="14">i<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <literal type="number" pos:line="27" pos:column="18">1<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></init> <condition><expr><name pos:line="27" pos:column="21">i<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="25">argc<pos:position pos:line="27" pos:column="29"/></name></expr>;<pos:position pos:line="27" pos:column="30"/></condition> <incr><expr><name pos:line="27" pos:column="31">i<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">++<pos:position pos:line="27" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="27" pos:column="35"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="17">packet_write<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name><name pos:line="28" pos:column="30">fd<pos:position pos:line="28" pos:column="32"/></name><index pos:line="28" pos:column="32">[<expr><literal type="number" pos:line="28" pos:column="33">1<pos:position pos:line="28" pos:column="34"/></literal></expr>]<pos:position pos:line="28" pos:column="35"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="37">"argument %s\n"<pos:position pos:line="28" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="54">argv<pos:position pos:line="28" pos:column="58"/></name><index pos:line="28" pos:column="58">[<expr><name pos:line="28" pos:column="59">i<pos:position pos:line="28" pos:column="60"/></name></expr>]<pos:position pos:line="28" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="63"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">packet_flush<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name><name pos:line="29" pos:column="22">fd<pos:position pos:line="29" pos:column="24"/></name><index pos:line="29" pos:column="24">[<expr><literal type="number" pos:line="29" pos:column="25">1<pos:position pos:line="29" pos:column="26"/></literal></expr>]<pos:position pos:line="29" pos:column="27"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>

	<expr_stmt><expr><name pos:line="31" pos:column="9">buf<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">=<pos:position pos:line="31" pos:column="14"/></operator> <call><name pos:line="31" pos:column="15">packet_read_line<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><name><name pos:line="31" pos:column="32">fd<pos:position pos:line="31" pos:column="34"/></name><index pos:line="31" pos:column="34">[<expr><literal type="number" pos:line="31" pos:column="35">0<pos:position pos:line="31" pos:column="36"/></literal></expr>]<pos:position pos:line="31" pos:column="37"/></index></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="39">NULL<pos:position pos:line="31" pos:column="43"/></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">buf<pos:position pos:line="32" pos:column="17"/></name></expr>)<pos:position pos:line="32" pos:column="18"/></condition><then pos:line="32" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="17">die<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><call><name pos:line="33" pos:column="21">_<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><literal type="string" pos:line="33" pos:column="23">"git archive: expected ACK/NAK, got EOF"<pos:position pos:line="33" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="66"/></expr_stmt></block></then></if>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><call><name pos:line="34" pos:column="13">strcmp<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><name pos:line="34" pos:column="20">buf<pos:position pos:line="34" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="25">"ACK"<pos:position pos:line="34" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="32"/></condition><then pos:line="34" pos:column="32"> <block pos:line="34" pos:column="33">{
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><call><name pos:line="35" pos:column="21">starts_with<pos:position pos:line="35" pos:column="32"/></name><argument_list pos:line="35" pos:column="32">(<argument><expr><name pos:line="35" pos:column="33">buf<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="38">"NACK "<pos:position pos:line="35" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="47"/></condition><then pos:line="35" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="25">die<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><call><name pos:line="36" pos:column="29">_<pos:position pos:line="36" pos:column="30"/></name><argument_list pos:line="36" pos:column="30">(<argument><expr><literal type="string" pos:line="36" pos:column="31">"git archive: NACK %s"<pos:position pos:line="36" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="36" pos:column="56">buf<pos:position pos:line="36" pos:column="59"/></name> <operator pos:line="36" pos:column="60">+<pos:position pos:line="36" pos:column="61"/></operator> <literal type="number" pos:line="36" pos:column="62">5<pos:position pos:line="36" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="65"/></expr_stmt></block></then></if>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><call><name pos:line="37" pos:column="21">starts_with<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">buf<pos:position pos:line="37" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="38">"ERR "<pos:position pos:line="37" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="46"/></condition><then pos:line="37" pos:column="46">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="25">die<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">(<argument><expr><call><name pos:line="38" pos:column="29">_<pos:position pos:line="38" pos:column="30"/></name><argument_list pos:line="38" pos:column="30">(<argument><expr><literal type="string" pos:line="38" pos:column="31">"remote error: %s"<pos:position pos:line="38" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="38" pos:column="52">buf<pos:position pos:line="38" pos:column="55"/></name> <operator pos:line="38" pos:column="56">+<pos:position pos:line="38" pos:column="57"/></operator> <literal type="number" pos:line="38" pos:column="58">4<pos:position pos:line="38" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="61"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">die<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><call><name pos:line="39" pos:column="21">_<pos:position pos:line="39" pos:column="22"/></name><argument_list pos:line="39" pos:column="22">(<argument><expr><literal type="string" pos:line="39" pos:column="23">"git archive: protocol error"<pos:position pos:line="39" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="55"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><call><name pos:line="42" pos:column="13">packet_read_line<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name><name pos:line="42" pos:column="30">fd<pos:position pos:line="42" pos:column="32"/></name><index pos:line="42" pos:column="32">[<expr><literal type="number" pos:line="42" pos:column="33">0<pos:position pos:line="42" pos:column="34"/></literal></expr>]<pos:position pos:line="42" pos:column="35"/></index></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="37">NULL<pos:position pos:line="42" pos:column="41"/></name></expr></argument>)<pos:position pos:line="42" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="43"/></condition><then pos:line="42" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="17">die<pos:position pos:line="43" pos:column="20"/></name><argument_list pos:line="43" pos:column="20">(<argument><expr><call><name pos:line="43" pos:column="21">_<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><literal type="string" pos:line="43" pos:column="23">"git archive: expected a flush"<pos:position pos:line="43" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="57"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="45" pos:column="9">/* Now, start reading from fd[0] and spit it out to stdout */</comment>
	<expr_stmt><expr><name pos:line="46" pos:column="9">rv<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">=<pos:position pos:line="46" pos:column="13"/></operator> <call><name pos:line="46" pos:column="14">recv_sideband<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">(<argument><expr><literal type="string" pos:line="46" pos:column="28">"archive"<pos:position pos:line="46" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="39">fd<pos:position pos:line="46" pos:column="41"/></name><index pos:line="46" pos:column="41">[<expr><literal type="number" pos:line="46" pos:column="42">0<pos:position pos:line="46" pos:column="43"/></literal></expr>]<pos:position pos:line="46" pos:column="44"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="46">1<pos:position pos:line="46" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name pos:line="47" pos:column="9">rv<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">|=<pos:position pos:line="47" pos:column="14"/></operator> <call><name pos:line="47" pos:column="15">transport_disconnect<pos:position pos:line="47" pos:column="35"/></name><argument_list pos:line="47" pos:column="35">(<argument><expr><name pos:line="47" pos:column="36">transport<pos:position pos:line="47" pos:column="45"/></name></expr></argument>)<pos:position pos:line="47" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt>

	<return pos:line="49" pos:column="9">return <expr><operator pos:line="49" pos:column="16">!<pos:position pos:line="49" pos:column="17"/></operator><operator pos:line="49" pos:column="17">!<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">rv<pos:position pos:line="49" pos:column="20"/></name></expr>;<pos:position pos:line="49" pos:column="21"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
