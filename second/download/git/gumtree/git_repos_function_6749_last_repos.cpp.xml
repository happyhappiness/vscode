<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6749_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mingw_socket<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">int<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">domain<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">type<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">protocol<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">sockfd<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">SOCKET<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">s<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">ensure_socket_initialization<pos:position pos:line="6" pos:column="37"/></name><argument_list pos:line="6" pos:column="37">()<pos:position pos:line="6" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name pos:line="7" pos:column="9">s<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">=<pos:position pos:line="7" pos:column="12"/></operator> <call><name pos:line="7" pos:column="13">WSASocket<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">domain<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="31">type<pos:position pos:line="7" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="37">protocol<pos:position pos:line="7" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="47">NULL<pos:position pos:line="7" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="53">0<pos:position pos:line="7" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="56">0<pos:position pos:line="7" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="59"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">s<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">==<pos:position pos:line="8" pos:column="17"/></operator> <name pos:line="8" pos:column="18">INVALID_SOCKET<pos:position pos:line="8" pos:column="32"/></name></expr>)<pos:position pos:line="8" pos:column="33"/></condition><then pos:line="8" pos:column="33"> <block pos:line="8" pos:column="34">{
		<comment type="block" pos:line="9" pos:column="17">/*
		 * WSAGetLastError() values are regular BSD error codes
		 * biased by WSABASEERR.
		 * However, strerror() does not know about networking
		 * specific errors, which are values beginning at 38 or so.
		 * Therefore, we choose to leave the biased error code
		 * in errno so that _if_ someone looks up the code somewhere,
		 * then it is at least the number that are usually listed.
		 */</comment>
		<expr_stmt><expr><name pos:line="18" pos:column="17">errno<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">=<pos:position pos:line="18" pos:column="24"/></operator> <call><name pos:line="18" pos:column="25">WSAGetLastError<pos:position pos:line="18" pos:column="40"/></name><argument_list pos:line="18" pos:column="40">()<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
		<return pos:line="19" pos:column="17">return <expr><operator pos:line="19" pos:column="24">-<pos:position pos:line="19" pos:column="25"/></operator><literal type="number" pos:line="19" pos:column="25">1<pos:position pos:line="19" pos:column="26"/></literal></expr>;<pos:position pos:line="19" pos:column="27"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<comment type="block" pos:line="21" pos:column="9">/* convert into a file descriptor */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">(<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">sockfd<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <call><name pos:line="22" pos:column="23">_open_osfhandle<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><name pos:line="22" pos:column="39">s<pos:position pos:line="22" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="42">O_RDWR<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">|<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="49">O_BINARY<pos:position pos:line="22" pos:column="57"/></name></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></call><operator pos:line="22" pos:column="58">)<pos:position pos:line="22" pos:column="59"/></operator> <operator pos:line="22" pos:column="60">&lt;<pos:position pos:line="22" pos:column="64"/></operator> <literal type="number" pos:line="22" pos:column="62">0<pos:position pos:line="22" pos:column="63"/></literal></expr>)<pos:position pos:line="22" pos:column="64"/></condition><then pos:line="22" pos:column="64"> <block pos:line="22" pos:column="65">{
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">closesocket<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">s<pos:position pos:line="23" pos:column="30"/></name></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
		<return pos:line="24" pos:column="17">return <expr><call><name pos:line="24" pos:column="24">error<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><literal type="string" pos:line="24" pos:column="30">"unable to make a socket file descriptor: %s"<pos:position pos:line="24" pos:column="75"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="25" pos:column="25">strerror<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">errno<pos:position pos:line="25" pos:column="39"/></name></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="42"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">sockfd<pos:position pos:line="27" pos:column="22"/></name></expr>;<pos:position pos:line="27" pos:column="23"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
