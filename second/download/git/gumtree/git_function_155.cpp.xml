<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_155.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">read_ref_at<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">refname<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">unsigned<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">long<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">at_time<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">cnt<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">unsigned<pos:position pos:line="2" pos:column="25"/></name> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">sha1<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier><modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">msg<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="3" pos:column="17">unsigned<pos:position pos:line="3" pos:column="25"/></name> <name pos:line="3" pos:column="26">long<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">cutoff_time<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="45">int<pos:position pos:line="3" pos:column="48"/></name> <modifier pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></modifier></type><name pos:line="3" pos:column="50">cutoff_tz<pos:position pos:line="3" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="61">int<pos:position pos:line="3" pos:column="64"/></name> <modifier pos:line="3" pos:column="65">*<pos:position pos:line="3" pos:column="66"/></modifier></type><name pos:line="3" pos:column="66">cutoff_cnt<pos:position pos:line="3" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="77"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">logfile<pos:position pos:line="5" pos:column="28"/></name></decl>, <modifier pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="31">logdata<pos:position pos:line="5" pos:column="38"/></name></decl>, <modifier pos:line="5" pos:column="40">*<pos:position pos:line="5" pos:column="41"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="41">logend<pos:position pos:line="5" pos:column="47"/></name></decl>, <modifier pos:line="5" pos:column="49">*<pos:position pos:line="5" pos:column="50"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="50">rec<pos:position pos:line="5" pos:column="53"/></name></decl>, <modifier pos:line="5" pos:column="55">*<pos:position pos:line="5" pos:column="56"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="56">lastgt<pos:position pos:line="5" pos:column="62"/></name></decl>, <modifier pos:line="5" pos:column="64">*<pos:position pos:line="5" pos:column="65"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="65">lastrec<pos:position pos:line="5" pos:column="72"/></name></decl>;<pos:position pos:line="5" pos:column="73"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">tz_c<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">logfd<pos:position pos:line="7" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="20">tz<pos:position pos:line="7" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="24">reccnt<pos:position pos:line="7" pos:column="30"/></name> <init pos:line="7" pos:column="31">= <expr><literal type="number" pos:line="7" pos:column="33">0<pos:position pos:line="7" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">stat<pos:position pos:line="8" pos:column="20"/></name></name></type> <name pos:line="8" pos:column="21">st<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name> <name pos:line="9" pos:column="18">long<pos:position pos:line="9" pos:column="22"/></name></type> <name pos:line="9" pos:column="23">date<pos:position pos:line="9" pos:column="27"/></name></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">unsigned<pos:position pos:line="10" pos:column="17"/></name> <name pos:line="10" pos:column="18">char<pos:position pos:line="10" pos:column="22"/></name></type> <name><name pos:line="10" pos:column="23">logged_sha1<pos:position pos:line="10" pos:column="34"/></name><index pos:line="10" pos:column="34">[<expr><literal type="number" pos:line="10" pos:column="35">20<pos:position pos:line="10" pos:column="37"/></literal></expr>]<pos:position pos:line="10" pos:column="38"/></index></name></decl>;<pos:position pos:line="10" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">void<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">log_mapped<pos:position pos:line="11" pos:column="25"/></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">size_t<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">mapsz<pos:position pos:line="12" pos:column="21"/></name></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">logfile<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <call><name pos:line="14" pos:column="19">git_path<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><literal type="string" pos:line="14" pos:column="28">"logs/%s"<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="39">refname<pos:position pos:line="14" pos:column="46"/></name></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">logfd<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <call><name pos:line="15" pos:column="17">open<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">logfile<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="31">O_RDONLY<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="41">0<pos:position pos:line="15" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">logfd<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">&lt;<pos:position pos:line="16" pos:column="23"/></operator> <literal type="number" pos:line="16" pos:column="21">0<pos:position pos:line="16" pos:column="22"/></literal></expr>)<pos:position pos:line="16" pos:column="23"/></condition><then pos:line="16" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">die_errno<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><literal type="string" pos:line="17" pos:column="27">"Unable to read log '%s'"<pos:position pos:line="17" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="54">logfile<pos:position pos:line="17" pos:column="61"/></name></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="63"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">fstat<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><name pos:line="18" pos:column="15">logfd<pos:position pos:line="18" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="22">&amp;<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="23">st<pos:position pos:line="18" pos:column="25"/></name></expr></argument>)<pos:position pos:line="18" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><name><name pos:line="19" pos:column="14">st<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">.<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">st_size<pos:position pos:line="19" pos:column="24"/></name></name></expr>)<pos:position pos:line="19" pos:column="25"/></condition><then pos:line="19" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">die<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><literal type="string" pos:line="20" pos:column="21">"Log %s is empty."<pos:position pos:line="20" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="41">logfile<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="21" pos:column="9">mapsz<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">xsize_t<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name><name pos:line="21" pos:column="25">st<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">.<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="28">st_size<pos:position pos:line="21" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">log_mapped<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <call><name pos:line="22" pos:column="22">xmmap<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">NULL<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">mapsz<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="41">PROT_READ<pos:position pos:line="22" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="52">MAP_PRIVATE<pos:position pos:line="22" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="65">logfd<pos:position pos:line="22" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="72">0<pos:position pos:line="22" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="75"/></expr_stmt>
	<expr_stmt><expr><name pos:line="23" pos:column="9">logdata<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">log_mapped<pos:position pos:line="23" pos:column="29"/></name></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">close<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><name pos:line="24" pos:column="15">logfd<pos:position pos:line="24" pos:column="20"/></name></expr></argument>)<pos:position pos:line="24" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>

	<expr_stmt><expr><name pos:line="26" pos:column="9">lastrec<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">=<pos:position pos:line="26" pos:column="18"/></operator> <name pos:line="26" pos:column="19">NULL<pos:position pos:line="26" pos:column="23"/></name></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name pos:line="27" pos:column="9">rec<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <name pos:line="27" pos:column="15">logend<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">logdata<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">+<pos:position pos:line="27" pos:column="33"/></operator> <name><name pos:line="27" pos:column="34">st<pos:position pos:line="27" pos:column="36"/></name><operator pos:line="27" pos:column="36">.<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="37">st_size<pos:position pos:line="27" pos:column="44"/></name></name></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
	<while pos:line="28" pos:column="9">while <condition pos:line="28" pos:column="15">(<expr><name pos:line="28" pos:column="16">logdata<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">&lt;<pos:position pos:line="28" pos:column="28"/></operator> <name pos:line="28" pos:column="26">rec<pos:position pos:line="28" pos:column="29"/></name></expr>)<pos:position pos:line="28" pos:column="30"/></condition> <block pos:line="28" pos:column="31">{
		<expr_stmt><expr><name pos:line="29" pos:column="17">reccnt<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">++<pos:position pos:line="29" pos:column="25"/></operator></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">logdata<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">&lt;<pos:position pos:line="30" pos:column="33"/></operator> <name pos:line="30" pos:column="31">rec<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">&amp;&amp;<pos:position pos:line="30" pos:column="45"/></operator> <operator pos:line="30" pos:column="38">*<pos:position pos:line="30" pos:column="39"/></operator><operator pos:line="30" pos:column="39">(<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="40">rec<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">-<pos:position pos:line="30" pos:column="44"/></operator><literal type="number" pos:line="30" pos:column="44">1<pos:position pos:line="30" pos:column="45"/></literal><operator pos:line="30" pos:column="45">)<pos:position pos:line="30" pos:column="46"/></operator> <operator pos:line="30" pos:column="47">==<pos:position pos:line="30" pos:column="49"/></operator> <literal type="char" pos:line="30" pos:column="50">'\n'<pos:position pos:line="30" pos:column="54"/></literal></expr>)<pos:position pos:line="30" pos:column="55"/></condition><then pos:line="30" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="25">rec<pos:position pos:line="31" pos:column="28"/></name><operator pos:line="31" pos:column="28">--<pos:position pos:line="31" pos:column="30"/></operator></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="32" pos:column="17">lastgt<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <name pos:line="32" pos:column="26">NULL<pos:position pos:line="32" pos:column="30"/></name></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt>
		<while pos:line="33" pos:column="17">while <condition pos:line="33" pos:column="23">(<expr><name pos:line="33" pos:column="24">logdata<pos:position pos:line="33" pos:column="31"/></name> <operator pos:line="33" pos:column="32">&lt;<pos:position pos:line="33" pos:column="36"/></operator> <name pos:line="33" pos:column="34">rec<pos:position pos:line="33" pos:column="37"/></name> <operator pos:line="33" pos:column="38">&amp;&amp;<pos:position pos:line="33" pos:column="48"/></operator> <operator pos:line="33" pos:column="41">*<pos:position pos:line="33" pos:column="42"/></operator><operator pos:line="33" pos:column="42">(<pos:position pos:line="33" pos:column="43"/></operator><name pos:line="33" pos:column="43">rec<pos:position pos:line="33" pos:column="46"/></name><operator pos:line="33" pos:column="46">-<pos:position pos:line="33" pos:column="47"/></operator><literal type="number" pos:line="33" pos:column="47">1<pos:position pos:line="33" pos:column="48"/></literal><operator pos:line="33" pos:column="48">)<pos:position pos:line="33" pos:column="49"/></operator> <operator pos:line="33" pos:column="50">!=<pos:position pos:line="33" pos:column="52"/></operator> <literal type="char" pos:line="33" pos:column="53">'\n'<pos:position pos:line="33" pos:column="57"/></literal></expr>)<pos:position pos:line="33" pos:column="58"/></condition> <block pos:line="33" pos:column="59">{
			<expr_stmt><expr><name pos:line="34" pos:column="25">rec<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">--<pos:position pos:line="34" pos:column="30"/></operator></expr>;<pos:position pos:line="34" pos:column="31"/></expr_stmt>
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><operator pos:line="35" pos:column="29">*<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="30">rec<pos:position pos:line="35" pos:column="33"/></name> <operator pos:line="35" pos:column="34">==<pos:position pos:line="35" pos:column="36"/></operator> <literal type="char" pos:line="35" pos:column="37">'&gt;'<pos:position pos:line="35" pos:column="43"/></literal></expr>)<pos:position pos:line="35" pos:column="41"/></condition><then pos:line="35" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="33">lastgt<pos:position pos:line="36" pos:column="39"/></name> <operator pos:line="36" pos:column="40">=<pos:position pos:line="36" pos:column="41"/></operator> <name pos:line="36" pos:column="42">rec<pos:position pos:line="36" pos:column="45"/></name></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt></block></then></if>
		}<pos:position pos:line="37" pos:column="18"/></block></while>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><operator pos:line="38" pos:column="21">!<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="22">lastgt<pos:position pos:line="38" pos:column="28"/></name></expr>)<pos:position pos:line="38" pos:column="29"/></condition><then pos:line="38" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="25">die<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><literal type="string" pos:line="39" pos:column="29">"Log %s is corrupt."<pos:position pos:line="39" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="51">logfile<pos:position pos:line="39" pos:column="58"/></name></expr></argument>)<pos:position pos:line="39" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="60"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="40" pos:column="17">date<pos:position pos:line="40" pos:column="21"/></name> <operator pos:line="40" pos:column="22">=<pos:position pos:line="40" pos:column="23"/></operator> <call><name pos:line="40" pos:column="24">strtoul<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">(<argument><expr><name pos:line="40" pos:column="32">lastgt<pos:position pos:line="40" pos:column="38"/></name> <operator pos:line="40" pos:column="39">+<pos:position pos:line="40" pos:column="40"/></operator> <literal type="number" pos:line="40" pos:column="41">1<pos:position pos:line="40" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="40" pos:column="44">&amp;<pos:position pos:line="40" pos:column="49"/></operator><name pos:line="40" pos:column="45">tz_c<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="51">10<pos:position pos:line="40" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">date<pos:position pos:line="41" pos:column="25"/></name> <operator pos:line="41" pos:column="26">&lt;=<pos:position pos:line="41" pos:column="31"/></operator> <name pos:line="41" pos:column="29">at_time<pos:position pos:line="41" pos:column="36"/></name> <operator pos:line="41" pos:column="37">||<pos:position pos:line="41" pos:column="39"/></operator> <name pos:line="41" pos:column="40">cnt<pos:position pos:line="41" pos:column="43"/></name> <operator pos:line="41" pos:column="44">==<pos:position pos:line="41" pos:column="46"/></operator> <literal type="number" pos:line="41" pos:column="47">0<pos:position pos:line="41" pos:column="48"/></literal></expr>)<pos:position pos:line="41" pos:column="49"/></condition><then pos:line="41" pos:column="49"> <block pos:line="41" pos:column="50">{
			<expr_stmt><expr><name pos:line="42" pos:column="25">tz<pos:position pos:line="42" pos:column="27"/></name> <operator pos:line="42" pos:column="28">=<pos:position pos:line="42" pos:column="29"/></operator> <call><name pos:line="42" pos:column="30">strtoul<pos:position pos:line="42" pos:column="37"/></name><argument_list pos:line="42" pos:column="37">(<argument><expr><name pos:line="42" pos:column="38">tz_c<pos:position pos:line="42" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="44">NULL<pos:position pos:line="42" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="50">10<pos:position pos:line="42" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="54"/></expr_stmt>
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><name pos:line="43" pos:column="29">msg<pos:position pos:line="43" pos:column="32"/></name></expr>)<pos:position pos:line="43" pos:column="33"/></condition><then pos:line="43" pos:column="33">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="44" pos:column="33">*<pos:position pos:line="44" pos:column="34"/></operator><name pos:line="44" pos:column="34">msg<pos:position pos:line="44" pos:column="37"/></name> <operator pos:line="44" pos:column="38">=<pos:position pos:line="44" pos:column="39"/></operator> <call><name pos:line="44" pos:column="40">ref_msg<pos:position pos:line="44" pos:column="47"/></name><argument_list pos:line="44" pos:column="47">(<argument><expr><name pos:line="44" pos:column="48">rec<pos:position pos:line="44" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="53">logend<pos:position pos:line="44" pos:column="59"/></name></expr></argument>)<pos:position pos:line="44" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="61"/></expr_stmt></block></then></if>
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><name pos:line="45" pos:column="29">cutoff_time<pos:position pos:line="45" pos:column="40"/></name></expr>)<pos:position pos:line="45" pos:column="41"/></condition><then pos:line="45" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="46" pos:column="33">*<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="34">cutoff_time<pos:position pos:line="46" pos:column="45"/></name> <operator pos:line="46" pos:column="46">=<pos:position pos:line="46" pos:column="47"/></operator> <name pos:line="46" pos:column="48">date<pos:position pos:line="46" pos:column="52"/></name></expr>;<pos:position pos:line="46" pos:column="53"/></expr_stmt></block></then></if>
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><name pos:line="47" pos:column="29">cutoff_tz<pos:position pos:line="47" pos:column="38"/></name></expr>)<pos:position pos:line="47" pos:column="39"/></condition><then pos:line="47" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="48" pos:column="33">*<pos:position pos:line="48" pos:column="34"/></operator><name pos:line="48" pos:column="34">cutoff_tz<pos:position pos:line="48" pos:column="43"/></name> <operator pos:line="48" pos:column="44">=<pos:position pos:line="48" pos:column="45"/></operator> <name pos:line="48" pos:column="46">tz<pos:position pos:line="48" pos:column="48"/></name></expr>;<pos:position pos:line="48" pos:column="49"/></expr_stmt></block></then></if>
			<if pos:line="49" pos:column="25">if <condition pos:line="49" pos:column="28">(<expr><name pos:line="49" pos:column="29">cutoff_cnt<pos:position pos:line="49" pos:column="39"/></name></expr>)<pos:position pos:line="49" pos:column="40"/></condition><then pos:line="49" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="50" pos:column="33">*<pos:position pos:line="50" pos:column="34"/></operator><name pos:line="50" pos:column="34">cutoff_cnt<pos:position pos:line="50" pos:column="44"/></name> <operator pos:line="50" pos:column="45">=<pos:position pos:line="50" pos:column="46"/></operator> <name pos:line="50" pos:column="47">reccnt<pos:position pos:line="50" pos:column="53"/></name> <operator pos:line="50" pos:column="54">-<pos:position pos:line="50" pos:column="55"/></operator> <literal type="number" pos:line="50" pos:column="56">1<pos:position pos:line="50" pos:column="57"/></literal></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt></block></then></if>
			<if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><name pos:line="51" pos:column="29">lastrec<pos:position pos:line="51" pos:column="36"/></name></expr>)<pos:position pos:line="51" pos:column="37"/></condition><then pos:line="51" pos:column="37"> <block pos:line="51" pos:column="38">{
				<if pos:line="52" pos:column="33">if <condition pos:line="52" pos:column="36">(<expr><call><name pos:line="52" pos:column="37">get_sha1_hex<pos:position pos:line="52" pos:column="49"/></name><argument_list pos:line="52" pos:column="49">(<argument><expr><name pos:line="52" pos:column="50">lastrec<pos:position pos:line="52" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="59">logged_sha1<pos:position pos:line="52" pos:column="70"/></name></expr></argument>)<pos:position pos:line="52" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="72"/></condition><then pos:line="52" pos:column="72">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="41">die<pos:position pos:line="53" pos:column="44"/></name><argument_list pos:line="53" pos:column="44">(<argument><expr><literal type="string" pos:line="53" pos:column="45">"Log %s is corrupt."<pos:position pos:line="53" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="67">logfile<pos:position pos:line="53" pos:column="74"/></name></expr></argument>)<pos:position pos:line="53" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="76"/></expr_stmt></block></then></if>
				<if pos:line="54" pos:column="33">if <condition pos:line="54" pos:column="36">(<expr><call><name pos:line="54" pos:column="37">get_sha1_hex<pos:position pos:line="54" pos:column="49"/></name><argument_list pos:line="54" pos:column="49">(<argument><expr><name pos:line="54" pos:column="50">rec<pos:position pos:line="54" pos:column="53"/></name> <operator pos:line="54" pos:column="54">+<pos:position pos:line="54" pos:column="55"/></operator> <literal type="number" pos:line="54" pos:column="56">41<pos:position pos:line="54" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="60">sha1<pos:position pos:line="54" pos:column="64"/></name></expr></argument>)<pos:position pos:line="54" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="66"/></condition><then pos:line="54" pos:column="66">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="41">die<pos:position pos:line="55" pos:column="44"/></name><argument_list pos:line="55" pos:column="44">(<argument><expr><literal type="string" pos:line="55" pos:column="45">"Log %s is corrupt."<pos:position pos:line="55" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="67">logfile<pos:position pos:line="55" pos:column="74"/></name></expr></argument>)<pos:position pos:line="55" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="76"/></expr_stmt></block></then></if>
				<if pos:line="56" pos:column="33">if <condition pos:line="56" pos:column="36">(<expr><call><name pos:line="56" pos:column="37">hashcmp<pos:position pos:line="56" pos:column="44"/></name><argument_list pos:line="56" pos:column="44">(<argument><expr><name pos:line="56" pos:column="45">logged_sha1<pos:position pos:line="56" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="58">sha1<pos:position pos:line="56" pos:column="62"/></name></expr></argument>)<pos:position pos:line="56" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="64"/></condition><then pos:line="56" pos:column="64"> <block pos:line="56" pos:column="65">{
					<expr_stmt><expr><call><name pos:line="57" pos:column="41">warning<pos:position pos:line="57" pos:column="48"/></name><argument_list pos:line="57" pos:column="48">(<argument><expr><literal type="string" pos:line="57" pos:column="49">"Log %s has gap after %s."<pos:position pos:line="57" pos:column="75"/></literal></expr></argument>,
						<argument><expr><name pos:line="58" pos:column="49">logfile<pos:position pos:line="58" pos:column="56"/></name></expr></argument>, <argument><expr><call><name pos:line="58" pos:column="58">show_date<pos:position pos:line="58" pos:column="67"/></name><argument_list pos:line="58" pos:column="67">(<argument><expr><name pos:line="58" pos:column="68">date<pos:position pos:line="58" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="74">tz<pos:position pos:line="58" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="78">DATE_RFC2822<pos:position pos:line="58" pos:column="90"/></name></expr></argument>)<pos:position pos:line="58" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="58" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="93"/></expr_stmt>
				}<pos:position pos:line="59" pos:column="34"/></block></then></if>
			}<pos:position pos:line="60" pos:column="26"/></block></then>
			<elseif pos:line="61" pos:column="25">else <if pos:line="61" pos:column="30">if <condition pos:line="61" pos:column="33">(<expr><name pos:line="61" pos:column="34">date<pos:position pos:line="61" pos:column="38"/></name> <operator pos:line="61" pos:column="39">==<pos:position pos:line="61" pos:column="41"/></operator> <name pos:line="61" pos:column="42">at_time<pos:position pos:line="61" pos:column="49"/></name></expr>)<pos:position pos:line="61" pos:column="50"/></condition><then pos:line="61" pos:column="50"> <block pos:line="61" pos:column="51">{
				<if pos:line="62" pos:column="33">if <condition pos:line="62" pos:column="36">(<expr><call><name pos:line="62" pos:column="37">get_sha1_hex<pos:position pos:line="62" pos:column="49"/></name><argument_list pos:line="62" pos:column="49">(<argument><expr><name pos:line="62" pos:column="50">rec<pos:position pos:line="62" pos:column="53"/></name> <operator pos:line="62" pos:column="54">+<pos:position pos:line="62" pos:column="55"/></operator> <literal type="number" pos:line="62" pos:column="56">41<pos:position pos:line="62" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="60">sha1<pos:position pos:line="62" pos:column="64"/></name></expr></argument>)<pos:position pos:line="62" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="66"/></condition><then pos:line="62" pos:column="66">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="41">die<pos:position pos:line="63" pos:column="44"/></name><argument_list pos:line="63" pos:column="44">(<argument><expr><literal type="string" pos:line="63" pos:column="45">"Log %s is corrupt."<pos:position pos:line="63" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="67">logfile<pos:position pos:line="63" pos:column="74"/></name></expr></argument>)<pos:position pos:line="63" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="76"/></expr_stmt></block></then></if>
			}<pos:position pos:line="64" pos:column="26"/></block></then></if></elseif>
			<else pos:line="65" pos:column="25">else <block pos:line="65" pos:column="30">{
				<if pos:line="66" pos:column="33">if <condition pos:line="66" pos:column="36">(<expr><call><name pos:line="66" pos:column="37">get_sha1_hex<pos:position pos:line="66" pos:column="49"/></name><argument_list pos:line="66" pos:column="49">(<argument><expr><name pos:line="66" pos:column="50">rec<pos:position pos:line="66" pos:column="53"/></name> <operator pos:line="66" pos:column="54">+<pos:position pos:line="66" pos:column="55"/></operator> <literal type="number" pos:line="66" pos:column="56">41<pos:position pos:line="66" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="60">logged_sha1<pos:position pos:line="66" pos:column="71"/></name></expr></argument>)<pos:position pos:line="66" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="73"/></condition><then pos:line="66" pos:column="73">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="41">die<pos:position pos:line="67" pos:column="44"/></name><argument_list pos:line="67" pos:column="44">(<argument><expr><literal type="string" pos:line="67" pos:column="45">"Log %s is corrupt."<pos:position pos:line="67" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="67">logfile<pos:position pos:line="67" pos:column="74"/></name></expr></argument>)<pos:position pos:line="67" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="76"/></expr_stmt></block></then></if>
				<if pos:line="68" pos:column="33">if <condition pos:line="68" pos:column="36">(<expr><call><name pos:line="68" pos:column="37">hashcmp<pos:position pos:line="68" pos:column="44"/></name><argument_list pos:line="68" pos:column="44">(<argument><expr><name pos:line="68" pos:column="45">logged_sha1<pos:position pos:line="68" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="58">sha1<pos:position pos:line="68" pos:column="62"/></name></expr></argument>)<pos:position pos:line="68" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="64"/></condition><then pos:line="68" pos:column="64"> <block pos:line="68" pos:column="65">{
					<expr_stmt><expr><call><name pos:line="69" pos:column="41">warning<pos:position pos:line="69" pos:column="48"/></name><argument_list pos:line="69" pos:column="48">(<argument><expr><literal type="string" pos:line="69" pos:column="49">"Log %s unexpectedly ended on %s."<pos:position pos:line="69" pos:column="83"/></literal></expr></argument>,
						<argument><expr><name pos:line="70" pos:column="49">logfile<pos:position pos:line="70" pos:column="56"/></name></expr></argument>, <argument><expr><call><name pos:line="70" pos:column="58">show_date<pos:position pos:line="70" pos:column="67"/></name><argument_list pos:line="70" pos:column="67">(<argument><expr><name pos:line="70" pos:column="68">date<pos:position pos:line="70" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="74">tz<pos:position pos:line="70" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="78">DATE_RFC2822<pos:position pos:line="70" pos:column="90"/></name></expr></argument>)<pos:position pos:line="70" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="70" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="93"/></expr_stmt>
				}<pos:position pos:line="71" pos:column="34"/></block></then></if>
			}<pos:position pos:line="72" pos:column="26"/></block></else></if>
			<expr_stmt><expr><call><name pos:line="73" pos:column="25">munmap<pos:position pos:line="73" pos:column="31"/></name><argument_list pos:line="73" pos:column="31">(<argument><expr><name pos:line="73" pos:column="32">log_mapped<pos:position pos:line="73" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="44">mapsz<pos:position pos:line="73" pos:column="49"/></name></expr></argument>)<pos:position pos:line="73" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="51"/></expr_stmt>
			<return pos:line="74" pos:column="25">return <expr><literal type="number" pos:line="74" pos:column="32">0<pos:position pos:line="74" pos:column="33"/></literal></expr>;<pos:position pos:line="74" pos:column="34"/></return>
		}<pos:position pos:line="75" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="76" pos:column="17">lastrec<pos:position pos:line="76" pos:column="24"/></name> <operator pos:line="76" pos:column="25">=<pos:position pos:line="76" pos:column="26"/></operator> <name pos:line="76" pos:column="27">rec<pos:position pos:line="76" pos:column="30"/></name></expr>;<pos:position pos:line="76" pos:column="31"/></expr_stmt>
		<if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><name pos:line="77" pos:column="21">cnt<pos:position pos:line="77" pos:column="24"/></name> <operator pos:line="77" pos:column="25">&gt;<pos:position pos:line="77" pos:column="29"/></operator> <literal type="number" pos:line="77" pos:column="27">0<pos:position pos:line="77" pos:column="28"/></literal></expr>)<pos:position pos:line="77" pos:column="29"/></condition><then pos:line="77" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="25">cnt<pos:position pos:line="78" pos:column="28"/></name><operator pos:line="78" pos:column="28">--<pos:position pos:line="78" pos:column="30"/></operator></expr>;<pos:position pos:line="78" pos:column="31"/></expr_stmt></block></then></if>
	}<pos:position pos:line="79" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="81" pos:column="9">rec<pos:position pos:line="81" pos:column="12"/></name> <operator pos:line="81" pos:column="13">=<pos:position pos:line="81" pos:column="14"/></operator> <name pos:line="81" pos:column="15">logdata<pos:position pos:line="81" pos:column="22"/></name></expr>;<pos:position pos:line="81" pos:column="23"/></expr_stmt>
	<while pos:line="82" pos:column="9">while <condition pos:line="82" pos:column="15">(<expr><name pos:line="82" pos:column="16">rec<pos:position pos:line="82" pos:column="19"/></name> <operator pos:line="82" pos:column="20">&lt;<pos:position pos:line="82" pos:column="24"/></operator> <name pos:line="82" pos:column="22">logend<pos:position pos:line="82" pos:column="28"/></name> <operator pos:line="82" pos:column="29">&amp;&amp;<pos:position pos:line="82" pos:column="39"/></operator> <operator pos:line="82" pos:column="32">*<pos:position pos:line="82" pos:column="33"/></operator><name pos:line="82" pos:column="33">rec<pos:position pos:line="82" pos:column="36"/></name> <operator pos:line="82" pos:column="37">!=<pos:position pos:line="82" pos:column="39"/></operator> <literal type="char" pos:line="82" pos:column="40">'&gt;'<pos:position pos:line="82" pos:column="46"/></literal> <operator pos:line="82" pos:column="44">&amp;&amp;<pos:position pos:line="82" pos:column="54"/></operator> <operator pos:line="82" pos:column="47">*<pos:position pos:line="82" pos:column="48"/></operator><name pos:line="82" pos:column="48">rec<pos:position pos:line="82" pos:column="51"/></name> <operator pos:line="82" pos:column="52">!=<pos:position pos:line="82" pos:column="54"/></operator> <literal type="char" pos:line="82" pos:column="55">'\n'<pos:position pos:line="82" pos:column="59"/></literal></expr>)<pos:position pos:line="82" pos:column="60"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="83" pos:column="17">rec<pos:position pos:line="83" pos:column="20"/></name><operator pos:line="83" pos:column="20">++<pos:position pos:line="83" pos:column="22"/></operator></expr>;<pos:position pos:line="83" pos:column="23"/></expr_stmt></block></while>
	<if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name pos:line="84" pos:column="13">rec<pos:position pos:line="84" pos:column="16"/></name> <operator pos:line="84" pos:column="17">==<pos:position pos:line="84" pos:column="19"/></operator> <name pos:line="84" pos:column="20">logend<pos:position pos:line="84" pos:column="26"/></name> <operator pos:line="84" pos:column="27">||<pos:position pos:line="84" pos:column="29"/></operator> <operator pos:line="84" pos:column="30">*<pos:position pos:line="84" pos:column="31"/></operator><name pos:line="84" pos:column="31">rec<pos:position pos:line="84" pos:column="34"/></name> <operator pos:line="84" pos:column="35">==<pos:position pos:line="84" pos:column="37"/></operator> <literal type="char" pos:line="84" pos:column="38">'\n'<pos:position pos:line="84" pos:column="42"/></literal></expr>)<pos:position pos:line="84" pos:column="43"/></condition><then pos:line="84" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="17">die<pos:position pos:line="85" pos:column="20"/></name><argument_list pos:line="85" pos:column="20">(<argument><expr><literal type="string" pos:line="85" pos:column="21">"Log %s is corrupt."<pos:position pos:line="85" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="43">logfile<pos:position pos:line="85" pos:column="50"/></name></expr></argument>)<pos:position pos:line="85" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="52"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="86" pos:column="9">date<pos:position pos:line="86" pos:column="13"/></name> <operator pos:line="86" pos:column="14">=<pos:position pos:line="86" pos:column="15"/></operator> <call><name pos:line="86" pos:column="16">strtoul<pos:position pos:line="86" pos:column="23"/></name><argument_list pos:line="86" pos:column="23">(<argument><expr><name pos:line="86" pos:column="24">rec<pos:position pos:line="86" pos:column="27"/></name> <operator pos:line="86" pos:column="28">+<pos:position pos:line="86" pos:column="29"/></operator> <literal type="number" pos:line="86" pos:column="30">1<pos:position pos:line="86" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="86" pos:column="33">&amp;<pos:position pos:line="86" pos:column="38"/></operator><name pos:line="86" pos:column="34">tz_c<pos:position pos:line="86" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="40">10<pos:position pos:line="86" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name pos:line="87" pos:column="9">tz<pos:position pos:line="87" pos:column="11"/></name> <operator pos:line="87" pos:column="12">=<pos:position pos:line="87" pos:column="13"/></operator> <call><name pos:line="87" pos:column="14">strtoul<pos:position pos:line="87" pos:column="21"/></name><argument_list pos:line="87" pos:column="21">(<argument><expr><name pos:line="87" pos:column="22">tz_c<pos:position pos:line="87" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="28">NULL<pos:position pos:line="87" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="34">10<pos:position pos:line="87" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="38"/></expr_stmt>
	<if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><call><name pos:line="88" pos:column="13">get_sha1_hex<pos:position pos:line="88" pos:column="25"/></name><argument_list pos:line="88" pos:column="25">(<argument><expr><name pos:line="88" pos:column="26">logdata<pos:position pos:line="88" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="35">sha1<pos:position pos:line="88" pos:column="39"/></name></expr></argument>)<pos:position pos:line="88" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="41"/></condition><then pos:line="88" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="17">die<pos:position pos:line="89" pos:column="20"/></name><argument_list pos:line="89" pos:column="20">(<argument><expr><literal type="string" pos:line="89" pos:column="21">"Log %s is corrupt."<pos:position pos:line="89" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="43">logfile<pos:position pos:line="89" pos:column="50"/></name></expr></argument>)<pos:position pos:line="89" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="52"/></expr_stmt></block></then></if>
	<if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">(<expr><call><name pos:line="90" pos:column="13">is_null_sha1<pos:position pos:line="90" pos:column="25"/></name><argument_list pos:line="90" pos:column="25">(<argument><expr><name pos:line="90" pos:column="26">sha1<pos:position pos:line="90" pos:column="30"/></name></expr></argument>)<pos:position pos:line="90" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="90" pos:column="32"/></condition><then pos:line="90" pos:column="32"> <block pos:line="90" pos:column="33">{
		<if pos:line="91" pos:column="17">if <condition pos:line="91" pos:column="20">(<expr><call><name pos:line="91" pos:column="21">get_sha1_hex<pos:position pos:line="91" pos:column="33"/></name><argument_list pos:line="91" pos:column="33">(<argument><expr><name pos:line="91" pos:column="34">logdata<pos:position pos:line="91" pos:column="41"/></name> <operator pos:line="91" pos:column="42">+<pos:position pos:line="91" pos:column="43"/></operator> <literal type="number" pos:line="91" pos:column="44">41<pos:position pos:line="91" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="48">sha1<pos:position pos:line="91" pos:column="52"/></name></expr></argument>)<pos:position pos:line="91" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="54"/></condition><then pos:line="91" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="25">die<pos:position pos:line="92" pos:column="28"/></name><argument_list pos:line="92" pos:column="28">(<argument><expr><literal type="string" pos:line="92" pos:column="29">"Log %s is corrupt."<pos:position pos:line="92" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="51">logfile<pos:position pos:line="92" pos:column="58"/></name></expr></argument>)<pos:position pos:line="92" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="60"/></expr_stmt></block></then></if>
	}<pos:position pos:line="93" pos:column="10"/></block></then></if>
	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><name pos:line="94" pos:column="13">msg<pos:position pos:line="94" pos:column="16"/></name></expr>)<pos:position pos:line="94" pos:column="17"/></condition><then pos:line="94" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="95" pos:column="17">*<pos:position pos:line="95" pos:column="18"/></operator><name pos:line="95" pos:column="18">msg<pos:position pos:line="95" pos:column="21"/></name> <operator pos:line="95" pos:column="22">=<pos:position pos:line="95" pos:column="23"/></operator> <call><name pos:line="95" pos:column="24">ref_msg<pos:position pos:line="95" pos:column="31"/></name><argument_list pos:line="95" pos:column="31">(<argument><expr><name pos:line="95" pos:column="32">logdata<pos:position pos:line="95" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="41">logend<pos:position pos:line="95" pos:column="47"/></name></expr></argument>)<pos:position pos:line="95" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="49"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="96" pos:column="9">munmap<pos:position pos:line="96" pos:column="15"/></name><argument_list pos:line="96" pos:column="15">(<argument><expr><name pos:line="96" pos:column="16">log_mapped<pos:position pos:line="96" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="28">mapsz<pos:position pos:line="96" pos:column="33"/></name></expr></argument>)<pos:position pos:line="96" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="35"/></expr_stmt>

	<if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">cutoff_time<pos:position pos:line="98" pos:column="24"/></name></expr>)<pos:position pos:line="98" pos:column="25"/></condition><then pos:line="98" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="99" pos:column="17">*<pos:position pos:line="99" pos:column="18"/></operator><name pos:line="99" pos:column="18">cutoff_time<pos:position pos:line="99" pos:column="29"/></name> <operator pos:line="99" pos:column="30">=<pos:position pos:line="99" pos:column="31"/></operator> <name pos:line="99" pos:column="32">date<pos:position pos:line="99" pos:column="36"/></name></expr>;<pos:position pos:line="99" pos:column="37"/></expr_stmt></block></then></if>
	<if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><name pos:line="100" pos:column="13">cutoff_tz<pos:position pos:line="100" pos:column="22"/></name></expr>)<pos:position pos:line="100" pos:column="23"/></condition><then pos:line="100" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="101" pos:column="17">*<pos:position pos:line="101" pos:column="18"/></operator><name pos:line="101" pos:column="18">cutoff_tz<pos:position pos:line="101" pos:column="27"/></name> <operator pos:line="101" pos:column="28">=<pos:position pos:line="101" pos:column="29"/></operator> <name pos:line="101" pos:column="30">tz<pos:position pos:line="101" pos:column="32"/></name></expr>;<pos:position pos:line="101" pos:column="33"/></expr_stmt></block></then></if>
	<if pos:line="102" pos:column="9">if <condition pos:line="102" pos:column="12">(<expr><name pos:line="102" pos:column="13">cutoff_cnt<pos:position pos:line="102" pos:column="23"/></name></expr>)<pos:position pos:line="102" pos:column="24"/></condition><then pos:line="102" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="103" pos:column="17">*<pos:position pos:line="103" pos:column="18"/></operator><name pos:line="103" pos:column="18">cutoff_cnt<pos:position pos:line="103" pos:column="28"/></name> <operator pos:line="103" pos:column="29">=<pos:position pos:line="103" pos:column="30"/></operator> <name pos:line="103" pos:column="31">reccnt<pos:position pos:line="103" pos:column="37"/></name></expr>;<pos:position pos:line="103" pos:column="38"/></expr_stmt></block></then></if>
	<return pos:line="104" pos:column="9">return <expr><literal type="number" pos:line="104" pos:column="16">1<pos:position pos:line="104" pos:column="17"/></literal></expr>;<pos:position pos:line="104" pos:column="18"/></return>
}<pos:position pos:line="105" pos:column="2"/></block></function></unit>
