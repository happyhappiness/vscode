<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1822.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">all_msgs<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><name pos:line="3" pos:column="34">STRBUF_INIT<pos:position pos:line="3" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">total<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">nongit_ok<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">git_extract_argv0_path<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><name><name pos:line="7" pos:column="32">argv<pos:position pos:line="7" pos:column="36"/></name><index pos:line="7" pos:column="36">[<expr><literal type="number" pos:line="7" pos:column="37">0<pos:position pos:line="7" pos:column="38"/></literal></expr>]<pos:position pos:line="7" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">git_setup_gettext<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">()<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="29"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">setup_git_directory_gently<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><operator pos:line="11" pos:column="36">&amp;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="37">nongit_ok<pos:position pos:line="11" pos:column="46"/></name></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">git_imap_config<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">()<pos:position pos:line="12" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">argc<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <call><name pos:line="14" pos:column="16">parse_options<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">argc<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="36">(<pos:position pos:line="14" pos:column="37"/></operator><specifier pos:line="14" pos:column="37">const<pos:position pos:line="14" pos:column="42"/></specifier> <name pos:line="14" pos:column="43">char<pos:position pos:line="14" pos:column="47"/></name> <operator pos:line="14" pos:column="48">*<pos:position pos:line="14" pos:column="49"/></operator><operator pos:line="14" pos:column="49">*<pos:position pos:line="14" pos:column="50"/></operator><operator pos:line="14" pos:column="50">)<pos:position pos:line="14" pos:column="51"/></operator><name pos:line="14" pos:column="51">argv<pos:position pos:line="14" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="57">""<pos:position pos:line="14" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="61">imap_send_options<pos:position pos:line="14" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="80">imap_send_usage<pos:position pos:line="14" pos:column="95"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="97">0<pos:position pos:line="14" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="100"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">argc<pos:position pos:line="16" pos:column="17"/></name></expr>)<pos:position pos:line="16" pos:column="18"/></condition><then pos:line="16" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">usage_with_options<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">imap_send_usage<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="53">imap_send_options<pos:position pos:line="17" pos:column="70"/></name></expr></argument>)<pos:position pos:line="17" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="72"/></expr_stmt></block></then></if>

<cpp:ifndef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifndef<pos:position pos:line="19" pos:column="8"/></cpp:directive> <name pos:line="19" pos:column="9">USE_CURL_FOR_IMAP_SEND<pos:position pos:line="19" pos:column="31"/></name></cpp:ifndef>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">use_curl<pos:position pos:line="20" pos:column="21"/></name></expr>)<pos:position pos:line="20" pos:column="22"/></condition><then pos:line="20" pos:column="22"> <block pos:line="20" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">warning<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><literal type="string" pos:line="21" pos:column="25">"--curl not supported in this build"<pos:position pos:line="21" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">use_curl<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">=<pos:position pos:line="22" pos:column="27"/></operator> <literal type="number" pos:line="22" pos:column="28">0<pos:position pos:line="22" pos:column="29"/></literal></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>
<cpp:elif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">elif<pos:position pos:line="24" pos:column="6"/></cpp:directive> <expr><call><name pos:line="24" pos:column="7">defined<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><name pos:line="24" pos:column="15">NO_OPENSSL<pos:position pos:line="24" pos:column="25"/></name></expr></argument>)<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr></cpp:elif>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">use_curl<pos:position pos:line="25" pos:column="22"/></name></expr>)<pos:position pos:line="25" pos:column="23"/></condition><then pos:line="25" pos:column="23"> <block pos:line="25" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">warning<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><literal type="string" pos:line="26" pos:column="25">"--no-curl not supported in this build"<pos:position pos:line="26" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><name pos:line="27" pos:column="17">use_curl<pos:position pos:line="27" pos:column="25"/></name> <operator pos:line="27" pos:column="26">=<pos:position pos:line="27" pos:column="27"/></operator> <literal type="number" pos:line="27" pos:column="28">1<pos:position pos:line="27" pos:column="29"/></literal></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><name><name pos:line="31" pos:column="14">server<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">.<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="21">port<pos:position pos:line="31" pos:column="25"/></name></name></expr>)<pos:position pos:line="31" pos:column="26"/></condition><then pos:line="31" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="17">server<pos:position pos:line="32" pos:column="23"/></name><operator pos:line="32" pos:column="23">.<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="24">port<pos:position pos:line="32" pos:column="28"/></name></name> <operator pos:line="32" pos:column="29">=<pos:position pos:line="32" pos:column="30"/></operator> <ternary><condition><expr><name><name pos:line="32" pos:column="31">server<pos:position pos:line="32" pos:column="37"/></name><operator pos:line="32" pos:column="37">.<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="38">use_ssl<pos:position pos:line="32" pos:column="45"/></name></name></expr> ?<pos:position pos:line="32" pos:column="47"/></condition><then pos:line="32" pos:column="47"> <expr><literal type="number" pos:line="32" pos:column="48">993<pos:position pos:line="32" pos:column="51"/></literal></expr> <pos:position pos:line="32" pos:column="52"/></then><else pos:line="32" pos:column="52">: <expr><literal type="number" pos:line="32" pos:column="54">143<pos:position pos:line="32" pos:column="57"/></literal></expr></else></ternary></expr>;<pos:position pos:line="32" pos:column="58"/></expr_stmt></block></then></if>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><name><name pos:line="34" pos:column="14">server<pos:position pos:line="34" pos:column="20"/></name><operator pos:line="34" pos:column="20">.<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="21">folder<pos:position pos:line="34" pos:column="27"/></name></name></expr>)<pos:position pos:line="34" pos:column="28"/></condition><then pos:line="34" pos:column="28"> <block pos:line="34" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">fprintf<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">stderr<pos:position pos:line="35" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="33">"no imap store specified\n"<pos:position pos:line="35" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="62"/></expr_stmt>
		<return pos:line="36" pos:column="17">return <expr><literal type="number" pos:line="36" pos:column="24">1<pos:position pos:line="36" pos:column="25"/></literal></expr>;<pos:position pos:line="36" pos:column="26"/></return>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><name><name pos:line="38" pos:column="14">server<pos:position pos:line="38" pos:column="20"/></name><operator pos:line="38" pos:column="20">.<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="21">host<pos:position pos:line="38" pos:column="25"/></name></name></expr>)<pos:position pos:line="38" pos:column="26"/></condition><then pos:line="38" pos:column="26"> <block pos:line="38" pos:column="27">{
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">!<pos:position pos:line="39" pos:column="22"/></operator><name><name pos:line="39" pos:column="22">server<pos:position pos:line="39" pos:column="28"/></name><operator pos:line="39" pos:column="28">.<pos:position pos:line="39" pos:column="29"/></operator><name pos:line="39" pos:column="29">tunnel<pos:position pos:line="39" pos:column="35"/></name></name></expr>)<pos:position pos:line="39" pos:column="36"/></condition><then pos:line="39" pos:column="36"> <block pos:line="39" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">fprintf<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">stderr<pos:position pos:line="40" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="41">"no imap host specified\n"<pos:position pos:line="40" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="69"/></expr_stmt>
			<return pos:line="41" pos:column="25">return <expr><literal type="number" pos:line="41" pos:column="32">1<pos:position pos:line="41" pos:column="33"/></literal></expr>;<pos:position pos:line="41" pos:column="34"/></return>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">server<pos:position pos:line="43" pos:column="23"/></name><operator pos:line="43" pos:column="23">.<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="24">host<pos:position pos:line="43" pos:column="28"/></name></name> <operator pos:line="43" pos:column="29">=<pos:position pos:line="43" pos:column="30"/></operator> <literal type="string" pos:line="43" pos:column="31">"tunnel"<pos:position pos:line="43" pos:column="39"/></literal></expr>;<pos:position pos:line="43" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="46" pos:column="9">/* read the messages */</comment>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><call><name pos:line="47" pos:column="13">read_message<pos:position pos:line="47" pos:column="25"/></name><argument_list pos:line="47" pos:column="25">(<argument><expr><name pos:line="47" pos:column="26">stdin<pos:position pos:line="47" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="33">&amp;<pos:position pos:line="47" pos:column="38"/></operator><name pos:line="47" pos:column="34">all_msgs<pos:position pos:line="47" pos:column="42"/></name></expr></argument>)<pos:position pos:line="47" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="44"/></condition><then pos:line="47" pos:column="44"> <block pos:line="47" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">fprintf<pos:position pos:line="48" pos:column="24"/></name><argument_list pos:line="48" pos:column="24">(<argument><expr><name pos:line="48" pos:column="25">stderr<pos:position pos:line="48" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="33">"error reading input\n"<pos:position pos:line="48" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="58"/></expr_stmt>
		<return pos:line="49" pos:column="17">return <expr><literal type="number" pos:line="49" pos:column="24">1<pos:position pos:line="49" pos:column="25"/></literal></expr>;<pos:position pos:line="49" pos:column="26"/></return>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>

	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name><name pos:line="52" pos:column="13">all_msgs<pos:position pos:line="52" pos:column="21"/></name><operator pos:line="52" pos:column="21">.<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="22">len<pos:position pos:line="52" pos:column="25"/></name></name> <operator pos:line="52" pos:column="26">==<pos:position pos:line="52" pos:column="28"/></operator> <literal type="number" pos:line="52" pos:column="29">0<pos:position pos:line="52" pos:column="30"/></literal></expr>)<pos:position pos:line="52" pos:column="31"/></condition><then pos:line="52" pos:column="31"> <block pos:line="52" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">fprintf<pos:position pos:line="53" pos:column="24"/></name><argument_list pos:line="53" pos:column="24">(<argument><expr><name pos:line="53" pos:column="25">stderr<pos:position pos:line="53" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="33">"nothing to send\n"<pos:position pos:line="53" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="54"/></expr_stmt>
		<return pos:line="54" pos:column="17">return <expr><literal type="number" pos:line="54" pos:column="24">1<pos:position pos:line="54" pos:column="25"/></literal></expr>;<pos:position pos:line="54" pos:column="26"/></return>
	}<pos:position pos:line="55" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="57" pos:column="9">total<pos:position pos:line="57" pos:column="14"/></name> <operator pos:line="57" pos:column="15">=<pos:position pos:line="57" pos:column="16"/></operator> <call><name pos:line="57" pos:column="17">count_messages<pos:position pos:line="57" pos:column="31"/></name><argument_list pos:line="57" pos:column="31">(<argument><expr><operator pos:line="57" pos:column="32">&amp;<pos:position pos:line="57" pos:column="37"/></operator><name pos:line="57" pos:column="33">all_msgs<pos:position pos:line="57" pos:column="41"/></name></expr></argument>)<pos:position pos:line="57" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="43"/></expr_stmt>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><operator pos:line="58" pos:column="13">!<pos:position pos:line="58" pos:column="14"/></operator><name pos:line="58" pos:column="14">total<pos:position pos:line="58" pos:column="19"/></name></expr>)<pos:position pos:line="58" pos:column="20"/></condition><then pos:line="58" pos:column="20"> <block pos:line="58" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">fprintf<pos:position pos:line="59" pos:column="24"/></name><argument_list pos:line="59" pos:column="24">(<argument><expr><name pos:line="59" pos:column="25">stderr<pos:position pos:line="59" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="33">"no messages to send\n"<pos:position pos:line="59" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="58"/></expr_stmt>
		<return pos:line="60" pos:column="17">return <expr><literal type="number" pos:line="60" pos:column="24">1<pos:position pos:line="60" pos:column="25"/></literal></expr>;<pos:position pos:line="60" pos:column="26"/></return>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="63" pos:column="9">/* write it to the imap server */</comment>

	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name><name pos:line="65" pos:column="13">server<pos:position pos:line="65" pos:column="19"/></name><operator pos:line="65" pos:column="19">.<pos:position pos:line="65" pos:column="20"/></operator><name pos:line="65" pos:column="20">tunnel<pos:position pos:line="65" pos:column="26"/></name></name></expr>)<pos:position pos:line="65" pos:column="27"/></condition><then pos:line="65" pos:column="27">
		<block type="pseudo"><return pos:line="66" pos:column="17">return <expr><call><name pos:line="66" pos:column="24">append_msgs_to_imap<pos:position pos:line="66" pos:column="43"/></name><argument_list pos:line="66" pos:column="43">(<argument><expr><operator pos:line="66" pos:column="44">&amp;<pos:position pos:line="66" pos:column="49"/></operator><name pos:line="66" pos:column="45">server<pos:position pos:line="66" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="53">&amp;<pos:position pos:line="66" pos:column="58"/></operator><name pos:line="66" pos:column="54">all_msgs<pos:position pos:line="66" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="64">total<pos:position pos:line="66" pos:column="69"/></name></expr></argument>)<pos:position pos:line="66" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="71"/></return></block></then></if>

<cpp:ifdef pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">ifdef<pos:position pos:line="68" pos:column="7"/></cpp:directive> <name pos:line="68" pos:column="8">USE_CURL_FOR_IMAP_SEND<pos:position pos:line="68" pos:column="30"/></name></cpp:ifdef>
	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">use_curl<pos:position pos:line="69" pos:column="21"/></name></expr>)<pos:position pos:line="69" pos:column="22"/></condition><then pos:line="69" pos:column="22">
		<block type="pseudo"><return pos:line="70" pos:column="17">return <expr><call><name pos:line="70" pos:column="24">curl_append_msgs_to_imap<pos:position pos:line="70" pos:column="48"/></name><argument_list pos:line="70" pos:column="48">(<argument><expr><operator pos:line="70" pos:column="49">&amp;<pos:position pos:line="70" pos:column="54"/></operator><name pos:line="70" pos:column="50">server<pos:position pos:line="70" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="58">&amp;<pos:position pos:line="70" pos:column="63"/></operator><name pos:line="70" pos:column="59">all_msgs<pos:position pos:line="70" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="69">total<pos:position pos:line="70" pos:column="74"/></name></expr></argument>)<pos:position pos:line="70" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="76"/></return></block></then></if>
<cpp:endif pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">endif<pos:position pos:line="71" pos:column="7"/></cpp:directive></cpp:endif>

	<return pos:line="73" pos:column="9">return <expr><call><name pos:line="73" pos:column="16">append_msgs_to_imap<pos:position pos:line="73" pos:column="35"/></name><argument_list pos:line="73" pos:column="35">(<argument><expr><operator pos:line="73" pos:column="36">&amp;<pos:position pos:line="73" pos:column="41"/></operator><name pos:line="73" pos:column="37">server<pos:position pos:line="73" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="45">&amp;<pos:position pos:line="73" pos:column="50"/></operator><name pos:line="73" pos:column="46">all_msgs<pos:position pos:line="73" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="56">total<pos:position pos:line="73" pos:column="61"/></name></expr></argument>)<pos:position pos:line="73" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="63"/></return>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
