<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_537_git-2.11.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">git_parse_source<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">config_fn_t<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">fn<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">void<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">data<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">comment<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><literal type="number" pos:line="3" pos:column="23">0<pos:position pos:line="3" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">baselen<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><literal type="number" pos:line="4" pos:column="23">0<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">var<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><operator pos:line="5" pos:column="30">&amp;<pos:position pos:line="5" pos:column="35"/></operator><name><name pos:line="5" pos:column="31">cf<pos:position pos:line="5" pos:column="33"/></name><operator pos:line="5" pos:column="33">-&gt;<pos:position pos:line="5" pos:column="38"/></operator><name pos:line="5" pos:column="35">var<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">error_return<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><literal type="number" pos:line="6" pos:column="28">0<pos:position pos:line="6" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">error_msg<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><name pos:line="7" pos:column="27">NULL<pos:position pos:line="7" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* U+FEFF Byte Order Mark in UTF8 */</comment>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">bomptr<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><name pos:line="10" pos:column="30">utf8_bom<pos:position pos:line="10" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="39"/></decl_stmt>

	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init pos:line="12" pos:column="14">;<pos:position pos:line="12" pos:column="15"/></init><condition pos:line="12" pos:column="15">;<pos:position pos:line="12" pos:column="16"/></condition><incr/>)<pos:position pos:line="12" pos:column="17"/></control> <block pos:line="12" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">c<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><call><name pos:line="13" pos:column="25">get_next_char<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">()<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="41"/></decl_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">bomptr<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">&amp;&amp;<pos:position pos:line="14" pos:column="38"/></operator> <operator pos:line="14" pos:column="31">*<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">bomptr<pos:position pos:line="14" pos:column="38"/></name></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39"> <block pos:line="14" pos:column="40">{
			<comment type="block" pos:line="15" pos:column="25">/* We are at the file beginning; skip UTF8-encoded BOM
			 * if present. Sane editors won't put this in on their
			 * own, but e.g. Windows Notepad will do it happily. */</comment>
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><name pos:line="18" pos:column="29">c<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">==<pos:position pos:line="18" pos:column="33"/></operator> <operator pos:line="18" pos:column="34">(<pos:position pos:line="18" pos:column="35"/></operator><operator pos:line="18" pos:column="35">*<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="36">bomptr<pos:position pos:line="18" pos:column="42"/></name> <operator pos:line="18" pos:column="43">&amp;<pos:position pos:line="18" pos:column="48"/></operator> <literal type="number" pos:line="18" pos:column="45">0377<pos:position pos:line="18" pos:column="49"/></literal><operator pos:line="18" pos:column="49">)<pos:position pos:line="18" pos:column="50"/></operator></expr>)<pos:position pos:line="18" pos:column="51"/></condition><then pos:line="18" pos:column="51"> <block pos:line="18" pos:column="52">{
				<expr_stmt><expr><name pos:line="19" pos:column="33">bomptr<pos:position pos:line="19" pos:column="39"/></name><operator pos:line="19" pos:column="39">++<pos:position pos:line="19" pos:column="41"/></operator></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>
				<continue pos:line="20" pos:column="33">continue;<pos:position pos:line="20" pos:column="42"/></continue>
			}<pos:position pos:line="21" pos:column="26"/></block></then> <else pos:line="21" pos:column="27">else <block pos:line="21" pos:column="32">{
				<comment type="block" pos:line="22" pos:column="33">/* Do not tolerate partial BOM. */</comment>
				<if pos:line="23" pos:column="33">if <condition pos:line="23" pos:column="36">(<expr><name pos:line="23" pos:column="37">bomptr<pos:position pos:line="23" pos:column="43"/></name> <operator pos:line="23" pos:column="44">!=<pos:position pos:line="23" pos:column="46"/></operator> <name pos:line="23" pos:column="47">utf8_bom<pos:position pos:line="23" pos:column="55"/></name></expr>)<pos:position pos:line="23" pos:column="56"/></condition><then pos:line="23" pos:column="56">
					<block type="pseudo"><break pos:line="24" pos:column="41">break;<pos:position pos:line="24" pos:column="47"/></break></block></then></if>
				<comment type="block" pos:line="25" pos:column="33">/* No BOM at file beginning. Cool. */</comment>
				<expr_stmt><expr><name pos:line="26" pos:column="33">bomptr<pos:position pos:line="26" pos:column="39"/></name> <operator pos:line="26" pos:column="40">=<pos:position pos:line="26" pos:column="41"/></operator> <name pos:line="26" pos:column="42">NULL<pos:position pos:line="26" pos:column="46"/></name></expr>;<pos:position pos:line="26" pos:column="47"/></expr_stmt>
			}<pos:position pos:line="27" pos:column="26"/></block></else></if>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">c<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">==<pos:position pos:line="29" pos:column="25"/></operator> <literal type="char" pos:line="29" pos:column="26">'\n'<pos:position pos:line="29" pos:column="30"/></literal></expr>)<pos:position pos:line="29" pos:column="31"/></condition><then pos:line="29" pos:column="31"> <block pos:line="29" pos:column="32">{
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name><name pos:line="30" pos:column="29">cf<pos:position pos:line="30" pos:column="31"/></name><operator pos:line="30" pos:column="31">-&gt;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="33">eof<pos:position pos:line="30" pos:column="36"/></name></name></expr>)<pos:position pos:line="30" pos:column="37"/></condition><then pos:line="30" pos:column="37">
				<block type="pseudo"><return pos:line="31" pos:column="33">return <expr><literal type="number" pos:line="31" pos:column="40">0<pos:position pos:line="31" pos:column="41"/></literal></expr>;<pos:position pos:line="31" pos:column="42"/></return></block></then></if>
			<expr_stmt><expr><name pos:line="32" pos:column="25">comment<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">=<pos:position pos:line="32" pos:column="34"/></operator> <literal type="number" pos:line="32" pos:column="35">0<pos:position pos:line="32" pos:column="36"/></literal></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt>
			<continue pos:line="33" pos:column="25">continue;<pos:position pos:line="33" pos:column="34"/></continue>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">comment<pos:position pos:line="35" pos:column="28"/></name> <operator pos:line="35" pos:column="29">||<pos:position pos:line="35" pos:column="31"/></operator> <call><name pos:line="35" pos:column="32">isspace<pos:position pos:line="35" pos:column="39"/></name><argument_list pos:line="35" pos:column="39">(<argument><expr><name pos:line="35" pos:column="40">c<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="43"/></condition><then pos:line="35" pos:column="43">
			<block type="pseudo"><continue pos:line="36" pos:column="25">continue;<pos:position pos:line="36" pos:column="34"/></continue></block></then></if>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">c<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">==<pos:position pos:line="37" pos:column="25"/></operator> <literal type="char" pos:line="37" pos:column="26">'#'<pos:position pos:line="37" pos:column="29"/></literal> <operator pos:line="37" pos:column="30">||<pos:position pos:line="37" pos:column="32"/></operator> <name pos:line="37" pos:column="33">c<pos:position pos:line="37" pos:column="34"/></name> <operator pos:line="37" pos:column="35">==<pos:position pos:line="37" pos:column="37"/></operator> <literal type="char" pos:line="37" pos:column="38">';'<pos:position pos:line="37" pos:column="41"/></literal></expr>)<pos:position pos:line="37" pos:column="42"/></condition><then pos:line="37" pos:column="42"> <block pos:line="37" pos:column="43">{
			<expr_stmt><expr><name pos:line="38" pos:column="25">comment<pos:position pos:line="38" pos:column="32"/></name> <operator pos:line="38" pos:column="33">=<pos:position pos:line="38" pos:column="34"/></operator> <literal type="number" pos:line="38" pos:column="35">1<pos:position pos:line="38" pos:column="36"/></literal></expr>;<pos:position pos:line="38" pos:column="37"/></expr_stmt>
			<continue pos:line="39" pos:column="25">continue;<pos:position pos:line="39" pos:column="34"/></continue>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">c<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">==<pos:position pos:line="41" pos:column="25"/></operator> <literal type="char" pos:line="41" pos:column="26">'['<pos:position pos:line="41" pos:column="29"/></literal></expr>)<pos:position pos:line="41" pos:column="30"/></condition><then pos:line="41" pos:column="30"> <block pos:line="41" pos:column="31">{
			<comment type="block" pos:line="42" pos:column="25">/* Reset prior to determining a new stem */</comment>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">strbuf_reset<pos:position pos:line="43" pos:column="37"/></name><argument_list pos:line="43" pos:column="37">(<argument><expr><name pos:line="43" pos:column="38">var<pos:position pos:line="43" pos:column="41"/></name></expr></argument>)<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt>
			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><call><name pos:line="44" pos:column="29">get_base_var<pos:position pos:line="44" pos:column="41"/></name><argument_list pos:line="44" pos:column="41">(<argument><expr><name pos:line="44" pos:column="42">var<pos:position pos:line="44" pos:column="45"/></name></expr></argument>)<pos:position pos:line="44" pos:column="46"/></argument_list></call> <operator pos:line="44" pos:column="47">&lt;<pos:position pos:line="44" pos:column="51"/></operator> <literal type="number" pos:line="44" pos:column="49">0<pos:position pos:line="44" pos:column="50"/></literal> <operator pos:line="44" pos:column="51">||<pos:position pos:line="44" pos:column="53"/></operator> <name><name pos:line="44" pos:column="54">var<pos:position pos:line="44" pos:column="57"/></name><operator pos:line="44" pos:column="57">-&gt;<pos:position pos:line="44" pos:column="62"/></operator><name pos:line="44" pos:column="59">len<pos:position pos:line="44" pos:column="62"/></name></name> <operator pos:line="44" pos:column="63">&lt;<pos:position pos:line="44" pos:column="67"/></operator> <literal type="number" pos:line="44" pos:column="65">1<pos:position pos:line="44" pos:column="66"/></literal></expr>)<pos:position pos:line="44" pos:column="67"/></condition><then pos:line="44" pos:column="67">
				<block type="pseudo"><break pos:line="45" pos:column="33">break;<pos:position pos:line="45" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">strbuf_addch<pos:position pos:line="46" pos:column="37"/></name><argument_list pos:line="46" pos:column="37">(<argument><expr><name pos:line="46" pos:column="38">var<pos:position pos:line="46" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="46" pos:column="43">'.'<pos:position pos:line="46" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name pos:line="47" pos:column="25">baselen<pos:position pos:line="47" pos:column="32"/></name> <operator pos:line="47" pos:column="33">=<pos:position pos:line="47" pos:column="34"/></operator> <name><name pos:line="47" pos:column="35">var<pos:position pos:line="47" pos:column="38"/></name><operator pos:line="47" pos:column="38">-&gt;<pos:position pos:line="47" pos:column="43"/></operator><name pos:line="47" pos:column="40">len<pos:position pos:line="47" pos:column="43"/></name></name></expr>;<pos:position pos:line="47" pos:column="44"/></expr_stmt>
			<continue pos:line="48" pos:column="25">continue;<pos:position pos:line="48" pos:column="34"/></continue>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if>
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><operator pos:line="50" pos:column="21">!<pos:position pos:line="50" pos:column="22"/></operator><call><name pos:line="50" pos:column="22">isalpha<pos:position pos:line="50" pos:column="29"/></name><argument_list pos:line="50" pos:column="29">(<argument><expr><name pos:line="50" pos:column="30">c<pos:position pos:line="50" pos:column="31"/></name></expr></argument>)<pos:position pos:line="50" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="33"/></condition><then pos:line="50" pos:column="33">
			<block type="pseudo"><break pos:line="51" pos:column="25">break;<pos:position pos:line="51" pos:column="31"/></break></block></then></if>
		<comment type="block" pos:line="52" pos:column="17">/*
		 * Truncate the var name back to the section header
		 * stem prior to grabbing the suffix part of the name
		 * and the value.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">strbuf_setlen<pos:position pos:line="57" pos:column="30"/></name><argument_list pos:line="57" pos:column="30">(<argument><expr><name pos:line="57" pos:column="31">var<pos:position pos:line="57" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="36">baselen<pos:position pos:line="57" pos:column="43"/></name></expr></argument>)<pos:position pos:line="57" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">strbuf_addch<pos:position pos:line="58" pos:column="29"/></name><argument_list pos:line="58" pos:column="29">(<argument><expr><name pos:line="58" pos:column="30">var<pos:position pos:line="58" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="58" pos:column="35">tolower<pos:position pos:line="58" pos:column="42"/></name><argument_list pos:line="58" pos:column="42">(<argument><expr><name pos:line="58" pos:column="43">c<pos:position pos:line="58" pos:column="44"/></name></expr></argument>)<pos:position pos:line="58" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="58" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="47"/></expr_stmt>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><call><name pos:line="59" pos:column="21">get_value<pos:position pos:line="59" pos:column="30"/></name><argument_list pos:line="59" pos:column="30">(<argument><expr><name pos:line="59" pos:column="31">fn<pos:position pos:line="59" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="35">data<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="41">var<pos:position pos:line="59" pos:column="44"/></name></expr></argument>)<pos:position pos:line="59" pos:column="45"/></argument_list></call> <operator pos:line="59" pos:column="46">&lt;<pos:position pos:line="59" pos:column="50"/></operator> <literal type="number" pos:line="59" pos:column="48">0<pos:position pos:line="59" pos:column="49"/></literal></expr>)<pos:position pos:line="59" pos:column="50"/></condition><then pos:line="59" pos:column="50">
			<block type="pseudo"><break pos:line="60" pos:column="25">break;<pos:position pos:line="60" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="61" pos:column="10"/></block></for>

	<switch pos:line="63" pos:column="9">switch <condition pos:line="63" pos:column="16">(<expr><name><name pos:line="63" pos:column="17">cf<pos:position pos:line="63" pos:column="19"/></name><operator pos:line="63" pos:column="19">-&gt;<pos:position pos:line="63" pos:column="24"/></operator><name pos:line="63" pos:column="21">origin_type<pos:position pos:line="63" pos:column="32"/></name></name></expr>)<pos:position pos:line="63" pos:column="33"/></condition> <block pos:line="63" pos:column="34">{
	<case pos:line="64" pos:column="9">case <expr><name pos:line="64" pos:column="14">CONFIG_ORIGIN_BLOB<pos:position pos:line="64" pos:column="32"/></name></expr>:<pos:position pos:line="64" pos:column="33"/></case>
		<expr_stmt><expr><name pos:line="65" pos:column="17">error_msg<pos:position pos:line="65" pos:column="26"/></name> <operator pos:line="65" pos:column="27">=<pos:position pos:line="65" pos:column="28"/></operator> <call><name pos:line="65" pos:column="29">xstrfmt<pos:position pos:line="65" pos:column="36"/></name><argument_list pos:line="65" pos:column="36">(<argument><expr><call><name pos:line="65" pos:column="37">_<pos:position pos:line="65" pos:column="38"/></name><argument_list pos:line="65" pos:column="38">(<argument><expr><literal type="string" pos:line="65" pos:column="39">"bad config line %d in blob %s"<pos:position pos:line="65" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="71"/></argument_list></call></expr></argument>,
				      <argument><expr><name><name pos:line="66" pos:column="39">cf<pos:position pos:line="66" pos:column="41"/></name><operator pos:line="66" pos:column="41">-&gt;<pos:position pos:line="66" pos:column="46"/></operator><name pos:line="66" pos:column="43">linenr<pos:position pos:line="66" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="51">cf<pos:position pos:line="66" pos:column="53"/></name><operator pos:line="66" pos:column="53">-&gt;<pos:position pos:line="66" pos:column="58"/></operator><name pos:line="66" pos:column="55">name<pos:position pos:line="66" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="61"/></expr_stmt>
		<break pos:line="67" pos:column="17">break;<pos:position pos:line="67" pos:column="23"/></break>
	<case pos:line="68" pos:column="9">case <expr><name pos:line="68" pos:column="14">CONFIG_ORIGIN_FILE<pos:position pos:line="68" pos:column="32"/></name></expr>:<pos:position pos:line="68" pos:column="33"/></case>
		<expr_stmt><expr><name pos:line="69" pos:column="17">error_msg<pos:position pos:line="69" pos:column="26"/></name> <operator pos:line="69" pos:column="27">=<pos:position pos:line="69" pos:column="28"/></operator> <call><name pos:line="69" pos:column="29">xstrfmt<pos:position pos:line="69" pos:column="36"/></name><argument_list pos:line="69" pos:column="36">(<argument><expr><call><name pos:line="69" pos:column="37">_<pos:position pos:line="69" pos:column="38"/></name><argument_list pos:line="69" pos:column="38">(<argument><expr><literal type="string" pos:line="69" pos:column="39">"bad config line %d in file %s"<pos:position pos:line="69" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="71"/></argument_list></call></expr></argument>,
				      <argument><expr><name><name pos:line="70" pos:column="39">cf<pos:position pos:line="70" pos:column="41"/></name><operator pos:line="70" pos:column="41">-&gt;<pos:position pos:line="70" pos:column="46"/></operator><name pos:line="70" pos:column="43">linenr<pos:position pos:line="70" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="51">cf<pos:position pos:line="70" pos:column="53"/></name><operator pos:line="70" pos:column="53">-&gt;<pos:position pos:line="70" pos:column="58"/></operator><name pos:line="70" pos:column="55">name<pos:position pos:line="70" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="61"/></expr_stmt>
		<break pos:line="71" pos:column="17">break;<pos:position pos:line="71" pos:column="23"/></break>
	<case pos:line="72" pos:column="9">case <expr><name pos:line="72" pos:column="14">CONFIG_ORIGIN_STDIN<pos:position pos:line="72" pos:column="33"/></name></expr>:<pos:position pos:line="72" pos:column="34"/></case>
		<expr_stmt><expr><name pos:line="73" pos:column="17">error_msg<pos:position pos:line="73" pos:column="26"/></name> <operator pos:line="73" pos:column="27">=<pos:position pos:line="73" pos:column="28"/></operator> <call><name pos:line="73" pos:column="29">xstrfmt<pos:position pos:line="73" pos:column="36"/></name><argument_list pos:line="73" pos:column="36">(<argument><expr><call><name pos:line="73" pos:column="37">_<pos:position pos:line="73" pos:column="38"/></name><argument_list pos:line="73" pos:column="38">(<argument><expr><literal type="string" pos:line="73" pos:column="39">"bad config line %d in standard input"<pos:position pos:line="73" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="78"/></argument_list></call></expr></argument>,
				      <argument><expr><name><name pos:line="74" pos:column="39">cf<pos:position pos:line="74" pos:column="41"/></name><operator pos:line="74" pos:column="41">-&gt;<pos:position pos:line="74" pos:column="46"/></operator><name pos:line="74" pos:column="43">linenr<pos:position pos:line="74" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="51"/></expr_stmt>
		<break pos:line="75" pos:column="17">break;<pos:position pos:line="75" pos:column="23"/></break>
	<case pos:line="76" pos:column="9">case <expr><name pos:line="76" pos:column="14">CONFIG_ORIGIN_SUBMODULE_BLOB<pos:position pos:line="76" pos:column="42"/></name></expr>:<pos:position pos:line="76" pos:column="43"/></case>
		<expr_stmt><expr><name pos:line="77" pos:column="17">error_msg<pos:position pos:line="77" pos:column="26"/></name> <operator pos:line="77" pos:column="27">=<pos:position pos:line="77" pos:column="28"/></operator> <call><name pos:line="77" pos:column="29">xstrfmt<pos:position pos:line="77" pos:column="36"/></name><argument_list pos:line="77" pos:column="36">(<argument><expr><call><name pos:line="77" pos:column="37">_<pos:position pos:line="77" pos:column="38"/></name><argument_list pos:line="77" pos:column="38">(<argument><expr><literal type="string" pos:line="77" pos:column="39">"bad config line %d in submodule-blob %s"<pos:position pos:line="77" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="81"/></argument_list></call></expr></argument>,
				       <argument><expr><name><name pos:line="78" pos:column="40">cf<pos:position pos:line="78" pos:column="42"/></name><operator pos:line="78" pos:column="42">-&gt;<pos:position pos:line="78" pos:column="47"/></operator><name pos:line="78" pos:column="44">linenr<pos:position pos:line="78" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="52">cf<pos:position pos:line="78" pos:column="54"/></name><operator pos:line="78" pos:column="54">-&gt;<pos:position pos:line="78" pos:column="59"/></operator><name pos:line="78" pos:column="56">name<pos:position pos:line="78" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="62"/></expr_stmt>
		<break pos:line="79" pos:column="17">break;<pos:position pos:line="79" pos:column="23"/></break>
	<case pos:line="80" pos:column="9">case <expr><name pos:line="80" pos:column="14">CONFIG_ORIGIN_CMDLINE<pos:position pos:line="80" pos:column="35"/></name></expr>:<pos:position pos:line="80" pos:column="36"/></case>
		<expr_stmt><expr><name pos:line="81" pos:column="17">error_msg<pos:position pos:line="81" pos:column="26"/></name> <operator pos:line="81" pos:column="27">=<pos:position pos:line="81" pos:column="28"/></operator> <call><name pos:line="81" pos:column="29">xstrfmt<pos:position pos:line="81" pos:column="36"/></name><argument_list pos:line="81" pos:column="36">(<argument><expr><call><name pos:line="81" pos:column="37">_<pos:position pos:line="81" pos:column="38"/></name><argument_list pos:line="81" pos:column="38">(<argument><expr><literal type="string" pos:line="81" pos:column="39">"bad config line %d in command line %s"<pos:position pos:line="81" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="79"/></argument_list></call></expr></argument>,
				       <argument><expr><name><name pos:line="82" pos:column="40">cf<pos:position pos:line="82" pos:column="42"/></name><operator pos:line="82" pos:column="42">-&gt;<pos:position pos:line="82" pos:column="47"/></operator><name pos:line="82" pos:column="44">linenr<pos:position pos:line="82" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="52">cf<pos:position pos:line="82" pos:column="54"/></name><operator pos:line="82" pos:column="54">-&gt;<pos:position pos:line="82" pos:column="59"/></operator><name pos:line="82" pos:column="56">name<pos:position pos:line="82" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="62"/></expr_stmt>
		<break pos:line="83" pos:column="17">break;<pos:position pos:line="83" pos:column="23"/></break>
	<default pos:line="84" pos:column="9">default:<pos:position pos:line="84" pos:column="17"/></default>
		<expr_stmt><expr><name pos:line="85" pos:column="17">error_msg<pos:position pos:line="85" pos:column="26"/></name> <operator pos:line="85" pos:column="27">=<pos:position pos:line="85" pos:column="28"/></operator> <call><name pos:line="85" pos:column="29">xstrfmt<pos:position pos:line="85" pos:column="36"/></name><argument_list pos:line="85" pos:column="36">(<argument><expr><call><name pos:line="85" pos:column="37">_<pos:position pos:line="85" pos:column="38"/></name><argument_list pos:line="85" pos:column="38">(<argument><expr><literal type="string" pos:line="85" pos:column="39">"bad config line %d in %s"<pos:position pos:line="85" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="66"/></argument_list></call></expr></argument>,
				      <argument><expr><name><name pos:line="86" pos:column="39">cf<pos:position pos:line="86" pos:column="41"/></name><operator pos:line="86" pos:column="41">-&gt;<pos:position pos:line="86" pos:column="46"/></operator><name pos:line="86" pos:column="43">linenr<pos:position pos:line="86" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="51">cf<pos:position pos:line="86" pos:column="53"/></name><operator pos:line="86" pos:column="53">-&gt;<pos:position pos:line="86" pos:column="58"/></operator><name pos:line="86" pos:column="55">name<pos:position pos:line="86" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="87" pos:column="10"/></block></switch>

	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name><name pos:line="89" pos:column="13">cf<pos:position pos:line="89" pos:column="15"/></name><operator pos:line="89" pos:column="15">-&gt;<pos:position pos:line="89" pos:column="20"/></operator><name pos:line="89" pos:column="17">die_on_error<pos:position pos:line="89" pos:column="29"/></name></name></expr>)<pos:position pos:line="89" pos:column="30"/></condition><then pos:line="89" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="17">die<pos:position pos:line="90" pos:column="20"/></name><argument_list pos:line="90" pos:column="20">(<argument><expr><literal type="string" pos:line="90" pos:column="21">"%s"<pos:position pos:line="90" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="27">error_msg<pos:position pos:line="90" pos:column="36"/></name></expr></argument>)<pos:position pos:line="90" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="38"/></expr_stmt></block></then>
	<else pos:line="91" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="92" pos:column="17">error_return<pos:position pos:line="92" pos:column="29"/></name> <operator pos:line="92" pos:column="30">=<pos:position pos:line="92" pos:column="31"/></operator> <call><name pos:line="92" pos:column="32">error<pos:position pos:line="92" pos:column="37"/></name><argument_list pos:line="92" pos:column="37">(<argument><expr><literal type="string" pos:line="92" pos:column="38">"%s"<pos:position pos:line="92" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="44">error_msg<pos:position pos:line="92" pos:column="53"/></name></expr></argument>)<pos:position pos:line="92" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="55"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="94" pos:column="9">free<pos:position pos:line="94" pos:column="13"/></name><argument_list pos:line="94" pos:column="13">(<argument><expr><name pos:line="94" pos:column="14">error_msg<pos:position pos:line="94" pos:column="23"/></name></expr></argument>)<pos:position pos:line="94" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="25"/></expr_stmt>
	<return pos:line="95" pos:column="9">return <expr><name pos:line="95" pos:column="16">error_return<pos:position pos:line="95" pos:column="28"/></name></expr>;<pos:position pos:line="95" pos:column="29"/></return>
}<pos:position pos:line="96" pos:column="2"/></block></function></unit>
