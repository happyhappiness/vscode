<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_841.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">intend_to_amend<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">char<pos:position pos:line="3" pos:column="22"/></name></type> <name><name pos:line="3" pos:column="23">head<pos:position pos:line="3" pos:column="27"/></name><index pos:line="3" pos:column="27">[<expr><literal type="number" pos:line="3" pos:column="28">20<pos:position pos:line="3" pos:column="30"/></literal></expr>]<pos:position pos:line="3" pos:column="31"/></index></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">p<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">get_sha1<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><literal type="string" pos:line="6" pos:column="22">"HEAD"<pos:position pos:line="6" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="30">head<pos:position pos:line="6" pos:column="34"/></name></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="36"/></condition><then pos:line="6" pos:column="36">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><call><name pos:line="7" pos:column="24">error<pos:position pos:line="7" pos:column="29"/></name><argument_list pos:line="7" pos:column="29">(<argument><expr><call><name pos:line="7" pos:column="30">_<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><literal type="string" pos:line="7" pos:column="32">"cannot read HEAD"<pos:position pos:line="7" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="53"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="9" pos:column="9">p<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">=<pos:position pos:line="9" pos:column="12"/></operator> <call><name pos:line="9" pos:column="13">sha1_to_hex<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">head<pos:position pos:line="9" pos:column="29"/></name></expr></argument>)<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt>
	<return pos:line="10" pos:column="9">return <expr><call><name pos:line="10" pos:column="16">write_message<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">p<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="33">strlen<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">(<argument><expr><name pos:line="10" pos:column="40">p<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="44">rebase_path_amend<pos:position pos:line="10" pos:column="61"/></name><argument_list pos:line="10" pos:column="61">()<pos:position pos:line="10" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="65">1<pos:position pos:line="10" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="68"/></return>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
