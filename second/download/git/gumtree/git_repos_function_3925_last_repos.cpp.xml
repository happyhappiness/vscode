<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3925_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">graph_output_padding_line<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">git_graph<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">graph<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
				      <parameter><decl><type><name><name pos:line="2" pos:column="39">struct<pos:position pos:line="2" pos:column="45"/></name> <name pos:line="2" pos:column="46">strbuf<pos:position pos:line="2" pos:column="52"/></name></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">sb<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * We could conceivable be called with a NULL commit
	 * if our caller has a bug, and invokes graph_next_line()
	 * immediately after graph_init(), without first calling
	 * graph_update().  Return without outputting anything in this
	 * case.
	 */</comment>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name><name pos:line="13" pos:column="14">graph<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">-&gt;<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="21">commit<pos:position pos:line="13" pos:column="27"/></name></name></expr>)<pos:position pos:line="13" pos:column="28"/></condition><then pos:line="13" pos:column="28">
		<block type="pseudo"><return pos:line="14" pos:column="17">return;<pos:position pos:line="14" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="16" pos:column="9">/*
	 * Output a padding row, that leaves all branch lines unchanged
	 */</comment>
	<for pos:line="19" pos:column="9">for <control pos:line="19" pos:column="13">(<init><expr><name pos:line="19" pos:column="14">i<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <literal type="number" pos:line="19" pos:column="18">0<pos:position pos:line="19" pos:column="19"/></literal></expr>;<pos:position pos:line="19" pos:column="20"/></init> <condition><expr><name pos:line="19" pos:column="21">i<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">&lt;<pos:position pos:line="19" pos:column="27"/></operator> <name><name pos:line="19" pos:column="25">graph<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">num_new_columns<pos:position pos:line="19" pos:column="47"/></name></name></expr>;<pos:position pos:line="19" pos:column="48"/></condition> <incr><expr><name pos:line="19" pos:column="49">i<pos:position pos:line="19" pos:column="50"/></name><operator pos:line="19" pos:column="50">++<pos:position pos:line="19" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="19" pos:column="53"/></control> <block pos:line="19" pos:column="54">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">strbuf_write_column<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><name pos:line="20" pos:column="37">sb<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="41">&amp;<pos:position pos:line="20" pos:column="46"/></operator><name><name pos:line="20" pos:column="42">graph<pos:position pos:line="20" pos:column="47"/></name><operator pos:line="20" pos:column="47">-&gt;<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="49">new_columns<pos:position pos:line="20" pos:column="60"/></name><index pos:line="20" pos:column="60">[<expr><name pos:line="20" pos:column="61">i<pos:position pos:line="20" pos:column="62"/></name></expr>]<pos:position pos:line="20" pos:column="63"/></index></name></expr></argument>, <argument><expr><literal type="char" pos:line="20" pos:column="65">'|'<pos:position pos:line="20" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">strbuf_addch<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name pos:line="21" pos:column="30">sb<pos:position pos:line="21" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="21" pos:column="34">' '<pos:position pos:line="21" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">graph_pad_horizontally<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">graph<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="39">sb<pos:position pos:line="24" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="43">graph<pos:position pos:line="24" pos:column="48"/></name><operator pos:line="24" pos:column="48">-&gt;<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="50">num_new_columns<pos:position pos:line="24" pos:column="65"/></name></name> <operator pos:line="24" pos:column="66">*<pos:position pos:line="24" pos:column="67"/></operator> <literal type="number" pos:line="24" pos:column="68">2<pos:position pos:line="24" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="71"/></expr_stmt>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
