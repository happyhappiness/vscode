<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2593_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">read_one_header_line<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">strbuf<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">line<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">FILE<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">in<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">continuation<pos:position pos:line="3" pos:column="35"/></name> <init pos:line="3" pos:column="36">= <expr><name pos:line="3" pos:column="38">STRBUF_INIT<pos:position pos:line="3" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="50"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/* Get the first part of the line. */</comment>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">strbuf_getline_lf<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">line<pos:position pos:line="6" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="37">in<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="41"/></condition><then pos:line="6" pos:column="41">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * Is it an empty line or not a valid rfc2822 header?
	 * If so, stop here, and return false ("not a header")
	 */</comment>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">strbuf_rtrim<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">line<pos:position pos:line="13" pos:column="26"/></name></expr></argument>)<pos:position pos:line="13" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="28"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><name><name pos:line="14" pos:column="14">line<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">-&gt;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="20">len<pos:position pos:line="14" pos:column="23"/></name></name> <operator pos:line="14" pos:column="24">||<pos:position pos:line="14" pos:column="26"/></operator> <operator pos:line="14" pos:column="27">!<pos:position pos:line="14" pos:column="28"/></operator><call><name pos:line="14" pos:column="28">is_rfc2822_header<pos:position pos:line="14" pos:column="45"/></name><argument_list pos:line="14" pos:column="45">(<argument><expr><name pos:line="14" pos:column="46">line<pos:position pos:line="14" pos:column="50"/></name></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="52"/></condition><then pos:line="14" pos:column="52"> <block pos:line="14" pos:column="53">{
		<comment type="block" pos:line="15" pos:column="17">/* Re-add the newline */</comment>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">strbuf_addch<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">line<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="16" pos:column="36">'\n'<pos:position pos:line="16" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
		<return pos:line="17" pos:column="17">return <expr><literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="20" pos:column="9">/*
	 * Now we need to eat all the continuation lines..
	 * Yuck, 2822 header "folding"
	 */</comment>
	<for pos:line="24" pos:column="9">for <control pos:line="24" pos:column="13">(<init pos:line="24" pos:column="14">;<pos:position pos:line="24" pos:column="15"/></init><condition pos:line="24" pos:column="15">;<pos:position pos:line="24" pos:column="16"/></condition><incr/>)<pos:position pos:line="24" pos:column="17"/></control> <block pos:line="24" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">int<pos:position pos:line="25" pos:column="20"/></name></type> <name pos:line="25" pos:column="21">peek<pos:position pos:line="25" pos:column="25"/></name></decl>;<pos:position pos:line="25" pos:column="26"/></decl_stmt>

		<expr_stmt><expr><name pos:line="27" pos:column="17">peek<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <call><name pos:line="27" pos:column="24">fgetc<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">in<pos:position pos:line="27" pos:column="32"/></name></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">peek<pos:position pos:line="28" pos:column="25"/></name> <operator pos:line="28" pos:column="26">==<pos:position pos:line="28" pos:column="28"/></operator> <name pos:line="28" pos:column="29">EOF<pos:position pos:line="28" pos:column="32"/></name></expr>)<pos:position pos:line="28" pos:column="33"/></condition><then pos:line="28" pos:column="33">
			<block type="pseudo"><break pos:line="29" pos:column="25">break;<pos:position pos:line="29" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">ungetc<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><name pos:line="30" pos:column="24">peek<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="30">in<pos:position pos:line="30" pos:column="32"/></name></expr></argument>)<pos:position pos:line="30" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">peek<pos:position pos:line="31" pos:column="25"/></name> <operator pos:line="31" pos:column="26">!=<pos:position pos:line="31" pos:column="28"/></operator> <literal type="char" pos:line="31" pos:column="29">' '<pos:position pos:line="31" pos:column="32"/></literal> <operator pos:line="31" pos:column="33">&amp;&amp;<pos:position pos:line="31" pos:column="43"/></operator> <name pos:line="31" pos:column="36">peek<pos:position pos:line="31" pos:column="40"/></name> <operator pos:line="31" pos:column="41">!=<pos:position pos:line="31" pos:column="43"/></operator> <literal type="char" pos:line="31" pos:column="44">'\t'<pos:position pos:line="31" pos:column="48"/></literal></expr>)<pos:position pos:line="31" pos:column="49"/></condition><then pos:line="31" pos:column="49">
			<block type="pseudo"><break pos:line="32" pos:column="25">break;<pos:position pos:line="32" pos:column="31"/></break></block></then></if>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><call><name pos:line="33" pos:column="21">strbuf_getline_lf<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><operator pos:line="33" pos:column="39">&amp;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="40">continuation<pos:position pos:line="33" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="54">in<pos:position pos:line="33" pos:column="56"/></name></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="58"/></condition><then pos:line="33" pos:column="58">
			<block type="pseudo"><break pos:line="34" pos:column="25">break;<pos:position pos:line="34" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name><name pos:line="35" pos:column="17">continuation<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">.<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="30">buf<pos:position pos:line="35" pos:column="33"/></name><index pos:line="35" pos:column="33">[<expr><literal type="number" pos:line="35" pos:column="34">0<pos:position pos:line="35" pos:column="35"/></literal></expr>]<pos:position pos:line="35" pos:column="36"/></index></name> <operator pos:line="35" pos:column="37">=<pos:position pos:line="35" pos:column="38"/></operator> <literal type="char" pos:line="35" pos:column="39">' '<pos:position pos:line="35" pos:column="42"/></literal></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">strbuf_rtrim<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><operator pos:line="36" pos:column="30">&amp;<pos:position pos:line="36" pos:column="35"/></operator><name pos:line="36" pos:column="31">continuation<pos:position pos:line="36" pos:column="43"/></name></expr></argument>)<pos:position pos:line="36" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">strbuf_addbuf<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name pos:line="37" pos:column="31">line<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="37">&amp;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="38">continuation<pos:position pos:line="37" pos:column="50"/></name></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="52"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">strbuf_release<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><operator pos:line="39" pos:column="24">&amp;<pos:position pos:line="39" pos:column="29"/></operator><name pos:line="39" pos:column="25">continuation<pos:position pos:line="39" pos:column="37"/></name></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt>

	<return pos:line="41" pos:column="9">return <expr><literal type="number" pos:line="41" pos:column="16">1<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
