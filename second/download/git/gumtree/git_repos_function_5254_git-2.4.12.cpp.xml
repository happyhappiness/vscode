<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5254_git-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">try_merge_strategy<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">strategy<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="53">struct<pos:position pos:line="1" pos:column="59"/></name> <name pos:line="1" pos:column="60">commit_list<pos:position pos:line="1" pos:column="71"/></name></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">common<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">commit_list<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">remoteheads<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="3" pos:column="31">struct<pos:position pos:line="3" pos:column="37"/></name> <name pos:line="3" pos:column="38">commit<pos:position pos:line="3" pos:column="44"/></name></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="46">head<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="52">const<pos:position pos:line="3" pos:column="57"/></specifier> <name pos:line="3" pos:column="58">char<pos:position pos:line="3" pos:column="62"/></name> <modifier pos:line="3" pos:column="63">*<pos:position pos:line="3" pos:column="64"/></modifier></type><name pos:line="3" pos:column="64">head_arg<pos:position pos:line="3" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="73"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">static<pos:position pos:line="5" pos:column="15"/></specifier> <type><name><name pos:line="5" pos:column="16">struct<pos:position pos:line="5" pos:column="22"/></name> <name pos:line="5" pos:column="23">lock_file<pos:position pos:line="5" pos:column="32"/></name></name></type> <name pos:line="5" pos:column="33">lock<pos:position pos:line="5" pos:column="37"/></name></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">hold_locked_index<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><operator pos:line="7" pos:column="27">&amp;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="28">lock<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="34">1<pos:position pos:line="7" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">refresh_cache<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><name pos:line="8" pos:column="23">REFRESH_QUIET<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">active_cache_changed<pos:position pos:line="9" pos:column="33"/></name> <operator pos:line="9" pos:column="34">&amp;&amp;<pos:position pos:line="9" pos:column="44"/></operator>
	    <call><name pos:line="10" pos:column="13">write_locked_index<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><operator pos:line="10" pos:column="32">&amp;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="33">the_index<pos:position pos:line="10" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="44">&amp;<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="45">lock<pos:position pos:line="10" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="51">COMMIT_LOCK<pos:position pos:line="10" pos:column="62"/></name></expr></argument>)<pos:position pos:line="10" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="64"/></condition><then pos:line="10" pos:column="64">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><call><name pos:line="11" pos:column="24">error<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><call><name pos:line="11" pos:column="30">_<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><literal type="string" pos:line="11" pos:column="32">"Unable to write index."<pos:position pos:line="11" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="59"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">rollback_lock_file<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><operator pos:line="12" pos:column="28">&amp;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="29">lock<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><call><name pos:line="14" pos:column="14">strcmp<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">strategy<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="31">"recursive"<pos:position pos:line="14" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call> <operator pos:line="14" pos:column="44">||<pos:position pos:line="14" pos:column="46"/></operator> <operator pos:line="14" pos:column="47">!<pos:position pos:line="14" pos:column="48"/></operator><call><name pos:line="14" pos:column="48">strcmp<pos:position pos:line="14" pos:column="54"/></name><argument_list pos:line="14" pos:column="54">(<argument><expr><name pos:line="14" pos:column="55">strategy<pos:position pos:line="14" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="65">"subtree"<pos:position pos:line="14" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="76"/></condition><then pos:line="14" pos:column="76"> <block pos:line="14" pos:column="77">{
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">int<pos:position pos:line="15" pos:column="20"/></name></type> <name pos:line="15" pos:column="21">clean<pos:position pos:line="15" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="15" pos:column="28">x<pos:position pos:line="15" pos:column="29"/></name></decl>;<pos:position pos:line="15" pos:column="30"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="16" pos:column="17">struct<pos:position pos:line="16" pos:column="23"/></name> <name pos:line="16" pos:column="24">commit<pos:position pos:line="16" pos:column="30"/></name></name> <modifier pos:line="16" pos:column="31">*<pos:position pos:line="16" pos:column="32"/></modifier></type><name pos:line="16" pos:column="32">result<pos:position pos:line="16" pos:column="38"/></name></decl>;<pos:position pos:line="16" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="17" pos:column="17">struct<pos:position pos:line="17" pos:column="23"/></name> <name pos:line="17" pos:column="24">commit_list<pos:position pos:line="17" pos:column="35"/></name></name> <modifier pos:line="17" pos:column="36">*<pos:position pos:line="17" pos:column="37"/></modifier></type><name pos:line="17" pos:column="37">reversed<pos:position pos:line="17" pos:column="45"/></name> <init pos:line="17" pos:column="46">= <expr><name pos:line="17" pos:column="48">NULL<pos:position pos:line="17" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="53"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="18" pos:column="17">struct<pos:position pos:line="18" pos:column="23"/></name> <name pos:line="18" pos:column="24">merge_options<pos:position pos:line="18" pos:column="37"/></name></name></type> <name pos:line="18" pos:column="38">o<pos:position pos:line="18" pos:column="39"/></name></decl>;<pos:position pos:line="18" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="19" pos:column="17">struct<pos:position pos:line="19" pos:column="23"/></name> <name pos:line="19" pos:column="24">commit_list<pos:position pos:line="19" pos:column="35"/></name></name> <modifier pos:line="19" pos:column="36">*<pos:position pos:line="19" pos:column="37"/></modifier></type><name pos:line="19" pos:column="37">j<pos:position pos:line="19" pos:column="38"/></name></decl>;<pos:position pos:line="19" pos:column="39"/></decl_stmt>

		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name><name pos:line="21" pos:column="21">remoteheads<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">-&gt;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="34">next<pos:position pos:line="21" pos:column="38"/></name></name></expr>)<pos:position pos:line="21" pos:column="39"/></condition><then pos:line="21" pos:column="39"> <block pos:line="21" pos:column="40">{
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">error<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><call><name pos:line="22" pos:column="31">_<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><literal type="string" pos:line="22" pos:column="33">"Not handling anything other than two heads merge."<pos:position pos:line="22" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="87"/></expr_stmt>
			<return pos:line="23" pos:column="25">return <expr><literal type="number" pos:line="23" pos:column="32">2<pos:position pos:line="23" pos:column="33"/></literal></expr>;<pos:position pos:line="23" pos:column="34"/></return>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="26" pos:column="17">init_merge_options<pos:position pos:line="26" pos:column="35"/></name><argument_list pos:line="26" pos:column="35">(<argument><expr><operator pos:line="26" pos:column="36">&amp;<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="37">o<pos:position pos:line="26" pos:column="38"/></name></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><call><name pos:line="27" pos:column="22">strcmp<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">strategy<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="39">"subtree"<pos:position pos:line="27" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="50"/></condition><then pos:line="27" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="28" pos:column="25">o<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">.<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="27">subtree_shift<pos:position pos:line="28" pos:column="40"/></name></name> <operator pos:line="28" pos:column="41">=<pos:position pos:line="28" pos:column="42"/></operator> <literal type="string" pos:line="28" pos:column="43">""<pos:position pos:line="28" pos:column="45"/></literal></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name><name pos:line="30" pos:column="17">o<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">.<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">renormalize<pos:position pos:line="30" pos:column="30"/></name></name> <operator pos:line="30" pos:column="31">=<pos:position pos:line="30" pos:column="32"/></operator> <name pos:line="30" pos:column="33">option_renormalize<pos:position pos:line="30" pos:column="51"/></name></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">o<pos:position pos:line="31" pos:column="18"/></name><operator pos:line="31" pos:column="18">.<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="19">show_rename_progress<pos:position pos:line="31" pos:column="39"/></name></name> <operator pos:line="31" pos:column="40">=<pos:position pos:line="31" pos:column="41"/></operator>
			<ternary><condition><expr><name pos:line="32" pos:column="25">show_progress<pos:position pos:line="32" pos:column="38"/></name> <operator pos:line="32" pos:column="39">==<pos:position pos:line="32" pos:column="41"/></operator> <operator pos:line="32" pos:column="42">-<pos:position pos:line="32" pos:column="43"/></operator><literal type="number" pos:line="32" pos:column="43">1<pos:position pos:line="32" pos:column="44"/></literal></expr> ?<pos:position pos:line="32" pos:column="46"/></condition><then pos:line="32" pos:column="46"> <expr><call><name pos:line="32" pos:column="47">isatty<pos:position pos:line="32" pos:column="53"/></name><argument_list pos:line="32" pos:column="53">(<argument><expr><literal type="number" pos:line="32" pos:column="54">2<pos:position pos:line="32" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr> <pos:position pos:line="32" pos:column="57"/></then><else pos:line="32" pos:column="57">: <expr><name pos:line="32" pos:column="59">show_progress<pos:position pos:line="32" pos:column="72"/></name></expr></else></ternary></expr>;<pos:position pos:line="32" pos:column="73"/></expr_stmt>

		<for pos:line="34" pos:column="17">for <control pos:line="34" pos:column="21">(<init><expr><name pos:line="34" pos:column="22">x<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">=<pos:position pos:line="34" pos:column="25"/></operator> <literal type="number" pos:line="34" pos:column="26">0<pos:position pos:line="34" pos:column="27"/></literal></expr>;<pos:position pos:line="34" pos:column="28"/></init> <condition><expr><name pos:line="34" pos:column="29">x<pos:position pos:line="34" pos:column="30"/></name> <operator pos:line="34" pos:column="31">&lt;<pos:position pos:line="34" pos:column="35"/></operator> <name pos:line="34" pos:column="33">xopts_nr<pos:position pos:line="34" pos:column="41"/></name></expr>;<pos:position pos:line="34" pos:column="42"/></condition> <incr><expr><name pos:line="34" pos:column="43">x<pos:position pos:line="34" pos:column="44"/></name><operator pos:line="34" pos:column="44">++<pos:position pos:line="34" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="34" pos:column="47"/></control>
			<block type="pseudo"><if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><call><name pos:line="35" pos:column="29">parse_merge_opt<pos:position pos:line="35" pos:column="44"/></name><argument_list pos:line="35" pos:column="44">(<argument><expr><operator pos:line="35" pos:column="45">&amp;<pos:position pos:line="35" pos:column="50"/></operator><name pos:line="35" pos:column="46">o<pos:position pos:line="35" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="49">xopts<pos:position pos:line="35" pos:column="54"/></name><index pos:line="35" pos:column="54">[<expr><name pos:line="35" pos:column="55">x<pos:position pos:line="35" pos:column="56"/></name></expr>]<pos:position pos:line="35" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="35" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="59"/></condition><then pos:line="35" pos:column="59">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="33">die<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><call><name pos:line="36" pos:column="37">_<pos:position pos:line="36" pos:column="38"/></name><argument_list pos:line="36" pos:column="38">(<argument><expr><literal type="string" pos:line="36" pos:column="39">"Unknown option for merge-recursive: -X%s"<pos:position pos:line="36" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="82"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="84">xopts<pos:position pos:line="36" pos:column="89"/></name><index pos:line="36" pos:column="89">[<expr><name pos:line="36" pos:column="90">x<pos:position pos:line="36" pos:column="91"/></name></expr>]<pos:position pos:line="36" pos:column="92"/></index></name></expr></argument>)<pos:position pos:line="36" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="94"/></expr_stmt></block></then></if></block></for>

		<expr_stmt><expr><name><name pos:line="38" pos:column="17">o<pos:position pos:line="38" pos:column="18"/></name><operator pos:line="38" pos:column="18">.<pos:position pos:line="38" pos:column="19"/></operator><name pos:line="38" pos:column="19">branch1<pos:position pos:line="38" pos:column="26"/></name></name> <operator pos:line="38" pos:column="27">=<pos:position pos:line="38" pos:column="28"/></operator> <name pos:line="38" pos:column="29">head_arg<pos:position pos:line="38" pos:column="37"/></name></expr>;<pos:position pos:line="38" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="39" pos:column="17">o<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">.<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="19">branch2<pos:position pos:line="39" pos:column="26"/></name></name> <operator pos:line="39" pos:column="27">=<pos:position pos:line="39" pos:column="28"/></operator> <call><name pos:line="39" pos:column="29">merge_remote_util<pos:position pos:line="39" pos:column="46"/></name><argument_list pos:line="39" pos:column="46">(<argument><expr><name><name pos:line="39" pos:column="47">remoteheads<pos:position pos:line="39" pos:column="58"/></name><operator pos:line="39" pos:column="58">-&gt;<pos:position pos:line="39" pos:column="63"/></operator><name pos:line="39" pos:column="60">item<pos:position pos:line="39" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="65"/></argument_list></call><operator pos:line="39" pos:column="65">-&gt;<pos:position pos:line="39" pos:column="70"/></operator><name pos:line="39" pos:column="67">name<pos:position pos:line="39" pos:column="71"/></name></expr>;<pos:position pos:line="39" pos:column="72"/></expr_stmt>

		<for pos:line="41" pos:column="17">for <control pos:line="41" pos:column="21">(<init><expr><name pos:line="41" pos:column="22">j<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">=<pos:position pos:line="41" pos:column="25"/></operator> <name pos:line="41" pos:column="26">common<pos:position pos:line="41" pos:column="32"/></name></expr>;<pos:position pos:line="41" pos:column="33"/></init> <condition><expr><name pos:line="41" pos:column="34">j<pos:position pos:line="41" pos:column="35"/></name></expr>;<pos:position pos:line="41" pos:column="36"/></condition> <incr><expr><name pos:line="41" pos:column="37">j<pos:position pos:line="41" pos:column="38"/></name> <operator pos:line="41" pos:column="39">=<pos:position pos:line="41" pos:column="40"/></operator> <name><name pos:line="41" pos:column="41">j<pos:position pos:line="41" pos:column="42"/></name><operator pos:line="41" pos:column="42">-&gt;<pos:position pos:line="41" pos:column="47"/></operator><name pos:line="41" pos:column="44">next<pos:position pos:line="41" pos:column="48"/></name></name></expr></incr>)<pos:position pos:line="41" pos:column="49"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="25">commit_list_insert<pos:position pos:line="42" pos:column="43"/></name><argument_list pos:line="42" pos:column="43">(<argument><expr><name><name pos:line="42" pos:column="44">j<pos:position pos:line="42" pos:column="45"/></name><operator pos:line="42" pos:column="45">-&gt;<pos:position pos:line="42" pos:column="50"/></operator><name pos:line="42" pos:column="47">item<pos:position pos:line="42" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="53">&amp;<pos:position pos:line="42" pos:column="58"/></operator><name pos:line="42" pos:column="54">reversed<pos:position pos:line="42" pos:column="62"/></name></expr></argument>)<pos:position pos:line="42" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="64"/></expr_stmt></block></for>

		<expr_stmt><expr><call><name pos:line="44" pos:column="17">hold_locked_index<pos:position pos:line="44" pos:column="34"/></name><argument_list pos:line="44" pos:column="34">(<argument><expr><operator pos:line="44" pos:column="35">&amp;<pos:position pos:line="44" pos:column="40"/></operator><name pos:line="44" pos:column="36">lock<pos:position pos:line="44" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="42">1<pos:position pos:line="44" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="45" pos:column="17">clean<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">=<pos:position pos:line="45" pos:column="24"/></operator> <call><name pos:line="45" pos:column="25">merge_recursive<pos:position pos:line="45" pos:column="40"/></name><argument_list pos:line="45" pos:column="40">(<argument><expr><operator pos:line="45" pos:column="41">&amp;<pos:position pos:line="45" pos:column="46"/></operator><name pos:line="45" pos:column="42">o<pos:position pos:line="45" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="45">head<pos:position pos:line="45" pos:column="49"/></name></expr></argument>,
				<argument><expr><name><name pos:line="46" pos:column="33">remoteheads<pos:position pos:line="46" pos:column="44"/></name><operator pos:line="46" pos:column="44">-&gt;<pos:position pos:line="46" pos:column="49"/></operator><name pos:line="46" pos:column="46">item<pos:position pos:line="46" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="52">reversed<pos:position pos:line="46" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="62">&amp;<pos:position pos:line="46" pos:column="67"/></operator><name pos:line="46" pos:column="63">result<pos:position pos:line="46" pos:column="69"/></name></expr></argument>)<pos:position pos:line="46" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="71"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">active_cache_changed<pos:position pos:line="47" pos:column="41"/></name> <operator pos:line="47" pos:column="42">&amp;&amp;<pos:position pos:line="47" pos:column="52"/></operator>
		    <call><name pos:line="48" pos:column="21">write_locked_index<pos:position pos:line="48" pos:column="39"/></name><argument_list pos:line="48" pos:column="39">(<argument><expr><operator pos:line="48" pos:column="40">&amp;<pos:position pos:line="48" pos:column="45"/></operator><name pos:line="48" pos:column="41">the_index<pos:position pos:line="48" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="52">&amp;<pos:position pos:line="48" pos:column="57"/></operator><name pos:line="48" pos:column="53">lock<pos:position pos:line="48" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="59">COMMIT_LOCK<pos:position pos:line="48" pos:column="70"/></name></expr></argument>)<pos:position pos:line="48" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="72"/></condition><then pos:line="48" pos:column="72">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="25">die<pos:position pos:line="49" pos:column="28"/></name> <argument_list pos:line="49" pos:column="29">(<argument><expr><call><name pos:line="49" pos:column="30">_<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">(<argument><expr><literal type="string" pos:line="49" pos:column="32">"unable to write %s"<pos:position pos:line="49" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="55">get_index_file<pos:position pos:line="49" pos:column="69"/></name><argument_list pos:line="49" pos:column="69">()<pos:position pos:line="49" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="73"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">rollback_lock_file<pos:position pos:line="50" pos:column="35"/></name><argument_list pos:line="50" pos:column="35">(<argument><expr><operator pos:line="50" pos:column="36">&amp;<pos:position pos:line="50" pos:column="41"/></operator><name pos:line="50" pos:column="37">lock<pos:position pos:line="50" pos:column="41"/></name></expr></argument>)<pos:position pos:line="50" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="43"/></expr_stmt>
		<return pos:line="51" pos:column="17">return <expr><ternary><condition><expr><name pos:line="51" pos:column="24">clean<pos:position pos:line="51" pos:column="29"/></name></expr> ?<pos:position pos:line="51" pos:column="31"/></condition><then pos:line="51" pos:column="31"> <expr><literal type="number" pos:line="51" pos:column="32">0<pos:position pos:line="51" pos:column="33"/></literal></expr> <pos:position pos:line="51" pos:column="34"/></then><else pos:line="51" pos:column="34">: <expr><literal type="number" pos:line="51" pos:column="36">1<pos:position pos:line="51" pos:column="37"/></literal></expr></else></ternary></expr>;<pos:position pos:line="51" pos:column="38"/></return>
	}<pos:position pos:line="52" pos:column="10"/></block></then> <else pos:line="52" pos:column="11">else <block pos:line="52" pos:column="16">{
		<return pos:line="53" pos:column="17">return <expr><call><name pos:line="53" pos:column="24">try_merge_command<pos:position pos:line="53" pos:column="41"/></name><argument_list pos:line="53" pos:column="41">(<argument><expr><name pos:line="53" pos:column="42">strategy<pos:position pos:line="53" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="52">xopts_nr<pos:position pos:line="53" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="62">xopts<pos:position pos:line="53" pos:column="67"/></name></expr></argument>,
						<argument><expr><name pos:line="54" pos:column="49">common<pos:position pos:line="54" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="57">head_arg<pos:position pos:line="54" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="67">remoteheads<pos:position pos:line="54" pos:column="78"/></name></expr></argument>)<pos:position pos:line="54" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="80"/></return>
	}<pos:position pos:line="55" pos:column="10"/></block></else></if>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
