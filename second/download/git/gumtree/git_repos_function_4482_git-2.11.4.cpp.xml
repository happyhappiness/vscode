<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4482_git-2.11.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">unsigned<pos:position pos:line="1" pos:column="9"/></name> <name pos:line="1" pos:column="10">long<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">xdl_hash_record<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier><modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">data<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">top<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">long<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">flags<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">long<pos:position pos:line="3" pos:column="22"/></name></type> <name pos:line="3" pos:column="23">hash<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><literal type="number" pos:line="3" pos:column="30">5381<pos:position pos:line="3" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">long<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">a<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><literal type="number" pos:line="4" pos:column="27">0<pos:position pos:line="4" pos:column="28"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="30">mask<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><literal type="number" pos:line="4" pos:column="37">0<pos:position pos:line="4" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <specifier pos:line="5" pos:column="14">const<pos:position pos:line="5" pos:column="19"/></specifier> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">ptr<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><operator pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="28">data<pos:position pos:line="5" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <specifier pos:line="6" pos:column="14">const<pos:position pos:line="6" pos:column="19"/></specifier> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">end<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><name pos:line="6" pos:column="27">top<pos:position pos:line="6" pos:column="30"/></name> <operator pos:line="6" pos:column="31">-<pos:position pos:line="6" pos:column="32"/></operator> sizeof<operator pos:line="6" pos:column="39">(<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="40">unsigned<pos:position pos:line="6" pos:column="48"/></name> <name pos:line="6" pos:column="49">long<pos:position pos:line="6" pos:column="53"/></name><operator pos:line="6" pos:column="53">)<pos:position pos:line="6" pos:column="54"/></operator> <operator pos:line="6" pos:column="55">+<pos:position pos:line="6" pos:column="56"/></operator> <literal type="number" pos:line="6" pos:column="57">1<pos:position pos:line="6" pos:column="58"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="59"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">flags<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">&amp;<pos:position pos:line="8" pos:column="24"/></operator> <name pos:line="8" pos:column="21">XDF_WHITESPACE_FLAGS<pos:position pos:line="8" pos:column="41"/></name></expr>)<pos:position pos:line="8" pos:column="42"/></condition><then pos:line="8" pos:column="42">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><call><name pos:line="9" pos:column="24">xdl_hash_record_with_whitespace<pos:position pos:line="9" pos:column="55"/></name><argument_list pos:line="9" pos:column="55">(<argument><expr><name pos:line="9" pos:column="56">data<pos:position pos:line="9" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="62">top<pos:position pos:line="9" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="67">flags<pos:position pos:line="9" pos:column="72"/></name></expr></argument>)<pos:position pos:line="9" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="74"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="11" pos:column="9">ptr<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">-=<pos:position pos:line="11" pos:column="15"/></operator> sizeof<operator pos:line="11" pos:column="22">(<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">unsigned<pos:position pos:line="11" pos:column="31"/></name> <name pos:line="11" pos:column="32">long<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">)<pos:position pos:line="11" pos:column="37"/></operator></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
	<do pos:line="12" pos:column="9">do <block pos:line="12" pos:column="12">{
		<expr_stmt><expr><name pos:line="13" pos:column="17">hash<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">+=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">hash<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">&lt;&lt;<pos:position pos:line="13" pos:column="38"/></operator> <literal type="number" pos:line="13" pos:column="33">5<pos:position pos:line="13" pos:column="34"/></literal></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">hash<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">^=<pos:position pos:line="14" pos:column="24"/></operator> <name pos:line="14" pos:column="25">a<pos:position pos:line="14" pos:column="26"/></name></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">ptr<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">+=<pos:position pos:line="15" pos:column="23"/></operator> sizeof<operator pos:line="15" pos:column="30">(<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="31">unsigned<pos:position pos:line="15" pos:column="39"/></name> <name pos:line="15" pos:column="40">long<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">)<pos:position pos:line="15" pos:column="45"/></operator></expr>;<pos:position pos:line="15" pos:column="46"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">ptr<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">&gt;=<pos:position pos:line="16" pos:column="30"/></operator> <name pos:line="16" pos:column="28">end<pos:position pos:line="16" pos:column="31"/></name></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32">
			<block type="pseudo"><break pos:line="17" pos:column="25">break;<pos:position pos:line="17" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="18" pos:column="17">a<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <operator pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></operator><operator pos:line="18" pos:column="22">(<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">unsigned<pos:position pos:line="18" pos:column="31"/></name> <name pos:line="18" pos:column="32">long<pos:position pos:line="18" pos:column="36"/></name> <operator pos:line="18" pos:column="37">*<pos:position pos:line="18" pos:column="38"/></operator><operator pos:line="18" pos:column="38">)<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="39">ptr<pos:position pos:line="18" pos:column="42"/></name></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
		<comment type="block" pos:line="19" pos:column="17">/* Do we have any '\n' bytes in this word? */</comment>
		<expr_stmt><expr><name pos:line="20" pos:column="17">mask<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <call><name pos:line="20" pos:column="24">has_zero<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">a<pos:position pos:line="20" pos:column="34"/></name> <operator pos:line="20" pos:column="35">^<pos:position pos:line="20" pos:column="36"/></operator> <name pos:line="20" pos:column="37">NEWLINEBYTES<pos:position pos:line="20" pos:column="49"/></name></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block> while <condition pos:line="21" pos:column="17">(<expr><operator pos:line="21" pos:column="18">!<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">mask<pos:position pos:line="21" pos:column="23"/></name></expr>)<pos:position pos:line="21" pos:column="24"/></condition>;<pos:position pos:line="21" pos:column="25"/></do>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">ptr<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">&gt;=<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="20">end<pos:position pos:line="23" pos:column="23"/></name></expr>)<pos:position pos:line="23" pos:column="24"/></condition><then pos:line="23" pos:column="24"> <block pos:line="23" pos:column="25">{
		<comment type="block" pos:line="24" pos:column="17">/*
		 * There is only a partial word left at the end of the
		 * buffer. Because we may work with a memory mapping,
		 * we have to grab the rest byte by byte instead of
		 * blindly reading it.
		 *
		 * To avoid problems with masking in a signed value,
		 * we use an unsigned char here.
		 */</comment>
		<decl_stmt><decl><type><specifier pos:line="33" pos:column="17">const<pos:position pos:line="33" pos:column="22"/></specifier> <name pos:line="33" pos:column="23">char<pos:position pos:line="33" pos:column="27"/></name> <modifier pos:line="33" pos:column="28">*<pos:position pos:line="33" pos:column="29"/></modifier></type><name pos:line="33" pos:column="29">p<pos:position pos:line="33" pos:column="30"/></name></decl>;<pos:position pos:line="33" pos:column="31"/></decl_stmt>
		<for pos:line="34" pos:column="17">for <control pos:line="34" pos:column="21">(<init><expr><name pos:line="34" pos:column="22">p<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">=<pos:position pos:line="34" pos:column="25"/></operator> <name pos:line="34" pos:column="26">top<pos:position pos:line="34" pos:column="29"/></name> <operator pos:line="34" pos:column="30">-<pos:position pos:line="34" pos:column="31"/></operator> <literal type="number" pos:line="34" pos:column="32">1<pos:position pos:line="34" pos:column="33"/></literal></expr>;<pos:position pos:line="34" pos:column="34"/></init> <condition><expr><name pos:line="34" pos:column="35">p<pos:position pos:line="34" pos:column="36"/></name> <operator pos:line="34" pos:column="37">&gt;=<pos:position pos:line="34" pos:column="42"/></operator> <name pos:line="34" pos:column="40">ptr<pos:position pos:line="34" pos:column="43"/></name></expr>;<pos:position pos:line="34" pos:column="44"/></condition> <incr><expr><name pos:line="34" pos:column="45">p<pos:position pos:line="34" pos:column="46"/></name><operator pos:line="34" pos:column="46">--<pos:position pos:line="34" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="34" pos:column="49"/></control>
			<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="25">a<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">=<pos:position pos:line="35" pos:column="28"/></operator> <operator pos:line="35" pos:column="29">(<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="30">a<pos:position pos:line="35" pos:column="31"/></name> <operator pos:line="35" pos:column="32">&lt;&lt;<pos:position pos:line="35" pos:column="40"/></operator> <literal type="number" pos:line="35" pos:column="35">8<pos:position pos:line="35" pos:column="36"/></literal><operator pos:line="35" pos:column="36">)<pos:position pos:line="35" pos:column="37"/></operator> <operator pos:line="35" pos:column="38">+<pos:position pos:line="35" pos:column="39"/></operator> <operator pos:line="35" pos:column="40">*<pos:position pos:line="35" pos:column="41"/></operator><operator pos:line="35" pos:column="41">(<pos:position pos:line="35" pos:column="42"/></operator><operator pos:line="35" pos:column="42">(<pos:position pos:line="35" pos:column="43"/></operator><specifier pos:line="35" pos:column="43">const<pos:position pos:line="35" pos:column="48"/></specifier> <name pos:line="35" pos:column="49">unsigned<pos:position pos:line="35" pos:column="57"/></name> <name pos:line="35" pos:column="58">char<pos:position pos:line="35" pos:column="62"/></name> <operator pos:line="35" pos:column="63">*<pos:position pos:line="35" pos:column="64"/></operator><operator pos:line="35" pos:column="64">)<pos:position pos:line="35" pos:column="65"/></operator><name pos:line="35" pos:column="65">p<pos:position pos:line="35" pos:column="66"/></name><operator pos:line="35" pos:column="66">)<pos:position pos:line="35" pos:column="67"/></operator></expr>;<pos:position pos:line="35" pos:column="68"/></expr_stmt></block></for>
		<expr_stmt><expr><name pos:line="36" pos:column="17">mask<pos:position pos:line="36" pos:column="21"/></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <call><name pos:line="36" pos:column="24">has_zero<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name pos:line="36" pos:column="33">a<pos:position pos:line="36" pos:column="34"/></name> <operator pos:line="36" pos:column="35">^<pos:position pos:line="36" pos:column="36"/></operator> <name pos:line="36" pos:column="37">NEWLINEBYTES<pos:position pos:line="36" pos:column="49"/></name></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="51"/></expr_stmt>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><operator pos:line="37" pos:column="21">!<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">mask<pos:position pos:line="37" pos:column="26"/></name></expr>)<pos:position pos:line="37" pos:column="27"/></condition><then pos:line="37" pos:column="27">
			<comment type="block" pos:line="38" pos:column="25">/*
			 * No '\n' found in the partial word.  Make a
			 * mask that matches what we read.
			 */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="25">mask<pos:position pos:line="42" pos:column="29"/></name> <operator pos:line="42" pos:column="30">=<pos:position pos:line="42" pos:column="31"/></operator> <literal type="number" pos:line="42" pos:column="32">1UL<pos:position pos:line="42" pos:column="35"/></literal> <operator pos:line="42" pos:column="36">&lt;&lt;<pos:position pos:line="42" pos:column="44"/></operator> <operator pos:line="42" pos:column="39">(<pos:position pos:line="42" pos:column="40"/></operator><literal type="number" pos:line="42" pos:column="40">8<pos:position pos:line="42" pos:column="41"/></literal> <operator pos:line="42" pos:column="42">*<pos:position pos:line="42" pos:column="43"/></operator> <operator pos:line="42" pos:column="44">(<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="45">top<pos:position pos:line="42" pos:column="48"/></name> <operator pos:line="42" pos:column="49">-<pos:position pos:line="42" pos:column="50"/></operator> <name pos:line="42" pos:column="51">ptr<pos:position pos:line="42" pos:column="54"/></name><operator pos:line="42" pos:column="54">)<pos:position pos:line="42" pos:column="55"/></operator> <operator pos:line="42" pos:column="56">+<pos:position pos:line="42" pos:column="57"/></operator> <literal type="number" pos:line="42" pos:column="58">7<pos:position pos:line="42" pos:column="59"/></literal><operator pos:line="42" pos:column="59">)<pos:position pos:line="42" pos:column="60"/></operator></expr>;<pos:position pos:line="42" pos:column="61"/></expr_stmt></block></then></if>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="45" pos:column="9">/* The mask *below* the first high bit set */</comment>
	<expr_stmt><expr><name pos:line="46" pos:column="9">mask<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <operator pos:line="46" pos:column="16">(<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="17">mask<pos:position pos:line="46" pos:column="21"/></name> <operator pos:line="46" pos:column="22">-<pos:position pos:line="46" pos:column="23"/></operator> <literal type="number" pos:line="46" pos:column="24">1<pos:position pos:line="46" pos:column="25"/></literal><operator pos:line="46" pos:column="25">)<pos:position pos:line="46" pos:column="26"/></operator> <operator pos:line="46" pos:column="27">&amp;<pos:position pos:line="46" pos:column="32"/></operator> <operator pos:line="46" pos:column="29">~<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="30">mask<pos:position pos:line="46" pos:column="34"/></name></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name pos:line="47" pos:column="9">mask<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">&gt;&gt;=<pos:position pos:line="47" pos:column="23"/></operator> <literal type="number" pos:line="47" pos:column="18">7<pos:position pos:line="47" pos:column="19"/></literal></expr>;<pos:position pos:line="47" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="48" pos:column="9">hash<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">+=<pos:position pos:line="48" pos:column="16"/></operator> <name pos:line="48" pos:column="17">hash<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">&lt;&lt;<pos:position pos:line="48" pos:column="30"/></operator> <literal type="number" pos:line="48" pos:column="25">5<pos:position pos:line="48" pos:column="26"/></literal></expr>;<pos:position pos:line="48" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name pos:line="49" pos:column="9">hash<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">^=<pos:position pos:line="49" pos:column="16"/></operator> <name pos:line="49" pos:column="17">a<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">&amp;<pos:position pos:line="49" pos:column="24"/></operator> <name pos:line="49" pos:column="21">mask<pos:position pos:line="49" pos:column="25"/></name></expr>;<pos:position pos:line="49" pos:column="26"/></expr_stmt>

	<comment type="block" pos:line="51" pos:column="9">/* Advance past the last (possibly partial) word */</comment>
	<expr_stmt><expr><name pos:line="52" pos:column="9">ptr<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">+=<pos:position pos:line="52" pos:column="15"/></operator> <call><name pos:line="52" pos:column="16">count_masked_bytes<pos:position pos:line="52" pos:column="34"/></name><argument_list pos:line="52" pos:column="34">(<argument><expr><name pos:line="52" pos:column="35">mask<pos:position pos:line="52" pos:column="39"/></name></expr></argument>)<pos:position pos:line="52" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="41"/></expr_stmt>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">ptr<pos:position pos:line="54" pos:column="16"/></name> <operator pos:line="54" pos:column="17">&lt;<pos:position pos:line="54" pos:column="21"/></operator> <name pos:line="54" pos:column="19">top<pos:position pos:line="54" pos:column="22"/></name></expr>)<pos:position pos:line="54" pos:column="23"/></condition><then pos:line="54" pos:column="23"> <block pos:line="54" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">assert<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><operator pos:line="55" pos:column="24">*<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="25">ptr<pos:position pos:line="55" pos:column="28"/></name> <operator pos:line="55" pos:column="29">==<pos:position pos:line="55" pos:column="31"/></operator> <literal type="char" pos:line="55" pos:column="32">'\n'<pos:position pos:line="55" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="56" pos:column="17">ptr<pos:position pos:line="56" pos:column="20"/></name><operator pos:line="56" pos:column="20">++<pos:position pos:line="56" pos:column="22"/></operator></expr>;<pos:position pos:line="56" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>

	<expr_stmt><expr><operator pos:line="59" pos:column="9">*<pos:position pos:line="59" pos:column="10"/></operator><name pos:line="59" pos:column="10">data<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator> <name pos:line="59" pos:column="17">ptr<pos:position pos:line="59" pos:column="20"/></name></expr>;<pos:position pos:line="59" pos:column="21"/></expr_stmt>

	<return pos:line="61" pos:column="9">return <expr><name pos:line="61" pos:column="16">hash<pos:position pos:line="61" pos:column="20"/></name></expr>;<pos:position pos:line="61" pos:column="21"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
