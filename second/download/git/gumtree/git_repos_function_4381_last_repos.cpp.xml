<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4381_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">match_funcname<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">grep_opt<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">opt<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="49">struct<pos:position pos:line="1" pos:column="55"/></name> <name pos:line="1" pos:column="56">grep_source<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">gs<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="73">char<pos:position pos:line="1" pos:column="77"/></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">bol<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="84">char<pos:position pos:line="1" pos:column="88"/></name> <modifier pos:line="1" pos:column="89">*<pos:position pos:line="1" pos:column="90"/></modifier></type><name pos:line="1" pos:column="90">eol<pos:position pos:line="1" pos:column="93"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="94"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">xdemitconf_t<pos:position pos:line="3" pos:column="21"/></name> <modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier></type><name pos:line="3" pos:column="23">xecfg<pos:position pos:line="3" pos:column="28"/></name> <init pos:line="3" pos:column="29">= <expr><name><name pos:line="3" pos:column="31">opt<pos:position pos:line="3" pos:column="34"/></name><operator pos:line="3" pos:column="34">-&gt;<pos:position pos:line="3" pos:column="39"/></operator><name pos:line="3" pos:column="36">priv<pos:position pos:line="3" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name pos:line="4" pos:column="13">xecfg<pos:position pos:line="4" pos:column="18"/></name> <operator pos:line="4" pos:column="19">&amp;&amp;<pos:position pos:line="4" pos:column="29"/></operator> <operator pos:line="4" pos:column="22">!<pos:position pos:line="4" pos:column="23"/></operator><name><name pos:line="4" pos:column="23">xecfg<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">-&gt;<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="30">find_func<pos:position pos:line="4" pos:column="39"/></name></name></expr>)<pos:position pos:line="4" pos:column="40"/></condition><then pos:line="4" pos:column="40"> <block pos:line="4" pos:column="41">{
		<expr_stmt><expr><call><name pos:line="5" pos:column="17">grep_source_load_driver<pos:position pos:line="5" pos:column="40"/></name><argument_list pos:line="5" pos:column="40">(<argument><expr><name pos:line="5" pos:column="41">gs<pos:position pos:line="5" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="45"/></expr_stmt>
		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><name><name pos:line="6" pos:column="21">gs<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">-&gt;<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="25">driver<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">-&gt;<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="33">funcname<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">.<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="42">pattern<pos:position pos:line="6" pos:column="49"/></name></name></expr>)<pos:position pos:line="6" pos:column="50"/></condition><then pos:line="6" pos:column="50"> <block pos:line="6" pos:column="51">{
			<decl_stmt><decl><type><specifier pos:line="7" pos:column="25">const<pos:position pos:line="7" pos:column="30"/></specifier> <name><name pos:line="7" pos:column="31">struct<pos:position pos:line="7" pos:column="37"/></name> <name pos:line="7" pos:column="38">userdiff_funcname<pos:position pos:line="7" pos:column="55"/></name></name> <modifier pos:line="7" pos:column="56">*<pos:position pos:line="7" pos:column="57"/></modifier></type><name pos:line="7" pos:column="57">pe<pos:position pos:line="7" pos:column="59"/></name> <init pos:line="7" pos:column="60">= <expr><operator pos:line="7" pos:column="62">&amp;<pos:position pos:line="7" pos:column="67"/></operator><name><name pos:line="7" pos:column="63">gs<pos:position pos:line="7" pos:column="65"/></name><operator pos:line="7" pos:column="65">-&gt;<pos:position pos:line="7" pos:column="70"/></operator><name pos:line="7" pos:column="67">driver<pos:position pos:line="7" pos:column="73"/></name><operator pos:line="7" pos:column="73">-&gt;<pos:position pos:line="7" pos:column="78"/></operator><name pos:line="7" pos:column="75">funcname<pos:position pos:line="7" pos:column="83"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="84"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="8" pos:column="25">xdiff_set_find_func<pos:position pos:line="8" pos:column="44"/></name><argument_list pos:line="8" pos:column="44">(<argument><expr><name pos:line="8" pos:column="45">xecfg<pos:position pos:line="8" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="52">pe<pos:position pos:line="8" pos:column="54"/></name><operator pos:line="8" pos:column="54">-&gt;<pos:position pos:line="8" pos:column="59"/></operator><name pos:line="8" pos:column="56">pattern<pos:position pos:line="8" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="65">pe<pos:position pos:line="8" pos:column="67"/></name><operator pos:line="8" pos:column="67">-&gt;<pos:position pos:line="8" pos:column="72"/></operator><name pos:line="8" pos:column="69">cflags<pos:position pos:line="8" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="77"/></expr_stmt>
		}<pos:position pos:line="9" pos:column="18"/></block></then> <else pos:line="9" pos:column="19">else <block pos:line="9" pos:column="24">{
			<expr_stmt><expr><name pos:line="10" pos:column="25">xecfg<pos:position pos:line="10" pos:column="30"/></name> <operator pos:line="10" pos:column="31">=<pos:position pos:line="10" pos:column="32"/></operator> <name><name pos:line="10" pos:column="33">opt<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">-&gt;<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="38">priv<pos:position pos:line="10" pos:column="42"/></name></name> <operator pos:line="10" pos:column="43">=<pos:position pos:line="10" pos:column="44"/></operator> <name pos:line="10" pos:column="45">NULL<pos:position pos:line="10" pos:column="49"/></name></expr>;<pos:position pos:line="10" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="11" pos:column="18"/></block></else></if>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">xecfg<pos:position pos:line="14" pos:column="18"/></name></expr>)<pos:position pos:line="14" pos:column="19"/></condition><then pos:line="14" pos:column="19"> <block pos:line="14" pos:column="20">{
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">char<pos:position pos:line="15" pos:column="21"/></name></type> <name><name pos:line="15" pos:column="22">buf<pos:position pos:line="15" pos:column="25"/></name><index pos:line="15" pos:column="25">[<expr><literal type="number" pos:line="15" pos:column="26">1<pos:position pos:line="15" pos:column="27"/></literal></expr>]<pos:position pos:line="15" pos:column="28"/></index></name></decl>;<pos:position pos:line="15" pos:column="29"/></decl_stmt>
		<return pos:line="16" pos:column="17">return <expr><call><name><name pos:line="16" pos:column="24">xecfg<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">-&gt;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="31">find_func<pos:position pos:line="16" pos:column="40"/></name></name><argument_list pos:line="16" pos:column="40">(<argument><expr><name pos:line="16" pos:column="41">bol<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">eol<pos:position pos:line="16" pos:column="49"/></name> <operator pos:line="16" pos:column="50">-<pos:position pos:line="16" pos:column="51"/></operator> <name pos:line="16" pos:column="52">bol<pos:position pos:line="16" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="57">buf<pos:position pos:line="16" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="62">1<pos:position pos:line="16" pos:column="63"/></literal></expr></argument>,
					<argument><expr><name><name pos:line="17" pos:column="41">xecfg<pos:position pos:line="17" pos:column="46"/></name><operator pos:line="17" pos:column="46">-&gt;<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="48">find_func_priv<pos:position pos:line="17" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="63"/></argument_list></call> <operator pos:line="17" pos:column="64">&gt;=<pos:position pos:line="17" pos:column="69"/></operator> <literal type="number" pos:line="17" pos:column="67">0<pos:position pos:line="17" pos:column="68"/></literal></expr>;<pos:position pos:line="17" pos:column="69"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">bol<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">==<pos:position pos:line="20" pos:column="19"/></operator> <name pos:line="20" pos:column="20">eol<pos:position pos:line="20" pos:column="23"/></name></expr>)<pos:position pos:line="20" pos:column="24"/></condition><then pos:line="20" pos:column="24">
		<block type="pseudo"><return pos:line="21" pos:column="17">return <expr><literal type="number" pos:line="21" pos:column="24">0<pos:position pos:line="21" pos:column="25"/></literal></expr>;<pos:position pos:line="21" pos:column="26"/></return></block></then></if>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">isalpha<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><operator pos:line="22" pos:column="21">*<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">bol<pos:position pos:line="22" pos:column="25"/></name></expr></argument>)<pos:position pos:line="22" pos:column="26"/></argument_list></call> <operator pos:line="22" pos:column="27">||<pos:position pos:line="22" pos:column="29"/></operator> <operator pos:line="22" pos:column="30">*<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">bol<pos:position pos:line="22" pos:column="34"/></name> <operator pos:line="22" pos:column="35">==<pos:position pos:line="22" pos:column="37"/></operator> <literal type="char" pos:line="22" pos:column="38">'_'<pos:position pos:line="22" pos:column="41"/></literal> <operator pos:line="22" pos:column="42">||<pos:position pos:line="22" pos:column="44"/></operator> <operator pos:line="22" pos:column="45">*<pos:position pos:line="22" pos:column="46"/></operator><name pos:line="22" pos:column="46">bol<pos:position pos:line="22" pos:column="49"/></name> <operator pos:line="22" pos:column="50">==<pos:position pos:line="22" pos:column="52"/></operator> <literal type="char" pos:line="22" pos:column="53">'$'<pos:position pos:line="22" pos:column="56"/></literal></expr>)<pos:position pos:line="22" pos:column="57"/></condition><then pos:line="22" pos:column="57">
		<block type="pseudo"><return pos:line="23" pos:column="17">return <expr><literal type="number" pos:line="23" pos:column="24">1<pos:position pos:line="23" pos:column="25"/></literal></expr>;<pos:position pos:line="23" pos:column="26"/></return></block></then></if>
	<return pos:line="24" pos:column="9">return <expr><literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
