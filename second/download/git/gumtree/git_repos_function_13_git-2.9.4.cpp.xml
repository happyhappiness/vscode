<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_13_git-2.9.4.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">ref<pos:position pos:line="1" pos:column="11"/></name></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier><modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">get_remote_heads<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">in<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">src_buf<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">size_t<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">src_len<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">ref<pos:position pos:line="2" pos:column="41"/></name></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier><modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">list<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">unsigned<pos:position pos:line="2" pos:column="58"/></name> <name pos:line="2" pos:column="59">int<pos:position pos:line="2" pos:column="62"/></name></type> <name pos:line="2" pos:column="63">flags<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="3" pos:column="31">struct<pos:position pos:line="3" pos:column="37"/></name> <name pos:line="3" pos:column="38">sha1_array<pos:position pos:line="3" pos:column="48"/></name></name> <modifier pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></modifier></type><name pos:line="3" pos:column="50">extra_have<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="4" pos:column="31">struct<pos:position pos:line="4" pos:column="37"/></name> <name pos:line="4" pos:column="38">sha1_array<pos:position pos:line="4" pos:column="48"/></name></name> <modifier pos:line="4" pos:column="49">*<pos:position pos:line="4" pos:column="50"/></modifier></type><name pos:line="4" pos:column="50">shallow_points<pos:position pos:line="4" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="65"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">ref<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier><modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">orig_list<pos:position pos:line="6" pos:column="31"/></name> <init pos:line="6" pos:column="32">= <expr><name pos:line="6" pos:column="34">list<pos:position pos:line="6" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">got_at_least_one_head<pos:position pos:line="7" pos:column="34"/></name> <init pos:line="7" pos:column="35">= <expr><literal type="number" pos:line="7" pos:column="37">0<pos:position pos:line="7" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>

	<expr_stmt><expr><operator pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">list<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">NULL<pos:position pos:line="9" pos:column="21"/></name></expr>;<pos:position pos:line="9" pos:column="22"/></expr_stmt>
	<for pos:line="10" pos:column="9">for <control pos:line="10" pos:column="13">(<init pos:line="10" pos:column="14">;<pos:position pos:line="10" pos:column="15"/></init><condition pos:line="10" pos:column="15">;<pos:position pos:line="10" pos:column="16"/></condition><incr/>)<pos:position pos:line="10" pos:column="17"/></control> <block pos:line="10" pos:column="18">{
		<decl_stmt><decl><type><name><name pos:line="11" pos:column="17">struct<pos:position pos:line="11" pos:column="23"/></name> <name pos:line="11" pos:column="24">ref<pos:position pos:line="11" pos:column="27"/></name></name> <modifier pos:line="11" pos:column="28">*<pos:position pos:line="11" pos:column="29"/></modifier></type><name pos:line="11" pos:column="29">ref<pos:position pos:line="11" pos:column="32"/></name></decl>;<pos:position pos:line="11" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">struct<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">object_id<pos:position pos:line="12" pos:column="33"/></name></name></type> <name pos:line="12" pos:column="34">old_oid<pos:position pos:line="12" pos:column="41"/></name></decl>;<pos:position pos:line="12" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">char<pos:position pos:line="13" pos:column="21"/></name> <modifier pos:line="13" pos:column="22">*<pos:position pos:line="13" pos:column="23"/></modifier></type><name pos:line="13" pos:column="23">name<pos:position pos:line="13" pos:column="27"/></name></decl>;<pos:position pos:line="13" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">int<pos:position pos:line="14" pos:column="20"/></name></type> <name pos:line="14" pos:column="21">len<pos:position pos:line="14" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="14" pos:column="26">name_len<pos:position pos:line="14" pos:column="34"/></name></decl>;<pos:position pos:line="14" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">char<pos:position pos:line="15" pos:column="21"/></name> <modifier pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></modifier></type><name pos:line="15" pos:column="23">buffer<pos:position pos:line="15" pos:column="29"/></name> <init pos:line="15" pos:column="30">= <expr><name pos:line="15" pos:column="32">packet_buffer<pos:position pos:line="15" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="16" pos:column="17">const<pos:position pos:line="16" pos:column="22"/></specifier> <name pos:line="16" pos:column="23">char<pos:position pos:line="16" pos:column="27"/></name> <modifier pos:line="16" pos:column="28">*<pos:position pos:line="16" pos:column="29"/></modifier></type><name pos:line="16" pos:column="29">arg<pos:position pos:line="16" pos:column="32"/></name></decl>;<pos:position pos:line="16" pos:column="33"/></decl_stmt>

		<expr_stmt><expr><name pos:line="18" pos:column="17">len<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <call><name pos:line="18" pos:column="23">packet_read<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">in<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="39">&amp;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="40">src_buf<pos:position pos:line="18" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="49">&amp;<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="50">src_len<pos:position pos:line="18" pos:column="57"/></name></expr></argument>,
				  <argument><expr><name pos:line="19" pos:column="35">packet_buffer<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="50">sizeof<argument_list pos:line="19" pos:column="56">(<argument><expr><name pos:line="19" pos:column="57">packet_buffer<pos:position pos:line="19" pos:column="70"/></name></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></sizeof></expr></argument>,
				  <argument><expr><name pos:line="20" pos:column="35">PACKET_READ_GENTLE_ON_EOF<pos:position pos:line="20" pos:column="60"/></name> <operator pos:line="20" pos:column="61">|<pos:position pos:line="20" pos:column="62"/></operator>
				  <name pos:line="21" pos:column="35">PACKET_READ_CHOMP_NEWLINE<pos:position pos:line="21" pos:column="60"/></name></expr></argument>)<pos:position pos:line="21" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="62"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">len<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">&lt;<pos:position pos:line="22" pos:column="29"/></operator> <literal type="number" pos:line="22" pos:column="27">0<pos:position pos:line="22" pos:column="28"/></literal></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">die_initial_contact<pos:position pos:line="23" pos:column="44"/></name><argument_list pos:line="23" pos:column="44">(<argument><expr><name pos:line="23" pos:column="45">got_at_least_one_head<pos:position pos:line="23" pos:column="66"/></name></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="68"/></expr_stmt></block></then></if>

		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">!<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">len<pos:position pos:line="25" pos:column="25"/></name></expr>)<pos:position pos:line="25" pos:column="26"/></condition><then pos:line="25" pos:column="26">
			<block type="pseudo"><break pos:line="26" pos:column="25">break;<pos:position pos:line="26" pos:column="31"/></break></block></then></if>

		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">len<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">&gt;<pos:position pos:line="28" pos:column="29"/></operator> <literal type="number" pos:line="28" pos:column="27">4<pos:position pos:line="28" pos:column="28"/></literal> <operator pos:line="28" pos:column="29">&amp;&amp;<pos:position pos:line="28" pos:column="39"/></operator> <call><name pos:line="28" pos:column="32">skip_prefix<pos:position pos:line="28" pos:column="43"/></name><argument_list pos:line="28" pos:column="43">(<argument><expr><name pos:line="28" pos:column="44">buffer<pos:position pos:line="28" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="52">"ERR "<pos:position pos:line="28" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="28" pos:column="60">&amp;<pos:position pos:line="28" pos:column="65"/></operator><name pos:line="28" pos:column="61">arg<pos:position pos:line="28" pos:column="64"/></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="66"/></condition><then pos:line="28" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">die<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><literal type="string" pos:line="29" pos:column="29">"remote error: %s"<pos:position pos:line="29" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="49">arg<pos:position pos:line="29" pos:column="52"/></name></expr></argument>)<pos:position pos:line="29" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="54"/></expr_stmt></block></then></if>

		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">len<pos:position pos:line="31" pos:column="24"/></name> <operator pos:line="31" pos:column="25">==<pos:position pos:line="31" pos:column="27"/></operator> <name pos:line="31" pos:column="28">GIT_SHA1_HEXSZ<pos:position pos:line="31" pos:column="42"/></name> <operator pos:line="31" pos:column="43">+<pos:position pos:line="31" pos:column="44"/></operator> <call><name pos:line="31" pos:column="45">strlen<pos:position pos:line="31" pos:column="51"/></name><argument_list pos:line="31" pos:column="51">(<argument><expr><literal type="string" pos:line="31" pos:column="52">"shallow "<pos:position pos:line="31" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="63"/></argument_list></call> <operator pos:line="31" pos:column="64">&amp;&amp;<pos:position pos:line="31" pos:column="74"/></operator>
			<call><name pos:line="32" pos:column="25">skip_prefix<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">(<argument><expr><name pos:line="32" pos:column="37">buffer<pos:position pos:line="32" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="45">"shallow "<pos:position pos:line="32" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="32" pos:column="57">&amp;<pos:position pos:line="32" pos:column="62"/></operator><name pos:line="32" pos:column="58">arg<pos:position pos:line="32" pos:column="61"/></name></expr></argument>)<pos:position pos:line="32" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="63"/></condition><then pos:line="32" pos:column="63"> <block pos:line="32" pos:column="64">{
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><call><name pos:line="33" pos:column="29">get_oid_hex<pos:position pos:line="33" pos:column="40"/></name><argument_list pos:line="33" pos:column="40">(<argument><expr><name pos:line="33" pos:column="41">arg<pos:position pos:line="33" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="46">&amp;<pos:position pos:line="33" pos:column="51"/></operator><name pos:line="33" pos:column="47">old_oid<pos:position pos:line="33" pos:column="54"/></name></expr></argument>)<pos:position pos:line="33" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="56"/></condition><then pos:line="33" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="33">die<pos:position pos:line="34" pos:column="36"/></name><argument_list pos:line="34" pos:column="36">(<argument><expr><literal type="string" pos:line="34" pos:column="37">"protocol error: expected shallow sha-1, got '%s'"<pos:position pos:line="34" pos:column="87"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="89">arg<pos:position pos:line="34" pos:column="92"/></name></expr></argument>)<pos:position pos:line="34" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="94"/></expr_stmt></block></then></if>
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><operator pos:line="35" pos:column="29">!<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="30">shallow_points<pos:position pos:line="35" pos:column="44"/></name></expr>)<pos:position pos:line="35" pos:column="45"/></condition><then pos:line="35" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="33">die<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><literal type="string" pos:line="36" pos:column="37">"repository on the other end cannot be shallow"<pos:position pos:line="36" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="86"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">sha1_array_append<pos:position pos:line="37" pos:column="42"/></name><argument_list pos:line="37" pos:column="42">(<argument><expr><name pos:line="37" pos:column="43">shallow_points<pos:position pos:line="37" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="59">old_oid<pos:position pos:line="37" pos:column="66"/></name><operator pos:line="37" pos:column="66">.<pos:position pos:line="37" pos:column="67"/></operator><name pos:line="37" pos:column="67">hash<pos:position pos:line="37" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="73"/></expr_stmt>
			<continue pos:line="38" pos:column="25">continue;<pos:position pos:line="38" pos:column="34"/></continue>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>

		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">len<pos:position pos:line="41" pos:column="24"/></name> <operator pos:line="41" pos:column="25">&lt;<pos:position pos:line="41" pos:column="29"/></operator> <name pos:line="41" pos:column="27">GIT_SHA1_HEXSZ<pos:position pos:line="41" pos:column="41"/></name> <operator pos:line="41" pos:column="42">+<pos:position pos:line="41" pos:column="43"/></operator> <literal type="number" pos:line="41" pos:column="44">2<pos:position pos:line="41" pos:column="45"/></literal> <operator pos:line="41" pos:column="46">||<pos:position pos:line="41" pos:column="48"/></operator> <call><name pos:line="41" pos:column="49">get_oid_hex<pos:position pos:line="41" pos:column="60"/></name><argument_list pos:line="41" pos:column="60">(<argument><expr><name pos:line="41" pos:column="61">buffer<pos:position pos:line="41" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="69">&amp;<pos:position pos:line="41" pos:column="74"/></operator><name pos:line="41" pos:column="70">old_oid<pos:position pos:line="41" pos:column="77"/></name></expr></argument>)<pos:position pos:line="41" pos:column="78"/></argument_list></call> <operator pos:line="41" pos:column="79">||<pos:position pos:line="41" pos:column="81"/></operator>
			<name><name pos:line="42" pos:column="25">buffer<pos:position pos:line="42" pos:column="31"/></name><index pos:line="42" pos:column="31">[<expr><name pos:line="42" pos:column="32">GIT_SHA1_HEXSZ<pos:position pos:line="42" pos:column="46"/></name></expr>]<pos:position pos:line="42" pos:column="47"/></index></name> <operator pos:line="42" pos:column="48">!=<pos:position pos:line="42" pos:column="50"/></operator> <literal type="char" pos:line="42" pos:column="51">' '<pos:position pos:line="42" pos:column="54"/></literal></expr>)<pos:position pos:line="42" pos:column="55"/></condition><then pos:line="42" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="25">die<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><literal type="string" pos:line="43" pos:column="29">"protocol error: expected sha/ref, got '%s'"<pos:position pos:line="43" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="75">buffer<pos:position pos:line="43" pos:column="81"/></name></expr></argument>)<pos:position pos:line="43" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="83"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="44" pos:column="17">name<pos:position pos:line="44" pos:column="21"/></name> <operator pos:line="44" pos:column="22">=<pos:position pos:line="44" pos:column="23"/></operator> <name pos:line="44" pos:column="24">buffer<pos:position pos:line="44" pos:column="30"/></name> <operator pos:line="44" pos:column="31">+<pos:position pos:line="44" pos:column="32"/></operator> <name pos:line="44" pos:column="33">GIT_SHA1_HEXSZ<pos:position pos:line="44" pos:column="47"/></name> <operator pos:line="44" pos:column="48">+<pos:position pos:line="44" pos:column="49"/></operator> <literal type="number" pos:line="44" pos:column="50">1<pos:position pos:line="44" pos:column="51"/></literal></expr>;<pos:position pos:line="44" pos:column="52"/></expr_stmt>

		<expr_stmt><expr><name pos:line="46" pos:column="17">name_len<pos:position pos:line="46" pos:column="25"/></name> <operator pos:line="46" pos:column="26">=<pos:position pos:line="46" pos:column="27"/></operator> <call><name pos:line="46" pos:column="28">strlen<pos:position pos:line="46" pos:column="34"/></name><argument_list pos:line="46" pos:column="34">(<argument><expr><name pos:line="46" pos:column="35">name<pos:position pos:line="46" pos:column="39"/></name></expr></argument>)<pos:position pos:line="46" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="41"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">len<pos:position pos:line="47" pos:column="24"/></name> <operator pos:line="47" pos:column="25">!=<pos:position pos:line="47" pos:column="27"/></operator> <name pos:line="47" pos:column="28">name_len<pos:position pos:line="47" pos:column="36"/></name> <operator pos:line="47" pos:column="37">+<pos:position pos:line="47" pos:column="38"/></operator> <name pos:line="47" pos:column="39">GIT_SHA1_HEXSZ<pos:position pos:line="47" pos:column="53"/></name> <operator pos:line="47" pos:column="54">+<pos:position pos:line="47" pos:column="55"/></operator> <literal type="number" pos:line="47" pos:column="56">1<pos:position pos:line="47" pos:column="57"/></literal></expr>)<pos:position pos:line="47" pos:column="58"/></condition><then pos:line="47" pos:column="58"> <block pos:line="47" pos:column="59">{
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">free<pos:position pos:line="48" pos:column="29"/></name><argument_list pos:line="48" pos:column="29">(<argument><expr><name pos:line="48" pos:column="30">server_capabilities<pos:position pos:line="48" pos:column="49"/></name></expr></argument>)<pos:position pos:line="48" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name pos:line="49" pos:column="25">server_capabilities<pos:position pos:line="49" pos:column="44"/></name> <operator pos:line="49" pos:column="45">=<pos:position pos:line="49" pos:column="46"/></operator> <call><name pos:line="49" pos:column="47">xstrdup<pos:position pos:line="49" pos:column="54"/></name><argument_list pos:line="49" pos:column="54">(<argument><expr><name pos:line="49" pos:column="55">name<pos:position pos:line="49" pos:column="59"/></name> <operator pos:line="49" pos:column="60">+<pos:position pos:line="49" pos:column="61"/></operator> <name pos:line="49" pos:column="62">name_len<pos:position pos:line="49" pos:column="70"/></name> <operator pos:line="49" pos:column="71">+<pos:position pos:line="49" pos:column="72"/></operator> <literal type="number" pos:line="49" pos:column="73">1<pos:position pos:line="49" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="76"/></expr_stmt>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if>

		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">extra_have<pos:position pos:line="52" pos:column="31"/></name> <operator pos:line="52" pos:column="32">&amp;&amp;<pos:position pos:line="52" pos:column="42"/></operator> <operator pos:line="52" pos:column="35">!<pos:position pos:line="52" pos:column="36"/></operator><call><name pos:line="52" pos:column="36">strcmp<pos:position pos:line="52" pos:column="42"/></name><argument_list pos:line="52" pos:column="42">(<argument><expr><name pos:line="52" pos:column="43">name<pos:position pos:line="52" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="49">".have"<pos:position pos:line="52" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="58"/></condition><then pos:line="52" pos:column="58"> <block pos:line="52" pos:column="59">{
			<expr_stmt><expr><call><name pos:line="53" pos:column="25">sha1_array_append<pos:position pos:line="53" pos:column="42"/></name><argument_list pos:line="53" pos:column="42">(<argument><expr><name pos:line="53" pos:column="43">extra_have<pos:position pos:line="53" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="55">old_oid<pos:position pos:line="53" pos:column="62"/></name><operator pos:line="53" pos:column="62">.<pos:position pos:line="53" pos:column="63"/></operator><name pos:line="53" pos:column="63">hash<pos:position pos:line="53" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="69"/></expr_stmt>
			<continue pos:line="54" pos:column="25">continue;<pos:position pos:line="54" pos:column="34"/></continue>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>

		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><operator pos:line="57" pos:column="21">!<pos:position pos:line="57" pos:column="22"/></operator><call><name pos:line="57" pos:column="22">check_ref<pos:position pos:line="57" pos:column="31"/></name><argument_list pos:line="57" pos:column="31">(<argument><expr><name pos:line="57" pos:column="32">name<pos:position pos:line="57" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="38">flags<pos:position pos:line="57" pos:column="43"/></name></expr></argument>)<pos:position pos:line="57" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="45"/></condition><then pos:line="57" pos:column="45">
			<block type="pseudo"><continue pos:line="58" pos:column="25">continue;<pos:position pos:line="58" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="59" pos:column="17">ref<pos:position pos:line="59" pos:column="20"/></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <call><name pos:line="59" pos:column="23">alloc_ref<pos:position pos:line="59" pos:column="32"/></name><argument_list pos:line="59" pos:column="32">(<argument><expr><name pos:line="59" pos:column="33">buffer<pos:position pos:line="59" pos:column="39"/></name> <operator pos:line="59" pos:column="40">+<pos:position pos:line="59" pos:column="41"/></operator> <name pos:line="59" pos:column="42">GIT_SHA1_HEXSZ<pos:position pos:line="59" pos:column="56"/></name> <operator pos:line="59" pos:column="57">+<pos:position pos:line="59" pos:column="58"/></operator> <literal type="number" pos:line="59" pos:column="59">1<pos:position pos:line="59" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">oidcpy<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">(<argument><expr><operator pos:line="60" pos:column="24">&amp;<pos:position pos:line="60" pos:column="29"/></operator><name><name pos:line="60" pos:column="25">ref<pos:position pos:line="60" pos:column="28"/></name><operator pos:line="60" pos:column="28">-&gt;<pos:position pos:line="60" pos:column="33"/></operator><name pos:line="60" pos:column="30">old_oid<pos:position pos:line="60" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="39">&amp;<pos:position pos:line="60" pos:column="44"/></operator><name pos:line="60" pos:column="40">old_oid<pos:position pos:line="60" pos:column="47"/></name></expr></argument>)<pos:position pos:line="60" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="61" pos:column="17">*<pos:position pos:line="61" pos:column="18"/></operator><name pos:line="61" pos:column="18">list<pos:position pos:line="61" pos:column="22"/></name> <operator pos:line="61" pos:column="23">=<pos:position pos:line="61" pos:column="24"/></operator> <name pos:line="61" pos:column="25">ref<pos:position pos:line="61" pos:column="28"/></name></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="62" pos:column="17">list<pos:position pos:line="62" pos:column="21"/></name> <operator pos:line="62" pos:column="22">=<pos:position pos:line="62" pos:column="23"/></operator> <operator pos:line="62" pos:column="24">&amp;<pos:position pos:line="62" pos:column="29"/></operator><name><name pos:line="62" pos:column="25">ref<pos:position pos:line="62" pos:column="28"/></name><operator pos:line="62" pos:column="28">-&gt;<pos:position pos:line="62" pos:column="33"/></operator><name pos:line="62" pos:column="30">next<pos:position pos:line="62" pos:column="34"/></name></name></expr>;<pos:position pos:line="62" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="63" pos:column="17">got_at_least_one_head<pos:position pos:line="63" pos:column="38"/></name> <operator pos:line="63" pos:column="39">=<pos:position pos:line="63" pos:column="40"/></operator> <literal type="number" pos:line="63" pos:column="41">1<pos:position pos:line="63" pos:column="42"/></literal></expr>;<pos:position pos:line="63" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="64" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="66" pos:column="9">annotate_refs_with_symref_info<pos:position pos:line="66" pos:column="39"/></name><argument_list pos:line="66" pos:column="39">(<argument><expr><operator pos:line="66" pos:column="40">*<pos:position pos:line="66" pos:column="41"/></operator><name pos:line="66" pos:column="41">orig_list<pos:position pos:line="66" pos:column="50"/></name></expr></argument>)<pos:position pos:line="66" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="52"/></expr_stmt>

	<return pos:line="68" pos:column="9">return <expr><name pos:line="68" pos:column="16">list<pos:position pos:line="68" pos:column="20"/></name></expr>;<pos:position pos:line="68" pos:column="21"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
