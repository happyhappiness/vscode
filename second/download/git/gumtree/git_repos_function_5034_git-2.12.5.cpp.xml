<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5034_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cmd_parseopt<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">argc<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier><modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">argv<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">prefix<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">int<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">keep_dashdash<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><literal type="number" pos:line="3" pos:column="36">0<pos:position pos:line="3" pos:column="37"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="39">stop_at_non_option<pos:position pos:line="3" pos:column="57"/></name> <init pos:line="3" pos:column="58">= <expr><literal type="number" pos:line="3" pos:column="60">0<pos:position pos:line="3" pos:column="61"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="62"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name> <specifier pos:line="4" pos:column="21">const<pos:position pos:line="4" pos:column="26"/></specifier> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier> <specifier pos:line="4" pos:column="29">const<pos:position pos:line="4" pos:column="34"/></specifier></type> <name><name pos:line="4" pos:column="35">parseopt_usage<pos:position pos:line="4" pos:column="49"/></name><index pos:line="4" pos:column="49">[]<pos:position pos:line="4" pos:column="51"/></index></name> <init pos:line="4" pos:column="52">= <expr><block pos:line="4" pos:column="54">{
		<expr><call><name pos:line="5" pos:column="17">N_<pos:position pos:line="5" pos:column="19"/></name><argument_list pos:line="5" pos:column="19">(<argument><expr><literal type="string" pos:line="5" pos:column="20">"git rev-parse --parseopt [&lt;options&gt;] -- [&lt;args&gt;...]"<pos:position pos:line="5" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="74"/></argument_list></call></expr>,
		<expr><name pos:line="6" pos:column="17">NULL<pos:position pos:line="6" pos:column="21"/></name></expr>
	}<pos:position pos:line="7" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="8" pos:column="9">static<pos:position pos:line="8" pos:column="15"/></specifier> <type><name><name pos:line="8" pos:column="16">struct<pos:position pos:line="8" pos:column="22"/></name> <name pos:line="8" pos:column="23">option<pos:position pos:line="8" pos:column="29"/></name></name></type> <name><name pos:line="8" pos:column="30">parseopt_opts<pos:position pos:line="8" pos:column="43"/></name><index pos:line="8" pos:column="43">[]<pos:position pos:line="8" pos:column="45"/></index></name> <init pos:line="8" pos:column="46">= <expr><block pos:line="8" pos:column="48">{
		<expr><call><name pos:line="9" pos:column="17">OPT_BOOL<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><literal type="number" pos:line="9" pos:column="26">0<pos:position pos:line="9" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="29">"keep-dashdash"<pos:position pos:line="9" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="9" pos:column="46">&amp;<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="47">keep_dashdash<pos:position pos:line="9" pos:column="60"/></name></expr></argument>,
					<argument><expr><call><name pos:line="10" pos:column="41">N_<pos:position pos:line="10" pos:column="43"/></name><argument_list pos:line="10" pos:column="43">(<argument><expr><literal type="string" pos:line="10" pos:column="44">"keep the `--` passed as an arg"<pos:position pos:line="10" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></call></expr>,
		<expr><call><name pos:line="11" pos:column="17">OPT_BOOL<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><literal type="number" pos:line="11" pos:column="26">0<pos:position pos:line="11" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="29">"stop-at-non-option"<pos:position pos:line="11" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="51">&amp;<pos:position pos:line="11" pos:column="56"/></operator><name pos:line="11" pos:column="52">stop_at_non_option<pos:position pos:line="11" pos:column="70"/></name></expr></argument>,
					<argument><expr><call><name pos:line="12" pos:column="41">N_<pos:position pos:line="12" pos:column="43"/></name><argument_list pos:line="12" pos:column="43">(<argument><expr><literal type="string" pos:line="12" pos:column="44">"stop parsing after the "<pos:position pos:line="12" pos:column="69"/></literal>
					   <literal type="string" pos:line="13" pos:column="44">"first non-option argument"<pos:position pos:line="13" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="73"/></argument_list></call></expr>,
		<expr><call><name pos:line="14" pos:column="17">OPT_BOOL<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><literal type="number" pos:line="14" pos:column="26">0<pos:position pos:line="14" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="29">"stuck-long"<pos:position pos:line="14" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="14" pos:column="43">&amp;<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="44">stuck_long<pos:position pos:line="14" pos:column="54"/></name></expr></argument>,
					<argument><expr><call><name pos:line="15" pos:column="41">N_<pos:position pos:line="15" pos:column="43"/></name><argument_list pos:line="15" pos:column="43">(<argument><expr><literal type="string" pos:line="15" pos:column="44">"output in stuck long form"<pos:position pos:line="15" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="73"/></argument_list></call></expr>,
		<expr><call><name pos:line="16" pos:column="17">OPT_END<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">()<pos:position pos:line="16" pos:column="26"/></argument_list></call></expr>,
	}<pos:position pos:line="17" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="17" pos:column="11"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="18" pos:column="9">static<pos:position pos:line="18" pos:column="15"/></specifier> <type><specifier pos:line="18" pos:column="16">const<pos:position pos:line="18" pos:column="21"/></specifier> <name pos:line="18" pos:column="22">char<pos:position pos:line="18" pos:column="26"/></name> <modifier pos:line="18" pos:column="27">*<pos:position pos:line="18" pos:column="28"/></modifier> <specifier pos:line="18" pos:column="29">const<pos:position pos:line="18" pos:column="34"/></specifier></type> <name pos:line="18" pos:column="35">flag_chars<pos:position pos:line="18" pos:column="45"/></name> <init pos:line="18" pos:column="46">= <expr><literal type="string" pos:line="18" pos:column="48">"*=?!"<pos:position pos:line="18" pos:column="54"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="55"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="20" pos:column="9">struct<pos:position pos:line="20" pos:column="15"/></name> <name pos:line="20" pos:column="16">strbuf<pos:position pos:line="20" pos:column="22"/></name></name></type> <name pos:line="20" pos:column="23">sb<pos:position pos:line="20" pos:column="25"/></name> <init pos:line="20" pos:column="26">= <expr><name pos:line="20" pos:column="28">STRBUF_INIT<pos:position pos:line="20" pos:column="39"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="20" pos:column="41">parsed<pos:position pos:line="20" pos:column="47"/></name> <init pos:line="20" pos:column="48">= <expr><name pos:line="20" pos:column="50">STRBUF_INIT<pos:position pos:line="20" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="62"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="21" pos:column="9">const<pos:position pos:line="21" pos:column="14"/></specifier> <name pos:line="21" pos:column="15">char<pos:position pos:line="21" pos:column="19"/></name> <modifier pos:line="21" pos:column="20">*<pos:position pos:line="21" pos:column="21"/></modifier><modifier pos:line="21" pos:column="21">*<pos:position pos:line="21" pos:column="22"/></modifier></type><name pos:line="21" pos:column="22">usage<pos:position pos:line="21" pos:column="27"/></name> <init pos:line="21" pos:column="28">= <expr><name pos:line="21" pos:column="30">NULL<pos:position pos:line="21" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="22" pos:column="9">struct<pos:position pos:line="22" pos:column="15"/></name> <name pos:line="22" pos:column="16">option<pos:position pos:line="22" pos:column="22"/></name></name> <modifier pos:line="22" pos:column="23">*<pos:position pos:line="22" pos:column="24"/></modifier></type><name pos:line="22" pos:column="24">opts<pos:position pos:line="22" pos:column="28"/></name> <init pos:line="22" pos:column="29">= <expr><name pos:line="22" pos:column="31">NULL<pos:position pos:line="22" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="23" pos:column="9">int<pos:position pos:line="23" pos:column="12"/></name></type> <name pos:line="23" pos:column="13">onb<pos:position pos:line="23" pos:column="16"/></name> <init pos:line="23" pos:column="17">= <expr><literal type="number" pos:line="23" pos:column="19">0<pos:position pos:line="23" pos:column="20"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="23" pos:column="22">osz<pos:position pos:line="23" pos:column="25"/></name> <init pos:line="23" pos:column="26">= <expr><literal type="number" pos:line="23" pos:column="28">0<pos:position pos:line="23" pos:column="29"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="23" pos:column="31">unb<pos:position pos:line="23" pos:column="34"/></name> <init pos:line="23" pos:column="35">= <expr><literal type="number" pos:line="23" pos:column="37">0<pos:position pos:line="23" pos:column="38"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="23" pos:column="40">usz<pos:position pos:line="23" pos:column="43"/></name> <init pos:line="23" pos:column="44">= <expr><literal type="number" pos:line="23" pos:column="46">0<pos:position pos:line="23" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="48"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="25" pos:column="9">strbuf_addstr<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><operator pos:line="25" pos:column="23">&amp;<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="24">parsed<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="32">"set --"<pos:position pos:line="25" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">argc<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <call><name pos:line="26" pos:column="16">parse_options<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">argc<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="36">argv<pos:position pos:line="26" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="42">prefix<pos:position pos:line="26" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="50">parseopt_opts<pos:position pos:line="26" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="65">parseopt_usage<pos:position pos:line="26" pos:column="79"/></name></expr></argument>,
	                     <argument><expr><name pos:line="27" pos:column="30">PARSE_OPT_KEEP_DASHDASH<pos:position pos:line="27" pos:column="53"/></name></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="55"/></expr_stmt>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">argc<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">&lt;<pos:position pos:line="28" pos:column="22"/></operator> <literal type="number" pos:line="28" pos:column="20">1<pos:position pos:line="28" pos:column="21"/></literal> <operator pos:line="28" pos:column="22">||<pos:position pos:line="28" pos:column="24"/></operator> <call><name pos:line="28" pos:column="25">strcmp<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name><name pos:line="28" pos:column="32">argv<pos:position pos:line="28" pos:column="36"/></name><index pos:line="28" pos:column="36">[<expr><literal type="number" pos:line="28" pos:column="37">0<pos:position pos:line="28" pos:column="38"/></literal></expr>]<pos:position pos:line="28" pos:column="39"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="41">"--"<pos:position pos:line="28" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="47"/></condition><then pos:line="28" pos:column="47">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="17">usage_with_options<pos:position pos:line="29" pos:column="35"/></name><argument_list pos:line="29" pos:column="35">(<argument><expr><name pos:line="29" pos:column="36">parseopt_usage<pos:position pos:line="29" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="52">parseopt_opts<pos:position pos:line="29" pos:column="65"/></name></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="67"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="31" pos:column="9">/* get the usage up to the first line with a -- on it */</comment>
	<for pos:line="32" pos:column="9">for <control pos:line="32" pos:column="13">(<init pos:line="32" pos:column="14">;<pos:position pos:line="32" pos:column="15"/></init><condition pos:line="32" pos:column="15">;<pos:position pos:line="32" pos:column="16"/></condition><incr/>)<pos:position pos:line="32" pos:column="17"/></control> <block pos:line="32" pos:column="18">{
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><call><name pos:line="33" pos:column="21">strbuf_getline<pos:position pos:line="33" pos:column="35"/></name><argument_list pos:line="33" pos:column="35">(<argument><expr><operator pos:line="33" pos:column="36">&amp;<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="37">sb<pos:position pos:line="33" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="41">stdin<pos:position pos:line="33" pos:column="46"/></name></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call> <operator pos:line="33" pos:column="48">==<pos:position pos:line="33" pos:column="50"/></operator> <name pos:line="33" pos:column="51">EOF<pos:position pos:line="33" pos:column="54"/></name></expr>)<pos:position pos:line="33" pos:column="55"/></condition><then pos:line="33" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">die<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><literal type="string" pos:line="34" pos:column="29">"premature end of input"<pos:position pos:line="34" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="55"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">ALLOC_GROW<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">usage<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="35">unb<pos:position pos:line="35" pos:column="38"/></name> <operator pos:line="35" pos:column="39">+<pos:position pos:line="35" pos:column="40"/></operator> <literal type="number" pos:line="35" pos:column="41">1<pos:position pos:line="35" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="44">usz<pos:position pos:line="35" pos:column="47"/></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><operator pos:line="36" pos:column="21">!<pos:position pos:line="36" pos:column="22"/></operator><call><name pos:line="36" pos:column="22">strcmp<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><literal type="string" pos:line="36" pos:column="29">"--"<pos:position pos:line="36" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="35">sb<pos:position pos:line="36" pos:column="37"/></name><operator pos:line="36" pos:column="37">.<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="38">buf<pos:position pos:line="36" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="43"/></condition><then pos:line="36" pos:column="43"> <block pos:line="36" pos:column="44">{
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><name pos:line="37" pos:column="29">unb<pos:position pos:line="37" pos:column="32"/></name> <operator pos:line="37" pos:column="33">&lt;<pos:position pos:line="37" pos:column="37"/></operator> <literal type="number" pos:line="37" pos:column="35">1<pos:position pos:line="37" pos:column="36"/></literal></expr>)<pos:position pos:line="37" pos:column="37"/></condition><then pos:line="37" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="33">die<pos:position pos:line="38" pos:column="36"/></name><argument_list pos:line="38" pos:column="36">(<argument><expr><literal type="string" pos:line="38" pos:column="37">"no usage string given before the `--' separator"<pos:position pos:line="38" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="88"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="39" pos:column="25">usage<pos:position pos:line="39" pos:column="30"/></name><index pos:line="39" pos:column="30">[<expr><name pos:line="39" pos:column="31">unb<pos:position pos:line="39" pos:column="34"/></name></expr>]<pos:position pos:line="39" pos:column="35"/></index></name> <operator pos:line="39" pos:column="36">=<pos:position pos:line="39" pos:column="37"/></operator> <name pos:line="39" pos:column="38">NULL<pos:position pos:line="39" pos:column="42"/></name></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt>
			<break pos:line="40" pos:column="25">break;<pos:position pos:line="40" pos:column="31"/></break>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="42" pos:column="17">usage<pos:position pos:line="42" pos:column="22"/></name><index pos:line="42" pos:column="22">[<expr><name pos:line="42" pos:column="23">unb<pos:position pos:line="42" pos:column="26"/></name><operator pos:line="42" pos:column="26">++<pos:position pos:line="42" pos:column="28"/></operator></expr>]<pos:position pos:line="42" pos:column="29"/></index></name> <operator pos:line="42" pos:column="30">=<pos:position pos:line="42" pos:column="31"/></operator> <call><name pos:line="42" pos:column="32">strbuf_detach<pos:position pos:line="42" pos:column="45"/></name><argument_list pos:line="42" pos:column="45">(<argument><expr><operator pos:line="42" pos:column="46">&amp;<pos:position pos:line="42" pos:column="51"/></operator><name pos:line="42" pos:column="47">sb<pos:position pos:line="42" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="51">NULL<pos:position pos:line="42" pos:column="55"/></name></expr></argument>)<pos:position pos:line="42" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></for>

	<comment type="block" pos:line="45" pos:column="9">/* parse: (&lt;short&gt;|&lt;short&gt;,&lt;long&gt;|&lt;long&gt;)[*=?!]*&lt;arghint&gt;? SP+ &lt;help&gt; */</comment>
	<while pos:line="46" pos:column="9">while <condition pos:line="46" pos:column="15">(<expr><call><name pos:line="46" pos:column="16">strbuf_getline<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">(<argument><expr><operator pos:line="46" pos:column="31">&amp;<pos:position pos:line="46" pos:column="36"/></operator><name pos:line="46" pos:column="32">sb<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="36">stdin<pos:position pos:line="46" pos:column="41"/></name></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></call> <operator pos:line="46" pos:column="43">!=<pos:position pos:line="46" pos:column="45"/></operator> <name pos:line="46" pos:column="46">EOF<pos:position pos:line="46" pos:column="49"/></name></expr>)<pos:position pos:line="46" pos:column="50"/></condition> <block pos:line="46" pos:column="51">{
		<decl_stmt><decl><type><specifier pos:line="47" pos:column="17">const<pos:position pos:line="47" pos:column="22"/></specifier> <name pos:line="47" pos:column="23">char<pos:position pos:line="47" pos:column="27"/></name> <modifier pos:line="47" pos:column="28">*<pos:position pos:line="47" pos:column="29"/></modifier></type><name pos:line="47" pos:column="29">s<pos:position pos:line="47" pos:column="30"/></name></decl>;<pos:position pos:line="47" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="48" pos:column="17">const<pos:position pos:line="48" pos:column="22"/></specifier> <name pos:line="48" pos:column="23">char<pos:position pos:line="48" pos:column="27"/></name> <modifier pos:line="48" pos:column="28">*<pos:position pos:line="48" pos:column="29"/></modifier></type><name pos:line="48" pos:column="29">help<pos:position pos:line="48" pos:column="33"/></name></decl>;<pos:position pos:line="48" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="49" pos:column="17">struct<pos:position pos:line="49" pos:column="23"/></name> <name pos:line="49" pos:column="24">option<pos:position pos:line="49" pos:column="30"/></name></name> <modifier pos:line="49" pos:column="31">*<pos:position pos:line="49" pos:column="32"/></modifier></type><name pos:line="49" pos:column="32">o<pos:position pos:line="49" pos:column="33"/></name></decl>;<pos:position pos:line="49" pos:column="34"/></decl_stmt>

		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><operator pos:line="51" pos:column="21">!<pos:position pos:line="51" pos:column="22"/></operator><name><name pos:line="51" pos:column="22">sb<pos:position pos:line="51" pos:column="24"/></name><operator pos:line="51" pos:column="24">.<pos:position pos:line="51" pos:column="25"/></operator><name pos:line="51" pos:column="25">len<pos:position pos:line="51" pos:column="28"/></name></name></expr>)<pos:position pos:line="51" pos:column="29"/></condition><then pos:line="51" pos:column="29">
			<block type="pseudo"><continue pos:line="52" pos:column="25">continue;<pos:position pos:line="52" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="54" pos:column="17">ALLOC_GROW<pos:position pos:line="54" pos:column="27"/></name><argument_list pos:line="54" pos:column="27">(<argument><expr><name pos:line="54" pos:column="28">opts<pos:position pos:line="54" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="34">onb<pos:position pos:line="54" pos:column="37"/></name> <operator pos:line="54" pos:column="38">+<pos:position pos:line="54" pos:column="39"/></operator> <literal type="number" pos:line="54" pos:column="40">1<pos:position pos:line="54" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="43">osz<pos:position pos:line="54" pos:column="46"/></name></expr></argument>)<pos:position pos:line="54" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">memset<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">opts<pos:position pos:line="55" pos:column="28"/></name> <operator pos:line="55" pos:column="29">+<pos:position pos:line="55" pos:column="30"/></operator> <name pos:line="55" pos:column="31">onb<pos:position pos:line="55" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="36">0<pos:position pos:line="55" pos:column="37"/></literal></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="39">sizeof<argument_list pos:line="55" pos:column="45">(<argument><expr><name><name pos:line="55" pos:column="46">opts<pos:position pos:line="55" pos:column="50"/></name><index pos:line="55" pos:column="50">[<expr><name pos:line="55" pos:column="51">onb<pos:position pos:line="55" pos:column="54"/></name></expr>]<pos:position pos:line="55" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="55" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="55" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="58"/></expr_stmt>

		<expr_stmt><expr><name pos:line="57" pos:column="17">o<pos:position pos:line="57" pos:column="18"/></name> <operator pos:line="57" pos:column="19">=<pos:position pos:line="57" pos:column="20"/></operator> <operator pos:line="57" pos:column="21">&amp;<pos:position pos:line="57" pos:column="26"/></operator><name><name pos:line="57" pos:column="22">opts<pos:position pos:line="57" pos:column="26"/></name><index pos:line="57" pos:column="26">[<expr><name pos:line="57" pos:column="27">onb<pos:position pos:line="57" pos:column="30"/></name><operator pos:line="57" pos:column="30">++<pos:position pos:line="57" pos:column="32"/></operator></expr>]<pos:position pos:line="57" pos:column="33"/></index></name></expr>;<pos:position pos:line="57" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="58" pos:column="17">help<pos:position pos:line="58" pos:column="21"/></name> <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <call><name pos:line="58" pos:column="24">strchr<pos:position pos:line="58" pos:column="30"/></name><argument_list pos:line="58" pos:column="30">(<argument><expr><name><name pos:line="58" pos:column="31">sb<pos:position pos:line="58" pos:column="33"/></name><operator pos:line="58" pos:column="33">.<pos:position pos:line="58" pos:column="34"/></operator><name pos:line="58" pos:column="34">buf<pos:position pos:line="58" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="58" pos:column="39">' '<pos:position pos:line="58" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="44"/></expr_stmt>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><operator pos:line="59" pos:column="21">!<pos:position pos:line="59" pos:column="22"/></operator><name pos:line="59" pos:column="22">help<pos:position pos:line="59" pos:column="26"/></name> <operator pos:line="59" pos:column="27">||<pos:position pos:line="59" pos:column="29"/></operator> <operator pos:line="59" pos:column="30">*<pos:position pos:line="59" pos:column="31"/></operator><name><name pos:line="59" pos:column="31">sb<pos:position pos:line="59" pos:column="33"/></name><operator pos:line="59" pos:column="33">.<pos:position pos:line="59" pos:column="34"/></operator><name pos:line="59" pos:column="34">buf<pos:position pos:line="59" pos:column="37"/></name></name> <operator pos:line="59" pos:column="38">==<pos:position pos:line="59" pos:column="40"/></operator> <literal type="char" pos:line="59" pos:column="41">' '<pos:position pos:line="59" pos:column="44"/></literal></expr>)<pos:position pos:line="59" pos:column="45"/></condition><then pos:line="59" pos:column="45"> <block pos:line="59" pos:column="46">{
			<expr_stmt><expr><name><name pos:line="60" pos:column="25">o<pos:position pos:line="60" pos:column="26"/></name><operator pos:line="60" pos:column="26">-&gt;<pos:position pos:line="60" pos:column="31"/></operator><name pos:line="60" pos:column="28">type<pos:position pos:line="60" pos:column="32"/></name></name> <operator pos:line="60" pos:column="33">=<pos:position pos:line="60" pos:column="34"/></operator> <name pos:line="60" pos:column="35">OPTION_GROUP<pos:position pos:line="60" pos:column="47"/></name></expr>;<pos:position pos:line="60" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="61" pos:column="25">o<pos:position pos:line="61" pos:column="26"/></name><operator pos:line="61" pos:column="26">-&gt;<pos:position pos:line="61" pos:column="31"/></operator><name pos:line="61" pos:column="28">help<pos:position pos:line="61" pos:column="32"/></name></name> <operator pos:line="61" pos:column="33">=<pos:position pos:line="61" pos:column="34"/></operator> <call><name pos:line="61" pos:column="35">xstrdup<pos:position pos:line="61" pos:column="42"/></name><argument_list pos:line="61" pos:column="42">(<argument><expr><call><name pos:line="61" pos:column="43">skipspaces<pos:position pos:line="61" pos:column="53"/></name><argument_list pos:line="61" pos:column="53">(<argument><expr><name><name pos:line="61" pos:column="54">sb<pos:position pos:line="61" pos:column="56"/></name><operator pos:line="61" pos:column="56">.<pos:position pos:line="61" pos:column="57"/></operator><name pos:line="61" pos:column="57">buf<pos:position pos:line="61" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="63"/></expr_stmt>
			<continue pos:line="62" pos:column="25">continue;<pos:position pos:line="62" pos:column="34"/></continue>
		}<pos:position pos:line="63" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="65" pos:column="17">o<pos:position pos:line="65" pos:column="18"/></name><operator pos:line="65" pos:column="18">-&gt;<pos:position pos:line="65" pos:column="23"/></operator><name pos:line="65" pos:column="20">type<pos:position pos:line="65" pos:column="24"/></name></name> <operator pos:line="65" pos:column="25">=<pos:position pos:line="65" pos:column="26"/></operator> <name pos:line="65" pos:column="27">OPTION_CALLBACK<pos:position pos:line="65" pos:column="42"/></name></expr>;<pos:position pos:line="65" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="66" pos:column="17">o<pos:position pos:line="66" pos:column="18"/></name><operator pos:line="66" pos:column="18">-&gt;<pos:position pos:line="66" pos:column="23"/></operator><name pos:line="66" pos:column="20">help<pos:position pos:line="66" pos:column="24"/></name></name> <operator pos:line="66" pos:column="25">=<pos:position pos:line="66" pos:column="26"/></operator> <call><name pos:line="66" pos:column="27">xstrdup<pos:position pos:line="66" pos:column="34"/></name><argument_list pos:line="66" pos:column="34">(<argument><expr><call><name pos:line="66" pos:column="35">skipspaces<pos:position pos:line="66" pos:column="45"/></name><argument_list pos:line="66" pos:column="45">(<argument><expr><name pos:line="66" pos:column="46">help<pos:position pos:line="66" pos:column="50"/></name></expr></argument>)<pos:position pos:line="66" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="67" pos:column="17">o<pos:position pos:line="67" pos:column="18"/></name><operator pos:line="67" pos:column="18">-&gt;<pos:position pos:line="67" pos:column="23"/></operator><name pos:line="67" pos:column="20">value<pos:position pos:line="67" pos:column="25"/></name></name> <operator pos:line="67" pos:column="26">=<pos:position pos:line="67" pos:column="27"/></operator> <operator pos:line="67" pos:column="28">&amp;<pos:position pos:line="67" pos:column="33"/></operator><name pos:line="67" pos:column="29">parsed<pos:position pos:line="67" pos:column="35"/></name></expr>;<pos:position pos:line="67" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="68" pos:column="17">o<pos:position pos:line="68" pos:column="18"/></name><operator pos:line="68" pos:column="18">-&gt;<pos:position pos:line="68" pos:column="23"/></operator><name pos:line="68" pos:column="20">flags<pos:position pos:line="68" pos:column="25"/></name></name> <operator pos:line="68" pos:column="26">=<pos:position pos:line="68" pos:column="27"/></operator> <name pos:line="68" pos:column="28">PARSE_OPT_NOARG<pos:position pos:line="68" pos:column="43"/></name></expr>;<pos:position pos:line="68" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="69" pos:column="17">o<pos:position pos:line="69" pos:column="18"/></name><operator pos:line="69" pos:column="18">-&gt;<pos:position pos:line="69" pos:column="23"/></operator><name pos:line="69" pos:column="20">callback<pos:position pos:line="69" pos:column="28"/></name></name> <operator pos:line="69" pos:column="29">=<pos:position pos:line="69" pos:column="30"/></operator> <operator pos:line="69" pos:column="31">&amp;<pos:position pos:line="69" pos:column="36"/></operator><name pos:line="69" pos:column="32">parseopt_dump<pos:position pos:line="69" pos:column="45"/></name></expr>;<pos:position pos:line="69" pos:column="46"/></expr_stmt>

		<comment type="block" pos:line="71" pos:column="17">/* name(s) */</comment>
		<expr_stmt><expr><name pos:line="72" pos:column="17">s<pos:position pos:line="72" pos:column="18"/></name> <operator pos:line="72" pos:column="19">=<pos:position pos:line="72" pos:column="20"/></operator> <call><name pos:line="72" pos:column="21">strpbrk<pos:position pos:line="72" pos:column="28"/></name><argument_list pos:line="72" pos:column="28">(<argument><expr><name><name pos:line="72" pos:column="29">sb<pos:position pos:line="72" pos:column="31"/></name><operator pos:line="72" pos:column="31">.<pos:position pos:line="72" pos:column="32"/></operator><name pos:line="72" pos:column="32">buf<pos:position pos:line="72" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="37">flag_chars<pos:position pos:line="72" pos:column="47"/></name></expr></argument>)<pos:position pos:line="72" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="49"/></expr_stmt>
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name pos:line="73" pos:column="21">s<pos:position pos:line="73" pos:column="22"/></name> <operator pos:line="73" pos:column="23">==<pos:position pos:line="73" pos:column="25"/></operator> <name pos:line="73" pos:column="26">NULL<pos:position pos:line="73" pos:column="30"/></name></expr>)<pos:position pos:line="73" pos:column="31"/></condition><then pos:line="73" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><name pos:line="74" pos:column="25">s<pos:position pos:line="74" pos:column="26"/></name> <operator pos:line="74" pos:column="27">=<pos:position pos:line="74" pos:column="28"/></operator> <name pos:line="74" pos:column="29">help<pos:position pos:line="74" pos:column="33"/></name></expr>;<pos:position pos:line="74" pos:column="34"/></expr_stmt></block></then></if>

		<if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><name pos:line="76" pos:column="21">s<pos:position pos:line="76" pos:column="22"/></name> <operator pos:line="76" pos:column="23">-<pos:position pos:line="76" pos:column="24"/></operator> <name><name pos:line="76" pos:column="25">sb<pos:position pos:line="76" pos:column="27"/></name><operator pos:line="76" pos:column="27">.<pos:position pos:line="76" pos:column="28"/></operator><name pos:line="76" pos:column="28">buf<pos:position pos:line="76" pos:column="31"/></name></name> <operator pos:line="76" pos:column="32">==<pos:position pos:line="76" pos:column="34"/></operator> <literal type="number" pos:line="76" pos:column="35">1<pos:position pos:line="76" pos:column="36"/></literal></expr>)<pos:position pos:line="76" pos:column="37"/></condition><then pos:line="76" pos:column="37"> <comment type="block" pos:line="76" pos:column="38">/* short option only */</comment>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="77" pos:column="25">o<pos:position pos:line="77" pos:column="26"/></name><operator pos:line="77" pos:column="26">-&gt;<pos:position pos:line="77" pos:column="31"/></operator><name pos:line="77" pos:column="28">short_name<pos:position pos:line="77" pos:column="38"/></name></name> <operator pos:line="77" pos:column="39">=<pos:position pos:line="77" pos:column="40"/></operator> <operator pos:line="77" pos:column="41">*<pos:position pos:line="77" pos:column="42"/></operator><name><name pos:line="77" pos:column="42">sb<pos:position pos:line="77" pos:column="44"/></name><operator pos:line="77" pos:column="44">.<pos:position pos:line="77" pos:column="45"/></operator><name pos:line="77" pos:column="45">buf<pos:position pos:line="77" pos:column="48"/></name></name></expr>;<pos:position pos:line="77" pos:column="49"/></expr_stmt></block></then>
		<elseif pos:line="78" pos:column="17">else <if pos:line="78" pos:column="22">if <condition pos:line="78" pos:column="25">(<expr><name><name pos:line="78" pos:column="26">sb<pos:position pos:line="78" pos:column="28"/></name><operator pos:line="78" pos:column="28">.<pos:position pos:line="78" pos:column="29"/></operator><name pos:line="78" pos:column="29">buf<pos:position pos:line="78" pos:column="32"/></name><index pos:line="78" pos:column="32">[<expr><literal type="number" pos:line="78" pos:column="33">1<pos:position pos:line="78" pos:column="34"/></literal></expr>]<pos:position pos:line="78" pos:column="35"/></index></name> <operator pos:line="78" pos:column="36">!=<pos:position pos:line="78" pos:column="38"/></operator> <literal type="char" pos:line="78" pos:column="39">','<pos:position pos:line="78" pos:column="42"/></literal></expr>)<pos:position pos:line="78" pos:column="43"/></condition><then pos:line="78" pos:column="43"> <comment type="block" pos:line="78" pos:column="44">/* long option only */</comment>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="79" pos:column="25">o<pos:position pos:line="79" pos:column="26"/></name><operator pos:line="79" pos:column="26">-&gt;<pos:position pos:line="79" pos:column="31"/></operator><name pos:line="79" pos:column="28">long_name<pos:position pos:line="79" pos:column="37"/></name></name> <operator pos:line="79" pos:column="38">=<pos:position pos:line="79" pos:column="39"/></operator> <call><name pos:line="79" pos:column="40">xmemdupz<pos:position pos:line="79" pos:column="48"/></name><argument_list pos:line="79" pos:column="48">(<argument><expr><name><name pos:line="79" pos:column="49">sb<pos:position pos:line="79" pos:column="51"/></name><operator pos:line="79" pos:column="51">.<pos:position pos:line="79" pos:column="52"/></operator><name pos:line="79" pos:column="52">buf<pos:position pos:line="79" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="57">s<pos:position pos:line="79" pos:column="58"/></name> <operator pos:line="79" pos:column="59">-<pos:position pos:line="79" pos:column="60"/></operator> <name><name pos:line="79" pos:column="61">sb<pos:position pos:line="79" pos:column="63"/></name><operator pos:line="79" pos:column="63">.<pos:position pos:line="79" pos:column="64"/></operator><name pos:line="79" pos:column="64">buf<pos:position pos:line="79" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="69"/></expr_stmt></block></then></if></elseif>
		<else pos:line="80" pos:column="17">else <block pos:line="80" pos:column="22">{
			<expr_stmt><expr><name><name pos:line="81" pos:column="25">o<pos:position pos:line="81" pos:column="26"/></name><operator pos:line="81" pos:column="26">-&gt;<pos:position pos:line="81" pos:column="31"/></operator><name pos:line="81" pos:column="28">short_name<pos:position pos:line="81" pos:column="38"/></name></name> <operator pos:line="81" pos:column="39">=<pos:position pos:line="81" pos:column="40"/></operator> <operator pos:line="81" pos:column="41">*<pos:position pos:line="81" pos:column="42"/></operator><name><name pos:line="81" pos:column="42">sb<pos:position pos:line="81" pos:column="44"/></name><operator pos:line="81" pos:column="44">.<pos:position pos:line="81" pos:column="45"/></operator><name pos:line="81" pos:column="45">buf<pos:position pos:line="81" pos:column="48"/></name></name></expr>;<pos:position pos:line="81" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="82" pos:column="25">o<pos:position pos:line="82" pos:column="26"/></name><operator pos:line="82" pos:column="26">-&gt;<pos:position pos:line="82" pos:column="31"/></operator><name pos:line="82" pos:column="28">long_name<pos:position pos:line="82" pos:column="37"/></name></name> <operator pos:line="82" pos:column="38">=<pos:position pos:line="82" pos:column="39"/></operator> <call><name pos:line="82" pos:column="40">xmemdupz<pos:position pos:line="82" pos:column="48"/></name><argument_list pos:line="82" pos:column="48">(<argument><expr><name><name pos:line="82" pos:column="49">sb<pos:position pos:line="82" pos:column="51"/></name><operator pos:line="82" pos:column="51">.<pos:position pos:line="82" pos:column="52"/></operator><name pos:line="82" pos:column="52">buf<pos:position pos:line="82" pos:column="55"/></name></name> <operator pos:line="82" pos:column="56">+<pos:position pos:line="82" pos:column="57"/></operator> <literal type="number" pos:line="82" pos:column="58">2<pos:position pos:line="82" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="61">s<pos:position pos:line="82" pos:column="62"/></name> <operator pos:line="82" pos:column="63">-<pos:position pos:line="82" pos:column="64"/></operator> <name><name pos:line="82" pos:column="65">sb<pos:position pos:line="82" pos:column="67"/></name><operator pos:line="82" pos:column="67">.<pos:position pos:line="82" pos:column="68"/></operator><name pos:line="82" pos:column="68">buf<pos:position pos:line="82" pos:column="71"/></name></name> <operator pos:line="82" pos:column="72">-<pos:position pos:line="82" pos:column="73"/></operator> <literal type="number" pos:line="82" pos:column="74">2<pos:position pos:line="82" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="77"/></expr_stmt>
		}<pos:position pos:line="83" pos:column="18"/></block></else></if>

		<comment type="block" pos:line="85" pos:column="17">/* flags */</comment>
		<while pos:line="86" pos:column="17">while <condition pos:line="86" pos:column="23">(<expr><name pos:line="86" pos:column="24">s<pos:position pos:line="86" pos:column="25"/></name> <operator pos:line="86" pos:column="26">&lt;<pos:position pos:line="86" pos:column="30"/></operator> <name pos:line="86" pos:column="28">help<pos:position pos:line="86" pos:column="32"/></name></expr>)<pos:position pos:line="86" pos:column="33"/></condition> <block pos:line="86" pos:column="34">{
			<switch pos:line="87" pos:column="25">switch <condition pos:line="87" pos:column="32">(<expr><operator pos:line="87" pos:column="33">*<pos:position pos:line="87" pos:column="34"/></operator><name pos:line="87" pos:column="34">s<pos:position pos:line="87" pos:column="35"/></name><operator pos:line="87" pos:column="35">++<pos:position pos:line="87" pos:column="37"/></operator></expr>)<pos:position pos:line="87" pos:column="38"/></condition> <block pos:line="87" pos:column="39">{
			<case pos:line="88" pos:column="25">case <expr><literal type="char" pos:line="88" pos:column="30">'='<pos:position pos:line="88" pos:column="33"/></literal></expr>:<pos:position pos:line="88" pos:column="34"/></case>
				<expr_stmt><expr><name><name pos:line="89" pos:column="33">o<pos:position pos:line="89" pos:column="34"/></name><operator pos:line="89" pos:column="34">-&gt;<pos:position pos:line="89" pos:column="39"/></operator><name pos:line="89" pos:column="36">flags<pos:position pos:line="89" pos:column="41"/></name></name> <operator pos:line="89" pos:column="42">&amp;=<pos:position pos:line="89" pos:column="48"/></operator> <operator pos:line="89" pos:column="45">~<pos:position pos:line="89" pos:column="46"/></operator><name pos:line="89" pos:column="46">PARSE_OPT_NOARG<pos:position pos:line="89" pos:column="61"/></name></expr>;<pos:position pos:line="89" pos:column="62"/></expr_stmt>
				<continue pos:line="90" pos:column="33">continue;<pos:position pos:line="90" pos:column="42"/></continue>
			<case pos:line="91" pos:column="25">case <expr><literal type="char" pos:line="91" pos:column="30">'?'<pos:position pos:line="91" pos:column="33"/></literal></expr>:<pos:position pos:line="91" pos:column="34"/></case>
				<expr_stmt><expr><name><name pos:line="92" pos:column="33">o<pos:position pos:line="92" pos:column="34"/></name><operator pos:line="92" pos:column="34">-&gt;<pos:position pos:line="92" pos:column="39"/></operator><name pos:line="92" pos:column="36">flags<pos:position pos:line="92" pos:column="41"/></name></name> <operator pos:line="92" pos:column="42">&amp;=<pos:position pos:line="92" pos:column="48"/></operator> <operator pos:line="92" pos:column="45">~<pos:position pos:line="92" pos:column="46"/></operator><name pos:line="92" pos:column="46">PARSE_OPT_NOARG<pos:position pos:line="92" pos:column="61"/></name></expr>;<pos:position pos:line="92" pos:column="62"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="93" pos:column="33">o<pos:position pos:line="93" pos:column="34"/></name><operator pos:line="93" pos:column="34">-&gt;<pos:position pos:line="93" pos:column="39"/></operator><name pos:line="93" pos:column="36">flags<pos:position pos:line="93" pos:column="41"/></name></name> <operator pos:line="93" pos:column="42">|=<pos:position pos:line="93" pos:column="44"/></operator> <name pos:line="93" pos:column="45">PARSE_OPT_OPTARG<pos:position pos:line="93" pos:column="61"/></name></expr>;<pos:position pos:line="93" pos:column="62"/></expr_stmt>
				<continue pos:line="94" pos:column="33">continue;<pos:position pos:line="94" pos:column="42"/></continue>
			<case pos:line="95" pos:column="25">case <expr><literal type="char" pos:line="95" pos:column="30">'!'<pos:position pos:line="95" pos:column="33"/></literal></expr>:<pos:position pos:line="95" pos:column="34"/></case>
				<expr_stmt><expr><name><name pos:line="96" pos:column="33">o<pos:position pos:line="96" pos:column="34"/></name><operator pos:line="96" pos:column="34">-&gt;<pos:position pos:line="96" pos:column="39"/></operator><name pos:line="96" pos:column="36">flags<pos:position pos:line="96" pos:column="41"/></name></name> <operator pos:line="96" pos:column="42">|=<pos:position pos:line="96" pos:column="44"/></operator> <name pos:line="96" pos:column="45">PARSE_OPT_NONEG<pos:position pos:line="96" pos:column="60"/></name></expr>;<pos:position pos:line="96" pos:column="61"/></expr_stmt>
				<continue pos:line="97" pos:column="33">continue;<pos:position pos:line="97" pos:column="42"/></continue>
			<case pos:line="98" pos:column="25">case <expr><literal type="char" pos:line="98" pos:column="30">'*'<pos:position pos:line="98" pos:column="33"/></literal></expr>:<pos:position pos:line="98" pos:column="34"/></case>
				<expr_stmt><expr><name><name pos:line="99" pos:column="33">o<pos:position pos:line="99" pos:column="34"/></name><operator pos:line="99" pos:column="34">-&gt;<pos:position pos:line="99" pos:column="39"/></operator><name pos:line="99" pos:column="36">flags<pos:position pos:line="99" pos:column="41"/></name></name> <operator pos:line="99" pos:column="42">|=<pos:position pos:line="99" pos:column="44"/></operator> <name pos:line="99" pos:column="45">PARSE_OPT_HIDDEN<pos:position pos:line="99" pos:column="61"/></name></expr>;<pos:position pos:line="99" pos:column="62"/></expr_stmt>
				<continue pos:line="100" pos:column="33">continue;<pos:position pos:line="100" pos:column="42"/></continue>
			}<pos:position pos:line="101" pos:column="26"/></block></switch>
			<expr_stmt><expr><name pos:line="102" pos:column="25">s<pos:position pos:line="102" pos:column="26"/></name><operator pos:line="102" pos:column="26">--<pos:position pos:line="102" pos:column="28"/></operator></expr>;<pos:position pos:line="102" pos:column="29"/></expr_stmt>
			<break pos:line="103" pos:column="25">break;<pos:position pos:line="103" pos:column="31"/></break>
		}<pos:position pos:line="104" pos:column="18"/></block></while>

		<if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><name pos:line="106" pos:column="21">s<pos:position pos:line="106" pos:column="22"/></name> <operator pos:line="106" pos:column="23">&lt;<pos:position pos:line="106" pos:column="27"/></operator> <name pos:line="106" pos:column="25">help<pos:position pos:line="106" pos:column="29"/></name></expr>)<pos:position pos:line="106" pos:column="30"/></condition><then pos:line="106" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="107" pos:column="25">o<pos:position pos:line="107" pos:column="26"/></name><operator pos:line="107" pos:column="26">-&gt;<pos:position pos:line="107" pos:column="31"/></operator><name pos:line="107" pos:column="28">argh<pos:position pos:line="107" pos:column="32"/></name></name> <operator pos:line="107" pos:column="33">=<pos:position pos:line="107" pos:column="34"/></operator> <call><name pos:line="107" pos:column="35">xmemdupz<pos:position pos:line="107" pos:column="43"/></name><argument_list pos:line="107" pos:column="43">(<argument><expr><name pos:line="107" pos:column="44">s<pos:position pos:line="107" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="47">help<pos:position pos:line="107" pos:column="51"/></name> <operator pos:line="107" pos:column="52">-<pos:position pos:line="107" pos:column="53"/></operator> <name pos:line="107" pos:column="54">s<pos:position pos:line="107" pos:column="55"/></name></expr></argument>)<pos:position pos:line="107" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="57"/></expr_stmt></block></then></if>
	}<pos:position pos:line="108" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="109" pos:column="9">strbuf_release<pos:position pos:line="109" pos:column="23"/></name><argument_list pos:line="109" pos:column="23">(<argument><expr><operator pos:line="109" pos:column="24">&amp;<pos:position pos:line="109" pos:column="29"/></operator><name pos:line="109" pos:column="25">sb<pos:position pos:line="109" pos:column="27"/></name></expr></argument>)<pos:position pos:line="109" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="29"/></expr_stmt>

	<comment type="block" pos:line="111" pos:column="9">/* put an OPT_END() */</comment>
	<expr_stmt><expr><call><name pos:line="112" pos:column="9">ALLOC_GROW<pos:position pos:line="112" pos:column="19"/></name><argument_list pos:line="112" pos:column="19">(<argument><expr><name pos:line="112" pos:column="20">opts<pos:position pos:line="112" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="26">onb<pos:position pos:line="112" pos:column="29"/></name> <operator pos:line="112" pos:column="30">+<pos:position pos:line="112" pos:column="31"/></operator> <literal type="number" pos:line="112" pos:column="32">1<pos:position pos:line="112" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="112" pos:column="35">osz<pos:position pos:line="112" pos:column="38"/></name></expr></argument>)<pos:position pos:line="112" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="113" pos:column="9">memset<pos:position pos:line="113" pos:column="15"/></name><argument_list pos:line="113" pos:column="15">(<argument><expr><name pos:line="113" pos:column="16">opts<pos:position pos:line="113" pos:column="20"/></name> <operator pos:line="113" pos:column="21">+<pos:position pos:line="113" pos:column="22"/></operator> <name pos:line="113" pos:column="23">onb<pos:position pos:line="113" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="113" pos:column="28">0<pos:position pos:line="113" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="113" pos:column="31">sizeof<argument_list pos:line="113" pos:column="37">(<argument><expr><name><name pos:line="113" pos:column="38">opts<pos:position pos:line="113" pos:column="42"/></name><index pos:line="113" pos:column="42">[<expr><name pos:line="113" pos:column="43">onb<pos:position pos:line="113" pos:column="46"/></name></expr>]<pos:position pos:line="113" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="113" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="113" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><name pos:line="114" pos:column="9">argc<pos:position pos:line="114" pos:column="13"/></name> <operator pos:line="114" pos:column="14">=<pos:position pos:line="114" pos:column="15"/></operator> <call><name pos:line="114" pos:column="16">parse_options<pos:position pos:line="114" pos:column="29"/></name><argument_list pos:line="114" pos:column="29">(<argument><expr><name pos:line="114" pos:column="30">argc<pos:position pos:line="114" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="36">argv<pos:position pos:line="114" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="42">prefix<pos:position pos:line="114" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="50">opts<pos:position pos:line="114" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="56">usage<pos:position pos:line="114" pos:column="61"/></name></expr></argument>,
			<argument><expr><operator pos:line="115" pos:column="25">(<pos:position pos:line="115" pos:column="26"/></operator><ternary><condition><expr><name pos:line="115" pos:column="26">keep_dashdash<pos:position pos:line="115" pos:column="39"/></name></expr> ?<pos:position pos:line="115" pos:column="41"/></condition><then pos:line="115" pos:column="41"> <expr><name pos:line="115" pos:column="42">PARSE_OPT_KEEP_DASHDASH<pos:position pos:line="115" pos:column="65"/></name></expr> <pos:position pos:line="115" pos:column="66"/></then><else pos:line="115" pos:column="66">: <expr><literal type="number" pos:line="115" pos:column="68">0<pos:position pos:line="115" pos:column="69"/></literal></expr></else></ternary><operator pos:line="115" pos:column="69">)<pos:position pos:line="115" pos:column="70"/></operator> <operator pos:line="115" pos:column="71">|<pos:position pos:line="115" pos:column="72"/></operator>
			<operator pos:line="116" pos:column="25">(<pos:position pos:line="116" pos:column="26"/></operator><ternary><condition><expr><name pos:line="116" pos:column="26">stop_at_non_option<pos:position pos:line="116" pos:column="44"/></name></expr> ?<pos:position pos:line="116" pos:column="46"/></condition><then pos:line="116" pos:column="46"> <expr><name pos:line="116" pos:column="47">PARSE_OPT_STOP_AT_NON_OPTION<pos:position pos:line="116" pos:column="75"/></name></expr> <pos:position pos:line="116" pos:column="76"/></then><else pos:line="116" pos:column="76">: <expr><literal type="number" pos:line="116" pos:column="78">0<pos:position pos:line="116" pos:column="79"/></literal></expr></else></ternary><operator pos:line="116" pos:column="79">)<pos:position pos:line="116" pos:column="80"/></operator> <operator pos:line="116" pos:column="81">|<pos:position pos:line="116" pos:column="82"/></operator>
			<name pos:line="117" pos:column="25">PARSE_OPT_SHELL_EVAL<pos:position pos:line="117" pos:column="45"/></name></expr></argument>)<pos:position pos:line="117" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="47"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="119" pos:column="9">strbuf_addstr<pos:position pos:line="119" pos:column="22"/></name><argument_list pos:line="119" pos:column="22">(<argument><expr><operator pos:line="119" pos:column="23">&amp;<pos:position pos:line="119" pos:column="28"/></operator><name pos:line="119" pos:column="24">parsed<pos:position pos:line="119" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="32">" --"<pos:position pos:line="119" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="120" pos:column="9">sq_quote_argv<pos:position pos:line="120" pos:column="22"/></name><argument_list pos:line="120" pos:column="22">(<argument><expr><operator pos:line="120" pos:column="23">&amp;<pos:position pos:line="120" pos:column="28"/></operator><name pos:line="120" pos:column="24">parsed<pos:position pos:line="120" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="32">argv<pos:position pos:line="120" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="120" pos:column="38">0<pos:position pos:line="120" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="121" pos:column="9">puts<pos:position pos:line="121" pos:column="13"/></name><argument_list pos:line="121" pos:column="13">(<argument><expr><name><name pos:line="121" pos:column="14">parsed<pos:position pos:line="121" pos:column="20"/></name><operator pos:line="121" pos:column="20">.<pos:position pos:line="121" pos:column="21"/></operator><name pos:line="121" pos:column="21">buf<pos:position pos:line="121" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="121" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="26"/></expr_stmt>
	<return pos:line="122" pos:column="9">return <expr><literal type="number" pos:line="122" pos:column="16">0<pos:position pos:line="122" pos:column="17"/></literal></expr>;<pos:position pos:line="122" pos:column="18"/></return>
}<pos:position pos:line="123" pos:column="2"/></block></function></unit>
