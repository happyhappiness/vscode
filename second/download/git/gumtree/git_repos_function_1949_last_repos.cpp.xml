<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1949_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">xdi_diff_outf<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">mmfile_t<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">mf1<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">mmfile_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">mf2<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>,
		  <parameter><decl><type><name pos:line="2" pos:column="19">xdiff_emit_consume_fn<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">fn<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">void<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">consume_callback_data<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>,
		  <parameter><decl><type><name pos:line="3" pos:column="19">xpparam_t<pos:position pos:line="3" pos:column="28"/></name> <specifier pos:line="3" pos:column="29">const<pos:position pos:line="3" pos:column="34"/></specifier> <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier></type><name pos:line="3" pos:column="36">xpp<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="41">xdemitconf_t<pos:position pos:line="3" pos:column="53"/></name> <specifier pos:line="3" pos:column="54">const<pos:position pos:line="3" pos:column="59"/></specifier> <modifier pos:line="3" pos:column="60">*<pos:position pos:line="3" pos:column="61"/></modifier></type><name pos:line="3" pos:column="61">xecfg<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="67"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">ret<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">xdiff_emit_state<pos:position pos:line="6" pos:column="32"/></name></name></type> <name pos:line="6" pos:column="33">state<pos:position pos:line="6" pos:column="38"/></name></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">xdemitcb_t<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">ecb<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">memset<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><operator pos:line="9" pos:column="16">&amp;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="17">state<pos:position pos:line="9" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="27">sizeof<argument_list pos:line="9" pos:column="33">(<argument><expr><name pos:line="9" pos:column="34">state<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="10" pos:column="9">state<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">.<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">consume<pos:position pos:line="10" pos:column="22"/></name></name> <operator pos:line="10" pos:column="23">=<pos:position pos:line="10" pos:column="24"/></operator> <name pos:line="10" pos:column="25">fn<pos:position pos:line="10" pos:column="27"/></name></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="11" pos:column="9">state<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">consume_callback_data<pos:position pos:line="11" pos:column="36"/></name></name> <operator pos:line="11" pos:column="37">=<pos:position pos:line="11" pos:column="38"/></operator> <name pos:line="11" pos:column="39">consume_callback_data<pos:position pos:line="11" pos:column="60"/></name></expr>;<pos:position pos:line="11" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">memset<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><operator pos:line="12" pos:column="16">&amp;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="17">ecb<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="22">0<pos:position pos:line="12" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="25">sizeof<argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">ecb<pos:position pos:line="12" pos:column="35"/></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">ecb<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">.<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">outf<pos:position pos:line="13" pos:column="17"/></name></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="20">xdiff_outf<pos:position pos:line="13" pos:column="30"/></name></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">ecb<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">.<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">priv<pos:position pos:line="14" pos:column="17"/></name></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <operator pos:line="14" pos:column="20">&amp;<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="21">state<pos:position pos:line="14" pos:column="26"/></name></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">strbuf_init<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><operator pos:line="15" pos:column="21">&amp;<pos:position pos:line="15" pos:column="26"/></operator><name><name pos:line="15" pos:column="22">state<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">.<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="28">remainder<pos:position pos:line="15" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="39">0<pos:position pos:line="15" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">ret<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">xdi_diff<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">mf1<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="29">mf2<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="34">xpp<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="39">xecfg<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="46">&amp;<pos:position pos:line="16" pos:column="51"/></operator><name pos:line="16" pos:column="47">ecb<pos:position pos:line="16" pos:column="50"/></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">strbuf_release<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><operator pos:line="17" pos:column="24">&amp;<pos:position pos:line="17" pos:column="29"/></operator><name><name pos:line="17" pos:column="25">state<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">.<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="31">remainder<pos:position pos:line="17" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
	<return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">ret<pos:position pos:line="18" pos:column="19"/></name></expr>;<pos:position pos:line="18" pos:column="20"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
