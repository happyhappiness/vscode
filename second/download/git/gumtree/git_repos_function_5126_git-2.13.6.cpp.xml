<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5126_git-2.13.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_unpack_objects<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">argc<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">argv<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">prefix<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">sha1<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">20<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">check_replace_refs<pos:position pos:line="6" pos:column="27"/></name> <operator pos:line="6" pos:column="28">=<pos:position pos:line="6" pos:column="29"/></operator> <literal type="number" pos:line="6" pos:column="30">0<pos:position pos:line="6" pos:column="31"/></literal></expr>;<pos:position pos:line="6" pos:column="32"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">git_config<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">git_default_config<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">NULL<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">quiet<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <operator pos:line="10" pos:column="17">!<pos:position pos:line="10" pos:column="18"/></operator><call><name pos:line="10" pos:column="18">isatty<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><literal type="number" pos:line="10" pos:column="25">2<pos:position pos:line="10" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>

	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init><expr><name pos:line="12" pos:column="14">i<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="18">1<pos:position pos:line="12" pos:column="19"/></literal></expr> ;<pos:position pos:line="12" pos:column="21"/></init> <condition><expr><name pos:line="12" pos:column="22">i<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">&lt;<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="26">argc<pos:position pos:line="12" pos:column="30"/></name></expr>;<pos:position pos:line="12" pos:column="31"/></condition> <incr><expr><name pos:line="12" pos:column="32">i<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">++<pos:position pos:line="12" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="36"/></control> <block pos:line="12" pos:column="37">{
		<decl_stmt><decl><type><specifier pos:line="13" pos:column="17">const<pos:position pos:line="13" pos:column="22"/></specifier> <name pos:line="13" pos:column="23">char<pos:position pos:line="13" pos:column="27"/></name> <modifier pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></modifier></type><name pos:line="13" pos:column="29">arg<pos:position pos:line="13" pos:column="32"/></name> <init pos:line="13" pos:column="33">= <expr><name><name pos:line="13" pos:column="35">argv<pos:position pos:line="13" pos:column="39"/></name><index pos:line="13" pos:column="39">[<expr><name pos:line="13" pos:column="40">i<pos:position pos:line="13" pos:column="41"/></name></expr>]<pos:position pos:line="13" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="13" pos:column="43"/></decl_stmt>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">*<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">arg<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">==<pos:position pos:line="15" pos:column="28"/></operator> <literal type="char" pos:line="15" pos:column="29">'-'<pos:position pos:line="15" pos:column="32"/></literal></expr>)<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33"> <block pos:line="15" pos:column="34">{
			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><operator pos:line="16" pos:column="29">!<pos:position pos:line="16" pos:column="30"/></operator><call><name pos:line="16" pos:column="30">strcmp<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><name pos:line="16" pos:column="37">arg<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="42">"-n"<pos:position pos:line="16" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="48"/></condition><then pos:line="16" pos:column="48"> <block pos:line="16" pos:column="49">{
				<expr_stmt><expr><name pos:line="17" pos:column="33">dry_run<pos:position pos:line="17" pos:column="40"/></name> <operator pos:line="17" pos:column="41">=<pos:position pos:line="17" pos:column="42"/></operator> <literal type="number" pos:line="17" pos:column="43">1<pos:position pos:line="17" pos:column="44"/></literal></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt>
				<continue pos:line="18" pos:column="33">continue;<pos:position pos:line="18" pos:column="42"/></continue>
			}<pos:position pos:line="19" pos:column="26"/></block></then></if>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><operator pos:line="20" pos:column="29">!<pos:position pos:line="20" pos:column="30"/></operator><call><name pos:line="20" pos:column="30">strcmp<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><name pos:line="20" pos:column="37">arg<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="42">"-q"<pos:position pos:line="20" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="48"/></condition><then pos:line="20" pos:column="48"> <block pos:line="20" pos:column="49">{
				<expr_stmt><expr><name pos:line="21" pos:column="33">quiet<pos:position pos:line="21" pos:column="38"/></name> <operator pos:line="21" pos:column="39">=<pos:position pos:line="21" pos:column="40"/></operator> <literal type="number" pos:line="21" pos:column="41">1<pos:position pos:line="21" pos:column="42"/></literal></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
				<continue pos:line="22" pos:column="33">continue;<pos:position pos:line="22" pos:column="42"/></continue>
			}<pos:position pos:line="23" pos:column="26"/></block></then></if>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><operator pos:line="24" pos:column="29">!<pos:position pos:line="24" pos:column="30"/></operator><call><name pos:line="24" pos:column="30">strcmp<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">(<argument><expr><name pos:line="24" pos:column="37">arg<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="42">"-r"<pos:position pos:line="24" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="48"/></condition><then pos:line="24" pos:column="48"> <block pos:line="24" pos:column="49">{
				<expr_stmt><expr><name pos:line="25" pos:column="33">recover<pos:position pos:line="25" pos:column="40"/></name> <operator pos:line="25" pos:column="41">=<pos:position pos:line="25" pos:column="42"/></operator> <literal type="number" pos:line="25" pos:column="43">1<pos:position pos:line="25" pos:column="44"/></literal></expr>;<pos:position pos:line="25" pos:column="45"/></expr_stmt>
				<continue pos:line="26" pos:column="33">continue;<pos:position pos:line="26" pos:column="42"/></continue>
			}<pos:position pos:line="27" pos:column="26"/></block></then></if>
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><operator pos:line="28" pos:column="29">!<pos:position pos:line="28" pos:column="30"/></operator><call><name pos:line="28" pos:column="30">strcmp<pos:position pos:line="28" pos:column="36"/></name><argument_list pos:line="28" pos:column="36">(<argument><expr><name pos:line="28" pos:column="37">arg<pos:position pos:line="28" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="42">"--strict"<pos:position pos:line="28" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="54"/></condition><then pos:line="28" pos:column="54"> <block pos:line="28" pos:column="55">{
				<expr_stmt><expr><name pos:line="29" pos:column="33">strict<pos:position pos:line="29" pos:column="39"/></name> <operator pos:line="29" pos:column="40">=<pos:position pos:line="29" pos:column="41"/></operator> <literal type="number" pos:line="29" pos:column="42">1<pos:position pos:line="29" pos:column="43"/></literal></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>
				<continue pos:line="30" pos:column="33">continue;<pos:position pos:line="30" pos:column="42"/></continue>
			}<pos:position pos:line="31" pos:column="26"/></block></then></if>
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><call><name pos:line="32" pos:column="29">skip_prefix<pos:position pos:line="32" pos:column="40"/></name><argument_list pos:line="32" pos:column="40">(<argument><expr><name pos:line="32" pos:column="41">arg<pos:position pos:line="32" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="46">"--strict="<pos:position pos:line="32" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="32" pos:column="59">&amp;<pos:position pos:line="32" pos:column="64"/></operator><name pos:line="32" pos:column="60">arg<pos:position pos:line="32" pos:column="63"/></name></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="65"/></condition><then pos:line="32" pos:column="65"> <block pos:line="32" pos:column="66">{
				<expr_stmt><expr><name pos:line="33" pos:column="33">strict<pos:position pos:line="33" pos:column="39"/></name> <operator pos:line="33" pos:column="40">=<pos:position pos:line="33" pos:column="41"/></operator> <literal type="number" pos:line="33" pos:column="42">1<pos:position pos:line="33" pos:column="43"/></literal></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="34" pos:column="33">fsck_set_msg_types<pos:position pos:line="34" pos:column="51"/></name><argument_list pos:line="34" pos:column="51">(<argument><expr><operator pos:line="34" pos:column="52">&amp;<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="53">fsck_options<pos:position pos:line="34" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="67">arg<pos:position pos:line="34" pos:column="70"/></name></expr></argument>)<pos:position pos:line="34" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="72"/></expr_stmt>
				<continue pos:line="35" pos:column="33">continue;<pos:position pos:line="35" pos:column="42"/></continue>
			}<pos:position pos:line="36" pos:column="26"/></block></then></if>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><call><name pos:line="37" pos:column="29">starts_with<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><name pos:line="37" pos:column="41">arg<pos:position pos:line="37" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="46">"--pack_header="<pos:position pos:line="37" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="64"/></condition><then pos:line="37" pos:column="64"> <block pos:line="37" pos:column="65">{
				<decl_stmt><decl><type><name><name pos:line="38" pos:column="33">struct<pos:position pos:line="38" pos:column="39"/></name> <name pos:line="38" pos:column="40">pack_header<pos:position pos:line="38" pos:column="51"/></name></name> <modifier pos:line="38" pos:column="52">*<pos:position pos:line="38" pos:column="53"/></modifier></type><name pos:line="38" pos:column="53">hdr<pos:position pos:line="38" pos:column="56"/></name></decl>;<pos:position pos:line="38" pos:column="57"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="39" pos:column="33">char<pos:position pos:line="39" pos:column="37"/></name> <modifier pos:line="39" pos:column="38">*<pos:position pos:line="39" pos:column="39"/></modifier></type><name pos:line="39" pos:column="39">c<pos:position pos:line="39" pos:column="40"/></name></decl>;<pos:position pos:line="39" pos:column="41"/></decl_stmt>

				<expr_stmt><expr><name pos:line="41" pos:column="33">hdr<pos:position pos:line="41" pos:column="36"/></name> <operator pos:line="41" pos:column="37">=<pos:position pos:line="41" pos:column="38"/></operator> <operator pos:line="41" pos:column="39">(<pos:position pos:line="41" pos:column="40"/></operator>struct <name pos:line="41" pos:column="47">pack_header<pos:position pos:line="41" pos:column="58"/></name> <operator pos:line="41" pos:column="59">*<pos:position pos:line="41" pos:column="60"/></operator><operator pos:line="41" pos:column="60">)<pos:position pos:line="41" pos:column="61"/></operator><name pos:line="41" pos:column="61">buffer<pos:position pos:line="41" pos:column="67"/></name></expr>;<pos:position pos:line="41" pos:column="68"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="42" pos:column="33">hdr<pos:position pos:line="42" pos:column="36"/></name><operator pos:line="42" pos:column="36">-&gt;<pos:position pos:line="42" pos:column="41"/></operator><name pos:line="42" pos:column="38">hdr_signature<pos:position pos:line="42" pos:column="51"/></name></name> <operator pos:line="42" pos:column="52">=<pos:position pos:line="42" pos:column="53"/></operator> <call><name pos:line="42" pos:column="54">htonl<pos:position pos:line="42" pos:column="59"/></name><argument_list pos:line="42" pos:column="59">(<argument><expr><name pos:line="42" pos:column="60">PACK_SIGNATURE<pos:position pos:line="42" pos:column="74"/></name></expr></argument>)<pos:position pos:line="42" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="76"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="43" pos:column="33">hdr<pos:position pos:line="43" pos:column="36"/></name><operator pos:line="43" pos:column="36">-&gt;<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="38">hdr_version<pos:position pos:line="43" pos:column="49"/></name></name> <operator pos:line="43" pos:column="50">=<pos:position pos:line="43" pos:column="51"/></operator> <call><name pos:line="43" pos:column="52">htonl<pos:position pos:line="43" pos:column="57"/></name><argument_list pos:line="43" pos:column="57">(<argument><expr><call><name pos:line="43" pos:column="58">strtoul<pos:position pos:line="43" pos:column="65"/></name><argument_list pos:line="43" pos:column="65">(<argument><expr><name pos:line="43" pos:column="66">arg<pos:position pos:line="43" pos:column="69"/></name> <operator pos:line="43" pos:column="70">+<pos:position pos:line="43" pos:column="71"/></operator> <literal type="number" pos:line="43" pos:column="72">14<pos:position pos:line="43" pos:column="74"/></literal></expr></argument>, <argument><expr><operator pos:line="43" pos:column="76">&amp;<pos:position pos:line="43" pos:column="81"/></operator><name pos:line="43" pos:column="77">c<pos:position pos:line="43" pos:column="78"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="80">10<pos:position pos:line="43" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="85"/></expr_stmt>
				<if pos:line="44" pos:column="33">if <condition pos:line="44" pos:column="36">(<expr><operator pos:line="44" pos:column="37">*<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="38">c<pos:position pos:line="44" pos:column="39"/></name> <operator pos:line="44" pos:column="40">!=<pos:position pos:line="44" pos:column="42"/></operator> <literal type="char" pos:line="44" pos:column="43">','<pos:position pos:line="44" pos:column="46"/></literal></expr>)<pos:position pos:line="44" pos:column="47"/></condition><then pos:line="44" pos:column="47">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="41">die<pos:position pos:line="45" pos:column="44"/></name><argument_list pos:line="45" pos:column="44">(<argument><expr><literal type="string" pos:line="45" pos:column="45">"bad %s"<pos:position pos:line="45" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="55">arg<pos:position pos:line="45" pos:column="58"/></name></expr></argument>)<pos:position pos:line="45" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="60"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name><name pos:line="46" pos:column="33">hdr<pos:position pos:line="46" pos:column="36"/></name><operator pos:line="46" pos:column="36">-&gt;<pos:position pos:line="46" pos:column="41"/></operator><name pos:line="46" pos:column="38">hdr_entries<pos:position pos:line="46" pos:column="49"/></name></name> <operator pos:line="46" pos:column="50">=<pos:position pos:line="46" pos:column="51"/></operator> <call><name pos:line="46" pos:column="52">htonl<pos:position pos:line="46" pos:column="57"/></name><argument_list pos:line="46" pos:column="57">(<argument><expr><call><name pos:line="46" pos:column="58">strtoul<pos:position pos:line="46" pos:column="65"/></name><argument_list pos:line="46" pos:column="65">(<argument><expr><name pos:line="46" pos:column="66">c<pos:position pos:line="46" pos:column="67"/></name> <operator pos:line="46" pos:column="68">+<pos:position pos:line="46" pos:column="69"/></operator> <literal type="number" pos:line="46" pos:column="70">1<pos:position pos:line="46" pos:column="71"/></literal></expr></argument>, <argument><expr><operator pos:line="46" pos:column="73">&amp;<pos:position pos:line="46" pos:column="78"/></operator><name pos:line="46" pos:column="74">c<pos:position pos:line="46" pos:column="75"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="77">10<pos:position pos:line="46" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="82"/></expr_stmt>
				<if pos:line="47" pos:column="33">if <condition pos:line="47" pos:column="36">(<expr><operator pos:line="47" pos:column="37">*<pos:position pos:line="47" pos:column="38"/></operator><name pos:line="47" pos:column="38">c<pos:position pos:line="47" pos:column="39"/></name></expr>)<pos:position pos:line="47" pos:column="40"/></condition><then pos:line="47" pos:column="40">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="41">die<pos:position pos:line="48" pos:column="44"/></name><argument_list pos:line="48" pos:column="44">(<argument><expr><literal type="string" pos:line="48" pos:column="45">"bad %s"<pos:position pos:line="48" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="55">arg<pos:position pos:line="48" pos:column="58"/></name></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="60"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name pos:line="49" pos:column="33">len<pos:position pos:line="49" pos:column="36"/></name> <operator pos:line="49" pos:column="37">=<pos:position pos:line="49" pos:column="38"/></operator> <sizeof pos:line="49" pos:column="39">sizeof<argument_list pos:line="49" pos:column="45">(<argument><expr><operator pos:line="49" pos:column="46">*<pos:position pos:line="49" pos:column="47"/></operator><name pos:line="49" pos:column="47">hdr<pos:position pos:line="49" pos:column="50"/></name></expr></argument>)<pos:position pos:line="49" pos:column="51"/></argument_list></sizeof></expr>;<pos:position pos:line="49" pos:column="52"/></expr_stmt>
				<continue pos:line="50" pos:column="33">continue;<pos:position pos:line="50" pos:column="42"/></continue>
			}<pos:position pos:line="51" pos:column="26"/></block></then></if>
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><call><name pos:line="52" pos:column="29">skip_prefix<pos:position pos:line="52" pos:column="40"/></name><argument_list pos:line="52" pos:column="40">(<argument><expr><name pos:line="52" pos:column="41">arg<pos:position pos:line="52" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="46">"--max-input-size="<pos:position pos:line="52" pos:column="65"/></literal></expr></argument>, <argument><expr><operator pos:line="52" pos:column="67">&amp;<pos:position pos:line="52" pos:column="72"/></operator><name pos:line="52" pos:column="68">arg<pos:position pos:line="52" pos:column="71"/></name></expr></argument>)<pos:position pos:line="52" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="73"/></condition><then pos:line="52" pos:column="73"> <block pos:line="52" pos:column="74">{
				<expr_stmt><expr><name pos:line="53" pos:column="33">max_input_size<pos:position pos:line="53" pos:column="47"/></name> <operator pos:line="53" pos:column="48">=<pos:position pos:line="53" pos:column="49"/></operator> <call><name pos:line="53" pos:column="50">strtoumax<pos:position pos:line="53" pos:column="59"/></name><argument_list pos:line="53" pos:column="59">(<argument><expr><name pos:line="53" pos:column="60">arg<pos:position pos:line="53" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="65">NULL<pos:position pos:line="53" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="71">10<pos:position pos:line="53" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="75"/></expr_stmt>
				<continue pos:line="54" pos:column="33">continue;<pos:position pos:line="54" pos:column="42"/></continue>
			}<pos:position pos:line="55" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">usage<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><name pos:line="56" pos:column="31">unpack_usage<pos:position pos:line="56" pos:column="43"/></name></expr></argument>)<pos:position pos:line="56" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="57" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="59" pos:column="17">/* We don't take any non-flag arguments now.. Maybe some day */</comment>
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">usage<pos:position pos:line="60" pos:column="22"/></name><argument_list pos:line="60" pos:column="22">(<argument><expr><name pos:line="60" pos:column="23">unpack_usage<pos:position pos:line="60" pos:column="35"/></name></expr></argument>)<pos:position pos:line="60" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="61" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">git_SHA1_Init<pos:position pos:line="62" pos:column="22"/></name><argument_list pos:line="62" pos:column="22">(<argument><expr><operator pos:line="62" pos:column="23">&amp;<pos:position pos:line="62" pos:column="28"/></operator><name pos:line="62" pos:column="24">ctx<pos:position pos:line="62" pos:column="27"/></name></expr></argument>)<pos:position pos:line="62" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="63" pos:column="9">unpack_all<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">()<pos:position pos:line="63" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="64" pos:column="9">git_SHA1_Update<pos:position pos:line="64" pos:column="24"/></name><argument_list pos:line="64" pos:column="24">(<argument><expr><operator pos:line="64" pos:column="25">&amp;<pos:position pos:line="64" pos:column="30"/></operator><name pos:line="64" pos:column="26">ctx<pos:position pos:line="64" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="31">buffer<pos:position pos:line="64" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="39">offset<pos:position pos:line="64" pos:column="45"/></name></expr></argument>)<pos:position pos:line="64" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="65" pos:column="9">git_SHA1_Final<pos:position pos:line="65" pos:column="23"/></name><argument_list pos:line="65" pos:column="23">(<argument><expr><name pos:line="65" pos:column="24">sha1<pos:position pos:line="65" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="30">&amp;<pos:position pos:line="65" pos:column="35"/></operator><name pos:line="65" pos:column="31">ctx<pos:position pos:line="65" pos:column="34"/></name></expr></argument>)<pos:position pos:line="65" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="36"/></expr_stmt>
	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name pos:line="66" pos:column="13">strict<pos:position pos:line="66" pos:column="19"/></name></expr>)<pos:position pos:line="66" pos:column="20"/></condition><then pos:line="66" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="17">write_rest<pos:position pos:line="67" pos:column="27"/></name><argument_list pos:line="67" pos:column="27">()<pos:position pos:line="67" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="30"/></expr_stmt></block></then></if>
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><call><name pos:line="68" pos:column="13">hashcmp<pos:position pos:line="68" pos:column="20"/></name><argument_list pos:line="68" pos:column="20">(<argument><expr><call><name pos:line="68" pos:column="21">fill<pos:position pos:line="68" pos:column="25"/></name><argument_list pos:line="68" pos:column="25">(<argument><expr><literal type="number" pos:line="68" pos:column="26">20<pos:position pos:line="68" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="68" pos:column="31">sha1<pos:position pos:line="68" pos:column="35"/></name></expr></argument>)<pos:position pos:line="68" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="37"/></condition><then pos:line="68" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="17">die<pos:position pos:line="69" pos:column="20"/></name><argument_list pos:line="69" pos:column="20">(<argument><expr><literal type="string" pos:line="69" pos:column="21">"final sha1 did not match"<pos:position pos:line="69" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="49"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="70" pos:column="9">use<pos:position pos:line="70" pos:column="12"/></name><argument_list pos:line="70" pos:column="12">(<argument><expr><literal type="number" pos:line="70" pos:column="13">20<pos:position pos:line="70" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="17"/></expr_stmt>

	<comment type="block" pos:line="72" pos:column="9">/* Write the last part of the buffer to stdout */</comment>
	<while pos:line="73" pos:column="9">while <condition pos:line="73" pos:column="15">(<expr><name pos:line="73" pos:column="16">len<pos:position pos:line="73" pos:column="19"/></name></expr>)<pos:position pos:line="73" pos:column="20"/></condition> <block pos:line="73" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="74" pos:column="17">int<pos:position pos:line="74" pos:column="20"/></name></type> <name pos:line="74" pos:column="21">ret<pos:position pos:line="74" pos:column="24"/></name> <init pos:line="74" pos:column="25">= <expr><call><name pos:line="74" pos:column="27">xwrite<pos:position pos:line="74" pos:column="33"/></name><argument_list pos:line="74" pos:column="33">(<argument><expr><literal type="number" pos:line="74" pos:column="34">1<pos:position pos:line="74" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="37">buffer<pos:position pos:line="74" pos:column="43"/></name> <operator pos:line="74" pos:column="44">+<pos:position pos:line="74" pos:column="45"/></operator> <name pos:line="74" pos:column="46">offset<pos:position pos:line="74" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="54">len<pos:position pos:line="74" pos:column="57"/></name></expr></argument>)<pos:position pos:line="74" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="74" pos:column="59"/></decl_stmt>
		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><name pos:line="75" pos:column="21">ret<pos:position pos:line="75" pos:column="24"/></name> <operator pos:line="75" pos:column="25">&lt;=<pos:position pos:line="75" pos:column="30"/></operator> <literal type="number" pos:line="75" pos:column="28">0<pos:position pos:line="75" pos:column="29"/></literal></expr>)<pos:position pos:line="75" pos:column="30"/></condition><then pos:line="75" pos:column="30">
			<block type="pseudo"><break pos:line="76" pos:column="25">break;<pos:position pos:line="76" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="77" pos:column="17">len<pos:position pos:line="77" pos:column="20"/></name> <operator pos:line="77" pos:column="21">-=<pos:position pos:line="77" pos:column="23"/></operator> <name pos:line="77" pos:column="24">ret<pos:position pos:line="77" pos:column="27"/></name></expr>;<pos:position pos:line="77" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="78" pos:column="17">offset<pos:position pos:line="78" pos:column="23"/></name> <operator pos:line="78" pos:column="24">+=<pos:position pos:line="78" pos:column="26"/></operator> <name pos:line="78" pos:column="27">ret<pos:position pos:line="78" pos:column="30"/></name></expr>;<pos:position pos:line="78" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="79" pos:column="10"/></block></while>

	<comment type="block" pos:line="81" pos:column="9">/* All done */</comment>
	<return pos:line="82" pos:column="9">return <expr><name pos:line="82" pos:column="16">has_errors<pos:position pos:line="82" pos:column="26"/></name></expr>;<pos:position pos:line="82" pos:column="27"/></return>
}<pos:position pos:line="83" pos:column="2"/></block></function></unit>
