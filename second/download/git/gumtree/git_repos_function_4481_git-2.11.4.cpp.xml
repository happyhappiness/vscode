<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4481_git-2.11.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <specifier pos:line="1" pos:column="8">inline<pos:position pos:line="1" pos:column="14"/></specifier> <type><name pos:line="1" pos:column="15">long<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">count_masked_bytes<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">unsigned<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">long<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">mask<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><sizeof pos:line="3" pos:column="13">sizeof<argument_list pos:line="3" pos:column="19">(<argument><expr><name pos:line="3" pos:column="20">long<pos:position pos:line="3" pos:column="24"/></name></expr></argument>)<pos:position pos:line="3" pos:column="25"/></argument_list></sizeof> <operator pos:line="3" pos:column="26">==<pos:position pos:line="3" pos:column="28"/></operator> <literal type="number" pos:line="3" pos:column="29">8<pos:position pos:line="3" pos:column="30"/></literal></expr>)<pos:position pos:line="3" pos:column="31"/></condition><then pos:line="3" pos:column="31"> <block pos:line="3" pos:column="32">{
		<comment type="block" pos:line="4" pos:column="17">/*
		 * Jan Achrenius on G+: microoptimized version of
		 * the simpler "(mask &amp; ONEBYTES) * ONEBYTES &gt;&gt; 56"
		 * that works for the bytemasks without having to
		 * mask them first.
		 */</comment>
		<comment type="block" pos:line="10" pos:column="17">/*
		 * return mask * 0x0001020304050608 &gt;&gt; 56;
		 *
		 * Doing it like this avoids warnings on 32-bit machines.
		 */</comment>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">long<pos:position pos:line="15" pos:column="21"/></name></type> <name pos:line="15" pos:column="22">a<pos:position pos:line="15" pos:column="23"/></name> <init pos:line="15" pos:column="24">= <expr><operator pos:line="15" pos:column="26">(<pos:position pos:line="15" pos:column="27"/></operator><call><name pos:line="15" pos:column="27">REPEAT_BYTE<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><literal type="number" pos:line="15" pos:column="39">0x01<pos:position pos:line="15" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call> <operator pos:line="15" pos:column="45">/<pos:position pos:line="15" pos:column="46"/></operator> <literal type="number" pos:line="15" pos:column="47">0xff<pos:position pos:line="15" pos:column="51"/></literal> <operator pos:line="15" pos:column="52">+<pos:position pos:line="15" pos:column="53"/></operator> <literal type="number" pos:line="15" pos:column="54">1<pos:position pos:line="15" pos:column="55"/></literal><operator pos:line="15" pos:column="55">)<pos:position pos:line="15" pos:column="56"/></operator></expr></init></decl>;<pos:position pos:line="15" pos:column="57"/></decl_stmt>
		<return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">mask<pos:position pos:line="16" pos:column="28"/></name> <operator pos:line="16" pos:column="29">*<pos:position pos:line="16" pos:column="30"/></operator> <name pos:line="16" pos:column="31">a<pos:position pos:line="16" pos:column="32"/></name> <operator pos:line="16" pos:column="33">&gt;&gt;<pos:position pos:line="16" pos:column="38"/></operator> <operator pos:line="16" pos:column="36">(<pos:position pos:line="16" pos:column="37"/></operator><sizeof pos:line="16" pos:column="37">sizeof<argument_list pos:line="16" pos:column="43">(<argument><expr><name pos:line="16" pos:column="44">long<pos:position pos:line="16" pos:column="48"/></name></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></sizeof> <operator pos:line="16" pos:column="50">*<pos:position pos:line="16" pos:column="51"/></operator> <literal type="number" pos:line="16" pos:column="52">7<pos:position pos:line="16" pos:column="53"/></literal><operator pos:line="16" pos:column="53">)<pos:position pos:line="16" pos:column="54"/></operator></expr>;<pos:position pos:line="16" pos:column="55"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then> <else pos:line="17" pos:column="11">else <block pos:line="17" pos:column="16">{
		<comment type="block" pos:line="18" pos:column="17">/* Carl Chatfield / Jan Achrenius G+ version for 32-bit */</comment>
		<comment type="block" pos:line="19" pos:column="17">/* (000000 0000ff 00ffff ffffff) -&gt; ( 1 1 2 3 ) */</comment>
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">long<pos:position pos:line="20" pos:column="21"/></name></type> <name pos:line="20" pos:column="22">a<pos:position pos:line="20" pos:column="23"/></name> <init pos:line="20" pos:column="24">= <expr><operator pos:line="20" pos:column="26">(<pos:position pos:line="20" pos:column="27"/></operator><literal type="number" pos:line="20" pos:column="27">0x0ff0001<pos:position pos:line="20" pos:column="36"/></literal> <operator pos:line="20" pos:column="37">+<pos:position pos:line="20" pos:column="38"/></operator> <name pos:line="20" pos:column="39">mask<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">)<pos:position pos:line="20" pos:column="44"/></operator> <operator pos:line="20" pos:column="45">&gt;&gt;<pos:position pos:line="20" pos:column="50"/></operator> <literal type="number" pos:line="20" pos:column="48">23<pos:position pos:line="20" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="51"/></decl_stmt>
		<comment type="block" pos:line="21" pos:column="17">/* Fix the 1 for 00 case */</comment>
		<return pos:line="22" pos:column="17">return <expr><name pos:line="22" pos:column="24">a<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">&amp;<pos:position pos:line="22" pos:column="31"/></operator> <name pos:line="22" pos:column="28">mask<pos:position pos:line="22" pos:column="32"/></name></expr>;<pos:position pos:line="22" pos:column="33"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></else></if>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
