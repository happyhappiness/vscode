<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3059_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">find_same_and_apply_arg<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">list_head<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">head<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
				   <parameter><decl><type><name><name pos:line="2" pos:column="36">struct<pos:position pos:line="2" pos:column="42"/></name> <name pos:line="2" pos:column="43">arg_item<pos:position pos:line="2" pos:column="51"/></name></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">arg_tok<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">list_head<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">pos<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">trailer_item<pos:position pos:line="5" pos:column="28"/></name></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">in_tok<pos:position pos:line="5" pos:column="36"/></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">trailer_item<pos:position pos:line="6" pos:column="28"/></name></name> <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier></type><name pos:line="6" pos:column="30">on_tok<pos:position pos:line="6" pos:column="36"/></name></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">enum<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">action_where<pos:position pos:line="8" pos:column="26"/></name></name></type> <name pos:line="8" pos:column="27">where<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><name><name pos:line="8" pos:column="35">arg_tok<pos:position pos:line="8" pos:column="42"/></name><operator pos:line="8" pos:column="42">-&gt;<pos:position pos:line="8" pos:column="47"/></operator><name pos:line="8" pos:column="44">conf<pos:position pos:line="8" pos:column="48"/></name><operator pos:line="8" pos:column="48">.<pos:position pos:line="8" pos:column="49"/></operator><name pos:line="8" pos:column="49">where<pos:position pos:line="8" pos:column="54"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="55"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">middle<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><operator pos:line="9" pos:column="22">(<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">where<pos:position pos:line="9" pos:column="28"/></name> <operator pos:line="9" pos:column="29">==<pos:position pos:line="9" pos:column="31"/></operator> <name pos:line="9" pos:column="32">WHERE_AFTER<pos:position pos:line="9" pos:column="43"/></name><operator pos:line="9" pos:column="43">)<pos:position pos:line="9" pos:column="44"/></operator> <operator pos:line="9" pos:column="45">||<pos:position pos:line="9" pos:column="47"/></operator> <operator pos:line="9" pos:column="48">(<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="49">where<pos:position pos:line="9" pos:column="54"/></name> <operator pos:line="9" pos:column="55">==<pos:position pos:line="9" pos:column="57"/></operator> <name pos:line="9" pos:column="58">WHERE_BEFORE<pos:position pos:line="9" pos:column="70"/></name><operator pos:line="9" pos:column="70">)<pos:position pos:line="9" pos:column="71"/></operator></expr></init></decl>;<pos:position pos:line="9" pos:column="72"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">backwards<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><call><name pos:line="10" pos:column="25">after_or_end<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><name pos:line="10" pos:column="38">where<pos:position pos:line="10" pos:column="43"/></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">trailer_item<pos:position pos:line="11" pos:column="28"/></name></name> <modifier pos:line="11" pos:column="29">*<pos:position pos:line="11" pos:column="30"/></modifier></type><name pos:line="11" pos:column="30">start_tok<pos:position pos:line="11" pos:column="39"/></name></decl>;<pos:position pos:line="11" pos:column="40"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">list_empty<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">head<pos:position pos:line="13" pos:column="28"/></name></expr></argument>)<pos:position pos:line="13" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="30"/></condition><then pos:line="13" pos:column="30">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>;<pos:position pos:line="14" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">start_tok<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <call><name pos:line="16" pos:column="21">list_entry<pos:position pos:line="16" pos:column="31"/></name><argument_list pos:line="16" pos:column="31">(<argument><expr><ternary><condition><expr><name pos:line="16" pos:column="32">backwards<pos:position pos:line="16" pos:column="41"/></name></expr> ?<pos:position pos:line="16" pos:column="43"/></condition><then pos:line="16" pos:column="43"> <expr><name><name pos:line="16" pos:column="44">head<pos:position pos:line="16" pos:column="48"/></name><operator pos:line="16" pos:column="48">-&gt;<pos:position pos:line="16" pos:column="53"/></operator><name pos:line="16" pos:column="50">prev<pos:position pos:line="16" pos:column="54"/></name></name></expr> <pos:position pos:line="16" pos:column="55"/></then><else pos:line="16" pos:column="55">: <expr><name><name pos:line="16" pos:column="57">head<pos:position pos:line="16" pos:column="61"/></name><operator pos:line="16" pos:column="61">-&gt;<pos:position pos:line="16" pos:column="66"/></operator><name pos:line="16" pos:column="63">next<pos:position pos:line="16" pos:column="67"/></name></name></expr></else></ternary></expr></argument>,
			       <argument><expr pos:line="17" pos:column="32">struct <name pos:line="17" pos:column="39">trailer_item<pos:position pos:line="17" pos:column="51"/></name></expr></argument>,
			       <argument><expr><name pos:line="18" pos:column="32">list<pos:position pos:line="18" pos:column="36"/></name></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="38"/></expr_stmt>

	<macro><name pos:line="20" pos:column="9">list_for_each_dir<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument pos:line="20" pos:column="27">pos<pos:position pos:line="20" pos:column="30"/></argument>, <argument pos:line="20" pos:column="32">head<pos:position pos:line="20" pos:column="36"/></argument>, <argument pos:line="20" pos:column="38">backwards<pos:position pos:line="20" pos:column="47"/></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></macro> <block pos:line="20" pos:column="49">{
		<expr_stmt><expr><name pos:line="21" pos:column="17">in_tok<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">=<pos:position pos:line="21" pos:column="25"/></operator> <call><name pos:line="21" pos:column="26">list_entry<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><name pos:line="21" pos:column="37">pos<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr pos:line="21" pos:column="42">struct <name pos:line="21" pos:column="49">trailer_item<pos:position pos:line="21" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="63">list<pos:position pos:line="21" pos:column="67"/></name></expr></argument>)<pos:position pos:line="21" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="69"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><call><name pos:line="22" pos:column="22">same_token<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">in_tok<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="41">arg_tok<pos:position pos:line="22" pos:column="48"/></name></expr></argument>)<pos:position pos:line="22" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="50"/></condition><then pos:line="22" pos:column="50">
			<block type="pseudo"><continue pos:line="23" pos:column="25">continue;<pos:position pos:line="23" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="24" pos:column="17">on_tok<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <ternary><condition><expr><name pos:line="24" pos:column="26">middle<pos:position pos:line="24" pos:column="32"/></name></expr> ?<pos:position pos:line="24" pos:column="34"/></condition><then pos:line="24" pos:column="34"> <expr><name pos:line="24" pos:column="35">in_tok<pos:position pos:line="24" pos:column="41"/></name></expr> <pos:position pos:line="24" pos:column="42"/></then><else pos:line="24" pos:column="42">: <expr><name pos:line="24" pos:column="44">start_tok<pos:position pos:line="24" pos:column="53"/></name></expr></else></ternary></expr>;<pos:position pos:line="24" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">apply_arg_if_exists<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">in_tok<pos:position pos:line="25" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="45">arg_tok<pos:position pos:line="25" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="54">on_tok<pos:position pos:line="25" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="62">head<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
		<return pos:line="26" pos:column="17">return <expr><literal type="number" pos:line="26" pos:column="24">1<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block>
	<return pos:line="28" pos:column="9">return <expr><literal type="number" pos:line="28" pos:column="16">0<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
