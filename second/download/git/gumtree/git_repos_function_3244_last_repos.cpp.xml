<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3244_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">verify_clean_submodule<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">old_sha1<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
				  <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name><name pos:line="2" pos:column="41">struct<pos:position pos:line="2" pos:column="47"/></name> <name pos:line="2" pos:column="48">cache_entry<pos:position pos:line="2" pos:column="59"/></name></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">ce<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>,
				  <parameter><decl><type><name><name pos:line="3" pos:column="35">enum<pos:position pos:line="3" pos:column="39"/></name> <name pos:line="3" pos:column="40">unpack_trees_error_types<pos:position pos:line="3" pos:column="64"/></name></name></type> <name pos:line="3" pos:column="65">error_type<pos:position pos:line="3" pos:column="75"/></name></decl></parameter>,
				  <parameter><decl><type><name><name pos:line="4" pos:column="35">struct<pos:position pos:line="4" pos:column="41"/></name> <name pos:line="4" pos:column="42">unpack_trees_options<pos:position pos:line="4" pos:column="62"/></name></name> <modifier pos:line="4" pos:column="63">*<pos:position pos:line="4" pos:column="64"/></modifier></type><name pos:line="4" pos:column="64">o<pos:position pos:line="4" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="66"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">submodule_from_ce<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><name pos:line="6" pos:column="32">ce<pos:position pos:line="6" pos:column="34"/></name></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="36"/></condition><then pos:line="6" pos:column="36">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></return></block></then></if>

	<return pos:line="9" pos:column="9">return <expr><call><name pos:line="9" pos:column="16">check_submodule_move_head<pos:position pos:line="9" pos:column="41"/></name><argument_list pos:line="9" pos:column="41">(<argument><expr><name pos:line="9" pos:column="42">ce<pos:position pos:line="9" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="46">old_sha1<pos:position pos:line="9" pos:column="54"/></name></expr></argument>,
					 <argument><expr><call><name pos:line="10" pos:column="42">oid_to_hex<pos:position pos:line="10" pos:column="52"/></name><argument_list pos:line="10" pos:column="52">(<argument><expr><operator pos:line="10" pos:column="53">&amp;<pos:position pos:line="10" pos:column="58"/></operator><name><name pos:line="10" pos:column="54">ce<pos:position pos:line="10" pos:column="56"/></name><operator pos:line="10" pos:column="56">-&gt;<pos:position pos:line="10" pos:column="61"/></operator><name pos:line="10" pos:column="58">oid<pos:position pos:line="10" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="10" pos:column="64">o<pos:position pos:line="10" pos:column="65"/></name></expr></argument>)<pos:position pos:line="10" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="67"/></return>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
