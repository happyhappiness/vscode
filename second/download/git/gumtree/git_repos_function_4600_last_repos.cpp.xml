<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4600_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">copy_gecos<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">passwd<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">w<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">strbuf<pos:position pos:line="1" pos:column="61"/></name></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">name<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">src<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/* Traditionally GECOS field had office phone numbers etc, separated
	 * with commas.  Also &amp; stands for capitalized form of the login name.
	 */</comment>

	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init><expr><name pos:line="9" pos:column="14">src<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <call><name pos:line="9" pos:column="20">get_gecos<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">w<pos:position pos:line="9" pos:column="31"/></name></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="33"/></init> <condition><expr><operator pos:line="9" pos:column="34">*<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="35">src<pos:position pos:line="9" pos:column="38"/></name> <operator pos:line="9" pos:column="39">&amp;&amp;<pos:position pos:line="9" pos:column="49"/></operator> <operator pos:line="9" pos:column="42">*<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="43">src<pos:position pos:line="9" pos:column="46"/></name> <operator pos:line="9" pos:column="47">!=<pos:position pos:line="9" pos:column="49"/></operator> <literal type="char" pos:line="9" pos:column="50">','<pos:position pos:line="9" pos:column="53"/></literal></expr>;<pos:position pos:line="9" pos:column="54"/></condition> <incr><expr><name pos:line="9" pos:column="55">src<pos:position pos:line="9" pos:column="58"/></name><operator pos:line="9" pos:column="58">++<pos:position pos:line="9" pos:column="60"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="61"/></control> <block pos:line="9" pos:column="62">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">ch<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><operator pos:line="10" pos:column="26">*<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="27">src<pos:position pos:line="10" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">ch<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">!=<pos:position pos:line="11" pos:column="26"/></operator> <literal type="char" pos:line="11" pos:column="27">'&amp;'<pos:position pos:line="11" pos:column="34"/></literal></expr>)<pos:position pos:line="11" pos:column="31"/></condition><then pos:line="11" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">strbuf_addch<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">(<argument><expr><name pos:line="12" pos:column="38">name<pos:position pos:line="12" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="44">ch<pos:position pos:line="12" pos:column="46"/></name></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="48"/></expr_stmt></block></then>
		<else pos:line="13" pos:column="17">else <block pos:line="13" pos:column="22">{
			<comment type="block" pos:line="14" pos:column="25">/* Sorry, Mr. McDonald... */</comment>
			<expr_stmt><expr><call><name pos:line="15" pos:column="25">strbuf_addch<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">name<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="44">toupper<pos:position pos:line="15" pos:column="51"/></name><argument_list pos:line="15" pos:column="51">(<argument><expr><operator pos:line="15" pos:column="52">*<pos:position pos:line="15" pos:column="53"/></operator><name><name pos:line="15" pos:column="53">w<pos:position pos:line="15" pos:column="54"/></name><operator pos:line="15" pos:column="54">-&gt;<pos:position pos:line="15" pos:column="59"/></operator><name pos:line="15" pos:column="56">pw_name<pos:position pos:line="15" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">strbuf_addstr<pos:position pos:line="16" pos:column="38"/></name><argument_list pos:line="16" pos:column="38">(<argument><expr><name pos:line="16" pos:column="39">name<pos:position pos:line="16" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="45">w<pos:position pos:line="16" pos:column="46"/></name><operator pos:line="16" pos:column="46">-&gt;<pos:position pos:line="16" pos:column="51"/></operator><name pos:line="16" pos:column="48">pw_name<pos:position pos:line="16" pos:column="55"/></name></name> <operator pos:line="16" pos:column="56">+<pos:position pos:line="16" pos:column="57"/></operator> <literal type="number" pos:line="16" pos:column="58">1<pos:position pos:line="16" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="61"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></else></if>
	}<pos:position pos:line="18" pos:column="10"/></block></for>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
