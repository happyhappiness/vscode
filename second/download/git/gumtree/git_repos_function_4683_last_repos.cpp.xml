<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4683_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">parse_long_magic<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">unsigned<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">magic<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">int<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">prefix_len<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
				    <parameter><decl><type><name><name pos:line="2" pos:column="37">struct<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">pathspec_item<pos:position pos:line="2" pos:column="57"/></name></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">item<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>,
				    <parameter><decl><type><specifier pos:line="3" pos:column="37">const<pos:position pos:line="3" pos:column="42"/></specifier> <name pos:line="3" pos:column="43">char<pos:position pos:line="3" pos:column="47"/></name> <modifier pos:line="3" pos:column="48">*<pos:position pos:line="3" pos:column="49"/></modifier></type><name pos:line="3" pos:column="49">elem<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="54"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">pos<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">nextat<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>

	<for pos:line="8" pos:column="9">for <control pos:line="8" pos:column="13">(<init><expr><name pos:line="8" pos:column="14">pos<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator> <name pos:line="8" pos:column="20">elem<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">+<pos:position pos:line="8" pos:column="26"/></operator> <literal type="number" pos:line="8" pos:column="27">2<pos:position pos:line="8" pos:column="28"/></literal></expr>;<pos:position pos:line="8" pos:column="29"/></init> <condition><expr><operator pos:line="8" pos:column="30">*<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="31">pos<pos:position pos:line="8" pos:column="34"/></name> <operator pos:line="8" pos:column="35">&amp;&amp;<pos:position pos:line="8" pos:column="45"/></operator> <operator pos:line="8" pos:column="38">*<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="39">pos<pos:position pos:line="8" pos:column="42"/></name> <operator pos:line="8" pos:column="43">!=<pos:position pos:line="8" pos:column="45"/></operator> <literal type="char" pos:line="8" pos:column="46">')'<pos:position pos:line="8" pos:column="49"/></literal></expr>;<pos:position pos:line="8" pos:column="50"/></condition> <incr><expr><name pos:line="8" pos:column="51">pos<pos:position pos:line="8" pos:column="54"/></name> <operator pos:line="8" pos:column="55">=<pos:position pos:line="8" pos:column="56"/></operator> <name pos:line="8" pos:column="57">nextat<pos:position pos:line="8" pos:column="63"/></name></expr></incr>)<pos:position pos:line="8" pos:column="64"/></control> <block pos:line="8" pos:column="65">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">size_t<pos:position pos:line="9" pos:column="23"/></name></type> <name pos:line="9" pos:column="24">len<pos:position pos:line="9" pos:column="27"/></name> <init pos:line="9" pos:column="28">= <expr><call><name pos:line="9" pos:column="30">strcspn_escaped<pos:position pos:line="9" pos:column="45"/></name><argument_list pos:line="9" pos:column="45">(<argument><expr><name pos:line="9" pos:column="46">pos<pos:position pos:line="9" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="51">",)"<pos:position pos:line="9" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="57"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">i<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>

		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name><name pos:line="12" pos:column="21">pos<pos:position pos:line="12" pos:column="24"/></name><index pos:line="12" pos:column="24">[<expr><name pos:line="12" pos:column="25">len<pos:position pos:line="12" pos:column="28"/></name></expr>]<pos:position pos:line="12" pos:column="29"/></index></name> <operator pos:line="12" pos:column="30">==<pos:position pos:line="12" pos:column="32"/></operator> <literal type="char" pos:line="12" pos:column="33">','<pos:position pos:line="12" pos:column="36"/></literal></expr>)<pos:position pos:line="12" pos:column="37"/></condition><then pos:line="12" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="25">nextat<pos:position pos:line="13" pos:column="31"/></name> <operator pos:line="13" pos:column="32">=<pos:position pos:line="13" pos:column="33"/></operator> <name pos:line="13" pos:column="34">pos<pos:position pos:line="13" pos:column="37"/></name> <operator pos:line="13" pos:column="38">+<pos:position pos:line="13" pos:column="39"/></operator> <name pos:line="13" pos:column="40">len<pos:position pos:line="13" pos:column="43"/></name> <operator pos:line="13" pos:column="44">+<pos:position pos:line="13" pos:column="45"/></operator> <literal type="number" pos:line="13" pos:column="46">1<pos:position pos:line="13" pos:column="47"/></literal></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt></block></then> <comment type="block" pos:line="13" pos:column="49">/* handle ',' */</comment>
		<else pos:line="14" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="25">nextat<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">=<pos:position pos:line="15" pos:column="33"/></operator> <name pos:line="15" pos:column="34">pos<pos:position pos:line="15" pos:column="37"/></name> <operator pos:line="15" pos:column="38">+<pos:position pos:line="15" pos:column="39"/></operator> <name pos:line="15" pos:column="40">len<pos:position pos:line="15" pos:column="43"/></name></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt></block></else></if> <comment type="block" pos:line="15" pos:column="45">/* handle ')' and '\0' */</comment>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">len<pos:position pos:line="17" pos:column="25"/></name></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26">
			<block type="pseudo"><continue pos:line="18" pos:column="25">continue;<pos:position pos:line="18" pos:column="34"/></continue></block></then></if>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name pos:line="20" pos:column="21">starts_with<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">pos<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="38">"prefix:"<pos:position pos:line="20" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="49"/></condition><then pos:line="20" pos:column="49"> <block pos:line="20" pos:column="50">{
			<decl_stmt><decl><type><name pos:line="21" pos:column="25">char<pos:position pos:line="21" pos:column="29"/></name> <modifier pos:line="21" pos:column="30">*<pos:position pos:line="21" pos:column="31"/></modifier></type><name pos:line="21" pos:column="31">endptr<pos:position pos:line="21" pos:column="37"/></name></decl>;<pos:position pos:line="21" pos:column="38"/></decl_stmt>
			<expr_stmt><expr><operator pos:line="22" pos:column="25">*<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">prefix_len<pos:position pos:line="22" pos:column="36"/></name> <operator pos:line="22" pos:column="37">=<pos:position pos:line="22" pos:column="38"/></operator> <call><name pos:line="22" pos:column="39">strtol<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><name pos:line="22" pos:column="46">pos<pos:position pos:line="22" pos:column="49"/></name> <operator pos:line="22" pos:column="50">+<pos:position pos:line="22" pos:column="51"/></operator> <literal type="number" pos:line="22" pos:column="52">7<pos:position pos:line="22" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="55">&amp;<pos:position pos:line="22" pos:column="60"/></operator><name pos:line="22" pos:column="56">endptr<pos:position pos:line="22" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="64">10<pos:position pos:line="22" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="68"/></expr_stmt>
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><name pos:line="23" pos:column="29">endptr<pos:position pos:line="23" pos:column="35"/></name> <operator pos:line="23" pos:column="36">-<pos:position pos:line="23" pos:column="37"/></operator> <name pos:line="23" pos:column="38">pos<pos:position pos:line="23" pos:column="41"/></name> <operator pos:line="23" pos:column="42">!=<pos:position pos:line="23" pos:column="44"/></operator> <name pos:line="23" pos:column="45">len<pos:position pos:line="23" pos:column="48"/></name></expr>)<pos:position pos:line="23" pos:column="49"/></condition><then pos:line="23" pos:column="49">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="33">die<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">(<argument><expr><call><name pos:line="24" pos:column="37">_<pos:position pos:line="24" pos:column="38"/></name><argument_list pos:line="24" pos:column="38">(<argument><expr><literal type="string" pos:line="24" pos:column="39">"invalid parameter for pathspec magic 'prefix'"<pos:position pos:line="24" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="89"/></expr_stmt></block></then></if>
			<continue pos:line="25" pos:column="25">continue;<pos:position pos:line="25" pos:column="34"/></continue>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>

		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><call><name pos:line="28" pos:column="21">starts_with<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><name pos:line="28" pos:column="33">pos<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="38">"attr:"<pos:position pos:line="28" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="47"/></condition><then pos:line="28" pos:column="47"> <block pos:line="28" pos:column="48">{
			<decl_stmt><decl><type><name pos:line="29" pos:column="25">char<pos:position pos:line="29" pos:column="29"/></name> <modifier pos:line="29" pos:column="30">*<pos:position pos:line="29" pos:column="31"/></modifier></type><name pos:line="29" pos:column="31">attr_body<pos:position pos:line="29" pos:column="40"/></name> <init pos:line="29" pos:column="41">= <expr><call><name pos:line="29" pos:column="43">xmemdupz<pos:position pos:line="29" pos:column="51"/></name><argument_list pos:line="29" pos:column="51">(<argument><expr><name pos:line="29" pos:column="52">pos<pos:position pos:line="29" pos:column="55"/></name> <operator pos:line="29" pos:column="56">+<pos:position pos:line="29" pos:column="57"/></operator> <literal type="number" pos:line="29" pos:column="58">5<pos:position pos:line="29" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="61">len<pos:position pos:line="29" pos:column="64"/></name> <operator pos:line="29" pos:column="65">-<pos:position pos:line="29" pos:column="66"/></operator> <literal type="number" pos:line="29" pos:column="67">5<pos:position pos:line="29" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="70"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">parse_pathspec_attr_match<pos:position pos:line="30" pos:column="50"/></name><argument_list pos:line="30" pos:column="50">(<argument><expr><name pos:line="30" pos:column="51">item<pos:position pos:line="30" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="57">attr_body<pos:position pos:line="30" pos:column="66"/></name></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="31" pos:column="25">*<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="26">magic<pos:position pos:line="31" pos:column="31"/></name> <operator pos:line="31" pos:column="32">|=<pos:position pos:line="31" pos:column="34"/></operator> <name pos:line="31" pos:column="35">PATHSPEC_ATTR<pos:position pos:line="31" pos:column="48"/></name></expr>;<pos:position pos:line="31" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">free<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">attr_body<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
			<continue pos:line="33" pos:column="25">continue;<pos:position pos:line="33" pos:column="34"/></continue>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>

		<for pos:line="36" pos:column="17">for <control pos:line="36" pos:column="21">(<init><expr><name pos:line="36" pos:column="22">i<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">=<pos:position pos:line="36" pos:column="25"/></operator> <literal type="number" pos:line="36" pos:column="26">0<pos:position pos:line="36" pos:column="27"/></literal></expr>;<pos:position pos:line="36" pos:column="28"/></init> <condition><expr><name pos:line="36" pos:column="29">i<pos:position pos:line="36" pos:column="30"/></name> <operator pos:line="36" pos:column="31">&lt;<pos:position pos:line="36" pos:column="35"/></operator> <call><name pos:line="36" pos:column="33">ARRAY_SIZE<pos:position pos:line="36" pos:column="43"/></name><argument_list pos:line="36" pos:column="43">(<argument><expr><name pos:line="36" pos:column="44">pathspec_magic<pos:position pos:line="36" pos:column="58"/></name></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="60"/></condition> <incr><expr><name pos:line="36" pos:column="61">i<pos:position pos:line="36" pos:column="62"/></name><operator pos:line="36" pos:column="62">++<pos:position pos:line="36" pos:column="64"/></operator></expr></incr>)<pos:position pos:line="36" pos:column="65"/></control> <block pos:line="36" pos:column="66">{
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><call><name pos:line="37" pos:column="29">strlen<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><name><name pos:line="37" pos:column="36">pathspec_magic<pos:position pos:line="37" pos:column="50"/></name><index pos:line="37" pos:column="50">[<expr><name pos:line="37" pos:column="51">i<pos:position pos:line="37" pos:column="52"/></name></expr>]<pos:position pos:line="37" pos:column="53"/></index></name><operator pos:line="37" pos:column="53">.<pos:position pos:line="37" pos:column="54"/></operator><name pos:line="37" pos:column="54">name<pos:position pos:line="37" pos:column="58"/></name></expr></argument>)<pos:position pos:line="37" pos:column="59"/></argument_list></call> <operator pos:line="37" pos:column="60">==<pos:position pos:line="37" pos:column="62"/></operator> <name pos:line="37" pos:column="63">len<pos:position pos:line="37" pos:column="66"/></name> <operator pos:line="37" pos:column="67">&amp;&amp;<pos:position pos:line="37" pos:column="77"/></operator>
			    <operator pos:line="38" pos:column="29">!<pos:position pos:line="38" pos:column="30"/></operator><call><name pos:line="38" pos:column="30">strncmp<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">(<argument><expr><name><name pos:line="38" pos:column="38">pathspec_magic<pos:position pos:line="38" pos:column="52"/></name><index pos:line="38" pos:column="52">[<expr><name pos:line="38" pos:column="53">i<pos:position pos:line="38" pos:column="54"/></name></expr>]<pos:position pos:line="38" pos:column="55"/></index></name><operator pos:line="38" pos:column="55">.<pos:position pos:line="38" pos:column="56"/></operator><name pos:line="38" pos:column="56">name<pos:position pos:line="38" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="62">pos<pos:position pos:line="38" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="67">len<pos:position pos:line="38" pos:column="70"/></name></expr></argument>)<pos:position pos:line="38" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="72"/></condition><then pos:line="38" pos:column="72"> <block pos:line="38" pos:column="73">{
				<expr_stmt><expr><operator pos:line="39" pos:column="33">*<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="34">magic<pos:position pos:line="39" pos:column="39"/></name> <operator pos:line="39" pos:column="40">|=<pos:position pos:line="39" pos:column="42"/></operator> <name><name pos:line="39" pos:column="43">pathspec_magic<pos:position pos:line="39" pos:column="57"/></name><index pos:line="39" pos:column="57">[<expr><name pos:line="39" pos:column="58">i<pos:position pos:line="39" pos:column="59"/></name></expr>]<pos:position pos:line="39" pos:column="60"/></index></name><operator pos:line="39" pos:column="60">.<pos:position pos:line="39" pos:column="61"/></operator><name pos:line="39" pos:column="61">bit<pos:position pos:line="39" pos:column="64"/></name></expr>;<pos:position pos:line="39" pos:column="65"/></expr_stmt>
				<break pos:line="40" pos:column="33">break;<pos:position pos:line="40" pos:column="39"/></break>
			}<pos:position pos:line="41" pos:column="26"/></block></then></if>
		}<pos:position pos:line="42" pos:column="18"/></block></for>

		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><call><name pos:line="44" pos:column="21">ARRAY_SIZE<pos:position pos:line="44" pos:column="31"/></name><argument_list pos:line="44" pos:column="31">(<argument><expr><name pos:line="44" pos:column="32">pathspec_magic<pos:position pos:line="44" pos:column="46"/></name></expr></argument>)<pos:position pos:line="44" pos:column="47"/></argument_list></call> <operator pos:line="44" pos:column="48">&lt;=<pos:position pos:line="44" pos:column="53"/></operator> <name pos:line="44" pos:column="51">i<pos:position pos:line="44" pos:column="52"/></name></expr>)<pos:position pos:line="44" pos:column="53"/></condition><then pos:line="44" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="25">die<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><call><name pos:line="45" pos:column="29">_<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><literal type="string" pos:line="45" pos:column="31">"Invalid pathspec magic '%.*s' in '%s'"<pos:position pos:line="45" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="71"/></argument_list></call></expr></argument>,
			    <argument><expr><operator pos:line="46" pos:column="29">(<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="30">int<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">)<pos:position pos:line="46" pos:column="34"/></operator> <name pos:line="46" pos:column="35">len<pos:position pos:line="46" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="40">pos<pos:position pos:line="46" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="45">elem<pos:position pos:line="46" pos:column="49"/></name></expr></argument>)<pos:position pos:line="46" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="51"/></expr_stmt></block></then></if>
	}<pos:position pos:line="47" pos:column="10"/></block></for>

	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><operator pos:line="49" pos:column="13">*<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="14">pos<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">!=<pos:position pos:line="49" pos:column="20"/></operator> <literal type="char" pos:line="49" pos:column="21">')'<pos:position pos:line="49" pos:column="24"/></literal></expr>)<pos:position pos:line="49" pos:column="25"/></condition><then pos:line="49" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="17">die<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><call><name pos:line="50" pos:column="21">_<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">(<argument><expr><literal type="string" pos:line="50" pos:column="23">"Missing ')' at the end of pathspec magic in '%s'"<pos:position pos:line="50" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="74"/></argument_list></call></expr></argument>,
		    <argument><expr><name pos:line="51" pos:column="21">elem<pos:position pos:line="51" pos:column="25"/></name></expr></argument>)<pos:position pos:line="51" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="27"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="52" pos:column="9">pos<pos:position pos:line="52" pos:column="12"/></name><operator pos:line="52" pos:column="12">++<pos:position pos:line="52" pos:column="14"/></operator></expr>;<pos:position pos:line="52" pos:column="15"/></expr_stmt>

	<return pos:line="54" pos:column="9">return <expr><name pos:line="54" pos:column="16">pos<pos:position pos:line="54" pos:column="19"/></name></expr>;<pos:position pos:line="54" pos:column="20"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
