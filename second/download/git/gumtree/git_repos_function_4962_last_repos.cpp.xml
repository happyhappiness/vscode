<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4962_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">SHA1DCUpdate<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">SHA1_CTX<pos:position pos:line="1" pos:column="27"/></name><modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type> <name pos:line="1" pos:column="29">ctx<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type> <name pos:line="1" pos:column="46">buf<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">size_t<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">len<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">left<pos:position pos:line="3" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="24">fill<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">==<pos:position pos:line="5" pos:column="19"/></operator> <literal type="number" pos:line="5" pos:column="20">0<pos:position pos:line="5" pos:column="21"/></literal></expr>)<pos:position pos:line="5" pos:column="22"/></condition><then pos:line="5" pos:column="22">
		<block type="pseudo"><return pos:line="6" pos:column="17">return;<pos:position pos:line="6" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="8" pos:column="9">left<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <name><name pos:line="8" pos:column="16">ctx<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">-&gt;<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="21">total<pos:position pos:line="8" pos:column="26"/></name></name> <operator pos:line="8" pos:column="27">&amp;<pos:position pos:line="8" pos:column="32"/></operator> <literal type="number" pos:line="8" pos:column="29">63<pos:position pos:line="8" pos:column="31"/></literal></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name pos:line="9" pos:column="9">fill<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <literal type="number" pos:line="9" pos:column="16">64<pos:position pos:line="9" pos:column="18"/></literal> <operator pos:line="9" pos:column="19">-<pos:position pos:line="9" pos:column="20"/></operator> <name pos:line="9" pos:column="21">left<pos:position pos:line="9" pos:column="25"/></name></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">left<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">&amp;&amp;<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="21">len<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">&gt;=<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="28">fill<pos:position pos:line="11" pos:column="32"/></name></expr>)<pos:position pos:line="11" pos:column="33"/></condition><then pos:line="11" pos:column="33">
	<block pos:line="12" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="13" pos:column="17">ctx<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">-&gt;<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="22">total<pos:position pos:line="13" pos:column="27"/></name></name> <operator pos:line="13" pos:column="28">+=<pos:position pos:line="13" pos:column="30"/></operator> <name pos:line="13" pos:column="31">fill<pos:position pos:line="13" pos:column="35"/></name></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">memcpy<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name><name pos:line="14" pos:column="24">ctx<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">-&gt;<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="29">buffer<pos:position pos:line="14" pos:column="35"/></name></name> <operator pos:line="14" pos:column="36">+<pos:position pos:line="14" pos:column="37"/></operator> <name pos:line="14" pos:column="38">left<pos:position pos:line="14" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="44">buf<pos:position pos:line="14" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="49">fill<pos:position pos:line="14" pos:column="53"/></name></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">sha1_process<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">ctx<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="35">(<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="36">uint32_t<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">*<pos:position pos:line="15" pos:column="45"/></operator><operator pos:line="15" pos:column="45">)<pos:position pos:line="15" pos:column="46"/></operator><operator pos:line="15" pos:column="46">(<pos:position pos:line="15" pos:column="47"/></operator><name><name pos:line="15" pos:column="47">ctx<pos:position pos:line="15" pos:column="50"/></name><operator pos:line="15" pos:column="50">-&gt;<pos:position pos:line="15" pos:column="55"/></operator><name pos:line="15" pos:column="52">buffer<pos:position pos:line="15" pos:column="58"/></name></name><operator pos:line="15" pos:column="58">)<pos:position pos:line="15" pos:column="59"/></operator></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">buf<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">+=<pos:position pos:line="16" pos:column="23"/></operator> <name pos:line="16" pos:column="24">fill<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="17" pos:column="17">len<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">-=<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="24">fill<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="18" pos:column="17">left<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <literal type="number" pos:line="18" pos:column="24">0<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	<while pos:line="20" pos:column="9">while <condition pos:line="20" pos:column="15">(<expr><name pos:line="20" pos:column="16">len<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">&gt;=<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="23">64<pos:position pos:line="20" pos:column="25"/></literal></expr>)<pos:position pos:line="20" pos:column="26"/></condition>
	<block pos:line="21" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">ctx<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">-&gt;<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="22">total<pos:position pos:line="22" pos:column="27"/></name></name> <operator pos:line="22" pos:column="28">+=<pos:position pos:line="22" pos:column="30"/></operator> <literal type="number" pos:line="22" pos:column="31">64<pos:position pos:line="22" pos:column="33"/></literal></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>

<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><call><name pos:line="24" pos:column="5">defined<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">SHA1DC_ALLOW_UNALIGNED_ACCESS<pos:position pos:line="24" pos:column="42"/></name></expr></argument>)<pos:position pos:line="24" pos:column="43"/></argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">sha1_process<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">ctx<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="35">(<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="36">uint32_t<pos:position pos:line="25" pos:column="44"/></name><operator pos:line="25" pos:column="44">*<pos:position pos:line="25" pos:column="45"/></operator><operator pos:line="25" pos:column="45">)<pos:position pos:line="25" pos:column="46"/></operator><operator pos:line="25" pos:column="46">(<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="47">buf<pos:position pos:line="25" pos:column="50"/></name><operator pos:line="25" pos:column="50">)<pos:position pos:line="25" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="53"/></expr_stmt>
<cpp:else pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">else<pos:position pos:line="26" pos:column="6"/></cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">memcpy<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name><name pos:line="27" pos:column="24">ctx<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">-&gt;<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="29">buffer<pos:position pos:line="27" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">buf<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="42">64<pos:position pos:line="27" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">sha1_process<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">ctx<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="35">(<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="36">uint32_t<pos:position pos:line="28" pos:column="44"/></name><operator pos:line="28" pos:column="44">*<pos:position pos:line="28" pos:column="45"/></operator><operator pos:line="28" pos:column="45">)<pos:position pos:line="28" pos:column="46"/></operator><operator pos:line="28" pos:column="46">(<pos:position pos:line="28" pos:column="47"/></operator><name><name pos:line="28" pos:column="47">ctx<pos:position pos:line="28" pos:column="50"/></name><operator pos:line="28" pos:column="50">-&gt;<pos:position pos:line="28" pos:column="55"/></operator><name pos:line="28" pos:column="52">buffer<pos:position pos:line="28" pos:column="58"/></name></name><operator pos:line="28" pos:column="58">)<pos:position pos:line="28" pos:column="59"/></operator></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="61"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="29" pos:column="8">/* defined(SHA1DC_ALLOW_UNALIGNED_ACCESS) */</comment>
		<expr_stmt><expr><name pos:line="30" pos:column="17">buf<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">+=<pos:position pos:line="30" pos:column="23"/></operator> <literal type="number" pos:line="30" pos:column="24">64<pos:position pos:line="30" pos:column="26"/></literal></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="31" pos:column="17">len<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">-=<pos:position pos:line="31" pos:column="23"/></operator> <literal type="number" pos:line="31" pos:column="24">64<pos:position pos:line="31" pos:column="26"/></literal></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></while>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">len<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">&gt;<pos:position pos:line="33" pos:column="21"/></operator> <literal type="number" pos:line="33" pos:column="19">0<pos:position pos:line="33" pos:column="20"/></literal></expr>)<pos:position pos:line="33" pos:column="21"/></condition><then pos:line="33" pos:column="21">
	<block pos:line="34" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="35" pos:column="17">ctx<pos:position pos:line="35" pos:column="20"/></name><operator pos:line="35" pos:column="20">-&gt;<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="22">total<pos:position pos:line="35" pos:column="27"/></name></name> <operator pos:line="35" pos:column="28">+=<pos:position pos:line="35" pos:column="30"/></operator> <name pos:line="35" pos:column="31">len<pos:position pos:line="35" pos:column="34"/></name></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">memcpy<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><name><name pos:line="36" pos:column="24">ctx<pos:position pos:line="36" pos:column="27"/></name><operator pos:line="36" pos:column="27">-&gt;<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="29">buffer<pos:position pos:line="36" pos:column="35"/></name></name> <operator pos:line="36" pos:column="36">+<pos:position pos:line="36" pos:column="37"/></operator> <name pos:line="36" pos:column="38">left<pos:position pos:line="36" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="44">buf<pos:position pos:line="36" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">len<pos:position pos:line="36" pos:column="52"/></name></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
