<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3124_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">parse_fetch<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">strbuf<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">buf<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">ref<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier><modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">to_fetch<pos:position pos:line="3" pos:column="30"/></name> <init pos:line="3" pos:column="31">= <expr><name pos:line="3" pos:column="33">NULL<pos:position pos:line="3" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ref<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">list_head<pos:position pos:line="4" pos:column="30"/></name> <init pos:line="4" pos:column="31">= <expr><name pos:line="4" pos:column="33">NULL<pos:position pos:line="4" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">ref<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier><modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">list<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><operator pos:line="5" pos:column="29">&amp;<pos:position pos:line="5" pos:column="34"/></operator><name pos:line="5" pos:column="30">list_head<pos:position pos:line="5" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">alloc_heads<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><literal type="number" pos:line="6" pos:column="27">0<pos:position pos:line="6" pos:column="28"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="30">nr_heads<pos:position pos:line="6" pos:column="38"/></name> <init pos:line="6" pos:column="39">= <expr><literal type="number" pos:line="6" pos:column="41">0<pos:position pos:line="6" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>

	<do pos:line="8" pos:column="9">do <block pos:line="8" pos:column="12">{
		<decl_stmt><decl><type><specifier pos:line="9" pos:column="17">const<pos:position pos:line="9" pos:column="22"/></specifier> <name pos:line="9" pos:column="23">char<pos:position pos:line="9" pos:column="27"/></name> <modifier pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></modifier></type><name pos:line="9" pos:column="29">p<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">skip_prefix<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name><name pos:line="10" pos:column="33">buf<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">-&gt;<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="38">buf<pos:position pos:line="10" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="43">"fetch "<pos:position pos:line="10" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="10" pos:column="53">&amp;<pos:position pos:line="10" pos:column="58"/></operator><name pos:line="10" pos:column="54">p<pos:position pos:line="10" pos:column="55"/></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="57"/></condition><then pos:line="10" pos:column="57"> <block pos:line="10" pos:column="58">{
			<decl_stmt><decl><type><specifier pos:line="11" pos:column="25">const<pos:position pos:line="11" pos:column="30"/></specifier> <name pos:line="11" pos:column="31">char<pos:position pos:line="11" pos:column="35"/></name> <modifier pos:line="11" pos:column="36">*<pos:position pos:line="11" pos:column="37"/></modifier></type><name pos:line="11" pos:column="37">name<pos:position pos:line="11" pos:column="41"/></name></decl>;<pos:position pos:line="11" pos:column="42"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="12" pos:column="25">struct<pos:position pos:line="12" pos:column="31"/></name> <name pos:line="12" pos:column="32">ref<pos:position pos:line="12" pos:column="35"/></name></name> <modifier pos:line="12" pos:column="36">*<pos:position pos:line="12" pos:column="37"/></modifier></type><name pos:line="12" pos:column="37">ref<pos:position pos:line="12" pos:column="40"/></name></decl>;<pos:position pos:line="12" pos:column="41"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="13" pos:column="25">struct<pos:position pos:line="13" pos:column="31"/></name> <name pos:line="13" pos:column="32">object_id<pos:position pos:line="13" pos:column="41"/></name></name></type> <name pos:line="13" pos:column="42">old_oid<pos:position pos:line="13" pos:column="49"/></name></decl>;<pos:position pos:line="13" pos:column="50"/></decl_stmt>

			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><call><name pos:line="15" pos:column="29">get_oid_hex<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><name pos:line="15" pos:column="41">p<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="44">&amp;<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="45">old_oid<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="54"/></condition><then pos:line="15" pos:column="54">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="33">die<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><literal type="string" pos:line="16" pos:column="37">"protocol error: expected sha/ref, got %s'"<pos:position pos:line="16" pos:column="80"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="82">p<pos:position pos:line="16" pos:column="83"/></name></expr></argument>)<pos:position pos:line="16" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="85"/></expr_stmt></block></then></if>
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><name><name pos:line="17" pos:column="29">p<pos:position pos:line="17" pos:column="30"/></name><index pos:line="17" pos:column="30">[<expr><name pos:line="17" pos:column="31">GIT_SHA1_HEXSZ<pos:position pos:line="17" pos:column="45"/></name></expr>]<pos:position pos:line="17" pos:column="46"/></index></name> <operator pos:line="17" pos:column="47">==<pos:position pos:line="17" pos:column="49"/></operator> <literal type="char" pos:line="17" pos:column="50">' '<pos:position pos:line="17" pos:column="53"/></literal></expr>)<pos:position pos:line="17" pos:column="54"/></condition><then pos:line="17" pos:column="54">
				<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="33">name<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">=<pos:position pos:line="18" pos:column="39"/></operator> <name pos:line="18" pos:column="40">p<pos:position pos:line="18" pos:column="41"/></name> <operator pos:line="18" pos:column="42">+<pos:position pos:line="18" pos:column="43"/></operator> <name pos:line="18" pos:column="44">GIT_SHA1_HEXSZ<pos:position pos:line="18" pos:column="58"/></name> <operator pos:line="18" pos:column="59">+<pos:position pos:line="18" pos:column="60"/></operator> <literal type="number" pos:line="18" pos:column="61">1<pos:position pos:line="18" pos:column="62"/></literal></expr>;<pos:position pos:line="18" pos:column="63"/></expr_stmt></block></then>
			<elseif pos:line="19" pos:column="25">else <if pos:line="19" pos:column="30">if <condition pos:line="19" pos:column="33">(<expr><operator pos:line="19" pos:column="34">!<pos:position pos:line="19" pos:column="35"/></operator><name><name pos:line="19" pos:column="35">p<pos:position pos:line="19" pos:column="36"/></name><index pos:line="19" pos:column="36">[<expr><name pos:line="19" pos:column="37">GIT_SHA1_HEXSZ<pos:position pos:line="19" pos:column="51"/></name></expr>]<pos:position pos:line="19" pos:column="52"/></index></name></expr>)<pos:position pos:line="19" pos:column="53"/></condition><then pos:line="19" pos:column="53">
				<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="33">name<pos:position pos:line="20" pos:column="37"/></name> <operator pos:line="20" pos:column="38">=<pos:position pos:line="20" pos:column="39"/></operator> <literal type="string" pos:line="20" pos:column="40">""<pos:position pos:line="20" pos:column="42"/></literal></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt></block></then></if></elseif>
			<else pos:line="21" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="33">die<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><literal type="string" pos:line="22" pos:column="37">"protocol error: expected sha/ref, got %s'"<pos:position pos:line="22" pos:column="80"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="82">p<pos:position pos:line="22" pos:column="83"/></name></expr></argument>)<pos:position pos:line="22" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="85"/></expr_stmt></block></else></if>

			<expr_stmt><expr><name pos:line="24" pos:column="25">ref<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <call><name pos:line="24" pos:column="31">alloc_ref<pos:position pos:line="24" pos:column="40"/></name><argument_list pos:line="24" pos:column="40">(<argument><expr><name pos:line="24" pos:column="41">name<pos:position pos:line="24" pos:column="45"/></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">oidcpy<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><operator pos:line="25" pos:column="32">&amp;<pos:position pos:line="25" pos:column="37"/></operator><name><name pos:line="25" pos:column="33">ref<pos:position pos:line="25" pos:column="36"/></name><operator pos:line="25" pos:column="36">-&gt;<pos:position pos:line="25" pos:column="41"/></operator><name pos:line="25" pos:column="38">old_oid<pos:position pos:line="25" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="47">&amp;<pos:position pos:line="25" pos:column="52"/></operator><name pos:line="25" pos:column="48">old_oid<pos:position pos:line="25" pos:column="55"/></name></expr></argument>)<pos:position pos:line="25" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="57"/></expr_stmt>

			<expr_stmt><expr><operator pos:line="27" pos:column="25">*<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="26">list<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">=<pos:position pos:line="27" pos:column="32"/></operator> <name pos:line="27" pos:column="33">ref<pos:position pos:line="27" pos:column="36"/></name></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><name pos:line="28" pos:column="25">list<pos:position pos:line="28" pos:column="29"/></name> <operator pos:line="28" pos:column="30">=<pos:position pos:line="28" pos:column="31"/></operator> <operator pos:line="28" pos:column="32">&amp;<pos:position pos:line="28" pos:column="37"/></operator><name><name pos:line="28" pos:column="33">ref<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">-&gt;<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="38">next<pos:position pos:line="28" pos:column="42"/></name></name></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="30" pos:column="25">ALLOC_GROW<pos:position pos:line="30" pos:column="35"/></name><argument_list pos:line="30" pos:column="35">(<argument><expr><name pos:line="30" pos:column="36">to_fetch<pos:position pos:line="30" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="46">nr_heads<pos:position pos:line="30" pos:column="54"/></name> <operator pos:line="30" pos:column="55">+<pos:position pos:line="30" pos:column="56"/></operator> <literal type="number" pos:line="30" pos:column="57">1<pos:position pos:line="30" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="60">alloc_heads<pos:position pos:line="30" pos:column="71"/></name></expr></argument>)<pos:position pos:line="30" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="73"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="31" pos:column="25">to_fetch<pos:position pos:line="31" pos:column="33"/></name><index pos:line="31" pos:column="33">[<expr><name pos:line="31" pos:column="34">nr_heads<pos:position pos:line="31" pos:column="42"/></name><operator pos:line="31" pos:column="42">++<pos:position pos:line="31" pos:column="44"/></operator></expr>]<pos:position pos:line="31" pos:column="45"/></index></name> <operator pos:line="31" pos:column="46">=<pos:position pos:line="31" pos:column="47"/></operator> <name pos:line="31" pos:column="48">ref<pos:position pos:line="31" pos:column="51"/></name></expr>;<pos:position pos:line="31" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="32" pos:column="18"/></block></then>
		<else pos:line="33" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">die<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><literal type="string" pos:line="34" pos:column="29">"http transport does not support %s"<pos:position pos:line="34" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="67">buf<pos:position pos:line="34" pos:column="70"/></name><operator pos:line="34" pos:column="70">-&gt;<pos:position pos:line="34" pos:column="75"/></operator><name pos:line="34" pos:column="72">buf<pos:position pos:line="34" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="77"/></expr_stmt></block></else></if>

		<expr_stmt><expr><call><name pos:line="36" pos:column="17">strbuf_reset<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">buf<pos:position pos:line="36" pos:column="33"/></name></expr></argument>)<pos:position pos:line="36" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="35"/></expr_stmt>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><call><name pos:line="37" pos:column="21">strbuf_getline_lf<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name pos:line="37" pos:column="39">buf<pos:position pos:line="37" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="44">stdin<pos:position pos:line="37" pos:column="49"/></name></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call> <operator pos:line="37" pos:column="51">==<pos:position pos:line="37" pos:column="53"/></operator> <name pos:line="37" pos:column="54">EOF<pos:position pos:line="37" pos:column="57"/></name></expr>)<pos:position pos:line="37" pos:column="58"/></condition><then pos:line="37" pos:column="58">
			<block type="pseudo"><return pos:line="38" pos:column="25">return;<pos:position pos:line="38" pos:column="32"/></return></block></then></if>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">!<pos:position pos:line="39" pos:column="22"/></operator><operator pos:line="39" pos:column="22">*<pos:position pos:line="39" pos:column="23"/></operator><name><name pos:line="39" pos:column="23">buf<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">-&gt;<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="28">buf<pos:position pos:line="39" pos:column="31"/></name></name></expr>)<pos:position pos:line="39" pos:column="32"/></condition><then pos:line="39" pos:column="32">
			<block type="pseudo"><break pos:line="40" pos:column="25">break;<pos:position pos:line="40" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="41" pos:column="10"/></block> while <condition pos:line="41" pos:column="17">(<expr><literal type="number" pos:line="41" pos:column="18">1<pos:position pos:line="41" pos:column="19"/></literal></expr>)<pos:position pos:line="41" pos:column="20"/></condition>;<pos:position pos:line="41" pos:column="21"/></do>

	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><call><name pos:line="43" pos:column="13">fetch<pos:position pos:line="43" pos:column="18"/></name><argument_list pos:line="43" pos:column="18">(<argument><expr><name pos:line="43" pos:column="19">nr_heads<pos:position pos:line="43" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="29">to_fetch<pos:position pos:line="43" pos:column="37"/></name></expr></argument>)<pos:position pos:line="43" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="39"/></condition><then pos:line="43" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="17">exit<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><literal type="number" pos:line="44" pos:column="22">128<pos:position pos:line="44" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="27"/></expr_stmt></block></then></if> <comment type="block" pos:line="44" pos:column="28">/* error already reported */</comment>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">free_refs<pos:position pos:line="45" pos:column="18"/></name><argument_list pos:line="45" pos:column="18">(<argument><expr><name pos:line="45" pos:column="19">list_head<pos:position pos:line="45" pos:column="28"/></name></expr></argument>)<pos:position pos:line="45" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">free<pos:position pos:line="46" pos:column="13"/></name><argument_list pos:line="46" pos:column="13">(<argument><expr><name pos:line="46" pos:column="14">to_fetch<pos:position pos:line="46" pos:column="22"/></name></expr></argument>)<pos:position pos:line="46" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="48" pos:column="9">printf<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><literal type="string" pos:line="48" pos:column="16">"\n"<pos:position pos:line="48" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="49" pos:column="9">fflush<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">(<argument><expr><name pos:line="49" pos:column="16">stdout<pos:position pos:line="49" pos:column="22"/></name></expr></argument>)<pos:position pos:line="49" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">strbuf_reset<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><name pos:line="50" pos:column="22">buf<pos:position pos:line="50" pos:column="25"/></name></expr></argument>)<pos:position pos:line="50" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="27"/></expr_stmt>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
