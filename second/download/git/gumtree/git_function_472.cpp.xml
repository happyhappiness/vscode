<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_472.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">module_list<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">argc<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">argv<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">prefix<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">pathspec<pos:position pos:line="4" pos:column="24"/></name></name></type> <name pos:line="4" pos:column="25">pathspec<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">module_list<pos:position pos:line="5" pos:column="27"/></name></name></type> <name pos:line="5" pos:column="28">list<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><name pos:line="5" pos:column="35">MODULE_LIST_INIT<pos:position pos:line="5" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="52"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">option<pos:position pos:line="7" pos:column="22"/></name></name></type> <name><name pos:line="7" pos:column="23">module_list_options<pos:position pos:line="7" pos:column="42"/></name><index pos:line="7" pos:column="42">[]<pos:position pos:line="7" pos:column="44"/></index></name> <init pos:line="7" pos:column="45">= <expr><block pos:line="7" pos:column="47">{
		<expr><call><name pos:line="8" pos:column="17">OPT_STRING<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><literal type="number" pos:line="8" pos:column="28">0<pos:position pos:line="8" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="31">"prefix"<pos:position pos:line="8" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="8" pos:column="41">&amp;<pos:position pos:line="8" pos:column="46"/></operator><name pos:line="8" pos:column="42">prefix<pos:position pos:line="8" pos:column="48"/></name></expr></argument>,
			   <argument><expr><call><name pos:line="9" pos:column="28">N_<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">(<argument><expr><literal type="string" pos:line="9" pos:column="31">"path"<pos:position pos:line="9" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr></argument>,
			   <argument><expr><call><name pos:line="10" pos:column="28">N_<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><literal type="string" pos:line="10" pos:column="31">"alternative anchor for relative paths"<pos:position pos:line="10" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="72"/></argument_list></call></expr>,
		<macro><name pos:line="11" pos:column="17">OPT_END<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">()<pos:position pos:line="11" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="12" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="12" pos:column="11"/></decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="14" pos:column="9">const<pos:position pos:line="14" pos:column="14"/></specifier> <name pos:line="14" pos:column="15">char<pos:position pos:line="14" pos:column="19"/></name> <modifier pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></modifier><specifier pos:line="14" pos:column="21">const<pos:position pos:line="14" pos:column="26"/></specifier></type> <name><name pos:line="14" pos:column="27">git_submodule_helper_usage<pos:position pos:line="14" pos:column="53"/></name><index pos:line="14" pos:column="53">[]<pos:position pos:line="14" pos:column="55"/></index></name> <init pos:line="14" pos:column="56">= <expr><block pos:line="14" pos:column="58">{
		<expr><call><name pos:line="15" pos:column="17">N_<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="string" pos:line="15" pos:column="20">"git submodule--helper list [--prefix=&lt;path&gt;] [&lt;path&gt;...]"<pos:position pos:line="15" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="79"/></argument_list></call></expr>,
		<expr><name pos:line="16" pos:column="17">NULL<pos:position pos:line="16" pos:column="21"/></name></expr>
	}<pos:position pos:line="17" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="17" pos:column="11"/></decl_stmt>

	<expr_stmt><expr><name pos:line="19" pos:column="9">argc<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">parse_options<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">argc<pos:position pos:line="19" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="36">argv<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="42">prefix<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="50">module_list_options<pos:position pos:line="19" pos:column="69"/></name></expr></argument>,
			     <argument><expr><name pos:line="20" pos:column="30">git_submodule_helper_usage<pos:position pos:line="20" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="58">0<pos:position pos:line="20" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></expr_stmt>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">module_list_compute<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">argc<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="39">argv<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="45">prefix<pos:position pos:line="22" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="53">&amp;<pos:position pos:line="22" pos:column="58"/></operator><name pos:line="22" pos:column="54">pathspec<pos:position pos:line="22" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="64">&amp;<pos:position pos:line="22" pos:column="69"/></operator><name pos:line="22" pos:column="65">list<pos:position pos:line="22" pos:column="69"/></name></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call> <operator pos:line="22" pos:column="71">&lt;<pos:position pos:line="22" pos:column="75"/></operator> <literal type="number" pos:line="22" pos:column="73">0<pos:position pos:line="22" pos:column="74"/></literal></expr>)<pos:position pos:line="22" pos:column="75"/></condition><then pos:line="22" pos:column="75">
		<block type="pseudo"><return pos:line="23" pos:column="17">return <expr><literal type="number" pos:line="23" pos:column="24">1<pos:position pos:line="23" pos:column="25"/></literal></expr>;<pos:position pos:line="23" pos:column="26"/></return></block></then></if>

	<for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">i<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <literal type="number" pos:line="25" pos:column="18">0<pos:position pos:line="25" pos:column="19"/></literal></expr>;<pos:position pos:line="25" pos:column="20"/></init> <condition><expr><name pos:line="25" pos:column="21">i<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">&lt;<pos:position pos:line="25" pos:column="27"/></operator> <name><name pos:line="25" pos:column="25">list<pos:position pos:line="25" pos:column="29"/></name><operator pos:line="25" pos:column="29">.<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="30">nr<pos:position pos:line="25" pos:column="32"/></name></name></expr>;<pos:position pos:line="25" pos:column="33"/></condition> <incr><expr><name pos:line="25" pos:column="34">i<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">++<pos:position pos:line="25" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="38"/></control> <block pos:line="25" pos:column="39">{
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">const<pos:position pos:line="26" pos:column="22"/></specifier> <name><name pos:line="26" pos:column="23">struct<pos:position pos:line="26" pos:column="29"/></name> <name pos:line="26" pos:column="30">cache_entry<pos:position pos:line="26" pos:column="41"/></name></name> <modifier pos:line="26" pos:column="42">*<pos:position pos:line="26" pos:column="43"/></modifier></type><name pos:line="26" pos:column="43">ce<pos:position pos:line="26" pos:column="45"/></name> <init pos:line="26" pos:column="46">= <expr><name><name pos:line="26" pos:column="48">list<pos:position pos:line="26" pos:column="52"/></name><operator pos:line="26" pos:column="52">.<pos:position pos:line="26" pos:column="53"/></operator><name pos:line="26" pos:column="53">entries<pos:position pos:line="26" pos:column="60"/></name><index pos:line="26" pos:column="60">[<expr><name pos:line="26" pos:column="61">i<pos:position pos:line="26" pos:column="62"/></name></expr>]<pos:position pos:line="26" pos:column="63"/></index></name></expr></init></decl>;<pos:position pos:line="26" pos:column="64"/></decl_stmt>

		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><call><name pos:line="28" pos:column="21">ce_stage<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">ce<pos:position pos:line="28" pos:column="32"/></name></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="34"/></condition><then pos:line="28" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">printf<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><literal type="string" pos:line="29" pos:column="32">"%06o %s U\t"<pos:position pos:line="29" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="47">ce<pos:position pos:line="29" pos:column="49"/></name><operator pos:line="29" pos:column="49">-&gt;<pos:position pos:line="29" pos:column="54"/></operator><name pos:line="29" pos:column="51">ce_mode<pos:position pos:line="29" pos:column="58"/></name></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="60">sha1_to_hex<pos:position pos:line="29" pos:column="71"/></name><argument_list pos:line="29" pos:column="71">(<argument><expr><name pos:line="29" pos:column="72">null_sha1<pos:position pos:line="29" pos:column="81"/></name></expr></argument>)<pos:position pos:line="29" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="84"/></expr_stmt></block></then>
		<else pos:line="30" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">printf<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><literal type="string" pos:line="31" pos:column="32">"%06o %s %d\t"<pos:position pos:line="31" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="48">ce<pos:position pos:line="31" pos:column="50"/></name><operator pos:line="31" pos:column="50">-&gt;<pos:position pos:line="31" pos:column="55"/></operator><name pos:line="31" pos:column="52">ce_mode<pos:position pos:line="31" pos:column="59"/></name></name></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="61">sha1_to_hex<pos:position pos:line="31" pos:column="72"/></name><argument_list pos:line="31" pos:column="72">(<argument><expr><name><name pos:line="31" pos:column="73">ce<pos:position pos:line="31" pos:column="75"/></name><operator pos:line="31" pos:column="75">-&gt;<pos:position pos:line="31" pos:column="80"/></operator><name pos:line="31" pos:column="77">sha1<pos:position pos:line="31" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="82"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="84">ce_stage<pos:position pos:line="31" pos:column="92"/></name><argument_list pos:line="31" pos:column="92">(<argument><expr><name pos:line="31" pos:column="93">ce<pos:position pos:line="31" pos:column="95"/></name></expr></argument>)<pos:position pos:line="31" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="98"/></expr_stmt></block></else></if>

		<expr_stmt><expr><call><name pos:line="33" pos:column="17">utf8_fprintf<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">stdout<pos:position pos:line="33" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="38">"%s\n"<pos:position pos:line="33" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="46">ce<pos:position pos:line="33" pos:column="48"/></name><operator pos:line="33" pos:column="48">-&gt;<pos:position pos:line="33" pos:column="53"/></operator><name pos:line="33" pos:column="50">name<pos:position pos:line="33" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="56"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></for>
	<return pos:line="35" pos:column="9">return <expr><literal type="number" pos:line="35" pos:column="16">0<pos:position pos:line="35" pos:column="17"/></literal></expr>;<pos:position pos:line="35" pos:column="18"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
