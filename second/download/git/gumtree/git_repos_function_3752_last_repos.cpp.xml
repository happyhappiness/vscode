<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3752_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">push_submodule<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">path<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>,
			  <parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name><name pos:line="2" pos:column="33">struct<pos:position pos:line="2" pos:column="39"/></name> <name pos:line="2" pos:column="40">remote<pos:position pos:line="2" pos:column="46"/></name></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">remote<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
			  <parameter><decl><type><specifier pos:line="3" pos:column="27">const<pos:position pos:line="3" pos:column="32"/></specifier> <name pos:line="3" pos:column="33">char<pos:position pos:line="3" pos:column="37"/></name> <modifier pos:line="3" pos:column="38">*<pos:position pos:line="3" pos:column="39"/></modifier><modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">refspec<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="49">int<pos:position pos:line="3" pos:column="52"/></name></type> <name pos:line="3" pos:column="53">refspec_nr<pos:position pos:line="3" pos:column="63"/></name></decl></parameter>,
			  <parameter><decl><type><specifier pos:line="4" pos:column="27">const<pos:position pos:line="4" pos:column="32"/></specifier> <name><name pos:line="4" pos:column="33">struct<pos:position pos:line="4" pos:column="39"/></name> <name pos:line="4" pos:column="40">string_list<pos:position pos:line="4" pos:column="51"/></name></name> <modifier pos:line="4" pos:column="52">*<pos:position pos:line="4" pos:column="53"/></modifier></type><name pos:line="4" pos:column="53">push_options<pos:position pos:line="4" pos:column="65"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="5" pos:column="27">int<pos:position pos:line="5" pos:column="30"/></name></type> <name pos:line="5" pos:column="31">dry_run<pos:position pos:line="5" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="39"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name pos:line="7" pos:column="13">add_submodule_odb<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><name pos:line="7" pos:column="31">path<pos:position pos:line="7" pos:column="35"/></name></expr></argument>)<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="37"/></condition><then pos:line="7" pos:column="37">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><literal type="number" pos:line="8" pos:column="24">1<pos:position pos:line="8" pos:column="25"/></literal></expr>;<pos:position pos:line="8" pos:column="26"/></return></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">for_each_remote_ref_submodule<pos:position pos:line="10" pos:column="42"/></name><argument_list pos:line="10" pos:column="42">(<argument><expr><name pos:line="10" pos:column="43">path<pos:position pos:line="10" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="49">has_remote<pos:position pos:line="10" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="61">NULL<pos:position pos:line="10" pos:column="65"/></name></expr></argument>)<pos:position pos:line="10" pos:column="66"/></argument_list></call> <operator pos:line="10" pos:column="67">&gt;<pos:position pos:line="10" pos:column="71"/></operator> <literal type="number" pos:line="10" pos:column="69">0<pos:position pos:line="10" pos:column="70"/></literal></expr>)<pos:position pos:line="10" pos:column="71"/></condition><then pos:line="10" pos:column="71"> <block pos:line="10" pos:column="72">{
		<decl_stmt><decl><type><name><name pos:line="11" pos:column="17">struct<pos:position pos:line="11" pos:column="23"/></name> <name pos:line="11" pos:column="24">child_process<pos:position pos:line="11" pos:column="37"/></name></name></type> <name pos:line="11" pos:column="38">cp<pos:position pos:line="11" pos:column="40"/></name> <init pos:line="11" pos:column="41">= <expr><name pos:line="11" pos:column="43">CHILD_PROCESS_INIT<pos:position pos:line="11" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="62"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">argv_array_push<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><operator pos:line="12" pos:column="33">&amp;<pos:position pos:line="12" pos:column="38"/></operator><name><name pos:line="12" pos:column="34">cp<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">.<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="37">args<pos:position pos:line="12" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="43">"push"<pos:position pos:line="12" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">dry_run<pos:position pos:line="13" pos:column="28"/></name></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="25">argv_array_push<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><operator pos:line="14" pos:column="41">&amp;<pos:position pos:line="14" pos:column="46"/></operator><name><name pos:line="14" pos:column="42">cp<pos:position pos:line="14" pos:column="44"/></name><operator pos:line="14" pos:column="44">.<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="45">args<pos:position pos:line="14" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="51">"--dry-run"<pos:position pos:line="14" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt></block></then></if>

		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">push_options<pos:position pos:line="16" pos:column="33"/></name> <operator pos:line="16" pos:column="34">&amp;&amp;<pos:position pos:line="16" pos:column="44"/></operator> <name><name pos:line="16" pos:column="37">push_options<pos:position pos:line="16" pos:column="49"/></name><operator pos:line="16" pos:column="49">-&gt;<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="51">nr<pos:position pos:line="16" pos:column="53"/></name></name></expr>)<pos:position pos:line="16" pos:column="54"/></condition><then pos:line="16" pos:column="54"> <block pos:line="16" pos:column="55">{
			<decl_stmt><decl><type><specifier pos:line="17" pos:column="25">const<pos:position pos:line="17" pos:column="30"/></specifier> <name><name pos:line="17" pos:column="31">struct<pos:position pos:line="17" pos:column="37"/></name> <name pos:line="17" pos:column="38">string_list_item<pos:position pos:line="17" pos:column="54"/></name></name> <modifier pos:line="17" pos:column="55">*<pos:position pos:line="17" pos:column="56"/></modifier></type><name pos:line="17" pos:column="56">item<pos:position pos:line="17" pos:column="60"/></name></decl>;<pos:position pos:line="17" pos:column="61"/></decl_stmt>
			<macro><name pos:line="18" pos:column="25">for_each_string_list_item<pos:position pos:line="18" pos:column="50"/></name><argument_list pos:line="18" pos:column="50">(<argument pos:line="18" pos:column="51">item<pos:position pos:line="18" pos:column="55"/></argument>, <argument pos:line="18" pos:column="57">push_options<pos:position pos:line="18" pos:column="69"/></argument>)<pos:position pos:line="18" pos:column="70"/></argument_list></macro>
				<expr_stmt><expr><call><name pos:line="19" pos:column="33">argv_array_pushf<pos:position pos:line="19" pos:column="49"/></name><argument_list pos:line="19" pos:column="49">(<argument><expr><operator pos:line="19" pos:column="50">&amp;<pos:position pos:line="19" pos:column="55"/></operator><name><name pos:line="19" pos:column="51">cp<pos:position pos:line="19" pos:column="53"/></name><operator pos:line="19" pos:column="53">.<pos:position pos:line="19" pos:column="54"/></operator><name pos:line="19" pos:column="54">args<pos:position pos:line="19" pos:column="58"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="60">"--push-option=%s"<pos:position pos:line="19" pos:column="78"/></literal></expr></argument>,
						 <argument><expr><name><name pos:line="20" pos:column="50">item<pos:position pos:line="20" pos:column="54"/></name><operator pos:line="20" pos:column="54">-&gt;<pos:position pos:line="20" pos:column="59"/></operator><name pos:line="20" pos:column="56">string<pos:position pos:line="20" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="64"/></expr_stmt>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">remote<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">origin<pos:position pos:line="23" pos:column="35"/></name></name> <operator pos:line="23" pos:column="36">!=<pos:position pos:line="23" pos:column="38"/></operator> <name pos:line="23" pos:column="39">REMOTE_UNCONFIGURED<pos:position pos:line="23" pos:column="58"/></name></expr>)<pos:position pos:line="23" pos:column="59"/></condition><then pos:line="23" pos:column="59"> <block pos:line="23" pos:column="60">{
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">int<pos:position pos:line="24" pos:column="28"/></name></type> <name pos:line="24" pos:column="29">i<pos:position pos:line="24" pos:column="30"/></name></decl>;<pos:position pos:line="24" pos:column="31"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">argv_array_push<pos:position pos:line="25" pos:column="40"/></name><argument_list pos:line="25" pos:column="40">(<argument><expr><operator pos:line="25" pos:column="41">&amp;<pos:position pos:line="25" pos:column="46"/></operator><name><name pos:line="25" pos:column="42">cp<pos:position pos:line="25" pos:column="44"/></name><operator pos:line="25" pos:column="44">.<pos:position pos:line="25" pos:column="45"/></operator><name pos:line="25" pos:column="45">args<pos:position pos:line="25" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="51">remote<pos:position pos:line="25" pos:column="57"/></name><operator pos:line="25" pos:column="57">-&gt;<pos:position pos:line="25" pos:column="62"/></operator><name pos:line="25" pos:column="59">name<pos:position pos:line="25" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="65"/></expr_stmt>
			<for pos:line="26" pos:column="25">for <control pos:line="26" pos:column="29">(<init><expr><name pos:line="26" pos:column="30">i<pos:position pos:line="26" pos:column="31"/></name> <operator pos:line="26" pos:column="32">=<pos:position pos:line="26" pos:column="33"/></operator> <literal type="number" pos:line="26" pos:column="34">0<pos:position pos:line="26" pos:column="35"/></literal></expr>;<pos:position pos:line="26" pos:column="36"/></init> <condition><expr><name pos:line="26" pos:column="37">i<pos:position pos:line="26" pos:column="38"/></name> <operator pos:line="26" pos:column="39">&lt;<pos:position pos:line="26" pos:column="43"/></operator> <name pos:line="26" pos:column="41">refspec_nr<pos:position pos:line="26" pos:column="51"/></name></expr>;<pos:position pos:line="26" pos:column="52"/></condition> <incr><expr><name pos:line="26" pos:column="53">i<pos:position pos:line="26" pos:column="54"/></name><operator pos:line="26" pos:column="54">++<pos:position pos:line="26" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="57"/></control>
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="33">argv_array_push<pos:position pos:line="27" pos:column="48"/></name><argument_list pos:line="27" pos:column="48">(<argument><expr><operator pos:line="27" pos:column="49">&amp;<pos:position pos:line="27" pos:column="54"/></operator><name><name pos:line="27" pos:column="50">cp<pos:position pos:line="27" pos:column="52"/></name><operator pos:line="27" pos:column="52">.<pos:position pos:line="27" pos:column="53"/></operator><name pos:line="27" pos:column="53">args<pos:position pos:line="27" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="59">refspec<pos:position pos:line="27" pos:column="66"/></name><index pos:line="27" pos:column="66">[<expr><name pos:line="27" pos:column="67">i<pos:position pos:line="27" pos:column="68"/></name></expr>]<pos:position pos:line="27" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="71"/></expr_stmt></block></for>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="30" pos:column="17">prepare_submodule_repo_env<pos:position pos:line="30" pos:column="43"/></name><argument_list pos:line="30" pos:column="43">(<argument><expr><operator pos:line="30" pos:column="44">&amp;<pos:position pos:line="30" pos:column="49"/></operator><name><name pos:line="30" pos:column="45">cp<pos:position pos:line="30" pos:column="47"/></name><operator pos:line="30" pos:column="47">.<pos:position pos:line="30" pos:column="48"/></operator><name pos:line="30" pos:column="48">env_array<pos:position pos:line="30" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">cp<pos:position pos:line="31" pos:column="19"/></name><operator pos:line="31" pos:column="19">.<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="20">git_cmd<pos:position pos:line="31" pos:column="27"/></name></name> <operator pos:line="31" pos:column="28">=<pos:position pos:line="31" pos:column="29"/></operator> <literal type="number" pos:line="31" pos:column="30">1<pos:position pos:line="31" pos:column="31"/></literal></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="32" pos:column="17">cp<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">.<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="20">no_stdin<pos:position pos:line="32" pos:column="28"/></name></name> <operator pos:line="32" pos:column="29">=<pos:position pos:line="32" pos:column="30"/></operator> <literal type="number" pos:line="32" pos:column="31">1<pos:position pos:line="32" pos:column="32"/></literal></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">cp<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">.<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">dir<pos:position pos:line="33" pos:column="23"/></name></name> <operator pos:line="33" pos:column="24">=<pos:position pos:line="33" pos:column="25"/></operator> <name pos:line="33" pos:column="26">path<pos:position pos:line="33" pos:column="30"/></name></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">run_command<pos:position pos:line="34" pos:column="32"/></name><argument_list pos:line="34" pos:column="32">(<argument><expr><operator pos:line="34" pos:column="33">&amp;<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="34">cp<pos:position pos:line="34" pos:column="36"/></name></expr></argument>)<pos:position pos:line="34" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="38"/></condition><then pos:line="34" pos:column="38">
			<block type="pseudo"><return pos:line="35" pos:column="25">return <expr><literal type="number" pos:line="35" pos:column="32">0<pos:position pos:line="35" pos:column="33"/></literal></expr>;<pos:position pos:line="35" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">close<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name><name pos:line="36" pos:column="23">cp<pos:position pos:line="36" pos:column="25"/></name><operator pos:line="36" pos:column="25">.<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="26">out<pos:position pos:line="36" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>

	<return pos:line="39" pos:column="9">return <expr><literal type="number" pos:line="39" pos:column="16">1<pos:position pos:line="39" pos:column="17"/></literal></expr>;<pos:position pos:line="39" pos:column="18"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
