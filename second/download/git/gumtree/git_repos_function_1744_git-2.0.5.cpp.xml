<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1744_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">compare_tree_entry<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">tree_desc<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">t1<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="53">struct<pos:position pos:line="1" pos:column="59"/></name> <name pos:line="1" pos:column="60">tree_desc<pos:position pos:line="1" pos:column="69"/></name></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">t2<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">strbuf<pos:position pos:line="2" pos:column="44"/></name></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">base<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="52">struct<pos:position pos:line="2" pos:column="58"/></name> <name pos:line="2" pos:column="59">diff_options<pos:position pos:line="2" pos:column="71"/></name></name> <modifier pos:line="2" pos:column="72">*<pos:position pos:line="2" pos:column="73"/></modifier></type><name pos:line="2" pos:column="73">opt<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="77"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">mode1<pos:position pos:line="4" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="25">mode2<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">path1<pos:position pos:line="5" pos:column="26"/></name></decl>, <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="29">path2<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">unsigned<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">char<pos:position pos:line="6" pos:column="28"/></name> <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier></type><name pos:line="6" pos:column="30">sha1<pos:position pos:line="6" pos:column="34"/></name></decl>, <modifier pos:line="6" pos:column="36">*<pos:position pos:line="6" pos:column="37"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="37">sha2<pos:position pos:line="6" pos:column="41"/></name></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">cmp<pos:position pos:line="7" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="18">pathlen1<pos:position pos:line="7" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="28">pathlen2<pos:position pos:line="7" pos:column="36"/></name></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">old_baselen<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><name><name pos:line="8" pos:column="27">base<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">-&gt;<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="33">len<pos:position pos:line="8" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">sha1<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">=<pos:position pos:line="10" pos:column="15"/></operator> <call><name pos:line="10" pos:column="16">tree_entry_extract<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><name pos:line="10" pos:column="35">t1<pos:position pos:line="10" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="39">&amp;<pos:position pos:line="10" pos:column="44"/></operator><name pos:line="10" pos:column="40">path1<pos:position pos:line="10" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="47">&amp;<pos:position pos:line="10" pos:column="52"/></operator><name pos:line="10" pos:column="48">mode1<pos:position pos:line="10" pos:column="53"/></name></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><name pos:line="11" pos:column="9">sha2<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <call><name pos:line="11" pos:column="16">tree_entry_extract<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">t2<pos:position pos:line="11" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="39">&amp;<pos:position pos:line="11" pos:column="44"/></operator><name pos:line="11" pos:column="40">path2<pos:position pos:line="11" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="47">&amp;<pos:position pos:line="11" pos:column="52"/></operator><name pos:line="11" pos:column="48">mode2<pos:position pos:line="11" pos:column="53"/></name></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="55"/></expr_stmt>

	<expr_stmt><expr><name pos:line="13" pos:column="9">pathlen1<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <call><name pos:line="13" pos:column="20">tree_entry_len<pos:position pos:line="13" pos:column="34"/></name><argument_list pos:line="13" pos:column="34">(<argument><expr><operator pos:line="13" pos:column="35">&amp;<pos:position pos:line="13" pos:column="40"/></operator><name><name pos:line="13" pos:column="36">t1<pos:position pos:line="13" pos:column="38"/></name><operator pos:line="13" pos:column="38">-&gt;<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="40">entry<pos:position pos:line="13" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name pos:line="14" pos:column="9">pathlen2<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <call><name pos:line="14" pos:column="20">tree_entry_len<pos:position pos:line="14" pos:column="34"/></name><argument_list pos:line="14" pos:column="34">(<argument><expr><operator pos:line="14" pos:column="35">&amp;<pos:position pos:line="14" pos:column="40"/></operator><name><name pos:line="14" pos:column="36">t2<pos:position pos:line="14" pos:column="38"/></name><operator pos:line="14" pos:column="38">-&gt;<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="40">entry<pos:position pos:line="14" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">cmp<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">base_name_compare<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">path1<pos:position pos:line="15" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="40">pathlen1<pos:position pos:line="15" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="50">mode1<pos:position pos:line="15" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="57">path2<pos:position pos:line="15" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="64">pathlen2<pos:position pos:line="15" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="74">mode2<pos:position pos:line="15" pos:column="79"/></name></expr></argument>)<pos:position pos:line="15" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="81"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">cmp<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">&lt;<pos:position pos:line="16" pos:column="21"/></operator> <literal type="number" pos:line="16" pos:column="19">0<pos:position pos:line="16" pos:column="20"/></literal></expr>)<pos:position pos:line="16" pos:column="21"/></condition><then pos:line="16" pos:column="21"> <block pos:line="16" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">show_entry<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><name pos:line="17" pos:column="28">opt<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="33">"-"<pos:position pos:line="17" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="38">t1<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="42">base<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><operator pos:line="18" pos:column="24">-<pos:position pos:line="18" pos:column="25"/></operator><literal type="number" pos:line="18" pos:column="25">1<pos:position pos:line="18" pos:column="26"/></literal></expr>;<pos:position pos:line="18" pos:column="27"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">cmp<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">&gt;<pos:position pos:line="20" pos:column="21"/></operator> <literal type="number" pos:line="20" pos:column="19">0<pos:position pos:line="20" pos:column="20"/></literal></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21"> <block pos:line="20" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">show_entry<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">opt<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="33">"+"<pos:position pos:line="21" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="38">t2<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="42">base<pos:position pos:line="21" pos:column="46"/></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
		<return pos:line="22" pos:column="17">return <expr><literal type="number" pos:line="22" pos:column="24">1<pos:position pos:line="22" pos:column="25"/></literal></expr>;<pos:position pos:line="22" pos:column="26"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><call><name pos:line="24" pos:column="14">DIFF_OPT_TST<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">opt<pos:position pos:line="24" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="32">FIND_COPIES_HARDER<pos:position pos:line="24" pos:column="50"/></name></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call> <operator pos:line="24" pos:column="52">&amp;&amp;<pos:position pos:line="24" pos:column="62"/></operator> <operator pos:line="24" pos:column="55">!<pos:position pos:line="24" pos:column="56"/></operator><call><name pos:line="24" pos:column="56">hashcmp<pos:position pos:line="24" pos:column="63"/></name><argument_list pos:line="24" pos:column="63">(<argument><expr><name pos:line="24" pos:column="64">sha1<pos:position pos:line="24" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="70">sha2<pos:position pos:line="24" pos:column="74"/></name></expr></argument>)<pos:position pos:line="24" pos:column="75"/></argument_list></call> <operator pos:line="24" pos:column="76">&amp;&amp;<pos:position pos:line="24" pos:column="86"/></operator> <name pos:line="24" pos:column="79">mode1<pos:position pos:line="24" pos:column="84"/></name> <operator pos:line="24" pos:column="85">==<pos:position pos:line="24" pos:column="87"/></operator> <name pos:line="24" pos:column="88">mode2<pos:position pos:line="24" pos:column="93"/></name></expr>)<pos:position pos:line="24" pos:column="94"/></condition><then pos:line="24" pos:column="94">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><literal type="number" pos:line="25" pos:column="24">0<pos:position pos:line="25" pos:column="25"/></literal></expr>;<pos:position pos:line="25" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="27" pos:column="9">/*
	 * If the filemode has changed to/from a directory from/to a regular
	 * file, we need to consider it a remove and an add.
	 */</comment>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name pos:line="31" pos:column="13">S_ISDIR<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name pos:line="31" pos:column="21">mode1<pos:position pos:line="31" pos:column="26"/></name></expr></argument>)<pos:position pos:line="31" pos:column="27"/></argument_list></call> <operator pos:line="31" pos:column="28">!=<pos:position pos:line="31" pos:column="30"/></operator> <call><name pos:line="31" pos:column="31">S_ISDIR<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><name pos:line="31" pos:column="39">mode2<pos:position pos:line="31" pos:column="44"/></name></expr></argument>)<pos:position pos:line="31" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="46"/></condition><then pos:line="31" pos:column="46"> <block pos:line="31" pos:column="47">{
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">show_entry<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">(<argument><expr><name pos:line="32" pos:column="28">opt<pos:position pos:line="32" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="33">"-"<pos:position pos:line="32" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="38">t1<pos:position pos:line="32" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="42">base<pos:position pos:line="32" pos:column="46"/></name></expr></argument>)<pos:position pos:line="32" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">show_entry<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name pos:line="33" pos:column="28">opt<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="33">"+"<pos:position pos:line="33" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="38">t2<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="42">base<pos:position pos:line="33" pos:column="46"/></name></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
		<return pos:line="34" pos:column="17">return <expr><literal type="number" pos:line="34" pos:column="24">0<pos:position pos:line="34" pos:column="25"/></literal></expr>;<pos:position pos:line="34" pos:column="26"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="37" pos:column="9">strbuf_add<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><name pos:line="37" pos:column="20">base<pos:position pos:line="37" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="26">path1<pos:position pos:line="37" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="33">pathlen1<pos:position pos:line="37" pos:column="41"/></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">DIFF_OPT_TST<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><name pos:line="38" pos:column="26">opt<pos:position pos:line="38" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="31">RECURSIVE<pos:position pos:line="38" pos:column="40"/></name></expr></argument>)<pos:position pos:line="38" pos:column="41"/></argument_list></call> <operator pos:line="38" pos:column="42">&amp;&amp;<pos:position pos:line="38" pos:column="52"/></operator> <call><name pos:line="38" pos:column="45">S_ISDIR<pos:position pos:line="38" pos:column="52"/></name><argument_list pos:line="38" pos:column="52">(<argument><expr><name pos:line="38" pos:column="53">mode1<pos:position pos:line="38" pos:column="58"/></name></expr></argument>)<pos:position pos:line="38" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="60"/></condition><then pos:line="38" pos:column="60"> <block pos:line="38" pos:column="61">{
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><call><name pos:line="39" pos:column="21">DIFF_OPT_TST<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><name pos:line="39" pos:column="34">opt<pos:position pos:line="39" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="39">TREE_IN_RECURSIVE<pos:position pos:line="39" pos:column="56"/></name></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="58"/></condition><then pos:line="39" pos:column="58"> <block pos:line="39" pos:column="59">{
			<expr_stmt><expr><call><name><name pos:line="40" pos:column="25">opt<pos:position pos:line="40" pos:column="28"/></name><operator pos:line="40" pos:column="28">-&gt;<pos:position pos:line="40" pos:column="33"/></operator><name pos:line="40" pos:column="30">change<pos:position pos:line="40" pos:column="36"/></name></name><argument_list pos:line="40" pos:column="36">(<argument><expr><name pos:line="40" pos:column="37">opt<pos:position pos:line="40" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="42">mode1<pos:position pos:line="40" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="49">mode2<pos:position pos:line="40" pos:column="54"/></name></expr></argument>,
				    <argument><expr><name pos:line="41" pos:column="37">sha1<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="43">sha2<pos:position pos:line="41" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="49">1<pos:position pos:line="41" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="52">1<pos:position pos:line="41" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="55">base<pos:position pos:line="41" pos:column="59"/></name><operator pos:line="41" pos:column="59">-&gt;<pos:position pos:line="41" pos:column="64"/></operator><name pos:line="41" pos:column="61">buf<pos:position pos:line="41" pos:column="64"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="66">0<pos:position pos:line="41" pos:column="67"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="69">0<pos:position pos:line="41" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="72"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">strbuf_addch<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><name pos:line="43" pos:column="30">base<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="43" pos:column="36">'/'<pos:position pos:line="43" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">diff_tree_sha1<pos:position pos:line="44" pos:column="31"/></name><argument_list pos:line="44" pos:column="31">(<argument><expr><name pos:line="44" pos:column="32">sha1<pos:position pos:line="44" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="38">sha2<pos:position pos:line="44" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="44">base<pos:position pos:line="44" pos:column="48"/></name><operator pos:line="44" pos:column="48">-&gt;<pos:position pos:line="44" pos:column="53"/></operator><name pos:line="44" pos:column="50">buf<pos:position pos:line="44" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="55">opt<pos:position pos:line="44" pos:column="58"/></name></expr></argument>)<pos:position pos:line="44" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></then> <else pos:line="45" pos:column="11">else <block pos:line="45" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="46" pos:column="17">opt<pos:position pos:line="46" pos:column="20"/></name><operator pos:line="46" pos:column="20">-&gt;<pos:position pos:line="46" pos:column="25"/></operator><name pos:line="46" pos:column="22">change<pos:position pos:line="46" pos:column="28"/></name></name><argument_list pos:line="46" pos:column="28">(<argument><expr><name pos:line="46" pos:column="29">opt<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="34">mode1<pos:position pos:line="46" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="41">mode2<pos:position pos:line="46" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="48">sha1<pos:position pos:line="46" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="54">sha2<pos:position pos:line="46" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="60">1<pos:position pos:line="46" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="63">1<pos:position pos:line="46" pos:column="64"/></literal></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="66">base<pos:position pos:line="46" pos:column="70"/></name><operator pos:line="46" pos:column="70">-&gt;<pos:position pos:line="46" pos:column="75"/></operator><name pos:line="46" pos:column="72">buf<pos:position pos:line="46" pos:column="75"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="77">0<pos:position pos:line="46" pos:column="78"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="80">0<pos:position pos:line="46" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="83"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">strbuf_setlen<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><name pos:line="48" pos:column="23">base<pos:position pos:line="48" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="29">old_baselen<pos:position pos:line="48" pos:column="40"/></name></expr></argument>)<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt>
	<return pos:line="49" pos:column="9">return <expr><literal type="number" pos:line="49" pos:column="16">0<pos:position pos:line="49" pos:column="17"/></literal></expr>;<pos:position pos:line="49" pos:column="18"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
