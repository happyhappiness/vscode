<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2258_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">add_delta_base_cache<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">packed_git<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">p<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">off_t<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">base_offset<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
	<parameter><decl><type><name pos:line="2" pos:column="9">void<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">base<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="21">unsigned<pos:position pos:line="2" pos:column="29"/></name> <name pos:line="2" pos:column="30">long<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">base_size<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="46">enum<pos:position pos:line="2" pos:column="50"/></name> <name pos:line="2" pos:column="51">object_type<pos:position pos:line="2" pos:column="62"/></name></name></type> <name pos:line="2" pos:column="63">type<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">delta_base_cache_entry<pos:position pos:line="4" pos:column="38"/></name></name> <modifier pos:line="4" pos:column="39">*<pos:position pos:line="4" pos:column="40"/></modifier></type><name pos:line="4" pos:column="40">ent<pos:position pos:line="4" pos:column="43"/></name> <init pos:line="4" pos:column="44">= <expr><call><name pos:line="4" pos:column="46">xmalloc<pos:position pos:line="4" pos:column="53"/></name><argument_list pos:line="4" pos:column="53">(<argument><expr><sizeof pos:line="4" pos:column="54">sizeof<argument_list pos:line="4" pos:column="60">(<argument><expr><operator pos:line="4" pos:column="61">*<pos:position pos:line="4" pos:column="62"/></operator><name pos:line="4" pos:column="62">ent<pos:position pos:line="4" pos:column="65"/></name></expr></argument>)<pos:position pos:line="4" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="4" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="68"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">list_head<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">lru<pos:position pos:line="5" pos:column="30"/></name></decl>, <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="33">tmp<pos:position pos:line="5" pos:column="36"/></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">delta_base_cached<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">+=<pos:position pos:line="7" pos:column="29"/></operator> <name pos:line="7" pos:column="30">base_size<pos:position pos:line="7" pos:column="39"/></name></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>

	<macro><name pos:line="9" pos:column="9">list_for_each_safe<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument pos:line="9" pos:column="28">lru<pos:position pos:line="9" pos:column="31"/></argument>, <argument pos:line="9" pos:column="33">tmp<pos:position pos:line="9" pos:column="36"/></argument>, <argument pos:line="9" pos:column="38">&amp;delta_base_cache_lru<pos:position pos:line="9" pos:column="59"/></argument>)<pos:position pos:line="9" pos:column="60"/></argument_list></macro> <block pos:line="9" pos:column="61">{
		<decl_stmt><decl><type><name><name pos:line="10" pos:column="17">struct<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">delta_base_cache_entry<pos:position pos:line="10" pos:column="46"/></name></name> <modifier pos:line="10" pos:column="47">*<pos:position pos:line="10" pos:column="48"/></modifier></type><name pos:line="10" pos:column="48">f<pos:position pos:line="10" pos:column="49"/></name> <init pos:line="10" pos:column="50">=
			<expr><call><name pos:line="11" pos:column="25">list_entry<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><name pos:line="11" pos:column="36">lru<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr pos:line="11" pos:column="41">struct <name pos:line="11" pos:column="48">delta_base_cache_entry<pos:position pos:line="11" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="72">lru<pos:position pos:line="11" pos:column="75"/></name></expr></argument>)<pos:position pos:line="11" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="77"/></decl_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">delta_base_cached<pos:position pos:line="12" pos:column="38"/></name> <operator pos:line="12" pos:column="39">&lt;=<pos:position pos:line="12" pos:column="44"/></operator> <name pos:line="12" pos:column="42">delta_base_cache_limit<pos:position pos:line="12" pos:column="64"/></name></expr>)<pos:position pos:line="12" pos:column="65"/></condition><then pos:line="12" pos:column="65">
			<block type="pseudo"><break pos:line="13" pos:column="25">break;<pos:position pos:line="13" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">release_delta_base_cache<pos:position pos:line="14" pos:column="41"/></name><argument_list pos:line="14" pos:column="41">(<argument><expr><name pos:line="14" pos:column="42">f<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block>

	<expr_stmt><expr><name><name pos:line="17" pos:column="9">ent<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">key<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">.<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">p<pos:position pos:line="17" pos:column="19"/></name></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <name pos:line="17" pos:column="22">p<pos:position pos:line="17" pos:column="23"/></name></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">ent<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">key<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">.<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">base_offset<pos:position pos:line="18" pos:column="29"/></name></name> <operator pos:line="18" pos:column="30">=<pos:position pos:line="18" pos:column="31"/></operator> <name pos:line="18" pos:column="32">base_offset<pos:position pos:line="18" pos:column="43"/></name></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">ent<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">type<pos:position pos:line="19" pos:column="18"/></name></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">type<pos:position pos:line="19" pos:column="25"/></name></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">ent<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">-&gt;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="14">data<pos:position pos:line="20" pos:column="18"/></name></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">base<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">ent<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">size<pos:position pos:line="21" pos:column="18"/></name></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <name pos:line="21" pos:column="21">base_size<pos:position pos:line="21" pos:column="30"/></name></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">list_add_tail<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><operator pos:line="22" pos:column="23">&amp;<pos:position pos:line="22" pos:column="28"/></operator><name><name pos:line="22" pos:column="24">ent<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">-&gt;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="29">lru<pos:position pos:line="22" pos:column="32"/></name></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="34">&amp;<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="35">delta_base_cache_lru<pos:position pos:line="22" pos:column="55"/></name></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="57"/></expr_stmt>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><name><name pos:line="24" pos:column="14">delta_base_cache<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">.<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="31">cmpfn<pos:position pos:line="24" pos:column="36"/></name></name></expr>)<pos:position pos:line="24" pos:column="37"/></condition><then pos:line="24" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="17">hashmap_init<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><operator pos:line="25" pos:column="30">&amp;<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="31">delta_base_cache<pos:position pos:line="25" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="49">delta_base_cache_hash_cmp<pos:position pos:line="25" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="76">NULL<pos:position pos:line="25" pos:column="80"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="82">0<pos:position pos:line="25" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="85"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">hashmap_entry_init<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">ent<pos:position pos:line="26" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="33">pack_entry_hash<pos:position pos:line="26" pos:column="48"/></name><argument_list pos:line="26" pos:column="48">(<argument><expr><name pos:line="26" pos:column="49">p<pos:position pos:line="26" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="52">base_offset<pos:position pos:line="26" pos:column="63"/></name></expr></argument>)<pos:position pos:line="26" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="66"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">hashmap_add<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><operator pos:line="27" pos:column="21">&amp;<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="22">delta_base_cache<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="40">ent<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
