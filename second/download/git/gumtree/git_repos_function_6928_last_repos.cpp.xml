<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6928_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">compute_revents<pos:position pos:line="2" pos:column="16"/></name> <parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">int<pos:position pos:line="2" pos:column="21"/></name></type> <name pos:line="2" pos:column="22">fd<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="26">int<pos:position pos:line="2" pos:column="29"/></name></type> <name pos:line="2" pos:column="30">sought<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">fd_set<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">rfds<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">fd_set<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">wfds<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="66">fd_set<pos:position pos:line="2" pos:column="72"/></name> <modifier pos:line="2" pos:column="73">*<pos:position pos:line="2" pos:column="74"/></modifier></type><name pos:line="2" pos:column="74">efds<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">happened<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><literal type="number" pos:line="4" pos:column="18">0<pos:position pos:line="4" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><call><name pos:line="5" pos:column="7">FD_ISSET<pos:position pos:line="5" pos:column="15"/></name> <argument_list pos:line="5" pos:column="16">(<argument><expr><name pos:line="5" pos:column="17">fd<pos:position pos:line="5" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="21">rfds<pos:position pos:line="5" pos:column="25"/></name></expr></argument>)<pos:position pos:line="5" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="27"/></condition><then pos:line="5" pos:column="27">
    <block pos:line="6" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="7" pos:column="7">int<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">r<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="8" pos:column="7">int<pos:position pos:line="8" pos:column="10"/></name></type> <name pos:line="8" pos:column="11">socket_errno<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>

<cpp:if pos:line="10" pos:column="1"># <cpp:directive pos:line="10" pos:column="3">if<pos:position pos:line="10" pos:column="5"/></cpp:directive> <expr><name pos:line="10" pos:column="6">defined<pos:position pos:line="10" pos:column="13"/></name> <name pos:line="10" pos:column="14">__MACH__<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">&amp;&amp;<pos:position pos:line="10" pos:column="33"/></operator> <name pos:line="10" pos:column="26">defined<pos:position pos:line="10" pos:column="33"/></name> <name pos:line="10" pos:column="34">__APPLE__<pos:position pos:line="10" pos:column="43"/></name></expr></cpp:if>
      <comment type="block" pos:line="11" pos:column="7">/* There is a bug in Mac OS X that causes it to ignore MSG_PEEK
	 for some kinds of descriptors.  Detect if this descriptor is a
	 connected socket, a server socket, or something else using a
	 0-byte recv, and use ioctl(2) to detect POLLHUP.  */</comment>
      <expr_stmt><expr><name pos:line="15" pos:column="7">r<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">recv<pos:position pos:line="15" pos:column="15"/></name> <argument_list pos:line="15" pos:column="16">(<argument><expr><name pos:line="15" pos:column="17">fd<pos:position pos:line="15" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="21">NULL<pos:position pos:line="15" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="27">0<pos:position pos:line="15" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="30">MSG_PEEK<pos:position pos:line="15" pos:column="38"/></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name pos:line="16" pos:column="7">socket_errno<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <ternary><condition><expr><operator pos:line="16" pos:column="22">(<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">r<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">&lt;<pos:position pos:line="16" pos:column="29"/></operator> <literal type="number" pos:line="16" pos:column="27">0<pos:position pos:line="16" pos:column="28"/></literal><operator pos:line="16" pos:column="28">)<pos:position pos:line="16" pos:column="29"/></operator></expr> ?<pos:position pos:line="16" pos:column="31"/></condition><then pos:line="16" pos:column="31"> <expr><name pos:line="16" pos:column="32">errno<pos:position pos:line="16" pos:column="37"/></name></expr> <pos:position pos:line="16" pos:column="38"/></then><else pos:line="16" pos:column="38">: <expr><literal type="number" pos:line="16" pos:column="40">0<pos:position pos:line="16" pos:column="41"/></literal></expr></else></ternary></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
      <if pos:line="17" pos:column="7">if <condition pos:line="17" pos:column="10">(<expr><name pos:line="17" pos:column="11">r<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">==<pos:position pos:line="17" pos:column="15"/></operator> <literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal> <operator pos:line="17" pos:column="18">||<pos:position pos:line="17" pos:column="20"/></operator> <name pos:line="17" pos:column="21">socket_errno<pos:position pos:line="17" pos:column="33"/></name> <operator pos:line="17" pos:column="34">==<pos:position pos:line="17" pos:column="36"/></operator> <name pos:line="17" pos:column="37">ENOTSOCK<pos:position pos:line="17" pos:column="45"/></name></expr>)<pos:position pos:line="17" pos:column="46"/></condition><then pos:line="17" pos:column="46">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="9">ioctl<pos:position pos:line="18" pos:column="14"/></name> <argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">fd<pos:position pos:line="18" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="20">FIONREAD<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="30">&amp;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="31">r<pos:position pos:line="18" pos:column="32"/></name></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt></block></then></if>
<cpp:else pos:line="19" pos:column="1"># <cpp:directive pos:line="19" pos:column="3">else<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:else>
      <decl_stmt><decl><type><name pos:line="20" pos:column="7">char<pos:position pos:line="20" pos:column="11"/></name></type> <name><name pos:line="20" pos:column="12">data<pos:position pos:line="20" pos:column="16"/></name><index pos:line="20" pos:column="16">[<expr><literal type="number" pos:line="20" pos:column="17">64<pos:position pos:line="20" pos:column="19"/></literal></expr>]<pos:position pos:line="20" pos:column="20"/></index></name></decl>;<pos:position pos:line="20" pos:column="21"/></decl_stmt>
      <expr_stmt><expr><name pos:line="21" pos:column="7">r<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <call><name pos:line="21" pos:column="11">recv<pos:position pos:line="21" pos:column="15"/></name> <argument_list pos:line="21" pos:column="16">(<argument><expr><name pos:line="21" pos:column="17">fd<pos:position pos:line="21" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="21">data<pos:position pos:line="21" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="27">sizeof <argument_list pos:line="21" pos:column="34">(<argument><expr><name pos:line="21" pos:column="35">data<pos:position pos:line="21" pos:column="39"/></name></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="21" pos:column="42">MSG_PEEK<pos:position pos:line="21" pos:column="50"/></name></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><name pos:line="22" pos:column="7">socket_errno<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <ternary><condition><expr><operator pos:line="22" pos:column="22">(<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">r<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">&lt;<pos:position pos:line="22" pos:column="29"/></operator> <literal type="number" pos:line="22" pos:column="27">0<pos:position pos:line="22" pos:column="28"/></literal><operator pos:line="22" pos:column="28">)<pos:position pos:line="22" pos:column="29"/></operator></expr> ?<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31"> <expr><name pos:line="22" pos:column="32">errno<pos:position pos:line="22" pos:column="37"/></name></expr> <pos:position pos:line="22" pos:column="38"/></then><else pos:line="22" pos:column="38">: <expr><literal type="number" pos:line="22" pos:column="40">0<pos:position pos:line="22" pos:column="41"/></literal></expr></else></ternary></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="23" pos:column="1"># <cpp:directive pos:line="23" pos:column="3">endif<pos:position pos:line="23" pos:column="8"/></cpp:directive></cpp:endif>
      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><name pos:line="24" pos:column="11">r<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">==<pos:position pos:line="24" pos:column="15"/></operator> <literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>)<pos:position pos:line="24" pos:column="18"/></condition><then pos:line="24" pos:column="18">
	<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="9">happened<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">|=<pos:position pos:line="25" pos:column="20"/></operator> <name pos:line="25" pos:column="21">POLLHUP<pos:position pos:line="25" pos:column="28"/></name></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt></block></then>

      <comment type="block" pos:line="27" pos:column="7">/* If the event happened on an unconnected server socket,
	 that's fine. */</comment>
      <elseif pos:line="29" pos:column="7">else <if pos:line="29" pos:column="12">if <condition pos:line="29" pos:column="15">(<expr><name pos:line="29" pos:column="16">r<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">&gt;<pos:position pos:line="29" pos:column="22"/></operator> <literal type="number" pos:line="29" pos:column="20">0<pos:position pos:line="29" pos:column="21"/></literal> <operator pos:line="29" pos:column="22">||<pos:position pos:line="29" pos:column="24"/></operator> <operator pos:line="29" pos:column="25">(<pos:position pos:line="29" pos:column="26"/></operator> <comment type="block" pos:line="29" pos:column="27">/* (r == -1) &amp;&amp; */</comment> <name pos:line="29" pos:column="46">socket_errno<pos:position pos:line="29" pos:column="58"/></name> <operator pos:line="29" pos:column="59">==<pos:position pos:line="29" pos:column="61"/></operator> <name pos:line="29" pos:column="62">ENOTCONN<pos:position pos:line="29" pos:column="70"/></name><operator pos:line="29" pos:column="70">)<pos:position pos:line="29" pos:column="71"/></operator></expr>)<pos:position pos:line="29" pos:column="72"/></condition><then pos:line="29" pos:column="72">
	<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="9">happened<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">|=<pos:position pos:line="30" pos:column="20"/></operator> <operator pos:line="30" pos:column="21">(<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">POLLIN<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">|<pos:position pos:line="30" pos:column="30"/></operator> <name pos:line="30" pos:column="31">POLLRDNORM<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">)<pos:position pos:line="30" pos:column="42"/></operator> <operator pos:line="30" pos:column="43">&amp;<pos:position pos:line="30" pos:column="48"/></operator> <name pos:line="30" pos:column="45">sought<pos:position pos:line="30" pos:column="51"/></name></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt></block></then></if></elseif>

      <comment type="block" pos:line="32" pos:column="7">/* Distinguish hung-up sockets from other errors.  */</comment>
      <elseif pos:line="33" pos:column="7">else <if pos:line="33" pos:column="12">if <condition pos:line="33" pos:column="15">(<expr><name pos:line="33" pos:column="16">socket_errno<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">==<pos:position pos:line="33" pos:column="31"/></operator> <name pos:line="33" pos:column="32">ESHUTDOWN<pos:position pos:line="33" pos:column="41"/></name> <operator pos:line="33" pos:column="42">||<pos:position pos:line="33" pos:column="44"/></operator> <name pos:line="33" pos:column="45">socket_errno<pos:position pos:line="33" pos:column="57"/></name> <operator pos:line="33" pos:column="58">==<pos:position pos:line="33" pos:column="60"/></operator> <name pos:line="33" pos:column="61">ECONNRESET<pos:position pos:line="33" pos:column="71"/></name>
	       <operator pos:line="34" pos:column="16">||<pos:position pos:line="34" pos:column="18"/></operator> <name pos:line="34" pos:column="19">socket_errno<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">==<pos:position pos:line="34" pos:column="34"/></operator> <name pos:line="34" pos:column="35">ECONNABORTED<pos:position pos:line="34" pos:column="47"/></name> <operator pos:line="34" pos:column="48">||<pos:position pos:line="34" pos:column="50"/></operator> <name pos:line="34" pos:column="51">socket_errno<pos:position pos:line="34" pos:column="63"/></name> <operator pos:line="34" pos:column="64">==<pos:position pos:line="34" pos:column="66"/></operator> <name pos:line="34" pos:column="67">ENETRESET<pos:position pos:line="34" pos:column="76"/></name></expr>)<pos:position pos:line="34" pos:column="77"/></condition><then pos:line="34" pos:column="77">
	<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="9">happened<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">|=<pos:position pos:line="35" pos:column="20"/></operator> <name pos:line="35" pos:column="21">POLLHUP<pos:position pos:line="35" pos:column="28"/></name></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt></block></then></if></elseif>

      <comment type="block" pos:line="37" pos:column="7">/* some systems can't use recv() on non-socket, including HP NonStop */</comment>
      <elseif pos:line="38" pos:column="7">else <if pos:line="38" pos:column="12">if <condition pos:line="38" pos:column="15">(<comment type="block" pos:line="38" pos:column="16">/* (r == -1) &amp;&amp; */</comment> <expr><name pos:line="38" pos:column="35">socket_errno<pos:position pos:line="38" pos:column="47"/></name> <operator pos:line="38" pos:column="48">==<pos:position pos:line="38" pos:column="50"/></operator> <name pos:line="38" pos:column="51">ENOTSOCK<pos:position pos:line="38" pos:column="59"/></name></expr>)<pos:position pos:line="38" pos:column="60"/></condition><then pos:line="38" pos:column="60">
	<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="9">happened<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">|=<pos:position pos:line="39" pos:column="20"/></operator> <operator pos:line="39" pos:column="21">(<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">POLLIN<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">|<pos:position pos:line="39" pos:column="30"/></operator> <name pos:line="39" pos:column="31">POLLRDNORM<pos:position pos:line="39" pos:column="41"/></name><operator pos:line="39" pos:column="41">)<pos:position pos:line="39" pos:column="42"/></operator> <operator pos:line="39" pos:column="43">&amp;<pos:position pos:line="39" pos:column="48"/></operator> <name pos:line="39" pos:column="45">sought<pos:position pos:line="39" pos:column="51"/></name></expr>;<pos:position pos:line="39" pos:column="52"/></expr_stmt></block></then></if></elseif>

      <else pos:line="41" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="9">happened<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">|=<pos:position pos:line="42" pos:column="20"/></operator> <name pos:line="42" pos:column="21">POLLERR<pos:position pos:line="42" pos:column="28"/></name></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt></block></else></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><call><name pos:line="45" pos:column="7">FD_ISSET<pos:position pos:line="45" pos:column="15"/></name> <argument_list pos:line="45" pos:column="16">(<argument><expr><name pos:line="45" pos:column="17">fd<pos:position pos:line="45" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="21">wfds<pos:position pos:line="45" pos:column="25"/></name></expr></argument>)<pos:position pos:line="45" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="27"/></condition><then pos:line="45" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="5">happened<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">|=<pos:position pos:line="46" pos:column="16"/></operator> <operator pos:line="46" pos:column="17">(<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="18">POLLOUT<pos:position pos:line="46" pos:column="25"/></name> <operator pos:line="46" pos:column="26">|<pos:position pos:line="46" pos:column="27"/></operator> <name pos:line="46" pos:column="28">POLLWRNORM<pos:position pos:line="46" pos:column="38"/></name> <operator pos:line="46" pos:column="39">|<pos:position pos:line="46" pos:column="40"/></operator> <name pos:line="46" pos:column="41">POLLWRBAND<pos:position pos:line="46" pos:column="51"/></name><operator pos:line="46" pos:column="51">)<pos:position pos:line="46" pos:column="52"/></operator> <operator pos:line="46" pos:column="53">&amp;<pos:position pos:line="46" pos:column="58"/></operator> <name pos:line="46" pos:column="55">sought<pos:position pos:line="46" pos:column="61"/></name></expr>;<pos:position pos:line="46" pos:column="62"/></expr_stmt></block></then></if>

  <if pos:line="48" pos:column="3">if <condition pos:line="48" pos:column="6">(<expr><call><name pos:line="48" pos:column="7">FD_ISSET<pos:position pos:line="48" pos:column="15"/></name> <argument_list pos:line="48" pos:column="16">(<argument><expr><name pos:line="48" pos:column="17">fd<pos:position pos:line="48" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="21">efds<pos:position pos:line="48" pos:column="25"/></name></expr></argument>)<pos:position pos:line="48" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="27"/></condition><then pos:line="48" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="5">happened<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">|=<pos:position pos:line="49" pos:column="16"/></operator> <operator pos:line="49" pos:column="17">(<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">POLLPRI<pos:position pos:line="49" pos:column="25"/></name> <operator pos:line="49" pos:column="26">|<pos:position pos:line="49" pos:column="27"/></operator> <name pos:line="49" pos:column="28">POLLRDBAND<pos:position pos:line="49" pos:column="38"/></name><operator pos:line="49" pos:column="38">)<pos:position pos:line="49" pos:column="39"/></operator> <operator pos:line="49" pos:column="40">&amp;<pos:position pos:line="49" pos:column="45"/></operator> <name pos:line="49" pos:column="42">sought<pos:position pos:line="49" pos:column="48"/></name></expr>;<pos:position pos:line="49" pos:column="49"/></expr_stmt></block></then></if>

  <return pos:line="51" pos:column="3">return <expr><name pos:line="51" pos:column="10">happened<pos:position pos:line="51" pos:column="18"/></name></expr>;<pos:position pos:line="51" pos:column="19"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
