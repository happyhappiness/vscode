<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5270_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">pid_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">mingw_spawnve_fd<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">cmd<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier><modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">argv<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier><modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">env<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">dir<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="3" pos:column="31">int<pos:position pos:line="3" pos:column="34"/></name></type> <name pos:line="3" pos:column="35">prepend_cmd<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="48">int<pos:position pos:line="3" pos:column="51"/></name></type> <name pos:line="3" pos:column="52">fhin<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="58">int<pos:position pos:line="3" pos:column="61"/></name></type> <name pos:line="3" pos:column="62">fhout<pos:position pos:line="3" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="69">int<pos:position pos:line="3" pos:column="72"/></name></type> <name pos:line="3" pos:column="73">fherr<pos:position pos:line="3" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="79"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">STARTUPINFO<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">si<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">PROCESS_INFORMATION<pos:position pos:line="6" pos:column="28"/></name></type> <name pos:line="6" pos:column="29">pi<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">envblk<pos:position pos:line="7" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="31">args<pos:position pos:line="7" pos:column="35"/></name></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">flags<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">BOOL<pos:position pos:line="9" pos:column="13"/></name></type> <name pos:line="9" pos:column="14">ret<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>

	<comment type="block" pos:line="11" pos:column="9">/* Determine whether or not we are associated to a console */</comment>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">HANDLE<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">cons<pos:position pos:line="12" pos:column="20"/></name> <init pos:line="12" pos:column="21">= <expr><call><name pos:line="12" pos:column="23">CreateFile<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><literal type="string" pos:line="12" pos:column="34">"CONOUT$"<pos:position pos:line="12" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">GENERIC_WRITE<pos:position pos:line="12" pos:column="58"/></name></expr></argument>,
			<argument><expr><name pos:line="13" pos:column="25">FILE_SHARE_WRITE<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="43">NULL<pos:position pos:line="13" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="49">OPEN_EXISTING<pos:position pos:line="13" pos:column="62"/></name></expr></argument>,
			<argument><expr><name pos:line="14" pos:column="25">FILE_ATTRIBUTE_NORMAL<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="48">NULL<pos:position pos:line="14" pos:column="52"/></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="54"/></decl_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">cons<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">==<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">INVALID_HANDLE_VALUE<pos:position pos:line="15" pos:column="41"/></name></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42"> <block pos:line="15" pos:column="43">{
		<comment type="block" pos:line="16" pos:column="17">/* There is no console associated with this process.
		 * Since the child is a console process, Windows
		 * would normally create a console window. But
		 * since we'll be redirecting std streams, we do
		 * not need the console.
		 * It is necessary to use DETACHED_PROCESS
		 * instead of CREATE_NO_WINDOW to make ssh
		 * recognize that it has no console.
		 */</comment>
		<expr_stmt><expr><name pos:line="25" pos:column="17">flags<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">=<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="25">DETACHED_PROCESS<pos:position pos:line="25" pos:column="41"/></name></expr>;<pos:position pos:line="25" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></then> <else pos:line="26" pos:column="11">else <block pos:line="26" pos:column="16">{
		<comment type="block" pos:line="27" pos:column="17">/* There is already a console. If we specified
		 * DETACHED_PROCESS here, too, Windows would
		 * disassociate the child from the console.
		 * The same is true for CREATE_NO_WINDOW.
		 * Go figure!
		 */</comment>
		<expr_stmt><expr><name pos:line="33" pos:column="17">flags<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">=<pos:position pos:line="33" pos:column="24"/></operator> <literal type="number" pos:line="33" pos:column="25">0<pos:position pos:line="33" pos:column="26"/></literal></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">CloseHandle<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><name pos:line="34" pos:column="29">cons<pos:position pos:line="34" pos:column="33"/></name></expr></argument>)<pos:position pos:line="34" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">memset<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><operator pos:line="36" pos:column="16">&amp;<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="17">si<pos:position pos:line="36" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="21">0<pos:position pos:line="36" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="24">sizeof<argument_list pos:line="36" pos:column="30">(<argument><expr><name pos:line="36" pos:column="31">si<pos:position pos:line="36" pos:column="33"/></name></expr></argument>)<pos:position pos:line="36" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">si<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">.<pos:position pos:line="37" pos:column="12"/></operator><name pos:line="37" pos:column="12">cb<pos:position pos:line="37" pos:column="14"/></name></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <sizeof pos:line="37" pos:column="17">sizeof<argument_list pos:line="37" pos:column="23">(<argument><expr><name pos:line="37" pos:column="24">si<pos:position pos:line="37" pos:column="26"/></name></expr></argument>)<pos:position pos:line="37" pos:column="27"/></argument_list></sizeof></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="38" pos:column="9">si<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">.<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="12">dwFlags<pos:position pos:line="38" pos:column="19"/></name></name> <operator pos:line="38" pos:column="20">=<pos:position pos:line="38" pos:column="21"/></operator> <name pos:line="38" pos:column="22">STARTF_USESTDHANDLES<pos:position pos:line="38" pos:column="42"/></name></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="39" pos:column="9">si<pos:position pos:line="39" pos:column="11"/></name><operator pos:line="39" pos:column="11">.<pos:position pos:line="39" pos:column="12"/></operator><name pos:line="39" pos:column="12">hStdInput<pos:position pos:line="39" pos:column="21"/></name></name> <operator pos:line="39" pos:column="22">=<pos:position pos:line="39" pos:column="23"/></operator> <operator pos:line="39" pos:column="24">(<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="25">HANDLE<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">)<pos:position pos:line="39" pos:column="32"/></operator> <call><name pos:line="39" pos:column="33">_get_osfhandle<pos:position pos:line="39" pos:column="47"/></name><argument_list pos:line="39" pos:column="47">(<argument><expr><name pos:line="39" pos:column="48">fhin<pos:position pos:line="39" pos:column="52"/></name></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">si<pos:position pos:line="40" pos:column="11"/></name><operator pos:line="40" pos:column="11">.<pos:position pos:line="40" pos:column="12"/></operator><name pos:line="40" pos:column="12">hStdOutput<pos:position pos:line="40" pos:column="22"/></name></name> <operator pos:line="40" pos:column="23">=<pos:position pos:line="40" pos:column="24"/></operator> <operator pos:line="40" pos:column="25">(<pos:position pos:line="40" pos:column="26"/></operator><name pos:line="40" pos:column="26">HANDLE<pos:position pos:line="40" pos:column="32"/></name><operator pos:line="40" pos:column="32">)<pos:position pos:line="40" pos:column="33"/></operator> <call><name pos:line="40" pos:column="34">_get_osfhandle<pos:position pos:line="40" pos:column="48"/></name><argument_list pos:line="40" pos:column="48">(<argument><expr><name pos:line="40" pos:column="49">fhout<pos:position pos:line="40" pos:column="54"/></name></expr></argument>)<pos:position pos:line="40" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="41" pos:column="9">si<pos:position pos:line="41" pos:column="11"/></name><operator pos:line="41" pos:column="11">.<pos:position pos:line="41" pos:column="12"/></operator><name pos:line="41" pos:column="12">hStdError<pos:position pos:line="41" pos:column="21"/></name></name> <operator pos:line="41" pos:column="22">=<pos:position pos:line="41" pos:column="23"/></operator> <operator pos:line="41" pos:column="24">(<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="25">HANDLE<pos:position pos:line="41" pos:column="31"/></name><operator pos:line="41" pos:column="31">)<pos:position pos:line="41" pos:column="32"/></operator> <call><name pos:line="41" pos:column="33">_get_osfhandle<pos:position pos:line="41" pos:column="47"/></name><argument_list pos:line="41" pos:column="47">(<argument><expr><name pos:line="41" pos:column="48">fherr<pos:position pos:line="41" pos:column="53"/></name></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="55"/></expr_stmt>

	<comment type="block" pos:line="43" pos:column="9">/* concatenate argv, quoting args as we go */</comment>
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">strbuf_init<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><operator pos:line="44" pos:column="21">&amp;<pos:position pos:line="44" pos:column="26"/></operator><name pos:line="44" pos:column="22">args<pos:position pos:line="44" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="28">0<pos:position pos:line="44" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="31"/></expr_stmt>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">prepend_cmd<pos:position pos:line="45" pos:column="24"/></name></expr>)<pos:position pos:line="45" pos:column="25"/></condition><then pos:line="45" pos:column="25"> <block pos:line="45" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="46" pos:column="17">char<pos:position pos:line="46" pos:column="21"/></name> <modifier pos:line="46" pos:column="22">*<pos:position pos:line="46" pos:column="23"/></modifier></type><name pos:line="46" pos:column="23">quoted<pos:position pos:line="46" pos:column="29"/></name> <init pos:line="46" pos:column="30">= <expr><operator pos:line="46" pos:column="32">(<pos:position pos:line="46" pos:column="33"/></operator><name pos:line="46" pos:column="33">char<pos:position pos:line="46" pos:column="37"/></name> <operator pos:line="46" pos:column="38">*<pos:position pos:line="46" pos:column="39"/></operator><operator pos:line="46" pos:column="39">)<pos:position pos:line="46" pos:column="40"/></operator><call><name pos:line="46" pos:column="40">quote_arg<pos:position pos:line="46" pos:column="49"/></name><argument_list pos:line="46" pos:column="49">(<argument><expr><name pos:line="46" pos:column="50">cmd<pos:position pos:line="46" pos:column="53"/></name></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="55"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">strbuf_addstr<pos:position pos:line="47" pos:column="30"/></name><argument_list pos:line="47" pos:column="30">(<argument><expr><operator pos:line="47" pos:column="31">&amp;<pos:position pos:line="47" pos:column="36"/></operator><name pos:line="47" pos:column="32">args<pos:position pos:line="47" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="38">quoted<pos:position pos:line="47" pos:column="44"/></name></expr></argument>)<pos:position pos:line="47" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="46"/></expr_stmt>
		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><name pos:line="48" pos:column="21">quoted<pos:position pos:line="48" pos:column="27"/></name> <operator pos:line="48" pos:column="28">!=<pos:position pos:line="48" pos:column="30"/></operator> <name pos:line="48" pos:column="31">cmd<pos:position pos:line="48" pos:column="34"/></name></expr>)<pos:position pos:line="48" pos:column="35"/></condition><then pos:line="48" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="25">free<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">quoted<pos:position pos:line="49" pos:column="36"/></name></expr></argument>)<pos:position pos:line="49" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt></block></then></if>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>
	<for pos:line="51" pos:column="9">for <control pos:line="51" pos:column="13">(<init pos:line="51" pos:column="14">;<pos:position pos:line="51" pos:column="15"/></init> <condition><expr><operator pos:line="51" pos:column="16">*<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="17">argv<pos:position pos:line="51" pos:column="21"/></name></expr>;<pos:position pos:line="51" pos:column="22"/></condition> <incr><expr><name pos:line="51" pos:column="23">argv<pos:position pos:line="51" pos:column="27"/></name><operator pos:line="51" pos:column="27">++<pos:position pos:line="51" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="51" pos:column="30"/></control> <block pos:line="51" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">char<pos:position pos:line="52" pos:column="21"/></name> <modifier pos:line="52" pos:column="22">*<pos:position pos:line="52" pos:column="23"/></modifier></type><name pos:line="52" pos:column="23">quoted<pos:position pos:line="52" pos:column="29"/></name> <init pos:line="52" pos:column="30">= <expr><operator pos:line="52" pos:column="32">(<pos:position pos:line="52" pos:column="33"/></operator><name pos:line="52" pos:column="33">char<pos:position pos:line="52" pos:column="37"/></name> <operator pos:line="52" pos:column="38">*<pos:position pos:line="52" pos:column="39"/></operator><operator pos:line="52" pos:column="39">)<pos:position pos:line="52" pos:column="40"/></operator><call><name pos:line="52" pos:column="40">quote_arg<pos:position pos:line="52" pos:column="49"/></name><argument_list pos:line="52" pos:column="49">(<argument><expr><operator pos:line="52" pos:column="50">*<pos:position pos:line="52" pos:column="51"/></operator><name pos:line="52" pos:column="51">argv<pos:position pos:line="52" pos:column="55"/></name></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="52" pos:column="57"/></decl_stmt>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><operator pos:line="53" pos:column="21">*<pos:position pos:line="53" pos:column="22"/></operator><name><name pos:line="53" pos:column="22">args<pos:position pos:line="53" pos:column="26"/></name><operator pos:line="53" pos:column="26">.<pos:position pos:line="53" pos:column="27"/></operator><name pos:line="53" pos:column="27">buf<pos:position pos:line="53" pos:column="30"/></name></name></expr>)<pos:position pos:line="53" pos:column="31"/></condition><then pos:line="53" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="25">strbuf_addch<pos:position pos:line="54" pos:column="37"/></name><argument_list pos:line="54" pos:column="37">(<argument><expr><operator pos:line="54" pos:column="38">&amp;<pos:position pos:line="54" pos:column="43"/></operator><name pos:line="54" pos:column="39">args<pos:position pos:line="54" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="54" pos:column="45">' '<pos:position pos:line="54" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="50"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">strbuf_addstr<pos:position pos:line="55" pos:column="30"/></name><argument_list pos:line="55" pos:column="30">(<argument><expr><operator pos:line="55" pos:column="31">&amp;<pos:position pos:line="55" pos:column="36"/></operator><name pos:line="55" pos:column="32">args<pos:position pos:line="55" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="38">quoted<pos:position pos:line="55" pos:column="44"/></name></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="46"/></expr_stmt>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">quoted<pos:position pos:line="56" pos:column="27"/></name> <operator pos:line="56" pos:column="28">!=<pos:position pos:line="56" pos:column="30"/></operator> <operator pos:line="56" pos:column="31">*<pos:position pos:line="56" pos:column="32"/></operator><name pos:line="56" pos:column="32">argv<pos:position pos:line="56" pos:column="36"/></name></expr>)<pos:position pos:line="56" pos:column="37"/></condition><then pos:line="56" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="25">free<pos:position pos:line="57" pos:column="29"/></name><argument_list pos:line="57" pos:column="29">(<argument><expr><name pos:line="57" pos:column="30">quoted<pos:position pos:line="57" pos:column="36"/></name></expr></argument>)<pos:position pos:line="57" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="38"/></expr_stmt></block></then></if>
	}<pos:position pos:line="58" pos:column="10"/></block></for>

	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">env<pos:position pos:line="60" pos:column="16"/></name></expr>)<pos:position pos:line="60" pos:column="17"/></condition><then pos:line="60" pos:column="17"> <block pos:line="60" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="61" pos:column="17">int<pos:position pos:line="61" pos:column="20"/></name></type> <name pos:line="61" pos:column="21">count<pos:position pos:line="61" pos:column="26"/></name> <init pos:line="61" pos:column="27">= <expr><literal type="number" pos:line="61" pos:column="29">0<pos:position pos:line="61" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="61" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="62" pos:column="17">char<pos:position pos:line="62" pos:column="21"/></name> <modifier pos:line="62" pos:column="22">*<pos:position pos:line="62" pos:column="23"/></modifier><modifier pos:line="62" pos:column="23">*<pos:position pos:line="62" pos:column="24"/></modifier></type><name pos:line="62" pos:column="24">e<pos:position pos:line="62" pos:column="25"/></name></decl>, <modifier pos:line="62" pos:column="27">*<pos:position pos:line="62" pos:column="28"/></modifier><modifier pos:line="62" pos:column="28">*<pos:position pos:line="62" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="62" pos:column="29">sorted_env<pos:position pos:line="62" pos:column="39"/></name></decl>;<pos:position pos:line="62" pos:column="40"/></decl_stmt>

		<for pos:line="64" pos:column="17">for <control pos:line="64" pos:column="21">(<init><expr><name pos:line="64" pos:column="22">e<pos:position pos:line="64" pos:column="23"/></name> <operator pos:line="64" pos:column="24">=<pos:position pos:line="64" pos:column="25"/></operator> <name pos:line="64" pos:column="26">env<pos:position pos:line="64" pos:column="29"/></name></expr>;<pos:position pos:line="64" pos:column="30"/></init> <condition><expr><operator pos:line="64" pos:column="31">*<pos:position pos:line="64" pos:column="32"/></operator><name pos:line="64" pos:column="32">e<pos:position pos:line="64" pos:column="33"/></name></expr>;<pos:position pos:line="64" pos:column="34"/></condition> <incr><expr><name pos:line="64" pos:column="35">e<pos:position pos:line="64" pos:column="36"/></name><operator pos:line="64" pos:column="36">++<pos:position pos:line="64" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="64" pos:column="39"/></control>
			<block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="25">count<pos:position pos:line="65" pos:column="30"/></name><operator pos:line="65" pos:column="30">++<pos:position pos:line="65" pos:column="32"/></operator></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt></block></for>

		<comment type="block" pos:line="67" pos:column="17">/* environment must be sorted */</comment>
		<expr_stmt><expr><name pos:line="68" pos:column="17">sorted_env<pos:position pos:line="68" pos:column="27"/></name> <operator pos:line="68" pos:column="28">=<pos:position pos:line="68" pos:column="29"/></operator> <call><name pos:line="68" pos:column="30">xmalloc<pos:position pos:line="68" pos:column="37"/></name><argument_list pos:line="68" pos:column="37">(<argument><expr><sizeof pos:line="68" pos:column="38">sizeof<argument_list pos:line="68" pos:column="44">(<argument><expr><operator pos:line="68" pos:column="45">*<pos:position pos:line="68" pos:column="46"/></operator><name pos:line="68" pos:column="46">sorted_env<pos:position pos:line="68" pos:column="56"/></name></expr></argument>)<pos:position pos:line="68" pos:column="57"/></argument_list></sizeof> <operator pos:line="68" pos:column="58">*<pos:position pos:line="68" pos:column="59"/></operator> <operator pos:line="68" pos:column="60">(<pos:position pos:line="68" pos:column="61"/></operator><name pos:line="68" pos:column="61">count<pos:position pos:line="68" pos:column="66"/></name> <operator pos:line="68" pos:column="67">+<pos:position pos:line="68" pos:column="68"/></operator> <literal type="number" pos:line="68" pos:column="69">1<pos:position pos:line="68" pos:column="70"/></literal><operator pos:line="68" pos:column="70">)<pos:position pos:line="68" pos:column="71"/></operator></expr></argument>)<pos:position pos:line="68" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="73"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">memcpy<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><name pos:line="69" pos:column="24">sorted_env<pos:position pos:line="69" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="36">env<pos:position pos:line="69" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="69" pos:column="41">sizeof<argument_list pos:line="69" pos:column="47">(<argument><expr><operator pos:line="69" pos:column="48">*<pos:position pos:line="69" pos:column="49"/></operator><name pos:line="69" pos:column="49">sorted_env<pos:position pos:line="69" pos:column="59"/></name></expr></argument>)<pos:position pos:line="69" pos:column="60"/></argument_list></sizeof> <operator pos:line="69" pos:column="61">*<pos:position pos:line="69" pos:column="62"/></operator> <operator pos:line="69" pos:column="63">(<pos:position pos:line="69" pos:column="64"/></operator><name pos:line="69" pos:column="64">count<pos:position pos:line="69" pos:column="69"/></name> <operator pos:line="69" pos:column="70">+<pos:position pos:line="69" pos:column="71"/></operator> <literal type="number" pos:line="69" pos:column="72">1<pos:position pos:line="69" pos:column="73"/></literal><operator pos:line="69" pos:column="73">)<pos:position pos:line="69" pos:column="74"/></operator></expr></argument>)<pos:position pos:line="69" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">qsort<pos:position pos:line="70" pos:column="22"/></name><argument_list pos:line="70" pos:column="22">(<argument><expr><name pos:line="70" pos:column="23">sorted_env<pos:position pos:line="70" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="35">count<pos:position pos:line="70" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="70" pos:column="42">sizeof<argument_list pos:line="70" pos:column="48">(<argument><expr><operator pos:line="70" pos:column="49">*<pos:position pos:line="70" pos:column="50"/></operator><name pos:line="70" pos:column="50">sorted_env<pos:position pos:line="70" pos:column="60"/></name></expr></argument>)<pos:position pos:line="70" pos:column="61"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="70" pos:column="63">env_compare<pos:position pos:line="70" pos:column="74"/></name></expr></argument>)<pos:position pos:line="70" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="76"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="72" pos:column="17">strbuf_init<pos:position pos:line="72" pos:column="28"/></name><argument_list pos:line="72" pos:column="28">(<argument><expr><operator pos:line="72" pos:column="29">&amp;<pos:position pos:line="72" pos:column="34"/></operator><name pos:line="72" pos:column="30">envblk<pos:position pos:line="72" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="38">0<pos:position pos:line="72" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="41"/></expr_stmt>
		<for pos:line="73" pos:column="17">for <control pos:line="73" pos:column="21">(<init><expr><name pos:line="73" pos:column="22">e<pos:position pos:line="73" pos:column="23"/></name> <operator pos:line="73" pos:column="24">=<pos:position pos:line="73" pos:column="25"/></operator> <name pos:line="73" pos:column="26">sorted_env<pos:position pos:line="73" pos:column="36"/></name></expr>;<pos:position pos:line="73" pos:column="37"/></init> <condition><expr><operator pos:line="73" pos:column="38">*<pos:position pos:line="73" pos:column="39"/></operator><name pos:line="73" pos:column="39">e<pos:position pos:line="73" pos:column="40"/></name></expr>;<pos:position pos:line="73" pos:column="41"/></condition> <incr><expr><name pos:line="73" pos:column="42">e<pos:position pos:line="73" pos:column="43"/></name><operator pos:line="73" pos:column="43">++<pos:position pos:line="73" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="73" pos:column="46"/></control> <block pos:line="73" pos:column="47">{
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">strbuf_addstr<pos:position pos:line="74" pos:column="38"/></name><argument_list pos:line="74" pos:column="38">(<argument><expr><operator pos:line="74" pos:column="39">&amp;<pos:position pos:line="74" pos:column="44"/></operator><name pos:line="74" pos:column="40">envblk<pos:position pos:line="74" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="48">*<pos:position pos:line="74" pos:column="49"/></operator><name pos:line="74" pos:column="49">e<pos:position pos:line="74" pos:column="50"/></name></expr></argument>)<pos:position pos:line="74" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="75" pos:column="25">strbuf_addch<pos:position pos:line="75" pos:column="37"/></name><argument_list pos:line="75" pos:column="37">(<argument><expr><operator pos:line="75" pos:column="38">&amp;<pos:position pos:line="75" pos:column="43"/></operator><name pos:line="75" pos:column="39">envblk<pos:position pos:line="75" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="75" pos:column="47">'\0'<pos:position pos:line="75" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="76" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="77" pos:column="17">free<pos:position pos:line="77" pos:column="21"/></name><argument_list pos:line="77" pos:column="21">(<argument><expr><name pos:line="77" pos:column="22">sorted_env<pos:position pos:line="77" pos:column="32"/></name></expr></argument>)<pos:position pos:line="77" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="78" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="80" pos:column="9">memset<pos:position pos:line="80" pos:column="15"/></name><argument_list pos:line="80" pos:column="15">(<argument><expr><operator pos:line="80" pos:column="16">&amp;<pos:position pos:line="80" pos:column="21"/></operator><name pos:line="80" pos:column="17">pi<pos:position pos:line="80" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="21">0<pos:position pos:line="80" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="80" pos:column="24">sizeof<argument_list pos:line="80" pos:column="30">(<argument><expr><name pos:line="80" pos:column="31">pi<pos:position pos:line="80" pos:column="33"/></name></expr></argument>)<pos:position pos:line="80" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="80" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="81" pos:column="9">ret<pos:position pos:line="81" pos:column="12"/></name> <operator pos:line="81" pos:column="13">=<pos:position pos:line="81" pos:column="14"/></operator> <call><name pos:line="81" pos:column="15">CreateProcess<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">(<argument><expr><name pos:line="81" pos:column="29">cmd<pos:position pos:line="81" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="34">args<pos:position pos:line="81" pos:column="38"/></name><operator pos:line="81" pos:column="38">.<pos:position pos:line="81" pos:column="39"/></operator><name pos:line="81" pos:column="39">buf<pos:position pos:line="81" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="44">NULL<pos:position pos:line="81" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="50">NULL<pos:position pos:line="81" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="56">TRUE<pos:position pos:line="81" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="62">flags<pos:position pos:line="81" pos:column="67"/></name></expr></argument>,
		<argument><expr><ternary><condition><expr><name pos:line="82" pos:column="17">env<pos:position pos:line="82" pos:column="20"/></name></expr> ?<pos:position pos:line="82" pos:column="22"/></condition><then pos:line="82" pos:column="22"> <expr><name><name pos:line="82" pos:column="23">envblk<pos:position pos:line="82" pos:column="29"/></name><operator pos:line="82" pos:column="29">.<pos:position pos:line="82" pos:column="30"/></operator><name pos:line="82" pos:column="30">buf<pos:position pos:line="82" pos:column="33"/></name></name></expr> <pos:position pos:line="82" pos:column="34"/></then><else pos:line="82" pos:column="34">: <expr><name pos:line="82" pos:column="36">NULL<pos:position pos:line="82" pos:column="40"/></name></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="82" pos:column="42">dir<pos:position pos:line="82" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="47">&amp;<pos:position pos:line="82" pos:column="52"/></operator><name pos:line="82" pos:column="48">si<pos:position pos:line="82" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="52">&amp;<pos:position pos:line="82" pos:column="57"/></operator><name pos:line="82" pos:column="53">pi<pos:position pos:line="82" pos:column="55"/></name></expr></argument>)<pos:position pos:line="82" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="57"/></expr_stmt>

	<if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name pos:line="84" pos:column="13">env<pos:position pos:line="84" pos:column="16"/></name></expr>)<pos:position pos:line="84" pos:column="17"/></condition><then pos:line="84" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="17">strbuf_release<pos:position pos:line="85" pos:column="31"/></name><argument_list pos:line="85" pos:column="31">(<argument><expr><operator pos:line="85" pos:column="32">&amp;<pos:position pos:line="85" pos:column="37"/></operator><name pos:line="85" pos:column="33">envblk<pos:position pos:line="85" pos:column="39"/></name></expr></argument>)<pos:position pos:line="85" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="41"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="86" pos:column="9">strbuf_release<pos:position pos:line="86" pos:column="23"/></name><argument_list pos:line="86" pos:column="23">(<argument><expr><operator pos:line="86" pos:column="24">&amp;<pos:position pos:line="86" pos:column="29"/></operator><name pos:line="86" pos:column="25">args<pos:position pos:line="86" pos:column="29"/></name></expr></argument>)<pos:position pos:line="86" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="31"/></expr_stmt>

	<if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><operator pos:line="88" pos:column="13">!<pos:position pos:line="88" pos:column="14"/></operator><name pos:line="88" pos:column="14">ret<pos:position pos:line="88" pos:column="17"/></name></expr>)<pos:position pos:line="88" pos:column="18"/></condition><then pos:line="88" pos:column="18"> <block pos:line="88" pos:column="19">{
		<expr_stmt><expr><name pos:line="89" pos:column="17">errno<pos:position pos:line="89" pos:column="22"/></name> <operator pos:line="89" pos:column="23">=<pos:position pos:line="89" pos:column="24"/></operator> <name pos:line="89" pos:column="25">ENOENT<pos:position pos:line="89" pos:column="31"/></name></expr>;<pos:position pos:line="89" pos:column="32"/></expr_stmt>
		<return pos:line="90" pos:column="17">return <expr><operator pos:line="90" pos:column="24">-<pos:position pos:line="90" pos:column="25"/></operator><literal type="number" pos:line="90" pos:column="25">1<pos:position pos:line="90" pos:column="26"/></literal></expr>;<pos:position pos:line="90" pos:column="27"/></return>
	}<pos:position pos:line="91" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="92" pos:column="9">CloseHandle<pos:position pos:line="92" pos:column="20"/></name><argument_list pos:line="92" pos:column="20">(<argument><expr><name><name pos:line="92" pos:column="21">pi<pos:position pos:line="92" pos:column="23"/></name><operator pos:line="92" pos:column="23">.<pos:position pos:line="92" pos:column="24"/></operator><name pos:line="92" pos:column="24">hThread<pos:position pos:line="92" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="33"/></expr_stmt>

	<comment type="block" pos:line="94" pos:column="9">/*
	 * The process ID is the human-readable identifier of the process
	 * that we want to present in log and error messages. The handle
	 * is not useful for this purpose. But we cannot close it, either,
	 * because it is not possible to turn a process ID into a process
	 * handle after the process terminated.
	 * Keep the handle in a list for waitpid.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="102" pos:column="9">EnterCriticalSection<pos:position pos:line="102" pos:column="29"/></name><argument_list pos:line="102" pos:column="29">(<argument><expr><operator pos:line="102" pos:column="30">&amp;<pos:position pos:line="102" pos:column="35"/></operator><name pos:line="102" pos:column="31">pinfo_cs<pos:position pos:line="102" pos:column="39"/></name></expr></argument>)<pos:position pos:line="102" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="41"/></expr_stmt>
	<block pos:line="103" pos:column="9">{
		<decl_stmt><decl><type><name><name pos:line="104" pos:column="17">struct<pos:position pos:line="104" pos:column="23"/></name> <name pos:line="104" pos:column="24">pinfo_t<pos:position pos:line="104" pos:column="31"/></name></name> <modifier pos:line="104" pos:column="32">*<pos:position pos:line="104" pos:column="33"/></modifier></type><name pos:line="104" pos:column="33">info<pos:position pos:line="104" pos:column="37"/></name> <init pos:line="104" pos:column="38">= <expr><call><name pos:line="104" pos:column="40">xmalloc<pos:position pos:line="104" pos:column="47"/></name><argument_list pos:line="104" pos:column="47">(<argument><expr><sizeof pos:line="104" pos:column="48">sizeof<argument_list pos:line="104" pos:column="54">(<argument><expr pos:line="104" pos:column="55">struct <name pos:line="104" pos:column="62">pinfo_t<pos:position pos:line="104" pos:column="69"/></name></expr></argument>)<pos:position pos:line="104" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="104" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="104" pos:column="72"/></decl_stmt>
		<expr_stmt><expr><name><name pos:line="105" pos:column="17">info<pos:position pos:line="105" pos:column="21"/></name><operator pos:line="105" pos:column="21">-&gt;<pos:position pos:line="105" pos:column="26"/></operator><name pos:line="105" pos:column="23">pid<pos:position pos:line="105" pos:column="26"/></name></name> <operator pos:line="105" pos:column="27">=<pos:position pos:line="105" pos:column="28"/></operator> <name><name pos:line="105" pos:column="29">pi<pos:position pos:line="105" pos:column="31"/></name><operator pos:line="105" pos:column="31">.<pos:position pos:line="105" pos:column="32"/></operator><name pos:line="105" pos:column="32">dwProcessId<pos:position pos:line="105" pos:column="43"/></name></name></expr>;<pos:position pos:line="105" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="106" pos:column="17">info<pos:position pos:line="106" pos:column="21"/></name><operator pos:line="106" pos:column="21">-&gt;<pos:position pos:line="106" pos:column="26"/></operator><name pos:line="106" pos:column="23">proc<pos:position pos:line="106" pos:column="27"/></name></name> <operator pos:line="106" pos:column="28">=<pos:position pos:line="106" pos:column="29"/></operator> <name><name pos:line="106" pos:column="30">pi<pos:position pos:line="106" pos:column="32"/></name><operator pos:line="106" pos:column="32">.<pos:position pos:line="106" pos:column="33"/></operator><name pos:line="106" pos:column="33">hProcess<pos:position pos:line="106" pos:column="41"/></name></name></expr>;<pos:position pos:line="106" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="107" pos:column="17">info<pos:position pos:line="107" pos:column="21"/></name><operator pos:line="107" pos:column="21">-&gt;<pos:position pos:line="107" pos:column="26"/></operator><name pos:line="107" pos:column="23">next<pos:position pos:line="107" pos:column="27"/></name></name> <operator pos:line="107" pos:column="28">=<pos:position pos:line="107" pos:column="29"/></operator> <name pos:line="107" pos:column="30">pinfo<pos:position pos:line="107" pos:column="35"/></name></expr>;<pos:position pos:line="107" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="108" pos:column="17">pinfo<pos:position pos:line="108" pos:column="22"/></name> <operator pos:line="108" pos:column="23">=<pos:position pos:line="108" pos:column="24"/></operator> <name pos:line="108" pos:column="25">info<pos:position pos:line="108" pos:column="29"/></name></expr>;<pos:position pos:line="108" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="109" pos:column="10"/></block>
	<expr_stmt><expr><call><name pos:line="110" pos:column="9">LeaveCriticalSection<pos:position pos:line="110" pos:column="29"/></name><argument_list pos:line="110" pos:column="29">(<argument><expr><operator pos:line="110" pos:column="30">&amp;<pos:position pos:line="110" pos:column="35"/></operator><name pos:line="110" pos:column="31">pinfo_cs<pos:position pos:line="110" pos:column="39"/></name></expr></argument>)<pos:position pos:line="110" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="41"/></expr_stmt>

	<return pos:line="112" pos:column="9">return <expr><operator pos:line="112" pos:column="16">(<pos:position pos:line="112" pos:column="17"/></operator><name pos:line="112" pos:column="17">pid_t<pos:position pos:line="112" pos:column="22"/></name><operator pos:line="112" pos:column="22">)<pos:position pos:line="112" pos:column="23"/></operator><name><name pos:line="112" pos:column="23">pi<pos:position pos:line="112" pos:column="25"/></name><operator pos:line="112" pos:column="25">.<pos:position pos:line="112" pos:column="26"/></operator><name pos:line="112" pos:column="26">dwProcessId<pos:position pos:line="112" pos:column="37"/></name></name></expr>;<pos:position pos:line="112" pos:column="38"/></return>
}<pos:position pos:line="113" pos:column="2"/></block></function></unit>
