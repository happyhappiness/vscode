<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3873_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">normalize_value<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">key<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">value<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">normalized<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">value<pos:position pos:line="5" pos:column="19"/></name></expr>)<pos:position pos:line="5" pos:column="20"/></condition><then pos:line="5" pos:column="20">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><name pos:line="6" pos:column="24">NULL<pos:position pos:line="6" pos:column="28"/></name></expr>;<pos:position pos:line="6" pos:column="29"/></return></block></then></if>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">types<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">==<pos:position pos:line="8" pos:column="21"/></operator> <literal type="number" pos:line="8" pos:column="22">0<pos:position pos:line="8" pos:column="23"/></literal> <operator pos:line="8" pos:column="24">||<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="27">types<pos:position pos:line="8" pos:column="32"/></name> <operator pos:line="8" pos:column="33">==<pos:position pos:line="8" pos:column="35"/></operator> <name pos:line="8" pos:column="36">TYPE_PATH<pos:position pos:line="8" pos:column="45"/></name></expr>)<pos:position pos:line="8" pos:column="46"/></condition><then pos:line="8" pos:column="46">
		<comment type="block" pos:line="9" pos:column="17">/*
		 * We don't do normalization for TYPE_PATH here: If
		 * the path is like ~/foobar/, we prefer to store
		 * "~/foobar/" in the config file, and to expand the ~
		 * when retrieving the value.
		 */</comment>
		<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="17">normalized<pos:position pos:line="15" pos:column="27"/></name> <operator pos:line="15" pos:column="28">=<pos:position pos:line="15" pos:column="29"/></operator> <call><name pos:line="15" pos:column="30">xstrdup<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">value<pos:position pos:line="15" pos:column="43"/></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt></block></then>
	<else pos:line="16" pos:column="9">else <block pos:line="16" pos:column="14">{
		<expr_stmt><expr><name pos:line="17" pos:column="17">normalized<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">=<pos:position pos:line="17" pos:column="29"/></operator> <call><name pos:line="17" pos:column="30">xmalloc<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><literal type="number" pos:line="17" pos:column="38">64<pos:position pos:line="17" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">types<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">==<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="30">TYPE_INT<pos:position pos:line="18" pos:column="38"/></name></expr>)<pos:position pos:line="18" pos:column="39"/></condition><then pos:line="18" pos:column="39"> <block pos:line="18" pos:column="40">{
			<decl_stmt><decl><type><name pos:line="19" pos:column="25">int64_t<pos:position pos:line="19" pos:column="32"/></name></type> <name pos:line="19" pos:column="33">v<pos:position pos:line="19" pos:column="34"/></name> <init pos:line="19" pos:column="35">= <expr><call><name pos:line="19" pos:column="37">git_config_int64<pos:position pos:line="19" pos:column="53"/></name><argument_list pos:line="19" pos:column="53">(<argument><expr><name pos:line="19" pos:column="54">key<pos:position pos:line="19" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="59">value<pos:position pos:line="19" pos:column="64"/></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="66"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">sprintf<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">normalized<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="45">"%"<pos:position pos:line="20" pos:column="48"/></literal><name pos:line="20" pos:column="48">PRId64<pos:position pos:line="20" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="56">v<pos:position pos:line="20" pos:column="57"/></name></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="21" pos:column="18"/></block></then>
		<elseif pos:line="22" pos:column="17">else <if pos:line="22" pos:column="22">if <condition pos:line="22" pos:column="25">(<expr><name pos:line="22" pos:column="26">types<pos:position pos:line="22" pos:column="31"/></name> <operator pos:line="22" pos:column="32">==<pos:position pos:line="22" pos:column="34"/></operator> <name pos:line="22" pos:column="35">TYPE_BOOL<pos:position pos:line="22" pos:column="44"/></name></expr>)<pos:position pos:line="22" pos:column="45"/></condition><then pos:line="22" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">sprintf<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">normalized<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="45">"%s"<pos:position pos:line="23" pos:column="49"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><call><name pos:line="24" pos:column="33">git_config_bool<pos:position pos:line="24" pos:column="48"/></name><argument_list pos:line="24" pos:column="48">(<argument><expr><name pos:line="24" pos:column="49">key<pos:position pos:line="24" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="54">value<pos:position pos:line="24" pos:column="59"/></name></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></call></expr> ?<pos:position pos:line="24" pos:column="62"/></condition><then pos:line="24" pos:column="62"> <expr><literal type="string" pos:line="24" pos:column="63">"true"<pos:position pos:line="24" pos:column="69"/></literal></expr> <pos:position pos:line="24" pos:column="70"/></then><else pos:line="24" pos:column="70">: <expr><literal type="string" pos:line="24" pos:column="72">"false"<pos:position pos:line="24" pos:column="79"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="24" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="81"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="25" pos:column="17">else <if pos:line="25" pos:column="22">if <condition pos:line="25" pos:column="25">(<expr><name pos:line="25" pos:column="26">types<pos:position pos:line="25" pos:column="31"/></name> <operator pos:line="25" pos:column="32">==<pos:position pos:line="25" pos:column="34"/></operator> <name pos:line="25" pos:column="35">TYPE_BOOL_OR_INT<pos:position pos:line="25" pos:column="51"/></name></expr>)<pos:position pos:line="25" pos:column="52"/></condition><then pos:line="25" pos:column="52"> <block pos:line="25" pos:column="53">{
			<decl_stmt><decl><type><name pos:line="26" pos:column="25">int<pos:position pos:line="26" pos:column="28"/></name></type> <name pos:line="26" pos:column="29">is_bool<pos:position pos:line="26" pos:column="36"/></name></decl>, <decl><type ref="prev"/><name pos:line="26" pos:column="38">v<pos:position pos:line="26" pos:column="39"/></name></decl>;<pos:position pos:line="26" pos:column="40"/></decl_stmt>
			<expr_stmt><expr><name pos:line="27" pos:column="25">v<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <call><name pos:line="27" pos:column="29">git_config_bool_or_int<pos:position pos:line="27" pos:column="51"/></name><argument_list pos:line="27" pos:column="51">(<argument><expr><name pos:line="27" pos:column="52">key<pos:position pos:line="27" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="57">value<pos:position pos:line="27" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="64">&amp;<pos:position pos:line="27" pos:column="69"/></operator><name pos:line="27" pos:column="65">is_bool<pos:position pos:line="27" pos:column="72"/></name></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="74"/></expr_stmt>
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><operator pos:line="28" pos:column="29">!<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="30">is_bool<pos:position pos:line="28" pos:column="37"/></name></expr>)<pos:position pos:line="28" pos:column="38"/></condition><then pos:line="28" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="33">sprintf<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">normalized<pos:position pos:line="29" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="53">"%d"<pos:position pos:line="29" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="59">v<pos:position pos:line="29" pos:column="60"/></name></expr></argument>)<pos:position pos:line="29" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="62"/></expr_stmt></block></then>
			<else pos:line="30" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="33">sprintf<pos:position pos:line="31" pos:column="40"/></name><argument_list pos:line="31" pos:column="40">(<argument><expr><name pos:line="31" pos:column="41">normalized<pos:position pos:line="31" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="53">"%s"<pos:position pos:line="31" pos:column="57"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="31" pos:column="59">v<pos:position pos:line="31" pos:column="60"/></name></expr> ?<pos:position pos:line="31" pos:column="62"/></condition><then pos:line="31" pos:column="62"> <expr><literal type="string" pos:line="31" pos:column="63">"true"<pos:position pos:line="31" pos:column="69"/></literal></expr> <pos:position pos:line="31" pos:column="70"/></then><else pos:line="31" pos:column="70">: <expr><literal type="string" pos:line="31" pos:column="72">"false"<pos:position pos:line="31" pos:column="79"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="31" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="81"/></expr_stmt></block></else></if>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="33" pos:column="10"/></block></else></if>

	<return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">normalized<pos:position pos:line="35" pos:column="26"/></name></expr>;<pos:position pos:line="35" pos:column="27"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
