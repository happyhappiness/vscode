<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2505_git-2.0.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">run_column_filter<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">int<pos:position pos:line="1" pos:column="26"/></name></type> <name pos:line="1" pos:column="27">colopts<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">column_options<pos:position pos:line="1" pos:column="63"/></name></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">opts<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name><name pos:line="3" pos:column="21">av<pos:position pos:line="3" pos:column="23"/></name><index pos:line="3" pos:column="23">[<expr><literal type="number" pos:line="3" pos:column="24">10<pos:position pos:line="3" pos:column="26"/></literal></expr>]<pos:position pos:line="3" pos:column="27"/></index></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="18">ac<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><literal type="number" pos:line="4" pos:column="23">0<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">sb_colopt<pos:position pos:line="5" pos:column="32"/></name>  <init pos:line="5" pos:column="34">= <expr><name pos:line="5" pos:column="36">STRBUF_INIT<pos:position pos:line="5" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">sb_width<pos:position pos:line="6" pos:column="31"/></name>   <init pos:line="6" pos:column="34">= <expr><name pos:line="6" pos:column="36">STRBUF_INIT<pos:position pos:line="6" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">sb_padding<pos:position pos:line="7" pos:column="33"/></name> <init pos:line="7" pos:column="34">= <expr><name pos:line="7" pos:column="36">STRBUF_INIT<pos:position pos:line="7" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="48"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">fd_out<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">!=<pos:position pos:line="9" pos:column="22"/></operator> <operator pos:line="9" pos:column="23">-<pos:position pos:line="9" pos:column="24"/></operator><literal type="number" pos:line="9" pos:column="24">1<pos:position pos:line="9" pos:column="25"/></literal></expr>)<pos:position pos:line="9" pos:column="26"/></condition><then pos:line="9" pos:column="26">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><operator pos:line="10" pos:column="24">-<pos:position pos:line="10" pos:column="25"/></operator><literal type="number" pos:line="10" pos:column="25">1<pos:position pos:line="10" pos:column="26"/></literal></expr>;<pos:position pos:line="10" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="12" pos:column="9">av<pos:position pos:line="12" pos:column="11"/></name><index pos:line="12" pos:column="11">[<expr><name pos:line="12" pos:column="12">ac<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">++<pos:position pos:line="12" pos:column="16"/></operator></expr>]<pos:position pos:line="12" pos:column="17"/></index></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <literal type="string" pos:line="12" pos:column="20">"column"<pos:position pos:line="12" pos:column="28"/></literal></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">strbuf_addf<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><operator pos:line="13" pos:column="21">&amp;<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="22">sb_colopt<pos:position pos:line="13" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="33">"--raw-mode=%d"<pos:position pos:line="13" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="50">colopts<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">av<pos:position pos:line="14" pos:column="11"/></name><index pos:line="14" pos:column="11">[<expr><name pos:line="14" pos:column="12">ac<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">++<pos:position pos:line="14" pos:column="16"/></operator></expr>]<pos:position pos:line="14" pos:column="17"/></index></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <name><name pos:line="14" pos:column="20">sb_colopt<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">.<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="30">buf<pos:position pos:line="14" pos:column="33"/></name></name></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">opts<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">&amp;&amp;<pos:position pos:line="15" pos:column="28"/></operator> <name><name pos:line="15" pos:column="21">opts<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">-&gt;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="27">width<pos:position pos:line="15" pos:column="32"/></name></name></expr>)<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33"> <block pos:line="15" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">strbuf_addf<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><operator pos:line="16" pos:column="29">&amp;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="30">sb_width<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="40">"--width=%d"<pos:position pos:line="16" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="54">opts<pos:position pos:line="16" pos:column="58"/></name><operator pos:line="16" pos:column="58">-&gt;<pos:position pos:line="16" pos:column="63"/></operator><name pos:line="16" pos:column="60">width<pos:position pos:line="16" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="67"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="17" pos:column="17">av<pos:position pos:line="17" pos:column="19"/></name><index pos:line="17" pos:column="19">[<expr><name pos:line="17" pos:column="20">ac<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">++<pos:position pos:line="17" pos:column="24"/></operator></expr>]<pos:position pos:line="17" pos:column="25"/></index></name> <operator pos:line="17" pos:column="26">=<pos:position pos:line="17" pos:column="27"/></operator> <name><name pos:line="17" pos:column="28">sb_width<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">.<pos:position pos:line="17" pos:column="37"/></operator><name pos:line="17" pos:column="37">buf<pos:position pos:line="17" pos:column="40"/></name></name></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">opts<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">&amp;&amp;<pos:position pos:line="19" pos:column="28"/></operator> <name><name pos:line="19" pos:column="21">opts<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">-&gt;<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="27">indent<pos:position pos:line="19" pos:column="33"/></name></name></expr>)<pos:position pos:line="19" pos:column="34"/></condition><then pos:line="19" pos:column="34"> <block pos:line="19" pos:column="35">{
		<expr_stmt><expr><name><name pos:line="20" pos:column="17">av<pos:position pos:line="20" pos:column="19"/></name><index pos:line="20" pos:column="19">[<expr><name pos:line="20" pos:column="20">ac<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">++<pos:position pos:line="20" pos:column="24"/></operator></expr>]<pos:position pos:line="20" pos:column="25"/></index></name> <operator pos:line="20" pos:column="26">=<pos:position pos:line="20" pos:column="27"/></operator> <literal type="string" pos:line="20" pos:column="28">"--indent"<pos:position pos:line="20" pos:column="38"/></literal></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="21" pos:column="17">av<pos:position pos:line="21" pos:column="19"/></name><index pos:line="21" pos:column="19">[<expr><name pos:line="21" pos:column="20">ac<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">++<pos:position pos:line="21" pos:column="24"/></operator></expr>]<pos:position pos:line="21" pos:column="25"/></index></name> <operator pos:line="21" pos:column="26">=<pos:position pos:line="21" pos:column="27"/></operator> <name><name pos:line="21" pos:column="28">opts<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">-&gt;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="34">indent<pos:position pos:line="21" pos:column="40"/></name></name></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">opts<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">&amp;&amp;<pos:position pos:line="23" pos:column="28"/></operator> <name><name pos:line="23" pos:column="21">opts<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">-&gt;<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="27">padding<pos:position pos:line="23" pos:column="34"/></name></name></expr>)<pos:position pos:line="23" pos:column="35"/></condition><then pos:line="23" pos:column="35"> <block pos:line="23" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">strbuf_addf<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><operator pos:line="24" pos:column="29">&amp;<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="30">sb_padding<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="42">"--padding=%d"<pos:position pos:line="24" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="58">opts<pos:position pos:line="24" pos:column="62"/></name><operator pos:line="24" pos:column="62">-&gt;<pos:position pos:line="24" pos:column="67"/></operator><name pos:line="24" pos:column="64">padding<pos:position pos:line="24" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="73"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="25" pos:column="17">av<pos:position pos:line="25" pos:column="19"/></name><index pos:line="25" pos:column="19">[<expr><name pos:line="25" pos:column="20">ac<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">++<pos:position pos:line="25" pos:column="24"/></operator></expr>]<pos:position pos:line="25" pos:column="25"/></index></name> <operator pos:line="25" pos:column="26">=<pos:position pos:line="25" pos:column="27"/></operator> <name><name pos:line="25" pos:column="28">sb_padding<pos:position pos:line="25" pos:column="38"/></name><operator pos:line="25" pos:column="38">.<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="39">buf<pos:position pos:line="25" pos:column="42"/></name></name></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="27" pos:column="9">av<pos:position pos:line="27" pos:column="11"/></name><index pos:line="27" pos:column="11">[<expr><name pos:line="27" pos:column="12">ac<pos:position pos:line="27" pos:column="14"/></name></expr>]<pos:position pos:line="27" pos:column="15"/></index></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <name pos:line="27" pos:column="18">NULL<pos:position pos:line="27" pos:column="22"/></name></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="29" pos:column="9">fflush<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name pos:line="29" pos:column="16">stdout<pos:position pos:line="29" pos:column="22"/></name></expr></argument>)<pos:position pos:line="29" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">memset<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><operator pos:line="30" pos:column="16">&amp;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="17">column_process<pos:position pos:line="30" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="33">0<pos:position pos:line="30" pos:column="34"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="36">sizeof<argument_list pos:line="30" pos:column="42">(<argument><expr><name pos:line="30" pos:column="43">column_process<pos:position pos:line="30" pos:column="57"/></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="31" pos:column="9">column_process<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">.<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="24">in<pos:position pos:line="31" pos:column="26"/></name></name> <operator pos:line="31" pos:column="27">=<pos:position pos:line="31" pos:column="28"/></operator> <operator pos:line="31" pos:column="29">-<pos:position pos:line="31" pos:column="30"/></operator><literal type="number" pos:line="31" pos:column="30">1<pos:position pos:line="31" pos:column="31"/></literal></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="32" pos:column="9">column_process<pos:position pos:line="32" pos:column="23"/></name><operator pos:line="32" pos:column="23">.<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="24">out<pos:position pos:line="32" pos:column="27"/></name></name> <operator pos:line="32" pos:column="28">=<pos:position pos:line="32" pos:column="29"/></operator> <call><name pos:line="32" pos:column="30">dup<pos:position pos:line="32" pos:column="33"/></name><argument_list pos:line="32" pos:column="33">(<argument><expr><literal type="number" pos:line="32" pos:column="34">1<pos:position pos:line="32" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="33" pos:column="9">column_process<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">.<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="24">git_cmd<pos:position pos:line="33" pos:column="31"/></name></name> <operator pos:line="33" pos:column="32">=<pos:position pos:line="33" pos:column="33"/></operator> <literal type="number" pos:line="33" pos:column="34">1<pos:position pos:line="33" pos:column="35"/></literal></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="34" pos:column="9">column_process<pos:position pos:line="34" pos:column="23"/></name><operator pos:line="34" pos:column="23">.<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="24">argv<pos:position pos:line="34" pos:column="28"/></name></name> <operator pos:line="34" pos:column="29">=<pos:position pos:line="34" pos:column="30"/></operator> <name pos:line="34" pos:column="31">av<pos:position pos:line="34" pos:column="33"/></name></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>

	<expr_stmt><expr><name pos:line="36" pos:column="9">ret<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <call><name pos:line="36" pos:column="15">start_command<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><operator pos:line="36" pos:column="29">&amp;<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="30">column_process<pos:position pos:line="36" pos:column="44"/></name></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="38" pos:column="9">strbuf_release<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><operator pos:line="38" pos:column="24">&amp;<pos:position pos:line="38" pos:column="29"/></operator><name pos:line="38" pos:column="25">sb_colopt<pos:position pos:line="38" pos:column="34"/></name></expr></argument>)<pos:position pos:line="38" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">strbuf_release<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><operator pos:line="39" pos:column="24">&amp;<pos:position pos:line="39" pos:column="29"/></operator><name pos:line="39" pos:column="25">sb_width<pos:position pos:line="39" pos:column="33"/></name></expr></argument>)<pos:position pos:line="39" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">strbuf_release<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><operator pos:line="40" pos:column="24">&amp;<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="25">sb_padding<pos:position pos:line="40" pos:column="35"/></name></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">ret<pos:position pos:line="42" pos:column="16"/></name></expr>)<pos:position pos:line="42" pos:column="17"/></condition><then pos:line="42" pos:column="17">
		<block type="pseudo"><return pos:line="43" pos:column="17">return <expr><operator pos:line="43" pos:column="24">-<pos:position pos:line="43" pos:column="25"/></operator><literal type="number" pos:line="43" pos:column="25">2<pos:position pos:line="43" pos:column="26"/></literal></expr>;<pos:position pos:line="43" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="45" pos:column="9">fd_out<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <call><name pos:line="45" pos:column="18">dup<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><literal type="number" pos:line="45" pos:column="22">1<pos:position pos:line="45" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">close<pos:position pos:line="46" pos:column="14"/></name><argument_list pos:line="46" pos:column="14">(<argument><expr><literal type="number" pos:line="46" pos:column="15">1<pos:position pos:line="46" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">dup2<pos:position pos:line="47" pos:column="13"/></name><argument_list pos:line="47" pos:column="13">(<argument><expr><name><name pos:line="47" pos:column="14">column_process<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">.<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="29">in<pos:position pos:line="47" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="33">1<pos:position pos:line="47" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">close<pos:position pos:line="48" pos:column="14"/></name><argument_list pos:line="48" pos:column="14">(<argument><expr><name><name pos:line="48" pos:column="15">column_process<pos:position pos:line="48" pos:column="29"/></name><operator pos:line="48" pos:column="29">.<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="30">in<pos:position pos:line="48" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="34"/></expr_stmt>
	<return pos:line="49" pos:column="9">return <expr><literal type="number" pos:line="49" pos:column="16">0<pos:position pos:line="49" pos:column="17"/></literal></expr>;<pos:position pos:line="49" pos:column="18"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
