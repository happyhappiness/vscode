<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1736_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">have_same_root<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">path1<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">path2<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">is_abs1<pos:position pos:line="3" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="22">is_abs2<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><name pos:line="5" pos:column="9">is_abs1<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">=<pos:position pos:line="5" pos:column="18"/></operator> <call><name pos:line="5" pos:column="19">is_absolute_path<pos:position pos:line="5" pos:column="35"/></name><argument_list pos:line="5" pos:column="35">(<argument><expr><name pos:line="5" pos:column="36">path1<pos:position pos:line="5" pos:column="41"/></name></expr></argument>)<pos:position pos:line="5" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name pos:line="6" pos:column="9">is_abs2<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">=<pos:position pos:line="6" pos:column="18"/></operator> <call><name pos:line="6" pos:column="19">is_absolute_path<pos:position pos:line="6" pos:column="35"/></name><argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">path2<pos:position pos:line="6" pos:column="41"/></name></expr></argument>)<pos:position pos:line="6" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="43"/></expr_stmt>
	<return pos:line="7" pos:column="9">return <expr><operator pos:line="7" pos:column="16">(<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">is_abs1<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">&amp;&amp;<pos:position pos:line="7" pos:column="35"/></operator> <name pos:line="7" pos:column="28">is_abs2<pos:position pos:line="7" pos:column="35"/></name> <operator pos:line="7" pos:column="36">&amp;&amp;<pos:position pos:line="7" pos:column="46"/></operator> <call><name pos:line="7" pos:column="39">tolower<pos:position pos:line="7" pos:column="46"/></name><argument_list pos:line="7" pos:column="46">(<argument><expr><name><name pos:line="7" pos:column="47">path1<pos:position pos:line="7" pos:column="52"/></name><index pos:line="7" pos:column="52">[<expr><literal type="number" pos:line="7" pos:column="53">0<pos:position pos:line="7" pos:column="54"/></literal></expr>]<pos:position pos:line="7" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="7" pos:column="56"/></argument_list></call> <operator pos:line="7" pos:column="57">==<pos:position pos:line="7" pos:column="59"/></operator> <call><name pos:line="7" pos:column="60">tolower<pos:position pos:line="7" pos:column="67"/></name><argument_list pos:line="7" pos:column="67">(<argument><expr><name><name pos:line="7" pos:column="68">path2<pos:position pos:line="7" pos:column="73"/></name><index pos:line="7" pos:column="73">[<expr><literal type="number" pos:line="7" pos:column="74">0<pos:position pos:line="7" pos:column="75"/></literal></expr>]<pos:position pos:line="7" pos:column="76"/></index></name></expr></argument>)<pos:position pos:line="7" pos:column="77"/></argument_list></call><operator pos:line="7" pos:column="77">)<pos:position pos:line="7" pos:column="78"/></operator> <operator pos:line="7" pos:column="79">||<pos:position pos:line="7" pos:column="81"/></operator>
	       <operator pos:line="8" pos:column="16">(<pos:position pos:line="8" pos:column="17"/></operator><operator pos:line="8" pos:column="17">!<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="18">is_abs1<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">&amp;&amp;<pos:position pos:line="8" pos:column="36"/></operator> <operator pos:line="8" pos:column="29">!<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="30">is_abs2<pos:position pos:line="8" pos:column="37"/></name><operator pos:line="8" pos:column="37">)<pos:position pos:line="8" pos:column="38"/></operator></expr>;<pos:position pos:line="8" pos:column="39"/></return>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
