<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2711_git-2.4.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">write_cache_as_tree<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">unsigned<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">sha1<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">flags<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name pos:line="1" pos:column="63">char<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">prefix<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">entries<pos:position pos:line="3" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="22">was_valid<pos:position pos:line="3" pos:column="31"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="33">newfd<pos:position pos:line="3" pos:column="38"/></name></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">lock_file<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">lock_file<pos:position pos:line="4" pos:column="36"/></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * We can't free this memory, it becomes part of a linked list
	 * parsed atexit()
	 */</comment>
	<expr_stmt><expr><name pos:line="10" pos:column="9">lock_file<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">xcalloc<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><literal type="number" pos:line="10" pos:column="29">1<pos:position pos:line="10" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="32">sizeof<argument_list pos:line="10" pos:column="38">(<argument><expr pos:line="10" pos:column="39">struct <name pos:line="10" pos:column="46">lock_file<pos:position pos:line="10" pos:column="55"/></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="58"/></expr_stmt>

	<expr_stmt><expr><name pos:line="12" pos:column="9">newfd<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <call><name pos:line="12" pos:column="17">hold_locked_index<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">lock_file<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="46">1<pos:position pos:line="12" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="49"/></expr_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">entries<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <call><name pos:line="14" pos:column="19">read_cache<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">()<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">entries<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">&lt;<pos:position pos:line="15" pos:column="25"/></operator> <literal type="number" pos:line="15" pos:column="23">0<pos:position pos:line="15" pos:column="24"/></literal></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">WRITE_TREE_UNREADABLE_INDEX<pos:position pos:line="16" pos:column="51"/></name></expr>;<pos:position pos:line="16" pos:column="52"/></return></block></then></if>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">flags<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">&amp;<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="21">WRITE_TREE_IGNORE_CACHE_TREE<pos:position pos:line="17" pos:column="49"/></name></expr>)<pos:position pos:line="17" pos:column="50"/></condition><then pos:line="17" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">cache_tree_free<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><operator pos:line="18" pos:column="33">&amp;<pos:position pos:line="18" pos:column="38"/></operator><operator pos:line="18" pos:column="34">(<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="35">active_cache_tree<pos:position pos:line="18" pos:column="52"/></name><operator pos:line="18" pos:column="52">)<pos:position pos:line="18" pos:column="53"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">active_cache_tree<pos:position pos:line="20" pos:column="31"/></name></expr>)<pos:position pos:line="20" pos:column="32"/></condition><then pos:line="20" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="17">active_cache_tree<pos:position pos:line="21" pos:column="34"/></name> <operator pos:line="21" pos:column="35">=<pos:position pos:line="21" pos:column="36"/></operator> <call><name pos:line="21" pos:column="37">cache_tree<pos:position pos:line="21" pos:column="47"/></name><argument_list pos:line="21" pos:column="47">()<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="23" pos:column="9">was_valid<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <call><name pos:line="23" pos:column="21">cache_tree_fully_valid<pos:position pos:line="23" pos:column="43"/></name><argument_list pos:line="23" pos:column="43">(<argument><expr><name pos:line="23" pos:column="44">active_cache_tree<pos:position pos:line="23" pos:column="61"/></name></expr></argument>)<pos:position pos:line="23" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="63"/></expr_stmt>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">was_valid<pos:position pos:line="24" pos:column="23"/></name></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24"> <block pos:line="24" pos:column="25">{
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">cache_tree_update<pos:position pos:line="25" pos:column="38"/></name><argument_list pos:line="25" pos:column="38">(<argument><expr><operator pos:line="25" pos:column="39">&amp;<pos:position pos:line="25" pos:column="44"/></operator><name pos:line="25" pos:column="40">the_index<pos:position pos:line="25" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="51">flags<pos:position pos:line="25" pos:column="56"/></name></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call> <operator pos:line="25" pos:column="58">&lt;<pos:position pos:line="25" pos:column="62"/></operator> <literal type="number" pos:line="25" pos:column="60">0<pos:position pos:line="25" pos:column="61"/></literal></expr>)<pos:position pos:line="25" pos:column="62"/></condition><then pos:line="25" pos:column="62">
			<block type="pseudo"><return pos:line="26" pos:column="25">return <expr><name pos:line="26" pos:column="32">WRITE_TREE_UNMERGED_INDEX<pos:position pos:line="26" pos:column="57"/></name></expr>;<pos:position pos:line="26" pos:column="58"/></return></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><literal type="number" pos:line="27" pos:column="21">0<pos:position pos:line="27" pos:column="22"/></literal> <operator pos:line="27" pos:column="23">&lt;=<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="26">newfd<pos:position pos:line="27" pos:column="31"/></name></expr>)<pos:position pos:line="27" pos:column="32"/></condition><then pos:line="27" pos:column="32"> <block pos:line="27" pos:column="33">{
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><operator pos:line="28" pos:column="29">!<pos:position pos:line="28" pos:column="30"/></operator><call><name pos:line="28" pos:column="30">write_locked_index<pos:position pos:line="28" pos:column="48"/></name><argument_list pos:line="28" pos:column="48">(<argument><expr><operator pos:line="28" pos:column="49">&amp;<pos:position pos:line="28" pos:column="54"/></operator><name pos:line="28" pos:column="50">the_index<pos:position pos:line="28" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="61">lock_file<pos:position pos:line="28" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="72">COMMIT_LOCK<pos:position pos:line="28" pos:column="83"/></name></expr></argument>)<pos:position pos:line="28" pos:column="84"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="85"/></condition><then pos:line="28" pos:column="85">
				<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="33">newfd<pos:position pos:line="29" pos:column="38"/></name> <operator pos:line="29" pos:column="39">=<pos:position pos:line="29" pos:column="40"/></operator> <operator pos:line="29" pos:column="41">-<pos:position pos:line="29" pos:column="42"/></operator><literal type="number" pos:line="29" pos:column="42">1<pos:position pos:line="29" pos:column="43"/></literal></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt></block></then></if>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="31" pos:column="17">/* Not being able to write is fine -- we are only interested
		 * in updating the cache-tree part, and if the next caller
		 * ends up using the old index with unupdated cache-tree part
		 * it misses the work we did here, but that is just a
		 * performance penalty and not a big deal.
		 */</comment>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">prefix<pos:position pos:line="39" pos:column="19"/></name></expr>)<pos:position pos:line="39" pos:column="20"/></condition><then pos:line="39" pos:column="20"> <block pos:line="39" pos:column="21">{
		<decl_stmt><decl><type><name><name pos:line="40" pos:column="17">struct<pos:position pos:line="40" pos:column="23"/></name> <name pos:line="40" pos:column="24">cache_tree<pos:position pos:line="40" pos:column="34"/></name></name> <modifier pos:line="40" pos:column="35">*<pos:position pos:line="40" pos:column="36"/></modifier></type><name pos:line="40" pos:column="36">subtree<pos:position pos:line="40" pos:column="43"/></name> <init pos:line="40" pos:column="44">=
			<expr><call><name pos:line="41" pos:column="25">cache_tree_find<pos:position pos:line="41" pos:column="40"/></name><argument_list pos:line="41" pos:column="40">(<argument><expr><name pos:line="41" pos:column="41">active_cache_tree<pos:position pos:line="41" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="60">prefix<pos:position pos:line="41" pos:column="66"/></name></expr></argument>)<pos:position pos:line="41" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="68"/></decl_stmt>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><operator pos:line="42" pos:column="21">!<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="22">subtree<pos:position pos:line="42" pos:column="29"/></name></expr>)<pos:position pos:line="42" pos:column="30"/></condition><then pos:line="42" pos:column="30">
			<block type="pseudo"><return pos:line="43" pos:column="25">return <expr><name pos:line="43" pos:column="32">WRITE_TREE_PREFIX_ERROR<pos:position pos:line="43" pos:column="55"/></name></expr>;<pos:position pos:line="43" pos:column="56"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">hashcpy<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><name pos:line="44" pos:column="25">sha1<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="31">subtree<pos:position pos:line="44" pos:column="38"/></name><operator pos:line="44" pos:column="38">-&gt;<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="40">sha1<pos:position pos:line="44" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></then>
	<else pos:line="46" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="17">hashcpy<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">sha1<pos:position pos:line="47" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="31">active_cache_tree<pos:position pos:line="47" pos:column="48"/></name><operator pos:line="47" pos:column="48">-&gt;<pos:position pos:line="47" pos:column="53"/></operator><name pos:line="47" pos:column="50">sha1<pos:position pos:line="47" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="56"/></expr_stmt></block></else></if>

	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><literal type="number" pos:line="49" pos:column="13">0<pos:position pos:line="49" pos:column="14"/></literal> <operator pos:line="49" pos:column="15">&lt;=<pos:position pos:line="49" pos:column="20"/></operator> <name pos:line="49" pos:column="18">newfd<pos:position pos:line="49" pos:column="23"/></name></expr>)<pos:position pos:line="49" pos:column="24"/></condition><then pos:line="49" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="17">rollback_lock_file<pos:position pos:line="50" pos:column="35"/></name><argument_list pos:line="50" pos:column="35">(<argument><expr><name pos:line="50" pos:column="36">lock_file<pos:position pos:line="50" pos:column="45"/></name></expr></argument>)<pos:position pos:line="50" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="47"/></expr_stmt></block></then></if>

	<return pos:line="52" pos:column="9">return <expr><literal type="number" pos:line="52" pos:column="16">0<pos:position pos:line="52" pos:column="17"/></literal></expr>;<pos:position pos:line="52" pos:column="18"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
