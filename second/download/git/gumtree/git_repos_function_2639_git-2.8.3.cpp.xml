<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2639_git-2.8.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">convert_to_working_tree_internal<pos:position pos:line="1" pos:column="44"/></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">path<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="63">const<pos:position pos:line="1" pos:column="68"/></specifier> <name pos:line="1" pos:column="69">char<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">src<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
					    <parameter><decl><type><name pos:line="2" pos:column="45">size_t<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">len<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="57">struct<pos:position pos:line="2" pos:column="63"/></name> <name pos:line="2" pos:column="64">strbuf<pos:position pos:line="2" pos:column="70"/></name></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="72">dst<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>,
					    <parameter><decl><type><name pos:line="3" pos:column="45">int<pos:position pos:line="3" pos:column="48"/></name></type> <name pos:line="3" pos:column="49">normalizing<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="61"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">ret<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="22">ret_filter<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><literal type="number" pos:line="5" pos:column="35">0<pos:position pos:line="5" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">filter<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><name pos:line="6" pos:column="30">NULL<pos:position pos:line="6" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">required<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">conv_attrs<pos:position pos:line="8" pos:column="26"/></name></name></type> <name pos:line="8" pos:column="27">ca<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">convert_attrs<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><operator pos:line="10" pos:column="23">&amp;<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="24">ca<pos:position pos:line="10" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="28">path<pos:position pos:line="10" pos:column="32"/></name></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="34"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">ca<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">drv<pos:position pos:line="11" pos:column="19"/></name></name></expr>)<pos:position pos:line="11" pos:column="20"/></condition><then pos:line="11" pos:column="20"> <block pos:line="11" pos:column="21">{
		<expr_stmt><expr><name pos:line="12" pos:column="17">filter<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <name><name pos:line="12" pos:column="26">ca<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">.<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="29">drv<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">-&gt;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="34">smudge<pos:position pos:line="12" pos:column="40"/></name></name></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">required<pos:position pos:line="13" pos:column="25"/></name> <operator pos:line="13" pos:column="26">=<pos:position pos:line="13" pos:column="27"/></operator> <name><name pos:line="13" pos:column="28">ca<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">.<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">drv<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">required<pos:position pos:line="13" pos:column="44"/></name></name></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">ret<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">|=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">ident_to_worktree<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">(<argument><expr><name pos:line="16" pos:column="34">path<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="40">src<pos:position pos:line="16" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="45">len<pos:position pos:line="16" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="50">dst<pos:position pos:line="16" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="55">ca<pos:position pos:line="16" pos:column="57"/></name><operator pos:line="16" pos:column="57">.<pos:position pos:line="16" pos:column="58"/></operator><name pos:line="16" pos:column="58">ident<pos:position pos:line="16" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="65"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">ret<pos:position pos:line="17" pos:column="16"/></name></expr>)<pos:position pos:line="17" pos:column="17"/></condition><then pos:line="17" pos:column="17"> <block pos:line="17" pos:column="18">{
		<expr_stmt><expr><name pos:line="18" pos:column="17">src<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <name><name pos:line="18" pos:column="23">dst<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">-&gt;<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="28">buf<pos:position pos:line="18" pos:column="31"/></name></name></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">len<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <name><name pos:line="19" pos:column="23">dst<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">-&gt;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="28">len<pos:position pos:line="19" pos:column="31"/></name></name></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<comment type="block" pos:line="21" pos:column="9">/*
	 * CRLF conversion can be skipped if normalizing, unless there
	 * is a smudge filter.  The filter might expect CRLFs.
	 */</comment>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">filter<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">||<pos:position pos:line="25" pos:column="22"/></operator> <operator pos:line="25" pos:column="23">!<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">normalizing<pos:position pos:line="25" pos:column="35"/></name></expr>)<pos:position pos:line="25" pos:column="36"/></condition><then pos:line="25" pos:column="36"> <block pos:line="25" pos:column="37">{
		<expr_stmt><expr><name pos:line="26" pos:column="17">ret<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">|=<pos:position pos:line="26" pos:column="23"/></operator> <call><name pos:line="26" pos:column="24">crlf_to_worktree<pos:position pos:line="26" pos:column="40"/></name><argument_list pos:line="26" pos:column="40">(<argument><expr><name pos:line="26" pos:column="41">path<pos:position pos:line="26" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="47">src<pos:position pos:line="26" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="52">len<pos:position pos:line="26" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="57">dst<pos:position pos:line="26" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="62">ca<pos:position pos:line="26" pos:column="64"/></name><operator pos:line="26" pos:column="64">.<pos:position pos:line="26" pos:column="65"/></operator><name pos:line="26" pos:column="65">crlf_action<pos:position pos:line="26" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="78"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">ret<pos:position pos:line="27" pos:column="24"/></name></expr>)<pos:position pos:line="27" pos:column="25"/></condition><then pos:line="27" pos:column="25"> <block pos:line="27" pos:column="26">{
			<expr_stmt><expr><name pos:line="28" pos:column="25">src<pos:position pos:line="28" pos:column="28"/></name> <operator pos:line="28" pos:column="29">=<pos:position pos:line="28" pos:column="30"/></operator> <name><name pos:line="28" pos:column="31">dst<pos:position pos:line="28" pos:column="34"/></name><operator pos:line="28" pos:column="34">-&gt;<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="36">buf<pos:position pos:line="28" pos:column="39"/></name></name></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="29" pos:column="25">len<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">=<pos:position pos:line="29" pos:column="30"/></operator> <name><name pos:line="29" pos:column="31">dst<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">-&gt;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="36">len<pos:position pos:line="29" pos:column="39"/></name></name></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="33" pos:column="9">ret_filter<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <call><name pos:line="33" pos:column="22">apply_filter<pos:position pos:line="33" pos:column="34"/></name><argument_list pos:line="33" pos:column="34">(<argument><expr><name pos:line="33" pos:column="35">path<pos:position pos:line="33" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="41">src<pos:position pos:line="33" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="46">len<pos:position pos:line="33" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="51">-<pos:position pos:line="33" pos:column="52"/></operator><literal type="number" pos:line="33" pos:column="52">1<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="55">dst<pos:position pos:line="33" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="60">filter<pos:position pos:line="33" pos:column="66"/></name></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="68"/></expr_stmt>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">ret_filter<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">&amp;&amp;<pos:position pos:line="34" pos:column="35"/></operator> <name pos:line="34" pos:column="28">required<pos:position pos:line="34" pos:column="36"/></name></expr>)<pos:position pos:line="34" pos:column="37"/></condition><then pos:line="34" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="17">die<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><literal type="string" pos:line="35" pos:column="21">"%s: smudge filter %s failed"<pos:position pos:line="35" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="52">path<pos:position pos:line="35" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="58">ca<pos:position pos:line="35" pos:column="60"/></name><operator pos:line="35" pos:column="60">.<pos:position pos:line="35" pos:column="61"/></operator><name pos:line="35" pos:column="61">drv<pos:position pos:line="35" pos:column="64"/></name><operator pos:line="35" pos:column="64">-&gt;<pos:position pos:line="35" pos:column="69"/></operator><name pos:line="35" pos:column="66">name<pos:position pos:line="35" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="72"/></expr_stmt></block></then></if>

	<return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">ret<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">|<pos:position pos:line="37" pos:column="21"/></operator> <name pos:line="37" pos:column="22">ret_filter<pos:position pos:line="37" pos:column="32"/></name></expr>;<pos:position pos:line="37" pos:column="33"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
