<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6817_git-2.11.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">write_subdirectory<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">buffer<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">unsigned<pos:position pos:line="1" pos:column="53"/></name> <name pos:line="1" pos:column="54">long<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">size<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="65">const<pos:position pos:line="1" pos:column="70"/></specifier> <name pos:line="1" pos:column="71">char<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">base<pos:position pos:line="1" pos:column="81"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="83">int<pos:position pos:line="1" pos:column="86"/></name></type> <name pos:line="1" pos:column="87">baselen<pos:position pos:line="1" pos:column="94"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="96">unsigned<pos:position pos:line="1" pos:column="104"/></name> <name pos:line="1" pos:column="105">char<pos:position pos:line="1" pos:column="109"/></name> <modifier pos:line="1" pos:column="110">*<pos:position pos:line="1" pos:column="111"/></modifier></type><name pos:line="1" pos:column="111">result_sha1<pos:position pos:line="1" pos:column="122"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="123"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <operator pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></operator><operator pos:line="3" pos:column="15">new<pos:position pos:line="3" pos:column="18"/></operator> <operator pos:line="3" pos:column="19">=<pos:position pos:line="3" pos:column="20"/></operator> <call><name pos:line="3" pos:column="21">xmalloc<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><name pos:line="3" pos:column="29">size<pos:position pos:line="3" pos:column="33"/></name></expr></argument>)<pos:position pos:line="3" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="35"/></expr_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">long<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">newlen<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><literal type="number" pos:line="4" pos:column="32">0<pos:position pos:line="4" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">used<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">used<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr>;<pos:position pos:line="7" pos:column="18"/></expr_stmt>
	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><name pos:line="8" pos:column="16">size<pos:position pos:line="8" pos:column="20"/></name></expr>)<pos:position pos:line="8" pos:column="21"/></condition> <block pos:line="8" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">len<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><literal type="number" pos:line="9" pos:column="27">21<pos:position pos:line="9" pos:column="29"/></literal> <operator pos:line="9" pos:column="30">+<pos:position pos:line="9" pos:column="31"/></operator> <call><name pos:line="9" pos:column="32">strlen<pos:position pos:line="9" pos:column="38"/></name><argument_list pos:line="9" pos:column="38">(<argument><expr><name pos:line="9" pos:column="39">buffer<pos:position pos:line="9" pos:column="45"/></name></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="47"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">char<pos:position pos:line="10" pos:column="21"/></name> <modifier pos:line="10" pos:column="22">*<pos:position pos:line="10" pos:column="23"/></modifier></type><name pos:line="10" pos:column="23">path<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><call><name pos:line="10" pos:column="30">strchr<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name pos:line="10" pos:column="37">buffer<pos:position pos:line="10" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="10" pos:column="45">' '<pos:position pos:line="10" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="50"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">unsigned<pos:position pos:line="11" pos:column="25"/></name> <name pos:line="11" pos:column="26">char<pos:position pos:line="11" pos:column="30"/></name> <modifier pos:line="11" pos:column="31">*<pos:position pos:line="11" pos:column="32"/></modifier></type><name pos:line="11" pos:column="32">sha1<pos:position pos:line="11" pos:column="36"/></name></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">unsigned<pos:position pos:line="12" pos:column="25"/></name> <name pos:line="12" pos:column="26">int<pos:position pos:line="12" pos:column="29"/></name></type> <name pos:line="12" pos:column="30">mode<pos:position pos:line="12" pos:column="34"/></name></decl>;<pos:position pos:line="12" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">char<pos:position pos:line="13" pos:column="21"/></name> <modifier pos:line="13" pos:column="22">*<pos:position pos:line="13" pos:column="23"/></modifier></type><name pos:line="13" pos:column="23">slash<pos:position pos:line="13" pos:column="28"/></name></decl>, <modifier pos:line="13" pos:column="30">*<pos:position pos:line="13" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="13" pos:column="31">origpath<pos:position pos:line="13" pos:column="39"/></name></decl>;<pos:position pos:line="13" pos:column="40"/></decl_stmt>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">path<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">||<pos:position pos:line="15" pos:column="29"/></operator> <call><name pos:line="15" pos:column="30">strtoul_ui<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><name pos:line="15" pos:column="41">buffer<pos:position pos:line="15" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="49">8<pos:position pos:line="15" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="52">&amp;<pos:position pos:line="15" pos:column="57"/></operator><name pos:line="15" pos:column="53">mode<pos:position pos:line="15" pos:column="57"/></name></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="59"/></condition><then pos:line="15" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">die<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><literal type="string" pos:line="16" pos:column="29">"bad tree conversion"<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="17" pos:column="17">mode<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <call><name pos:line="17" pos:column="24">convert_mode<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">mode<pos:position pos:line="17" pos:column="41"/></name></expr></argument>)<pos:position pos:line="17" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="18" pos:column="17">path<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">++<pos:position pos:line="18" pos:column="23"/></operator></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><call><name pos:line="19" pos:column="21">memcmp<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">path<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="34">base<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="40">baselen<pos:position pos:line="19" pos:column="47"/></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="49"/></condition><then pos:line="19" pos:column="49">
			<block type="pseudo"><break pos:line="20" pos:column="25">break;<pos:position pos:line="20" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="21" pos:column="17">origpath<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">=<pos:position pos:line="21" pos:column="27"/></operator> <name pos:line="21" pos:column="28">path<pos:position pos:line="21" pos:column="32"/></name></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">path<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">+=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">baselen<pos:position pos:line="22" pos:column="32"/></name></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">slash<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator> <call><name pos:line="23" pos:column="25">strchr<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">path<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="38">'/'<pos:position pos:line="23" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">slash<pos:position pos:line="24" pos:column="27"/></name></expr>)<pos:position pos:line="24" pos:column="28"/></condition><then pos:line="24" pos:column="28"> <block pos:line="24" pos:column="29">{
			<expr_stmt><expr><name pos:line="25" pos:column="25">newlen<pos:position pos:line="25" pos:column="31"/></name> <operator pos:line="25" pos:column="32">+=<pos:position pos:line="25" pos:column="34"/></operator> <call><name pos:line="25" pos:column="35">sprintf<pos:position pos:line="25" pos:column="42"/></name><argument_list pos:line="25" pos:column="42">(<argument><expr><operator pos:line="25" pos:column="43">new<pos:position pos:line="25" pos:column="46"/></operator> <operator pos:line="25" pos:column="47">+<pos:position pos:line="25" pos:column="48"/></operator> <name pos:line="25" pos:column="49">newlen<pos:position pos:line="25" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="57">"%o %s"<pos:position pos:line="25" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="66">mode<pos:position pos:line="25" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="72">path<pos:position pos:line="25" pos:column="76"/></name></expr></argument>)<pos:position pos:line="25" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="78"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="26" pos:column="25">new<pos:position pos:line="26" pos:column="28"/></operator><index pos:line="26" pos:column="28">[<expr><name pos:line="26" pos:column="29">newlen<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">++<pos:position pos:line="26" pos:column="37"/></operator></expr>]<pos:position pos:line="26" pos:column="38"/></index> <operator pos:line="26" pos:column="39">=<pos:position pos:line="26" pos:column="40"/></operator> <literal type="char" pos:line="26" pos:column="41">'\0'<pos:position pos:line="26" pos:column="45"/></literal></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">hashcpy<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">(<argument><expr><operator pos:line="27" pos:column="33">(<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">unsigned<pos:position pos:line="27" pos:column="42"/></name> <name pos:line="27" pos:column="43">char<pos:position pos:line="27" pos:column="47"/></name> <operator pos:line="27" pos:column="48">*<pos:position pos:line="27" pos:column="49"/></operator><operator pos:line="27" pos:column="49">)<pos:position pos:line="27" pos:column="50"/></operator><operator pos:line="27" pos:column="50">new<pos:position pos:line="27" pos:column="53"/></operator> <operator pos:line="27" pos:column="54">+<pos:position pos:line="27" pos:column="55"/></operator> <name pos:line="27" pos:column="56">newlen<pos:position pos:line="27" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="64">(<pos:position pos:line="27" pos:column="65"/></operator><name pos:line="27" pos:column="65">unsigned<pos:position pos:line="27" pos:column="73"/></name> <name pos:line="27" pos:column="74">char<pos:position pos:line="27" pos:column="78"/></name> <operator pos:line="27" pos:column="79">*<pos:position pos:line="27" pos:column="80"/></operator><operator pos:line="27" pos:column="80">)<pos:position pos:line="27" pos:column="81"/></operator> <name pos:line="27" pos:column="82">buffer<pos:position pos:line="27" pos:column="88"/></name> <operator pos:line="27" pos:column="89">+<pos:position pos:line="27" pos:column="90"/></operator> <name pos:line="27" pos:column="91">len<pos:position pos:line="27" pos:column="94"/></name> <operator pos:line="27" pos:column="95">-<pos:position pos:line="27" pos:column="96"/></operator> <literal type="number" pos:line="27" pos:column="97">20<pos:position pos:line="27" pos:column="99"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="101"/></expr_stmt>
			<expr_stmt><expr><name pos:line="28" pos:column="25">newlen<pos:position pos:line="28" pos:column="31"/></name> <operator pos:line="28" pos:column="32">+=<pos:position pos:line="28" pos:column="34"/></operator> <literal type="number" pos:line="28" pos:column="35">20<pos:position pos:line="28" pos:column="37"/></literal></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>

			<expr_stmt><expr><name pos:line="30" pos:column="25">used<pos:position pos:line="30" pos:column="29"/></name> <operator pos:line="30" pos:column="30">+=<pos:position pos:line="30" pos:column="32"/></operator> <name pos:line="30" pos:column="33">len<pos:position pos:line="30" pos:column="36"/></name></expr>;<pos:position pos:line="30" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><name pos:line="31" pos:column="25">size<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">-=<pos:position pos:line="31" pos:column="32"/></operator> <name pos:line="31" pos:column="33">len<pos:position pos:line="31" pos:column="36"/></name></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><name pos:line="32" pos:column="25">buffer<pos:position pos:line="32" pos:column="31"/></name> <operator pos:line="32" pos:column="32">=<pos:position pos:line="32" pos:column="33"/></operator> <operator pos:line="32" pos:column="34">(<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="35">char<pos:position pos:line="32" pos:column="39"/></name> <operator pos:line="32" pos:column="40">*<pos:position pos:line="32" pos:column="41"/></operator><operator pos:line="32" pos:column="41">)<pos:position pos:line="32" pos:column="42"/></operator> <name pos:line="32" pos:column="43">buffer<pos:position pos:line="32" pos:column="49"/></name> <operator pos:line="32" pos:column="50">+<pos:position pos:line="32" pos:column="51"/></operator> <name pos:line="32" pos:column="52">len<pos:position pos:line="32" pos:column="55"/></name></expr>;<pos:position pos:line="32" pos:column="56"/></expr_stmt>
			<continue pos:line="33" pos:column="25">continue;<pos:position pos:line="33" pos:column="34"/></continue>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="36" pos:column="17">newlen<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">+=<pos:position pos:line="36" pos:column="26"/></operator> <call><name pos:line="36" pos:column="27">sprintf<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><operator pos:line="36" pos:column="35">new<pos:position pos:line="36" pos:column="38"/></operator> <operator pos:line="36" pos:column="39">+<pos:position pos:line="36" pos:column="40"/></operator> <name pos:line="36" pos:column="41">newlen<pos:position pos:line="36" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="49">"%o %.*s"<pos:position pos:line="36" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="60">S_IFDIR<pos:position pos:line="36" pos:column="67"/></name></expr></argument>, <argument><expr><call pos:line="36" pos:column="69">(<name pos:line="36" pos:column="70">int<pos:position pos:line="36" pos:column="73"/></name>)<argument_list pos:line="36" pos:column="74">(<argument><expr><name pos:line="36" pos:column="75">slash<pos:position pos:line="36" pos:column="80"/></name> <operator pos:line="36" pos:column="81">-<pos:position pos:line="36" pos:column="82"/></operator> <name pos:line="36" pos:column="83">path<pos:position pos:line="36" pos:column="87"/></name></expr></argument>)<pos:position pos:line="36" pos:column="88"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="36" pos:column="90">path<pos:position pos:line="36" pos:column="94"/></name></expr></argument>)<pos:position pos:line="36" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="96"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="37" pos:column="17">new<pos:position pos:line="37" pos:column="20"/></operator><index pos:line="37" pos:column="20">[<expr><name pos:line="37" pos:column="21">newlen<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">++<pos:position pos:line="37" pos:column="29"/></operator></expr>]<pos:position pos:line="37" pos:column="30"/></index> <operator pos:line="37" pos:column="31">=<pos:position pos:line="37" pos:column="32"/></operator> <literal type="number" pos:line="37" pos:column="33">0<pos:position pos:line="37" pos:column="34"/></literal></expr>;<pos:position pos:line="37" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="38" pos:column="17">sha1<pos:position pos:line="38" pos:column="21"/></name> <operator pos:line="38" pos:column="22">=<pos:position pos:line="38" pos:column="23"/></operator> <operator pos:line="38" pos:column="24">(<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="25">unsigned<pos:position pos:line="38" pos:column="33"/></name> <name pos:line="38" pos:column="34">char<pos:position pos:line="38" pos:column="38"/></name> <operator pos:line="38" pos:column="39">*<pos:position pos:line="38" pos:column="40"/></operator><operator pos:line="38" pos:column="40">)<pos:position pos:line="38" pos:column="41"/></operator><operator pos:line="38" pos:column="41">(<pos:position pos:line="38" pos:column="42"/></operator><operator pos:line="38" pos:column="42">new<pos:position pos:line="38" pos:column="45"/></operator> <operator pos:line="38" pos:column="46">+<pos:position pos:line="38" pos:column="47"/></operator> <name pos:line="38" pos:column="48">newlen<pos:position pos:line="38" pos:column="54"/></name><operator pos:line="38" pos:column="54">)<pos:position pos:line="38" pos:column="55"/></operator></expr>;<pos:position pos:line="38" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="39" pos:column="17">newlen<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">+=<pos:position pos:line="39" pos:column="26"/></operator> <literal type="number" pos:line="39" pos:column="27">20<pos:position pos:line="39" pos:column="29"/></literal></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt>

		<expr_stmt><expr><name pos:line="41" pos:column="17">len<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">=<pos:position pos:line="41" pos:column="22"/></operator> <call><name pos:line="41" pos:column="23">write_subdirectory<pos:position pos:line="41" pos:column="41"/></name><argument_list pos:line="41" pos:column="41">(<argument><expr><name pos:line="41" pos:column="42">buffer<pos:position pos:line="41" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="50">size<pos:position pos:line="41" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="56">origpath<pos:position pos:line="41" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="66">slash<pos:position pos:line="41" pos:column="71"/></name><operator pos:line="41" pos:column="71">-<pos:position pos:line="41" pos:column="72"/></operator><name pos:line="41" pos:column="72">origpath<pos:position pos:line="41" pos:column="80"/></name><operator pos:line="41" pos:column="80">+<pos:position pos:line="41" pos:column="81"/></operator><literal type="number" pos:line="41" pos:column="81">1<pos:position pos:line="41" pos:column="82"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="84">sha1<pos:position pos:line="41" pos:column="88"/></name></expr></argument>)<pos:position pos:line="41" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="90"/></expr_stmt>

		<expr_stmt><expr><name pos:line="43" pos:column="17">used<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">+=<pos:position pos:line="43" pos:column="24"/></operator> <name pos:line="43" pos:column="25">len<pos:position pos:line="43" pos:column="28"/></name></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="44" pos:column="17">size<pos:position pos:line="44" pos:column="21"/></name> <operator pos:line="44" pos:column="22">-=<pos:position pos:line="44" pos:column="24"/></operator> <name pos:line="44" pos:column="25">len<pos:position pos:line="44" pos:column="28"/></name></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="45" pos:column="17">buffer<pos:position pos:line="45" pos:column="23"/></name> <operator pos:line="45" pos:column="24">=<pos:position pos:line="45" pos:column="25"/></operator> <operator pos:line="45" pos:column="26">(<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="27">char<pos:position pos:line="45" pos:column="31"/></name> <operator pos:line="45" pos:column="32">*<pos:position pos:line="45" pos:column="33"/></operator><operator pos:line="45" pos:column="33">)<pos:position pos:line="45" pos:column="34"/></operator> <name pos:line="45" pos:column="35">buffer<pos:position pos:line="45" pos:column="41"/></name> <operator pos:line="45" pos:column="42">+<pos:position pos:line="45" pos:column="43"/></operator> <name pos:line="45" pos:column="44">len<pos:position pos:line="45" pos:column="47"/></name></expr>;<pos:position pos:line="45" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="48" pos:column="9">write_sha1_file<pos:position pos:line="48" pos:column="24"/></name><argument_list pos:line="48" pos:column="24">(<argument><expr><operator pos:line="48" pos:column="25">new<pos:position pos:line="48" pos:column="28"/></operator></expr></argument>, <argument><expr><name pos:line="48" pos:column="30">newlen<pos:position pos:line="48" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="38">tree_type<pos:position pos:line="48" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="49">result_sha1<pos:position pos:line="48" pos:column="60"/></name></expr></argument>)<pos:position pos:line="48" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="49" pos:column="9">free<pos:position pos:line="49" pos:column="13"/></name><argument_list pos:line="49" pos:column="13">(<argument><expr><operator pos:line="49" pos:column="14">new<pos:position pos:line="49" pos:column="17"/></operator></expr></argument>)<pos:position pos:line="49" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="19"/></expr_stmt>
	<return pos:line="50" pos:column="9">return <expr><name pos:line="50" pos:column="16">used<pos:position pos:line="50" pos:column="20"/></name></expr>;<pos:position pos:line="50" pos:column="21"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
