<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2821.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">command_loop<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">child<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">buffer<pos:position pos:line="3" pos:column="20"/></name><index pos:line="3" pos:column="20">[<expr><name pos:line="3" pos:column="21">MAXCOMMAND<pos:position pos:line="3" pos:column="31"/></name></expr>]<pos:position pos:line="3" pos:column="32"/></index></name></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>

	<while pos:line="5" pos:column="9">while <condition pos:line="5" pos:column="15">(<expr><literal type="number" pos:line="5" pos:column="16">1<pos:position pos:line="5" pos:column="17"/></literal></expr>)<pos:position pos:line="5" pos:column="18"/></condition> <block pos:line="5" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">size_t<pos:position pos:line="6" pos:column="23"/></name></type> <name pos:line="6" pos:column="24">i<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><operator pos:line="7" pos:column="21">!<pos:position pos:line="7" pos:column="22"/></operator><call><name pos:line="7" pos:column="22">fgets<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">buffer<pos:position pos:line="7" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="36">MAXCOMMAND<pos:position pos:line="7" pos:column="46"/></name> <operator pos:line="7" pos:column="47">-<pos:position pos:line="7" pos:column="48"/></operator> <literal type="number" pos:line="7" pos:column="49">1<pos:position pos:line="7" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="52">stdin<pos:position pos:line="7" pos:column="57"/></name></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="59"/></condition><then pos:line="7" pos:column="59"> <block pos:line="7" pos:column="60">{
			<if pos:line="8" pos:column="25">if <condition pos:line="8" pos:column="28">(<expr><call><name pos:line="8" pos:column="29">ferror<pos:position pos:line="8" pos:column="35"/></name><argument_list pos:line="8" pos:column="35">(<argument><expr><name pos:line="8" pos:column="36">stdin<pos:position pos:line="8" pos:column="41"/></name></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="43"/></condition><then pos:line="8" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="33">die<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><literal type="string" pos:line="9" pos:column="37">"Comammand input error"<pos:position pos:line="9" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="62"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">exit<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><literal type="number" pos:line="10" pos:column="30">0<pos:position pos:line="10" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="11" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="12" pos:column="17">/* Strip end of line characters. */</comment>
		<expr_stmt><expr><name pos:line="13" pos:column="17">i<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <call><name pos:line="13" pos:column="21">strlen<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">buffer<pos:position pos:line="13" pos:column="34"/></name></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
		<while pos:line="14" pos:column="17">while <condition pos:line="14" pos:column="23">(<expr><name pos:line="14" pos:column="24">i<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">&gt;<pos:position pos:line="14" pos:column="30"/></operator> <literal type="number" pos:line="14" pos:column="28">0<pos:position pos:line="14" pos:column="29"/></literal> <operator pos:line="14" pos:column="30">&amp;&amp;<pos:position pos:line="14" pos:column="40"/></operator> <call><name pos:line="14" pos:column="33">isspace<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><name><name pos:line="14" pos:column="41">buffer<pos:position pos:line="14" pos:column="47"/></name><index pos:line="14" pos:column="47">[<expr><name pos:line="14" pos:column="48">i<pos:position pos:line="14" pos:column="49"/></name> <operator pos:line="14" pos:column="50">-<pos:position pos:line="14" pos:column="51"/></operator> <literal type="number" pos:line="14" pos:column="52">1<pos:position pos:line="14" pos:column="53"/></literal></expr>]<pos:position pos:line="14" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="56"/></condition>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="25">buffer<pos:position pos:line="15" pos:column="31"/></name><index pos:line="15" pos:column="31">[<expr><operator pos:line="15" pos:column="32">--<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">i<pos:position pos:line="15" pos:column="35"/></name></expr>]<pos:position pos:line="15" pos:column="36"/></index></name> <operator pos:line="15" pos:column="37">=<pos:position pos:line="15" pos:column="38"/></operator> <literal type="number" pos:line="15" pos:column="39">0<pos:position pos:line="15" pos:column="40"/></literal></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt></block></while>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><call><name pos:line="17" pos:column="22">strcmp<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">buffer<pos:position pos:line="17" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="37">"capabilities"<pos:position pos:line="17" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="53"/></condition><then pos:line="17" pos:column="53"> <block pos:line="17" pos:column="54">{
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">printf<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><literal type="string" pos:line="18" pos:column="32">"*connect\n\n"<pos:position pos:line="18" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">fflush<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">stdout<pos:position pos:line="19" pos:column="38"/></name></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="20" pos:column="18"/></block></then> <elseif pos:line="20" pos:column="19">else <if pos:line="20" pos:column="24">if <condition pos:line="20" pos:column="27">(<expr><operator pos:line="20" pos:column="28">!<pos:position pos:line="20" pos:column="29"/></operator><call><name pos:line="20" pos:column="29">strncmp<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><name pos:line="20" pos:column="37">buffer<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="45">"connect "<pos:position pos:line="20" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="57">8<pos:position pos:line="20" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="60"/></condition><then pos:line="20" pos:column="60"> <block pos:line="20" pos:column="61">{
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">printf<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><literal type="string" pos:line="21" pos:column="32">"\n"<pos:position pos:line="21" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">fflush<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">stdout<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
			<return pos:line="23" pos:column="25">return <expr><call><name pos:line="23" pos:column="32">run_child<pos:position pos:line="23" pos:column="41"/></name><argument_list pos:line="23" pos:column="41">(<argument><expr><name pos:line="23" pos:column="42">child<pos:position pos:line="23" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="49">buffer<pos:position pos:line="23" pos:column="55"/></name> <operator pos:line="23" pos:column="56">+<pos:position pos:line="23" pos:column="57"/></operator> <literal type="number" pos:line="23" pos:column="58">8<pos:position pos:line="23" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="61"/></return>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if></elseif> <else pos:line="24" pos:column="19">else <block pos:line="24" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">fprintf<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">stderr<pos:position pos:line="25" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="41">"Bad command"<pos:position pos:line="25" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="56"/></expr_stmt>
			<return pos:line="26" pos:column="25">return <expr><literal type="number" pos:line="26" pos:column="32">1<pos:position pos:line="26" pos:column="33"/></literal></expr>;<pos:position pos:line="26" pos:column="34"/></return>
		}<pos:position pos:line="27" pos:column="18"/></block></else></if>
	}<pos:position pos:line="28" pos:column="10"/></block></while>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
