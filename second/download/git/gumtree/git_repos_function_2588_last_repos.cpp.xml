<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2588_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">check_inbody_header<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">mailinfo<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">mi<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name><name pos:line="1" pos:column="59">struct<pos:position pos:line="1" pos:column="65"/></name> <name pos:line="1" pos:column="66">strbuf<pos:position pos:line="1" pos:column="72"/></name></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">line<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name><name pos:line="3" pos:column="13">mi<pos:position pos:line="3" pos:column="15"/></name><operator pos:line="3" pos:column="15">-&gt;<pos:position pos:line="3" pos:column="20"/></operator><name pos:line="3" pos:column="17">inbody_header_accum<pos:position pos:line="3" pos:column="36"/></name><operator pos:line="3" pos:column="36">.<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="37">len<pos:position pos:line="3" pos:column="40"/></name></name> <operator pos:line="3" pos:column="41">&amp;&amp;<pos:position pos:line="3" pos:column="51"/></operator>
	    <operator pos:line="4" pos:column="13">(<pos:position pos:line="4" pos:column="14"/></operator><name><name pos:line="4" pos:column="14">line<pos:position pos:line="4" pos:column="18"/></name><operator pos:line="4" pos:column="18">-&gt;<pos:position pos:line="4" pos:column="23"/></operator><name pos:line="4" pos:column="20">buf<pos:position pos:line="4" pos:column="23"/></name><index pos:line="4" pos:column="23">[<expr><literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr>]<pos:position pos:line="4" pos:column="26"/></index></name> <operator pos:line="4" pos:column="27">==<pos:position pos:line="4" pos:column="29"/></operator> <literal type="char" pos:line="4" pos:column="30">' '<pos:position pos:line="4" pos:column="33"/></literal> <operator pos:line="4" pos:column="34">||<pos:position pos:line="4" pos:column="36"/></operator> <name><name pos:line="4" pos:column="37">line<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">-&gt;<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="43">buf<pos:position pos:line="4" pos:column="46"/></name><index pos:line="4" pos:column="46">[<expr><literal type="number" pos:line="4" pos:column="47">0<pos:position pos:line="4" pos:column="48"/></literal></expr>]<pos:position pos:line="4" pos:column="49"/></index></name> <operator pos:line="4" pos:column="50">==<pos:position pos:line="4" pos:column="52"/></operator> <literal type="char" pos:line="4" pos:column="53">'\t'<pos:position pos:line="4" pos:column="57"/></literal><operator pos:line="4" pos:column="57">)<pos:position pos:line="4" pos:column="58"/></operator></expr>)<pos:position pos:line="4" pos:column="59"/></condition><then pos:line="4" pos:column="59"> <block pos:line="4" pos:column="60">{
		<if pos:line="5" pos:column="17">if <condition pos:line="5" pos:column="20">(<expr><name><name pos:line="5" pos:column="21">mi<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">-&gt;<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="25">use_scissors<pos:position pos:line="5" pos:column="37"/></name></name> <operator pos:line="5" pos:column="38">&amp;&amp;<pos:position pos:line="5" pos:column="48"/></operator> <call><name pos:line="5" pos:column="41">is_scissors_line<pos:position pos:line="5" pos:column="57"/></name><argument_list pos:line="5" pos:column="57">(<argument><expr><name><name pos:line="5" pos:column="58">line<pos:position pos:line="5" pos:column="62"/></name><operator pos:line="5" pos:column="62">-&gt;<pos:position pos:line="5" pos:column="67"/></operator><name pos:line="5" pos:column="64">buf<pos:position pos:line="5" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="69"/></condition><then pos:line="5" pos:column="69"> <block pos:line="5" pos:column="70">{
			<comment type="block" pos:line="6" pos:column="25">/*
			 * This is a scissors line; do not consider this line
			 * as a header continuation line.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">flush_inbody_header_accum<pos:position pos:line="10" pos:column="50"/></name><argument_list pos:line="10" pos:column="50">(<argument><expr><name pos:line="10" pos:column="51">mi<pos:position pos:line="10" pos:column="53"/></name></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></expr_stmt>
			<return pos:line="11" pos:column="25">return <expr><literal type="number" pos:line="11" pos:column="32">0<pos:position pos:line="11" pos:column="33"/></literal></expr>;<pos:position pos:line="11" pos:column="34"/></return>
		}<pos:position pos:line="12" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">strbuf_strip_suffix<pos:position pos:line="13" pos:column="36"/></name><argument_list pos:line="13" pos:column="36">(<argument><expr><operator pos:line="13" pos:column="37">&amp;<pos:position pos:line="13" pos:column="42"/></operator><name><name pos:line="13" pos:column="38">mi<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">-&gt;<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="42">inbody_header_accum<pos:position pos:line="13" pos:column="61"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="63">"\n"<pos:position pos:line="13" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">strbuf_addbuf<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><operator pos:line="14" pos:column="31">&amp;<pos:position pos:line="14" pos:column="36"/></operator><name><name pos:line="14" pos:column="32">mi<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">-&gt;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="36">inbody_header_accum<pos:position pos:line="14" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="57">line<pos:position pos:line="14" pos:column="61"/></name></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="63"/></expr_stmt>
		<return pos:line="15" pos:column="17">return <expr><literal type="number" pos:line="15" pos:column="24">1<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">flush_inbody_header_accum<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">mi<pos:position pos:line="18" pos:column="37"/></name></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">starts_with<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name><name pos:line="20" pos:column="25">line<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">-&gt;<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="31">buf<pos:position pos:line="20" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="36">"&gt;From"<pos:position pos:line="20" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call> <operator pos:line="20" pos:column="45">&amp;&amp;<pos:position pos:line="20" pos:column="55"/></operator> <call><name pos:line="20" pos:column="48">isspace<pos:position pos:line="20" pos:column="55"/></name><argument_list pos:line="20" pos:column="55">(<argument><expr><name><name pos:line="20" pos:column="56">line<pos:position pos:line="20" pos:column="60"/></name><operator pos:line="20" pos:column="60">-&gt;<pos:position pos:line="20" pos:column="65"/></operator><name pos:line="20" pos:column="62">buf<pos:position pos:line="20" pos:column="65"/></name><index pos:line="20" pos:column="65">[<expr><literal type="number" pos:line="20" pos:column="66">5<pos:position pos:line="20" pos:column="67"/></literal></expr>]<pos:position pos:line="20" pos:column="68"/></index></name></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="70"/></condition><then pos:line="20" pos:column="70">
		<block type="pseudo"><return pos:line="21" pos:column="17">return <expr><call><name pos:line="21" pos:column="24">is_format_patch_separator<pos:position pos:line="21" pos:column="49"/></name><argument_list pos:line="21" pos:column="49">(<argument><expr><name><name pos:line="21" pos:column="50">line<pos:position pos:line="21" pos:column="54"/></name><operator pos:line="21" pos:column="54">-&gt;<pos:position pos:line="21" pos:column="59"/></operator><name pos:line="21" pos:column="56">buf<pos:position pos:line="21" pos:column="59"/></name></name> <operator pos:line="21" pos:column="60">+<pos:position pos:line="21" pos:column="61"/></operator> <literal type="number" pos:line="21" pos:column="62">1<pos:position pos:line="21" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="65">line<pos:position pos:line="21" pos:column="69"/></name><operator pos:line="21" pos:column="69">-&gt;<pos:position pos:line="21" pos:column="74"/></operator><name pos:line="21" pos:column="71">len<pos:position pos:line="21" pos:column="74"/></name></name> <operator pos:line="21" pos:column="75">-<pos:position pos:line="21" pos:column="76"/></operator> <literal type="number" pos:line="21" pos:column="77">1<pos:position pos:line="21" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="80"/></return></block></then></if>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">starts_with<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name><name pos:line="22" pos:column="25">line<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">-&gt;<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="31">buf<pos:position pos:line="22" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="36">"[PATCH]"<pos:position pos:line="22" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call> <operator pos:line="22" pos:column="47">&amp;&amp;<pos:position pos:line="22" pos:column="57"/></operator> <call><name pos:line="22" pos:column="50">isspace<pos:position pos:line="22" pos:column="57"/></name><argument_list pos:line="22" pos:column="57">(<argument><expr><name><name pos:line="22" pos:column="58">line<pos:position pos:line="22" pos:column="62"/></name><operator pos:line="22" pos:column="62">-&gt;<pos:position pos:line="22" pos:column="67"/></operator><name pos:line="22" pos:column="64">buf<pos:position pos:line="22" pos:column="67"/></name><index pos:line="22" pos:column="67">[<expr><literal type="number" pos:line="22" pos:column="68">7<pos:position pos:line="22" pos:column="69"/></literal></expr>]<pos:position pos:line="22" pos:column="70"/></index></name></expr></argument>)<pos:position pos:line="22" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="72"/></condition><then pos:line="22" pos:column="72"> <block pos:line="22" pos:column="73">{
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">int<pos:position pos:line="23" pos:column="20"/></name></type> <name pos:line="23" pos:column="21">i<pos:position pos:line="23" pos:column="22"/></name></decl>;<pos:position pos:line="23" pos:column="23"/></decl_stmt>
		<for pos:line="24" pos:column="17">for <control pos:line="24" pos:column="21">(<init><expr><name pos:line="24" pos:column="22">i<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <literal type="number" pos:line="24" pos:column="26">0<pos:position pos:line="24" pos:column="27"/></literal></expr>;<pos:position pos:line="24" pos:column="28"/></init> <condition><expr><name><name pos:line="24" pos:column="29">header<pos:position pos:line="24" pos:column="35"/></name><index pos:line="24" pos:column="35">[<expr><name pos:line="24" pos:column="36">i<pos:position pos:line="24" pos:column="37"/></name></expr>]<pos:position pos:line="24" pos:column="38"/></index></name></expr>;<pos:position pos:line="24" pos:column="39"/></condition> <incr><expr><name pos:line="24" pos:column="40">i<pos:position pos:line="24" pos:column="41"/></name><operator pos:line="24" pos:column="41">++<pos:position pos:line="24" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="24" pos:column="44"/></control>
			<block type="pseudo"><if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><operator pos:line="25" pos:column="29">!<pos:position pos:line="25" pos:column="30"/></operator><call><name pos:line="25" pos:column="30">strcmp<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><literal type="string" pos:line="25" pos:column="37">"Subject"<pos:position pos:line="25" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="48">header<pos:position pos:line="25" pos:column="54"/></name><index pos:line="25" pos:column="54">[<expr><name pos:line="25" pos:column="55">i<pos:position pos:line="25" pos:column="56"/></name></expr>]<pos:position pos:line="25" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="25" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="59"/></condition><then pos:line="25" pos:column="59"> <block pos:line="25" pos:column="60">{
				<expr_stmt><expr><call><name pos:line="26" pos:column="33">handle_header<pos:position pos:line="26" pos:column="46"/></name><argument_list pos:line="26" pos:column="46">(<argument><expr><operator pos:line="26" pos:column="47">&amp;<pos:position pos:line="26" pos:column="52"/></operator><name><name pos:line="26" pos:column="48">mi<pos:position pos:line="26" pos:column="50"/></name><operator pos:line="26" pos:column="50">-&gt;<pos:position pos:line="26" pos:column="55"/></operator><name pos:line="26" pos:column="52">s_hdr_data<pos:position pos:line="26" pos:column="62"/></name><index pos:line="26" pos:column="62">[<expr><name pos:line="26" pos:column="63">i<pos:position pos:line="26" pos:column="64"/></name></expr>]<pos:position pos:line="26" pos:column="65"/></index></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="67">line<pos:position pos:line="26" pos:column="71"/></name></expr></argument>)<pos:position pos:line="26" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="73"/></expr_stmt>
				<return pos:line="27" pos:column="33">return <expr><literal type="number" pos:line="27" pos:column="40">1<pos:position pos:line="27" pos:column="41"/></literal></expr>;<pos:position pos:line="27" pos:column="42"/></return>
			}<pos:position pos:line="28" pos:column="26"/></block></then></if></block></for>
		<return pos:line="29" pos:column="17">return <expr><literal type="number" pos:line="29" pos:column="24">0<pos:position pos:line="29" pos:column="25"/></literal></expr>;<pos:position pos:line="29" pos:column="26"/></return>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name pos:line="31" pos:column="13">is_inbody_header<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">mi<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="34">line<pos:position pos:line="31" pos:column="38"/></name></expr></argument>)<pos:position pos:line="31" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="40"/></condition><then pos:line="31" pos:column="40"> <block pos:line="31" pos:column="41">{
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">strbuf_addbuf<pos:position pos:line="32" pos:column="30"/></name><argument_list pos:line="32" pos:column="30">(<argument><expr><operator pos:line="32" pos:column="31">&amp;<pos:position pos:line="32" pos:column="36"/></operator><name><name pos:line="32" pos:column="32">mi<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">-&gt;<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="36">inbody_header_accum<pos:position pos:line="32" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="57">line<pos:position pos:line="32" pos:column="61"/></name></expr></argument>)<pos:position pos:line="32" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="63"/></expr_stmt>
		<return pos:line="33" pos:column="17">return <expr><literal type="number" pos:line="33" pos:column="24">1<pos:position pos:line="33" pos:column="25"/></literal></expr>;<pos:position pos:line="33" pos:column="26"/></return>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
	<return pos:line="35" pos:column="9">return <expr><literal type="number" pos:line="35" pos:column="16">0<pos:position pos:line="35" pos:column="17"/></literal></expr>;<pos:position pos:line="35" pos:column="18"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
