<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1082_git-2.3.7.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">diff_populate_filespec<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">diff_filespec<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">s<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">unsigned<pos:position pos:line="1" pos:column="61"/></name> <name pos:line="1" pos:column="62">int<pos:position pos:line="1" pos:column="65"/></name></type> <name pos:line="1" pos:column="66">flags<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">size_only<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><name pos:line="3" pos:column="25">flags<pos:position pos:line="3" pos:column="30"/></name> <operator pos:line="3" pos:column="31">&amp;<pos:position pos:line="3" pos:column="36"/></operator> <name pos:line="3" pos:column="33">CHECK_SIZE_ONLY<pos:position pos:line="3" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">err<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<comment type="block" pos:line="5" pos:column="9">/*
	 * demote FAIL to WARN to allow inspecting the situation
	 * instead of refusing.
	 */</comment>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">enum<pos:position pos:line="9" pos:column="13"/></name> <name pos:line="9" pos:column="14">safe_crlf<pos:position pos:line="9" pos:column="23"/></name></name></type> <name pos:line="9" pos:column="24">crlf_warn<pos:position pos:line="9" pos:column="33"/></name> <init pos:line="9" pos:column="34">= <expr><operator pos:line="9" pos:column="36">(<pos:position pos:line="9" pos:column="37"/></operator><ternary><condition><expr><name pos:line="9" pos:column="37">safe_crlf<pos:position pos:line="9" pos:column="46"/></name> <operator pos:line="9" pos:column="47">==<pos:position pos:line="9" pos:column="49"/></operator> <name pos:line="9" pos:column="50">SAFE_CRLF_FAIL<pos:position pos:line="9" pos:column="64"/></name></expr>
				    ?<pos:position pos:line="10" pos:column="38"/></condition><then pos:line="10" pos:column="38"> <expr><name pos:line="10" pos:column="39">SAFE_CRLF_WARN<pos:position pos:line="10" pos:column="53"/></name></expr>
				    <pos:position pos:line="11" pos:column="9"/></then><else pos:line="11" pos:column="37">: <expr><name pos:line="11" pos:column="39">safe_crlf<pos:position pos:line="11" pos:column="48"/></name></expr></else></ternary><operator pos:line="11" pos:column="48">)<pos:position pos:line="11" pos:column="49"/></operator></expr></init></decl>;<pos:position pos:line="11" pos:column="50"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><call><name pos:line="13" pos:column="14">DIFF_FILE_VALID<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">s<pos:position pos:line="13" pos:column="31"/></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="33"/></condition><then pos:line="13" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">die<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><literal type="string" pos:line="14" pos:column="21">"internal error: asking to populate invalid file."<pos:position pos:line="14" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="73"/></expr_stmt></block></then></if>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">S_ISDIR<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name><name pos:line="15" pos:column="21">s<pos:position pos:line="15" pos:column="22"/></name><operator pos:line="15" pos:column="22">-&gt;<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="24">mode<pos:position pos:line="15" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="30"/></condition><then pos:line="15" pos:column="30">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">-<pos:position pos:line="16" pos:column="25"/></operator><literal type="number" pos:line="16" pos:column="25">1<pos:position pos:line="16" pos:column="26"/></literal></expr>;<pos:position pos:line="16" pos:column="27"/></return></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name><name pos:line="18" pos:column="13">s<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">-&gt;<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="16">data<pos:position pos:line="18" pos:column="20"/></name></name></expr>)<pos:position pos:line="18" pos:column="21"/></condition><then pos:line="18" pos:column="21">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return></block></then></if>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">size_only<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">&amp;&amp;<pos:position pos:line="21" pos:column="33"/></operator> <literal type="number" pos:line="21" pos:column="26">0<pos:position pos:line="21" pos:column="27"/></literal> <operator pos:line="21" pos:column="28">&lt;<pos:position pos:line="21" pos:column="32"/></operator> <name><name pos:line="21" pos:column="30">s<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">-&gt;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="33">size<pos:position pos:line="21" pos:column="37"/></name></name></expr>)<pos:position pos:line="21" pos:column="38"/></condition><then pos:line="21" pos:column="38">
		<block type="pseudo"><return pos:line="22" pos:column="17">return <expr><literal type="number" pos:line="22" pos:column="24">0<pos:position pos:line="22" pos:column="25"/></literal></expr>;<pos:position pos:line="22" pos:column="26"/></return></block></then></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">S_ISGITLINK<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name><name pos:line="24" pos:column="25">s<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">-&gt;<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="28">mode<pos:position pos:line="24" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="34"/></condition><then pos:line="24" pos:column="34">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><call><name pos:line="25" pos:column="24">diff_populate_gitlink<pos:position pos:line="25" pos:column="45"/></name><argument_list pos:line="25" pos:column="45">(<argument><expr><name pos:line="25" pos:column="46">s<pos:position pos:line="25" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="49">size_only<pos:position pos:line="25" pos:column="58"/></name></expr></argument>)<pos:position pos:line="25" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="60"/></return></block></then></if>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><name><name pos:line="27" pos:column="14">s<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">-&gt;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="17">sha1_valid<pos:position pos:line="27" pos:column="27"/></name></name> <operator pos:line="27" pos:column="28">||<pos:position pos:line="27" pos:column="30"/></operator>
	    <call><name pos:line="28" pos:column="13">reuse_worktree_file<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><name><name pos:line="28" pos:column="33">s<pos:position pos:line="28" pos:column="34"/></name><operator pos:line="28" pos:column="34">-&gt;<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="36">path<pos:position pos:line="28" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="42">s<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">-&gt;<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="45">sha1<pos:position pos:line="28" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="51">0<pos:position pos:line="28" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="54"/></condition><then pos:line="28" pos:column="54"> <block pos:line="28" pos:column="55">{
		<decl_stmt><decl><type><name><name pos:line="29" pos:column="17">struct<pos:position pos:line="29" pos:column="23"/></name> <name pos:line="29" pos:column="24">strbuf<pos:position pos:line="29" pos:column="30"/></name></name></type> <name pos:line="29" pos:column="31">buf<pos:position pos:line="29" pos:column="34"/></name> <init pos:line="29" pos:column="35">= <expr><name pos:line="29" pos:column="37">STRBUF_INIT<pos:position pos:line="29" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="29" pos:column="49"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="30" pos:column="17">struct<pos:position pos:line="30" pos:column="23"/></name> <name pos:line="30" pos:column="24">stat<pos:position pos:line="30" pos:column="28"/></name></name></type> <name pos:line="30" pos:column="29">st<pos:position pos:line="30" pos:column="31"/></name></decl>;<pos:position pos:line="30" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="31" pos:column="17">int<pos:position pos:line="31" pos:column="20"/></name></type> <name pos:line="31" pos:column="21">fd<pos:position pos:line="31" pos:column="23"/></name></decl>;<pos:position pos:line="31" pos:column="24"/></decl_stmt>

		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><call><name pos:line="33" pos:column="21">lstat<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><name><name pos:line="33" pos:column="27">s<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">-&gt;<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="30">path<pos:position pos:line="33" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="36">&amp;<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="37">st<pos:position pos:line="33" pos:column="39"/></name></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call> <operator pos:line="33" pos:column="41">&lt;<pos:position pos:line="33" pos:column="45"/></operator> <literal type="number" pos:line="33" pos:column="43">0<pos:position pos:line="33" pos:column="44"/></literal></expr>)<pos:position pos:line="33" pos:column="45"/></condition><then pos:line="33" pos:column="45"> <block pos:line="33" pos:column="46">{
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><name pos:line="34" pos:column="29">errno<pos:position pos:line="34" pos:column="34"/></name> <operator pos:line="34" pos:column="35">==<pos:position pos:line="34" pos:column="37"/></operator> <name pos:line="34" pos:column="38">ENOENT<pos:position pos:line="34" pos:column="44"/></name></expr>)<pos:position pos:line="34" pos:column="45"/></condition><then pos:line="34" pos:column="45"> <block pos:line="34" pos:column="46">{
			<label><name pos:line="35" pos:column="25">err_empty<pos:position pos:line="35" pos:column="34"/></name>:<pos:position pos:line="35" pos:column="35"/></label>
				<expr_stmt><expr><name pos:line="36" pos:column="33">err<pos:position pos:line="36" pos:column="36"/></name> <operator pos:line="36" pos:column="37">=<pos:position pos:line="36" pos:column="38"/></operator> <operator pos:line="36" pos:column="39">-<pos:position pos:line="36" pos:column="40"/></operator><literal type="number" pos:line="36" pos:column="40">1<pos:position pos:line="36" pos:column="41"/></literal></expr>;<pos:position pos:line="36" pos:column="42"/></expr_stmt>
			<label><name pos:line="37" pos:column="25">empty<pos:position pos:line="37" pos:column="30"/></name>:<pos:position pos:line="37" pos:column="31"/></label>
				<expr_stmt><expr><name><name pos:line="38" pos:column="33">s<pos:position pos:line="38" pos:column="34"/></name><operator pos:line="38" pos:column="34">-&gt;<pos:position pos:line="38" pos:column="39"/></operator><name pos:line="38" pos:column="36">data<pos:position pos:line="38" pos:column="40"/></name></name> <operator pos:line="38" pos:column="41">=<pos:position pos:line="38" pos:column="42"/></operator> <operator pos:line="38" pos:column="43">(<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="44">char<pos:position pos:line="38" pos:column="48"/></name> <operator pos:line="38" pos:column="49">*<pos:position pos:line="38" pos:column="50"/></operator><operator pos:line="38" pos:column="50">)<pos:position pos:line="38" pos:column="51"/></operator><literal type="string" pos:line="38" pos:column="51">""<pos:position pos:line="38" pos:column="53"/></literal></expr>;<pos:position pos:line="38" pos:column="54"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="39" pos:column="33">s<pos:position pos:line="39" pos:column="34"/></name><operator pos:line="39" pos:column="34">-&gt;<pos:position pos:line="39" pos:column="39"/></operator><name pos:line="39" pos:column="36">size<pos:position pos:line="39" pos:column="40"/></name></name> <operator pos:line="39" pos:column="41">=<pos:position pos:line="39" pos:column="42"/></operator> <literal type="number" pos:line="39" pos:column="43">0<pos:position pos:line="39" pos:column="44"/></literal></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt>
				<return pos:line="40" pos:column="33">return <expr><name pos:line="40" pos:column="40">err<pos:position pos:line="40" pos:column="43"/></name></expr>;<pos:position pos:line="40" pos:column="44"/></return>
			}<pos:position pos:line="41" pos:column="26"/></block></then></if>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">s<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">-&gt;<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="20">size<pos:position pos:line="43" pos:column="24"/></name></name> <operator pos:line="43" pos:column="25">=<pos:position pos:line="43" pos:column="26"/></operator> <call><name pos:line="43" pos:column="27">xsize_t<pos:position pos:line="43" pos:column="34"/></name><argument_list pos:line="43" pos:column="34">(<argument><expr><name><name pos:line="43" pos:column="35">st<pos:position pos:line="43" pos:column="37"/></name><operator pos:line="43" pos:column="37">.<pos:position pos:line="43" pos:column="38"/></operator><name pos:line="43" pos:column="38">st_size<pos:position pos:line="43" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="47"/></expr_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><operator pos:line="44" pos:column="21">!<pos:position pos:line="44" pos:column="22"/></operator><name><name pos:line="44" pos:column="22">s<pos:position pos:line="44" pos:column="23"/></name><operator pos:line="44" pos:column="23">-&gt;<pos:position pos:line="44" pos:column="28"/></operator><name pos:line="44" pos:column="25">size<pos:position pos:line="44" pos:column="29"/></name></name></expr>)<pos:position pos:line="44" pos:column="30"/></condition><then pos:line="44" pos:column="30">
			<block type="pseudo"><goto pos:line="45" pos:column="25">goto <name pos:line="45" pos:column="30">empty<pos:position pos:line="45" pos:column="35"/></name>;<pos:position pos:line="45" pos:column="36"/></goto></block></then></if>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><call><name pos:line="46" pos:column="21">S_ISLNK<pos:position pos:line="46" pos:column="28"/></name><argument_list pos:line="46" pos:column="28">(<argument><expr><name><name pos:line="46" pos:column="29">st<pos:position pos:line="46" pos:column="31"/></name><operator pos:line="46" pos:column="31">.<pos:position pos:line="46" pos:column="32"/></operator><name pos:line="46" pos:column="32">st_mode<pos:position pos:line="46" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="41"/></condition><then pos:line="46" pos:column="41"> <block pos:line="46" pos:column="42">{
			<decl_stmt><decl><type><name><name pos:line="47" pos:column="25">struct<pos:position pos:line="47" pos:column="31"/></name> <name pos:line="47" pos:column="32">strbuf<pos:position pos:line="47" pos:column="38"/></name></name></type> <name pos:line="47" pos:column="39">sb<pos:position pos:line="47" pos:column="41"/></name> <init pos:line="47" pos:column="42">= <expr><name pos:line="47" pos:column="44">STRBUF_INIT<pos:position pos:line="47" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="47" pos:column="56"/></decl_stmt>

			<if pos:line="49" pos:column="25">if <condition pos:line="49" pos:column="28">(<expr><call><name pos:line="49" pos:column="29">strbuf_readlink<pos:position pos:line="49" pos:column="44"/></name><argument_list pos:line="49" pos:column="44">(<argument><expr><operator pos:line="49" pos:column="45">&amp;<pos:position pos:line="49" pos:column="50"/></operator><name pos:line="49" pos:column="46">sb<pos:position pos:line="49" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="50">s<pos:position pos:line="49" pos:column="51"/></name><operator pos:line="49" pos:column="51">-&gt;<pos:position pos:line="49" pos:column="56"/></operator><name pos:line="49" pos:column="53">path<pos:position pos:line="49" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="59">s<pos:position pos:line="49" pos:column="60"/></name><operator pos:line="49" pos:column="60">-&gt;<pos:position pos:line="49" pos:column="65"/></operator><name pos:line="49" pos:column="62">size<pos:position pos:line="49" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="68"/></condition><then pos:line="49" pos:column="68">
				<block type="pseudo"><goto pos:line="50" pos:column="33">goto <name pos:line="50" pos:column="38">err_empty<pos:position pos:line="50" pos:column="47"/></name>;<pos:position pos:line="50" pos:column="48"/></goto></block></then></if>
			<expr_stmt><expr><name><name pos:line="51" pos:column="25">s<pos:position pos:line="51" pos:column="26"/></name><operator pos:line="51" pos:column="26">-&gt;<pos:position pos:line="51" pos:column="31"/></operator><name pos:line="51" pos:column="28">size<pos:position pos:line="51" pos:column="32"/></name></name> <operator pos:line="51" pos:column="33">=<pos:position pos:line="51" pos:column="34"/></operator> <name><name pos:line="51" pos:column="35">sb<pos:position pos:line="51" pos:column="37"/></name><operator pos:line="51" pos:column="37">.<pos:position pos:line="51" pos:column="38"/></operator><name pos:line="51" pos:column="38">len<pos:position pos:line="51" pos:column="41"/></name></name></expr>;<pos:position pos:line="51" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="52" pos:column="25">s<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">-&gt;<pos:position pos:line="52" pos:column="31"/></operator><name pos:line="52" pos:column="28">data<pos:position pos:line="52" pos:column="32"/></name></name> <operator pos:line="52" pos:column="33">=<pos:position pos:line="52" pos:column="34"/></operator> <call><name pos:line="52" pos:column="35">strbuf_detach<pos:position pos:line="52" pos:column="48"/></name><argument_list pos:line="52" pos:column="48">(<argument><expr><operator pos:line="52" pos:column="49">&amp;<pos:position pos:line="52" pos:column="54"/></operator><name pos:line="52" pos:column="50">sb<pos:position pos:line="52" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="54">NULL<pos:position pos:line="52" pos:column="58"/></name></expr></argument>)<pos:position pos:line="52" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="53" pos:column="25">s<pos:position pos:line="53" pos:column="26"/></name><operator pos:line="53" pos:column="26">-&gt;<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="28">should_free<pos:position pos:line="53" pos:column="39"/></name></name> <operator pos:line="53" pos:column="40">=<pos:position pos:line="53" pos:column="41"/></operator> <literal type="number" pos:line="53" pos:column="42">1<pos:position pos:line="53" pos:column="43"/></literal></expr>;<pos:position pos:line="53" pos:column="44"/></expr_stmt>
			<return pos:line="54" pos:column="25">return <expr><literal type="number" pos:line="54" pos:column="32">0<pos:position pos:line="54" pos:column="33"/></literal></expr>;<pos:position pos:line="54" pos:column="34"/></return>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">size_only<pos:position pos:line="56" pos:column="30"/></name></expr>)<pos:position pos:line="56" pos:column="31"/></condition><then pos:line="56" pos:column="31">
			<block type="pseudo"><return pos:line="57" pos:column="25">return <expr><literal type="number" pos:line="57" pos:column="32">0<pos:position pos:line="57" pos:column="33"/></literal></expr>;<pos:position pos:line="57" pos:column="34"/></return></block></then></if>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><operator pos:line="58" pos:column="21">(<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="22">flags<pos:position pos:line="58" pos:column="27"/></name> <operator pos:line="58" pos:column="28">&amp;<pos:position pos:line="58" pos:column="33"/></operator> <name pos:line="58" pos:column="30">CHECK_BINARY<pos:position pos:line="58" pos:column="42"/></name><operator pos:line="58" pos:column="42">)<pos:position pos:line="58" pos:column="43"/></operator> <operator pos:line="58" pos:column="44">&amp;&amp;<pos:position pos:line="58" pos:column="54"/></operator>
		    <name><name pos:line="59" pos:column="21">s<pos:position pos:line="59" pos:column="22"/></name><operator pos:line="59" pos:column="22">-&gt;<pos:position pos:line="59" pos:column="27"/></operator><name pos:line="59" pos:column="24">size<pos:position pos:line="59" pos:column="28"/></name></name> <operator pos:line="59" pos:column="29">&gt;<pos:position pos:line="59" pos:column="33"/></operator> <name pos:line="59" pos:column="31">big_file_threshold<pos:position pos:line="59" pos:column="49"/></name> <operator pos:line="59" pos:column="50">&amp;&amp;<pos:position pos:line="59" pos:column="60"/></operator> <name><name pos:line="59" pos:column="53">s<pos:position pos:line="59" pos:column="54"/></name><operator pos:line="59" pos:column="54">-&gt;<pos:position pos:line="59" pos:column="59"/></operator><name pos:line="59" pos:column="56">is_binary<pos:position pos:line="59" pos:column="65"/></name></name> <operator pos:line="59" pos:column="66">==<pos:position pos:line="59" pos:column="68"/></operator> <operator pos:line="59" pos:column="69">-<pos:position pos:line="59" pos:column="70"/></operator><literal type="number" pos:line="59" pos:column="70">1<pos:position pos:line="59" pos:column="71"/></literal></expr>)<pos:position pos:line="59" pos:column="72"/></condition><then pos:line="59" pos:column="72"> <block pos:line="59" pos:column="73">{
			<expr_stmt><expr><name><name pos:line="60" pos:column="25">s<pos:position pos:line="60" pos:column="26"/></name><operator pos:line="60" pos:column="26">-&gt;<pos:position pos:line="60" pos:column="31"/></operator><name pos:line="60" pos:column="28">is_binary<pos:position pos:line="60" pos:column="37"/></name></name> <operator pos:line="60" pos:column="38">=<pos:position pos:line="60" pos:column="39"/></operator> <literal type="number" pos:line="60" pos:column="40">1<pos:position pos:line="60" pos:column="41"/></literal></expr>;<pos:position pos:line="60" pos:column="42"/></expr_stmt>
			<return pos:line="61" pos:column="25">return <expr><literal type="number" pos:line="61" pos:column="32">0<pos:position pos:line="61" pos:column="33"/></literal></expr>;<pos:position pos:line="61" pos:column="34"/></return>
		}<pos:position pos:line="62" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="63" pos:column="17">fd<pos:position pos:line="63" pos:column="19"/></name> <operator pos:line="63" pos:column="20">=<pos:position pos:line="63" pos:column="21"/></operator> <call><name pos:line="63" pos:column="22">open<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><name><name pos:line="63" pos:column="27">s<pos:position pos:line="63" pos:column="28"/></name><operator pos:line="63" pos:column="28">-&gt;<pos:position pos:line="63" pos:column="33"/></operator><name pos:line="63" pos:column="30">path<pos:position pos:line="63" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="36">O_RDONLY<pos:position pos:line="63" pos:column="44"/></name></expr></argument>)<pos:position pos:line="63" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="46"/></expr_stmt>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">fd<pos:position pos:line="64" pos:column="23"/></name> <operator pos:line="64" pos:column="24">&lt;<pos:position pos:line="64" pos:column="28"/></operator> <literal type="number" pos:line="64" pos:column="26">0<pos:position pos:line="64" pos:column="27"/></literal></expr>)<pos:position pos:line="64" pos:column="28"/></condition><then pos:line="64" pos:column="28">
			<block type="pseudo"><goto pos:line="65" pos:column="25">goto <name pos:line="65" pos:column="30">err_empty<pos:position pos:line="65" pos:column="39"/></name>;<pos:position pos:line="65" pos:column="40"/></goto></block></then></if>
		<expr_stmt><expr><name><name pos:line="66" pos:column="17">s<pos:position pos:line="66" pos:column="18"/></name><operator pos:line="66" pos:column="18">-&gt;<pos:position pos:line="66" pos:column="23"/></operator><name pos:line="66" pos:column="20">data<pos:position pos:line="66" pos:column="24"/></name></name> <operator pos:line="66" pos:column="25">=<pos:position pos:line="66" pos:column="26"/></operator> <call><name pos:line="66" pos:column="27">xmmap<pos:position pos:line="66" pos:column="32"/></name><argument_list pos:line="66" pos:column="32">(<argument><expr><name pos:line="66" pos:column="33">NULL<pos:position pos:line="66" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="39">s<pos:position pos:line="66" pos:column="40"/></name><operator pos:line="66" pos:column="40">-&gt;<pos:position pos:line="66" pos:column="45"/></operator><name pos:line="66" pos:column="42">size<pos:position pos:line="66" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="48">PROT_READ<pos:position pos:line="66" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="59">MAP_PRIVATE<pos:position pos:line="66" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="72">fd<pos:position pos:line="66" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="76">0<pos:position pos:line="66" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="67" pos:column="17">close<pos:position pos:line="67" pos:column="22"/></name><argument_list pos:line="67" pos:column="22">(<argument><expr><name pos:line="67" pos:column="23">fd<pos:position pos:line="67" pos:column="25"/></name></expr></argument>)<pos:position pos:line="67" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="68" pos:column="17">s<pos:position pos:line="68" pos:column="18"/></name><operator pos:line="68" pos:column="18">-&gt;<pos:position pos:line="68" pos:column="23"/></operator><name pos:line="68" pos:column="20">should_munmap<pos:position pos:line="68" pos:column="33"/></name></name> <operator pos:line="68" pos:column="34">=<pos:position pos:line="68" pos:column="35"/></operator> <literal type="number" pos:line="68" pos:column="36">1<pos:position pos:line="68" pos:column="37"/></literal></expr>;<pos:position pos:line="68" pos:column="38"/></expr_stmt>

		<comment type="block" pos:line="70" pos:column="17">/*
		 * Convert from working tree format to canonical git format
		 */</comment>
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><call><name pos:line="73" pos:column="21">convert_to_git<pos:position pos:line="73" pos:column="35"/></name><argument_list pos:line="73" pos:column="35">(<argument><expr><name><name pos:line="73" pos:column="36">s<pos:position pos:line="73" pos:column="37"/></name><operator pos:line="73" pos:column="37">-&gt;<pos:position pos:line="73" pos:column="42"/></operator><name pos:line="73" pos:column="39">path<pos:position pos:line="73" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="45">s<pos:position pos:line="73" pos:column="46"/></name><operator pos:line="73" pos:column="46">-&gt;<pos:position pos:line="73" pos:column="51"/></operator><name pos:line="73" pos:column="48">data<pos:position pos:line="73" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="54">s<pos:position pos:line="73" pos:column="55"/></name><operator pos:line="73" pos:column="55">-&gt;<pos:position pos:line="73" pos:column="60"/></operator><name pos:line="73" pos:column="57">size<pos:position pos:line="73" pos:column="61"/></name></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="63">&amp;<pos:position pos:line="73" pos:column="68"/></operator><name pos:line="73" pos:column="64">buf<pos:position pos:line="73" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="69">crlf_warn<pos:position pos:line="73" pos:column="78"/></name></expr></argument>)<pos:position pos:line="73" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="80"/></condition><then pos:line="73" pos:column="80"> <block pos:line="73" pos:column="81">{
			<decl_stmt><decl><type><name pos:line="74" pos:column="25">size_t<pos:position pos:line="74" pos:column="31"/></name></type> <name pos:line="74" pos:column="32">size<pos:position pos:line="74" pos:column="36"/></name> <init pos:line="74" pos:column="37">= <expr><literal type="number" pos:line="74" pos:column="39">0<pos:position pos:line="74" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="74" pos:column="41"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="75" pos:column="25">munmap<pos:position pos:line="75" pos:column="31"/></name><argument_list pos:line="75" pos:column="31">(<argument><expr><name><name pos:line="75" pos:column="32">s<pos:position pos:line="75" pos:column="33"/></name><operator pos:line="75" pos:column="33">-&gt;<pos:position pos:line="75" pos:column="38"/></operator><name pos:line="75" pos:column="35">data<pos:position pos:line="75" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="41">s<pos:position pos:line="75" pos:column="42"/></name><operator pos:line="75" pos:column="42">-&gt;<pos:position pos:line="75" pos:column="47"/></operator><name pos:line="75" pos:column="44">size<pos:position pos:line="75" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="76" pos:column="25">s<pos:position pos:line="76" pos:column="26"/></name><operator pos:line="76" pos:column="26">-&gt;<pos:position pos:line="76" pos:column="31"/></operator><name pos:line="76" pos:column="28">should_munmap<pos:position pos:line="76" pos:column="41"/></name></name> <operator pos:line="76" pos:column="42">=<pos:position pos:line="76" pos:column="43"/></operator> <literal type="number" pos:line="76" pos:column="44">0<pos:position pos:line="76" pos:column="45"/></literal></expr>;<pos:position pos:line="76" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="77" pos:column="25">s<pos:position pos:line="77" pos:column="26"/></name><operator pos:line="77" pos:column="26">-&gt;<pos:position pos:line="77" pos:column="31"/></operator><name pos:line="77" pos:column="28">data<pos:position pos:line="77" pos:column="32"/></name></name> <operator pos:line="77" pos:column="33">=<pos:position pos:line="77" pos:column="34"/></operator> <call><name pos:line="77" pos:column="35">strbuf_detach<pos:position pos:line="77" pos:column="48"/></name><argument_list pos:line="77" pos:column="48">(<argument><expr><operator pos:line="77" pos:column="49">&amp;<pos:position pos:line="77" pos:column="54"/></operator><name pos:line="77" pos:column="50">buf<pos:position pos:line="77" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="55">&amp;<pos:position pos:line="77" pos:column="60"/></operator><name pos:line="77" pos:column="56">size<pos:position pos:line="77" pos:column="60"/></name></expr></argument>)<pos:position pos:line="77" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="78" pos:column="25">s<pos:position pos:line="78" pos:column="26"/></name><operator pos:line="78" pos:column="26">-&gt;<pos:position pos:line="78" pos:column="31"/></operator><name pos:line="78" pos:column="28">size<pos:position pos:line="78" pos:column="32"/></name></name> <operator pos:line="78" pos:column="33">=<pos:position pos:line="78" pos:column="34"/></operator> <name pos:line="78" pos:column="35">size<pos:position pos:line="78" pos:column="39"/></name></expr>;<pos:position pos:line="78" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="79" pos:column="25">s<pos:position pos:line="79" pos:column="26"/></name><operator pos:line="79" pos:column="26">-&gt;<pos:position pos:line="79" pos:column="31"/></operator><name pos:line="79" pos:column="28">should_free<pos:position pos:line="79" pos:column="39"/></name></name> <operator pos:line="79" pos:column="40">=<pos:position pos:line="79" pos:column="41"/></operator> <literal type="number" pos:line="79" pos:column="42">1<pos:position pos:line="79" pos:column="43"/></literal></expr>;<pos:position pos:line="79" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="80" pos:column="18"/></block></then></if>
	}<pos:position pos:line="81" pos:column="10"/></block></then>
	<else pos:line="82" pos:column="9">else <block pos:line="82" pos:column="14">{
		<decl_stmt><decl><type><name><name pos:line="83" pos:column="17">enum<pos:position pos:line="83" pos:column="21"/></name> <name pos:line="83" pos:column="22">object_type<pos:position pos:line="83" pos:column="33"/></name></name></type> <name pos:line="83" pos:column="34">type<pos:position pos:line="83" pos:column="38"/></name></decl>;<pos:position pos:line="83" pos:column="39"/></decl_stmt>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name pos:line="84" pos:column="21">size_only<pos:position pos:line="84" pos:column="30"/></name> <operator pos:line="84" pos:column="31">||<pos:position pos:line="84" pos:column="33"/></operator> <operator pos:line="84" pos:column="34">(<pos:position pos:line="84" pos:column="35"/></operator><name pos:line="84" pos:column="35">flags<pos:position pos:line="84" pos:column="40"/></name> <operator pos:line="84" pos:column="41">&amp;<pos:position pos:line="84" pos:column="46"/></operator> <name pos:line="84" pos:column="43">CHECK_BINARY<pos:position pos:line="84" pos:column="55"/></name><operator pos:line="84" pos:column="55">)<pos:position pos:line="84" pos:column="56"/></operator></expr>)<pos:position pos:line="84" pos:column="57"/></condition><then pos:line="84" pos:column="57"> <block pos:line="84" pos:column="58">{
			<expr_stmt><expr><name pos:line="85" pos:column="25">type<pos:position pos:line="85" pos:column="29"/></name> <operator pos:line="85" pos:column="30">=<pos:position pos:line="85" pos:column="31"/></operator> <call><name pos:line="85" pos:column="32">sha1_object_info<pos:position pos:line="85" pos:column="48"/></name><argument_list pos:line="85" pos:column="48">(<argument><expr><name><name pos:line="85" pos:column="49">s<pos:position pos:line="85" pos:column="50"/></name><operator pos:line="85" pos:column="50">-&gt;<pos:position pos:line="85" pos:column="55"/></operator><name pos:line="85" pos:column="52">sha1<pos:position pos:line="85" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="58">&amp;<pos:position pos:line="85" pos:column="63"/></operator><name><name pos:line="85" pos:column="59">s<pos:position pos:line="85" pos:column="60"/></name><operator pos:line="85" pos:column="60">-&gt;<pos:position pos:line="85" pos:column="65"/></operator><name pos:line="85" pos:column="62">size<pos:position pos:line="85" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="68"/></expr_stmt>
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><name pos:line="86" pos:column="29">type<pos:position pos:line="86" pos:column="33"/></name> <operator pos:line="86" pos:column="34">&lt;<pos:position pos:line="86" pos:column="38"/></operator> <literal type="number" pos:line="86" pos:column="36">0<pos:position pos:line="86" pos:column="37"/></literal></expr>)<pos:position pos:line="86" pos:column="38"/></condition><then pos:line="86" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="33">die<pos:position pos:line="87" pos:column="36"/></name><argument_list pos:line="87" pos:column="36">(<argument><expr><literal type="string" pos:line="87" pos:column="37">"unable to read %s"<pos:position pos:line="87" pos:column="56"/></literal></expr></argument>, <argument><expr><call><name pos:line="87" pos:column="58">sha1_to_hex<pos:position pos:line="87" pos:column="69"/></name><argument_list pos:line="87" pos:column="69">(<argument><expr><name><name pos:line="87" pos:column="70">s<pos:position pos:line="87" pos:column="71"/></name><operator pos:line="87" pos:column="71">-&gt;<pos:position pos:line="87" pos:column="76"/></operator><name pos:line="87" pos:column="73">sha1<pos:position pos:line="87" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="87" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="80"/></expr_stmt></block></then></if>
			<if pos:line="88" pos:column="25">if <condition pos:line="88" pos:column="28">(<expr><name pos:line="88" pos:column="29">size_only<pos:position pos:line="88" pos:column="38"/></name></expr>)<pos:position pos:line="88" pos:column="39"/></condition><then pos:line="88" pos:column="39">
				<block type="pseudo"><return pos:line="89" pos:column="33">return <expr><literal type="number" pos:line="89" pos:column="40">0<pos:position pos:line="89" pos:column="41"/></literal></expr>;<pos:position pos:line="89" pos:column="42"/></return></block></then></if>
			<if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><name><name pos:line="90" pos:column="29">s<pos:position pos:line="90" pos:column="30"/></name><operator pos:line="90" pos:column="30">-&gt;<pos:position pos:line="90" pos:column="35"/></operator><name pos:line="90" pos:column="32">size<pos:position pos:line="90" pos:column="36"/></name></name> <operator pos:line="90" pos:column="37">&gt;<pos:position pos:line="90" pos:column="41"/></operator> <name pos:line="90" pos:column="39">big_file_threshold<pos:position pos:line="90" pos:column="57"/></name> <operator pos:line="90" pos:column="58">&amp;&amp;<pos:position pos:line="90" pos:column="68"/></operator> <name><name pos:line="90" pos:column="61">s<pos:position pos:line="90" pos:column="62"/></name><operator pos:line="90" pos:column="62">-&gt;<pos:position pos:line="90" pos:column="67"/></operator><name pos:line="90" pos:column="64">is_binary<pos:position pos:line="90" pos:column="73"/></name></name> <operator pos:line="90" pos:column="74">==<pos:position pos:line="90" pos:column="76"/></operator> <operator pos:line="90" pos:column="77">-<pos:position pos:line="90" pos:column="78"/></operator><literal type="number" pos:line="90" pos:column="78">1<pos:position pos:line="90" pos:column="79"/></literal></expr>)<pos:position pos:line="90" pos:column="80"/></condition><then pos:line="90" pos:column="80"> <block pos:line="90" pos:column="81">{
				<expr_stmt><expr><name><name pos:line="91" pos:column="33">s<pos:position pos:line="91" pos:column="34"/></name><operator pos:line="91" pos:column="34">-&gt;<pos:position pos:line="91" pos:column="39"/></operator><name pos:line="91" pos:column="36">is_binary<pos:position pos:line="91" pos:column="45"/></name></name> <operator pos:line="91" pos:column="46">=<pos:position pos:line="91" pos:column="47"/></operator> <literal type="number" pos:line="91" pos:column="48">1<pos:position pos:line="91" pos:column="49"/></literal></expr>;<pos:position pos:line="91" pos:column="50"/></expr_stmt>
				<return pos:line="92" pos:column="33">return <expr><literal type="number" pos:line="92" pos:column="40">0<pos:position pos:line="92" pos:column="41"/></literal></expr>;<pos:position pos:line="92" pos:column="42"/></return>
			}<pos:position pos:line="93" pos:column="26"/></block></then></if>
		}<pos:position pos:line="94" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="95" pos:column="17">s<pos:position pos:line="95" pos:column="18"/></name><operator pos:line="95" pos:column="18">-&gt;<pos:position pos:line="95" pos:column="23"/></operator><name pos:line="95" pos:column="20">data<pos:position pos:line="95" pos:column="24"/></name></name> <operator pos:line="95" pos:column="25">=<pos:position pos:line="95" pos:column="26"/></operator> <call><name pos:line="95" pos:column="27">read_sha1_file<pos:position pos:line="95" pos:column="41"/></name><argument_list pos:line="95" pos:column="41">(<argument><expr><name><name pos:line="95" pos:column="42">s<pos:position pos:line="95" pos:column="43"/></name><operator pos:line="95" pos:column="43">-&gt;<pos:position pos:line="95" pos:column="48"/></operator><name pos:line="95" pos:column="45">sha1<pos:position pos:line="95" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="51">&amp;<pos:position pos:line="95" pos:column="56"/></operator><name pos:line="95" pos:column="52">type<pos:position pos:line="95" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="58">&amp;<pos:position pos:line="95" pos:column="63"/></operator><name><name pos:line="95" pos:column="59">s<pos:position pos:line="95" pos:column="60"/></name><operator pos:line="95" pos:column="60">-&gt;<pos:position pos:line="95" pos:column="65"/></operator><name pos:line="95" pos:column="62">size<pos:position pos:line="95" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="68"/></expr_stmt>
		<if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><operator pos:line="96" pos:column="21">!<pos:position pos:line="96" pos:column="22"/></operator><name><name pos:line="96" pos:column="22">s<pos:position pos:line="96" pos:column="23"/></name><operator pos:line="96" pos:column="23">-&gt;<pos:position pos:line="96" pos:column="28"/></operator><name pos:line="96" pos:column="25">data<pos:position pos:line="96" pos:column="29"/></name></name></expr>)<pos:position pos:line="96" pos:column="30"/></condition><then pos:line="96" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="97" pos:column="25">die<pos:position pos:line="97" pos:column="28"/></name><argument_list pos:line="97" pos:column="28">(<argument><expr><literal type="string" pos:line="97" pos:column="29">"unable to read %s"<pos:position pos:line="97" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="97" pos:column="50">sha1_to_hex<pos:position pos:line="97" pos:column="61"/></name><argument_list pos:line="97" pos:column="61">(<argument><expr><name><name pos:line="97" pos:column="62">s<pos:position pos:line="97" pos:column="63"/></name><operator pos:line="97" pos:column="63">-&gt;<pos:position pos:line="97" pos:column="68"/></operator><name pos:line="97" pos:column="65">sha1<pos:position pos:line="97" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="97" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="72"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="98" pos:column="17">s<pos:position pos:line="98" pos:column="18"/></name><operator pos:line="98" pos:column="18">-&gt;<pos:position pos:line="98" pos:column="23"/></operator><name pos:line="98" pos:column="20">should_free<pos:position pos:line="98" pos:column="31"/></name></name> <operator pos:line="98" pos:column="32">=<pos:position pos:line="98" pos:column="33"/></operator> <literal type="number" pos:line="98" pos:column="34">1<pos:position pos:line="98" pos:column="35"/></literal></expr>;<pos:position pos:line="98" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="99" pos:column="10"/></block></else></if>
	<return pos:line="100" pos:column="9">return <expr><literal type="number" pos:line="100" pos:column="16">0<pos:position pos:line="100" pos:column="17"/></literal></expr>;<pos:position pos:line="100" pos:column="18"/></return>
}<pos:position pos:line="101" pos:column="2"/></block></function></unit>
