<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4270_git-2.0.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_remote_fd<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">argc<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier><modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">argv<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">prefix<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">input_fd<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><operator pos:line="3" pos:column="24">-<pos:position pos:line="3" pos:column="25"/></operator><literal type="number" pos:line="3" pos:column="25">1<pos:position pos:line="3" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">output_fd<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><operator pos:line="4" pos:column="25">-<pos:position pos:line="4" pos:column="26"/></operator><literal type="number" pos:line="4" pos:column="26">1<pos:position pos:line="4" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">end<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">argc<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">!=<pos:position pos:line="7" pos:column="20"/></operator> <literal type="number" pos:line="7" pos:column="21">3<pos:position pos:line="7" pos:column="22"/></literal></expr>)<pos:position pos:line="7" pos:column="23"/></condition><then pos:line="7" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="17">die<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><literal type="string" pos:line="8" pos:column="21">"Expected two arguments"<pos:position pos:line="8" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="47"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="10" pos:column="9">input_fd<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">=<pos:position pos:line="10" pos:column="19"/></operator> <operator pos:line="10" pos:column="20">(<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">int<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">)<pos:position pos:line="10" pos:column="25"/></operator><call><name pos:line="10" pos:column="25">strtoul<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name><name pos:line="10" pos:column="33">argv<pos:position pos:line="10" pos:column="37"/></name><index pos:line="10" pos:column="37">[<expr><literal type="number" pos:line="10" pos:column="38">2<pos:position pos:line="10" pos:column="39"/></literal></expr>]<pos:position pos:line="10" pos:column="40"/></index></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="42">&amp;<pos:position pos:line="10" pos:column="47"/></operator><name pos:line="10" pos:column="43">end<pos:position pos:line="10" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="48">10<pos:position pos:line="10" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="52"/></expr_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">end<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">==<pos:position pos:line="12" pos:column="20"/></operator> <name><name pos:line="12" pos:column="21">argv<pos:position pos:line="12" pos:column="25"/></name><index pos:line="12" pos:column="25">[<expr><literal type="number" pos:line="12" pos:column="26">2<pos:position pos:line="12" pos:column="27"/></literal></expr>]<pos:position pos:line="12" pos:column="28"/></index></name><operator pos:line="12" pos:column="28">)<pos:position pos:line="12" pos:column="29"/></operator> <operator pos:line="12" pos:column="30">||<pos:position pos:line="12" pos:column="32"/></operator> <operator pos:line="12" pos:column="33">(<pos:position pos:line="12" pos:column="34"/></operator><operator pos:line="12" pos:column="34">*<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="35">end<pos:position pos:line="12" pos:column="38"/></name> <operator pos:line="12" pos:column="39">!=<pos:position pos:line="12" pos:column="41"/></operator> <literal type="char" pos:line="12" pos:column="42">','<pos:position pos:line="12" pos:column="45"/></literal> <operator pos:line="12" pos:column="46">&amp;&amp;<pos:position pos:line="12" pos:column="56"/></operator> <operator pos:line="12" pos:column="49">*<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="50">end<pos:position pos:line="12" pos:column="53"/></name> <operator pos:line="12" pos:column="54">!=<pos:position pos:line="12" pos:column="56"/></operator> <literal type="char" pos:line="12" pos:column="57">'/'<pos:position pos:line="12" pos:column="60"/></literal> <operator pos:line="12" pos:column="61">&amp;&amp;<pos:position pos:line="12" pos:column="71"/></operator> <operator pos:line="12" pos:column="64">*<pos:position pos:line="12" pos:column="65"/></operator><name pos:line="12" pos:column="65">end<pos:position pos:line="12" pos:column="68"/></name><operator pos:line="12" pos:column="68">)<pos:position pos:line="12" pos:column="69"/></operator></expr>)<pos:position pos:line="12" pos:column="70"/></condition><then pos:line="12" pos:column="70">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">die<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><literal type="string" pos:line="13" pos:column="21">"Bad URL syntax"<pos:position pos:line="13" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="39"/></expr_stmt></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">*<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">end<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">==<pos:position pos:line="15" pos:column="20"/></operator> <literal type="char" pos:line="15" pos:column="21">'/'<pos:position pos:line="15" pos:column="24"/></literal> <operator pos:line="15" pos:column="25">||<pos:position pos:line="15" pos:column="27"/></operator> <operator pos:line="15" pos:column="28">!<pos:position pos:line="15" pos:column="29"/></operator><operator pos:line="15" pos:column="29">*<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">end<pos:position pos:line="15" pos:column="33"/></name></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34"> <block pos:line="15" pos:column="35">{
		<expr_stmt><expr><name pos:line="16" pos:column="17">output_fd<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">=<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="29">input_fd<pos:position pos:line="16" pos:column="37"/></name></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then> <else pos:line="17" pos:column="11">else <block pos:line="17" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">char<pos:position pos:line="18" pos:column="21"/></name> <modifier pos:line="18" pos:column="22">*<pos:position pos:line="18" pos:column="23"/></modifier></type><name pos:line="18" pos:column="23">end2<pos:position pos:line="18" pos:column="27"/></name></decl>;<pos:position pos:line="18" pos:column="28"/></decl_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">output_fd<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <operator pos:line="19" pos:column="29">(<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">int<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">)<pos:position pos:line="19" pos:column="34"/></operator><call><name pos:line="19" pos:column="34">strtoul<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><name pos:line="19" pos:column="42">end<pos:position pos:line="19" pos:column="45"/></name> <operator pos:line="19" pos:column="46">+<pos:position pos:line="19" pos:column="47"/></operator> <literal type="number" pos:line="19" pos:column="48">1<pos:position pos:line="19" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="51">&amp;<pos:position pos:line="19" pos:column="56"/></operator><name pos:line="19" pos:column="52">end2<pos:position pos:line="19" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="58">10<pos:position pos:line="19" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="62"/></expr_stmt>

		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">(<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">end2<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">==<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="30">end<pos:position pos:line="21" pos:column="33"/></name> <operator pos:line="21" pos:column="34">+<pos:position pos:line="21" pos:column="35"/></operator> <literal type="number" pos:line="21" pos:column="36">1<pos:position pos:line="21" pos:column="37"/></literal><operator pos:line="21" pos:column="37">)<pos:position pos:line="21" pos:column="38"/></operator> <operator pos:line="21" pos:column="39">||<pos:position pos:line="21" pos:column="41"/></operator> <operator pos:line="21" pos:column="42">(<pos:position pos:line="21" pos:column="43"/></operator><operator pos:line="21" pos:column="43">*<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="44">end2<pos:position pos:line="21" pos:column="48"/></name> <operator pos:line="21" pos:column="49">!=<pos:position pos:line="21" pos:column="51"/></operator> <literal type="char" pos:line="21" pos:column="52">'/'<pos:position pos:line="21" pos:column="55"/></literal> <operator pos:line="21" pos:column="56">&amp;&amp;<pos:position pos:line="21" pos:column="66"/></operator> <operator pos:line="21" pos:column="59">*<pos:position pos:line="21" pos:column="60"/></operator><name pos:line="21" pos:column="60">end2<pos:position pos:line="21" pos:column="64"/></name><operator pos:line="21" pos:column="64">)<pos:position pos:line="21" pos:column="65"/></operator></expr>)<pos:position pos:line="21" pos:column="66"/></condition><then pos:line="21" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="25">die<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><literal type="string" pos:line="22" pos:column="29">"Bad URL syntax"<pos:position pos:line="22" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt></block></then></if>
	}<pos:position pos:line="23" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="25" pos:column="9">command_loop<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><name pos:line="25" pos:column="22">input_fd<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="32">output_fd<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt>
	<return pos:line="26" pos:column="9">return <expr><literal type="number" pos:line="26" pos:column="16">0<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
