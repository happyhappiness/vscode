<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5484_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">unresolved_directory<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">traverse_info<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">info<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
				 <parameter><decl><type><name><name pos:line="2" pos:column="34">struct<pos:position pos:line="2" pos:column="40"/></name> <name pos:line="2" pos:column="41">name_entry<pos:position pos:line="2" pos:column="51"/></name></name></type> <name><name pos:line="2" pos:column="52">n<pos:position pos:line="2" pos:column="53"/></name><index pos:line="2" pos:column="53">[<expr><literal type="number" pos:line="2" pos:column="54">3<pos:position pos:line="2" pos:column="55"/></literal></expr>]<pos:position pos:line="2" pos:column="56"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">newbase<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">name_entry<pos:position pos:line="5" pos:column="26"/></name></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">p<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">tree_desc<pos:position pos:line="6" pos:column="25"/></name></name></type> <name><name pos:line="6" pos:column="26">t<pos:position pos:line="6" pos:column="27"/></name><index pos:line="6" pos:column="27">[<expr><literal type="number" pos:line="6" pos:column="28">3<pos:position pos:line="6" pos:column="29"/></literal></expr>]<pos:position pos:line="6" pos:column="30"/></index></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">void<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">buf0<pos:position pos:line="7" pos:column="19"/></name></decl>, <modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="22">buf1<pos:position pos:line="7" pos:column="26"/></name></decl>, <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="29">buf2<pos:position pos:line="7" pos:column="33"/></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>

	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init><expr><name pos:line="9" pos:column="14">p<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <name pos:line="9" pos:column="18">n<pos:position pos:line="9" pos:column="19"/></name></expr>;<pos:position pos:line="9" pos:column="20"/></init> <condition><expr><name pos:line="9" pos:column="21">p<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&lt;<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="25">n<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">+<pos:position pos:line="9" pos:column="28"/></operator> <literal type="number" pos:line="9" pos:column="29">3<pos:position pos:line="9" pos:column="30"/></literal></expr>;<pos:position pos:line="9" pos:column="31"/></condition> <incr><expr><name pos:line="9" pos:column="32">p<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">++<pos:position pos:line="9" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="36"/></control> <block pos:line="9" pos:column="37">{
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name><name pos:line="10" pos:column="21">p<pos:position pos:line="10" pos:column="22"/></name><operator pos:line="10" pos:column="22">-&gt;<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="24">mode<pos:position pos:line="10" pos:column="28"/></name></name> <operator pos:line="10" pos:column="29">&amp;&amp;<pos:position pos:line="10" pos:column="39"/></operator> <call><name pos:line="10" pos:column="32">S_ISDIR<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">(<argument><expr><name><name pos:line="10" pos:column="40">p<pos:position pos:line="10" pos:column="41"/></name><operator pos:line="10" pos:column="41">-&gt;<pos:position pos:line="10" pos:column="46"/></operator><name pos:line="10" pos:column="43">mode<pos:position pos:line="10" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="49"/></condition><then pos:line="10" pos:column="49">
			<block type="pseudo"><break pos:line="11" pos:column="25">break;<pos:position pos:line="11" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="12" pos:column="10"/></block></for>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">n<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">+<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="17">3<pos:position pos:line="13" pos:column="18"/></literal> <operator pos:line="13" pos:column="19">&lt;=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="22">p<pos:position pos:line="13" pos:column="23"/></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24">
		<block type="pseudo"><return pos:line="14" pos:column="17">return;<pos:position pos:line="14" pos:column="24"/></return></block></then></if> <comment type="block" pos:line="14" pos:column="25">/* there is no tree here */</comment>

	<expr_stmt><expr><name pos:line="16" pos:column="9">newbase<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <call><name pos:line="16" pos:column="19">traverse_path<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">info<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="39">p<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>

<cpp:define pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">define<pos:position pos:line="18" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="18" pos:column="9">ENTRY_SHA1<pos:position pos:line="18" pos:column="19"/></name><parameter_list pos:line="18" pos:column="19">(<parameter><type><name pos:line="18" pos:column="20">e<pos:position pos:line="18" pos:column="21"/></name></type></parameter>)<pos:position pos:line="18" pos:column="22"/></parameter_list></cpp:macro> <cpp:value pos:line="18" pos:column="23">(((e)-&gt;mode &amp;&amp; S_ISDIR((e)-&gt;mode)) ? (e)-&gt;oid-&gt;hash : NULL)<pos:position pos:line="18" pos:column="82"/></cpp:value></cpp:define>
	<expr_stmt><expr><name pos:line="19" pos:column="9">buf0<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">fill_tree_descriptor<pos:position pos:line="19" pos:column="36"/></name><argument_list pos:line="19" pos:column="36">(<argument><expr><name pos:line="19" pos:column="37">t<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">+<pos:position pos:line="19" pos:column="39"/></operator><literal type="number" pos:line="19" pos:column="39">0<pos:position pos:line="19" pos:column="40"/></literal></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="42">ENTRY_SHA1<pos:position pos:line="19" pos:column="52"/></name><argument_list pos:line="19" pos:column="52">(<argument><expr><name pos:line="19" pos:column="53">n<pos:position pos:line="19" pos:column="54"/></name> <operator pos:line="19" pos:column="55">+<pos:position pos:line="19" pos:column="56"/></operator> <literal type="number" pos:line="19" pos:column="57">0<pos:position pos:line="19" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">buf1<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <call><name pos:line="20" pos:column="16">fill_tree_descriptor<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><name pos:line="20" pos:column="37">t<pos:position pos:line="20" pos:column="38"/></name><operator pos:line="20" pos:column="38">+<pos:position pos:line="20" pos:column="39"/></operator><literal type="number" pos:line="20" pos:column="39">1<pos:position pos:line="20" pos:column="40"/></literal></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="42">ENTRY_SHA1<pos:position pos:line="20" pos:column="52"/></name><argument_list pos:line="20" pos:column="52">(<argument><expr><name pos:line="20" pos:column="53">n<pos:position pos:line="20" pos:column="54"/></name> <operator pos:line="20" pos:column="55">+<pos:position pos:line="20" pos:column="56"/></operator> <literal type="number" pos:line="20" pos:column="57">1<pos:position pos:line="20" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">buf2<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">fill_tree_descriptor<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><name pos:line="21" pos:column="37">t<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">+<pos:position pos:line="21" pos:column="39"/></operator><literal type="number" pos:line="21" pos:column="39">2<pos:position pos:line="21" pos:column="40"/></literal></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="42">ENTRY_SHA1<pos:position pos:line="21" pos:column="52"/></name><argument_list pos:line="21" pos:column="52">(<argument><expr><name pos:line="21" pos:column="53">n<pos:position pos:line="21" pos:column="54"/></name> <operator pos:line="21" pos:column="55">+<pos:position pos:line="21" pos:column="56"/></operator> <literal type="number" pos:line="21" pos:column="57">2<pos:position pos:line="21" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="61"/></expr_stmt>
<cpp:undef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">undef<pos:position pos:line="22" pos:column="7"/></cpp:directive> <name pos:line="22" pos:column="8">ENTRY_SHA1<pos:position pos:line="22" pos:column="18"/></name></cpp:undef>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">merge_trees<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">t<pos:position pos:line="24" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="24">newbase<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="26" pos:column="9">free<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">(<argument><expr><name pos:line="26" pos:column="14">buf0<pos:position pos:line="26" pos:column="18"/></name></expr></argument>)<pos:position pos:line="26" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">free<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><name pos:line="27" pos:column="14">buf1<pos:position pos:line="27" pos:column="18"/></name></expr></argument>)<pos:position pos:line="27" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">free<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><name pos:line="28" pos:column="14">buf2<pos:position pos:line="28" pos:column="18"/></name></expr></argument>)<pos:position pos:line="28" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">free<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><name pos:line="29" pos:column="14">newbase<pos:position pos:line="29" pos:column="21"/></name></expr></argument>)<pos:position pos:line="29" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
