<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6939_git-2.13.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bin_tree_t<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type>
<name pos:line="2" pos:column="1">parse_bracket_exp<pos:position pos:line="2" pos:column="18"/></name> <parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">re_string_t<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">regexp<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">re_dfa_t<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">dfa<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">re_token_t<pos:position pos:line="2" pos:column="66"/></name> <modifier pos:line="2" pos:column="67">*<pos:position pos:line="2" pos:column="68"/></modifier></type><name pos:line="2" pos:column="68">token<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>,
		   <parameter><decl><type><name pos:line="3" pos:column="20">reg_syntax_t<pos:position pos:line="3" pos:column="32"/></name></type> <name pos:line="3" pos:column="33">syntax<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="41">reg_errcode_t<pos:position pos:line="3" pos:column="54"/></name> <modifier pos:line="3" pos:column="55">*<pos:position pos:line="3" pos:column="56"/></modifier></type><name pos:line="3" pos:column="56">err<pos:position pos:line="3" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="60"/></parameter_list>
<block pos:line="4" pos:column="1">{
<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">_LIBC<pos:position pos:line="5" pos:column="13"/></name></cpp:ifdef>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">collseqmb<pos:position pos:line="6" pos:column="33"/></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">collseqwc<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">uint32_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">nrules<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int32_t<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">table_size<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="10" pos:column="3">const<pos:position pos:line="10" pos:column="8"/></specifier> <name pos:line="10" pos:column="9">int32_t<pos:position pos:line="10" pos:column="16"/></name> <modifier pos:line="10" pos:column="17">*<pos:position pos:line="10" pos:column="18"/></modifier></type><name pos:line="10" pos:column="18">symb_table<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">const<pos:position pos:line="11" pos:column="8"/></specifier> <name pos:line="11" pos:column="9">unsigned<pos:position pos:line="11" pos:column="17"/></name> <name pos:line="11" pos:column="18">char<pos:position pos:line="11" pos:column="22"/></name> <modifier pos:line="11" pos:column="23">*<pos:position pos:line="11" pos:column="24"/></modifier></type><name pos:line="11" pos:column="24">extra<pos:position pos:line="11" pos:column="29"/></name></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>

  <comment type="block" pos:line="13" pos:column="3">/* Local function for parse_bracket_exp used in _LIBC environment.
     Seek the collating symbol entry correspondings to NAME.
     Return the index of the symbol in the SYMB_TABLE.  */</comment>

  <decl_stmt><decl><type><specifier pos:line="17" pos:column="3">auto<pos:position pos:line="17" pos:column="7"/></specifier> <specifier pos:line="17" pos:column="8">inline<pos:position pos:line="17" pos:column="14"/></specifier> <name pos:line="17" pos:column="15">int32_t<pos:position pos:line="17" pos:column="22"/></name></type>
  <name pos:line="18" pos:column="3">__attribute<pos:position pos:line="18" pos:column="14"/></name> <argument_list pos:line="18" pos:column="15">(<argument><expr><operator pos:line="18" pos:column="16">(<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">always_inline<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">)<pos:position pos:line="18" pos:column="31"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="32"/></argument_list>
  <name pos:line="19" pos:column="3">seek_collating_symbol_entry<pos:position pos:line="19" pos:column="30"/></name> <argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">name<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="38">name_len<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list>
	 const <name pos:line="20" pos:column="16">unsigned<pos:position pos:line="20" pos:column="24"/></name> <name pos:line="20" pos:column="25">char<pos:position pos:line="20" pos:column="29"/></name> <modifier pos:line="20" pos:column="30">*<pos:position pos:line="20" pos:column="31"/></modifier><name pos:line="20" pos:column="31">name<pos:position pos:line="20" pos:column="35"/></name></decl>;<pos:position pos:line="20" pos:column="36"/></decl_stmt>
	 <decl_stmt><decl><type><name pos:line="21" pos:column="10">size_t<pos:position pos:line="21" pos:column="16"/></name></type> <name pos:line="21" pos:column="17">name_len<pos:position pos:line="21" pos:column="25"/></name></decl>;<pos:position pos:line="21" pos:column="26"/></decl_stmt>
    <block pos:line="22" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="23" pos:column="7">int32_t<pos:position pos:line="23" pos:column="14"/></name></type> <name pos:line="23" pos:column="15">hash<pos:position pos:line="23" pos:column="19"/></name> <init pos:line="23" pos:column="20">= <expr><call><name pos:line="23" pos:column="22">elem_hash<pos:position pos:line="23" pos:column="31"/></name> <argument_list pos:line="23" pos:column="32">(<argument><expr><operator pos:line="23" pos:column="33">(<pos:position pos:line="23" pos:column="34"/></operator><specifier pos:line="23" pos:column="34">const<pos:position pos:line="23" pos:column="39"/></specifier> <name pos:line="23" pos:column="40">char<pos:position pos:line="23" pos:column="44"/></name> <operator pos:line="23" pos:column="45">*<pos:position pos:line="23" pos:column="46"/></operator><operator pos:line="23" pos:column="46">)<pos:position pos:line="23" pos:column="47"/></operator> <name pos:line="23" pos:column="48">name<pos:position pos:line="23" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="54">name_len<pos:position pos:line="23" pos:column="62"/></name></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="64"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="24" pos:column="7">int32_t<pos:position pos:line="24" pos:column="14"/></name></type> <name pos:line="24" pos:column="15">elem<pos:position pos:line="24" pos:column="19"/></name> <init pos:line="24" pos:column="20">= <expr><name pos:line="24" pos:column="22">hash<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">%<pos:position pos:line="24" pos:column="28"/></operator> <name pos:line="24" pos:column="29">table_size<pos:position pos:line="24" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="40"/></decl_stmt>
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><name><name pos:line="25" pos:column="11">symb_table<pos:position pos:line="25" pos:column="21"/></name><index pos:line="25" pos:column="21">[<expr><literal type="number" pos:line="25" pos:column="22">2<pos:position pos:line="25" pos:column="23"/></literal> <operator pos:line="25" pos:column="24">*<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="26">elem<pos:position pos:line="25" pos:column="30"/></name></expr>]<pos:position pos:line="25" pos:column="31"/></index></name> <operator pos:line="25" pos:column="32">!=<pos:position pos:line="25" pos:column="34"/></operator> <literal type="number" pos:line="25" pos:column="35">0<pos:position pos:line="25" pos:column="36"/></literal></expr>)<pos:position pos:line="25" pos:column="37"/></condition><then pos:line="25" pos:column="37">
	<block pos:line="26" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="27" pos:column="11">int32_t<pos:position pos:line="27" pos:column="18"/></name></type> <name pos:line="27" pos:column="19">second<pos:position pos:line="27" pos:column="25"/></name> <init pos:line="27" pos:column="26">= <expr><name pos:line="27" pos:column="28">hash<pos:position pos:line="27" pos:column="32"/></name> <operator pos:line="27" pos:column="33">%<pos:position pos:line="27" pos:column="34"/></operator> <operator pos:line="27" pos:column="35">(<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="36">table_size<pos:position pos:line="27" pos:column="46"/></name> <operator pos:line="27" pos:column="47">-<pos:position pos:line="27" pos:column="48"/></operator> <literal type="number" pos:line="27" pos:column="49">2<pos:position pos:line="27" pos:column="50"/></literal><operator pos:line="27" pos:column="50">)<pos:position pos:line="27" pos:column="51"/></operator> <operator pos:line="27" pos:column="52">+<pos:position pos:line="27" pos:column="53"/></operator> <literal type="number" pos:line="27" pos:column="54">1<pos:position pos:line="27" pos:column="55"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="56"/></decl_stmt>

	  <do pos:line="29" pos:column="11">do
	    <block pos:line="30" pos:column="13">{
	      <comment type="block" pos:line="31" pos:column="15">/* First compare the hashing value.  */</comment>
	      <if pos:line="32" pos:column="15">if <condition pos:line="32" pos:column="18">(<expr><name><name pos:line="32" pos:column="19">symb_table<pos:position pos:line="32" pos:column="29"/></name><index pos:line="32" pos:column="29">[<expr><literal type="number" pos:line="32" pos:column="30">2<pos:position pos:line="32" pos:column="31"/></literal> <operator pos:line="32" pos:column="32">*<pos:position pos:line="32" pos:column="33"/></operator> <name pos:line="32" pos:column="34">elem<pos:position pos:line="32" pos:column="38"/></name></expr>]<pos:position pos:line="32" pos:column="39"/></index></name> <operator pos:line="32" pos:column="40">==<pos:position pos:line="32" pos:column="42"/></operator> <name pos:line="32" pos:column="43">hash<pos:position pos:line="32" pos:column="47"/></name>
		  <comment type="block" pos:line="33" pos:column="19">/* Compare the length of the name.  */</comment>
		  <operator pos:line="34" pos:column="19">&amp;&amp;<pos:position pos:line="34" pos:column="29"/></operator> <name pos:line="34" pos:column="22">name_len<pos:position pos:line="34" pos:column="30"/></name> <operator pos:line="34" pos:column="31">==<pos:position pos:line="34" pos:column="33"/></operator> <name><name pos:line="34" pos:column="34">extra<pos:position pos:line="34" pos:column="39"/></name><index pos:line="34" pos:column="39">[<expr><name><name pos:line="34" pos:column="40">symb_table<pos:position pos:line="34" pos:column="50"/></name><index pos:line="34" pos:column="50">[<expr><literal type="number" pos:line="34" pos:column="51">2<pos:position pos:line="34" pos:column="52"/></literal> <operator pos:line="34" pos:column="53">*<pos:position pos:line="34" pos:column="54"/></operator> <name pos:line="34" pos:column="55">elem<pos:position pos:line="34" pos:column="59"/></name> <operator pos:line="34" pos:column="60">+<pos:position pos:line="34" pos:column="61"/></operator> <literal type="number" pos:line="34" pos:column="62">1<pos:position pos:line="34" pos:column="63"/></literal></expr>]<pos:position pos:line="34" pos:column="64"/></index></name></expr>]<pos:position pos:line="34" pos:column="65"/></index></name>
		  <comment type="block" pos:line="35" pos:column="19">/* Compare the name.  */</comment>
		  <operator pos:line="36" pos:column="19">&amp;&amp;<pos:position pos:line="36" pos:column="29"/></operator> <call><name pos:line="36" pos:column="22">memcmp<pos:position pos:line="36" pos:column="28"/></name> <argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">name<pos:position pos:line="36" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="36">&amp;<pos:position pos:line="36" pos:column="41"/></operator><name><name pos:line="36" pos:column="37">extra<pos:position pos:line="36" pos:column="42"/></name><index pos:line="36" pos:column="42">[<expr><name><name pos:line="36" pos:column="43">symb_table<pos:position pos:line="36" pos:column="53"/></name><index pos:line="36" pos:column="53">[<expr><literal type="number" pos:line="36" pos:column="54">2<pos:position pos:line="36" pos:column="55"/></literal> <operator pos:line="36" pos:column="56">*<pos:position pos:line="36" pos:column="57"/></operator> <name pos:line="36" pos:column="58">elem<pos:position pos:line="36" pos:column="62"/></name> <operator pos:line="36" pos:column="63">+<pos:position pos:line="36" pos:column="64"/></operator> <literal type="number" pos:line="36" pos:column="65">1<pos:position pos:line="36" pos:column="66"/></literal></expr>]<pos:position pos:line="36" pos:column="67"/></index></name> <operator pos:line="36" pos:column="68">+<pos:position pos:line="36" pos:column="69"/></operator> <literal type="number" pos:line="36" pos:column="70">1<pos:position pos:line="36" pos:column="71"/></literal></expr>]<pos:position pos:line="36" pos:column="72"/></index></name></expr></argument>,
			     <argument><expr><name pos:line="37" pos:column="30">name_len<pos:position pos:line="37" pos:column="38"/></name></expr></argument>)<pos:position pos:line="37" pos:column="39"/></argument_list></call> <operator pos:line="37" pos:column="40">==<pos:position pos:line="37" pos:column="42"/></operator> <literal type="number" pos:line="37" pos:column="43">0<pos:position pos:line="37" pos:column="44"/></literal></expr>)<pos:position pos:line="37" pos:column="45"/></condition><then pos:line="37" pos:column="45">
		<block pos:line="38" pos:column="17">{
		  <comment type="block" pos:line="39" pos:column="19">/* Yep, this is the entry.  */</comment>
		  <break pos:line="40" pos:column="19">break;<pos:position pos:line="40" pos:column="25"/></break>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>

	      <comment type="block" pos:line="43" pos:column="15">/* Next entry.  */</comment>
	      <expr_stmt><expr><name pos:line="44" pos:column="15">elem<pos:position pos:line="44" pos:column="19"/></name> <operator pos:line="44" pos:column="20">+=<pos:position pos:line="44" pos:column="22"/></operator> <name pos:line="44" pos:column="23">second<pos:position pos:line="44" pos:column="29"/></name></expr>;<pos:position pos:line="44" pos:column="30"/></expr_stmt>
	    }<pos:position pos:line="45" pos:column="14"/></block>
	  while <condition pos:line="46" pos:column="17">(<expr><name><name pos:line="46" pos:column="18">symb_table<pos:position pos:line="46" pos:column="28"/></name><index pos:line="46" pos:column="28">[<expr><literal type="number" pos:line="46" pos:column="29">2<pos:position pos:line="46" pos:column="30"/></literal> <operator pos:line="46" pos:column="31">*<pos:position pos:line="46" pos:column="32"/></operator> <name pos:line="46" pos:column="33">elem<pos:position pos:line="46" pos:column="37"/></name></expr>]<pos:position pos:line="46" pos:column="38"/></index></name> <operator pos:line="46" pos:column="39">!=<pos:position pos:line="46" pos:column="41"/></operator> <literal type="number" pos:line="46" pos:column="42">0<pos:position pos:line="46" pos:column="43"/></literal></expr>)<pos:position pos:line="46" pos:column="44"/></condition>;<pos:position pos:line="46" pos:column="45"/></do>
	}<pos:position pos:line="47" pos:column="10"/></block></then></if>
      <return pos:line="48" pos:column="7">return <expr><name pos:line="48" pos:column="14">elem<pos:position pos:line="48" pos:column="18"/></name></expr>;<pos:position pos:line="48" pos:column="19"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block>

  <comment type="block" pos:line="51" pos:column="3">/* Local function for parse_bracket_exp used in _LIBC environment.
     Look up the collation sequence value of BR_ELEM.
     Return the value if succeeded, UINT_MAX otherwise.  */</comment>

  <decl_stmt><decl><type><specifier pos:line="55" pos:column="3">auto<pos:position pos:line="55" pos:column="7"/></specifier> <specifier pos:line="55" pos:column="8">inline<pos:position pos:line="55" pos:column="14"/></specifier> <name pos:line="55" pos:column="15">unsigned<pos:position pos:line="55" pos:column="23"/></name> <name pos:line="55" pos:column="24">int<pos:position pos:line="55" pos:column="27"/></name></type>
  <name pos:line="56" pos:column="3">__attribute<pos:position pos:line="56" pos:column="14"/></name> <argument_list pos:line="56" pos:column="15">(<argument><expr><operator pos:line="56" pos:column="16">(<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="17">always_inline<pos:position pos:line="56" pos:column="30"/></name><operator pos:line="56" pos:column="30">)<pos:position pos:line="56" pos:column="31"/></operator></expr></argument>)<pos:position pos:line="56" pos:column="32"/></argument_list>
  <name pos:line="57" pos:column="3">lookup_collation_sequence_value<pos:position pos:line="57" pos:column="34"/></name> <argument_list pos:line="57" pos:column="35">(<argument><expr><name pos:line="57" pos:column="36">br_elem<pos:position pos:line="57" pos:column="43"/></name></expr></argument>)<pos:position pos:line="57" pos:column="44"/></argument_list>
	 <name pos:line="58" pos:column="10">bracket_elem_t<pos:position pos:line="58" pos:column="24"/></name> <modifier pos:line="58" pos:column="25">*<pos:position pos:line="58" pos:column="26"/></modifier><name pos:line="58" pos:column="26">br_elem<pos:position pos:line="58" pos:column="33"/></name></decl>;<pos:position pos:line="58" pos:column="34"/></decl_stmt>
    <block pos:line="59" pos:column="5">{
      <if pos:line="60" pos:column="7">if <condition pos:line="60" pos:column="10">(<expr><name><name pos:line="60" pos:column="11">br_elem<pos:position pos:line="60" pos:column="18"/></name><operator pos:line="60" pos:column="18">-&gt;<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="20">type<pos:position pos:line="60" pos:column="24"/></name></name> <operator pos:line="60" pos:column="25">==<pos:position pos:line="60" pos:column="27"/></operator> <name pos:line="60" pos:column="28">SB_CHAR<pos:position pos:line="60" pos:column="35"/></name></expr>)<pos:position pos:line="60" pos:column="36"/></condition><then pos:line="60" pos:column="36">
	<block pos:line="61" pos:column="9">{
	  <comment type="block" pos:line="62" pos:column="11">/*
	  if (MB_CUR_MAX == 1)
	  */</comment>
	  <if pos:line="65" pos:column="11">if <condition pos:line="65" pos:column="14">(<expr><name pos:line="65" pos:column="15">nrules<pos:position pos:line="65" pos:column="21"/></name> <operator pos:line="65" pos:column="22">==<pos:position pos:line="65" pos:column="24"/></operator> <literal type="number" pos:line="65" pos:column="25">0<pos:position pos:line="65" pos:column="26"/></literal></expr>)<pos:position pos:line="65" pos:column="27"/></condition><then pos:line="65" pos:column="27">
	    <block type="pseudo"><return pos:line="66" pos:column="13">return <expr><name><name pos:line="66" pos:column="20">collseqmb<pos:position pos:line="66" pos:column="29"/></name><index pos:line="66" pos:column="29">[<expr><name><name pos:line="66" pos:column="30">br_elem<pos:position pos:line="66" pos:column="37"/></name><operator pos:line="66" pos:column="37">-&gt;<pos:position pos:line="66" pos:column="42"/></operator><name pos:line="66" pos:column="39">opr<pos:position pos:line="66" pos:column="42"/></name><operator pos:line="66" pos:column="42">.<pos:position pos:line="66" pos:column="43"/></operator><name pos:line="66" pos:column="43">ch<pos:position pos:line="66" pos:column="45"/></name></name></expr>]<pos:position pos:line="66" pos:column="46"/></index></name></expr>;<pos:position pos:line="66" pos:column="47"/></return></block></then>
	  <else pos:line="67" pos:column="11">else
	    <block pos:line="68" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="69" pos:column="15">wint_t<pos:position pos:line="69" pos:column="21"/></name></type> <name pos:line="69" pos:column="22">wc<pos:position pos:line="69" pos:column="24"/></name> <init pos:line="69" pos:column="25">= <expr><call><name pos:line="69" pos:column="27">__btowc<pos:position pos:line="69" pos:column="34"/></name> <argument_list pos:line="69" pos:column="35">(<argument><expr><name><name pos:line="69" pos:column="36">br_elem<pos:position pos:line="69" pos:column="43"/></name><operator pos:line="69" pos:column="43">-&gt;<pos:position pos:line="69" pos:column="48"/></operator><name pos:line="69" pos:column="45">opr<pos:position pos:line="69" pos:column="48"/></name><operator pos:line="69" pos:column="48">.<pos:position pos:line="69" pos:column="49"/></operator><name pos:line="69" pos:column="49">ch<pos:position pos:line="69" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="69" pos:column="53"/></decl_stmt>
	      <return pos:line="70" pos:column="15">return <expr><call><name pos:line="70" pos:column="22">__collseq_table_lookup<pos:position pos:line="70" pos:column="44"/></name> <argument_list pos:line="70" pos:column="45">(<argument><expr><name pos:line="70" pos:column="46">collseqwc<pos:position pos:line="70" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="57">wc<pos:position pos:line="70" pos:column="59"/></name></expr></argument>)<pos:position pos:line="70" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="61"/></return>
	    }<pos:position pos:line="71" pos:column="14"/></block></else></if>
	}<pos:position pos:line="72" pos:column="10"/></block></then>
      <elseif pos:line="73" pos:column="7">else <if pos:line="73" pos:column="12">if <condition pos:line="73" pos:column="15">(<expr><name><name pos:line="73" pos:column="16">br_elem<pos:position pos:line="73" pos:column="23"/></name><operator pos:line="73" pos:column="23">-&gt;<pos:position pos:line="73" pos:column="28"/></operator><name pos:line="73" pos:column="25">type<pos:position pos:line="73" pos:column="29"/></name></name> <operator pos:line="73" pos:column="30">==<pos:position pos:line="73" pos:column="32"/></operator> <name pos:line="73" pos:column="33">MB_CHAR<pos:position pos:line="73" pos:column="40"/></name></expr>)<pos:position pos:line="73" pos:column="41"/></condition><then pos:line="73" pos:column="41">
	<block pos:line="74" pos:column="9">{
	  <if pos:line="75" pos:column="11">if <condition pos:line="75" pos:column="14">(<expr><name pos:line="75" pos:column="15">nrules<pos:position pos:line="75" pos:column="21"/></name> <operator pos:line="75" pos:column="22">!=<pos:position pos:line="75" pos:column="24"/></operator> <literal type="number" pos:line="75" pos:column="25">0<pos:position pos:line="75" pos:column="26"/></literal></expr>)<pos:position pos:line="75" pos:column="27"/></condition><then pos:line="75" pos:column="27">
	    <block type="pseudo"><return pos:line="76" pos:column="13">return <expr><call><name pos:line="76" pos:column="20">__collseq_table_lookup<pos:position pos:line="76" pos:column="42"/></name> <argument_list pos:line="76" pos:column="43">(<argument><expr><name pos:line="76" pos:column="44">collseqwc<pos:position pos:line="76" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="55">br_elem<pos:position pos:line="76" pos:column="62"/></name><operator pos:line="76" pos:column="62">-&gt;<pos:position pos:line="76" pos:column="67"/></operator><name pos:line="76" pos:column="64">opr<pos:position pos:line="76" pos:column="67"/></name><operator pos:line="76" pos:column="67">.<pos:position pos:line="76" pos:column="68"/></operator><name pos:line="76" pos:column="68">wch<pos:position pos:line="76" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="73"/></return></block></then></if>
	}<pos:position pos:line="77" pos:column="10"/></block></then></if></elseif>
      <elseif pos:line="78" pos:column="7">else <if pos:line="78" pos:column="12">if <condition pos:line="78" pos:column="15">(<expr><name><name pos:line="78" pos:column="16">br_elem<pos:position pos:line="78" pos:column="23"/></name><operator pos:line="78" pos:column="23">-&gt;<pos:position pos:line="78" pos:column="28"/></operator><name pos:line="78" pos:column="25">type<pos:position pos:line="78" pos:column="29"/></name></name> <operator pos:line="78" pos:column="30">==<pos:position pos:line="78" pos:column="32"/></operator> <name pos:line="78" pos:column="33">COLL_SYM<pos:position pos:line="78" pos:column="41"/></name></expr>)<pos:position pos:line="78" pos:column="42"/></condition><then pos:line="78" pos:column="42">
	<block pos:line="79" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="80" pos:column="11">size_t<pos:position pos:line="80" pos:column="17"/></name></type> <name pos:line="80" pos:column="18">sym_name_len<pos:position pos:line="80" pos:column="30"/></name> <init pos:line="80" pos:column="31">= <expr><call><name pos:line="80" pos:column="33">strlen<pos:position pos:line="80" pos:column="39"/></name> <argument_list pos:line="80" pos:column="40">(<argument><expr><operator pos:line="80" pos:column="41">(<pos:position pos:line="80" pos:column="42"/></operator><name pos:line="80" pos:column="42">char<pos:position pos:line="80" pos:column="46"/></name> <operator pos:line="80" pos:column="47">*<pos:position pos:line="80" pos:column="48"/></operator><operator pos:line="80" pos:column="48">)<pos:position pos:line="80" pos:column="49"/></operator> <name><name pos:line="80" pos:column="50">br_elem<pos:position pos:line="80" pos:column="57"/></name><operator pos:line="80" pos:column="57">-&gt;<pos:position pos:line="80" pos:column="62"/></operator><name pos:line="80" pos:column="59">opr<pos:position pos:line="80" pos:column="62"/></name><operator pos:line="80" pos:column="62">.<pos:position pos:line="80" pos:column="63"/></operator><name pos:line="80" pos:column="63">name<pos:position pos:line="80" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="80" pos:column="69"/></decl_stmt>
	  <if pos:line="81" pos:column="11">if <condition pos:line="81" pos:column="14">(<expr><name pos:line="81" pos:column="15">nrules<pos:position pos:line="81" pos:column="21"/></name> <operator pos:line="81" pos:column="22">!=<pos:position pos:line="81" pos:column="24"/></operator> <literal type="number" pos:line="81" pos:column="25">0<pos:position pos:line="81" pos:column="26"/></literal></expr>)<pos:position pos:line="81" pos:column="27"/></condition><then pos:line="81" pos:column="27">
	    <block pos:line="82" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="83" pos:column="15">int32_t<pos:position pos:line="83" pos:column="22"/></name></type> <name pos:line="83" pos:column="23">elem<pos:position pos:line="83" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="83" pos:column="29">idx<pos:position pos:line="83" pos:column="32"/></name></decl>;<pos:position pos:line="83" pos:column="33"/></decl_stmt>
	      <expr_stmt><expr><name pos:line="84" pos:column="15">elem<pos:position pos:line="84" pos:column="19"/></name> <operator pos:line="84" pos:column="20">=<pos:position pos:line="84" pos:column="21"/></operator> <call><name pos:line="84" pos:column="22">seek_collating_symbol_entry<pos:position pos:line="84" pos:column="49"/></name> <argument_list pos:line="84" pos:column="50">(<argument><expr><name><name pos:line="84" pos:column="51">br_elem<pos:position pos:line="84" pos:column="58"/></name><operator pos:line="84" pos:column="58">-&gt;<pos:position pos:line="84" pos:column="63"/></operator><name pos:line="84" pos:column="60">opr<pos:position pos:line="84" pos:column="63"/></name><operator pos:line="84" pos:column="63">.<pos:position pos:line="84" pos:column="64"/></operator><name pos:line="84" pos:column="64">name<pos:position pos:line="84" pos:column="68"/></name></name></expr></argument>,
						  <argument><expr><name pos:line="85" pos:column="51">sym_name_len<pos:position pos:line="85" pos:column="63"/></name></expr></argument>)<pos:position pos:line="85" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="65"/></expr_stmt>
	      <if pos:line="86" pos:column="15">if <condition pos:line="86" pos:column="18">(<expr><name><name pos:line="86" pos:column="19">symb_table<pos:position pos:line="86" pos:column="29"/></name><index pos:line="86" pos:column="29">[<expr><literal type="number" pos:line="86" pos:column="30">2<pos:position pos:line="86" pos:column="31"/></literal> <operator pos:line="86" pos:column="32">*<pos:position pos:line="86" pos:column="33"/></operator> <name pos:line="86" pos:column="34">elem<pos:position pos:line="86" pos:column="38"/></name></expr>]<pos:position pos:line="86" pos:column="39"/></index></name> <operator pos:line="86" pos:column="40">!=<pos:position pos:line="86" pos:column="42"/></operator> <literal type="number" pos:line="86" pos:column="43">0<pos:position pos:line="86" pos:column="44"/></literal></expr>)<pos:position pos:line="86" pos:column="45"/></condition><then pos:line="86" pos:column="45">
		<block pos:line="87" pos:column="17">{
		  <comment type="block" pos:line="88" pos:column="19">/* We found the entry.  */</comment>
		  <expr_stmt><expr><name pos:line="89" pos:column="19">idx<pos:position pos:line="89" pos:column="22"/></name> <operator pos:line="89" pos:column="23">=<pos:position pos:line="89" pos:column="24"/></operator> <name><name pos:line="89" pos:column="25">symb_table<pos:position pos:line="89" pos:column="35"/></name><index pos:line="89" pos:column="35">[<expr><literal type="number" pos:line="89" pos:column="36">2<pos:position pos:line="89" pos:column="37"/></literal> <operator pos:line="89" pos:column="38">*<pos:position pos:line="89" pos:column="39"/></operator> <name pos:line="89" pos:column="40">elem<pos:position pos:line="89" pos:column="44"/></name> <operator pos:line="89" pos:column="45">+<pos:position pos:line="89" pos:column="46"/></operator> <literal type="number" pos:line="89" pos:column="47">1<pos:position pos:line="89" pos:column="48"/></literal></expr>]<pos:position pos:line="89" pos:column="49"/></index></name></expr>;<pos:position pos:line="89" pos:column="50"/></expr_stmt>
		  <comment type="block" pos:line="90" pos:column="19">/* Skip the name of collating element name.  */</comment>
		  <expr_stmt><expr><name pos:line="91" pos:column="19">idx<pos:position pos:line="91" pos:column="22"/></name> <operator pos:line="91" pos:column="23">+=<pos:position pos:line="91" pos:column="25"/></operator> <literal type="number" pos:line="91" pos:column="26">1<pos:position pos:line="91" pos:column="27"/></literal> <operator pos:line="91" pos:column="28">+<pos:position pos:line="91" pos:column="29"/></operator> <name><name pos:line="91" pos:column="30">extra<pos:position pos:line="91" pos:column="35"/></name><index pos:line="91" pos:column="35">[<expr><name pos:line="91" pos:column="36">idx<pos:position pos:line="91" pos:column="39"/></name></expr>]<pos:position pos:line="91" pos:column="40"/></index></name></expr>;<pos:position pos:line="91" pos:column="41"/></expr_stmt>
		  <comment type="block" pos:line="92" pos:column="19">/* Skip the byte sequence of the collating element.  */</comment>
		  <expr_stmt><expr><name pos:line="93" pos:column="19">idx<pos:position pos:line="93" pos:column="22"/></name> <operator pos:line="93" pos:column="23">+=<pos:position pos:line="93" pos:column="25"/></operator> <literal type="number" pos:line="93" pos:column="26">1<pos:position pos:line="93" pos:column="27"/></literal> <operator pos:line="93" pos:column="28">+<pos:position pos:line="93" pos:column="29"/></operator> <name><name pos:line="93" pos:column="30">extra<pos:position pos:line="93" pos:column="35"/></name><index pos:line="93" pos:column="35">[<expr><name pos:line="93" pos:column="36">idx<pos:position pos:line="93" pos:column="39"/></name></expr>]<pos:position pos:line="93" pos:column="40"/></index></name></expr>;<pos:position pos:line="93" pos:column="41"/></expr_stmt>
		  <comment type="block" pos:line="94" pos:column="19">/* Adjust for the alignment.  */</comment>
		  <expr_stmt><expr><name pos:line="95" pos:column="19">idx<pos:position pos:line="95" pos:column="22"/></name> <operator pos:line="95" pos:column="23">=<pos:position pos:line="95" pos:column="24"/></operator> <operator pos:line="95" pos:column="25">(<pos:position pos:line="95" pos:column="26"/></operator><name pos:line="95" pos:column="26">idx<pos:position pos:line="95" pos:column="29"/></name> <operator pos:line="95" pos:column="30">+<pos:position pos:line="95" pos:column="31"/></operator> <literal type="number" pos:line="95" pos:column="32">3<pos:position pos:line="95" pos:column="33"/></literal><operator pos:line="95" pos:column="33">)<pos:position pos:line="95" pos:column="34"/></operator> <operator pos:line="95" pos:column="35">&amp;<pos:position pos:line="95" pos:column="40"/></operator> <operator pos:line="95" pos:column="37">~<pos:position pos:line="95" pos:column="38"/></operator><literal type="number" pos:line="95" pos:column="38">3<pos:position pos:line="95" pos:column="39"/></literal></expr>;<pos:position pos:line="95" pos:column="40"/></expr_stmt>
		  <comment type="block" pos:line="96" pos:column="19">/* Skip the multibyte collation sequence value.  */</comment>
		  <expr_stmt><expr><name pos:line="97" pos:column="19">idx<pos:position pos:line="97" pos:column="22"/></name> <operator pos:line="97" pos:column="23">+=<pos:position pos:line="97" pos:column="25"/></operator> sizeof <operator pos:line="97" pos:column="33">(<pos:position pos:line="97" pos:column="34"/></operator><name pos:line="97" pos:column="34">unsigned<pos:position pos:line="97" pos:column="42"/></name> <name pos:line="97" pos:column="43">int<pos:position pos:line="97" pos:column="46"/></name><operator pos:line="97" pos:column="46">)<pos:position pos:line="97" pos:column="47"/></operator></expr>;<pos:position pos:line="97" pos:column="48"/></expr_stmt>
		  <comment type="block" pos:line="98" pos:column="19">/* Skip the wide char sequence of the collating element.  */</comment>
		  <expr_stmt><expr><name pos:line="99" pos:column="19">idx<pos:position pos:line="99" pos:column="22"/></name> <operator pos:line="99" pos:column="23">+=<pos:position pos:line="99" pos:column="25"/></operator> sizeof <operator pos:line="99" pos:column="33">(<pos:position pos:line="99" pos:column="34"/></operator><name pos:line="99" pos:column="34">unsigned<pos:position pos:line="99" pos:column="42"/></name> <name pos:line="99" pos:column="43">int<pos:position pos:line="99" pos:column="46"/></name><operator pos:line="99" pos:column="46">)<pos:position pos:line="99" pos:column="47"/></operator> <operator pos:line="99" pos:column="48">*<pos:position pos:line="99" pos:column="49"/></operator>
		    <operator pos:line="100" pos:column="21">(<pos:position pos:line="100" pos:column="22"/></operator><literal type="number" pos:line="100" pos:column="22">1<pos:position pos:line="100" pos:column="23"/></literal> <operator pos:line="100" pos:column="24">+<pos:position pos:line="100" pos:column="25"/></operator> <operator pos:line="100" pos:column="26">*<pos:position pos:line="100" pos:column="27"/></operator><operator pos:line="100" pos:column="27">(<pos:position pos:line="100" pos:column="28"/></operator><name pos:line="100" pos:column="28">unsigned<pos:position pos:line="100" pos:column="36"/></name> <name pos:line="100" pos:column="37">int<pos:position pos:line="100" pos:column="40"/></name> <operator pos:line="100" pos:column="41">*<pos:position pos:line="100" pos:column="42"/></operator><operator pos:line="100" pos:column="42">)<pos:position pos:line="100" pos:column="43"/></operator> <operator pos:line="100" pos:column="44">(<pos:position pos:line="100" pos:column="45"/></operator><name pos:line="100" pos:column="45">extra<pos:position pos:line="100" pos:column="50"/></name> <operator pos:line="100" pos:column="51">+<pos:position pos:line="100" pos:column="52"/></operator> <name pos:line="100" pos:column="53">idx<pos:position pos:line="100" pos:column="56"/></name><operator pos:line="100" pos:column="56">)<pos:position pos:line="100" pos:column="57"/></operator><operator pos:line="100" pos:column="57">)<pos:position pos:line="100" pos:column="58"/></operator></expr>;<pos:position pos:line="100" pos:column="59"/></expr_stmt>
		  <comment type="block" pos:line="101" pos:column="19">/* Return the collation sequence value.  */</comment>
		  <return pos:line="102" pos:column="19">return <expr><operator pos:line="102" pos:column="26">*<pos:position pos:line="102" pos:column="27"/></operator><operator pos:line="102" pos:column="27">(<pos:position pos:line="102" pos:column="28"/></operator><name pos:line="102" pos:column="28">unsigned<pos:position pos:line="102" pos:column="36"/></name> <name pos:line="102" pos:column="37">int<pos:position pos:line="102" pos:column="40"/></name> <operator pos:line="102" pos:column="41">*<pos:position pos:line="102" pos:column="42"/></operator><operator pos:line="102" pos:column="42">)<pos:position pos:line="102" pos:column="43"/></operator> <operator pos:line="102" pos:column="44">(<pos:position pos:line="102" pos:column="45"/></operator><name pos:line="102" pos:column="45">extra<pos:position pos:line="102" pos:column="50"/></name> <operator pos:line="102" pos:column="51">+<pos:position pos:line="102" pos:column="52"/></operator> <name pos:line="102" pos:column="53">idx<pos:position pos:line="102" pos:column="56"/></name><operator pos:line="102" pos:column="56">)<pos:position pos:line="102" pos:column="57"/></operator></expr>;<pos:position pos:line="102" pos:column="58"/></return>
		}<pos:position pos:line="103" pos:column="18"/></block></then>
	      <elseif pos:line="104" pos:column="15">else <if pos:line="104" pos:column="20">if <condition pos:line="104" pos:column="23">(<expr><name><name pos:line="104" pos:column="24">symb_table<pos:position pos:line="104" pos:column="34"/></name><index pos:line="104" pos:column="34">[<expr><literal type="number" pos:line="104" pos:column="35">2<pos:position pos:line="104" pos:column="36"/></literal> <operator pos:line="104" pos:column="37">*<pos:position pos:line="104" pos:column="38"/></operator> <name pos:line="104" pos:column="39">elem<pos:position pos:line="104" pos:column="43"/></name></expr>]<pos:position pos:line="104" pos:column="44"/></index></name> <operator pos:line="104" pos:column="45">==<pos:position pos:line="104" pos:column="47"/></operator> <literal type="number" pos:line="104" pos:column="48">0<pos:position pos:line="104" pos:column="49"/></literal> <operator pos:line="104" pos:column="50">&amp;&amp;<pos:position pos:line="104" pos:column="60"/></operator> <name pos:line="104" pos:column="53">sym_name_len<pos:position pos:line="104" pos:column="65"/></name> <operator pos:line="104" pos:column="66">==<pos:position pos:line="104" pos:column="68"/></operator> <literal type="number" pos:line="104" pos:column="69">1<pos:position pos:line="104" pos:column="70"/></literal></expr>)<pos:position pos:line="104" pos:column="71"/></condition><then pos:line="104" pos:column="71">
		<block pos:line="105" pos:column="17">{
		  <comment type="block" pos:line="106" pos:column="19">/* No valid character.  Match it as a single byte
		     character.  */</comment>
		  <return pos:line="108" pos:column="19">return <expr><name><name pos:line="108" pos:column="26">collseqmb<pos:position pos:line="108" pos:column="35"/></name><index pos:line="108" pos:column="35">[<expr><name><name pos:line="108" pos:column="36">br_elem<pos:position pos:line="108" pos:column="43"/></name><operator pos:line="108" pos:column="43">-&gt;<pos:position pos:line="108" pos:column="48"/></operator><name pos:line="108" pos:column="45">opr<pos:position pos:line="108" pos:column="48"/></name><operator pos:line="108" pos:column="48">.<pos:position pos:line="108" pos:column="49"/></operator><name pos:line="108" pos:column="49">name<pos:position pos:line="108" pos:column="53"/></name><index pos:line="108" pos:column="53">[<expr><literal type="number" pos:line="108" pos:column="54">0<pos:position pos:line="108" pos:column="55"/></literal></expr>]<pos:position pos:line="108" pos:column="56"/></index></name></expr>]<pos:position pos:line="108" pos:column="57"/></index></name></expr>;<pos:position pos:line="108" pos:column="58"/></return>
		}<pos:position pos:line="109" pos:column="18"/></block></then></if></elseif></if>
	    }<pos:position pos:line="110" pos:column="14"/></block></then>
	  <elseif pos:line="111" pos:column="11">else <if pos:line="111" pos:column="16">if <condition pos:line="111" pos:column="19">(<expr><name pos:line="111" pos:column="20">sym_name_len<pos:position pos:line="111" pos:column="32"/></name> <operator pos:line="111" pos:column="33">==<pos:position pos:line="111" pos:column="35"/></operator> <literal type="number" pos:line="111" pos:column="36">1<pos:position pos:line="111" pos:column="37"/></literal></expr>)<pos:position pos:line="111" pos:column="38"/></condition><then pos:line="111" pos:column="38">
	    <block type="pseudo"><return pos:line="112" pos:column="13">return <expr><name><name pos:line="112" pos:column="20">collseqmb<pos:position pos:line="112" pos:column="29"/></name><index pos:line="112" pos:column="29">[<expr><name><name pos:line="112" pos:column="30">br_elem<pos:position pos:line="112" pos:column="37"/></name><operator pos:line="112" pos:column="37">-&gt;<pos:position pos:line="112" pos:column="42"/></operator><name pos:line="112" pos:column="39">opr<pos:position pos:line="112" pos:column="42"/></name><operator pos:line="112" pos:column="42">.<pos:position pos:line="112" pos:column="43"/></operator><name pos:line="112" pos:column="43">name<pos:position pos:line="112" pos:column="47"/></name><index pos:line="112" pos:column="47">[<expr><literal type="number" pos:line="112" pos:column="48">0<pos:position pos:line="112" pos:column="49"/></literal></expr>]<pos:position pos:line="112" pos:column="50"/></index></name></expr>]<pos:position pos:line="112" pos:column="51"/></index></name></expr>;<pos:position pos:line="112" pos:column="52"/></return></block></then></if></elseif></if>
	}<pos:position pos:line="113" pos:column="10"/></block></then></if></elseif></if>
      <return pos:line="114" pos:column="7">return <expr><name pos:line="114" pos:column="14">UINT_MAX<pos:position pos:line="114" pos:column="22"/></name></expr>;<pos:position pos:line="114" pos:column="23"/></return>
    }<pos:position pos:line="115" pos:column="6"/></block>

  <comment type="block" pos:line="117" pos:column="3">/* Local function for parse_bracket_exp used in _LIBC environment.
     Build the range expression which starts from START_ELEM, and ends
     at END_ELEM.  The result are written to MBCSET and SBCSET.
     RANGE_ALLOC is the allocated size of mbcset-&gt;range_starts, and
     mbcset-&gt;range_ends, is a pointer argument since we may
     update it.  */</comment>

  <decl_stmt><decl><type><specifier pos:line="124" pos:column="3">auto<pos:position pos:line="124" pos:column="7"/></specifier> <specifier pos:line="124" pos:column="8">inline<pos:position pos:line="124" pos:column="14"/></specifier> <name pos:line="124" pos:column="15">reg_errcode_t<pos:position pos:line="124" pos:column="28"/></name></type>
  <name pos:line="125" pos:column="3">__attribute<pos:position pos:line="125" pos:column="14"/></name> <argument_list pos:line="125" pos:column="15">(<argument><expr><operator pos:line="125" pos:column="16">(<pos:position pos:line="125" pos:column="17"/></operator><name pos:line="125" pos:column="17">always_inline<pos:position pos:line="125" pos:column="30"/></name><operator pos:line="125" pos:column="30">)<pos:position pos:line="125" pos:column="31"/></operator></expr></argument>)<pos:position pos:line="125" pos:column="32"/></argument_list>
  <name pos:line="126" pos:column="3">build_range_exp<pos:position pos:line="126" pos:column="18"/></name> <argument_list pos:line="126" pos:column="19">(<argument><expr><name pos:line="126" pos:column="20">sbcset<pos:position pos:line="126" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="28">mbcset<pos:position pos:line="126" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="36">range_alloc<pos:position pos:line="126" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="49">start_elem<pos:position pos:line="126" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="61">end_elem<pos:position pos:line="126" pos:column="69"/></name></expr></argument>)<pos:position pos:line="126" pos:column="70"/></argument_list>
	 <name pos:line="127" pos:column="10">re_charset_t<pos:position pos:line="127" pos:column="22"/></name> <modifier pos:line="127" pos:column="23">*<pos:position pos:line="127" pos:column="24"/></modifier><name pos:line="127" pos:column="24">mbcset<pos:position pos:line="127" pos:column="30"/></name></decl>;<pos:position pos:line="127" pos:column="31"/></decl_stmt>
	 <decl_stmt><decl><type><name pos:line="128" pos:column="10">int<pos:position pos:line="128" pos:column="13"/></name> <modifier pos:line="128" pos:column="14">*<pos:position pos:line="128" pos:column="15"/></modifier></type><name pos:line="128" pos:column="15">range_alloc<pos:position pos:line="128" pos:column="26"/></name></decl>;<pos:position pos:line="128" pos:column="27"/></decl_stmt>
	 <decl_stmt><decl><type><name pos:line="129" pos:column="10">bitset_t<pos:position pos:line="129" pos:column="18"/></name></type> <name pos:line="129" pos:column="19">sbcset<pos:position pos:line="129" pos:column="25"/></name></decl>;<pos:position pos:line="129" pos:column="26"/></decl_stmt>
	 <decl_stmt><decl><type><name pos:line="130" pos:column="10">bracket_elem_t<pos:position pos:line="130" pos:column="24"/></name> <modifier pos:line="130" pos:column="25">*<pos:position pos:line="130" pos:column="26"/></modifier></type><name pos:line="130" pos:column="26">start_elem<pos:position pos:line="130" pos:column="36"/></name></decl>, <modifier pos:line="130" pos:column="38">*<pos:position pos:line="130" pos:column="39"/></modifier><decl><type ref="prev"/><name pos:line="130" pos:column="39">end_elem<pos:position pos:line="130" pos:column="47"/></name></decl>;<pos:position pos:line="130" pos:column="48"/></decl_stmt>
    <block pos:line="131" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="132" pos:column="7">unsigned<pos:position pos:line="132" pos:column="15"/></name> <name pos:line="132" pos:column="16">int<pos:position pos:line="132" pos:column="19"/></name></type> <name pos:line="132" pos:column="20">ch<pos:position pos:line="132" pos:column="22"/></name></decl>;<pos:position pos:line="132" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="133" pos:column="7">uint32_t<pos:position pos:line="133" pos:column="15"/></name></type> <name pos:line="133" pos:column="16">start_collseq<pos:position pos:line="133" pos:column="29"/></name></decl>;<pos:position pos:line="133" pos:column="30"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="134" pos:column="7">uint32_t<pos:position pos:line="134" pos:column="15"/></name></type> <name pos:line="134" pos:column="16">end_collseq<pos:position pos:line="134" pos:column="27"/></name></decl>;<pos:position pos:line="134" pos:column="28"/></decl_stmt>

      <comment type="block" pos:line="136" pos:column="7">/* Equivalence Classes and Character Classes can't be a range
	 start/end.  */</comment>
      <if pos:line="138" pos:column="7">if <condition pos:line="138" pos:column="10">(<expr><call><name pos:line="138" pos:column="11">BE<pos:position pos:line="138" pos:column="13"/></name> <argument_list pos:line="138" pos:column="14">(<argument><expr><name><name pos:line="138" pos:column="15">start_elem<pos:position pos:line="138" pos:column="25"/></name><operator pos:line="138" pos:column="25">-&gt;<pos:position pos:line="138" pos:column="30"/></operator><name pos:line="138" pos:column="27">type<pos:position pos:line="138" pos:column="31"/></name></name> <operator pos:line="138" pos:column="32">==<pos:position pos:line="138" pos:column="34"/></operator> <name pos:line="138" pos:column="35">EQUIV_CLASS<pos:position pos:line="138" pos:column="46"/></name> <operator pos:line="138" pos:column="47">||<pos:position pos:line="138" pos:column="49"/></operator> <name><name pos:line="138" pos:column="50">start_elem<pos:position pos:line="138" pos:column="60"/></name><operator pos:line="138" pos:column="60">-&gt;<pos:position pos:line="138" pos:column="65"/></operator><name pos:line="138" pos:column="62">type<pos:position pos:line="138" pos:column="66"/></name></name> <operator pos:line="138" pos:column="67">==<pos:position pos:line="138" pos:column="69"/></operator> <name pos:line="138" pos:column="70">CHAR_CLASS<pos:position pos:line="138" pos:column="80"/></name>
	      <operator pos:line="139" pos:column="15">||<pos:position pos:line="139" pos:column="17"/></operator> <name><name pos:line="139" pos:column="18">end_elem<pos:position pos:line="139" pos:column="26"/></name><operator pos:line="139" pos:column="26">-&gt;<pos:position pos:line="139" pos:column="31"/></operator><name pos:line="139" pos:column="28">type<pos:position pos:line="139" pos:column="32"/></name></name> <operator pos:line="139" pos:column="33">==<pos:position pos:line="139" pos:column="35"/></operator> <name pos:line="139" pos:column="36">EQUIV_CLASS<pos:position pos:line="139" pos:column="47"/></name> <operator pos:line="139" pos:column="48">||<pos:position pos:line="139" pos:column="50"/></operator> <name><name pos:line="139" pos:column="51">end_elem<pos:position pos:line="139" pos:column="59"/></name><operator pos:line="139" pos:column="59">-&gt;<pos:position pos:line="139" pos:column="64"/></operator><name pos:line="139" pos:column="61">type<pos:position pos:line="139" pos:column="65"/></name></name> <operator pos:line="139" pos:column="66">==<pos:position pos:line="139" pos:column="68"/></operator> <name pos:line="139" pos:column="69">CHAR_CLASS<pos:position pos:line="139" pos:column="79"/></name></expr></argument>,
	      <argument><expr><literal type="number" pos:line="140" pos:column="15">0<pos:position pos:line="140" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="17"/></argument_list></call></expr>)<pos:position pos:line="140" pos:column="18"/></condition><then pos:line="140" pos:column="18">
	<block type="pseudo"><return pos:line="141" pos:column="9">return <expr><name pos:line="141" pos:column="16">REG_ERANGE<pos:position pos:line="141" pos:column="26"/></name></expr>;<pos:position pos:line="141" pos:column="27"/></return></block></then></if>

      <expr_stmt><expr><name pos:line="143" pos:column="7">start_collseq<pos:position pos:line="143" pos:column="20"/></name> <operator pos:line="143" pos:column="21">=<pos:position pos:line="143" pos:column="22"/></operator> <call><name pos:line="143" pos:column="23">lookup_collation_sequence_value<pos:position pos:line="143" pos:column="54"/></name> <argument_list pos:line="143" pos:column="55">(<argument><expr><name pos:line="143" pos:column="56">start_elem<pos:position pos:line="143" pos:column="66"/></name></expr></argument>)<pos:position pos:line="143" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="68"/></expr_stmt>
      <expr_stmt><expr><name pos:line="144" pos:column="7">end_collseq<pos:position pos:line="144" pos:column="18"/></name> <operator pos:line="144" pos:column="19">=<pos:position pos:line="144" pos:column="20"/></operator> <call><name pos:line="144" pos:column="21">lookup_collation_sequence_value<pos:position pos:line="144" pos:column="52"/></name> <argument_list pos:line="144" pos:column="53">(<argument><expr><name pos:line="144" pos:column="54">end_elem<pos:position pos:line="144" pos:column="62"/></name></expr></argument>)<pos:position pos:line="144" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="64"/></expr_stmt>
      <comment type="block" pos:line="145" pos:column="7">/* Check start/end collation sequence values.  */</comment>
      <if pos:line="146" pos:column="7">if <condition pos:line="146" pos:column="10">(<expr><call><name pos:line="146" pos:column="11">BE<pos:position pos:line="146" pos:column="13"/></name> <argument_list pos:line="146" pos:column="14">(<argument><expr><name pos:line="146" pos:column="15">start_collseq<pos:position pos:line="146" pos:column="28"/></name> <operator pos:line="146" pos:column="29">==<pos:position pos:line="146" pos:column="31"/></operator> <name pos:line="146" pos:column="32">UINT_MAX<pos:position pos:line="146" pos:column="40"/></name> <operator pos:line="146" pos:column="41">||<pos:position pos:line="146" pos:column="43"/></operator> <name pos:line="146" pos:column="44">end_collseq<pos:position pos:line="146" pos:column="55"/></name> <operator pos:line="146" pos:column="56">==<pos:position pos:line="146" pos:column="58"/></operator> <name pos:line="146" pos:column="59">UINT_MAX<pos:position pos:line="146" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="146" pos:column="69">0<pos:position pos:line="146" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="146" pos:column="72"/></condition><then pos:line="146" pos:column="72">
	<block type="pseudo"><return pos:line="147" pos:column="9">return <expr><name pos:line="147" pos:column="16">REG_ECOLLATE<pos:position pos:line="147" pos:column="28"/></name></expr>;<pos:position pos:line="147" pos:column="29"/></return></block></then></if>
      <if pos:line="148" pos:column="7">if <condition pos:line="148" pos:column="10">(<expr><call><name pos:line="148" pos:column="11">BE<pos:position pos:line="148" pos:column="13"/></name> <argument_list pos:line="148" pos:column="14">(<argument><expr><operator pos:line="148" pos:column="15">(<pos:position pos:line="148" pos:column="16"/></operator><name pos:line="148" pos:column="16">syntax<pos:position pos:line="148" pos:column="22"/></name> <operator pos:line="148" pos:column="23">&amp;<pos:position pos:line="148" pos:column="28"/></operator> <name pos:line="148" pos:column="25">RE_NO_EMPTY_RANGES<pos:position pos:line="148" pos:column="43"/></name><operator pos:line="148" pos:column="43">)<pos:position pos:line="148" pos:column="44"/></operator> <operator pos:line="148" pos:column="45">&amp;&amp;<pos:position pos:line="148" pos:column="55"/></operator> <name pos:line="148" pos:column="48">start_collseq<pos:position pos:line="148" pos:column="61"/></name> <operator pos:line="148" pos:column="62">&gt;<pos:position pos:line="148" pos:column="66"/></operator> <name pos:line="148" pos:column="64">end_collseq<pos:position pos:line="148" pos:column="75"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="148" pos:column="77">0<pos:position pos:line="148" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="148" pos:column="80"/></condition><then pos:line="148" pos:column="80">
	<block type="pseudo"><return pos:line="149" pos:column="9">return <expr><name pos:line="149" pos:column="16">REG_ERANGE<pos:position pos:line="149" pos:column="26"/></name></expr>;<pos:position pos:line="149" pos:column="27"/></return></block></then></if>

      <comment type="block" pos:line="151" pos:column="7">/* Got valid collation sequence values, add them as a new entry.
	 However, if we have no collation elements, and the character set
	 is single byte, the single byte character set that we
	 build below suffices. */</comment>
      <if pos:line="155" pos:column="7">if <condition pos:line="155" pos:column="10">(<expr><name pos:line="155" pos:column="11">nrules<pos:position pos:line="155" pos:column="17"/></name> <operator pos:line="155" pos:column="18">&gt;<pos:position pos:line="155" pos:column="22"/></operator> <literal type="number" pos:line="155" pos:column="20">0<pos:position pos:line="155" pos:column="21"/></literal> <operator pos:line="155" pos:column="22">||<pos:position pos:line="155" pos:column="24"/></operator> <name><name pos:line="155" pos:column="25">dfa<pos:position pos:line="155" pos:column="28"/></name><operator pos:line="155" pos:column="28">-&gt;<pos:position pos:line="155" pos:column="33"/></operator><name pos:line="155" pos:column="30">mb_cur_max<pos:position pos:line="155" pos:column="40"/></name></name> <operator pos:line="155" pos:column="41">&gt;<pos:position pos:line="155" pos:column="45"/></operator> <literal type="number" pos:line="155" pos:column="43">1<pos:position pos:line="155" pos:column="44"/></literal></expr>)<pos:position pos:line="155" pos:column="45"/></condition><then pos:line="155" pos:column="45">
	<block pos:line="156" pos:column="9">{
	  <comment type="block" pos:line="157" pos:column="11">/* Check the space of the arrays.  */</comment>
	  <if pos:line="158" pos:column="11">if <condition pos:line="158" pos:column="14">(<expr><call><name pos:line="158" pos:column="15">BE<pos:position pos:line="158" pos:column="17"/></name> <argument_list pos:line="158" pos:column="18">(<argument><expr><operator pos:line="158" pos:column="19">*<pos:position pos:line="158" pos:column="20"/></operator><name pos:line="158" pos:column="20">range_alloc<pos:position pos:line="158" pos:column="31"/></name> <operator pos:line="158" pos:column="32">==<pos:position pos:line="158" pos:column="34"/></operator> <name><name pos:line="158" pos:column="35">mbcset<pos:position pos:line="158" pos:column="41"/></name><operator pos:line="158" pos:column="41">-&gt;<pos:position pos:line="158" pos:column="46"/></operator><name pos:line="158" pos:column="43">nranges<pos:position pos:line="158" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="158" pos:column="52">0<pos:position pos:line="158" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="158" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="158" pos:column="55"/></condition><then pos:line="158" pos:column="55">
	    <block pos:line="159" pos:column="13">{
	      <comment type="block" pos:line="160" pos:column="15">/* There is not enough space, need realloc.  */</comment>
	      <decl_stmt><decl><type><name pos:line="161" pos:column="15">uint32_t<pos:position pos:line="161" pos:column="23"/></name> <modifier pos:line="161" pos:column="24">*<pos:position pos:line="161" pos:column="25"/></modifier></type><name pos:line="161" pos:column="25">new_array_start<pos:position pos:line="161" pos:column="40"/></name></decl>;<pos:position pos:line="161" pos:column="41"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="162" pos:column="15">uint32_t<pos:position pos:line="162" pos:column="23"/></name> <modifier pos:line="162" pos:column="24">*<pos:position pos:line="162" pos:column="25"/></modifier></type><name pos:line="162" pos:column="25">new_array_end<pos:position pos:line="162" pos:column="38"/></name></decl>;<pos:position pos:line="162" pos:column="39"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="163" pos:column="15">int<pos:position pos:line="163" pos:column="18"/></name></type> <name pos:line="163" pos:column="19">new_nranges<pos:position pos:line="163" pos:column="30"/></name></decl>;<pos:position pos:line="163" pos:column="31"/></decl_stmt>

	      <comment type="block" pos:line="165" pos:column="15">/* +1 in case of mbcset-&gt;nranges is 0.  */</comment>
	      <expr_stmt><expr><name pos:line="166" pos:column="15">new_nranges<pos:position pos:line="166" pos:column="26"/></name> <operator pos:line="166" pos:column="27">=<pos:position pos:line="166" pos:column="28"/></operator> <literal type="number" pos:line="166" pos:column="29">2<pos:position pos:line="166" pos:column="30"/></literal> <operator pos:line="166" pos:column="31">*<pos:position pos:line="166" pos:column="32"/></operator> <name><name pos:line="166" pos:column="33">mbcset<pos:position pos:line="166" pos:column="39"/></name><operator pos:line="166" pos:column="39">-&gt;<pos:position pos:line="166" pos:column="44"/></operator><name pos:line="166" pos:column="41">nranges<pos:position pos:line="166" pos:column="48"/></name></name> <operator pos:line="166" pos:column="49">+<pos:position pos:line="166" pos:column="50"/></operator> <literal type="number" pos:line="166" pos:column="51">1<pos:position pos:line="166" pos:column="52"/></literal></expr>;<pos:position pos:line="166" pos:column="53"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="167" pos:column="15">new_array_start<pos:position pos:line="167" pos:column="30"/></name> <operator pos:line="167" pos:column="31">=<pos:position pos:line="167" pos:column="32"/></operator> <call><name pos:line="167" pos:column="33">re_realloc<pos:position pos:line="167" pos:column="43"/></name> <argument_list pos:line="167" pos:column="44">(<argument><expr><name><name pos:line="167" pos:column="45">mbcset<pos:position pos:line="167" pos:column="51"/></name><operator pos:line="167" pos:column="51">-&gt;<pos:position pos:line="167" pos:column="56"/></operator><name pos:line="167" pos:column="53">range_starts<pos:position pos:line="167" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="67">uint32_t<pos:position pos:line="167" pos:column="75"/></name></expr></argument>,
					    <argument><expr><name pos:line="168" pos:column="45">new_nranges<pos:position pos:line="168" pos:column="56"/></name></expr></argument>)<pos:position pos:line="168" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="58"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="169" pos:column="15">new_array_end<pos:position pos:line="169" pos:column="28"/></name> <operator pos:line="169" pos:column="29">=<pos:position pos:line="169" pos:column="30"/></operator> <call><name pos:line="169" pos:column="31">re_realloc<pos:position pos:line="169" pos:column="41"/></name> <argument_list pos:line="169" pos:column="42">(<argument><expr><name><name pos:line="169" pos:column="43">mbcset<pos:position pos:line="169" pos:column="49"/></name><operator pos:line="169" pos:column="49">-&gt;<pos:position pos:line="169" pos:column="54"/></operator><name pos:line="169" pos:column="51">range_ends<pos:position pos:line="169" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="63">uint32_t<pos:position pos:line="169" pos:column="71"/></name></expr></argument>,
					  <argument><expr><name pos:line="170" pos:column="43">new_nranges<pos:position pos:line="170" pos:column="54"/></name></expr></argument>)<pos:position pos:line="170" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="56"/></expr_stmt>

	      <if pos:line="172" pos:column="15">if <condition pos:line="172" pos:column="18">(<expr><call><name pos:line="172" pos:column="19">BE<pos:position pos:line="172" pos:column="21"/></name> <argument_list pos:line="172" pos:column="22">(<argument><expr><name pos:line="172" pos:column="23">new_array_start<pos:position pos:line="172" pos:column="38"/></name> <operator pos:line="172" pos:column="39">==<pos:position pos:line="172" pos:column="41"/></operator> <name pos:line="172" pos:column="42">NULL<pos:position pos:line="172" pos:column="46"/></name> <operator pos:line="172" pos:column="47">||<pos:position pos:line="172" pos:column="49"/></operator> <name pos:line="172" pos:column="50">new_array_end<pos:position pos:line="172" pos:column="63"/></name> <operator pos:line="172" pos:column="64">==<pos:position pos:line="172" pos:column="66"/></operator> <name pos:line="172" pos:column="67">NULL<pos:position pos:line="172" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="172" pos:column="73">0<pos:position pos:line="172" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="172" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="172" pos:column="76"/></condition><then pos:line="172" pos:column="76">
		<block type="pseudo"><return pos:line="173" pos:column="17">return <expr><name pos:line="173" pos:column="24">REG_ESPACE<pos:position pos:line="173" pos:column="34"/></name></expr>;<pos:position pos:line="173" pos:column="35"/></return></block></then></if>

	      <expr_stmt><expr><name><name pos:line="175" pos:column="15">mbcset<pos:position pos:line="175" pos:column="21"/></name><operator pos:line="175" pos:column="21">-&gt;<pos:position pos:line="175" pos:column="26"/></operator><name pos:line="175" pos:column="23">range_starts<pos:position pos:line="175" pos:column="35"/></name></name> <operator pos:line="175" pos:column="36">=<pos:position pos:line="175" pos:column="37"/></operator> <name pos:line="175" pos:column="38">new_array_start<pos:position pos:line="175" pos:column="53"/></name></expr>;<pos:position pos:line="175" pos:column="54"/></expr_stmt>
	      <expr_stmt><expr><name><name pos:line="176" pos:column="15">mbcset<pos:position pos:line="176" pos:column="21"/></name><operator pos:line="176" pos:column="21">-&gt;<pos:position pos:line="176" pos:column="26"/></operator><name pos:line="176" pos:column="23">range_ends<pos:position pos:line="176" pos:column="33"/></name></name> <operator pos:line="176" pos:column="34">=<pos:position pos:line="176" pos:column="35"/></operator> <name pos:line="176" pos:column="36">new_array_end<pos:position pos:line="176" pos:column="49"/></name></expr>;<pos:position pos:line="176" pos:column="50"/></expr_stmt>
	      <expr_stmt><expr><operator pos:line="177" pos:column="15">*<pos:position pos:line="177" pos:column="16"/></operator><name pos:line="177" pos:column="16">range_alloc<pos:position pos:line="177" pos:column="27"/></name> <operator pos:line="177" pos:column="28">=<pos:position pos:line="177" pos:column="29"/></operator> <name pos:line="177" pos:column="30">new_nranges<pos:position pos:line="177" pos:column="41"/></name></expr>;<pos:position pos:line="177" pos:column="42"/></expr_stmt>
	    }<pos:position pos:line="178" pos:column="14"/></block></then></if>

	  <expr_stmt><expr><name><name pos:line="180" pos:column="11">mbcset<pos:position pos:line="180" pos:column="17"/></name><operator pos:line="180" pos:column="17">-&gt;<pos:position pos:line="180" pos:column="22"/></operator><name pos:line="180" pos:column="19">range_starts<pos:position pos:line="180" pos:column="31"/></name><index pos:line="180" pos:column="31">[<expr><name><name pos:line="180" pos:column="32">mbcset<pos:position pos:line="180" pos:column="38"/></name><operator pos:line="180" pos:column="38">-&gt;<pos:position pos:line="180" pos:column="43"/></operator><name pos:line="180" pos:column="40">nranges<pos:position pos:line="180" pos:column="47"/></name></name></expr>]<pos:position pos:line="180" pos:column="48"/></index></name> <operator pos:line="180" pos:column="49">=<pos:position pos:line="180" pos:column="50"/></operator> <name pos:line="180" pos:column="51">start_collseq<pos:position pos:line="180" pos:column="64"/></name></expr>;<pos:position pos:line="180" pos:column="65"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="181" pos:column="11">mbcset<pos:position pos:line="181" pos:column="17"/></name><operator pos:line="181" pos:column="17">-&gt;<pos:position pos:line="181" pos:column="22"/></operator><name pos:line="181" pos:column="19">range_ends<pos:position pos:line="181" pos:column="29"/></name><index pos:line="181" pos:column="29">[<expr><name><name pos:line="181" pos:column="30">mbcset<pos:position pos:line="181" pos:column="36"/></name><operator pos:line="181" pos:column="36">-&gt;<pos:position pos:line="181" pos:column="41"/></operator><name pos:line="181" pos:column="38">nranges<pos:position pos:line="181" pos:column="45"/></name></name><operator pos:line="181" pos:column="45">++<pos:position pos:line="181" pos:column="47"/></operator></expr>]<pos:position pos:line="181" pos:column="48"/></index></name> <operator pos:line="181" pos:column="49">=<pos:position pos:line="181" pos:column="50"/></operator> <name pos:line="181" pos:column="51">end_collseq<pos:position pos:line="181" pos:column="62"/></name></expr>;<pos:position pos:line="181" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="182" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="184" pos:column="7">/* Build the table for single byte characters.  */</comment>
      <for pos:line="185" pos:column="7">for <control pos:line="185" pos:column="11">(<init><expr><name pos:line="185" pos:column="12">ch<pos:position pos:line="185" pos:column="14"/></name> <operator pos:line="185" pos:column="15">=<pos:position pos:line="185" pos:column="16"/></operator> <literal type="number" pos:line="185" pos:column="17">0<pos:position pos:line="185" pos:column="18"/></literal></expr>;<pos:position pos:line="185" pos:column="19"/></init> <condition><expr><name pos:line="185" pos:column="20">ch<pos:position pos:line="185" pos:column="22"/></name> <operator pos:line="185" pos:column="23">&lt;<pos:position pos:line="185" pos:column="27"/></operator> <name pos:line="185" pos:column="25">SBC_MAX<pos:position pos:line="185" pos:column="32"/></name></expr>;<pos:position pos:line="185" pos:column="33"/></condition> <incr><expr><name pos:line="185" pos:column="34">ch<pos:position pos:line="185" pos:column="36"/></name><operator pos:line="185" pos:column="36">++<pos:position pos:line="185" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="185" pos:column="39"/></control>
	<block pos:line="186" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="187" pos:column="11">uint32_t<pos:position pos:line="187" pos:column="19"/></name></type> <name pos:line="187" pos:column="20">ch_collseq<pos:position pos:line="187" pos:column="30"/></name></decl>;<pos:position pos:line="187" pos:column="31"/></decl_stmt>
	  <comment type="block" pos:line="188" pos:column="11">/*
	  if (MB_CUR_MAX == 1)
	  */</comment>
	  <if pos:line="191" pos:column="11">if <condition pos:line="191" pos:column="14">(<expr><name pos:line="191" pos:column="15">nrules<pos:position pos:line="191" pos:column="21"/></name> <operator pos:line="191" pos:column="22">==<pos:position pos:line="191" pos:column="24"/></operator> <literal type="number" pos:line="191" pos:column="25">0<pos:position pos:line="191" pos:column="26"/></literal></expr>)<pos:position pos:line="191" pos:column="27"/></condition><then pos:line="191" pos:column="27">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="192" pos:column="13">ch_collseq<pos:position pos:line="192" pos:column="23"/></name> <operator pos:line="192" pos:column="24">=<pos:position pos:line="192" pos:column="25"/></operator> <name><name pos:line="192" pos:column="26">collseqmb<pos:position pos:line="192" pos:column="35"/></name><index pos:line="192" pos:column="35">[<expr><name pos:line="192" pos:column="36">ch<pos:position pos:line="192" pos:column="38"/></name></expr>]<pos:position pos:line="192" pos:column="39"/></index></name></expr>;<pos:position pos:line="192" pos:column="40"/></expr_stmt></block></then>
	  <else pos:line="193" pos:column="11">else
	    <block type="pseudo"><expr_stmt><expr><name pos:line="194" pos:column="13">ch_collseq<pos:position pos:line="194" pos:column="23"/></name> <operator pos:line="194" pos:column="24">=<pos:position pos:line="194" pos:column="25"/></operator> <call><name pos:line="194" pos:column="26">__collseq_table_lookup<pos:position pos:line="194" pos:column="48"/></name> <argument_list pos:line="194" pos:column="49">(<argument><expr><name pos:line="194" pos:column="50">collseqwc<pos:position pos:line="194" pos:column="59"/></name></expr></argument>, <argument><expr><call><name pos:line="194" pos:column="61">__btowc<pos:position pos:line="194" pos:column="68"/></name> <argument_list pos:line="194" pos:column="69">(<argument><expr><name pos:line="194" pos:column="70">ch<pos:position pos:line="194" pos:column="72"/></name></expr></argument>)<pos:position pos:line="194" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="194" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="75"/></expr_stmt></block></else></if>
	  <if pos:line="195" pos:column="11">if <condition pos:line="195" pos:column="14">(<expr><name pos:line="195" pos:column="15">start_collseq<pos:position pos:line="195" pos:column="28"/></name> <operator pos:line="195" pos:column="29">&lt;=<pos:position pos:line="195" pos:column="34"/></operator> <name pos:line="195" pos:column="32">ch_collseq<pos:position pos:line="195" pos:column="42"/></name> <operator pos:line="195" pos:column="43">&amp;&amp;<pos:position pos:line="195" pos:column="53"/></operator> <name pos:line="195" pos:column="46">ch_collseq<pos:position pos:line="195" pos:column="56"/></name> <operator pos:line="195" pos:column="57">&lt;=<pos:position pos:line="195" pos:column="62"/></operator> <name pos:line="195" pos:column="60">end_collseq<pos:position pos:line="195" pos:column="71"/></name></expr>)<pos:position pos:line="195" pos:column="72"/></condition><then pos:line="195" pos:column="72">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="196" pos:column="13">bitset_set<pos:position pos:line="196" pos:column="23"/></name> <argument_list pos:line="196" pos:column="24">(<argument><expr><name pos:line="196" pos:column="25">sbcset<pos:position pos:line="196" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="196" pos:column="33">ch<pos:position pos:line="196" pos:column="35"/></name></expr></argument>)<pos:position pos:line="196" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="37"/></expr_stmt></block></then></if>
	}<pos:position pos:line="197" pos:column="10"/></block></for>
      <return pos:line="198" pos:column="7">return <expr><name pos:line="198" pos:column="14">REG_NOERROR<pos:position pos:line="198" pos:column="25"/></name></expr>;<pos:position pos:line="198" pos:column="26"/></return>
    }<pos:position pos:line="199" pos:column="6"/></block>

  <comment type="block" pos:line="201" pos:column="3">/* Local function for parse_bracket_exp used in _LIBC environment.
     Build the collating element which is represented by NAME.
     The result are written to MBCSET and SBCSET.
     COLL_SYM_ALLOC is the allocated size of mbcset-&gt;coll_sym, is a
     pointer argument since we may update it.  */</comment>

  <decl_stmt><decl><type><specifier pos:line="207" pos:column="3">auto<pos:position pos:line="207" pos:column="7"/></specifier> <specifier pos:line="207" pos:column="8">inline<pos:position pos:line="207" pos:column="14"/></specifier> <name pos:line="207" pos:column="15">reg_errcode_t<pos:position pos:line="207" pos:column="28"/></name></type>
  <name pos:line="208" pos:column="3">__attribute<pos:position pos:line="208" pos:column="14"/></name> <argument_list pos:line="208" pos:column="15">(<argument><expr><operator pos:line="208" pos:column="16">(<pos:position pos:line="208" pos:column="17"/></operator><name pos:line="208" pos:column="17">always_inline<pos:position pos:line="208" pos:column="30"/></name><operator pos:line="208" pos:column="30">)<pos:position pos:line="208" pos:column="31"/></operator></expr></argument>)<pos:position pos:line="208" pos:column="32"/></argument_list>
  <name pos:line="209" pos:column="3">build_collating_symbol<pos:position pos:line="209" pos:column="25"/></name> <argument_list pos:line="209" pos:column="26">(<argument><expr><name pos:line="209" pos:column="27">sbcset<pos:position pos:line="209" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="209" pos:column="35">mbcset<pos:position pos:line="209" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="209" pos:column="43">coll_sym_alloc<pos:position pos:line="209" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="209" pos:column="59">name<pos:position pos:line="209" pos:column="63"/></name></expr></argument>)<pos:position pos:line="209" pos:column="64"/></argument_list>
	 <name pos:line="210" pos:column="10">re_charset_t<pos:position pos:line="210" pos:column="22"/></name> <modifier pos:line="210" pos:column="23">*<pos:position pos:line="210" pos:column="24"/></modifier><name pos:line="210" pos:column="24">mbcset<pos:position pos:line="210" pos:column="30"/></name></decl>;<pos:position pos:line="210" pos:column="31"/></decl_stmt>
	 <decl_stmt><decl><type><name pos:line="211" pos:column="10">int<pos:position pos:line="211" pos:column="13"/></name> <modifier pos:line="211" pos:column="14">*<pos:position pos:line="211" pos:column="15"/></modifier></type><name pos:line="211" pos:column="15">coll_sym_alloc<pos:position pos:line="211" pos:column="29"/></name></decl>;<pos:position pos:line="211" pos:column="30"/></decl_stmt>
	 <decl_stmt><decl><type><name pos:line="212" pos:column="10">bitset_t<pos:position pos:line="212" pos:column="18"/></name></type> <name pos:line="212" pos:column="19">sbcset<pos:position pos:line="212" pos:column="25"/></name></decl>;<pos:position pos:line="212" pos:column="26"/></decl_stmt>
	 <decl_stmt><decl><type><specifier pos:line="213" pos:column="10">const<pos:position pos:line="213" pos:column="15"/></specifier> <name pos:line="213" pos:column="16">unsigned<pos:position pos:line="213" pos:column="24"/></name> <name pos:line="213" pos:column="25">char<pos:position pos:line="213" pos:column="29"/></name> <modifier pos:line="213" pos:column="30">*<pos:position pos:line="213" pos:column="31"/></modifier></type><name pos:line="213" pos:column="31">name<pos:position pos:line="213" pos:column="35"/></name></decl>;<pos:position pos:line="213" pos:column="36"/></decl_stmt>
    <block pos:line="214" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="215" pos:column="7">int32_t<pos:position pos:line="215" pos:column="14"/></name></type> <name pos:line="215" pos:column="15">elem<pos:position pos:line="215" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="215" pos:column="21">idx<pos:position pos:line="215" pos:column="24"/></name></decl>;<pos:position pos:line="215" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="216" pos:column="7">size_t<pos:position pos:line="216" pos:column="13"/></name></type> <name pos:line="216" pos:column="14">name_len<pos:position pos:line="216" pos:column="22"/></name> <init pos:line="216" pos:column="23">= <expr><call><name pos:line="216" pos:column="25">strlen<pos:position pos:line="216" pos:column="31"/></name> <argument_list pos:line="216" pos:column="32">(<argument><expr><operator pos:line="216" pos:column="33">(<pos:position pos:line="216" pos:column="34"/></operator><specifier pos:line="216" pos:column="34">const<pos:position pos:line="216" pos:column="39"/></specifier> <name pos:line="216" pos:column="40">char<pos:position pos:line="216" pos:column="44"/></name> <operator pos:line="216" pos:column="45">*<pos:position pos:line="216" pos:column="46"/></operator><operator pos:line="216" pos:column="46">)<pos:position pos:line="216" pos:column="47"/></operator> <name pos:line="216" pos:column="48">name<pos:position pos:line="216" pos:column="52"/></name></expr></argument>)<pos:position pos:line="216" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="216" pos:column="54"/></decl_stmt>
      <if pos:line="217" pos:column="7">if <condition pos:line="217" pos:column="10">(<expr><name pos:line="217" pos:column="11">nrules<pos:position pos:line="217" pos:column="17"/></name> <operator pos:line="217" pos:column="18">!=<pos:position pos:line="217" pos:column="20"/></operator> <literal type="number" pos:line="217" pos:column="21">0<pos:position pos:line="217" pos:column="22"/></literal></expr>)<pos:position pos:line="217" pos:column="23"/></condition><then pos:line="217" pos:column="23">
	<block pos:line="218" pos:column="9">{
	  <expr_stmt><expr><name pos:line="219" pos:column="11">elem<pos:position pos:line="219" pos:column="15"/></name> <operator pos:line="219" pos:column="16">=<pos:position pos:line="219" pos:column="17"/></operator> <call><name pos:line="219" pos:column="18">seek_collating_symbol_entry<pos:position pos:line="219" pos:column="45"/></name> <argument_list pos:line="219" pos:column="46">(<argument><expr><name pos:line="219" pos:column="47">name<pos:position pos:line="219" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="219" pos:column="53">name_len<pos:position pos:line="219" pos:column="61"/></name></expr></argument>)<pos:position pos:line="219" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="63"/></expr_stmt>
	  <if pos:line="220" pos:column="11">if <condition pos:line="220" pos:column="14">(<expr><name><name pos:line="220" pos:column="15">symb_table<pos:position pos:line="220" pos:column="25"/></name><index pos:line="220" pos:column="25">[<expr><literal type="number" pos:line="220" pos:column="26">2<pos:position pos:line="220" pos:column="27"/></literal> <operator pos:line="220" pos:column="28">*<pos:position pos:line="220" pos:column="29"/></operator> <name pos:line="220" pos:column="30">elem<pos:position pos:line="220" pos:column="34"/></name></expr>]<pos:position pos:line="220" pos:column="35"/></index></name> <operator pos:line="220" pos:column="36">!=<pos:position pos:line="220" pos:column="38"/></operator> <literal type="number" pos:line="220" pos:column="39">0<pos:position pos:line="220" pos:column="40"/></literal></expr>)<pos:position pos:line="220" pos:column="41"/></condition><then pos:line="220" pos:column="41">
	    <block pos:line="221" pos:column="13">{
	      <comment type="block" pos:line="222" pos:column="15">/* We found the entry.  */</comment>
	      <expr_stmt><expr><name pos:line="223" pos:column="15">idx<pos:position pos:line="223" pos:column="18"/></name> <operator pos:line="223" pos:column="19">=<pos:position pos:line="223" pos:column="20"/></operator> <name><name pos:line="223" pos:column="21">symb_table<pos:position pos:line="223" pos:column="31"/></name><index pos:line="223" pos:column="31">[<expr><literal type="number" pos:line="223" pos:column="32">2<pos:position pos:line="223" pos:column="33"/></literal> <operator pos:line="223" pos:column="34">*<pos:position pos:line="223" pos:column="35"/></operator> <name pos:line="223" pos:column="36">elem<pos:position pos:line="223" pos:column="40"/></name> <operator pos:line="223" pos:column="41">+<pos:position pos:line="223" pos:column="42"/></operator> <literal type="number" pos:line="223" pos:column="43">1<pos:position pos:line="223" pos:column="44"/></literal></expr>]<pos:position pos:line="223" pos:column="45"/></index></name></expr>;<pos:position pos:line="223" pos:column="46"/></expr_stmt>
	      <comment type="block" pos:line="224" pos:column="15">/* Skip the name of collating element name.  */</comment>
	      <expr_stmt><expr><name pos:line="225" pos:column="15">idx<pos:position pos:line="225" pos:column="18"/></name> <operator pos:line="225" pos:column="19">+=<pos:position pos:line="225" pos:column="21"/></operator> <literal type="number" pos:line="225" pos:column="22">1<pos:position pos:line="225" pos:column="23"/></literal> <operator pos:line="225" pos:column="24">+<pos:position pos:line="225" pos:column="25"/></operator> <name><name pos:line="225" pos:column="26">extra<pos:position pos:line="225" pos:column="31"/></name><index pos:line="225" pos:column="31">[<expr><name pos:line="225" pos:column="32">idx<pos:position pos:line="225" pos:column="35"/></name></expr>]<pos:position pos:line="225" pos:column="36"/></index></name></expr>;<pos:position pos:line="225" pos:column="37"/></expr_stmt>
	    }<pos:position pos:line="226" pos:column="14"/></block></then>
	  <elseif pos:line="227" pos:column="11">else <if pos:line="227" pos:column="16">if <condition pos:line="227" pos:column="19">(<expr><name><name pos:line="227" pos:column="20">symb_table<pos:position pos:line="227" pos:column="30"/></name><index pos:line="227" pos:column="30">[<expr><literal type="number" pos:line="227" pos:column="31">2<pos:position pos:line="227" pos:column="32"/></literal> <operator pos:line="227" pos:column="33">*<pos:position pos:line="227" pos:column="34"/></operator> <name pos:line="227" pos:column="35">elem<pos:position pos:line="227" pos:column="39"/></name></expr>]<pos:position pos:line="227" pos:column="40"/></index></name> <operator pos:line="227" pos:column="41">==<pos:position pos:line="227" pos:column="43"/></operator> <literal type="number" pos:line="227" pos:column="44">0<pos:position pos:line="227" pos:column="45"/></literal> <operator pos:line="227" pos:column="46">&amp;&amp;<pos:position pos:line="227" pos:column="56"/></operator> <name pos:line="227" pos:column="49">name_len<pos:position pos:line="227" pos:column="57"/></name> <operator pos:line="227" pos:column="58">==<pos:position pos:line="227" pos:column="60"/></operator> <literal type="number" pos:line="227" pos:column="61">1<pos:position pos:line="227" pos:column="62"/></literal></expr>)<pos:position pos:line="227" pos:column="63"/></condition><then pos:line="227" pos:column="63">
	    <block pos:line="228" pos:column="13">{
	      <comment type="block" pos:line="229" pos:column="15">/* No valid character, treat it as a normal
		 character.  */</comment>
	      <expr_stmt><expr><call><name pos:line="231" pos:column="15">bitset_set<pos:position pos:line="231" pos:column="25"/></name> <argument_list pos:line="231" pos:column="26">(<argument><expr><name pos:line="231" pos:column="27">sbcset<pos:position pos:line="231" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="231" pos:column="35">name<pos:position pos:line="231" pos:column="39"/></name><index pos:line="231" pos:column="39">[<expr><literal type="number" pos:line="231" pos:column="40">0<pos:position pos:line="231" pos:column="41"/></literal></expr>]<pos:position pos:line="231" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="231" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="231" pos:column="44"/></expr_stmt>
	      <return pos:line="232" pos:column="15">return <expr><name pos:line="232" pos:column="22">REG_NOERROR<pos:position pos:line="232" pos:column="33"/></name></expr>;<pos:position pos:line="232" pos:column="34"/></return>
	    }<pos:position pos:line="233" pos:column="14"/></block></then></if></elseif>
	  <else pos:line="234" pos:column="11">else
	    <block type="pseudo"><return pos:line="235" pos:column="13">return <expr><name pos:line="235" pos:column="20">REG_ECOLLATE<pos:position pos:line="235" pos:column="32"/></name></expr>;<pos:position pos:line="235" pos:column="33"/></return></block></else></if>

	  <comment type="block" pos:line="237" pos:column="11">/* Got valid collation sequence, add it as a new entry.  */</comment>
	  <comment type="block" pos:line="238" pos:column="11">/* Check the space of the arrays.  */</comment>
	  <if pos:line="239" pos:column="11">if <condition pos:line="239" pos:column="14">(<expr><call><name pos:line="239" pos:column="15">BE<pos:position pos:line="239" pos:column="17"/></name> <argument_list pos:line="239" pos:column="18">(<argument><expr><operator pos:line="239" pos:column="19">*<pos:position pos:line="239" pos:column="20"/></operator><name pos:line="239" pos:column="20">coll_sym_alloc<pos:position pos:line="239" pos:column="34"/></name> <operator pos:line="239" pos:column="35">==<pos:position pos:line="239" pos:column="37"/></operator> <name><name pos:line="239" pos:column="38">mbcset<pos:position pos:line="239" pos:column="44"/></name><operator pos:line="239" pos:column="44">-&gt;<pos:position pos:line="239" pos:column="49"/></operator><name pos:line="239" pos:column="46">ncoll_syms<pos:position pos:line="239" pos:column="56"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="239" pos:column="58">0<pos:position pos:line="239" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="239" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="239" pos:column="61"/></condition><then pos:line="239" pos:column="61">
	    <block pos:line="240" pos:column="13">{
	      <comment type="block" pos:line="241" pos:column="15">/* Not enough, realloc it.  */</comment>
	      <comment type="block" pos:line="242" pos:column="15">/* +1 in case of mbcset-&gt;ncoll_syms is 0.  */</comment>
	      <decl_stmt><decl><type><name pos:line="243" pos:column="15">int<pos:position pos:line="243" pos:column="18"/></name></type> <name pos:line="243" pos:column="19">new_coll_sym_alloc<pos:position pos:line="243" pos:column="37"/></name> <init pos:line="243" pos:column="38">= <expr><literal type="number" pos:line="243" pos:column="40">2<pos:position pos:line="243" pos:column="41"/></literal> <operator pos:line="243" pos:column="42">*<pos:position pos:line="243" pos:column="43"/></operator> <name><name pos:line="243" pos:column="44">mbcset<pos:position pos:line="243" pos:column="50"/></name><operator pos:line="243" pos:column="50">-&gt;<pos:position pos:line="243" pos:column="55"/></operator><name pos:line="243" pos:column="52">ncoll_syms<pos:position pos:line="243" pos:column="62"/></name></name> <operator pos:line="243" pos:column="63">+<pos:position pos:line="243" pos:column="64"/></operator> <literal type="number" pos:line="243" pos:column="65">1<pos:position pos:line="243" pos:column="66"/></literal></expr></init></decl>;<pos:position pos:line="243" pos:column="67"/></decl_stmt>
	      <comment type="block" pos:line="244" pos:column="15">/* Use realloc since mbcset-&gt;coll_syms is NULL
		 if *alloc == 0.  */</comment>
	      <decl_stmt><decl><type><name pos:line="246" pos:column="15">int32_t<pos:position pos:line="246" pos:column="22"/></name> <modifier pos:line="246" pos:column="23">*<pos:position pos:line="246" pos:column="24"/></modifier></type><name pos:line="246" pos:column="24">new_coll_syms<pos:position pos:line="246" pos:column="37"/></name> <init pos:line="246" pos:column="38">= <expr><call><name pos:line="246" pos:column="40">re_realloc<pos:position pos:line="246" pos:column="50"/></name> <argument_list pos:line="246" pos:column="51">(<argument><expr><name><name pos:line="246" pos:column="52">mbcset<pos:position pos:line="246" pos:column="58"/></name><operator pos:line="246" pos:column="58">-&gt;<pos:position pos:line="246" pos:column="63"/></operator><name pos:line="246" pos:column="60">coll_syms<pos:position pos:line="246" pos:column="69"/></name></name></expr></argument>, <argument><expr><name pos:line="246" pos:column="71">int32_t<pos:position pos:line="246" pos:column="78"/></name></expr></argument>,
						   <argument><expr><name pos:line="247" pos:column="52">new_coll_sym_alloc<pos:position pos:line="247" pos:column="70"/></name></expr></argument>)<pos:position pos:line="247" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="247" pos:column="72"/></decl_stmt>
	      <if pos:line="248" pos:column="15">if <condition pos:line="248" pos:column="18">(<expr><call><name pos:line="248" pos:column="19">BE<pos:position pos:line="248" pos:column="21"/></name> <argument_list pos:line="248" pos:column="22">(<argument><expr><name pos:line="248" pos:column="23">new_coll_syms<pos:position pos:line="248" pos:column="36"/></name> <operator pos:line="248" pos:column="37">==<pos:position pos:line="248" pos:column="39"/></operator> <name pos:line="248" pos:column="40">NULL<pos:position pos:line="248" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="248" pos:column="46">0<pos:position pos:line="248" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="248" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="248" pos:column="49"/></condition><then pos:line="248" pos:column="49">
		<block type="pseudo"><return pos:line="249" pos:column="17">return <expr><name pos:line="249" pos:column="24">REG_ESPACE<pos:position pos:line="249" pos:column="34"/></name></expr>;<pos:position pos:line="249" pos:column="35"/></return></block></then></if>
	      <expr_stmt><expr><name><name pos:line="250" pos:column="15">mbcset<pos:position pos:line="250" pos:column="21"/></name><operator pos:line="250" pos:column="21">-&gt;<pos:position pos:line="250" pos:column="26"/></operator><name pos:line="250" pos:column="23">coll_syms<pos:position pos:line="250" pos:column="32"/></name></name> <operator pos:line="250" pos:column="33">=<pos:position pos:line="250" pos:column="34"/></operator> <name pos:line="250" pos:column="35">new_coll_syms<pos:position pos:line="250" pos:column="48"/></name></expr>;<pos:position pos:line="250" pos:column="49"/></expr_stmt>
	      <expr_stmt><expr><operator pos:line="251" pos:column="15">*<pos:position pos:line="251" pos:column="16"/></operator><name pos:line="251" pos:column="16">coll_sym_alloc<pos:position pos:line="251" pos:column="30"/></name> <operator pos:line="251" pos:column="31">=<pos:position pos:line="251" pos:column="32"/></operator> <name pos:line="251" pos:column="33">new_coll_sym_alloc<pos:position pos:line="251" pos:column="51"/></name></expr>;<pos:position pos:line="251" pos:column="52"/></expr_stmt>
	    }<pos:position pos:line="252" pos:column="14"/></block></then></if>
	  <expr_stmt><expr><name><name pos:line="253" pos:column="11">mbcset<pos:position pos:line="253" pos:column="17"/></name><operator pos:line="253" pos:column="17">-&gt;<pos:position pos:line="253" pos:column="22"/></operator><name pos:line="253" pos:column="19">coll_syms<pos:position pos:line="253" pos:column="28"/></name><index pos:line="253" pos:column="28">[<expr><name><name pos:line="253" pos:column="29">mbcset<pos:position pos:line="253" pos:column="35"/></name><operator pos:line="253" pos:column="35">-&gt;<pos:position pos:line="253" pos:column="40"/></operator><name pos:line="253" pos:column="37">ncoll_syms<pos:position pos:line="253" pos:column="47"/></name></name><operator pos:line="253" pos:column="47">++<pos:position pos:line="253" pos:column="49"/></operator></expr>]<pos:position pos:line="253" pos:column="50"/></index></name> <operator pos:line="253" pos:column="51">=<pos:position pos:line="253" pos:column="52"/></operator> <name pos:line="253" pos:column="53">idx<pos:position pos:line="253" pos:column="56"/></name></expr>;<pos:position pos:line="253" pos:column="57"/></expr_stmt>
	  <return pos:line="254" pos:column="11">return <expr><name pos:line="254" pos:column="18">REG_NOERROR<pos:position pos:line="254" pos:column="29"/></name></expr>;<pos:position pos:line="254" pos:column="30"/></return>
	}<pos:position pos:line="255" pos:column="10"/></block></then>
      <else pos:line="256" pos:column="7">else
	<block pos:line="257" pos:column="9">{
	  <if pos:line="258" pos:column="11">if <condition pos:line="258" pos:column="14">(<expr><call><name pos:line="258" pos:column="15">BE<pos:position pos:line="258" pos:column="17"/></name> <argument_list pos:line="258" pos:column="18">(<argument><expr><name pos:line="258" pos:column="19">name_len<pos:position pos:line="258" pos:column="27"/></name> <operator pos:line="258" pos:column="28">!=<pos:position pos:line="258" pos:column="30"/></operator> <literal type="number" pos:line="258" pos:column="31">1<pos:position pos:line="258" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="258" pos:column="34">0<pos:position pos:line="258" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="258" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="258" pos:column="37"/></condition><then pos:line="258" pos:column="37">
	    <block type="pseudo"><return pos:line="259" pos:column="13">return <expr><name pos:line="259" pos:column="20">REG_ECOLLATE<pos:position pos:line="259" pos:column="32"/></name></expr>;<pos:position pos:line="259" pos:column="33"/></return></block></then>
	  <else pos:line="260" pos:column="11">else
	    <block pos:line="261" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="262" pos:column="15">bitset_set<pos:position pos:line="262" pos:column="25"/></name> <argument_list pos:line="262" pos:column="26">(<argument><expr><name pos:line="262" pos:column="27">sbcset<pos:position pos:line="262" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="262" pos:column="35">name<pos:position pos:line="262" pos:column="39"/></name><index pos:line="262" pos:column="39">[<expr><literal type="number" pos:line="262" pos:column="40">0<pos:position pos:line="262" pos:column="41"/></literal></expr>]<pos:position pos:line="262" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="262" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="262" pos:column="44"/></expr_stmt>
	      <return pos:line="263" pos:column="15">return <expr><name pos:line="263" pos:column="22">REG_NOERROR<pos:position pos:line="263" pos:column="33"/></name></expr>;<pos:position pos:line="263" pos:column="34"/></return>
	    }<pos:position pos:line="264" pos:column="14"/></block></else></if>
	}<pos:position pos:line="265" pos:column="10"/></block></else></if>
    }<pos:position pos:line="266" pos:column="6"/></block>
<cpp:endif pos:line="267" pos:column="1">#<cpp:directive pos:line="267" pos:column="2">endif<pos:position pos:line="267" pos:column="7"/></cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name pos:line="269" pos:column="3">re_token_t<pos:position pos:line="269" pos:column="13"/></name></type> <name pos:line="269" pos:column="14">br_token<pos:position pos:line="269" pos:column="22"/></name></decl>;<pos:position pos:line="269" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="270" pos:column="3">re_bitset_ptr_t<pos:position pos:line="270" pos:column="18"/></name></type> <name pos:line="270" pos:column="19">sbcset<pos:position pos:line="270" pos:column="25"/></name></decl>;<pos:position pos:line="270" pos:column="26"/></decl_stmt>
<cpp:ifdef pos:line="271" pos:column="1">#<cpp:directive pos:line="271" pos:column="2">ifdef<pos:position pos:line="271" pos:column="7"/></cpp:directive> <name pos:line="271" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="271" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="272" pos:column="3">re_charset_t<pos:position pos:line="272" pos:column="15"/></name> <modifier pos:line="272" pos:column="16">*<pos:position pos:line="272" pos:column="17"/></modifier></type><name pos:line="272" pos:column="17">mbcset<pos:position pos:line="272" pos:column="23"/></name></decl>;<pos:position pos:line="272" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="273" pos:column="3">int<pos:position pos:line="273" pos:column="6"/></name></type> <name pos:line="273" pos:column="7">coll_sym_alloc<pos:position pos:line="273" pos:column="21"/></name> <init pos:line="273" pos:column="22">= <expr><literal type="number" pos:line="273" pos:column="24">0<pos:position pos:line="273" pos:column="25"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="273" pos:column="27">range_alloc<pos:position pos:line="273" pos:column="38"/></name> <init pos:line="273" pos:column="39">= <expr><literal type="number" pos:line="273" pos:column="41">0<pos:position pos:line="273" pos:column="42"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="273" pos:column="44">mbchar_alloc<pos:position pos:line="273" pos:column="56"/></name> <init pos:line="273" pos:column="57">= <expr><literal type="number" pos:line="273" pos:column="59">0<pos:position pos:line="273" pos:column="60"/></literal></expr></init></decl>;<pos:position pos:line="273" pos:column="61"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="274" pos:column="3">int<pos:position pos:line="274" pos:column="6"/></name></type> <name pos:line="274" pos:column="7">equiv_class_alloc<pos:position pos:line="274" pos:column="24"/></name> <init pos:line="274" pos:column="25">= <expr><literal type="number" pos:line="274" pos:column="27">0<pos:position pos:line="274" pos:column="28"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="274" pos:column="30">char_class_alloc<pos:position pos:line="274" pos:column="46"/></name> <init pos:line="274" pos:column="47">= <expr><literal type="number" pos:line="274" pos:column="49">0<pos:position pos:line="274" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="274" pos:column="51"/></decl_stmt>
<cpp:endif pos:line="275" pos:column="1">#<cpp:directive pos:line="275" pos:column="2">endif<pos:position pos:line="275" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="275" pos:column="8">/* not RE_ENABLE_I18N */</comment>
  <decl_stmt><decl><type><name pos:line="276" pos:column="3">int<pos:position pos:line="276" pos:column="6"/></name></type> <name pos:line="276" pos:column="7">non_match<pos:position pos:line="276" pos:column="16"/></name> <init pos:line="276" pos:column="17">= <expr><literal type="number" pos:line="276" pos:column="19">0<pos:position pos:line="276" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="276" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="277" pos:column="3">bin_tree_t<pos:position pos:line="277" pos:column="13"/></name> <modifier pos:line="277" pos:column="14">*<pos:position pos:line="277" pos:column="15"/></modifier></type><name pos:line="277" pos:column="15">work_tree<pos:position pos:line="277" pos:column="24"/></name></decl>;<pos:position pos:line="277" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="278" pos:column="3">int<pos:position pos:line="278" pos:column="6"/></name></type> <name pos:line="278" pos:column="7">token_len<pos:position pos:line="278" pos:column="16"/></name></decl>;<pos:position pos:line="278" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="279" pos:column="3">int<pos:position pos:line="279" pos:column="6"/></name></type> <name pos:line="279" pos:column="7">first_round<pos:position pos:line="279" pos:column="18"/></name> <init pos:line="279" pos:column="19">= <expr><literal type="number" pos:line="279" pos:column="21">1<pos:position pos:line="279" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="279" pos:column="23"/></decl_stmt>
<cpp:ifdef pos:line="280" pos:column="1">#<cpp:directive pos:line="280" pos:column="2">ifdef<pos:position pos:line="280" pos:column="7"/></cpp:directive> <name pos:line="280" pos:column="8">_LIBC<pos:position pos:line="280" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="281" pos:column="3">collseqmb<pos:position pos:line="281" pos:column="12"/></name> <operator pos:line="281" pos:column="13">=<pos:position pos:line="281" pos:column="14"/></operator> <operator pos:line="281" pos:column="15">(<pos:position pos:line="281" pos:column="16"/></operator><specifier pos:line="281" pos:column="16">const<pos:position pos:line="281" pos:column="21"/></specifier> <name pos:line="281" pos:column="22">unsigned<pos:position pos:line="281" pos:column="30"/></name> <name pos:line="281" pos:column="31">char<pos:position pos:line="281" pos:column="35"/></name> <operator pos:line="281" pos:column="36">*<pos:position pos:line="281" pos:column="37"/></operator><operator pos:line="281" pos:column="37">)<pos:position pos:line="281" pos:column="38"/></operator>
    <call><name pos:line="282" pos:column="5">_NL_CURRENT<pos:position pos:line="282" pos:column="16"/></name> <argument_list pos:line="282" pos:column="17">(<argument><expr><name pos:line="282" pos:column="18">LC_COLLATE<pos:position pos:line="282" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="282" pos:column="30">_NL_COLLATE_COLLSEQMB<pos:position pos:line="282" pos:column="51"/></name></expr></argument>)<pos:position pos:line="282" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="282" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><name pos:line="283" pos:column="3">nrules<pos:position pos:line="283" pos:column="9"/></name> <operator pos:line="283" pos:column="10">=<pos:position pos:line="283" pos:column="11"/></operator> <call><name pos:line="283" pos:column="12">_NL_CURRENT_WORD<pos:position pos:line="283" pos:column="28"/></name> <argument_list pos:line="283" pos:column="29">(<argument><expr><name pos:line="283" pos:column="30">LC_COLLATE<pos:position pos:line="283" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="283" pos:column="42">_NL_COLLATE_NRULES<pos:position pos:line="283" pos:column="60"/></name></expr></argument>)<pos:position pos:line="283" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="62"/></expr_stmt>
  <if pos:line="284" pos:column="3">if <condition pos:line="284" pos:column="6">(<expr><name pos:line="284" pos:column="7">nrules<pos:position pos:line="284" pos:column="13"/></name></expr>)<pos:position pos:line="284" pos:column="14"/></condition><then pos:line="284" pos:column="14">
    <block pos:line="285" pos:column="5">{
      <comment type="block" pos:line="286" pos:column="7">/*
      if (MB_CUR_MAX &gt; 1)
      */</comment>
      <expr_stmt><expr><name pos:line="289" pos:column="7">collseqwc<pos:position pos:line="289" pos:column="16"/></name> <operator pos:line="289" pos:column="17">=<pos:position pos:line="289" pos:column="18"/></operator> <call><name pos:line="289" pos:column="19">_NL_CURRENT<pos:position pos:line="289" pos:column="30"/></name> <argument_list pos:line="289" pos:column="31">(<argument><expr><name pos:line="289" pos:column="32">LC_COLLATE<pos:position pos:line="289" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="289" pos:column="44">_NL_COLLATE_COLLSEQWC<pos:position pos:line="289" pos:column="65"/></name></expr></argument>)<pos:position pos:line="289" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="67"/></expr_stmt>
      <expr_stmt><expr><name pos:line="290" pos:column="7">table_size<pos:position pos:line="290" pos:column="17"/></name> <operator pos:line="290" pos:column="18">=<pos:position pos:line="290" pos:column="19"/></operator> <call><name pos:line="290" pos:column="20">_NL_CURRENT_WORD<pos:position pos:line="290" pos:column="36"/></name> <argument_list pos:line="290" pos:column="37">(<argument><expr><name pos:line="290" pos:column="38">LC_COLLATE<pos:position pos:line="290" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="290" pos:column="50">_NL_COLLATE_SYMB_HASH_SIZEMB<pos:position pos:line="290" pos:column="78"/></name></expr></argument>)<pos:position pos:line="290" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="80"/></expr_stmt>
      <expr_stmt><expr><name pos:line="291" pos:column="7">symb_table<pos:position pos:line="291" pos:column="17"/></name> <operator pos:line="291" pos:column="18">=<pos:position pos:line="291" pos:column="19"/></operator> <operator pos:line="291" pos:column="20">(<pos:position pos:line="291" pos:column="21"/></operator><specifier pos:line="291" pos:column="21">const<pos:position pos:line="291" pos:column="26"/></specifier> <name pos:line="291" pos:column="27">int32_t<pos:position pos:line="291" pos:column="34"/></name> <operator pos:line="291" pos:column="35">*<pos:position pos:line="291" pos:column="36"/></operator><operator pos:line="291" pos:column="36">)<pos:position pos:line="291" pos:column="37"/></operator> <call><name pos:line="291" pos:column="38">_NL_CURRENT<pos:position pos:line="291" pos:column="49"/></name> <argument_list pos:line="291" pos:column="50">(<argument><expr><name pos:line="291" pos:column="51">LC_COLLATE<pos:position pos:line="291" pos:column="61"/></name></expr></argument>,
						  <argument><expr><name pos:line="292" pos:column="51">_NL_COLLATE_SYMB_TABLEMB<pos:position pos:line="292" pos:column="75"/></name></expr></argument>)<pos:position pos:line="292" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="292" pos:column="77"/></expr_stmt>
      <expr_stmt><expr><name pos:line="293" pos:column="7">extra<pos:position pos:line="293" pos:column="12"/></name> <operator pos:line="293" pos:column="13">=<pos:position pos:line="293" pos:column="14"/></operator> <operator pos:line="293" pos:column="15">(<pos:position pos:line="293" pos:column="16"/></operator><specifier pos:line="293" pos:column="16">const<pos:position pos:line="293" pos:column="21"/></specifier> <name pos:line="293" pos:column="22">unsigned<pos:position pos:line="293" pos:column="30"/></name> <name pos:line="293" pos:column="31">char<pos:position pos:line="293" pos:column="35"/></name> <operator pos:line="293" pos:column="36">*<pos:position pos:line="293" pos:column="37"/></operator><operator pos:line="293" pos:column="37">)<pos:position pos:line="293" pos:column="38"/></operator> <call><name pos:line="293" pos:column="39">_NL_CURRENT<pos:position pos:line="293" pos:column="50"/></name> <argument_list pos:line="293" pos:column="51">(<argument><expr><name pos:line="293" pos:column="52">LC_COLLATE<pos:position pos:line="293" pos:column="62"/></name></expr></argument>,
						   <argument><expr><name pos:line="294" pos:column="52">_NL_COLLATE_SYMB_EXTRAMB<pos:position pos:line="294" pos:column="76"/></name></expr></argument>)<pos:position pos:line="294" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="294" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="295" pos:column="6"/></block></then></if>
<cpp:endif pos:line="296" pos:column="1">#<cpp:directive pos:line="296" pos:column="2">endif<pos:position pos:line="296" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name pos:line="297" pos:column="3">sbcset<pos:position pos:line="297" pos:column="9"/></name> <operator pos:line="297" pos:column="10">=<pos:position pos:line="297" pos:column="11"/></operator> <operator pos:line="297" pos:column="12">(<pos:position pos:line="297" pos:column="13"/></operator><name pos:line="297" pos:column="13">re_bitset_ptr_t<pos:position pos:line="297" pos:column="28"/></name><operator pos:line="297" pos:column="28">)<pos:position pos:line="297" pos:column="29"/></operator> <call><name pos:line="297" pos:column="30">calloc<pos:position pos:line="297" pos:column="36"/></name> <argument_list pos:line="297" pos:column="37">(<argument><expr><sizeof pos:line="297" pos:column="38">sizeof <argument_list pos:line="297" pos:column="45">(<argument><expr><name pos:line="297" pos:column="46">bitset_t<pos:position pos:line="297" pos:column="54"/></name></expr></argument>)<pos:position pos:line="297" pos:column="55"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="297" pos:column="57">1<pos:position pos:line="297" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="297" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="297" pos:column="60"/></expr_stmt>
<cpp:ifdef pos:line="298" pos:column="1">#<cpp:directive pos:line="298" pos:column="2">ifdef<pos:position pos:line="298" pos:column="7"/></cpp:directive> <name pos:line="298" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="298" pos:column="22"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="299" pos:column="3">mbcset<pos:position pos:line="299" pos:column="9"/></name> <operator pos:line="299" pos:column="10">=<pos:position pos:line="299" pos:column="11"/></operator> <operator pos:line="299" pos:column="12">(<pos:position pos:line="299" pos:column="13"/></operator><name pos:line="299" pos:column="13">re_charset_t<pos:position pos:line="299" pos:column="25"/></name> <operator pos:line="299" pos:column="26">*<pos:position pos:line="299" pos:column="27"/></operator><operator pos:line="299" pos:column="27">)<pos:position pos:line="299" pos:column="28"/></operator> <call><name pos:line="299" pos:column="29">calloc<pos:position pos:line="299" pos:column="35"/></name> <argument_list pos:line="299" pos:column="36">(<argument><expr><sizeof pos:line="299" pos:column="37">sizeof <argument_list pos:line="299" pos:column="44">(<argument><expr><name pos:line="299" pos:column="45">re_charset_t<pos:position pos:line="299" pos:column="57"/></name></expr></argument>)<pos:position pos:line="299" pos:column="58"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="299" pos:column="60">1<pos:position pos:line="299" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="299" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="299" pos:column="63"/></expr_stmt>
<cpp:endif pos:line="300" pos:column="1">#<cpp:directive pos:line="300" pos:column="2">endif<pos:position pos:line="300" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="300" pos:column="8">/* RE_ENABLE_I18N */</comment>
<cpp:ifdef pos:line="301" pos:column="1">#<cpp:directive pos:line="301" pos:column="2">ifdef<pos:position pos:line="301" pos:column="7"/></cpp:directive> <name pos:line="301" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="301" pos:column="22"/></name></cpp:ifdef>
  <if pos:line="302" pos:column="3">if <condition pos:line="302" pos:column="6">(<expr><call><name pos:line="302" pos:column="7">BE<pos:position pos:line="302" pos:column="9"/></name> <argument_list pos:line="302" pos:column="10">(<argument><expr><name pos:line="302" pos:column="11">sbcset<pos:position pos:line="302" pos:column="17"/></name> <operator pos:line="302" pos:column="18">==<pos:position pos:line="302" pos:column="20"/></operator> <name pos:line="302" pos:column="21">NULL<pos:position pos:line="302" pos:column="25"/></name> <operator pos:line="302" pos:column="26">||<pos:position pos:line="302" pos:column="28"/></operator> <name pos:line="302" pos:column="29">mbcset<pos:position pos:line="302" pos:column="35"/></name> <operator pos:line="302" pos:column="36">==<pos:position pos:line="302" pos:column="38"/></operator> <name pos:line="302" pos:column="39">NULL<pos:position pos:line="302" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="302" pos:column="45">0<pos:position pos:line="302" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="302" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="302" pos:column="48"/></condition><then pos:line="302" pos:column="48">
<cpp:else pos:line="303" pos:column="1">#<cpp:directive pos:line="303" pos:column="2">else<pos:position pos:line="303" pos:column="6"/></cpp:directive></cpp:else>
  <block type="pseudo"><if pos:line="304" pos:column="3">if <condition pos:line="304" pos:column="6">(<expr><call><name pos:line="304" pos:column="7">BE<pos:position pos:line="304" pos:column="9"/></name> <argument_list pos:line="304" pos:column="10">(<argument><expr><name pos:line="304" pos:column="11">sbcset<pos:position pos:line="304" pos:column="17"/></name> <operator pos:line="304" pos:column="18">==<pos:position pos:line="304" pos:column="20"/></operator> <name pos:line="304" pos:column="21">NULL<pos:position pos:line="304" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="304" pos:column="27">0<pos:position pos:line="304" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="304" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="304" pos:column="30"/></condition><then pos:line="304" pos:column="30">
<cpp:endif pos:line="305" pos:column="1">#<cpp:directive pos:line="305" pos:column="2">endif<pos:position pos:line="305" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="305" pos:column="8">/* RE_ENABLE_I18N */</comment>
    <block pos:line="306" pos:column="5">{
      <expr_stmt><expr><operator pos:line="307" pos:column="7">*<pos:position pos:line="307" pos:column="8"/></operator><name pos:line="307" pos:column="8">err<pos:position pos:line="307" pos:column="11"/></name> <operator pos:line="307" pos:column="12">=<pos:position pos:line="307" pos:column="13"/></operator> <name pos:line="307" pos:column="14">REG_ESPACE<pos:position pos:line="307" pos:column="24"/></name></expr>;<pos:position pos:line="307" pos:column="25"/></expr_stmt>
      <return pos:line="308" pos:column="7">return <expr><name pos:line="308" pos:column="14">NULL<pos:position pos:line="308" pos:column="18"/></name></expr>;<pos:position pos:line="308" pos:column="19"/></return>
    }<pos:position pos:line="309" pos:column="6"/></block></then></if></block></then></if>

  <expr_stmt><expr><name pos:line="311" pos:column="3">token_len<pos:position pos:line="311" pos:column="12"/></name> <operator pos:line="311" pos:column="13">=<pos:position pos:line="311" pos:column="14"/></operator> <call><name pos:line="311" pos:column="15">peek_token_bracket<pos:position pos:line="311" pos:column="33"/></name> <argument_list pos:line="311" pos:column="34">(<argument><expr><name pos:line="311" pos:column="35">token<pos:position pos:line="311" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="311" pos:column="42">regexp<pos:position pos:line="311" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="311" pos:column="50">syntax<pos:position pos:line="311" pos:column="56"/></name></expr></argument>)<pos:position pos:line="311" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="311" pos:column="58"/></expr_stmt>
  <if pos:line="312" pos:column="3">if <condition pos:line="312" pos:column="6">(<expr><call><name pos:line="312" pos:column="7">BE<pos:position pos:line="312" pos:column="9"/></name> <argument_list pos:line="312" pos:column="10">(<argument><expr><name><name pos:line="312" pos:column="11">token<pos:position pos:line="312" pos:column="16"/></name><operator pos:line="312" pos:column="16">-&gt;<pos:position pos:line="312" pos:column="21"/></operator><name pos:line="312" pos:column="18">type<pos:position pos:line="312" pos:column="22"/></name></name> <operator pos:line="312" pos:column="23">==<pos:position pos:line="312" pos:column="25"/></operator> <name pos:line="312" pos:column="26">END_OF_RE<pos:position pos:line="312" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="312" pos:column="37">0<pos:position pos:line="312" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="312" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="312" pos:column="40"/></condition><then pos:line="312" pos:column="40">
    <block pos:line="313" pos:column="5">{
      <expr_stmt><expr><operator pos:line="314" pos:column="7">*<pos:position pos:line="314" pos:column="8"/></operator><name pos:line="314" pos:column="8">err<pos:position pos:line="314" pos:column="11"/></name> <operator pos:line="314" pos:column="12">=<pos:position pos:line="314" pos:column="13"/></operator> <name pos:line="314" pos:column="14">REG_BADPAT<pos:position pos:line="314" pos:column="24"/></name></expr>;<pos:position pos:line="314" pos:column="25"/></expr_stmt>
      <goto pos:line="315" pos:column="7">goto <name pos:line="315" pos:column="12">parse_bracket_exp_free_return<pos:position pos:line="315" pos:column="41"/></name>;<pos:position pos:line="315" pos:column="42"/></goto>
    }<pos:position pos:line="316" pos:column="6"/></block></then></if>
  <if pos:line="317" pos:column="3">if <condition pos:line="317" pos:column="6">(<expr><name><name pos:line="317" pos:column="7">token<pos:position pos:line="317" pos:column="12"/></name><operator pos:line="317" pos:column="12">-&gt;<pos:position pos:line="317" pos:column="17"/></operator><name pos:line="317" pos:column="14">type<pos:position pos:line="317" pos:column="18"/></name></name> <operator pos:line="317" pos:column="19">==<pos:position pos:line="317" pos:column="21"/></operator> <name pos:line="317" pos:column="22">OP_NON_MATCH_LIST<pos:position pos:line="317" pos:column="39"/></name></expr>)<pos:position pos:line="317" pos:column="40"/></condition><then pos:line="317" pos:column="40">
    <block pos:line="318" pos:column="5">{
<cpp:ifdef pos:line="319" pos:column="1">#<cpp:directive pos:line="319" pos:column="2">ifdef<pos:position pos:line="319" pos:column="7"/></cpp:directive> <name pos:line="319" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="319" pos:column="22"/></name></cpp:ifdef>
      <expr_stmt><expr><name><name pos:line="320" pos:column="7">mbcset<pos:position pos:line="320" pos:column="13"/></name><operator pos:line="320" pos:column="13">-&gt;<pos:position pos:line="320" pos:column="18"/></operator><name pos:line="320" pos:column="15">non_match<pos:position pos:line="320" pos:column="24"/></name></name> <operator pos:line="320" pos:column="25">=<pos:position pos:line="320" pos:column="26"/></operator> <literal type="number" pos:line="320" pos:column="27">1<pos:position pos:line="320" pos:column="28"/></literal></expr>;<pos:position pos:line="320" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="321" pos:column="1">#<cpp:directive pos:line="321" pos:column="2">endif<pos:position pos:line="321" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="321" pos:column="8">/* not RE_ENABLE_I18N */</comment>
      <expr_stmt><expr><name pos:line="322" pos:column="7">non_match<pos:position pos:line="322" pos:column="16"/></name> <operator pos:line="322" pos:column="17">=<pos:position pos:line="322" pos:column="18"/></operator> <literal type="number" pos:line="322" pos:column="19">1<pos:position pos:line="322" pos:column="20"/></literal></expr>;<pos:position pos:line="322" pos:column="21"/></expr_stmt>
      <if pos:line="323" pos:column="7">if <condition pos:line="323" pos:column="10">(<expr><name pos:line="323" pos:column="11">syntax<pos:position pos:line="323" pos:column="17"/></name> <operator pos:line="323" pos:column="18">&amp;<pos:position pos:line="323" pos:column="23"/></operator> <name pos:line="323" pos:column="20">RE_HAT_LISTS_NOT_NEWLINE<pos:position pos:line="323" pos:column="44"/></name></expr>)<pos:position pos:line="323" pos:column="45"/></condition><then pos:line="323" pos:column="45">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="324" pos:column="9">bitset_set<pos:position pos:line="324" pos:column="19"/></name> <argument_list pos:line="324" pos:column="20">(<argument><expr><name pos:line="324" pos:column="21">sbcset<pos:position pos:line="324" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="324" pos:column="29">'\n'<pos:position pos:line="324" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="324" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="324" pos:column="35"/></expr_stmt></block></then></if>
      <expr_stmt><expr><call><name pos:line="325" pos:column="7">re_string_skip_bytes<pos:position pos:line="325" pos:column="27"/></name> <argument_list pos:line="325" pos:column="28">(<argument><expr><name pos:line="325" pos:column="29">regexp<pos:position pos:line="325" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="325" pos:column="37">token_len<pos:position pos:line="325" pos:column="46"/></name></expr></argument>)<pos:position pos:line="325" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="325" pos:column="48"/></expr_stmt> <comment type="block" pos:line="325" pos:column="49">/* Skip a token.  */</comment>
      <expr_stmt><expr><name pos:line="326" pos:column="7">token_len<pos:position pos:line="326" pos:column="16"/></name> <operator pos:line="326" pos:column="17">=<pos:position pos:line="326" pos:column="18"/></operator> <call><name pos:line="326" pos:column="19">peek_token_bracket<pos:position pos:line="326" pos:column="37"/></name> <argument_list pos:line="326" pos:column="38">(<argument><expr><name pos:line="326" pos:column="39">token<pos:position pos:line="326" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="326" pos:column="46">regexp<pos:position pos:line="326" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="326" pos:column="54">syntax<pos:position pos:line="326" pos:column="60"/></name></expr></argument>)<pos:position pos:line="326" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="326" pos:column="62"/></expr_stmt>
      <if pos:line="327" pos:column="7">if <condition pos:line="327" pos:column="10">(<expr><call><name pos:line="327" pos:column="11">BE<pos:position pos:line="327" pos:column="13"/></name> <argument_list pos:line="327" pos:column="14">(<argument><expr><name><name pos:line="327" pos:column="15">token<pos:position pos:line="327" pos:column="20"/></name><operator pos:line="327" pos:column="20">-&gt;<pos:position pos:line="327" pos:column="25"/></operator><name pos:line="327" pos:column="22">type<pos:position pos:line="327" pos:column="26"/></name></name> <operator pos:line="327" pos:column="27">==<pos:position pos:line="327" pos:column="29"/></operator> <name pos:line="327" pos:column="30">END_OF_RE<pos:position pos:line="327" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="327" pos:column="41">0<pos:position pos:line="327" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="327" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="327" pos:column="44"/></condition><then pos:line="327" pos:column="44">
	<block pos:line="328" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="329" pos:column="11">*<pos:position pos:line="329" pos:column="12"/></operator><name pos:line="329" pos:column="12">err<pos:position pos:line="329" pos:column="15"/></name> <operator pos:line="329" pos:column="16">=<pos:position pos:line="329" pos:column="17"/></operator> <name pos:line="329" pos:column="18">REG_BADPAT<pos:position pos:line="329" pos:column="28"/></name></expr>;<pos:position pos:line="329" pos:column="29"/></expr_stmt>
	  <goto pos:line="330" pos:column="11">goto <name pos:line="330" pos:column="16">parse_bracket_exp_free_return<pos:position pos:line="330" pos:column="45"/></name>;<pos:position pos:line="330" pos:column="46"/></goto>
	}<pos:position pos:line="331" pos:column="10"/></block></then></if>
    }<pos:position pos:line="332" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="334" pos:column="3">/* We treat the first ']' as a normal character.  */</comment>
  <if pos:line="335" pos:column="3">if <condition pos:line="335" pos:column="6">(<expr><name><name pos:line="335" pos:column="7">token<pos:position pos:line="335" pos:column="12"/></name><operator pos:line="335" pos:column="12">-&gt;<pos:position pos:line="335" pos:column="17"/></operator><name pos:line="335" pos:column="14">type<pos:position pos:line="335" pos:column="18"/></name></name> <operator pos:line="335" pos:column="19">==<pos:position pos:line="335" pos:column="21"/></operator> <name pos:line="335" pos:column="22">OP_CLOSE_BRACKET<pos:position pos:line="335" pos:column="38"/></name></expr>)<pos:position pos:line="335" pos:column="39"/></condition><then pos:line="335" pos:column="39">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="336" pos:column="5">token<pos:position pos:line="336" pos:column="10"/></name><operator pos:line="336" pos:column="10">-&gt;<pos:position pos:line="336" pos:column="15"/></operator><name pos:line="336" pos:column="12">type<pos:position pos:line="336" pos:column="16"/></name></name> <operator pos:line="336" pos:column="17">=<pos:position pos:line="336" pos:column="18"/></operator> <name pos:line="336" pos:column="19">CHARACTER<pos:position pos:line="336" pos:column="28"/></name></expr>;<pos:position pos:line="336" pos:column="29"/></expr_stmt></block></then></if>

  <while pos:line="338" pos:column="3">while <condition pos:line="338" pos:column="9">(<expr><literal type="number" pos:line="338" pos:column="10">1<pos:position pos:line="338" pos:column="11"/></literal></expr>)<pos:position pos:line="338" pos:column="12"/></condition>
    <block pos:line="339" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="340" pos:column="7">bracket_elem_t<pos:position pos:line="340" pos:column="21"/></name></type> <name pos:line="340" pos:column="22">start_elem<pos:position pos:line="340" pos:column="32"/></name></decl>, <decl><type ref="prev"/><name pos:line="340" pos:column="34">end_elem<pos:position pos:line="340" pos:column="42"/></name></decl>;<pos:position pos:line="340" pos:column="43"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="341" pos:column="7">unsigned<pos:position pos:line="341" pos:column="15"/></name> <name pos:line="341" pos:column="16">char<pos:position pos:line="341" pos:column="20"/></name></type> <name><name pos:line="341" pos:column="21">start_name_buf<pos:position pos:line="341" pos:column="35"/></name><index pos:line="341" pos:column="35">[<expr><name pos:line="341" pos:column="36">BRACKET_NAME_BUF_SIZE<pos:position pos:line="341" pos:column="57"/></name></expr>]<pos:position pos:line="341" pos:column="58"/></index></name></decl>;<pos:position pos:line="341" pos:column="59"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="342" pos:column="7">unsigned<pos:position pos:line="342" pos:column="15"/></name> <name pos:line="342" pos:column="16">char<pos:position pos:line="342" pos:column="20"/></name></type> <name><name pos:line="342" pos:column="21">end_name_buf<pos:position pos:line="342" pos:column="33"/></name><index pos:line="342" pos:column="33">[<expr><name pos:line="342" pos:column="34">BRACKET_NAME_BUF_SIZE<pos:position pos:line="342" pos:column="55"/></name></expr>]<pos:position pos:line="342" pos:column="56"/></index></name></decl>;<pos:position pos:line="342" pos:column="57"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="343" pos:column="7">reg_errcode_t<pos:position pos:line="343" pos:column="20"/></name></type> <name pos:line="343" pos:column="21">ret<pos:position pos:line="343" pos:column="24"/></name></decl>;<pos:position pos:line="343" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="344" pos:column="7">int<pos:position pos:line="344" pos:column="10"/></name></type> <name pos:line="344" pos:column="11">token_len2<pos:position pos:line="344" pos:column="21"/></name> <init pos:line="344" pos:column="22">= <expr><literal type="number" pos:line="344" pos:column="24">0<pos:position pos:line="344" pos:column="25"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="344" pos:column="27">is_range_exp<pos:position pos:line="344" pos:column="39"/></name> <init pos:line="344" pos:column="40">= <expr><literal type="number" pos:line="344" pos:column="42">0<pos:position pos:line="344" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="344" pos:column="44"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="345" pos:column="7">re_token_t<pos:position pos:line="345" pos:column="17"/></name></type> <name pos:line="345" pos:column="18">token2<pos:position pos:line="345" pos:column="24"/></name></decl>;<pos:position pos:line="345" pos:column="25"/></decl_stmt>

      <expr_stmt><expr><name><name pos:line="347" pos:column="7">start_elem<pos:position pos:line="347" pos:column="17"/></name><operator pos:line="347" pos:column="17">.<pos:position pos:line="347" pos:column="18"/></operator><name pos:line="347" pos:column="18">opr<pos:position pos:line="347" pos:column="21"/></name><operator pos:line="347" pos:column="21">.<pos:position pos:line="347" pos:column="22"/></operator><name pos:line="347" pos:column="22">name<pos:position pos:line="347" pos:column="26"/></name></name> <operator pos:line="347" pos:column="27">=<pos:position pos:line="347" pos:column="28"/></operator> <name pos:line="347" pos:column="29">start_name_buf<pos:position pos:line="347" pos:column="43"/></name></expr>;<pos:position pos:line="347" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><name pos:line="348" pos:column="7">ret<pos:position pos:line="348" pos:column="10"/></name> <operator pos:line="348" pos:column="11">=<pos:position pos:line="348" pos:column="12"/></operator> <call><name pos:line="348" pos:column="13">parse_bracket_element<pos:position pos:line="348" pos:column="34"/></name> <argument_list pos:line="348" pos:column="35">(<argument><expr><operator pos:line="348" pos:column="36">&amp;<pos:position pos:line="348" pos:column="41"/></operator><name pos:line="348" pos:column="37">start_elem<pos:position pos:line="348" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="348" pos:column="49">regexp<pos:position pos:line="348" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="348" pos:column="57">token<pos:position pos:line="348" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="348" pos:column="64">token_len<pos:position pos:line="348" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="348" pos:column="75">dfa<pos:position pos:line="348" pos:column="78"/></name></expr></argument>,
				   <argument><expr><name pos:line="349" pos:column="36">syntax<pos:position pos:line="349" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="349" pos:column="44">first_round<pos:position pos:line="349" pos:column="55"/></name></expr></argument>)<pos:position pos:line="349" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="349" pos:column="57"/></expr_stmt>
      <if pos:line="350" pos:column="7">if <condition pos:line="350" pos:column="10">(<expr><call><name pos:line="350" pos:column="11">BE<pos:position pos:line="350" pos:column="13"/></name> <argument_list pos:line="350" pos:column="14">(<argument><expr><name pos:line="350" pos:column="15">ret<pos:position pos:line="350" pos:column="18"/></name> <operator pos:line="350" pos:column="19">!=<pos:position pos:line="350" pos:column="21"/></operator> <name pos:line="350" pos:column="22">REG_NOERROR<pos:position pos:line="350" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="350" pos:column="35">0<pos:position pos:line="350" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="350" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="350" pos:column="38"/></condition><then pos:line="350" pos:column="38">
	<block pos:line="351" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="352" pos:column="11">*<pos:position pos:line="352" pos:column="12"/></operator><name pos:line="352" pos:column="12">err<pos:position pos:line="352" pos:column="15"/></name> <operator pos:line="352" pos:column="16">=<pos:position pos:line="352" pos:column="17"/></operator> <name pos:line="352" pos:column="18">ret<pos:position pos:line="352" pos:column="21"/></name></expr>;<pos:position pos:line="352" pos:column="22"/></expr_stmt>
	  <goto pos:line="353" pos:column="11">goto <name pos:line="353" pos:column="16">parse_bracket_exp_free_return<pos:position pos:line="353" pos:column="45"/></name>;<pos:position pos:line="353" pos:column="46"/></goto>
	}<pos:position pos:line="354" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name pos:line="355" pos:column="7">first_round<pos:position pos:line="355" pos:column="18"/></name> <operator pos:line="355" pos:column="19">=<pos:position pos:line="355" pos:column="20"/></operator> <literal type="number" pos:line="355" pos:column="21">0<pos:position pos:line="355" pos:column="22"/></literal></expr>;<pos:position pos:line="355" pos:column="23"/></expr_stmt>

      <comment type="block" pos:line="357" pos:column="7">/* Get information about the next token.  We need it in any case.  */</comment>
      <expr_stmt><expr><name pos:line="358" pos:column="7">token_len<pos:position pos:line="358" pos:column="16"/></name> <operator pos:line="358" pos:column="17">=<pos:position pos:line="358" pos:column="18"/></operator> <call><name pos:line="358" pos:column="19">peek_token_bracket<pos:position pos:line="358" pos:column="37"/></name> <argument_list pos:line="358" pos:column="38">(<argument><expr><name pos:line="358" pos:column="39">token<pos:position pos:line="358" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="358" pos:column="46">regexp<pos:position pos:line="358" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="358" pos:column="54">syntax<pos:position pos:line="358" pos:column="60"/></name></expr></argument>)<pos:position pos:line="358" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="358" pos:column="62"/></expr_stmt>

      <comment type="block" pos:line="360" pos:column="7">/* Do not check for ranges if we know they are not allowed.  */</comment>
      <if pos:line="361" pos:column="7">if <condition pos:line="361" pos:column="10">(<expr><name><name pos:line="361" pos:column="11">start_elem<pos:position pos:line="361" pos:column="21"/></name><operator pos:line="361" pos:column="21">.<pos:position pos:line="361" pos:column="22"/></operator><name pos:line="361" pos:column="22">type<pos:position pos:line="361" pos:column="26"/></name></name> <operator pos:line="361" pos:column="27">!=<pos:position pos:line="361" pos:column="29"/></operator> <name pos:line="361" pos:column="30">CHAR_CLASS<pos:position pos:line="361" pos:column="40"/></name> <operator pos:line="361" pos:column="41">&amp;&amp;<pos:position pos:line="361" pos:column="51"/></operator> <name><name pos:line="361" pos:column="44">start_elem<pos:position pos:line="361" pos:column="54"/></name><operator pos:line="361" pos:column="54">.<pos:position pos:line="361" pos:column="55"/></operator><name pos:line="361" pos:column="55">type<pos:position pos:line="361" pos:column="59"/></name></name> <operator pos:line="361" pos:column="60">!=<pos:position pos:line="361" pos:column="62"/></operator> <name pos:line="361" pos:column="63">EQUIV_CLASS<pos:position pos:line="361" pos:column="74"/></name></expr>)<pos:position pos:line="361" pos:column="75"/></condition><then pos:line="361" pos:column="75">
	<block pos:line="362" pos:column="9">{
	  <if pos:line="363" pos:column="11">if <condition pos:line="363" pos:column="14">(<expr><call><name pos:line="363" pos:column="15">BE<pos:position pos:line="363" pos:column="17"/></name> <argument_list pos:line="363" pos:column="18">(<argument><expr><name><name pos:line="363" pos:column="19">token<pos:position pos:line="363" pos:column="24"/></name><operator pos:line="363" pos:column="24">-&gt;<pos:position pos:line="363" pos:column="29"/></operator><name pos:line="363" pos:column="26">type<pos:position pos:line="363" pos:column="30"/></name></name> <operator pos:line="363" pos:column="31">==<pos:position pos:line="363" pos:column="33"/></operator> <name pos:line="363" pos:column="34">END_OF_RE<pos:position pos:line="363" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="363" pos:column="45">0<pos:position pos:line="363" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="363" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="363" pos:column="48"/></condition><then pos:line="363" pos:column="48">
	    <block pos:line="364" pos:column="13">{
	      <expr_stmt><expr><operator pos:line="365" pos:column="15">*<pos:position pos:line="365" pos:column="16"/></operator><name pos:line="365" pos:column="16">err<pos:position pos:line="365" pos:column="19"/></name> <operator pos:line="365" pos:column="20">=<pos:position pos:line="365" pos:column="21"/></operator> <name pos:line="365" pos:column="22">REG_EBRACK<pos:position pos:line="365" pos:column="32"/></name></expr>;<pos:position pos:line="365" pos:column="33"/></expr_stmt>
	      <goto pos:line="366" pos:column="15">goto <name pos:line="366" pos:column="20">parse_bracket_exp_free_return<pos:position pos:line="366" pos:column="49"/></name>;<pos:position pos:line="366" pos:column="50"/></goto>
	    }<pos:position pos:line="367" pos:column="14"/></block></then></if>
	  <if pos:line="368" pos:column="11">if <condition pos:line="368" pos:column="14">(<expr><name><name pos:line="368" pos:column="15">token<pos:position pos:line="368" pos:column="20"/></name><operator pos:line="368" pos:column="20">-&gt;<pos:position pos:line="368" pos:column="25"/></operator><name pos:line="368" pos:column="22">type<pos:position pos:line="368" pos:column="26"/></name></name> <operator pos:line="368" pos:column="27">==<pos:position pos:line="368" pos:column="29"/></operator> <name pos:line="368" pos:column="30">OP_CHARSET_RANGE<pos:position pos:line="368" pos:column="46"/></name></expr>)<pos:position pos:line="368" pos:column="47"/></condition><then pos:line="368" pos:column="47">
	    <block pos:line="369" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="370" pos:column="15">re_string_skip_bytes<pos:position pos:line="370" pos:column="35"/></name> <argument_list pos:line="370" pos:column="36">(<argument><expr><name pos:line="370" pos:column="37">regexp<pos:position pos:line="370" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="370" pos:column="45">token_len<pos:position pos:line="370" pos:column="54"/></name></expr></argument>)<pos:position pos:line="370" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="370" pos:column="56"/></expr_stmt> <comment type="block" pos:line="370" pos:column="57">/* Skip '-'.  */</comment>
	      <expr_stmt><expr><name pos:line="371" pos:column="15">token_len2<pos:position pos:line="371" pos:column="25"/></name> <operator pos:line="371" pos:column="26">=<pos:position pos:line="371" pos:column="27"/></operator> <call><name pos:line="371" pos:column="28">peek_token_bracket<pos:position pos:line="371" pos:column="46"/></name> <argument_list pos:line="371" pos:column="47">(<argument><expr><operator pos:line="371" pos:column="48">&amp;<pos:position pos:line="371" pos:column="53"/></operator><name pos:line="371" pos:column="49">token2<pos:position pos:line="371" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="371" pos:column="57">regexp<pos:position pos:line="371" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="371" pos:column="65">syntax<pos:position pos:line="371" pos:column="71"/></name></expr></argument>)<pos:position pos:line="371" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="371" pos:column="73"/></expr_stmt>
	      <if pos:line="372" pos:column="15">if <condition pos:line="372" pos:column="18">(<expr><call><name pos:line="372" pos:column="19">BE<pos:position pos:line="372" pos:column="21"/></name> <argument_list pos:line="372" pos:column="22">(<argument><expr><name><name pos:line="372" pos:column="23">token2<pos:position pos:line="372" pos:column="29"/></name><operator pos:line="372" pos:column="29">.<pos:position pos:line="372" pos:column="30"/></operator><name pos:line="372" pos:column="30">type<pos:position pos:line="372" pos:column="34"/></name></name> <operator pos:line="372" pos:column="35">==<pos:position pos:line="372" pos:column="37"/></operator> <name pos:line="372" pos:column="38">END_OF_RE<pos:position pos:line="372" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="372" pos:column="49">0<pos:position pos:line="372" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="372" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="372" pos:column="52"/></condition><then pos:line="372" pos:column="52">
		<block pos:line="373" pos:column="17">{
		  <expr_stmt><expr><operator pos:line="374" pos:column="19">*<pos:position pos:line="374" pos:column="20"/></operator><name pos:line="374" pos:column="20">err<pos:position pos:line="374" pos:column="23"/></name> <operator pos:line="374" pos:column="24">=<pos:position pos:line="374" pos:column="25"/></operator> <name pos:line="374" pos:column="26">REG_EBRACK<pos:position pos:line="374" pos:column="36"/></name></expr>;<pos:position pos:line="374" pos:column="37"/></expr_stmt>
		  <goto pos:line="375" pos:column="19">goto <name pos:line="375" pos:column="24">parse_bracket_exp_free_return<pos:position pos:line="375" pos:column="53"/></name>;<pos:position pos:line="375" pos:column="54"/></goto>
		}<pos:position pos:line="376" pos:column="18"/></block></then></if>
	      <if pos:line="377" pos:column="15">if <condition pos:line="377" pos:column="18">(<expr><name><name pos:line="377" pos:column="19">token2<pos:position pos:line="377" pos:column="25"/></name><operator pos:line="377" pos:column="25">.<pos:position pos:line="377" pos:column="26"/></operator><name pos:line="377" pos:column="26">type<pos:position pos:line="377" pos:column="30"/></name></name> <operator pos:line="377" pos:column="31">==<pos:position pos:line="377" pos:column="33"/></operator> <name pos:line="377" pos:column="34">OP_CLOSE_BRACKET<pos:position pos:line="377" pos:column="50"/></name></expr>)<pos:position pos:line="377" pos:column="51"/></condition><then pos:line="377" pos:column="51">
		<block pos:line="378" pos:column="17">{
		  <comment type="block" pos:line="379" pos:column="19">/* We treat the last '-' as a normal character.  */</comment>
		  <expr_stmt><expr><call><name pos:line="380" pos:column="19">re_string_skip_bytes<pos:position pos:line="380" pos:column="39"/></name> <argument_list pos:line="380" pos:column="40">(<argument><expr><name pos:line="380" pos:column="41">regexp<pos:position pos:line="380" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="380" pos:column="49">-<pos:position pos:line="380" pos:column="50"/></operator><name pos:line="380" pos:column="50">token_len<pos:position pos:line="380" pos:column="59"/></name></expr></argument>)<pos:position pos:line="380" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="380" pos:column="61"/></expr_stmt>
		  <expr_stmt><expr><name><name pos:line="381" pos:column="19">token<pos:position pos:line="381" pos:column="24"/></name><operator pos:line="381" pos:column="24">-&gt;<pos:position pos:line="381" pos:column="29"/></operator><name pos:line="381" pos:column="26">type<pos:position pos:line="381" pos:column="30"/></name></name> <operator pos:line="381" pos:column="31">=<pos:position pos:line="381" pos:column="32"/></operator> <name pos:line="381" pos:column="33">CHARACTER<pos:position pos:line="381" pos:column="42"/></name></expr>;<pos:position pos:line="381" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="382" pos:column="18"/></block></then>
	      <else pos:line="383" pos:column="15">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="384" pos:column="17">is_range_exp<pos:position pos:line="384" pos:column="29"/></name> <operator pos:line="384" pos:column="30">=<pos:position pos:line="384" pos:column="31"/></operator> <literal type="number" pos:line="384" pos:column="32">1<pos:position pos:line="384" pos:column="33"/></literal></expr>;<pos:position pos:line="384" pos:column="34"/></expr_stmt></block></else></if>
	    }<pos:position pos:line="385" pos:column="14"/></block></then></if>
	}<pos:position pos:line="386" pos:column="10"/></block></then></if>

      <if pos:line="388" pos:column="7">if <condition pos:line="388" pos:column="10">(<expr><name pos:line="388" pos:column="11">is_range_exp<pos:position pos:line="388" pos:column="23"/></name> <operator pos:line="388" pos:column="24">==<pos:position pos:line="388" pos:column="26"/></operator> <literal type="number" pos:line="388" pos:column="27">1<pos:position pos:line="388" pos:column="28"/></literal></expr>)<pos:position pos:line="388" pos:column="29"/></condition><then pos:line="388" pos:column="29">
	<block pos:line="389" pos:column="9">{
	  <expr_stmt><expr><name><name pos:line="390" pos:column="11">end_elem<pos:position pos:line="390" pos:column="19"/></name><operator pos:line="390" pos:column="19">.<pos:position pos:line="390" pos:column="20"/></operator><name pos:line="390" pos:column="20">opr<pos:position pos:line="390" pos:column="23"/></name><operator pos:line="390" pos:column="23">.<pos:position pos:line="390" pos:column="24"/></operator><name pos:line="390" pos:column="24">name<pos:position pos:line="390" pos:column="28"/></name></name> <operator pos:line="390" pos:column="29">=<pos:position pos:line="390" pos:column="30"/></operator> <name pos:line="390" pos:column="31">end_name_buf<pos:position pos:line="390" pos:column="43"/></name></expr>;<pos:position pos:line="390" pos:column="44"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="391" pos:column="11">ret<pos:position pos:line="391" pos:column="14"/></name> <operator pos:line="391" pos:column="15">=<pos:position pos:line="391" pos:column="16"/></operator> <call><name pos:line="391" pos:column="17">parse_bracket_element<pos:position pos:line="391" pos:column="38"/></name> <argument_list pos:line="391" pos:column="39">(<argument><expr><operator pos:line="391" pos:column="40">&amp;<pos:position pos:line="391" pos:column="45"/></operator><name pos:line="391" pos:column="41">end_elem<pos:position pos:line="391" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="391" pos:column="51">regexp<pos:position pos:line="391" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="391" pos:column="59">&amp;<pos:position pos:line="391" pos:column="64"/></operator><name pos:line="391" pos:column="60">token2<pos:position pos:line="391" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="391" pos:column="68">token_len2<pos:position pos:line="391" pos:column="78"/></name></expr></argument>,
				       <argument><expr><name pos:line="392" pos:column="40">dfa<pos:position pos:line="392" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="392" pos:column="45">syntax<pos:position pos:line="392" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="392" pos:column="53">1<pos:position pos:line="392" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="392" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="392" pos:column="56"/></expr_stmt>
	  <if pos:line="393" pos:column="11">if <condition pos:line="393" pos:column="14">(<expr><call><name pos:line="393" pos:column="15">BE<pos:position pos:line="393" pos:column="17"/></name> <argument_list pos:line="393" pos:column="18">(<argument><expr><name pos:line="393" pos:column="19">ret<pos:position pos:line="393" pos:column="22"/></name> <operator pos:line="393" pos:column="23">!=<pos:position pos:line="393" pos:column="25"/></operator> <name pos:line="393" pos:column="26">REG_NOERROR<pos:position pos:line="393" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="393" pos:column="39">0<pos:position pos:line="393" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="393" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="393" pos:column="42"/></condition><then pos:line="393" pos:column="42">
	    <block pos:line="394" pos:column="13">{
	      <expr_stmt><expr><operator pos:line="395" pos:column="15">*<pos:position pos:line="395" pos:column="16"/></operator><name pos:line="395" pos:column="16">err<pos:position pos:line="395" pos:column="19"/></name> <operator pos:line="395" pos:column="20">=<pos:position pos:line="395" pos:column="21"/></operator> <name pos:line="395" pos:column="22">ret<pos:position pos:line="395" pos:column="25"/></name></expr>;<pos:position pos:line="395" pos:column="26"/></expr_stmt>
	      <goto pos:line="396" pos:column="15">goto <name pos:line="396" pos:column="20">parse_bracket_exp_free_return<pos:position pos:line="396" pos:column="49"/></name>;<pos:position pos:line="396" pos:column="50"/></goto>
	    }<pos:position pos:line="397" pos:column="14"/></block></then></if>

	  <expr_stmt><expr><name pos:line="399" pos:column="11">token_len<pos:position pos:line="399" pos:column="20"/></name> <operator pos:line="399" pos:column="21">=<pos:position pos:line="399" pos:column="22"/></operator> <call><name pos:line="399" pos:column="23">peek_token_bracket<pos:position pos:line="399" pos:column="41"/></name> <argument_list pos:line="399" pos:column="42">(<argument><expr><name pos:line="399" pos:column="43">token<pos:position pos:line="399" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="399" pos:column="50">regexp<pos:position pos:line="399" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="399" pos:column="58">syntax<pos:position pos:line="399" pos:column="64"/></name></expr></argument>)<pos:position pos:line="399" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="399" pos:column="66"/></expr_stmt>

<cpp:ifdef pos:line="401" pos:column="1">#<cpp:directive pos:line="401" pos:column="2">ifdef<pos:position pos:line="401" pos:column="7"/></cpp:directive> <name pos:line="401" pos:column="8">_LIBC<pos:position pos:line="401" pos:column="13"/></name></cpp:ifdef>
	  <expr_stmt><expr><operator pos:line="402" pos:column="11">*<pos:position pos:line="402" pos:column="12"/></operator><name pos:line="402" pos:column="12">err<pos:position pos:line="402" pos:column="15"/></name> <operator pos:line="402" pos:column="16">=<pos:position pos:line="402" pos:column="17"/></operator> <call><name pos:line="402" pos:column="18">build_range_exp<pos:position pos:line="402" pos:column="33"/></name> <argument_list pos:line="402" pos:column="34">(<argument><expr><name pos:line="402" pos:column="35">sbcset<pos:position pos:line="402" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="402" pos:column="43">mbcset<pos:position pos:line="402" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="402" pos:column="51">&amp;<pos:position pos:line="402" pos:column="56"/></operator><name pos:line="402" pos:column="52">range_alloc<pos:position pos:line="402" pos:column="63"/></name></expr></argument>,
				  <argument><expr><operator pos:line="403" pos:column="35">&amp;<pos:position pos:line="403" pos:column="40"/></operator><name pos:line="403" pos:column="36">start_elem<pos:position pos:line="403" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="403" pos:column="48">&amp;<pos:position pos:line="403" pos:column="53"/></operator><name pos:line="403" pos:column="49">end_elem<pos:position pos:line="403" pos:column="57"/></name></expr></argument>)<pos:position pos:line="403" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="403" pos:column="59"/></expr_stmt>
<cpp:else pos:line="404" pos:column="1">#<cpp:directive pos:line="404" pos:column="2">else<pos:position pos:line="404" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="405" pos:column="1"># <cpp:directive pos:line="405" pos:column="3">ifdef<pos:position pos:line="405" pos:column="8"/></cpp:directive> <name pos:line="405" pos:column="9">RE_ENABLE_I18N<pos:position pos:line="405" pos:column="23"/></name></cpp:ifdef>
	  <expr_stmt><expr><operator pos:line="406" pos:column="11">*<pos:position pos:line="406" pos:column="12"/></operator><name pos:line="406" pos:column="12">err<pos:position pos:line="406" pos:column="15"/></name> <operator pos:line="406" pos:column="16">=<pos:position pos:line="406" pos:column="17"/></operator> <call><name pos:line="406" pos:column="18">build_range_exp<pos:position pos:line="406" pos:column="33"/></name> <argument_list pos:line="406" pos:column="34">(<argument><expr><name pos:line="406" pos:column="35">sbcset<pos:position pos:line="406" pos:column="41"/></name></expr></argument>,
				  <argument><expr><ternary><condition><expr><name><name pos:line="407" pos:column="35">dfa<pos:position pos:line="407" pos:column="38"/></name><operator pos:line="407" pos:column="38">-&gt;<pos:position pos:line="407" pos:column="43"/></operator><name pos:line="407" pos:column="40">mb_cur_max<pos:position pos:line="407" pos:column="50"/></name></name> <operator pos:line="407" pos:column="51">&gt;<pos:position pos:line="407" pos:column="55"/></operator> <literal type="number" pos:line="407" pos:column="53">1<pos:position pos:line="407" pos:column="54"/></literal></expr> ?<pos:position pos:line="407" pos:column="56"/></condition><then pos:line="407" pos:column="56"> <expr><name pos:line="407" pos:column="57">mbcset<pos:position pos:line="407" pos:column="63"/></name></expr> <pos:position pos:line="407" pos:column="64"/></then><else pos:line="407" pos:column="64">: <expr><name pos:line="407" pos:column="66">NULL<pos:position pos:line="407" pos:column="70"/></name></expr></else></ternary></expr></argument>,
				  <argument><expr><operator pos:line="408" pos:column="35">&amp;<pos:position pos:line="408" pos:column="40"/></operator><name pos:line="408" pos:column="36">range_alloc<pos:position pos:line="408" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="408" pos:column="49">&amp;<pos:position pos:line="408" pos:column="54"/></operator><name pos:line="408" pos:column="50">start_elem<pos:position pos:line="408" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="408" pos:column="62">&amp;<pos:position pos:line="408" pos:column="67"/></operator><name pos:line="408" pos:column="63">end_elem<pos:position pos:line="408" pos:column="71"/></name></expr></argument>)<pos:position pos:line="408" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="408" pos:column="73"/></expr_stmt>
<cpp:else pos:line="409" pos:column="1"># <cpp:directive pos:line="409" pos:column="3">else<pos:position pos:line="409" pos:column="7"/></cpp:directive></cpp:else>
	  <expr_stmt><expr><operator pos:line="410" pos:column="11">*<pos:position pos:line="410" pos:column="12"/></operator><name pos:line="410" pos:column="12">err<pos:position pos:line="410" pos:column="15"/></name> <operator pos:line="410" pos:column="16">=<pos:position pos:line="410" pos:column="17"/></operator> <call><name pos:line="410" pos:column="18">build_range_exp<pos:position pos:line="410" pos:column="33"/></name> <argument_list pos:line="410" pos:column="34">(<argument><expr><name pos:line="410" pos:column="35">sbcset<pos:position pos:line="410" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="410" pos:column="43">&amp;<pos:position pos:line="410" pos:column="48"/></operator><name pos:line="410" pos:column="44">start_elem<pos:position pos:line="410" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="410" pos:column="56">&amp;<pos:position pos:line="410" pos:column="61"/></operator><name pos:line="410" pos:column="57">end_elem<pos:position pos:line="410" pos:column="65"/></name></expr></argument>)<pos:position pos:line="410" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="410" pos:column="67"/></expr_stmt>
<cpp:endif pos:line="411" pos:column="1"># <cpp:directive pos:line="411" pos:column="3">endif<pos:position pos:line="411" pos:column="8"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="412" pos:column="1">#<cpp:directive pos:line="412" pos:column="2">endif<pos:position pos:line="412" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="412" pos:column="8">/* RE_ENABLE_I18N */</comment>
	  <if pos:line="413" pos:column="11">if <condition pos:line="413" pos:column="14">(<expr><call><name pos:line="413" pos:column="15">BE<pos:position pos:line="413" pos:column="17"/></name> <argument_list pos:line="413" pos:column="18">(<argument><expr><operator pos:line="413" pos:column="19">*<pos:position pos:line="413" pos:column="20"/></operator><name pos:line="413" pos:column="20">err<pos:position pos:line="413" pos:column="23"/></name> <operator pos:line="413" pos:column="24">!=<pos:position pos:line="413" pos:column="26"/></operator> <name pos:line="413" pos:column="27">REG_NOERROR<pos:position pos:line="413" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="413" pos:column="40">0<pos:position pos:line="413" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="413" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="413" pos:column="43"/></condition><then pos:line="413" pos:column="43">
	    <block type="pseudo"><goto pos:line="414" pos:column="13">goto <name pos:line="414" pos:column="18">parse_bracket_exp_free_return<pos:position pos:line="414" pos:column="47"/></name>;<pos:position pos:line="414" pos:column="48"/></goto></block></then></if>
	}<pos:position pos:line="415" pos:column="10"/></block></then>
      <else pos:line="416" pos:column="7">else
	<block pos:line="417" pos:column="9">{
	  <switch pos:line="418" pos:column="11">switch <condition pos:line="418" pos:column="18">(<expr><name><name pos:line="418" pos:column="19">start_elem<pos:position pos:line="418" pos:column="29"/></name><operator pos:line="418" pos:column="29">.<pos:position pos:line="418" pos:column="30"/></operator><name pos:line="418" pos:column="30">type<pos:position pos:line="418" pos:column="34"/></name></name></expr>)<pos:position pos:line="418" pos:column="35"/></condition>
	    <block pos:line="419" pos:column="13">{
	    <case pos:line="420" pos:column="13">case <expr><name pos:line="420" pos:column="18">SB_CHAR<pos:position pos:line="420" pos:column="25"/></name></expr>:<pos:position pos:line="420" pos:column="26"/></case>
	      <expr_stmt><expr><call><name pos:line="421" pos:column="15">bitset_set<pos:position pos:line="421" pos:column="25"/></name> <argument_list pos:line="421" pos:column="26">(<argument><expr><name pos:line="421" pos:column="27">sbcset<pos:position pos:line="421" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="421" pos:column="35">start_elem<pos:position pos:line="421" pos:column="45"/></name><operator pos:line="421" pos:column="45">.<pos:position pos:line="421" pos:column="46"/></operator><name pos:line="421" pos:column="46">opr<pos:position pos:line="421" pos:column="49"/></name><operator pos:line="421" pos:column="49">.<pos:position pos:line="421" pos:column="50"/></operator><name pos:line="421" pos:column="50">ch<pos:position pos:line="421" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="421" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="421" pos:column="54"/></expr_stmt>
	      <break pos:line="422" pos:column="15">break;<pos:position pos:line="422" pos:column="21"/></break>
<cpp:ifdef pos:line="423" pos:column="1">#<cpp:directive pos:line="423" pos:column="2">ifdef<pos:position pos:line="423" pos:column="7"/></cpp:directive> <name pos:line="423" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="423" pos:column="22"/></name></cpp:ifdef>
	    <case pos:line="424" pos:column="13">case <expr><name pos:line="424" pos:column="18">MB_CHAR<pos:position pos:line="424" pos:column="25"/></name></expr>:<pos:position pos:line="424" pos:column="26"/></case>
	      <comment type="block" pos:line="425" pos:column="15">/* Check whether the array has enough space.  */</comment>
	      <if pos:line="426" pos:column="15">if <condition pos:line="426" pos:column="18">(<expr><call><name pos:line="426" pos:column="19">BE<pos:position pos:line="426" pos:column="21"/></name> <argument_list pos:line="426" pos:column="22">(<argument><expr><name pos:line="426" pos:column="23">mbchar_alloc<pos:position pos:line="426" pos:column="35"/></name> <operator pos:line="426" pos:column="36">==<pos:position pos:line="426" pos:column="38"/></operator> <name><name pos:line="426" pos:column="39">mbcset<pos:position pos:line="426" pos:column="45"/></name><operator pos:line="426" pos:column="45">-&gt;<pos:position pos:line="426" pos:column="50"/></operator><name pos:line="426" pos:column="47">nmbchars<pos:position pos:line="426" pos:column="55"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="426" pos:column="57">0<pos:position pos:line="426" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="426" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="426" pos:column="60"/></condition><then pos:line="426" pos:column="60">
		<block pos:line="427" pos:column="17">{
		  <decl_stmt><decl><type><name pos:line="428" pos:column="19">wchar_t<pos:position pos:line="428" pos:column="26"/></name> <modifier pos:line="428" pos:column="27">*<pos:position pos:line="428" pos:column="28"/></modifier></type><name pos:line="428" pos:column="28">new_mbchars<pos:position pos:line="428" pos:column="39"/></name></decl>;<pos:position pos:line="428" pos:column="40"/></decl_stmt>
		  <comment type="block" pos:line="429" pos:column="19">/* Not enough, realloc it.  */</comment>
		  <comment type="block" pos:line="430" pos:column="19">/* +1 in case of mbcset-&gt;nmbchars is 0.  */</comment>
		  <expr_stmt><expr><name pos:line="431" pos:column="19">mbchar_alloc<pos:position pos:line="431" pos:column="31"/></name> <operator pos:line="431" pos:column="32">=<pos:position pos:line="431" pos:column="33"/></operator> <literal type="number" pos:line="431" pos:column="34">2<pos:position pos:line="431" pos:column="35"/></literal> <operator pos:line="431" pos:column="36">*<pos:position pos:line="431" pos:column="37"/></operator> <name><name pos:line="431" pos:column="38">mbcset<pos:position pos:line="431" pos:column="44"/></name><operator pos:line="431" pos:column="44">-&gt;<pos:position pos:line="431" pos:column="49"/></operator><name pos:line="431" pos:column="46">nmbchars<pos:position pos:line="431" pos:column="54"/></name></name> <operator pos:line="431" pos:column="55">+<pos:position pos:line="431" pos:column="56"/></operator> <literal type="number" pos:line="431" pos:column="57">1<pos:position pos:line="431" pos:column="58"/></literal></expr>;<pos:position pos:line="431" pos:column="59"/></expr_stmt>
		  <comment type="block" pos:line="432" pos:column="19">/* Use realloc since array is NULL if *alloc == 0.  */</comment>
		  <expr_stmt><expr><name pos:line="433" pos:column="19">new_mbchars<pos:position pos:line="433" pos:column="30"/></name> <operator pos:line="433" pos:column="31">=<pos:position pos:line="433" pos:column="32"/></operator> <call><name pos:line="433" pos:column="33">re_realloc<pos:position pos:line="433" pos:column="43"/></name> <argument_list pos:line="433" pos:column="44">(<argument><expr><name><name pos:line="433" pos:column="45">mbcset<pos:position pos:line="433" pos:column="51"/></name><operator pos:line="433" pos:column="51">-&gt;<pos:position pos:line="433" pos:column="56"/></operator><name pos:line="433" pos:column="53">mbchars<pos:position pos:line="433" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="433" pos:column="62">wchar_t<pos:position pos:line="433" pos:column="69"/></name></expr></argument>,
					    <argument><expr><name pos:line="434" pos:column="45">mbchar_alloc<pos:position pos:line="434" pos:column="57"/></name></expr></argument>)<pos:position pos:line="434" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="434" pos:column="59"/></expr_stmt>
		  <if pos:line="435" pos:column="19">if <condition pos:line="435" pos:column="22">(<expr><call><name pos:line="435" pos:column="23">BE<pos:position pos:line="435" pos:column="25"/></name> <argument_list pos:line="435" pos:column="26">(<argument><expr><name pos:line="435" pos:column="27">new_mbchars<pos:position pos:line="435" pos:column="38"/></name> <operator pos:line="435" pos:column="39">==<pos:position pos:line="435" pos:column="41"/></operator> <name pos:line="435" pos:column="42">NULL<pos:position pos:line="435" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="435" pos:column="48">0<pos:position pos:line="435" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="435" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="435" pos:column="51"/></condition><then pos:line="435" pos:column="51">
		    <block type="pseudo"><goto pos:line="436" pos:column="21">goto <name pos:line="436" pos:column="26">parse_bracket_exp_espace<pos:position pos:line="436" pos:column="50"/></name>;<pos:position pos:line="436" pos:column="51"/></goto></block></then></if>
		  <expr_stmt><expr><name><name pos:line="437" pos:column="19">mbcset<pos:position pos:line="437" pos:column="25"/></name><operator pos:line="437" pos:column="25">-&gt;<pos:position pos:line="437" pos:column="30"/></operator><name pos:line="437" pos:column="27">mbchars<pos:position pos:line="437" pos:column="34"/></name></name> <operator pos:line="437" pos:column="35">=<pos:position pos:line="437" pos:column="36"/></operator> <name pos:line="437" pos:column="37">new_mbchars<pos:position pos:line="437" pos:column="48"/></name></expr>;<pos:position pos:line="437" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="438" pos:column="18"/></block></then></if>
	      <expr_stmt><expr><name><name pos:line="439" pos:column="15">mbcset<pos:position pos:line="439" pos:column="21"/></name><operator pos:line="439" pos:column="21">-&gt;<pos:position pos:line="439" pos:column="26"/></operator><name pos:line="439" pos:column="23">mbchars<pos:position pos:line="439" pos:column="30"/></name><index pos:line="439" pos:column="30">[<expr><name><name pos:line="439" pos:column="31">mbcset<pos:position pos:line="439" pos:column="37"/></name><operator pos:line="439" pos:column="37">-&gt;<pos:position pos:line="439" pos:column="42"/></operator><name pos:line="439" pos:column="39">nmbchars<pos:position pos:line="439" pos:column="47"/></name></name><operator pos:line="439" pos:column="47">++<pos:position pos:line="439" pos:column="49"/></operator></expr>]<pos:position pos:line="439" pos:column="50"/></index></name> <operator pos:line="439" pos:column="51">=<pos:position pos:line="439" pos:column="52"/></operator> <name><name pos:line="439" pos:column="53">start_elem<pos:position pos:line="439" pos:column="63"/></name><operator pos:line="439" pos:column="63">.<pos:position pos:line="439" pos:column="64"/></operator><name pos:line="439" pos:column="64">opr<pos:position pos:line="439" pos:column="67"/></name><operator pos:line="439" pos:column="67">.<pos:position pos:line="439" pos:column="68"/></operator><name pos:line="439" pos:column="68">wch<pos:position pos:line="439" pos:column="71"/></name></name></expr>;<pos:position pos:line="439" pos:column="72"/></expr_stmt>
	      <break pos:line="440" pos:column="15">break;<pos:position pos:line="440" pos:column="21"/></break>
<cpp:endif pos:line="441" pos:column="1">#<cpp:directive pos:line="441" pos:column="2">endif<pos:position pos:line="441" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="441" pos:column="8">/* RE_ENABLE_I18N */</comment>
	    <case pos:line="442" pos:column="13">case <expr><name pos:line="442" pos:column="18">EQUIV_CLASS<pos:position pos:line="442" pos:column="29"/></name></expr>:<pos:position pos:line="442" pos:column="30"/></case>
	      <expr_stmt><expr><operator pos:line="443" pos:column="15">*<pos:position pos:line="443" pos:column="16"/></operator><name pos:line="443" pos:column="16">err<pos:position pos:line="443" pos:column="19"/></name> <operator pos:line="443" pos:column="20">=<pos:position pos:line="443" pos:column="21"/></operator> <call><name pos:line="443" pos:column="22">build_equiv_class<pos:position pos:line="443" pos:column="39"/></name> <argument_list pos:line="443" pos:column="40">(<argument><expr><name pos:line="443" pos:column="41">sbcset<pos:position pos:line="443" pos:column="47"/></name></expr></argument>,
<cpp:ifdef pos:line="444" pos:column="1">#<cpp:directive pos:line="444" pos:column="2">ifdef<pos:position pos:line="444" pos:column="7"/></cpp:directive> <name pos:line="444" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="444" pos:column="22"/></name></cpp:ifdef>
					<argument><expr><name pos:line="445" pos:column="41">mbcset<pos:position pos:line="445" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="445" pos:column="49">&amp;<pos:position pos:line="445" pos:column="54"/></operator><name pos:line="445" pos:column="50">equiv_class_alloc<pos:position pos:line="445" pos:column="67"/></name></expr></argument>,
<cpp:endif pos:line="446" pos:column="1">#<cpp:directive pos:line="446" pos:column="2">endif<pos:position pos:line="446" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="446" pos:column="8">/* RE_ENABLE_I18N */</comment>
					<argument><expr><name><name pos:line="447" pos:column="41">start_elem<pos:position pos:line="447" pos:column="51"/></name><operator pos:line="447" pos:column="51">.<pos:position pos:line="447" pos:column="52"/></operator><name pos:line="447" pos:column="52">opr<pos:position pos:line="447" pos:column="55"/></name><operator pos:line="447" pos:column="55">.<pos:position pos:line="447" pos:column="56"/></operator><name pos:line="447" pos:column="56">name<pos:position pos:line="447" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="447" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="447" pos:column="62"/></expr_stmt>
	      <if pos:line="448" pos:column="15">if <condition pos:line="448" pos:column="18">(<expr><call><name pos:line="448" pos:column="19">BE<pos:position pos:line="448" pos:column="21"/></name> <argument_list pos:line="448" pos:column="22">(<argument><expr><operator pos:line="448" pos:column="23">*<pos:position pos:line="448" pos:column="24"/></operator><name pos:line="448" pos:column="24">err<pos:position pos:line="448" pos:column="27"/></name> <operator pos:line="448" pos:column="28">!=<pos:position pos:line="448" pos:column="30"/></operator> <name pos:line="448" pos:column="31">REG_NOERROR<pos:position pos:line="448" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="448" pos:column="44">0<pos:position pos:line="448" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="448" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="448" pos:column="47"/></condition><then pos:line="448" pos:column="47">
		<block type="pseudo"><goto pos:line="449" pos:column="17">goto <name pos:line="449" pos:column="22">parse_bracket_exp_free_return<pos:position pos:line="449" pos:column="51"/></name>;<pos:position pos:line="449" pos:column="52"/></goto></block></then></if>
	      <break pos:line="450" pos:column="15">break;<pos:position pos:line="450" pos:column="21"/></break>
	    <case pos:line="451" pos:column="13">case <expr><name pos:line="451" pos:column="18">COLL_SYM<pos:position pos:line="451" pos:column="26"/></name></expr>:<pos:position pos:line="451" pos:column="27"/></case>
	      <expr_stmt><expr><operator pos:line="452" pos:column="15">*<pos:position pos:line="452" pos:column="16"/></operator><name pos:line="452" pos:column="16">err<pos:position pos:line="452" pos:column="19"/></name> <operator pos:line="452" pos:column="20">=<pos:position pos:line="452" pos:column="21"/></operator> <call><name pos:line="452" pos:column="22">build_collating_symbol<pos:position pos:line="452" pos:column="44"/></name> <argument_list pos:line="452" pos:column="45">(<argument><expr><name pos:line="452" pos:column="46">sbcset<pos:position pos:line="452" pos:column="52"/></name></expr></argument>,
<cpp:ifdef pos:line="453" pos:column="1">#<cpp:directive pos:line="453" pos:column="2">ifdef<pos:position pos:line="453" pos:column="7"/></cpp:directive> <name pos:line="453" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="453" pos:column="22"/></name></cpp:ifdef>
					     <argument><expr><name pos:line="454" pos:column="46">mbcset<pos:position pos:line="454" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="454" pos:column="54">&amp;<pos:position pos:line="454" pos:column="59"/></operator><name pos:line="454" pos:column="55">coll_sym_alloc<pos:position pos:line="454" pos:column="69"/></name></expr></argument>,
<cpp:endif pos:line="455" pos:column="1">#<cpp:directive pos:line="455" pos:column="2">endif<pos:position pos:line="455" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="455" pos:column="8">/* RE_ENABLE_I18N */</comment>
					     <argument><expr><name><name pos:line="456" pos:column="46">start_elem<pos:position pos:line="456" pos:column="56"/></name><operator pos:line="456" pos:column="56">.<pos:position pos:line="456" pos:column="57"/></operator><name pos:line="456" pos:column="57">opr<pos:position pos:line="456" pos:column="60"/></name><operator pos:line="456" pos:column="60">.<pos:position pos:line="456" pos:column="61"/></operator><name pos:line="456" pos:column="61">name<pos:position pos:line="456" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="456" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="456" pos:column="67"/></expr_stmt>
	      <if pos:line="457" pos:column="15">if <condition pos:line="457" pos:column="18">(<expr><call><name pos:line="457" pos:column="19">BE<pos:position pos:line="457" pos:column="21"/></name> <argument_list pos:line="457" pos:column="22">(<argument><expr><operator pos:line="457" pos:column="23">*<pos:position pos:line="457" pos:column="24"/></operator><name pos:line="457" pos:column="24">err<pos:position pos:line="457" pos:column="27"/></name> <operator pos:line="457" pos:column="28">!=<pos:position pos:line="457" pos:column="30"/></operator> <name pos:line="457" pos:column="31">REG_NOERROR<pos:position pos:line="457" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="457" pos:column="44">0<pos:position pos:line="457" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="457" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="457" pos:column="47"/></condition><then pos:line="457" pos:column="47">
		<block type="pseudo"><goto pos:line="458" pos:column="17">goto <name pos:line="458" pos:column="22">parse_bracket_exp_free_return<pos:position pos:line="458" pos:column="51"/></name>;<pos:position pos:line="458" pos:column="52"/></goto></block></then></if>
	      <break pos:line="459" pos:column="15">break;<pos:position pos:line="459" pos:column="21"/></break>
	    <case pos:line="460" pos:column="13">case <expr><name pos:line="460" pos:column="18">CHAR_CLASS<pos:position pos:line="460" pos:column="28"/></name></expr>:<pos:position pos:line="460" pos:column="29"/></case>
	      <expr_stmt><expr><operator pos:line="461" pos:column="15">*<pos:position pos:line="461" pos:column="16"/></operator><name pos:line="461" pos:column="16">err<pos:position pos:line="461" pos:column="19"/></name> <operator pos:line="461" pos:column="20">=<pos:position pos:line="461" pos:column="21"/></operator> <call><name pos:line="461" pos:column="22">build_charclass<pos:position pos:line="461" pos:column="37"/></name> <argument_list pos:line="461" pos:column="38">(<argument><expr><name><name pos:line="461" pos:column="39">regexp<pos:position pos:line="461" pos:column="45"/></name><operator pos:line="461" pos:column="45">-&gt;<pos:position pos:line="461" pos:column="50"/></operator><name pos:line="461" pos:column="47">trans<pos:position pos:line="461" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="461" pos:column="54">sbcset<pos:position pos:line="461" pos:column="60"/></name></expr></argument>,
<cpp:ifdef pos:line="462" pos:column="1">#<cpp:directive pos:line="462" pos:column="2">ifdef<pos:position pos:line="462" pos:column="7"/></cpp:directive> <name pos:line="462" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="462" pos:column="22"/></name></cpp:ifdef>
				      <argument><expr><name pos:line="463" pos:column="39">mbcset<pos:position pos:line="463" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="463" pos:column="47">&amp;<pos:position pos:line="463" pos:column="52"/></operator><name pos:line="463" pos:column="48">char_class_alloc<pos:position pos:line="463" pos:column="64"/></name></expr></argument>,
<cpp:endif pos:line="464" pos:column="1">#<cpp:directive pos:line="464" pos:column="2">endif<pos:position pos:line="464" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="464" pos:column="8">/* RE_ENABLE_I18N */</comment>
				      <argument><expr><operator pos:line="465" pos:column="39">(<pos:position pos:line="465" pos:column="40"/></operator><specifier pos:line="465" pos:column="40">const<pos:position pos:line="465" pos:column="45"/></specifier> <name pos:line="465" pos:column="46">char<pos:position pos:line="465" pos:column="50"/></name> <operator pos:line="465" pos:column="51">*<pos:position pos:line="465" pos:column="52"/></operator><operator pos:line="465" pos:column="52">)<pos:position pos:line="465" pos:column="53"/></operator> <name><name pos:line="465" pos:column="54">start_elem<pos:position pos:line="465" pos:column="64"/></name><operator pos:line="465" pos:column="64">.<pos:position pos:line="465" pos:column="65"/></operator><name pos:line="465" pos:column="65">opr<pos:position pos:line="465" pos:column="68"/></name><operator pos:line="465" pos:column="68">.<pos:position pos:line="465" pos:column="69"/></operator><name pos:line="465" pos:column="69">name<pos:position pos:line="465" pos:column="73"/></name></name></expr></argument>, <argument><expr><name pos:line="465" pos:column="75">syntax<pos:position pos:line="465" pos:column="81"/></name></expr></argument>)<pos:position pos:line="465" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="465" pos:column="83"/></expr_stmt>
	      <if pos:line="466" pos:column="15">if <condition pos:line="466" pos:column="18">(<expr><call><name pos:line="466" pos:column="19">BE<pos:position pos:line="466" pos:column="21"/></name> <argument_list pos:line="466" pos:column="22">(<argument><expr><operator pos:line="466" pos:column="23">*<pos:position pos:line="466" pos:column="24"/></operator><name pos:line="466" pos:column="24">err<pos:position pos:line="466" pos:column="27"/></name> <operator pos:line="466" pos:column="28">!=<pos:position pos:line="466" pos:column="30"/></operator> <name pos:line="466" pos:column="31">REG_NOERROR<pos:position pos:line="466" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="466" pos:column="44">0<pos:position pos:line="466" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="466" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="466" pos:column="47"/></condition><then pos:line="466" pos:column="47">
	       <block type="pseudo"><goto pos:line="467" pos:column="16">goto <name pos:line="467" pos:column="21">parse_bracket_exp_free_return<pos:position pos:line="467" pos:column="50"/></name>;<pos:position pos:line="467" pos:column="51"/></goto></block></then></if>
	      <break pos:line="468" pos:column="15">break;<pos:position pos:line="468" pos:column="21"/></break>
	    <default pos:line="469" pos:column="13">default:<pos:position pos:line="469" pos:column="21"/></default>
	      <expr_stmt><expr><call><name pos:line="470" pos:column="15">assert<pos:position pos:line="470" pos:column="21"/></name> <argument_list pos:line="470" pos:column="22">(<argument><expr><literal type="number" pos:line="470" pos:column="23">0<pos:position pos:line="470" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="470" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="470" pos:column="26"/></expr_stmt>
	      <break pos:line="471" pos:column="15">break;<pos:position pos:line="471" pos:column="21"/></break>
	    }<pos:position pos:line="472" pos:column="14"/></block></switch>
	}<pos:position pos:line="473" pos:column="10"/></block></else></if>
      <if pos:line="474" pos:column="7">if <condition pos:line="474" pos:column="10">(<expr><call><name pos:line="474" pos:column="11">BE<pos:position pos:line="474" pos:column="13"/></name> <argument_list pos:line="474" pos:column="14">(<argument><expr><name><name pos:line="474" pos:column="15">token<pos:position pos:line="474" pos:column="20"/></name><operator pos:line="474" pos:column="20">-&gt;<pos:position pos:line="474" pos:column="25"/></operator><name pos:line="474" pos:column="22">type<pos:position pos:line="474" pos:column="26"/></name></name> <operator pos:line="474" pos:column="27">==<pos:position pos:line="474" pos:column="29"/></operator> <name pos:line="474" pos:column="30">END_OF_RE<pos:position pos:line="474" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="474" pos:column="41">0<pos:position pos:line="474" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="474" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="474" pos:column="44"/></condition><then pos:line="474" pos:column="44">
	<block pos:line="475" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="476" pos:column="11">*<pos:position pos:line="476" pos:column="12"/></operator><name pos:line="476" pos:column="12">err<pos:position pos:line="476" pos:column="15"/></name> <operator pos:line="476" pos:column="16">=<pos:position pos:line="476" pos:column="17"/></operator> <name pos:line="476" pos:column="18">REG_EBRACK<pos:position pos:line="476" pos:column="28"/></name></expr>;<pos:position pos:line="476" pos:column="29"/></expr_stmt>
	  <goto pos:line="477" pos:column="11">goto <name pos:line="477" pos:column="16">parse_bracket_exp_free_return<pos:position pos:line="477" pos:column="45"/></name>;<pos:position pos:line="477" pos:column="46"/></goto>
	}<pos:position pos:line="478" pos:column="10"/></block></then></if>
      <if pos:line="479" pos:column="7">if <condition pos:line="479" pos:column="10">(<expr><name><name pos:line="479" pos:column="11">token<pos:position pos:line="479" pos:column="16"/></name><operator pos:line="479" pos:column="16">-&gt;<pos:position pos:line="479" pos:column="21"/></operator><name pos:line="479" pos:column="18">type<pos:position pos:line="479" pos:column="22"/></name></name> <operator pos:line="479" pos:column="23">==<pos:position pos:line="479" pos:column="25"/></operator> <name pos:line="479" pos:column="26">OP_CLOSE_BRACKET<pos:position pos:line="479" pos:column="42"/></name></expr>)<pos:position pos:line="479" pos:column="43"/></condition><then pos:line="479" pos:column="43">
	<block type="pseudo"><break pos:line="480" pos:column="9">break;<pos:position pos:line="480" pos:column="15"/></break></block></then></if>
    }<pos:position pos:line="481" pos:column="6"/></block></while>

  <expr_stmt><expr><call><name pos:line="483" pos:column="3">re_string_skip_bytes<pos:position pos:line="483" pos:column="23"/></name> <argument_list pos:line="483" pos:column="24">(<argument><expr><name pos:line="483" pos:column="25">regexp<pos:position pos:line="483" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="483" pos:column="33">token_len<pos:position pos:line="483" pos:column="42"/></name></expr></argument>)<pos:position pos:line="483" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="483" pos:column="44"/></expr_stmt> <comment type="block" pos:line="483" pos:column="45">/* Skip a token.  */</comment>

  <comment type="block" pos:line="485" pos:column="3">/* If it is non-matching list.  */</comment>
  <if pos:line="486" pos:column="3">if <condition pos:line="486" pos:column="6">(<expr><name pos:line="486" pos:column="7">non_match<pos:position pos:line="486" pos:column="16"/></name></expr>)<pos:position pos:line="486" pos:column="17"/></condition><then pos:line="486" pos:column="17">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="487" pos:column="5">bitset_not<pos:position pos:line="487" pos:column="15"/></name> <argument_list pos:line="487" pos:column="16">(<argument><expr><name pos:line="487" pos:column="17">sbcset<pos:position pos:line="487" pos:column="23"/></name></expr></argument>)<pos:position pos:line="487" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="487" pos:column="25"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="489" pos:column="1">#<cpp:directive pos:line="489" pos:column="2">ifdef<pos:position pos:line="489" pos:column="7"/></cpp:directive> <name pos:line="489" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="489" pos:column="22"/></name></cpp:ifdef>
  <comment type="block" pos:line="490" pos:column="3">/* Ensure only single byte characters are set.  */</comment>
  <if pos:line="491" pos:column="3">if <condition pos:line="491" pos:column="6">(<expr><name><name pos:line="491" pos:column="7">dfa<pos:position pos:line="491" pos:column="10"/></name><operator pos:line="491" pos:column="10">-&gt;<pos:position pos:line="491" pos:column="15"/></operator><name pos:line="491" pos:column="12">mb_cur_max<pos:position pos:line="491" pos:column="22"/></name></name> <operator pos:line="491" pos:column="23">&gt;<pos:position pos:line="491" pos:column="27"/></operator> <literal type="number" pos:line="491" pos:column="25">1<pos:position pos:line="491" pos:column="26"/></literal></expr>)<pos:position pos:line="491" pos:column="27"/></condition><then pos:line="491" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="492" pos:column="5">bitset_mask<pos:position pos:line="492" pos:column="16"/></name> <argument_list pos:line="492" pos:column="17">(<argument><expr><name pos:line="492" pos:column="18">sbcset<pos:position pos:line="492" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="492" pos:column="26">dfa<pos:position pos:line="492" pos:column="29"/></name><operator pos:line="492" pos:column="29">-&gt;<pos:position pos:line="492" pos:column="34"/></operator><name pos:line="492" pos:column="31">sb_char<pos:position pos:line="492" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="492" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="492" pos:column="40"/></expr_stmt></block></then></if>

  <if pos:line="494" pos:column="3">if <condition pos:line="494" pos:column="6">(<expr><name><name pos:line="494" pos:column="7">mbcset<pos:position pos:line="494" pos:column="13"/></name><operator pos:line="494" pos:column="13">-&gt;<pos:position pos:line="494" pos:column="18"/></operator><name pos:line="494" pos:column="15">nmbchars<pos:position pos:line="494" pos:column="23"/></name></name> <operator pos:line="494" pos:column="24">||<pos:position pos:line="494" pos:column="26"/></operator> <name><name pos:line="494" pos:column="27">mbcset<pos:position pos:line="494" pos:column="33"/></name><operator pos:line="494" pos:column="33">-&gt;<pos:position pos:line="494" pos:column="38"/></operator><name pos:line="494" pos:column="35">ncoll_syms<pos:position pos:line="494" pos:column="45"/></name></name> <operator pos:line="494" pos:column="46">||<pos:position pos:line="494" pos:column="48"/></operator> <name><name pos:line="494" pos:column="49">mbcset<pos:position pos:line="494" pos:column="55"/></name><operator pos:line="494" pos:column="55">-&gt;<pos:position pos:line="494" pos:column="60"/></operator><name pos:line="494" pos:column="57">nequiv_classes<pos:position pos:line="494" pos:column="71"/></name></name>
      <operator pos:line="495" pos:column="7">||<pos:position pos:line="495" pos:column="9"/></operator> <name><name pos:line="495" pos:column="10">mbcset<pos:position pos:line="495" pos:column="16"/></name><operator pos:line="495" pos:column="16">-&gt;<pos:position pos:line="495" pos:column="21"/></operator><name pos:line="495" pos:column="18">nranges<pos:position pos:line="495" pos:column="25"/></name></name> <operator pos:line="495" pos:column="26">||<pos:position pos:line="495" pos:column="28"/></operator> <operator pos:line="495" pos:column="29">(<pos:position pos:line="495" pos:column="30"/></operator><name><name pos:line="495" pos:column="30">dfa<pos:position pos:line="495" pos:column="33"/></name><operator pos:line="495" pos:column="33">-&gt;<pos:position pos:line="495" pos:column="38"/></operator><name pos:line="495" pos:column="35">mb_cur_max<pos:position pos:line="495" pos:column="45"/></name></name> <operator pos:line="495" pos:column="46">&gt;<pos:position pos:line="495" pos:column="50"/></operator> <literal type="number" pos:line="495" pos:column="48">1<pos:position pos:line="495" pos:column="49"/></literal> <operator pos:line="495" pos:column="50">&amp;&amp;<pos:position pos:line="495" pos:column="60"/></operator> <operator pos:line="495" pos:column="53">(<pos:position pos:line="495" pos:column="54"/></operator><name><name pos:line="495" pos:column="54">mbcset<pos:position pos:line="495" pos:column="60"/></name><operator pos:line="495" pos:column="60">-&gt;<pos:position pos:line="495" pos:column="65"/></operator><name pos:line="495" pos:column="62">nchar_classes<pos:position pos:line="495" pos:column="75"/></name></name>
						     <operator pos:line="496" pos:column="54">||<pos:position pos:line="496" pos:column="56"/></operator> <name><name pos:line="496" pos:column="57">mbcset<pos:position pos:line="496" pos:column="63"/></name><operator pos:line="496" pos:column="63">-&gt;<pos:position pos:line="496" pos:column="68"/></operator><name pos:line="496" pos:column="65">non_match<pos:position pos:line="496" pos:column="74"/></name></name><operator pos:line="496" pos:column="74">)<pos:position pos:line="496" pos:column="75"/></operator><operator pos:line="496" pos:column="75">)<pos:position pos:line="496" pos:column="76"/></operator></expr>)<pos:position pos:line="496" pos:column="77"/></condition><then pos:line="496" pos:column="77">
    <block pos:line="497" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="498" pos:column="7">bin_tree_t<pos:position pos:line="498" pos:column="17"/></name> <modifier pos:line="498" pos:column="18">*<pos:position pos:line="498" pos:column="19"/></modifier></type><name pos:line="498" pos:column="19">mbc_tree<pos:position pos:line="498" pos:column="27"/></name></decl>;<pos:position pos:line="498" pos:column="28"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="499" pos:column="7">int<pos:position pos:line="499" pos:column="10"/></name></type> <name pos:line="499" pos:column="11">sbc_idx<pos:position pos:line="499" pos:column="18"/></name></decl>;<pos:position pos:line="499" pos:column="19"/></decl_stmt>
      <comment type="block" pos:line="500" pos:column="7">/* Build a tree for complex bracket.  */</comment>
      <expr_stmt><expr><name><name pos:line="501" pos:column="7">dfa<pos:position pos:line="501" pos:column="10"/></name><operator pos:line="501" pos:column="10">-&gt;<pos:position pos:line="501" pos:column="15"/></operator><name pos:line="501" pos:column="12">has_mb_node<pos:position pos:line="501" pos:column="23"/></name></name> <operator pos:line="501" pos:column="24">=<pos:position pos:line="501" pos:column="25"/></operator> <literal type="number" pos:line="501" pos:column="26">1<pos:position pos:line="501" pos:column="27"/></literal></expr>;<pos:position pos:line="501" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="502" pos:column="7">br_token<pos:position pos:line="502" pos:column="15"/></name><operator pos:line="502" pos:column="15">.<pos:position pos:line="502" pos:column="16"/></operator><name pos:line="502" pos:column="16">type<pos:position pos:line="502" pos:column="20"/></name></name> <operator pos:line="502" pos:column="21">=<pos:position pos:line="502" pos:column="22"/></operator> <name pos:line="502" pos:column="23">COMPLEX_BRACKET<pos:position pos:line="502" pos:column="38"/></name></expr>;<pos:position pos:line="502" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="503" pos:column="7">br_token<pos:position pos:line="503" pos:column="15"/></name><operator pos:line="503" pos:column="15">.<pos:position pos:line="503" pos:column="16"/></operator><name pos:line="503" pos:column="16">opr<pos:position pos:line="503" pos:column="19"/></name><operator pos:line="503" pos:column="19">.<pos:position pos:line="503" pos:column="20"/></operator><name pos:line="503" pos:column="20">mbcset<pos:position pos:line="503" pos:column="26"/></name></name> <operator pos:line="503" pos:column="27">=<pos:position pos:line="503" pos:column="28"/></operator> <name pos:line="503" pos:column="29">mbcset<pos:position pos:line="503" pos:column="35"/></name></expr>;<pos:position pos:line="503" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name pos:line="504" pos:column="7">mbc_tree<pos:position pos:line="504" pos:column="15"/></name> <operator pos:line="504" pos:column="16">=<pos:position pos:line="504" pos:column="17"/></operator> <call><name pos:line="504" pos:column="18">create_token_tree<pos:position pos:line="504" pos:column="35"/></name> <argument_list pos:line="504" pos:column="36">(<argument><expr><name pos:line="504" pos:column="37">dfa<pos:position pos:line="504" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="504" pos:column="42">NULL<pos:position pos:line="504" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="504" pos:column="48">NULL<pos:position pos:line="504" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="504" pos:column="54">&amp;<pos:position pos:line="504" pos:column="59"/></operator><name pos:line="504" pos:column="55">br_token<pos:position pos:line="504" pos:column="63"/></name></expr></argument>)<pos:position pos:line="504" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="504" pos:column="65"/></expr_stmt>
      <if pos:line="505" pos:column="7">if <condition pos:line="505" pos:column="10">(<expr><call><name pos:line="505" pos:column="11">BE<pos:position pos:line="505" pos:column="13"/></name> <argument_list pos:line="505" pos:column="14">(<argument><expr><name pos:line="505" pos:column="15">mbc_tree<pos:position pos:line="505" pos:column="23"/></name> <operator pos:line="505" pos:column="24">==<pos:position pos:line="505" pos:column="26"/></operator> <name pos:line="505" pos:column="27">NULL<pos:position pos:line="505" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="505" pos:column="33">0<pos:position pos:line="505" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="505" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="505" pos:column="36"/></condition><then pos:line="505" pos:column="36">
	<block type="pseudo"><goto pos:line="506" pos:column="9">goto <name pos:line="506" pos:column="14">parse_bracket_exp_espace<pos:position pos:line="506" pos:column="38"/></name>;<pos:position pos:line="506" pos:column="39"/></goto></block></then></if>
      <for pos:line="507" pos:column="7">for <control pos:line="507" pos:column="11">(<init><expr><name pos:line="507" pos:column="12">sbc_idx<pos:position pos:line="507" pos:column="19"/></name> <operator pos:line="507" pos:column="20">=<pos:position pos:line="507" pos:column="21"/></operator> <literal type="number" pos:line="507" pos:column="22">0<pos:position pos:line="507" pos:column="23"/></literal></expr>;<pos:position pos:line="507" pos:column="24"/></init> <condition><expr><name pos:line="507" pos:column="25">sbc_idx<pos:position pos:line="507" pos:column="32"/></name> <operator pos:line="507" pos:column="33">&lt;<pos:position pos:line="507" pos:column="37"/></operator> <name pos:line="507" pos:column="35">BITSET_WORDS<pos:position pos:line="507" pos:column="47"/></name></expr>;<pos:position pos:line="507" pos:column="48"/></condition> <incr><expr><operator pos:line="507" pos:column="49">++<pos:position pos:line="507" pos:column="51"/></operator><name pos:line="507" pos:column="51">sbc_idx<pos:position pos:line="507" pos:column="58"/></name></expr></incr>)<pos:position pos:line="507" pos:column="59"/></control>
	<block type="pseudo"><if pos:line="508" pos:column="9">if <condition pos:line="508" pos:column="12">(<expr><name><name pos:line="508" pos:column="13">sbcset<pos:position pos:line="508" pos:column="19"/></name><index pos:line="508" pos:column="19">[<expr><name pos:line="508" pos:column="20">sbc_idx<pos:position pos:line="508" pos:column="27"/></name></expr>]<pos:position pos:line="508" pos:column="28"/></index></name></expr>)<pos:position pos:line="508" pos:column="29"/></condition><then pos:line="508" pos:column="29">
	  <block type="pseudo"><break pos:line="509" pos:column="11">break;<pos:position pos:line="509" pos:column="17"/></break></block></then></if></block></for>
      <comment type="block" pos:line="510" pos:column="7">/* If there are no bits set in sbcset, there is no point
	 of having both SIMPLE_BRACKET and COMPLEX_BRACKET.  */</comment>
      <if pos:line="512" pos:column="7">if <condition pos:line="512" pos:column="10">(<expr><name pos:line="512" pos:column="11">sbc_idx<pos:position pos:line="512" pos:column="18"/></name> <operator pos:line="512" pos:column="19">&lt;<pos:position pos:line="512" pos:column="23"/></operator> <name pos:line="512" pos:column="21">BITSET_WORDS<pos:position pos:line="512" pos:column="33"/></name></expr>)<pos:position pos:line="512" pos:column="34"/></condition><then pos:line="512" pos:column="34">
	<block pos:line="513" pos:column="9">{
	  <comment type="block" pos:line="514" pos:column="11">/* Build a tree for simple bracket.  */</comment>
	  <expr_stmt><expr><name><name pos:line="515" pos:column="11">br_token<pos:position pos:line="515" pos:column="19"/></name><operator pos:line="515" pos:column="19">.<pos:position pos:line="515" pos:column="20"/></operator><name pos:line="515" pos:column="20">type<pos:position pos:line="515" pos:column="24"/></name></name> <operator pos:line="515" pos:column="25">=<pos:position pos:line="515" pos:column="26"/></operator> <name pos:line="515" pos:column="27">SIMPLE_BRACKET<pos:position pos:line="515" pos:column="41"/></name></expr>;<pos:position pos:line="515" pos:column="42"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="516" pos:column="11">br_token<pos:position pos:line="516" pos:column="19"/></name><operator pos:line="516" pos:column="19">.<pos:position pos:line="516" pos:column="20"/></operator><name pos:line="516" pos:column="20">opr<pos:position pos:line="516" pos:column="23"/></name><operator pos:line="516" pos:column="23">.<pos:position pos:line="516" pos:column="24"/></operator><name pos:line="516" pos:column="24">sbcset<pos:position pos:line="516" pos:column="30"/></name></name> <operator pos:line="516" pos:column="31">=<pos:position pos:line="516" pos:column="32"/></operator> <name pos:line="516" pos:column="33">sbcset<pos:position pos:line="516" pos:column="39"/></name></expr>;<pos:position pos:line="516" pos:column="40"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="517" pos:column="11">work_tree<pos:position pos:line="517" pos:column="20"/></name> <operator pos:line="517" pos:column="21">=<pos:position pos:line="517" pos:column="22"/></operator> <call><name pos:line="517" pos:column="23">create_token_tree<pos:position pos:line="517" pos:column="40"/></name> <argument_list pos:line="517" pos:column="41">(<argument><expr><name pos:line="517" pos:column="42">dfa<pos:position pos:line="517" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="517" pos:column="47">NULL<pos:position pos:line="517" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="517" pos:column="53">NULL<pos:position pos:line="517" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="517" pos:column="59">&amp;<pos:position pos:line="517" pos:column="64"/></operator><name pos:line="517" pos:column="60">br_token<pos:position pos:line="517" pos:column="68"/></name></expr></argument>)<pos:position pos:line="517" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="517" pos:column="70"/></expr_stmt>
	  <if pos:line="518" pos:column="11">if <condition pos:line="518" pos:column="14">(<expr><call><name pos:line="518" pos:column="15">BE<pos:position pos:line="518" pos:column="17"/></name> <argument_list pos:line="518" pos:column="18">(<argument><expr><name pos:line="518" pos:column="19">work_tree<pos:position pos:line="518" pos:column="28"/></name> <operator pos:line="518" pos:column="29">==<pos:position pos:line="518" pos:column="31"/></operator> <name pos:line="518" pos:column="32">NULL<pos:position pos:line="518" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="518" pos:column="38">0<pos:position pos:line="518" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="518" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="518" pos:column="41"/></condition><then pos:line="518" pos:column="41">
	    <block type="pseudo"><goto pos:line="519" pos:column="13">goto <name pos:line="519" pos:column="18">parse_bracket_exp_espace<pos:position pos:line="519" pos:column="42"/></name>;<pos:position pos:line="519" pos:column="43"/></goto></block></then></if>

	  <comment type="block" pos:line="521" pos:column="11">/* Then join them by ALT node.  */</comment>
	  <expr_stmt><expr><name pos:line="522" pos:column="11">work_tree<pos:position pos:line="522" pos:column="20"/></name> <operator pos:line="522" pos:column="21">=<pos:position pos:line="522" pos:column="22"/></operator> <call><name pos:line="522" pos:column="23">create_tree<pos:position pos:line="522" pos:column="34"/></name> <argument_list pos:line="522" pos:column="35">(<argument><expr><name pos:line="522" pos:column="36">dfa<pos:position pos:line="522" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="522" pos:column="41">work_tree<pos:position pos:line="522" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="522" pos:column="52">mbc_tree<pos:position pos:line="522" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="522" pos:column="62">OP_ALT<pos:position pos:line="522" pos:column="68"/></name></expr></argument>)<pos:position pos:line="522" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="522" pos:column="70"/></expr_stmt>
	  <if pos:line="523" pos:column="11">if <condition pos:line="523" pos:column="14">(<expr><call><name pos:line="523" pos:column="15">BE<pos:position pos:line="523" pos:column="17"/></name> <argument_list pos:line="523" pos:column="18">(<argument><expr><name pos:line="523" pos:column="19">work_tree<pos:position pos:line="523" pos:column="28"/></name> <operator pos:line="523" pos:column="29">==<pos:position pos:line="523" pos:column="31"/></operator> <name pos:line="523" pos:column="32">NULL<pos:position pos:line="523" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="523" pos:column="38">0<pos:position pos:line="523" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="523" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="523" pos:column="41"/></condition><then pos:line="523" pos:column="41">
	    <block type="pseudo"><goto pos:line="524" pos:column="13">goto <name pos:line="524" pos:column="18">parse_bracket_exp_espace<pos:position pos:line="524" pos:column="42"/></name>;<pos:position pos:line="524" pos:column="43"/></goto></block></then></if>
	}<pos:position pos:line="525" pos:column="10"/></block></then>
      <else pos:line="526" pos:column="7">else
	<block pos:line="527" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="528" pos:column="11">re_free<pos:position pos:line="528" pos:column="18"/></name> <argument_list pos:line="528" pos:column="19">(<argument><expr><name pos:line="528" pos:column="20">sbcset<pos:position pos:line="528" pos:column="26"/></name></expr></argument>)<pos:position pos:line="528" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="528" pos:column="28"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="529" pos:column="11">work_tree<pos:position pos:line="529" pos:column="20"/></name> <operator pos:line="529" pos:column="21">=<pos:position pos:line="529" pos:column="22"/></operator> <name pos:line="529" pos:column="23">mbc_tree<pos:position pos:line="529" pos:column="31"/></name></expr>;<pos:position pos:line="529" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="530" pos:column="10"/></block></else></if>
    }<pos:position pos:line="531" pos:column="6"/></block></then>
  <else pos:line="532" pos:column="3">else
<cpp:endif pos:line="533" pos:column="1">#<cpp:directive pos:line="533" pos:column="2">endif<pos:position pos:line="533" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="533" pos:column="8">/* not RE_ENABLE_I18N */</comment>
    <block pos:line="534" pos:column="5">{
<cpp:ifdef pos:line="535" pos:column="1">#<cpp:directive pos:line="535" pos:column="2">ifdef<pos:position pos:line="535" pos:column="7"/></cpp:directive> <name pos:line="535" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="535" pos:column="22"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="536" pos:column="7">free_charset<pos:position pos:line="536" pos:column="19"/></name> <argument_list pos:line="536" pos:column="20">(<argument><expr><name pos:line="536" pos:column="21">mbcset<pos:position pos:line="536" pos:column="27"/></name></expr></argument>)<pos:position pos:line="536" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="536" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="537" pos:column="1">#<cpp:directive pos:line="537" pos:column="2">endif<pos:position pos:line="537" pos:column="7"/></cpp:directive></cpp:endif>
      <comment type="block" pos:line="538" pos:column="7">/* Build a tree for simple bracket.  */</comment>
      <expr_stmt><expr><name><name pos:line="539" pos:column="7">br_token<pos:position pos:line="539" pos:column="15"/></name><operator pos:line="539" pos:column="15">.<pos:position pos:line="539" pos:column="16"/></operator><name pos:line="539" pos:column="16">type<pos:position pos:line="539" pos:column="20"/></name></name> <operator pos:line="539" pos:column="21">=<pos:position pos:line="539" pos:column="22"/></operator> <name pos:line="539" pos:column="23">SIMPLE_BRACKET<pos:position pos:line="539" pos:column="37"/></name></expr>;<pos:position pos:line="539" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="540" pos:column="7">br_token<pos:position pos:line="540" pos:column="15"/></name><operator pos:line="540" pos:column="15">.<pos:position pos:line="540" pos:column="16"/></operator><name pos:line="540" pos:column="16">opr<pos:position pos:line="540" pos:column="19"/></name><operator pos:line="540" pos:column="19">.<pos:position pos:line="540" pos:column="20"/></operator><name pos:line="540" pos:column="20">sbcset<pos:position pos:line="540" pos:column="26"/></name></name> <operator pos:line="540" pos:column="27">=<pos:position pos:line="540" pos:column="28"/></operator> <name pos:line="540" pos:column="29">sbcset<pos:position pos:line="540" pos:column="35"/></name></expr>;<pos:position pos:line="540" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name pos:line="541" pos:column="7">work_tree<pos:position pos:line="541" pos:column="16"/></name> <operator pos:line="541" pos:column="17">=<pos:position pos:line="541" pos:column="18"/></operator> <call><name pos:line="541" pos:column="19">create_token_tree<pos:position pos:line="541" pos:column="36"/></name> <argument_list pos:line="541" pos:column="37">(<argument><expr><name pos:line="541" pos:column="38">dfa<pos:position pos:line="541" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="541" pos:column="43">NULL<pos:position pos:line="541" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="541" pos:column="49">NULL<pos:position pos:line="541" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="541" pos:column="55">&amp;<pos:position pos:line="541" pos:column="60"/></operator><name pos:line="541" pos:column="56">br_token<pos:position pos:line="541" pos:column="64"/></name></expr></argument>)<pos:position pos:line="541" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="541" pos:column="66"/></expr_stmt>
      <if pos:line="542" pos:column="7">if <condition pos:line="542" pos:column="10">(<expr><call><name pos:line="542" pos:column="11">BE<pos:position pos:line="542" pos:column="13"/></name> <argument_list pos:line="542" pos:column="14">(<argument><expr><name pos:line="542" pos:column="15">work_tree<pos:position pos:line="542" pos:column="24"/></name> <operator pos:line="542" pos:column="25">==<pos:position pos:line="542" pos:column="27"/></operator> <name pos:line="542" pos:column="28">NULL<pos:position pos:line="542" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="542" pos:column="34">0<pos:position pos:line="542" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="542" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="542" pos:column="37"/></condition><then pos:line="542" pos:column="37">
	<block type="pseudo"><goto pos:line="543" pos:column="9">goto <name pos:line="543" pos:column="14">parse_bracket_exp_espace<pos:position pos:line="543" pos:column="38"/></name>;<pos:position pos:line="543" pos:column="39"/></goto></block></then></if>
    }<pos:position pos:line="544" pos:column="6"/></block></else></if>
  <return pos:line="545" pos:column="3">return <expr><name pos:line="545" pos:column="10">work_tree<pos:position pos:line="545" pos:column="19"/></name></expr>;<pos:position pos:line="545" pos:column="20"/></return>

 <label><name pos:line="547" pos:column="2">parse_bracket_exp_espace<pos:position pos:line="547" pos:column="26"/></name>:<pos:position pos:line="547" pos:column="27"/></label>
  <expr_stmt><expr><operator pos:line="548" pos:column="3">*<pos:position pos:line="548" pos:column="4"/></operator><name pos:line="548" pos:column="4">err<pos:position pos:line="548" pos:column="7"/></name> <operator pos:line="548" pos:column="8">=<pos:position pos:line="548" pos:column="9"/></operator> <name pos:line="548" pos:column="10">REG_ESPACE<pos:position pos:line="548" pos:column="20"/></name></expr>;<pos:position pos:line="548" pos:column="21"/></expr_stmt>
 <label><name pos:line="549" pos:column="2">parse_bracket_exp_free_return<pos:position pos:line="549" pos:column="31"/></name>:<pos:position pos:line="549" pos:column="32"/></label>
  <expr_stmt><expr><call><name pos:line="550" pos:column="3">re_free<pos:position pos:line="550" pos:column="10"/></name> <argument_list pos:line="550" pos:column="11">(<argument><expr><name pos:line="550" pos:column="12">sbcset<pos:position pos:line="550" pos:column="18"/></name></expr></argument>)<pos:position pos:line="550" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="550" pos:column="20"/></expr_stmt>
<cpp:ifdef pos:line="551" pos:column="1">#<cpp:directive pos:line="551" pos:column="2">ifdef<pos:position pos:line="551" pos:column="7"/></cpp:directive> <name pos:line="551" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="551" pos:column="22"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="552" pos:column="3">free_charset<pos:position pos:line="552" pos:column="15"/></name> <argument_list pos:line="552" pos:column="16">(<argument><expr><name pos:line="552" pos:column="17">mbcset<pos:position pos:line="552" pos:column="23"/></name></expr></argument>)<pos:position pos:line="552" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="552" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="553" pos:column="1">#<cpp:directive pos:line="553" pos:column="2">endif<pos:position pos:line="553" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="553" pos:column="8">/* RE_ENABLE_I18N */</comment>
  <return pos:line="554" pos:column="3">return <expr><name pos:line="554" pos:column="10">NULL<pos:position pos:line="554" pos:column="14"/></name></expr>;<pos:position pos:line="554" pos:column="15"/></return>
}<pos:position pos:line="555" pos:column="2"/></block></function></unit>
