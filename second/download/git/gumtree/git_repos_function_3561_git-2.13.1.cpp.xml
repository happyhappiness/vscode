<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3561_git-2.13.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">service_loop<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">socketlist<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">socklist<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">pollfd<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">pfd<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">pfd<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">=<pos:position pos:line="6" pos:column="14"/></operator> <call><name pos:line="6" pos:column="15">xcalloc<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><name><name pos:line="6" pos:column="23">socklist<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">-&gt;<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="33">nr<pos:position pos:line="6" pos:column="35"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="37">sizeof<argument_list pos:line="6" pos:column="43">(<argument><expr pos:line="6" pos:column="44">struct <name pos:line="6" pos:column="51">pollfd<pos:position pos:line="6" pos:column="57"/></name></expr></argument>)<pos:position pos:line="6" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="60"/></expr_stmt>

	<for pos:line="8" pos:column="9">for <control pos:line="8" pos:column="13">(<init><expr><name pos:line="8" pos:column="14">i<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr>;<pos:position pos:line="8" pos:column="20"/></init> <condition><expr><name pos:line="8" pos:column="21">i<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">&lt;<pos:position pos:line="8" pos:column="27"/></operator> <name><name pos:line="8" pos:column="25">socklist<pos:position pos:line="8" pos:column="33"/></name><operator pos:line="8" pos:column="33">-&gt;<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="35">nr<pos:position pos:line="8" pos:column="37"/></name></name></expr>;<pos:position pos:line="8" pos:column="38"/></condition> <incr><expr><name pos:line="8" pos:column="39">i<pos:position pos:line="8" pos:column="40"/></name><operator pos:line="8" pos:column="40">++<pos:position pos:line="8" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="8" pos:column="43"/></control> <block pos:line="8" pos:column="44">{
		<expr_stmt><expr><name><name pos:line="9" pos:column="17">pfd<pos:position pos:line="9" pos:column="20"/></name><index pos:line="9" pos:column="20">[<expr><name pos:line="9" pos:column="21">i<pos:position pos:line="9" pos:column="22"/></name></expr>]<pos:position pos:line="9" pos:column="23"/></index></name><operator pos:line="9" pos:column="23">.<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="24">fd<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">=<pos:position pos:line="9" pos:column="28"/></operator> <name><name pos:line="9" pos:column="29">socklist<pos:position pos:line="9" pos:column="37"/></name><operator pos:line="9" pos:column="37">-&gt;<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="39">list<pos:position pos:line="9" pos:column="43"/></name><index pos:line="9" pos:column="43">[<expr><name pos:line="9" pos:column="44">i<pos:position pos:line="9" pos:column="45"/></name></expr>]<pos:position pos:line="9" pos:column="46"/></index></name></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="10" pos:column="17">pfd<pos:position pos:line="10" pos:column="20"/></name><index pos:line="10" pos:column="20">[<expr><name pos:line="10" pos:column="21">i<pos:position pos:line="10" pos:column="22"/></name></expr>]<pos:position pos:line="10" pos:column="23"/></index></name><operator pos:line="10" pos:column="23">.<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="24">events<pos:position pos:line="10" pos:column="30"/></name> <operator pos:line="10" pos:column="31">=<pos:position pos:line="10" pos:column="32"/></operator> <name pos:line="10" pos:column="33">POLLIN<pos:position pos:line="10" pos:column="39"/></name></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">signal<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><name pos:line="13" pos:column="16">SIGCHLD<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="25">child_handler<pos:position pos:line="13" pos:column="38"/></name></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>

	<for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">(<init pos:line="15" pos:column="14">;<pos:position pos:line="15" pos:column="15"/></init><condition pos:line="15" pos:column="15">;<pos:position pos:line="15" pos:column="16"/></condition><incr/>)<pos:position pos:line="15" pos:column="17"/></control> <block pos:line="15" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">int<pos:position pos:line="16" pos:column="20"/></name></type> <name pos:line="16" pos:column="21">i<pos:position pos:line="16" pos:column="22"/></name></decl>;<pos:position pos:line="16" pos:column="23"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="18" pos:column="17">check_dead_children<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">()<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name pos:line="20" pos:column="21">poll<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name pos:line="20" pos:column="26">pfd<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="31">socklist<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">-&gt;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="41">nr<pos:position pos:line="20" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="45">-<pos:position pos:line="20" pos:column="46"/></operator><literal type="number" pos:line="20" pos:column="46">1<pos:position pos:line="20" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call> <operator pos:line="20" pos:column="49">&lt;<pos:position pos:line="20" pos:column="53"/></operator> <literal type="number" pos:line="20" pos:column="51">0<pos:position pos:line="20" pos:column="52"/></literal></expr>)<pos:position pos:line="20" pos:column="53"/></condition><then pos:line="20" pos:column="53"> <block pos:line="20" pos:column="54">{
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><name pos:line="21" pos:column="29">errno<pos:position pos:line="21" pos:column="34"/></name> <operator pos:line="21" pos:column="35">!=<pos:position pos:line="21" pos:column="37"/></operator> <name pos:line="21" pos:column="38">EINTR<pos:position pos:line="21" pos:column="43"/></name></expr>)<pos:position pos:line="21" pos:column="44"/></condition><then pos:line="21" pos:column="44"> <block pos:line="21" pos:column="45">{
				<expr_stmt><expr><call><name pos:line="22" pos:column="33">logerror<pos:position pos:line="22" pos:column="41"/></name><argument_list pos:line="22" pos:column="41">(<argument><expr><literal type="string" pos:line="22" pos:column="42">"Poll failed, resuming: %s"<pos:position pos:line="22" pos:column="69"/></literal></expr></argument>,
				      <argument><expr><call><name pos:line="23" pos:column="39">strerror<pos:position pos:line="23" pos:column="47"/></name><argument_list pos:line="23" pos:column="47">(<argument><expr><name pos:line="23" pos:column="48">errno<pos:position pos:line="23" pos:column="53"/></name></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="56"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="24" pos:column="33">sleep<pos:position pos:line="24" pos:column="38"/></name><argument_list pos:line="24" pos:column="38">(<argument><expr><literal type="number" pos:line="24" pos:column="39">1<pos:position pos:line="24" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
			}<pos:position pos:line="25" pos:column="26"/></block></then></if>
			<continue pos:line="26" pos:column="25">continue;<pos:position pos:line="26" pos:column="34"/></continue>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>

		<for pos:line="29" pos:column="17">for <control pos:line="29" pos:column="21">(<init><expr><name pos:line="29" pos:column="22">i<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">=<pos:position pos:line="29" pos:column="25"/></operator> <literal type="number" pos:line="29" pos:column="26">0<pos:position pos:line="29" pos:column="27"/></literal></expr>;<pos:position pos:line="29" pos:column="28"/></init> <condition><expr><name pos:line="29" pos:column="29">i<pos:position pos:line="29" pos:column="30"/></name> <operator pos:line="29" pos:column="31">&lt;<pos:position pos:line="29" pos:column="35"/></operator> <name><name pos:line="29" pos:column="33">socklist<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">-&gt;<pos:position pos:line="29" pos:column="46"/></operator><name pos:line="29" pos:column="43">nr<pos:position pos:line="29" pos:column="45"/></name></name></expr>;<pos:position pos:line="29" pos:column="46"/></condition> <incr><expr><name pos:line="29" pos:column="47">i<pos:position pos:line="29" pos:column="48"/></name><operator pos:line="29" pos:column="48">++<pos:position pos:line="29" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="29" pos:column="51"/></control> <block pos:line="29" pos:column="52">{
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name><name pos:line="30" pos:column="29">pfd<pos:position pos:line="30" pos:column="32"/></name><index pos:line="30" pos:column="32">[<expr><name pos:line="30" pos:column="33">i<pos:position pos:line="30" pos:column="34"/></name></expr>]<pos:position pos:line="30" pos:column="35"/></index></name><operator pos:line="30" pos:column="35">.<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="36">revents<pos:position pos:line="30" pos:column="43"/></name> <operator pos:line="30" pos:column="44">&amp;<pos:position pos:line="30" pos:column="49"/></operator> <name pos:line="30" pos:column="46">POLLIN<pos:position pos:line="30" pos:column="52"/></name></expr>)<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53"> <block pos:line="30" pos:column="54">{
				<union pos:line="31" pos:column="33">union <block pos:line="31" pos:column="39">{<public type="default" pos:line="31" pos:column="40">
					<decl_stmt><decl><type><name><name pos:line="32" pos:column="41">struct<pos:position pos:line="32" pos:column="47"/></name> <name pos:line="32" pos:column="48">sockaddr<pos:position pos:line="32" pos:column="56"/></name></name></type> <name pos:line="32" pos:column="57">sa<pos:position pos:line="32" pos:column="59"/></name></decl>;<pos:position pos:line="32" pos:column="60"/></decl_stmt>
					<decl_stmt><decl><type><name><name pos:line="33" pos:column="41">struct<pos:position pos:line="33" pos:column="47"/></name> <name pos:line="33" pos:column="48">sockaddr_in<pos:position pos:line="33" pos:column="59"/></name></name></type> <name pos:line="33" pos:column="60">sai<pos:position pos:line="33" pos:column="63"/></name></decl>;<pos:position pos:line="33" pos:column="64"/></decl_stmt>
<cpp:ifndef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifndef<pos:position pos:line="34" pos:column="8"/></cpp:directive> <name pos:line="34" pos:column="9">NO_IPV6<pos:position pos:line="34" pos:column="16"/></name></cpp:ifndef>
					<decl_stmt><decl><type><name><name pos:line="35" pos:column="41">struct<pos:position pos:line="35" pos:column="47"/></name> <name pos:line="35" pos:column="48">sockaddr_in6<pos:position pos:line="35" pos:column="60"/></name></name></type> <name pos:line="35" pos:column="61">sai6<pos:position pos:line="35" pos:column="65"/></name></decl>;<pos:position pos:line="35" pos:column="66"/></decl_stmt>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>
				<pos:position pos:line="37" pos:column="5"/></public>}<pos:position pos:line="37" pos:column="34"/></block> <decl><name pos:line="37" pos:column="35">ss<pos:position pos:line="37" pos:column="37"/></name></decl>;<pos:position pos:line="37" pos:column="38"/></union>
				<decl_stmt><decl><type><name pos:line="38" pos:column="33">socklen_t<pos:position pos:line="38" pos:column="42"/></name></type> <name pos:line="38" pos:column="43">sslen<pos:position pos:line="38" pos:column="48"/></name> <init pos:line="38" pos:column="49">= <expr><sizeof pos:line="38" pos:column="51">sizeof<argument_list pos:line="38" pos:column="57">(<argument><expr><name pos:line="38" pos:column="58">ss<pos:position pos:line="38" pos:column="60"/></name></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="38" pos:column="62"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="39" pos:column="33">int<pos:position pos:line="39" pos:column="36"/></name></type> <name pos:line="39" pos:column="37">incoming<pos:position pos:line="39" pos:column="45"/></name> <init pos:line="39" pos:column="46">= <expr><call><name pos:line="39" pos:column="48">accept<pos:position pos:line="39" pos:column="54"/></name><argument_list pos:line="39" pos:column="54">(<argument><expr><name><name pos:line="39" pos:column="55">pfd<pos:position pos:line="39" pos:column="58"/></name><index pos:line="39" pos:column="58">[<expr><name pos:line="39" pos:column="59">i<pos:position pos:line="39" pos:column="60"/></name></expr>]<pos:position pos:line="39" pos:column="61"/></index></name><operator pos:line="39" pos:column="61">.<pos:position pos:line="39" pos:column="62"/></operator><name pos:line="39" pos:column="62">fd<pos:position pos:line="39" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="66">&amp;<pos:position pos:line="39" pos:column="71"/></operator><name><name pos:line="39" pos:column="67">ss<pos:position pos:line="39" pos:column="69"/></name><operator pos:line="39" pos:column="69">.<pos:position pos:line="39" pos:column="70"/></operator><name pos:line="39" pos:column="70">sa<pos:position pos:line="39" pos:column="72"/></name></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="74">&amp;<pos:position pos:line="39" pos:column="79"/></operator><name pos:line="39" pos:column="75">sslen<pos:position pos:line="39" pos:column="80"/></name></expr></argument>)<pos:position pos:line="39" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="82"/></decl_stmt>
				<if pos:line="40" pos:column="33">if <condition pos:line="40" pos:column="36">(<expr><name pos:line="40" pos:column="37">incoming<pos:position pos:line="40" pos:column="45"/></name> <operator pos:line="40" pos:column="46">&lt;<pos:position pos:line="40" pos:column="50"/></operator> <literal type="number" pos:line="40" pos:column="48">0<pos:position pos:line="40" pos:column="49"/></literal></expr>)<pos:position pos:line="40" pos:column="50"/></condition><then pos:line="40" pos:column="50"> <block pos:line="40" pos:column="51">{
					<switch pos:line="41" pos:column="41">switch <condition pos:line="41" pos:column="48">(<expr><name pos:line="41" pos:column="49">errno<pos:position pos:line="41" pos:column="54"/></name></expr>)<pos:position pos:line="41" pos:column="55"/></condition> <block pos:line="41" pos:column="56">{
					<case pos:line="42" pos:column="41">case <expr><name pos:line="42" pos:column="46">EAGAIN<pos:position pos:line="42" pos:column="52"/></name></expr>:<pos:position pos:line="42" pos:column="53"/></case>
					<case pos:line="43" pos:column="41">case <expr><name pos:line="43" pos:column="46">EINTR<pos:position pos:line="43" pos:column="51"/></name></expr>:<pos:position pos:line="43" pos:column="52"/></case>
					<case pos:line="44" pos:column="41">case <expr><name pos:line="44" pos:column="46">ECONNABORTED<pos:position pos:line="44" pos:column="58"/></name></expr>:<pos:position pos:line="44" pos:column="59"/></case>
						<continue pos:line="45" pos:column="49">continue;<pos:position pos:line="45" pos:column="58"/></continue>
					<default pos:line="46" pos:column="41">default:<pos:position pos:line="46" pos:column="49"/></default>
						<expr_stmt><expr><call><name pos:line="47" pos:column="49">die_errno<pos:position pos:line="47" pos:column="58"/></name><argument_list pos:line="47" pos:column="58">(<argument><expr><literal type="string" pos:line="47" pos:column="59">"accept returned"<pos:position pos:line="47" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="78"/></expr_stmt>
					}<pos:position pos:line="48" pos:column="42"/></block></switch>
				}<pos:position pos:line="49" pos:column="34"/></block></then></if>
				<expr_stmt><expr><call><name pos:line="50" pos:column="33">handle<pos:position pos:line="50" pos:column="39"/></name><argument_list pos:line="50" pos:column="39">(<argument><expr><name pos:line="50" pos:column="40">incoming<pos:position pos:line="50" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="50">&amp;<pos:position pos:line="50" pos:column="55"/></operator><name><name pos:line="50" pos:column="51">ss<pos:position pos:line="50" pos:column="53"/></name><operator pos:line="50" pos:column="53">.<pos:position pos:line="50" pos:column="54"/></operator><name pos:line="50" pos:column="54">sa<pos:position pos:line="50" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="58">sslen<pos:position pos:line="50" pos:column="63"/></name></expr></argument>)<pos:position pos:line="50" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="65"/></expr_stmt>
			}<pos:position pos:line="51" pos:column="26"/></block></then></if>
		}<pos:position pos:line="52" pos:column="18"/></block></for>
	}<pos:position pos:line="53" pos:column="10"/></block></for>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
