<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1150_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">git_wcwidth<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">ucs_char_t<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">ch<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * Sorted list of non-overlapping intervals of non-spacing characters,
	 */</comment>
<cpp:include pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">include<pos:position pos:line="6" pos:column="9"/></cpp:directive> <cpp:file pos:line="6" pos:column="10">"unicode_width.h"<pos:position pos:line="6" pos:column="27"/></cpp:file></cpp:include>

	<comment type="block" pos:line="8" pos:column="9">/* test for 8-bit control characters */</comment>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">ch<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">==<pos:position pos:line="9" pos:column="18"/></operator> <literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return></block></then></if>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">ch<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">&lt;<pos:position pos:line="11" pos:column="20"/></operator> <literal type="number" pos:line="11" pos:column="18">32<pos:position pos:line="11" pos:column="20"/></literal> <operator pos:line="11" pos:column="21">||<pos:position pos:line="11" pos:column="23"/></operator> <operator pos:line="11" pos:column="24">(<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="25">ch<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">&gt;=<pos:position pos:line="11" pos:column="33"/></operator> <literal type="number" pos:line="11" pos:column="31">0x7f<pos:position pos:line="11" pos:column="35"/></literal> <operator pos:line="11" pos:column="36">&amp;&amp;<pos:position pos:line="11" pos:column="46"/></operator> <name pos:line="11" pos:column="39">ch<pos:position pos:line="11" pos:column="41"/></name> <operator pos:line="11" pos:column="42">&lt;<pos:position pos:line="11" pos:column="46"/></operator> <literal type="number" pos:line="11" pos:column="44">0xa0<pos:position pos:line="11" pos:column="48"/></literal><operator pos:line="11" pos:column="48">)<pos:position pos:line="11" pos:column="49"/></operator></expr>)<pos:position pos:line="11" pos:column="50"/></condition><then pos:line="11" pos:column="50">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">-<pos:position pos:line="12" pos:column="25"/></operator><literal type="number" pos:line="12" pos:column="25">1<pos:position pos:line="12" pos:column="26"/></literal></expr>;<pos:position pos:line="12" pos:column="27"/></return></block></then></if>

	<comment type="block" pos:line="14" pos:column="9">/* binary search in table of non-spacing characters */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">bisearch<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">ch<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="26">zero_width<pos:position pos:line="15" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="38">sizeof<argument_list pos:line="15" pos:column="44">(<argument><expr><name pos:line="15" pos:column="45">zero_width<pos:position pos:line="15" pos:column="55"/></name></expr></argument>)<pos:position pos:line="15" pos:column="56"/></argument_list></sizeof>
				<operator pos:line="16" pos:column="33">/<pos:position pos:line="16" pos:column="34"/></operator> <sizeof pos:line="16" pos:column="35">sizeof<argument_list pos:line="16" pos:column="41">(<argument><expr pos:line="16" pos:column="42">struct <name pos:line="16" pos:column="49">interval<pos:position pos:line="16" pos:column="57"/></name></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></sizeof> <operator pos:line="16" pos:column="59">-<pos:position pos:line="16" pos:column="60"/></operator> <literal type="number" pos:line="16" pos:column="61">1<pos:position pos:line="16" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="64"/></condition><then pos:line="16" pos:column="64">
		<block type="pseudo"><return pos:line="17" pos:column="17">return <expr><literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="19" pos:column="9">/* binary search in table of double width characters */</comment>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">bisearch<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">ch<pos:position pos:line="20" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="26">double_width<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="40">sizeof<argument_list pos:line="20" pos:column="46">(<argument><expr><name pos:line="20" pos:column="47">double_width<pos:position pos:line="20" pos:column="59"/></name></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></sizeof>
				<operator pos:line="21" pos:column="33">/<pos:position pos:line="21" pos:column="34"/></operator> <sizeof pos:line="21" pos:column="35">sizeof<argument_list pos:line="21" pos:column="41">(<argument><expr pos:line="21" pos:column="42">struct <name pos:line="21" pos:column="49">interval<pos:position pos:line="21" pos:column="57"/></name></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></sizeof> <operator pos:line="21" pos:column="59">-<pos:position pos:line="21" pos:column="60"/></operator> <literal type="number" pos:line="21" pos:column="61">1<pos:position pos:line="21" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="64"/></condition><then pos:line="21" pos:column="64">
		<block type="pseudo"><return pos:line="22" pos:column="17">return <expr><literal type="number" pos:line="22" pos:column="24">2<pos:position pos:line="22" pos:column="25"/></literal></expr>;<pos:position pos:line="22" pos:column="26"/></return></block></then></if>

	<return pos:line="24" pos:column="9">return <expr><literal type="number" pos:line="24" pos:column="16">1<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
