<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2027_git-2.6.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">find_funcname_matching_regexp<pos:position pos:line="1" pos:column="49"/></name><parameter_list pos:line="1" pos:column="49">(<parameter><decl><type><name pos:line="1" pos:column="50">xdemitconf_t<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">xecfg<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="71">const<pos:position pos:line="1" pos:column="76"/></specifier> <name pos:line="1" pos:column="77">char<pos:position pos:line="1" pos:column="81"/></name> <modifier pos:line="1" pos:column="82">*<pos:position pos:line="1" pos:column="83"/></modifier></type><name pos:line="1" pos:column="83">start<pos:position pos:line="1" pos:column="88"/></name></decl></parameter>,
						 <parameter><decl><type><name pos:line="2" pos:column="50">regex_t<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">regexp<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">reg_error<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">regmatch_t<pos:position pos:line="5" pos:column="19"/></name></type> <name><name pos:line="5" pos:column="20">match<pos:position pos:line="5" pos:column="25"/></name><index pos:line="5" pos:column="25">[<expr><literal type="number" pos:line="5" pos:column="26">1<pos:position pos:line="5" pos:column="27"/></literal></expr>]<pos:position pos:line="5" pos:column="28"/></index></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><literal type="number" pos:line="6" pos:column="16">1<pos:position pos:line="6" pos:column="17"/></literal></expr>)<pos:position pos:line="6" pos:column="18"/></condition> <block pos:line="6" pos:column="19">{
		<decl_stmt><decl><type><specifier pos:line="7" pos:column="17">const<pos:position pos:line="7" pos:column="22"/></specifier> <name pos:line="7" pos:column="23">char<pos:position pos:line="7" pos:column="27"/></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">bol<pos:position pos:line="7" pos:column="32"/></name></decl>, <modifier pos:line="7" pos:column="34">*<pos:position pos:line="7" pos:column="35"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="35">eol<pos:position pos:line="7" pos:column="38"/></name></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
		<expr_stmt><expr><name pos:line="8" pos:column="17">reg_error<pos:position pos:line="8" pos:column="26"/></name> <operator pos:line="8" pos:column="27">=<pos:position pos:line="8" pos:column="28"/></operator> <call><name pos:line="8" pos:column="29">regexec<pos:position pos:line="8" pos:column="36"/></name><argument_list pos:line="8" pos:column="36">(<argument><expr><name pos:line="8" pos:column="37">regexp<pos:position pos:line="8" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="45">start<pos:position pos:line="8" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="52">1<pos:position pos:line="8" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="55">match<pos:position pos:line="8" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="62">0<pos:position pos:line="8" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">reg_error<pos:position pos:line="9" pos:column="30"/></name> <operator pos:line="9" pos:column="31">==<pos:position pos:line="9" pos:column="33"/></operator> <name pos:line="9" pos:column="34">REG_NOMATCH<pos:position pos:line="9" pos:column="45"/></name></expr>)<pos:position pos:line="9" pos:column="46"/></condition><then pos:line="9" pos:column="46">
			<block type="pseudo"><return pos:line="10" pos:column="25">return <expr><name pos:line="10" pos:column="32">NULL<pos:position pos:line="10" pos:column="36"/></name></expr>;<pos:position pos:line="10" pos:column="37"/></return></block></then>
		<elseif pos:line="11" pos:column="17">else <if pos:line="11" pos:column="22">if <condition pos:line="11" pos:column="25">(<expr><name pos:line="11" pos:column="26">reg_error<pos:position pos:line="11" pos:column="35"/></name></expr>)<pos:position pos:line="11" pos:column="36"/></condition><then pos:line="11" pos:column="36"> <block pos:line="11" pos:column="37">{
			<decl_stmt><decl><type><name pos:line="12" pos:column="25">char<pos:position pos:line="12" pos:column="29"/></name></type> <name><name pos:line="12" pos:column="30">errbuf<pos:position pos:line="12" pos:column="36"/></name><index pos:line="12" pos:column="36">[<expr><literal type="number" pos:line="12" pos:column="37">1024<pos:position pos:line="12" pos:column="41"/></literal></expr>]<pos:position pos:line="12" pos:column="42"/></index></name></decl>;<pos:position pos:line="12" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">regerror<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">reg_error<pos:position pos:line="13" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="45">regexp<pos:position pos:line="13" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="53">errbuf<pos:position pos:line="13" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="61">1024<pos:position pos:line="13" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">die<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><literal type="string" pos:line="14" pos:column="29">"-L parameter: regexec() failed: %s"<pos:position pos:line="14" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="67">errbuf<pos:position pos:line="14" pos:column="73"/></name></expr></argument>)<pos:position pos:line="14" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="75"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if></elseif></if>
		<comment type="block" pos:line="16" pos:column="17">/* determine extent of line matched */</comment>
		<expr_stmt><expr><name pos:line="17" pos:column="17">bol<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">start<pos:position pos:line="17" pos:column="28"/></name><operator pos:line="17" pos:column="28">+<pos:position pos:line="17" pos:column="29"/></operator><name><name pos:line="17" pos:column="29">match<pos:position pos:line="17" pos:column="34"/></name><index pos:line="17" pos:column="34">[<expr><literal type="number" pos:line="17" pos:column="35">0<pos:position pos:line="17" pos:column="36"/></literal></expr>]<pos:position pos:line="17" pos:column="37"/></index></name><operator pos:line="17" pos:column="37">.<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="38">rm_so<pos:position pos:line="17" pos:column="43"/></name></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="18" pos:column="17">eol<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <name pos:line="18" pos:column="23">start<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">+<pos:position pos:line="18" pos:column="29"/></operator><name><name pos:line="18" pos:column="29">match<pos:position pos:line="18" pos:column="34"/></name><index pos:line="18" pos:column="34">[<expr><literal type="number" pos:line="18" pos:column="35">0<pos:position pos:line="18" pos:column="36"/></literal></expr>]<pos:position pos:line="18" pos:column="37"/></index></name><operator pos:line="18" pos:column="37">.<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="38">rm_eo<pos:position pos:line="18" pos:column="43"/></name></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
		<while pos:line="19" pos:column="17">while <condition pos:line="19" pos:column="23">(<expr><name pos:line="19" pos:column="24">bol<pos:position pos:line="19" pos:column="27"/></name> <operator pos:line="19" pos:column="28">&gt;<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="30">start<pos:position pos:line="19" pos:column="35"/></name> <operator pos:line="19" pos:column="36">&amp;&amp;<pos:position pos:line="19" pos:column="46"/></operator> <operator pos:line="19" pos:column="39">*<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="40">bol<pos:position pos:line="19" pos:column="43"/></name> <operator pos:line="19" pos:column="44">!=<pos:position pos:line="19" pos:column="46"/></operator> <literal type="char" pos:line="19" pos:column="47">'\n'<pos:position pos:line="19" pos:column="51"/></literal></expr>)<pos:position pos:line="19" pos:column="52"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="25">bol<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">--<pos:position pos:line="20" pos:column="30"/></operator></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt></block></while>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">*<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">bol<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">==<pos:position pos:line="21" pos:column="28"/></operator> <literal type="char" pos:line="21" pos:column="29">'\n'<pos:position pos:line="21" pos:column="33"/></literal></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="25">bol<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">++<pos:position pos:line="22" pos:column="30"/></operator></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt></block></then></if>
		<while pos:line="23" pos:column="17">while <condition pos:line="23" pos:column="23">(<expr><operator pos:line="23" pos:column="24">*<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="25">eol<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">&amp;&amp;<pos:position pos:line="23" pos:column="39"/></operator> <operator pos:line="23" pos:column="32">*<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="33">eol<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">!=<pos:position pos:line="23" pos:column="39"/></operator> <literal type="char" pos:line="23" pos:column="40">'\n'<pos:position pos:line="23" pos:column="44"/></literal></expr>)<pos:position pos:line="23" pos:column="45"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="25">eol<pos:position pos:line="24" pos:column="28"/></name><operator pos:line="24" pos:column="28">++<pos:position pos:line="24" pos:column="30"/></operator></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt></block></while>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">*<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">eol<pos:position pos:line="25" pos:column="25"/></name> <operator pos:line="25" pos:column="26">==<pos:position pos:line="25" pos:column="28"/></operator> <literal type="char" pos:line="25" pos:column="29">'\n'<pos:position pos:line="25" pos:column="33"/></literal></expr>)<pos:position pos:line="25" pos:column="34"/></condition><then pos:line="25" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="25">eol<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">++<pos:position pos:line="26" pos:column="30"/></operator></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="27" pos:column="17">/* is it a funcname line? */</comment>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><call><name pos:line="28" pos:column="21">match_funcname<pos:position pos:line="28" pos:column="35"/></name><argument_list pos:line="28" pos:column="35">(<argument><expr><name pos:line="28" pos:column="36">xecfg<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="43">(<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="44">char<pos:position pos:line="28" pos:column="48"/></name><operator pos:line="28" pos:column="48">*<pos:position pos:line="28" pos:column="49"/></operator><operator pos:line="28" pos:column="49">)<pos:position pos:line="28" pos:column="50"/></operator> <name pos:line="28" pos:column="51">bol<pos:position pos:line="28" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="56">(<pos:position pos:line="28" pos:column="57"/></operator><name pos:line="28" pos:column="57">char<pos:position pos:line="28" pos:column="61"/></name><operator pos:line="28" pos:column="61">*<pos:position pos:line="28" pos:column="62"/></operator><operator pos:line="28" pos:column="62">)<pos:position pos:line="28" pos:column="63"/></operator> <name pos:line="28" pos:column="64">eol<pos:position pos:line="28" pos:column="67"/></name></expr></argument>)<pos:position pos:line="28" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="69"/></condition><then pos:line="28" pos:column="69">
			<block type="pseudo"><return pos:line="29" pos:column="25">return <expr><name pos:line="29" pos:column="32">bol<pos:position pos:line="29" pos:column="35"/></name></expr>;<pos:position pos:line="29" pos:column="36"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="30" pos:column="17">start<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">=<pos:position pos:line="30" pos:column="24"/></operator> <name pos:line="30" pos:column="25">eol<pos:position pos:line="30" pos:column="28"/></name></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></while>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
