<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_446_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">diffcore_pickaxe<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">diff_options<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">o<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">needle<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><name><name pos:line="3" pos:column="30">o<pos:position pos:line="3" pos:column="31"/></name><operator pos:line="3" pos:column="31">-&gt;<pos:position pos:line="3" pos:column="36"/></operator><name pos:line="3" pos:column="33">pickaxe<pos:position pos:line="3" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">opts<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><name><name pos:line="4" pos:column="20">o<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">-&gt;<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="23">pickaxe_opts<pos:position pos:line="4" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">regex_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">regex<pos:position pos:line="5" pos:column="22"/></name></decl>, <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="25">regexp<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><name pos:line="5" pos:column="34">NULL<pos:position pos:line="5" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">kwset_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">kws<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">opts<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">&amp;<pos:position pos:line="8" pos:column="23"/></operator> <operator pos:line="8" pos:column="20">(<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">DIFF_PICKAXE_REGEX<pos:position pos:line="8" pos:column="39"/></name> <operator pos:line="8" pos:column="40">|<pos:position pos:line="8" pos:column="41"/></operator> <name pos:line="8" pos:column="42">DIFF_PICKAXE_KIND_G<pos:position pos:line="8" pos:column="61"/></name><operator pos:line="8" pos:column="61">)<pos:position pos:line="8" pos:column="62"/></operator></expr>)<pos:position pos:line="8" pos:column="63"/></condition><then pos:line="8" pos:column="63"> <block pos:line="8" pos:column="64">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">cflags<pos:position pos:line="9" pos:column="27"/></name> <init pos:line="9" pos:column="28">= <expr><name pos:line="9" pos:column="30">REG_EXTENDED<pos:position pos:line="9" pos:column="42"/></name> <operator pos:line="9" pos:column="43">|<pos:position pos:line="9" pos:column="44"/></operator> <name pos:line="9" pos:column="45">REG_NEWLINE<pos:position pos:line="9" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="57"/></decl_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">DIFF_OPT_TST<pos:position pos:line="10" pos:column="33"/></name><argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">o<pos:position pos:line="10" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="37">PICKAXE_IGNORE_CASE<pos:position pos:line="10" pos:column="56"/></name></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="58"/></condition><then pos:line="10" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="25">cflags<pos:position pos:line="11" pos:column="31"/></name> <operator pos:line="11" pos:column="32">|=<pos:position pos:line="11" pos:column="34"/></operator> <name pos:line="11" pos:column="35">REG_ICASE<pos:position pos:line="11" pos:column="44"/></name></expr>;<pos:position pos:line="11" pos:column="45"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">regcomp_or_die<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><operator pos:line="12" pos:column="32">&amp;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="33">regex<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="40">needle<pos:position pos:line="12" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="48">cflags<pos:position pos:line="12" pos:column="54"/></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">regexp<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <operator pos:line="13" pos:column="26">&amp;<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="27">regex<pos:position pos:line="13" pos:column="32"/></name></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then> <elseif pos:line="14" pos:column="11">else <if pos:line="14" pos:column="16">if <condition pos:line="14" pos:column="19">(<expr><call><name pos:line="14" pos:column="20">DIFF_OPT_TST<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">o<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="36">PICKAXE_IGNORE_CASE<pos:position pos:line="14" pos:column="55"/></name></expr></argument>)<pos:position pos:line="14" pos:column="56"/></argument_list></call> <operator pos:line="14" pos:column="57">&amp;&amp;<pos:position pos:line="14" pos:column="67"/></operator>
		   <call><name pos:line="15" pos:column="20">has_non_ascii<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">(<argument><expr><name pos:line="15" pos:column="34">needle<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42"> <block pos:line="15" pos:column="43">{
		<decl_stmt><decl><type><name><name pos:line="16" pos:column="17">struct<pos:position pos:line="16" pos:column="23"/></name> <name pos:line="16" pos:column="24">strbuf<pos:position pos:line="16" pos:column="30"/></name></name></type> <name pos:line="16" pos:column="31">sb<pos:position pos:line="16" pos:column="33"/></name> <init pos:line="16" pos:column="34">= <expr><name pos:line="16" pos:column="36">STRBUF_INIT<pos:position pos:line="16" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="48"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">int<pos:position pos:line="17" pos:column="20"/></name></type> <name pos:line="17" pos:column="21">cflags<pos:position pos:line="17" pos:column="27"/></name> <init pos:line="17" pos:column="28">= <expr><name pos:line="17" pos:column="30">REG_NEWLINE<pos:position pos:line="17" pos:column="41"/></name> <operator pos:line="17" pos:column="42">|<pos:position pos:line="17" pos:column="43"/></operator> <name pos:line="17" pos:column="44">REG_ICASE<pos:position pos:line="17" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="54"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="19" pos:column="17">basic_regex_quote_buf<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(<argument><expr><operator pos:line="19" pos:column="39">&amp;<pos:position pos:line="19" pos:column="44"/></operator><name pos:line="19" pos:column="40">sb<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="44">needle<pos:position pos:line="19" pos:column="50"/></name></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">regcomp_or_die<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><operator pos:line="20" pos:column="32">&amp;<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="33">regex<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="40">sb<pos:position pos:line="20" pos:column="42"/></name><operator pos:line="20" pos:column="42">.<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="43">buf<pos:position pos:line="20" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="48">cflags<pos:position pos:line="20" pos:column="54"/></name></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">strbuf_release<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><operator pos:line="21" pos:column="32">&amp;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="33">sb<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">regexp<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <operator pos:line="22" pos:column="26">&amp;<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="27">regex<pos:position pos:line="22" pos:column="32"/></name></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if></elseif> <else pos:line="23" pos:column="11">else <block pos:line="23" pos:column="16">{
		<expr_stmt><expr><name pos:line="24" pos:column="17">kws<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <call><name pos:line="24" pos:column="23">kwsalloc<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><ternary><condition><expr><call><name pos:line="24" pos:column="32">DIFF_OPT_TST<pos:position pos:line="24" pos:column="44"/></name><argument_list pos:line="24" pos:column="44">(<argument><expr><name pos:line="24" pos:column="45">o<pos:position pos:line="24" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="48">PICKAXE_IGNORE_CASE<pos:position pos:line="24" pos:column="67"/></name></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>
			       ?<pos:position pos:line="25" pos:column="33"/></condition><then pos:line="25" pos:column="33"> <expr><name pos:line="25" pos:column="34">tolower_trans_tbl<pos:position pos:line="25" pos:column="51"/></name></expr> <pos:position pos:line="25" pos:column="52"/></then><else pos:line="25" pos:column="52">: <expr><name pos:line="25" pos:column="54">NULL<pos:position pos:line="25" pos:column="58"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="25" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">kwsincr<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">kws<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="30">needle<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="38">strlen<pos:position pos:line="26" pos:column="44"/></name><argument_list pos:line="26" pos:column="44">(<argument><expr><name pos:line="26" pos:column="45">needle<pos:position pos:line="26" pos:column="51"/></name></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">kwsprep<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">kws<pos:position pos:line="27" pos:column="28"/></name></expr></argument>)<pos:position pos:line="27" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="30" pos:column="9">/* Might want to warn when both S and G are on; I don't care... */</comment>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">pickaxe<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><operator pos:line="31" pos:column="17">&amp;<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="18">diff_queued_diff<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="36">o<pos:position pos:line="31" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="39">regexp<pos:position pos:line="31" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="47">kws<pos:position pos:line="31" pos:column="50"/></name></expr></argument>,
		<argument><expr><ternary><condition><expr><operator pos:line="32" pos:column="17">(<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="18">opts<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">&amp;<pos:position pos:line="32" pos:column="28"/></operator> <name pos:line="32" pos:column="25">DIFF_PICKAXE_KIND_G<pos:position pos:line="32" pos:column="44"/></name><operator pos:line="32" pos:column="44">)<pos:position pos:line="32" pos:column="45"/></operator></expr> ?<pos:position pos:line="32" pos:column="47"/></condition><then pos:line="32" pos:column="47"> <expr><name pos:line="32" pos:column="48">diff_grep<pos:position pos:line="32" pos:column="57"/></name></expr> <pos:position pos:line="32" pos:column="58"/></then><else pos:line="32" pos:column="58">: <expr><name pos:line="32" pos:column="60">has_changes<pos:position pos:line="32" pos:column="71"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="32" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="73"/></expr_stmt>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">regexp<pos:position pos:line="34" pos:column="19"/></name></expr>)<pos:position pos:line="34" pos:column="20"/></condition><then pos:line="34" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="17">regfree<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">regexp<pos:position pos:line="35" pos:column="31"/></name></expr></argument>)<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt></block></then>
	<else pos:line="36" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="17">kwsfree<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">kws<pos:position pos:line="37" pos:column="28"/></name></expr></argument>)<pos:position pos:line="37" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt></block></else></if>
	<return pos:line="38" pos:column="9">return;<pos:position pos:line="38" pos:column="16"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
