<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6283_git-2.9.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name><modifier pos:line="1" pos:column="5">*<pos:position pos:line="1" pos:column="6"/></modifier></type> <name pos:line="1" pos:column="7">mspace_malloc<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">mspace<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">msp<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">size_t<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">bytes<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list> <block pos:line="1" pos:column="47">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">mstate<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">ms<pos:position pos:line="2" pos:column="12"/></name> <init pos:line="2" pos:column="13">= <expr><operator pos:line="2" pos:column="15">(<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">mstate<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">)<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">msp<pos:position pos:line="2" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="27"/></decl_stmt>
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><operator pos:line="3" pos:column="7">!<pos:position pos:line="3" pos:column="8"/></operator><call><name pos:line="3" pos:column="8">ok_magic<pos:position pos:line="3" pos:column="16"/></name><argument_list pos:line="3" pos:column="16">(<argument><expr><name pos:line="3" pos:column="17">ms<pos:position pos:line="3" pos:column="19"/></name></expr></argument>)<pos:position pos:line="3" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="21"/></condition><then pos:line="3" pos:column="21"> <block pos:line="3" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">USAGE_ERROR_ACTION<pos:position pos:line="4" pos:column="23"/></name><argument_list pos:line="4" pos:column="23">(<argument><expr><name pos:line="4" pos:column="24">ms<pos:position pos:line="4" pos:column="26"/></name></expr></argument>,<argument><expr><name pos:line="4" pos:column="27">ms<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>
    <return pos:line="5" pos:column="5">return <expr><literal type="number" pos:line="5" pos:column="12">0<pos:position pos:line="5" pos:column="13"/></literal></expr>;<pos:position pos:line="5" pos:column="14"/></return>
  }<pos:position pos:line="6" pos:column="4"/></block></then></if>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">!<pos:position pos:line="7" pos:column="8"/></operator><call><name pos:line="7" pos:column="8">PREACTION<pos:position pos:line="7" pos:column="17"/></name><argument_list pos:line="7" pos:column="17">(<argument><expr><name pos:line="7" pos:column="18">ms<pos:position pos:line="7" pos:column="20"/></name></expr></argument>)<pos:position pos:line="7" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="22"/></condition><then pos:line="7" pos:column="22"> <block pos:line="7" pos:column="23">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">void<pos:position pos:line="8" pos:column="9"/></name><modifier pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></modifier></type> <name pos:line="8" pos:column="11">mem<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">size_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">nb<pos:position pos:line="9" pos:column="14"/></name></decl>;<pos:position pos:line="9" pos:column="15"/></decl_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">bytes<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">&lt;=<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="18">MAX_SMALL_REQUEST<pos:position pos:line="10" pos:column="35"/></name></expr>)<pos:position pos:line="10" pos:column="36"/></condition><then pos:line="10" pos:column="36"> <block pos:line="10" pos:column="37">{
      <decl_stmt><decl><type><name pos:line="11" pos:column="7">bindex_t<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">idx<pos:position pos:line="11" pos:column="19"/></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="12" pos:column="7">binmap_t<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">smallbits<pos:position pos:line="12" pos:column="25"/></name></decl>;<pos:position pos:line="12" pos:column="26"/></decl_stmt>
      <expr_stmt><expr><name pos:line="13" pos:column="7">nb<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <ternary><condition><expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">bytes<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&lt;<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="21">MIN_REQUEST<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">)<pos:position pos:line="13" pos:column="33"/></operator></expr>?<pos:position pos:line="13" pos:column="34"/></condition><then pos:line="13" pos:column="34"> <expr><name pos:line="13" pos:column="35">MIN_CHUNK_SIZE<pos:position pos:line="13" pos:column="49"/></name></expr> <pos:position pos:line="13" pos:column="50"/></then><else pos:line="13" pos:column="50">: <expr><call><name pos:line="13" pos:column="52">pad_request<pos:position pos:line="13" pos:column="63"/></name><argument_list pos:line="13" pos:column="63">(<argument><expr><name pos:line="13" pos:column="64">bytes<pos:position pos:line="13" pos:column="69"/></name></expr></argument>)<pos:position pos:line="13" pos:column="70"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="13" pos:column="71"/></expr_stmt>
      <expr_stmt><expr><name pos:line="14" pos:column="7">idx<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <call><name pos:line="14" pos:column="13">small_index<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">nb<pos:position pos:line="14" pos:column="27"/></name></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name pos:line="15" pos:column="7">smallbits<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <name><name pos:line="15" pos:column="19">ms<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">-&gt;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="23">smallmap<pos:position pos:line="15" pos:column="31"/></name></name> <operator pos:line="15" pos:column="32">&gt;&gt;<pos:position pos:line="15" pos:column="37"/></operator> <name pos:line="15" pos:column="35">idx<pos:position pos:line="15" pos:column="38"/></name></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt>

      <if pos:line="17" pos:column="7">if <condition pos:line="17" pos:column="10">(<expr><operator pos:line="17" pos:column="11">(<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="12">smallbits<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">&amp;<pos:position pos:line="17" pos:column="27"/></operator> <literal type="number" pos:line="17" pos:column="24">0x3U<pos:position pos:line="17" pos:column="28"/></literal><operator pos:line="17" pos:column="28">)<pos:position pos:line="17" pos:column="29"/></operator> <operator pos:line="17" pos:column="30">!=<pos:position pos:line="17" pos:column="32"/></operator> <literal type="number" pos:line="17" pos:column="33">0<pos:position pos:line="17" pos:column="34"/></literal></expr>)<pos:position pos:line="17" pos:column="35"/></condition><then pos:line="17" pos:column="35"> <block pos:line="17" pos:column="36">{ <comment type="block" pos:line="17" pos:column="38">/* Remainderless fit to a smallbin. */</comment>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">mchunkptr<pos:position pos:line="18" pos:column="18"/></name></type> <name pos:line="18" pos:column="19">b<pos:position pos:line="18" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="18" pos:column="22">p<pos:position pos:line="18" pos:column="23"/></name></decl>;<pos:position pos:line="18" pos:column="24"/></decl_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">idx<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">+=<pos:position pos:line="19" pos:column="15"/></operator> <operator pos:line="19" pos:column="16">~<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">smallbits<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">&amp;<pos:position pos:line="19" pos:column="32"/></operator> <literal type="number" pos:line="19" pos:column="29">1<pos:position pos:line="19" pos:column="30"/></literal></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>       <comment type="block" pos:line="19" pos:column="38">/* Uses next bin if idx empty */</comment>
	<expr_stmt><expr><name pos:line="20" pos:column="9">b<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <call><name pos:line="20" pos:column="13">smallbin_at<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">ms<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="29">idx<pos:position pos:line="20" pos:column="32"/></name></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">p<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <name><name pos:line="21" pos:column="13">b<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">fd<pos:position pos:line="21" pos:column="18"/></name></name></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">assert<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><call><name pos:line="22" pos:column="16">chunksize<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">p<pos:position pos:line="22" pos:column="27"/></name></expr></argument>)<pos:position pos:line="22" pos:column="28"/></argument_list></call> <operator pos:line="22" pos:column="29">==<pos:position pos:line="22" pos:column="31"/></operator> <call><name pos:line="22" pos:column="32">small_index2size<pos:position pos:line="22" pos:column="48"/></name><argument_list pos:line="22" pos:column="48">(<argument><expr><name pos:line="22" pos:column="49">idx<pos:position pos:line="22" pos:column="52"/></name></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">unlink_first_small_chunk<pos:position pos:line="23" pos:column="33"/></name><argument_list pos:line="23" pos:column="33">(<argument><expr><name pos:line="23" pos:column="34">ms<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="38">b<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="41">p<pos:position pos:line="23" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="44">idx<pos:position pos:line="23" pos:column="47"/></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">set_inuse_and_pinuse<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">ms<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">p<pos:position pos:line="24" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="37">small_index2size<pos:position pos:line="24" pos:column="53"/></name><argument_list pos:line="24" pos:column="53">(<argument><expr><name pos:line="24" pos:column="54">idx<pos:position pos:line="24" pos:column="57"/></name></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">mem<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <call><name pos:line="25" pos:column="15">chunk2mem<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><name pos:line="25" pos:column="25">p<pos:position pos:line="25" pos:column="26"/></name></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">check_malloced_chunk<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">ms<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="34">mem<pos:position pos:line="26" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="39">nb<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt>
	<goto pos:line="27" pos:column="9">goto <name pos:line="27" pos:column="14">postaction<pos:position pos:line="27" pos:column="24"/></name>;<pos:position pos:line="27" pos:column="25"/></goto>
      }<pos:position pos:line="28" pos:column="8"/></block></then>

      <elseif pos:line="30" pos:column="7">else <if pos:line="30" pos:column="12">if <condition pos:line="30" pos:column="15">(<expr><name pos:line="30" pos:column="16">nb<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">&gt;<pos:position pos:line="30" pos:column="23"/></operator> <name><name pos:line="30" pos:column="21">ms<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">-&gt;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="25">dvsize<pos:position pos:line="30" pos:column="31"/></name></name></expr>)<pos:position pos:line="30" pos:column="32"/></condition><then pos:line="30" pos:column="32"> <block pos:line="30" pos:column="33">{
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">smallbits<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">!=<pos:position pos:line="31" pos:column="25"/></operator> <literal type="number" pos:line="31" pos:column="26">0<pos:position pos:line="31" pos:column="27"/></literal></expr>)<pos:position pos:line="31" pos:column="28"/></condition><then pos:line="31" pos:column="28"> <block pos:line="31" pos:column="29">{ <comment type="block" pos:line="31" pos:column="31">/* Use chunk in next nonempty smallbin */</comment>
	  <decl_stmt><decl><type><name pos:line="32" pos:column="11">mchunkptr<pos:position pos:line="32" pos:column="20"/></name></type> <name pos:line="32" pos:column="21">b<pos:position pos:line="32" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="32" pos:column="24">p<pos:position pos:line="32" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="32" pos:column="27">r<pos:position pos:line="32" pos:column="28"/></name></decl>;<pos:position pos:line="32" pos:column="29"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="33" pos:column="11">size_t<pos:position pos:line="33" pos:column="17"/></name></type> <name pos:line="33" pos:column="18">rsize<pos:position pos:line="33" pos:column="23"/></name></decl>;<pos:position pos:line="33" pos:column="24"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="34" pos:column="11">bindex_t<pos:position pos:line="34" pos:column="19"/></name></type> <name pos:line="34" pos:column="20">i<pos:position pos:line="34" pos:column="21"/></name></decl>;<pos:position pos:line="34" pos:column="22"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="35" pos:column="11">binmap_t<pos:position pos:line="35" pos:column="19"/></name></type> <name pos:line="35" pos:column="20">leftbits<pos:position pos:line="35" pos:column="28"/></name> <init pos:line="35" pos:column="29">= <expr><operator pos:line="35" pos:column="31">(<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="32">smallbits<pos:position pos:line="35" pos:column="41"/></name> <operator pos:line="35" pos:column="42">&lt;&lt;<pos:position pos:line="35" pos:column="50"/></operator> <name pos:line="35" pos:column="45">idx<pos:position pos:line="35" pos:column="48"/></name><operator pos:line="35" pos:column="48">)<pos:position pos:line="35" pos:column="49"/></operator> <operator pos:line="35" pos:column="50">&amp;<pos:position pos:line="35" pos:column="55"/></operator> <call><name pos:line="35" pos:column="52">left_bits<pos:position pos:line="35" pos:column="61"/></name><argument_list pos:line="35" pos:column="61">(<argument><expr><call><name pos:line="35" pos:column="62">idx2bit<pos:position pos:line="35" pos:column="69"/></name><argument_list pos:line="35" pos:column="69">(<argument><expr><name pos:line="35" pos:column="70">idx<pos:position pos:line="35" pos:column="73"/></name></expr></argument>)<pos:position pos:line="35" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="76"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="36" pos:column="11">binmap_t<pos:position pos:line="36" pos:column="19"/></name></type> <name pos:line="36" pos:column="20">leastbit<pos:position pos:line="36" pos:column="28"/></name> <init pos:line="36" pos:column="29">= <expr><call><name pos:line="36" pos:column="31">least_bit<pos:position pos:line="36" pos:column="40"/></name><argument_list pos:line="36" pos:column="40">(<argument><expr><name pos:line="36" pos:column="41">leftbits<pos:position pos:line="36" pos:column="49"/></name></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="51"/></decl_stmt>
	  <expr_stmt><expr><call><name pos:line="37" pos:column="11">compute_bit2idx<pos:position pos:line="37" pos:column="26"/></name><argument_list pos:line="37" pos:column="26">(<argument><expr><name pos:line="37" pos:column="27">leastbit<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="37">i<pos:position pos:line="37" pos:column="38"/></name></expr></argument>)<pos:position pos:line="37" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="38" pos:column="11">b<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">=<pos:position pos:line="38" pos:column="14"/></operator> <call><name pos:line="38" pos:column="15">smallbin_at<pos:position pos:line="38" pos:column="26"/></name><argument_list pos:line="38" pos:column="26">(<argument><expr><name pos:line="38" pos:column="27">ms<pos:position pos:line="38" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="31">i<pos:position pos:line="38" pos:column="32"/></name></expr></argument>)<pos:position pos:line="38" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="34"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="39" pos:column="11">p<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></operator> <name><name pos:line="39" pos:column="15">b<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">-&gt;<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="18">fd<pos:position pos:line="39" pos:column="20"/></name></name></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="40" pos:column="11">assert<pos:position pos:line="40" pos:column="17"/></name><argument_list pos:line="40" pos:column="17">(<argument><expr><call><name pos:line="40" pos:column="18">chunksize<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">p<pos:position pos:line="40" pos:column="29"/></name></expr></argument>)<pos:position pos:line="40" pos:column="30"/></argument_list></call> <operator pos:line="40" pos:column="31">==<pos:position pos:line="40" pos:column="33"/></operator> <call><name pos:line="40" pos:column="34">small_index2size<pos:position pos:line="40" pos:column="50"/></name><argument_list pos:line="40" pos:column="50">(<argument><expr><name pos:line="40" pos:column="51">i<pos:position pos:line="40" pos:column="52"/></name></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="41" pos:column="11">unlink_first_small_chunk<pos:position pos:line="41" pos:column="35"/></name><argument_list pos:line="41" pos:column="35">(<argument><expr><name pos:line="41" pos:column="36">ms<pos:position pos:line="41" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="40">b<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="43">p<pos:position pos:line="41" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="46">i<pos:position pos:line="41" pos:column="47"/></name></expr></argument>)<pos:position pos:line="41" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="49"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="42" pos:column="11">rsize<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <call><name pos:line="42" pos:column="19">small_index2size<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">(<argument><expr><name pos:line="42" pos:column="36">i<pos:position pos:line="42" pos:column="37"/></name></expr></argument>)<pos:position pos:line="42" pos:column="38"/></argument_list></call> <operator pos:line="42" pos:column="39">-<pos:position pos:line="42" pos:column="40"/></operator> <name pos:line="42" pos:column="41">nb<pos:position pos:line="42" pos:column="43"/></name></expr>;<pos:position pos:line="42" pos:column="44"/></expr_stmt>
	  <comment type="block" pos:line="43" pos:column="11">/* Fit here cannot be remainderless if 4byte sizes */</comment>
	  <if pos:line="44" pos:column="11">if <condition pos:line="44" pos:column="14">(<expr><name pos:line="44" pos:column="15">SIZE_T_SIZE<pos:position pos:line="44" pos:column="26"/></name> <operator pos:line="44" pos:column="27">!=<pos:position pos:line="44" pos:column="29"/></operator> <literal type="number" pos:line="44" pos:column="30">4<pos:position pos:line="44" pos:column="31"/></literal> <operator pos:line="44" pos:column="32">&amp;&amp;<pos:position pos:line="44" pos:column="42"/></operator> <name pos:line="44" pos:column="35">rsize<pos:position pos:line="44" pos:column="40"/></name> <operator pos:line="44" pos:column="41">&lt;<pos:position pos:line="44" pos:column="45"/></operator> <name pos:line="44" pos:column="43">MIN_CHUNK_SIZE<pos:position pos:line="44" pos:column="57"/></name></expr>)<pos:position pos:line="44" pos:column="58"/></condition><then pos:line="44" pos:column="58">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="13">set_inuse_and_pinuse<pos:position pos:line="45" pos:column="33"/></name><argument_list pos:line="45" pos:column="33">(<argument><expr><name pos:line="45" pos:column="34">ms<pos:position pos:line="45" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="38">p<pos:position pos:line="45" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="41">small_index2size<pos:position pos:line="45" pos:column="57"/></name><argument_list pos:line="45" pos:column="57">(<argument><expr><name pos:line="45" pos:column="58">i<pos:position pos:line="45" pos:column="59"/></name></expr></argument>)<pos:position pos:line="45" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="62"/></expr_stmt></block></then>
	  <else pos:line="46" pos:column="11">else <block pos:line="46" pos:column="16">{
	    <expr_stmt><expr><call><name pos:line="47" pos:column="13">set_size_and_pinuse_of_inuse_chunk<pos:position pos:line="47" pos:column="47"/></name><argument_list pos:line="47" pos:column="47">(<argument><expr><name pos:line="47" pos:column="48">ms<pos:position pos:line="47" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="52">p<pos:position pos:line="47" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="55">nb<pos:position pos:line="47" pos:column="57"/></name></expr></argument>)<pos:position pos:line="47" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="59"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="48" pos:column="13">r<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">=<pos:position pos:line="48" pos:column="16"/></operator> <call><name pos:line="48" pos:column="17">chunk_plus_offset<pos:position pos:line="48" pos:column="34"/></name><argument_list pos:line="48" pos:column="34">(<argument><expr><name pos:line="48" pos:column="35">p<pos:position pos:line="48" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="38">nb<pos:position pos:line="48" pos:column="40"/></name></expr></argument>)<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="49" pos:column="13">set_size_and_pinuse_of_free_chunk<pos:position pos:line="49" pos:column="46"/></name><argument_list pos:line="49" pos:column="46">(<argument><expr><name pos:line="49" pos:column="47">r<pos:position pos:line="49" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="50">rsize<pos:position pos:line="49" pos:column="55"/></name></expr></argument>)<pos:position pos:line="49" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="57"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="50" pos:column="13">replace_dv<pos:position pos:line="50" pos:column="23"/></name><argument_list pos:line="50" pos:column="23">(<argument><expr><name pos:line="50" pos:column="24">ms<pos:position pos:line="50" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="28">r<pos:position pos:line="50" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="31">rsize<pos:position pos:line="50" pos:column="36"/></name></expr></argument>)<pos:position pos:line="50" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>
	  }<pos:position pos:line="51" pos:column="12"/></block></else></if>
	  <expr_stmt><expr><name pos:line="52" pos:column="11">mem<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">=<pos:position pos:line="52" pos:column="16"/></operator> <call><name pos:line="52" pos:column="17">chunk2mem<pos:position pos:line="52" pos:column="26"/></name><argument_list pos:line="52" pos:column="26">(<argument><expr><name pos:line="52" pos:column="27">p<pos:position pos:line="52" pos:column="28"/></name></expr></argument>)<pos:position pos:line="52" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="30"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="53" pos:column="11">check_malloced_chunk<pos:position pos:line="53" pos:column="31"/></name><argument_list pos:line="53" pos:column="31">(<argument><expr><name pos:line="53" pos:column="32">ms<pos:position pos:line="53" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="36">mem<pos:position pos:line="53" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="41">nb<pos:position pos:line="53" pos:column="43"/></name></expr></argument>)<pos:position pos:line="53" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="45"/></expr_stmt>
	  <goto pos:line="54" pos:column="11">goto <name pos:line="54" pos:column="16">postaction<pos:position pos:line="54" pos:column="26"/></name>;<pos:position pos:line="54" pos:column="27"/></goto>
	}<pos:position pos:line="55" pos:column="10"/></block></then>

	<elseif pos:line="57" pos:column="9">else <if pos:line="57" pos:column="14">if <condition pos:line="57" pos:column="17">(<expr><name><name pos:line="57" pos:column="18">ms<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">-&gt;<pos:position pos:line="57" pos:column="25"/></operator><name pos:line="57" pos:column="22">treemap<pos:position pos:line="57" pos:column="29"/></name></name> <operator pos:line="57" pos:column="30">!=<pos:position pos:line="57" pos:column="32"/></operator> <literal type="number" pos:line="57" pos:column="33">0<pos:position pos:line="57" pos:column="34"/></literal> <operator pos:line="57" pos:column="35">&amp;&amp;<pos:position pos:line="57" pos:column="45"/></operator> <operator pos:line="57" pos:column="38">(<pos:position pos:line="57" pos:column="39"/></operator><name pos:line="57" pos:column="39">mem<pos:position pos:line="57" pos:column="42"/></name> <operator pos:line="57" pos:column="43">=<pos:position pos:line="57" pos:column="44"/></operator> <call><name pos:line="57" pos:column="45">tmalloc_small<pos:position pos:line="57" pos:column="58"/></name><argument_list pos:line="57" pos:column="58">(<argument><expr><name pos:line="57" pos:column="59">ms<pos:position pos:line="57" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="63">nb<pos:position pos:line="57" pos:column="65"/></name></expr></argument>)<pos:position pos:line="57" pos:column="66"/></argument_list></call><operator pos:line="57" pos:column="66">)<pos:position pos:line="57" pos:column="67"/></operator> <operator pos:line="57" pos:column="68">!=<pos:position pos:line="57" pos:column="70"/></operator> <literal type="number" pos:line="57" pos:column="71">0<pos:position pos:line="57" pos:column="72"/></literal></expr>)<pos:position pos:line="57" pos:column="73"/></condition><then pos:line="57" pos:column="73"> <block pos:line="57" pos:column="74">{
	  <expr_stmt><expr><call><name pos:line="58" pos:column="11">check_malloced_chunk<pos:position pos:line="58" pos:column="31"/></name><argument_list pos:line="58" pos:column="31">(<argument><expr><name pos:line="58" pos:column="32">ms<pos:position pos:line="58" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="36">mem<pos:position pos:line="58" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="41">nb<pos:position pos:line="58" pos:column="43"/></name></expr></argument>)<pos:position pos:line="58" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="45"/></expr_stmt>
	  <goto pos:line="59" pos:column="11">goto <name pos:line="59" pos:column="16">postaction<pos:position pos:line="59" pos:column="26"/></name>;<pos:position pos:line="59" pos:column="27"/></goto>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if></elseif></if>
      }<pos:position pos:line="61" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="62" pos:column="6"/></block></then>
    <elseif pos:line="63" pos:column="5">else <if pos:line="63" pos:column="10">if <condition pos:line="63" pos:column="13">(<expr><name pos:line="63" pos:column="14">bytes<pos:position pos:line="63" pos:column="19"/></name> <operator pos:line="63" pos:column="20">&gt;=<pos:position pos:line="63" pos:column="25"/></operator> <name pos:line="63" pos:column="23">MAX_REQUEST<pos:position pos:line="63" pos:column="34"/></name></expr>)<pos:position pos:line="63" pos:column="35"/></condition><then pos:line="63" pos:column="35">
      <block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="7">nb<pos:position pos:line="64" pos:column="9"/></name> <operator pos:line="64" pos:column="10">=<pos:position pos:line="64" pos:column="11"/></operator> <name pos:line="64" pos:column="12">MAX_SIZE_T<pos:position pos:line="64" pos:column="22"/></name></expr>;<pos:position pos:line="64" pos:column="23"/></expr_stmt></block></then></if></elseif> <comment type="block" pos:line="64" pos:column="24">/* Too big to allocate. Force failure (in sys alloc) */</comment>
    <else pos:line="65" pos:column="5">else <block pos:line="65" pos:column="10">{
      <expr_stmt><expr><name pos:line="66" pos:column="7">nb<pos:position pos:line="66" pos:column="9"/></name> <operator pos:line="66" pos:column="10">=<pos:position pos:line="66" pos:column="11"/></operator> <call><name pos:line="66" pos:column="12">pad_request<pos:position pos:line="66" pos:column="23"/></name><argument_list pos:line="66" pos:column="23">(<argument><expr><name pos:line="66" pos:column="24">bytes<pos:position pos:line="66" pos:column="29"/></name></expr></argument>)<pos:position pos:line="66" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="31"/></expr_stmt>
      <if pos:line="67" pos:column="7">if <condition pos:line="67" pos:column="10">(<expr><name><name pos:line="67" pos:column="11">ms<pos:position pos:line="67" pos:column="13"/></name><operator pos:line="67" pos:column="13">-&gt;<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="15">treemap<pos:position pos:line="67" pos:column="22"/></name></name> <operator pos:line="67" pos:column="23">!=<pos:position pos:line="67" pos:column="25"/></operator> <literal type="number" pos:line="67" pos:column="26">0<pos:position pos:line="67" pos:column="27"/></literal> <operator pos:line="67" pos:column="28">&amp;&amp;<pos:position pos:line="67" pos:column="38"/></operator> <operator pos:line="67" pos:column="31">(<pos:position pos:line="67" pos:column="32"/></operator><name pos:line="67" pos:column="32">mem<pos:position pos:line="67" pos:column="35"/></name> <operator pos:line="67" pos:column="36">=<pos:position pos:line="67" pos:column="37"/></operator> <call><name pos:line="67" pos:column="38">tmalloc_large<pos:position pos:line="67" pos:column="51"/></name><argument_list pos:line="67" pos:column="51">(<argument><expr><name pos:line="67" pos:column="52">ms<pos:position pos:line="67" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="56">nb<pos:position pos:line="67" pos:column="58"/></name></expr></argument>)<pos:position pos:line="67" pos:column="59"/></argument_list></call><operator pos:line="67" pos:column="59">)<pos:position pos:line="67" pos:column="60"/></operator> <operator pos:line="67" pos:column="61">!=<pos:position pos:line="67" pos:column="63"/></operator> <literal type="number" pos:line="67" pos:column="64">0<pos:position pos:line="67" pos:column="65"/></literal></expr>)<pos:position pos:line="67" pos:column="66"/></condition><then pos:line="67" pos:column="66"> <block pos:line="67" pos:column="67">{
	<expr_stmt><expr><call><name pos:line="68" pos:column="9">check_malloced_chunk<pos:position pos:line="68" pos:column="29"/></name><argument_list pos:line="68" pos:column="29">(<argument><expr><name pos:line="68" pos:column="30">ms<pos:position pos:line="68" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="34">mem<pos:position pos:line="68" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="39">nb<pos:position pos:line="68" pos:column="41"/></name></expr></argument>)<pos:position pos:line="68" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="43"/></expr_stmt>
	<goto pos:line="69" pos:column="9">goto <name pos:line="69" pos:column="14">postaction<pos:position pos:line="69" pos:column="24"/></name>;<pos:position pos:line="69" pos:column="25"/></goto>
      }<pos:position pos:line="70" pos:column="8"/></block></then></if>
    }<pos:position pos:line="71" pos:column="6"/></block></else></if>

    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name pos:line="73" pos:column="9">nb<pos:position pos:line="73" pos:column="11"/></name> <operator pos:line="73" pos:column="12">&lt;=<pos:position pos:line="73" pos:column="17"/></operator> <name><name pos:line="73" pos:column="15">ms<pos:position pos:line="73" pos:column="17"/></name><operator pos:line="73" pos:column="17">-&gt;<pos:position pos:line="73" pos:column="22"/></operator><name pos:line="73" pos:column="19">dvsize<pos:position pos:line="73" pos:column="25"/></name></name></expr>)<pos:position pos:line="73" pos:column="26"/></condition><then pos:line="73" pos:column="26"> <block pos:line="73" pos:column="27">{
      <decl_stmt><decl><type><name pos:line="74" pos:column="7">size_t<pos:position pos:line="74" pos:column="13"/></name></type> <name pos:line="74" pos:column="14">rsize<pos:position pos:line="74" pos:column="19"/></name> <init pos:line="74" pos:column="20">= <expr><name><name pos:line="74" pos:column="22">ms<pos:position pos:line="74" pos:column="24"/></name><operator pos:line="74" pos:column="24">-&gt;<pos:position pos:line="74" pos:column="29"/></operator><name pos:line="74" pos:column="26">dvsize<pos:position pos:line="74" pos:column="32"/></name></name> <operator pos:line="74" pos:column="33">-<pos:position pos:line="74" pos:column="34"/></operator> <name pos:line="74" pos:column="35">nb<pos:position pos:line="74" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="74" pos:column="38"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="75" pos:column="7">mchunkptr<pos:position pos:line="75" pos:column="16"/></name></type> <name pos:line="75" pos:column="17">p<pos:position pos:line="75" pos:column="18"/></name> <init pos:line="75" pos:column="19">= <expr><name><name pos:line="75" pos:column="21">ms<pos:position pos:line="75" pos:column="23"/></name><operator pos:line="75" pos:column="23">-&gt;<pos:position pos:line="75" pos:column="28"/></operator><name pos:line="75" pos:column="25">dv<pos:position pos:line="75" pos:column="27"/></name></name></expr></init></decl>;<pos:position pos:line="75" pos:column="28"/></decl_stmt>
      <if pos:line="76" pos:column="7">if <condition pos:line="76" pos:column="10">(<expr><name pos:line="76" pos:column="11">rsize<pos:position pos:line="76" pos:column="16"/></name> <operator pos:line="76" pos:column="17">&gt;=<pos:position pos:line="76" pos:column="22"/></operator> <name pos:line="76" pos:column="20">MIN_CHUNK_SIZE<pos:position pos:line="76" pos:column="34"/></name></expr>)<pos:position pos:line="76" pos:column="35"/></condition><then pos:line="76" pos:column="35"> <block pos:line="76" pos:column="36">{ <comment type="block" pos:line="76" pos:column="38">/* split dv */</comment>
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">mchunkptr<pos:position pos:line="77" pos:column="18"/></name></type> <name pos:line="77" pos:column="19">r<pos:position pos:line="77" pos:column="20"/></name> <init pos:line="77" pos:column="21">= <expr><name><name pos:line="77" pos:column="23">ms<pos:position pos:line="77" pos:column="25"/></name><operator pos:line="77" pos:column="25">-&gt;<pos:position pos:line="77" pos:column="30"/></operator><name pos:line="77" pos:column="27">dv<pos:position pos:line="77" pos:column="29"/></name></name> <operator pos:line="77" pos:column="30">=<pos:position pos:line="77" pos:column="31"/></operator> <call><name pos:line="77" pos:column="32">chunk_plus_offset<pos:position pos:line="77" pos:column="49"/></name><argument_list pos:line="77" pos:column="49">(<argument><expr><name pos:line="77" pos:column="50">p<pos:position pos:line="77" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="53">nb<pos:position pos:line="77" pos:column="55"/></name></expr></argument>)<pos:position pos:line="77" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="77" pos:column="57"/></decl_stmt>
	<expr_stmt><expr><name><name pos:line="78" pos:column="9">ms<pos:position pos:line="78" pos:column="11"/></name><operator pos:line="78" pos:column="11">-&gt;<pos:position pos:line="78" pos:column="16"/></operator><name pos:line="78" pos:column="13">dvsize<pos:position pos:line="78" pos:column="19"/></name></name> <operator pos:line="78" pos:column="20">=<pos:position pos:line="78" pos:column="21"/></operator> <name pos:line="78" pos:column="22">rsize<pos:position pos:line="78" pos:column="27"/></name></expr>;<pos:position pos:line="78" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="79" pos:column="9">set_size_and_pinuse_of_free_chunk<pos:position pos:line="79" pos:column="42"/></name><argument_list pos:line="79" pos:column="42">(<argument><expr><name pos:line="79" pos:column="43">r<pos:position pos:line="79" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="46">rsize<pos:position pos:line="79" pos:column="51"/></name></expr></argument>)<pos:position pos:line="79" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="80" pos:column="9">set_size_and_pinuse_of_inuse_chunk<pos:position pos:line="80" pos:column="43"/></name><argument_list pos:line="80" pos:column="43">(<argument><expr><name pos:line="80" pos:column="44">ms<pos:position pos:line="80" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="48">p<pos:position pos:line="80" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="51">nb<pos:position pos:line="80" pos:column="53"/></name></expr></argument>)<pos:position pos:line="80" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="55"/></expr_stmt>
      }<pos:position pos:line="81" pos:column="8"/></block></then>
      <else pos:line="82" pos:column="7">else <block pos:line="82" pos:column="12">{ <comment type="block" pos:line="82" pos:column="14">/* exhaust dv */</comment>
	<decl_stmt><decl><type><name pos:line="83" pos:column="9">size_t<pos:position pos:line="83" pos:column="15"/></name></type> <name pos:line="83" pos:column="16">dvs<pos:position pos:line="83" pos:column="19"/></name> <init pos:line="83" pos:column="20">= <expr><name><name pos:line="83" pos:column="22">ms<pos:position pos:line="83" pos:column="24"/></name><operator pos:line="83" pos:column="24">-&gt;<pos:position pos:line="83" pos:column="29"/></operator><name pos:line="83" pos:column="26">dvsize<pos:position pos:line="83" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="83" pos:column="33"/></decl_stmt>
	<expr_stmt><expr><name><name pos:line="84" pos:column="9">ms<pos:position pos:line="84" pos:column="11"/></name><operator pos:line="84" pos:column="11">-&gt;<pos:position pos:line="84" pos:column="16"/></operator><name pos:line="84" pos:column="13">dvsize<pos:position pos:line="84" pos:column="19"/></name></name> <operator pos:line="84" pos:column="20">=<pos:position pos:line="84" pos:column="21"/></operator> <literal type="number" pos:line="84" pos:column="22">0<pos:position pos:line="84" pos:column="23"/></literal></expr>;<pos:position pos:line="84" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="85" pos:column="9">ms<pos:position pos:line="85" pos:column="11"/></name><operator pos:line="85" pos:column="11">-&gt;<pos:position pos:line="85" pos:column="16"/></operator><name pos:line="85" pos:column="13">dv<pos:position pos:line="85" pos:column="15"/></name></name> <operator pos:line="85" pos:column="16">=<pos:position pos:line="85" pos:column="17"/></operator> <literal type="number" pos:line="85" pos:column="18">0<pos:position pos:line="85" pos:column="19"/></literal></expr>;<pos:position pos:line="85" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="86" pos:column="9">set_inuse_and_pinuse<pos:position pos:line="86" pos:column="29"/></name><argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">ms<pos:position pos:line="86" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="34">p<pos:position pos:line="86" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="37">dvs<pos:position pos:line="86" pos:column="40"/></name></expr></argument>)<pos:position pos:line="86" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="42"/></expr_stmt>
      }<pos:position pos:line="87" pos:column="8"/></block></else></if>
      <expr_stmt><expr><name pos:line="88" pos:column="7">mem<pos:position pos:line="88" pos:column="10"/></name> <operator pos:line="88" pos:column="11">=<pos:position pos:line="88" pos:column="12"/></operator> <call><name pos:line="88" pos:column="13">chunk2mem<pos:position pos:line="88" pos:column="22"/></name><argument_list pos:line="88" pos:column="22">(<argument><expr><name pos:line="88" pos:column="23">p<pos:position pos:line="88" pos:column="24"/></name></expr></argument>)<pos:position pos:line="88" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="89" pos:column="7">check_malloced_chunk<pos:position pos:line="89" pos:column="27"/></name><argument_list pos:line="89" pos:column="27">(<argument><expr><name pos:line="89" pos:column="28">ms<pos:position pos:line="89" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="32">mem<pos:position pos:line="89" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="37">nb<pos:position pos:line="89" pos:column="39"/></name></expr></argument>)<pos:position pos:line="89" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="41"/></expr_stmt>
      <goto pos:line="90" pos:column="7">goto <name pos:line="90" pos:column="12">postaction<pos:position pos:line="90" pos:column="22"/></name>;<pos:position pos:line="90" pos:column="23"/></goto>
    }<pos:position pos:line="91" pos:column="6"/></block></then>

    <elseif pos:line="93" pos:column="5">else <if pos:line="93" pos:column="10">if <condition pos:line="93" pos:column="13">(<expr><name pos:line="93" pos:column="14">nb<pos:position pos:line="93" pos:column="16"/></name> <operator pos:line="93" pos:column="17">&lt;<pos:position pos:line="93" pos:column="21"/></operator> <name><name pos:line="93" pos:column="19">ms<pos:position pos:line="93" pos:column="21"/></name><operator pos:line="93" pos:column="21">-&gt;<pos:position pos:line="93" pos:column="26"/></operator><name pos:line="93" pos:column="23">topsize<pos:position pos:line="93" pos:column="30"/></name></name></expr>)<pos:position pos:line="93" pos:column="31"/></condition><then pos:line="93" pos:column="31"> <block pos:line="93" pos:column="32">{ <comment type="block" pos:line="93" pos:column="34">/* Split top */</comment>
      <decl_stmt><decl><type><name pos:line="94" pos:column="7">size_t<pos:position pos:line="94" pos:column="13"/></name></type> <name pos:line="94" pos:column="14">rsize<pos:position pos:line="94" pos:column="19"/></name> <init pos:line="94" pos:column="20">= <expr><name><name pos:line="94" pos:column="22">ms<pos:position pos:line="94" pos:column="24"/></name><operator pos:line="94" pos:column="24">-&gt;<pos:position pos:line="94" pos:column="29"/></operator><name pos:line="94" pos:column="26">topsize<pos:position pos:line="94" pos:column="33"/></name></name> <operator pos:line="94" pos:column="34">-=<pos:position pos:line="94" pos:column="36"/></operator> <name pos:line="94" pos:column="37">nb<pos:position pos:line="94" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="94" pos:column="40"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="95" pos:column="7">mchunkptr<pos:position pos:line="95" pos:column="16"/></name></type> <name pos:line="95" pos:column="17">p<pos:position pos:line="95" pos:column="18"/></name> <init pos:line="95" pos:column="19">= <expr><name><name pos:line="95" pos:column="21">ms<pos:position pos:line="95" pos:column="23"/></name><operator pos:line="95" pos:column="23">-&gt;<pos:position pos:line="95" pos:column="28"/></operator><name pos:line="95" pos:column="25">top<pos:position pos:line="95" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="95" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="96" pos:column="7">mchunkptr<pos:position pos:line="96" pos:column="16"/></name></type> <name pos:line="96" pos:column="17">r<pos:position pos:line="96" pos:column="18"/></name> <init pos:line="96" pos:column="19">= <expr><name><name pos:line="96" pos:column="21">ms<pos:position pos:line="96" pos:column="23"/></name><operator pos:line="96" pos:column="23">-&gt;<pos:position pos:line="96" pos:column="28"/></operator><name pos:line="96" pos:column="25">top<pos:position pos:line="96" pos:column="28"/></name></name> <operator pos:line="96" pos:column="29">=<pos:position pos:line="96" pos:column="30"/></operator> <call><name pos:line="96" pos:column="31">chunk_plus_offset<pos:position pos:line="96" pos:column="48"/></name><argument_list pos:line="96" pos:column="48">(<argument><expr><name pos:line="96" pos:column="49">p<pos:position pos:line="96" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="52">nb<pos:position pos:line="96" pos:column="54"/></name></expr></argument>)<pos:position pos:line="96" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="96" pos:column="56"/></decl_stmt>
      <expr_stmt><expr><name><name pos:line="97" pos:column="7">r<pos:position pos:line="97" pos:column="8"/></name><operator pos:line="97" pos:column="8">-&gt;<pos:position pos:line="97" pos:column="13"/></operator><name pos:line="97" pos:column="10">head<pos:position pos:line="97" pos:column="14"/></name></name> <operator pos:line="97" pos:column="15">=<pos:position pos:line="97" pos:column="16"/></operator> <name pos:line="97" pos:column="17">rsize<pos:position pos:line="97" pos:column="22"/></name> <operator pos:line="97" pos:column="23">|<pos:position pos:line="97" pos:column="24"/></operator> <name pos:line="97" pos:column="25">PINUSE_BIT<pos:position pos:line="97" pos:column="35"/></name></expr>;<pos:position pos:line="97" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="98" pos:column="7">set_size_and_pinuse_of_inuse_chunk<pos:position pos:line="98" pos:column="41"/></name><argument_list pos:line="98" pos:column="41">(<argument><expr><name pos:line="98" pos:column="42">ms<pos:position pos:line="98" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="46">p<pos:position pos:line="98" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="49">nb<pos:position pos:line="98" pos:column="51"/></name></expr></argument>)<pos:position pos:line="98" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><name pos:line="99" pos:column="7">mem<pos:position pos:line="99" pos:column="10"/></name> <operator pos:line="99" pos:column="11">=<pos:position pos:line="99" pos:column="12"/></operator> <call><name pos:line="99" pos:column="13">chunk2mem<pos:position pos:line="99" pos:column="22"/></name><argument_list pos:line="99" pos:column="22">(<argument><expr><name pos:line="99" pos:column="23">p<pos:position pos:line="99" pos:column="24"/></name></expr></argument>)<pos:position pos:line="99" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="100" pos:column="7">check_top_chunk<pos:position pos:line="100" pos:column="22"/></name><argument_list pos:line="100" pos:column="22">(<argument><expr><name pos:line="100" pos:column="23">ms<pos:position pos:line="100" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="27">ms<pos:position pos:line="100" pos:column="29"/></name><operator pos:line="100" pos:column="29">-&gt;<pos:position pos:line="100" pos:column="34"/></operator><name pos:line="100" pos:column="31">top<pos:position pos:line="100" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="101" pos:column="7">check_malloced_chunk<pos:position pos:line="101" pos:column="27"/></name><argument_list pos:line="101" pos:column="27">(<argument><expr><name pos:line="101" pos:column="28">ms<pos:position pos:line="101" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="32">mem<pos:position pos:line="101" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="37">nb<pos:position pos:line="101" pos:column="39"/></name></expr></argument>)<pos:position pos:line="101" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="41"/></expr_stmt>
      <goto pos:line="102" pos:column="7">goto <name pos:line="102" pos:column="12">postaction<pos:position pos:line="102" pos:column="22"/></name>;<pos:position pos:line="102" pos:column="23"/></goto>
    }<pos:position pos:line="103" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="105" pos:column="5">mem<pos:position pos:line="105" pos:column="8"/></name> <operator pos:line="105" pos:column="9">=<pos:position pos:line="105" pos:column="10"/></operator> <call><name pos:line="105" pos:column="11">sys_alloc<pos:position pos:line="105" pos:column="20"/></name><argument_list pos:line="105" pos:column="20">(<argument><expr><name pos:line="105" pos:column="21">ms<pos:position pos:line="105" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="25">nb<pos:position pos:line="105" pos:column="27"/></name></expr></argument>)<pos:position pos:line="105" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="29"/></expr_stmt>

  <label><name pos:line="107" pos:column="3">postaction<pos:position pos:line="107" pos:column="13"/></name>:<pos:position pos:line="107" pos:column="14"/></label>
    <expr_stmt><expr><call><name pos:line="108" pos:column="5">POSTACTION<pos:position pos:line="108" pos:column="15"/></name><argument_list pos:line="108" pos:column="15">(<argument><expr><name pos:line="108" pos:column="16">ms<pos:position pos:line="108" pos:column="18"/></name></expr></argument>)<pos:position pos:line="108" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="20"/></expr_stmt>
    <return pos:line="109" pos:column="5">return <expr><name pos:line="109" pos:column="12">mem<pos:position pos:line="109" pos:column="15"/></name></expr>;<pos:position pos:line="109" pos:column="16"/></return>
  }<pos:position pos:line="110" pos:column="4"/></block></then></if>

  <return pos:line="112" pos:column="3">return <expr><literal type="number" pos:line="112" pos:column="10">0<pos:position pos:line="112" pos:column="11"/></literal></expr>;<pos:position pos:line="112" pos:column="12"/></return>
}<pos:position pos:line="113" pos:column="2"/></block></function></unit>
