<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5770_git-2.7.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_for_each_reflog<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">strbuf<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">name<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">each_ref_fn<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">fn<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">void<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">cb_data<pos:position pos:line="1" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="82"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">DIR<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type><name pos:line="3" pos:column="14">d<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><call><name pos:line="3" pos:column="18">opendir<pos:position pos:line="3" pos:column="25"/></name><argument_list pos:line="3" pos:column="25">(<argument><expr><call><name pos:line="3" pos:column="26">git_path<pos:position pos:line="3" pos:column="34"/></name><argument_list pos:line="3" pos:column="34">(<argument><expr><literal type="string" pos:line="3" pos:column="35">"logs/%s"<pos:position pos:line="3" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="3" pos:column="46">name<pos:position pos:line="3" pos:column="50"/></name><operator pos:line="3" pos:column="50">-&gt;<pos:position pos:line="3" pos:column="55"/></operator><name pos:line="3" pos:column="52">buf<pos:position pos:line="3" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="3" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">retval<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><literal type="number" pos:line="4" pos:column="22">0<pos:position pos:line="4" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">dirent<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">de<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">oldlen<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><name><name pos:line="6" pos:column="22">name<pos:position pos:line="6" pos:column="26"/></name><operator pos:line="6" pos:column="26">-&gt;<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="28">len<pos:position pos:line="6" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">d<pos:position pos:line="8" pos:column="15"/></name></expr>)<pos:position pos:line="8" pos:column="16"/></condition><then pos:line="8" pos:column="16">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><ternary><condition><expr><name><name pos:line="9" pos:column="24">name<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">len<pos:position pos:line="9" pos:column="33"/></name></name></expr> ?<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35"> <expr><name pos:line="9" pos:column="36">errno<pos:position pos:line="9" pos:column="41"/></name></expr> <pos:position pos:line="9" pos:column="42"/></then><else pos:line="9" pos:column="42">: <expr><literal type="number" pos:line="9" pos:column="44">0<pos:position pos:line="9" pos:column="45"/></literal></expr></else></ternary></expr>;<pos:position pos:line="9" pos:column="46"/></return></block></then></if>

	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><operator pos:line="11" pos:column="16">(<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">de<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">=<pos:position pos:line="11" pos:column="21"/></operator> <call><name pos:line="11" pos:column="22">readdir<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">d<pos:position pos:line="11" pos:column="31"/></name></expr></argument>)<pos:position pos:line="11" pos:column="32"/></argument_list></call><operator pos:line="11" pos:column="32">)<pos:position pos:line="11" pos:column="33"/></operator> <operator pos:line="11" pos:column="34">!=<pos:position pos:line="11" pos:column="36"/></operator> <name pos:line="11" pos:column="37">NULL<pos:position pos:line="11" pos:column="41"/></name></expr>)<pos:position pos:line="11" pos:column="42"/></condition> <block pos:line="11" pos:column="43">{
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">struct<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">stat<pos:position pos:line="12" pos:column="28"/></name></name></type> <name pos:line="12" pos:column="29">st<pos:position pos:line="12" pos:column="31"/></name></decl>;<pos:position pos:line="12" pos:column="32"/></decl_stmt>

		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name><name pos:line="14" pos:column="21">de<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">-&gt;<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="25">d_name<pos:position pos:line="14" pos:column="31"/></name><index pos:line="14" pos:column="31">[<expr><literal type="number" pos:line="14" pos:column="32">0<pos:position pos:line="14" pos:column="33"/></literal></expr>]<pos:position pos:line="14" pos:column="34"/></index></name> <operator pos:line="14" pos:column="35">==<pos:position pos:line="14" pos:column="37"/></operator> <literal type="char" pos:line="14" pos:column="38">'.'<pos:position pos:line="14" pos:column="41"/></literal></expr>)<pos:position pos:line="14" pos:column="42"/></condition><then pos:line="14" pos:column="42">
			<block type="pseudo"><continue pos:line="15" pos:column="25">continue;<pos:position pos:line="15" pos:column="34"/></continue></block></then></if>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">ends_with<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name><name pos:line="16" pos:column="31">de<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">-&gt;<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="35">d_name<pos:position pos:line="16" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="43">".lock"<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="52"/></condition><then pos:line="16" pos:column="52">
			<block type="pseudo"><continue pos:line="17" pos:column="25">continue;<pos:position pos:line="17" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">strbuf_addstr<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">name<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="37">de<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">d_name<pos:position pos:line="18" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="49"/></expr_stmt>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><call><name pos:line="19" pos:column="21">stat<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><call><name pos:line="19" pos:column="26">git_path<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><literal type="string" pos:line="19" pos:column="35">"logs/%s"<pos:position pos:line="19" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="46">name<pos:position pos:line="19" pos:column="50"/></name><operator pos:line="19" pos:column="50">-&gt;<pos:position pos:line="19" pos:column="55"/></operator><name pos:line="19" pos:column="52">buf<pos:position pos:line="19" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="19" pos:column="58">&amp;<pos:position pos:line="19" pos:column="63"/></operator><name pos:line="19" pos:column="59">st<pos:position pos:line="19" pos:column="61"/></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call> <operator pos:line="19" pos:column="63">&lt;<pos:position pos:line="19" pos:column="67"/></operator> <literal type="number" pos:line="19" pos:column="65">0<pos:position pos:line="19" pos:column="66"/></literal></expr>)<pos:position pos:line="19" pos:column="67"/></condition><then pos:line="19" pos:column="67"> <block pos:line="19" pos:column="68">{
			<empty_stmt pos:line="20" pos:column="25">;<pos:position pos:line="20" pos:column="26"/></empty_stmt> <comment type="block" pos:line="20" pos:column="27">/* silently ignore */</comment>
		}<pos:position pos:line="21" pos:column="18"/></block></then> <else pos:line="21" pos:column="19">else <block pos:line="21" pos:column="24">{
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><call><name pos:line="22" pos:column="29">S_ISDIR<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><name><name pos:line="22" pos:column="37">st<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">.<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="40">st_mode<pos:position pos:line="22" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="49"/></condition><then pos:line="22" pos:column="49"> <block pos:line="22" pos:column="50">{
				<expr_stmt><expr><call><name pos:line="23" pos:column="33">strbuf_addch<pos:position pos:line="23" pos:column="45"/></name><argument_list pos:line="23" pos:column="45">(<argument><expr><name pos:line="23" pos:column="46">name<pos:position pos:line="23" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="52">'/'<pos:position pos:line="23" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><name pos:line="24" pos:column="33">retval<pos:position pos:line="24" pos:column="39"/></name> <operator pos:line="24" pos:column="40">=<pos:position pos:line="24" pos:column="41"/></operator> <call><name pos:line="24" pos:column="42">do_for_each_reflog<pos:position pos:line="24" pos:column="60"/></name><argument_list pos:line="24" pos:column="60">(<argument><expr><name pos:line="24" pos:column="61">name<pos:position pos:line="24" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="67">fn<pos:position pos:line="24" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="71">cb_data<pos:position pos:line="24" pos:column="78"/></name></expr></argument>)<pos:position pos:line="24" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="80"/></expr_stmt>
			}<pos:position pos:line="25" pos:column="26"/></block></then> <else pos:line="25" pos:column="27">else <block pos:line="25" pos:column="32">{
				<decl_stmt><decl><type><name><name pos:line="26" pos:column="33">struct<pos:position pos:line="26" pos:column="39"/></name> <name pos:line="26" pos:column="40">object_id<pos:position pos:line="26" pos:column="49"/></name></name></type> <name pos:line="26" pos:column="50">oid<pos:position pos:line="26" pos:column="53"/></name></decl>;<pos:position pos:line="26" pos:column="54"/></decl_stmt>

				<if pos:line="28" pos:column="33">if <condition pos:line="28" pos:column="36">(<expr><call><name pos:line="28" pos:column="37">read_ref_full<pos:position pos:line="28" pos:column="50"/></name><argument_list pos:line="28" pos:column="50">(<argument><expr><name><name pos:line="28" pos:column="51">name<pos:position pos:line="28" pos:column="55"/></name><operator pos:line="28" pos:column="55">-&gt;<pos:position pos:line="28" pos:column="60"/></operator><name pos:line="28" pos:column="57">buf<pos:position pos:line="28" pos:column="60"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="62">0<pos:position pos:line="28" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="65">oid<pos:position pos:line="28" pos:column="68"/></name><operator pos:line="28" pos:column="68">.<pos:position pos:line="28" pos:column="69"/></operator><name pos:line="28" pos:column="69">hash<pos:position pos:line="28" pos:column="73"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="75">NULL<pos:position pos:line="28" pos:column="79"/></name></expr></argument>)<pos:position pos:line="28" pos:column="80"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="81"/></condition><then pos:line="28" pos:column="81">
					<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="41">retval<pos:position pos:line="29" pos:column="47"/></name> <operator pos:line="29" pos:column="48">=<pos:position pos:line="29" pos:column="49"/></operator> <call><name pos:line="29" pos:column="50">error<pos:position pos:line="29" pos:column="55"/></name><argument_list pos:line="29" pos:column="55">(<argument><expr><literal type="string" pos:line="29" pos:column="56">"bad ref for %s"<pos:position pos:line="29" pos:column="72"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="74">name<pos:position pos:line="29" pos:column="78"/></name><operator pos:line="29" pos:column="78">-&gt;<pos:position pos:line="29" pos:column="83"/></operator><name pos:line="29" pos:column="80">buf<pos:position pos:line="29" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="85"/></expr_stmt></block></then>
				<else pos:line="30" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="41">retval<pos:position pos:line="31" pos:column="47"/></name> <operator pos:line="31" pos:column="48">=<pos:position pos:line="31" pos:column="49"/></operator> <call><name pos:line="31" pos:column="50">fn<pos:position pos:line="31" pos:column="52"/></name><argument_list pos:line="31" pos:column="52">(<argument><expr><name><name pos:line="31" pos:column="53">name<pos:position pos:line="31" pos:column="57"/></name><operator pos:line="31" pos:column="57">-&gt;<pos:position pos:line="31" pos:column="62"/></operator><name pos:line="31" pos:column="59">buf<pos:position pos:line="31" pos:column="62"/></name></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="64">&amp;<pos:position pos:line="31" pos:column="69"/></operator><name pos:line="31" pos:column="65">oid<pos:position pos:line="31" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="70">0<pos:position pos:line="31" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="73">cb_data<pos:position pos:line="31" pos:column="80"/></name></expr></argument>)<pos:position pos:line="31" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="82"/></expr_stmt></block></else></if>
			}<pos:position pos:line="32" pos:column="26"/></block></else></if>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">retval<pos:position pos:line="33" pos:column="35"/></name></expr>)<pos:position pos:line="33" pos:column="36"/></condition><then pos:line="33" pos:column="36">
				<block type="pseudo"><break pos:line="34" pos:column="33">break;<pos:position pos:line="34" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="35" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">strbuf_setlen<pos:position pos:line="36" pos:column="30"/></name><argument_list pos:line="36" pos:column="30">(<argument><expr><name pos:line="36" pos:column="31">name<pos:position pos:line="36" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="37">oldlen<pos:position pos:line="36" pos:column="43"/></name></expr></argument>)<pos:position pos:line="36" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">closedir<pos:position pos:line="38" pos:column="17"/></name><argument_list pos:line="38" pos:column="17">(<argument><expr><name pos:line="38" pos:column="18">d<pos:position pos:line="38" pos:column="19"/></name></expr></argument>)<pos:position pos:line="38" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt>
	<return pos:line="39" pos:column="9">return <expr><name pos:line="39" pos:column="16">retval<pos:position pos:line="39" pos:column="22"/></name></expr>;<pos:position pos:line="39" pos:column="23"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
