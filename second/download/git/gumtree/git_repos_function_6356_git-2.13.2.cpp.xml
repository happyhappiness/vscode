<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6356_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">find_beginning_of_line<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">bob<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">scan<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<while pos:line="3" pos:column="9">while <condition pos:line="3" pos:column="15">(<expr><name pos:line="3" pos:column="16">bob<pos:position pos:line="3" pos:column="19"/></name> <operator pos:line="3" pos:column="20">&lt;<pos:position pos:line="3" pos:column="24"/></operator> <name pos:line="3" pos:column="22">scan<pos:position pos:line="3" pos:column="26"/></name> <operator pos:line="3" pos:column="27">&amp;&amp;<pos:position pos:line="3" pos:column="37"/></operator> <operator pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></operator><operator pos:line="3" pos:column="31">(<pos:position pos:line="3" pos:column="32"/></operator><operator pos:line="3" pos:column="32">--<pos:position pos:line="3" pos:column="34"/></operator><name pos:line="3" pos:column="34">scan<pos:position pos:line="3" pos:column="38"/></name><operator pos:line="3" pos:column="38">)<pos:position pos:line="3" pos:column="39"/></operator> <operator pos:line="3" pos:column="40">!=<pos:position pos:line="3" pos:column="42"/></operator> <literal type="char" pos:line="3" pos:column="43">'\n'<pos:position pos:line="3" pos:column="47"/></literal></expr>)<pos:position pos:line="3" pos:column="48"/></condition>
		<block type="pseudo"><empty_stmt pos:line="4" pos:column="17">;<pos:position pos:line="4" pos:column="18"/></empty_stmt></block></while> <comment type="block" pos:line="4" pos:column="19">/* keep scanning backwards */</comment>
	<comment type="block" pos:line="5" pos:column="9">/*
	 * Return either beginning of the buffer, or LF at the end of
	 * the previous line.
	 */</comment>
	<return pos:line="9" pos:column="9">return <expr><name pos:line="9" pos:column="16">scan<pos:position pos:line="9" pos:column="20"/></name></expr>;<pos:position pos:line="9" pos:column="21"/></return>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
