<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7021_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">calc_eclosure_iter<pos:position pos:line="2" pos:column="19"/></name> <parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">re_node_set<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">new_set<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">re_dfa_t<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">dfa<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="58">int<pos:position pos:line="2" pos:column="61"/></name></type> <name pos:line="2" pos:column="62">node<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="68">int<pos:position pos:line="2" pos:column="71"/></name></type> <name pos:line="2" pos:column="72">root<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="77"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">reg_errcode_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">err<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">i<pos:position pos:line="5" pos:column="8"/></name></decl>;<pos:position pos:line="5" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">re_node_set<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">eclosure<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">ret<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">incomplete<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><literal type="number" pos:line="8" pos:column="20">0<pos:position pos:line="8" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  <expr_stmt><expr><name pos:line="9" pos:column="3">err<pos:position pos:line="9" pos:column="6"/></name> <operator pos:line="9" pos:column="7">=<pos:position pos:line="9" pos:column="8"/></operator> <call><name pos:line="9" pos:column="9">re_node_set_alloc<pos:position pos:line="9" pos:column="26"/></name> <argument_list pos:line="9" pos:column="27">(<argument><expr><operator pos:line="9" pos:column="28">&amp;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="29">eclosure<pos:position pos:line="9" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="39">dfa<pos:position pos:line="9" pos:column="42"/></name><operator pos:line="9" pos:column="42">-&gt;<pos:position pos:line="9" pos:column="47"/></operator><name pos:line="9" pos:column="44">edests<pos:position pos:line="9" pos:column="50"/></name><index pos:line="9" pos:column="50">[<expr><name pos:line="9" pos:column="51">node<pos:position pos:line="9" pos:column="55"/></name></expr>]<pos:position pos:line="9" pos:column="56"/></index></name><operator pos:line="9" pos:column="56">.<pos:position pos:line="9" pos:column="57"/></operator><name pos:line="9" pos:column="57">nelem<pos:position pos:line="9" pos:column="62"/></name> <operator pos:line="9" pos:column="63">+<pos:position pos:line="9" pos:column="64"/></operator> <literal type="number" pos:line="9" pos:column="65">1<pos:position pos:line="9" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="68"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><call><name pos:line="10" pos:column="7">BE<pos:position pos:line="10" pos:column="9"/></name> <argument_list pos:line="10" pos:column="10">(<argument><expr><name pos:line="10" pos:column="11">err<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">!=<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">REG_NOERROR<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="31">0<pos:position pos:line="10" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">err<pos:position pos:line="11" pos:column="15"/></name></expr>;<pos:position pos:line="11" pos:column="16"/></return></block></then></if>

  <comment type="block" pos:line="13" pos:column="3">/* This indicates that we are calculating this node now.
     We reference this value to avoid infinite loop.  */</comment>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">dfa<pos:position pos:line="15" pos:column="6"/></name><operator pos:line="15" pos:column="6">-&gt;<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="8">eclosures<pos:position pos:line="15" pos:column="17"/></name><index pos:line="15" pos:column="17">[<expr><name pos:line="15" pos:column="18">node<pos:position pos:line="15" pos:column="22"/></name></expr>]<pos:position pos:line="15" pos:column="23"/></index></name><operator pos:line="15" pos:column="23">.<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="24">nelem<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">=<pos:position pos:line="15" pos:column="31"/></operator> <operator pos:line="15" pos:column="32">-<pos:position pos:line="15" pos:column="33"/></operator><literal type="number" pos:line="15" pos:column="33">1<pos:position pos:line="15" pos:column="34"/></literal></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>

  <comment type="block" pos:line="17" pos:column="3">/* If the current node has constraints, duplicate all nodes
     since they must inherit the constraints.  */</comment>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name><name pos:line="19" pos:column="7">dfa<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">-&gt;<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="12">nodes<pos:position pos:line="19" pos:column="17"/></name><index pos:line="19" pos:column="17">[<expr><name pos:line="19" pos:column="18">node<pos:position pos:line="19" pos:column="22"/></name></expr>]<pos:position pos:line="19" pos:column="23"/></index></name><operator pos:line="19" pos:column="23">.<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="24">constraint<pos:position pos:line="19" pos:column="34"/></name>
      <operator pos:line="20" pos:column="7">&amp;&amp;<pos:position pos:line="20" pos:column="17"/></operator> <name><name pos:line="20" pos:column="10">dfa<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">-&gt;<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="15">edests<pos:position pos:line="20" pos:column="21"/></name><index pos:line="20" pos:column="21">[<expr><name pos:line="20" pos:column="22">node<pos:position pos:line="20" pos:column="26"/></name></expr>]<pos:position pos:line="20" pos:column="27"/></index></name><operator pos:line="20" pos:column="27">.<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="28">nelem<pos:position pos:line="20" pos:column="33"/></name>
      <operator pos:line="21" pos:column="7">&amp;&amp;<pos:position pos:line="21" pos:column="17"/></operator> <operator pos:line="21" pos:column="10">!<pos:position pos:line="21" pos:column="11"/></operator><name><name pos:line="21" pos:column="11">dfa<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">nodes<pos:position pos:line="21" pos:column="21"/></name><index pos:line="21" pos:column="21">[<expr><name><name pos:line="21" pos:column="22">dfa<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">-&gt;<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="27">edests<pos:position pos:line="21" pos:column="33"/></name><index pos:line="21" pos:column="33">[<expr><name pos:line="21" pos:column="34">node<pos:position pos:line="21" pos:column="38"/></name></expr>]<pos:position pos:line="21" pos:column="39"/></index></name><operator pos:line="21" pos:column="39">.<pos:position pos:line="21" pos:column="40"/></operator><name><name pos:line="21" pos:column="40">elems<pos:position pos:line="21" pos:column="45"/></name><index pos:line="21" pos:column="45">[<expr><literal type="number" pos:line="21" pos:column="46">0<pos:position pos:line="21" pos:column="47"/></literal></expr>]<pos:position pos:line="21" pos:column="48"/></index></name></expr>]<pos:position pos:line="21" pos:column="49"/></index></name><operator pos:line="21" pos:column="49">.<pos:position pos:line="21" pos:column="50"/></operator><name pos:line="21" pos:column="50">duplicated<pos:position pos:line="21" pos:column="60"/></name></expr>)<pos:position pos:line="21" pos:column="61"/></condition><then pos:line="21" pos:column="61">
    <block pos:line="22" pos:column="5">{
      <expr_stmt><expr><name pos:line="23" pos:column="7">err<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <call><name pos:line="23" pos:column="13">duplicate_node_closure<pos:position pos:line="23" pos:column="35"/></name> <argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">dfa<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="42">node<pos:position pos:line="23" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="48">node<pos:position pos:line="23" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="54">node<pos:position pos:line="23" pos:column="58"/></name></expr></argument>,
				    <argument><expr><name><name pos:line="24" pos:column="37">dfa<pos:position pos:line="24" pos:column="40"/></name><operator pos:line="24" pos:column="40">-&gt;<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="42">nodes<pos:position pos:line="24" pos:column="47"/></name><index pos:line="24" pos:column="47">[<expr><name pos:line="24" pos:column="48">node<pos:position pos:line="24" pos:column="52"/></name></expr>]<pos:position pos:line="24" pos:column="53"/></index></name><operator pos:line="24" pos:column="53">.<pos:position pos:line="24" pos:column="54"/></operator><name pos:line="24" pos:column="54">constraint<pos:position pos:line="24" pos:column="64"/></name></expr></argument>)<pos:position pos:line="24" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="66"/></expr_stmt>
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><call><name pos:line="25" pos:column="11">BE<pos:position pos:line="25" pos:column="13"/></name> <argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">err<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">!=<pos:position pos:line="25" pos:column="21"/></operator> <name pos:line="25" pos:column="22">REG_NOERROR<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="35">0<pos:position pos:line="25" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="38"/></condition><then pos:line="25" pos:column="38">
	<block type="pseudo"><return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">err<pos:position pos:line="26" pos:column="19"/></name></expr>;<pos:position pos:line="26" pos:column="20"/></return></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="29" pos:column="3">/* Expand each epsilon destination nodes.  */</comment>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><call><name pos:line="30" pos:column="7">IS_EPSILON_NODE<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><name><name pos:line="30" pos:column="23">dfa<pos:position pos:line="30" pos:column="26"/></name><operator pos:line="30" pos:column="26">-&gt;<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="28">nodes<pos:position pos:line="30" pos:column="33"/></name><index pos:line="30" pos:column="33">[<expr><name pos:line="30" pos:column="34">node<pos:position pos:line="30" pos:column="38"/></name></expr>]<pos:position pos:line="30" pos:column="39"/></index></name><operator pos:line="30" pos:column="39">.<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="40">type<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="46"/></condition><then pos:line="30" pos:column="46">
    <block type="pseudo"><for pos:line="31" pos:column="5">for <control pos:line="31" pos:column="9">(<init><expr><name pos:line="31" pos:column="10">i<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <literal type="number" pos:line="31" pos:column="14">0<pos:position pos:line="31" pos:column="15"/></literal></expr>;<pos:position pos:line="31" pos:column="16"/></init> <condition><expr><name pos:line="31" pos:column="17">i<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">&lt;<pos:position pos:line="31" pos:column="23"/></operator> <name><name pos:line="31" pos:column="21">dfa<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">-&gt;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="26">edests<pos:position pos:line="31" pos:column="32"/></name><index pos:line="31" pos:column="32">[<expr><name pos:line="31" pos:column="33">node<pos:position pos:line="31" pos:column="37"/></name></expr>]<pos:position pos:line="31" pos:column="38"/></index></name><operator pos:line="31" pos:column="38">.<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="39">nelem<pos:position pos:line="31" pos:column="44"/></name></expr>;<pos:position pos:line="31" pos:column="45"/></condition> <incr><expr><operator pos:line="31" pos:column="46">++<pos:position pos:line="31" pos:column="48"/></operator><name pos:line="31" pos:column="48">i<pos:position pos:line="31" pos:column="49"/></name></expr></incr>)<pos:position pos:line="31" pos:column="50"/></control>
      <block pos:line="32" pos:column="7">{
	<decl_stmt><decl><type><name pos:line="33" pos:column="9">re_node_set<pos:position pos:line="33" pos:column="20"/></name></type> <name pos:line="33" pos:column="21">eclosure_elem<pos:position pos:line="33" pos:column="34"/></name></decl>;<pos:position pos:line="33" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="34" pos:column="9">int<pos:position pos:line="34" pos:column="12"/></name></type> <name pos:line="34" pos:column="13">edest<pos:position pos:line="34" pos:column="18"/></name> <init pos:line="34" pos:column="19">= <expr><name><name pos:line="34" pos:column="21">dfa<pos:position pos:line="34" pos:column="24"/></name><operator pos:line="34" pos:column="24">-&gt;<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="26">edests<pos:position pos:line="34" pos:column="32"/></name><index pos:line="34" pos:column="32">[<expr><name pos:line="34" pos:column="33">node<pos:position pos:line="34" pos:column="37"/></name></expr>]<pos:position pos:line="34" pos:column="38"/></index></name><operator pos:line="34" pos:column="38">.<pos:position pos:line="34" pos:column="39"/></operator><name><name pos:line="34" pos:column="39">elems<pos:position pos:line="34" pos:column="44"/></name><index pos:line="34" pos:column="44">[<expr><name pos:line="34" pos:column="45">i<pos:position pos:line="34" pos:column="46"/></name></expr>]<pos:position pos:line="34" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="34" pos:column="48"/></decl_stmt>
	<comment type="block" pos:line="35" pos:column="9">/* If calculating the epsilon closure of `edest' is in progress,
	   return intermediate result.  */</comment>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name><name pos:line="37" pos:column="13">dfa<pos:position pos:line="37" pos:column="16"/></name><operator pos:line="37" pos:column="16">-&gt;<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="18">eclosures<pos:position pos:line="37" pos:column="27"/></name><index pos:line="37" pos:column="27">[<expr><name pos:line="37" pos:column="28">edest<pos:position pos:line="37" pos:column="33"/></name></expr>]<pos:position pos:line="37" pos:column="34"/></index></name><operator pos:line="37" pos:column="34">.<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="35">nelem<pos:position pos:line="37" pos:column="40"/></name> <operator pos:line="37" pos:column="41">==<pos:position pos:line="37" pos:column="43"/></operator> <operator pos:line="37" pos:column="44">-<pos:position pos:line="37" pos:column="45"/></operator><literal type="number" pos:line="37" pos:column="45">1<pos:position pos:line="37" pos:column="46"/></literal></expr>)<pos:position pos:line="37" pos:column="47"/></condition><then pos:line="37" pos:column="47">
	  <block pos:line="38" pos:column="11">{
	    <expr_stmt><expr><name pos:line="39" pos:column="13">incomplete<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">=<pos:position pos:line="39" pos:column="25"/></operator> <literal type="number" pos:line="39" pos:column="26">1<pos:position pos:line="39" pos:column="27"/></literal></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt>
	    <continue pos:line="40" pos:column="13">continue;<pos:position pos:line="40" pos:column="22"/></continue>
	  }<pos:position pos:line="41" pos:column="12"/></block></then></if>
	<comment type="block" pos:line="42" pos:column="9">/* If we haven't calculated the epsilon closure of `edest' yet,
	   calculate now. Otherwise use calculated epsilon closure.  */</comment>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name><name pos:line="44" pos:column="13">dfa<pos:position pos:line="44" pos:column="16"/></name><operator pos:line="44" pos:column="16">-&gt;<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="18">eclosures<pos:position pos:line="44" pos:column="27"/></name><index pos:line="44" pos:column="27">[<expr><name pos:line="44" pos:column="28">edest<pos:position pos:line="44" pos:column="33"/></name></expr>]<pos:position pos:line="44" pos:column="34"/></index></name><operator pos:line="44" pos:column="34">.<pos:position pos:line="44" pos:column="35"/></operator><name pos:line="44" pos:column="35">nelem<pos:position pos:line="44" pos:column="40"/></name> <operator pos:line="44" pos:column="41">==<pos:position pos:line="44" pos:column="43"/></operator> <literal type="number" pos:line="44" pos:column="44">0<pos:position pos:line="44" pos:column="45"/></literal></expr>)<pos:position pos:line="44" pos:column="46"/></condition><then pos:line="44" pos:column="46">
	  <block pos:line="45" pos:column="11">{
	    <expr_stmt><expr><name pos:line="46" pos:column="13">err<pos:position pos:line="46" pos:column="16"/></name> <operator pos:line="46" pos:column="17">=<pos:position pos:line="46" pos:column="18"/></operator> <call><name pos:line="46" pos:column="19">calc_eclosure_iter<pos:position pos:line="46" pos:column="37"/></name> <argument_list pos:line="46" pos:column="38">(<argument><expr><operator pos:line="46" pos:column="39">&amp;<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="40">eclosure_elem<pos:position pos:line="46" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="55">dfa<pos:position pos:line="46" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="60">edest<pos:position pos:line="46" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="67">0<pos:position pos:line="46" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="70"/></expr_stmt>
	    <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><call><name pos:line="47" pos:column="17">BE<pos:position pos:line="47" pos:column="19"/></name> <argument_list pos:line="47" pos:column="20">(<argument><expr><name pos:line="47" pos:column="21">err<pos:position pos:line="47" pos:column="24"/></name> <operator pos:line="47" pos:column="25">!=<pos:position pos:line="47" pos:column="27"/></operator> <name pos:line="47" pos:column="28">REG_NOERROR<pos:position pos:line="47" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="41">0<pos:position pos:line="47" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="44"/></condition><then pos:line="47" pos:column="44">
	      <block type="pseudo"><return pos:line="48" pos:column="15">return <expr><name pos:line="48" pos:column="22">err<pos:position pos:line="48" pos:column="25"/></name></expr>;<pos:position pos:line="48" pos:column="26"/></return></block></then></if>
	  }<pos:position pos:line="49" pos:column="12"/></block></then>
	<else pos:line="50" pos:column="9">else
	  <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="11">eclosure_elem<pos:position pos:line="51" pos:column="24"/></name> <operator pos:line="51" pos:column="25">=<pos:position pos:line="51" pos:column="26"/></operator> <name><name pos:line="51" pos:column="27">dfa<pos:position pos:line="51" pos:column="30"/></name><operator pos:line="51" pos:column="30">-&gt;<pos:position pos:line="51" pos:column="35"/></operator><name pos:line="51" pos:column="32">eclosures<pos:position pos:line="51" pos:column="41"/></name><index pos:line="51" pos:column="41">[<expr><name pos:line="51" pos:column="42">edest<pos:position pos:line="51" pos:column="47"/></name></expr>]<pos:position pos:line="51" pos:column="48"/></index></name></expr>;<pos:position pos:line="51" pos:column="49"/></expr_stmt></block></else></if>
	<comment type="block" pos:line="52" pos:column="9">/* Merge the epsilon closure of `edest'.  */</comment>
	<expr_stmt><expr><name pos:line="53" pos:column="9">err<pos:position pos:line="53" pos:column="12"/></name> <operator pos:line="53" pos:column="13">=<pos:position pos:line="53" pos:column="14"/></operator> <call><name pos:line="53" pos:column="15">re_node_set_merge<pos:position pos:line="53" pos:column="32"/></name> <argument_list pos:line="53" pos:column="33">(<argument><expr><operator pos:line="53" pos:column="34">&amp;<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="35">eclosure<pos:position pos:line="53" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="45">&amp;<pos:position pos:line="53" pos:column="50"/></operator><name pos:line="53" pos:column="46">eclosure_elem<pos:position pos:line="53" pos:column="59"/></name></expr></argument>)<pos:position pos:line="53" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="61"/></expr_stmt>
	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><call><name pos:line="54" pos:column="13">BE<pos:position pos:line="54" pos:column="15"/></name> <argument_list pos:line="54" pos:column="16">(<argument><expr><name pos:line="54" pos:column="17">err<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">!=<pos:position pos:line="54" pos:column="23"/></operator> <name pos:line="54" pos:column="24">REG_NOERROR<pos:position pos:line="54" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="37">0<pos:position pos:line="54" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="40"/></condition><then pos:line="54" pos:column="40">
	  <block type="pseudo"><return pos:line="55" pos:column="11">return <expr><name pos:line="55" pos:column="18">err<pos:position pos:line="55" pos:column="21"/></name></expr>;<pos:position pos:line="55" pos:column="22"/></return></block></then></if>
	<comment type="block" pos:line="56" pos:column="9">/* If the epsilon closure of `edest' is incomplete,
	   the epsilon closure of this node is also incomplete.  */</comment>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name><name pos:line="58" pos:column="13">dfa<pos:position pos:line="58" pos:column="16"/></name><operator pos:line="58" pos:column="16">-&gt;<pos:position pos:line="58" pos:column="21"/></operator><name pos:line="58" pos:column="18">eclosures<pos:position pos:line="58" pos:column="27"/></name><index pos:line="58" pos:column="27">[<expr><name pos:line="58" pos:column="28">edest<pos:position pos:line="58" pos:column="33"/></name></expr>]<pos:position pos:line="58" pos:column="34"/></index></name><operator pos:line="58" pos:column="34">.<pos:position pos:line="58" pos:column="35"/></operator><name pos:line="58" pos:column="35">nelem<pos:position pos:line="58" pos:column="40"/></name> <operator pos:line="58" pos:column="41">==<pos:position pos:line="58" pos:column="43"/></operator> <literal type="number" pos:line="58" pos:column="44">0<pos:position pos:line="58" pos:column="45"/></literal></expr>)<pos:position pos:line="58" pos:column="46"/></condition><then pos:line="58" pos:column="46">
	  <block pos:line="59" pos:column="11">{
	    <expr_stmt><expr><name pos:line="60" pos:column="13">incomplete<pos:position pos:line="60" pos:column="23"/></name> <operator pos:line="60" pos:column="24">=<pos:position pos:line="60" pos:column="25"/></operator> <literal type="number" pos:line="60" pos:column="26">1<pos:position pos:line="60" pos:column="27"/></literal></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="61" pos:column="13">re_node_set_free<pos:position pos:line="61" pos:column="29"/></name> <argument_list pos:line="61" pos:column="30">(<argument><expr><operator pos:line="61" pos:column="31">&amp;<pos:position pos:line="61" pos:column="36"/></operator><name pos:line="61" pos:column="32">eclosure_elem<pos:position pos:line="61" pos:column="45"/></name></expr></argument>)<pos:position pos:line="61" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="47"/></expr_stmt>
	  }<pos:position pos:line="62" pos:column="12"/></block></then></if>
      }<pos:position pos:line="63" pos:column="8"/></block></for></block></then></if>

  <comment type="block" pos:line="65" pos:column="3">/* An epsilon closure includes itself.  */</comment>
  <expr_stmt><expr><name pos:line="66" pos:column="3">ret<pos:position pos:line="66" pos:column="6"/></name> <operator pos:line="66" pos:column="7">=<pos:position pos:line="66" pos:column="8"/></operator> <call><name pos:line="66" pos:column="9">re_node_set_insert<pos:position pos:line="66" pos:column="27"/></name> <argument_list pos:line="66" pos:column="28">(<argument><expr><operator pos:line="66" pos:column="29">&amp;<pos:position pos:line="66" pos:column="34"/></operator><name pos:line="66" pos:column="30">eclosure<pos:position pos:line="66" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="40">node<pos:position pos:line="66" pos:column="44"/></name></expr></argument>)<pos:position pos:line="66" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="46"/></expr_stmt>
  <if pos:line="67" pos:column="3">if <condition pos:line="67" pos:column="6">(<expr><call><name pos:line="67" pos:column="7">BE<pos:position pos:line="67" pos:column="9"/></name> <argument_list pos:line="67" pos:column="10">(<argument><expr><name pos:line="67" pos:column="11">ret<pos:position pos:line="67" pos:column="14"/></name> <operator pos:line="67" pos:column="15">&lt;<pos:position pos:line="67" pos:column="19"/></operator> <literal type="number" pos:line="67" pos:column="17">0<pos:position pos:line="67" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="20">0<pos:position pos:line="67" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="23"/></condition><then pos:line="67" pos:column="23">
    <block type="pseudo"><return pos:line="68" pos:column="5">return <expr><name pos:line="68" pos:column="12">REG_ESPACE<pos:position pos:line="68" pos:column="22"/></name></expr>;<pos:position pos:line="68" pos:column="23"/></return></block></then></if>
  <if pos:line="69" pos:column="3">if <condition pos:line="69" pos:column="6">(<expr><name pos:line="69" pos:column="7">incomplete<pos:position pos:line="69" pos:column="17"/></name> <operator pos:line="69" pos:column="18">&amp;&amp;<pos:position pos:line="69" pos:column="28"/></operator> <operator pos:line="69" pos:column="21">!<pos:position pos:line="69" pos:column="22"/></operator><name pos:line="69" pos:column="22">root<pos:position pos:line="69" pos:column="26"/></name></expr>)<pos:position pos:line="69" pos:column="27"/></condition><then pos:line="69" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="70" pos:column="5">dfa<pos:position pos:line="70" pos:column="8"/></name><operator pos:line="70" pos:column="8">-&gt;<pos:position pos:line="70" pos:column="13"/></operator><name pos:line="70" pos:column="10">eclosures<pos:position pos:line="70" pos:column="19"/></name><index pos:line="70" pos:column="19">[<expr><name pos:line="70" pos:column="20">node<pos:position pos:line="70" pos:column="24"/></name></expr>]<pos:position pos:line="70" pos:column="25"/></index></name><operator pos:line="70" pos:column="25">.<pos:position pos:line="70" pos:column="26"/></operator><name pos:line="70" pos:column="26">nelem<pos:position pos:line="70" pos:column="31"/></name> <operator pos:line="70" pos:column="32">=<pos:position pos:line="70" pos:column="33"/></operator> <literal type="number" pos:line="70" pos:column="34">0<pos:position pos:line="70" pos:column="35"/></literal></expr>;<pos:position pos:line="70" pos:column="36"/></expr_stmt></block></then>
  <else pos:line="71" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="72" pos:column="5">dfa<pos:position pos:line="72" pos:column="8"/></name><operator pos:line="72" pos:column="8">-&gt;<pos:position pos:line="72" pos:column="13"/></operator><name pos:line="72" pos:column="10">eclosures<pos:position pos:line="72" pos:column="19"/></name><index pos:line="72" pos:column="19">[<expr><name pos:line="72" pos:column="20">node<pos:position pos:line="72" pos:column="24"/></name></expr>]<pos:position pos:line="72" pos:column="25"/></index></name> <operator pos:line="72" pos:column="26">=<pos:position pos:line="72" pos:column="27"/></operator> <name pos:line="72" pos:column="28">eclosure<pos:position pos:line="72" pos:column="36"/></name></expr>;<pos:position pos:line="72" pos:column="37"/></expr_stmt></block></else></if>
  <expr_stmt><expr><operator pos:line="73" pos:column="3">*<pos:position pos:line="73" pos:column="4"/></operator><name pos:line="73" pos:column="4">new_set<pos:position pos:line="73" pos:column="11"/></name> <operator pos:line="73" pos:column="12">=<pos:position pos:line="73" pos:column="13"/></operator> <name pos:line="73" pos:column="14">eclosure<pos:position pos:line="73" pos:column="22"/></name></expr>;<pos:position pos:line="73" pos:column="23"/></expr_stmt>
  <return pos:line="74" pos:column="3">return <expr><name pos:line="74" pos:column="10">REG_NOERROR<pos:position pos:line="74" pos:column="21"/></name></expr>;<pos:position pos:line="74" pos:column="22"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
