<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5603_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">fix_unresolved_deltas<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name><name pos:line="1" pos:column="35">struct<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">sha1file<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">f<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">ref_delta_entry<pos:position pos:line="3" pos:column="31"/></name></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier><modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">sorted_by_pos<pos:position pos:line="3" pos:column="47"/></name></decl>;<pos:position pos:line="3" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * Since many unresolved deltas may well be themselves base objects
	 * for more unresolved deltas, we really want to include the
	 * smallest number of base objects that would cover as much delta
	 * as possible by picking the
	 * trunc deltas first, allowing for other deltas to resolve without
	 * additional base objects.  Since most base objects are to be found
	 * before deltas depending on them, a good heuristic is to start
	 * resolving deltas in the same order as their position in the pack.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">ALLOC_ARRAY<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">sorted_by_pos<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="36">nr_ref_deltas<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="51"/></expr_stmt>
	<for pos:line="17" pos:column="9">for <control pos:line="17" pos:column="13">(<init><expr><name pos:line="17" pos:column="14">i<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">0<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></init> <condition><expr><name pos:line="17" pos:column="21">i<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">&lt;<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="25">nr_ref_deltas<pos:position pos:line="17" pos:column="38"/></name></expr>;<pos:position pos:line="17" pos:column="39"/></condition> <incr><expr><name pos:line="17" pos:column="40">i<pos:position pos:line="17" pos:column="41"/></name><operator pos:line="17" pos:column="41">++<pos:position pos:line="17" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="44"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="17">sorted_by_pos<pos:position pos:line="18" pos:column="30"/></name><index pos:line="18" pos:column="30">[<expr><name pos:line="18" pos:column="31">i<pos:position pos:line="18" pos:column="32"/></name></expr>]<pos:position pos:line="18" pos:column="33"/></index></name> <operator pos:line="18" pos:column="34">=<pos:position pos:line="18" pos:column="35"/></operator> <operator pos:line="18" pos:column="36">&amp;<pos:position pos:line="18" pos:column="41"/></operator><name><name pos:line="18" pos:column="37">ref_deltas<pos:position pos:line="18" pos:column="47"/></name><index pos:line="18" pos:column="47">[<expr><name pos:line="18" pos:column="48">i<pos:position pos:line="18" pos:column="49"/></name></expr>]<pos:position pos:line="18" pos:column="50"/></index></name></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">QSORT<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">sorted_by_pos<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="30">nr_ref_deltas<pos:position pos:line="19" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">delta_pos_compare<pos:position pos:line="19" pos:column="62"/></name></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="64"/></expr_stmt>

	<for pos:line="21" pos:column="9">for <control pos:line="21" pos:column="13">(<init><expr><name pos:line="21" pos:column="14">i<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <literal type="number" pos:line="21" pos:column="18">0<pos:position pos:line="21" pos:column="19"/></literal></expr>;<pos:position pos:line="21" pos:column="20"/></init> <condition><expr><name pos:line="21" pos:column="21">i<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">&lt;<pos:position pos:line="21" pos:column="27"/></operator> <name pos:line="21" pos:column="25">nr_ref_deltas<pos:position pos:line="21" pos:column="38"/></name></expr>;<pos:position pos:line="21" pos:column="39"/></condition> <incr><expr><name pos:line="21" pos:column="40">i<pos:position pos:line="21" pos:column="41"/></name><operator pos:line="21" pos:column="41">++<pos:position pos:line="21" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="44"/></control> <block pos:line="21" pos:column="45">{
		<decl_stmt><decl><type><name><name pos:line="22" pos:column="17">struct<pos:position pos:line="22" pos:column="23"/></name> <name pos:line="22" pos:column="24">ref_delta_entry<pos:position pos:line="22" pos:column="39"/></name></name> <modifier pos:line="22" pos:column="40">*<pos:position pos:line="22" pos:column="41"/></modifier></type><name pos:line="22" pos:column="41">d<pos:position pos:line="22" pos:column="42"/></name> <init pos:line="22" pos:column="43">= <expr><name><name pos:line="22" pos:column="45">sorted_by_pos<pos:position pos:line="22" pos:column="58"/></name><index pos:line="22" pos:column="58">[<expr><name pos:line="22" pos:column="59">i<pos:position pos:line="22" pos:column="60"/></name></expr>]<pos:position pos:line="22" pos:column="61"/></index></name></expr></init></decl>;<pos:position pos:line="22" pos:column="62"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="23" pos:column="17">enum<pos:position pos:line="23" pos:column="21"/></name> <name pos:line="23" pos:column="22">object_type<pos:position pos:line="23" pos:column="33"/></name></name></type> <name pos:line="23" pos:column="34">type<pos:position pos:line="23" pos:column="38"/></name></decl>;<pos:position pos:line="23" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="24" pos:column="17">struct<pos:position pos:line="24" pos:column="23"/></name> <name pos:line="24" pos:column="24">base_data<pos:position pos:line="24" pos:column="33"/></name></name> <modifier pos:line="24" pos:column="34">*<pos:position pos:line="24" pos:column="35"/></modifier></type><name pos:line="24" pos:column="35">base_obj<pos:position pos:line="24" pos:column="43"/></name> <init pos:line="24" pos:column="44">= <expr><call><name pos:line="24" pos:column="46">alloc_base_data<pos:position pos:line="24" pos:column="61"/></name><argument_list pos:line="24" pos:column="61">()<pos:position pos:line="24" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="64"/></decl_stmt>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name><name pos:line="26" pos:column="21">objects<pos:position pos:line="26" pos:column="28"/></name><index pos:line="26" pos:column="28">[<expr><name><name pos:line="26" pos:column="29">d<pos:position pos:line="26" pos:column="30"/></name><operator pos:line="26" pos:column="30">-&gt;<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="32">obj_no<pos:position pos:line="26" pos:column="38"/></name></name></expr>]<pos:position pos:line="26" pos:column="39"/></index></name><operator pos:line="26" pos:column="39">.<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="40">real_type<pos:position pos:line="26" pos:column="49"/></name> <operator pos:line="26" pos:column="50">!=<pos:position pos:line="26" pos:column="52"/></operator> <name pos:line="26" pos:column="53">OBJ_REF_DELTA<pos:position pos:line="26" pos:column="66"/></name></expr>)<pos:position pos:line="26" pos:column="67"/></condition><then pos:line="26" pos:column="67">
			<block type="pseudo"><continue pos:line="27" pos:column="25">continue;<pos:position pos:line="27" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">base_obj<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">-&gt;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="27">data<pos:position pos:line="28" pos:column="31"/></name></name> <operator pos:line="28" pos:column="32">=<pos:position pos:line="28" pos:column="33"/></operator> <call><name pos:line="28" pos:column="34">read_sha1_file<pos:position pos:line="28" pos:column="48"/></name><argument_list pos:line="28" pos:column="48">(<argument><expr><name><name pos:line="28" pos:column="49">d<pos:position pos:line="28" pos:column="50"/></name><operator pos:line="28" pos:column="50">-&gt;<pos:position pos:line="28" pos:column="55"/></operator><name pos:line="28" pos:column="52">sha1<pos:position pos:line="28" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="58">&amp;<pos:position pos:line="28" pos:column="63"/></operator><name pos:line="28" pos:column="59">type<pos:position pos:line="28" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="65">&amp;<pos:position pos:line="28" pos:column="70"/></operator><name><name pos:line="28" pos:column="66">base_obj<pos:position pos:line="28" pos:column="74"/></name><operator pos:line="28" pos:column="74">-&gt;<pos:position pos:line="28" pos:column="79"/></operator><name pos:line="28" pos:column="76">size<pos:position pos:line="28" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="82"/></expr_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">!<pos:position pos:line="29" pos:column="22"/></operator><name><name pos:line="29" pos:column="22">base_obj<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">-&gt;<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="32">data<pos:position pos:line="29" pos:column="36"/></name></name></expr>)<pos:position pos:line="29" pos:column="37"/></condition><then pos:line="29" pos:column="37">
			<block type="pseudo"><continue pos:line="30" pos:column="25">continue;<pos:position pos:line="30" pos:column="34"/></continue></block></then></if>

		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><call><name pos:line="32" pos:column="21">check_sha1_signature<pos:position pos:line="32" pos:column="41"/></name><argument_list pos:line="32" pos:column="41">(<argument><expr><name><name pos:line="32" pos:column="42">d<pos:position pos:line="32" pos:column="43"/></name><operator pos:line="32" pos:column="43">-&gt;<pos:position pos:line="32" pos:column="48"/></operator><name pos:line="32" pos:column="45">sha1<pos:position pos:line="32" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="51">base_obj<pos:position pos:line="32" pos:column="59"/></name><operator pos:line="32" pos:column="59">-&gt;<pos:position pos:line="32" pos:column="64"/></operator><name pos:line="32" pos:column="61">data<pos:position pos:line="32" pos:column="65"/></name></name></expr></argument>,
				<argument><expr><name><name pos:line="33" pos:column="33">base_obj<pos:position pos:line="33" pos:column="41"/></name><operator pos:line="33" pos:column="41">-&gt;<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="43">size<pos:position pos:line="33" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><typename pos:line="33" pos:column="49">typename<pos:position pos:line="33" pos:column="57"/></typename></name><operator pos:line="33" pos:column="57">(<pos:position pos:line="33" pos:column="58"/></operator><name pos:line="33" pos:column="58">type<pos:position pos:line="33" pos:column="62"/></name><operator pos:line="33" pos:column="62">)<pos:position pos:line="33" pos:column="63"/></operator></expr></argument>)<pos:position pos:line="33" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="65"/></condition><then pos:line="33" pos:column="65">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">die<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><call><name pos:line="34" pos:column="29">_<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><literal type="string" pos:line="34" pos:column="31">"local object %s is corrupt"<pos:position pos:line="34" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="62">sha1_to_hex<pos:position pos:line="34" pos:column="73"/></name><argument_list pos:line="34" pos:column="73">(<argument><expr><name><name pos:line="34" pos:column="74">d<pos:position pos:line="34" pos:column="75"/></name><operator pos:line="34" pos:column="75">-&gt;<pos:position pos:line="34" pos:column="80"/></operator><name pos:line="34" pos:column="77">sha1<pos:position pos:line="34" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="84"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="35" pos:column="17">base_obj<pos:position pos:line="35" pos:column="25"/></name><operator pos:line="35" pos:column="25">-&gt;<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="27">obj<pos:position pos:line="35" pos:column="30"/></name></name> <operator pos:line="35" pos:column="31">=<pos:position pos:line="35" pos:column="32"/></operator> <call><name pos:line="35" pos:column="33">append_obj_to_pack<pos:position pos:line="35" pos:column="51"/></name><argument_list pos:line="35" pos:column="51">(<argument><expr><name pos:line="35" pos:column="52">f<pos:position pos:line="35" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="55">d<pos:position pos:line="35" pos:column="56"/></name><operator pos:line="35" pos:column="56">-&gt;<pos:position pos:line="35" pos:column="61"/></operator><name pos:line="35" pos:column="58">sha1<pos:position pos:line="35" pos:column="62"/></name></name></expr></argument>,
					<argument><expr><name><name pos:line="36" pos:column="41">base_obj<pos:position pos:line="36" pos:column="49"/></name><operator pos:line="36" pos:column="49">-&gt;<pos:position pos:line="36" pos:column="54"/></operator><name pos:line="36" pos:column="51">data<pos:position pos:line="36" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="57">base_obj<pos:position pos:line="36" pos:column="65"/></name><operator pos:line="36" pos:column="65">-&gt;<pos:position pos:line="36" pos:column="70"/></operator><name pos:line="36" pos:column="67">size<pos:position pos:line="36" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="73">type<pos:position pos:line="36" pos:column="77"/></name></expr></argument>)<pos:position pos:line="36" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">find_unresolved_deltas<pos:position pos:line="37" pos:column="39"/></name><argument_list pos:line="37" pos:column="39">(<argument><expr><name pos:line="37" pos:column="40">base_obj<pos:position pos:line="37" pos:column="48"/></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">display_progress<pos:position pos:line="38" pos:column="33"/></name><argument_list pos:line="38" pos:column="33">(<argument><expr><name pos:line="38" pos:column="34">progress<pos:position pos:line="38" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="44">nr_resolved_deltas<pos:position pos:line="38" pos:column="62"/></name></expr></argument>)<pos:position pos:line="38" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="64"/></expr_stmt>
	}<pos:position pos:line="39" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">free<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name pos:line="40" pos:column="14">sorted_by_pos<pos:position pos:line="40" pos:column="27"/></name></expr></argument>)<pos:position pos:line="40" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
