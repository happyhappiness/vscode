<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_768.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">child_process<pos:position pos:line="1" pos:column="21"/></name></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">git_connect<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name><name pos:line="1" pos:column="39">fd<pos:position pos:line="1" pos:column="41"/></name><index pos:line="1" pos:column="41">[<expr><literal type="number" pos:line="1" pos:column="42">2<pos:position pos:line="1" pos:column="43"/></literal></expr>]<pos:position pos:line="1" pos:column="44"/></index></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">url<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
				  <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">prog<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="53">int<pos:position pos:line="2" pos:column="56"/></name></type> <name pos:line="2" pos:column="57">flags<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">hostandport<pos:position pos:line="4" pos:column="26"/></name></decl>, <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="29">path<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">child_process<pos:position pos:line="5" pos:column="29"/></name></name> <modifier pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></modifier></type><name pos:line="5" pos:column="31">conn<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><operator pos:line="5" pos:column="38">&amp;<pos:position pos:line="5" pos:column="43"/></operator><name pos:line="5" pos:column="39">no_fork<pos:position pos:line="5" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">enum<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">protocol<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">protocol<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">cmd<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><name pos:line="7" pos:column="29">STRBUF_INIT<pos:position pos:line="7" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* Without this we cannot rely on waitpid() to tell
	 * what happened to our children.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">signal<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">SIGCHLD<pos:position pos:line="12" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="25">SIG_DFL<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">protocol<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <call><name pos:line="14" pos:column="20">parse_connect_url<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><name pos:line="14" pos:column="38">url<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="43">&amp;<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="44">hostandport<pos:position pos:line="14" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="57">&amp;<pos:position pos:line="14" pos:column="62"/></operator><name pos:line="14" pos:column="58">path<pos:position pos:line="14" pos:column="62"/></name></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">(<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">flags<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">&amp;<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="22">CONNECT_DIAG_URL<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">)<pos:position pos:line="15" pos:column="39"/></operator> <operator pos:line="15" pos:column="40">&amp;&amp;<pos:position pos:line="15" pos:column="50"/></operator> <operator pos:line="15" pos:column="43">(<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="44">protocol<pos:position pos:line="15" pos:column="52"/></name> <operator pos:line="15" pos:column="53">!=<pos:position pos:line="15" pos:column="55"/></operator> <name pos:line="15" pos:column="56">PROTO_SSH<pos:position pos:line="15" pos:column="65"/></name><operator pos:line="15" pos:column="65">)<pos:position pos:line="15" pos:column="66"/></operator></expr>)<pos:position pos:line="15" pos:column="67"/></condition><then pos:line="15" pos:column="67"> <block pos:line="15" pos:column="68">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">printf<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><literal type="string" pos:line="16" pos:column="24">"Diag: url=%s\n"<pos:position pos:line="16" pos:column="40"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="16" pos:column="42">url<pos:position pos:line="16" pos:column="45"/></name></expr> ?<pos:position pos:line="16" pos:column="47"/></condition><then pos:line="16" pos:column="47"> <expr><name pos:line="16" pos:column="48">url<pos:position pos:line="16" pos:column="51"/></name></expr> <pos:position pos:line="16" pos:column="52"/></then><else pos:line="16" pos:column="52">: <expr><literal type="string" pos:line="16" pos:column="54">"NULL"<pos:position pos:line="16" pos:column="60"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">printf<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><literal type="string" pos:line="17" pos:column="24">"Diag: protocol=%s\n"<pos:position pos:line="17" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="47">prot_name<pos:position pos:line="17" pos:column="56"/></name><argument_list pos:line="17" pos:column="56">(<argument><expr><name pos:line="17" pos:column="57">protocol<pos:position pos:line="17" pos:column="65"/></name></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">printf<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><literal type="string" pos:line="18" pos:column="24">"Diag: hostandport=%s\n"<pos:position pos:line="18" pos:column="48"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="18" pos:column="50">hostandport<pos:position pos:line="18" pos:column="61"/></name></expr> ?<pos:position pos:line="18" pos:column="63"/></condition><then pos:line="18" pos:column="63"> <expr><name pos:line="18" pos:column="64">hostandport<pos:position pos:line="18" pos:column="75"/></name></expr> <pos:position pos:line="18" pos:column="76"/></then><else pos:line="18" pos:column="76">: <expr><literal type="string" pos:line="18" pos:column="78">"NULL"<pos:position pos:line="18" pos:column="84"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="18" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="86"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">printf<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="string" pos:line="19" pos:column="24">"Diag: path=%s\n"<pos:position pos:line="19" pos:column="41"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="19" pos:column="43">path<pos:position pos:line="19" pos:column="47"/></name></expr> ?<pos:position pos:line="19" pos:column="49"/></condition><then pos:line="19" pos:column="49"> <expr><name pos:line="19" pos:column="50">path<pos:position pos:line="19" pos:column="54"/></name></expr> <pos:position pos:line="19" pos:column="55"/></then><else pos:line="19" pos:column="55">: <expr><literal type="string" pos:line="19" pos:column="57">"NULL"<pos:position pos:line="19" pos:column="63"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="19" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">conn<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <name pos:line="20" pos:column="24">NULL<pos:position pos:line="20" pos:column="28"/></name></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then> <elseif pos:line="21" pos:column="11">else <if pos:line="21" pos:column="16">if <condition pos:line="21" pos:column="19">(<expr><name pos:line="21" pos:column="20">protocol<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">==<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="32">PROTO_GIT<pos:position pos:line="21" pos:column="41"/></name></expr>)<pos:position pos:line="21" pos:column="42"/></condition><then pos:line="21" pos:column="42"> <block pos:line="21" pos:column="43">{
		<comment type="block" pos:line="22" pos:column="17">/*
		 * Set up virtual host information based on where we will
		 * connect, unless the user has overridden us in
		 * the environment.
		 */</comment>
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">char<pos:position pos:line="27" pos:column="21"/></name> <modifier pos:line="27" pos:column="22">*<pos:position pos:line="27" pos:column="23"/></modifier></type><name pos:line="27" pos:column="23">target_host<pos:position pos:line="27" pos:column="34"/></name> <init pos:line="27" pos:column="35">= <expr><call><name pos:line="27" pos:column="37">getenv<pos:position pos:line="27" pos:column="43"/></name><argument_list pos:line="27" pos:column="43">(<argument><expr><literal type="string" pos:line="27" pos:column="44">"GIT_OVERRIDE_VIRTUAL_HOST"<pos:position pos:line="27" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="73"/></decl_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">target_host<pos:position pos:line="28" pos:column="32"/></name></expr>)<pos:position pos:line="28" pos:column="33"/></condition><then pos:line="28" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="25">target_host<pos:position pos:line="29" pos:column="36"/></name> <operator pos:line="29" pos:column="37">=<pos:position pos:line="29" pos:column="38"/></operator> <call><name pos:line="29" pos:column="39">xstrdup<pos:position pos:line="29" pos:column="46"/></name><argument_list pos:line="29" pos:column="46">(<argument><expr><name pos:line="29" pos:column="47">target_host<pos:position pos:line="29" pos:column="58"/></name></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="60"/></expr_stmt></block></then>
		<else pos:line="30" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="25">target_host<pos:position pos:line="31" pos:column="36"/></name> <operator pos:line="31" pos:column="37">=<pos:position pos:line="31" pos:column="38"/></operator> <call><name pos:line="31" pos:column="39">xstrdup<pos:position pos:line="31" pos:column="46"/></name><argument_list pos:line="31" pos:column="46">(<argument><expr><name pos:line="31" pos:column="47">hostandport<pos:position pos:line="31" pos:column="58"/></name></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="60"/></expr_stmt></block></else></if>

		<expr_stmt><expr><call><name pos:line="33" pos:column="17">transport_check_allowed<pos:position pos:line="33" pos:column="40"/></name><argument_list pos:line="33" pos:column="40">(<argument><expr><literal type="string" pos:line="33" pos:column="41">"git"<pos:position pos:line="33" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>

		<comment type="block" pos:line="35" pos:column="17">/* These underlying connection commands die() if they
		 * cannot connect.
		 */</comment>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><call><name pos:line="38" pos:column="21">git_use_proxy<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">hostandport<pos:position pos:line="38" pos:column="46"/></name></expr></argument>)<pos:position pos:line="38" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="48"/></condition><then pos:line="38" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="25">conn<pos:position pos:line="39" pos:column="29"/></name> <operator pos:line="39" pos:column="30">=<pos:position pos:line="39" pos:column="31"/></operator> <call><name pos:line="39" pos:column="32">git_proxy_connect<pos:position pos:line="39" pos:column="49"/></name><argument_list pos:line="39" pos:column="49">(<argument><expr><name pos:line="39" pos:column="50">fd<pos:position pos:line="39" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="54">hostandport<pos:position pos:line="39" pos:column="65"/></name></expr></argument>)<pos:position pos:line="39" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="67"/></expr_stmt></block></then>
		<else pos:line="40" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="25">git_tcp_connect<pos:position pos:line="41" pos:column="40"/></name><argument_list pos:line="41" pos:column="40">(<argument><expr><name pos:line="41" pos:column="41">fd<pos:position pos:line="41" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="45">hostandport<pos:position pos:line="41" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="58">flags<pos:position pos:line="41" pos:column="63"/></name></expr></argument>)<pos:position pos:line="41" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="65"/></expr_stmt></block></else></if>
		<comment type="block" pos:line="42" pos:column="17">/*
		 * Separate original protocol components prog and path
		 * from extended host header with a NUL byte.
		 *
		 * Note: Do not add any other headers here!  Doing so
		 * will cause older git-daemon servers to crash.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">packet_write_fmt<pos:position pos:line="49" pos:column="33"/></name><argument_list pos:line="49" pos:column="33">(<argument><expr><name><name pos:line="49" pos:column="34">fd<pos:position pos:line="49" pos:column="36"/></name><index pos:line="49" pos:column="36">[<expr><literal type="number" pos:line="49" pos:column="37">1<pos:position pos:line="49" pos:column="38"/></literal></expr>]<pos:position pos:line="49" pos:column="39"/></index></name></expr></argument>,
			     <argument><expr><literal type="string" pos:line="50" pos:column="30">"%s %s%chost=%s%c"<pos:position pos:line="50" pos:column="48"/></literal></expr></argument>,
			     <argument><expr><name pos:line="51" pos:column="30">prog<pos:position pos:line="51" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="36">path<pos:position pos:line="51" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="42">0<pos:position pos:line="51" pos:column="43"/></literal></expr></argument>,
			     <argument><expr><name pos:line="52" pos:column="30">target_host<pos:position pos:line="52" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="43">0<pos:position pos:line="52" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">free<pos:position pos:line="53" pos:column="21"/></name><argument_list pos:line="53" pos:column="21">(<argument><expr><name pos:line="53" pos:column="22">target_host<pos:position pos:line="53" pos:column="33"/></name></expr></argument>)<pos:position pos:line="53" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if></elseif> <else pos:line="54" pos:column="11">else <block pos:line="54" pos:column="16">{
		<expr_stmt><expr><name pos:line="55" pos:column="17">conn<pos:position pos:line="55" pos:column="21"/></name> <operator pos:line="55" pos:column="22">=<pos:position pos:line="55" pos:column="23"/></operator> <call><name pos:line="55" pos:column="24">xmalloc<pos:position pos:line="55" pos:column="31"/></name><argument_list pos:line="55" pos:column="31">(<argument><expr><sizeof pos:line="55" pos:column="32">sizeof<argument_list pos:line="55" pos:column="38">(<argument><expr><operator pos:line="55" pos:column="39">*<pos:position pos:line="55" pos:column="40"/></operator><name pos:line="55" pos:column="40">conn<pos:position pos:line="55" pos:column="44"/></name></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="55" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="56" pos:column="17">child_process_init<pos:position pos:line="56" pos:column="35"/></name><argument_list pos:line="56" pos:column="35">(<argument><expr><name pos:line="56" pos:column="36">conn<pos:position pos:line="56" pos:column="40"/></name></expr></argument>)<pos:position pos:line="56" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="42"/></expr_stmt>

		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><call><name pos:line="58" pos:column="21">looks_like_command_line_option<pos:position pos:line="58" pos:column="51"/></name><argument_list pos:line="58" pos:column="51">(<argument><expr><name pos:line="58" pos:column="52">path<pos:position pos:line="58" pos:column="56"/></name></expr></argument>)<pos:position pos:line="58" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="58"/></condition><then pos:line="58" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="25">die<pos:position pos:line="59" pos:column="28"/></name><argument_list pos:line="59" pos:column="28">(<argument><expr><literal type="string" pos:line="59" pos:column="29">"strange pathname '%s' blocked"<pos:position pos:line="59" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="62">path<pos:position pos:line="59" pos:column="66"/></name></expr></argument>)<pos:position pos:line="59" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="68"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="61" pos:column="17">strbuf_addstr<pos:position pos:line="61" pos:column="30"/></name><argument_list pos:line="61" pos:column="30">(<argument><expr><operator pos:line="61" pos:column="31">&amp;<pos:position pos:line="61" pos:column="36"/></operator><name pos:line="61" pos:column="32">cmd<pos:position pos:line="61" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="37">prog<pos:position pos:line="61" pos:column="41"/></name></expr></argument>)<pos:position pos:line="61" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">strbuf_addch<pos:position pos:line="62" pos:column="29"/></name><argument_list pos:line="62" pos:column="29">(<argument><expr><operator pos:line="62" pos:column="30">&amp;<pos:position pos:line="62" pos:column="35"/></operator><name pos:line="62" pos:column="31">cmd<pos:position pos:line="62" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="62" pos:column="36">' '<pos:position pos:line="62" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">sq_quote_buf<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><operator pos:line="63" pos:column="30">&amp;<pos:position pos:line="63" pos:column="35"/></operator><name pos:line="63" pos:column="31">cmd<pos:position pos:line="63" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="36">path<pos:position pos:line="63" pos:column="40"/></name></expr></argument>)<pos:position pos:line="63" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="42"/></expr_stmt>

		<comment type="block" pos:line="65" pos:column="17">/* remove repo-local variables from the environment */</comment>
		<expr_stmt><expr><name><name pos:line="66" pos:column="17">conn<pos:position pos:line="66" pos:column="21"/></name><operator pos:line="66" pos:column="21">-&gt;<pos:position pos:line="66" pos:column="26"/></operator><name pos:line="66" pos:column="23">env<pos:position pos:line="66" pos:column="26"/></name></name> <operator pos:line="66" pos:column="27">=<pos:position pos:line="66" pos:column="28"/></operator> <name pos:line="66" pos:column="29">local_repo_env<pos:position pos:line="66" pos:column="43"/></name></expr>;<pos:position pos:line="66" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="67" pos:column="17">conn<pos:position pos:line="67" pos:column="21"/></name><operator pos:line="67" pos:column="21">-&gt;<pos:position pos:line="67" pos:column="26"/></operator><name pos:line="67" pos:column="23">use_shell<pos:position pos:line="67" pos:column="32"/></name></name> <operator pos:line="67" pos:column="33">=<pos:position pos:line="67" pos:column="34"/></operator> <literal type="number" pos:line="67" pos:column="35">1<pos:position pos:line="67" pos:column="36"/></literal></expr>;<pos:position pos:line="67" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="68" pos:column="17">conn<pos:position pos:line="68" pos:column="21"/></name><operator pos:line="68" pos:column="21">-&gt;<pos:position pos:line="68" pos:column="26"/></operator><name pos:line="68" pos:column="23">in<pos:position pos:line="68" pos:column="25"/></name></name> <operator pos:line="68" pos:column="26">=<pos:position pos:line="68" pos:column="27"/></operator> <name><name pos:line="68" pos:column="28">conn<pos:position pos:line="68" pos:column="32"/></name><operator pos:line="68" pos:column="32">-&gt;<pos:position pos:line="68" pos:column="37"/></operator><name pos:line="68" pos:column="34">out<pos:position pos:line="68" pos:column="37"/></name></name> <operator pos:line="68" pos:column="38">=<pos:position pos:line="68" pos:column="39"/></operator> <operator pos:line="68" pos:column="40">-<pos:position pos:line="68" pos:column="41"/></operator><literal type="number" pos:line="68" pos:column="41">1<pos:position pos:line="68" pos:column="42"/></literal></expr>;<pos:position pos:line="68" pos:column="43"/></expr_stmt>
		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">protocol<pos:position pos:line="69" pos:column="29"/></name> <operator pos:line="69" pos:column="30">==<pos:position pos:line="69" pos:column="32"/></operator> <name pos:line="69" pos:column="33">PROTO_SSH<pos:position pos:line="69" pos:column="42"/></name></expr>)<pos:position pos:line="69" pos:column="43"/></condition><then pos:line="69" pos:column="43"> <block pos:line="69" pos:column="44">{
			<decl_stmt><decl><type><specifier pos:line="70" pos:column="25">const<pos:position pos:line="70" pos:column="30"/></specifier> <name pos:line="70" pos:column="31">char<pos:position pos:line="70" pos:column="35"/></name> <modifier pos:line="70" pos:column="36">*<pos:position pos:line="70" pos:column="37"/></modifier></type><name pos:line="70" pos:column="37">ssh<pos:position pos:line="70" pos:column="40"/></name></decl>;<pos:position pos:line="70" pos:column="41"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="71" pos:column="25">int<pos:position pos:line="71" pos:column="28"/></name></type> <name pos:line="71" pos:column="29">putty<pos:position pos:line="71" pos:column="34"/></name> <init pos:line="71" pos:column="35">= <expr><literal type="number" pos:line="71" pos:column="37">0<pos:position pos:line="71" pos:column="38"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="71" pos:column="40">tortoiseplink<pos:position pos:line="71" pos:column="53"/></name> <init pos:line="71" pos:column="54">= <expr><literal type="number" pos:line="71" pos:column="56">0<pos:position pos:line="71" pos:column="57"/></literal></expr></init></decl>;<pos:position pos:line="71" pos:column="58"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="72" pos:column="25">char<pos:position pos:line="72" pos:column="29"/></name> <modifier pos:line="72" pos:column="30">*<pos:position pos:line="72" pos:column="31"/></modifier></type><name pos:line="72" pos:column="31">ssh_host<pos:position pos:line="72" pos:column="39"/></name> <init pos:line="72" pos:column="40">= <expr><name pos:line="72" pos:column="42">hostandport<pos:position pos:line="72" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="72" pos:column="54"/></decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="73" pos:column="25">const<pos:position pos:line="73" pos:column="30"/></specifier> <name pos:line="73" pos:column="31">char<pos:position pos:line="73" pos:column="35"/></name> <modifier pos:line="73" pos:column="36">*<pos:position pos:line="73" pos:column="37"/></modifier></type><name pos:line="73" pos:column="37">port<pos:position pos:line="73" pos:column="41"/></name> <init pos:line="73" pos:column="42">= <expr><name pos:line="73" pos:column="44">NULL<pos:position pos:line="73" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="73" pos:column="49"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">transport_check_allowed<pos:position pos:line="74" pos:column="48"/></name><argument_list pos:line="74" pos:column="48">(<argument><expr><literal type="string" pos:line="74" pos:column="49">"ssh"<pos:position pos:line="74" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="75" pos:column="25">get_host_and_port<pos:position pos:line="75" pos:column="42"/></name><argument_list pos:line="75" pos:column="42">(<argument><expr><operator pos:line="75" pos:column="43">&amp;<pos:position pos:line="75" pos:column="48"/></operator><name pos:line="75" pos:column="44">ssh_host<pos:position pos:line="75" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="54">&amp;<pos:position pos:line="75" pos:column="59"/></operator><name pos:line="75" pos:column="55">port<pos:position pos:line="75" pos:column="59"/></name></expr></argument>)<pos:position pos:line="75" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="61"/></expr_stmt>

			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><operator pos:line="77" pos:column="29">!<pos:position pos:line="77" pos:column="30"/></operator><name pos:line="77" pos:column="30">port<pos:position pos:line="77" pos:column="34"/></name></expr>)<pos:position pos:line="77" pos:column="35"/></condition><then pos:line="77" pos:column="35">
				<block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="33">port<pos:position pos:line="78" pos:column="37"/></name> <operator pos:line="78" pos:column="38">=<pos:position pos:line="78" pos:column="39"/></operator> <call><name pos:line="78" pos:column="40">get_port<pos:position pos:line="78" pos:column="48"/></name><argument_list pos:line="78" pos:column="48">(<argument><expr><name pos:line="78" pos:column="49">ssh_host<pos:position pos:line="78" pos:column="57"/></name></expr></argument>)<pos:position pos:line="78" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="59"/></expr_stmt></block></then></if>

			<if pos:line="80" pos:column="25">if <condition pos:line="80" pos:column="28">(<expr><name pos:line="80" pos:column="29">flags<pos:position pos:line="80" pos:column="34"/></name> <operator pos:line="80" pos:column="35">&amp;<pos:position pos:line="80" pos:column="40"/></operator> <name pos:line="80" pos:column="37">CONNECT_DIAG_URL<pos:position pos:line="80" pos:column="53"/></name></expr>)<pos:position pos:line="80" pos:column="54"/></condition><then pos:line="80" pos:column="54"> <block pos:line="80" pos:column="55">{
				<expr_stmt><expr><call><name pos:line="81" pos:column="33">printf<pos:position pos:line="81" pos:column="39"/></name><argument_list pos:line="81" pos:column="39">(<argument><expr><literal type="string" pos:line="81" pos:column="40">"Diag: url=%s\n"<pos:position pos:line="81" pos:column="56"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="81" pos:column="58">url<pos:position pos:line="81" pos:column="61"/></name></expr> ?<pos:position pos:line="81" pos:column="63"/></condition><then pos:line="81" pos:column="63"> <expr><name pos:line="81" pos:column="64">url<pos:position pos:line="81" pos:column="67"/></name></expr> <pos:position pos:line="81" pos:column="68"/></then><else pos:line="81" pos:column="68">: <expr><literal type="string" pos:line="81" pos:column="70">"NULL"<pos:position pos:line="81" pos:column="76"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="81" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="78"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="82" pos:column="33">printf<pos:position pos:line="82" pos:column="39"/></name><argument_list pos:line="82" pos:column="39">(<argument><expr><literal type="string" pos:line="82" pos:column="40">"Diag: protocol=%s\n"<pos:position pos:line="82" pos:column="61"/></literal></expr></argument>, <argument><expr><call><name pos:line="82" pos:column="63">prot_name<pos:position pos:line="82" pos:column="72"/></name><argument_list pos:line="82" pos:column="72">(<argument><expr><name pos:line="82" pos:column="73">protocol<pos:position pos:line="82" pos:column="81"/></name></expr></argument>)<pos:position pos:line="82" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="82" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="84"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="83" pos:column="33">printf<pos:position pos:line="83" pos:column="39"/></name><argument_list pos:line="83" pos:column="39">(<argument><expr><literal type="string" pos:line="83" pos:column="40">"Diag: userandhost=%s\n"<pos:position pos:line="83" pos:column="64"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="83" pos:column="66">ssh_host<pos:position pos:line="83" pos:column="74"/></name></expr> ?<pos:position pos:line="83" pos:column="76"/></condition><then pos:line="83" pos:column="76"> <expr><name pos:line="83" pos:column="77">ssh_host<pos:position pos:line="83" pos:column="85"/></name></expr> <pos:position pos:line="83" pos:column="86"/></then><else pos:line="83" pos:column="86">: <expr><literal type="string" pos:line="83" pos:column="88">"NULL"<pos:position pos:line="83" pos:column="94"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="83" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="96"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="84" pos:column="33">printf<pos:position pos:line="84" pos:column="39"/></name><argument_list pos:line="84" pos:column="39">(<argument><expr><literal type="string" pos:line="84" pos:column="40">"Diag: port=%s\n"<pos:position pos:line="84" pos:column="57"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="84" pos:column="59">port<pos:position pos:line="84" pos:column="63"/></name></expr> ?<pos:position pos:line="84" pos:column="65"/></condition><then pos:line="84" pos:column="65"> <expr><name pos:line="84" pos:column="66">port<pos:position pos:line="84" pos:column="70"/></name></expr> <pos:position pos:line="84" pos:column="71"/></then><else pos:line="84" pos:column="71">: <expr><literal type="string" pos:line="84" pos:column="73">"NONE"<pos:position pos:line="84" pos:column="79"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="84" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="81"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="85" pos:column="33">printf<pos:position pos:line="85" pos:column="39"/></name><argument_list pos:line="85" pos:column="39">(<argument><expr><literal type="string" pos:line="85" pos:column="40">"Diag: path=%s\n"<pos:position pos:line="85" pos:column="57"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="85" pos:column="59">path<pos:position pos:line="85" pos:column="63"/></name></expr> ?<pos:position pos:line="85" pos:column="65"/></condition><then pos:line="85" pos:column="65"> <expr><name pos:line="85" pos:column="66">path<pos:position pos:line="85" pos:column="70"/></name></expr> <pos:position pos:line="85" pos:column="71"/></then><else pos:line="85" pos:column="71">: <expr><literal type="string" pos:line="85" pos:column="73">"NULL"<pos:position pos:line="85" pos:column="79"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="85" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="81"/></expr_stmt>

				<expr_stmt><expr><call><name pos:line="87" pos:column="33">free<pos:position pos:line="87" pos:column="37"/></name><argument_list pos:line="87" pos:column="37">(<argument><expr><name pos:line="87" pos:column="38">hostandport<pos:position pos:line="87" pos:column="49"/></name></expr></argument>)<pos:position pos:line="87" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="88" pos:column="33">free<pos:position pos:line="88" pos:column="37"/></name><argument_list pos:line="88" pos:column="37">(<argument><expr><name pos:line="88" pos:column="38">path<pos:position pos:line="88" pos:column="42"/></name></expr></argument>)<pos:position pos:line="88" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="44"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="89" pos:column="33">free<pos:position pos:line="89" pos:column="37"/></name><argument_list pos:line="89" pos:column="37">(<argument><expr><name pos:line="89" pos:column="38">conn<pos:position pos:line="89" pos:column="42"/></name></expr></argument>)<pos:position pos:line="89" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="44"/></expr_stmt>
				<return pos:line="90" pos:column="33">return <expr><name pos:line="90" pos:column="40">NULL<pos:position pos:line="90" pos:column="44"/></name></expr>;<pos:position pos:line="90" pos:column="45"/></return>
			}<pos:position pos:line="91" pos:column="26"/></block></then></if>

			<if pos:line="93" pos:column="25">if <condition pos:line="93" pos:column="28">(<expr><call><name pos:line="93" pos:column="29">looks_like_command_line_option<pos:position pos:line="93" pos:column="59"/></name><argument_list pos:line="93" pos:column="59">(<argument><expr><name pos:line="93" pos:column="60">ssh_host<pos:position pos:line="93" pos:column="68"/></name></expr></argument>)<pos:position pos:line="93" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="93" pos:column="70"/></condition><then pos:line="93" pos:column="70">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="94" pos:column="33">die<pos:position pos:line="94" pos:column="36"/></name><argument_list pos:line="94" pos:column="36">(<argument><expr><literal type="string" pos:line="94" pos:column="37">"strange hostname '%s' blocked"<pos:position pos:line="94" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="70">ssh_host<pos:position pos:line="94" pos:column="78"/></name></expr></argument>)<pos:position pos:line="94" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="80"/></expr_stmt></block></then></if>

			<expr_stmt><expr><name pos:line="96" pos:column="25">ssh<pos:position pos:line="96" pos:column="28"/></name> <operator pos:line="96" pos:column="29">=<pos:position pos:line="96" pos:column="30"/></operator> <call><name pos:line="96" pos:column="31">get_ssh_command<pos:position pos:line="96" pos:column="46"/></name><argument_list pos:line="96" pos:column="46">()<pos:position pos:line="96" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="49"/></expr_stmt>
			<if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><operator pos:line="97" pos:column="29">!<pos:position pos:line="97" pos:column="30"/></operator><name pos:line="97" pos:column="30">ssh<pos:position pos:line="97" pos:column="33"/></name></expr>)<pos:position pos:line="97" pos:column="34"/></condition><then pos:line="97" pos:column="34"> <block pos:line="97" pos:column="35">{
				<decl_stmt><decl><type><specifier pos:line="98" pos:column="33">const<pos:position pos:line="98" pos:column="38"/></specifier> <name pos:line="98" pos:column="39">char<pos:position pos:line="98" pos:column="43"/></name> <modifier pos:line="98" pos:column="44">*<pos:position pos:line="98" pos:column="45"/></modifier></type><name pos:line="98" pos:column="45">base<pos:position pos:line="98" pos:column="49"/></name></decl>;<pos:position pos:line="98" pos:column="50"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="99" pos:column="33">char<pos:position pos:line="99" pos:column="37"/></name> <modifier pos:line="99" pos:column="38">*<pos:position pos:line="99" pos:column="39"/></modifier></type><name pos:line="99" pos:column="39">ssh_dup<pos:position pos:line="99" pos:column="46"/></name></decl>;<pos:position pos:line="99" pos:column="47"/></decl_stmt>

				<comment type="block" pos:line="101" pos:column="33">/*
				 * GIT_SSH is the no-shell version of
				 * GIT_SSH_COMMAND (and must remain so for
				 * historical compatibility).
				 */</comment>
				<expr_stmt><expr><name><name pos:line="106" pos:column="33">conn<pos:position pos:line="106" pos:column="37"/></name><operator pos:line="106" pos:column="37">-&gt;<pos:position pos:line="106" pos:column="42"/></operator><name pos:line="106" pos:column="39">use_shell<pos:position pos:line="106" pos:column="48"/></name></name> <operator pos:line="106" pos:column="49">=<pos:position pos:line="106" pos:column="50"/></operator> <literal type="number" pos:line="106" pos:column="51">0<pos:position pos:line="106" pos:column="52"/></literal></expr>;<pos:position pos:line="106" pos:column="53"/></expr_stmt>

				<expr_stmt><expr><name pos:line="108" pos:column="33">ssh<pos:position pos:line="108" pos:column="36"/></name> <operator pos:line="108" pos:column="37">=<pos:position pos:line="108" pos:column="38"/></operator> <call><name pos:line="108" pos:column="39">getenv<pos:position pos:line="108" pos:column="45"/></name><argument_list pos:line="108" pos:column="45">(<argument><expr><literal type="string" pos:line="108" pos:column="46">"GIT_SSH"<pos:position pos:line="108" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="57"/></expr_stmt>
				<if pos:line="109" pos:column="33">if <condition pos:line="109" pos:column="36">(<expr><operator pos:line="109" pos:column="37">!<pos:position pos:line="109" pos:column="38"/></operator><name pos:line="109" pos:column="38">ssh<pos:position pos:line="109" pos:column="41"/></name></expr>)<pos:position pos:line="109" pos:column="42"/></condition><then pos:line="109" pos:column="42">
					<block type="pseudo"><expr_stmt><expr><name pos:line="110" pos:column="41">ssh<pos:position pos:line="110" pos:column="44"/></name> <operator pos:line="110" pos:column="45">=<pos:position pos:line="110" pos:column="46"/></operator> <literal type="string" pos:line="110" pos:column="47">"ssh"<pos:position pos:line="110" pos:column="52"/></literal></expr>;<pos:position pos:line="110" pos:column="53"/></expr_stmt></block></then></if>

				<expr_stmt><expr><name pos:line="112" pos:column="33">ssh_dup<pos:position pos:line="112" pos:column="40"/></name> <operator pos:line="112" pos:column="41">=<pos:position pos:line="112" pos:column="42"/></operator> <call><name pos:line="112" pos:column="43">xstrdup<pos:position pos:line="112" pos:column="50"/></name><argument_list pos:line="112" pos:column="50">(<argument><expr><name pos:line="112" pos:column="51">ssh<pos:position pos:line="112" pos:column="54"/></name></expr></argument>)<pos:position pos:line="112" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="56"/></expr_stmt>
				<expr_stmt><expr><name pos:line="113" pos:column="33">base<pos:position pos:line="113" pos:column="37"/></name> <operator pos:line="113" pos:column="38">=<pos:position pos:line="113" pos:column="39"/></operator> <call><name pos:line="113" pos:column="40">basename<pos:position pos:line="113" pos:column="48"/></name><argument_list pos:line="113" pos:column="48">(<argument><expr><name pos:line="113" pos:column="49">ssh_dup<pos:position pos:line="113" pos:column="56"/></name></expr></argument>)<pos:position pos:line="113" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="58"/></expr_stmt>

				<expr_stmt><expr><name pos:line="115" pos:column="33">tortoiseplink<pos:position pos:line="115" pos:column="46"/></name> <operator pos:line="115" pos:column="47">=<pos:position pos:line="115" pos:column="48"/></operator> <operator pos:line="115" pos:column="49">!<pos:position pos:line="115" pos:column="50"/></operator><call><name pos:line="115" pos:column="50">strcasecmp<pos:position pos:line="115" pos:column="60"/></name><argument_list pos:line="115" pos:column="60">(<argument><expr><name pos:line="115" pos:column="61">base<pos:position pos:line="115" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="67">"tortoiseplink"<pos:position pos:line="115" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="83"/></argument_list></call> <operator pos:line="115" pos:column="84">||<pos:position pos:line="115" pos:column="86"/></operator>
					<operator pos:line="116" pos:column="41">!<pos:position pos:line="116" pos:column="42"/></operator><call><name pos:line="116" pos:column="42">strcasecmp<pos:position pos:line="116" pos:column="52"/></name><argument_list pos:line="116" pos:column="52">(<argument><expr><name pos:line="116" pos:column="53">base<pos:position pos:line="116" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="59">"tortoiseplink.exe"<pos:position pos:line="116" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="80"/></expr_stmt>
				<expr_stmt><expr><name pos:line="117" pos:column="33">putty<pos:position pos:line="117" pos:column="38"/></name> <operator pos:line="117" pos:column="39">=<pos:position pos:line="117" pos:column="40"/></operator> <name pos:line="117" pos:column="41">tortoiseplink<pos:position pos:line="117" pos:column="54"/></name> <operator pos:line="117" pos:column="55">||<pos:position pos:line="117" pos:column="57"/></operator>
					<operator pos:line="118" pos:column="41">!<pos:position pos:line="118" pos:column="42"/></operator><call><name pos:line="118" pos:column="42">strcasecmp<pos:position pos:line="118" pos:column="52"/></name><argument_list pos:line="118" pos:column="52">(<argument><expr><name pos:line="118" pos:column="53">base<pos:position pos:line="118" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="118" pos:column="59">"plink"<pos:position pos:line="118" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="67"/></argument_list></call> <operator pos:line="118" pos:column="68">||<pos:position pos:line="118" pos:column="70"/></operator>
					<operator pos:line="119" pos:column="41">!<pos:position pos:line="119" pos:column="42"/></operator><call><name pos:line="119" pos:column="42">strcasecmp<pos:position pos:line="119" pos:column="52"/></name><argument_list pos:line="119" pos:column="52">(<argument><expr><name pos:line="119" pos:column="53">base<pos:position pos:line="119" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="59">"plink.exe"<pos:position pos:line="119" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="72"/></expr_stmt>

				<expr_stmt><expr><call><name pos:line="121" pos:column="33">free<pos:position pos:line="121" pos:column="37"/></name><argument_list pos:line="121" pos:column="37">(<argument><expr><name pos:line="121" pos:column="38">ssh_dup<pos:position pos:line="121" pos:column="45"/></name></expr></argument>)<pos:position pos:line="121" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="47"/></expr_stmt>
			}<pos:position pos:line="122" pos:column="26"/></block></then></if>

			<expr_stmt><expr><call><name pos:line="124" pos:column="25">argv_array_push<pos:position pos:line="124" pos:column="40"/></name><argument_list pos:line="124" pos:column="40">(<argument><expr><operator pos:line="124" pos:column="41">&amp;<pos:position pos:line="124" pos:column="46"/></operator><name><name pos:line="124" pos:column="42">conn<pos:position pos:line="124" pos:column="46"/></name><operator pos:line="124" pos:column="46">-&gt;<pos:position pos:line="124" pos:column="51"/></operator><name pos:line="124" pos:column="48">args<pos:position pos:line="124" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="54">ssh<pos:position pos:line="124" pos:column="57"/></name></expr></argument>)<pos:position pos:line="124" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="59"/></expr_stmt>
			<if pos:line="125" pos:column="25">if <condition pos:line="125" pos:column="28">(<expr><name pos:line="125" pos:column="29">flags<pos:position pos:line="125" pos:column="34"/></name> <operator pos:line="125" pos:column="35">&amp;<pos:position pos:line="125" pos:column="40"/></operator> <name pos:line="125" pos:column="37">CONNECT_IPV4<pos:position pos:line="125" pos:column="49"/></name></expr>)<pos:position pos:line="125" pos:column="50"/></condition><then pos:line="125" pos:column="50">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="126" pos:column="33">argv_array_push<pos:position pos:line="126" pos:column="48"/></name><argument_list pos:line="126" pos:column="48">(<argument><expr><operator pos:line="126" pos:column="49">&amp;<pos:position pos:line="126" pos:column="54"/></operator><name><name pos:line="126" pos:column="50">conn<pos:position pos:line="126" pos:column="54"/></name><operator pos:line="126" pos:column="54">-&gt;<pos:position pos:line="126" pos:column="59"/></operator><name pos:line="126" pos:column="56">args<pos:position pos:line="126" pos:column="60"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="126" pos:column="62">"-4"<pos:position pos:line="126" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="68"/></expr_stmt></block></then>
			<elseif pos:line="127" pos:column="25">else <if pos:line="127" pos:column="30">if <condition pos:line="127" pos:column="33">(<expr><name pos:line="127" pos:column="34">flags<pos:position pos:line="127" pos:column="39"/></name> <operator pos:line="127" pos:column="40">&amp;<pos:position pos:line="127" pos:column="45"/></operator> <name pos:line="127" pos:column="42">CONNECT_IPV6<pos:position pos:line="127" pos:column="54"/></name></expr>)<pos:position pos:line="127" pos:column="55"/></condition><then pos:line="127" pos:column="55">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="128" pos:column="33">argv_array_push<pos:position pos:line="128" pos:column="48"/></name><argument_list pos:line="128" pos:column="48">(<argument><expr><operator pos:line="128" pos:column="49">&amp;<pos:position pos:line="128" pos:column="54"/></operator><name><name pos:line="128" pos:column="50">conn<pos:position pos:line="128" pos:column="54"/></name><operator pos:line="128" pos:column="54">-&gt;<pos:position pos:line="128" pos:column="59"/></operator><name pos:line="128" pos:column="56">args<pos:position pos:line="128" pos:column="60"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="128" pos:column="62">"-6"<pos:position pos:line="128" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="128" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="68"/></expr_stmt></block></then></if></elseif></if>
			<if pos:line="129" pos:column="25">if <condition pos:line="129" pos:column="28">(<expr><name pos:line="129" pos:column="29">tortoiseplink<pos:position pos:line="129" pos:column="42"/></name></expr>)<pos:position pos:line="129" pos:column="43"/></condition><then pos:line="129" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="130" pos:column="33">argv_array_push<pos:position pos:line="130" pos:column="48"/></name><argument_list pos:line="130" pos:column="48">(<argument><expr><operator pos:line="130" pos:column="49">&amp;<pos:position pos:line="130" pos:column="54"/></operator><name><name pos:line="130" pos:column="50">conn<pos:position pos:line="130" pos:column="54"/></name><operator pos:line="130" pos:column="54">-&gt;<pos:position pos:line="130" pos:column="59"/></operator><name pos:line="130" pos:column="56">args<pos:position pos:line="130" pos:column="60"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="130" pos:column="62">"-batch"<pos:position pos:line="130" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="72"/></expr_stmt></block></then></if>
			<if pos:line="131" pos:column="25">if <condition pos:line="131" pos:column="28">(<expr><name pos:line="131" pos:column="29">port<pos:position pos:line="131" pos:column="33"/></name></expr>)<pos:position pos:line="131" pos:column="34"/></condition><then pos:line="131" pos:column="34"> <block pos:line="131" pos:column="35">{
				<comment type="block" pos:line="132" pos:column="33">/* P is for PuTTY, p is for OpenSSH */</comment>
				<expr_stmt><expr><call><name pos:line="133" pos:column="33">argv_array_push<pos:position pos:line="133" pos:column="48"/></name><argument_list pos:line="133" pos:column="48">(<argument><expr><operator pos:line="133" pos:column="49">&amp;<pos:position pos:line="133" pos:column="54"/></operator><name><name pos:line="133" pos:column="50">conn<pos:position pos:line="133" pos:column="54"/></name><operator pos:line="133" pos:column="54">-&gt;<pos:position pos:line="133" pos:column="59"/></operator><name pos:line="133" pos:column="56">args<pos:position pos:line="133" pos:column="60"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="133" pos:column="62">putty<pos:position pos:line="133" pos:column="67"/></name></expr> ?<pos:position pos:line="133" pos:column="69"/></condition><then pos:line="133" pos:column="69"> <expr><literal type="string" pos:line="133" pos:column="70">"-P"<pos:position pos:line="133" pos:column="74"/></literal></expr> <pos:position pos:line="133" pos:column="75"/></then><else pos:line="133" pos:column="75">: <expr><literal type="string" pos:line="133" pos:column="77">"-p"<pos:position pos:line="133" pos:column="81"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="133" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="83"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="134" pos:column="33">argv_array_push<pos:position pos:line="134" pos:column="48"/></name><argument_list pos:line="134" pos:column="48">(<argument><expr><operator pos:line="134" pos:column="49">&amp;<pos:position pos:line="134" pos:column="54"/></operator><name><name pos:line="134" pos:column="50">conn<pos:position pos:line="134" pos:column="54"/></name><operator pos:line="134" pos:column="54">-&gt;<pos:position pos:line="134" pos:column="59"/></operator><name pos:line="134" pos:column="56">args<pos:position pos:line="134" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="62">port<pos:position pos:line="134" pos:column="66"/></name></expr></argument>)<pos:position pos:line="134" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="68"/></expr_stmt>
			}<pos:position pos:line="135" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="136" pos:column="25">argv_array_push<pos:position pos:line="136" pos:column="40"/></name><argument_list pos:line="136" pos:column="40">(<argument><expr><operator pos:line="136" pos:column="41">&amp;<pos:position pos:line="136" pos:column="46"/></operator><name><name pos:line="136" pos:column="42">conn<pos:position pos:line="136" pos:column="46"/></name><operator pos:line="136" pos:column="46">-&gt;<pos:position pos:line="136" pos:column="51"/></operator><name pos:line="136" pos:column="48">args<pos:position pos:line="136" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="54">ssh_host<pos:position pos:line="136" pos:column="62"/></name></expr></argument>)<pos:position pos:line="136" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="64"/></expr_stmt>
		}<pos:position pos:line="137" pos:column="18"/></block></then> <else pos:line="137" pos:column="19">else <block pos:line="137" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="138" pos:column="25">transport_check_allowed<pos:position pos:line="138" pos:column="48"/></name><argument_list pos:line="138" pos:column="48">(<argument><expr><literal type="string" pos:line="138" pos:column="49">"file"<pos:position pos:line="138" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="139" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="140" pos:column="17">argv_array_push<pos:position pos:line="140" pos:column="32"/></name><argument_list pos:line="140" pos:column="32">(<argument><expr><operator pos:line="140" pos:column="33">&amp;<pos:position pos:line="140" pos:column="38"/></operator><name><name pos:line="140" pos:column="34">conn<pos:position pos:line="140" pos:column="38"/></name><operator pos:line="140" pos:column="38">-&gt;<pos:position pos:line="140" pos:column="43"/></operator><name pos:line="140" pos:column="40">args<pos:position pos:line="140" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="46">cmd<pos:position pos:line="140" pos:column="49"/></name><operator pos:line="140" pos:column="49">.<pos:position pos:line="140" pos:column="50"/></operator><name pos:line="140" pos:column="50">buf<pos:position pos:line="140" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="140" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="55"/></expr_stmt>

		<if pos:line="142" pos:column="17">if <condition pos:line="142" pos:column="20">(<expr><call><name pos:line="142" pos:column="21">start_command<pos:position pos:line="142" pos:column="34"/></name><argument_list pos:line="142" pos:column="34">(<argument><expr><name pos:line="142" pos:column="35">conn<pos:position pos:line="142" pos:column="39"/></name></expr></argument>)<pos:position pos:line="142" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="142" pos:column="41"/></condition><then pos:line="142" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="143" pos:column="25">die<pos:position pos:line="143" pos:column="28"/></name><argument_list pos:line="143" pos:column="28">(<argument><expr><literal type="string" pos:line="143" pos:column="29">"unable to fork"<pos:position pos:line="143" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="47"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name><name pos:line="145" pos:column="17">fd<pos:position pos:line="145" pos:column="19"/></name><index pos:line="145" pos:column="19">[<expr><literal type="number" pos:line="145" pos:column="20">0<pos:position pos:line="145" pos:column="21"/></literal></expr>]<pos:position pos:line="145" pos:column="22"/></index></name> <operator pos:line="145" pos:column="23">=<pos:position pos:line="145" pos:column="24"/></operator> <name><name pos:line="145" pos:column="25">conn<pos:position pos:line="145" pos:column="29"/></name><operator pos:line="145" pos:column="29">-&gt;<pos:position pos:line="145" pos:column="34"/></operator><name pos:line="145" pos:column="31">out<pos:position pos:line="145" pos:column="34"/></name></name></expr>;<pos:position pos:line="145" pos:column="35"/></expr_stmt> <comment type="block" pos:line="145" pos:column="36">/* read from child's stdout */</comment>
		<expr_stmt><expr><name><name pos:line="146" pos:column="17">fd<pos:position pos:line="146" pos:column="19"/></name><index pos:line="146" pos:column="19">[<expr><literal type="number" pos:line="146" pos:column="20">1<pos:position pos:line="146" pos:column="21"/></literal></expr>]<pos:position pos:line="146" pos:column="22"/></index></name> <operator pos:line="146" pos:column="23">=<pos:position pos:line="146" pos:column="24"/></operator> <name><name pos:line="146" pos:column="25">conn<pos:position pos:line="146" pos:column="29"/></name><operator pos:line="146" pos:column="29">-&gt;<pos:position pos:line="146" pos:column="34"/></operator><name pos:line="146" pos:column="31">in<pos:position pos:line="146" pos:column="33"/></name></name></expr>;<pos:position pos:line="146" pos:column="34"/></expr_stmt>  <comment type="block" pos:line="146" pos:column="36">/* write to child's stdin */</comment>
		<expr_stmt><expr><call><name pos:line="147" pos:column="17">strbuf_release<pos:position pos:line="147" pos:column="31"/></name><argument_list pos:line="147" pos:column="31">(<argument><expr><operator pos:line="147" pos:column="32">&amp;<pos:position pos:line="147" pos:column="37"/></operator><name pos:line="147" pos:column="33">cmd<pos:position pos:line="147" pos:column="36"/></name></expr></argument>)<pos:position pos:line="147" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="148" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="149" pos:column="9">free<pos:position pos:line="149" pos:column="13"/></name><argument_list pos:line="149" pos:column="13">(<argument><expr><name pos:line="149" pos:column="14">hostandport<pos:position pos:line="149" pos:column="25"/></name></expr></argument>)<pos:position pos:line="149" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="150" pos:column="9">free<pos:position pos:line="150" pos:column="13"/></name><argument_list pos:line="150" pos:column="13">(<argument><expr><name pos:line="150" pos:column="14">path<pos:position pos:line="150" pos:column="18"/></name></expr></argument>)<pos:position pos:line="150" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="20"/></expr_stmt>
	<return pos:line="151" pos:column="9">return <expr><name pos:line="151" pos:column="16">conn<pos:position pos:line="151" pos:column="20"/></name></expr>;<pos:position pos:line="151" pos:column="21"/></return>
}<pos:position pos:line="152" pos:column="2"/></block></function></unit>
