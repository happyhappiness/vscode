<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6965_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">re_dfastate_t<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">transit_state<pos:position pos:line="3" pos:column="14"/></name> <parameter_list pos:line="3" pos:column="15">(<parameter><decl><type><name pos:line="3" pos:column="16">reg_errcode_t<pos:position pos:line="3" pos:column="29"/></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="31">err<pos:position pos:line="3" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="36">re_match_context_t<pos:position pos:line="3" pos:column="54"/></name> <modifier pos:line="3" pos:column="55">*<pos:position pos:line="3" pos:column="56"/></modifier></type><name pos:line="3" pos:column="56">mctx<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>,
	       <parameter><decl><type><name pos:line="4" pos:column="16">re_dfastate_t<pos:position pos:line="4" pos:column="29"/></name> <modifier pos:line="4" pos:column="30">*<pos:position pos:line="4" pos:column="31"/></modifier></type><name pos:line="4" pos:column="31">state<pos:position pos:line="4" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="37"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">re_dfastate_t<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier><modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier></type><name pos:line="6" pos:column="19">trtable<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">unsigned<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">char<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">ch<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="9" pos:column="22"/></name></cpp:ifdef>
  <comment type="block" pos:line="10" pos:column="3">/* If the current state can accept multibyte.  */</comment>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><call><name pos:line="11" pos:column="7">BE<pos:position pos:line="11" pos:column="9"/></name> <argument_list pos:line="11" pos:column="10">(<argument><expr><name><name pos:line="11" pos:column="11">state<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">-&gt;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="18">accept_mb<pos:position pos:line="11" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="29">0<pos:position pos:line="11" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="32"/></condition><then pos:line="11" pos:column="32">
    <block pos:line="12" pos:column="5">{
      <expr_stmt><expr><operator pos:line="13" pos:column="7">*<pos:position pos:line="13" pos:column="8"/></operator><name pos:line="13" pos:column="8">err<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <call><name pos:line="13" pos:column="14">transit_state_mb<pos:position pos:line="13" pos:column="30"/></name> <argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">mctx<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="38">state<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
      <if pos:line="14" pos:column="7">if <condition pos:line="14" pos:column="10">(<expr><call><name pos:line="14" pos:column="11">BE<pos:position pos:line="14" pos:column="13"/></name> <argument_list pos:line="14" pos:column="14">(<argument><expr><operator pos:line="14" pos:column="15">*<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">err<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">!=<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="23">REG_NOERROR<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="36">0<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39">
	<block type="pseudo"><return pos:line="15" pos:column="9">return <expr><name pos:line="15" pos:column="16">NULL<pos:position pos:line="15" pos:column="20"/></name></expr>;<pos:position pos:line="15" pos:column="21"/></return></block></then></if>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="17" pos:column="8">/* RE_ENABLE_I18N */</comment>

  <comment type="block" pos:line="19" pos:column="3">/* Then decide the next state with the single byte.  */</comment>
<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="20" pos:column="5">0<pos:position pos:line="20" pos:column="6"/></literal></expr></cpp:if>
  if (0)
    <comment type="block" pos:line="22" pos:column="5">/* don't use transition table  */</comment>
    return transit_state_sb (err, mctx, state);
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="26" pos:column="3">/* Use transition table  */</comment>
  <expr_stmt><expr><name pos:line="27" pos:column="3">ch<pos:position pos:line="27" pos:column="5"/></name> <operator pos:line="27" pos:column="6">=<pos:position pos:line="27" pos:column="7"/></operator> <call><name pos:line="27" pos:column="8">re_string_fetch_byte<pos:position pos:line="27" pos:column="28"/></name> <argument_list pos:line="27" pos:column="29">(<argument><expr><operator pos:line="27" pos:column="30">&amp;<pos:position pos:line="27" pos:column="35"/></operator><name><name pos:line="27" pos:column="31">mctx<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">-&gt;<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="37">input<pos:position pos:line="27" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
  <for pos:line="28" pos:column="3">for <control pos:line="28" pos:column="7">(<init pos:line="28" pos:column="8">;<pos:position pos:line="28" pos:column="9"/></init><condition pos:line="28" pos:column="9">;<pos:position pos:line="28" pos:column="10"/></condition><incr/>)<pos:position pos:line="28" pos:column="11"/></control>
    <block pos:line="29" pos:column="5">{
      <expr_stmt><expr><name pos:line="30" pos:column="7">trtable<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">=<pos:position pos:line="30" pos:column="16"/></operator> <name><name pos:line="30" pos:column="17">state<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">-&gt;<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="24">trtable<pos:position pos:line="30" pos:column="31"/></name></name></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>
      <if pos:line="31" pos:column="7">if <condition pos:line="31" pos:column="10">(<expr><call><name pos:line="31" pos:column="11">BE<pos:position pos:line="31" pos:column="13"/></name> <argument_list pos:line="31" pos:column="14">(<argument><expr><name pos:line="31" pos:column="15">trtable<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">!=<pos:position pos:line="31" pos:column="25"/></operator> <name pos:line="31" pos:column="26">NULL<pos:position pos:line="31" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="32">1<pos:position pos:line="31" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35">
	<block type="pseudo"><return pos:line="32" pos:column="9">return <expr><name><name pos:line="32" pos:column="16">trtable<pos:position pos:line="32" pos:column="23"/></name><index pos:line="32" pos:column="23">[<expr><name pos:line="32" pos:column="24">ch<pos:position pos:line="32" pos:column="26"/></name></expr>]<pos:position pos:line="32" pos:column="27"/></index></name></expr>;<pos:position pos:line="32" pos:column="28"/></return></block></then></if>

      <expr_stmt><expr><name pos:line="34" pos:column="7">trtable<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">=<pos:position pos:line="34" pos:column="16"/></operator> <name><name pos:line="34" pos:column="17">state<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">-&gt;<pos:position pos:line="34" pos:column="27"/></operator><name pos:line="34" pos:column="24">word_trtable<pos:position pos:line="34" pos:column="36"/></name></name></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>
      <if pos:line="35" pos:column="7">if <condition pos:line="35" pos:column="10">(<expr><call><name pos:line="35" pos:column="11">BE<pos:position pos:line="35" pos:column="13"/></name> <argument_list pos:line="35" pos:column="14">(<argument><expr><name pos:line="35" pos:column="15">trtable<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">!=<pos:position pos:line="35" pos:column="25"/></operator> <name pos:line="35" pos:column="26">NULL<pos:position pos:line="35" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="32">1<pos:position pos:line="35" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="35"/></condition><then pos:line="35" pos:column="35">
	<block pos:line="36" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="37" pos:column="11">unsigned<pos:position pos:line="37" pos:column="19"/></name> <name pos:line="37" pos:column="20">int<pos:position pos:line="37" pos:column="23"/></name></type> <name pos:line="37" pos:column="24">context<pos:position pos:line="37" pos:column="31"/></name></decl>;<pos:position pos:line="37" pos:column="32"/></decl_stmt>
	  <expr_stmt><expr><name pos:line="38" pos:column="11">context<pos:position pos:line="38" pos:column="18"/></name>
	    <operator pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></operator> <call><name pos:line="39" pos:column="15">re_string_context_at<pos:position pos:line="39" pos:column="35"/></name> <argument_list pos:line="39" pos:column="36">(<argument><expr><operator pos:line="39" pos:column="37">&amp;<pos:position pos:line="39" pos:column="42"/></operator><name><name pos:line="39" pos:column="38">mctx<pos:position pos:line="39" pos:column="42"/></name><operator pos:line="39" pos:column="42">-&gt;<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="44">input<pos:position pos:line="39" pos:column="49"/></name></name></expr></argument>,
				    <argument><expr><call><name pos:line="40" pos:column="37">re_string_cur_idx<pos:position pos:line="40" pos:column="54"/></name> <argument_list pos:line="40" pos:column="55">(<argument><expr><operator pos:line="40" pos:column="56">&amp;<pos:position pos:line="40" pos:column="61"/></operator><name><name pos:line="40" pos:column="57">mctx<pos:position pos:line="40" pos:column="61"/></name><operator pos:line="40" pos:column="61">-&gt;<pos:position pos:line="40" pos:column="66"/></operator><name pos:line="40" pos:column="63">input<pos:position pos:line="40" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="69"/></argument_list></call> <operator pos:line="40" pos:column="70">-<pos:position pos:line="40" pos:column="71"/></operator> <literal type="number" pos:line="40" pos:column="72">1<pos:position pos:line="40" pos:column="73"/></literal></expr></argument>,
				    <argument><expr><name><name pos:line="41" pos:column="37">mctx<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">-&gt;<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="43">eflags<pos:position pos:line="41" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="51"/></expr_stmt>
	  <if pos:line="42" pos:column="11">if <condition pos:line="42" pos:column="14">(<expr><call><name pos:line="42" pos:column="15">IS_WORD_CONTEXT<pos:position pos:line="42" pos:column="30"/></name> <argument_list pos:line="42" pos:column="31">(<argument><expr><name pos:line="42" pos:column="32">context<pos:position pos:line="42" pos:column="39"/></name></expr></argument>)<pos:position pos:line="42" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="41"/></condition><then pos:line="42" pos:column="41">
	    <block type="pseudo"><return pos:line="43" pos:column="13">return <expr><name><name pos:line="43" pos:column="20">trtable<pos:position pos:line="43" pos:column="27"/></name><index pos:line="43" pos:column="27">[<expr><name pos:line="43" pos:column="28">ch<pos:position pos:line="43" pos:column="30"/></name> <operator pos:line="43" pos:column="31">+<pos:position pos:line="43" pos:column="32"/></operator> <name pos:line="43" pos:column="33">SBC_MAX<pos:position pos:line="43" pos:column="40"/></name></expr>]<pos:position pos:line="43" pos:column="41"/></index></name></expr>;<pos:position pos:line="43" pos:column="42"/></return></block></then>
	  <else pos:line="44" pos:column="11">else
	    <block type="pseudo"><return pos:line="45" pos:column="13">return <expr><name><name pos:line="45" pos:column="20">trtable<pos:position pos:line="45" pos:column="27"/></name><index pos:line="45" pos:column="27">[<expr><name pos:line="45" pos:column="28">ch<pos:position pos:line="45" pos:column="30"/></name></expr>]<pos:position pos:line="45" pos:column="31"/></index></name></expr>;<pos:position pos:line="45" pos:column="32"/></return></block></else></if>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>

      <if pos:line="48" pos:column="7">if <condition pos:line="48" pos:column="10">(<expr><operator pos:line="48" pos:column="11">!<pos:position pos:line="48" pos:column="12"/></operator><call><name pos:line="48" pos:column="12">build_trtable<pos:position pos:line="48" pos:column="25"/></name> <argument_list pos:line="48" pos:column="26">(<argument><expr><name><name pos:line="48" pos:column="27">mctx<pos:position pos:line="48" pos:column="31"/></name><operator pos:line="48" pos:column="31">-&gt;<pos:position pos:line="48" pos:column="36"/></operator><name pos:line="48" pos:column="33">dfa<pos:position pos:line="48" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="38">state<pos:position pos:line="48" pos:column="43"/></name></expr></argument>)<pos:position pos:line="48" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="45"/></condition><then pos:line="48" pos:column="45">
	<block pos:line="49" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="50" pos:column="11">*<pos:position pos:line="50" pos:column="12"/></operator><name pos:line="50" pos:column="12">err<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">=<pos:position pos:line="50" pos:column="17"/></operator> <name pos:line="50" pos:column="18">REG_ESPACE<pos:position pos:line="50" pos:column="28"/></name></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>
	  <return pos:line="51" pos:column="11">return <expr><name pos:line="51" pos:column="18">NULL<pos:position pos:line="51" pos:column="22"/></name></expr>;<pos:position pos:line="51" pos:column="23"/></return>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="54" pos:column="7">/* Retry, we now have a transition table.  */</comment>
    }<pos:position pos:line="55" pos:column="6"/></block></for>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
