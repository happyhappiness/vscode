<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4135_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">prepare_order<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">orderfile<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">cnt<pos:position pos:line="3" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="18">pass<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">sb<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">STRBUF_INIT<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">void<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">map<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">cp<pos:position pos:line="6" pos:column="17"/></name></decl>, <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="20">endp<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">ssize_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">sz<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">order<pos:position pos:line="9" pos:column="18"/></name></expr>)<pos:position pos:line="9" pos:column="19"/></condition><then pos:line="9" pos:column="19">
		<block type="pseudo"><return pos:line="10" pos:column="17">return;<pos:position pos:line="10" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="12" pos:column="9">sz<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">strbuf_read_file<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><operator pos:line="12" pos:column="31">&amp;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="32">sb<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="36">orderfile<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="47">0<pos:position pos:line="12" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="50"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">sz<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">&lt;<pos:position pos:line="13" pos:column="20"/></operator> <literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">die_errno<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><call><name pos:line="14" pos:column="27">_<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><literal type="string" pos:line="14" pos:column="29">"failed to read orderfile '%s'"<pos:position pos:line="14" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="14" pos:column="63">orderfile<pos:position pos:line="14" pos:column="72"/></name></expr></argument>)<pos:position pos:line="14" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="74"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="15" pos:column="9">map<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">strbuf_detach<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><operator pos:line="15" pos:column="29">&amp;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="30">sb<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="34">NULL<pos:position pos:line="15" pos:column="38"/></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">endp<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <operator pos:line="16" pos:column="16">(<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">char<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">*<pos:position pos:line="16" pos:column="23"/></operator><operator pos:line="16" pos:column="23">)<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="25">map<pos:position pos:line="16" pos:column="28"/></name> <operator pos:line="16" pos:column="29">+<pos:position pos:line="16" pos:column="30"/></operator> <name pos:line="16" pos:column="31">sz<pos:position pos:line="16" pos:column="33"/></name></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>

	<for pos:line="18" pos:column="9">for <control pos:line="18" pos:column="13">(<init><expr><name pos:line="18" pos:column="14">pass<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <literal type="number" pos:line="18" pos:column="21">0<pos:position pos:line="18" pos:column="22"/></literal></expr>;<pos:position pos:line="18" pos:column="23"/></init> <condition><expr><name pos:line="18" pos:column="24">pass<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">&lt;<pos:position pos:line="18" pos:column="33"/></operator> <literal type="number" pos:line="18" pos:column="31">2<pos:position pos:line="18" pos:column="32"/></literal></expr>;<pos:position pos:line="18" pos:column="33"/></condition> <incr><expr><name pos:line="18" pos:column="34">pass<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">++<pos:position pos:line="18" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="41"/></control> <block pos:line="18" pos:column="42">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">cnt<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <literal type="number" pos:line="19" pos:column="23">0<pos:position pos:line="19" pos:column="24"/></literal></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">cp<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">map<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
		<while pos:line="21" pos:column="17">while <condition pos:line="21" pos:column="23">(<expr><name pos:line="21" pos:column="24">cp<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">&lt;<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="29">endp<pos:position pos:line="21" pos:column="33"/></name></expr>)<pos:position pos:line="21" pos:column="34"/></condition> <block pos:line="21" pos:column="35">{
			<decl_stmt><decl><type><name pos:line="22" pos:column="25">char<pos:position pos:line="22" pos:column="29"/></name> <modifier pos:line="22" pos:column="30">*<pos:position pos:line="22" pos:column="31"/></modifier></type><name pos:line="22" pos:column="31">ep<pos:position pos:line="22" pos:column="33"/></name></decl>;<pos:position pos:line="22" pos:column="34"/></decl_stmt>
			<for pos:line="23" pos:column="25">for <control pos:line="23" pos:column="29">(<init><expr><name pos:line="23" pos:column="30">ep<pos:position pos:line="23" pos:column="32"/></name> <operator pos:line="23" pos:column="33">=<pos:position pos:line="23" pos:column="34"/></operator> <name pos:line="23" pos:column="35">cp<pos:position pos:line="23" pos:column="37"/></name></expr>;<pos:position pos:line="23" pos:column="38"/></init> <condition><expr><name pos:line="23" pos:column="39">ep<pos:position pos:line="23" pos:column="41"/></name> <operator pos:line="23" pos:column="42">&lt;<pos:position pos:line="23" pos:column="46"/></operator> <name pos:line="23" pos:column="44">endp<pos:position pos:line="23" pos:column="48"/></name> <operator pos:line="23" pos:column="49">&amp;&amp;<pos:position pos:line="23" pos:column="59"/></operator> <operator pos:line="23" pos:column="52">*<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="53">ep<pos:position pos:line="23" pos:column="55"/></name> <operator pos:line="23" pos:column="56">!=<pos:position pos:line="23" pos:column="58"/></operator> <literal type="char" pos:line="23" pos:column="59">'\n'<pos:position pos:line="23" pos:column="63"/></literal></expr>;<pos:position pos:line="23" pos:column="64"/></condition> <incr><expr><name pos:line="23" pos:column="65">ep<pos:position pos:line="23" pos:column="67"/></name><operator pos:line="23" pos:column="67">++<pos:position pos:line="23" pos:column="69"/></operator></expr></incr>)<pos:position pos:line="23" pos:column="70"/></control>
				<block type="pseudo"><empty_stmt pos:line="24" pos:column="33">;<pos:position pos:line="24" pos:column="34"/></empty_stmt></block></for>
			<comment type="block" pos:line="25" pos:column="25">/* cp to ep has one line */</comment>
			<if pos:line="26" pos:column="25">if <condition pos:line="26" pos:column="28">(<expr><operator pos:line="26" pos:column="29">*<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="30">cp<pos:position pos:line="26" pos:column="32"/></name> <operator pos:line="26" pos:column="33">==<pos:position pos:line="26" pos:column="35"/></operator> <literal type="char" pos:line="26" pos:column="36">'\n'<pos:position pos:line="26" pos:column="40"/></literal> <operator pos:line="26" pos:column="41">||<pos:position pos:line="26" pos:column="43"/></operator> <operator pos:line="26" pos:column="44">*<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="45">cp<pos:position pos:line="26" pos:column="47"/></name> <operator pos:line="26" pos:column="48">==<pos:position pos:line="26" pos:column="50"/></operator> <literal type="char" pos:line="26" pos:column="51">'#'<pos:position pos:line="26" pos:column="54"/></literal></expr>)<pos:position pos:line="26" pos:column="55"/></condition><then pos:line="26" pos:column="55">
				<block type="pseudo"><empty_stmt pos:line="27" pos:column="33">;<pos:position pos:line="27" pos:column="34"/></empty_stmt></block></then> <comment type="block" pos:line="27" pos:column="35">/* comment */</comment>
			<elseif pos:line="28" pos:column="25">else <if pos:line="28" pos:column="30">if <condition pos:line="28" pos:column="33">(<expr><name pos:line="28" pos:column="34">pass<pos:position pos:line="28" pos:column="38"/></name> <operator pos:line="28" pos:column="39">==<pos:position pos:line="28" pos:column="41"/></operator> <literal type="number" pos:line="28" pos:column="42">0<pos:position pos:line="28" pos:column="43"/></literal></expr>)<pos:position pos:line="28" pos:column="44"/></condition><then pos:line="28" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="33">cnt<pos:position pos:line="29" pos:column="36"/></name><operator pos:line="29" pos:column="36">++<pos:position pos:line="29" pos:column="38"/></operator></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt></block></then></if></elseif>
			<else pos:line="30" pos:column="25">else <block pos:line="30" pos:column="30">{
				<if pos:line="31" pos:column="33">if <condition pos:line="31" pos:column="36">(<expr><operator pos:line="31" pos:column="37">*<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="38">ep<pos:position pos:line="31" pos:column="40"/></name> <operator pos:line="31" pos:column="41">==<pos:position pos:line="31" pos:column="43"/></operator> <literal type="char" pos:line="31" pos:column="44">'\n'<pos:position pos:line="31" pos:column="48"/></literal></expr>)<pos:position pos:line="31" pos:column="49"/></condition><then pos:line="31" pos:column="49"> <block pos:line="31" pos:column="50">{
					<expr_stmt><expr><operator pos:line="32" pos:column="41">*<pos:position pos:line="32" pos:column="42"/></operator><name pos:line="32" pos:column="42">ep<pos:position pos:line="32" pos:column="44"/></name> <operator pos:line="32" pos:column="45">=<pos:position pos:line="32" pos:column="46"/></operator> <literal type="number" pos:line="32" pos:column="47">0<pos:position pos:line="32" pos:column="48"/></literal></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>
					<expr_stmt><expr><name><name pos:line="33" pos:column="41">order<pos:position pos:line="33" pos:column="46"/></name><index pos:line="33" pos:column="46">[<expr><name pos:line="33" pos:column="47">cnt<pos:position pos:line="33" pos:column="50"/></name></expr>]<pos:position pos:line="33" pos:column="51"/></index></name> <operator pos:line="33" pos:column="52">=<pos:position pos:line="33" pos:column="53"/></operator> <name pos:line="33" pos:column="54">cp<pos:position pos:line="33" pos:column="56"/></name></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt>
				}<pos:position pos:line="34" pos:column="34"/></block></then> <else pos:line="34" pos:column="35">else <block pos:line="34" pos:column="40">{
					<expr_stmt><expr><name><name pos:line="35" pos:column="41">order<pos:position pos:line="35" pos:column="46"/></name><index pos:line="35" pos:column="46">[<expr><name pos:line="35" pos:column="47">cnt<pos:position pos:line="35" pos:column="50"/></name></expr>]<pos:position pos:line="35" pos:column="51"/></index></name> <operator pos:line="35" pos:column="52">=<pos:position pos:line="35" pos:column="53"/></operator> <call><name pos:line="35" pos:column="54">xmemdupz<pos:position pos:line="35" pos:column="62"/></name><argument_list pos:line="35" pos:column="62">(<argument><expr><name pos:line="35" pos:column="63">cp<pos:position pos:line="35" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="67">ep<pos:position pos:line="35" pos:column="69"/></name> <operator pos:line="35" pos:column="70">-<pos:position pos:line="35" pos:column="71"/></operator> <name pos:line="35" pos:column="72">cp<pos:position pos:line="35" pos:column="74"/></name></expr></argument>)<pos:position pos:line="35" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="76"/></expr_stmt>
				}<pos:position pos:line="36" pos:column="34"/></block></else></if>
				<expr_stmt><expr><name pos:line="37" pos:column="33">cnt<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">++<pos:position pos:line="37" pos:column="38"/></operator></expr>;<pos:position pos:line="37" pos:column="39"/></expr_stmt>
			}<pos:position pos:line="38" pos:column="26"/></block></else></if>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><name pos:line="39" pos:column="29">ep<pos:position pos:line="39" pos:column="31"/></name> <operator pos:line="39" pos:column="32">&lt;<pos:position pos:line="39" pos:column="36"/></operator> <name pos:line="39" pos:column="34">endp<pos:position pos:line="39" pos:column="38"/></name></expr>)<pos:position pos:line="39" pos:column="39"/></condition><then pos:line="39" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="33">ep<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">++<pos:position pos:line="40" pos:column="37"/></operator></expr>;<pos:position pos:line="40" pos:column="38"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="41" pos:column="25">cp<pos:position pos:line="41" pos:column="27"/></name> <operator pos:line="41" pos:column="28">=<pos:position pos:line="41" pos:column="29"/></operator> <name pos:line="41" pos:column="30">ep<pos:position pos:line="41" pos:column="32"/></name></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></while>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">pass<pos:position pos:line="43" pos:column="25"/></name> <operator pos:line="43" pos:column="26">==<pos:position pos:line="43" pos:column="28"/></operator> <literal type="number" pos:line="43" pos:column="29">0<pos:position pos:line="43" pos:column="30"/></literal></expr>)<pos:position pos:line="43" pos:column="31"/></condition><then pos:line="43" pos:column="31"> <block pos:line="43" pos:column="32">{
			<expr_stmt><expr><name pos:line="44" pos:column="25">order_cnt<pos:position pos:line="44" pos:column="34"/></name> <operator pos:line="44" pos:column="35">=<pos:position pos:line="44" pos:column="36"/></operator> <name pos:line="44" pos:column="37">cnt<pos:position pos:line="44" pos:column="40"/></name></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">ALLOC_ARRAY<pos:position pos:line="45" pos:column="36"/></name><argument_list pos:line="45" pos:column="36">(<argument><expr><name pos:line="45" pos:column="37">order<pos:position pos:line="45" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="44">cnt<pos:position pos:line="45" pos:column="47"/></name></expr></argument>)<pos:position pos:line="45" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if>
	}<pos:position pos:line="47" pos:column="10"/></block></for>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
