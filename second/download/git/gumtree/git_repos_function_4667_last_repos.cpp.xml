<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4667_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">run_argv<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">argcp<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier><modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">argv<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">done_alias<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><literal type="number" pos:line="3" pos:column="26">0<pos:position pos:line="3" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>

	<while pos:line="5" pos:column="9">while <condition pos:line="5" pos:column="15">(<expr><literal type="number" pos:line="5" pos:column="16">1<pos:position pos:line="5" pos:column="17"/></literal></expr>)<pos:position pos:line="5" pos:column="18"/></condition> <block pos:line="5" pos:column="19">{
		<comment type="block" pos:line="6" pos:column="17">/*
		 * If we tried alias and futzed with our environment,
		 * it no longer is safe to invoke builtins directly in
		 * general.  We have to spawn them as dashed externals.
		 *
		 * NEEDSWORK: if we can figure out cases
		 * where it is safe to do, we can avoid spawning a new
		 * process.
		 */</comment>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">done_alias<pos:position pos:line="15" pos:column="32"/></name></expr>)<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">handle_builtin<pos:position pos:line="16" pos:column="39"/></name><argument_list pos:line="16" pos:column="39">(<argument><expr><operator pos:line="16" pos:column="40">*<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="41">argcp<pos:position pos:line="16" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="48">*<pos:position pos:line="16" pos:column="49"/></operator><name pos:line="16" pos:column="49">argv<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="18" pos:column="17">/* .. then try the external ones */</comment>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">execv_dashed_external<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(<argument><expr><operator pos:line="19" pos:column="39">*<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="40">argv<pos:position pos:line="19" pos:column="44"/></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt>

		<comment type="block" pos:line="21" pos:column="17">/* It could be an alias -- this works around the insanity
		 * of overriding "git log" with "git show" by having
		 * alias.log = show
		 */</comment>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">done_alias<pos:position pos:line="25" pos:column="31"/></name></expr>)<pos:position pos:line="25" pos:column="32"/></condition><then pos:line="25" pos:column="32">
			<block type="pseudo"><break pos:line="26" pos:column="25">break;<pos:position pos:line="26" pos:column="31"/></break></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><call><name pos:line="27" pos:column="22">handle_alias<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><name pos:line="27" pos:column="35">argcp<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="42">argv<pos:position pos:line="27" pos:column="46"/></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="48"/></condition><then pos:line="27" pos:column="48">
			<block type="pseudo"><break pos:line="28" pos:column="25">break;<pos:position pos:line="28" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="29" pos:column="17">done_alias<pos:position pos:line="29" pos:column="27"/></name> <operator pos:line="29" pos:column="28">=<pos:position pos:line="29" pos:column="29"/></operator> <literal type="number" pos:line="29" pos:column="30">1<pos:position pos:line="29" pos:column="31"/></literal></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></while>

	<return pos:line="32" pos:column="9">return <expr><name pos:line="32" pos:column="16">done_alias<pos:position pos:line="32" pos:column="26"/></name></expr>;<pos:position pos:line="32" pos:column="27"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
