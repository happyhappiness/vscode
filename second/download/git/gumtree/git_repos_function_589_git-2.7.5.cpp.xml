<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_589_git-2.7.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">store_write_pair<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">fd<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">key<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">value<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">success<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">length<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><call><name pos:line="4" pos:column="22">strlen<pos:position pos:line="4" pos:column="28"/></name><argument_list pos:line="4" pos:column="28">(<argument><expr><name pos:line="4" pos:column="29">key<pos:position pos:line="4" pos:column="32"/></name> <operator pos:line="4" pos:column="33">+<pos:position pos:line="4" pos:column="34"/></operator> <name><name pos:line="4" pos:column="35">store<pos:position pos:line="4" pos:column="40"/></name><operator pos:line="4" pos:column="40">.<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="41">baselen<pos:position pos:line="4" pos:column="48"/></name></name> <operator pos:line="4" pos:column="49">+<pos:position pos:line="4" pos:column="50"/></operator> <literal type="number" pos:line="4" pos:column="51">1<pos:position pos:line="4" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">quote<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><literal type="string" pos:line="5" pos:column="29">""<pos:position pos:line="5" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">sb<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name pos:line="6" pos:column="28">STRBUF_INIT<pos:position pos:line="6" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/*
	 * Check to see if the value needs to be surrounded with a dq pair.
	 * Note that problematic characters are always backslash-quoted; this
	 * check is about not losing leading or trailing SP and strings that
	 * follow beginning-of-comment characters (i.e. ';' and '#') by the
	 * configuration parser.
	 */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">value<pos:position pos:line="15" pos:column="18"/></name><index pos:line="15" pos:column="18">[<expr><literal type="number" pos:line="15" pos:column="19">0<pos:position pos:line="15" pos:column="20"/></literal></expr>]<pos:position pos:line="15" pos:column="21"/></index></name> <operator pos:line="15" pos:column="22">==<pos:position pos:line="15" pos:column="24"/></operator> <literal type="char" pos:line="15" pos:column="25">' '<pos:position pos:line="15" pos:column="28"/></literal></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="17">quote<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <literal type="string" pos:line="16" pos:column="25">"\""<pos:position pos:line="16" pos:column="29"/></literal></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt></block></then></if>
	<for pos:line="17" pos:column="9">for <control pos:line="17" pos:column="13">(<init><expr><name pos:line="17" pos:column="14">i<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">0<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></init> <condition><expr><name><name pos:line="17" pos:column="21">value<pos:position pos:line="17" pos:column="26"/></name><index pos:line="17" pos:column="26">[<expr><name pos:line="17" pos:column="27">i<pos:position pos:line="17" pos:column="28"/></name></expr>]<pos:position pos:line="17" pos:column="29"/></index></name></expr>;<pos:position pos:line="17" pos:column="30"/></condition> <incr><expr><name pos:line="17" pos:column="31">i<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">++<pos:position pos:line="17" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="35"/></control>
		<block type="pseudo"><if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name><name pos:line="18" pos:column="21">value<pos:position pos:line="18" pos:column="26"/></name><index pos:line="18" pos:column="26">[<expr><name pos:line="18" pos:column="27">i<pos:position pos:line="18" pos:column="28"/></name></expr>]<pos:position pos:line="18" pos:column="29"/></index></name> <operator pos:line="18" pos:column="30">==<pos:position pos:line="18" pos:column="32"/></operator> <literal type="char" pos:line="18" pos:column="33">';'<pos:position pos:line="18" pos:column="36"/></literal> <operator pos:line="18" pos:column="37">||<pos:position pos:line="18" pos:column="39"/></operator> <name><name pos:line="18" pos:column="40">value<pos:position pos:line="18" pos:column="45"/></name><index pos:line="18" pos:column="45">[<expr><name pos:line="18" pos:column="46">i<pos:position pos:line="18" pos:column="47"/></name></expr>]<pos:position pos:line="18" pos:column="48"/></index></name> <operator pos:line="18" pos:column="49">==<pos:position pos:line="18" pos:column="51"/></operator> <literal type="char" pos:line="18" pos:column="52">'#'<pos:position pos:line="18" pos:column="55"/></literal></expr>)<pos:position pos:line="18" pos:column="56"/></condition><then pos:line="18" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="25">quote<pos:position pos:line="19" pos:column="30"/></name> <operator pos:line="19" pos:column="31">=<pos:position pos:line="19" pos:column="32"/></operator> <literal type="string" pos:line="19" pos:column="33">"\""<pos:position pos:line="19" pos:column="37"/></literal></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt></block></then></if></block></for>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">i<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">&amp;&amp;<pos:position pos:line="20" pos:column="25"/></operator> <name><name pos:line="20" pos:column="18">value<pos:position pos:line="20" pos:column="23"/></name><index pos:line="20" pos:column="23">[<expr><name pos:line="20" pos:column="24">i<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">-<pos:position pos:line="20" pos:column="27"/></operator> <literal type="number" pos:line="20" pos:column="28">1<pos:position pos:line="20" pos:column="29"/></literal></expr>]<pos:position pos:line="20" pos:column="30"/></index></name> <operator pos:line="20" pos:column="31">==<pos:position pos:line="20" pos:column="33"/></operator> <literal type="char" pos:line="20" pos:column="34">' '<pos:position pos:line="20" pos:column="37"/></literal></expr>)<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="17">quote<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <literal type="string" pos:line="21" pos:column="25">"\""<pos:position pos:line="21" pos:column="29"/></literal></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">strbuf_addf<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><operator pos:line="23" pos:column="21">&amp;<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="22">sb<pos:position pos:line="23" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="26">"\t%.*s = %s"<pos:position pos:line="23" pos:column="39"/></literal></expr></argument>,
		    <argument><expr><name pos:line="24" pos:column="21">length<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="29">key<pos:position pos:line="24" pos:column="32"/></name> <operator pos:line="24" pos:column="33">+<pos:position pos:line="24" pos:column="34"/></operator> <name><name pos:line="24" pos:column="35">store<pos:position pos:line="24" pos:column="40"/></name><operator pos:line="24" pos:column="40">.<pos:position pos:line="24" pos:column="41"/></operator><name pos:line="24" pos:column="41">baselen<pos:position pos:line="24" pos:column="48"/></name></name> <operator pos:line="24" pos:column="49">+<pos:position pos:line="24" pos:column="50"/></operator> <literal type="number" pos:line="24" pos:column="51">1<pos:position pos:line="24" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="54">quote<pos:position pos:line="24" pos:column="59"/></name></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="61"/></expr_stmt>

	<for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">(<init><expr><name pos:line="26" pos:column="14">i<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="number" pos:line="26" pos:column="18">0<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></init> <condition><expr><name><name pos:line="26" pos:column="21">value<pos:position pos:line="26" pos:column="26"/></name><index pos:line="26" pos:column="26">[<expr><name pos:line="26" pos:column="27">i<pos:position pos:line="26" pos:column="28"/></name></expr>]<pos:position pos:line="26" pos:column="29"/></index></name></expr>;<pos:position pos:line="26" pos:column="30"/></condition> <incr><expr><name pos:line="26" pos:column="31">i<pos:position pos:line="26" pos:column="32"/></name><operator pos:line="26" pos:column="32">++<pos:position pos:line="26" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="35"/></control>
		<block type="pseudo"><switch pos:line="27" pos:column="17">switch <condition pos:line="27" pos:column="24">(<expr><name><name pos:line="27" pos:column="25">value<pos:position pos:line="27" pos:column="30"/></name><index pos:line="27" pos:column="30">[<expr><name pos:line="27" pos:column="31">i<pos:position pos:line="27" pos:column="32"/></name></expr>]<pos:position pos:line="27" pos:column="33"/></index></name></expr>)<pos:position pos:line="27" pos:column="34"/></condition> <block pos:line="27" pos:column="35">{
		<case pos:line="28" pos:column="17">case <expr><literal type="char" pos:line="28" pos:column="22">'\n'<pos:position pos:line="28" pos:column="26"/></literal></expr>:<pos:position pos:line="28" pos:column="27"/></case>
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">strbuf_addstr<pos:position pos:line="29" pos:column="38"/></name><argument_list pos:line="29" pos:column="38">(<argument><expr><operator pos:line="29" pos:column="39">&amp;<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="40">sb<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="44">"\\n"<pos:position pos:line="29" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="51"/></expr_stmt>
			<break pos:line="30" pos:column="25">break;<pos:position pos:line="30" pos:column="31"/></break>
		<case pos:line="31" pos:column="17">case <expr><literal type="char" pos:line="31" pos:column="22">'\t'<pos:position pos:line="31" pos:column="26"/></literal></expr>:<pos:position pos:line="31" pos:column="27"/></case>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">strbuf_addstr<pos:position pos:line="32" pos:column="38"/></name><argument_list pos:line="32" pos:column="38">(<argument><expr><operator pos:line="32" pos:column="39">&amp;<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="40">sb<pos:position pos:line="32" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="44">"\\t"<pos:position pos:line="32" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="51"/></expr_stmt>
			<break pos:line="33" pos:column="25">break;<pos:position pos:line="33" pos:column="31"/></break>
		<case pos:line="34" pos:column="17">case <expr><literal type="char" pos:line="34" pos:column="22">'"'<pos:position pos:line="34" pos:column="25"/></literal></expr>:<pos:position pos:line="34" pos:column="26"/></case>
		<case pos:line="35" pos:column="17">case <expr><literal type="char" pos:line="35" pos:column="22">'\\'<pos:position pos:line="35" pos:column="26"/></literal></expr>:<pos:position pos:line="35" pos:column="27"/></case>
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">strbuf_addch<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><operator pos:line="36" pos:column="38">&amp;<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="39">sb<pos:position pos:line="36" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="36" pos:column="43">'\\'<pos:position pos:line="36" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="49"/></expr_stmt>
		<default pos:line="37" pos:column="17">default:<pos:position pos:line="37" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">strbuf_addch<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">(<argument><expr><operator pos:line="38" pos:column="38">&amp;<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="39">sb<pos:position pos:line="38" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="43">value<pos:position pos:line="38" pos:column="48"/></name><index pos:line="38" pos:column="48">[<expr><name pos:line="38" pos:column="49">i<pos:position pos:line="38" pos:column="50"/></name></expr>]<pos:position pos:line="38" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="53"/></expr_stmt>
			<break pos:line="39" pos:column="25">break;<pos:position pos:line="39" pos:column="31"/></break>
		}<pos:position pos:line="40" pos:column="18"/></block></switch></block></for>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">strbuf_addf<pos:position pos:line="41" pos:column="20"/></name><argument_list pos:line="41" pos:column="20">(<argument><expr><operator pos:line="41" pos:column="21">&amp;<pos:position pos:line="41" pos:column="26"/></operator><name pos:line="41" pos:column="22">sb<pos:position pos:line="41" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="26">"%s\n"<pos:position pos:line="41" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="34">quote<pos:position pos:line="41" pos:column="39"/></name></expr></argument>)<pos:position pos:line="41" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><name pos:line="43" pos:column="9">success<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <call><name pos:line="43" pos:column="19">write_in_full<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">fd<pos:position pos:line="43" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="37">sb<pos:position pos:line="43" pos:column="39"/></name><operator pos:line="43" pos:column="39">.<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="40">buf<pos:position pos:line="43" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="45">sb<pos:position pos:line="43" pos:column="47"/></name><operator pos:line="43" pos:column="47">.<pos:position pos:line="43" pos:column="48"/></operator><name pos:line="43" pos:column="48">len<pos:position pos:line="43" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call> <operator pos:line="43" pos:column="53">==<pos:position pos:line="43" pos:column="55"/></operator> <name><name pos:line="43" pos:column="56">sb<pos:position pos:line="43" pos:column="58"/></name><operator pos:line="43" pos:column="58">.<pos:position pos:line="43" pos:column="59"/></operator><name pos:line="43" pos:column="59">len<pos:position pos:line="43" pos:column="62"/></name></name></expr>;<pos:position pos:line="43" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">strbuf_release<pos:position pos:line="44" pos:column="23"/></name><argument_list pos:line="44" pos:column="23">(<argument><expr><operator pos:line="44" pos:column="24">&amp;<pos:position pos:line="44" pos:column="29"/></operator><name pos:line="44" pos:column="25">sb<pos:position pos:line="44" pos:column="27"/></name></expr></argument>)<pos:position pos:line="44" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt>

	<return pos:line="46" pos:column="9">return <expr><name pos:line="46" pos:column="16">success<pos:position pos:line="46" pos:column="23"/></name></expr>;<pos:position pos:line="46" pos:column="24"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
