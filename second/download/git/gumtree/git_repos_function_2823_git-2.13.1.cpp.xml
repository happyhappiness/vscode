<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2823_git-2.13.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">print_advice<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">show_hint<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">replay_opts<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">opts<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">msg<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><call><name pos:line="3" pos:column="21">getenv<pos:position pos:line="3" pos:column="27"/></name><argument_list pos:line="3" pos:column="27">(<argument><expr><literal type="string" pos:line="3" pos:column="28">"GIT_CHERRY_PICK_HELP"<pos:position pos:line="3" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="52"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">msg<pos:position pos:line="5" pos:column="16"/></name></expr>)<pos:position pos:line="5" pos:column="17"/></condition><then pos:line="5" pos:column="17"> <block pos:line="5" pos:column="18">{
		<expr_stmt><expr><call><name pos:line="6" pos:column="17">fprintf<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">stderr<pos:position pos:line="6" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="33">"%s\n"<pos:position pos:line="6" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="41">msg<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt>
		<comment type="block" pos:line="7" pos:column="17">/*
		 * A conflict has occurred but the porcelain
		 * (typically rebase --interactive) wants to take care
		 * of the commit itself so remove CHERRY_PICK_HEAD
		 */</comment>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">unlink<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><call><name pos:line="12" pos:column="24">git_path_cherry_pick_head<pos:position pos:line="12" pos:column="49"/></name><argument_list pos:line="12" pos:column="49">()<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="53"/></expr_stmt>
		<return pos:line="13" pos:column="17">return;<pos:position pos:line="13" pos:column="24"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">show_hint<pos:position pos:line="16" pos:column="22"/></name></expr>)<pos:position pos:line="16" pos:column="23"/></condition><then pos:line="16" pos:column="23"> <block pos:line="16" pos:column="24">{
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name><name pos:line="17" pos:column="21">opts<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">-&gt;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="27">no_commit<pos:position pos:line="17" pos:column="36"/></name></name></expr>)<pos:position pos:line="17" pos:column="37"/></condition><then pos:line="17" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="25">advise<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><call><name pos:line="18" pos:column="32">_<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><literal type="string" pos:line="18" pos:column="34">"after resolving the conflicts, mark the corrected paths\n"<pos:position pos:line="18" pos:column="93"/></literal>
				 <literal type="string" pos:line="19" pos:column="34">"with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'"<pos:position pos:line="19" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="81"/></expr_stmt></block></then>
		<else pos:line="20" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">advise<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><call><name pos:line="21" pos:column="32">_<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><literal type="string" pos:line="21" pos:column="34">"after resolving the conflicts, mark the corrected paths\n"<pos:position pos:line="21" pos:column="93"/></literal>
				 <literal type="string" pos:line="22" pos:column="34">"with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'\n"<pos:position pos:line="22" pos:column="92"/></literal>
				 <literal type="string" pos:line="23" pos:column="34">"and commit the result with 'git commit'"<pos:position pos:line="23" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="78"/></expr_stmt></block></else></if>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
