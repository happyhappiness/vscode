<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_640_git-2.10.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">packet_trace<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">buf<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">unsigned<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">len<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">write<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">out<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">static<pos:position pos:line="5" pos:column="15"/></specifier> <type><name pos:line="5" pos:column="16">int<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">in_pack<pos:position pos:line="5" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="29">sideband<pos:position pos:line="5" pos:column="37"/></name></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><call><name pos:line="7" pos:column="14">trace_want<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><operator pos:line="7" pos:column="25">&amp;<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="26">trace_packet<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call> <operator pos:line="7" pos:column="40">&amp;&amp;<pos:position pos:line="7" pos:column="50"/></operator> <operator pos:line="7" pos:column="43">!<pos:position pos:line="7" pos:column="44"/></operator><call><name pos:line="7" pos:column="44">trace_want<pos:position pos:line="7" pos:column="54"/></name><argument_list pos:line="7" pos:column="54">(<argument><expr><operator pos:line="7" pos:column="55">&amp;<pos:position pos:line="7" pos:column="60"/></operator><name pos:line="7" pos:column="56">trace_pack<pos:position pos:line="7" pos:column="66"/></name></expr></argument>)<pos:position pos:line="7" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="68"/></condition><then pos:line="7" pos:column="68">
		<block type="pseudo"><return pos:line="8" pos:column="17">return;<pos:position pos:line="8" pos:column="24"/></return></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">in_pack<pos:position pos:line="10" pos:column="20"/></name></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21"> <block pos:line="10" pos:column="22">{
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><call><name pos:line="11" pos:column="21">packet_trace_pack<pos:position pos:line="11" pos:column="38"/></name><argument_list pos:line="11" pos:column="38">(<argument><expr><name pos:line="11" pos:column="39">buf<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="44">len<pos:position pos:line="11" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="49">sideband<pos:position pos:line="11" pos:column="57"/></name></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="59"/></condition><then pos:line="11" pos:column="59">
			<block type="pseudo"><return pos:line="12" pos:column="25">return;<pos:position pos:line="12" pos:column="32"/></return></block></then></if>
	}<pos:position pos:line="13" pos:column="10"/></block></then> <elseif pos:line="13" pos:column="11">else <if pos:line="13" pos:column="16">if <condition pos:line="13" pos:column="19">(<expr><call><name pos:line="13" pos:column="20">starts_with<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">buf<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="37">"PACK"<pos:position pos:line="13" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call> <operator pos:line="13" pos:column="45">||<pos:position pos:line="13" pos:column="47"/></operator> <call><name pos:line="13" pos:column="48">starts_with<pos:position pos:line="13" pos:column="59"/></name><argument_list pos:line="13" pos:column="59">(<argument><expr><name pos:line="13" pos:column="60">buf<pos:position pos:line="13" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="65">"\1PACK"<pos:position pos:line="13" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="75"/></condition><then pos:line="13" pos:column="75"> <block pos:line="13" pos:column="76">{
		<expr_stmt><expr><name pos:line="14" pos:column="17">in_pack<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">=<pos:position pos:line="14" pos:column="26"/></operator> <literal type="number" pos:line="14" pos:column="27">1<pos:position pos:line="14" pos:column="28"/></literal></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">sideband<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">=<pos:position pos:line="15" pos:column="27"/></operator> <operator pos:line="15" pos:column="28">*<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="29">buf<pos:position pos:line="15" pos:column="32"/></name> <operator pos:line="15" pos:column="33">==<pos:position pos:line="15" pos:column="35"/></operator> <literal type="char" pos:line="15" pos:column="36">'\1'<pos:position pos:line="15" pos:column="40"/></literal></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">packet_trace_pack<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">buf<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="40">len<pos:position pos:line="16" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="45">sideband<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>

		<comment type="block" pos:line="18" pos:column="17">/*
		 * Make a note in the human-readable trace that the pack data
		 * started.
		 */</comment>
		<expr_stmt><expr><name pos:line="22" pos:column="17">buf<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <literal type="string" pos:line="22" pos:column="23">"PACK ..."<pos:position pos:line="22" pos:column="33"/></literal></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">len<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <call><name pos:line="23" pos:column="23">strlen<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">buf<pos:position pos:line="23" pos:column="33"/></name></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if></elseif></if>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator><call><name pos:line="26" pos:column="14">trace_want<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><operator pos:line="26" pos:column="25">&amp;<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="26">trace_packet<pos:position pos:line="26" pos:column="38"/></name></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="40"/></condition><then pos:line="26" pos:column="40">
		<block type="pseudo"><return pos:line="27" pos:column="17">return;<pos:position pos:line="27" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="29" pos:column="9">/* +32 is just a guess for header + quoting */</comment>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">strbuf_init<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><operator pos:line="30" pos:column="21">&amp;<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="22">out<pos:position pos:line="30" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="27">len<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">+<pos:position pos:line="30" pos:column="31"/></operator><literal type="number" pos:line="30" pos:column="31">32<pos:position pos:line="30" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="32" pos:column="9">strbuf_addf<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><operator pos:line="32" pos:column="21">&amp;<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="22">out<pos:position pos:line="32" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="27">"packet: %12s%c "<pos:position pos:line="32" pos:column="44"/></literal></expr></argument>,
		    <argument><expr><call><name pos:line="33" pos:column="21">get_trace_prefix<pos:position pos:line="33" pos:column="37"/></name><argument_list pos:line="33" pos:column="37">()<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="33" pos:column="41">write<pos:position pos:line="33" pos:column="46"/></name></expr> ?<pos:position pos:line="33" pos:column="48"/></condition><then pos:line="33" pos:column="48"> <expr><literal type="char" pos:line="33" pos:column="49">'&gt;'<pos:position pos:line="33" pos:column="55"/></literal></expr> <pos:position pos:line="33" pos:column="53"/></then><else pos:line="33" pos:column="53">: <expr><literal type="char" pos:line="33" pos:column="55">'&lt;'<pos:position pos:line="33" pos:column="61"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="33" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="60"/></expr_stmt>

	<comment type="block" pos:line="35" pos:column="9">/* XXX we should really handle printable utf8 */</comment>
	<for pos:line="36" pos:column="9">for <control pos:line="36" pos:column="13">(<init><expr><name pos:line="36" pos:column="14">i<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <literal type="number" pos:line="36" pos:column="18">0<pos:position pos:line="36" pos:column="19"/></literal></expr>;<pos:position pos:line="36" pos:column="20"/></init> <condition><expr><name pos:line="36" pos:column="21">i<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">&lt;<pos:position pos:line="36" pos:column="27"/></operator> <name pos:line="36" pos:column="25">len<pos:position pos:line="36" pos:column="28"/></name></expr>;<pos:position pos:line="36" pos:column="29"/></condition> <incr><expr><name pos:line="36" pos:column="30">i<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">++<pos:position pos:line="36" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="36" pos:column="34"/></control> <block pos:line="36" pos:column="35">{
		<comment type="block" pos:line="37" pos:column="17">/* suppress newlines */</comment>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name><name pos:line="38" pos:column="21">buf<pos:position pos:line="38" pos:column="24"/></name><index pos:line="38" pos:column="24">[<expr><name pos:line="38" pos:column="25">i<pos:position pos:line="38" pos:column="26"/></name></expr>]<pos:position pos:line="38" pos:column="27"/></index></name> <operator pos:line="38" pos:column="28">==<pos:position pos:line="38" pos:column="30"/></operator> <literal type="char" pos:line="38" pos:column="31">'\n'<pos:position pos:line="38" pos:column="35"/></literal></expr>)<pos:position pos:line="38" pos:column="36"/></condition><then pos:line="38" pos:column="36">
			<block type="pseudo"><continue pos:line="39" pos:column="25">continue;<pos:position pos:line="39" pos:column="34"/></continue></block></then></if>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name><name pos:line="40" pos:column="21">buf<pos:position pos:line="40" pos:column="24"/></name><index pos:line="40" pos:column="24">[<expr><name pos:line="40" pos:column="25">i<pos:position pos:line="40" pos:column="26"/></name></expr>]<pos:position pos:line="40" pos:column="27"/></index></name> <operator pos:line="40" pos:column="28">&gt;=<pos:position pos:line="40" pos:column="33"/></operator> <literal type="number" pos:line="40" pos:column="31">0x20<pos:position pos:line="40" pos:column="35"/></literal> <operator pos:line="40" pos:column="36">&amp;&amp;<pos:position pos:line="40" pos:column="46"/></operator> <name><name pos:line="40" pos:column="39">buf<pos:position pos:line="40" pos:column="42"/></name><index pos:line="40" pos:column="42">[<expr><name pos:line="40" pos:column="43">i<pos:position pos:line="40" pos:column="44"/></name></expr>]<pos:position pos:line="40" pos:column="45"/></index></name> <operator pos:line="40" pos:column="46">&lt;=<pos:position pos:line="40" pos:column="51"/></operator> <literal type="number" pos:line="40" pos:column="49">0x7e<pos:position pos:line="40" pos:column="53"/></literal></expr>)<pos:position pos:line="40" pos:column="54"/></condition><then pos:line="40" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="25">strbuf_addch<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">(<argument><expr><operator pos:line="41" pos:column="38">&amp;<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="39">out<pos:position pos:line="41" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="44">buf<pos:position pos:line="41" pos:column="47"/></name><index pos:line="41" pos:column="47">[<expr><name pos:line="41" pos:column="48">i<pos:position pos:line="41" pos:column="49"/></name></expr>]<pos:position pos:line="41" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="41" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="52"/></expr_stmt></block></then>
		<else pos:line="42" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="25">strbuf_addf<pos:position pos:line="43" pos:column="36"/></name><argument_list pos:line="43" pos:column="36">(<argument><expr><operator pos:line="43" pos:column="37">&amp;<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="38">out<pos:position pos:line="43" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="43">"\\%o"<pos:position pos:line="43" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="51">buf<pos:position pos:line="43" pos:column="54"/></name><index pos:line="43" pos:column="54">[<expr><name pos:line="43" pos:column="55">i<pos:position pos:line="43" pos:column="56"/></name></expr>]<pos:position pos:line="43" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="59"/></expr_stmt></block></else></if>
	}<pos:position pos:line="44" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="46" pos:column="9">strbuf_addch<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><operator pos:line="46" pos:column="22">&amp;<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="23">out<pos:position pos:line="46" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="46" pos:column="28">'\n'<pos:position pos:line="46" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">trace_strbuf<pos:position pos:line="47" pos:column="21"/></name><argument_list pos:line="47" pos:column="21">(<argument><expr><operator pos:line="47" pos:column="22">&amp;<pos:position pos:line="47" pos:column="27"/></operator><name pos:line="47" pos:column="23">trace_packet<pos:position pos:line="47" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="37">&amp;<pos:position pos:line="47" pos:column="42"/></operator><name pos:line="47" pos:column="38">out<pos:position pos:line="47" pos:column="41"/></name></expr></argument>)<pos:position pos:line="47" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">strbuf_release<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><operator pos:line="48" pos:column="24">&amp;<pos:position pos:line="48" pos:column="29"/></operator><name pos:line="48" pos:column="25">out<pos:position pos:line="48" pos:column="28"/></name></expr></argument>)<pos:position pos:line="48" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
