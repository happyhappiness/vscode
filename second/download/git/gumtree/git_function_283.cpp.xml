<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_283.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">try_threeway<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">apply_state<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">state<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="2" pos:column="25">struct<pos:position pos:line="2" pos:column="31"/></name> <name pos:line="2" pos:column="32">image<pos:position pos:line="2" pos:column="37"/></name></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">image<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="3" pos:column="25">struct<pos:position pos:line="3" pos:column="31"/></name> <name pos:line="3" pos:column="32">patch<pos:position pos:line="3" pos:column="37"/></name></name> <modifier pos:line="3" pos:column="38">*<pos:position pos:line="3" pos:column="39"/></modifier></type><name pos:line="3" pos:column="39">patch<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="4" pos:column="25">struct<pos:position pos:line="4" pos:column="31"/></name> <name pos:line="4" pos:column="32">stat<pos:position pos:line="4" pos:column="36"/></name></name> <modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">st<pos:position pos:line="4" pos:column="40"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="5" pos:column="25">const<pos:position pos:line="5" pos:column="30"/></specifier> <name><name pos:line="5" pos:column="31">struct<pos:position pos:line="5" pos:column="37"/></name> <name pos:line="5" pos:column="38">cache_entry<pos:position pos:line="5" pos:column="49"/></name></name> <modifier pos:line="5" pos:column="50">*<pos:position pos:line="5" pos:column="51"/></modifier></type><name pos:line="5" pos:column="51">ce<pos:position pos:line="5" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="54"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">char<pos:position pos:line="7" pos:column="22"/></name></type> <name><name pos:line="7" pos:column="23">pre_sha1<pos:position pos:line="7" pos:column="31"/></name><index pos:line="7" pos:column="31">[<expr><literal type="number" pos:line="7" pos:column="32">20<pos:position pos:line="7" pos:column="34"/></literal></expr>]<pos:position pos:line="7" pos:column="35"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="7" pos:column="37">post_sha1<pos:position pos:line="7" pos:column="46"/></name><index pos:line="7" pos:column="46">[<expr><literal type="number" pos:line="7" pos:column="47">20<pos:position pos:line="7" pos:column="49"/></literal></expr>]<pos:position pos:line="7" pos:column="50"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="7" pos:column="52">our_sha1<pos:position pos:line="7" pos:column="60"/></name><index pos:line="7" pos:column="60">[<expr><literal type="number" pos:line="7" pos:column="61">20<pos:position pos:line="7" pos:column="63"/></literal></expr>]<pos:position pos:line="7" pos:column="64"/></index></name></decl>;<pos:position pos:line="7" pos:column="65"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">buf<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name pos:line="8" pos:column="29">STRBUF_INIT<pos:position pos:line="8" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">len<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">status<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">img<pos:position pos:line="11" pos:column="18"/></name></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">image<pos:position pos:line="12" pos:column="21"/></name></name></type> <name pos:line="12" pos:column="22">tmp_image<pos:position pos:line="12" pos:column="31"/></name></decl>;<pos:position pos:line="12" pos:column="32"/></decl_stmt>

	<comment type="block" pos:line="14" pos:column="9">/* No point falling back to 3-way merge in these cases */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">patch<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">-&gt;<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="20">is_delete<pos:position pos:line="15" pos:column="29"/></name></name> <operator pos:line="15" pos:column="30">||<pos:position pos:line="15" pos:column="32"/></operator>
	    <call><name pos:line="16" pos:column="13">S_ISGITLINK<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name><name pos:line="16" pos:column="25">patch<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">-&gt;<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="32">old_mode<pos:position pos:line="16" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call> <operator pos:line="16" pos:column="42">||<pos:position pos:line="16" pos:column="44"/></operator> <call><name pos:line="16" pos:column="45">S_ISGITLINK<pos:position pos:line="16" pos:column="56"/></name><argument_list pos:line="16" pos:column="56">(<argument><expr><name><name pos:line="16" pos:column="57">patch<pos:position pos:line="16" pos:column="62"/></name><operator pos:line="16" pos:column="62">-&gt;<pos:position pos:line="16" pos:column="67"/></operator><name pos:line="16" pos:column="64">new_mode<pos:position pos:line="16" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="74"/></condition><then pos:line="16" pos:column="74">
		<block type="pseudo"><return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">-<pos:position pos:line="17" pos:column="25"/></operator><literal type="number" pos:line="17" pos:column="25">1<pos:position pos:line="17" pos:column="26"/></literal></expr>;<pos:position pos:line="17" pos:column="27"/></return></block></then></if>

	<comment type="block" pos:line="19" pos:column="9">/* Preimage the patch was prepared for */</comment>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name><name pos:line="20" pos:column="13">patch<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">-&gt;<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="20">is_new<pos:position pos:line="20" pos:column="26"/></name></name></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="17">write_sha1_file<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><literal type="string" pos:line="21" pos:column="33">""<pos:position pos:line="21" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="37">0<pos:position pos:line="21" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">blob_type<pos:position pos:line="21" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="51">pre_sha1<pos:position pos:line="21" pos:column="59"/></name></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="61"/></expr_stmt></block></then>
	<elseif pos:line="22" pos:column="9">else <if pos:line="22" pos:column="14">if <condition pos:line="22" pos:column="17">(<expr><call><name pos:line="22" pos:column="18">get_sha1<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">(<argument><expr><name><name pos:line="22" pos:column="27">patch<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">-&gt;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="34">old_sha1_prefix<pos:position pos:line="22" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="51">pre_sha1<pos:position pos:line="22" pos:column="59"/></name></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call> <operator pos:line="22" pos:column="61">||<pos:position pos:line="22" pos:column="63"/></operator>
		 <call><name pos:line="23" pos:column="18">read_blob_object<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><operator pos:line="23" pos:column="35">&amp;<pos:position pos:line="23" pos:column="40"/></operator><name pos:line="23" pos:column="36">buf<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="41">pre_sha1<pos:position pos:line="23" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="51">patch<pos:position pos:line="23" pos:column="56"/></name><operator pos:line="23" pos:column="56">-&gt;<pos:position pos:line="23" pos:column="61"/></operator><name pos:line="23" pos:column="58">old_mode<pos:position pos:line="23" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="68"/></condition><then pos:line="23" pos:column="68">
		<block type="pseudo"><return pos:line="24" pos:column="17">return <expr><call><name pos:line="24" pos:column="24">error<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><literal type="string" pos:line="24" pos:column="30">"repository lacks the necessary blob to fall back on 3-way merge."<pos:position pos:line="24" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="98"/></return></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="26" pos:column="9">fprintf<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">stderr<pos:position pos:line="26" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="25">"Falling back to three-way merge...\n"<pos:position pos:line="26" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="65"/></expr_stmt>

	<expr_stmt><expr><name pos:line="28" pos:column="9">img<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <call><name pos:line="28" pos:column="15">strbuf_detach<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><operator pos:line="28" pos:column="29">&amp;<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="30">buf<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="35">&amp;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="36">len<pos:position pos:line="28" pos:column="39"/></name></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">prepare_image<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><operator pos:line="29" pos:column="23">&amp;<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="24">tmp_image<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="35">img<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="40">len<pos:position pos:line="29" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="45">1<pos:position pos:line="29" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>
	<comment type="block" pos:line="30" pos:column="9">/* Apply the patch to get the post image */</comment>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name pos:line="31" pos:column="13">apply_fragments<pos:position pos:line="31" pos:column="28"/></name><argument_list pos:line="31" pos:column="28">(<argument><expr><name pos:line="31" pos:column="29">state<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="36">&amp;<pos:position pos:line="31" pos:column="41"/></operator><name pos:line="31" pos:column="37">tmp_image<pos:position pos:line="31" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="48">patch<pos:position pos:line="31" pos:column="53"/></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call> <operator pos:line="31" pos:column="55">&lt;<pos:position pos:line="31" pos:column="59"/></operator> <literal type="number" pos:line="31" pos:column="57">0<pos:position pos:line="31" pos:column="58"/></literal></expr>)<pos:position pos:line="31" pos:column="59"/></condition><then pos:line="31" pos:column="59"> <block pos:line="31" pos:column="60">{
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">clear_image<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><operator pos:line="32" pos:column="29">&amp;<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="30">tmp_image<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
		<return pos:line="33" pos:column="17">return <expr><operator pos:line="33" pos:column="24">-<pos:position pos:line="33" pos:column="25"/></operator><literal type="number" pos:line="33" pos:column="25">1<pos:position pos:line="33" pos:column="26"/></literal></expr>;<pos:position pos:line="33" pos:column="27"/></return>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
	<comment type="block" pos:line="35" pos:column="9">/* post_sha1[] is theirs */</comment>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">write_sha1_file<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name><name pos:line="36" pos:column="25">tmp_image<pos:position pos:line="36" pos:column="34"/></name><operator pos:line="36" pos:column="34">.<pos:position pos:line="36" pos:column="35"/></operator><name pos:line="36" pos:column="35">buf<pos:position pos:line="36" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="40">tmp_image<pos:position pos:line="36" pos:column="49"/></name><operator pos:line="36" pos:column="49">.<pos:position pos:line="36" pos:column="50"/></operator><name pos:line="36" pos:column="50">len<pos:position pos:line="36" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="55">blob_type<pos:position pos:line="36" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="66">post_sha1<pos:position pos:line="36" pos:column="75"/></name></expr></argument>)<pos:position pos:line="36" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="77"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">clear_image<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><operator pos:line="37" pos:column="21">&amp;<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="22">tmp_image<pos:position pos:line="37" pos:column="31"/></name></expr></argument>)<pos:position pos:line="37" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="33"/></expr_stmt>

	<comment type="block" pos:line="39" pos:column="9">/* our_sha1[] is ours */</comment>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name><name pos:line="40" pos:column="13">patch<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">-&gt;<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="20">is_new<pos:position pos:line="40" pos:column="26"/></name></name></expr>)<pos:position pos:line="40" pos:column="27"/></condition><then pos:line="40" pos:column="27"> <block pos:line="40" pos:column="28">{
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><call><name pos:line="41" pos:column="21">load_current<pos:position pos:line="41" pos:column="33"/></name><argument_list pos:line="41" pos:column="33">(<argument><expr><name pos:line="41" pos:column="34">state<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="41">&amp;<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="42">tmp_image<pos:position pos:line="41" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="53">patch<pos:position pos:line="41" pos:column="58"/></name></expr></argument>)<pos:position pos:line="41" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="60"/></condition><then pos:line="41" pos:column="60">
			<block type="pseudo"><return pos:line="42" pos:column="25">return <expr><call><name pos:line="42" pos:column="32">error<pos:position pos:line="42" pos:column="37"/></name><argument_list pos:line="42" pos:column="37">(<argument><expr><literal type="string" pos:line="42" pos:column="38">"cannot read the current contents of '%s'"<pos:position pos:line="42" pos:column="80"/></literal></expr></argument>,
				     <argument><expr><name><name pos:line="43" pos:column="38">patch<pos:position pos:line="43" pos:column="43"/></name><operator pos:line="43" pos:column="43">-&gt;<pos:position pos:line="43" pos:column="48"/></operator><name pos:line="43" pos:column="45">new_name<pos:position pos:line="43" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="55"/></return></block></then></if>
	}<pos:position pos:line="44" pos:column="10"/></block></then> <else pos:line="44" pos:column="11">else <block pos:line="44" pos:column="16">{
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><call><name pos:line="45" pos:column="21">load_preimage<pos:position pos:line="45" pos:column="34"/></name><argument_list pos:line="45" pos:column="34">(<argument><expr><name pos:line="45" pos:column="35">state<pos:position pos:line="45" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="42">&amp;<pos:position pos:line="45" pos:column="47"/></operator><name pos:line="45" pos:column="43">tmp_image<pos:position pos:line="45" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="54">patch<pos:position pos:line="45" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="61">st<pos:position pos:line="45" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="65">ce<pos:position pos:line="45" pos:column="67"/></name></expr></argument>)<pos:position pos:line="45" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="69"/></condition><then pos:line="45" pos:column="69">
			<block type="pseudo"><return pos:line="46" pos:column="25">return <expr><call><name pos:line="46" pos:column="32">error<pos:position pos:line="46" pos:column="37"/></name><argument_list pos:line="46" pos:column="37">(<argument><expr><literal type="string" pos:line="46" pos:column="38">"cannot read the current contents of '%s'"<pos:position pos:line="46" pos:column="80"/></literal></expr></argument>,
				     <argument><expr><name><name pos:line="47" pos:column="38">patch<pos:position pos:line="47" pos:column="43"/></name><operator pos:line="47" pos:column="43">-&gt;<pos:position pos:line="47" pos:column="48"/></operator><name pos:line="47" pos:column="45">old_name<pos:position pos:line="47" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="55"/></return></block></then></if>
	}<pos:position pos:line="48" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="49" pos:column="9">write_sha1_file<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name><name pos:line="49" pos:column="25">tmp_image<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">.<pos:position pos:line="49" pos:column="35"/></operator><name pos:line="49" pos:column="35">buf<pos:position pos:line="49" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="40">tmp_image<pos:position pos:line="49" pos:column="49"/></name><operator pos:line="49" pos:column="49">.<pos:position pos:line="49" pos:column="50"/></operator><name pos:line="49" pos:column="50">len<pos:position pos:line="49" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="55">blob_type<pos:position pos:line="49" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="66">our_sha1<pos:position pos:line="49" pos:column="74"/></name></expr></argument>)<pos:position pos:line="49" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="76"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">clear_image<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><operator pos:line="50" pos:column="21">&amp;<pos:position pos:line="50" pos:column="26"/></operator><name pos:line="50" pos:column="22">tmp_image<pos:position pos:line="50" pos:column="31"/></name></expr></argument>)<pos:position pos:line="50" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt>

	<comment type="block" pos:line="52" pos:column="9">/* in-core three-way merge between post and our using pre as base */</comment>
	<expr_stmt><expr><name pos:line="53" pos:column="9">status<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <call><name pos:line="53" pos:column="18">three_way_merge<pos:position pos:line="53" pos:column="33"/></name><argument_list pos:line="53" pos:column="33">(<argument><expr><name pos:line="53" pos:column="34">image<pos:position pos:line="53" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="41">patch<pos:position pos:line="53" pos:column="46"/></name><operator pos:line="53" pos:column="46">-&gt;<pos:position pos:line="53" pos:column="51"/></operator><name pos:line="53" pos:column="48">new_name<pos:position pos:line="53" pos:column="56"/></name></name></expr></argument>,
				 <argument><expr><name pos:line="54" pos:column="34">pre_sha1<pos:position pos:line="54" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="44">our_sha1<pos:position pos:line="54" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="54">post_sha1<pos:position pos:line="54" pos:column="63"/></name></expr></argument>)<pos:position pos:line="54" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="65"/></expr_stmt>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name pos:line="55" pos:column="13">status<pos:position pos:line="55" pos:column="19"/></name> <operator pos:line="55" pos:column="20">&lt;<pos:position pos:line="55" pos:column="24"/></operator> <literal type="number" pos:line="55" pos:column="22">0<pos:position pos:line="55" pos:column="23"/></literal></expr>)<pos:position pos:line="55" pos:column="24"/></condition><then pos:line="55" pos:column="24"> <block pos:line="55" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="56" pos:column="17">fprintf<pos:position pos:line="56" pos:column="24"/></name><argument_list pos:line="56" pos:column="24">(<argument><expr><name pos:line="56" pos:column="25">stderr<pos:position pos:line="56" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="33">"Failed to fall back on three-way merge...\n"<pos:position pos:line="56" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="80"/></expr_stmt>
		<return pos:line="57" pos:column="17">return <expr><name pos:line="57" pos:column="24">status<pos:position pos:line="57" pos:column="30"/></name></expr>;<pos:position pos:line="57" pos:column="31"/></return>
	}<pos:position pos:line="58" pos:column="10"/></block></then></if>

	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">status<pos:position pos:line="60" pos:column="19"/></name></expr>)<pos:position pos:line="60" pos:column="20"/></condition><then pos:line="60" pos:column="20"> <block pos:line="60" pos:column="21">{
		<expr_stmt><expr><name><name pos:line="61" pos:column="17">patch<pos:position pos:line="61" pos:column="22"/></name><operator pos:line="61" pos:column="22">-&gt;<pos:position pos:line="61" pos:column="27"/></operator><name pos:line="61" pos:column="24">conflicted_threeway<pos:position pos:line="61" pos:column="43"/></name></name> <operator pos:line="61" pos:column="44">=<pos:position pos:line="61" pos:column="45"/></operator> <literal type="number" pos:line="61" pos:column="46">1<pos:position pos:line="61" pos:column="47"/></literal></expr>;<pos:position pos:line="61" pos:column="48"/></expr_stmt>
		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name><name pos:line="62" pos:column="21">patch<pos:position pos:line="62" pos:column="26"/></name><operator pos:line="62" pos:column="26">-&gt;<pos:position pos:line="62" pos:column="31"/></operator><name pos:line="62" pos:column="28">is_new<pos:position pos:line="62" pos:column="34"/></name></name></expr>)<pos:position pos:line="62" pos:column="35"/></condition><then pos:line="62" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="25">oidclr<pos:position pos:line="63" pos:column="31"/></name><argument_list pos:line="63" pos:column="31">(<argument><expr><operator pos:line="63" pos:column="32">&amp;<pos:position pos:line="63" pos:column="37"/></operator><name><name pos:line="63" pos:column="33">patch<pos:position pos:line="63" pos:column="38"/></name><operator pos:line="63" pos:column="38">-&gt;<pos:position pos:line="63" pos:column="43"/></operator><name pos:line="63" pos:column="40">threeway_stage<pos:position pos:line="63" pos:column="54"/></name><index pos:line="63" pos:column="54">[<expr><literal type="number" pos:line="63" pos:column="55">0<pos:position pos:line="63" pos:column="56"/></literal></expr>]<pos:position pos:line="63" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="59"/></expr_stmt></block></then>
		<else pos:line="64" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="25">hashcpy<pos:position pos:line="65" pos:column="32"/></name><argument_list pos:line="65" pos:column="32">(<argument><expr><name><name pos:line="65" pos:column="33">patch<pos:position pos:line="65" pos:column="38"/></name><operator pos:line="65" pos:column="38">-&gt;<pos:position pos:line="65" pos:column="43"/></operator><name pos:line="65" pos:column="40">threeway_stage<pos:position pos:line="65" pos:column="54"/></name><index pos:line="65" pos:column="54">[<expr><literal type="number" pos:line="65" pos:column="55">0<pos:position pos:line="65" pos:column="56"/></literal></expr>]<pos:position pos:line="65" pos:column="57"/></index></name><operator pos:line="65" pos:column="57">.<pos:position pos:line="65" pos:column="58"/></operator><name pos:line="65" pos:column="58">hash<pos:position pos:line="65" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="64">pre_sha1<pos:position pos:line="65" pos:column="72"/></name></expr></argument>)<pos:position pos:line="65" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="74"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">hashcpy<pos:position pos:line="66" pos:column="24"/></name><argument_list pos:line="66" pos:column="24">(<argument><expr><name><name pos:line="66" pos:column="25">patch<pos:position pos:line="66" pos:column="30"/></name><operator pos:line="66" pos:column="30">-&gt;<pos:position pos:line="66" pos:column="35"/></operator><name pos:line="66" pos:column="32">threeway_stage<pos:position pos:line="66" pos:column="46"/></name><index pos:line="66" pos:column="46">[<expr><literal type="number" pos:line="66" pos:column="47">1<pos:position pos:line="66" pos:column="48"/></literal></expr>]<pos:position pos:line="66" pos:column="49"/></index></name><operator pos:line="66" pos:column="49">.<pos:position pos:line="66" pos:column="50"/></operator><name pos:line="66" pos:column="50">hash<pos:position pos:line="66" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="56">our_sha1<pos:position pos:line="66" pos:column="64"/></name></expr></argument>)<pos:position pos:line="66" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="67" pos:column="17">hashcpy<pos:position pos:line="67" pos:column="24"/></name><argument_list pos:line="67" pos:column="24">(<argument><expr><name><name pos:line="67" pos:column="25">patch<pos:position pos:line="67" pos:column="30"/></name><operator pos:line="67" pos:column="30">-&gt;<pos:position pos:line="67" pos:column="35"/></operator><name pos:line="67" pos:column="32">threeway_stage<pos:position pos:line="67" pos:column="46"/></name><index pos:line="67" pos:column="46">[<expr><literal type="number" pos:line="67" pos:column="47">2<pos:position pos:line="67" pos:column="48"/></literal></expr>]<pos:position pos:line="67" pos:column="49"/></index></name><operator pos:line="67" pos:column="49">.<pos:position pos:line="67" pos:column="50"/></operator><name pos:line="67" pos:column="50">hash<pos:position pos:line="67" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="56">post_sha1<pos:position pos:line="67" pos:column="65"/></name></expr></argument>)<pos:position pos:line="67" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="67"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">fprintf<pos:position pos:line="68" pos:column="24"/></name><argument_list pos:line="68" pos:column="24">(<argument><expr><name pos:line="68" pos:column="25">stderr<pos:position pos:line="68" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="33">"Applied patch to '%s' with conflicts.\n"<pos:position pos:line="68" pos:column="74"/></literal></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="76">patch<pos:position pos:line="68" pos:column="81"/></name><operator pos:line="68" pos:column="81">-&gt;<pos:position pos:line="68" pos:column="86"/></operator><name pos:line="68" pos:column="83">new_name<pos:position pos:line="68" pos:column="91"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="93"/></expr_stmt>
	}<pos:position pos:line="69" pos:column="10"/></block></then> <else pos:line="69" pos:column="11">else <block pos:line="69" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">fprintf<pos:position pos:line="70" pos:column="24"/></name><argument_list pos:line="70" pos:column="24">(<argument><expr><name pos:line="70" pos:column="25">stderr<pos:position pos:line="70" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="33">"Applied patch to '%s' cleanly.\n"<pos:position pos:line="70" pos:column="67"/></literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="69">patch<pos:position pos:line="70" pos:column="74"/></name><operator pos:line="70" pos:column="74">-&gt;<pos:position pos:line="70" pos:column="79"/></operator><name pos:line="70" pos:column="76">new_name<pos:position pos:line="70" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="86"/></expr_stmt>
	}<pos:position pos:line="71" pos:column="10"/></block></else></if>
	<return pos:line="72" pos:column="9">return <expr><literal type="number" pos:line="72" pos:column="16">0<pos:position pos:line="72" pos:column="17"/></literal></expr>;<pos:position pos:line="72" pos:column="18"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
