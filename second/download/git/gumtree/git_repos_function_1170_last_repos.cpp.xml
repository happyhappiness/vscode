<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1170_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">strbuf_utf8_align<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">strbuf<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">buf<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">align_type<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">position<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">unsigned<pos:position pos:line="1" pos:column="73"/></name> <name pos:line="1" pos:column="74">int<pos:position pos:line="1" pos:column="77"/></name></type> <name pos:line="1" pos:column="78">width<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>,
		       <parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">s<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">slen<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><call><name pos:line="4" pos:column="20">strlen<pos:position pos:line="4" pos:column="26"/></name><argument_list pos:line="4" pos:column="26">(<argument><expr><name pos:line="4" pos:column="27">s<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">display_len<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><call><name pos:line="5" pos:column="27">utf8_strnwidth<pos:position pos:line="5" pos:column="41"/></name><argument_list pos:line="5" pos:column="41">(<argument><expr><name pos:line="5" pos:column="42">s<pos:position pos:line="5" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="45">slen<pos:position pos:line="5" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="51">0<pos:position pos:line="5" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">utf8_compensation<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><name pos:line="6" pos:column="33">slen<pos:position pos:line="6" pos:column="37"/></name> <operator pos:line="6" pos:column="38">-<pos:position pos:line="6" pos:column="39"/></operator> <name pos:line="6" pos:column="40">display_len<pos:position pos:line="6" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="52"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">display_len<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">&gt;=<pos:position pos:line="8" pos:column="30"/></operator> <name pos:line="8" pos:column="28">width<pos:position pos:line="8" pos:column="33"/></name></expr>)<pos:position pos:line="8" pos:column="34"/></condition><then pos:line="8" pos:column="34"> <block pos:line="8" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">strbuf_addstr<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">(<argument><expr><name pos:line="9" pos:column="31">buf<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="36">s<pos:position pos:line="9" pos:column="37"/></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
		<return pos:line="10" pos:column="17">return;<pos:position pos:line="10" pos:column="24"/></return>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">position<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">==<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">ALIGN_LEFT<pos:position pos:line="13" pos:column="35"/></name></expr>)<pos:position pos:line="13" pos:column="36"/></condition><then pos:line="13" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">strbuf_addf<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">buf<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="34">"%-*s"<pos:position pos:line="14" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="42">width<pos:position pos:line="14" pos:column="47"/></name> <operator pos:line="14" pos:column="48">+<pos:position pos:line="14" pos:column="49"/></operator> <name pos:line="14" pos:column="50">utf8_compensation<pos:position pos:line="14" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="69">s<pos:position pos:line="14" pos:column="70"/></name></expr></argument>)<pos:position pos:line="14" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="72"/></expr_stmt></block></then>
	<elseif pos:line="15" pos:column="9">else <if pos:line="15" pos:column="14">if <condition pos:line="15" pos:column="17">(<expr><name pos:line="15" pos:column="18">position<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">==<pos:position pos:line="15" pos:column="29"/></operator> <name pos:line="15" pos:column="30">ALIGN_MIDDLE<pos:position pos:line="15" pos:column="42"/></name></expr>)<pos:position pos:line="15" pos:column="43"/></condition><then pos:line="15" pos:column="43"> <block pos:line="15" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">int<pos:position pos:line="16" pos:column="20"/></name></type> <name pos:line="16" pos:column="21">left<pos:position pos:line="16" pos:column="25"/></name> <init pos:line="16" pos:column="26">= <expr><operator pos:line="16" pos:column="28">(<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="29">width<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">-<pos:position pos:line="16" pos:column="36"/></operator> <name pos:line="16" pos:column="37">display_len<pos:position pos:line="16" pos:column="48"/></name><operator pos:line="16" pos:column="48">)<pos:position pos:line="16" pos:column="49"/></operator> <operator pos:line="16" pos:column="50">/<pos:position pos:line="16" pos:column="51"/></operator> <literal type="number" pos:line="16" pos:column="52">2<pos:position pos:line="16" pos:column="53"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="54"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">strbuf_addf<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">buf<pos:position pos:line="17" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="34">"%*s%-*s"<pos:position pos:line="17" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="45">left<pos:position pos:line="17" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="51">""<pos:position pos:line="17" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="55">width<pos:position pos:line="17" pos:column="60"/></name> <operator pos:line="17" pos:column="61">-<pos:position pos:line="17" pos:column="62"/></operator> <name pos:line="17" pos:column="63">left<pos:position pos:line="17" pos:column="67"/></name> <operator pos:line="17" pos:column="68">+<pos:position pos:line="17" pos:column="69"/></operator> <name pos:line="17" pos:column="70">utf8_compensation<pos:position pos:line="17" pos:column="87"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="89">s<pos:position pos:line="17" pos:column="90"/></name></expr></argument>)<pos:position pos:line="17" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="92"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if></elseif> <elseif pos:line="18" pos:column="11">else <if pos:line="18" pos:column="16">if <condition pos:line="18" pos:column="19">(<expr><name pos:line="18" pos:column="20">position<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">==<pos:position pos:line="18" pos:column="31"/></operator> <name pos:line="18" pos:column="32">ALIGN_RIGHT<pos:position pos:line="18" pos:column="43"/></name></expr>)<pos:position pos:line="18" pos:column="44"/></condition><then pos:line="18" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="17">strbuf_addf<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><name pos:line="19" pos:column="29">buf<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="34">"%*s"<pos:position pos:line="19" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="41">width<pos:position pos:line="19" pos:column="46"/></name> <operator pos:line="19" pos:column="47">+<pos:position pos:line="19" pos:column="48"/></operator> <name pos:line="19" pos:column="49">utf8_compensation<pos:position pos:line="19" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="68">s<pos:position pos:line="19" pos:column="69"/></name></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="71"/></expr_stmt></block></then></if></elseif></if>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
