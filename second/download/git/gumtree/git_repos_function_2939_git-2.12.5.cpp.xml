<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2939_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">apply_multi_file_filter<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">path<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">src<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">size_t<pos:position pos:line="1" pos:column="77"/></name></type> <name pos:line="1" pos:column="78">len<pos:position pos:line="1" pos:column="81"/></name></decl></parameter>,
				   <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">fd<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="44">struct<pos:position pos:line="2" pos:column="50"/></name> <name pos:line="2" pos:column="51">strbuf<pos:position pos:line="2" pos:column="57"/></name></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">dst<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="64">const<pos:position pos:line="2" pos:column="69"/></specifier> <name pos:line="2" pos:column="70">char<pos:position pos:line="2" pos:column="74"/></name> <modifier pos:line="2" pos:column="75">*<pos:position pos:line="2" pos:column="76"/></modifier></type><name pos:line="2" pos:column="76">cmd<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>,
				   <parameter><decl><type><specifier pos:line="3" pos:column="36">const<pos:position pos:line="3" pos:column="41"/></specifier> <name pos:line="3" pos:column="42">unsigned<pos:position pos:line="3" pos:column="50"/></name> <name pos:line="3" pos:column="51">int<pos:position pos:line="3" pos:column="54"/></name></type> <name pos:line="3" pos:column="55">wanted_capability<pos:position pos:line="3" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="73"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">err<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">cmd2process<pos:position pos:line="6" pos:column="27"/></name></name> <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">entry<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">child_process<pos:position pos:line="7" pos:column="29"/></name></name> <modifier pos:line="7" pos:column="30">*<pos:position pos:line="7" pos:column="31"/></modifier></type><name pos:line="7" pos:column="31">process<pos:position pos:line="7" pos:column="38"/></name></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">nbuf<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><name pos:line="8" pos:column="30">STRBUF_INIT<pos:position pos:line="8" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">strbuf<pos:position pos:line="9" pos:column="22"/></name></name></type> <name pos:line="9" pos:column="23">filter_status<pos:position pos:line="9" pos:column="36"/></name> <init pos:line="9" pos:column="37">= <expr><name pos:line="9" pos:column="39">STRBUF_INIT<pos:position pos:line="9" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">filter_type<pos:position pos:line="10" pos:column="32"/></name></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">cmd_process_map_initialized<pos:position pos:line="12" pos:column="41"/></name></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42"> <block pos:line="12" pos:column="43">{
		<expr_stmt><expr><name pos:line="13" pos:column="17">cmd_process_map_initialized<pos:position pos:line="13" pos:column="44"/></name> <operator pos:line="13" pos:column="45">=<pos:position pos:line="13" pos:column="46"/></operator> <literal type="number" pos:line="13" pos:column="47">1<pos:position pos:line="13" pos:column="48"/></literal></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">hashmap_init<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><operator pos:line="14" pos:column="30">&amp;<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="31">cmd_process_map<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="48">(<pos:position pos:line="14" pos:column="49"/></operator><name pos:line="14" pos:column="49">hashmap_cmp_fn<pos:position pos:line="14" pos:column="63"/></name><operator pos:line="14" pos:column="63">)<pos:position pos:line="14" pos:column="64"/></operator> <name pos:line="14" pos:column="65">cmd2process_cmp<pos:position pos:line="14" pos:column="80"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="82">0<pos:position pos:line="14" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="85"/></expr_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">entry<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">=<pos:position pos:line="15" pos:column="24"/></operator> <name pos:line="15" pos:column="25">NULL<pos:position pos:line="15" pos:column="29"/></name></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then> <else pos:line="16" pos:column="11">else <block pos:line="16" pos:column="16">{
		<expr_stmt><expr><name pos:line="17" pos:column="17">entry<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <call><name pos:line="17" pos:column="25">find_multi_file_filter_entry<pos:position pos:line="17" pos:column="53"/></name><argument_list pos:line="17" pos:column="53">(<argument><expr><operator pos:line="17" pos:column="54">&amp;<pos:position pos:line="17" pos:column="59"/></operator><name pos:line="17" pos:column="55">cmd_process_map<pos:position pos:line="17" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="72">cmd<pos:position pos:line="17" pos:column="75"/></name></expr></argument>)<pos:position pos:line="17" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="77"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="20" pos:column="9">fflush<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">NULL<pos:position pos:line="20" pos:column="20"/></name></expr></argument>)<pos:position pos:line="20" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="22"/></expr_stmt>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">entry<pos:position pos:line="22" pos:column="19"/></name></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20"> <block pos:line="22" pos:column="21">{
		<expr_stmt><expr><name pos:line="23" pos:column="17">entry<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator> <call><name pos:line="23" pos:column="25">start_multi_file_filter<pos:position pos:line="23" pos:column="48"/></name><argument_list pos:line="23" pos:column="48">(<argument><expr><operator pos:line="23" pos:column="49">&amp;<pos:position pos:line="23" pos:column="54"/></operator><name pos:line="23" pos:column="50">cmd_process_map<pos:position pos:line="23" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="67">cmd<pos:position pos:line="23" pos:column="70"/></name></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="72"/></expr_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">entry<pos:position pos:line="24" pos:column="27"/></name></expr>)<pos:position pos:line="24" pos:column="28"/></condition><then pos:line="24" pos:column="28">
			<block type="pseudo"><return pos:line="25" pos:column="25">return <expr><literal type="number" pos:line="25" pos:column="32">0<pos:position pos:line="25" pos:column="33"/></literal></expr>;<pos:position pos:line="25" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="27" pos:column="9">process<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <operator pos:line="27" pos:column="19">&amp;<pos:position pos:line="27" pos:column="24"/></operator><name><name pos:line="27" pos:column="20">entry<pos:position pos:line="27" pos:column="25"/></name><operator pos:line="27" pos:column="25">-&gt;<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="27">process<pos:position pos:line="27" pos:column="34"/></name></name></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><operator pos:line="29" pos:column="14">(<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="15">wanted_capability<pos:position pos:line="29" pos:column="32"/></name> <operator pos:line="29" pos:column="33">&amp;<pos:position pos:line="29" pos:column="38"/></operator> <name><name pos:line="29" pos:column="35">entry<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">-&gt;<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="42">supported_capabilities<pos:position pos:line="29" pos:column="64"/></name></name><operator pos:line="29" pos:column="64">)<pos:position pos:line="29" pos:column="65"/></operator></expr>)<pos:position pos:line="29" pos:column="66"/></condition><then pos:line="29" pos:column="66">
		<block type="pseudo"><return pos:line="30" pos:column="17">return <expr><literal type="number" pos:line="30" pos:column="24">0<pos:position pos:line="30" pos:column="25"/></literal></expr>;<pos:position pos:line="30" pos:column="26"/></return></block></then></if>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">CAP_CLEAN<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">&amp;<pos:position pos:line="32" pos:column="28"/></operator> <name pos:line="32" pos:column="25">wanted_capability<pos:position pos:line="32" pos:column="42"/></name></expr>)<pos:position pos:line="32" pos:column="43"/></condition><then pos:line="32" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="17">filter_type<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">=<pos:position pos:line="33" pos:column="30"/></operator> <literal type="string" pos:line="33" pos:column="31">"clean"<pos:position pos:line="33" pos:column="38"/></literal></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt></block></then>
	<elseif pos:line="34" pos:column="9">else <if pos:line="34" pos:column="14">if <condition pos:line="34" pos:column="17">(<expr><name pos:line="34" pos:column="18">CAP_SMUDGE<pos:position pos:line="34" pos:column="28"/></name> <operator pos:line="34" pos:column="29">&amp;<pos:position pos:line="34" pos:column="34"/></operator> <name pos:line="34" pos:column="31">wanted_capability<pos:position pos:line="34" pos:column="48"/></name></expr>)<pos:position pos:line="34" pos:column="49"/></condition><then pos:line="34" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="17">filter_type<pos:position pos:line="35" pos:column="28"/></name> <operator pos:line="35" pos:column="29">=<pos:position pos:line="35" pos:column="30"/></operator> <literal type="string" pos:line="35" pos:column="31">"smudge"<pos:position pos:line="35" pos:column="39"/></literal></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt></block></then></if></elseif>
	<else pos:line="36" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="17">die<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><literal type="string" pos:line="37" pos:column="21">"unexpected filter type"<pos:position pos:line="37" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="39" pos:column="9">sigchain_push<pos:position pos:line="39" pos:column="22"/></name><argument_list pos:line="39" pos:column="22">(<argument><expr><name pos:line="39" pos:column="23">SIGPIPE<pos:position pos:line="39" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="32">SIG_IGN<pos:position pos:line="39" pos:column="39"/></name></expr></argument>)<pos:position pos:line="39" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="41" pos:column="9">assert<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><call><name pos:line="41" pos:column="16">strlen<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><name pos:line="41" pos:column="23">filter_type<pos:position pos:line="41" pos:column="34"/></name></expr></argument>)<pos:position pos:line="41" pos:column="35"/></argument_list></call> <operator pos:line="41" pos:column="36">&lt;<pos:position pos:line="41" pos:column="40"/></operator> <name pos:line="41" pos:column="38">LARGE_PACKET_DATA_MAX<pos:position pos:line="41" pos:column="59"/></name> <operator pos:line="41" pos:column="60">-<pos:position pos:line="41" pos:column="61"/></operator> <call><name pos:line="41" pos:column="62">strlen<pos:position pos:line="41" pos:column="68"/></name><argument_list pos:line="41" pos:column="68">(<argument><expr><literal type="string" pos:line="41" pos:column="69">"command=\n"<pos:position pos:line="41" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="84"/></expr_stmt>
	<expr_stmt><expr><name pos:line="42" pos:column="9">err<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <call><name pos:line="42" pos:column="15">packet_write_fmt_gently<pos:position pos:line="42" pos:column="38"/></name><argument_list pos:line="42" pos:column="38">(<argument><expr><name><name pos:line="42" pos:column="39">process<pos:position pos:line="42" pos:column="46"/></name><operator pos:line="42" pos:column="46">-&gt;<pos:position pos:line="42" pos:column="51"/></operator><name pos:line="42" pos:column="48">in<pos:position pos:line="42" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="52">"command=%s\n"<pos:position pos:line="42" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="68">filter_type<pos:position pos:line="42" pos:column="79"/></name></expr></argument>)<pos:position pos:line="42" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="81"/></expr_stmt>
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">err<pos:position pos:line="43" pos:column="16"/></name></expr>)<pos:position pos:line="43" pos:column="17"/></condition><then pos:line="43" pos:column="17">
		<block type="pseudo"><goto pos:line="44" pos:column="17">goto <name pos:line="44" pos:column="22">done<pos:position pos:line="44" pos:column="26"/></name>;<pos:position pos:line="44" pos:column="27"/></goto></block></then></if>

	<expr_stmt><expr><name pos:line="46" pos:column="9">err<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <call><name pos:line="46" pos:column="15">strlen<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><name pos:line="46" pos:column="22">path<pos:position pos:line="46" pos:column="26"/></name></expr></argument>)<pos:position pos:line="46" pos:column="27"/></argument_list></call> <operator pos:line="46" pos:column="28">&gt;<pos:position pos:line="46" pos:column="32"/></operator> <name pos:line="46" pos:column="30">LARGE_PACKET_DATA_MAX<pos:position pos:line="46" pos:column="51"/></name> <operator pos:line="46" pos:column="52">-<pos:position pos:line="46" pos:column="53"/></operator> <call><name pos:line="46" pos:column="54">strlen<pos:position pos:line="46" pos:column="60"/></name><argument_list pos:line="46" pos:column="60">(<argument><expr><literal type="string" pos:line="46" pos:column="61">"pathname=\n"<pos:position pos:line="46" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="76"/></expr_stmt>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">err<pos:position pos:line="47" pos:column="16"/></name></expr>)<pos:position pos:line="47" pos:column="17"/></condition><then pos:line="47" pos:column="17"> <block pos:line="47" pos:column="18">{
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">error<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><literal type="string" pos:line="48" pos:column="23">"path name too long for external filter"<pos:position pos:line="48" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="65"/></expr_stmt>
		<goto pos:line="49" pos:column="17">goto <name pos:line="49" pos:column="22">done<pos:position pos:line="49" pos:column="26"/></name>;<pos:position pos:line="49" pos:column="27"/></goto>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="52" pos:column="9">err<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">=<pos:position pos:line="52" pos:column="14"/></operator> <call><name pos:line="52" pos:column="15">packet_write_fmt_gently<pos:position pos:line="52" pos:column="38"/></name><argument_list pos:line="52" pos:column="38">(<argument><expr><name><name pos:line="52" pos:column="39">process<pos:position pos:line="52" pos:column="46"/></name><operator pos:line="52" pos:column="46">-&gt;<pos:position pos:line="52" pos:column="51"/></operator><name pos:line="52" pos:column="48">in<pos:position pos:line="52" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="52">"pathname=%s\n"<pos:position pos:line="52" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="69">path<pos:position pos:line="52" pos:column="73"/></name></expr></argument>)<pos:position pos:line="52" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="75"/></expr_stmt>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">err<pos:position pos:line="53" pos:column="16"/></name></expr>)<pos:position pos:line="53" pos:column="17"/></condition><then pos:line="53" pos:column="17">
		<block type="pseudo"><goto pos:line="54" pos:column="17">goto <name pos:line="54" pos:column="22">done<pos:position pos:line="54" pos:column="26"/></name>;<pos:position pos:line="54" pos:column="27"/></goto></block></then></if>

	<expr_stmt><expr><name pos:line="56" pos:column="9">err<pos:position pos:line="56" pos:column="12"/></name> <operator pos:line="56" pos:column="13">=<pos:position pos:line="56" pos:column="14"/></operator> <call><name pos:line="56" pos:column="15">packet_flush_gently<pos:position pos:line="56" pos:column="34"/></name><argument_list pos:line="56" pos:column="34">(<argument><expr><name><name pos:line="56" pos:column="35">process<pos:position pos:line="56" pos:column="42"/></name><operator pos:line="56" pos:column="42">-&gt;<pos:position pos:line="56" pos:column="47"/></operator><name pos:line="56" pos:column="44">in<pos:position pos:line="56" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="48"/></expr_stmt>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">err<pos:position pos:line="57" pos:column="16"/></name></expr>)<pos:position pos:line="57" pos:column="17"/></condition><then pos:line="57" pos:column="17">
		<block type="pseudo"><goto pos:line="58" pos:column="17">goto <name pos:line="58" pos:column="22">done<pos:position pos:line="58" pos:column="26"/></name>;<pos:position pos:line="58" pos:column="27"/></goto></block></then></if>

	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">fd<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">&gt;=<pos:position pos:line="60" pos:column="21"/></operator> <literal type="number" pos:line="60" pos:column="19">0<pos:position pos:line="60" pos:column="20"/></literal></expr>)<pos:position pos:line="60" pos:column="21"/></condition><then pos:line="60" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="17">err<pos:position pos:line="61" pos:column="20"/></name> <operator pos:line="61" pos:column="21">=<pos:position pos:line="61" pos:column="22"/></operator> <call><name pos:line="61" pos:column="23">write_packetized_from_fd<pos:position pos:line="61" pos:column="47"/></name><argument_list pos:line="61" pos:column="47">(<argument><expr><name pos:line="61" pos:column="48">fd<pos:position pos:line="61" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="52">process<pos:position pos:line="61" pos:column="59"/></name><operator pos:line="61" pos:column="59">-&gt;<pos:position pos:line="61" pos:column="64"/></operator><name pos:line="61" pos:column="61">in<pos:position pos:line="61" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="65"/></expr_stmt></block></then>
	<else pos:line="62" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="17">err<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">=<pos:position pos:line="63" pos:column="22"/></operator> <call><name pos:line="63" pos:column="23">write_packetized_from_buf<pos:position pos:line="63" pos:column="48"/></name><argument_list pos:line="63" pos:column="48">(<argument><expr><name pos:line="63" pos:column="49">src<pos:position pos:line="63" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="54">len<pos:position pos:line="63" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="59">process<pos:position pos:line="63" pos:column="66"/></name><operator pos:line="63" pos:column="66">-&gt;<pos:position pos:line="63" pos:column="71"/></operator><name pos:line="63" pos:column="68">in<pos:position pos:line="63" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="72"/></expr_stmt></block></else></if>
	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name pos:line="64" pos:column="13">err<pos:position pos:line="64" pos:column="16"/></name></expr>)<pos:position pos:line="64" pos:column="17"/></condition><then pos:line="64" pos:column="17">
		<block type="pseudo"><goto pos:line="65" pos:column="17">goto <name pos:line="65" pos:column="22">done<pos:position pos:line="65" pos:column="26"/></name>;<pos:position pos:line="65" pos:column="27"/></goto></block></then></if>

	<expr_stmt><expr><call><name pos:line="67" pos:column="9">read_multi_file_filter_status<pos:position pos:line="67" pos:column="38"/></name><argument_list pos:line="67" pos:column="38">(<argument><expr><name><name pos:line="67" pos:column="39">process<pos:position pos:line="67" pos:column="46"/></name><operator pos:line="67" pos:column="46">-&gt;<pos:position pos:line="67" pos:column="51"/></operator><name pos:line="67" pos:column="48">out<pos:position pos:line="67" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="53">&amp;<pos:position pos:line="67" pos:column="58"/></operator><name pos:line="67" pos:column="54">filter_status<pos:position pos:line="67" pos:column="67"/></name></expr></argument>)<pos:position pos:line="67" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="69"/></expr_stmt>
	<expr_stmt><expr><name pos:line="68" pos:column="9">err<pos:position pos:line="68" pos:column="12"/></name> <operator pos:line="68" pos:column="13">=<pos:position pos:line="68" pos:column="14"/></operator> <call><name pos:line="68" pos:column="15">strcmp<pos:position pos:line="68" pos:column="21"/></name><argument_list pos:line="68" pos:column="21">(<argument><expr><name><name pos:line="68" pos:column="22">filter_status<pos:position pos:line="68" pos:column="35"/></name><operator pos:line="68" pos:column="35">.<pos:position pos:line="68" pos:column="36"/></operator><name pos:line="68" pos:column="36">buf<pos:position pos:line="68" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="41">"success"<pos:position pos:line="68" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="52"/></expr_stmt>
	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">err<pos:position pos:line="69" pos:column="16"/></name></expr>)<pos:position pos:line="69" pos:column="17"/></condition><then pos:line="69" pos:column="17">
		<block type="pseudo"><goto pos:line="70" pos:column="17">goto <name pos:line="70" pos:column="22">done<pos:position pos:line="70" pos:column="26"/></name>;<pos:position pos:line="70" pos:column="27"/></goto></block></then></if>

	<expr_stmt><expr><name pos:line="72" pos:column="9">err<pos:position pos:line="72" pos:column="12"/></name> <operator pos:line="72" pos:column="13">=<pos:position pos:line="72" pos:column="14"/></operator> <call><name pos:line="72" pos:column="15">read_packetized_to_strbuf<pos:position pos:line="72" pos:column="40"/></name><argument_list pos:line="72" pos:column="40">(<argument><expr><name><name pos:line="72" pos:column="41">process<pos:position pos:line="72" pos:column="48"/></name><operator pos:line="72" pos:column="48">-&gt;<pos:position pos:line="72" pos:column="53"/></operator><name pos:line="72" pos:column="50">out<pos:position pos:line="72" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="55">&amp;<pos:position pos:line="72" pos:column="60"/></operator><name pos:line="72" pos:column="56">nbuf<pos:position pos:line="72" pos:column="60"/></name></expr></argument>)<pos:position pos:line="72" pos:column="61"/></argument_list></call> <operator pos:line="72" pos:column="62">&lt;<pos:position pos:line="72" pos:column="66"/></operator> <literal type="number" pos:line="72" pos:column="64">0<pos:position pos:line="72" pos:column="65"/></literal></expr>;<pos:position pos:line="72" pos:column="66"/></expr_stmt>
	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">err<pos:position pos:line="73" pos:column="16"/></name></expr>)<pos:position pos:line="73" pos:column="17"/></condition><then pos:line="73" pos:column="17">
		<block type="pseudo"><goto pos:line="74" pos:column="17">goto <name pos:line="74" pos:column="22">done<pos:position pos:line="74" pos:column="26"/></name>;<pos:position pos:line="74" pos:column="27"/></goto></block></then></if>

	<expr_stmt><expr><call><name pos:line="76" pos:column="9">read_multi_file_filter_status<pos:position pos:line="76" pos:column="38"/></name><argument_list pos:line="76" pos:column="38">(<argument><expr><name><name pos:line="76" pos:column="39">process<pos:position pos:line="76" pos:column="46"/></name><operator pos:line="76" pos:column="46">-&gt;<pos:position pos:line="76" pos:column="51"/></operator><name pos:line="76" pos:column="48">out<pos:position pos:line="76" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="53">&amp;<pos:position pos:line="76" pos:column="58"/></operator><name pos:line="76" pos:column="54">filter_status<pos:position pos:line="76" pos:column="67"/></name></expr></argument>)<pos:position pos:line="76" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="69"/></expr_stmt>
	<expr_stmt><expr><name pos:line="77" pos:column="9">err<pos:position pos:line="77" pos:column="12"/></name> <operator pos:line="77" pos:column="13">=<pos:position pos:line="77" pos:column="14"/></operator> <call><name pos:line="77" pos:column="15">strcmp<pos:position pos:line="77" pos:column="21"/></name><argument_list pos:line="77" pos:column="21">(<argument><expr><name><name pos:line="77" pos:column="22">filter_status<pos:position pos:line="77" pos:column="35"/></name><operator pos:line="77" pos:column="35">.<pos:position pos:line="77" pos:column="36"/></operator><name pos:line="77" pos:column="36">buf<pos:position pos:line="77" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="41">"success"<pos:position pos:line="77" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="52"/></expr_stmt>

<label><name pos:line="79" pos:column="1">done<pos:position pos:line="79" pos:column="5"/></name>:<pos:position pos:line="79" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="80" pos:column="9">sigchain_pop<pos:position pos:line="80" pos:column="21"/></name><argument_list pos:line="80" pos:column="21">(<argument><expr><name pos:line="80" pos:column="22">SIGPIPE<pos:position pos:line="80" pos:column="29"/></name></expr></argument>)<pos:position pos:line="80" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="31"/></expr_stmt>

	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">err<pos:position pos:line="82" pos:column="16"/></name> <operator pos:line="82" pos:column="17">||<pos:position pos:line="82" pos:column="19"/></operator> <name pos:line="82" pos:column="20">errno<pos:position pos:line="82" pos:column="25"/></name> <operator pos:line="82" pos:column="26">==<pos:position pos:line="82" pos:column="28"/></operator> <name pos:line="82" pos:column="29">EPIPE<pos:position pos:line="82" pos:column="34"/></name></expr>)<pos:position pos:line="82" pos:column="35"/></condition><then pos:line="82" pos:column="35"> <block pos:line="82" pos:column="36">{
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><operator pos:line="83" pos:column="21">!<pos:position pos:line="83" pos:column="22"/></operator><call><name pos:line="83" pos:column="22">strcmp<pos:position pos:line="83" pos:column="28"/></name><argument_list pos:line="83" pos:column="28">(<argument><expr><name><name pos:line="83" pos:column="29">filter_status<pos:position pos:line="83" pos:column="42"/></name><operator pos:line="83" pos:column="42">.<pos:position pos:line="83" pos:column="43"/></operator><name pos:line="83" pos:column="43">buf<pos:position pos:line="83" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="48">"error"<pos:position pos:line="83" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="57"/></condition><then pos:line="83" pos:column="57"> <block pos:line="83" pos:column="58">{
			<comment type="block" pos:line="84" pos:column="25">/* The filter signaled a problem with the file. */</comment>
		}<pos:position pos:line="85" pos:column="18"/></block></then> <elseif pos:line="85" pos:column="19">else <if pos:line="85" pos:column="24">if <condition pos:line="85" pos:column="27">(<expr><operator pos:line="85" pos:column="28">!<pos:position pos:line="85" pos:column="29"/></operator><call><name pos:line="85" pos:column="29">strcmp<pos:position pos:line="85" pos:column="35"/></name><argument_list pos:line="85" pos:column="35">(<argument><expr><name><name pos:line="85" pos:column="36">filter_status<pos:position pos:line="85" pos:column="49"/></name><operator pos:line="85" pos:column="49">.<pos:position pos:line="85" pos:column="50"/></operator><name pos:line="85" pos:column="50">buf<pos:position pos:line="85" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="55">"abort"<pos:position pos:line="85" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="85" pos:column="64"/></condition><then pos:line="85" pos:column="64"> <block pos:line="85" pos:column="65">{
			<comment type="block" pos:line="86" pos:column="25">/*
			 * The filter signaled a permanent problem. Don't try to filter
			 * files with the same command for the lifetime of the current
			 * Git process.
			 */</comment>
			 <expr_stmt><expr><name><name pos:line="91" pos:column="26">entry<pos:position pos:line="91" pos:column="31"/></name><operator pos:line="91" pos:column="31">-&gt;<pos:position pos:line="91" pos:column="36"/></operator><name pos:line="91" pos:column="33">supported_capabilities<pos:position pos:line="91" pos:column="55"/></name></name> <operator pos:line="91" pos:column="56">&amp;=<pos:position pos:line="91" pos:column="62"/></operator> <operator pos:line="91" pos:column="59">~<pos:position pos:line="91" pos:column="60"/></operator><name pos:line="91" pos:column="60">wanted_capability<pos:position pos:line="91" pos:column="77"/></name></expr>;<pos:position pos:line="91" pos:column="78"/></expr_stmt>
		}<pos:position pos:line="92" pos:column="18"/></block></then></if></elseif> <else pos:line="92" pos:column="19">else <block pos:line="92" pos:column="24">{
			<comment type="block" pos:line="93" pos:column="25">/*
			 * Something went wrong with the protocol filter.
			 * Force shutdown and restart if another blob requires filtering.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="97" pos:column="25">error<pos:position pos:line="97" pos:column="30"/></name><argument_list pos:line="97" pos:column="30">(<argument><expr><literal type="string" pos:line="97" pos:column="31">"external filter '%s' failed"<pos:position pos:line="97" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="62">cmd<pos:position pos:line="97" pos:column="65"/></name></expr></argument>)<pos:position pos:line="97" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="98" pos:column="25">kill_multi_file_filter<pos:position pos:line="98" pos:column="47"/></name><argument_list pos:line="98" pos:column="47">(<argument><expr><operator pos:line="98" pos:column="48">&amp;<pos:position pos:line="98" pos:column="53"/></operator><name pos:line="98" pos:column="49">cmd_process_map<pos:position pos:line="98" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="66">entry<pos:position pos:line="98" pos:column="71"/></name></expr></argument>)<pos:position pos:line="98" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="73"/></expr_stmt>
		}<pos:position pos:line="99" pos:column="18"/></block></else></if>
	}<pos:position pos:line="100" pos:column="10"/></block></then> <else pos:line="100" pos:column="11">else <block pos:line="100" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="101" pos:column="17">strbuf_swap<pos:position pos:line="101" pos:column="28"/></name><argument_list pos:line="101" pos:column="28">(<argument><expr><name pos:line="101" pos:column="29">dst<pos:position pos:line="101" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="34">&amp;<pos:position pos:line="101" pos:column="39"/></operator><name pos:line="101" pos:column="35">nbuf<pos:position pos:line="101" pos:column="39"/></name></expr></argument>)<pos:position pos:line="101" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="102" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="103" pos:column="9">strbuf_release<pos:position pos:line="103" pos:column="23"/></name><argument_list pos:line="103" pos:column="23">(<argument><expr><operator pos:line="103" pos:column="24">&amp;<pos:position pos:line="103" pos:column="29"/></operator><name pos:line="103" pos:column="25">nbuf<pos:position pos:line="103" pos:column="29"/></name></expr></argument>)<pos:position pos:line="103" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="31"/></expr_stmt>
	<return pos:line="104" pos:column="9">return <expr><operator pos:line="104" pos:column="16">!<pos:position pos:line="104" pos:column="17"/></operator><name pos:line="104" pos:column="17">err<pos:position pos:line="104" pos:column="20"/></name></expr>;<pos:position pos:line="104" pos:column="21"/></return>
}<pos:position pos:line="105" pos:column="2"/></block></function></unit>
