<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_559_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">git_default_core_config<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">var<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">value<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/* This needs a better name */</comment>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><call><name pos:line="4" pos:column="14">strcmp<pos:position pos:line="4" pos:column="20"/></name><argument_list pos:line="4" pos:column="20">(<argument><expr><name pos:line="4" pos:column="21">var<pos:position pos:line="4" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="26">"core.filemode"<pos:position pos:line="4" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="43"/></condition><then pos:line="4" pos:column="43"> <block pos:line="4" pos:column="44">{
		<expr_stmt><expr><name pos:line="5" pos:column="17">trust_executable_bit<pos:position pos:line="5" pos:column="37"/></name> <operator pos:line="5" pos:column="38">=<pos:position pos:line="5" pos:column="39"/></operator> <call><name pos:line="5" pos:column="40">git_config_bool<pos:position pos:line="5" pos:column="55"/></name><argument_list pos:line="5" pos:column="55">(<argument><expr><name pos:line="5" pos:column="56">var<pos:position pos:line="5" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="61">value<pos:position pos:line="5" pos:column="66"/></name></expr></argument>)<pos:position pos:line="5" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="68"/></expr_stmt>
		<return pos:line="6" pos:column="17">return <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></return>
	}<pos:position pos:line="7" pos:column="10"/></block></then></if>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><call><name pos:line="8" pos:column="14">strcmp<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">var<pos:position pos:line="8" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="26">"core.trustctime"<pos:position pos:line="8" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="45"/></condition><then pos:line="8" pos:column="45"> <block pos:line="8" pos:column="46">{
		<expr_stmt><expr><name pos:line="9" pos:column="17">trust_ctime<pos:position pos:line="9" pos:column="28"/></name> <operator pos:line="9" pos:column="29">=<pos:position pos:line="9" pos:column="30"/></operator> <call><name pos:line="9" pos:column="31">git_config_bool<pos:position pos:line="9" pos:column="46"/></name><argument_list pos:line="9" pos:column="46">(<argument><expr><name pos:line="9" pos:column="47">var<pos:position pos:line="9" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="52">value<pos:position pos:line="9" pos:column="57"/></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="59"/></expr_stmt>
		<return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><call><name pos:line="12" pos:column="14">strcmp<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">var<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="26">"core.checkstat"<pos:position pos:line="12" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="44"/></condition><then pos:line="12" pos:column="44"> <block pos:line="12" pos:column="45">{
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><call><name pos:line="13" pos:column="22">strcasecmp<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">value<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="40">"default"<pos:position pos:line="13" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="51"/></condition><then pos:line="13" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="25">check_stat<pos:position pos:line="14" pos:column="35"/></name> <operator pos:line="14" pos:column="36">=<pos:position pos:line="14" pos:column="37"/></operator> <literal type="number" pos:line="14" pos:column="38">1<pos:position pos:line="14" pos:column="39"/></literal></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt></block></then>
		<elseif pos:line="15" pos:column="17">else <if pos:line="15" pos:column="22">if <condition pos:line="15" pos:column="25">(<expr><operator pos:line="15" pos:column="26">!<pos:position pos:line="15" pos:column="27"/></operator><call><name pos:line="15" pos:column="27">strcasecmp<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">value<pos:position pos:line="15" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="45">"minimal"<pos:position pos:line="15" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="56"/></condition><then pos:line="15" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="25">check_stat<pos:position pos:line="16" pos:column="35"/></name> <operator pos:line="16" pos:column="36">=<pos:position pos:line="16" pos:column="37"/></operator> <literal type="number" pos:line="16" pos:column="38">0<pos:position pos:line="16" pos:column="39"/></literal></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><call><name pos:line="19" pos:column="14">strcmp<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">var<pos:position pos:line="19" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="26">"core.quotepath"<pos:position pos:line="19" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="44"/></condition><then pos:line="19" pos:column="44"> <block pos:line="19" pos:column="45">{
		<expr_stmt><expr><name pos:line="20" pos:column="17">quote_path_fully<pos:position pos:line="20" pos:column="33"/></name> <operator pos:line="20" pos:column="34">=<pos:position pos:line="20" pos:column="35"/></operator> <call><name pos:line="20" pos:column="36">git_config_bool<pos:position pos:line="20" pos:column="51"/></name><argument_list pos:line="20" pos:column="51">(<argument><expr><name pos:line="20" pos:column="52">var<pos:position pos:line="20" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="57">value<pos:position pos:line="20" pos:column="62"/></name></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="64"/></expr_stmt>
		<return pos:line="21" pos:column="17">return <expr><literal type="number" pos:line="21" pos:column="24">0<pos:position pos:line="21" pos:column="25"/></literal></expr>;<pos:position pos:line="21" pos:column="26"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><call><name pos:line="24" pos:column="14">strcmp<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">var<pos:position pos:line="24" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="26">"core.symlinks"<pos:position pos:line="24" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="43"/></condition><then pos:line="24" pos:column="43"> <block pos:line="24" pos:column="44">{
		<expr_stmt><expr><name pos:line="25" pos:column="17">has_symlinks<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">=<pos:position pos:line="25" pos:column="31"/></operator> <call><name pos:line="25" pos:column="32">git_config_bool<pos:position pos:line="25" pos:column="47"/></name><argument_list pos:line="25" pos:column="47">(<argument><expr><name pos:line="25" pos:column="48">var<pos:position pos:line="25" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="53">value<pos:position pos:line="25" pos:column="58"/></name></expr></argument>)<pos:position pos:line="25" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="60"/></expr_stmt>
		<return pos:line="26" pos:column="17">return <expr><literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><call><name pos:line="29" pos:column="14">strcmp<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name pos:line="29" pos:column="21">var<pos:position pos:line="29" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="26">"core.ignorecase"<pos:position pos:line="29" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="45"/></condition><then pos:line="29" pos:column="45"> <block pos:line="29" pos:column="46">{
		<expr_stmt><expr><name pos:line="30" pos:column="17">ignore_case<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">=<pos:position pos:line="30" pos:column="30"/></operator> <call><name pos:line="30" pos:column="31">git_config_bool<pos:position pos:line="30" pos:column="46"/></name><argument_list pos:line="30" pos:column="46">(<argument><expr><name pos:line="30" pos:column="47">var<pos:position pos:line="30" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="52">value<pos:position pos:line="30" pos:column="57"/></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>
		<return pos:line="31" pos:column="17">return <expr><literal type="number" pos:line="31" pos:column="24">0<pos:position pos:line="31" pos:column="25"/></literal></expr>;<pos:position pos:line="31" pos:column="26"/></return>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><call><name pos:line="34" pos:column="14">strcmp<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><name pos:line="34" pos:column="21">var<pos:position pos:line="34" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="26">"core.attributesfile"<pos:position pos:line="34" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="49"/></condition><then pos:line="34" pos:column="49">
		<block type="pseudo"><return pos:line="35" pos:column="17">return <expr><call><name pos:line="35" pos:column="24">git_config_pathname<pos:position pos:line="35" pos:column="43"/></name><argument_list pos:line="35" pos:column="43">(<argument><expr><operator pos:line="35" pos:column="44">&amp;<pos:position pos:line="35" pos:column="49"/></operator><name pos:line="35" pos:column="45">git_attributes_file<pos:position pos:line="35" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="66">var<pos:position pos:line="35" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="71">value<pos:position pos:line="35" pos:column="76"/></name></expr></argument>)<pos:position pos:line="35" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="78"/></return></block></then></if>

	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><operator pos:line="37" pos:column="13">!<pos:position pos:line="37" pos:column="14"/></operator><call><name pos:line="37" pos:column="14">strcmp<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name pos:line="37" pos:column="21">var<pos:position pos:line="37" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="26">"core.hookspath"<pos:position pos:line="37" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="44"/></condition><then pos:line="37" pos:column="44">
		<block type="pseudo"><return pos:line="38" pos:column="17">return <expr><call><name pos:line="38" pos:column="24">git_config_pathname<pos:position pos:line="38" pos:column="43"/></name><argument_list pos:line="38" pos:column="43">(<argument><expr><operator pos:line="38" pos:column="44">&amp;<pos:position pos:line="38" pos:column="49"/></operator><name pos:line="38" pos:column="45">git_hooks_path<pos:position pos:line="38" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="61">var<pos:position pos:line="38" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="66">value<pos:position pos:line="38" pos:column="71"/></name></expr></argument>)<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="73"/></return></block></then></if>

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><operator pos:line="40" pos:column="13">!<pos:position pos:line="40" pos:column="14"/></operator><call><name pos:line="40" pos:column="14">strcmp<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><name pos:line="40" pos:column="21">var<pos:position pos:line="40" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="26">"core.bare"<pos:position pos:line="40" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="39"/></condition><then pos:line="40" pos:column="39"> <block pos:line="40" pos:column="40">{
		<expr_stmt><expr><name pos:line="41" pos:column="17">is_bare_repository_cfg<pos:position pos:line="41" pos:column="39"/></name> <operator pos:line="41" pos:column="40">=<pos:position pos:line="41" pos:column="41"/></operator> <call><name pos:line="41" pos:column="42">git_config_bool<pos:position pos:line="41" pos:column="57"/></name><argument_list pos:line="41" pos:column="57">(<argument><expr><name pos:line="41" pos:column="58">var<pos:position pos:line="41" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="63">value<pos:position pos:line="41" pos:column="68"/></name></expr></argument>)<pos:position pos:line="41" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="70"/></expr_stmt>
		<return pos:line="42" pos:column="17">return <expr><literal type="number" pos:line="42" pos:column="24">0<pos:position pos:line="42" pos:column="25"/></literal></expr>;<pos:position pos:line="42" pos:column="26"/></return>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">!<pos:position pos:line="45" pos:column="14"/></operator><call><name pos:line="45" pos:column="14">strcmp<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name pos:line="45" pos:column="21">var<pos:position pos:line="45" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="26">"core.ignorestat"<pos:position pos:line="45" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="45"/></condition><then pos:line="45" pos:column="45"> <block pos:line="45" pos:column="46">{
		<expr_stmt><expr><name pos:line="46" pos:column="17">assume_unchanged<pos:position pos:line="46" pos:column="33"/></name> <operator pos:line="46" pos:column="34">=<pos:position pos:line="46" pos:column="35"/></operator> <call><name pos:line="46" pos:column="36">git_config_bool<pos:position pos:line="46" pos:column="51"/></name><argument_list pos:line="46" pos:column="51">(<argument><expr><name pos:line="46" pos:column="52">var<pos:position pos:line="46" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="57">value<pos:position pos:line="46" pos:column="62"/></name></expr></argument>)<pos:position pos:line="46" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="64"/></expr_stmt>
		<return pos:line="47" pos:column="17">return <expr><literal type="number" pos:line="47" pos:column="24">0<pos:position pos:line="47" pos:column="25"/></literal></expr>;<pos:position pos:line="47" pos:column="26"/></return>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if>

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">!<pos:position pos:line="50" pos:column="14"/></operator><call><name pos:line="50" pos:column="14">strcmp<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><name pos:line="50" pos:column="21">var<pos:position pos:line="50" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="26">"core.prefersymlinkrefs"<pos:position pos:line="50" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="52"/></condition><then pos:line="50" pos:column="52"> <block pos:line="50" pos:column="53">{
		<expr_stmt><expr><name pos:line="51" pos:column="17">prefer_symlink_refs<pos:position pos:line="51" pos:column="36"/></name> <operator pos:line="51" pos:column="37">=<pos:position pos:line="51" pos:column="38"/></operator> <call><name pos:line="51" pos:column="39">git_config_bool<pos:position pos:line="51" pos:column="54"/></name><argument_list pos:line="51" pos:column="54">(<argument><expr><name pos:line="51" pos:column="55">var<pos:position pos:line="51" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="60">value<pos:position pos:line="51" pos:column="65"/></name></expr></argument>)<pos:position pos:line="51" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="67"/></expr_stmt>
		<return pos:line="52" pos:column="17">return <expr><literal type="number" pos:line="52" pos:column="24">0<pos:position pos:line="52" pos:column="25"/></literal></expr>;<pos:position pos:line="52" pos:column="26"/></return>
	}<pos:position pos:line="53" pos:column="10"/></block></then></if>

	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><call><name pos:line="55" pos:column="14">strcmp<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">(<argument><expr><name pos:line="55" pos:column="21">var<pos:position pos:line="55" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="26">"core.logallrefupdates"<pos:position pos:line="55" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="51"/></condition><then pos:line="55" pos:column="51"> <block pos:line="55" pos:column="52">{
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">value<pos:position pos:line="56" pos:column="26"/></name> <operator pos:line="56" pos:column="27">&amp;&amp;<pos:position pos:line="56" pos:column="37"/></operator> <operator pos:line="56" pos:column="30">!<pos:position pos:line="56" pos:column="31"/></operator><call><name pos:line="56" pos:column="31">strcasecmp<pos:position pos:line="56" pos:column="41"/></name><argument_list pos:line="56" pos:column="41">(<argument><expr><name pos:line="56" pos:column="42">value<pos:position pos:line="56" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="49">"always"<pos:position pos:line="56" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="59"/></condition><then pos:line="56" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><name pos:line="57" pos:column="25">log_all_ref_updates<pos:position pos:line="57" pos:column="44"/></name> <operator pos:line="57" pos:column="45">=<pos:position pos:line="57" pos:column="46"/></operator> <name pos:line="57" pos:column="47">LOG_REFS_ALWAYS<pos:position pos:line="57" pos:column="62"/></name></expr>;<pos:position pos:line="57" pos:column="63"/></expr_stmt></block></then>
		<elseif pos:line="58" pos:column="17">else <if pos:line="58" pos:column="22">if <condition pos:line="58" pos:column="25">(<expr><call><name pos:line="58" pos:column="26">git_config_bool<pos:position pos:line="58" pos:column="41"/></name><argument_list pos:line="58" pos:column="41">(<argument><expr><name pos:line="58" pos:column="42">var<pos:position pos:line="58" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="47">value<pos:position pos:line="58" pos:column="52"/></name></expr></argument>)<pos:position pos:line="58" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="54"/></condition><then pos:line="58" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="25">log_all_ref_updates<pos:position pos:line="59" pos:column="44"/></name> <operator pos:line="59" pos:column="45">=<pos:position pos:line="59" pos:column="46"/></operator> <name pos:line="59" pos:column="47">LOG_REFS_NORMAL<pos:position pos:line="59" pos:column="62"/></name></expr>;<pos:position pos:line="59" pos:column="63"/></expr_stmt></block></then></if></elseif>
		<else pos:line="60" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="25">log_all_ref_updates<pos:position pos:line="61" pos:column="44"/></name> <operator pos:line="61" pos:column="45">=<pos:position pos:line="61" pos:column="46"/></operator> <name pos:line="61" pos:column="47">LOG_REFS_NONE<pos:position pos:line="61" pos:column="60"/></name></expr>;<pos:position pos:line="61" pos:column="61"/></expr_stmt></block></else></if>
		<return pos:line="62" pos:column="17">return <expr><literal type="number" pos:line="62" pos:column="24">0<pos:position pos:line="62" pos:column="25"/></literal></expr>;<pos:position pos:line="62" pos:column="26"/></return>
	}<pos:position pos:line="63" pos:column="10"/></block></then></if>

	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><operator pos:line="65" pos:column="13">!<pos:position pos:line="65" pos:column="14"/></operator><call><name pos:line="65" pos:column="14">strcmp<pos:position pos:line="65" pos:column="20"/></name><argument_list pos:line="65" pos:column="20">(<argument><expr><name pos:line="65" pos:column="21">var<pos:position pos:line="65" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="26">"core.warnambiguousrefs"<pos:position pos:line="65" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="52"/></condition><then pos:line="65" pos:column="52"> <block pos:line="65" pos:column="53">{
		<expr_stmt><expr><name pos:line="66" pos:column="17">warn_ambiguous_refs<pos:position pos:line="66" pos:column="36"/></name> <operator pos:line="66" pos:column="37">=<pos:position pos:line="66" pos:column="38"/></operator> <call><name pos:line="66" pos:column="39">git_config_bool<pos:position pos:line="66" pos:column="54"/></name><argument_list pos:line="66" pos:column="54">(<argument><expr><name pos:line="66" pos:column="55">var<pos:position pos:line="66" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="60">value<pos:position pos:line="66" pos:column="65"/></name></expr></argument>)<pos:position pos:line="66" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="67"/></expr_stmt>
		<return pos:line="67" pos:column="17">return <expr><literal type="number" pos:line="67" pos:column="24">0<pos:position pos:line="67" pos:column="25"/></literal></expr>;<pos:position pos:line="67" pos:column="26"/></return>
	}<pos:position pos:line="68" pos:column="10"/></block></then></if>

	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><operator pos:line="70" pos:column="13">!<pos:position pos:line="70" pos:column="14"/></operator><call><name pos:line="70" pos:column="14">strcmp<pos:position pos:line="70" pos:column="20"/></name><argument_list pos:line="70" pos:column="20">(<argument><expr><name pos:line="70" pos:column="21">var<pos:position pos:line="70" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="26">"core.abbrev"<pos:position pos:line="70" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="41"/></condition><then pos:line="70" pos:column="41"> <block pos:line="70" pos:column="42">{
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><operator pos:line="71" pos:column="21">!<pos:position pos:line="71" pos:column="22"/></operator><name pos:line="71" pos:column="22">value<pos:position pos:line="71" pos:column="27"/></name></expr>)<pos:position pos:line="71" pos:column="28"/></condition><then pos:line="71" pos:column="28">
			<block type="pseudo"><return pos:line="72" pos:column="25">return <expr><call><name pos:line="72" pos:column="32">config_error_nonbool<pos:position pos:line="72" pos:column="52"/></name><argument_list pos:line="72" pos:column="52">(<argument><expr><name pos:line="72" pos:column="53">var<pos:position pos:line="72" pos:column="56"/></name></expr></argument>)<pos:position pos:line="72" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="58"/></return></block></then></if>
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><operator pos:line="73" pos:column="21">!<pos:position pos:line="73" pos:column="22"/></operator><call><name pos:line="73" pos:column="22">strcasecmp<pos:position pos:line="73" pos:column="32"/></name><argument_list pos:line="73" pos:column="32">(<argument><expr><name pos:line="73" pos:column="33">value<pos:position pos:line="73" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="40">"auto"<pos:position pos:line="73" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="48"/></condition><then pos:line="73" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name pos:line="74" pos:column="25">default_abbrev<pos:position pos:line="74" pos:column="39"/></name> <operator pos:line="74" pos:column="40">=<pos:position pos:line="74" pos:column="41"/></operator> <operator pos:line="74" pos:column="42">-<pos:position pos:line="74" pos:column="43"/></operator><literal type="number" pos:line="74" pos:column="43">1<pos:position pos:line="74" pos:column="44"/></literal></expr>;<pos:position pos:line="74" pos:column="45"/></expr_stmt></block></then>
		<else pos:line="75" pos:column="17">else <block pos:line="75" pos:column="22">{
			<decl_stmt><decl><type><name pos:line="76" pos:column="25">int<pos:position pos:line="76" pos:column="28"/></name></type> <name pos:line="76" pos:column="29">abbrev<pos:position pos:line="76" pos:column="35"/></name> <init pos:line="76" pos:column="36">= <expr><call><name pos:line="76" pos:column="38">git_config_int<pos:position pos:line="76" pos:column="52"/></name><argument_list pos:line="76" pos:column="52">(<argument><expr><name pos:line="76" pos:column="53">var<pos:position pos:line="76" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="58">value<pos:position pos:line="76" pos:column="63"/></name></expr></argument>)<pos:position pos:line="76" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="76" pos:column="65"/></decl_stmt>
			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><name><name pos:line="77" pos:column="29">abbrev<pos:position pos:line="77" pos:column="35"/></name> <argument_list type="generic" pos:line="77" pos:column="36">&lt; <argument><expr><name pos:line="77" pos:column="38">minimum_abbrev<pos:position pos:line="77" pos:column="52"/></name> <operator pos:line="77" pos:column="53">||<pos:position pos:line="77" pos:column="55"/></operator> <name pos:line="77" pos:column="56">abbrev<pos:position pos:line="77" pos:column="62"/></name></expr></argument> &gt;<pos:position pos:line="77" pos:column="67"/></argument_list></name> <literal type="number" pos:line="77" pos:column="65">40<pos:position pos:line="77" pos:column="67"/></literal></expr>)<pos:position pos:line="77" pos:column="68"/></condition><then pos:line="77" pos:column="68">
				<block type="pseudo"><return pos:line="78" pos:column="33">return <expr><call><name pos:line="78" pos:column="40">error<pos:position pos:line="78" pos:column="45"/></name><argument_list pos:line="78" pos:column="45">(<argument><expr><literal type="string" pos:line="78" pos:column="46">"abbrev length out of range: %d"<pos:position pos:line="78" pos:column="78"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="80">abbrev<pos:position pos:line="78" pos:column="86"/></name></expr></argument>)<pos:position pos:line="78" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="88"/></return></block></then></if>
			<expr_stmt><expr><name pos:line="79" pos:column="25">default_abbrev<pos:position pos:line="79" pos:column="39"/></name> <operator pos:line="79" pos:column="40">=<pos:position pos:line="79" pos:column="41"/></operator> <name pos:line="79" pos:column="42">abbrev<pos:position pos:line="79" pos:column="48"/></name></expr>;<pos:position pos:line="79" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="80" pos:column="18"/></block></else></if>
		<return pos:line="81" pos:column="17">return <expr><literal type="number" pos:line="81" pos:column="24">0<pos:position pos:line="81" pos:column="25"/></literal></expr>;<pos:position pos:line="81" pos:column="26"/></return>
	}<pos:position pos:line="82" pos:column="10"/></block></then></if>

	<if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><operator pos:line="84" pos:column="13">!<pos:position pos:line="84" pos:column="14"/></operator><call><name pos:line="84" pos:column="14">strcmp<pos:position pos:line="84" pos:column="20"/></name><argument_list pos:line="84" pos:column="20">(<argument><expr><name pos:line="84" pos:column="21">var<pos:position pos:line="84" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="26">"core.disambiguate"<pos:position pos:line="84" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="47"/></condition><then pos:line="84" pos:column="47">
		<block type="pseudo"><return pos:line="85" pos:column="17">return <expr><call><name pos:line="85" pos:column="24">set_disambiguate_hint_config<pos:position pos:line="85" pos:column="52"/></name><argument_list pos:line="85" pos:column="52">(<argument><expr><name pos:line="85" pos:column="53">var<pos:position pos:line="85" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="58">value<pos:position pos:line="85" pos:column="63"/></name></expr></argument>)<pos:position pos:line="85" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="65"/></return></block></then></if>

	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><operator pos:line="87" pos:column="13">!<pos:position pos:line="87" pos:column="14"/></operator><call><name pos:line="87" pos:column="14">strcmp<pos:position pos:line="87" pos:column="20"/></name><argument_list pos:line="87" pos:column="20">(<argument><expr><name pos:line="87" pos:column="21">var<pos:position pos:line="87" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="26">"core.loosecompression"<pos:position pos:line="87" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="51"/></condition><then pos:line="87" pos:column="51"> <block pos:line="87" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="88" pos:column="17">int<pos:position pos:line="88" pos:column="20"/></name></type> <name pos:line="88" pos:column="21">level<pos:position pos:line="88" pos:column="26"/></name> <init pos:line="88" pos:column="27">= <expr><call><name pos:line="88" pos:column="29">git_config_int<pos:position pos:line="88" pos:column="43"/></name><argument_list pos:line="88" pos:column="43">(<argument><expr><name pos:line="88" pos:column="44">var<pos:position pos:line="88" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="49">value<pos:position pos:line="88" pos:column="54"/></name></expr></argument>)<pos:position pos:line="88" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="88" pos:column="56"/></decl_stmt>
		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><name pos:line="89" pos:column="21">level<pos:position pos:line="89" pos:column="26"/></name> <operator pos:line="89" pos:column="27">==<pos:position pos:line="89" pos:column="29"/></operator> <operator pos:line="89" pos:column="30">-<pos:position pos:line="89" pos:column="31"/></operator><literal type="number" pos:line="89" pos:column="31">1<pos:position pos:line="89" pos:column="32"/></literal></expr>)<pos:position pos:line="89" pos:column="33"/></condition><then pos:line="89" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="25">level<pos:position pos:line="90" pos:column="30"/></name> <operator pos:line="90" pos:column="31">=<pos:position pos:line="90" pos:column="32"/></operator> <name pos:line="90" pos:column="33">Z_DEFAULT_COMPRESSION<pos:position pos:line="90" pos:column="54"/></name></expr>;<pos:position pos:line="90" pos:column="55"/></expr_stmt></block></then>
		<elseif pos:line="91" pos:column="17">else <if pos:line="91" pos:column="22">if <condition pos:line="91" pos:column="25">(<expr><name><name pos:line="91" pos:column="26">level<pos:position pos:line="91" pos:column="31"/></name> <argument_list type="generic" pos:line="91" pos:column="32">&lt; <argument><expr><literal type="number" pos:line="91" pos:column="34">0<pos:position pos:line="91" pos:column="35"/></literal> <operator pos:line="91" pos:column="36">||<pos:position pos:line="91" pos:column="38"/></operator> <name pos:line="91" pos:column="39">level<pos:position pos:line="91" pos:column="44"/></name></expr></argument> &gt;<pos:position pos:line="91" pos:column="49"/></argument_list></name> <name pos:line="91" pos:column="47">Z_BEST_COMPRESSION<pos:position pos:line="91" pos:column="65"/></name></expr>)<pos:position pos:line="91" pos:column="66"/></condition><then pos:line="91" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="25">die<pos:position pos:line="92" pos:column="28"/></name><argument_list pos:line="92" pos:column="28">(<argument><expr><call><name pos:line="92" pos:column="29">_<pos:position pos:line="92" pos:column="30"/></name><argument_list pos:line="92" pos:column="30">(<argument><expr><literal type="string" pos:line="92" pos:column="31">"bad zlib compression level %d"<pos:position pos:line="92" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="92" pos:column="65">level<pos:position pos:line="92" pos:column="70"/></name></expr></argument>)<pos:position pos:line="92" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="72"/></expr_stmt></block></then></if></elseif></if>
		<expr_stmt><expr><name pos:line="93" pos:column="17">zlib_compression_level<pos:position pos:line="93" pos:column="39"/></name> <operator pos:line="93" pos:column="40">=<pos:position pos:line="93" pos:column="41"/></operator> <name pos:line="93" pos:column="42">level<pos:position pos:line="93" pos:column="47"/></name></expr>;<pos:position pos:line="93" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="94" pos:column="17">zlib_compression_seen<pos:position pos:line="94" pos:column="38"/></name> <operator pos:line="94" pos:column="39">=<pos:position pos:line="94" pos:column="40"/></operator> <literal type="number" pos:line="94" pos:column="41">1<pos:position pos:line="94" pos:column="42"/></literal></expr>;<pos:position pos:line="94" pos:column="43"/></expr_stmt>
		<return pos:line="95" pos:column="17">return <expr><literal type="number" pos:line="95" pos:column="24">0<pos:position pos:line="95" pos:column="25"/></literal></expr>;<pos:position pos:line="95" pos:column="26"/></return>
	}<pos:position pos:line="96" pos:column="10"/></block></then></if>

	<if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><operator pos:line="98" pos:column="13">!<pos:position pos:line="98" pos:column="14"/></operator><call><name pos:line="98" pos:column="14">strcmp<pos:position pos:line="98" pos:column="20"/></name><argument_list pos:line="98" pos:column="20">(<argument><expr><name pos:line="98" pos:column="21">var<pos:position pos:line="98" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="26">"core.compression"<pos:position pos:line="98" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="98" pos:column="46"/></condition><then pos:line="98" pos:column="46"> <block pos:line="98" pos:column="47">{
		<decl_stmt><decl><type><name pos:line="99" pos:column="17">int<pos:position pos:line="99" pos:column="20"/></name></type> <name pos:line="99" pos:column="21">level<pos:position pos:line="99" pos:column="26"/></name> <init pos:line="99" pos:column="27">= <expr><call><name pos:line="99" pos:column="29">git_config_int<pos:position pos:line="99" pos:column="43"/></name><argument_list pos:line="99" pos:column="43">(<argument><expr><name pos:line="99" pos:column="44">var<pos:position pos:line="99" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="49">value<pos:position pos:line="99" pos:column="54"/></name></expr></argument>)<pos:position pos:line="99" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="99" pos:column="56"/></decl_stmt>
		<if pos:line="100" pos:column="17">if <condition pos:line="100" pos:column="20">(<expr><name pos:line="100" pos:column="21">level<pos:position pos:line="100" pos:column="26"/></name> <operator pos:line="100" pos:column="27">==<pos:position pos:line="100" pos:column="29"/></operator> <operator pos:line="100" pos:column="30">-<pos:position pos:line="100" pos:column="31"/></operator><literal type="number" pos:line="100" pos:column="31">1<pos:position pos:line="100" pos:column="32"/></literal></expr>)<pos:position pos:line="100" pos:column="33"/></condition><then pos:line="100" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name pos:line="101" pos:column="25">level<pos:position pos:line="101" pos:column="30"/></name> <operator pos:line="101" pos:column="31">=<pos:position pos:line="101" pos:column="32"/></operator> <name pos:line="101" pos:column="33">Z_DEFAULT_COMPRESSION<pos:position pos:line="101" pos:column="54"/></name></expr>;<pos:position pos:line="101" pos:column="55"/></expr_stmt></block></then>
		<elseif pos:line="102" pos:column="17">else <if pos:line="102" pos:column="22">if <condition pos:line="102" pos:column="25">(<expr><name><name pos:line="102" pos:column="26">level<pos:position pos:line="102" pos:column="31"/></name> <argument_list type="generic" pos:line="102" pos:column="32">&lt; <argument><expr><literal type="number" pos:line="102" pos:column="34">0<pos:position pos:line="102" pos:column="35"/></literal> <operator pos:line="102" pos:column="36">||<pos:position pos:line="102" pos:column="38"/></operator> <name pos:line="102" pos:column="39">level<pos:position pos:line="102" pos:column="44"/></name></expr></argument> &gt;<pos:position pos:line="102" pos:column="49"/></argument_list></name> <name pos:line="102" pos:column="47">Z_BEST_COMPRESSION<pos:position pos:line="102" pos:column="65"/></name></expr>)<pos:position pos:line="102" pos:column="66"/></condition><then pos:line="102" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="103" pos:column="25">die<pos:position pos:line="103" pos:column="28"/></name><argument_list pos:line="103" pos:column="28">(<argument><expr><call><name pos:line="103" pos:column="29">_<pos:position pos:line="103" pos:column="30"/></name><argument_list pos:line="103" pos:column="30">(<argument><expr><literal type="string" pos:line="103" pos:column="31">"bad zlib compression level %d"<pos:position pos:line="103" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="103" pos:column="65">level<pos:position pos:line="103" pos:column="70"/></name></expr></argument>)<pos:position pos:line="103" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="72"/></expr_stmt></block></then></if></elseif></if>
		<expr_stmt><expr><name pos:line="104" pos:column="17">core_compression_level<pos:position pos:line="104" pos:column="39"/></name> <operator pos:line="104" pos:column="40">=<pos:position pos:line="104" pos:column="41"/></operator> <name pos:line="104" pos:column="42">level<pos:position pos:line="104" pos:column="47"/></name></expr>;<pos:position pos:line="104" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="105" pos:column="17">core_compression_seen<pos:position pos:line="105" pos:column="38"/></name> <operator pos:line="105" pos:column="39">=<pos:position pos:line="105" pos:column="40"/></operator> <literal type="number" pos:line="105" pos:column="41">1<pos:position pos:line="105" pos:column="42"/></literal></expr>;<pos:position pos:line="105" pos:column="43"/></expr_stmt>
		<if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><operator pos:line="106" pos:column="21">!<pos:position pos:line="106" pos:column="22"/></operator><name pos:line="106" pos:column="22">zlib_compression_seen<pos:position pos:line="106" pos:column="43"/></name></expr>)<pos:position pos:line="106" pos:column="44"/></condition><then pos:line="106" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><name pos:line="107" pos:column="25">zlib_compression_level<pos:position pos:line="107" pos:column="47"/></name> <operator pos:line="107" pos:column="48">=<pos:position pos:line="107" pos:column="49"/></operator> <name pos:line="107" pos:column="50">level<pos:position pos:line="107" pos:column="55"/></name></expr>;<pos:position pos:line="107" pos:column="56"/></expr_stmt></block></then></if>
		<if pos:line="108" pos:column="17">if <condition pos:line="108" pos:column="20">(<expr><operator pos:line="108" pos:column="21">!<pos:position pos:line="108" pos:column="22"/></operator><name pos:line="108" pos:column="22">pack_compression_seen<pos:position pos:line="108" pos:column="43"/></name></expr>)<pos:position pos:line="108" pos:column="44"/></condition><then pos:line="108" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><name pos:line="109" pos:column="25">pack_compression_level<pos:position pos:line="109" pos:column="47"/></name> <operator pos:line="109" pos:column="48">=<pos:position pos:line="109" pos:column="49"/></operator> <name pos:line="109" pos:column="50">level<pos:position pos:line="109" pos:column="55"/></name></expr>;<pos:position pos:line="109" pos:column="56"/></expr_stmt></block></then></if>
		<return pos:line="110" pos:column="17">return <expr><literal type="number" pos:line="110" pos:column="24">0<pos:position pos:line="110" pos:column="25"/></literal></expr>;<pos:position pos:line="110" pos:column="26"/></return>
	}<pos:position pos:line="111" pos:column="10"/></block></then></if>

	<if pos:line="113" pos:column="9">if <condition pos:line="113" pos:column="12">(<expr><operator pos:line="113" pos:column="13">!<pos:position pos:line="113" pos:column="14"/></operator><call><name pos:line="113" pos:column="14">strcmp<pos:position pos:line="113" pos:column="20"/></name><argument_list pos:line="113" pos:column="20">(<argument><expr><name pos:line="113" pos:column="21">var<pos:position pos:line="113" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="26">"core.packedgitwindowsize"<pos:position pos:line="113" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="113" pos:column="54"/></condition><then pos:line="113" pos:column="54"> <block pos:line="113" pos:column="55">{
		<decl_stmt><decl><type><name pos:line="114" pos:column="17">int<pos:position pos:line="114" pos:column="20"/></name></type> <name pos:line="114" pos:column="21">pgsz_x2<pos:position pos:line="114" pos:column="28"/></name> <init pos:line="114" pos:column="29">= <expr><call><name pos:line="114" pos:column="31">getpagesize<pos:position pos:line="114" pos:column="42"/></name><argument_list pos:line="114" pos:column="42">()<pos:position pos:line="114" pos:column="44"/></argument_list></call> <operator pos:line="114" pos:column="45">*<pos:position pos:line="114" pos:column="46"/></operator> <literal type="number" pos:line="114" pos:column="47">2<pos:position pos:line="114" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="114" pos:column="49"/></decl_stmt>
		<expr_stmt><expr><name pos:line="115" pos:column="17">packed_git_window_size<pos:position pos:line="115" pos:column="39"/></name> <operator pos:line="115" pos:column="40">=<pos:position pos:line="115" pos:column="41"/></operator> <call><name pos:line="115" pos:column="42">git_config_ulong<pos:position pos:line="115" pos:column="58"/></name><argument_list pos:line="115" pos:column="58">(<argument><expr><name pos:line="115" pos:column="59">var<pos:position pos:line="115" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="64">value<pos:position pos:line="115" pos:column="69"/></name></expr></argument>)<pos:position pos:line="115" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="71"/></expr_stmt>

		<comment type="block" pos:line="117" pos:column="17">/* This value must be multiple of (pagesize * 2) */</comment>
		<expr_stmt><expr><name pos:line="118" pos:column="17">packed_git_window_size<pos:position pos:line="118" pos:column="39"/></name> <operator pos:line="118" pos:column="40">/=<pos:position pos:line="118" pos:column="42"/></operator> <name pos:line="118" pos:column="43">pgsz_x2<pos:position pos:line="118" pos:column="50"/></name></expr>;<pos:position pos:line="118" pos:column="51"/></expr_stmt>
		<if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><name pos:line="119" pos:column="21">packed_git_window_size<pos:position pos:line="119" pos:column="43"/></name> <operator pos:line="119" pos:column="44">&lt;<pos:position pos:line="119" pos:column="48"/></operator> <literal type="number" pos:line="119" pos:column="46">1<pos:position pos:line="119" pos:column="47"/></literal></expr>)<pos:position pos:line="119" pos:column="48"/></condition><then pos:line="119" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name pos:line="120" pos:column="25">packed_git_window_size<pos:position pos:line="120" pos:column="47"/></name> <operator pos:line="120" pos:column="48">=<pos:position pos:line="120" pos:column="49"/></operator> <literal type="number" pos:line="120" pos:column="50">1<pos:position pos:line="120" pos:column="51"/></literal></expr>;<pos:position pos:line="120" pos:column="52"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="121" pos:column="17">packed_git_window_size<pos:position pos:line="121" pos:column="39"/></name> <operator pos:line="121" pos:column="40">*=<pos:position pos:line="121" pos:column="42"/></operator> <name pos:line="121" pos:column="43">pgsz_x2<pos:position pos:line="121" pos:column="50"/></name></expr>;<pos:position pos:line="121" pos:column="51"/></expr_stmt>
		<return pos:line="122" pos:column="17">return <expr><literal type="number" pos:line="122" pos:column="24">0<pos:position pos:line="122" pos:column="25"/></literal></expr>;<pos:position pos:line="122" pos:column="26"/></return>
	}<pos:position pos:line="123" pos:column="10"/></block></then></if>

	<if pos:line="125" pos:column="9">if <condition pos:line="125" pos:column="12">(<expr><operator pos:line="125" pos:column="13">!<pos:position pos:line="125" pos:column="14"/></operator><call><name pos:line="125" pos:column="14">strcmp<pos:position pos:line="125" pos:column="20"/></name><argument_list pos:line="125" pos:column="20">(<argument><expr><name pos:line="125" pos:column="21">var<pos:position pos:line="125" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="26">"core.bigfilethreshold"<pos:position pos:line="125" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="125" pos:column="51"/></condition><then pos:line="125" pos:column="51"> <block pos:line="125" pos:column="52">{
		<expr_stmt><expr><name pos:line="126" pos:column="17">big_file_threshold<pos:position pos:line="126" pos:column="35"/></name> <operator pos:line="126" pos:column="36">=<pos:position pos:line="126" pos:column="37"/></operator> <call><name pos:line="126" pos:column="38">git_config_ulong<pos:position pos:line="126" pos:column="54"/></name><argument_list pos:line="126" pos:column="54">(<argument><expr><name pos:line="126" pos:column="55">var<pos:position pos:line="126" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="60">value<pos:position pos:line="126" pos:column="65"/></name></expr></argument>)<pos:position pos:line="126" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="67"/></expr_stmt>
		<return pos:line="127" pos:column="17">return <expr><literal type="number" pos:line="127" pos:column="24">0<pos:position pos:line="127" pos:column="25"/></literal></expr>;<pos:position pos:line="127" pos:column="26"/></return>
	}<pos:position pos:line="128" pos:column="10"/></block></then></if>

	<if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><operator pos:line="130" pos:column="13">!<pos:position pos:line="130" pos:column="14"/></operator><call><name pos:line="130" pos:column="14">strcmp<pos:position pos:line="130" pos:column="20"/></name><argument_list pos:line="130" pos:column="20">(<argument><expr><name pos:line="130" pos:column="21">var<pos:position pos:line="130" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="130" pos:column="26">"core.packedgitlimit"<pos:position pos:line="130" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="130" pos:column="49"/></condition><then pos:line="130" pos:column="49"> <block pos:line="130" pos:column="50">{
		<expr_stmt><expr><name pos:line="131" pos:column="17">packed_git_limit<pos:position pos:line="131" pos:column="33"/></name> <operator pos:line="131" pos:column="34">=<pos:position pos:line="131" pos:column="35"/></operator> <call><name pos:line="131" pos:column="36">git_config_ulong<pos:position pos:line="131" pos:column="52"/></name><argument_list pos:line="131" pos:column="52">(<argument><expr><name pos:line="131" pos:column="53">var<pos:position pos:line="131" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="58">value<pos:position pos:line="131" pos:column="63"/></name></expr></argument>)<pos:position pos:line="131" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="65"/></expr_stmt>
		<return pos:line="132" pos:column="17">return <expr><literal type="number" pos:line="132" pos:column="24">0<pos:position pos:line="132" pos:column="25"/></literal></expr>;<pos:position pos:line="132" pos:column="26"/></return>
	}<pos:position pos:line="133" pos:column="10"/></block></then></if>

	<if pos:line="135" pos:column="9">if <condition pos:line="135" pos:column="12">(<expr><operator pos:line="135" pos:column="13">!<pos:position pos:line="135" pos:column="14"/></operator><call><name pos:line="135" pos:column="14">strcmp<pos:position pos:line="135" pos:column="20"/></name><argument_list pos:line="135" pos:column="20">(<argument><expr><name pos:line="135" pos:column="21">var<pos:position pos:line="135" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="26">"core.deltabasecachelimit"<pos:position pos:line="135" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="135" pos:column="54"/></condition><then pos:line="135" pos:column="54"> <block pos:line="135" pos:column="55">{
		<expr_stmt><expr><name pos:line="136" pos:column="17">delta_base_cache_limit<pos:position pos:line="136" pos:column="39"/></name> <operator pos:line="136" pos:column="40">=<pos:position pos:line="136" pos:column="41"/></operator> <call><name pos:line="136" pos:column="42">git_config_ulong<pos:position pos:line="136" pos:column="58"/></name><argument_list pos:line="136" pos:column="58">(<argument><expr><name pos:line="136" pos:column="59">var<pos:position pos:line="136" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="64">value<pos:position pos:line="136" pos:column="69"/></name></expr></argument>)<pos:position pos:line="136" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="71"/></expr_stmt>
		<return pos:line="137" pos:column="17">return <expr><literal type="number" pos:line="137" pos:column="24">0<pos:position pos:line="137" pos:column="25"/></literal></expr>;<pos:position pos:line="137" pos:column="26"/></return>
	}<pos:position pos:line="138" pos:column="10"/></block></then></if>

	<if pos:line="140" pos:column="9">if <condition pos:line="140" pos:column="12">(<expr><operator pos:line="140" pos:column="13">!<pos:position pos:line="140" pos:column="14"/></operator><call><name pos:line="140" pos:column="14">strcmp<pos:position pos:line="140" pos:column="20"/></name><argument_list pos:line="140" pos:column="20">(<argument><expr><name pos:line="140" pos:column="21">var<pos:position pos:line="140" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="140" pos:column="26">"core.autocrlf"<pos:position pos:line="140" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="140" pos:column="43"/></condition><then pos:line="140" pos:column="43"> <block pos:line="140" pos:column="44">{
		<if pos:line="141" pos:column="17">if <condition pos:line="141" pos:column="20">(<expr><name pos:line="141" pos:column="21">value<pos:position pos:line="141" pos:column="26"/></name> <operator pos:line="141" pos:column="27">&amp;&amp;<pos:position pos:line="141" pos:column="37"/></operator> <operator pos:line="141" pos:column="30">!<pos:position pos:line="141" pos:column="31"/></operator><call><name pos:line="141" pos:column="31">strcasecmp<pos:position pos:line="141" pos:column="41"/></name><argument_list pos:line="141" pos:column="41">(<argument><expr><name pos:line="141" pos:column="42">value<pos:position pos:line="141" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="49">"input"<pos:position pos:line="141" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="141" pos:column="58"/></condition><then pos:line="141" pos:column="58"> <block pos:line="141" pos:column="59">{
			<expr_stmt><expr><name pos:line="142" pos:column="25">auto_crlf<pos:position pos:line="142" pos:column="34"/></name> <operator pos:line="142" pos:column="35">=<pos:position pos:line="142" pos:column="36"/></operator> <name pos:line="142" pos:column="37">AUTO_CRLF_INPUT<pos:position pos:line="142" pos:column="52"/></name></expr>;<pos:position pos:line="142" pos:column="53"/></expr_stmt>
			<return pos:line="143" pos:column="25">return <expr><literal type="number" pos:line="143" pos:column="32">0<pos:position pos:line="143" pos:column="33"/></literal></expr>;<pos:position pos:line="143" pos:column="34"/></return>
		}<pos:position pos:line="144" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="145" pos:column="17">auto_crlf<pos:position pos:line="145" pos:column="26"/></name> <operator pos:line="145" pos:column="27">=<pos:position pos:line="145" pos:column="28"/></operator> <call><name pos:line="145" pos:column="29">git_config_bool<pos:position pos:line="145" pos:column="44"/></name><argument_list pos:line="145" pos:column="44">(<argument><expr><name pos:line="145" pos:column="45">var<pos:position pos:line="145" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="50">value<pos:position pos:line="145" pos:column="55"/></name></expr></argument>)<pos:position pos:line="145" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="57"/></expr_stmt>
		<return pos:line="146" pos:column="17">return <expr><literal type="number" pos:line="146" pos:column="24">0<pos:position pos:line="146" pos:column="25"/></literal></expr>;<pos:position pos:line="146" pos:column="26"/></return>
	}<pos:position pos:line="147" pos:column="10"/></block></then></if>

	<if pos:line="149" pos:column="9">if <condition pos:line="149" pos:column="12">(<expr><operator pos:line="149" pos:column="13">!<pos:position pos:line="149" pos:column="14"/></operator><call><name pos:line="149" pos:column="14">strcmp<pos:position pos:line="149" pos:column="20"/></name><argument_list pos:line="149" pos:column="20">(<argument><expr><name pos:line="149" pos:column="21">var<pos:position pos:line="149" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="149" pos:column="26">"core.safecrlf"<pos:position pos:line="149" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="149" pos:column="43"/></condition><then pos:line="149" pos:column="43"> <block pos:line="149" pos:column="44">{
		<if pos:line="150" pos:column="17">if <condition pos:line="150" pos:column="20">(<expr><name pos:line="150" pos:column="21">value<pos:position pos:line="150" pos:column="26"/></name> <operator pos:line="150" pos:column="27">&amp;&amp;<pos:position pos:line="150" pos:column="37"/></operator> <operator pos:line="150" pos:column="30">!<pos:position pos:line="150" pos:column="31"/></operator><call><name pos:line="150" pos:column="31">strcasecmp<pos:position pos:line="150" pos:column="41"/></name><argument_list pos:line="150" pos:column="41">(<argument><expr><name pos:line="150" pos:column="42">value<pos:position pos:line="150" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="150" pos:column="49">"warn"<pos:position pos:line="150" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="150" pos:column="57"/></condition><then pos:line="150" pos:column="57"> <block pos:line="150" pos:column="58">{
			<expr_stmt><expr><name pos:line="151" pos:column="25">safe_crlf<pos:position pos:line="151" pos:column="34"/></name> <operator pos:line="151" pos:column="35">=<pos:position pos:line="151" pos:column="36"/></operator> <name pos:line="151" pos:column="37">SAFE_CRLF_WARN<pos:position pos:line="151" pos:column="51"/></name></expr>;<pos:position pos:line="151" pos:column="52"/></expr_stmt>
			<return pos:line="152" pos:column="25">return <expr><literal type="number" pos:line="152" pos:column="32">0<pos:position pos:line="152" pos:column="33"/></literal></expr>;<pos:position pos:line="152" pos:column="34"/></return>
		}<pos:position pos:line="153" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="154" pos:column="17">safe_crlf<pos:position pos:line="154" pos:column="26"/></name> <operator pos:line="154" pos:column="27">=<pos:position pos:line="154" pos:column="28"/></operator> <call><name pos:line="154" pos:column="29">git_config_bool<pos:position pos:line="154" pos:column="44"/></name><argument_list pos:line="154" pos:column="44">(<argument><expr><name pos:line="154" pos:column="45">var<pos:position pos:line="154" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="50">value<pos:position pos:line="154" pos:column="55"/></name></expr></argument>)<pos:position pos:line="154" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="57"/></expr_stmt>
		<return pos:line="155" pos:column="17">return <expr><literal type="number" pos:line="155" pos:column="24">0<pos:position pos:line="155" pos:column="25"/></literal></expr>;<pos:position pos:line="155" pos:column="26"/></return>
	}<pos:position pos:line="156" pos:column="10"/></block></then></if>

	<if pos:line="158" pos:column="9">if <condition pos:line="158" pos:column="12">(<expr><operator pos:line="158" pos:column="13">!<pos:position pos:line="158" pos:column="14"/></operator><call><name pos:line="158" pos:column="14">strcmp<pos:position pos:line="158" pos:column="20"/></name><argument_list pos:line="158" pos:column="20">(<argument><expr><name pos:line="158" pos:column="21">var<pos:position pos:line="158" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="158" pos:column="26">"core.eol"<pos:position pos:line="158" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="158" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="158" pos:column="38"/></condition><then pos:line="158" pos:column="38"> <block pos:line="158" pos:column="39">{
		<if pos:line="159" pos:column="17">if <condition pos:line="159" pos:column="20">(<expr><name pos:line="159" pos:column="21">value<pos:position pos:line="159" pos:column="26"/></name> <operator pos:line="159" pos:column="27">&amp;&amp;<pos:position pos:line="159" pos:column="37"/></operator> <operator pos:line="159" pos:column="30">!<pos:position pos:line="159" pos:column="31"/></operator><call><name pos:line="159" pos:column="31">strcasecmp<pos:position pos:line="159" pos:column="41"/></name><argument_list pos:line="159" pos:column="41">(<argument><expr><name pos:line="159" pos:column="42">value<pos:position pos:line="159" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="159" pos:column="49">"lf"<pos:position pos:line="159" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="159" pos:column="55"/></condition><then pos:line="159" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><name pos:line="160" pos:column="25">core_eol<pos:position pos:line="160" pos:column="33"/></name> <operator pos:line="160" pos:column="34">=<pos:position pos:line="160" pos:column="35"/></operator> <name pos:line="160" pos:column="36">EOL_LF<pos:position pos:line="160" pos:column="42"/></name></expr>;<pos:position pos:line="160" pos:column="43"/></expr_stmt></block></then></if></block></then></if></block></function></unit>
