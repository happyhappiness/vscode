<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2074_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">unpack_compressed_entry<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">packed_git<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">p<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
				    <parameter><decl><type><name><name pos:line="2" pos:column="37">struct<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">pack_window<pos:position pos:line="2" pos:column="55"/></name></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier><modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">w_curs<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
				    <parameter><decl><type><name pos:line="3" pos:column="37">off_t<pos:position pos:line="3" pos:column="42"/></name></type> <name pos:line="3" pos:column="43">curpos<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>,
				    <parameter><decl><type><name pos:line="4" pos:column="37">unsigned<pos:position pos:line="4" pos:column="45"/></name> <name pos:line="4" pos:column="46">long<pos:position pos:line="4" pos:column="50"/></name></type> <name pos:line="4" pos:column="51">size<pos:position pos:line="4" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="56"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">st<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">git_zstream<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">stream<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name> <name pos:line="8" pos:column="18">char<pos:position pos:line="8" pos:column="22"/></name> <modifier pos:line="8" pos:column="23">*<pos:position pos:line="8" pos:column="24"/></modifier></type><name pos:line="8" pos:column="24">buffer<pos:position pos:line="8" pos:column="30"/></name></decl>, <modifier pos:line="8" pos:column="32">*<pos:position pos:line="8" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="8" pos:column="33">in<pos:position pos:line="8" pos:column="35"/></name></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">buffer<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <call><name pos:line="10" pos:column="18">xmallocz_gently<pos:position pos:line="10" pos:column="33"/></name><argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">size<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">buffer<pos:position pos:line="11" pos:column="20"/></name></expr>)<pos:position pos:line="11" pos:column="21"/></condition><then pos:line="11" pos:column="21">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><name pos:line="12" pos:column="24">NULL<pos:position pos:line="12" pos:column="28"/></name></expr>;<pos:position pos:line="12" pos:column="29"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">memset<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><operator pos:line="13" pos:column="16">&amp;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="17">stream<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="25">0<pos:position pos:line="13" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="28">sizeof<argument_list pos:line="13" pos:column="34">(<argument><expr><name pos:line="13" pos:column="35">stream<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">stream<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">.<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">next_out<pos:position pos:line="14" pos:column="24"/></name></name> <operator pos:line="14" pos:column="25">=<pos:position pos:line="14" pos:column="26"/></operator> <name pos:line="14" pos:column="27">buffer<pos:position pos:line="14" pos:column="33"/></name></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">stream<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">.<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">avail_out<pos:position pos:line="15" pos:column="25"/></name></name> <operator pos:line="15" pos:column="26">=<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="28">size<pos:position pos:line="15" pos:column="32"/></name> <operator pos:line="15" pos:column="33">+<pos:position pos:line="15" pos:column="34"/></operator> <literal type="number" pos:line="15" pos:column="35">1<pos:position pos:line="15" pos:column="36"/></literal></expr>;<pos:position pos:line="15" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">git_inflate_init<pos:position pos:line="17" pos:column="25"/></name><argument_list pos:line="17" pos:column="25">(<argument><expr><operator pos:line="17" pos:column="26">&amp;<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="27">stream<pos:position pos:line="17" pos:column="33"/></name></expr></argument>)<pos:position pos:line="17" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
	<do pos:line="18" pos:column="9">do <block pos:line="18" pos:column="12">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">in<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <call><name pos:line="19" pos:column="22">use_pack<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">p<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="34">w_curs<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="42">curpos<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="50">&amp;<pos:position pos:line="19" pos:column="55"/></operator><name><name pos:line="19" pos:column="51">stream<pos:position pos:line="19" pos:column="57"/></name><operator pos:line="19" pos:column="57">.<pos:position pos:line="19" pos:column="58"/></operator><name pos:line="19" pos:column="58">avail_in<pos:position pos:line="19" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="20" pos:column="17">stream<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">.<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="24">next_in<pos:position pos:line="20" pos:column="31"/></name></name> <operator pos:line="20" pos:column="32">=<pos:position pos:line="20" pos:column="33"/></operator> <name pos:line="20" pos:column="34">in<pos:position pos:line="20" pos:column="36"/></name></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="21" pos:column="17">st<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <call><name pos:line="21" pos:column="22">git_inflate<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><operator pos:line="21" pos:column="34">&amp;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="35">stream<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="43">Z_FINISH<pos:position pos:line="21" pos:column="51"/></name></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><name><name pos:line="22" pos:column="22">stream<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">.<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="29">avail_out<pos:position pos:line="22" pos:column="38"/></name></name></expr>)<pos:position pos:line="22" pos:column="39"/></condition><then pos:line="22" pos:column="39">
			<block type="pseudo"><break pos:line="23" pos:column="25">break;<pos:position pos:line="23" pos:column="31"/></break></block></then></if> <comment type="block" pos:line="23" pos:column="32">/* the payload is larger than it should be */</comment>
		<expr_stmt><expr><name pos:line="24" pos:column="17">curpos<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">+=<pos:position pos:line="24" pos:column="26"/></operator> <name><name pos:line="24" pos:column="27">stream<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">.<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="34">next_in<pos:position pos:line="24" pos:column="41"/></name></name> <operator pos:line="24" pos:column="42">-<pos:position pos:line="24" pos:column="43"/></operator> <name pos:line="24" pos:column="44">in<pos:position pos:line="24" pos:column="46"/></name></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block> while <condition pos:line="25" pos:column="17">(<expr><name pos:line="25" pos:column="18">st<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">==<pos:position pos:line="25" pos:column="23"/></operator> <name pos:line="25" pos:column="24">Z_OK<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">||<pos:position pos:line="25" pos:column="31"/></operator> <name pos:line="25" pos:column="32">st<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">==<pos:position pos:line="25" pos:column="37"/></operator> <name pos:line="25" pos:column="38">Z_BUF_ERROR<pos:position pos:line="25" pos:column="49"/></name></expr>)<pos:position pos:line="25" pos:column="50"/></condition>;<pos:position pos:line="25" pos:column="51"/></do>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">git_inflate_end<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><operator pos:line="26" pos:column="25">&amp;<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="26">stream<pos:position pos:line="26" pos:column="32"/></name></expr></argument>)<pos:position pos:line="26" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">(<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">st<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">!=<pos:position pos:line="27" pos:column="19"/></operator> <name pos:line="27" pos:column="20">Z_STREAM_END<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">)<pos:position pos:line="27" pos:column="33"/></operator> <operator pos:line="27" pos:column="34">||<pos:position pos:line="27" pos:column="36"/></operator> <name><name pos:line="27" pos:column="37">stream<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">.<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="44">total_out<pos:position pos:line="27" pos:column="53"/></name></name> <operator pos:line="27" pos:column="54">!=<pos:position pos:line="27" pos:column="56"/></operator> <name pos:line="27" pos:column="57">size<pos:position pos:line="27" pos:column="61"/></name></expr>)<pos:position pos:line="27" pos:column="62"/></condition><then pos:line="27" pos:column="62"> <block pos:line="27" pos:column="63">{
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">free<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">buffer<pos:position pos:line="28" pos:column="28"/></name></expr></argument>)<pos:position pos:line="28" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="30"/></expr_stmt>
		<return pos:line="29" pos:column="17">return <expr><name pos:line="29" pos:column="24">NULL<pos:position pos:line="29" pos:column="28"/></name></expr>;<pos:position pos:line="29" pos:column="29"/></return>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>

	<return pos:line="32" pos:column="9">return <expr><name pos:line="32" pos:column="16">buffer<pos:position pos:line="32" pos:column="22"/></name></expr>;<pos:position pos:line="32" pos:column="23"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
