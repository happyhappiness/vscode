<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2301_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">index_mem<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">unsigned<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">sha1<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">void<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">buf<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">size_t<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">size<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
		     <parameter><decl><type><name><name pos:line="2" pos:column="22">enum<pos:position pos:line="2" pos:column="26"/></name> <name pos:line="2" pos:column="27">object_type<pos:position pos:line="2" pos:column="38"/></name></name></type> <name pos:line="2" pos:column="39">type<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>,
		     <parameter><decl><type><specifier pos:line="3" pos:column="22">const<pos:position pos:line="3" pos:column="27"/></specifier> <name pos:line="3" pos:column="28">char<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">path<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="40">unsigned<pos:position pos:line="3" pos:column="48"/></name></type> <name pos:line="3" pos:column="49">flags<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="55"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">ret<pos:position pos:line="5" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="18">re_allocated<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><literal type="number" pos:line="5" pos:column="33">0<pos:position pos:line="5" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">write_object<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name pos:line="6" pos:column="28">flags<pos:position pos:line="6" pos:column="33"/></name> <operator pos:line="6" pos:column="34">&amp;<pos:position pos:line="6" pos:column="39"/></operator> <name pos:line="6" pos:column="36">HASH_WRITE_OBJECT<pos:position pos:line="6" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="54"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">type<pos:position pos:line="8" pos:column="18"/></name></expr>)<pos:position pos:line="8" pos:column="19"/></condition><then pos:line="8" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">type<pos:position pos:line="9" pos:column="21"/></name> <operator pos:line="9" pos:column="22">=<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="24">OBJ_BLOB<pos:position pos:line="9" pos:column="32"/></name></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="11" pos:column="9">/*
	 * Convert blobs to git internal format
	 */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">(<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">type<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">==<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">OBJ_BLOB<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">)<pos:position pos:line="14" pos:column="31"/></operator> <operator pos:line="14" pos:column="32">&amp;&amp;<pos:position pos:line="14" pos:column="42"/></operator> <name pos:line="14" pos:column="35">path<pos:position pos:line="14" pos:column="39"/></name></expr>)<pos:position pos:line="14" pos:column="40"/></condition><then pos:line="14" pos:column="40"> <block pos:line="14" pos:column="41">{
		<decl_stmt><decl><type><name><name pos:line="15" pos:column="17">struct<pos:position pos:line="15" pos:column="23"/></name> <name pos:line="15" pos:column="24">strbuf<pos:position pos:line="15" pos:column="30"/></name></name></type> <name pos:line="15" pos:column="31">nbuf<pos:position pos:line="15" pos:column="35"/></name> <init pos:line="15" pos:column="36">= <expr><name pos:line="15" pos:column="38">STRBUF_INIT<pos:position pos:line="15" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="50"/></decl_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">convert_to_git<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><operator pos:line="16" pos:column="36">&amp;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="37">the_index<pos:position pos:line="16" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="48">path<pos:position pos:line="16" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="54">buf<pos:position pos:line="16" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="59">size<pos:position pos:line="16" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="65">&amp;<pos:position pos:line="16" pos:column="70"/></operator><name pos:line="16" pos:column="66">nbuf<pos:position pos:line="16" pos:column="70"/></name></expr></argument>,
				   <argument><expr><ternary><condition><expr><name pos:line="17" pos:column="36">write_object<pos:position pos:line="17" pos:column="48"/></name></expr> ?<pos:position pos:line="17" pos:column="50"/></condition><then pos:line="17" pos:column="50"> <expr><name pos:line="17" pos:column="51">safe_crlf<pos:position pos:line="17" pos:column="60"/></name></expr> <pos:position pos:line="17" pos:column="61"/></then><else pos:line="17" pos:column="61">: <expr><name pos:line="17" pos:column="63">SAFE_CRLF_FALSE<pos:position pos:line="17" pos:column="78"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="17" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="80"/></condition><then pos:line="17" pos:column="80"> <block pos:line="17" pos:column="81">{
			<expr_stmt><expr><name pos:line="18" pos:column="25">buf<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">=<pos:position pos:line="18" pos:column="30"/></operator> <call><name pos:line="18" pos:column="31">strbuf_detach<pos:position pos:line="18" pos:column="44"/></name><argument_list pos:line="18" pos:column="44">(<argument><expr><operator pos:line="18" pos:column="45">&amp;<pos:position pos:line="18" pos:column="50"/></operator><name pos:line="18" pos:column="46">nbuf<pos:position pos:line="18" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="52">&amp;<pos:position pos:line="18" pos:column="57"/></operator><name pos:line="18" pos:column="53">size<pos:position pos:line="18" pos:column="57"/></name></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><name pos:line="19" pos:column="25">re_allocated<pos:position pos:line="19" pos:column="37"/></name> <operator pos:line="19" pos:column="38">=<pos:position pos:line="19" pos:column="39"/></operator> <literal type="number" pos:line="19" pos:column="40">1<pos:position pos:line="19" pos:column="41"/></literal></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">flags<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">&amp;<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="21">HASH_FORMAT_CHECK<pos:position pos:line="22" pos:column="38"/></name></expr>)<pos:position pos:line="22" pos:column="39"/></condition><then pos:line="22" pos:column="39"> <block pos:line="22" pos:column="40">{
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">type<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">==<pos:position pos:line="23" pos:column="28"/></operator> <name pos:line="23" pos:column="29">OBJ_TREE<pos:position pos:line="23" pos:column="37"/></name></expr>)<pos:position pos:line="23" pos:column="38"/></condition><then pos:line="23" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="25">check_tree<pos:position pos:line="24" pos:column="35"/></name><argument_list pos:line="24" pos:column="35">(<argument><expr><name pos:line="24" pos:column="36">buf<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">size<pos:position pos:line="24" pos:column="45"/></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt></block></then></if>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">type<pos:position pos:line="25" pos:column="25"/></name> <operator pos:line="25" pos:column="26">==<pos:position pos:line="25" pos:column="28"/></operator> <name pos:line="25" pos:column="29">OBJ_COMMIT<pos:position pos:line="25" pos:column="39"/></name></expr>)<pos:position pos:line="25" pos:column="40"/></condition><then pos:line="25" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="25">check_commit<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><name pos:line="26" pos:column="38">buf<pos:position pos:line="26" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="43">size<pos:position pos:line="26" pos:column="47"/></name></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">type<pos:position pos:line="27" pos:column="25"/></name> <operator pos:line="27" pos:column="26">==<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="29">OBJ_TAG<pos:position pos:line="27" pos:column="36"/></name></expr>)<pos:position pos:line="27" pos:column="37"/></condition><then pos:line="27" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">check_tag<pos:position pos:line="28" pos:column="34"/></name><argument_list pos:line="28" pos:column="34">(<argument><expr><name pos:line="28" pos:column="35">buf<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">size<pos:position pos:line="28" pos:column="44"/></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt></block></then></if>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">write_object<pos:position pos:line="31" pos:column="25"/></name></expr>)<pos:position pos:line="31" pos:column="26"/></condition><then pos:line="31" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="17">ret<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <call><name pos:line="32" pos:column="23">write_sha1_file<pos:position pos:line="32" pos:column="38"/></name><argument_list pos:line="32" pos:column="38">(<argument><expr><name pos:line="32" pos:column="39">buf<pos:position pos:line="32" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="44">size<pos:position pos:line="32" pos:column="48"/></name></expr></argument>, <argument><expr><name><typename pos:line="32" pos:column="50">typename<pos:position pos:line="32" pos:column="58"/></typename></name><operator pos:line="32" pos:column="58">(<pos:position pos:line="32" pos:column="59"/></operator><name pos:line="32" pos:column="59">type<pos:position pos:line="32" pos:column="63"/></name><operator pos:line="32" pos:column="63">)<pos:position pos:line="32" pos:column="64"/></operator></expr></argument>, <argument><expr><name pos:line="32" pos:column="66">sha1<pos:position pos:line="32" pos:column="70"/></name></expr></argument>)<pos:position pos:line="32" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="72"/></expr_stmt></block></then>
	<else pos:line="33" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="17">ret<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <call><name pos:line="34" pos:column="23">hash_sha1_file<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">buf<pos:position pos:line="34" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="43">size<pos:position pos:line="34" pos:column="47"/></name></expr></argument>, <argument><expr><name><typename pos:line="34" pos:column="49">typename<pos:position pos:line="34" pos:column="57"/></typename></name><operator pos:line="34" pos:column="57">(<pos:position pos:line="34" pos:column="58"/></operator><name pos:line="34" pos:column="58">type<pos:position pos:line="34" pos:column="62"/></name><operator pos:line="34" pos:column="62">)<pos:position pos:line="34" pos:column="63"/></operator></expr></argument>, <argument><expr><name pos:line="34" pos:column="65">sha1<pos:position pos:line="34" pos:column="69"/></name></expr></argument>)<pos:position pos:line="34" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="71"/></expr_stmt></block></else></if>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">re_allocated<pos:position pos:line="35" pos:column="25"/></name></expr>)<pos:position pos:line="35" pos:column="26"/></condition><then pos:line="35" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="17">free<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">(<argument><expr><name pos:line="36" pos:column="22">buf<pos:position pos:line="36" pos:column="25"/></name></expr></argument>)<pos:position pos:line="36" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt></block></then></if>
	<return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">ret<pos:position pos:line="37" pos:column="19"/></name></expr>;<pos:position pos:line="37" pos:column="20"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
