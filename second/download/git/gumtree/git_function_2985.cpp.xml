<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2985.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">index_path<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">unsigned<pos:position pos:line="1" pos:column="24"/></name> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">sha1<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">path<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="55">struct<pos:position pos:line="1" pos:column="61"/></name> <name pos:line="1" pos:column="62">stat<pos:position pos:line="1" pos:column="66"/></name></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">st<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="72">unsigned<pos:position pos:line="1" pos:column="80"/></name></type> <name pos:line="1" pos:column="81">flags<pos:position pos:line="1" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="87"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">sb<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">STRBUF_INIT<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>

	<switch pos:line="6" pos:column="9">switch <condition pos:line="6" pos:column="16">(<expr><name><name pos:line="6" pos:column="17">st<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">-&gt;<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="21">st_mode<pos:position pos:line="6" pos:column="28"/></name></name> <operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator> <name pos:line="6" pos:column="31">S_IFMT<pos:position pos:line="6" pos:column="37"/></name></expr>)<pos:position pos:line="6" pos:column="38"/></condition> <block pos:line="6" pos:column="39">{
	<case pos:line="7" pos:column="9">case <expr><name pos:line="7" pos:column="14">S_IFREG<pos:position pos:line="7" pos:column="21"/></name></expr>:<pos:position pos:line="7" pos:column="22"/></case>
		<expr_stmt><expr><name pos:line="8" pos:column="17">fd<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">=<pos:position pos:line="8" pos:column="21"/></operator> <call><name pos:line="8" pos:column="22">open<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">path<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="33">O_RDONLY<pos:position pos:line="8" pos:column="41"/></name></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="43"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">fd<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">&lt;<pos:position pos:line="9" pos:column="28"/></operator> <literal type="number" pos:line="9" pos:column="26">0<pos:position pos:line="9" pos:column="27"/></literal></expr>)<pos:position pos:line="9" pos:column="28"/></condition><then pos:line="9" pos:column="28">
			<block type="pseudo"><return pos:line="10" pos:column="25">return <expr><call><name pos:line="10" pos:column="32">error<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><literal type="string" pos:line="10" pos:column="38">"open(\"%s\"): %s"<pos:position pos:line="10" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="58">path<pos:position pos:line="10" pos:column="62"/></name></expr></argument>,
				     <argument><expr><call><name pos:line="11" pos:column="38">strerror<pos:position pos:line="11" pos:column="46"/></name><argument_list pos:line="11" pos:column="46">(<argument><expr><name pos:line="11" pos:column="47">errno<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="55"/></return></block></then></if>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">index_fd<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><name pos:line="12" pos:column="30">sha1<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="36">fd<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="40">st<pos:position pos:line="12" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="44">OBJ_BLOB<pos:position pos:line="12" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="54">path<pos:position pos:line="12" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="60">flags<pos:position pos:line="12" pos:column="65"/></name></expr></argument>)<pos:position pos:line="12" pos:column="66"/></argument_list></call> <operator pos:line="12" pos:column="67">&lt;<pos:position pos:line="12" pos:column="71"/></operator> <literal type="number" pos:line="12" pos:column="69">0<pos:position pos:line="12" pos:column="70"/></literal></expr>)<pos:position pos:line="12" pos:column="71"/></condition><then pos:line="12" pos:column="71">
			<block type="pseudo"><return pos:line="13" pos:column="25">return <expr><call><name pos:line="13" pos:column="32">error<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><literal type="string" pos:line="13" pos:column="38">"%s: failed to insert into database"<pos:position pos:line="13" pos:column="74"/></literal></expr></argument>,
				     <argument><expr><name pos:line="14" pos:column="38">path<pos:position pos:line="14" pos:column="42"/></name></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="44"/></return></block></then></if>
		<break pos:line="15" pos:column="17">break;<pos:position pos:line="15" pos:column="23"/></break>
	<case pos:line="16" pos:column="9">case <expr><name pos:line="16" pos:column="14">S_IFLNK<pos:position pos:line="16" pos:column="21"/></name></expr>:<pos:position pos:line="16" pos:column="22"/></case>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><call><name pos:line="17" pos:column="21">strbuf_readlink<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><operator pos:line="17" pos:column="37">&amp;<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="38">sb<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="42">path<pos:position pos:line="17" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="48">st<pos:position pos:line="17" pos:column="50"/></name><operator pos:line="17" pos:column="50">-&gt;<pos:position pos:line="17" pos:column="55"/></operator><name pos:line="17" pos:column="52">st_size<pos:position pos:line="17" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="61"/></condition><then pos:line="17" pos:column="61"> <block pos:line="17" pos:column="62">{
			<decl_stmt><decl><type><name pos:line="18" pos:column="25">char<pos:position pos:line="18" pos:column="29"/></name> <modifier pos:line="18" pos:column="30">*<pos:position pos:line="18" pos:column="31"/></modifier></type><name pos:line="18" pos:column="31">errstr<pos:position pos:line="18" pos:column="37"/></name> <init pos:line="18" pos:column="38">= <expr><call><name pos:line="18" pos:column="40">strerror<pos:position pos:line="18" pos:column="48"/></name><argument_list pos:line="18" pos:column="48">(<argument><expr><name pos:line="18" pos:column="49">errno<pos:position pos:line="18" pos:column="54"/></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="56"/></decl_stmt>
			<return pos:line="19" pos:column="25">return <expr><call><name pos:line="19" pos:column="32">error<pos:position pos:line="19" pos:column="37"/></name><argument_list pos:line="19" pos:column="37">(<argument><expr><literal type="string" pos:line="19" pos:column="38">"readlink(\"%s\"): %s"<pos:position pos:line="19" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="62">path<pos:position pos:line="19" pos:column="66"/></name></expr></argument>,
			             <argument><expr><name pos:line="20" pos:column="38">errstr<pos:position pos:line="20" pos:column="44"/></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="46"/></return>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><operator pos:line="22" pos:column="22">(<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">flags<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">&amp;<pos:position pos:line="22" pos:column="34"/></operator> <name pos:line="22" pos:column="31">HASH_WRITE_OBJECT<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">)<pos:position pos:line="22" pos:column="49"/></operator></expr>)<pos:position pos:line="22" pos:column="50"/></condition><then pos:line="22" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">hash_sha1_file<pos:position pos:line="23" pos:column="39"/></name><argument_list pos:line="23" pos:column="39">(<argument><expr><name><name pos:line="23" pos:column="40">sb<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">.<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="43">buf<pos:position pos:line="23" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="48">sb<pos:position pos:line="23" pos:column="50"/></name><operator pos:line="23" pos:column="50">.<pos:position pos:line="23" pos:column="51"/></operator><name pos:line="23" pos:column="51">len<pos:position pos:line="23" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="56">blob_type<pos:position pos:line="23" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="67">sha1<pos:position pos:line="23" pos:column="71"/></name></expr></argument>)<pos:position pos:line="23" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="73"/></expr_stmt></block></then>
		<elseif pos:line="24" pos:column="17">else <if pos:line="24" pos:column="22">if <condition pos:line="24" pos:column="25">(<expr><call><name pos:line="24" pos:column="26">write_sha1_file<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">(<argument><expr><name><name pos:line="24" pos:column="42">sb<pos:position pos:line="24" pos:column="44"/></name><operator pos:line="24" pos:column="44">.<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="45">buf<pos:position pos:line="24" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="50">sb<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">.<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="53">len<pos:position pos:line="24" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="58">blob_type<pos:position pos:line="24" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="69">sha1<pos:position pos:line="24" pos:column="73"/></name></expr></argument>)<pos:position pos:line="24" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="75"/></condition><then pos:line="24" pos:column="75">
			<block type="pseudo"><return pos:line="25" pos:column="25">return <expr><call><name pos:line="25" pos:column="32">error<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">(<argument><expr><literal type="string" pos:line="25" pos:column="38">"%s: failed to insert into database"<pos:position pos:line="25" pos:column="74"/></literal></expr></argument>,
				     <argument><expr><name pos:line="26" pos:column="38">path<pos:position pos:line="26" pos:column="42"/></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></return></block></then></if></elseif></if>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">strbuf_release<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><operator pos:line="27" pos:column="32">&amp;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="33">sb<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
		<break pos:line="28" pos:column="17">break;<pos:position pos:line="28" pos:column="23"/></break>
	<case pos:line="29" pos:column="9">case <expr><name pos:line="29" pos:column="14">S_IFDIR<pos:position pos:line="29" pos:column="21"/></name></expr>:<pos:position pos:line="29" pos:column="22"/></case>
		<return pos:line="30" pos:column="17">return <expr><call><name pos:line="30" pos:column="24">resolve_gitlink_ref<pos:position pos:line="30" pos:column="43"/></name><argument_list pos:line="30" pos:column="43">(<argument><expr><name pos:line="30" pos:column="44">path<pos:position pos:line="30" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="50">"HEAD"<pos:position pos:line="30" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="58">sha1<pos:position pos:line="30" pos:column="62"/></name></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="64"/></return>
	<default pos:line="31" pos:column="9">default:<pos:position pos:line="31" pos:column="17"/></default>
		<return pos:line="32" pos:column="17">return <expr><call><name pos:line="32" pos:column="24">error<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><literal type="string" pos:line="32" pos:column="30">"%s: unsupported file type"<pos:position pos:line="32" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="59">path<pos:position pos:line="32" pos:column="63"/></name></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="65"/></return>
	}<pos:position pos:line="33" pos:column="10"/></block></switch>
	<return pos:line="34" pos:column="9">return <expr><literal type="number" pos:line="34" pos:column="16">0<pos:position pos:line="34" pos:column="17"/></literal></expr>;<pos:position pos:line="34" pos:column="18"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
