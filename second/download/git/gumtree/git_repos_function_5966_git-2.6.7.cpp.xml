<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5966_git-2.6.7.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">link<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><specifier pos:line="1" pos:column="10">const<pos:position pos:line="1" pos:column="15"/></specifier> <name pos:line="1" pos:column="16">char<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type><name pos:line="1" pos:column="22">oldpath<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">newpath<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<typedef pos:line="3" pos:column="9">typedef <function_decl><type><name pos:line="3" pos:column="17">BOOL<pos:position pos:line="3" pos:column="21"/></name></type> (<name pos:line="3" pos:column="23">WINAPI<pos:position pos:line="3" pos:column="29"/></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier><name pos:line="3" pos:column="31">T<pos:position pos:line="3" pos:column="32"/></name>)<parameter_list pos:line="3" pos:column="33">(<parameter><decl><type><name pos:line="3" pos:column="34">LPCWSTR<pos:position pos:line="3" pos:column="41"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="43">LPCWSTR<pos:position pos:line="3" pos:column="50"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="52">LPSECURITY_ATTRIBUTES<pos:position pos:line="3" pos:column="73"/></name></type></decl></parameter>)<pos:position pos:line="3" pos:column="74"/></parameter_list>;<pos:position pos:line="3" pos:column="75"/></function_decl></typedef>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">T<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">create_hard_link<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><name pos:line="4" pos:column="37">NULL<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">wchar_t<pos:position pos:line="5" pos:column="16"/></name></type> <name><name pos:line="5" pos:column="17">woldpath<pos:position pos:line="5" pos:column="25"/></name><index pos:line="5" pos:column="25">[<expr><name pos:line="5" pos:column="26">MAX_PATH<pos:position pos:line="5" pos:column="34"/></name></expr>]<pos:position pos:line="5" pos:column="35"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="5" pos:column="37">wnewpath<pos:position pos:line="5" pos:column="45"/></name><index pos:line="5" pos:column="45">[<expr><name pos:line="5" pos:column="46">MAX_PATH<pos:position pos:line="5" pos:column="54"/></name></expr>]<pos:position pos:line="5" pos:column="55"/></index></name></decl>;<pos:position pos:line="5" pos:column="56"/></decl_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">xutftowcs_path<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">(<argument><expr><name pos:line="6" pos:column="28">woldpath<pos:position pos:line="6" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="38">oldpath<pos:position pos:line="6" pos:column="45"/></name></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></call> <operator pos:line="6" pos:column="47">&lt;<pos:position pos:line="6" pos:column="51"/></operator> <literal type="number" pos:line="6" pos:column="49">0<pos:position pos:line="6" pos:column="50"/></literal> <operator pos:line="6" pos:column="51">||<pos:position pos:line="6" pos:column="53"/></operator>
		<call><name pos:line="7" pos:column="17">xutftowcs_path<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><name pos:line="7" pos:column="32">wnewpath<pos:position pos:line="7" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="42">newpath<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call> <operator pos:line="7" pos:column="51">&lt;<pos:position pos:line="7" pos:column="55"/></operator> <literal type="number" pos:line="7" pos:column="53">0<pos:position pos:line="7" pos:column="54"/></literal></expr>)<pos:position pos:line="7" pos:column="55"/></condition><then pos:line="7" pos:column="55">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><operator pos:line="8" pos:column="24">-<pos:position pos:line="8" pos:column="25"/></operator><literal type="number" pos:line="8" pos:column="25">1<pos:position pos:line="8" pos:column="26"/></literal></expr>;<pos:position pos:line="8" pos:column="27"/></return></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">create_hard_link<pos:position pos:line="10" pos:column="30"/></name></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31"> <block pos:line="10" pos:column="32">{
		<expr_stmt><expr><name pos:line="11" pos:column="17">create_hard_link<pos:position pos:line="11" pos:column="33"/></name> <operator pos:line="11" pos:column="34">=<pos:position pos:line="11" pos:column="35"/></operator> <operator pos:line="11" pos:column="36">(<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">T<pos:position pos:line="11" pos:column="38"/></name><operator pos:line="11" pos:column="38">)<pos:position pos:line="11" pos:column="39"/></operator> <call><name pos:line="11" pos:column="40">GetProcAddress<pos:position pos:line="11" pos:column="54"/></name><argument_list pos:line="11" pos:column="54">(
			<argument><expr><call><name pos:line="12" pos:column="25">GetModuleHandle<pos:position pos:line="12" pos:column="40"/></name><argument_list pos:line="12" pos:column="40">(<argument><expr><literal type="string" pos:line="12" pos:column="41">"kernel32.dll"<pos:position pos:line="12" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="58">"CreateHardLinkW"<pos:position pos:line="12" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="77"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">create_hard_link<pos:position pos:line="13" pos:column="38"/></name></expr>)<pos:position pos:line="13" pos:column="39"/></condition><then pos:line="13" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="25">create_hard_link<pos:position pos:line="14" pos:column="41"/></name> <operator pos:line="14" pos:column="42">=<pos:position pos:line="14" pos:column="43"/></operator> <operator pos:line="14" pos:column="44">(<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="45">T<pos:position pos:line="14" pos:column="46"/></name><operator pos:line="14" pos:column="46">)<pos:position pos:line="14" pos:column="47"/></operator><operator pos:line="14" pos:column="47">-<pos:position pos:line="14" pos:column="48"/></operator><literal type="number" pos:line="14" pos:column="48">1<pos:position pos:line="14" pos:column="49"/></literal></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt></block></then></if>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">create_hard_link<pos:position pos:line="16" pos:column="29"/></name> <operator pos:line="16" pos:column="30">==<pos:position pos:line="16" pos:column="32"/></operator> <operator pos:line="16" pos:column="33">(<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="34">T<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">)<pos:position pos:line="16" pos:column="36"/></operator><operator pos:line="16" pos:column="36">-<pos:position pos:line="16" pos:column="37"/></operator><literal type="number" pos:line="16" pos:column="37">1<pos:position pos:line="16" pos:column="38"/></literal></expr>)<pos:position pos:line="16" pos:column="39"/></condition><then pos:line="16" pos:column="39"> <block pos:line="16" pos:column="40">{
		<expr_stmt><expr><name pos:line="17" pos:column="17">errno<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">ENOSYS<pos:position pos:line="17" pos:column="31"/></name></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><operator pos:line="18" pos:column="24">-<pos:position pos:line="18" pos:column="25"/></operator><literal type="number" pos:line="18" pos:column="25">1<pos:position pos:line="18" pos:column="26"/></literal></expr>;<pos:position pos:line="18" pos:column="27"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><call><name pos:line="20" pos:column="14">create_hard_link<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">wnewpath<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="41">woldpath<pos:position pos:line="20" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="51">NULL<pos:position pos:line="20" pos:column="55"/></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="57"/></condition><then pos:line="20" pos:column="57"> <block pos:line="20" pos:column="58">{
		<expr_stmt><expr><name pos:line="21" pos:column="17">errno<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <call><name pos:line="21" pos:column="25">err_win_to_posix<pos:position pos:line="21" pos:column="41"/></name><argument_list pos:line="21" pos:column="41">(<argument><expr><call><name pos:line="21" pos:column="42">GetLastError<pos:position pos:line="21" pos:column="54"/></name><argument_list pos:line="21" pos:column="54">()<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="58"/></expr_stmt>
		<return pos:line="22" pos:column="17">return <expr><operator pos:line="22" pos:column="24">-<pos:position pos:line="22" pos:column="25"/></operator><literal type="number" pos:line="22" pos:column="25">1<pos:position pos:line="22" pos:column="26"/></literal></expr>;<pos:position pos:line="22" pos:column="27"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>
	<return pos:line="24" pos:column="9">return <expr><literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
