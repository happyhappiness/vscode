<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_978_git-2.14.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">prepare_cmd<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">argv_array<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">out<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name><name pos:line="1" pos:column="55">struct<pos:position pos:line="1" pos:column="61"/></name> <name pos:line="1" pos:column="62">child_process<pos:position pos:line="1" pos:column="75"/></name></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">cmd<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><name><name pos:line="3" pos:column="14">cmd<pos:position pos:line="3" pos:column="17"/></name><operator pos:line="3" pos:column="17">-&gt;<pos:position pos:line="3" pos:column="22"/></operator><name pos:line="3" pos:column="19">argv<pos:position pos:line="3" pos:column="23"/></name><index pos:line="3" pos:column="23">[<expr><literal type="number" pos:line="3" pos:column="24">0<pos:position pos:line="3" pos:column="25"/></literal></expr>]<pos:position pos:line="3" pos:column="26"/></index></name></expr>)<pos:position pos:line="3" pos:column="27"/></condition><then pos:line="3" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="4" pos:column="17">die<pos:position pos:line="4" pos:column="20"/></name><argument_list pos:line="4" pos:column="20">(<argument><expr><literal type="string" pos:line="4" pos:column="21">"BUG: command is empty"<pos:position pos:line="4" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="46"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * Add SHELL_PATH so in the event exec fails with ENOEXEC we can
	 * attempt to interpret the command with 'sh'.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">argv_array_push<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">out<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">SHELL_PATH<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">cmd<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">git_cmd<pos:position pos:line="12" pos:column="25"/></name></name></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26"> <block pos:line="12" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">argv_array_push<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">out<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="38">"git"<pos:position pos:line="13" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">argv_array_pushv<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">out<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="39">cmd<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">-&gt;<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="44">argv<pos:position pos:line="14" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then> <elseif pos:line="15" pos:column="11">else <if pos:line="15" pos:column="16">if <condition pos:line="15" pos:column="19">(<expr><name><name pos:line="15" pos:column="20">cmd<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">-&gt;<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="25">use_shell<pos:position pos:line="15" pos:column="34"/></name></name></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35"> <block pos:line="15" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">prepare_shell_cmd<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">out<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="40">cmd<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">-&gt;<pos:position pos:line="16" pos:column="48"/></operator><name pos:line="16" pos:column="45">argv<pos:position pos:line="16" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if></elseif> <else pos:line="17" pos:column="11">else <block pos:line="17" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">argv_array_pushv<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">out<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="39">cmd<pos:position pos:line="18" pos:column="42"/></name><operator pos:line="18" pos:column="42">-&gt;<pos:position pos:line="18" pos:column="47"/></operator><name pos:line="18" pos:column="44">argv<pos:position pos:line="18" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="21" pos:column="9">/*
	 * If there are no '/' characters in the command then perform a path
	 * lookup and use the resolved path as the command to exec.  If there
	 * are no '/' characters or if the command wasn't found in the path,
	 * have exec attempt to invoke the command directly.
	 */</comment>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><call><name pos:line="27" pos:column="14">strchr<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name><name pos:line="27" pos:column="21">out<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">-&gt;<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="26">argv<pos:position pos:line="27" pos:column="30"/></name><index pos:line="27" pos:column="30">[<expr><literal type="number" pos:line="27" pos:column="31">1<pos:position pos:line="27" pos:column="32"/></literal></expr>]<pos:position pos:line="27" pos:column="33"/></index></name></expr></argument>, <argument><expr><literal type="char" pos:line="27" pos:column="35">'/'<pos:position pos:line="27" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="40"/></condition><then pos:line="27" pos:column="40"> <block pos:line="27" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">char<pos:position pos:line="28" pos:column="21"/></name> <modifier pos:line="28" pos:column="22">*<pos:position pos:line="28" pos:column="23"/></modifier></type><name pos:line="28" pos:column="23">program<pos:position pos:line="28" pos:column="30"/></name> <init pos:line="28" pos:column="31">= <expr><call><name pos:line="28" pos:column="33">locate_in_PATH<pos:position pos:line="28" pos:column="47"/></name><argument_list pos:line="28" pos:column="47">(<argument><expr><name><name pos:line="28" pos:column="48">out<pos:position pos:line="28" pos:column="51"/></name><operator pos:line="28" pos:column="51">-&gt;<pos:position pos:line="28" pos:column="56"/></operator><name pos:line="28" pos:column="53">argv<pos:position pos:line="28" pos:column="57"/></name><index pos:line="28" pos:column="57">[<expr><literal type="number" pos:line="28" pos:column="58">1<pos:position pos:line="28" pos:column="59"/></literal></expr>]<pos:position pos:line="28" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="62"/></decl_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">program<pos:position pos:line="29" pos:column="28"/></name></expr>)<pos:position pos:line="29" pos:column="29"/></condition><then pos:line="29" pos:column="29"> <block pos:line="29" pos:column="30">{
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">free<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><operator pos:line="30" pos:column="30">(<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="31">char<pos:position pos:line="30" pos:column="35"/></name> <operator pos:line="30" pos:column="36">*<pos:position pos:line="30" pos:column="37"/></operator><operator pos:line="30" pos:column="37">)<pos:position pos:line="30" pos:column="38"/></operator><name><name pos:line="30" pos:column="38">out<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">-&gt;<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="43">argv<pos:position pos:line="30" pos:column="47"/></name><index pos:line="30" pos:column="47">[<expr><literal type="number" pos:line="30" pos:column="48">1<pos:position pos:line="30" pos:column="49"/></literal></expr>]<pos:position pos:line="30" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="31" pos:column="25">out<pos:position pos:line="31" pos:column="28"/></name><operator pos:line="31" pos:column="28">-&gt;<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="30">argv<pos:position pos:line="31" pos:column="34"/></name><index pos:line="31" pos:column="34">[<expr><literal type="number" pos:line="31" pos:column="35">1<pos:position pos:line="31" pos:column="36"/></literal></expr>]<pos:position pos:line="31" pos:column="37"/></index></name> <operator pos:line="31" pos:column="38">=<pos:position pos:line="31" pos:column="39"/></operator> <name pos:line="31" pos:column="40">program<pos:position pos:line="31" pos:column="47"/></name></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
