<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7037_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<cpp:ifdef pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">ifdef<pos:position pos:line="2" pos:column="7"/></cpp:directive> <name pos:line="2" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="2" pos:column="22"/></name></cpp:ifdef>
<name pos:line="3" pos:column="1">build_charclass<pos:position pos:line="3" pos:column="16"/></name> <argument_list pos:line="3" pos:column="17">(<argument><expr><name pos:line="3" pos:column="18">RE_TRANSLATE_TYPE<pos:position pos:line="3" pos:column="35"/></name> <name pos:line="3" pos:column="36">trans<pos:position pos:line="3" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="43">bitset_t<pos:position pos:line="3" pos:column="51"/></name> <name pos:line="3" pos:column="52">sbcset<pos:position pos:line="3" pos:column="58"/></name></expr></argument>,
		 <argument><expr><name pos:line="4" pos:column="18">re_charset_t<pos:position pos:line="4" pos:column="30"/></name> <operator pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">mbcset<pos:position pos:line="4" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="40">int<pos:position pos:line="4" pos:column="43"/></name> <operator pos:line="4" pos:column="44">*<pos:position pos:line="4" pos:column="45"/></operator><name pos:line="4" pos:column="45">char_class_alloc<pos:position pos:line="4" pos:column="61"/></name></expr></argument>,
		 <argument><expr><specifier pos:line="5" pos:column="18">const<pos:position pos:line="5" pos:column="23"/></specifier> <name pos:line="5" pos:column="24">char<pos:position pos:line="5" pos:column="28"/></name> <operator pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="30">class_name<pos:position pos:line="5" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="42">reg_syntax_t<pos:position pos:line="5" pos:column="54"/></name> <name pos:line="5" pos:column="55">syntax<pos:position pos:line="5" pos:column="61"/></name></expr></argument>)<pos:position pos:line="5" pos:column="62"/></argument_list>
<cpp:else pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">else<pos:position pos:line="6" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="6" pos:column="7">/* not RE_ENABLE_I18N */</comment>
<name pos:line="7" pos:column="1">build_charclass<pos:position pos:line="7" pos:column="16"/></name> <argument_list pos:line="7" pos:column="17">(<argument><expr><name pos:line="7" pos:column="18">RE_TRANSLATE_TYPE<pos:position pos:line="7" pos:column="35"/></name> <name pos:line="7" pos:column="36">trans<pos:position pos:line="7" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="43">bitset_t<pos:position pos:line="7" pos:column="51"/></name> <name pos:line="7" pos:column="52">sbcset<pos:position pos:line="7" pos:column="58"/></name></expr></argument>,
		 <argument><expr><specifier pos:line="8" pos:column="18">const<pos:position pos:line="8" pos:column="23"/></specifier> <name pos:line="8" pos:column="24">char<pos:position pos:line="8" pos:column="28"/></name> <operator pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="30">class_name<pos:position pos:line="8" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="42">reg_syntax_t<pos:position pos:line="8" pos:column="54"/></name> <name pos:line="8" pos:column="55">syntax<pos:position pos:line="8" pos:column="61"/></name></expr></argument>)<pos:position pos:line="8" pos:column="62"/></argument_list>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="9" pos:column="8">/* not RE_ENABLE_I18N */</comment>
<argument_list pos:line="10" pos:column="1">{
  <argument><expr><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name> <name pos:line="11" pos:column="7">i<pos:position pos:line="11" pos:column="8"/></name></expr></argument>;

  <comment type="block" pos:line="13" pos:column="3">/* In case of REG_ICASE "upper" and "lower" match the both of
     upper and lower cases.  */</comment>
  if <argument><expr><operator pos:line="15" pos:column="6">(<pos:position pos:line="15" pos:column="7"/></operator><operator pos:line="15" pos:column="7">(<pos:position pos:line="15" pos:column="8"/></operator><name pos:line="15" pos:column="8">syntax<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">&amp;<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="17">RE_ICASE<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">)<pos:position pos:line="15" pos:column="26"/></operator>
      <operator pos:line="16" pos:column="7">&amp;&amp;<pos:position pos:line="16" pos:column="17"/></operator> <operator pos:line="16" pos:column="10">(<pos:position pos:line="16" pos:column="11"/></operator><call><name pos:line="16" pos:column="11">strcmp<pos:position pos:line="16" pos:column="17"/></name> <argument_list pos:line="16" pos:column="18">(<argument><expr><name pos:line="16" pos:column="19">class_name<pos:position pos:line="16" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="31">"upper"<pos:position pos:line="16" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call> <operator pos:line="16" pos:column="40">==<pos:position pos:line="16" pos:column="42"/></operator> <literal type="number" pos:line="16" pos:column="43">0<pos:position pos:line="16" pos:column="44"/></literal> <operator pos:line="16" pos:column="45">||<pos:position pos:line="16" pos:column="47"/></operator> <call><name pos:line="16" pos:column="48">strcmp<pos:position pos:line="16" pos:column="54"/></name> <argument_list pos:line="16" pos:column="55">(<argument><expr><name pos:line="16" pos:column="56">class_name<pos:position pos:line="16" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="68">"lower"<pos:position pos:line="16" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="76"/></argument_list></call> <operator pos:line="16" pos:column="77">==<pos:position pos:line="16" pos:column="79"/></operator> <literal type="number" pos:line="16" pos:column="80">0<pos:position pos:line="16" pos:column="81"/></literal><operator pos:line="16" pos:column="81">)<pos:position pos:line="16" pos:column="82"/></operator><operator pos:line="16" pos:column="82">)<pos:position pos:line="16" pos:column="83"/></operator>
    <name pos:line="17" pos:column="5">class_name<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="string" pos:line="17" pos:column="18">"alpha"<pos:position pos:line="17" pos:column="25"/></literal></expr></argument>;

<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="19" pos:column="22"/></name></cpp:ifdef>
  <comment type="block" pos:line="20" pos:column="3">/* Check the space of the arrays.  */</comment>
  if <argument><expr><operator pos:line="21" pos:column="6">(<pos:position pos:line="21" pos:column="7"/></operator><call><name pos:line="21" pos:column="7">BE<pos:position pos:line="21" pos:column="9"/></name> <argument_list pos:line="21" pos:column="10">(<argument><expr><operator pos:line="21" pos:column="11">*<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="12">char_class_alloc<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">==<pos:position pos:line="21" pos:column="31"/></operator> <name><name pos:line="21" pos:column="32">mbcset<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">-&gt;<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="40">nchar_classes<pos:position pos:line="21" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="55">0<pos:position pos:line="21" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call><operator pos:line="21" pos:column="57">)<pos:position pos:line="21" pos:column="58"/></operator>
    <block pos:line="22" pos:column="5">{
      <comment type="block" pos:line="23" pos:column="7">/* Not enough, realloc it.  */</comment>
      <comment type="block" pos:line="24" pos:column="7">/* +1 in case of mbcset-&gt;nchar_classes is 0.  */</comment>
      <expr><name pos:line="25" pos:column="7">int<pos:position pos:line="25" pos:column="10"/></name> <name pos:line="25" pos:column="11">new_char_class_alloc<pos:position pos:line="25" pos:column="31"/></name> <operator pos:line="25" pos:column="32">=<pos:position pos:line="25" pos:column="33"/></operator> <literal type="number" pos:line="25" pos:column="34">2<pos:position pos:line="25" pos:column="35"/></literal> <operator pos:line="25" pos:column="36">*<pos:position pos:line="25" pos:column="37"/></operator> <name><name pos:line="25" pos:column="38">mbcset<pos:position pos:line="25" pos:column="44"/></name><operator pos:line="25" pos:column="44">-&gt;<pos:position pos:line="25" pos:column="49"/></operator><name pos:line="25" pos:column="46">nchar_classes<pos:position pos:line="25" pos:column="59"/></name></name> <operator pos:line="25" pos:column="60">+<pos:position pos:line="25" pos:column="61"/></operator> <literal type="number" pos:line="25" pos:column="62">1<pos:position pos:line="25" pos:column="63"/></literal></expr>;
      <comment type="block" pos:line="26" pos:column="7">/* Use realloc since array is NULL if *alloc == 0.  */</comment>
      <expr><name pos:line="27" pos:column="7">wctype_t<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">*<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="17">new_char_classes<pos:position pos:line="27" pos:column="33"/></name> <operator pos:line="27" pos:column="34">=<pos:position pos:line="27" pos:column="35"/></operator> <call><name pos:line="27" pos:column="36">re_realloc<pos:position pos:line="27" pos:column="46"/></name> <argument_list pos:line="27" pos:column="47">(<argument><expr><name><name pos:line="27" pos:column="48">mbcset<pos:position pos:line="27" pos:column="54"/></name><operator pos:line="27" pos:column="54">-&gt;<pos:position pos:line="27" pos:column="59"/></operator><name pos:line="27" pos:column="56">char_classes<pos:position pos:line="27" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="70">wctype_t<pos:position pos:line="27" pos:column="78"/></name></expr></argument>,
					       <argument><expr><name pos:line="28" pos:column="48">new_char_class_alloc<pos:position pos:line="28" pos:column="68"/></name></expr></argument>)<pos:position pos:line="28" pos:column="69"/></argument_list></call></expr>;
      <if pos:line="29" pos:column="7">if <condition pos:line="29" pos:column="10">(<expr><call><name pos:line="29" pos:column="11">BE<pos:position pos:line="29" pos:column="13"/></name> <argument_list pos:line="29" pos:column="14">(<argument><expr><name pos:line="29" pos:column="15">new_char_classes<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">==<pos:position pos:line="29" pos:column="34"/></operator> <name pos:line="29" pos:column="35">NULL<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="41">0<pos:position pos:line="29" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="44"/></condition><then pos:line="29" pos:column="44">
	<block type="pseudo"><return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">REG_ESPACE<pos:position pos:line="30" pos:column="26"/></name></expr>;<pos:position pos:line="30" pos:column="27"/></return></block></then></if>
      <name><name pos:line="31" pos:column="7">mbcset<pos:position pos:line="31" pos:column="13"/></name><operator pos:line="31" pos:column="13">-&gt;<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="15">char_classes<pos:position pos:line="31" pos:column="27"/></name></name> <operator pos:line="31" pos:column="28">=<pos:position pos:line="31" pos:column="29"/></operator> <name pos:line="31" pos:column="30">new_char_classes<pos:position pos:line="31" pos:column="46"/></name></block></expr></argument>;
      <argument><expr><operator pos:line="32" pos:column="7">*<pos:position pos:line="32" pos:column="8"/></operator><name pos:line="32" pos:column="8">char_class_alloc<pos:position pos:line="32" pos:column="24"/></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator> <name pos:line="32" pos:column="27">new_char_class_alloc<pos:position pos:line="32" pos:column="47"/></name></expr></argument>;
    }<pos:position pos:line="33" pos:column="6"/></argument_list>
  <name><name pos:line="34" pos:column="3">mbcset<pos:position pos:line="34" pos:column="9"/></name><operator pos:line="34" pos:column="9">-&gt;<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="11">char_classes<pos:position pos:line="34" pos:column="23"/></name><index pos:line="34" pos:column="23">[<expr><name><name pos:line="34" pos:column="24">mbcset<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">-&gt;<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="32">nchar_classes<pos:position pos:line="34" pos:column="45"/></name></name><operator pos:line="34" pos:column="45">++<pos:position pos:line="34" pos:column="47"/></operator></expr>]<pos:position pos:line="34" pos:column="48"/></index></name> <init pos:line="34" pos:column="49">= <expr><call><name pos:line="34" pos:column="51">__wctype<pos:position pos:line="34" pos:column="59"/></name> <argument_list pos:line="34" pos:column="60">(<argument><expr><name pos:line="34" pos:column="61">class_name<pos:position pos:line="34" pos:column="71"/></name></expr></argument>)<pos:position pos:line="34" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="73"/></decl_stmt>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="35" pos:column="8">/* RE_ENABLE_I18N */</comment>

<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define<pos:position pos:line="37" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">BUILD_CHARCLASS_LOOP<pos:position pos:line="37" pos:column="29"/></name><parameter_list pos:line="37" pos:column="29">(<parameter><type><name pos:line="37" pos:column="30">ctype_func<pos:position pos:line="37" pos:column="40"/></name></type></parameter>)<pos:position pos:line="37" pos:column="41"/></parameter_list></cpp:macro>	\
  <cpp:value pos:line="38" pos:column="3">do {						\
    if (BE (trans != NULL, 0))			\
      {						\
	for (i = 0; i &lt; SBC_MAX; ++i)		\
  	  if (ctype_func (i))			\
	    bitset_set (sbcset, trans[i]);	\
      }						\
    else					\
      {						\
	for (i = 0; i &lt; SBC_MAX; ++i)		\
  	  if (ctype_func (i))			\
	    bitset_set (sbcset, i);		\
      }						\
  } while (0)<pos:position pos:line="51" pos:column="14"/></cpp:value></cpp:define>

  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><call><name pos:line="53" pos:column="7">strcmp<pos:position pos:line="53" pos:column="13"/></name> <argument_list pos:line="53" pos:column="14">(<argument><expr><name pos:line="53" pos:column="15">class_name<pos:position pos:line="53" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="27">"alnum"<pos:position pos:line="53" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="35"/></argument_list></call> <operator pos:line="53" pos:column="36">==<pos:position pos:line="53" pos:column="38"/></operator> <literal type="number" pos:line="53" pos:column="39">0<pos:position pos:line="53" pos:column="40"/></literal></expr>)<pos:position pos:line="53" pos:column="41"/></condition><then pos:line="53" pos:column="41">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="54" pos:column="25"/></name> <argument_list pos:line="54" pos:column="26">(<argument><expr><name pos:line="54" pos:column="27">isalnum<pos:position pos:line="54" pos:column="34"/></name></expr></argument>)<pos:position pos:line="54" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="36"/></expr_stmt></block></then>
  <elseif pos:line="55" pos:column="3">else <if pos:line="55" pos:column="8">if <condition pos:line="55" pos:column="11">(<expr><call><name pos:line="55" pos:column="12">strcmp<pos:position pos:line="55" pos:column="18"/></name> <argument_list pos:line="55" pos:column="19">(<argument><expr><name pos:line="55" pos:column="20">class_name<pos:position pos:line="55" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="32">"cntrl"<pos:position pos:line="55" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="40"/></argument_list></call> <operator pos:line="55" pos:column="41">==<pos:position pos:line="55" pos:column="43"/></operator> <literal type="number" pos:line="55" pos:column="44">0<pos:position pos:line="55" pos:column="45"/></literal></expr>)<pos:position pos:line="55" pos:column="46"/></condition><then pos:line="55" pos:column="46">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="56" pos:column="25"/></name> <argument_list pos:line="56" pos:column="26">(<argument><expr><name pos:line="56" pos:column="27">iscntrl<pos:position pos:line="56" pos:column="34"/></name></expr></argument>)<pos:position pos:line="56" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="57" pos:column="3">else <if pos:line="57" pos:column="8">if <condition pos:line="57" pos:column="11">(<expr><call><name pos:line="57" pos:column="12">strcmp<pos:position pos:line="57" pos:column="18"/></name> <argument_list pos:line="57" pos:column="19">(<argument><expr><name pos:line="57" pos:column="20">class_name<pos:position pos:line="57" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="32">"lower"<pos:position pos:line="57" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="40"/></argument_list></call> <operator pos:line="57" pos:column="41">==<pos:position pos:line="57" pos:column="43"/></operator> <literal type="number" pos:line="57" pos:column="44">0<pos:position pos:line="57" pos:column="45"/></literal></expr>)<pos:position pos:line="57" pos:column="46"/></condition><then pos:line="57" pos:column="46">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="58" pos:column="25"/></name> <argument_list pos:line="58" pos:column="26">(<argument><expr><name pos:line="58" pos:column="27">islower<pos:position pos:line="58" pos:column="34"/></name></expr></argument>)<pos:position pos:line="58" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="36"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="59" pos:column="3">else <if pos:line="59" pos:column="8">if <condition pos:line="59" pos:column="11">(<expr><call><name pos:line="59" pos:column="12">strcmp<pos:position pos:line="59" pos:column="18"/></name> <argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">class_name<pos:position pos:line="59" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="32">"space"<pos:position pos:line="59" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="40"/></argument_list></call> <operator pos:line="59" pos:column="41">==<pos:position pos:line="59" pos:column="43"/></operator> <literal type="number" pos:line="59" pos:column="44">0<pos:position pos:line="59" pos:column="45"/></literal></expr>)<pos:position pos:line="59" pos:column="46"/></condition><then pos:line="59" pos:column="46">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="60" pos:column="25"/></name> <argument_list pos:line="60" pos:column="26">(<argument><expr><name pos:line="60" pos:column="27">isspace<pos:position pos:line="60" pos:column="34"/></name></expr></argument>)<pos:position pos:line="60" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="36"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="61" pos:column="3">else <if pos:line="61" pos:column="8">if <condition pos:line="61" pos:column="11">(<expr><call><name pos:line="61" pos:column="12">strcmp<pos:position pos:line="61" pos:column="18"/></name> <argument_list pos:line="61" pos:column="19">(<argument><expr><name pos:line="61" pos:column="20">class_name<pos:position pos:line="61" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="32">"alpha"<pos:position pos:line="61" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="40"/></argument_list></call> <operator pos:line="61" pos:column="41">==<pos:position pos:line="61" pos:column="43"/></operator> <literal type="number" pos:line="61" pos:column="44">0<pos:position pos:line="61" pos:column="45"/></literal></expr>)<pos:position pos:line="61" pos:column="46"/></condition><then pos:line="61" pos:column="46">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="62" pos:column="25"/></name> <argument_list pos:line="62" pos:column="26">(<argument><expr><name pos:line="62" pos:column="27">isalpha<pos:position pos:line="62" pos:column="34"/></name></expr></argument>)<pos:position pos:line="62" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="36"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="63" pos:column="3">else <if pos:line="63" pos:column="8">if <condition pos:line="63" pos:column="11">(<expr><call><name pos:line="63" pos:column="12">strcmp<pos:position pos:line="63" pos:column="18"/></name> <argument_list pos:line="63" pos:column="19">(<argument><expr><name pos:line="63" pos:column="20">class_name<pos:position pos:line="63" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="32">"digit"<pos:position pos:line="63" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="40"/></argument_list></call> <operator pos:line="63" pos:column="41">==<pos:position pos:line="63" pos:column="43"/></operator> <literal type="number" pos:line="63" pos:column="44">0<pos:position pos:line="63" pos:column="45"/></literal></expr>)<pos:position pos:line="63" pos:column="46"/></condition><then pos:line="63" pos:column="46">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="64" pos:column="25"/></name> <argument_list pos:line="64" pos:column="26">(<argument><expr><name pos:line="64" pos:column="27">isdigit<pos:position pos:line="64" pos:column="34"/></name></expr></argument>)<pos:position pos:line="64" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="36"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="65" pos:column="3">else <if pos:line="65" pos:column="8">if <condition pos:line="65" pos:column="11">(<expr><call><name pos:line="65" pos:column="12">strcmp<pos:position pos:line="65" pos:column="18"/></name> <argument_list pos:line="65" pos:column="19">(<argument><expr><name pos:line="65" pos:column="20">class_name<pos:position pos:line="65" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="32">"print"<pos:position pos:line="65" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="40"/></argument_list></call> <operator pos:line="65" pos:column="41">==<pos:position pos:line="65" pos:column="43"/></operator> <literal type="number" pos:line="65" pos:column="44">0<pos:position pos:line="65" pos:column="45"/></literal></expr>)<pos:position pos:line="65" pos:column="46"/></condition><then pos:line="65" pos:column="46">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="66" pos:column="25"/></name> <argument_list pos:line="66" pos:column="26">(<argument><expr><name pos:line="66" pos:column="27">isprint<pos:position pos:line="66" pos:column="34"/></name></expr></argument>)<pos:position pos:line="66" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="67" pos:column="3">else <if pos:line="67" pos:column="8">if <condition pos:line="67" pos:column="11">(<expr><call><name pos:line="67" pos:column="12">strcmp<pos:position pos:line="67" pos:column="18"/></name> <argument_list pos:line="67" pos:column="19">(<argument><expr><name pos:line="67" pos:column="20">class_name<pos:position pos:line="67" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="32">"upper"<pos:position pos:line="67" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="40"/></argument_list></call> <operator pos:line="67" pos:column="41">==<pos:position pos:line="67" pos:column="43"/></operator> <literal type="number" pos:line="67" pos:column="44">0<pos:position pos:line="67" pos:column="45"/></literal></expr>)<pos:position pos:line="67" pos:column="46"/></condition><then pos:line="67" pos:column="46">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="68" pos:column="25"/></name> <argument_list pos:line="68" pos:column="26">(<argument><expr><name pos:line="68" pos:column="27">isupper<pos:position pos:line="68" pos:column="34"/></name></expr></argument>)<pos:position pos:line="68" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="36"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="69" pos:column="3">else <if pos:line="69" pos:column="8">if <condition pos:line="69" pos:column="11">(<expr><call><name pos:line="69" pos:column="12">strcmp<pos:position pos:line="69" pos:column="18"/></name> <argument_list pos:line="69" pos:column="19">(<argument><expr><name pos:line="69" pos:column="20">class_name<pos:position pos:line="69" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="32">"blank"<pos:position pos:line="69" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="40"/></argument_list></call> <operator pos:line="69" pos:column="41">==<pos:position pos:line="69" pos:column="43"/></operator> <literal type="number" pos:line="69" pos:column="44">0<pos:position pos:line="69" pos:column="45"/></literal></expr>)<pos:position pos:line="69" pos:column="46"/></condition><then pos:line="69" pos:column="46">
<cpp:ifndef pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">ifndef<pos:position pos:line="70" pos:column="8"/></cpp:directive> <name pos:line="70" pos:column="9">GAWK<pos:position pos:line="70" pos:column="13"/></name></cpp:ifndef>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="71" pos:column="25"/></name> <argument_list pos:line="71" pos:column="26">(<argument><expr><name pos:line="71" pos:column="27">isblank<pos:position pos:line="71" pos:column="34"/></name></expr></argument>)<pos:position pos:line="71" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="36"/></expr_stmt></block></then></if></elseif></if>
<cpp:else pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">else<pos:position pos:line="72" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="block" pos:line="73" pos:column="5">/* see comments above */</comment>
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="74" pos:column="25"/></name> <argument_list pos:line="74" pos:column="26">(<argument><expr><name pos:line="74" pos:column="27">is_blank<pos:position pos:line="74" pos:column="35"/></name></expr></argument>)<pos:position pos:line="74" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="37"/></expr_stmt>
<cpp:endif pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">endif<pos:position pos:line="75" pos:column="7"/></cpp:directive></cpp:endif>
  <elseif pos:line="76" pos:column="3">else <if pos:line="76" pos:column="8">if <condition pos:line="76" pos:column="11">(<expr><call><name pos:line="76" pos:column="12">strcmp<pos:position pos:line="76" pos:column="18"/></name> <argument_list pos:line="76" pos:column="19">(<argument><expr><name pos:line="76" pos:column="20">class_name<pos:position pos:line="76" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="32">"graph"<pos:position pos:line="76" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="40"/></argument_list></call> <operator pos:line="76" pos:column="41">==<pos:position pos:line="76" pos:column="43"/></operator> <literal type="number" pos:line="76" pos:column="44">0<pos:position pos:line="76" pos:column="45"/></literal></expr>)<pos:position pos:line="76" pos:column="46"/></condition><then pos:line="76" pos:column="46">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="77" pos:column="25"/></name> <argument_list pos:line="77" pos:column="26">(<argument><expr><name pos:line="77" pos:column="27">isgraph<pos:position pos:line="77" pos:column="34"/></name></expr></argument>)<pos:position pos:line="77" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="36"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="78" pos:column="3">else <if pos:line="78" pos:column="8">if <condition pos:line="78" pos:column="11">(<expr><call><name pos:line="78" pos:column="12">strcmp<pos:position pos:line="78" pos:column="18"/></name> <argument_list pos:line="78" pos:column="19">(<argument><expr><name pos:line="78" pos:column="20">class_name<pos:position pos:line="78" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="32">"punct"<pos:position pos:line="78" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="40"/></argument_list></call> <operator pos:line="78" pos:column="41">==<pos:position pos:line="78" pos:column="43"/></operator> <literal type="number" pos:line="78" pos:column="44">0<pos:position pos:line="78" pos:column="45"/></literal></expr>)<pos:position pos:line="78" pos:column="46"/></condition><then pos:line="78" pos:column="46">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="79" pos:column="25"/></name> <argument_list pos:line="79" pos:column="26">(<argument><expr><name pos:line="79" pos:column="27">ispunct<pos:position pos:line="79" pos:column="34"/></name></expr></argument>)<pos:position pos:line="79" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="36"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="80" pos:column="3">else <if pos:line="80" pos:column="8">if <condition pos:line="80" pos:column="11">(<expr><call><name pos:line="80" pos:column="12">strcmp<pos:position pos:line="80" pos:column="18"/></name> <argument_list pos:line="80" pos:column="19">(<argument><expr><name pos:line="80" pos:column="20">class_name<pos:position pos:line="80" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="32">"xdigit"<pos:position pos:line="80" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="41"/></argument_list></call> <operator pos:line="80" pos:column="42">==<pos:position pos:line="80" pos:column="44"/></operator> <literal type="number" pos:line="80" pos:column="45">0<pos:position pos:line="80" pos:column="46"/></literal></expr>)<pos:position pos:line="80" pos:column="47"/></condition><then pos:line="80" pos:column="47">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="5">BUILD_CHARCLASS_LOOP<pos:position pos:line="81" pos:column="25"/></name> <argument_list pos:line="81" pos:column="26">(<argument><expr><name pos:line="81" pos:column="27">isxdigit<pos:position pos:line="81" pos:column="35"/></name></expr></argument>)<pos:position pos:line="81" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="37"/></expr_stmt></block></then></if></elseif>
  <else pos:line="82" pos:column="3">else
    <block type="pseudo"><return pos:line="83" pos:column="5">return <expr><name pos:line="83" pos:column="12">REG_ECTYPE<pos:position pos:line="83" pos:column="22"/></name></expr>;<pos:position pos:line="83" pos:column="23"/></return></block></else>

  <return pos:line="85" pos:column="3">return <expr><name pos:line="85" pos:column="10">REG_NOERROR<pos:position pos:line="85" pos:column="21"/></name></expr>;<pos:position pos:line="85" pos:column="22"/></return>
}</unit>
