<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4301_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">interpret_branch_name<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">name<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">namelen<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="58">struct<pos:position pos:line="1" pos:column="64"/></name> <name pos:line="1" pos:column="65">strbuf<pos:position pos:line="1" pos:column="71"/></name></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">buf<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="2" pos:column="27">unsigned<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">allowed<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">at<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">start<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">len<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">namelen<pos:position pos:line="8" pos:column="21"/></name></expr>)<pos:position pos:line="8" pos:column="22"/></condition><then pos:line="8" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">namelen<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">=<pos:position pos:line="9" pos:column="26"/></operator> <call><name pos:line="9" pos:column="27">strlen<pos:position pos:line="9" pos:column="33"/></name><argument_list pos:line="9" pos:column="33">(<argument><expr><name pos:line="9" pos:column="34">name<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">allowed<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">||<pos:position pos:line="11" pos:column="24"/></operator> <operator pos:line="11" pos:column="25">(<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">allowed<pos:position pos:line="11" pos:column="33"/></name> <operator pos:line="11" pos:column="34">&amp;<pos:position pos:line="11" pos:column="39"/></operator> <name pos:line="11" pos:column="36">INTERPRET_BRANCH_LOCAL<pos:position pos:line="11" pos:column="58"/></name><operator pos:line="11" pos:column="58">)<pos:position pos:line="11" pos:column="59"/></operator></expr>)<pos:position pos:line="11" pos:column="60"/></condition><then pos:line="11" pos:column="60"> <block pos:line="11" pos:column="61">{
		<expr_stmt><expr><name pos:line="12" pos:column="17">len<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <call><name pos:line="12" pos:column="23">interpret_nth_prior_checkout<pos:position pos:line="12" pos:column="51"/></name><argument_list pos:line="12" pos:column="51">(<argument><expr><name pos:line="12" pos:column="52">name<pos:position pos:line="12" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="58">namelen<pos:position pos:line="12" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="67">buf<pos:position pos:line="12" pos:column="70"/></name></expr></argument>)<pos:position pos:line="12" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="72"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">len<pos:position pos:line="13" pos:column="25"/></name></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26"> <block pos:line="13" pos:column="27">{
			<return pos:line="14" pos:column="25">return <expr><name pos:line="14" pos:column="32">len<pos:position pos:line="14" pos:column="35"/></name></expr>;<pos:position pos:line="14" pos:column="36"/></return> <comment type="block" pos:line="14" pos:column="37">/* syntax Ok, not enough switches */</comment>
		}<pos:position pos:line="15" pos:column="18"/></block></then> <elseif pos:line="15" pos:column="19">else <if pos:line="15" pos:column="24">if <condition pos:line="15" pos:column="27">(<expr><name pos:line="15" pos:column="28">len<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">&gt;<pos:position pos:line="15" pos:column="36"/></operator> <literal type="number" pos:line="15" pos:column="34">0<pos:position pos:line="15" pos:column="35"/></literal></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36"> <block pos:line="15" pos:column="37">{
			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><name pos:line="16" pos:column="29">len<pos:position pos:line="16" pos:column="32"/></name> <operator pos:line="16" pos:column="33">==<pos:position pos:line="16" pos:column="35"/></operator> <name pos:line="16" pos:column="36">namelen<pos:position pos:line="16" pos:column="43"/></name></expr>)<pos:position pos:line="16" pos:column="44"/></condition><then pos:line="16" pos:column="44">
				<block type="pseudo"><return pos:line="17" pos:column="33">return <expr><name pos:line="17" pos:column="40">len<pos:position pos:line="17" pos:column="43"/></name></expr>;<pos:position pos:line="17" pos:column="44"/></return></block></then> <comment type="block" pos:line="17" pos:column="45">/* consumed all */</comment>
			<else pos:line="18" pos:column="25">else
				<block type="pseudo"><return pos:line="19" pos:column="33">return <expr><call><name pos:line="19" pos:column="40">reinterpret<pos:position pos:line="19" pos:column="51"/></name><argument_list pos:line="19" pos:column="51">(<argument><expr><name pos:line="19" pos:column="52">name<pos:position pos:line="19" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="58">namelen<pos:position pos:line="19" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="67">len<pos:position pos:line="19" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="72">buf<pos:position pos:line="19" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="77">allowed<pos:position pos:line="19" pos:column="84"/></name></expr></argument>)<pos:position pos:line="19" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="86"/></return></block></else></if>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<for pos:line="23" pos:column="9">for <control pos:line="23" pos:column="13">(<init><expr><name pos:line="23" pos:column="14">start<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">=<pos:position pos:line="23" pos:column="21"/></operator> <name pos:line="23" pos:column="22">name<pos:position pos:line="23" pos:column="26"/></name></expr>;<pos:position pos:line="23" pos:column="27"/></init>
	     <condition><expr><operator pos:line="24" pos:column="14">(<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">at<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <call><name pos:line="24" pos:column="20">memchr<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">start<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="24" pos:column="34">'@'<pos:position pos:line="24" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="39">namelen<pos:position pos:line="24" pos:column="46"/></name> <operator pos:line="24" pos:column="47">-<pos:position pos:line="24" pos:column="48"/></operator> <operator pos:line="24" pos:column="49">(<pos:position pos:line="24" pos:column="50"/></operator><name pos:line="24" pos:column="50">start<pos:position pos:line="24" pos:column="55"/></name> <operator pos:line="24" pos:column="56">-<pos:position pos:line="24" pos:column="57"/></operator> <name pos:line="24" pos:column="58">name<pos:position pos:line="24" pos:column="62"/></name><operator pos:line="24" pos:column="62">)<pos:position pos:line="24" pos:column="63"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="64"/></argument_list></call><operator pos:line="24" pos:column="64">)<pos:position pos:line="24" pos:column="65"/></operator></expr>;<pos:position pos:line="24" pos:column="66"/></condition>
	     <incr><expr><name pos:line="25" pos:column="14">start<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <name pos:line="25" pos:column="22">at<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">+<pos:position pos:line="25" pos:column="26"/></operator> <literal type="number" pos:line="25" pos:column="27">1<pos:position pos:line="25" pos:column="28"/></literal></expr></incr>)<pos:position pos:line="25" pos:column="29"/></control> <block pos:line="25" pos:column="30">{

		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="22">allowed<pos:position pos:line="27" pos:column="29"/></name> <operator pos:line="27" pos:column="30">||<pos:position pos:line="27" pos:column="32"/></operator> <operator pos:line="27" pos:column="33">(<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">allowed<pos:position pos:line="27" pos:column="41"/></name> <operator pos:line="27" pos:column="42">&amp;<pos:position pos:line="27" pos:column="47"/></operator> <name pos:line="27" pos:column="44">INTERPRET_BRANCH_HEAD<pos:position pos:line="27" pos:column="65"/></name><operator pos:line="27" pos:column="65">)<pos:position pos:line="27" pos:column="66"/></operator></expr>)<pos:position pos:line="27" pos:column="67"/></condition><then pos:line="27" pos:column="67"> <block pos:line="27" pos:column="68">{
			<expr_stmt><expr><name pos:line="28" pos:column="25">len<pos:position pos:line="28" pos:column="28"/></name> <operator pos:line="28" pos:column="29">=<pos:position pos:line="28" pos:column="30"/></operator> <call><name pos:line="28" pos:column="31">interpret_empty_at<pos:position pos:line="28" pos:column="49"/></name><argument_list pos:line="28" pos:column="49">(<argument><expr><name pos:line="28" pos:column="50">name<pos:position pos:line="28" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="56">namelen<pos:position pos:line="28" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="65">at<pos:position pos:line="28" pos:column="67"/></name> <operator pos:line="28" pos:column="68">-<pos:position pos:line="28" pos:column="69"/></operator> <name pos:line="28" pos:column="70">name<pos:position pos:line="28" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="76">buf<pos:position pos:line="28" pos:column="79"/></name></expr></argument>)<pos:position pos:line="28" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="81"/></expr_stmt>
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><name pos:line="29" pos:column="29">len<pos:position pos:line="29" pos:column="32"/></name> <operator pos:line="29" pos:column="33">&gt;<pos:position pos:line="29" pos:column="37"/></operator> <literal type="number" pos:line="29" pos:column="35">0<pos:position pos:line="29" pos:column="36"/></literal></expr>)<pos:position pos:line="29" pos:column="37"/></condition><then pos:line="29" pos:column="37">
				<block type="pseudo"><return pos:line="30" pos:column="33">return <expr><call><name pos:line="30" pos:column="40">reinterpret<pos:position pos:line="30" pos:column="51"/></name><argument_list pos:line="30" pos:column="51">(<argument><expr><name pos:line="30" pos:column="52">name<pos:position pos:line="30" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="58">namelen<pos:position pos:line="30" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="67">len<pos:position pos:line="30" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="72">buf<pos:position pos:line="30" pos:column="75"/></name></expr></argument>,
						   <argument><expr><name pos:line="31" pos:column="52">allowed<pos:position pos:line="31" pos:column="59"/></name></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="61"/></return></block></then></if>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="34" pos:column="17">len<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <call><name pos:line="34" pos:column="23">interpret_branch_mark<pos:position pos:line="34" pos:column="44"/></name><argument_list pos:line="34" pos:column="44">(<argument><expr><name pos:line="34" pos:column="45">name<pos:position pos:line="34" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="51">namelen<pos:position pos:line="34" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="60">at<pos:position pos:line="34" pos:column="62"/></name> <operator pos:line="34" pos:column="63">-<pos:position pos:line="34" pos:column="64"/></operator> <name pos:line="34" pos:column="65">name<pos:position pos:line="34" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="71">buf<pos:position pos:line="34" pos:column="74"/></name></expr></argument>,
					    <argument><expr><name pos:line="35" pos:column="45">upstream_mark<pos:position pos:line="35" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="60">branch_get_upstream<pos:position pos:line="35" pos:column="79"/></name></expr></argument>,
					    <argument><expr><name pos:line="36" pos:column="45">allowed<pos:position pos:line="36" pos:column="52"/></name></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="54"/></expr_stmt>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">len<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">&gt;<pos:position pos:line="37" pos:column="29"/></operator> <literal type="number" pos:line="37" pos:column="27">0<pos:position pos:line="37" pos:column="28"/></literal></expr>)<pos:position pos:line="37" pos:column="29"/></condition><then pos:line="37" pos:column="29">
			<block type="pseudo"><return pos:line="38" pos:column="25">return <expr><name pos:line="38" pos:column="32">len<pos:position pos:line="38" pos:column="35"/></name></expr>;<pos:position pos:line="38" pos:column="36"/></return></block></then></if>

		<expr_stmt><expr><name pos:line="40" pos:column="17">len<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <call><name pos:line="40" pos:column="23">interpret_branch_mark<pos:position pos:line="40" pos:column="44"/></name><argument_list pos:line="40" pos:column="44">(<argument><expr><name pos:line="40" pos:column="45">name<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="51">namelen<pos:position pos:line="40" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="60">at<pos:position pos:line="40" pos:column="62"/></name> <operator pos:line="40" pos:column="63">-<pos:position pos:line="40" pos:column="64"/></operator> <name pos:line="40" pos:column="65">name<pos:position pos:line="40" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="71">buf<pos:position pos:line="40" pos:column="74"/></name></expr></argument>,
					    <argument><expr><name pos:line="41" pos:column="45">push_mark<pos:position pos:line="41" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="56">branch_get_push<pos:position pos:line="41" pos:column="71"/></name></expr></argument>,
					    <argument><expr><name pos:line="42" pos:column="45">allowed<pos:position pos:line="42" pos:column="52"/></name></expr></argument>)<pos:position pos:line="42" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="54"/></expr_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">len<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">&gt;<pos:position pos:line="43" pos:column="29"/></operator> <literal type="number" pos:line="43" pos:column="27">0<pos:position pos:line="43" pos:column="28"/></literal></expr>)<pos:position pos:line="43" pos:column="29"/></condition><then pos:line="43" pos:column="29">
			<block type="pseudo"><return pos:line="44" pos:column="25">return <expr><name pos:line="44" pos:column="32">len<pos:position pos:line="44" pos:column="35"/></name></expr>;<pos:position pos:line="44" pos:column="36"/></return></block></then></if>
	}<pos:position pos:line="45" pos:column="10"/></block></for>

	<return pos:line="47" pos:column="9">return <expr><operator pos:line="47" pos:column="16">-<pos:position pos:line="47" pos:column="17"/></operator><literal type="number" pos:line="47" pos:column="17">1<pos:position pos:line="47" pos:column="18"/></literal></expr>;<pos:position pos:line="47" pos:column="19"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
