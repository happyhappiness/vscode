<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3757_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">calculate_changed_submodule_paths<pos:position pos:line="1" pos:column="46"/></name><parameter_list pos:line="1" pos:column="46">(<parameter><decl><type><name pos:line="1" pos:column="47">void<pos:position pos:line="1" pos:column="51"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">argv_array<pos:position pos:line="3" pos:column="26"/></name></name></type> <name pos:line="3" pos:column="27">argv<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><name pos:line="3" pos:column="34">ARGV_ARRAY_INIT<pos:position pos:line="3" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">string_list<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">changed_submodules<pos:position pos:line="4" pos:column="46"/></name> <init pos:line="4" pos:column="47">= <expr><name pos:line="4" pos:column="49">STRING_LIST_INIT_DUP<pos:position pos:line="4" pos:column="69"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="70"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name><name pos:line="5" pos:column="15">struct<pos:position pos:line="5" pos:column="21"/></name> <name pos:line="5" pos:column="22">string_list_item<pos:position pos:line="5" pos:column="38"/></name></name> <modifier pos:line="5" pos:column="39">*<pos:position pos:line="5" pos:column="40"/></modifier></type><name pos:line="5" pos:column="40">item<pos:position pos:line="5" pos:column="44"/></name></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* No need to check if there are no submodules configured */</comment>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><call><name pos:line="8" pos:column="14">submodule_from_path<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">NULL<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">NULL<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="46"/></condition><then pos:line="8" pos:column="46">
		<block type="pseudo"><return pos:line="9" pos:column="17">return;<pos:position pos:line="9" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">argv_array_push<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><operator pos:line="11" pos:column="25">&amp;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="26">argv<pos:position pos:line="11" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="32">"--"<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt> <comment type="block" pos:line="11" pos:column="39">/* argv[0] program name */</comment>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">oid_array_for_each_unique<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><operator pos:line="12" pos:column="35">&amp;<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="36">ref_tips_after_fetch<pos:position pos:line="12" pos:column="56"/></name></expr></argument>,
				   <argument><expr><name pos:line="13" pos:column="36">append_oid_to_argv<pos:position pos:line="13" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="56">&amp;<pos:position pos:line="13" pos:column="61"/></operator><name pos:line="13" pos:column="57">argv<pos:position pos:line="13" pos:column="61"/></name></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">argv_array_push<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><operator pos:line="14" pos:column="25">&amp;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="26">argv<pos:position pos:line="14" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="32">"--not"<pos:position pos:line="14" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">oid_array_for_each_unique<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><operator pos:line="15" pos:column="35">&amp;<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="36">ref_tips_before_fetch<pos:position pos:line="15" pos:column="57"/></name></expr></argument>,
				   <argument><expr><name pos:line="16" pos:column="36">append_oid_to_argv<pos:position pos:line="16" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="56">&amp;<pos:position pos:line="16" pos:column="61"/></operator><name pos:line="16" pos:column="57">argv<pos:position pos:line="16" pos:column="61"/></name></expr></argument>)<pos:position pos:line="16" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="63"/></expr_stmt>

	<comment type="block" pos:line="18" pos:column="9">/*
	 * Collect all submodules (whether checked out or not) for which new
	 * commits have been recorded upstream in "changed_submodule_paths".
	 */</comment>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">collect_changed_submodules<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><operator pos:line="22" pos:column="36">&amp;<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="37">changed_submodules<pos:position pos:line="22" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="57">&amp;<pos:position pos:line="22" pos:column="62"/></operator><name pos:line="22" pos:column="58">argv<pos:position pos:line="22" pos:column="62"/></name></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="64"/></expr_stmt>

	<macro><name pos:line="24" pos:column="9">for_each_string_list_item<pos:position pos:line="24" pos:column="34"/></name><argument_list pos:line="24" pos:column="34">(<argument pos:line="24" pos:column="35">item<pos:position pos:line="24" pos:column="39"/></argument>, <argument pos:line="24" pos:column="41">&amp;changed_submodules<pos:position pos:line="24" pos:column="60"/></argument>)<pos:position pos:line="24" pos:column="61"/></argument_list></macro> <block pos:line="24" pos:column="62">{
		<decl_stmt><decl><type><name><name pos:line="25" pos:column="17">struct<pos:position pos:line="25" pos:column="23"/></name> <name pos:line="25" pos:column="24">oid_array<pos:position pos:line="25" pos:column="33"/></name></name> <modifier pos:line="25" pos:column="34">*<pos:position pos:line="25" pos:column="35"/></modifier></type><name pos:line="25" pos:column="35">commits<pos:position pos:line="25" pos:column="42"/></name> <init pos:line="25" pos:column="43">= <expr><name><name pos:line="25" pos:column="45">item<pos:position pos:line="25" pos:column="49"/></name><operator pos:line="25" pos:column="49">-&gt;<pos:position pos:line="25" pos:column="54"/></operator><name pos:line="25" pos:column="51">util<pos:position pos:line="25" pos:column="55"/></name></name></expr></init></decl>;<pos:position pos:line="25" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">const<pos:position pos:line="26" pos:column="22"/></specifier> <name pos:line="26" pos:column="23">char<pos:position pos:line="26" pos:column="27"/></name> <modifier pos:line="26" pos:column="28">*<pos:position pos:line="26" pos:column="29"/></modifier></type><name pos:line="26" pos:column="29">path<pos:position pos:line="26" pos:column="33"/></name> <init pos:line="26" pos:column="34">= <expr><name><name pos:line="26" pos:column="36">item<pos:position pos:line="26" pos:column="40"/></name><operator pos:line="26" pos:column="40">-&gt;<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="42">string<pos:position pos:line="26" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="26" pos:column="49"/></decl_stmt>

		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><operator pos:line="28" pos:column="21">!<pos:position pos:line="28" pos:column="22"/></operator><call><name pos:line="28" pos:column="22">submodule_has_commits<pos:position pos:line="28" pos:column="43"/></name><argument_list pos:line="28" pos:column="43">(<argument><expr><name pos:line="28" pos:column="44">path<pos:position pos:line="28" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="50">commits<pos:position pos:line="28" pos:column="57"/></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="59"/></condition><then pos:line="28" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">string_list_append<pos:position pos:line="29" pos:column="43"/></name><argument_list pos:line="29" pos:column="43">(<argument><expr><operator pos:line="29" pos:column="44">&amp;<pos:position pos:line="29" pos:column="49"/></operator><name pos:line="29" pos:column="45">changed_submodule_paths<pos:position pos:line="29" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="70">path<pos:position pos:line="29" pos:column="74"/></name></expr></argument>)<pos:position pos:line="29" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="76"/></expr_stmt></block></then></if>
	}<pos:position pos:line="30" pos:column="10"/></block>

	<expr_stmt><expr><call><name pos:line="32" pos:column="9">free_submodules_oids<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><operator pos:line="32" pos:column="30">&amp;<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="31">changed_submodules<pos:position pos:line="32" pos:column="49"/></name></expr></argument>)<pos:position pos:line="32" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">argv_array_clear<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><operator pos:line="33" pos:column="26">&amp;<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="27">argv<pos:position pos:line="33" pos:column="31"/></name></expr></argument>)<pos:position pos:line="33" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">oid_array_clear<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">(<argument><expr><operator pos:line="34" pos:column="25">&amp;<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="26">ref_tips_before_fetch<pos:position pos:line="34" pos:column="47"/></name></expr></argument>)<pos:position pos:line="34" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">oid_array_clear<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><operator pos:line="35" pos:column="25">&amp;<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="26">ref_tips_after_fetch<pos:position pos:line="35" pos:column="46"/></name></expr></argument>)<pos:position pos:line="35" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name pos:line="36" pos:column="9">initialized_fetch_ref_tips<pos:position pos:line="36" pos:column="35"/></name> <operator pos:line="36" pos:column="36">=<pos:position pos:line="36" pos:column="37"/></operator> <literal type="number" pos:line="36" pos:column="38">0<pos:position pos:line="36" pos:column="39"/></literal></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
