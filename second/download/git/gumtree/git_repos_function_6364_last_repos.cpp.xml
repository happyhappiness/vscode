<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6364_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">remove_cmd<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">int<pos:position pos:line="1" pos:column="26"/></name></type> <name pos:line="1" pos:column="27">argc<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier><modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">argv<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">prefix<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">flag<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><literal type="number" pos:line="3" pos:column="25">0<pos:position pos:line="3" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">from_stdin<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><literal type="number" pos:line="4" pos:column="26">0<pos:position pos:line="4" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">option<pos:position pos:line="5" pos:column="22"/></name></name></type> <name><name pos:line="5" pos:column="23">options<pos:position pos:line="5" pos:column="30"/></name><index pos:line="5" pos:column="30">[]<pos:position pos:line="5" pos:column="32"/></index></name> <init pos:line="5" pos:column="33">= <expr><block pos:line="5" pos:column="35">{
		<expr><call><name pos:line="6" pos:column="17">OPT_BIT<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><literal type="number" pos:line="6" pos:column="25">0<pos:position pos:line="6" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="28">"ignore-missing"<pos:position pos:line="6" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="6" pos:column="46">&amp;<pos:position pos:line="6" pos:column="51"/></operator><name pos:line="6" pos:column="47">flag<pos:position pos:line="6" pos:column="51"/></name></expr></argument>,
			<argument><expr><call><name pos:line="7" pos:column="25">N_<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><literal type="string" pos:line="7" pos:column="28">"attempt to remove non-existent note is not an error"<pos:position pos:line="7" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="82"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="8" pos:column="25">IGNORE_MISSING<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>,
		<expr><call><name pos:line="9" pos:column="17">OPT_BOOL<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><literal type="number" pos:line="9" pos:column="26">0<pos:position pos:line="9" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="29">"stdin"<pos:position pos:line="9" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="9" pos:column="38">&amp;<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="39">from_stdin<pos:position pos:line="9" pos:column="49"/></name></expr></argument>,
			    <argument><expr><call><name pos:line="10" pos:column="29">N_<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><literal type="string" pos:line="10" pos:column="32">"read object names from the standard input"<pos:position pos:line="10" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="77"/></argument_list></call></expr>,
		<macro><name pos:line="11" pos:column="17">OPT_END<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">()<pos:position pos:line="11" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="12" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="12" pos:column="11"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="13" pos:column="9">struct<pos:position pos:line="13" pos:column="15"/></name> <name pos:line="13" pos:column="16">notes_tree<pos:position pos:line="13" pos:column="26"/></name></name> <modifier pos:line="13" pos:column="27">*<pos:position pos:line="13" pos:column="28"/></modifier></type><name pos:line="13" pos:column="28">t<pos:position pos:line="13" pos:column="29"/></name></decl>;<pos:position pos:line="13" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">retval<pos:position pos:line="14" pos:column="19"/></name> <init pos:line="14" pos:column="20">= <expr><literal type="number" pos:line="14" pos:column="22">0<pos:position pos:line="14" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><name pos:line="16" pos:column="9">argc<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">parse_options<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">argc<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="36">argv<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">prefix<pos:position pos:line="16" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="50">options<pos:position pos:line="16" pos:column="57"/></name></expr></argument>,
			     <argument><expr><name pos:line="17" pos:column="30">git_notes_remove_usage<pos:position pos:line="17" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="54">0<pos:position pos:line="17" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>

	<expr_stmt><expr><name pos:line="19" pos:column="9">t<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <call><name pos:line="19" pos:column="13">init_notes_check<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><literal type="string" pos:line="19" pos:column="30">"remove"<pos:position pos:line="19" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="40">NOTES_INIT_WRITABLE<pos:position pos:line="19" pos:column="59"/></name></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="61"/></expr_stmt>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">!<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">argc<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">&amp;&amp;<pos:position pos:line="21" pos:column="29"/></operator> <operator pos:line="21" pos:column="22">!<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">from_stdin<pos:position pos:line="21" pos:column="33"/></name></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34"> <block pos:line="21" pos:column="35">{
		<expr_stmt><expr><name pos:line="22" pos:column="17">retval<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <call><name pos:line="22" pos:column="26">remove_one_note<pos:position pos:line="22" pos:column="41"/></name><argument_list pos:line="22" pos:column="41">(<argument><expr><name pos:line="22" pos:column="42">t<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="45">"HEAD"<pos:position pos:line="22" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="53">flag<pos:position pos:line="22" pos:column="57"/></name></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then> <else pos:line="23" pos:column="11">else <block pos:line="23" pos:column="16">{
		<while pos:line="24" pos:column="17">while <condition pos:line="24" pos:column="23">(<expr><operator pos:line="24" pos:column="24">*<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="25">argv<pos:position pos:line="24" pos:column="29"/></name></expr>)<pos:position pos:line="24" pos:column="30"/></condition> <block pos:line="24" pos:column="31">{
			<expr_stmt><expr><name pos:line="25" pos:column="25">retval<pos:position pos:line="25" pos:column="31"/></name> <operator pos:line="25" pos:column="32">|=<pos:position pos:line="25" pos:column="34"/></operator> <call><name pos:line="25" pos:column="35">remove_one_note<pos:position pos:line="25" pos:column="50"/></name><argument_list pos:line="25" pos:column="50">(<argument><expr><name pos:line="25" pos:column="51">t<pos:position pos:line="25" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="54">*<pos:position pos:line="25" pos:column="55"/></operator><name pos:line="25" pos:column="55">argv<pos:position pos:line="25" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="61">flag<pos:position pos:line="25" pos:column="65"/></name></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><name pos:line="26" pos:column="25">argv<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">++<pos:position pos:line="26" pos:column="31"/></operator></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>
		}<pos:position pos:line="27" pos:column="18"/></block></while>
	}<pos:position pos:line="28" pos:column="10"/></block></else></if>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">from_stdin<pos:position pos:line="29" pos:column="23"/></name></expr>)<pos:position pos:line="29" pos:column="24"/></condition><then pos:line="29" pos:column="24"> <block pos:line="29" pos:column="25">{
		<decl_stmt><decl><type><name><name pos:line="30" pos:column="17">struct<pos:position pos:line="30" pos:column="23"/></name> <name pos:line="30" pos:column="24">strbuf<pos:position pos:line="30" pos:column="30"/></name></name></type> <name pos:line="30" pos:column="31">sb<pos:position pos:line="30" pos:column="33"/></name> <init pos:line="30" pos:column="34">= <expr><name pos:line="30" pos:column="36">STRBUF_INIT<pos:position pos:line="30" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="30" pos:column="48"/></decl_stmt>
		<while pos:line="31" pos:column="17">while <condition pos:line="31" pos:column="23">(<expr><call><name pos:line="31" pos:column="24">strbuf_getwholeline<pos:position pos:line="31" pos:column="43"/></name><argument_list pos:line="31" pos:column="43">(<argument><expr><operator pos:line="31" pos:column="44">&amp;<pos:position pos:line="31" pos:column="49"/></operator><name pos:line="31" pos:column="45">sb<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="49">stdin<pos:position pos:line="31" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="31" pos:column="56">'\n'<pos:position pos:line="31" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="61"/></argument_list></call> <operator pos:line="31" pos:column="62">!=<pos:position pos:line="31" pos:column="64"/></operator> <name pos:line="31" pos:column="65">EOF<pos:position pos:line="31" pos:column="68"/></name></expr>)<pos:position pos:line="31" pos:column="69"/></condition> <block pos:line="31" pos:column="70">{
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">strbuf_rtrim<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">(<argument><expr><operator pos:line="32" pos:column="38">&amp;<pos:position pos:line="32" pos:column="43"/></operator><name pos:line="32" pos:column="39">sb<pos:position pos:line="32" pos:column="41"/></name></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">retval<pos:position pos:line="33" pos:column="31"/></name> <operator pos:line="33" pos:column="32">|=<pos:position pos:line="33" pos:column="34"/></operator> <call><name pos:line="33" pos:column="35">remove_one_note<pos:position pos:line="33" pos:column="50"/></name><argument_list pos:line="33" pos:column="50">(<argument><expr><name pos:line="33" pos:column="51">t<pos:position pos:line="33" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="54">sb<pos:position pos:line="33" pos:column="56"/></name><operator pos:line="33" pos:column="56">.<pos:position pos:line="33" pos:column="57"/></operator><name pos:line="33" pos:column="57">buf<pos:position pos:line="33" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="62">flag<pos:position pos:line="33" pos:column="66"/></name></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></while>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">strbuf_release<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><operator pos:line="35" pos:column="32">&amp;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="33">sb<pos:position pos:line="35" pos:column="35"/></name></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><operator pos:line="37" pos:column="13">!<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">retval<pos:position pos:line="37" pos:column="20"/></name></expr>)<pos:position pos:line="37" pos:column="21"/></condition><then pos:line="37" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="17">commit_notes<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><name pos:line="38" pos:column="30">t<pos:position pos:line="38" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="33">"Notes removed by 'git notes remove'"<pos:position pos:line="38" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="72"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">free_notes<pos:position pos:line="39" pos:column="19"/></name><argument_list pos:line="39" pos:column="19">(<argument><expr><name pos:line="39" pos:column="20">t<pos:position pos:line="39" pos:column="21"/></name></expr></argument>)<pos:position pos:line="39" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt>
	<return pos:line="40" pos:column="9">return <expr><name pos:line="40" pos:column="16">retval<pos:position pos:line="40" pos:column="22"/></name></expr>;<pos:position pos:line="40" pos:column="23"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
