<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6864_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_check_inuse_chunk<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">mstate<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">m<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">mchunkptr<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">p<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list> <block pos:line="1" pos:column="57">{
  <expr_stmt><expr><call><name pos:line="2" pos:column="3">do_check_any_chunk<pos:position pos:line="2" pos:column="21"/></name><argument_list pos:line="2" pos:column="21">(<argument><expr><name pos:line="2" pos:column="22">m<pos:position pos:line="2" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="25">p<pos:position pos:line="2" pos:column="26"/></name></expr></argument>)<pos:position pos:line="2" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="2" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3" pos:column="3">assert<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><call><name pos:line="3" pos:column="10">cinuse<pos:position pos:line="3" pos:column="16"/></name><argument_list pos:line="3" pos:column="16">(<argument><expr><name pos:line="3" pos:column="17">p<pos:position pos:line="3" pos:column="18"/></name></expr></argument>)<pos:position pos:line="3" pos:column="19"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4" pos:column="3">assert<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><call><name pos:line="4" pos:column="10">next_pinuse<pos:position pos:line="4" pos:column="21"/></name><argument_list pos:line="4" pos:column="21">(<argument><expr><name pos:line="4" pos:column="22">p<pos:position pos:line="4" pos:column="23"/></name></expr></argument>)<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="26"/></expr_stmt>
  <comment type="block" pos:line="5" pos:column="3">/* If not pinuse and not mmapped, previous chunk has OK offset */</comment>
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">assert<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><call><name pos:line="6" pos:column="10">is_mmapped<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><name pos:line="6" pos:column="21">p<pos:position pos:line="6" pos:column="22"/></name></expr></argument>)<pos:position pos:line="6" pos:column="23"/></argument_list></call> <operator pos:line="6" pos:column="24">||<pos:position pos:line="6" pos:column="26"/></operator> <call><name pos:line="6" pos:column="27">pinuse<pos:position pos:line="6" pos:column="33"/></name><argument_list pos:line="6" pos:column="33">(<argument><expr><name pos:line="6" pos:column="34">p<pos:position pos:line="6" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></call> <operator pos:line="6" pos:column="37">||<pos:position pos:line="6" pos:column="39"/></operator> <call><name pos:line="6" pos:column="40">next_chunk<pos:position pos:line="6" pos:column="50"/></name><argument_list pos:line="6" pos:column="50">(<argument><expr><call><name pos:line="6" pos:column="51">prev_chunk<pos:position pos:line="6" pos:column="61"/></name><argument_list pos:line="6" pos:column="61">(<argument><expr><name pos:line="6" pos:column="62">p<pos:position pos:line="6" pos:column="63"/></name></expr></argument>)<pos:position pos:line="6" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="65"/></argument_list></call> <operator pos:line="6" pos:column="66">==<pos:position pos:line="6" pos:column="68"/></operator> <name pos:line="6" pos:column="69">p<pos:position pos:line="6" pos:column="70"/></name></expr></argument>)<pos:position pos:line="6" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="72"/></expr_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><call><name pos:line="7" pos:column="7">is_mmapped<pos:position pos:line="7" pos:column="17"/></name><argument_list pos:line="7" pos:column="17">(<argument><expr><name pos:line="7" pos:column="18">p<pos:position pos:line="7" pos:column="19"/></name></expr></argument>)<pos:position pos:line="7" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="21"/></condition><then pos:line="7" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="5">do_check_mmapped_chunk<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name pos:line="8" pos:column="28">m<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="31">p<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt></block></then></if>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
