<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5611_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_index_pack<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">argc<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier><modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">argv<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">prefix<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">fix_thin_pack<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><literal type="number" pos:line="3" pos:column="32">0<pos:position pos:line="3" pos:column="33"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="35">verify<pos:position pos:line="3" pos:column="41"/></name> <init pos:line="3" pos:column="42">= <expr><literal type="number" pos:line="3" pos:column="44">0<pos:position pos:line="3" pos:column="45"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="47">stat_only<pos:position pos:line="3" pos:column="56"/></name> <init pos:line="3" pos:column="57">= <expr><literal type="number" pos:line="3" pos:column="59">0<pos:position pos:line="3" pos:column="60"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="61"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">curr_index<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">index_name<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><name pos:line="5" pos:column="34">NULL<pos:position pos:line="5" pos:column="38"/></name></expr></init></decl>, <modifier pos:line="5" pos:column="40">*<pos:position pos:line="5" pos:column="41"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="41">pack_name<pos:position pos:line="5" pos:column="50"/></name> <init pos:line="5" pos:column="51">= <expr><name pos:line="5" pos:column="53">NULL<pos:position pos:line="5" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">keep_name<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><name pos:line="6" pos:column="33">NULL<pos:position pos:line="6" pos:column="37"/></name></expr></init></decl>, <modifier pos:line="6" pos:column="39">*<pos:position pos:line="6" pos:column="40"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="40">keep_msg<pos:position pos:line="6" pos:column="48"/></name> <init pos:line="6" pos:column="49">= <expr><name pos:line="6" pos:column="51">NULL<pos:position pos:line="6" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">index_name_buf<pos:position pos:line="7" pos:column="37"/></name> <init pos:line="7" pos:column="38">= <expr><name pos:line="7" pos:column="40">STRBUF_INIT<pos:position pos:line="7" pos:column="51"/></name></expr></init></decl>,
		      <decl><type ref="prev"/><name pos:line="8" pos:column="23">keep_name_buf<pos:position pos:line="8" pos:column="36"/></name> <init pos:line="8" pos:column="37">= <expr><name pos:line="8" pos:column="39">STRBUF_INIT<pos:position pos:line="8" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">pack_idx_entry<pos:position pos:line="9" pos:column="30"/></name></name> <modifier pos:line="9" pos:column="31">*<pos:position pos:line="9" pos:column="32"/></modifier><modifier pos:line="9" pos:column="32">*<pos:position pos:line="9" pos:column="33"/></modifier></type><name pos:line="9" pos:column="33">idx_objects<pos:position pos:line="9" pos:column="44"/></name></decl>;<pos:position pos:line="9" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">pack_idx_option<pos:position pos:line="10" pos:column="31"/></name></name></type> <name pos:line="10" pos:column="32">opts<pos:position pos:line="10" pos:column="36"/></name></decl>;<pos:position pos:line="10" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">unsigned<pos:position pos:line="11" pos:column="17"/></name> <name pos:line="11" pos:column="18">char<pos:position pos:line="11" pos:column="22"/></name></type> <name><name pos:line="11" pos:column="23">pack_sha1<pos:position pos:line="11" pos:column="32"/></name><index pos:line="11" pos:column="32">[<expr><literal type="number" pos:line="11" pos:column="33">20<pos:position pos:line="11" pos:column="35"/></literal></expr>]<pos:position pos:line="11" pos:column="36"/></index></name></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">unsigned<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">foreign_nr<pos:position pos:line="12" pos:column="28"/></name> <init pos:line="12" pos:column="29">= <expr><literal type="number" pos:line="12" pos:column="31">1<pos:position pos:line="12" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="33"/></decl_stmt>	<comment type="block" pos:line="12" pos:column="41">/* zero is a "good" value, assume bad */</comment>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">report_end_of_input<pos:position pos:line="13" pos:column="32"/></name> <init pos:line="13" pos:column="33">= <expr><literal type="number" pos:line="13" pos:column="35">0<pos:position pos:line="13" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="37"/></decl_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">argc<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">==<pos:position pos:line="15" pos:column="20"/></operator> <literal type="number" pos:line="15" pos:column="21">2<pos:position pos:line="15" pos:column="22"/></literal> <operator pos:line="15" pos:column="23">&amp;&amp;<pos:position pos:line="15" pos:column="33"/></operator> <operator pos:line="15" pos:column="26">!<pos:position pos:line="15" pos:column="27"/></operator><call><name pos:line="15" pos:column="27">strcmp<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">(<argument><expr><name><name pos:line="15" pos:column="34">argv<pos:position pos:line="15" pos:column="38"/></name><index pos:line="15" pos:column="38">[<expr><literal type="number" pos:line="15" pos:column="39">1<pos:position pos:line="15" pos:column="40"/></literal></expr>]<pos:position pos:line="15" pos:column="41"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="43">"-h"<pos:position pos:line="15" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="49"/></condition><then pos:line="15" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">usage<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">index_pack_usage<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="18" pos:column="9">check_replace_refs<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">fsck_options<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">walk<pos:position pos:line="19" pos:column="26"/></name></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <name pos:line="19" pos:column="29">mark_link<pos:position pos:line="19" pos:column="38"/></name></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="21" pos:column="9">reset_pack_idx_option<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><operator pos:line="21" pos:column="31">&amp;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="32">opts<pos:position pos:line="21" pos:column="36"/></name></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">git_config<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">git_index_pack_config<pos:position pos:line="22" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="43">&amp;<pos:position pos:line="22" pos:column="48"/></operator><name pos:line="22" pos:column="44">opts<pos:position pos:line="22" pos:column="48"/></name></expr></argument>)<pos:position pos:line="22" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="50"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">prefix<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">&amp;&amp;<pos:position pos:line="23" pos:column="30"/></operator> <call><name pos:line="23" pos:column="23">chdir<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">prefix<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="17">die<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><call><name pos:line="24" pos:column="21">_<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><literal type="string" pos:line="24" pos:column="23">"Cannot come back to cwd"<pos:position pos:line="24" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="51"/></expr_stmt></block></then></if>

	<for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">(<init><expr><name pos:line="26" pos:column="14">i<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="number" pos:line="26" pos:column="18">1<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></init> <condition><expr><name pos:line="26" pos:column="21">i<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">&lt;<pos:position pos:line="26" pos:column="27"/></operator> <name pos:line="26" pos:column="25">argc<pos:position pos:line="26" pos:column="29"/></name></expr>;<pos:position pos:line="26" pos:column="30"/></condition> <incr><expr><name pos:line="26" pos:column="31">i<pos:position pos:line="26" pos:column="32"/></name><operator pos:line="26" pos:column="32">++<pos:position pos:line="26" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="35"/></control> <block pos:line="26" pos:column="36">{
		<decl_stmt><decl><type><specifier pos:line="27" pos:column="17">const<pos:position pos:line="27" pos:column="22"/></specifier> <name pos:line="27" pos:column="23">char<pos:position pos:line="27" pos:column="27"/></name> <modifier pos:line="27" pos:column="28">*<pos:position pos:line="27" pos:column="29"/></modifier></type><name pos:line="27" pos:column="29">arg<pos:position pos:line="27" pos:column="32"/></name> <init pos:line="27" pos:column="33">= <expr><name><name pos:line="27" pos:column="35">argv<pos:position pos:line="27" pos:column="39"/></name><index pos:line="27" pos:column="39">[<expr><name pos:line="27" pos:column="40">i<pos:position pos:line="27" pos:column="41"/></name></expr>]<pos:position pos:line="27" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="27" pos:column="43"/></decl_stmt>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">*<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">arg<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">==<pos:position pos:line="29" pos:column="28"/></operator> <literal type="char" pos:line="29" pos:column="29">'-'<pos:position pos:line="29" pos:column="32"/></literal></expr>)<pos:position pos:line="29" pos:column="33"/></condition><then pos:line="29" pos:column="33"> <block pos:line="29" pos:column="34">{
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><operator pos:line="30" pos:column="29">!<pos:position pos:line="30" pos:column="30"/></operator><call><name pos:line="30" pos:column="30">strcmp<pos:position pos:line="30" pos:column="36"/></name><argument_list pos:line="30" pos:column="36">(<argument><expr><name pos:line="30" pos:column="37">arg<pos:position pos:line="30" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="42">"--stdin"<pos:position pos:line="30" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53"> <block pos:line="30" pos:column="54">{
				<expr_stmt><expr><name pos:line="31" pos:column="33">from_stdin<pos:position pos:line="31" pos:column="43"/></name> <operator pos:line="31" pos:column="44">=<pos:position pos:line="31" pos:column="45"/></operator> <literal type="number" pos:line="31" pos:column="46">1<pos:position pos:line="31" pos:column="47"/></literal></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>
			}<pos:position pos:line="32" pos:column="26"/></block></then> <elseif pos:line="32" pos:column="27">else <if pos:line="32" pos:column="32">if <condition pos:line="32" pos:column="35">(<expr><operator pos:line="32" pos:column="36">!<pos:position pos:line="32" pos:column="37"/></operator><call><name pos:line="32" pos:column="37">strcmp<pos:position pos:line="32" pos:column="43"/></name><argument_list pos:line="32" pos:column="43">(<argument><expr><name pos:line="32" pos:column="44">arg<pos:position pos:line="32" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="49">"--fix-thin"<pos:position pos:line="32" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="63"/></condition><then pos:line="32" pos:column="63"> <block pos:line="32" pos:column="64">{
				<expr_stmt><expr><name pos:line="33" pos:column="33">fix_thin_pack<pos:position pos:line="33" pos:column="46"/></name> <operator pos:line="33" pos:column="47">=<pos:position pos:line="33" pos:column="48"/></operator> <literal type="number" pos:line="33" pos:column="49">1<pos:position pos:line="33" pos:column="50"/></literal></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt>
			}<pos:position pos:line="34" pos:column="26"/></block></then></if></elseif> <elseif pos:line="34" pos:column="27">else <if pos:line="34" pos:column="32">if <condition pos:line="34" pos:column="35">(<expr><operator pos:line="34" pos:column="36">!<pos:position pos:line="34" pos:column="37"/></operator><call><name pos:line="34" pos:column="37">strcmp<pos:position pos:line="34" pos:column="43"/></name><argument_list pos:line="34" pos:column="43">(<argument><expr><name pos:line="34" pos:column="44">arg<pos:position pos:line="34" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="49">"--strict"<pos:position pos:line="34" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="61"/></condition><then pos:line="34" pos:column="61"> <block pos:line="34" pos:column="62">{
				<expr_stmt><expr><name pos:line="35" pos:column="33">strict<pos:position pos:line="35" pos:column="39"/></name> <operator pos:line="35" pos:column="40">=<pos:position pos:line="35" pos:column="41"/></operator> <literal type="number" pos:line="35" pos:column="42">1<pos:position pos:line="35" pos:column="43"/></literal></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>
				<expr_stmt><expr><name pos:line="36" pos:column="33">do_fsck_object<pos:position pos:line="36" pos:column="47"/></name> <operator pos:line="36" pos:column="48">=<pos:position pos:line="36" pos:column="49"/></operator> <literal type="number" pos:line="36" pos:column="50">1<pos:position pos:line="36" pos:column="51"/></literal></expr>;<pos:position pos:line="36" pos:column="52"/></expr_stmt>
			}<pos:position pos:line="37" pos:column="26"/></block></then></if></elseif> <elseif pos:line="37" pos:column="27">else <if pos:line="37" pos:column="32">if <condition pos:line="37" pos:column="35">(<expr><call><name pos:line="37" pos:column="36">skip_prefix<pos:position pos:line="37" pos:column="47"/></name><argument_list pos:line="37" pos:column="47">(<argument><expr><name pos:line="37" pos:column="48">arg<pos:position pos:line="37" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="53">"--strict="<pos:position pos:line="37" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="37" pos:column="66">&amp;<pos:position pos:line="37" pos:column="71"/></operator><name pos:line="37" pos:column="67">arg<pos:position pos:line="37" pos:column="70"/></name></expr></argument>)<pos:position pos:line="37" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="72"/></condition><then pos:line="37" pos:column="72"> <block pos:line="37" pos:column="73">{
				<expr_stmt><expr><name pos:line="38" pos:column="33">strict<pos:position pos:line="38" pos:column="39"/></name> <operator pos:line="38" pos:column="40">=<pos:position pos:line="38" pos:column="41"/></operator> <literal type="number" pos:line="38" pos:column="42">1<pos:position pos:line="38" pos:column="43"/></literal></expr>;<pos:position pos:line="38" pos:column="44"/></expr_stmt>
				<expr_stmt><expr><name pos:line="39" pos:column="33">do_fsck_object<pos:position pos:line="39" pos:column="47"/></name> <operator pos:line="39" pos:column="48">=<pos:position pos:line="39" pos:column="49"/></operator> <literal type="number" pos:line="39" pos:column="50">1<pos:position pos:line="39" pos:column="51"/></literal></expr>;<pos:position pos:line="39" pos:column="52"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="40" pos:column="33">fsck_set_msg_types<pos:position pos:line="40" pos:column="51"/></name><argument_list pos:line="40" pos:column="51">(<argument><expr><operator pos:line="40" pos:column="52">&amp;<pos:position pos:line="40" pos:column="57"/></operator><name pos:line="40" pos:column="53">fsck_options<pos:position pos:line="40" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="67">arg<pos:position pos:line="40" pos:column="70"/></name></expr></argument>)<pos:position pos:line="40" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="72"/></expr_stmt>
			}<pos:position pos:line="41" pos:column="26"/></block></then></if></elseif> <elseif pos:line="41" pos:column="27">else <if pos:line="41" pos:column="32">if <condition pos:line="41" pos:column="35">(<expr><operator pos:line="41" pos:column="36">!<pos:position pos:line="41" pos:column="37"/></operator><call><name pos:line="41" pos:column="37">strcmp<pos:position pos:line="41" pos:column="43"/></name><argument_list pos:line="41" pos:column="43">(<argument><expr><name pos:line="41" pos:column="44">arg<pos:position pos:line="41" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="49">"--check-self-contained-and-connected"<pos:position pos:line="41" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="88"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="89"/></condition><then pos:line="41" pos:column="89"> <block pos:line="41" pos:column="90">{
				<expr_stmt><expr><name pos:line="42" pos:column="33">strict<pos:position pos:line="42" pos:column="39"/></name> <operator pos:line="42" pos:column="40">=<pos:position pos:line="42" pos:column="41"/></operator> <literal type="number" pos:line="42" pos:column="42">1<pos:position pos:line="42" pos:column="43"/></literal></expr>;<pos:position pos:line="42" pos:column="44"/></expr_stmt>
				<expr_stmt><expr><name pos:line="43" pos:column="33">check_self_contained_and_connected<pos:position pos:line="43" pos:column="67"/></name> <operator pos:line="43" pos:column="68">=<pos:position pos:line="43" pos:column="69"/></operator> <literal type="number" pos:line="43" pos:column="70">1<pos:position pos:line="43" pos:column="71"/></literal></expr>;<pos:position pos:line="43" pos:column="72"/></expr_stmt>
			}<pos:position pos:line="44" pos:column="26"/></block></then></if></elseif> <elseif pos:line="44" pos:column="27">else <if pos:line="44" pos:column="32">if <condition pos:line="44" pos:column="35">(<expr><operator pos:line="44" pos:column="36">!<pos:position pos:line="44" pos:column="37"/></operator><call><name pos:line="44" pos:column="37">strcmp<pos:position pos:line="44" pos:column="43"/></name><argument_list pos:line="44" pos:column="43">(<argument><expr><name pos:line="44" pos:column="44">arg<pos:position pos:line="44" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="49">"--verify"<pos:position pos:line="44" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="61"/></condition><then pos:line="44" pos:column="61"> <block pos:line="44" pos:column="62">{
				<expr_stmt><expr><name pos:line="45" pos:column="33">verify<pos:position pos:line="45" pos:column="39"/></name> <operator pos:line="45" pos:column="40">=<pos:position pos:line="45" pos:column="41"/></operator> <literal type="number" pos:line="45" pos:column="42">1<pos:position pos:line="45" pos:column="43"/></literal></expr>;<pos:position pos:line="45" pos:column="44"/></expr_stmt>
			}<pos:position pos:line="46" pos:column="26"/></block></then></if></elseif> <elseif pos:line="46" pos:column="27">else <if pos:line="46" pos:column="32">if <condition pos:line="46" pos:column="35">(<expr><operator pos:line="46" pos:column="36">!<pos:position pos:line="46" pos:column="37"/></operator><call><name pos:line="46" pos:column="37">strcmp<pos:position pos:line="46" pos:column="43"/></name><argument_list pos:line="46" pos:column="43">(<argument><expr><name pos:line="46" pos:column="44">arg<pos:position pos:line="46" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="49">"--verify-stat"<pos:position pos:line="46" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="66"/></condition><then pos:line="46" pos:column="66"> <block pos:line="46" pos:column="67">{
				<expr_stmt><expr><name pos:line="47" pos:column="33">verify<pos:position pos:line="47" pos:column="39"/></name> <operator pos:line="47" pos:column="40">=<pos:position pos:line="47" pos:column="41"/></operator> <literal type="number" pos:line="47" pos:column="42">1<pos:position pos:line="47" pos:column="43"/></literal></expr>;<pos:position pos:line="47" pos:column="44"/></expr_stmt>
				<expr_stmt><expr><name pos:line="48" pos:column="33">show_stat<pos:position pos:line="48" pos:column="42"/></name> <operator pos:line="48" pos:column="43">=<pos:position pos:line="48" pos:column="44"/></operator> <literal type="number" pos:line="48" pos:column="45">1<pos:position pos:line="48" pos:column="46"/></literal></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt>
			}<pos:position pos:line="49" pos:column="26"/></block></then></if></elseif> <elseif pos:line="49" pos:column="27">else <if pos:line="49" pos:column="32">if <condition pos:line="49" pos:column="35">(<expr><operator pos:line="49" pos:column="36">!<pos:position pos:line="49" pos:column="37"/></operator><call><name pos:line="49" pos:column="37">strcmp<pos:position pos:line="49" pos:column="43"/></name><argument_list pos:line="49" pos:column="43">(<argument><expr><name pos:line="49" pos:column="44">arg<pos:position pos:line="49" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="49">"--verify-stat-only"<pos:position pos:line="49" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="71"/></condition><then pos:line="49" pos:column="71"> <block pos:line="49" pos:column="72">{
				<expr_stmt><expr><name pos:line="50" pos:column="33">verify<pos:position pos:line="50" pos:column="39"/></name> <operator pos:line="50" pos:column="40">=<pos:position pos:line="50" pos:column="41"/></operator> <literal type="number" pos:line="50" pos:column="42">1<pos:position pos:line="50" pos:column="43"/></literal></expr>;<pos:position pos:line="50" pos:column="44"/></expr_stmt>
				<expr_stmt><expr><name pos:line="51" pos:column="33">show_stat<pos:position pos:line="51" pos:column="42"/></name> <operator pos:line="51" pos:column="43">=<pos:position pos:line="51" pos:column="44"/></operator> <literal type="number" pos:line="51" pos:column="45">1<pos:position pos:line="51" pos:column="46"/></literal></expr>;<pos:position pos:line="51" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><name pos:line="52" pos:column="33">stat_only<pos:position pos:line="52" pos:column="42"/></name> <operator pos:line="52" pos:column="43">=<pos:position pos:line="52" pos:column="44"/></operator> <literal type="number" pos:line="52" pos:column="45">1<pos:position pos:line="52" pos:column="46"/></literal></expr>;<pos:position pos:line="52" pos:column="47"/></expr_stmt>
			}<pos:position pos:line="53" pos:column="26"/></block></then></if></elseif> <elseif pos:line="53" pos:column="27">else <if pos:line="53" pos:column="32">if <condition pos:line="53" pos:column="35">(<expr><operator pos:line="53" pos:column="36">!<pos:position pos:line="53" pos:column="37"/></operator><call><name pos:line="53" pos:column="37">strcmp<pos:position pos:line="53" pos:column="43"/></name><argument_list pos:line="53" pos:column="43">(<argument><expr><name pos:line="53" pos:column="44">arg<pos:position pos:line="53" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="49">"--keep"<pos:position pos:line="53" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="59"/></condition><then pos:line="53" pos:column="59"> <block pos:line="53" pos:column="60">{
				<expr_stmt><expr><name pos:line="54" pos:column="33">keep_msg<pos:position pos:line="54" pos:column="41"/></name> <operator pos:line="54" pos:column="42">=<pos:position pos:line="54" pos:column="43"/></operator> <literal type="string" pos:line="54" pos:column="44">""<pos:position pos:line="54" pos:column="46"/></literal></expr>;<pos:position pos:line="54" pos:column="47"/></expr_stmt>
			}<pos:position pos:line="55" pos:column="26"/></block></then></if></elseif> <elseif pos:line="55" pos:column="27">else <if pos:line="55" pos:column="32">if <condition pos:line="55" pos:column="35">(<expr><call><name pos:line="55" pos:column="36">starts_with<pos:position pos:line="55" pos:column="47"/></name><argument_list pos:line="55" pos:column="47">(<argument><expr><name pos:line="55" pos:column="48">arg<pos:position pos:line="55" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="53">"--keep="<pos:position pos:line="55" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="64"/></condition><then pos:line="55" pos:column="64"> <block pos:line="55" pos:column="65">{
				<expr_stmt><expr><name pos:line="56" pos:column="33">keep_msg<pos:position pos:line="56" pos:column="41"/></name> <operator pos:line="56" pos:column="42">=<pos:position pos:line="56" pos:column="43"/></operator> <name pos:line="56" pos:column="44">arg<pos:position pos:line="56" pos:column="47"/></name> <operator pos:line="56" pos:column="48">+<pos:position pos:line="56" pos:column="49"/></operator> <literal type="number" pos:line="56" pos:column="50">7<pos:position pos:line="56" pos:column="51"/></literal></expr>;<pos:position pos:line="56" pos:column="52"/></expr_stmt>
			}<pos:position pos:line="57" pos:column="26"/></block></then></if></elseif> <elseif pos:line="57" pos:column="27">else <if pos:line="57" pos:column="32">if <condition pos:line="57" pos:column="35">(<expr><call><name pos:line="57" pos:column="36">starts_with<pos:position pos:line="57" pos:column="47"/></name><argument_list pos:line="57" pos:column="47">(<argument><expr><name pos:line="57" pos:column="48">arg<pos:position pos:line="57" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="53">"--threads="<pos:position pos:line="57" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="67"/></condition><then pos:line="57" pos:column="67"> <block pos:line="57" pos:column="68">{
				<decl_stmt><decl><type><name pos:line="58" pos:column="33">char<pos:position pos:line="58" pos:column="37"/></name> <modifier pos:line="58" pos:column="38">*<pos:position pos:line="58" pos:column="39"/></modifier></type><name pos:line="58" pos:column="39">end<pos:position pos:line="58" pos:column="42"/></name></decl>;<pos:position pos:line="58" pos:column="43"/></decl_stmt>
				<expr_stmt><expr><name pos:line="59" pos:column="33">nr_threads<pos:position pos:line="59" pos:column="43"/></name> <operator pos:line="59" pos:column="44">=<pos:position pos:line="59" pos:column="45"/></operator> <call><name pos:line="59" pos:column="46">strtoul<pos:position pos:line="59" pos:column="53"/></name><argument_list pos:line="59" pos:column="53">(<argument><expr><name pos:line="59" pos:column="54">arg<pos:position pos:line="59" pos:column="57"/></name><operator pos:line="59" pos:column="57">+<pos:position pos:line="59" pos:column="58"/></operator><literal type="number" pos:line="59" pos:column="58">10<pos:position pos:line="59" pos:column="60"/></literal></expr></argument>, <argument><expr><operator pos:line="59" pos:column="62">&amp;<pos:position pos:line="59" pos:column="67"/></operator><name pos:line="59" pos:column="63">end<pos:position pos:line="59" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="68">0<pos:position pos:line="59" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="71"/></expr_stmt>
				<if pos:line="60" pos:column="33">if <condition pos:line="60" pos:column="36">(<expr><operator pos:line="60" pos:column="37">!<pos:position pos:line="60" pos:column="38"/></operator><name><name pos:line="60" pos:column="38">arg<pos:position pos:line="60" pos:column="41"/></name><index pos:line="60" pos:column="41">[<expr><literal type="number" pos:line="60" pos:column="42">10<pos:position pos:line="60" pos:column="44"/></literal></expr>]<pos:position pos:line="60" pos:column="45"/></index></name> <operator pos:line="60" pos:column="46">||<pos:position pos:line="60" pos:column="48"/></operator> <operator pos:line="60" pos:column="49">*<pos:position pos:line="60" pos:column="50"/></operator><name pos:line="60" pos:column="50">end<pos:position pos:line="60" pos:column="53"/></name> <operator pos:line="60" pos:column="54">||<pos:position pos:line="60" pos:column="56"/></operator> <name pos:line="60" pos:column="57">nr_threads<pos:position pos:line="60" pos:column="67"/></name> <operator pos:line="60" pos:column="68">&lt;<pos:position pos:line="60" pos:column="72"/></operator> <literal type="number" pos:line="60" pos:column="70">0<pos:position pos:line="60" pos:column="71"/></literal></expr>)<pos:position pos:line="60" pos:column="72"/></condition><then pos:line="60" pos:column="72">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="41">usage<pos:position pos:line="61" pos:column="46"/></name><argument_list pos:line="61" pos:column="46">(<argument><expr><name pos:line="61" pos:column="47">index_pack_usage<pos:position pos:line="61" pos:column="63"/></name></expr></argument>)<pos:position pos:line="61" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="65"/></expr_stmt></block></then></if>
<cpp:ifdef pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">ifdef<pos:position pos:line="62" pos:column="7"/></cpp:directive> <name pos:line="62" pos:column="8">NO_PTHREADS<pos:position pos:line="62" pos:column="19"/></name></cpp:ifdef>
				<if pos:line="63" pos:column="33">if <condition pos:line="63" pos:column="36">(<expr><name pos:line="63" pos:column="37">nr_threads<pos:position pos:line="63" pos:column="47"/></name> <operator pos:line="63" pos:column="48">!=<pos:position pos:line="63" pos:column="50"/></operator> <literal type="number" pos:line="63" pos:column="51">1<pos:position pos:line="63" pos:column="52"/></literal></expr>)<pos:position pos:line="63" pos:column="53"/></condition><then pos:line="63" pos:column="53">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="41">warning<pos:position pos:line="64" pos:column="48"/></name><argument_list pos:line="64" pos:column="48">(<argument><expr><call><name pos:line="64" pos:column="49">_<pos:position pos:line="64" pos:column="50"/></name><argument_list pos:line="64" pos:column="50">(<argument><expr><literal type="string" pos:line="64" pos:column="51">"no threads support, "<pos:position pos:line="64" pos:column="73"/></literal>
						  <literal type="string" pos:line="65" pos:column="51">"ignoring %s"<pos:position pos:line="65" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="65" pos:column="67">arg<pos:position pos:line="65" pos:column="70"/></name></expr></argument>)<pos:position pos:line="65" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="72"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name pos:line="66" pos:column="33">nr_threads<pos:position pos:line="66" pos:column="43"/></name> <operator pos:line="66" pos:column="44">=<pos:position pos:line="66" pos:column="45"/></operator> <literal type="number" pos:line="66" pos:column="46">1<pos:position pos:line="66" pos:column="47"/></literal></expr>;<pos:position pos:line="66" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif>
			}<pos:position pos:line="68" pos:column="26"/></block></then></if></elseif> <elseif pos:line="68" pos:column="27">else <if pos:line="68" pos:column="32">if <condition pos:line="68" pos:column="35">(<expr><call><name pos:line="68" pos:column="36">starts_with<pos:position pos:line="68" pos:column="47"/></name><argument_list pos:line="68" pos:column="47">(<argument><expr><name pos:line="68" pos:column="48">arg<pos:position pos:line="68" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="53">"--pack_header="<pos:position pos:line="68" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="71"/></condition><then pos:line="68" pos:column="71"> <block pos:line="68" pos:column="72">{
				<decl_stmt><decl><type><name><name pos:line="69" pos:column="33">struct<pos:position pos:line="69" pos:column="39"/></name> <name pos:line="69" pos:column="40">pack_header<pos:position pos:line="69" pos:column="51"/></name></name> <modifier pos:line="69" pos:column="52">*<pos:position pos:line="69" pos:column="53"/></modifier></type><name pos:line="69" pos:column="53">hdr<pos:position pos:line="69" pos:column="56"/></name></decl>;<pos:position pos:line="69" pos:column="57"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="70" pos:column="33">char<pos:position pos:line="70" pos:column="37"/></name> <modifier pos:line="70" pos:column="38">*<pos:position pos:line="70" pos:column="39"/></modifier></type><name pos:line="70" pos:column="39">c<pos:position pos:line="70" pos:column="40"/></name></decl>;<pos:position pos:line="70" pos:column="41"/></decl_stmt>

				<expr_stmt><expr><name pos:line="72" pos:column="33">hdr<pos:position pos:line="72" pos:column="36"/></name> <operator pos:line="72" pos:column="37">=<pos:position pos:line="72" pos:column="38"/></operator> <operator pos:line="72" pos:column="39">(<pos:position pos:line="72" pos:column="40"/></operator>struct <name pos:line="72" pos:column="47">pack_header<pos:position pos:line="72" pos:column="58"/></name> <operator pos:line="72" pos:column="59">*<pos:position pos:line="72" pos:column="60"/></operator><operator pos:line="72" pos:column="60">)<pos:position pos:line="72" pos:column="61"/></operator><name pos:line="72" pos:column="61">input_buffer<pos:position pos:line="72" pos:column="73"/></name></expr>;<pos:position pos:line="72" pos:column="74"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="73" pos:column="33">hdr<pos:position pos:line="73" pos:column="36"/></name><operator pos:line="73" pos:column="36">-&gt;<pos:position pos:line="73" pos:column="41"/></operator><name pos:line="73" pos:column="38">hdr_signature<pos:position pos:line="73" pos:column="51"/></name></name> <operator pos:line="73" pos:column="52">=<pos:position pos:line="73" pos:column="53"/></operator> <call><name pos:line="73" pos:column="54">htonl<pos:position pos:line="73" pos:column="59"/></name><argument_list pos:line="73" pos:column="59">(<argument><expr><name pos:line="73" pos:column="60">PACK_SIGNATURE<pos:position pos:line="73" pos:column="74"/></name></expr></argument>)<pos:position pos:line="73" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="76"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="74" pos:column="33">hdr<pos:position pos:line="74" pos:column="36"/></name><operator pos:line="74" pos:column="36">-&gt;<pos:position pos:line="74" pos:column="41"/></operator><name pos:line="74" pos:column="38">hdr_version<pos:position pos:line="74" pos:column="49"/></name></name> <operator pos:line="74" pos:column="50">=<pos:position pos:line="74" pos:column="51"/></operator> <call><name pos:line="74" pos:column="52">htonl<pos:position pos:line="74" pos:column="57"/></name><argument_list pos:line="74" pos:column="57">(<argument><expr><call><name pos:line="74" pos:column="58">strtoul<pos:position pos:line="74" pos:column="65"/></name><argument_list pos:line="74" pos:column="65">(<argument><expr><name pos:line="74" pos:column="66">arg<pos:position pos:line="74" pos:column="69"/></name> <operator pos:line="74" pos:column="70">+<pos:position pos:line="74" pos:column="71"/></operator> <literal type="number" pos:line="74" pos:column="72">14<pos:position pos:line="74" pos:column="74"/></literal></expr></argument>, <argument><expr><operator pos:line="74" pos:column="76">&amp;<pos:position pos:line="74" pos:column="81"/></operator><name pos:line="74" pos:column="77">c<pos:position pos:line="74" pos:column="78"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="80">10<pos:position pos:line="74" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="85"/></expr_stmt>
				<if pos:line="75" pos:column="33">if <condition pos:line="75" pos:column="36">(<expr><operator pos:line="75" pos:column="37">*<pos:position pos:line="75" pos:column="38"/></operator><name pos:line="75" pos:column="38">c<pos:position pos:line="75" pos:column="39"/></name> <operator pos:line="75" pos:column="40">!=<pos:position pos:line="75" pos:column="42"/></operator> <literal type="char" pos:line="75" pos:column="43">','<pos:position pos:line="75" pos:column="46"/></literal></expr>)<pos:position pos:line="75" pos:column="47"/></condition><then pos:line="75" pos:column="47">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="41">die<pos:position pos:line="76" pos:column="44"/></name><argument_list pos:line="76" pos:column="44">(<argument><expr><call><name pos:line="76" pos:column="45">_<pos:position pos:line="76" pos:column="46"/></name><argument_list pos:line="76" pos:column="46">(<argument><expr><literal type="string" pos:line="76" pos:column="47">"bad %s"<pos:position pos:line="76" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="76" pos:column="58">arg<pos:position pos:line="76" pos:column="61"/></name></expr></argument>)<pos:position pos:line="76" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="63"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name><name pos:line="77" pos:column="33">hdr<pos:position pos:line="77" pos:column="36"/></name><operator pos:line="77" pos:column="36">-&gt;<pos:position pos:line="77" pos:column="41"/></operator><name pos:line="77" pos:column="38">hdr_entries<pos:position pos:line="77" pos:column="49"/></name></name> <operator pos:line="77" pos:column="50">=<pos:position pos:line="77" pos:column="51"/></operator> <call><name pos:line="77" pos:column="52">htonl<pos:position pos:line="77" pos:column="57"/></name><argument_list pos:line="77" pos:column="57">(<argument><expr><call><name pos:line="77" pos:column="58">strtoul<pos:position pos:line="77" pos:column="65"/></name><argument_list pos:line="77" pos:column="65">(<argument><expr><name pos:line="77" pos:column="66">c<pos:position pos:line="77" pos:column="67"/></name> <operator pos:line="77" pos:column="68">+<pos:position pos:line="77" pos:column="69"/></operator> <literal type="number" pos:line="77" pos:column="70">1<pos:position pos:line="77" pos:column="71"/></literal></expr></argument>, <argument><expr><operator pos:line="77" pos:column="73">&amp;<pos:position pos:line="77" pos:column="78"/></operator><name pos:line="77" pos:column="74">c<pos:position pos:line="77" pos:column="75"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="77">10<pos:position pos:line="77" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="77" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="82"/></expr_stmt>
				<if pos:line="78" pos:column="33">if <condition pos:line="78" pos:column="36">(<expr><operator pos:line="78" pos:column="37">*<pos:position pos:line="78" pos:column="38"/></operator><name pos:line="78" pos:column="38">c<pos:position pos:line="78" pos:column="39"/></name></expr>)<pos:position pos:line="78" pos:column="40"/></condition><then pos:line="78" pos:column="40">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="41">die<pos:position pos:line="79" pos:column="44"/></name><argument_list pos:line="79" pos:column="44">(<argument><expr><call><name pos:line="79" pos:column="45">_<pos:position pos:line="79" pos:column="46"/></name><argument_list pos:line="79" pos:column="46">(<argument><expr><literal type="string" pos:line="79" pos:column="47">"bad %s"<pos:position pos:line="79" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="79" pos:column="58">arg<pos:position pos:line="79" pos:column="61"/></name></expr></argument>)<pos:position pos:line="79" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="63"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name pos:line="80" pos:column="33">input_len<pos:position pos:line="80" pos:column="42"/></name> <operator pos:line="80" pos:column="43">=<pos:position pos:line="80" pos:column="44"/></operator> <sizeof pos:line="80" pos:column="45">sizeof<argument_list pos:line="80" pos:column="51">(<argument><expr><operator pos:line="80" pos:column="52">*<pos:position pos:line="80" pos:column="53"/></operator><name pos:line="80" pos:column="53">hdr<pos:position pos:line="80" pos:column="56"/></name></expr></argument>)<pos:position pos:line="80" pos:column="57"/></argument_list></sizeof></expr>;<pos:position pos:line="80" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="81" pos:column="26"/></block></then></if></elseif> <elseif pos:line="81" pos:column="27">else <if pos:line="81" pos:column="32">if <condition pos:line="81" pos:column="35">(<expr><operator pos:line="81" pos:column="36">!<pos:position pos:line="81" pos:column="37"/></operator><call><name pos:line="81" pos:column="37">strcmp<pos:position pos:line="81" pos:column="43"/></name><argument_list pos:line="81" pos:column="43">(<argument><expr><name pos:line="81" pos:column="44">arg<pos:position pos:line="81" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="49">"-v"<pos:position pos:line="81" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="55"/></condition><then pos:line="81" pos:column="55"> <block pos:line="81" pos:column="56">{
				<expr_stmt><expr><name pos:line="82" pos:column="33">verbose<pos:position pos:line="82" pos:column="40"/></name> <operator pos:line="82" pos:column="41">=<pos:position pos:line="82" pos:column="42"/></operator> <literal type="number" pos:line="82" pos:column="43">1<pos:position pos:line="82" pos:column="44"/></literal></expr>;<pos:position pos:line="82" pos:column="45"/></expr_stmt>
			}<pos:position pos:line="83" pos:column="26"/></block></then></if></elseif> <elseif pos:line="83" pos:column="27">else <if pos:line="83" pos:column="32">if <condition pos:line="83" pos:column="35">(<expr><operator pos:line="83" pos:column="36">!<pos:position pos:line="83" pos:column="37"/></operator><call><name pos:line="83" pos:column="37">strcmp<pos:position pos:line="83" pos:column="43"/></name><argument_list pos:line="83" pos:column="43">(<argument><expr><name pos:line="83" pos:column="44">arg<pos:position pos:line="83" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="49">"--show-resolving-progress"<pos:position pos:line="83" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="78"/></condition><then pos:line="83" pos:column="78"> <block pos:line="83" pos:column="79">{
				<expr_stmt><expr><name pos:line="84" pos:column="33">show_resolving_progress<pos:position pos:line="84" pos:column="56"/></name> <operator pos:line="84" pos:column="57">=<pos:position pos:line="84" pos:column="58"/></operator> <literal type="number" pos:line="84" pos:column="59">1<pos:position pos:line="84" pos:column="60"/></literal></expr>;<pos:position pos:line="84" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="85" pos:column="26"/></block></then></if></elseif> <elseif pos:line="85" pos:column="27">else <if pos:line="85" pos:column="32">if <condition pos:line="85" pos:column="35">(<expr><operator pos:line="85" pos:column="36">!<pos:position pos:line="85" pos:column="37"/></operator><call><name pos:line="85" pos:column="37">strcmp<pos:position pos:line="85" pos:column="43"/></name><argument_list pos:line="85" pos:column="43">(<argument><expr><name pos:line="85" pos:column="44">arg<pos:position pos:line="85" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="49">"--report-end-of-input"<pos:position pos:line="85" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="85" pos:column="74"/></condition><then pos:line="85" pos:column="74"> <block pos:line="85" pos:column="75">{
				<expr_stmt><expr><name pos:line="86" pos:column="33">report_end_of_input<pos:position pos:line="86" pos:column="52"/></name> <operator pos:line="86" pos:column="53">=<pos:position pos:line="86" pos:column="54"/></operator> <literal type="number" pos:line="86" pos:column="55">1<pos:position pos:line="86" pos:column="56"/></literal></expr>;<pos:position pos:line="86" pos:column="57"/></expr_stmt>
			}<pos:position pos:line="87" pos:column="26"/></block></then></if></elseif> <elseif pos:line="87" pos:column="27">else <if pos:line="87" pos:column="32">if <condition pos:line="87" pos:column="35">(<expr><operator pos:line="87" pos:column="36">!<pos:position pos:line="87" pos:column="37"/></operator><call><name pos:line="87" pos:column="37">strcmp<pos:position pos:line="87" pos:column="43"/></name><argument_list pos:line="87" pos:column="43">(<argument><expr><name pos:line="87" pos:column="44">arg<pos:position pos:line="87" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="49">"-o"<pos:position pos:line="87" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="55"/></condition><then pos:line="87" pos:column="55"> <block pos:line="87" pos:column="56">{
				<if pos:line="88" pos:column="33">if <condition pos:line="88" pos:column="36">(<expr><name pos:line="88" pos:column="37">index_name<pos:position pos:line="88" pos:column="47"/></name> <operator pos:line="88" pos:column="48">||<pos:position pos:line="88" pos:column="50"/></operator> <operator pos:line="88" pos:column="51">(<pos:position pos:line="88" pos:column="52"/></operator><name pos:line="88" pos:column="52">i<pos:position pos:line="88" pos:column="53"/></name><operator pos:line="88" pos:column="53">+<pos:position pos:line="88" pos:column="54"/></operator><literal type="number" pos:line="88" pos:column="54">1<pos:position pos:line="88" pos:column="55"/></literal><operator pos:line="88" pos:column="55">)<pos:position pos:line="88" pos:column="56"/></operator> <operator pos:line="88" pos:column="57">&gt;=<pos:position pos:line="88" pos:column="62"/></operator> <name pos:line="88" pos:column="60">argc<pos:position pos:line="88" pos:column="64"/></name></expr>)<pos:position pos:line="88" pos:column="65"/></condition><then pos:line="88" pos:column="65">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="41">usage<pos:position pos:line="89" pos:column="46"/></name><argument_list pos:line="89" pos:column="46">(<argument><expr><name pos:line="89" pos:column="47">index_pack_usage<pos:position pos:line="89" pos:column="63"/></name></expr></argument>)<pos:position pos:line="89" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="65"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name pos:line="90" pos:column="33">index_name<pos:position pos:line="90" pos:column="43"/></name> <operator pos:line="90" pos:column="44">=<pos:position pos:line="90" pos:column="45"/></operator> <name><name pos:line="90" pos:column="46">argv<pos:position pos:line="90" pos:column="50"/></name><index pos:line="90" pos:column="50">[<expr><operator pos:line="90" pos:column="51">++<pos:position pos:line="90" pos:column="53"/></operator><name pos:line="90" pos:column="53">i<pos:position pos:line="90" pos:column="54"/></name></expr>]<pos:position pos:line="90" pos:column="55"/></index></name></expr>;<pos:position pos:line="90" pos:column="56"/></expr_stmt>
			}<pos:position pos:line="91" pos:column="26"/></block></then></if></elseif> <elseif pos:line="91" pos:column="27">else <if pos:line="91" pos:column="32">if <condition pos:line="91" pos:column="35">(<expr><call><name pos:line="91" pos:column="36">starts_with<pos:position pos:line="91" pos:column="47"/></name><argument_list pos:line="91" pos:column="47">(<argument><expr><name pos:line="91" pos:column="48">arg<pos:position pos:line="91" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="53">"--index-version="<pos:position pos:line="91" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="73"/></condition><then pos:line="91" pos:column="73"> <block pos:line="91" pos:column="74">{
				<decl_stmt><decl><type><name pos:line="92" pos:column="33">char<pos:position pos:line="92" pos:column="37"/></name> <modifier pos:line="92" pos:column="38">*<pos:position pos:line="92" pos:column="39"/></modifier></type><name pos:line="92" pos:column="39">c<pos:position pos:line="92" pos:column="40"/></name></decl>;<pos:position pos:line="92" pos:column="41"/></decl_stmt>
				<expr_stmt><expr><name><name pos:line="93" pos:column="33">opts<pos:position pos:line="93" pos:column="37"/></name><operator pos:line="93" pos:column="37">.<pos:position pos:line="93" pos:column="38"/></operator><name pos:line="93" pos:column="38">version<pos:position pos:line="93" pos:column="45"/></name></name> <operator pos:line="93" pos:column="46">=<pos:position pos:line="93" pos:column="47"/></operator> <call><name pos:line="93" pos:column="48">strtoul<pos:position pos:line="93" pos:column="55"/></name><argument_list pos:line="93" pos:column="55">(<argument><expr><name pos:line="93" pos:column="56">arg<pos:position pos:line="93" pos:column="59"/></name> <operator pos:line="93" pos:column="60">+<pos:position pos:line="93" pos:column="61"/></operator> <literal type="number" pos:line="93" pos:column="62">16<pos:position pos:line="93" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="93" pos:column="66">&amp;<pos:position pos:line="93" pos:column="71"/></operator><name pos:line="93" pos:column="67">c<pos:position pos:line="93" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="70">10<pos:position pos:line="93" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="74"/></expr_stmt>
				<if pos:line="94" pos:column="33">if <condition pos:line="94" pos:column="36">(<expr><name><name pos:line="94" pos:column="37">opts<pos:position pos:line="94" pos:column="41"/></name><operator pos:line="94" pos:column="41">.<pos:position pos:line="94" pos:column="42"/></operator><name pos:line="94" pos:column="42">version<pos:position pos:line="94" pos:column="49"/></name></name> <operator pos:line="94" pos:column="50">&gt;<pos:position pos:line="94" pos:column="54"/></operator> <literal type="number" pos:line="94" pos:column="52">2<pos:position pos:line="94" pos:column="53"/></literal></expr>)<pos:position pos:line="94" pos:column="54"/></condition><then pos:line="94" pos:column="54">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="95" pos:column="41">die<pos:position pos:line="95" pos:column="44"/></name><argument_list pos:line="95" pos:column="44">(<argument><expr><call><name pos:line="95" pos:column="45">_<pos:position pos:line="95" pos:column="46"/></name><argument_list pos:line="95" pos:column="46">(<argument><expr><literal type="string" pos:line="95" pos:column="47">"bad %s"<pos:position pos:line="95" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="95" pos:column="58">arg<pos:position pos:line="95" pos:column="61"/></name></expr></argument>)<pos:position pos:line="95" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="63"/></expr_stmt></block></then></if>
				<if pos:line="96" pos:column="33">if <condition pos:line="96" pos:column="36">(<expr><operator pos:line="96" pos:column="37">*<pos:position pos:line="96" pos:column="38"/></operator><name pos:line="96" pos:column="38">c<pos:position pos:line="96" pos:column="39"/></name> <operator pos:line="96" pos:column="40">==<pos:position pos:line="96" pos:column="42"/></operator> <literal type="char" pos:line="96" pos:column="43">','<pos:position pos:line="96" pos:column="46"/></literal></expr>)<pos:position pos:line="96" pos:column="47"/></condition><then pos:line="96" pos:column="47">
					<block type="pseudo"><expr_stmt><expr><name><name pos:line="97" pos:column="41">opts<pos:position pos:line="97" pos:column="45"/></name><operator pos:line="97" pos:column="45">.<pos:position pos:line="97" pos:column="46"/></operator><name pos:line="97" pos:column="46">off32_limit<pos:position pos:line="97" pos:column="57"/></name></name> <operator pos:line="97" pos:column="58">=<pos:position pos:line="97" pos:column="59"/></operator> <call><name pos:line="97" pos:column="60">strtoul<pos:position pos:line="97" pos:column="67"/></name><argument_list pos:line="97" pos:column="67">(<argument><expr><name pos:line="97" pos:column="68">c<pos:position pos:line="97" pos:column="69"/></name><operator pos:line="97" pos:column="69">+<pos:position pos:line="97" pos:column="70"/></operator><literal type="number" pos:line="97" pos:column="70">1<pos:position pos:line="97" pos:column="71"/></literal></expr></argument>, <argument><expr><operator pos:line="97" pos:column="73">&amp;<pos:position pos:line="97" pos:column="78"/></operator><name pos:line="97" pos:column="74">c<pos:position pos:line="97" pos:column="75"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="97" pos:column="77">0<pos:position pos:line="97" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="80"/></expr_stmt></block></then></if>
				<if pos:line="98" pos:column="33">if <condition pos:line="98" pos:column="36">(<expr><operator pos:line="98" pos:column="37">*<pos:position pos:line="98" pos:column="38"/></operator><name pos:line="98" pos:column="38">c<pos:position pos:line="98" pos:column="39"/></name> <operator pos:line="98" pos:column="40">||<pos:position pos:line="98" pos:column="42"/></operator> <name><name pos:line="98" pos:column="43">opts<pos:position pos:line="98" pos:column="47"/></name><operator pos:line="98" pos:column="47">.<pos:position pos:line="98" pos:column="48"/></operator><name pos:line="98" pos:column="48">off32_limit<pos:position pos:line="98" pos:column="59"/></name></name> <operator pos:line="98" pos:column="60">&amp;<pos:position pos:line="98" pos:column="65"/></operator> <literal type="number" pos:line="98" pos:column="62">0x80000000<pos:position pos:line="98" pos:column="72"/></literal></expr>)<pos:position pos:line="98" pos:column="73"/></condition><then pos:line="98" pos:column="73">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="99" pos:column="41">die<pos:position pos:line="99" pos:column="44"/></name><argument_list pos:line="99" pos:column="44">(<argument><expr><call><name pos:line="99" pos:column="45">_<pos:position pos:line="99" pos:column="46"/></name><argument_list pos:line="99" pos:column="46">(<argument><expr><literal type="string" pos:line="99" pos:column="47">"bad %s"<pos:position pos:line="99" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="99" pos:column="58">arg<pos:position pos:line="99" pos:column="61"/></name></expr></argument>)<pos:position pos:line="99" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="63"/></expr_stmt></block></then></if>
			}<pos:position pos:line="100" pos:column="26"/></block></then></if></elseif> <elseif pos:line="100" pos:column="27">else <if pos:line="100" pos:column="32">if <condition pos:line="100" pos:column="35">(<expr><call><name pos:line="100" pos:column="36">skip_prefix<pos:position pos:line="100" pos:column="47"/></name><argument_list pos:line="100" pos:column="47">(<argument><expr><name pos:line="100" pos:column="48">arg<pos:position pos:line="100" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="53">"--max-input-size="<pos:position pos:line="100" pos:column="72"/></literal></expr></argument>, <argument><expr><operator pos:line="100" pos:column="74">&amp;<pos:position pos:line="100" pos:column="79"/></operator><name pos:line="100" pos:column="75">arg<pos:position pos:line="100" pos:column="78"/></name></expr></argument>)<pos:position pos:line="100" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="100" pos:column="80"/></condition><then pos:line="100" pos:column="80"> <block pos:line="100" pos:column="81">{
				<expr_stmt><expr><name pos:line="101" pos:column="33">max_input_size<pos:position pos:line="101" pos:column="47"/></name> <operator pos:line="101" pos:column="48">=<pos:position pos:line="101" pos:column="49"/></operator> <call><name pos:line="101" pos:column="50">strtoumax<pos:position pos:line="101" pos:column="59"/></name><argument_list pos:line="101" pos:column="59">(<argument><expr><name pos:line="101" pos:column="60">arg<pos:position pos:line="101" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="65">NULL<pos:position pos:line="101" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="101" pos:column="71">10<pos:position pos:line="101" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="75"/></expr_stmt>
			}<pos:position pos:line="102" pos:column="26"/></block></then></if></elseif> <else pos:line="102" pos:column="27">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="103" pos:column="33">usage<pos:position pos:line="103" pos:column="38"/></name><argument_list pos:line="103" pos:column="38">(<argument><expr><name pos:line="103" pos:column="39">index_pack_usage<pos:position pos:line="103" pos:column="55"/></name></expr></argument>)<pos:position pos:line="103" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="57"/></expr_stmt></block></else></if>
			<continue pos:line="104" pos:column="25">continue;<pos:position pos:line="104" pos:column="34"/></continue>
		}<pos:position pos:line="105" pos:column="18"/></block></then></if>

		<if pos:line="107" pos:column="17">if <condition pos:line="107" pos:column="20">(<expr><name pos:line="107" pos:column="21">pack_name<pos:position pos:line="107" pos:column="30"/></name></expr>)<pos:position pos:line="107" pos:column="31"/></condition><then pos:line="107" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="108" pos:column="25">usage<pos:position pos:line="108" pos:column="30"/></name><argument_list pos:line="108" pos:column="30">(<argument><expr><name pos:line="108" pos:column="31">index_pack_usage<pos:position pos:line="108" pos:column="47"/></name></expr></argument>)<pos:position pos:line="108" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="49"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="109" pos:column="17">pack_name<pos:position pos:line="109" pos:column="26"/></name> <operator pos:line="109" pos:column="27">=<pos:position pos:line="109" pos:column="28"/></operator> <name pos:line="109" pos:column="29">arg<pos:position pos:line="109" pos:column="32"/></name></expr>;<pos:position pos:line="109" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="110" pos:column="10"/></block></for>

	<if pos:line="112" pos:column="9">if <condition pos:line="112" pos:column="12">(<expr><operator pos:line="112" pos:column="13">!<pos:position pos:line="112" pos:column="14"/></operator><name pos:line="112" pos:column="14">pack_name<pos:position pos:line="112" pos:column="23"/></name> <operator pos:line="112" pos:column="24">&amp;&amp;<pos:position pos:line="112" pos:column="34"/></operator> <operator pos:line="112" pos:column="27">!<pos:position pos:line="112" pos:column="28"/></operator><name pos:line="112" pos:column="28">from_stdin<pos:position pos:line="112" pos:column="38"/></name></expr>)<pos:position pos:line="112" pos:column="39"/></condition><then pos:line="112" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="113" pos:column="17">usage<pos:position pos:line="113" pos:column="22"/></name><argument_list pos:line="113" pos:column="22">(<argument><expr><name pos:line="113" pos:column="23">index_pack_usage<pos:position pos:line="113" pos:column="39"/></name></expr></argument>)<pos:position pos:line="113" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="41"/></expr_stmt></block></then></if>
	<if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><name pos:line="114" pos:column="13">fix_thin_pack<pos:position pos:line="114" pos:column="26"/></name> <operator pos:line="114" pos:column="27">&amp;&amp;<pos:position pos:line="114" pos:column="37"/></operator> <operator pos:line="114" pos:column="30">!<pos:position pos:line="114" pos:column="31"/></operator><name pos:line="114" pos:column="31">from_stdin<pos:position pos:line="114" pos:column="41"/></name></expr>)<pos:position pos:line="114" pos:column="42"/></condition><then pos:line="114" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="115" pos:column="17">die<pos:position pos:line="115" pos:column="20"/></name><argument_list pos:line="115" pos:column="20">(<argument><expr><call><name pos:line="115" pos:column="21">_<pos:position pos:line="115" pos:column="22"/></name><argument_list pos:line="115" pos:column="22">(<argument><expr><literal type="string" pos:line="115" pos:column="23">"--fix-thin cannot be used without --stdin"<pos:position pos:line="115" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="115" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="69"/></expr_stmt></block></then></if>
	<if pos:line="116" pos:column="9">if <condition pos:line="116" pos:column="12">(<expr><name pos:line="116" pos:column="13">from_stdin<pos:position pos:line="116" pos:column="23"/></name> <operator pos:line="116" pos:column="24">&amp;&amp;<pos:position pos:line="116" pos:column="34"/></operator> <operator pos:line="116" pos:column="27">!<pos:position pos:line="116" pos:column="28"/></operator><name><name pos:line="116" pos:column="28">startup_info<pos:position pos:line="116" pos:column="40"/></name><operator pos:line="116" pos:column="40">-&gt;<pos:position pos:line="116" pos:column="45"/></operator><name pos:line="116" pos:column="42">have_repository<pos:position pos:line="116" pos:column="57"/></name></name></expr>)<pos:position pos:line="116" pos:column="58"/></condition><then pos:line="116" pos:column="58">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="117" pos:column="17">die<pos:position pos:line="117" pos:column="20"/></name><argument_list pos:line="117" pos:column="20">(<argument><expr><call><name pos:line="117" pos:column="21">_<pos:position pos:line="117" pos:column="22"/></name><argument_list pos:line="117" pos:column="22">(<argument><expr><literal type="string" pos:line="117" pos:column="23">"--stdin requires a git repository"<pos:position pos:line="117" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="117" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="61"/></expr_stmt></block></then></if>
	<if pos:line="118" pos:column="9">if <condition pos:line="118" pos:column="12">(<expr><operator pos:line="118" pos:column="13">!<pos:position pos:line="118" pos:column="14"/></operator><name pos:line="118" pos:column="14">index_name<pos:position pos:line="118" pos:column="24"/></name> <operator pos:line="118" pos:column="25">&amp;&amp;<pos:position pos:line="118" pos:column="35"/></operator> <name pos:line="118" pos:column="28">pack_name<pos:position pos:line="118" pos:column="37"/></name></expr>)<pos:position pos:line="118" pos:column="38"/></condition><then pos:line="118" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><name pos:line="119" pos:column="17">index_name<pos:position pos:line="119" pos:column="27"/></name> <operator pos:line="119" pos:column="28">=<pos:position pos:line="119" pos:column="29"/></operator> <call><name pos:line="119" pos:column="30">derive_filename<pos:position pos:line="119" pos:column="45"/></name><argument_list pos:line="119" pos:column="45">(<argument><expr><name pos:line="119" pos:column="46">pack_name<pos:position pos:line="119" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="57">".idx"<pos:position pos:line="119" pos:column="63"/></literal></expr></argument>, <argument><expr><operator pos:line="119" pos:column="65">&amp;<pos:position pos:line="119" pos:column="70"/></operator><name pos:line="119" pos:column="66">index_name_buf<pos:position pos:line="119" pos:column="80"/></name></expr></argument>)<pos:position pos:line="119" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="82"/></expr_stmt></block></then></if>
	<if pos:line="120" pos:column="9">if <condition pos:line="120" pos:column="12">(<expr><name pos:line="120" pos:column="13">keep_msg<pos:position pos:line="120" pos:column="21"/></name> <operator pos:line="120" pos:column="22">&amp;&amp;<pos:position pos:line="120" pos:column="32"/></operator> <operator pos:line="120" pos:column="25">!<pos:position pos:line="120" pos:column="26"/></operator><name pos:line="120" pos:column="26">keep_name<pos:position pos:line="120" pos:column="35"/></name> <operator pos:line="120" pos:column="36">&amp;&amp;<pos:position pos:line="120" pos:column="46"/></operator> <name pos:line="120" pos:column="39">pack_name<pos:position pos:line="120" pos:column="48"/></name></expr>)<pos:position pos:line="120" pos:column="49"/></condition><then pos:line="120" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><name pos:line="121" pos:column="17">keep_name<pos:position pos:line="121" pos:column="26"/></name> <operator pos:line="121" pos:column="27">=<pos:position pos:line="121" pos:column="28"/></operator> <call><name pos:line="121" pos:column="29">derive_filename<pos:position pos:line="121" pos:column="44"/></name><argument_list pos:line="121" pos:column="44">(<argument><expr><name pos:line="121" pos:column="45">pack_name<pos:position pos:line="121" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="121" pos:column="56">".keep"<pos:position pos:line="121" pos:column="63"/></literal></expr></argument>, <argument><expr><operator pos:line="121" pos:column="65">&amp;<pos:position pos:line="121" pos:column="70"/></operator><name pos:line="121" pos:column="66">keep_name_buf<pos:position pos:line="121" pos:column="79"/></name></expr></argument>)<pos:position pos:line="121" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="81"/></expr_stmt></block></then></if>

	<if pos:line="123" pos:column="9">if <condition pos:line="123" pos:column="12">(<expr><name pos:line="123" pos:column="13">verify<pos:position pos:line="123" pos:column="19"/></name></expr>)<pos:position pos:line="123" pos:column="20"/></condition><then pos:line="123" pos:column="20"> <block pos:line="123" pos:column="21">{
		<if pos:line="124" pos:column="17">if <condition pos:line="124" pos:column="20">(<expr><operator pos:line="124" pos:column="21">!<pos:position pos:line="124" pos:column="22"/></operator><name pos:line="124" pos:column="22">index_name<pos:position pos:line="124" pos:column="32"/></name></expr>)<pos:position pos:line="124" pos:column="33"/></condition><then pos:line="124" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="125" pos:column="25">die<pos:position pos:line="125" pos:column="28"/></name><argument_list pos:line="125" pos:column="28">(<argument><expr><call><name pos:line="125" pos:column="29">_<pos:position pos:line="125" pos:column="30"/></name><argument_list pos:line="125" pos:column="30">(<argument><expr><literal type="string" pos:line="125" pos:column="31">"--verify with no packfile name given"<pos:position pos:line="125" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="125" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="72"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="126" pos:column="17">read_idx_option<pos:position pos:line="126" pos:column="32"/></name><argument_list pos:line="126" pos:column="32">(<argument><expr><operator pos:line="126" pos:column="33">&amp;<pos:position pos:line="126" pos:column="38"/></operator><name pos:line="126" pos:column="34">opts<pos:position pos:line="126" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="40">index_name<pos:position pos:line="126" pos:column="50"/></name></expr></argument>)<pos:position pos:line="126" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="127" pos:column="17">opts<pos:position pos:line="127" pos:column="21"/></name><operator pos:line="127" pos:column="21">.<pos:position pos:line="127" pos:column="22"/></operator><name pos:line="127" pos:column="22">flags<pos:position pos:line="127" pos:column="27"/></name></name> <operator pos:line="127" pos:column="28">|=<pos:position pos:line="127" pos:column="30"/></operator> <name pos:line="127" pos:column="31">WRITE_IDX_VERIFY<pos:position pos:line="127" pos:column="47"/></name> <operator pos:line="127" pos:column="48">|<pos:position pos:line="127" pos:column="49"/></operator> <name pos:line="127" pos:column="50">WRITE_IDX_STRICT<pos:position pos:line="127" pos:column="66"/></name></expr>;<pos:position pos:line="127" pos:column="67"/></expr_stmt>
	}<pos:position pos:line="128" pos:column="10"/></block></then></if>
	<if pos:line="129" pos:column="9">if <condition pos:line="129" pos:column="12">(<expr><name pos:line="129" pos:column="13">strict<pos:position pos:line="129" pos:column="19"/></name></expr>)<pos:position pos:line="129" pos:column="20"/></condition><then pos:line="129" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="130" pos:column="17">opts<pos:position pos:line="130" pos:column="21"/></name><operator pos:line="130" pos:column="21">.<pos:position pos:line="130" pos:column="22"/></operator><name pos:line="130" pos:column="22">flags<pos:position pos:line="130" pos:column="27"/></name></name> <operator pos:line="130" pos:column="28">|=<pos:position pos:line="130" pos:column="30"/></operator> <name pos:line="130" pos:column="31">WRITE_IDX_STRICT<pos:position pos:line="130" pos:column="47"/></name></expr>;<pos:position pos:line="130" pos:column="48"/></expr_stmt></block></then></if>

<cpp:ifndef pos:line="132" pos:column="1">#<cpp:directive pos:line="132" pos:column="2">ifndef<pos:position pos:line="132" pos:column="8"/></cpp:directive> <name pos:line="132" pos:column="9">NO_PTHREADS<pos:position pos:line="132" pos:column="20"/></name></cpp:ifndef>
	<if pos:line="133" pos:column="9">if <condition pos:line="133" pos:column="12">(<expr><operator pos:line="133" pos:column="13">!<pos:position pos:line="133" pos:column="14"/></operator><name pos:line="133" pos:column="14">nr_threads<pos:position pos:line="133" pos:column="24"/></name></expr>)<pos:position pos:line="133" pos:column="25"/></condition><then pos:line="133" pos:column="25"> <block pos:line="133" pos:column="26">{
		<expr_stmt><expr><name pos:line="134" pos:column="17">nr_threads<pos:position pos:line="134" pos:column="27"/></name> <operator pos:line="134" pos:column="28">=<pos:position pos:line="134" pos:column="29"/></operator> <call><name pos:line="134" pos:column="30">online_cpus<pos:position pos:line="134" pos:column="41"/></name><argument_list pos:line="134" pos:column="41">()<pos:position pos:line="134" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="44"/></expr_stmt>
		<comment type="block" pos:line="135" pos:column="17">/* An experiment showed that more threads does not mean faster */</comment>
		<if pos:line="136" pos:column="17">if <condition pos:line="136" pos:column="20">(<expr><name pos:line="136" pos:column="21">nr_threads<pos:position pos:line="136" pos:column="31"/></name> <operator pos:line="136" pos:column="32">&gt;<pos:position pos:line="136" pos:column="36"/></operator> <literal type="number" pos:line="136" pos:column="34">3<pos:position pos:line="136" pos:column="35"/></literal></expr>)<pos:position pos:line="136" pos:column="36"/></condition><then pos:line="136" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name pos:line="137" pos:column="25">nr_threads<pos:position pos:line="137" pos:column="35"/></name> <operator pos:line="137" pos:column="36">=<pos:position pos:line="137" pos:column="37"/></operator> <literal type="number" pos:line="137" pos:column="38">3<pos:position pos:line="137" pos:column="39"/></literal></expr>;<pos:position pos:line="137" pos:column="40"/></expr_stmt></block></then></if>
	}<pos:position pos:line="138" pos:column="10"/></block></then></if>
<cpp:endif pos:line="139" pos:column="1">#<cpp:directive pos:line="139" pos:column="2">endif<pos:position pos:line="139" pos:column="7"/></cpp:directive></cpp:endif>

	<expr_stmt><expr><name pos:line="141" pos:column="9">curr_pack<pos:position pos:line="141" pos:column="18"/></name> <operator pos:line="141" pos:column="19">=<pos:position pos:line="141" pos:column="20"/></operator> <call><name pos:line="141" pos:column="21">open_pack_file<pos:position pos:line="141" pos:column="35"/></name><argument_list pos:line="141" pos:column="35">(<argument><expr><name pos:line="141" pos:column="36">pack_name<pos:position pos:line="141" pos:column="45"/></name></expr></argument>)<pos:position pos:line="141" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="142" pos:column="9">parse_pack_header<pos:position pos:line="142" pos:column="26"/></name><argument_list pos:line="142" pos:column="26">()<pos:position pos:line="142" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name pos:line="143" pos:column="9">objects<pos:position pos:line="143" pos:column="16"/></name> <operator pos:line="143" pos:column="17">=<pos:position pos:line="143" pos:column="18"/></operator> <call><name pos:line="143" pos:column="19">xcalloc<pos:position pos:line="143" pos:column="26"/></name><argument_list pos:line="143" pos:column="26">(<argument><expr><call><name pos:line="143" pos:column="27">st_add<pos:position pos:line="143" pos:column="33"/></name><argument_list pos:line="143" pos:column="33">(<argument><expr><name pos:line="143" pos:column="34">nr_objects<pos:position pos:line="143" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="143" pos:column="46">1<pos:position pos:line="143" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><sizeof pos:line="143" pos:column="50">sizeof<argument_list pos:line="143" pos:column="56">(<argument><expr pos:line="143" pos:column="57">struct <name pos:line="143" pos:column="64">object_entry<pos:position pos:line="143" pos:column="76"/></name></expr></argument>)<pos:position pos:line="143" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="143" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="79"/></expr_stmt>
	<if pos:line="144" pos:column="9">if <condition pos:line="144" pos:column="12">(<expr><name pos:line="144" pos:column="13">show_stat<pos:position pos:line="144" pos:column="22"/></name></expr>)<pos:position pos:line="144" pos:column="23"/></condition><then pos:line="144" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><name pos:line="145" pos:column="17">obj_stat<pos:position pos:line="145" pos:column="25"/></name> <operator pos:line="145" pos:column="26">=<pos:position pos:line="145" pos:column="27"/></operator> <call><name pos:line="145" pos:column="28">xcalloc<pos:position pos:line="145" pos:column="35"/></name><argument_list pos:line="145" pos:column="35">(<argument><expr><call><name pos:line="145" pos:column="36">st_add<pos:position pos:line="145" pos:column="42"/></name><argument_list pos:line="145" pos:column="42">(<argument><expr><name pos:line="145" pos:column="43">nr_objects<pos:position pos:line="145" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="145" pos:column="55">1<pos:position pos:line="145" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><sizeof pos:line="145" pos:column="59">sizeof<argument_list pos:line="145" pos:column="65">(<argument><expr pos:line="145" pos:column="66">struct <name pos:line="145" pos:column="73">object_stat<pos:position pos:line="145" pos:column="84"/></name></expr></argument>)<pos:position pos:line="145" pos:column="85"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="145" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="87"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="146" pos:column="9">ofs_deltas<pos:position pos:line="146" pos:column="19"/></name> <operator pos:line="146" pos:column="20">=<pos:position pos:line="146" pos:column="21"/></operator> <call><name pos:line="146" pos:column="22">xcalloc<pos:position pos:line="146" pos:column="29"/></name><argument_list pos:line="146" pos:column="29">(<argument><expr><name pos:line="146" pos:column="30">nr_objects<pos:position pos:line="146" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="146" pos:column="42">sizeof<argument_list pos:line="146" pos:column="48">(<argument><expr pos:line="146" pos:column="49">struct <name pos:line="146" pos:column="56">ofs_delta_entry<pos:position pos:line="146" pos:column="71"/></name></expr></argument>)<pos:position pos:line="146" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="146" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="74"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="147" pos:column="9">parse_pack_objects<pos:position pos:line="147" pos:column="27"/></name><argument_list pos:line="147" pos:column="27">(<argument><expr><name pos:line="147" pos:column="28">pack_sha1<pos:position pos:line="147" pos:column="37"/></name></expr></argument>)<pos:position pos:line="147" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="39"/></expr_stmt>
	<if pos:line="148" pos:column="9">if <condition pos:line="148" pos:column="12">(<expr><name pos:line="148" pos:column="13">report_end_of_input<pos:position pos:line="148" pos:column="32"/></name></expr>)<pos:position pos:line="148" pos:column="33"/></condition><then pos:line="148" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="149" pos:column="17">write_in_full<pos:position pos:line="149" pos:column="30"/></name><argument_list pos:line="149" pos:column="30">(<argument><expr><literal type="number" pos:line="149" pos:column="31">2<pos:position pos:line="149" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="149" pos:column="34">"\0"<pos:position pos:line="149" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="149" pos:column="40">1<pos:position pos:line="149" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="43"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="150" pos:column="9">resolve_deltas<pos:position pos:line="150" pos:column="23"/></name><argument_list pos:line="150" pos:column="23">()<pos:position pos:line="150" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="151" pos:column="9">conclude_pack<pos:position pos:line="151" pos:column="22"/></name><argument_list pos:line="151" pos:column="22">(<argument><expr><name pos:line="151" pos:column="23">fix_thin_pack<pos:position pos:line="151" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="38">curr_pack<pos:position pos:line="151" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="49">pack_sha1<pos:position pos:line="151" pos:column="58"/></name></expr></argument>)<pos:position pos:line="151" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="152" pos:column="9">free<pos:position pos:line="152" pos:column="13"/></name><argument_list pos:line="152" pos:column="13">(<argument><expr><name pos:line="152" pos:column="14">ofs_deltas<pos:position pos:line="152" pos:column="24"/></name></expr></argument>)<pos:position pos:line="152" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="153" pos:column="9">free<pos:position pos:line="153" pos:column="13"/></name><argument_list pos:line="153" pos:column="13">(<argument><expr><name pos:line="153" pos:column="14">ref_deltas<pos:position pos:line="153" pos:column="24"/></name></expr></argument>)<pos:position pos:line="153" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="26"/></expr_stmt>
	<if pos:line="154" pos:column="9">if <condition pos:line="154" pos:column="12">(<expr><name pos:line="154" pos:column="13">strict<pos:position pos:line="154" pos:column="19"/></name></expr>)<pos:position pos:line="154" pos:column="20"/></condition><then pos:line="154" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><name pos:line="155" pos:column="17">foreign_nr<pos:position pos:line="155" pos:column="27"/></name> <operator pos:line="155" pos:column="28">=<pos:position pos:line="155" pos:column="29"/></operator> <call><name pos:line="155" pos:column="30">check_objects<pos:position pos:line="155" pos:column="43"/></name><argument_list pos:line="155" pos:column="43">()<pos:position pos:line="155" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="46"/></expr_stmt></block></then></if>

	<if pos:line="157" pos:column="9">if <condition pos:line="157" pos:column="12">(<expr><name pos:line="157" pos:column="13">show_stat<pos:position pos:line="157" pos:column="22"/></name></expr>)<pos:position pos:line="157" pos:column="23"/></condition><then pos:line="157" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="158" pos:column="17">show_pack_info<pos:position pos:line="158" pos:column="31"/></name><argument_list pos:line="158" pos:column="31">(<argument><expr><name pos:line="158" pos:column="32">stat_only<pos:position pos:line="158" pos:column="41"/></name></expr></argument>)<pos:position pos:line="158" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="43"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="160" pos:column="9">ALLOC_ARRAY<pos:position pos:line="160" pos:column="20"/></name><argument_list pos:line="160" pos:column="20">(<argument><expr><name pos:line="160" pos:column="21">idx_objects<pos:position pos:line="160" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="34">nr_objects<pos:position pos:line="160" pos:column="44"/></name></expr></argument>)<pos:position pos:line="160" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="46"/></expr_stmt>
	<for pos:line="161" pos:column="9">for <control pos:line="161" pos:column="13">(<init><expr><name pos:line="161" pos:column="14">i<pos:position pos:line="161" pos:column="15"/></name> <operator pos:line="161" pos:column="16">=<pos:position pos:line="161" pos:column="17"/></operator> <literal type="number" pos:line="161" pos:column="18">0<pos:position pos:line="161" pos:column="19"/></literal></expr>;<pos:position pos:line="161" pos:column="20"/></init> <condition><expr><name pos:line="161" pos:column="21">i<pos:position pos:line="161" pos:column="22"/></name> <operator pos:line="161" pos:column="23">&lt;<pos:position pos:line="161" pos:column="27"/></operator> <name pos:line="161" pos:column="25">nr_objects<pos:position pos:line="161" pos:column="35"/></name></expr>;<pos:position pos:line="161" pos:column="36"/></condition> <incr><expr><name pos:line="161" pos:column="37">i<pos:position pos:line="161" pos:column="38"/></name><operator pos:line="161" pos:column="38">++<pos:position pos:line="161" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="161" pos:column="41"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="162" pos:column="17">idx_objects<pos:position pos:line="162" pos:column="28"/></name><index pos:line="162" pos:column="28">[<expr><name pos:line="162" pos:column="29">i<pos:position pos:line="162" pos:column="30"/></name></expr>]<pos:position pos:line="162" pos:column="31"/></index></name> <operator pos:line="162" pos:column="32">=<pos:position pos:line="162" pos:column="33"/></operator> <operator pos:line="162" pos:column="34">&amp;<pos:position pos:line="162" pos:column="39"/></operator><name><name pos:line="162" pos:column="35">objects<pos:position pos:line="162" pos:column="42"/></name><index pos:line="162" pos:column="42">[<expr><name pos:line="162" pos:column="43">i<pos:position pos:line="162" pos:column="44"/></name></expr>]<pos:position pos:line="162" pos:column="45"/></index></name><operator pos:line="162" pos:column="45">.<pos:position pos:line="162" pos:column="46"/></operator><name pos:line="162" pos:column="46">idx<pos:position pos:line="162" pos:column="49"/></name></expr>;<pos:position pos:line="162" pos:column="50"/></expr_stmt></block></for>
	<expr_stmt><expr><name pos:line="163" pos:column="9">curr_index<pos:position pos:line="163" pos:column="19"/></name> <operator pos:line="163" pos:column="20">=<pos:position pos:line="163" pos:column="21"/></operator> <call><name pos:line="163" pos:column="22">write_idx_file<pos:position pos:line="163" pos:column="36"/></name><argument_list pos:line="163" pos:column="36">(<argument><expr><name pos:line="163" pos:column="37">index_name<pos:position pos:line="163" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="49">idx_objects<pos:position pos:line="163" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="62">nr_objects<pos:position pos:line="163" pos:column="72"/></name></expr></argument>, <argument><expr><operator pos:line="163" pos:column="74">&amp;<pos:position pos:line="163" pos:column="79"/></operator><name pos:line="163" pos:column="75">opts<pos:position pos:line="163" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="81">pack_sha1<pos:position pos:line="163" pos:column="90"/></name></expr></argument>)<pos:position pos:line="163" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="92"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="164" pos:column="9">free<pos:position pos:line="164" pos:column="13"/></name><argument_list pos:line="164" pos:column="13">(<argument><expr><name pos:line="164" pos:column="14">idx_objects<pos:position pos:line="164" pos:column="25"/></name></expr></argument>)<pos:position pos:line="164" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="27"/></expr_stmt>

	<if pos:line="166" pos:column="9">if <condition pos:line="166" pos:column="12">(<expr><operator pos:line="166" pos:column="13">!<pos:position pos:line="166" pos:column="14"/></operator><name pos:line="166" pos:column="14">verify<pos:position pos:line="166" pos:column="20"/></name></expr>)<pos:position pos:line="166" pos:column="21"/></condition><then pos:line="166" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="167" pos:column="17">final<pos:position pos:line="167" pos:column="22"/></name><argument_list pos:line="167" pos:column="22">(<argument><expr><name pos:line="167" pos:column="23">pack_name<pos:position pos:line="167" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="34">curr_pack<pos:position pos:line="167" pos:column="43"/></name></expr></argument>,
		      <argument><expr><name pos:line="168" pos:column="23">index_name<pos:position pos:line="168" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="35">curr_index<pos:position pos:line="168" pos:column="45"/></name></expr></argument>,
		      <argument><expr><name pos:line="169" pos:column="23">keep_name<pos:position pos:line="169" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="34">keep_msg<pos:position pos:line="169" pos:column="42"/></name></expr></argument>,
		      <argument><expr><name pos:line="170" pos:column="23">pack_sha1<pos:position pos:line="170" pos:column="32"/></name></expr></argument>)<pos:position pos:line="170" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="34"/></expr_stmt></block></then>
	<else pos:line="171" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="172" pos:column="17">close<pos:position pos:line="172" pos:column="22"/></name><argument_list pos:line="172" pos:column="22">(<argument><expr><name pos:line="172" pos:column="23">input_fd<pos:position pos:line="172" pos:column="31"/></name></expr></argument>)<pos:position pos:line="172" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="33"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="173" pos:column="9">free<pos:position pos:line="173" pos:column="13"/></name><argument_list pos:line="173" pos:column="13">(<argument><expr><name pos:line="173" pos:column="14">objects<pos:position pos:line="173" pos:column="21"/></name></expr></argument>)<pos:position pos:line="173" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="174" pos:column="9">strbuf_release<pos:position pos:line="174" pos:column="23"/></name><argument_list pos:line="174" pos:column="23">(<argument><expr><operator pos:line="174" pos:column="24">&amp;<pos:position pos:line="174" pos:column="29"/></operator><name pos:line="174" pos:column="25">index_name_buf<pos:position pos:line="174" pos:column="39"/></name></expr></argument>)<pos:position pos:line="174" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="175" pos:column="9">strbuf_release<pos:position pos:line="175" pos:column="23"/></name><argument_list pos:line="175" pos:column="23">(<argument><expr><operator pos:line="175" pos:column="24">&amp;<pos:position pos:line="175" pos:column="29"/></operator><name pos:line="175" pos:column="25">keep_name_buf<pos:position pos:line="175" pos:column="38"/></name></expr></argument>)<pos:position pos:line="175" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="40"/></expr_stmt>
	<if pos:line="176" pos:column="9">if <condition pos:line="176" pos:column="12">(<expr><name pos:line="176" pos:column="13">pack_name<pos:position pos:line="176" pos:column="22"/></name> <operator pos:line="176" pos:column="23">==<pos:position pos:line="176" pos:column="25"/></operator> <name pos:line="176" pos:column="26">NULL<pos:position pos:line="176" pos:column="30"/></name></expr>)<pos:position pos:line="176" pos:column="31"/></condition><then pos:line="176" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="177" pos:column="17">free<pos:position pos:line="177" pos:column="21"/></name><argument_list pos:line="177" pos:column="21">(<argument><expr><operator pos:line="177" pos:column="22">(<pos:position pos:line="177" pos:column="23"/></operator><name pos:line="177" pos:column="23">void<pos:position pos:line="177" pos:column="27"/></name> <operator pos:line="177" pos:column="28">*<pos:position pos:line="177" pos:column="29"/></operator><operator pos:line="177" pos:column="29">)<pos:position pos:line="177" pos:column="30"/></operator> <name pos:line="177" pos:column="31">curr_pack<pos:position pos:line="177" pos:column="40"/></name></expr></argument>)<pos:position pos:line="177" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="42"/></expr_stmt></block></then></if>
	<if pos:line="178" pos:column="9">if <condition pos:line="178" pos:column="12">(<expr><name pos:line="178" pos:column="13">index_name<pos:position pos:line="178" pos:column="23"/></name> <operator pos:line="178" pos:column="24">==<pos:position pos:line="178" pos:column="26"/></operator> <name pos:line="178" pos:column="27">NULL<pos:position pos:line="178" pos:column="31"/></name></expr>)<pos:position pos:line="178" pos:column="32"/></condition><then pos:line="178" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="179" pos:column="17">free<pos:position pos:line="179" pos:column="21"/></name><argument_list pos:line="179" pos:column="21">(<argument><expr><operator pos:line="179" pos:column="22">(<pos:position pos:line="179" pos:column="23"/></operator><name pos:line="179" pos:column="23">void<pos:position pos:line="179" pos:column="27"/></name> <operator pos:line="179" pos:column="28">*<pos:position pos:line="179" pos:column="29"/></operator><operator pos:line="179" pos:column="29">)<pos:position pos:line="179" pos:column="30"/></operator> <name pos:line="179" pos:column="31">curr_index<pos:position pos:line="179" pos:column="41"/></name></expr></argument>)<pos:position pos:line="179" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="43"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="181" pos:column="9">/*
	 * Let the caller know this pack is not self contained
	 */</comment>
	<if pos:line="184" pos:column="9">if <condition pos:line="184" pos:column="12">(<expr><name pos:line="184" pos:column="13">check_self_contained_and_connected<pos:position pos:line="184" pos:column="47"/></name> <operator pos:line="184" pos:column="48">&amp;&amp;<pos:position pos:line="184" pos:column="58"/></operator> <name pos:line="184" pos:column="51">foreign_nr<pos:position pos:line="184" pos:column="61"/></name></expr>)<pos:position pos:line="184" pos:column="62"/></condition><then pos:line="184" pos:column="62">
		<block type="pseudo"><return pos:line="185" pos:column="17">return <expr><literal type="number" pos:line="185" pos:column="24">1<pos:position pos:line="185" pos:column="25"/></literal></expr>;<pos:position pos:line="185" pos:column="26"/></return></block></then></if>

	<return pos:line="187" pos:column="9">return <expr><literal type="number" pos:line="187" pos:column="16">0<pos:position pos:line="187" pos:column="17"/></literal></expr>;<pos:position pos:line="187" pos:column="18"/></return>
}<pos:position pos:line="188" pos:column="2"/></block></function></unit>
