<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1335_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">guess_p_value<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">apply_state<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">state<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">nameline<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">name<pos:position pos:line="3" pos:column="19"/></name></decl>, <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="22">cp<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">val<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><operator pos:line="4" pos:column="19">-<pos:position pos:line="4" pos:column="20"/></operator><literal type="number" pos:line="4" pos:column="20">1<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">is_dev_null<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">nameline<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><operator pos:line="7" pos:column="24">-<pos:position pos:line="7" pos:column="25"/></operator><literal type="number" pos:line="7" pos:column="25">1<pos:position pos:line="7" pos:column="26"/></literal></expr>;<pos:position pos:line="7" pos:column="27"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="8" pos:column="9">name<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <call><name pos:line="8" pos:column="16">find_name_traditional<pos:position pos:line="8" pos:column="37"/></name><argument_list pos:line="8" pos:column="37">(<argument><expr><name pos:line="8" pos:column="38">state<pos:position pos:line="8" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="45">nameline<pos:position pos:line="8" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="55">NULL<pos:position pos:line="8" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="61">0<pos:position pos:line="8" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="64"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">name<pos:position pos:line="9" pos:column="18"/></name></expr>)<pos:position pos:line="9" pos:column="19"/></condition><then pos:line="9" pos:column="19">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><operator pos:line="10" pos:column="24">-<pos:position pos:line="10" pos:column="25"/></operator><literal type="number" pos:line="10" pos:column="25">1<pos:position pos:line="10" pos:column="26"/></literal></expr>;<pos:position pos:line="10" pos:column="27"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="11" pos:column="9">cp<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">strchr<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">name<pos:position pos:line="11" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="27">'/'<pos:position pos:line="11" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">cp<pos:position pos:line="12" pos:column="16"/></name></expr>)<pos:position pos:line="12" pos:column="17"/></condition><then pos:line="12" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="17">val<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <literal type="number" pos:line="13" pos:column="23">0<pos:position pos:line="13" pos:column="24"/></literal></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt></block></then>
	<elseif pos:line="14" pos:column="9">else <if pos:line="14" pos:column="14">if <condition pos:line="14" pos:column="17">(<expr><name><name pos:line="14" pos:column="18">state<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">-&gt;<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="25">prefix<pos:position pos:line="14" pos:column="31"/></name></name></expr>)<pos:position pos:line="14" pos:column="32"/></condition><then pos:line="14" pos:column="32"> <block pos:line="14" pos:column="33">{
		<comment type="block" pos:line="15" pos:column="17">/*
		 * Does it begin with "a/$our-prefix" and such?  Then this is
		 * very likely to apply to our directory.
		 */</comment>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><call><name pos:line="19" pos:column="21">starts_with<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">name<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="39">state<pos:position pos:line="19" pos:column="44"/></name><operator pos:line="19" pos:column="44">-&gt;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="46">prefix<pos:position pos:line="19" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="54"/></condition><then pos:line="19" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="25">val<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">=<pos:position pos:line="20" pos:column="30"/></operator> <call><name pos:line="20" pos:column="31">count_slashes<pos:position pos:line="20" pos:column="44"/></name><argument_list pos:line="20" pos:column="44">(<argument><expr><name><name pos:line="20" pos:column="45">state<pos:position pos:line="20" pos:column="50"/></name><operator pos:line="20" pos:column="50">-&gt;<pos:position pos:line="20" pos:column="55"/></operator><name pos:line="20" pos:column="52">prefix<pos:position pos:line="20" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt></block></then>
		<else pos:line="21" pos:column="17">else <block pos:line="21" pos:column="22">{
			<expr_stmt><expr><name pos:line="22" pos:column="25">cp<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">++<pos:position pos:line="22" pos:column="29"/></operator></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><call><name pos:line="23" pos:column="29">starts_with<pos:position pos:line="23" pos:column="40"/></name><argument_list pos:line="23" pos:column="40">(<argument><expr><name pos:line="23" pos:column="41">cp<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="45">state<pos:position pos:line="23" pos:column="50"/></name><operator pos:line="23" pos:column="50">-&gt;<pos:position pos:line="23" pos:column="55"/></operator><name pos:line="23" pos:column="52">prefix<pos:position pos:line="23" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="60"/></condition><then pos:line="23" pos:column="60">
				<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="33">val<pos:position pos:line="24" pos:column="36"/></name> <operator pos:line="24" pos:column="37">=<pos:position pos:line="24" pos:column="38"/></operator> <call><name pos:line="24" pos:column="39">count_slashes<pos:position pos:line="24" pos:column="52"/></name><argument_list pos:line="24" pos:column="52">(<argument><expr><name><name pos:line="24" pos:column="53">state<pos:position pos:line="24" pos:column="58"/></name><operator pos:line="24" pos:column="58">-&gt;<pos:position pos:line="24" pos:column="63"/></operator><name pos:line="24" pos:column="60">prefix<pos:position pos:line="24" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call> <operator pos:line="24" pos:column="68">+<pos:position pos:line="24" pos:column="69"/></operator> <literal type="number" pos:line="24" pos:column="70">1<pos:position pos:line="24" pos:column="71"/></literal></expr>;<pos:position pos:line="24" pos:column="72"/></expr_stmt></block></then></if>
		}<pos:position pos:line="25" pos:column="18"/></block></else></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if></elseif></if>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">free<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><name pos:line="27" pos:column="14">name<pos:position pos:line="27" pos:column="18"/></name></expr></argument>)<pos:position pos:line="27" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="20"/></expr_stmt>
	<return pos:line="28" pos:column="9">return <expr><name pos:line="28" pos:column="16">val<pos:position pos:line="28" pos:column="19"/></name></expr>;<pos:position pos:line="28" pos:column="20"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
