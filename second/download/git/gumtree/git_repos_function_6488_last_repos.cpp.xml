<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6488_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">do_for_each_ref_iterator<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">ref_iterator<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">iter<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="2" pos:column="30">each_ref_fn<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">fn<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">void<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">cb_data<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">retval<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><literal type="number" pos:line="4" pos:column="22">0<pos:position pos:line="4" pos:column="23"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="25">ok<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">ref_iterator<pos:position pos:line="5" pos:column="28"/></name></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">old_ref_iter<pos:position pos:line="5" pos:column="42"/></name> <init pos:line="5" pos:column="43">= <expr><name pos:line="5" pos:column="45">current_ref_iter<pos:position pos:line="5" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="62"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">current_ref_iter<pos:position pos:line="7" pos:column="25"/></name> <operator pos:line="7" pos:column="26">=<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="28">iter<pos:position pos:line="7" pos:column="32"/></name></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>
	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><operator pos:line="8" pos:column="16">(<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">ok<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">=<pos:position pos:line="8" pos:column="21"/></operator> <call><name pos:line="8" pos:column="22">ref_iterator_advance<pos:position pos:line="8" pos:column="42"/></name><argument_list pos:line="8" pos:column="42">(<argument><expr><name pos:line="8" pos:column="43">iter<pos:position pos:line="8" pos:column="47"/></name></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call><operator pos:line="8" pos:column="48">)<pos:position pos:line="8" pos:column="49"/></operator> <operator pos:line="8" pos:column="50">==<pos:position pos:line="8" pos:column="52"/></operator> <name pos:line="8" pos:column="53">ITER_OK<pos:position pos:line="8" pos:column="60"/></name></expr>)<pos:position pos:line="8" pos:column="61"/></condition> <block pos:line="8" pos:column="62">{
		<expr_stmt><expr><name pos:line="9" pos:column="17">retval<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">=<pos:position pos:line="9" pos:column="25"/></operator> <call><name pos:line="9" pos:column="26">fn<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><name><name pos:line="9" pos:column="29">iter<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">-&gt;<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="35">refname<pos:position pos:line="9" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="44">iter<pos:position pos:line="9" pos:column="48"/></name><operator pos:line="9" pos:column="48">-&gt;<pos:position pos:line="9" pos:column="53"/></operator><name pos:line="9" pos:column="50">oid<pos:position pos:line="9" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="55">iter<pos:position pos:line="9" pos:column="59"/></name><operator pos:line="9" pos:column="59">-&gt;<pos:position pos:line="9" pos:column="64"/></operator><name pos:line="9" pos:column="61">flags<pos:position pos:line="9" pos:column="66"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="68">cb_data<pos:position pos:line="9" pos:column="75"/></name></expr></argument>)<pos:position pos:line="9" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="77"/></expr_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name pos:line="10" pos:column="21">retval<pos:position pos:line="10" pos:column="27"/></name></expr>)<pos:position pos:line="10" pos:column="28"/></condition><then pos:line="10" pos:column="28"> <block pos:line="10" pos:column="29">{
			<comment type="block" pos:line="11" pos:column="25">/*
			 * If ref_iterator_abort() returns ITER_ERROR,
			 * we ignore that error in deference to the
			 * callback function's return value.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">ref_iterator_abort<pos:position pos:line="16" pos:column="43"/></name><argument_list pos:line="16" pos:column="43">(<argument><expr><name pos:line="16" pos:column="44">iter<pos:position pos:line="16" pos:column="48"/></name></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
			<goto pos:line="17" pos:column="25">goto <name pos:line="17" pos:column="30">out<pos:position pos:line="17" pos:column="33"/></name>;<pos:position pos:line="17" pos:column="34"/></goto>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if>
	}<pos:position pos:line="19" pos:column="10"/></block></while>

<label><name pos:line="21" pos:column="1">out<pos:position pos:line="21" pos:column="4"/></name>:<pos:position pos:line="21" pos:column="5"/></label>
	<expr_stmt><expr><name pos:line="22" pos:column="9">current_ref_iter<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">=<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="28">old_ref_iter<pos:position pos:line="22" pos:column="40"/></name></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">ok<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">==<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">ITER_ERROR<pos:position pos:line="23" pos:column="29"/></name></expr>)<pos:position pos:line="23" pos:column="30"/></condition><then pos:line="23" pos:column="30">
		<block type="pseudo"><return pos:line="24" pos:column="17">return <expr><operator pos:line="24" pos:column="24">-<pos:position pos:line="24" pos:column="25"/></operator><literal type="number" pos:line="24" pos:column="25">1<pos:position pos:line="24" pos:column="26"/></literal></expr>;<pos:position pos:line="24" pos:column="27"/></return></block></then></if>
	<return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">retval<pos:position pos:line="25" pos:column="22"/></name></expr>;<pos:position pos:line="25" pos:column="23"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
