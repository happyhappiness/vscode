<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2119_git-2.11.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">index_stream_convert_blob<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">unsigned<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">sha1<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">int<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">fd<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
				     <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">path<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">unsigned<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">flags<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">int<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">write_object<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><name pos:line="5" pos:column="34">flags<pos:position pos:line="5" pos:column="39"/></name> <operator pos:line="5" pos:column="40">&amp;<pos:position pos:line="5" pos:column="45"/></operator> <name pos:line="5" pos:column="42">HASH_WRITE_OBJECT<pos:position pos:line="5" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">sbuf<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><name pos:line="6" pos:column="30">STRBUF_INIT<pos:position pos:line="6" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">assert<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">path<pos:position pos:line="8" pos:column="20"/></name></expr></argument>)<pos:position pos:line="8" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">assert<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><call><name pos:line="9" pos:column="16">would_convert_to_git_filter_fd<pos:position pos:line="9" pos:column="46"/></name><argument_list pos:line="9" pos:column="46">(<argument><expr><name pos:line="9" pos:column="47">path<pos:position pos:line="9" pos:column="51"/></name></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="54"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">convert_to_git_filter_fd<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name pos:line="11" pos:column="34">path<pos:position pos:line="11" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="40">fd<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="44">&amp;<pos:position pos:line="11" pos:column="49"/></operator><name pos:line="11" pos:column="45">sbuf<pos:position pos:line="11" pos:column="49"/></name></expr></argument>,
				 <argument><expr><ternary><condition><expr><name pos:line="12" pos:column="34">write_object<pos:position pos:line="12" pos:column="46"/></name></expr> ?<pos:position pos:line="12" pos:column="48"/></condition><then pos:line="12" pos:column="48"> <expr><name pos:line="12" pos:column="49">safe_crlf<pos:position pos:line="12" pos:column="58"/></name></expr> <pos:position pos:line="12" pos:column="59"/></then><else pos:line="12" pos:column="59">: <expr><name pos:line="12" pos:column="61">SAFE_CRLF_FALSE<pos:position pos:line="12" pos:column="76"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="12" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="78"/></expr_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">write_object<pos:position pos:line="14" pos:column="25"/></name></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="17">ret<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <call><name pos:line="15" pos:column="23">write_sha1_file<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><name><name pos:line="15" pos:column="39">sbuf<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">.<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="44">buf<pos:position pos:line="15" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="49">sbuf<pos:position pos:line="15" pos:column="53"/></name><operator pos:line="15" pos:column="53">.<pos:position pos:line="15" pos:column="54"/></operator><name pos:line="15" pos:column="54">len<pos:position pos:line="15" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><typename pos:line="15" pos:column="59">typename<pos:position pos:line="15" pos:column="67"/></typename></name><operator pos:line="15" pos:column="67">(<pos:position pos:line="15" pos:column="68"/></operator><name pos:line="15" pos:column="68">OBJ_BLOB<pos:position pos:line="15" pos:column="76"/></name><operator pos:line="15" pos:column="76">)<pos:position pos:line="15" pos:column="77"/></operator></expr></argument>,
				      <argument><expr><name pos:line="16" pos:column="39">sha1<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt></block></then>
	<else pos:line="17" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="17">ret<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <call><name pos:line="18" pos:column="23">hash_sha1_file<pos:position pos:line="18" pos:column="37"/></name><argument_list pos:line="18" pos:column="37">(<argument><expr><name><name pos:line="18" pos:column="38">sbuf<pos:position pos:line="18" pos:column="42"/></name><operator pos:line="18" pos:column="42">.<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="43">buf<pos:position pos:line="18" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="48">sbuf<pos:position pos:line="18" pos:column="52"/></name><operator pos:line="18" pos:column="52">.<pos:position pos:line="18" pos:column="53"/></operator><name pos:line="18" pos:column="53">len<pos:position pos:line="18" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><typename pos:line="18" pos:column="58">typename<pos:position pos:line="18" pos:column="66"/></typename></name><operator pos:line="18" pos:column="66">(<pos:position pos:line="18" pos:column="67"/></operator><name pos:line="18" pos:column="67">OBJ_BLOB<pos:position pos:line="18" pos:column="75"/></name><operator pos:line="18" pos:column="75">)<pos:position pos:line="18" pos:column="76"/></operator></expr></argument>,
				     <argument><expr><name pos:line="19" pos:column="38">sha1<pos:position pos:line="19" pos:column="42"/></name></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">strbuf_release<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><operator pos:line="20" pos:column="24">&amp;<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="25">sbuf<pos:position pos:line="20" pos:column="29"/></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
	<return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">ret<pos:position pos:line="21" pos:column="19"/></name></expr>;<pos:position pos:line="21" pos:column="20"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
