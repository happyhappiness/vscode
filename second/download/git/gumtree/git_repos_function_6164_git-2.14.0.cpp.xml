<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6164_git-2.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">set_head<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">argc<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier><modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">argv<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">opt_a<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><literal type="number" pos:line="3" pos:column="24">0<pos:position pos:line="3" pos:column="25"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="27">opt_d<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><literal type="number" pos:line="3" pos:column="35">0<pos:position pos:line="3" pos:column="36"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="38">result<pos:position pos:line="3" pos:column="44"/></name> <init pos:line="3" pos:column="45">= <expr><literal type="number" pos:line="3" pos:column="47">0<pos:position pos:line="3" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">buf<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">STRBUF_INIT<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="42">buf2<pos:position pos:line="4" pos:column="46"/></name> <init pos:line="4" pos:column="47">= <expr><name pos:line="4" pos:column="49">STRBUF_INIT<pos:position pos:line="4" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="61"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">head_name<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name pos:line="5" pos:column="27">NULL<pos:position pos:line="5" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">option<pos:position pos:line="7" pos:column="22"/></name></name></type> <name><name pos:line="7" pos:column="23">options<pos:position pos:line="7" pos:column="30"/></name><index pos:line="7" pos:column="30">[]<pos:position pos:line="7" pos:column="32"/></index></name> <init pos:line="7" pos:column="33">= <expr><block pos:line="7" pos:column="35">{
		<expr><call><name pos:line="8" pos:column="17">OPT_BOOL<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><literal type="char" pos:line="8" pos:column="26">'a'<pos:position pos:line="8" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="31">"auto"<pos:position pos:line="8" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="8" pos:column="39">&amp;<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="40">opt_a<pos:position pos:line="8" pos:column="45"/></name></expr></argument>,
			 <argument><expr><call><name pos:line="9" pos:column="26">N_<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><literal type="string" pos:line="9" pos:column="29">"set refs/remotes/&lt;name&gt;/HEAD according to remote"<pos:position pos:line="9" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="81"/></argument_list></call></expr>,
		<expr><call><name pos:line="10" pos:column="17">OPT_BOOL<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><literal type="char" pos:line="10" pos:column="26">'d'<pos:position pos:line="10" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="31">"delete"<pos:position pos:line="10" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="10" pos:column="41">&amp;<pos:position pos:line="10" pos:column="46"/></operator><name pos:line="10" pos:column="42">opt_d<pos:position pos:line="10" pos:column="47"/></name></expr></argument>,
			 <argument><expr><call><name pos:line="11" pos:column="26">N_<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><literal type="string" pos:line="11" pos:column="29">"delete refs/remotes/&lt;name&gt;/HEAD"<pos:position pos:line="11" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>,
		<macro><name pos:line="12" pos:column="17">OPT_END<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">()<pos:position pos:line="12" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="13" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="13" pos:column="11"/></decl_stmt>
	<expr_stmt><expr><name pos:line="14" pos:column="9">argc<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <call><name pos:line="14" pos:column="16">parse_options<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">argc<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="36">argv<pos:position pos:line="14" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="42">NULL<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="48">options<pos:position pos:line="14" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="57">builtin_remote_sethead_usage<pos:position pos:line="14" pos:column="85"/></name></expr></argument>,
			     <argument><expr><literal type="number" pos:line="15" pos:column="30">0<pos:position pos:line="15" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">argc<pos:position pos:line="16" pos:column="17"/></name></expr>)<pos:position pos:line="16" pos:column="18"/></condition><then pos:line="16" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">strbuf_addf<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><operator pos:line="17" pos:column="29">&amp;<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="30">buf<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="35">"refs/remotes/%s/HEAD"<pos:position pos:line="17" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="59">argv<pos:position pos:line="17" pos:column="63"/></name><index pos:line="17" pos:column="63">[<expr><literal type="number" pos:line="17" pos:column="64">0<pos:position pos:line="17" pos:column="65"/></literal></expr>]<pos:position pos:line="17" pos:column="66"/></index></name></expr></argument>)<pos:position pos:line="17" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="68"/></expr_stmt></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">opt_a<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">&amp;&amp;<pos:position pos:line="19" pos:column="30"/></operator> <operator pos:line="19" pos:column="23">!<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="24">opt_d<pos:position pos:line="19" pos:column="29"/></name> <operator pos:line="19" pos:column="30">&amp;&amp;<pos:position pos:line="19" pos:column="40"/></operator> <name pos:line="19" pos:column="33">argc<pos:position pos:line="19" pos:column="37"/></name> <operator pos:line="19" pos:column="38">==<pos:position pos:line="19" pos:column="40"/></operator> <literal type="number" pos:line="19" pos:column="41">2<pos:position pos:line="19" pos:column="42"/></literal></expr>)<pos:position pos:line="19" pos:column="43"/></condition><then pos:line="19" pos:column="43"> <block pos:line="19" pos:column="44">{
		<expr_stmt><expr><name pos:line="20" pos:column="17">head_name<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <call><name pos:line="20" pos:column="29">xstrdup<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><name><name pos:line="20" pos:column="37">argv<pos:position pos:line="20" pos:column="41"/></name><index pos:line="20" pos:column="41">[<expr><literal type="number" pos:line="20" pos:column="42">1<pos:position pos:line="20" pos:column="43"/></literal></expr>]<pos:position pos:line="20" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then> <elseif pos:line="21" pos:column="11">else <if pos:line="21" pos:column="16">if <condition pos:line="21" pos:column="19">(<expr><name pos:line="21" pos:column="20">opt_a<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">&amp;&amp;<pos:position pos:line="21" pos:column="36"/></operator> <operator pos:line="21" pos:column="29">!<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="30">opt_d<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">&amp;&amp;<pos:position pos:line="21" pos:column="46"/></operator> <name pos:line="21" pos:column="39">argc<pos:position pos:line="21" pos:column="43"/></name> <operator pos:line="21" pos:column="44">==<pos:position pos:line="21" pos:column="46"/></operator> <literal type="number" pos:line="21" pos:column="47">1<pos:position pos:line="21" pos:column="48"/></literal></expr>)<pos:position pos:line="21" pos:column="49"/></condition><then pos:line="21" pos:column="49"> <block pos:line="21" pos:column="50">{
		<decl_stmt><decl><type><name><name pos:line="22" pos:column="17">struct<pos:position pos:line="22" pos:column="23"/></name> <name pos:line="22" pos:column="24">ref_states<pos:position pos:line="22" pos:column="34"/></name></name></type> <name pos:line="22" pos:column="35">states<pos:position pos:line="22" pos:column="41"/></name></decl>;<pos:position pos:line="22" pos:column="42"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">memset<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><operator pos:line="23" pos:column="24">&amp;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="25">states<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="33">0<pos:position pos:line="23" pos:column="34"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="36">sizeof<argument_list pos:line="23" pos:column="42">(<argument><expr><name pos:line="23" pos:column="43">states<pos:position pos:line="23" pos:column="49"/></name></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">get_remote_ref_states<pos:position pos:line="24" pos:column="38"/></name><argument_list pos:line="24" pos:column="38">(<argument><expr><name><name pos:line="24" pos:column="39">argv<pos:position pos:line="24" pos:column="43"/></name><index pos:line="24" pos:column="43">[<expr><literal type="number" pos:line="24" pos:column="44">0<pos:position pos:line="24" pos:column="45"/></literal></expr>]<pos:position pos:line="24" pos:column="46"/></index></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="48">&amp;<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="49">states<pos:position pos:line="24" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="57">GET_HEAD_NAMES<pos:position pos:line="24" pos:column="71"/></name></expr></argument>)<pos:position pos:line="24" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="73"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">!<pos:position pos:line="25" pos:column="22"/></operator><name><name pos:line="25" pos:column="22">states<pos:position pos:line="25" pos:column="28"/></name><operator pos:line="25" pos:column="28">.<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="29">heads<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">.<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="35">nr<pos:position pos:line="25" pos:column="37"/></name></name></expr>)<pos:position pos:line="25" pos:column="38"/></condition><then pos:line="25" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="25">result<pos:position pos:line="26" pos:column="31"/></name> <operator pos:line="26" pos:column="32">|=<pos:position pos:line="26" pos:column="34"/></operator> <call><name pos:line="26" pos:column="35">error<pos:position pos:line="26" pos:column="40"/></name><argument_list pos:line="26" pos:column="40">(<argument><expr><call><name pos:line="26" pos:column="41">_<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument><expr><literal type="string" pos:line="26" pos:column="43">"Cannot determine remote HEAD"<pos:position pos:line="26" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="76"/></expr_stmt></block></then>
		<elseif pos:line="27" pos:column="17">else <if pos:line="27" pos:column="22">if <condition pos:line="27" pos:column="25">(<expr><name><name pos:line="27" pos:column="26">states<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">.<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="33">heads<pos:position pos:line="27" pos:column="38"/></name><operator pos:line="27" pos:column="38">.<pos:position pos:line="27" pos:column="39"/></operator><name pos:line="27" pos:column="39">nr<pos:position pos:line="27" pos:column="41"/></name></name> <operator pos:line="27" pos:column="42">&gt;<pos:position pos:line="27" pos:column="46"/></operator> <literal type="number" pos:line="27" pos:column="44">1<pos:position pos:line="27" pos:column="45"/></literal></expr>)<pos:position pos:line="27" pos:column="46"/></condition><then pos:line="27" pos:column="46"> <block pos:line="27" pos:column="47">{
			<expr_stmt><expr><name pos:line="28" pos:column="25">result<pos:position pos:line="28" pos:column="31"/></name> <operator pos:line="28" pos:column="32">|=<pos:position pos:line="28" pos:column="34"/></operator> <call><name pos:line="28" pos:column="35">error<pos:position pos:line="28" pos:column="40"/></name><argument_list pos:line="28" pos:column="40">(<argument><expr><call><name pos:line="28" pos:column="41">_<pos:position pos:line="28" pos:column="42"/></name><argument_list pos:line="28" pos:column="42">(<argument><expr><literal type="string" pos:line="28" pos:column="43">"Multiple remote HEAD branches. "<pos:position pos:line="28" pos:column="76"/></literal>
					  <literal type="string" pos:line="29" pos:column="43">"Please choose one explicitly with:"<pos:position pos:line="29" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="82"/></expr_stmt>
			<for pos:line="30" pos:column="25">for <control pos:line="30" pos:column="29">(<init><expr><name pos:line="30" pos:column="30">i<pos:position pos:line="30" pos:column="31"/></name> <operator pos:line="30" pos:column="32">=<pos:position pos:line="30" pos:column="33"/></operator> <literal type="number" pos:line="30" pos:column="34">0<pos:position pos:line="30" pos:column="35"/></literal></expr>;<pos:position pos:line="30" pos:column="36"/></init> <condition><expr><name pos:line="30" pos:column="37">i<pos:position pos:line="30" pos:column="38"/></name> <operator pos:line="30" pos:column="39">&lt;<pos:position pos:line="30" pos:column="43"/></operator> <name><name pos:line="30" pos:column="41">states<pos:position pos:line="30" pos:column="47"/></name><operator pos:line="30" pos:column="47">.<pos:position pos:line="30" pos:column="48"/></operator><name pos:line="30" pos:column="48">heads<pos:position pos:line="30" pos:column="53"/></name><operator pos:line="30" pos:column="53">.<pos:position pos:line="30" pos:column="54"/></operator><name pos:line="30" pos:column="54">nr<pos:position pos:line="30" pos:column="56"/></name></name></expr>;<pos:position pos:line="30" pos:column="57"/></condition> <incr><expr><name pos:line="30" pos:column="58">i<pos:position pos:line="30" pos:column="59"/></name><operator pos:line="30" pos:column="59">++<pos:position pos:line="30" pos:column="61"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="62"/></control>
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="33">fprintf<pos:position pos:line="31" pos:column="40"/></name><argument_list pos:line="31" pos:column="40">(<argument><expr><name pos:line="31" pos:column="41">stderr<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="49">"  git remote set-head %s %s\n"<pos:position pos:line="31" pos:column="80"/></literal></expr></argument>,
					<argument><expr><name><name pos:line="32" pos:column="41">argv<pos:position pos:line="32" pos:column="45"/></name><index pos:line="32" pos:column="45">[<expr><literal type="number" pos:line="32" pos:column="46">0<pos:position pos:line="32" pos:column="47"/></literal></expr>]<pos:position pos:line="32" pos:column="48"/></index></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="50">states<pos:position pos:line="32" pos:column="56"/></name><operator pos:line="32" pos:column="56">.<pos:position pos:line="32" pos:column="57"/></operator><name pos:line="32" pos:column="57">heads<pos:position pos:line="32" pos:column="62"/></name><operator pos:line="32" pos:column="62">.<pos:position pos:line="32" pos:column="63"/></operator><name pos:line="32" pos:column="63">items<pos:position pos:line="32" pos:column="68"/></name><index pos:line="32" pos:column="68">[<expr><name pos:line="32" pos:column="69">i<pos:position pos:line="32" pos:column="70"/></name></expr>]<pos:position pos:line="32" pos:column="71"/></index></name><operator pos:line="32" pos:column="71">.<pos:position pos:line="32" pos:column="72"/></operator><name pos:line="32" pos:column="72">string<pos:position pos:line="32" pos:column="78"/></name></expr></argument>)<pos:position pos:line="32" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="80"/></expr_stmt></block></for>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if></elseif> <else pos:line="33" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="25">head_name<pos:position pos:line="34" pos:column="34"/></name> <operator pos:line="34" pos:column="35">=<pos:position pos:line="34" pos:column="36"/></operator> <call><name pos:line="34" pos:column="37">xstrdup<pos:position pos:line="34" pos:column="44"/></name><argument_list pos:line="34" pos:column="44">(<argument><expr><name><name pos:line="34" pos:column="45">states<pos:position pos:line="34" pos:column="51"/></name><operator pos:line="34" pos:column="51">.<pos:position pos:line="34" pos:column="52"/></operator><name pos:line="34" pos:column="52">heads<pos:position pos:line="34" pos:column="57"/></name><operator pos:line="34" pos:column="57">.<pos:position pos:line="34" pos:column="58"/></operator><name pos:line="34" pos:column="58">items<pos:position pos:line="34" pos:column="63"/></name><index pos:line="34" pos:column="63">[<expr><literal type="number" pos:line="34" pos:column="64">0<pos:position pos:line="34" pos:column="65"/></literal></expr>]<pos:position pos:line="34" pos:column="66"/></index></name><operator pos:line="34" pos:column="66">.<pos:position pos:line="34" pos:column="67"/></operator><name pos:line="34" pos:column="67">string<pos:position pos:line="34" pos:column="73"/></name></expr></argument>)<pos:position pos:line="34" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="75"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">free_remote_ref_states<pos:position pos:line="35" pos:column="39"/></name><argument_list pos:line="35" pos:column="39">(<argument><expr><operator pos:line="35" pos:column="40">&amp;<pos:position pos:line="35" pos:column="45"/></operator><name pos:line="35" pos:column="41">states<pos:position pos:line="35" pos:column="47"/></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if></elseif> <elseif pos:line="36" pos:column="11">else <if pos:line="36" pos:column="16">if <condition pos:line="36" pos:column="19">(<expr><name pos:line="36" pos:column="20">opt_d<pos:position pos:line="36" pos:column="25"/></name> <operator pos:line="36" pos:column="26">&amp;&amp;<pos:position pos:line="36" pos:column="36"/></operator> <operator pos:line="36" pos:column="29">!<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="30">opt_a<pos:position pos:line="36" pos:column="35"/></name> <operator pos:line="36" pos:column="36">&amp;&amp;<pos:position pos:line="36" pos:column="46"/></operator> <name pos:line="36" pos:column="39">argc<pos:position pos:line="36" pos:column="43"/></name> <operator pos:line="36" pos:column="44">==<pos:position pos:line="36" pos:column="46"/></operator> <literal type="number" pos:line="36" pos:column="47">1<pos:position pos:line="36" pos:column="48"/></literal></expr>)<pos:position pos:line="36" pos:column="49"/></condition><then pos:line="36" pos:column="49"> <block pos:line="36" pos:column="50">{
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><call><name pos:line="37" pos:column="21">delete_ref<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><name pos:line="37" pos:column="32">NULL<pos:position pos:line="37" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="38">buf<pos:position pos:line="37" pos:column="41"/></name><operator pos:line="37" pos:column="41">.<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="42">buf<pos:position pos:line="37" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">NULL<pos:position pos:line="37" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="53">REF_NODEREF<pos:position pos:line="37" pos:column="64"/></name></expr></argument>)<pos:position pos:line="37" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="66"/></condition><then pos:line="37" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="25">result<pos:position pos:line="38" pos:column="31"/></name> <operator pos:line="38" pos:column="32">|=<pos:position pos:line="38" pos:column="34"/></operator> <call><name pos:line="38" pos:column="35">error<pos:position pos:line="38" pos:column="40"/></name><argument_list pos:line="38" pos:column="40">(<argument><expr><call><name pos:line="38" pos:column="41">_<pos:position pos:line="38" pos:column="42"/></name><argument_list pos:line="38" pos:column="42">(<argument><expr><literal type="string" pos:line="38" pos:column="43">"Could not delete %s"<pos:position pos:line="38" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="67">buf<pos:position pos:line="38" pos:column="70"/></name><operator pos:line="38" pos:column="70">.<pos:position pos:line="38" pos:column="71"/></operator><name pos:line="38" pos:column="71">buf<pos:position pos:line="38" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="76"/></expr_stmt></block></then></if>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if></elseif> <else pos:line="39" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="17">usage_with_options<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><name pos:line="40" pos:column="36">builtin_remote_sethead_usage<pos:position pos:line="40" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="66">options<pos:position pos:line="40" pos:column="73"/></name></expr></argument>)<pos:position pos:line="40" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="75"/></expr_stmt></block></else></if>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">head_name<pos:position pos:line="42" pos:column="22"/></name></expr>)<pos:position pos:line="42" pos:column="23"/></condition><then pos:line="42" pos:column="23"> <block pos:line="42" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">strbuf_addf<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><operator pos:line="43" pos:column="29">&amp;<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="30">buf2<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="36">"refs/remotes/%s/%s"<pos:position pos:line="43" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="58">argv<pos:position pos:line="43" pos:column="62"/></name><index pos:line="43" pos:column="62">[<expr><literal type="number" pos:line="43" pos:column="63">0<pos:position pos:line="43" pos:column="64"/></literal></expr>]<pos:position pos:line="43" pos:column="65"/></index></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="67">head_name<pos:position pos:line="43" pos:column="76"/></name></expr></argument>)<pos:position pos:line="43" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="78"/></expr_stmt>
		<comment type="block" pos:line="44" pos:column="17">/* make sure it's valid */</comment>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><operator pos:line="45" pos:column="21">!<pos:position pos:line="45" pos:column="22"/></operator><call><name pos:line="45" pos:column="22">ref_exists<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><name><name pos:line="45" pos:column="33">buf2<pos:position pos:line="45" pos:column="37"/></name><operator pos:line="45" pos:column="37">.<pos:position pos:line="45" pos:column="38"/></operator><name pos:line="45" pos:column="38">buf<pos:position pos:line="45" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="43"/></condition><then pos:line="45" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="25">result<pos:position pos:line="46" pos:column="31"/></name> <operator pos:line="46" pos:column="32">|=<pos:position pos:line="46" pos:column="34"/></operator> <call><name pos:line="46" pos:column="35">error<pos:position pos:line="46" pos:column="40"/></name><argument_list pos:line="46" pos:column="40">(<argument><expr><call><name pos:line="46" pos:column="41">_<pos:position pos:line="46" pos:column="42"/></name><argument_list pos:line="46" pos:column="42">(<argument><expr><literal type="string" pos:line="46" pos:column="43">"Not a valid ref: %s"<pos:position pos:line="46" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="67">buf2<pos:position pos:line="46" pos:column="71"/></name><operator pos:line="46" pos:column="71">.<pos:position pos:line="46" pos:column="72"/></operator><name pos:line="46" pos:column="72">buf<pos:position pos:line="46" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="77"/></expr_stmt></block></then>
		<elseif pos:line="47" pos:column="17">else <if pos:line="47" pos:column="22">if <condition pos:line="47" pos:column="25">(<expr><call><name pos:line="47" pos:column="26">create_symref<pos:position pos:line="47" pos:column="39"/></name><argument_list pos:line="47" pos:column="39">(<argument><expr><name><name pos:line="47" pos:column="40">buf<pos:position pos:line="47" pos:column="43"/></name><operator pos:line="47" pos:column="43">.<pos:position pos:line="47" pos:column="44"/></operator><name pos:line="47" pos:column="44">buf<pos:position pos:line="47" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="49">buf2<pos:position pos:line="47" pos:column="53"/></name><operator pos:line="47" pos:column="53">.<pos:position pos:line="47" pos:column="54"/></operator><name pos:line="47" pos:column="54">buf<pos:position pos:line="47" pos:column="57"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="59">"remote set-head"<pos:position pos:line="47" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="78"/></condition><then pos:line="47" pos:column="78">
			<block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="25">result<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">|=<pos:position pos:line="48" pos:column="34"/></operator> <call><name pos:line="48" pos:column="35">error<pos:position pos:line="48" pos:column="40"/></name><argument_list pos:line="48" pos:column="40">(<argument><expr><call><name pos:line="48" pos:column="41">_<pos:position pos:line="48" pos:column="42"/></name><argument_list pos:line="48" pos:column="42">(<argument><expr><literal type="string" pos:line="48" pos:column="43">"Could not setup %s"<pos:position pos:line="48" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="66">buf<pos:position pos:line="48" pos:column="69"/></name><operator pos:line="48" pos:column="69">.<pos:position pos:line="48" pos:column="70"/></operator><name pos:line="48" pos:column="70">buf<pos:position pos:line="48" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="75"/></expr_stmt></block></then></if></elseif></if>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">opt_a<pos:position pos:line="49" pos:column="26"/></name></expr>)<pos:position pos:line="49" pos:column="27"/></condition><then pos:line="49" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="25">printf<pos:position pos:line="50" pos:column="31"/></name><argument_list pos:line="50" pos:column="31">(<argument><expr><literal type="string" pos:line="50" pos:column="32">"%s/HEAD set to %s\n"<pos:position pos:line="50" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="55">argv<pos:position pos:line="50" pos:column="59"/></name><index pos:line="50" pos:column="59">[<expr><literal type="number" pos:line="50" pos:column="60">0<pos:position pos:line="50" pos:column="61"/></literal></expr>]<pos:position pos:line="50" pos:column="62"/></index></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="64">head_name<pos:position pos:line="50" pos:column="73"/></name></expr></argument>)<pos:position pos:line="50" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="75"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">free<pos:position pos:line="51" pos:column="21"/></name><argument_list pos:line="51" pos:column="21">(<argument><expr><name pos:line="51" pos:column="22">head_name<pos:position pos:line="51" pos:column="31"/></name></expr></argument>)<pos:position pos:line="51" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="54" pos:column="9">strbuf_release<pos:position pos:line="54" pos:column="23"/></name><argument_list pos:line="54" pos:column="23">(<argument><expr><operator pos:line="54" pos:column="24">&amp;<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="25">buf<pos:position pos:line="54" pos:column="28"/></name></expr></argument>)<pos:position pos:line="54" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">strbuf_release<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><operator pos:line="55" pos:column="24">&amp;<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="25">buf2<pos:position pos:line="55" pos:column="29"/></name></expr></argument>)<pos:position pos:line="55" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="31"/></expr_stmt>
	<return pos:line="56" pos:column="9">return <expr><name pos:line="56" pos:column="16">result<pos:position pos:line="56" pos:column="22"/></name></expr>;<pos:position pos:line="56" pos:column="23"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
