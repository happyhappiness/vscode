<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4908_git-2.6.7.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_fsck<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name pos:line="1" pos:column="14">int<pos:position pos:line="1" pos:column="17"/></name></type> <name pos:line="1" pos:column="18">argc<pos:position pos:line="1" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier><modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">argv<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">prefix<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">heads<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">alternate_object_database<pos:position pos:line="4" pos:column="41"/></name></name> <modifier pos:line="4" pos:column="42">*<pos:position pos:line="4" pos:column="43"/></modifier></type><name pos:line="4" pos:column="43">alt<pos:position pos:line="4" pos:column="46"/></name></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">errors_found<pos:position pos:line="6" pos:column="21"/></name> <operator pos:line="6" pos:column="22">=<pos:position pos:line="6" pos:column="23"/></operator> <literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name pos:line="7" pos:column="9">check_replace_refs<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">=<pos:position pos:line="7" pos:column="29"/></operator> <literal type="number" pos:line="7" pos:column="30">0<pos:position pos:line="7" pos:column="31"/></literal></expr>;<pos:position pos:line="7" pos:column="32"/></expr_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">argc<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <call><name pos:line="9" pos:column="16">parse_options<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">argc<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="36">argv<pos:position pos:line="9" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="42">prefix<pos:position pos:line="9" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="50">fsck_opts<pos:position pos:line="9" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="61">fsck_usage<pos:position pos:line="9" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="73">0<pos:position pos:line="9" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="76"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="11" pos:column="9">fsck_walk_options<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">.<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="27">walk<pos:position pos:line="11" pos:column="31"/></name></name> <operator pos:line="11" pos:column="32">=<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="34">mark_object<pos:position pos:line="11" pos:column="45"/></name></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">fsck_obj_options<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">.<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">walk<pos:position pos:line="12" pos:column="30"/></name></name> <operator pos:line="12" pos:column="31">=<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="33">mark_used<pos:position pos:line="12" pos:column="42"/></name></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">fsck_obj_options<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">.<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">error_func<pos:position pos:line="13" pos:column="36"/></name></name> <operator pos:line="13" pos:column="37">=<pos:position pos:line="13" pos:column="38"/></operator> <name pos:line="13" pos:column="39">fsck_error_func<pos:position pos:line="13" pos:column="54"/></name></expr>;<pos:position pos:line="13" pos:column="55"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">check_strict<pos:position pos:line="14" pos:column="25"/></name></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="17">fsck_obj_options<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">.<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">strict<pos:position pos:line="15" pos:column="40"/></name></name> <operator pos:line="15" pos:column="41">=<pos:position pos:line="15" pos:column="42"/></operator> <literal type="number" pos:line="15" pos:column="43">1<pos:position pos:line="15" pos:column="44"/></literal></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">show_progress<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">==<pos:position pos:line="17" pos:column="29"/></operator> <operator pos:line="17" pos:column="30">-<pos:position pos:line="17" pos:column="31"/></operator><literal type="number" pos:line="17" pos:column="31">1<pos:position pos:line="17" pos:column="32"/></literal></expr>)<pos:position pos:line="17" pos:column="33"/></condition><then pos:line="17" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="17">show_progress<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">=<pos:position pos:line="18" pos:column="32"/></operator> <call><name pos:line="18" pos:column="33">isatty<pos:position pos:line="18" pos:column="39"/></name><argument_list pos:line="18" pos:column="39">(<argument><expr><literal type="number" pos:line="18" pos:column="40">2<pos:position pos:line="18" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt></block></then></if>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">verbose<pos:position pos:line="19" pos:column="20"/></name></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="17">show_progress<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">=<pos:position pos:line="20" pos:column="32"/></operator> <literal type="number" pos:line="20" pos:column="33">0<pos:position pos:line="20" pos:column="34"/></literal></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt></block></then></if>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">write_lost_and_found<pos:position pos:line="22" pos:column="33"/></name></expr>)<pos:position pos:line="22" pos:column="34"/></condition><then pos:line="22" pos:column="34"> <block pos:line="22" pos:column="35">{
		<expr_stmt><expr><name pos:line="23" pos:column="17">check_full<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">=<pos:position pos:line="23" pos:column="29"/></operator> <literal type="number" pos:line="23" pos:column="30">1<pos:position pos:line="23" pos:column="31"/></literal></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="24" pos:column="17">include_reflogs<pos:position pos:line="24" pos:column="32"/></name> <operator pos:line="24" pos:column="33">=<pos:position pos:line="24" pos:column="34"/></operator> <literal type="number" pos:line="24" pos:column="35">0<pos:position pos:line="24" pos:column="36"/></literal></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">git_config<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><name pos:line="27" pos:column="20">fsck_config<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="33">NULL<pos:position pos:line="27" pos:column="37"/></name></expr></argument>)<pos:position pos:line="27" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="29" pos:column="9">fsck_head_link<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">()<pos:position pos:line="29" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">!<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">connectivity_only<pos:position pos:line="30" pos:column="31"/></name></expr>)<pos:position pos:line="30" pos:column="32"/></condition><then pos:line="30" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="17">fsck_object_dir<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><call><name pos:line="31" pos:column="33">get_object_directory<pos:position pos:line="31" pos:column="53"/></name><argument_list pos:line="31" pos:column="53">()<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">prepare_alt_odb<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">()<pos:position pos:line="33" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt>
	<for pos:line="34" pos:column="9">for <control pos:line="34" pos:column="13">(<init><expr><name pos:line="34" pos:column="14">alt<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <name pos:line="34" pos:column="20">alt_odb_list<pos:position pos:line="34" pos:column="32"/></name></expr>;<pos:position pos:line="34" pos:column="33"/></init> <condition><expr><name pos:line="34" pos:column="34">alt<pos:position pos:line="34" pos:column="37"/></name></expr>;<pos:position pos:line="34" pos:column="38"/></condition> <incr><expr><name pos:line="34" pos:column="39">alt<pos:position pos:line="34" pos:column="42"/></name> <operator pos:line="34" pos:column="43">=<pos:position pos:line="34" pos:column="44"/></operator> <name><name pos:line="34" pos:column="45">alt<pos:position pos:line="34" pos:column="48"/></name><operator pos:line="34" pos:column="48">-&gt;<pos:position pos:line="34" pos:column="53"/></operator><name pos:line="34" pos:column="50">next<pos:position pos:line="34" pos:column="54"/></name></name></expr></incr>)<pos:position pos:line="34" pos:column="55"/></control> <block pos:line="34" pos:column="56">{
		<decl_stmt><decl><type><name pos:line="35" pos:column="17">char<pos:position pos:line="35" pos:column="21"/></name></type> <name><name pos:line="35" pos:column="22">namebuf<pos:position pos:line="35" pos:column="29"/></name><index pos:line="35" pos:column="29">[<expr><name pos:line="35" pos:column="30">PATH_MAX<pos:position pos:line="35" pos:column="38"/></name></expr>]<pos:position pos:line="35" pos:column="39"/></index></name></decl>;<pos:position pos:line="35" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="36" pos:column="17">int<pos:position pos:line="36" pos:column="20"/></name></type> <name pos:line="36" pos:column="21">namelen<pos:position pos:line="36" pos:column="28"/></name> <init pos:line="36" pos:column="29">= <expr><name><name pos:line="36" pos:column="31">alt<pos:position pos:line="36" pos:column="34"/></name><operator pos:line="36" pos:column="34">-&gt;<pos:position pos:line="36" pos:column="39"/></operator><name pos:line="36" pos:column="36">name<pos:position pos:line="36" pos:column="40"/></name></name> <operator pos:line="36" pos:column="41">-<pos:position pos:line="36" pos:column="42"/></operator> <name><name pos:line="36" pos:column="43">alt<pos:position pos:line="36" pos:column="46"/></name><operator pos:line="36" pos:column="46">-&gt;<pos:position pos:line="36" pos:column="51"/></operator><name pos:line="36" pos:column="48">base<pos:position pos:line="36" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="36" pos:column="53"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">memcpy<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><name pos:line="37" pos:column="24">namebuf<pos:position pos:line="37" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="33">alt<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">-&gt;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="38">base<pos:position pos:line="37" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="44">namelen<pos:position pos:line="37" pos:column="51"/></name></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="38" pos:column="17">namebuf<pos:position pos:line="38" pos:column="24"/></name><index pos:line="38" pos:column="24">[<expr><name pos:line="38" pos:column="25">namelen<pos:position pos:line="38" pos:column="32"/></name> <operator pos:line="38" pos:column="33">-<pos:position pos:line="38" pos:column="34"/></operator> <literal type="number" pos:line="38" pos:column="35">1<pos:position pos:line="38" pos:column="36"/></literal></expr>]<pos:position pos:line="38" pos:column="37"/></index></name> <operator pos:line="38" pos:column="38">=<pos:position pos:line="38" pos:column="39"/></operator> <literal type="number" pos:line="38" pos:column="40">0<pos:position pos:line="38" pos:column="41"/></literal></expr>;<pos:position pos:line="38" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">fsck_object_dir<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><name pos:line="39" pos:column="33">namebuf<pos:position pos:line="39" pos:column="40"/></name></expr></argument>)<pos:position pos:line="39" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></for>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">check_full<pos:position pos:line="42" pos:column="23"/></name></expr>)<pos:position pos:line="42" pos:column="24"/></condition><then pos:line="42" pos:column="24"> <block pos:line="42" pos:column="25">{
		<decl_stmt><decl><type><name><name pos:line="43" pos:column="17">struct<pos:position pos:line="43" pos:column="23"/></name> <name pos:line="43" pos:column="24">packed_git<pos:position pos:line="43" pos:column="34"/></name></name> <modifier pos:line="43" pos:column="35">*<pos:position pos:line="43" pos:column="36"/></modifier></type><name pos:line="43" pos:column="36">p<pos:position pos:line="43" pos:column="37"/></name></decl>;<pos:position pos:line="43" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="44" pos:column="17">uint32_t<pos:position pos:line="44" pos:column="25"/></name></type> <name pos:line="44" pos:column="26">total<pos:position pos:line="44" pos:column="31"/></name> <init pos:line="44" pos:column="32">= <expr><literal type="number" pos:line="44" pos:column="34">0<pos:position pos:line="44" pos:column="35"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="44" pos:column="37">count<pos:position pos:line="44" pos:column="42"/></name> <init pos:line="44" pos:column="43">= <expr><literal type="number" pos:line="44" pos:column="45">0<pos:position pos:line="44" pos:column="46"/></literal></expr></init></decl>;<pos:position pos:line="44" pos:column="47"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="45" pos:column="17">struct<pos:position pos:line="45" pos:column="23"/></name> <name pos:line="45" pos:column="24">progress<pos:position pos:line="45" pos:column="32"/></name></name> <modifier pos:line="45" pos:column="33">*<pos:position pos:line="45" pos:column="34"/></modifier></type><name pos:line="45" pos:column="34">progress<pos:position pos:line="45" pos:column="42"/></name> <init pos:line="45" pos:column="43">= <expr><name pos:line="45" pos:column="45">NULL<pos:position pos:line="45" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="45" pos:column="50"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="47" pos:column="17">prepare_packed_git<pos:position pos:line="47" pos:column="35"/></name><argument_list pos:line="47" pos:column="35">()<pos:position pos:line="47" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="38"/></expr_stmt>

		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">show_progress<pos:position pos:line="49" pos:column="34"/></name></expr>)<pos:position pos:line="49" pos:column="35"/></condition><then pos:line="49" pos:column="35"> <block pos:line="49" pos:column="36">{
			<for pos:line="50" pos:column="25">for <control pos:line="50" pos:column="29">(<init><expr><name pos:line="50" pos:column="30">p<pos:position pos:line="50" pos:column="31"/></name> <operator pos:line="50" pos:column="32">=<pos:position pos:line="50" pos:column="33"/></operator> <name pos:line="50" pos:column="34">packed_git<pos:position pos:line="50" pos:column="44"/></name></expr>;<pos:position pos:line="50" pos:column="45"/></init> <condition><expr><name pos:line="50" pos:column="46">p<pos:position pos:line="50" pos:column="47"/></name></expr>;<pos:position pos:line="50" pos:column="48"/></condition> <incr><expr><name pos:line="50" pos:column="49">p<pos:position pos:line="50" pos:column="50"/></name> <operator pos:line="50" pos:column="51">=<pos:position pos:line="50" pos:column="52"/></operator> <name><name pos:line="50" pos:column="53">p<pos:position pos:line="50" pos:column="54"/></name><operator pos:line="50" pos:column="54">-&gt;<pos:position pos:line="50" pos:column="59"/></operator><name pos:line="50" pos:column="56">next<pos:position pos:line="50" pos:column="60"/></name></name></expr></incr>)<pos:position pos:line="50" pos:column="61"/></control> <block pos:line="50" pos:column="62">{
				<if pos:line="51" pos:column="33">if <condition pos:line="51" pos:column="36">(<expr><call><name pos:line="51" pos:column="37">open_pack_index<pos:position pos:line="51" pos:column="52"/></name><argument_list pos:line="51" pos:column="52">(<argument><expr><name pos:line="51" pos:column="53">p<pos:position pos:line="51" pos:column="54"/></name></expr></argument>)<pos:position pos:line="51" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="56"/></condition><then pos:line="51" pos:column="56">
					<block type="pseudo"><continue pos:line="52" pos:column="41">continue;<pos:position pos:line="52" pos:column="50"/></continue></block></then></if>
				<expr_stmt><expr><name pos:line="53" pos:column="33">total<pos:position pos:line="53" pos:column="38"/></name> <operator pos:line="53" pos:column="39">+=<pos:position pos:line="53" pos:column="41"/></operator> <name><name pos:line="53" pos:column="42">p<pos:position pos:line="53" pos:column="43"/></name><operator pos:line="53" pos:column="43">-&gt;<pos:position pos:line="53" pos:column="48"/></operator><name pos:line="53" pos:column="45">num_objects<pos:position pos:line="53" pos:column="56"/></name></name></expr>;<pos:position pos:line="53" pos:column="57"/></expr_stmt>
			}<pos:position pos:line="54" pos:column="26"/></block></for>

			<expr_stmt><expr><name pos:line="56" pos:column="25">progress<pos:position pos:line="56" pos:column="33"/></name> <operator pos:line="56" pos:column="34">=<pos:position pos:line="56" pos:column="35"/></operator> <call><name pos:line="56" pos:column="36">start_progress<pos:position pos:line="56" pos:column="50"/></name><argument_list pos:line="56" pos:column="50">(<argument><expr><call><name pos:line="56" pos:column="51">_<pos:position pos:line="56" pos:column="52"/></name><argument_list pos:line="56" pos:column="52">(<argument><expr><literal type="string" pos:line="56" pos:column="53">"Checking objects"<pos:position pos:line="56" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="56" pos:column="74">total<pos:position pos:line="56" pos:column="79"/></name></expr></argument>)<pos:position pos:line="56" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="81"/></expr_stmt>
		}<pos:position pos:line="57" pos:column="18"/></block></then></if>
		<for pos:line="58" pos:column="17">for <control pos:line="58" pos:column="21">(<init><expr><name pos:line="58" pos:column="22">p<pos:position pos:line="58" pos:column="23"/></name> <operator pos:line="58" pos:column="24">=<pos:position pos:line="58" pos:column="25"/></operator> <name pos:line="58" pos:column="26">packed_git<pos:position pos:line="58" pos:column="36"/></name></expr>;<pos:position pos:line="58" pos:column="37"/></init> <condition><expr><name pos:line="58" pos:column="38">p<pos:position pos:line="58" pos:column="39"/></name></expr>;<pos:position pos:line="58" pos:column="40"/></condition> <incr><expr><name pos:line="58" pos:column="41">p<pos:position pos:line="58" pos:column="42"/></name> <operator pos:line="58" pos:column="43">=<pos:position pos:line="58" pos:column="44"/></operator> <name><name pos:line="58" pos:column="45">p<pos:position pos:line="58" pos:column="46"/></name><operator pos:line="58" pos:column="46">-&gt;<pos:position pos:line="58" pos:column="51"/></operator><name pos:line="58" pos:column="48">next<pos:position pos:line="58" pos:column="52"/></name></name></expr></incr>)<pos:position pos:line="58" pos:column="53"/></control> <block pos:line="58" pos:column="54">{
			<comment type="block" pos:line="59" pos:column="25">/* verify gives error messages itself */</comment>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><call><name pos:line="60" pos:column="29">verify_pack<pos:position pos:line="60" pos:column="40"/></name><argument_list pos:line="60" pos:column="40">(<argument><expr><name pos:line="60" pos:column="41">p<pos:position pos:line="60" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="44">fsck_obj_buffer<pos:position pos:line="60" pos:column="59"/></name></expr></argument>,
					<argument><expr><name pos:line="61" pos:column="41">progress<pos:position pos:line="61" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="51">count<pos:position pos:line="61" pos:column="56"/></name></expr></argument>)<pos:position pos:line="61" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="58"/></condition><then pos:line="61" pos:column="58">
				<block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="33">errors_found<pos:position pos:line="62" pos:column="45"/></name> <operator pos:line="62" pos:column="46">|=<pos:position pos:line="62" pos:column="48"/></operator> <name pos:line="62" pos:column="49">ERROR_PACK<pos:position pos:line="62" pos:column="59"/></name></expr>;<pos:position pos:line="62" pos:column="60"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="63" pos:column="25">count<pos:position pos:line="63" pos:column="30"/></name> <operator pos:line="63" pos:column="31">+=<pos:position pos:line="63" pos:column="33"/></operator> <name><name pos:line="63" pos:column="34">p<pos:position pos:line="63" pos:column="35"/></name><operator pos:line="63" pos:column="35">-&gt;<pos:position pos:line="63" pos:column="40"/></operator><name pos:line="63" pos:column="37">num_objects<pos:position pos:line="63" pos:column="48"/></name></name></expr>;<pos:position pos:line="63" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="64" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="65" pos:column="17">stop_progress<pos:position pos:line="65" pos:column="30"/></name><argument_list pos:line="65" pos:column="30">(<argument><expr><operator pos:line="65" pos:column="31">&amp;<pos:position pos:line="65" pos:column="36"/></operator><name pos:line="65" pos:column="32">progress<pos:position pos:line="65" pos:column="40"/></name></expr></argument>)<pos:position pos:line="65" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="68" pos:column="9">heads<pos:position pos:line="68" pos:column="14"/></name> <operator pos:line="68" pos:column="15">=<pos:position pos:line="68" pos:column="16"/></operator> <literal type="number" pos:line="68" pos:column="17">0<pos:position pos:line="68" pos:column="18"/></literal></expr>;<pos:position pos:line="68" pos:column="19"/></expr_stmt>
	<for pos:line="69" pos:column="9">for <control pos:line="69" pos:column="13">(<init><expr><name pos:line="69" pos:column="14">i<pos:position pos:line="69" pos:column="15"/></name> <operator pos:line="69" pos:column="16">=<pos:position pos:line="69" pos:column="17"/></operator> <literal type="number" pos:line="69" pos:column="18">0<pos:position pos:line="69" pos:column="19"/></literal></expr>;<pos:position pos:line="69" pos:column="20"/></init> <condition><expr><name pos:line="69" pos:column="21">i<pos:position pos:line="69" pos:column="22"/></name> <operator pos:line="69" pos:column="23">&lt;<pos:position pos:line="69" pos:column="27"/></operator> <name pos:line="69" pos:column="25">argc<pos:position pos:line="69" pos:column="29"/></name></expr>;<pos:position pos:line="69" pos:column="30"/></condition> <incr><expr><name pos:line="69" pos:column="31">i<pos:position pos:line="69" pos:column="32"/></name><operator pos:line="69" pos:column="32">++<pos:position pos:line="69" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="69" pos:column="35"/></control> <block pos:line="69" pos:column="36">{
		<decl_stmt><decl><type><specifier pos:line="70" pos:column="17">const<pos:position pos:line="70" pos:column="22"/></specifier> <name pos:line="70" pos:column="23">char<pos:position pos:line="70" pos:column="27"/></name> <modifier pos:line="70" pos:column="28">*<pos:position pos:line="70" pos:column="29"/></modifier></type><name pos:line="70" pos:column="29">arg<pos:position pos:line="70" pos:column="32"/></name> <init pos:line="70" pos:column="33">= <expr><name><name pos:line="70" pos:column="35">argv<pos:position pos:line="70" pos:column="39"/></name><index pos:line="70" pos:column="39">[<expr><name pos:line="70" pos:column="40">i<pos:position pos:line="70" pos:column="41"/></name></expr>]<pos:position pos:line="70" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="70" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="71" pos:column="17">unsigned<pos:position pos:line="71" pos:column="25"/></name> <name pos:line="71" pos:column="26">char<pos:position pos:line="71" pos:column="30"/></name></type> <name><name pos:line="71" pos:column="31">sha1<pos:position pos:line="71" pos:column="35"/></name><index pos:line="71" pos:column="35">[<expr><literal type="number" pos:line="71" pos:column="36">20<pos:position pos:line="71" pos:column="38"/></literal></expr>]<pos:position pos:line="71" pos:column="39"/></index></name></decl>;<pos:position pos:line="71" pos:column="40"/></decl_stmt>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><operator pos:line="72" pos:column="21">!<pos:position pos:line="72" pos:column="22"/></operator><call><name pos:line="72" pos:column="22">get_sha1<pos:position pos:line="72" pos:column="30"/></name><argument_list pos:line="72" pos:column="30">(<argument><expr><name pos:line="72" pos:column="31">arg<pos:position pos:line="72" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="36">sha1<pos:position pos:line="72" pos:column="40"/></name></expr></argument>)<pos:position pos:line="72" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="42"/></condition><then pos:line="72" pos:column="42"> <block pos:line="72" pos:column="43">{
			<decl_stmt><decl><type><name><name pos:line="73" pos:column="25">struct<pos:position pos:line="73" pos:column="31"/></name> <name pos:line="73" pos:column="32">object<pos:position pos:line="73" pos:column="38"/></name></name> <modifier pos:line="73" pos:column="39">*<pos:position pos:line="73" pos:column="40"/></modifier></type><name pos:line="73" pos:column="40">obj<pos:position pos:line="73" pos:column="43"/></name> <init pos:line="73" pos:column="44">= <expr><call><name pos:line="73" pos:column="46">lookup_object<pos:position pos:line="73" pos:column="59"/></name><argument_list pos:line="73" pos:column="59">(<argument><expr><name pos:line="73" pos:column="60">sha1<pos:position pos:line="73" pos:column="64"/></name></expr></argument>)<pos:position pos:line="73" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="73" pos:column="66"/></decl_stmt>

			<comment type="block" pos:line="75" pos:column="25">/* Error is printed by lookup_object(). */</comment>
			<if pos:line="76" pos:column="25">if <condition pos:line="76" pos:column="28">(<expr><operator pos:line="76" pos:column="29">!<pos:position pos:line="76" pos:column="30"/></operator><name pos:line="76" pos:column="30">obj<pos:position pos:line="76" pos:column="33"/></name></expr>)<pos:position pos:line="76" pos:column="34"/></condition><then pos:line="76" pos:column="34">
				<block type="pseudo"><continue pos:line="77" pos:column="33">continue;<pos:position pos:line="77" pos:column="42"/></continue></block></then></if>

			<expr_stmt><expr><name><name pos:line="79" pos:column="25">obj<pos:position pos:line="79" pos:column="28"/></name><operator pos:line="79" pos:column="28">-&gt;<pos:position pos:line="79" pos:column="33"/></operator><name pos:line="79" pos:column="30">used<pos:position pos:line="79" pos:column="34"/></name></name> <operator pos:line="79" pos:column="35">=<pos:position pos:line="79" pos:column="36"/></operator> <literal type="number" pos:line="79" pos:column="37">1<pos:position pos:line="79" pos:column="38"/></literal></expr>;<pos:position pos:line="79" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="80" pos:column="25">mark_object_reachable<pos:position pos:line="80" pos:column="46"/></name><argument_list pos:line="80" pos:column="46">(<argument><expr><name pos:line="80" pos:column="47">obj<pos:position pos:line="80" pos:column="50"/></name></expr></argument>)<pos:position pos:line="80" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name pos:line="81" pos:column="25">heads<pos:position pos:line="81" pos:column="30"/></name><operator pos:line="81" pos:column="30">++<pos:position pos:line="81" pos:column="32"/></operator></expr>;<pos:position pos:line="81" pos:column="33"/></expr_stmt>
			<continue pos:line="82" pos:column="25">continue;<pos:position pos:line="82" pos:column="34"/></continue>
		}<pos:position pos:line="83" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="84" pos:column="17">error<pos:position pos:line="84" pos:column="22"/></name><argument_list pos:line="84" pos:column="22">(<argument><expr><literal type="string" pos:line="84" pos:column="23">"invalid parameter: expected sha1, got '%s'"<pos:position pos:line="84" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="69">arg<pos:position pos:line="84" pos:column="72"/></name></expr></argument>)<pos:position pos:line="84" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="74"/></expr_stmt>
	}<pos:position pos:line="85" pos:column="10"/></block></for>

	<comment type="block" pos:line="87" pos:column="9">/*
	 * If we've not been given any explicit head information, do the
	 * default ones from .git/refs. We also consider the index file
	 * in this case (ie this implies --cache).
	 */</comment>
	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><operator pos:line="92" pos:column="13">!<pos:position pos:line="92" pos:column="14"/></operator><name pos:line="92" pos:column="14">heads<pos:position pos:line="92" pos:column="19"/></name></expr>)<pos:position pos:line="92" pos:column="20"/></condition><then pos:line="92" pos:column="20"> <block pos:line="92" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">get_default_heads<pos:position pos:line="93" pos:column="34"/></name><argument_list pos:line="93" pos:column="34">()<pos:position pos:line="93" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="94" pos:column="17">keep_cache_objects<pos:position pos:line="94" pos:column="35"/></name> <operator pos:line="94" pos:column="36">=<pos:position pos:line="94" pos:column="37"/></operator> <literal type="number" pos:line="94" pos:column="38">1<pos:position pos:line="94" pos:column="39"/></literal></expr>;<pos:position pos:line="94" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="95" pos:column="10"/></block></then></if>

	<if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name pos:line="97" pos:column="13">keep_cache_objects<pos:position pos:line="97" pos:column="31"/></name></expr>)<pos:position pos:line="97" pos:column="32"/></condition><then pos:line="97" pos:column="32"> <block pos:line="97" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="98" pos:column="17">read_cache<pos:position pos:line="98" pos:column="27"/></name><argument_list pos:line="98" pos:column="27">()<pos:position pos:line="98" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="30"/></expr_stmt>
		<for pos:line="99" pos:column="17">for <control pos:line="99" pos:column="21">(<init><expr><name pos:line="99" pos:column="22">i<pos:position pos:line="99" pos:column="23"/></name> <operator pos:line="99" pos:column="24">=<pos:position pos:line="99" pos:column="25"/></operator> <literal type="number" pos:line="99" pos:column="26">0<pos:position pos:line="99" pos:column="27"/></literal></expr>;<pos:position pos:line="99" pos:column="28"/></init> <condition><expr><name pos:line="99" pos:column="29">i<pos:position pos:line="99" pos:column="30"/></name> <operator pos:line="99" pos:column="31">&lt;<pos:position pos:line="99" pos:column="35"/></operator> <name pos:line="99" pos:column="33">active_nr<pos:position pos:line="99" pos:column="42"/></name></expr>;<pos:position pos:line="99" pos:column="43"/></condition> <incr><expr><name pos:line="99" pos:column="44">i<pos:position pos:line="99" pos:column="45"/></name><operator pos:line="99" pos:column="45">++<pos:position pos:line="99" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="99" pos:column="48"/></control> <block pos:line="99" pos:column="49">{
			<decl_stmt><decl><type><name pos:line="100" pos:column="25">unsigned<pos:position pos:line="100" pos:column="33"/></name> <name pos:line="100" pos:column="34">int<pos:position pos:line="100" pos:column="37"/></name></type> <name pos:line="100" pos:column="38">mode<pos:position pos:line="100" pos:column="42"/></name></decl>;<pos:position pos:line="100" pos:column="43"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="101" pos:column="25">struct<pos:position pos:line="101" pos:column="31"/></name> <name pos:line="101" pos:column="32">blob<pos:position pos:line="101" pos:column="36"/></name></name> <modifier pos:line="101" pos:column="37">*<pos:position pos:line="101" pos:column="38"/></modifier></type><name pos:line="101" pos:column="38">blob<pos:position pos:line="101" pos:column="42"/></name></decl>;<pos:position pos:line="101" pos:column="43"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="102" pos:column="25">struct<pos:position pos:line="102" pos:column="31"/></name> <name pos:line="102" pos:column="32">object<pos:position pos:line="102" pos:column="38"/></name></name> <modifier pos:line="102" pos:column="39">*<pos:position pos:line="102" pos:column="40"/></modifier></type><name pos:line="102" pos:column="40">obj<pos:position pos:line="102" pos:column="43"/></name></decl>;<pos:position pos:line="102" pos:column="44"/></decl_stmt>

			<expr_stmt><expr><name pos:line="104" pos:column="25">mode<pos:position pos:line="104" pos:column="29"/></name> <operator pos:line="104" pos:column="30">=<pos:position pos:line="104" pos:column="31"/></operator> <name><name pos:line="104" pos:column="32">active_cache<pos:position pos:line="104" pos:column="44"/></name><index pos:line="104" pos:column="44">[<expr><name pos:line="104" pos:column="45">i<pos:position pos:line="104" pos:column="46"/></name></expr>]<pos:position pos:line="104" pos:column="47"/></index></name><operator pos:line="104" pos:column="47">-&gt;<pos:position pos:line="104" pos:column="52"/></operator><name pos:line="104" pos:column="49">ce_mode<pos:position pos:line="104" pos:column="56"/></name></expr>;<pos:position pos:line="104" pos:column="57"/></expr_stmt>
			<if pos:line="105" pos:column="25">if <condition pos:line="105" pos:column="28">(<expr><call><name pos:line="105" pos:column="29">S_ISGITLINK<pos:position pos:line="105" pos:column="40"/></name><argument_list pos:line="105" pos:column="40">(<argument><expr><name pos:line="105" pos:column="41">mode<pos:position pos:line="105" pos:column="45"/></name></expr></argument>)<pos:position pos:line="105" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="105" pos:column="47"/></condition><then pos:line="105" pos:column="47">
				<block type="pseudo"><continue pos:line="106" pos:column="33">continue;<pos:position pos:line="106" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="107" pos:column="25">blob<pos:position pos:line="107" pos:column="29"/></name> <operator pos:line="107" pos:column="30">=<pos:position pos:line="107" pos:column="31"/></operator> <call><name pos:line="107" pos:column="32">lookup_blob<pos:position pos:line="107" pos:column="43"/></name><argument_list pos:line="107" pos:column="43">(<argument><expr><name><name pos:line="107" pos:column="44">active_cache<pos:position pos:line="107" pos:column="56"/></name><index pos:line="107" pos:column="56">[<expr><name pos:line="107" pos:column="57">i<pos:position pos:line="107" pos:column="58"/></name></expr>]<pos:position pos:line="107" pos:column="59"/></index></name><operator pos:line="107" pos:column="59">-&gt;<pos:position pos:line="107" pos:column="64"/></operator><name pos:line="107" pos:column="61">sha1<pos:position pos:line="107" pos:column="65"/></name></expr></argument>)<pos:position pos:line="107" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="67"/></expr_stmt>
			<if pos:line="108" pos:column="25">if <condition pos:line="108" pos:column="28">(<expr><operator pos:line="108" pos:column="29">!<pos:position pos:line="108" pos:column="30"/></operator><name pos:line="108" pos:column="30">blob<pos:position pos:line="108" pos:column="34"/></name></expr>)<pos:position pos:line="108" pos:column="35"/></condition><then pos:line="108" pos:column="35">
				<block type="pseudo"><continue pos:line="109" pos:column="33">continue;<pos:position pos:line="109" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="110" pos:column="25">obj<pos:position pos:line="110" pos:column="28"/></name> <operator pos:line="110" pos:column="29">=<pos:position pos:line="110" pos:column="30"/></operator> <operator pos:line="110" pos:column="31">&amp;<pos:position pos:line="110" pos:column="36"/></operator><name><name pos:line="110" pos:column="32">blob<pos:position pos:line="110" pos:column="36"/></name><operator pos:line="110" pos:column="36">-&gt;<pos:position pos:line="110" pos:column="41"/></operator><name pos:line="110" pos:column="38">object<pos:position pos:line="110" pos:column="44"/></name></name></expr>;<pos:position pos:line="110" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="111" pos:column="25">obj<pos:position pos:line="111" pos:column="28"/></name><operator pos:line="111" pos:column="28">-&gt;<pos:position pos:line="111" pos:column="33"/></operator><name pos:line="111" pos:column="30">used<pos:position pos:line="111" pos:column="34"/></name></name> <operator pos:line="111" pos:column="35">=<pos:position pos:line="111" pos:column="36"/></operator> <literal type="number" pos:line="111" pos:column="37">1<pos:position pos:line="111" pos:column="38"/></literal></expr>;<pos:position pos:line="111" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="112" pos:column="25">mark_object_reachable<pos:position pos:line="112" pos:column="46"/></name><argument_list pos:line="112" pos:column="46">(<argument><expr><name pos:line="112" pos:column="47">obj<pos:position pos:line="112" pos:column="50"/></name></expr></argument>)<pos:position pos:line="112" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="113" pos:column="18"/></block></for>
		<if pos:line="114" pos:column="17">if <condition pos:line="114" pos:column="20">(<expr><name pos:line="114" pos:column="21">active_cache_tree<pos:position pos:line="114" pos:column="38"/></name></expr>)<pos:position pos:line="114" pos:column="39"/></condition><then pos:line="114" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="115" pos:column="25">fsck_cache_tree<pos:position pos:line="115" pos:column="40"/></name><argument_list pos:line="115" pos:column="40">(<argument><expr><name pos:line="115" pos:column="41">active_cache_tree<pos:position pos:line="115" pos:column="58"/></name></expr></argument>)<pos:position pos:line="115" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="60"/></expr_stmt></block></then></if>
	}<pos:position pos:line="116" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="118" pos:column="9">check_connectivity<pos:position pos:line="118" pos:column="27"/></name><argument_list pos:line="118" pos:column="27">()<pos:position pos:line="118" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="30"/></expr_stmt>
	<return pos:line="119" pos:column="9">return <expr><name pos:line="119" pos:column="16">errors_found<pos:position pos:line="119" pos:column="28"/></name></expr>;<pos:position pos:line="119" pos:column="29"/></return>
}<pos:position pos:line="120" pos:column="2"/></block></function></unit>
