<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4644_git-2.7.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">path_is_beyond_symlink_1<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">strbuf<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">name<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<do pos:line="3" pos:column="9">do <block pos:line="3" pos:column="12">{
		<decl_stmt><decl><type><name pos:line="4" pos:column="17">unsigned<pos:position pos:line="4" pos:column="25"/></name> <name pos:line="4" pos:column="26">int<pos:position pos:line="4" pos:column="29"/></name></type> <name pos:line="4" pos:column="30">change<pos:position pos:line="4" pos:column="36"/></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>

		<while pos:line="6" pos:column="17">while <condition pos:line="6" pos:column="23">(<expr><operator pos:line="6" pos:column="24">--<pos:position pos:line="6" pos:column="26"/></operator><name><name pos:line="6" pos:column="26">name<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">-&gt;<pos:position pos:line="6" pos:column="35"/></operator><name pos:line="6" pos:column="32">len<pos:position pos:line="6" pos:column="35"/></name></name> <operator pos:line="6" pos:column="36">&amp;&amp;<pos:position pos:line="6" pos:column="46"/></operator> <name><name pos:line="6" pos:column="39">name<pos:position pos:line="6" pos:column="43"/></name><operator pos:line="6" pos:column="43">-&gt;<pos:position pos:line="6" pos:column="48"/></operator><name pos:line="6" pos:column="45">buf<pos:position pos:line="6" pos:column="48"/></name><index pos:line="6" pos:column="48">[<expr><name><name pos:line="6" pos:column="49">name<pos:position pos:line="6" pos:column="53"/></name><operator pos:line="6" pos:column="53">-&gt;<pos:position pos:line="6" pos:column="58"/></operator><name pos:line="6" pos:column="55">len<pos:position pos:line="6" pos:column="58"/></name></name></expr>]<pos:position pos:line="6" pos:column="59"/></index></name> <operator pos:line="6" pos:column="60">!=<pos:position pos:line="6" pos:column="62"/></operator> <literal type="char" pos:line="6" pos:column="63">'/'<pos:position pos:line="6" pos:column="66"/></literal></expr>)<pos:position pos:line="6" pos:column="67"/></condition>
			<block type="pseudo"><empty_stmt pos:line="7" pos:column="25">;<pos:position pos:line="7" pos:column="26"/></empty_stmt></block></while> <comment type="block" pos:line="7" pos:column="27">/* scan backwards */</comment>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><operator pos:line="8" pos:column="21">!<pos:position pos:line="8" pos:column="22"/></operator><name><name pos:line="8" pos:column="22">name<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">-&gt;<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="28">len<pos:position pos:line="8" pos:column="31"/></name></name></expr>)<pos:position pos:line="8" pos:column="32"/></condition><then pos:line="8" pos:column="32">
			<block type="pseudo"><break pos:line="9" pos:column="25">break;<pos:position pos:line="9" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name><name pos:line="10" pos:column="17">name<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">-&gt;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="23">buf<pos:position pos:line="10" pos:column="26"/></name><index pos:line="10" pos:column="26">[<expr><name><name pos:line="10" pos:column="27">name<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">len<pos:position pos:line="10" pos:column="36"/></name></name></expr>]<pos:position pos:line="10" pos:column="37"/></index></name> <operator pos:line="10" pos:column="38">=<pos:position pos:line="10" pos:column="39"/></operator> <literal type="char" pos:line="10" pos:column="40">'\0'<pos:position pos:line="10" pos:column="44"/></literal></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="11" pos:column="17">change<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">=<pos:position pos:line="11" pos:column="25"/></operator> <call><name pos:line="11" pos:column="26">check_symlink_changes<pos:position pos:line="11" pos:column="47"/></name><argument_list pos:line="11" pos:column="47">(<argument><expr><name><name pos:line="11" pos:column="48">name<pos:position pos:line="11" pos:column="52"/></name><operator pos:line="11" pos:column="52">-&gt;<pos:position pos:line="11" pos:column="57"/></operator><name pos:line="11" pos:column="54">buf<pos:position pos:line="11" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="59"/></expr_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">change<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">&amp;<pos:position pos:line="12" pos:column="33"/></operator> <name pos:line="12" pos:column="30">SYMLINK_IN_RESULT<pos:position pos:line="12" pos:column="47"/></name></expr>)<pos:position pos:line="12" pos:column="48"/></condition><then pos:line="12" pos:column="48">
			<block type="pseudo"><return pos:line="13" pos:column="25">return <expr><literal type="number" pos:line="13" pos:column="32">1<pos:position pos:line="13" pos:column="33"/></literal></expr>;<pos:position pos:line="13" pos:column="34"/></return></block></then></if>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">change<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">&amp;<pos:position pos:line="14" pos:column="33"/></operator> <name pos:line="14" pos:column="30">SYMLINK_GOES_AWAY<pos:position pos:line="14" pos:column="47"/></name></expr>)<pos:position pos:line="14" pos:column="48"/></condition><then pos:line="14" pos:column="48">
			<comment type="block" pos:line="15" pos:column="25">/*
			 * This cannot be "return 0", because we may
			 * see a new one created at a higher level.
			 */</comment>
			<block type="pseudo"><continue pos:line="19" pos:column="25">continue;<pos:position pos:line="19" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="21" pos:column="17">/* otherwise, check the preimage */</comment>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">check_index<pos:position pos:line="22" pos:column="32"/></name></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33"> <block pos:line="22" pos:column="34">{
			<decl_stmt><decl><type><name><name pos:line="23" pos:column="25">struct<pos:position pos:line="23" pos:column="31"/></name> <name pos:line="23" pos:column="32">cache_entry<pos:position pos:line="23" pos:column="43"/></name></name> <modifier pos:line="23" pos:column="44">*<pos:position pos:line="23" pos:column="45"/></modifier></type><name pos:line="23" pos:column="45">ce<pos:position pos:line="23" pos:column="47"/></name></decl>;<pos:position pos:line="23" pos:column="48"/></decl_stmt>

			<expr_stmt><expr><name pos:line="25" pos:column="25">ce<pos:position pos:line="25" pos:column="27"/></name> <operator pos:line="25" pos:column="28">=<pos:position pos:line="25" pos:column="29"/></operator> <call><name pos:line="25" pos:column="30">cache_file_exists<pos:position pos:line="25" pos:column="47"/></name><argument_list pos:line="25" pos:column="47">(<argument><expr><name><name pos:line="25" pos:column="48">name<pos:position pos:line="25" pos:column="52"/></name><operator pos:line="25" pos:column="52">-&gt;<pos:position pos:line="25" pos:column="57"/></operator><name pos:line="25" pos:column="54">buf<pos:position pos:line="25" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="59">name<pos:position pos:line="25" pos:column="63"/></name><operator pos:line="25" pos:column="63">-&gt;<pos:position pos:line="25" pos:column="68"/></operator><name pos:line="25" pos:column="65">len<pos:position pos:line="25" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="70">ignore_case<pos:position pos:line="25" pos:column="81"/></name></expr></argument>)<pos:position pos:line="25" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="83"/></expr_stmt>
			<if pos:line="26" pos:column="25">if <condition pos:line="26" pos:column="28">(<expr><name pos:line="26" pos:column="29">ce<pos:position pos:line="26" pos:column="31"/></name> <operator pos:line="26" pos:column="32">&amp;&amp;<pos:position pos:line="26" pos:column="42"/></operator> <call><name pos:line="26" pos:column="35">S_ISLNK<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument><expr><name><name pos:line="26" pos:column="43">ce<pos:position pos:line="26" pos:column="45"/></name><operator pos:line="26" pos:column="45">-&gt;<pos:position pos:line="26" pos:column="50"/></operator><name pos:line="26" pos:column="47">ce_mode<pos:position pos:line="26" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="56"/></condition><then pos:line="26" pos:column="56">
				<block type="pseudo"><return pos:line="27" pos:column="33">return <expr><literal type="number" pos:line="27" pos:column="40">1<pos:position pos:line="27" pos:column="41"/></literal></expr>;<pos:position pos:line="27" pos:column="42"/></return></block></then></if>
		}<pos:position pos:line="28" pos:column="18"/></block></then> <else pos:line="28" pos:column="19">else <block pos:line="28" pos:column="24">{
			<decl_stmt><decl><type><name><name pos:line="29" pos:column="25">struct<pos:position pos:line="29" pos:column="31"/></name> <name pos:line="29" pos:column="32">stat<pos:position pos:line="29" pos:column="36"/></name></name></type> <name pos:line="29" pos:column="37">st<pos:position pos:line="29" pos:column="39"/></name></decl>;<pos:position pos:line="29" pos:column="40"/></decl_stmt>
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><operator pos:line="30" pos:column="29">!<pos:position pos:line="30" pos:column="30"/></operator><call><name pos:line="30" pos:column="30">lstat<pos:position pos:line="30" pos:column="35"/></name><argument_list pos:line="30" pos:column="35">(<argument><expr><name><name pos:line="30" pos:column="36">name<pos:position pos:line="30" pos:column="40"/></name><operator pos:line="30" pos:column="40">-&gt;<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="42">buf<pos:position pos:line="30" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="47">&amp;<pos:position pos:line="30" pos:column="52"/></operator><name pos:line="30" pos:column="48">st<pos:position pos:line="30" pos:column="50"/></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call> <operator pos:line="30" pos:column="52">&amp;&amp;<pos:position pos:line="30" pos:column="62"/></operator> <call><name pos:line="30" pos:column="55">S_ISLNK<pos:position pos:line="30" pos:column="62"/></name><argument_list pos:line="30" pos:column="62">(<argument><expr><name><name pos:line="30" pos:column="63">st<pos:position pos:line="30" pos:column="65"/></name><operator pos:line="30" pos:column="65">.<pos:position pos:line="30" pos:column="66"/></operator><name pos:line="30" pos:column="66">st_mode<pos:position pos:line="30" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="75"/></condition><then pos:line="30" pos:column="75">
				<block type="pseudo"><return pos:line="31" pos:column="33">return <expr><literal type="number" pos:line="31" pos:column="40">1<pos:position pos:line="31" pos:column="41"/></literal></expr>;<pos:position pos:line="31" pos:column="42"/></return></block></then></if>
		}<pos:position pos:line="32" pos:column="18"/></block></else></if>
	}<pos:position pos:line="33" pos:column="10"/></block> while <condition pos:line="33" pos:column="17">(<expr><literal type="number" pos:line="33" pos:column="18">1<pos:position pos:line="33" pos:column="19"/></literal></expr>)<pos:position pos:line="33" pos:column="20"/></condition>;<pos:position pos:line="33" pos:column="21"/></do>
	<return pos:line="34" pos:column="9">return <expr><literal type="number" pos:line="34" pos:column="16">0<pos:position pos:line="34" pos:column="17"/></literal></expr>;<pos:position pos:line="34" pos:column="18"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
