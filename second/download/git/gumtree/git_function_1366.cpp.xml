<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1366.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">delete_remote_branch<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">pattern<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">int<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">force<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">ref<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">refs<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name pos:line="3" pos:column="28">remote_refs<pos:position pos:line="3" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ref<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">remote_ref<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><name pos:line="4" pos:column="34">NULL<pos:position pos:line="4" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name><name pos:line="5" pos:column="23">head_sha1<pos:position pos:line="5" pos:column="32"/></name><index pos:line="5" pos:column="32">[<expr><literal type="number" pos:line="5" pos:column="33">20<pos:position pos:line="5" pos:column="35"/></literal></expr>]<pos:position pos:line="5" pos:column="36"/></index></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">symref<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><name pos:line="6" pos:column="24">NULL<pos:position pos:line="6" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">match<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">patlen<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><call><name pos:line="8" pos:column="22">strlen<pos:position pos:line="8" pos:column="28"/></name><argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">pattern<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">i<pos:position pos:line="9" pos:column="14"/></name></decl>;<pos:position pos:line="9" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">active_request_slot<pos:position pos:line="10" pos:column="35"/></name></name> <modifier pos:line="10" pos:column="36">*<pos:position pos:line="10" pos:column="37"/></modifier></type><name pos:line="10" pos:column="37">slot<pos:position pos:line="10" pos:column="41"/></name></decl>;<pos:position pos:line="10" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">slot_results<pos:position pos:line="11" pos:column="28"/></name></name></type> <name pos:line="11" pos:column="29">results<pos:position pos:line="11" pos:column="36"/></name></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">url<pos:position pos:line="12" pos:column="18"/></name></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>

	<comment type="block" pos:line="14" pos:column="9">/* Find the remote branch(es) matching the specified branch name */</comment>
	<for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">(<init><expr><name pos:line="15" pos:column="14">match<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">=<pos:position pos:line="15" pos:column="21"/></operator> <literal type="number" pos:line="15" pos:column="22">0<pos:position pos:line="15" pos:column="23"/></literal></expr>;<pos:position pos:line="15" pos:column="24"/></init> <condition><expr><name pos:line="15" pos:column="25">refs<pos:position pos:line="15" pos:column="29"/></name></expr>;<pos:position pos:line="15" pos:column="30"/></condition> <incr><expr><name pos:line="15" pos:column="31">refs<pos:position pos:line="15" pos:column="35"/></name> <operator pos:line="15" pos:column="36">=<pos:position pos:line="15" pos:column="37"/></operator> <name><name pos:line="15" pos:column="38">refs<pos:position pos:line="15" pos:column="42"/></name><operator pos:line="15" pos:column="42">-&gt;<pos:position pos:line="15" pos:column="47"/></operator><name pos:line="15" pos:column="44">next<pos:position pos:line="15" pos:column="48"/></name></name></expr></incr>)<pos:position pos:line="15" pos:column="49"/></control> <block pos:line="15" pos:column="50">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">char<pos:position pos:line="16" pos:column="21"/></name> <modifier pos:line="16" pos:column="22">*<pos:position pos:line="16" pos:column="23"/></modifier></type><name pos:line="16" pos:column="23">name<pos:position pos:line="16" pos:column="27"/></name> <init pos:line="16" pos:column="28">= <expr><name><name pos:line="16" pos:column="30">refs<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">-&gt;<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="36">name<pos:position pos:line="16" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="16" pos:column="41"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">int<pos:position pos:line="17" pos:column="20"/></name></type> <name pos:line="17" pos:column="21">namelen<pos:position pos:line="17" pos:column="28"/></name> <init pos:line="17" pos:column="29">= <expr><call><name pos:line="17" pos:column="31">strlen<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><name pos:line="17" pos:column="38">name<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="44"/></decl_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">namelen<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">&lt;<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="31">patlen<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">||<pos:position pos:line="18" pos:column="40"/></operator>
		    <call><name pos:line="19" pos:column="21">memcmp<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">name<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">+<pos:position pos:line="19" pos:column="34"/></operator> <name pos:line="19" pos:column="35">namelen<pos:position pos:line="19" pos:column="42"/></name> <operator pos:line="19" pos:column="43">-<pos:position pos:line="19" pos:column="44"/></operator> <name pos:line="19" pos:column="45">patlen<pos:position pos:line="19" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="53">pattern<pos:position pos:line="19" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="62">patlen<pos:position pos:line="19" pos:column="68"/></name></expr></argument>)<pos:position pos:line="19" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="70"/></condition><then pos:line="19" pos:column="70">
			<block type="pseudo"><continue pos:line="20" pos:column="25">continue;<pos:position pos:line="20" pos:column="34"/></continue></block></then></if>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">namelen<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">!=<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="32">patlen<pos:position pos:line="21" pos:column="38"/></name> <operator pos:line="21" pos:column="39">&amp;&amp;<pos:position pos:line="21" pos:column="49"/></operator> <name><name pos:line="21" pos:column="42">name<pos:position pos:line="21" pos:column="46"/></name><index pos:line="21" pos:column="46">[<expr><name pos:line="21" pos:column="47">namelen<pos:position pos:line="21" pos:column="54"/></name> <operator pos:line="21" pos:column="55">-<pos:position pos:line="21" pos:column="56"/></operator> <name pos:line="21" pos:column="57">patlen<pos:position pos:line="21" pos:column="63"/></name> <operator pos:line="21" pos:column="64">-<pos:position pos:line="21" pos:column="65"/></operator> <literal type="number" pos:line="21" pos:column="66">1<pos:position pos:line="21" pos:column="67"/></literal></expr>]<pos:position pos:line="21" pos:column="68"/></index></name> <operator pos:line="21" pos:column="69">!=<pos:position pos:line="21" pos:column="71"/></operator> <literal type="char" pos:line="21" pos:column="72">'/'<pos:position pos:line="21" pos:column="75"/></literal></expr>)<pos:position pos:line="21" pos:column="76"/></condition><then pos:line="21" pos:column="76">
			<block type="pseudo"><continue pos:line="22" pos:column="25">continue;<pos:position pos:line="22" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="23" pos:column="17">match<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">++<pos:position pos:line="23" pos:column="24"/></operator></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt>
		<expr_stmt><expr><name pos:line="24" pos:column="17">remote_ref<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">=<pos:position pos:line="24" pos:column="29"/></operator> <name pos:line="24" pos:column="30">refs<pos:position pos:line="24" pos:column="34"/></name></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></for>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">match<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">==<pos:position pos:line="26" pos:column="21"/></operator> <literal type="number" pos:line="26" pos:column="22">0<pos:position pos:line="26" pos:column="23"/></literal></expr>)<pos:position pos:line="26" pos:column="24"/></condition><then pos:line="26" pos:column="24">
		<block type="pseudo"><return pos:line="27" pos:column="17">return <expr><call><name pos:line="27" pos:column="24">error<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><literal type="string" pos:line="27" pos:column="30">"No remote branch matches %s"<pos:position pos:line="27" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="61">pattern<pos:position pos:line="27" pos:column="68"/></name></expr></argument>)<pos:position pos:line="27" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="70"/></return></block></then></if>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">match<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">!=<pos:position pos:line="28" pos:column="21"/></operator> <literal type="number" pos:line="28" pos:column="22">1<pos:position pos:line="28" pos:column="23"/></literal></expr>)<pos:position pos:line="28" pos:column="24"/></condition><then pos:line="28" pos:column="24">
		<block type="pseudo"><return pos:line="29" pos:column="17">return <expr><call><name pos:line="29" pos:column="24">error<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><literal type="string" pos:line="29" pos:column="30">"More than one remote branch matches %s"<pos:position pos:line="29" pos:column="70"/></literal></expr></argument>,
			     <argument><expr><name pos:line="30" pos:column="30">pattern<pos:position pos:line="30" pos:column="37"/></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></return></block></then></if>

	<comment type="block" pos:line="32" pos:column="9">/*
	 * Remote HEAD must be a symref (not exactly foolproof; a remote
	 * symlink to a symref will look like a symref)
	 */</comment>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">fetch_symref<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">(<argument><expr><literal type="string" pos:line="36" pos:column="22">"HEAD"<pos:position pos:line="36" pos:column="28"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="30">&amp;<pos:position pos:line="36" pos:column="35"/></operator><name pos:line="36" pos:column="31">symref<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="39">head_sha1<pos:position pos:line="36" pos:column="48"/></name></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="50"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><operator pos:line="37" pos:column="13">!<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">symref<pos:position pos:line="37" pos:column="20"/></name></expr>)<pos:position pos:line="37" pos:column="21"/></condition><then pos:line="37" pos:column="21">
		<block type="pseudo"><return pos:line="38" pos:column="17">return <expr><call><name pos:line="38" pos:column="24">error<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><literal type="string" pos:line="38" pos:column="30">"Remote HEAD is not a symref"<pos:position pos:line="38" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="61"/></return></block></then></if>

	<comment type="block" pos:line="40" pos:column="9">/* Remote branch must not be the remote HEAD */</comment>
	<for pos:line="41" pos:column="9">for <control pos:line="41" pos:column="13">(<init><expr><name pos:line="41" pos:column="14">i<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <literal type="number" pos:line="41" pos:column="18">0<pos:position pos:line="41" pos:column="19"/></literal></expr>;<pos:position pos:line="41" pos:column="20"/></init> <condition><expr><name pos:line="41" pos:column="21">symref<pos:position pos:line="41" pos:column="27"/></name> <operator pos:line="41" pos:column="28">&amp;&amp;<pos:position pos:line="41" pos:column="38"/></operator> <name pos:line="41" pos:column="31">i<pos:position pos:line="41" pos:column="32"/></name> <operator pos:line="41" pos:column="33">&lt;<pos:position pos:line="41" pos:column="37"/></operator> <name pos:line="41" pos:column="35">MAXDEPTH<pos:position pos:line="41" pos:column="43"/></name></expr>;<pos:position pos:line="41" pos:column="44"/></condition> <incr><expr><name pos:line="41" pos:column="45">i<pos:position pos:line="41" pos:column="46"/></name><operator pos:line="41" pos:column="46">++<pos:position pos:line="41" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="41" pos:column="49"/></control> <block pos:line="41" pos:column="50">{
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><operator pos:line="42" pos:column="21">!<pos:position pos:line="42" pos:column="22"/></operator><call><name pos:line="42" pos:column="22">strcmp<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name><name pos:line="42" pos:column="29">remote_ref<pos:position pos:line="42" pos:column="39"/></name><operator pos:line="42" pos:column="39">-&gt;<pos:position pos:line="42" pos:column="44"/></operator><name pos:line="42" pos:column="41">name<pos:position pos:line="42" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="47">symref<pos:position pos:line="42" pos:column="53"/></name></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="55"/></condition><then pos:line="42" pos:column="55">
			<block type="pseudo"><return pos:line="43" pos:column="25">return <expr><call><name pos:line="43" pos:column="32">error<pos:position pos:line="43" pos:column="37"/></name><argument_list pos:line="43" pos:column="37">(<argument><expr><literal type="string" pos:line="43" pos:column="38">"Remote branch %s is the current HEAD"<pos:position pos:line="43" pos:column="76"/></literal></expr></argument>,
				     <argument><expr><name><name pos:line="44" pos:column="38">remote_ref<pos:position pos:line="44" pos:column="48"/></name><operator pos:line="44" pos:column="48">-&gt;<pos:position pos:line="44" pos:column="53"/></operator><name pos:line="44" pos:column="50">name<pos:position pos:line="44" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="56"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">fetch_symref<pos:position pos:line="45" pos:column="29"/></name><argument_list pos:line="45" pos:column="29">(<argument><expr><name pos:line="45" pos:column="30">symref<pos:position pos:line="45" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="38">&amp;<pos:position pos:line="45" pos:column="43"/></operator><name pos:line="45" pos:column="39">symref<pos:position pos:line="45" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="47">head_sha1<pos:position pos:line="45" pos:column="56"/></name></expr></argument>)<pos:position pos:line="45" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></for>

	<comment type="block" pos:line="48" pos:column="9">/* Run extra sanity checks if delete is not forced */</comment>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><operator pos:line="49" pos:column="13">!<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="14">force<pos:position pos:line="49" pos:column="19"/></name></expr>)<pos:position pos:line="49" pos:column="20"/></condition><then pos:line="49" pos:column="20"> <block pos:line="49" pos:column="21">{
		<comment type="block" pos:line="50" pos:column="17">/* Remote HEAD must resolve to a known object */</comment>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><name pos:line="51" pos:column="21">symref<pos:position pos:line="51" pos:column="27"/></name></expr>)<pos:position pos:line="51" pos:column="28"/></condition><then pos:line="51" pos:column="28">
			<block type="pseudo"><return pos:line="52" pos:column="25">return <expr><call><name pos:line="52" pos:column="32">error<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><literal type="string" pos:line="52" pos:column="38">"Remote HEAD symrefs too deep"<pos:position pos:line="52" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="70"/></return></block></then></if>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><call><name pos:line="53" pos:column="21">is_null_sha1<pos:position pos:line="53" pos:column="33"/></name><argument_list pos:line="53" pos:column="33">(<argument><expr><name pos:line="53" pos:column="34">head_sha1<pos:position pos:line="53" pos:column="43"/></name></expr></argument>)<pos:position pos:line="53" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="45"/></condition><then pos:line="53" pos:column="45">
			<block type="pseudo"><return pos:line="54" pos:column="25">return <expr><call><name pos:line="54" pos:column="32">error<pos:position pos:line="54" pos:column="37"/></name><argument_list pos:line="54" pos:column="37">(<argument><expr><literal type="string" pos:line="54" pos:column="38">"Unable to resolve remote HEAD"<pos:position pos:line="54" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="71"/></return></block></then></if>
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><operator pos:line="55" pos:column="21">!<pos:position pos:line="55" pos:column="22"/></operator><call><name pos:line="55" pos:column="22">has_sha1_file<pos:position pos:line="55" pos:column="35"/></name><argument_list pos:line="55" pos:column="35">(<argument><expr><name pos:line="55" pos:column="36">head_sha1<pos:position pos:line="55" pos:column="45"/></name></expr></argument>)<pos:position pos:line="55" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="47"/></condition><then pos:line="55" pos:column="47">
			<block type="pseudo"><return pos:line="56" pos:column="25">return <expr><call><name pos:line="56" pos:column="32">error<pos:position pos:line="56" pos:column="37"/></name><argument_list pos:line="56" pos:column="37">(<argument><expr><literal type="string" pos:line="56" pos:column="38">"Remote HEAD resolves to object %s\nwhich does not exist locally, perhaps you need to fetch?"<pos:position pos:line="56" pos:column="131"/></literal></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="133">sha1_to_hex<pos:position pos:line="56" pos:column="144"/></name><argument_list pos:line="56" pos:column="144">(<argument><expr><name pos:line="56" pos:column="145">head_sha1<pos:position pos:line="56" pos:column="154"/></name></expr></argument>)<pos:position pos:line="56" pos:column="155"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="156"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="157"/></return></block></then></if>

		<comment type="block" pos:line="58" pos:column="17">/* Remote branch must resolve to a known object */</comment>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><call><name pos:line="59" pos:column="21">is_null_oid<pos:position pos:line="59" pos:column="32"/></name><argument_list pos:line="59" pos:column="32">(<argument><expr><operator pos:line="59" pos:column="33">&amp;<pos:position pos:line="59" pos:column="38"/></operator><name><name pos:line="59" pos:column="34">remote_ref<pos:position pos:line="59" pos:column="44"/></name><operator pos:line="59" pos:column="44">-&gt;<pos:position pos:line="59" pos:column="49"/></operator><name pos:line="59" pos:column="46">old_oid<pos:position pos:line="59" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="55"/></condition><then pos:line="59" pos:column="55">
			<block type="pseudo"><return pos:line="60" pos:column="25">return <expr><call><name pos:line="60" pos:column="32">error<pos:position pos:line="60" pos:column="37"/></name><argument_list pos:line="60" pos:column="37">(<argument><expr><literal type="string" pos:line="60" pos:column="38">"Unable to resolve remote branch %s"<pos:position pos:line="60" pos:column="74"/></literal></expr></argument>,
				     <argument><expr><name><name pos:line="61" pos:column="38">remote_ref<pos:position pos:line="61" pos:column="48"/></name><operator pos:line="61" pos:column="48">-&gt;<pos:position pos:line="61" pos:column="53"/></operator><name pos:line="61" pos:column="50">name<pos:position pos:line="61" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="56"/></return></block></then></if>
		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><operator pos:line="62" pos:column="21">!<pos:position pos:line="62" pos:column="22"/></operator><call><name pos:line="62" pos:column="22">has_object_file<pos:position pos:line="62" pos:column="37"/></name><argument_list pos:line="62" pos:column="37">(<argument><expr><operator pos:line="62" pos:column="38">&amp;<pos:position pos:line="62" pos:column="43"/></operator><name><name pos:line="62" pos:column="39">remote_ref<pos:position pos:line="62" pos:column="49"/></name><operator pos:line="62" pos:column="49">-&gt;<pos:position pos:line="62" pos:column="54"/></operator><name pos:line="62" pos:column="51">old_oid<pos:position pos:line="62" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="60"/></condition><then pos:line="62" pos:column="60">
			<block type="pseudo"><return pos:line="63" pos:column="25">return <expr><call><name pos:line="63" pos:column="32">error<pos:position pos:line="63" pos:column="37"/></name><argument_list pos:line="63" pos:column="37">(<argument><expr><literal type="string" pos:line="63" pos:column="38">"Remote branch %s resolves to object %s\nwhich does not exist locally, perhaps you need to fetch?"<pos:position pos:line="63" pos:column="136"/></literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="138">remote_ref<pos:position pos:line="63" pos:column="148"/></name><operator pos:line="63" pos:column="148">-&gt;<pos:position pos:line="63" pos:column="153"/></operator><name pos:line="63" pos:column="150">name<pos:position pos:line="63" pos:column="154"/></name></name></expr></argument>, <argument><expr><call><name pos:line="63" pos:column="156">oid_to_hex<pos:position pos:line="63" pos:column="166"/></name><argument_list pos:line="63" pos:column="166">(<argument><expr><operator pos:line="63" pos:column="167">&amp;<pos:position pos:line="63" pos:column="172"/></operator><name><name pos:line="63" pos:column="168">remote_ref<pos:position pos:line="63" pos:column="178"/></name><operator pos:line="63" pos:column="178">-&gt;<pos:position pos:line="63" pos:column="183"/></operator><name pos:line="63" pos:column="180">old_oid<pos:position pos:line="63" pos:column="187"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="188"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="189"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="190"/></return></block></then></if>

		<comment type="block" pos:line="65" pos:column="17">/* Remote branch must be an ancestor of remote HEAD */</comment>
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><operator pos:line="66" pos:column="21">!<pos:position pos:line="66" pos:column="22"/></operator><call><name pos:line="66" pos:column="22">verify_merge_base<pos:position pos:line="66" pos:column="39"/></name><argument_list pos:line="66" pos:column="39">(<argument><expr><name pos:line="66" pos:column="40">head_sha1<pos:position pos:line="66" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="51">remote_ref<pos:position pos:line="66" pos:column="61"/></name></expr></argument>)<pos:position pos:line="66" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="63"/></condition><then pos:line="66" pos:column="63"> <block pos:line="66" pos:column="64">{
			<return pos:line="67" pos:column="25">return <expr><call><name pos:line="67" pos:column="32">error<pos:position pos:line="67" pos:column="37"/></name><argument_list pos:line="67" pos:column="37">(<argument><expr><literal type="string" pos:line="67" pos:column="38">"The branch '%s' is not an ancestor "<pos:position pos:line="67" pos:column="75"/></literal>
				     <literal type="string" pos:line="68" pos:column="38">"of your current HEAD.\n"<pos:position pos:line="68" pos:column="63"/></literal>
				     <literal type="string" pos:line="69" pos:column="38">"If you are sure you want to delete it,"<pos:position pos:line="69" pos:column="78"/></literal>
				     <literal type="string" pos:line="70" pos:column="38">" run:\n\t'git http-push -D %s %s'"<pos:position pos:line="70" pos:column="73"/></literal></expr></argument>,
				     <argument><expr><name><name pos:line="71" pos:column="38">remote_ref<pos:position pos:line="71" pos:column="48"/></name><operator pos:line="71" pos:column="48">-&gt;<pos:position pos:line="71" pos:column="53"/></operator><name pos:line="71" pos:column="50">name<pos:position pos:line="71" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="56">repo<pos:position pos:line="71" pos:column="60"/></name><operator pos:line="71" pos:column="60">-&gt;<pos:position pos:line="71" pos:column="65"/></operator><name pos:line="71" pos:column="62">url<pos:position pos:line="71" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="67">pattern<pos:position pos:line="71" pos:column="74"/></name></expr></argument>)<pos:position pos:line="71" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="76"/></return>
		}<pos:position pos:line="72" pos:column="18"/></block></then></if>
	}<pos:position pos:line="73" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="75" pos:column="9">/* Send delete request */</comment>
	<expr_stmt><expr><call><name pos:line="76" pos:column="9">fprintf<pos:position pos:line="76" pos:column="16"/></name><argument_list pos:line="76" pos:column="16">(<argument><expr><name pos:line="76" pos:column="17">stderr<pos:position pos:line="76" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="25">"Removing remote branch '%s'\n"<pos:position pos:line="76" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="58">remote_ref<pos:position pos:line="76" pos:column="68"/></name><operator pos:line="76" pos:column="68">-&gt;<pos:position pos:line="76" pos:column="73"/></operator><name pos:line="76" pos:column="70">name<pos:position pos:line="76" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="76"/></expr_stmt>
	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><name pos:line="77" pos:column="13">dry_run<pos:position pos:line="77" pos:column="20"/></name></expr>)<pos:position pos:line="77" pos:column="21"/></condition><then pos:line="77" pos:column="21">
		<block type="pseudo"><return pos:line="78" pos:column="17">return <expr><literal type="number" pos:line="78" pos:column="24">0<pos:position pos:line="78" pos:column="25"/></literal></expr>;<pos:position pos:line="78" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="79" pos:column="9">url<pos:position pos:line="79" pos:column="12"/></name> <operator pos:line="79" pos:column="13">=<pos:position pos:line="79" pos:column="14"/></operator> <call><name pos:line="79" pos:column="15">xstrfmt<pos:position pos:line="79" pos:column="22"/></name><argument_list pos:line="79" pos:column="22">(<argument><expr><literal type="string" pos:line="79" pos:column="23">"%s%s"<pos:position pos:line="79" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="31">repo<pos:position pos:line="79" pos:column="35"/></name><operator pos:line="79" pos:column="35">-&gt;<pos:position pos:line="79" pos:column="40"/></operator><name pos:line="79" pos:column="37">url<pos:position pos:line="79" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="42">remote_ref<pos:position pos:line="79" pos:column="52"/></name><operator pos:line="79" pos:column="52">-&gt;<pos:position pos:line="79" pos:column="57"/></operator><name pos:line="79" pos:column="54">name<pos:position pos:line="79" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><name pos:line="80" pos:column="9">slot<pos:position pos:line="80" pos:column="13"/></name> <operator pos:line="80" pos:column="14">=<pos:position pos:line="80" pos:column="15"/></operator> <call><name pos:line="80" pos:column="16">get_active_slot<pos:position pos:line="80" pos:column="31"/></name><argument_list pos:line="80" pos:column="31">()<pos:position pos:line="80" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="81" pos:column="9">slot<pos:position pos:line="81" pos:column="13"/></name><operator pos:line="81" pos:column="13">-&gt;<pos:position pos:line="81" pos:column="18"/></operator><name pos:line="81" pos:column="15">results<pos:position pos:line="81" pos:column="22"/></name></name> <operator pos:line="81" pos:column="23">=<pos:position pos:line="81" pos:column="24"/></operator> <operator pos:line="81" pos:column="25">&amp;<pos:position pos:line="81" pos:column="30"/></operator><name pos:line="81" pos:column="26">results<pos:position pos:line="81" pos:column="33"/></name></expr>;<pos:position pos:line="81" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="82" pos:column="9">curl_setup_http_get<pos:position pos:line="82" pos:column="28"/></name><argument_list pos:line="82" pos:column="28">(<argument><expr><name><name pos:line="82" pos:column="29">slot<pos:position pos:line="82" pos:column="33"/></name><operator pos:line="82" pos:column="33">-&gt;<pos:position pos:line="82" pos:column="38"/></operator><name pos:line="82" pos:column="35">curl<pos:position pos:line="82" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="41">url<pos:position pos:line="82" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="46">DAV_DELETE<pos:position pos:line="82" pos:column="56"/></name></expr></argument>)<pos:position pos:line="82" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="58"/></expr_stmt>
	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><call><name pos:line="83" pos:column="13">start_active_slot<pos:position pos:line="83" pos:column="30"/></name><argument_list pos:line="83" pos:column="30">(<argument><expr><name pos:line="83" pos:column="31">slot<pos:position pos:line="83" pos:column="35"/></name></expr></argument>)<pos:position pos:line="83" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="37"/></condition><then pos:line="83" pos:column="37"> <block pos:line="83" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="84" pos:column="17">run_active_slot<pos:position pos:line="84" pos:column="32"/></name><argument_list pos:line="84" pos:column="32">(<argument><expr><name pos:line="84" pos:column="33">slot<pos:position pos:line="84" pos:column="37"/></name></expr></argument>)<pos:position pos:line="84" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">free<pos:position pos:line="85" pos:column="21"/></name><argument_list pos:line="85" pos:column="21">(<argument><expr><name pos:line="85" pos:column="22">url<pos:position pos:line="85" pos:column="25"/></name></expr></argument>)<pos:position pos:line="85" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="27"/></expr_stmt>
		<if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><name><name pos:line="86" pos:column="21">results<pos:position pos:line="86" pos:column="28"/></name><operator pos:line="86" pos:column="28">.<pos:position pos:line="86" pos:column="29"/></operator><name pos:line="86" pos:column="29">curl_result<pos:position pos:line="86" pos:column="40"/></name></name> <operator pos:line="86" pos:column="41">!=<pos:position pos:line="86" pos:column="43"/></operator> <name pos:line="86" pos:column="44">CURLE_OK<pos:position pos:line="86" pos:column="52"/></name></expr>)<pos:position pos:line="86" pos:column="53"/></condition><then pos:line="86" pos:column="53">
			<block type="pseudo"><return pos:line="87" pos:column="25">return <expr><call><name pos:line="87" pos:column="32">error<pos:position pos:line="87" pos:column="37"/></name><argument_list pos:line="87" pos:column="37">(<argument><expr><literal type="string" pos:line="87" pos:column="38">"DELETE request failed (%d/%ld)"<pos:position pos:line="87" pos:column="70"/></literal></expr></argument>,
				     <argument><expr><name><name pos:line="88" pos:column="38">results<pos:position pos:line="88" pos:column="45"/></name><operator pos:line="88" pos:column="45">.<pos:position pos:line="88" pos:column="46"/></operator><name pos:line="88" pos:column="46">curl_result<pos:position pos:line="88" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="59">results<pos:position pos:line="88" pos:column="66"/></name><operator pos:line="88" pos:column="66">.<pos:position pos:line="88" pos:column="67"/></operator><name pos:line="88" pos:column="67">http_code<pos:position pos:line="88" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="78"/></return></block></then></if>
	}<pos:position pos:line="89" pos:column="10"/></block></then> <else pos:line="89" pos:column="11">else <block pos:line="89" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="90" pos:column="17">free<pos:position pos:line="90" pos:column="21"/></name><argument_list pos:line="90" pos:column="21">(<argument><expr><name pos:line="90" pos:column="22">url<pos:position pos:line="90" pos:column="25"/></name></expr></argument>)<pos:position pos:line="90" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="27"/></expr_stmt>
		<return pos:line="91" pos:column="17">return <expr><call><name pos:line="91" pos:column="24">error<pos:position pos:line="91" pos:column="29"/></name><argument_list pos:line="91" pos:column="29">(<argument><expr><literal type="string" pos:line="91" pos:column="30">"Unable to start DELETE request"<pos:position pos:line="91" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="64"/></return>
	}<pos:position pos:line="92" pos:column="10"/></block></else></if>

	<return pos:line="94" pos:column="9">return <expr><literal type="number" pos:line="94" pos:column="16">0<pos:position pos:line="94" pos:column="17"/></literal></expr>;<pos:position pos:line="94" pos:column="18"/></return>
}<pos:position pos:line="95" pos:column="2"/></block></function></unit>
