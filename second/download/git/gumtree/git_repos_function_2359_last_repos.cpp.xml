<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2359_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">prepare_attr_stack<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">path<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">dirlen<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
			       <parameter><decl><type><name><name pos:line="2" pos:column="32">struct<pos:position pos:line="2" pos:column="38"/></name> <name pos:line="2" pos:column="39">attr_stack<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier><modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">stack<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">attr_stack<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">info<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">pathbuf<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><name pos:line="5" pos:column="33">STRBUF_INIT<pos:position pos:line="5" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/*
	 * At the bottom of the attribute stack is the built-in
	 * set of attribute definitions, followed by the contents
	 * of $(prefix)/etc/gitattributes and a file specified by
	 * core.attributesfile.  Then, contents from
	 * .gitattribute files from directories closer to the
	 * root to the ones in deeper directories are pushed
	 * to the stack.  Finally, at the very top of the stack
	 * we always keep the contents of $GIT_DIR/info/attributes.
	 *
	 * When checking, we use entries from near the top of the
	 * stack, preferring $GIT_DIR/info/attributes, then
	 * .gitattributes in deeper directories to shallower ones,
	 * and finally use the built-in set as the default.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">bootstrap_attr_stack<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">stack<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>

	<comment type="block" pos:line="24" pos:column="9">/*
	 * Pop the "info" one that is always at the top of the stack.
	 */</comment>
	<expr_stmt><expr><name pos:line="27" pos:column="9">info<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <operator pos:line="27" pos:column="16">*<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="17">stack<pos:position pos:line="27" pos:column="22"/></name></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="28" pos:column="9">*<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">stack<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <name><name pos:line="28" pos:column="18">info<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">-&gt;<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="24">prev<pos:position pos:line="28" pos:column="28"/></name></name></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>

	<comment type="block" pos:line="30" pos:column="9">/*
	 * Pop the ones from directories that are not the prefix of
	 * the path we are checking. Break out of the loop when we see
	 * the root one (whose origin is an empty string "") or the builtin
	 * one (whose origin is NULL) without popping it.
	 */</comment>
	<while pos:line="36" pos:column="9">while <condition pos:line="36" pos:column="15">(<expr><name><operator pos:line="36" pos:column="16">(<pos:position pos:line="36" pos:column="17"/></operator><operator pos:line="36" pos:column="17">*<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="18">stack<pos:position pos:line="36" pos:column="23"/></name><operator pos:line="36" pos:column="23">)<pos:position pos:line="36" pos:column="24"/></operator><operator pos:line="36" pos:column="24">-&gt;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="26">origin<pos:position pos:line="36" pos:column="32"/></name></name></expr>)<pos:position pos:line="36" pos:column="33"/></condition> <block pos:line="36" pos:column="34">{
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">int<pos:position pos:line="37" pos:column="20"/></name></type> <name pos:line="37" pos:column="21">namelen<pos:position pos:line="37" pos:column="28"/></name> <init pos:line="37" pos:column="29">= <expr><name><operator pos:line="37" pos:column="31">(<pos:position pos:line="37" pos:column="32"/></operator><operator pos:line="37" pos:column="32">*<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="33">stack<pos:position pos:line="37" pos:column="38"/></name><operator pos:line="37" pos:column="38">)<pos:position pos:line="37" pos:column="39"/></operator><operator pos:line="37" pos:column="39">-&gt;<pos:position pos:line="37" pos:column="44"/></operator><name pos:line="37" pos:column="41">originlen<pos:position pos:line="37" pos:column="50"/></name></name></expr></init></decl>;<pos:position pos:line="37" pos:column="51"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="38" pos:column="17">struct<pos:position pos:line="38" pos:column="23"/></name> <name pos:line="38" pos:column="24">attr_stack<pos:position pos:line="38" pos:column="34"/></name></name> <modifier pos:line="38" pos:column="35">*<pos:position pos:line="38" pos:column="36"/></modifier></type><name pos:line="38" pos:column="36">elem<pos:position pos:line="38" pos:column="40"/></name></decl>;<pos:position pos:line="38" pos:column="41"/></decl_stmt>

		<expr_stmt><expr><name pos:line="40" pos:column="17">elem<pos:position pos:line="40" pos:column="21"/></name> <operator pos:line="40" pos:column="22">=<pos:position pos:line="40" pos:column="23"/></operator> <operator pos:line="40" pos:column="24">*<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="25">stack<pos:position pos:line="40" pos:column="30"/></name></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">namelen<pos:position pos:line="41" pos:column="28"/></name> <operator pos:line="41" pos:column="29">&lt;=<pos:position pos:line="41" pos:column="34"/></operator> <name pos:line="41" pos:column="32">dirlen<pos:position pos:line="41" pos:column="38"/></name> <operator pos:line="41" pos:column="39">&amp;&amp;<pos:position pos:line="41" pos:column="49"/></operator>
		    <operator pos:line="42" pos:column="21">!<pos:position pos:line="42" pos:column="22"/></operator><call><name pos:line="42" pos:column="22">strncmp<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name><name pos:line="42" pos:column="30">elem<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">-&gt;<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="36">origin<pos:position pos:line="42" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="44">path<pos:position pos:line="42" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="50">namelen<pos:position pos:line="42" pos:column="57"/></name></expr></argument>)<pos:position pos:line="42" pos:column="58"/></argument_list></call> <operator pos:line="42" pos:column="59">&amp;&amp;<pos:position pos:line="42" pos:column="69"/></operator>
		    <operator pos:line="43" pos:column="21">(<pos:position pos:line="43" pos:column="22"/></operator><operator pos:line="43" pos:column="22">!<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">namelen<pos:position pos:line="43" pos:column="30"/></name> <operator pos:line="43" pos:column="31">||<pos:position pos:line="43" pos:column="33"/></operator> <name><name pos:line="43" pos:column="34">path<pos:position pos:line="43" pos:column="38"/></name><index pos:line="43" pos:column="38">[<expr><name pos:line="43" pos:column="39">namelen<pos:position pos:line="43" pos:column="46"/></name></expr>]<pos:position pos:line="43" pos:column="47"/></index></name> <operator pos:line="43" pos:column="48">==<pos:position pos:line="43" pos:column="50"/></operator> <literal type="char" pos:line="43" pos:column="51">'/'<pos:position pos:line="43" pos:column="54"/></literal><operator pos:line="43" pos:column="54">)<pos:position pos:line="43" pos:column="55"/></operator></expr>)<pos:position pos:line="43" pos:column="56"/></condition><then pos:line="43" pos:column="56">
			<block type="pseudo"><break pos:line="44" pos:column="25">break;<pos:position pos:line="44" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><call><name pos:line="46" pos:column="17">debug_pop<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><name pos:line="46" pos:column="27">elem<pos:position pos:line="46" pos:column="31"/></name></expr></argument>)<pos:position pos:line="46" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="47" pos:column="17">*<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">stack<pos:position pos:line="47" pos:column="23"/></name> <operator pos:line="47" pos:column="24">=<pos:position pos:line="47" pos:column="25"/></operator> <name><name pos:line="47" pos:column="26">elem<pos:position pos:line="47" pos:column="30"/></name><operator pos:line="47" pos:column="30">-&gt;<pos:position pos:line="47" pos:column="35"/></operator><name pos:line="47" pos:column="32">prev<pos:position pos:line="47" pos:column="36"/></name></name></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">attr_stack_free<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">elem<pos:position pos:line="48" pos:column="37"/></name></expr></argument>)<pos:position pos:line="48" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></while>

	<comment type="block" pos:line="51" pos:column="9">/*
	 * bootstrap_attr_stack() should have added, and the
	 * above loop should have stopped before popping, the
	 * root element whose attr_stack-&gt;origin is set to an
	 * empty string.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="57" pos:column="9">assert<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">(<argument><expr><name><operator pos:line="57" pos:column="16">(<pos:position pos:line="57" pos:column="17"/></operator><operator pos:line="57" pos:column="17">*<pos:position pos:line="57" pos:column="18"/></operator><name pos:line="57" pos:column="18">stack<pos:position pos:line="57" pos:column="23"/></name><operator pos:line="57" pos:column="23">)<pos:position pos:line="57" pos:column="24"/></operator><operator pos:line="57" pos:column="24">-&gt;<pos:position pos:line="57" pos:column="29"/></operator><name pos:line="57" pos:column="26">origin<pos:position pos:line="57" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="34"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="59" pos:column="9">strbuf_addstr<pos:position pos:line="59" pos:column="22"/></name><argument_list pos:line="59" pos:column="22">(<argument><expr><operator pos:line="59" pos:column="23">&amp;<pos:position pos:line="59" pos:column="28"/></operator><name pos:line="59" pos:column="24">pathbuf<pos:position pos:line="59" pos:column="31"/></name></expr></argument>, <argument><expr><name><operator pos:line="59" pos:column="33">(<pos:position pos:line="59" pos:column="34"/></operator><operator pos:line="59" pos:column="34">*<pos:position pos:line="59" pos:column="35"/></operator><name pos:line="59" pos:column="35">stack<pos:position pos:line="59" pos:column="40"/></name><operator pos:line="59" pos:column="40">)<pos:position pos:line="59" pos:column="41"/></operator><operator pos:line="59" pos:column="41">-&gt;<pos:position pos:line="59" pos:column="46"/></operator><name pos:line="59" pos:column="43">origin<pos:position pos:line="59" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="51"/></expr_stmt>
	<comment type="block" pos:line="60" pos:column="9">/* Build up to the directory 'path' is in */</comment>
	<while pos:line="61" pos:column="9">while <condition pos:line="61" pos:column="15">(<expr><name><name pos:line="61" pos:column="16">pathbuf<pos:position pos:line="61" pos:column="23"/></name><operator pos:line="61" pos:column="23">.<pos:position pos:line="61" pos:column="24"/></operator><name pos:line="61" pos:column="24">len<pos:position pos:line="61" pos:column="27"/></name></name> <operator pos:line="61" pos:column="28">&lt;<pos:position pos:line="61" pos:column="32"/></operator> <name pos:line="61" pos:column="30">dirlen<pos:position pos:line="61" pos:column="36"/></name></expr>)<pos:position pos:line="61" pos:column="37"/></condition> <block pos:line="61" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="62" pos:column="17">size_t<pos:position pos:line="62" pos:column="23"/></name></type> <name pos:line="62" pos:column="24">len<pos:position pos:line="62" pos:column="27"/></name> <init pos:line="62" pos:column="28">= <expr><name><name pos:line="62" pos:column="30">pathbuf<pos:position pos:line="62" pos:column="37"/></name><operator pos:line="62" pos:column="37">.<pos:position pos:line="62" pos:column="38"/></operator><name pos:line="62" pos:column="38">len<pos:position pos:line="62" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="62" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="63" pos:column="17">struct<pos:position pos:line="63" pos:column="23"/></name> <name pos:line="63" pos:column="24">attr_stack<pos:position pos:line="63" pos:column="34"/></name></name> <modifier pos:line="63" pos:column="35">*<pos:position pos:line="63" pos:column="36"/></modifier></type><name pos:line="63" pos:column="36">next<pos:position pos:line="63" pos:column="40"/></name></decl>;<pos:position pos:line="63" pos:column="41"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="64" pos:column="17">char<pos:position pos:line="64" pos:column="21"/></name> <modifier pos:line="64" pos:column="22">*<pos:position pos:line="64" pos:column="23"/></modifier></type><name pos:line="64" pos:column="23">origin<pos:position pos:line="64" pos:column="29"/></name></decl>;<pos:position pos:line="64" pos:column="30"/></decl_stmt>

		<comment type="block" pos:line="66" pos:column="17">/* Skip path-separator */</comment>
		<if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><name pos:line="67" pos:column="21">len<pos:position pos:line="67" pos:column="24"/></name> <operator pos:line="67" pos:column="25">&lt;<pos:position pos:line="67" pos:column="29"/></operator> <name pos:line="67" pos:column="27">dirlen<pos:position pos:line="67" pos:column="33"/></name> <operator pos:line="67" pos:column="34">&amp;&amp;<pos:position pos:line="67" pos:column="44"/></operator> <call><name pos:line="67" pos:column="37">is_dir_sep<pos:position pos:line="67" pos:column="47"/></name><argument_list pos:line="67" pos:column="47">(<argument><expr><name><name pos:line="67" pos:column="48">path<pos:position pos:line="67" pos:column="52"/></name><index pos:line="67" pos:column="52">[<expr><name pos:line="67" pos:column="53">len<pos:position pos:line="67" pos:column="56"/></name></expr>]<pos:position pos:line="67" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="67" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="59"/></condition><then pos:line="67" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="25">len<pos:position pos:line="68" pos:column="28"/></name><operator pos:line="68" pos:column="28">++<pos:position pos:line="68" pos:column="30"/></operator></expr>;<pos:position pos:line="68" pos:column="31"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="69" pos:column="17">/* Find the end of the next component */</comment>
		<while pos:line="70" pos:column="17">while <condition pos:line="70" pos:column="23">(<expr><name pos:line="70" pos:column="24">len<pos:position pos:line="70" pos:column="27"/></name> <operator pos:line="70" pos:column="28">&lt;<pos:position pos:line="70" pos:column="32"/></operator> <name pos:line="70" pos:column="30">dirlen<pos:position pos:line="70" pos:column="36"/></name> <operator pos:line="70" pos:column="37">&amp;&amp;<pos:position pos:line="70" pos:column="47"/></operator> <operator pos:line="70" pos:column="40">!<pos:position pos:line="70" pos:column="41"/></operator><call><name pos:line="70" pos:column="41">is_dir_sep<pos:position pos:line="70" pos:column="51"/></name><argument_list pos:line="70" pos:column="51">(<argument><expr><name><name pos:line="70" pos:column="52">path<pos:position pos:line="70" pos:column="56"/></name><index pos:line="70" pos:column="56">[<expr><name pos:line="70" pos:column="57">len<pos:position pos:line="70" pos:column="60"/></name></expr>]<pos:position pos:line="70" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="70" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="63"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="25">len<pos:position pos:line="71" pos:column="28"/></name><operator pos:line="71" pos:column="28">++<pos:position pos:line="71" pos:column="30"/></operator></expr>;<pos:position pos:line="71" pos:column="31"/></expr_stmt></block></while>

		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name><name pos:line="73" pos:column="21">pathbuf<pos:position pos:line="73" pos:column="28"/></name><operator pos:line="73" pos:column="28">.<pos:position pos:line="73" pos:column="29"/></operator><name pos:line="73" pos:column="29">len<pos:position pos:line="73" pos:column="32"/></name></name> <operator pos:line="73" pos:column="33">&gt;<pos:position pos:line="73" pos:column="37"/></operator> <literal type="number" pos:line="73" pos:column="35">0<pos:position pos:line="73" pos:column="36"/></literal></expr>)<pos:position pos:line="73" pos:column="37"/></condition><then pos:line="73" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="25">strbuf_addch<pos:position pos:line="74" pos:column="37"/></name><argument_list pos:line="74" pos:column="37">(<argument><expr><operator pos:line="74" pos:column="38">&amp;<pos:position pos:line="74" pos:column="43"/></operator><name pos:line="74" pos:column="39">pathbuf<pos:position pos:line="74" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="74" pos:column="48">'/'<pos:position pos:line="74" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="53"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="75" pos:column="17">strbuf_add<pos:position pos:line="75" pos:column="27"/></name><argument_list pos:line="75" pos:column="27">(<argument><expr><operator pos:line="75" pos:column="28">&amp;<pos:position pos:line="75" pos:column="33"/></operator><name pos:line="75" pos:column="29">pathbuf<pos:position pos:line="75" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="38">path<pos:position pos:line="75" pos:column="42"/></name> <operator pos:line="75" pos:column="43">+<pos:position pos:line="75" pos:column="44"/></operator> <name><name pos:line="75" pos:column="45">pathbuf<pos:position pos:line="75" pos:column="52"/></name><operator pos:line="75" pos:column="52">.<pos:position pos:line="75" pos:column="53"/></operator><name pos:line="75" pos:column="53">len<pos:position pos:line="75" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="58">(<pos:position pos:line="75" pos:column="59"/></operator><name pos:line="75" pos:column="59">len<pos:position pos:line="75" pos:column="62"/></name> <operator pos:line="75" pos:column="63">-<pos:position pos:line="75" pos:column="64"/></operator> <name><name pos:line="75" pos:column="65">pathbuf<pos:position pos:line="75" pos:column="72"/></name><operator pos:line="75" pos:column="72">.<pos:position pos:line="75" pos:column="73"/></operator><name pos:line="75" pos:column="73">len<pos:position pos:line="75" pos:column="76"/></name></name><operator pos:line="75" pos:column="76">)<pos:position pos:line="75" pos:column="77"/></operator></expr></argument>)<pos:position pos:line="75" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">strbuf_addf<pos:position pos:line="76" pos:column="28"/></name><argument_list pos:line="76" pos:column="28">(<argument><expr><operator pos:line="76" pos:column="29">&amp;<pos:position pos:line="76" pos:column="34"/></operator><name pos:line="76" pos:column="30">pathbuf<pos:position pos:line="76" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="39">"/%s"<pos:position pos:line="76" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="46">GITATTRIBUTES_FILE<pos:position pos:line="76" pos:column="64"/></name></expr></argument>)<pos:position pos:line="76" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="66"/></expr_stmt>

		<expr_stmt><expr><name pos:line="78" pos:column="17">next<pos:position pos:line="78" pos:column="21"/></name> <operator pos:line="78" pos:column="22">=<pos:position pos:line="78" pos:column="23"/></operator> <call><name pos:line="78" pos:column="24">read_attr<pos:position pos:line="78" pos:column="33"/></name><argument_list pos:line="78" pos:column="33">(<argument><expr><name><name pos:line="78" pos:column="34">pathbuf<pos:position pos:line="78" pos:column="41"/></name><operator pos:line="78" pos:column="41">.<pos:position pos:line="78" pos:column="42"/></operator><name pos:line="78" pos:column="42">buf<pos:position pos:line="78" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="78" pos:column="47">0<pos:position pos:line="78" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="50"/></expr_stmt>

		<comment type="block" pos:line="80" pos:column="17">/* reset the pathbuf to not include "/.gitattributes" */</comment>
		<expr_stmt><expr><call><name pos:line="81" pos:column="17">strbuf_setlen<pos:position pos:line="81" pos:column="30"/></name><argument_list pos:line="81" pos:column="30">(<argument><expr><operator pos:line="81" pos:column="31">&amp;<pos:position pos:line="81" pos:column="36"/></operator><name pos:line="81" pos:column="32">pathbuf<pos:position pos:line="81" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="41">len<pos:position pos:line="81" pos:column="44"/></name></expr></argument>)<pos:position pos:line="81" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="46"/></expr_stmt>

		<expr_stmt><expr><name pos:line="83" pos:column="17">origin<pos:position pos:line="83" pos:column="23"/></name> <operator pos:line="83" pos:column="24">=<pos:position pos:line="83" pos:column="25"/></operator> <call><name pos:line="83" pos:column="26">xstrdup<pos:position pos:line="83" pos:column="33"/></name><argument_list pos:line="83" pos:column="33">(<argument><expr><name><name pos:line="83" pos:column="34">pathbuf<pos:position pos:line="83" pos:column="41"/></name><operator pos:line="83" pos:column="41">.<pos:position pos:line="83" pos:column="42"/></operator><name pos:line="83" pos:column="42">buf<pos:position pos:line="83" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="84" pos:column="17">push_stack<pos:position pos:line="84" pos:column="27"/></name><argument_list pos:line="84" pos:column="27">(<argument><expr><name pos:line="84" pos:column="28">stack<pos:position pos:line="84" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="35">next<pos:position pos:line="84" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="41">origin<pos:position pos:line="84" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="49">len<pos:position pos:line="84" pos:column="52"/></name></expr></argument>)<pos:position pos:line="84" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="85" pos:column="10"/></block></while>

	<comment type="block" pos:line="87" pos:column="9">/*
	 * Finally push the "info" one at the top of the stack.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="90" pos:column="9">push_stack<pos:position pos:line="90" pos:column="19"/></name><argument_list pos:line="90" pos:column="19">(<argument><expr><name pos:line="90" pos:column="20">stack<pos:position pos:line="90" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="27">info<pos:position pos:line="90" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="33">NULL<pos:position pos:line="90" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="39">0<pos:position pos:line="90" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="92" pos:column="9">strbuf_release<pos:position pos:line="92" pos:column="23"/></name><argument_list pos:line="92" pos:column="23">(<argument><expr><operator pos:line="92" pos:column="24">&amp;<pos:position pos:line="92" pos:column="29"/></operator><name pos:line="92" pos:column="25">pathbuf<pos:position pos:line="92" pos:column="32"/></name></expr></argument>)<pos:position pos:line="92" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="34"/></expr_stmt>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
