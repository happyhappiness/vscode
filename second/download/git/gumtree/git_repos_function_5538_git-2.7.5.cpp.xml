<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5538_git-2.7.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">get_delta<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">object_entry<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">entry<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">long<pos:position pos:line="3" pos:column="22"/></name></type> <name pos:line="3" pos:column="23">size<pos:position pos:line="3" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="29">base_size<pos:position pos:line="3" pos:column="38"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="40">delta_size<pos:position pos:line="3" pos:column="50"/></name></decl>;<pos:position pos:line="3" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">void<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">buf<pos:position pos:line="4" pos:column="18"/></name></decl>, <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="21">base_buf<pos:position pos:line="4" pos:column="29"/></name></decl>, <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="32">delta_buf<pos:position pos:line="4" pos:column="41"/></name></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">enum<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">object_type<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">type<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">buf<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <call><name pos:line="7" pos:column="15">read_sha1_file<pos:position pos:line="7" pos:column="29"/></name><argument_list pos:line="7" pos:column="29">(<argument><expr><name><name pos:line="7" pos:column="30">entry<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">-&gt;<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="37">idx<pos:position pos:line="7" pos:column="40"/></name><operator pos:line="7" pos:column="40">.<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="41">sha1<pos:position pos:line="7" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="47">&amp;<pos:position pos:line="7" pos:column="52"/></operator><name pos:line="7" pos:column="48">type<pos:position pos:line="7" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="54">&amp;<pos:position pos:line="7" pos:column="59"/></operator><name pos:line="7" pos:column="55">size<pos:position pos:line="7" pos:column="59"/></name></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="61"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">buf<pos:position pos:line="8" pos:column="17"/></name></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">die<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><literal type="string" pos:line="9" pos:column="21">"unable to read %s"<pos:position pos:line="9" pos:column="40"/></literal></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="42">sha1_to_hex<pos:position pos:line="9" pos:column="53"/></name><argument_list pos:line="9" pos:column="53">(<argument><expr><name><name pos:line="9" pos:column="54">entry<pos:position pos:line="9" pos:column="59"/></name><operator pos:line="9" pos:column="59">-&gt;<pos:position pos:line="9" pos:column="64"/></operator><name pos:line="9" pos:column="61">idx<pos:position pos:line="9" pos:column="64"/></name><operator pos:line="9" pos:column="64">.<pos:position pos:line="9" pos:column="65"/></operator><name pos:line="9" pos:column="65">sha1<pos:position pos:line="9" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="72"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="10" pos:column="9">base_buf<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">=<pos:position pos:line="10" pos:column="19"/></operator> <call><name pos:line="10" pos:column="20">read_sha1_file<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><name><name pos:line="10" pos:column="35">entry<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">-&gt;<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="42">delta<pos:position pos:line="10" pos:column="47"/></name><operator pos:line="10" pos:column="47">-&gt;<pos:position pos:line="10" pos:column="52"/></operator><name pos:line="10" pos:column="49">idx<pos:position pos:line="10" pos:column="52"/></name><operator pos:line="10" pos:column="52">.<pos:position pos:line="10" pos:column="53"/></operator><name pos:line="10" pos:column="53">sha1<pos:position pos:line="10" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="59">&amp;<pos:position pos:line="10" pos:column="64"/></operator><name pos:line="10" pos:column="60">type<pos:position pos:line="10" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="66">&amp;<pos:position pos:line="10" pos:column="71"/></operator><name pos:line="10" pos:column="67">base_size<pos:position pos:line="10" pos:column="76"/></name></expr></argument>)<pos:position pos:line="10" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="78"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">base_buf<pos:position pos:line="11" pos:column="22"/></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">die<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><literal type="string" pos:line="12" pos:column="21">"unable to read %s"<pos:position pos:line="12" pos:column="40"/></literal></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="42">sha1_to_hex<pos:position pos:line="12" pos:column="53"/></name><argument_list pos:line="12" pos:column="53">(<argument><expr><name><name pos:line="12" pos:column="54">entry<pos:position pos:line="12" pos:column="59"/></name><operator pos:line="12" pos:column="59">-&gt;<pos:position pos:line="12" pos:column="64"/></operator><name pos:line="12" pos:column="61">delta<pos:position pos:line="12" pos:column="66"/></name><operator pos:line="12" pos:column="66">-&gt;<pos:position pos:line="12" pos:column="71"/></operator><name pos:line="12" pos:column="68">idx<pos:position pos:line="12" pos:column="71"/></name><operator pos:line="12" pos:column="71">.<pos:position pos:line="12" pos:column="72"/></operator><name pos:line="12" pos:column="72">sha1<pos:position pos:line="12" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="79"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="13" pos:column="9">delta_buf<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <call><name pos:line="13" pos:column="21">diff_delta<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">base_buf<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="42">base_size<pos:position pos:line="13" pos:column="51"/></name></expr></argument>,
			       <argument><expr><name pos:line="14" pos:column="32">buf<pos:position pos:line="14" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="37">size<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="43">&amp;<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="44">delta_size<pos:position pos:line="14" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="56">0<pos:position pos:line="14" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="59"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">delta_buf<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">||<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">delta_size<pos:position pos:line="15" pos:column="37"/></name> <operator pos:line="15" pos:column="38">!=<pos:position pos:line="15" pos:column="40"/></operator> <name><name pos:line="15" pos:column="41">entry<pos:position pos:line="15" pos:column="46"/></name><operator pos:line="15" pos:column="46">-&gt;<pos:position pos:line="15" pos:column="51"/></operator><name pos:line="15" pos:column="48">delta_size<pos:position pos:line="15" pos:column="58"/></name></name></expr>)<pos:position pos:line="15" pos:column="59"/></condition><then pos:line="15" pos:column="59">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">die<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><literal type="string" pos:line="16" pos:column="21">"delta size changed"<pos:position pos:line="16" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">free<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><name pos:line="17" pos:column="14">buf<pos:position pos:line="17" pos:column="17"/></name></expr></argument>)<pos:position pos:line="17" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">free<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><name pos:line="18" pos:column="14">base_buf<pos:position pos:line="18" pos:column="22"/></name></expr></argument>)<pos:position pos:line="18" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>
	<return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">delta_buf<pos:position pos:line="19" pos:column="25"/></name></expr>;<pos:position pos:line="19" pos:column="26"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
