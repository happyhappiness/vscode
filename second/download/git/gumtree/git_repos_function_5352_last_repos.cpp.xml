<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5352_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">print_ref_list<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">ref_filter<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">filter<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="55">struct<pos:position pos:line="1" pos:column="61"/></name> <name pos:line="1" pos:column="62">ref_sorting<pos:position pos:line="1" pos:column="73"/></name></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">sorting<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="84">struct<pos:position pos:line="1" pos:column="90"/></name> <name pos:line="1" pos:column="91">ref_format<pos:position pos:line="1" pos:column="101"/></name></name> <modifier pos:line="1" pos:column="102">*<pos:position pos:line="1" pos:column="103"/></modifier></type><name pos:line="1" pos:column="103">format<pos:position pos:line="1" pos:column="109"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="110"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ref_array<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">array<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">maxwidth<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><literal type="number" pos:line="5" pos:column="24">0<pos:position pos:line="5" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">remote_prefix<pos:position pos:line="6" pos:column="34"/></name> <init pos:line="6" pos:column="35">= <expr><literal type="string" pos:line="6" pos:column="37">""<pos:position pos:line="6" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">out<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><name pos:line="7" pos:column="29">STRBUF_INIT<pos:position pos:line="7" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">to_free<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><name pos:line="8" pos:column="25">NULL<pos:position pos:line="8" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>

	<comment type="block" pos:line="10" pos:column="9">/*
	 * If we are listing more than just remote branches,
	 * then remote branches will have a "remotes/" prefix.
	 * We need to account for this in the width.
	 */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">filter<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">-&gt;<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="21">kind<pos:position pos:line="15" pos:column="25"/></name></name> <operator pos:line="15" pos:column="26">!=<pos:position pos:line="15" pos:column="28"/></operator> <name pos:line="15" pos:column="29">FILTER_REFS_REMOTES<pos:position pos:line="15" pos:column="48"/></name></expr>)<pos:position pos:line="15" pos:column="49"/></condition><then pos:line="15" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="17">remote_prefix<pos:position pos:line="16" pos:column="30"/></name> <operator pos:line="16" pos:column="31">=<pos:position pos:line="16" pos:column="32"/></operator> <literal type="string" pos:line="16" pos:column="33">"remotes/"<pos:position pos:line="16" pos:column="43"/></literal></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">memset<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><operator pos:line="18" pos:column="16">&amp;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="17">array<pos:position pos:line="18" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="24">0<pos:position pos:line="18" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="27">sizeof<argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">array<pos:position pos:line="18" pos:column="39"/></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="20" pos:column="9">filter_refs<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><operator pos:line="20" pos:column="21">&amp;<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="22">array<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="29">filter<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="37">filter<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">-&gt;<pos:position pos:line="20" pos:column="48"/></operator><name pos:line="20" pos:column="45">kind<pos:position pos:line="20" pos:column="49"/></name></name> <operator pos:line="20" pos:column="50">|<pos:position pos:line="20" pos:column="51"/></operator> <name pos:line="20" pos:column="52">FILTER_REFS_INCLUDE_BROKEN<pos:position pos:line="20" pos:column="78"/></name></expr></argument>)<pos:position pos:line="20" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="80"/></expr_stmt>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name><name pos:line="22" pos:column="13">filter<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">-&gt;<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="21">verbose<pos:position pos:line="22" pos:column="28"/></name></name></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">maxwidth<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">=<pos:position pos:line="23" pos:column="27"/></operator> <call><name pos:line="23" pos:column="28">calc_maxwidth<pos:position pos:line="23" pos:column="41"/></name><argument_list pos:line="23" pos:column="41">(<argument><expr><operator pos:line="23" pos:column="42">&amp;<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="43">array<pos:position pos:line="23" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="50">strlen<pos:position pos:line="23" pos:column="56"/></name><argument_list pos:line="23" pos:column="56">(<argument><expr><name pos:line="23" pos:column="57">remote_prefix<pos:position pos:line="23" pos:column="70"/></name></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="73"/></expr_stmt></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><name><name pos:line="25" pos:column="14">format<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">-&gt;<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="22">format<pos:position pos:line="25" pos:column="28"/></name></name></expr>)<pos:position pos:line="25" pos:column="29"/></condition><then pos:line="25" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="17">format<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">-&gt;<pos:position pos:line="26" pos:column="28"/></operator><name pos:line="26" pos:column="25">format<pos:position pos:line="26" pos:column="31"/></name></name> <operator pos:line="26" pos:column="32">=<pos:position pos:line="26" pos:column="33"/></operator> <name pos:line="26" pos:column="34">to_free<pos:position pos:line="26" pos:column="41"/></name> <operator pos:line="26" pos:column="42">=<pos:position pos:line="26" pos:column="43"/></operator> <call><name pos:line="26" pos:column="44">build_format<pos:position pos:line="26" pos:column="56"/></name><argument_list pos:line="26" pos:column="56">(<argument><expr><name pos:line="26" pos:column="57">filter<pos:position pos:line="26" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="65">maxwidth<pos:position pos:line="26" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="75">remote_prefix<pos:position pos:line="26" pos:column="88"/></name></expr></argument>)<pos:position pos:line="26" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="90"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="27" pos:column="9">format<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">-&gt;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="17">use_color<pos:position pos:line="27" pos:column="26"/></name></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="29">branch_use_color<pos:position pos:line="27" pos:column="45"/></name></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name pos:line="29" pos:column="13">verify_ref_format<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">format<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="39"/></condition><then pos:line="29" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="17">die<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><call><name pos:line="30" pos:column="21">_<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><literal type="string" pos:line="30" pos:column="23">"unable to parse format string"<pos:position pos:line="30" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="32" pos:column="9">ref_array_sort<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">sorting<pos:position pos:line="32" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="33">&amp;<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="34">array<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>

	<for pos:line="34" pos:column="9">for <control pos:line="34" pos:column="13">(<init><expr><name pos:line="34" pos:column="14">i<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <literal type="number" pos:line="34" pos:column="18">0<pos:position pos:line="34" pos:column="19"/></literal></expr>;<pos:position pos:line="34" pos:column="20"/></init> <condition><expr><name pos:line="34" pos:column="21">i<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">&lt;<pos:position pos:line="34" pos:column="27"/></operator> <name><name pos:line="34" pos:column="25">array<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">.<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="31">nr<pos:position pos:line="34" pos:column="33"/></name></name></expr>;<pos:position pos:line="34" pos:column="34"/></condition> <incr><expr><name pos:line="34" pos:column="35">i<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">++<pos:position pos:line="34" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="34" pos:column="39"/></control> <block pos:line="34" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">format_ref_array_item<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">(<argument><expr><name><name pos:line="35" pos:column="39">array<pos:position pos:line="35" pos:column="44"/></name><operator pos:line="35" pos:column="44">.<pos:position pos:line="35" pos:column="45"/></operator><name pos:line="35" pos:column="45">items<pos:position pos:line="35" pos:column="50"/></name><index pos:line="35" pos:column="50">[<expr><name pos:line="35" pos:column="51">i<pos:position pos:line="35" pos:column="52"/></name></expr>]<pos:position pos:line="35" pos:column="53"/></index></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="55">format<pos:position pos:line="35" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="63">&amp;<pos:position pos:line="35" pos:column="68"/></operator><name pos:line="35" pos:column="64">out<pos:position pos:line="35" pos:column="67"/></name></expr></argument>)<pos:position pos:line="35" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="69"/></expr_stmt>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><call><name pos:line="36" pos:column="21">column_active<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><name pos:line="36" pos:column="35">colopts<pos:position pos:line="36" pos:column="42"/></name></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="44"/></condition><then pos:line="36" pos:column="44"> <block pos:line="36" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">assert<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><operator pos:line="37" pos:column="32">!<pos:position pos:line="37" pos:column="33"/></operator><name><name pos:line="37" pos:column="33">filter<pos:position pos:line="37" pos:column="39"/></name><operator pos:line="37" pos:column="39">-&gt;<pos:position pos:line="37" pos:column="44"/></operator><name pos:line="37" pos:column="41">verbose<pos:position pos:line="37" pos:column="48"/></name></name> <operator pos:line="37" pos:column="49">&amp;&amp;<pos:position pos:line="37" pos:column="59"/></operator> <literal type="string" pos:line="37" pos:column="52">"--column and --verbose are incompatible"<pos:position pos:line="37" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="95"/></expr_stmt>
			 <comment type="block" pos:line="38" pos:column="26">/* format to a string_list to let print_columns() do its job */</comment>
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">string_list_append<pos:position pos:line="39" pos:column="43"/></name><argument_list pos:line="39" pos:column="43">(<argument><expr><operator pos:line="39" pos:column="44">&amp;<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="45">output<pos:position pos:line="39" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="53">out<pos:position pos:line="39" pos:column="56"/></name><operator pos:line="39" pos:column="56">.<pos:position pos:line="39" pos:column="57"/></operator><name pos:line="39" pos:column="57">buf<pos:position pos:line="39" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></then> <else pos:line="40" pos:column="19">else <block pos:line="40" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">fwrite<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name><name pos:line="41" pos:column="32">out<pos:position pos:line="41" pos:column="35"/></name><operator pos:line="41" pos:column="35">.<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="36">buf<pos:position pos:line="41" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="41">1<pos:position pos:line="41" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="44">out<pos:position pos:line="41" pos:column="47"/></name><operator pos:line="41" pos:column="47">.<pos:position pos:line="41" pos:column="48"/></operator><name pos:line="41" pos:column="48">len<pos:position pos:line="41" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="53">stdout<pos:position pos:line="41" pos:column="59"/></name></expr></argument>)<pos:position pos:line="41" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">putchar<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><literal type="char" pos:line="42" pos:column="33">'\n'<pos:position pos:line="42" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="43" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">strbuf_release<pos:position pos:line="44" pos:column="31"/></name><argument_list pos:line="44" pos:column="31">(<argument><expr><operator pos:line="44" pos:column="32">&amp;<pos:position pos:line="44" pos:column="37"/></operator><name pos:line="44" pos:column="33">out<pos:position pos:line="44" pos:column="36"/></name></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="47" pos:column="9">ref_array_clear<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><operator pos:line="47" pos:column="25">&amp;<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="26">array<pos:position pos:line="47" pos:column="31"/></name></expr></argument>)<pos:position pos:line="47" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">free<pos:position pos:line="48" pos:column="13"/></name><argument_list pos:line="48" pos:column="13">(<argument><expr><name pos:line="48" pos:column="14">to_free<pos:position pos:line="48" pos:column="21"/></name></expr></argument>)<pos:position pos:line="48" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="23"/></expr_stmt>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
