<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5588_git-2.7.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">prepare_pack<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">window<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">int<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">depth<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object_entry<pos:position pos:line="3" pos:column="28"/></name></name> <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier><modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="31">delta_list<pos:position pos:line="3" pos:column="41"/></name></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">uint32_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">i<pos:position pos:line="4" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="21">nr_deltas<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">n<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">get_object_details<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">()<pos:position pos:line="7" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * If we're locally repacking then we need to be doubly careful
	 * from now on in order to make sure no stealth corruption gets
	 * propagated to the new pack.  Clients receiving streamed packs
	 * should validate everything they get anyway so no need to incur
	 * the additional cost here in that case.
	 */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">pack_to_stdout<pos:position pos:line="16" pos:column="28"/></name></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">do_check_packed_object_crc<pos:position pos:line="17" pos:column="43"/></name> <operator pos:line="17" pos:column="44">=<pos:position pos:line="17" pos:column="45"/></operator> <literal type="number" pos:line="17" pos:column="46">1<pos:position pos:line="17" pos:column="47"/></literal></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><name><name pos:line="19" pos:column="14">to_pack<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">nr_objects<pos:position pos:line="19" pos:column="32"/></name></name> <operator pos:line="19" pos:column="33">||<pos:position pos:line="19" pos:column="35"/></operator> <operator pos:line="19" pos:column="36">!<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="37">window<pos:position pos:line="19" pos:column="43"/></name> <operator pos:line="19" pos:column="44">||<pos:position pos:line="19" pos:column="46"/></operator> <operator pos:line="19" pos:column="47">!<pos:position pos:line="19" pos:column="48"/></operator><name pos:line="19" pos:column="48">depth<pos:position pos:line="19" pos:column="53"/></name></expr>)<pos:position pos:line="19" pos:column="54"/></condition><then pos:line="19" pos:column="54">
		<block type="pseudo"><return pos:line="20" pos:column="17">return;<pos:position pos:line="20" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">ALLOC_ARRAY<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">delta_list<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="33">to_pack<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">.<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="41">nr_objects<pos:position pos:line="22" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name pos:line="23" pos:column="9">nr_deltas<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="21">n<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator> <literal type="number" pos:line="23" pos:column="25">0<pos:position pos:line="23" pos:column="26"/></literal></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>

	<for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">i<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <literal type="number" pos:line="25" pos:column="18">0<pos:position pos:line="25" pos:column="19"/></literal></expr>;<pos:position pos:line="25" pos:column="20"/></init> <condition><expr><name pos:line="25" pos:column="21">i<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">&lt;<pos:position pos:line="25" pos:column="27"/></operator> <name><name pos:line="25" pos:column="25">to_pack<pos:position pos:line="25" pos:column="32"/></name><operator pos:line="25" pos:column="32">.<pos:position pos:line="25" pos:column="33"/></operator><name pos:line="25" pos:column="33">nr_objects<pos:position pos:line="25" pos:column="43"/></name></name></expr>;<pos:position pos:line="25" pos:column="44"/></condition> <incr><expr><name pos:line="25" pos:column="45">i<pos:position pos:line="25" pos:column="46"/></name><operator pos:line="25" pos:column="46">++<pos:position pos:line="25" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="49"/></control> <block pos:line="25" pos:column="50">{
		<decl_stmt><decl><type><name><name pos:line="26" pos:column="17">struct<pos:position pos:line="26" pos:column="23"/></name> <name pos:line="26" pos:column="24">object_entry<pos:position pos:line="26" pos:column="36"/></name></name> <modifier pos:line="26" pos:column="37">*<pos:position pos:line="26" pos:column="38"/></modifier></type><name pos:line="26" pos:column="38">entry<pos:position pos:line="26" pos:column="43"/></name> <init pos:line="26" pos:column="44">= <expr><name><name pos:line="26" pos:column="46">to_pack<pos:position pos:line="26" pos:column="53"/></name><operator pos:line="26" pos:column="53">.<pos:position pos:line="26" pos:column="54"/></operator><name pos:line="26" pos:column="54">objects<pos:position pos:line="26" pos:column="61"/></name></name> <operator pos:line="26" pos:column="62">+<pos:position pos:line="26" pos:column="63"/></operator> <name pos:line="26" pos:column="64">i<pos:position pos:line="26" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="66"/></decl_stmt>

		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name><name pos:line="28" pos:column="21">entry<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">-&gt;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="28">delta<pos:position pos:line="28" pos:column="33"/></name></name></expr>)<pos:position pos:line="28" pos:column="34"/></condition><then pos:line="28" pos:column="34">
			<comment type="block" pos:line="29" pos:column="25">/* This happens if we decided to reuse existing
			 * delta from a pack.  "reuse_delta &amp;&amp;" is implied.
			 */</comment>
			<block type="pseudo"><continue pos:line="32" pos:column="25">continue;<pos:position pos:line="32" pos:column="34"/></continue></block></then></if>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name><name pos:line="34" pos:column="21">entry<pos:position pos:line="34" pos:column="26"/></name><operator pos:line="34" pos:column="26">-&gt;<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="28">size<pos:position pos:line="34" pos:column="32"/></name></name> <operator pos:line="34" pos:column="33">&lt;<pos:position pos:line="34" pos:column="37"/></operator> <literal type="number" pos:line="34" pos:column="35">50<pos:position pos:line="34" pos:column="37"/></literal></expr>)<pos:position pos:line="34" pos:column="38"/></condition><then pos:line="34" pos:column="38">
			<block type="pseudo"><continue pos:line="35" pos:column="25">continue;<pos:position pos:line="35" pos:column="34"/></continue></block></then></if>

		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name><name pos:line="37" pos:column="21">entry<pos:position pos:line="37" pos:column="26"/></name><operator pos:line="37" pos:column="26">-&gt;<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="28">no_try_delta<pos:position pos:line="37" pos:column="40"/></name></name></expr>)<pos:position pos:line="37" pos:column="41"/></condition><then pos:line="37" pos:column="41">
			<block type="pseudo"><continue pos:line="38" pos:column="25">continue;<pos:position pos:line="38" pos:column="34"/></continue></block></then></if>

		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">!<pos:position pos:line="40" pos:column="22"/></operator><name><name pos:line="40" pos:column="22">entry<pos:position pos:line="40" pos:column="27"/></name><operator pos:line="40" pos:column="27">-&gt;<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="29">preferred_base<pos:position pos:line="40" pos:column="43"/></name></name></expr>)<pos:position pos:line="40" pos:column="44"/></condition><then pos:line="40" pos:column="44"> <block pos:line="40" pos:column="45">{
			<expr_stmt><expr><name pos:line="41" pos:column="25">nr_deltas<pos:position pos:line="41" pos:column="34"/></name><operator pos:line="41" pos:column="34">++<pos:position pos:line="41" pos:column="36"/></operator></expr>;<pos:position pos:line="41" pos:column="37"/></expr_stmt>
			<if pos:line="42" pos:column="25">if <condition pos:line="42" pos:column="28">(<expr><name><name pos:line="42" pos:column="29">entry<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">-&gt;<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="36">type<pos:position pos:line="42" pos:column="40"/></name></name> <operator pos:line="42" pos:column="41">&lt;<pos:position pos:line="42" pos:column="45"/></operator> <literal type="number" pos:line="42" pos:column="43">0<pos:position pos:line="42" pos:column="44"/></literal></expr>)<pos:position pos:line="42" pos:column="45"/></condition><then pos:line="42" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="33">die<pos:position pos:line="43" pos:column="36"/></name><argument_list pos:line="43" pos:column="36">(<argument><expr><literal type="string" pos:line="43" pos:column="37">"unable to get type of object %s"<pos:position pos:line="43" pos:column="70"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="44" pos:column="37">sha1_to_hex<pos:position pos:line="44" pos:column="48"/></name><argument_list pos:line="44" pos:column="48">(<argument><expr><name><name pos:line="44" pos:column="49">entry<pos:position pos:line="44" pos:column="54"/></name><operator pos:line="44" pos:column="54">-&gt;<pos:position pos:line="44" pos:column="59"/></operator><name pos:line="44" pos:column="56">idx<pos:position pos:line="44" pos:column="59"/></name><operator pos:line="44" pos:column="59">.<pos:position pos:line="44" pos:column="60"/></operator><name pos:line="44" pos:column="60">sha1<pos:position pos:line="44" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="67"/></expr_stmt></block></then></if>
		}<pos:position pos:line="45" pos:column="18"/></block></then> <else pos:line="45" pos:column="19">else <block pos:line="45" pos:column="24">{
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><name><name pos:line="46" pos:column="29">entry<pos:position pos:line="46" pos:column="34"/></name><operator pos:line="46" pos:column="34">-&gt;<pos:position pos:line="46" pos:column="39"/></operator><name pos:line="46" pos:column="36">type<pos:position pos:line="46" pos:column="40"/></name></name> <operator pos:line="46" pos:column="41">&lt;<pos:position pos:line="46" pos:column="45"/></operator> <literal type="number" pos:line="46" pos:column="43">0<pos:position pos:line="46" pos:column="44"/></literal></expr>)<pos:position pos:line="46" pos:column="45"/></condition><then pos:line="46" pos:column="45"> <block pos:line="46" pos:column="46">{
				<comment type="block" pos:line="47" pos:column="33">/*
				 * This object is not found, but we
				 * don't have to include it anyway.
				 */</comment>
				<continue pos:line="51" pos:column="33">continue;<pos:position pos:line="51" pos:column="42"/></continue>
			}<pos:position pos:line="52" pos:column="26"/></block></then></if>
		}<pos:position pos:line="53" pos:column="18"/></block></else></if>

		<expr_stmt><expr><name><name pos:line="55" pos:column="17">delta_list<pos:position pos:line="55" pos:column="27"/></name><index pos:line="55" pos:column="27">[<expr><name pos:line="55" pos:column="28">n<pos:position pos:line="55" pos:column="29"/></name><operator pos:line="55" pos:column="29">++<pos:position pos:line="55" pos:column="31"/></operator></expr>]<pos:position pos:line="55" pos:column="32"/></index></name> <operator pos:line="55" pos:column="33">=<pos:position pos:line="55" pos:column="34"/></operator> <name pos:line="55" pos:column="35">entry<pos:position pos:line="55" pos:column="40"/></name></expr>;<pos:position pos:line="55" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="56" pos:column="10"/></block></for>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">nr_deltas<pos:position pos:line="58" pos:column="22"/></name> <operator pos:line="58" pos:column="23">&amp;&amp;<pos:position pos:line="58" pos:column="33"/></operator> <name pos:line="58" pos:column="26">n<pos:position pos:line="58" pos:column="27"/></name> <operator pos:line="58" pos:column="28">&gt;<pos:position pos:line="58" pos:column="32"/></operator> <literal type="number" pos:line="58" pos:column="30">1<pos:position pos:line="58" pos:column="31"/></literal></expr>)<pos:position pos:line="58" pos:column="32"/></condition><then pos:line="58" pos:column="32"> <block pos:line="58" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">unsigned<pos:position pos:line="59" pos:column="25"/></name></type> <name pos:line="59" pos:column="26">nr_done<pos:position pos:line="59" pos:column="33"/></name> <init pos:line="59" pos:column="34">= <expr><literal type="number" pos:line="59" pos:column="36">0<pos:position pos:line="59" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="59" pos:column="38"/></decl_stmt>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">progress<pos:position pos:line="60" pos:column="29"/></name></expr>)<pos:position pos:line="60" pos:column="30"/></condition><then pos:line="60" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="25">progress_state<pos:position pos:line="61" pos:column="39"/></name> <operator pos:line="61" pos:column="40">=<pos:position pos:line="61" pos:column="41"/></operator> <call><name pos:line="61" pos:column="42">start_progress<pos:position pos:line="61" pos:column="56"/></name><argument_list pos:line="61" pos:column="56">(<argument><expr><call><name pos:line="61" pos:column="57">_<pos:position pos:line="61" pos:column="58"/></name><argument_list pos:line="61" pos:column="58">(<argument><expr><literal type="string" pos:line="61" pos:column="59">"Compressing objects"<pos:position pos:line="61" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="81"/></argument_list></call></expr></argument>,
							<argument><expr><name pos:line="62" pos:column="57">nr_deltas<pos:position pos:line="62" pos:column="66"/></name></expr></argument>)<pos:position pos:line="62" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="68"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">qsort<pos:position pos:line="63" pos:column="22"/></name><argument_list pos:line="63" pos:column="22">(<argument><expr><name pos:line="63" pos:column="23">delta_list<pos:position pos:line="63" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="35">n<pos:position pos:line="63" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="38">sizeof<argument_list pos:line="63" pos:column="44">(<argument><expr><operator pos:line="63" pos:column="45">*<pos:position pos:line="63" pos:column="46"/></operator><name pos:line="63" pos:column="46">delta_list<pos:position pos:line="63" pos:column="56"/></name></expr></argument>)<pos:position pos:line="63" pos:column="57"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="63" pos:column="59">type_size_sort<pos:position pos:line="63" pos:column="73"/></name></expr></argument>)<pos:position pos:line="63" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">ll_find_deltas<pos:position pos:line="64" pos:column="31"/></name><argument_list pos:line="64" pos:column="31">(<argument><expr><name pos:line="64" pos:column="32">delta_list<pos:position pos:line="64" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="44">n<pos:position pos:line="64" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="47">window<pos:position pos:line="64" pos:column="53"/></name><operator pos:line="64" pos:column="53">+<pos:position pos:line="64" pos:column="54"/></operator><literal type="number" pos:line="64" pos:column="54">1<pos:position pos:line="64" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="57">depth<pos:position pos:line="64" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="64">&amp;<pos:position pos:line="64" pos:column="69"/></operator><name pos:line="64" pos:column="65">nr_done<pos:position pos:line="64" pos:column="72"/></name></expr></argument>)<pos:position pos:line="64" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="65" pos:column="17">stop_progress<pos:position pos:line="65" pos:column="30"/></name><argument_list pos:line="65" pos:column="30">(<argument><expr><operator pos:line="65" pos:column="31">&amp;<pos:position pos:line="65" pos:column="36"/></operator><name pos:line="65" pos:column="32">progress_state<pos:position pos:line="65" pos:column="46"/></name></expr></argument>)<pos:position pos:line="65" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="48"/></expr_stmt>
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">nr_done<pos:position pos:line="66" pos:column="28"/></name> <operator pos:line="66" pos:column="29">!=<pos:position pos:line="66" pos:column="31"/></operator> <name pos:line="66" pos:column="32">nr_deltas<pos:position pos:line="66" pos:column="41"/></name></expr>)<pos:position pos:line="66" pos:column="42"/></condition><then pos:line="66" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="25">die<pos:position pos:line="67" pos:column="28"/></name><argument_list pos:line="67" pos:column="28">(<argument><expr><literal type="string" pos:line="67" pos:column="29">"inconsistency with delta count"<pos:position pos:line="67" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="63"/></expr_stmt></block></then></if>
	}<pos:position pos:line="68" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="69" pos:column="9">free<pos:position pos:line="69" pos:column="13"/></name><argument_list pos:line="69" pos:column="13">(<argument><expr><name pos:line="69" pos:column="14">delta_list<pos:position pos:line="69" pos:column="24"/></name></expr></argument>)<pos:position pos:line="69" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="26"/></expr_stmt>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
