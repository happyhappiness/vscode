<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5946_git-2.4.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">re_dfastate_t<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">create_ci_newstate<pos:position pos:line="3" pos:column="19"/></name> <parameter_list pos:line="3" pos:column="20">(<parameter><decl><type><specifier pos:line="3" pos:column="21">const<pos:position pos:line="3" pos:column="26"/></specifier> <name pos:line="3" pos:column="27">re_dfa_t<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">dfa<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="42">const<pos:position pos:line="3" pos:column="47"/></specifier> <name pos:line="3" pos:column="48">re_node_set<pos:position pos:line="3" pos:column="59"/></name> <modifier pos:line="3" pos:column="60">*<pos:position pos:line="3" pos:column="61"/></modifier></type><name pos:line="3" pos:column="61">nodes<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>,
		    <parameter><decl><type><name pos:line="4" pos:column="21">unsigned<pos:position pos:line="4" pos:column="29"/></name> <name pos:line="4" pos:column="30">int<pos:position pos:line="4" pos:column="33"/></name></type> <name pos:line="4" pos:column="34">hash<pos:position pos:line="4" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="39"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">i<pos:position pos:line="6" pos:column="8"/></name></decl>;<pos:position pos:line="6" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">reg_errcode_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">err<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">re_dfastate_t<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">newstate<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">newstate<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <operator pos:line="10" pos:column="14">(<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">re_dfastate_t<pos:position pos:line="10" pos:column="28"/></name> <operator pos:line="10" pos:column="29">*<pos:position pos:line="10" pos:column="30"/></operator><operator pos:line="10" pos:column="30">)<pos:position pos:line="10" pos:column="31"/></operator> <call><name pos:line="10" pos:column="32">calloc<pos:position pos:line="10" pos:column="38"/></name> <argument_list pos:line="10" pos:column="39">(<argument><expr><sizeof pos:line="10" pos:column="40">sizeof <argument_list pos:line="10" pos:column="47">(<argument><expr><name pos:line="10" pos:column="48">re_dfastate_t<pos:position pos:line="10" pos:column="61"/></name></expr></argument>)<pos:position pos:line="10" pos:column="62"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="64">1<pos:position pos:line="10" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="67"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><call><name pos:line="11" pos:column="7">BE<pos:position pos:line="11" pos:column="9"/></name> <argument_list pos:line="11" pos:column="10">(<argument><expr><name pos:line="11" pos:column="11">newstate<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">==<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="23">NULL<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="29">0<pos:position pos:line="11" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="32"/></condition><then pos:line="11" pos:column="32">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">NULL<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="13" pos:column="3">err<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <call><name pos:line="13" pos:column="9">re_node_set_init_copy<pos:position pos:line="13" pos:column="30"/></name> <argument_list pos:line="13" pos:column="31">(<argument><expr><operator pos:line="13" pos:column="32">&amp;<pos:position pos:line="13" pos:column="37"/></operator><name><name pos:line="13" pos:column="33">newstate<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">-&gt;<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="43">nodes<pos:position pos:line="13" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="50">nodes<pos:position pos:line="13" pos:column="55"/></name></expr></argument>)<pos:position pos:line="13" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="57"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><call><name pos:line="14" pos:column="7">BE<pos:position pos:line="14" pos:column="9"/></name> <argument_list pos:line="14" pos:column="10">(<argument><expr><name pos:line="14" pos:column="11">err<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">!=<pos:position pos:line="14" pos:column="17"/></operator> <name pos:line="14" pos:column="18">REG_NOERROR<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="31">0<pos:position pos:line="14" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="34"/></condition><then pos:line="14" pos:column="34">
    <block pos:line="15" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">re_free<pos:position pos:line="16" pos:column="14"/></name> <argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">newstate<pos:position pos:line="16" pos:column="24"/></name></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
      <return pos:line="17" pos:column="7">return <expr><name pos:line="17" pos:column="14">NULL<pos:position pos:line="17" pos:column="18"/></name></expr>;<pos:position pos:line="17" pos:column="19"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="20" pos:column="3">newstate<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">-&gt;<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="13">entrance_nodes<pos:position pos:line="20" pos:column="27"/></name></name> <operator pos:line="20" pos:column="28">=<pos:position pos:line="20" pos:column="29"/></operator> <operator pos:line="20" pos:column="30">&amp;<pos:position pos:line="20" pos:column="35"/></operator><name><name pos:line="20" pos:column="31">newstate<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">-&gt;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="41">nodes<pos:position pos:line="20" pos:column="46"/></name></name></expr>;<pos:position pos:line="20" pos:column="47"/></expr_stmt>
  <for pos:line="21" pos:column="3">for <control pos:line="21" pos:column="7">(<init><expr><name pos:line="21" pos:column="8">i<pos:position pos:line="21" pos:column="9"/></name> <operator pos:line="21" pos:column="10">=<pos:position pos:line="21" pos:column="11"/></operator> <literal type="number" pos:line="21" pos:column="12">0<pos:position pos:line="21" pos:column="13"/></literal></expr> ;<pos:position pos:line="21" pos:column="15"/></init> <condition><expr><name pos:line="21" pos:column="16">i<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">&lt;<pos:position pos:line="21" pos:column="22"/></operator> <name><name pos:line="21" pos:column="20">nodes<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">-&gt;<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="27">nelem<pos:position pos:line="21" pos:column="32"/></name></name></expr> ;<pos:position pos:line="21" pos:column="34"/></condition> <incr><expr><name pos:line="21" pos:column="35">i<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">++<pos:position pos:line="21" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="39"/></control>
    <block pos:line="22" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="23" pos:column="7">re_token_t<pos:position pos:line="23" pos:column="17"/></name> <modifier pos:line="23" pos:column="18">*<pos:position pos:line="23" pos:column="19"/></modifier></type><name pos:line="23" pos:column="19">node<pos:position pos:line="23" pos:column="23"/></name> <init pos:line="23" pos:column="24">= <expr><name><name pos:line="23" pos:column="26">dfa<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">-&gt;<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="31">nodes<pos:position pos:line="23" pos:column="36"/></name></name> <operator pos:line="23" pos:column="37">+<pos:position pos:line="23" pos:column="38"/></operator> <name><name pos:line="23" pos:column="39">nodes<pos:position pos:line="23" pos:column="44"/></name><operator pos:line="23" pos:column="44">-&gt;<pos:position pos:line="23" pos:column="49"/></operator><name pos:line="23" pos:column="46">elems<pos:position pos:line="23" pos:column="51"/></name><index pos:line="23" pos:column="51">[<expr><name pos:line="23" pos:column="52">i<pos:position pos:line="23" pos:column="53"/></name></expr>]<pos:position pos:line="23" pos:column="54"/></index></name></expr></init></decl>;<pos:position pos:line="23" pos:column="55"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="24" pos:column="7">re_token_type_t<pos:position pos:line="24" pos:column="22"/></name></type> <name pos:line="24" pos:column="23">type<pos:position pos:line="24" pos:column="27"/></name> <init pos:line="24" pos:column="28">= <expr><name><name pos:line="24" pos:column="30">node<pos:position pos:line="24" pos:column="34"/></name><operator pos:line="24" pos:column="34">-&gt;<pos:position pos:line="24" pos:column="39"/></operator><name pos:line="24" pos:column="36">type<pos:position pos:line="24" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="24" pos:column="41"/></decl_stmt>
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><name pos:line="25" pos:column="11">type<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">==<pos:position pos:line="25" pos:column="18"/></operator> <name pos:line="25" pos:column="19">CHARACTER<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">&amp;&amp;<pos:position pos:line="25" pos:column="39"/></operator> <operator pos:line="25" pos:column="32">!<pos:position pos:line="25" pos:column="33"/></operator><name><name pos:line="25" pos:column="33">node<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">-&gt;<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="39">constraint<pos:position pos:line="25" pos:column="49"/></name></name></expr>)<pos:position pos:line="25" pos:column="50"/></condition><then pos:line="25" pos:column="50">
	<block type="pseudo"><continue pos:line="26" pos:column="9">continue;<pos:position pos:line="26" pos:column="18"/></continue></block></then></if>
<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="27" pos:column="22"/></name></cpp:ifdef>
      <expr_stmt><expr><name><name pos:line="28" pos:column="7">newstate<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">-&gt;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="17">accept_mb<pos:position pos:line="28" pos:column="26"/></name></name> <operator pos:line="28" pos:column="27">|=<pos:position pos:line="28" pos:column="29"/></operator> <name><name pos:line="28" pos:column="30">node<pos:position pos:line="28" pos:column="34"/></name><operator pos:line="28" pos:column="34">-&gt;<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="36">accept_mb<pos:position pos:line="28" pos:column="45"/></name></name></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="29" pos:column="8">/* RE_ENABLE_I18N */</comment>

      <comment type="block" pos:line="31" pos:column="7">/* If the state has the halt node, the state is a halt state.  */</comment>
      <if pos:line="32" pos:column="7">if <condition pos:line="32" pos:column="10">(<expr><name pos:line="32" pos:column="11">type<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">==<pos:position pos:line="32" pos:column="18"/></operator> <name pos:line="32" pos:column="19">END_OF_RE<pos:position pos:line="32" pos:column="28"/></name></expr>)<pos:position pos:line="32" pos:column="29"/></condition><then pos:line="32" pos:column="29">
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="9">newstate<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">halt<pos:position pos:line="33" pos:column="23"/></name></name> <operator pos:line="33" pos:column="24">=<pos:position pos:line="33" pos:column="25"/></operator> <literal type="number" pos:line="33" pos:column="26">1<pos:position pos:line="33" pos:column="27"/></literal></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt></block></then>
      <elseif pos:line="34" pos:column="7">else <if pos:line="34" pos:column="12">if <condition pos:line="34" pos:column="15">(<expr><name pos:line="34" pos:column="16">type<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">==<pos:position pos:line="34" pos:column="23"/></operator> <name pos:line="34" pos:column="24">OP_BACK_REF<pos:position pos:line="34" pos:column="35"/></name></expr>)<pos:position pos:line="34" pos:column="36"/></condition><then pos:line="34" pos:column="36">
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="9">newstate<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">-&gt;<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="19">has_backref<pos:position pos:line="35" pos:column="30"/></name></name> <operator pos:line="35" pos:column="31">=<pos:position pos:line="35" pos:column="32"/></operator> <literal type="number" pos:line="35" pos:column="33">1<pos:position pos:line="35" pos:column="34"/></literal></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="36" pos:column="7">else <if pos:line="36" pos:column="12">if <condition pos:line="36" pos:column="15">(<expr><name pos:line="36" pos:column="16">type<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">==<pos:position pos:line="36" pos:column="23"/></operator> <name pos:line="36" pos:column="24">ANCHOR<pos:position pos:line="36" pos:column="30"/></name> <operator pos:line="36" pos:column="31">||<pos:position pos:line="36" pos:column="33"/></operator> <name><name pos:line="36" pos:column="34">node<pos:position pos:line="36" pos:column="38"/></name><operator pos:line="36" pos:column="38">-&gt;<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="40">constraint<pos:position pos:line="36" pos:column="50"/></name></name></expr>)<pos:position pos:line="36" pos:column="51"/></condition><then pos:line="36" pos:column="51">
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="37" pos:column="9">newstate<pos:position pos:line="37" pos:column="17"/></name><operator pos:line="37" pos:column="17">-&gt;<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="19">has_constraint<pos:position pos:line="37" pos:column="33"/></name></name> <operator pos:line="37" pos:column="34">=<pos:position pos:line="37" pos:column="35"/></operator> <literal type="number" pos:line="37" pos:column="36">1<pos:position pos:line="37" pos:column="37"/></literal></expr>;<pos:position pos:line="37" pos:column="38"/></expr_stmt></block></then></if></elseif></if>
    }<pos:position pos:line="38" pos:column="6"/></block></for>
  <expr_stmt><expr><name pos:line="39" pos:column="3">err<pos:position pos:line="39" pos:column="6"/></name> <operator pos:line="39" pos:column="7">=<pos:position pos:line="39" pos:column="8"/></operator> <call><name pos:line="39" pos:column="9">register_state<pos:position pos:line="39" pos:column="23"/></name> <argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">dfa<pos:position pos:line="39" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="30">newstate<pos:position pos:line="39" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="40">hash<pos:position pos:line="39" pos:column="44"/></name></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="46"/></expr_stmt>
  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><call><name pos:line="40" pos:column="7">BE<pos:position pos:line="40" pos:column="9"/></name> <argument_list pos:line="40" pos:column="10">(<argument><expr><name pos:line="40" pos:column="11">err<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">!=<pos:position pos:line="40" pos:column="17"/></operator> <name pos:line="40" pos:column="18">REG_NOERROR<pos:position pos:line="40" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="31">0<pos:position pos:line="40" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="34"/></condition><then pos:line="40" pos:column="34">
    <block pos:line="41" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">free_state<pos:position pos:line="42" pos:column="17"/></name> <argument_list pos:line="42" pos:column="18">(<argument><expr><name pos:line="42" pos:column="19">newstate<pos:position pos:line="42" pos:column="27"/></name></expr></argument>)<pos:position pos:line="42" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name pos:line="43" pos:column="7">newstate<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <name pos:line="43" pos:column="18">NULL<pos:position pos:line="43" pos:column="22"/></name></expr>;<pos:position pos:line="43" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>
  <return pos:line="45" pos:column="3">return <expr><name pos:line="45" pos:column="10">newstate<pos:position pos:line="45" pos:column="18"/></name></expr>;<pos:position pos:line="45" pos:column="19"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
