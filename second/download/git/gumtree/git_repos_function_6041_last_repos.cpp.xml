<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6041_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">process_directory<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">path<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">int<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">len<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="57">struct<pos:position pos:line="1" pos:column="63"/></name> <name pos:line="1" pos:column="64">stat<pos:position pos:line="1" pos:column="68"/></name></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">st<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object_id<pos:position pos:line="3" pos:column="25"/></name></name></type> <name pos:line="3" pos:column="26">oid<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">pos<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><call><name pos:line="4" pos:column="19">cache_name_pos<pos:position pos:line="4" pos:column="33"/></name><argument_list pos:line="4" pos:column="33">(<argument><expr><name pos:line="4" pos:column="34">path<pos:position pos:line="4" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="40">len<pos:position pos:line="4" pos:column="43"/></name></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* Exact match: file or existing gitlink */</comment>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">pos<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">&gt;=<pos:position pos:line="7" pos:column="22"/></operator> <literal type="number" pos:line="7" pos:column="20">0<pos:position pos:line="7" pos:column="21"/></literal></expr>)<pos:position pos:line="7" pos:column="22"/></condition><then pos:line="7" pos:column="22"> <block pos:line="7" pos:column="23">{
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name><name pos:line="8" pos:column="23">struct<pos:position pos:line="8" pos:column="29"/></name> <name pos:line="8" pos:column="30">cache_entry<pos:position pos:line="8" pos:column="41"/></name></name> <modifier pos:line="8" pos:column="42">*<pos:position pos:line="8" pos:column="43"/></modifier></type><name pos:line="8" pos:column="43">ce<pos:position pos:line="8" pos:column="45"/></name> <init pos:line="8" pos:column="46">= <expr><name><name pos:line="8" pos:column="48">active_cache<pos:position pos:line="8" pos:column="60"/></name><index pos:line="8" pos:column="60">[<expr><name pos:line="8" pos:column="61">pos<pos:position pos:line="8" pos:column="64"/></name></expr>]<pos:position pos:line="8" pos:column="65"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="66"/></decl_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><call><name pos:line="9" pos:column="21">S_ISGITLINK<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><name><name pos:line="9" pos:column="33">ce<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">-&gt;<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="37">ce_mode<pos:position pos:line="9" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="46"/></condition><then pos:line="9" pos:column="46"> <block pos:line="9" pos:column="47">{

			<comment type="block" pos:line="11" pos:column="25">/* Do nothing to the index if there is no HEAD! */</comment>
			<if pos:line="12" pos:column="25">if <condition pos:line="12" pos:column="28">(<expr><call><name pos:line="12" pos:column="29">resolve_gitlink_ref<pos:position pos:line="12" pos:column="48"/></name><argument_list pos:line="12" pos:column="48">(<argument><expr><name pos:line="12" pos:column="49">path<pos:position pos:line="12" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="55">"HEAD"<pos:position pos:line="12" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="63">oid<pos:position pos:line="12" pos:column="66"/></name><operator pos:line="12" pos:column="66">.<pos:position pos:line="12" pos:column="67"/></operator><name pos:line="12" pos:column="67">hash<pos:position pos:line="12" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="72"/></argument_list></call> <operator pos:line="12" pos:column="73">&lt;<pos:position pos:line="12" pos:column="77"/></operator> <literal type="number" pos:line="12" pos:column="75">0<pos:position pos:line="12" pos:column="76"/></literal></expr>)<pos:position pos:line="12" pos:column="77"/></condition><then pos:line="12" pos:column="77">
				<block type="pseudo"><return pos:line="13" pos:column="33">return <expr><literal type="number" pos:line="13" pos:column="40">0<pos:position pos:line="13" pos:column="41"/></literal></expr>;<pos:position pos:line="13" pos:column="42"/></return></block></then></if>

			<return pos:line="15" pos:column="25">return <expr><call><name pos:line="15" pos:column="32">add_one_path<pos:position pos:line="15" pos:column="44"/></name><argument_list pos:line="15" pos:column="44">(<argument><expr><name pos:line="15" pos:column="45">ce<pos:position pos:line="15" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="49">path<pos:position pos:line="15" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="55">len<pos:position pos:line="15" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="60">st<pos:position pos:line="15" pos:column="62"/></name></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="64"/></return>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="17" pos:column="17">/* Should this be an unconditional error? */</comment>
		<return pos:line="18" pos:column="17">return <expr><call><name pos:line="18" pos:column="24">remove_one_path<pos:position pos:line="18" pos:column="39"/></name><argument_list pos:line="18" pos:column="39">(<argument><expr><name pos:line="18" pos:column="40">path<pos:position pos:line="18" pos:column="44"/></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="46"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="21" pos:column="9">/* Inexact match: is there perhaps a subdirectory match? */</comment>
	<expr_stmt><expr><name pos:line="22" pos:column="9">pos<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <operator pos:line="22" pos:column="15">-<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">pos<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">-<pos:position pos:line="22" pos:column="20"/></operator><literal type="number" pos:line="22" pos:column="20">1<pos:position pos:line="22" pos:column="21"/></literal></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
	<while pos:line="23" pos:column="9">while <condition pos:line="23" pos:column="15">(<expr><name pos:line="23" pos:column="16">pos<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">&lt;<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="22">active_nr<pos:position pos:line="23" pos:column="31"/></name></expr>)<pos:position pos:line="23" pos:column="32"/></condition> <block pos:line="23" pos:column="33">{
		<decl_stmt><decl><type><specifier pos:line="24" pos:column="17">const<pos:position pos:line="24" pos:column="22"/></specifier> <name><name pos:line="24" pos:column="23">struct<pos:position pos:line="24" pos:column="29"/></name> <name pos:line="24" pos:column="30">cache_entry<pos:position pos:line="24" pos:column="41"/></name></name> <modifier pos:line="24" pos:column="42">*<pos:position pos:line="24" pos:column="43"/></modifier></type><name pos:line="24" pos:column="43">ce<pos:position pos:line="24" pos:column="45"/></name> <init pos:line="24" pos:column="46">= <expr><name><name pos:line="24" pos:column="48">active_cache<pos:position pos:line="24" pos:column="60"/></name><index pos:line="24" pos:column="60">[<expr><name pos:line="24" pos:column="61">pos<pos:position pos:line="24" pos:column="64"/></name><operator pos:line="24" pos:column="64">++<pos:position pos:line="24" pos:column="66"/></operator></expr>]<pos:position pos:line="24" pos:column="67"/></index></name></expr></init></decl>;<pos:position pos:line="24" pos:column="68"/></decl_stmt>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><call><name pos:line="26" pos:column="21">strncmp<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name><name pos:line="26" pos:column="29">ce<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">-&gt;<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="33">name<pos:position pos:line="26" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="39">path<pos:position pos:line="26" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="45">len<pos:position pos:line="26" pos:column="48"/></name></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="50"/></condition><then pos:line="26" pos:column="50">
			<block type="pseudo"><break pos:line="27" pos:column="25">break;<pos:position pos:line="27" pos:column="31"/></break></block></then></if>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name><name pos:line="28" pos:column="21">ce<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">-&gt;<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="25">name<pos:position pos:line="28" pos:column="29"/></name><index pos:line="28" pos:column="29">[<expr><name pos:line="28" pos:column="30">len<pos:position pos:line="28" pos:column="33"/></name></expr>]<pos:position pos:line="28" pos:column="34"/></index></name> <operator pos:line="28" pos:column="35">&gt;<pos:position pos:line="28" pos:column="39"/></operator> <literal type="char" pos:line="28" pos:column="37">'/'<pos:position pos:line="28" pos:column="40"/></literal></expr>)<pos:position pos:line="28" pos:column="41"/></condition><then pos:line="28" pos:column="41">
			<block type="pseudo"><break pos:line="29" pos:column="25">break;<pos:position pos:line="29" pos:column="31"/></break></block></then></if>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name><name pos:line="30" pos:column="21">ce<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">-&gt;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="25">name<pos:position pos:line="30" pos:column="29"/></name><index pos:line="30" pos:column="29">[<expr><name pos:line="30" pos:column="30">len<pos:position pos:line="30" pos:column="33"/></name></expr>]<pos:position pos:line="30" pos:column="34"/></index></name> <operator pos:line="30" pos:column="35">&lt;<pos:position pos:line="30" pos:column="39"/></operator> <literal type="char" pos:line="30" pos:column="37">'/'<pos:position pos:line="30" pos:column="40"/></literal></expr>)<pos:position pos:line="30" pos:column="41"/></condition><then pos:line="30" pos:column="41">
			<block type="pseudo"><continue pos:line="31" pos:column="25">continue;<pos:position pos:line="31" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="33" pos:column="17">/* Subdirectory match - error out */</comment>
		<return pos:line="34" pos:column="17">return <expr><call><name pos:line="34" pos:column="24">error<pos:position pos:line="34" pos:column="29"/></name><argument_list pos:line="34" pos:column="29">(<argument><expr><literal type="string" pos:line="34" pos:column="30">"%s: is a directory - add individual files instead"<pos:position pos:line="34" pos:column="81"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="83">path<pos:position pos:line="34" pos:column="87"/></name></expr></argument>)<pos:position pos:line="34" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="89"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></while>

	<comment type="block" pos:line="37" pos:column="9">/* No match - should we add it as a gitlink? */</comment>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><call><name pos:line="38" pos:column="14">resolve_gitlink_ref<pos:position pos:line="38" pos:column="33"/></name><argument_list pos:line="38" pos:column="33">(<argument><expr><name pos:line="38" pos:column="34">path<pos:position pos:line="38" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="40">"HEAD"<pos:position pos:line="38" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="48">oid<pos:position pos:line="38" pos:column="51"/></name><operator pos:line="38" pos:column="51">.<pos:position pos:line="38" pos:column="52"/></operator><name pos:line="38" pos:column="52">hash<pos:position pos:line="38" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="58"/></condition><then pos:line="38" pos:column="58">
		<block type="pseudo"><return pos:line="39" pos:column="17">return <expr><call><name pos:line="39" pos:column="24">add_one_path<pos:position pos:line="39" pos:column="36"/></name><argument_list pos:line="39" pos:column="36">(<argument><expr><name pos:line="39" pos:column="37">NULL<pos:position pos:line="39" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="43">path<pos:position pos:line="39" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="49">len<pos:position pos:line="39" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="54">st<pos:position pos:line="39" pos:column="56"/></name></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="58"/></return></block></then></if>

	<comment type="block" pos:line="41" pos:column="9">/* Error out. */</comment>
	<return pos:line="42" pos:column="9">return <expr><call><name pos:line="42" pos:column="16">error<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(<argument><expr><literal type="string" pos:line="42" pos:column="22">"%s: is a directory - add files inside instead"<pos:position pos:line="42" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="71">path<pos:position pos:line="42" pos:column="75"/></name></expr></argument>)<pos:position pos:line="42" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="77"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
