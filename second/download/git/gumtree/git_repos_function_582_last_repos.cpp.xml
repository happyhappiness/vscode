<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_582_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">get_head_description<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">desc<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><name pos:line="3" pos:column="30">STRBUF_INIT<pos:position pos:line="3" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">wt_status_state<pos:position pos:line="4" pos:column="31"/></name></name></type> <name pos:line="4" pos:column="32">state<pos:position pos:line="4" pos:column="37"/></name></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="5" pos:column="9">memset<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><operator pos:line="5" pos:column="16">&amp;<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="17">state<pos:position pos:line="5" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="24">0<pos:position pos:line="5" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="27">sizeof<argument_list pos:line="5" pos:column="33">(<argument><expr><name pos:line="5" pos:column="34">state<pos:position pos:line="5" pos:column="39"/></name></expr></argument>)<pos:position pos:line="5" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="6" pos:column="9">wt_status_get_state<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="30">state<pos:position pos:line="6" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="37">1<pos:position pos:line="6" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="40"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">state<pos:position pos:line="7" pos:column="18"/></name><operator pos:line="7" pos:column="18">.<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="19">rebase_in_progress<pos:position pos:line="7" pos:column="37"/></name></name> <operator pos:line="7" pos:column="38">||<pos:position pos:line="7" pos:column="40"/></operator>
	    <name><name pos:line="8" pos:column="13">state<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">.<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="19">rebase_interactive_in_progress<pos:position pos:line="8" pos:column="49"/></name></name></expr>)<pos:position pos:line="8" pos:column="50"/></condition><then pos:line="8" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">strbuf_addf<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><operator pos:line="9" pos:column="29">&amp;<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="30">desc<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="36">_<pos:position pos:line="9" pos:column="37"/></name><argument_list pos:line="9" pos:column="37">(<argument><expr><literal type="string" pos:line="9" pos:column="38">"(no branch, rebasing %s)"<pos:position pos:line="9" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr></argument>,
			    <argument><expr><name><name pos:line="10" pos:column="29">state<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">.<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">branch<pos:position pos:line="10" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="43"/></expr_stmt></block></then>
	<elseif pos:line="11" pos:column="9">else <if pos:line="11" pos:column="14">if <condition pos:line="11" pos:column="17">(<expr><name><name pos:line="11" pos:column="18">state<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">.<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">bisect_in_progress<pos:position pos:line="11" pos:column="42"/></name></name></expr>)<pos:position pos:line="11" pos:column="43"/></condition><then pos:line="11" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">strbuf_addf<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><operator pos:line="12" pos:column="29">&amp;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="30">desc<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="36">_<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">(<argument><expr><literal type="string" pos:line="12" pos:column="38">"(no branch, bisect started on %s)"<pos:position pos:line="12" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr></argument>,
			    <argument><expr><name><name pos:line="13" pos:column="29">state<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">.<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="35">branch<pos:position pos:line="13" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="14" pos:column="9">else <if pos:line="14" pos:column="14">if <condition pos:line="14" pos:column="17">(<expr><name><name pos:line="14" pos:column="18">state<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">.<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">detached_from<pos:position pos:line="14" pos:column="37"/></name></name></expr>)<pos:position pos:line="14" pos:column="38"/></condition><then pos:line="14" pos:column="38"> <block pos:line="14" pos:column="39">{
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name><name pos:line="15" pos:column="21">state<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">.<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="27">detached_at<pos:position pos:line="15" pos:column="38"/></name></name></expr>)<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39">
			<comment type="block" pos:line="16" pos:column="25">/*
			 * TRANSLATORS: make sure this matches "HEAD
			 * detached at " in wt-status.c
			 */</comment>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="25">strbuf_addf<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><operator pos:line="20" pos:column="37">&amp;<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="38">desc<pos:position pos:line="20" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="44">_<pos:position pos:line="20" pos:column="45"/></name><argument_list pos:line="20" pos:column="45">(<argument><expr><literal type="string" pos:line="20" pos:column="46">"(HEAD detached at %s)"<pos:position pos:line="20" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr></argument>,
				<argument><expr><name><name pos:line="21" pos:column="33">state<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">.<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="39">detached_from<pos:position pos:line="21" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="54"/></expr_stmt></block></then>
		<else pos:line="22" pos:column="17">else
			<comment type="block" pos:line="23" pos:column="25">/*
			 * TRANSLATORS: make sure this matches "HEAD
			 * detached from " in wt-status.c
			 */</comment>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">strbuf_addf<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><operator pos:line="27" pos:column="37">&amp;<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="38">desc<pos:position pos:line="27" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="44">_<pos:position pos:line="27" pos:column="45"/></name><argument_list pos:line="27" pos:column="45">(<argument><expr><literal type="string" pos:line="27" pos:column="46">"(HEAD detached from %s)"<pos:position pos:line="27" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call></expr></argument>,
				<argument><expr><name><name pos:line="28" pos:column="33">state<pos:position pos:line="28" pos:column="38"/></name><operator pos:line="28" pos:column="38">.<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="39">detached_from<pos:position pos:line="28" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt></block></else></if>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if></elseif>
	<else pos:line="30" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="17">strbuf_addstr<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><operator pos:line="31" pos:column="31">&amp;<pos:position pos:line="31" pos:column="36"/></operator><name pos:line="31" pos:column="32">desc<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="38">_<pos:position pos:line="31" pos:column="39"/></name><argument_list pos:line="31" pos:column="39">(<argument><expr><literal type="string" pos:line="31" pos:column="40">"(no branch)"<pos:position pos:line="31" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="56"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">free<pos:position pos:line="32" pos:column="13"/></name><argument_list pos:line="32" pos:column="13">(<argument><expr><name><name pos:line="32" pos:column="14">state<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">.<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="20">branch<pos:position pos:line="32" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">free<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><name><name pos:line="33" pos:column="14">state<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">.<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">onto<pos:position pos:line="33" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">free<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><name><name pos:line="34" pos:column="14">state<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">.<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="20">detached_from<pos:position pos:line="34" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>
	<return pos:line="35" pos:column="9">return <expr><call><name pos:line="35" pos:column="16">strbuf_detach<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><operator pos:line="35" pos:column="30">&amp;<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="31">desc<pos:position pos:line="35" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="37">NULL<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="43"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
