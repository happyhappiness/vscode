<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2998.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">verify_absent_1<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">cache_entry<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">ce<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
			   <parameter><decl><type><name><name pos:line="2" pos:column="28">enum<pos:position pos:line="2" pos:column="32"/></name> <name pos:line="2" pos:column="33">unpack_trees_error_types<pos:position pos:line="2" pos:column="57"/></name></name></type> <name pos:line="2" pos:column="58">error_type<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>,
			   <parameter><decl><type><name><name pos:line="3" pos:column="28">struct<pos:position pos:line="3" pos:column="34"/></name> <name pos:line="3" pos:column="35">unpack_trees_options<pos:position pos:line="3" pos:column="55"/></name></name> <modifier pos:line="3" pos:column="56">*<pos:position pos:line="3" pos:column="57"/></modifier></type><name pos:line="3" pos:column="57">o<pos:position pos:line="3" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="59"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">stat<pos:position pos:line="6" pos:column="20"/></name></name></type> <name pos:line="6" pos:column="21">st<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">o<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">-&gt;<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="16">index_only<pos:position pos:line="8" pos:column="26"/></name></name> <operator pos:line="8" pos:column="27">||<pos:position pos:line="8" pos:column="29"/></operator> <name><name pos:line="8" pos:column="30">o<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">-&gt;<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="33">reset<pos:position pos:line="8" pos:column="38"/></name></name> <operator pos:line="8" pos:column="39">||<pos:position pos:line="8" pos:column="41"/></operator> <operator pos:line="8" pos:column="42">!<pos:position pos:line="8" pos:column="43"/></operator><name><name pos:line="8" pos:column="43">o<pos:position pos:line="8" pos:column="44"/></name><operator pos:line="8" pos:column="44">-&gt;<pos:position pos:line="8" pos:column="49"/></operator><name pos:line="8" pos:column="46">update<pos:position pos:line="8" pos:column="52"/></name></name></expr>)<pos:position pos:line="8" pos:column="53"/></condition><then pos:line="8" pos:column="53">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="11" pos:column="9">len<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <call><name pos:line="11" pos:column="15">check_leading_path<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name><name pos:line="11" pos:column="34">ce<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">-&gt;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="38">name<pos:position pos:line="11" pos:column="42"/></name></name></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="44">ce_namelen<pos:position pos:line="11" pos:column="54"/></name><argument_list pos:line="11" pos:column="54">(<argument><expr><name pos:line="11" pos:column="55">ce<pos:position pos:line="11" pos:column="57"/></name></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="60"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">len<pos:position pos:line="12" pos:column="17"/></name></expr>)<pos:position pos:line="12" pos:column="18"/></condition><then pos:line="12" pos:column="18">
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></return></block></then>
	<elseif pos:line="14" pos:column="9">else <if pos:line="14" pos:column="14">if <condition pos:line="14" pos:column="17">(<expr><name pos:line="14" pos:column="18">len<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">&gt;<pos:position pos:line="14" pos:column="26"/></operator> <literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26"> <block pos:line="14" pos:column="27">{
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">char<pos:position pos:line="15" pos:column="21"/></name> <modifier pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></modifier></type><name pos:line="15" pos:column="23">path<pos:position pos:line="15" pos:column="27"/></name></decl>;<pos:position pos:line="15" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">int<pos:position pos:line="16" pos:column="20"/></name></type> <name pos:line="16" pos:column="21">ret<pos:position pos:line="16" pos:column="24"/></name></decl>;<pos:position pos:line="16" pos:column="25"/></decl_stmt>

		<expr_stmt><expr><name pos:line="18" pos:column="17">path<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <call><name pos:line="18" pos:column="24">xmemdupz<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name><name pos:line="18" pos:column="33">ce<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">-&gt;<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="37">name<pos:position pos:line="18" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="43">len<pos:position pos:line="18" pos:column="46"/></name></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><call><name pos:line="19" pos:column="21">lstat<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">path<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="33">&amp;<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="34">st<pos:position pos:line="19" pos:column="36"/></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="38"/></condition><then pos:line="19" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="25">ret<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">=<pos:position pos:line="20" pos:column="30"/></operator> <call><name pos:line="20" pos:column="31">error<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><literal type="string" pos:line="20" pos:column="37">"cannot stat '%s': %s"<pos:position pos:line="20" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="61">path<pos:position pos:line="20" pos:column="65"/></name></expr></argument>,
					<argument><expr><call><name pos:line="21" pos:column="41">strerror<pos:position pos:line="21" pos:column="49"/></name><argument_list pos:line="21" pos:column="49">(<argument><expr><name pos:line="21" pos:column="50">errno<pos:position pos:line="21" pos:column="55"/></name></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="58"/></expr_stmt></block></then>
		<else pos:line="22" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="25">ret<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">=<pos:position pos:line="23" pos:column="30"/></operator> <call><name pos:line="23" pos:column="31">check_ok_to_remove<pos:position pos:line="23" pos:column="49"/></name><argument_list pos:line="23" pos:column="49">(<argument><expr><name pos:line="23" pos:column="50">path<pos:position pos:line="23" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="56">len<pos:position pos:line="23" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="61">DT_UNKNOWN<pos:position pos:line="23" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="73">NULL<pos:position pos:line="23" pos:column="77"/></name></expr></argument>,
						 <argument><expr><operator pos:line="24" pos:column="50">&amp;<pos:position pos:line="24" pos:column="55"/></operator><name pos:line="24" pos:column="51">st<pos:position pos:line="24" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="55">error_type<pos:position pos:line="24" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="67">o<pos:position pos:line="24" pos:column="68"/></name></expr></argument>)<pos:position pos:line="24" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="70"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">free<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><name pos:line="25" pos:column="22">path<pos:position pos:line="25" pos:column="26"/></name></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
		<return pos:line="26" pos:column="17">return <expr><name pos:line="26" pos:column="24">ret<pos:position pos:line="26" pos:column="27"/></name></expr>;<pos:position pos:line="26" pos:column="28"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if></elseif> <elseif pos:line="27" pos:column="11">else <if pos:line="27" pos:column="16">if <condition pos:line="27" pos:column="19">(<expr><call><name pos:line="27" pos:column="20">lstat<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name><name pos:line="27" pos:column="26">ce<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">-&gt;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="30">name<pos:position pos:line="27" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="36">&amp;<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="37">st<pos:position pos:line="27" pos:column="39"/></name></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="41"/></condition><then pos:line="27" pos:column="41"> <block pos:line="27" pos:column="42">{
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">errno<pos:position pos:line="28" pos:column="26"/></name> <operator pos:line="28" pos:column="27">!=<pos:position pos:line="28" pos:column="29"/></operator> <name pos:line="28" pos:column="30">ENOENT<pos:position pos:line="28" pos:column="36"/></name></expr>)<pos:position pos:line="28" pos:column="37"/></condition><then pos:line="28" pos:column="37">
			<block type="pseudo"><return pos:line="29" pos:column="25">return <expr><call><name pos:line="29" pos:column="32">error<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><literal type="string" pos:line="29" pos:column="38">"cannot stat '%s': %s"<pos:position pos:line="29" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="62">ce<pos:position pos:line="29" pos:column="64"/></name><operator pos:line="29" pos:column="64">-&gt;<pos:position pos:line="29" pos:column="69"/></operator><name pos:line="29" pos:column="66">name<pos:position pos:line="29" pos:column="70"/></name></name></expr></argument>,
				     <argument><expr><call><name pos:line="30" pos:column="38">strerror<pos:position pos:line="30" pos:column="46"/></name><argument_list pos:line="30" pos:column="46">(<argument><expr><name pos:line="30" pos:column="47">errno<pos:position pos:line="30" pos:column="52"/></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="55"/></return></block></then></if>
		<return pos:line="31" pos:column="17">return <expr><literal type="number" pos:line="31" pos:column="24">0<pos:position pos:line="31" pos:column="25"/></literal></expr>;<pos:position pos:line="31" pos:column="26"/></return>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if></elseif> <else pos:line="32" pos:column="11">else <block pos:line="32" pos:column="16">{
		<return pos:line="33" pos:column="17">return <expr><call><name pos:line="33" pos:column="24">check_ok_to_remove<pos:position pos:line="33" pos:column="42"/></name><argument_list pos:line="33" pos:column="42">(<argument><expr><name><name pos:line="33" pos:column="43">ce<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">-&gt;<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="47">name<pos:position pos:line="33" pos:column="51"/></name></name></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="53">ce_namelen<pos:position pos:line="33" pos:column="63"/></name><argument_list pos:line="33" pos:column="63">(<argument><expr><name pos:line="33" pos:column="64">ce<pos:position pos:line="33" pos:column="66"/></name></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call></expr></argument>,
					  <argument><expr><call><name pos:line="34" pos:column="43">ce_to_dtype<pos:position pos:line="34" pos:column="54"/></name><argument_list pos:line="34" pos:column="54">(<argument><expr><name pos:line="34" pos:column="55">ce<pos:position pos:line="34" pos:column="57"/></name></expr></argument>)<pos:position pos:line="34" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="34" pos:column="60">ce<pos:position pos:line="34" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="64">&amp;<pos:position pos:line="34" pos:column="69"/></operator><name pos:line="34" pos:column="65">st<pos:position pos:line="34" pos:column="67"/></name></expr></argument>,
					  <argument><expr><name pos:line="35" pos:column="43">error_type<pos:position pos:line="35" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="55">o<pos:position pos:line="35" pos:column="56"/></name></expr></argument>)<pos:position pos:line="35" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="58"/></return>
	}<pos:position pos:line="36" pos:column="10"/></block></else></if>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
