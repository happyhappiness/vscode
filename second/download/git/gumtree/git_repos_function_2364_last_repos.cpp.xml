<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2364_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">determine_macros<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">all_attrs_item<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">all_attrs<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name><name pos:line="2" pos:column="36">struct<pos:position pos:line="2" pos:column="42"/></name> <name pos:line="2" pos:column="43">attr_stack<pos:position pos:line="2" pos:column="53"/></name></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">stack<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<for pos:line="4" pos:column="9">for <control pos:line="4" pos:column="13">(<init pos:line="4" pos:column="14">;<pos:position pos:line="4" pos:column="15"/></init> <condition><expr><name pos:line="4" pos:column="16">stack<pos:position pos:line="4" pos:column="21"/></name></expr>;<pos:position pos:line="4" pos:column="22"/></condition> <incr><expr><name pos:line="4" pos:column="23">stack<pos:position pos:line="4" pos:column="28"/></name> <operator pos:line="4" pos:column="29">=<pos:position pos:line="4" pos:column="30"/></operator> <name><name pos:line="4" pos:column="31">stack<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">-&gt;<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="38">prev<pos:position pos:line="4" pos:column="42"/></name></name></expr></incr>)<pos:position pos:line="4" pos:column="43"/></control> <block pos:line="4" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">int<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">i<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
		<for pos:line="6" pos:column="17">for <control pos:line="6" pos:column="21">(<init><expr><name pos:line="6" pos:column="22">i<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">=<pos:position pos:line="6" pos:column="25"/></operator> <name><name pos:line="6" pos:column="26">stack<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">-&gt;<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="33">num_matches<pos:position pos:line="6" pos:column="44"/></name></name> <operator pos:line="6" pos:column="45">-<pos:position pos:line="6" pos:column="46"/></operator> <literal type="number" pos:line="6" pos:column="47">1<pos:position pos:line="6" pos:column="48"/></literal></expr>;<pos:position pos:line="6" pos:column="49"/></init> <condition><expr><name pos:line="6" pos:column="50">i<pos:position pos:line="6" pos:column="51"/></name> <operator pos:line="6" pos:column="52">&gt;=<pos:position pos:line="6" pos:column="57"/></operator> <literal type="number" pos:line="6" pos:column="55">0<pos:position pos:line="6" pos:column="56"/></literal></expr>;<pos:position pos:line="6" pos:column="57"/></condition> <incr><expr><name pos:line="6" pos:column="58">i<pos:position pos:line="6" pos:column="59"/></name><operator pos:line="6" pos:column="59">--<pos:position pos:line="6" pos:column="61"/></operator></expr></incr>)<pos:position pos:line="6" pos:column="62"/></control> <block pos:line="6" pos:column="63">{
			<decl_stmt><decl><type><specifier pos:line="7" pos:column="25">const<pos:position pos:line="7" pos:column="30"/></specifier> <name><name pos:line="7" pos:column="31">struct<pos:position pos:line="7" pos:column="37"/></name> <name pos:line="7" pos:column="38">match_attr<pos:position pos:line="7" pos:column="48"/></name></name> <modifier pos:line="7" pos:column="49">*<pos:position pos:line="7" pos:column="50"/></modifier></type><name pos:line="7" pos:column="50">ma<pos:position pos:line="7" pos:column="52"/></name> <init pos:line="7" pos:column="53">= <expr><name><name pos:line="7" pos:column="55">stack<pos:position pos:line="7" pos:column="60"/></name><operator pos:line="7" pos:column="60">-&gt;<pos:position pos:line="7" pos:column="65"/></operator><name pos:line="7" pos:column="62">attrs<pos:position pos:line="7" pos:column="67"/></name><index pos:line="7" pos:column="67">[<expr><name pos:line="7" pos:column="68">i<pos:position pos:line="7" pos:column="69"/></name></expr>]<pos:position pos:line="7" pos:column="70"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="71"/></decl_stmt>
			<if pos:line="8" pos:column="25">if <condition pos:line="8" pos:column="28">(<expr><name><name pos:line="8" pos:column="29">ma<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">-&gt;<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="33">is_macro<pos:position pos:line="8" pos:column="41"/></name></name></expr>)<pos:position pos:line="8" pos:column="42"/></condition><then pos:line="8" pos:column="42"> <block pos:line="8" pos:column="43">{
				<decl_stmt><decl><type><name pos:line="9" pos:column="33">int<pos:position pos:line="9" pos:column="36"/></name></type> <name pos:line="9" pos:column="37">n<pos:position pos:line="9" pos:column="38"/></name> <init pos:line="9" pos:column="39">= <expr><name><name pos:line="9" pos:column="41">ma<pos:position pos:line="9" pos:column="43"/></name><operator pos:line="9" pos:column="43">-&gt;<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="45">u<pos:position pos:line="9" pos:column="46"/></name><operator pos:line="9" pos:column="46">.<pos:position pos:line="9" pos:column="47"/></operator><name pos:line="9" pos:column="47">attr<pos:position pos:line="9" pos:column="51"/></name><operator pos:line="9" pos:column="51">-&gt;<pos:position pos:line="9" pos:column="56"/></operator><name pos:line="9" pos:column="53">attr_nr<pos:position pos:line="9" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="61"/></decl_stmt>
				<if pos:line="10" pos:column="33">if <condition pos:line="10" pos:column="36">(<expr><operator pos:line="10" pos:column="37">!<pos:position pos:line="10" pos:column="38"/></operator><name><name pos:line="10" pos:column="38">all_attrs<pos:position pos:line="10" pos:column="47"/></name><index pos:line="10" pos:column="47">[<expr><name pos:line="10" pos:column="48">n<pos:position pos:line="10" pos:column="49"/></name></expr>]<pos:position pos:line="10" pos:column="50"/></index></name><operator pos:line="10" pos:column="50">.<pos:position pos:line="10" pos:column="51"/></operator><name pos:line="10" pos:column="51">macro<pos:position pos:line="10" pos:column="56"/></name></expr>)<pos:position pos:line="10" pos:column="57"/></condition><then pos:line="10" pos:column="57"> <block pos:line="10" pos:column="58">{
					<expr_stmt><expr><name><name pos:line="11" pos:column="41">all_attrs<pos:position pos:line="11" pos:column="50"/></name><index pos:line="11" pos:column="50">[<expr><name pos:line="11" pos:column="51">n<pos:position pos:line="11" pos:column="52"/></name></expr>]<pos:position pos:line="11" pos:column="53"/></index></name><operator pos:line="11" pos:column="53">.<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="54">macro<pos:position pos:line="11" pos:column="59"/></name> <operator pos:line="11" pos:column="60">=<pos:position pos:line="11" pos:column="61"/></operator> <name pos:line="11" pos:column="62">ma<pos:position pos:line="11" pos:column="64"/></name></expr>;<pos:position pos:line="11" pos:column="65"/></expr_stmt>
				}<pos:position pos:line="12" pos:column="34"/></block></then></if>
			}<pos:position pos:line="13" pos:column="26"/></block></then></if>
		}<pos:position pos:line="14" pos:column="18"/></block></for>
	}<pos:position pos:line="15" pos:column="10"/></block></for>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
