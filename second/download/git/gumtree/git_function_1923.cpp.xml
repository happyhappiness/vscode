<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1923.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">store_pid<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">path<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">FILE<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">f<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><call><name pos:line="3" pos:column="19">fopen<pos:position pos:line="3" pos:column="24"/></name><argument_list pos:line="3" pos:column="24">(<argument><expr><name pos:line="3" pos:column="25">path<pos:position pos:line="3" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="31">"w"<pos:position pos:line="3" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">f<pos:position pos:line="4" pos:column="15"/></name></expr>)<pos:position pos:line="4" pos:column="16"/></condition><then pos:line="4" pos:column="16">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="5" pos:column="17">die_errno<pos:position pos:line="5" pos:column="26"/></name><argument_list pos:line="5" pos:column="26">(<argument><expr><literal type="string" pos:line="5" pos:column="27">"cannot open pid file '%s'"<pos:position pos:line="5" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="56">path<pos:position pos:line="5" pos:column="60"/></name></expr></argument>)<pos:position pos:line="5" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="62"/></expr_stmt></block></then></if>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">fprintf<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><name pos:line="6" pos:column="21">f<pos:position pos:line="6" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="24">"%"<pos:position pos:line="6" pos:column="27"/></literal><name pos:line="6" pos:column="27">PRIuMAX<pos:position pos:line="6" pos:column="34"/></name><literal type="string" pos:line="6" pos:column="34">"\n"<pos:position pos:line="6" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="6" pos:column="40">(<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="41">uintmax_t<pos:position pos:line="6" pos:column="50"/></name><operator pos:line="6" pos:column="50">)<pos:position pos:line="6" pos:column="51"/></operator> <call><name pos:line="6" pos:column="52">getpid<pos:position pos:line="6" pos:column="58"/></name><argument_list pos:line="6" pos:column="58">()<pos:position pos:line="6" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="61"/></argument_list></call> <operator pos:line="6" pos:column="62">&lt;<pos:position pos:line="6" pos:column="66"/></operator> <literal type="number" pos:line="6" pos:column="64">0<pos:position pos:line="6" pos:column="65"/></literal> <operator pos:line="6" pos:column="66">||<pos:position pos:line="6" pos:column="68"/></operator> <call><name pos:line="6" pos:column="69">fclose<pos:position pos:line="6" pos:column="75"/></name><argument_list pos:line="6" pos:column="75">(<argument><expr><name pos:line="6" pos:column="76">f<pos:position pos:line="6" pos:column="77"/></name></expr></argument>)<pos:position pos:line="6" pos:column="78"/></argument_list></call> <operator pos:line="6" pos:column="79">!=<pos:position pos:line="6" pos:column="81"/></operator> <literal type="number" pos:line="6" pos:column="82">0<pos:position pos:line="6" pos:column="83"/></literal></expr>)<pos:position pos:line="6" pos:column="84"/></condition><then pos:line="6" pos:column="84">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">die_errno<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><literal type="string" pos:line="7" pos:column="27">"failed to write pid file '%s'"<pos:position pos:line="7" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="60">path<pos:position pos:line="7" pos:column="64"/></name></expr></argument>)<pos:position pos:line="7" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="66"/></expr_stmt></block></then></if>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
