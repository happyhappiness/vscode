<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5144_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_value<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">key_<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">regex_<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ret<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><name pos:line="3" pos:column="19">CONFIG_GENERIC_ERROR<pos:position pos:line="3" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf_list<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">values<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><block pos:line="4" pos:column="37">{<expr><name pos:line="4" pos:column="38">NULL<pos:position pos:line="4" pos:column="42"/></name></expr>}<pos:position pos:line="4" pos:column="43"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">use_key_regexp<pos:position pos:line="7" pos:column="27"/></name></expr>)<pos:position pos:line="7" pos:column="28"/></condition><then pos:line="7" pos:column="28"> <block pos:line="7" pos:column="29">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">char<pos:position pos:line="8" pos:column="21"/></name> <modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type><name pos:line="8" pos:column="23">tl<pos:position pos:line="8" pos:column="25"/></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>

		<comment type="block" pos:line="10" pos:column="17">/*
		 * NEEDSWORK: this naive pattern lowercasing obviously does not
		 * work for more complex patterns like "^[^.]*Foo.*bar".
		 * Perhaps we should deprecate this altogether someday.
		 */</comment>

		<expr_stmt><expr><name pos:line="16" pos:column="17">key<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <call><name pos:line="16" pos:column="23">xstrdup<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">key_<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>
		<for pos:line="17" pos:column="17">for <control pos:line="17" pos:column="21">(<init><expr><name pos:line="17" pos:column="22">tl<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">=<pos:position pos:line="17" pos:column="26"/></operator> <name pos:line="17" pos:column="27">key<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">+<pos:position pos:line="17" pos:column="32"/></operator> <call><name pos:line="17" pos:column="33">strlen<pos:position pos:line="17" pos:column="39"/></name><argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">key<pos:position pos:line="17" pos:column="43"/></name></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></call> <operator pos:line="17" pos:column="45">-<pos:position pos:line="17" pos:column="46"/></operator> <literal type="number" pos:line="17" pos:column="47">1<pos:position pos:line="17" pos:column="48"/></literal></expr>;<pos:position pos:line="17" pos:column="49"/></init>
		     <condition><expr><name pos:line="18" pos:column="22">tl<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">&gt;=<pos:position pos:line="18" pos:column="30"/></operator> <name pos:line="18" pos:column="28">key<pos:position pos:line="18" pos:column="31"/></name> <operator pos:line="18" pos:column="32">&amp;&amp;<pos:position pos:line="18" pos:column="42"/></operator> <operator pos:line="18" pos:column="35">*<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="36">tl<pos:position pos:line="18" pos:column="38"/></name> <operator pos:line="18" pos:column="39">!=<pos:position pos:line="18" pos:column="41"/></operator> <literal type="char" pos:line="18" pos:column="42">'.'<pos:position pos:line="18" pos:column="45"/></literal></expr>;<pos:position pos:line="18" pos:column="46"/></condition>
		     <incr><expr><name pos:line="19" pos:column="22">tl<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">--<pos:position pos:line="19" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="19" pos:column="27"/></control>
			<block type="pseudo"><expr_stmt><expr><operator pos:line="20" pos:column="25">*<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">tl<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">=<pos:position pos:line="20" pos:column="30"/></operator> <call><name pos:line="20" pos:column="31">tolower<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">(<argument><expr><operator pos:line="20" pos:column="39">*<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="40">tl<pos:position pos:line="20" pos:column="42"/></name></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt></block></for>
		<for pos:line="21" pos:column="17">for <control pos:line="21" pos:column="21">(<init><expr><name pos:line="21" pos:column="22">tl<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="27">key<pos:position pos:line="21" pos:column="30"/></name></expr>;<pos:position pos:line="21" pos:column="31"/></init> <condition><expr><operator pos:line="21" pos:column="32">*<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="33">tl<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">&amp;&amp;<pos:position pos:line="21" pos:column="46"/></operator> <operator pos:line="21" pos:column="39">*<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="40">tl<pos:position pos:line="21" pos:column="42"/></name> <operator pos:line="21" pos:column="43">!=<pos:position pos:line="21" pos:column="45"/></operator> <literal type="char" pos:line="21" pos:column="46">'.'<pos:position pos:line="21" pos:column="49"/></literal></expr>;<pos:position pos:line="21" pos:column="50"/></condition> <incr><expr><name pos:line="21" pos:column="51">tl<pos:position pos:line="21" pos:column="53"/></name><operator pos:line="21" pos:column="53">++<pos:position pos:line="21" pos:column="55"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="56"/></control>
			<block type="pseudo"><expr_stmt><expr><operator pos:line="22" pos:column="25">*<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">tl<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">=<pos:position pos:line="22" pos:column="30"/></operator> <call><name pos:line="22" pos:column="31">tolower<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><operator pos:line="22" pos:column="39">*<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="40">tl<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt></block></for>

		<expr_stmt><expr><name pos:line="24" pos:column="17">key_regexp<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">=<pos:position pos:line="24" pos:column="29"/></operator> <operator pos:line="24" pos:column="30">(<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="31">regex_t<pos:position pos:line="24" pos:column="38"/></name><operator pos:line="24" pos:column="38">*<pos:position pos:line="24" pos:column="39"/></operator><operator pos:line="24" pos:column="39">)<pos:position pos:line="24" pos:column="40"/></operator><call><name pos:line="24" pos:column="40">xmalloc<pos:position pos:line="24" pos:column="47"/></name><argument_list pos:line="24" pos:column="47">(<argument><expr><sizeof pos:line="24" pos:column="48">sizeof<argument_list pos:line="24" pos:column="54">(<argument><expr><name pos:line="24" pos:column="55">regex_t<pos:position pos:line="24" pos:column="62"/></name></expr></argument>)<pos:position pos:line="24" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="65"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">regcomp<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name pos:line="25" pos:column="29">key_regexp<pos:position pos:line="25" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="41">key<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">REG_EXTENDED<pos:position pos:line="25" pos:column="58"/></name></expr></argument>)<pos:position pos:line="25" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="60"/></condition><then pos:line="25" pos:column="60"> <block pos:line="25" pos:column="61">{
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">error<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><literal type="string" pos:line="26" pos:column="31">"invalid key pattern: %s"<pos:position pos:line="26" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="58">key_<pos:position pos:line="26" pos:column="62"/></name></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">FREE_AND_NULL<pos:position pos:line="27" pos:column="38"/></name><argument_list pos:line="27" pos:column="38">(<argument><expr><name pos:line="27" pos:column="39">key_regexp<pos:position pos:line="27" pos:column="49"/></name></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name pos:line="28" pos:column="25">ret<pos:position pos:line="28" pos:column="28"/></name> <operator pos:line="28" pos:column="29">=<pos:position pos:line="28" pos:column="30"/></operator> <name pos:line="28" pos:column="31">CONFIG_INVALID_PATTERN<pos:position pos:line="28" pos:column="53"/></name></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt>
			<goto pos:line="29" pos:column="25">goto <name pos:line="29" pos:column="30">free_strings<pos:position pos:line="29" pos:column="42"/></name>;<pos:position pos:line="29" pos:column="43"/></goto>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
	}<pos:position pos:line="31" pos:column="10"/></block></then> <else pos:line="31" pos:column="11">else <block pos:line="31" pos:column="16">{
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><call><name pos:line="32" pos:column="21">git_config_parse_key<pos:position pos:line="32" pos:column="41"/></name><argument_list pos:line="32" pos:column="41">(<argument><expr><name pos:line="32" pos:column="42">key_<pos:position pos:line="32" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="48">&amp;<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="49">key<pos:position pos:line="32" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="54">NULL<pos:position pos:line="32" pos:column="58"/></name></expr></argument>)<pos:position pos:line="32" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="60"/></condition><then pos:line="32" pos:column="60"> <block pos:line="32" pos:column="61">{
			<expr_stmt><expr><name pos:line="33" pos:column="25">ret<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">=<pos:position pos:line="33" pos:column="30"/></operator> <name pos:line="33" pos:column="31">CONFIG_INVALID_KEY<pos:position pos:line="33" pos:column="49"/></name></expr>;<pos:position pos:line="33" pos:column="50"/></expr_stmt>
			<goto pos:line="34" pos:column="25">goto <name pos:line="34" pos:column="30">free_strings<pos:position pos:line="34" pos:column="42"/></name>;<pos:position pos:line="34" pos:column="43"/></goto>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
	}<pos:position pos:line="36" pos:column="10"/></block></else></if>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">regex_<pos:position pos:line="38" pos:column="19"/></name></expr>)<pos:position pos:line="38" pos:column="20"/></condition><then pos:line="38" pos:column="20"> <block pos:line="38" pos:column="21">{
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name><name pos:line="39" pos:column="21">regex_<pos:position pos:line="39" pos:column="27"/></name><index pos:line="39" pos:column="27">[<expr><literal type="number" pos:line="39" pos:column="28">0<pos:position pos:line="39" pos:column="29"/></literal></expr>]<pos:position pos:line="39" pos:column="30"/></index></name> <operator pos:line="39" pos:column="31">==<pos:position pos:line="39" pos:column="33"/></operator> <literal type="char" pos:line="39" pos:column="34">'!'<pos:position pos:line="39" pos:column="37"/></literal></expr>)<pos:position pos:line="39" pos:column="38"/></condition><then pos:line="39" pos:column="38"> <block pos:line="39" pos:column="39">{
			<expr_stmt><expr><name pos:line="40" pos:column="25">do_not_match<pos:position pos:line="40" pos:column="37"/></name> <operator pos:line="40" pos:column="38">=<pos:position pos:line="40" pos:column="39"/></operator> <literal type="number" pos:line="40" pos:column="40">1<pos:position pos:line="40" pos:column="41"/></literal></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="41" pos:column="25">regex_<pos:position pos:line="41" pos:column="31"/></name><operator pos:line="41" pos:column="31">++<pos:position pos:line="41" pos:column="33"/></operator></expr>;<pos:position pos:line="41" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="44" pos:column="17">regexp<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <operator pos:line="44" pos:column="26">(<pos:position pos:line="44" pos:column="27"/></operator><name pos:line="44" pos:column="27">regex_t<pos:position pos:line="44" pos:column="34"/></name><operator pos:line="44" pos:column="34">*<pos:position pos:line="44" pos:column="35"/></operator><operator pos:line="44" pos:column="35">)<pos:position pos:line="44" pos:column="36"/></operator><call><name pos:line="44" pos:column="36">xmalloc<pos:position pos:line="44" pos:column="43"/></name><argument_list pos:line="44" pos:column="43">(<argument><expr><sizeof pos:line="44" pos:column="44">sizeof<argument_list pos:line="44" pos:column="50">(<argument><expr><name pos:line="44" pos:column="51">regex_t<pos:position pos:line="44" pos:column="58"/></name></expr></argument>)<pos:position pos:line="44" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="61"/></expr_stmt>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><call><name pos:line="45" pos:column="21">regcomp<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><name pos:line="45" pos:column="29">regexp<pos:position pos:line="45" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="37">regex_<pos:position pos:line="45" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="45">REG_EXTENDED<pos:position pos:line="45" pos:column="57"/></name></expr></argument>)<pos:position pos:line="45" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="59"/></condition><then pos:line="45" pos:column="59"> <block pos:line="45" pos:column="60">{
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">error<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">(<argument><expr><literal type="string" pos:line="46" pos:column="31">"invalid pattern: %s"<pos:position pos:line="46" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="54">regex_<pos:position pos:line="46" pos:column="60"/></name></expr></argument>)<pos:position pos:line="46" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">FREE_AND_NULL<pos:position pos:line="47" pos:column="38"/></name><argument_list pos:line="47" pos:column="38">(<argument><expr><name pos:line="47" pos:column="39">regexp<pos:position pos:line="47" pos:column="45"/></name></expr></argument>)<pos:position pos:line="47" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="48" pos:column="25">ret<pos:position pos:line="48" pos:column="28"/></name> <operator pos:line="48" pos:column="29">=<pos:position pos:line="48" pos:column="30"/></operator> <name pos:line="48" pos:column="31">CONFIG_INVALID_PATTERN<pos:position pos:line="48" pos:column="53"/></name></expr>;<pos:position pos:line="48" pos:column="54"/></expr_stmt>
			<goto pos:line="49" pos:column="25">goto <name pos:line="49" pos:column="30">free_strings<pos:position pos:line="49" pos:column="42"/></name>;<pos:position pos:line="49" pos:column="43"/></goto>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="53" pos:column="9">config_with_options<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name pos:line="53" pos:column="29">collect_config<pos:position pos:line="53" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="45">&amp;<pos:position pos:line="53" pos:column="50"/></operator><name pos:line="53" pos:column="46">values<pos:position pos:line="53" pos:column="52"/></name></expr></argument>,
			    <argument><expr><operator pos:line="54" pos:column="29">&amp;<pos:position pos:line="54" pos:column="34"/></operator><name pos:line="54" pos:column="30">given_config_source<pos:position pos:line="54" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="51">&amp;<pos:position pos:line="54" pos:column="56"/></operator><name pos:line="54" pos:column="52">config_options<pos:position pos:line="54" pos:column="66"/></name></expr></argument>)<pos:position pos:line="54" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="68"/></expr_stmt>

	<expr_stmt><expr><name pos:line="56" pos:column="9">ret<pos:position pos:line="56" pos:column="12"/></name> <operator pos:line="56" pos:column="13">=<pos:position pos:line="56" pos:column="14"/></operator> <operator pos:line="56" pos:column="15">!<pos:position pos:line="56" pos:column="16"/></operator><name><name pos:line="56" pos:column="16">values<pos:position pos:line="56" pos:column="22"/></name><operator pos:line="56" pos:column="22">.<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="23">nr<pos:position pos:line="56" pos:column="25"/></name></name></expr>;<pos:position pos:line="56" pos:column="26"/></expr_stmt>

	<for pos:line="58" pos:column="9">for <control pos:line="58" pos:column="13">(<init><expr><name pos:line="58" pos:column="14">i<pos:position pos:line="58" pos:column="15"/></name> <operator pos:line="58" pos:column="16">=<pos:position pos:line="58" pos:column="17"/></operator> <literal type="number" pos:line="58" pos:column="18">0<pos:position pos:line="58" pos:column="19"/></literal></expr>;<pos:position pos:line="58" pos:column="20"/></init> <condition><expr><name pos:line="58" pos:column="21">i<pos:position pos:line="58" pos:column="22"/></name> <operator pos:line="58" pos:column="23">&lt;<pos:position pos:line="58" pos:column="27"/></operator> <name><name pos:line="58" pos:column="25">values<pos:position pos:line="58" pos:column="31"/></name><operator pos:line="58" pos:column="31">.<pos:position pos:line="58" pos:column="32"/></operator><name pos:line="58" pos:column="32">nr<pos:position pos:line="58" pos:column="34"/></name></name></expr>;<pos:position pos:line="58" pos:column="35"/></condition> <incr><expr><name pos:line="58" pos:column="36">i<pos:position pos:line="58" pos:column="37"/></name><operator pos:line="58" pos:column="37">++<pos:position pos:line="58" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="58" pos:column="40"/></control> <block pos:line="58" pos:column="41">{
		<decl_stmt><decl><type><name><name pos:line="59" pos:column="17">struct<pos:position pos:line="59" pos:column="23"/></name> <name pos:line="59" pos:column="24">strbuf<pos:position pos:line="59" pos:column="30"/></name></name> <modifier pos:line="59" pos:column="31">*<pos:position pos:line="59" pos:column="32"/></modifier></type><name pos:line="59" pos:column="32">buf<pos:position pos:line="59" pos:column="35"/></name> <init pos:line="59" pos:column="36">= <expr><name><name pos:line="59" pos:column="38">values<pos:position pos:line="59" pos:column="44"/></name><operator pos:line="59" pos:column="44">.<pos:position pos:line="59" pos:column="45"/></operator><name pos:line="59" pos:column="45">items<pos:position pos:line="59" pos:column="50"/></name></name> <operator pos:line="59" pos:column="51">+<pos:position pos:line="59" pos:column="52"/></operator> <name pos:line="59" pos:column="53">i<pos:position pos:line="59" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="59" pos:column="55"/></decl_stmt>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">do_all<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">||<pos:position pos:line="60" pos:column="30"/></operator> <name pos:line="60" pos:column="31">i<pos:position pos:line="60" pos:column="32"/></name> <operator pos:line="60" pos:column="33">==<pos:position pos:line="60" pos:column="35"/></operator> <name><name pos:line="60" pos:column="36">values<pos:position pos:line="60" pos:column="42"/></name><operator pos:line="60" pos:column="42">.<pos:position pos:line="60" pos:column="43"/></operator><name pos:line="60" pos:column="43">nr<pos:position pos:line="60" pos:column="45"/></name></name> <operator pos:line="60" pos:column="46">-<pos:position pos:line="60" pos:column="47"/></operator> <literal type="number" pos:line="60" pos:column="48">1<pos:position pos:line="60" pos:column="49"/></literal></expr>)<pos:position pos:line="60" pos:column="50"/></condition><then pos:line="60" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="25">fwrite<pos:position pos:line="61" pos:column="31"/></name><argument_list pos:line="61" pos:column="31">(<argument><expr><name><name pos:line="61" pos:column="32">buf<pos:position pos:line="61" pos:column="35"/></name><operator pos:line="61" pos:column="35">-&gt;<pos:position pos:line="61" pos:column="40"/></operator><name pos:line="61" pos:column="37">buf<pos:position pos:line="61" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="42">1<pos:position pos:line="61" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="45">buf<pos:position pos:line="61" pos:column="48"/></name><operator pos:line="61" pos:column="48">-&gt;<pos:position pos:line="61" pos:column="53"/></operator><name pos:line="61" pos:column="50">len<pos:position pos:line="61" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="55">stdout<pos:position pos:line="61" pos:column="61"/></name></expr></argument>)<pos:position pos:line="61" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="63"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">strbuf_release<pos:position pos:line="62" pos:column="31"/></name><argument_list pos:line="62" pos:column="31">(<argument><expr><name pos:line="62" pos:column="32">buf<pos:position pos:line="62" pos:column="35"/></name></expr></argument>)<pos:position pos:line="62" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="63" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="64" pos:column="9">free<pos:position pos:line="64" pos:column="13"/></name><argument_list pos:line="64" pos:column="13">(<argument><expr><name><name pos:line="64" pos:column="14">values<pos:position pos:line="64" pos:column="20"/></name><operator pos:line="64" pos:column="20">.<pos:position pos:line="64" pos:column="21"/></operator><name pos:line="64" pos:column="21">items<pos:position pos:line="64" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="28"/></expr_stmt>

<label><name pos:line="66" pos:column="1">free_strings<pos:position pos:line="66" pos:column="13"/></name>:<pos:position pos:line="66" pos:column="14"/></label>
	<expr_stmt><expr><call><name pos:line="67" pos:column="9">free<pos:position pos:line="67" pos:column="13"/></name><argument_list pos:line="67" pos:column="13">(<argument><expr><name pos:line="67" pos:column="14">key<pos:position pos:line="67" pos:column="17"/></name></expr></argument>)<pos:position pos:line="67" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="19"/></expr_stmt>
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">key_regexp<pos:position pos:line="68" pos:column="23"/></name></expr>)<pos:position pos:line="68" pos:column="24"/></condition><then pos:line="68" pos:column="24"> <block pos:line="68" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">regfree<pos:position pos:line="69" pos:column="24"/></name><argument_list pos:line="69" pos:column="24">(<argument><expr><name pos:line="69" pos:column="25">key_regexp<pos:position pos:line="69" pos:column="35"/></name></expr></argument>)<pos:position pos:line="69" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">free<pos:position pos:line="70" pos:column="21"/></name><argument_list pos:line="70" pos:column="21">(<argument><expr><name pos:line="70" pos:column="22">key_regexp<pos:position pos:line="70" pos:column="32"/></name></expr></argument>)<pos:position pos:line="70" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="71" pos:column="10"/></block></then></if>
	<if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><name pos:line="72" pos:column="13">regexp<pos:position pos:line="72" pos:column="19"/></name></expr>)<pos:position pos:line="72" pos:column="20"/></condition><then pos:line="72" pos:column="20"> <block pos:line="72" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">regfree<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><name pos:line="73" pos:column="25">regexp<pos:position pos:line="73" pos:column="31"/></name></expr></argument>)<pos:position pos:line="73" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">free<pos:position pos:line="74" pos:column="21"/></name><argument_list pos:line="74" pos:column="21">(<argument><expr><name pos:line="74" pos:column="22">regexp<pos:position pos:line="74" pos:column="28"/></name></expr></argument>)<pos:position pos:line="74" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="75" pos:column="10"/></block></then></if>

	<return pos:line="77" pos:column="9">return <expr><name pos:line="77" pos:column="16">ret<pos:position pos:line="77" pos:column="19"/></name></expr>;<pos:position pos:line="77" pos:column="20"/></return>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
