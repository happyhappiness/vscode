<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4879_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">entry<pos:position pos:line="1" pos:column="20"/></name></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type><name pos:line="1" pos:column="22">find_longest_common_sequence<pos:position pos:line="1" pos:column="50"/></name><parameter_list pos:line="1" pos:column="50">(<parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">hashmap<pos:position pos:line="1" pos:column="65"/></name></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">map<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">entry<pos:position pos:line="3" pos:column="21"/></name></name> <modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier><modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">sequence<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><call><name pos:line="3" pos:column="35">xdl_malloc<pos:position pos:line="3" pos:column="45"/></name><argument_list pos:line="3" pos:column="45">(<argument><expr><name><name pos:line="3" pos:column="46">map<pos:position pos:line="3" pos:column="49"/></name><operator pos:line="3" pos:column="49">-&gt;<pos:position pos:line="3" pos:column="54"/></operator><name pos:line="3" pos:column="51">nr<pos:position pos:line="3" pos:column="53"/></name></name> <operator pos:line="3" pos:column="54">*<pos:position pos:line="3" pos:column="55"/></operator> <sizeof pos:line="3" pos:column="56">sizeof<argument_list pos:line="3" pos:column="62">(<argument><expr pos:line="3" pos:column="63">struct <name pos:line="3" pos:column="70">entry<pos:position pos:line="3" pos:column="75"/></name> <operator pos:line="3" pos:column="76">*<pos:position pos:line="3" pos:column="77"/></operator></expr></argument>)<pos:position pos:line="3" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="3" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="80"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">longest<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><literal type="number" pos:line="4" pos:column="23">0<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="26">i<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">entry<pos:position pos:line="5" pos:column="21"/></name></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">entry<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>

	<for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init><expr><name pos:line="7" pos:column="14">entry<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <name><name pos:line="7" pos:column="22">map<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">-&gt;<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="27">first<pos:position pos:line="7" pos:column="32"/></name></name></expr>;<pos:position pos:line="7" pos:column="33"/></init> <condition><expr><name pos:line="7" pos:column="34">entry<pos:position pos:line="7" pos:column="39"/></name></expr>;<pos:position pos:line="7" pos:column="40"/></condition> <incr><expr><name pos:line="7" pos:column="41">entry<pos:position pos:line="7" pos:column="46"/></name> <operator pos:line="7" pos:column="47">=<pos:position pos:line="7" pos:column="48"/></operator> <name><name pos:line="7" pos:column="49">entry<pos:position pos:line="7" pos:column="54"/></name><operator pos:line="7" pos:column="54">-&gt;<pos:position pos:line="7" pos:column="59"/></operator><name pos:line="7" pos:column="56">next<pos:position pos:line="7" pos:column="60"/></name></name></expr></incr>)<pos:position pos:line="7" pos:column="61"/></control> <block pos:line="7" pos:column="62">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><operator pos:line="8" pos:column="21">!<pos:position pos:line="8" pos:column="22"/></operator><name><name pos:line="8" pos:column="22">entry<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">-&gt;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="29">line2<pos:position pos:line="8" pos:column="34"/></name></name> <operator pos:line="8" pos:column="35">||<pos:position pos:line="8" pos:column="37"/></operator> <name><name pos:line="8" pos:column="38">entry<pos:position pos:line="8" pos:column="43"/></name><operator pos:line="8" pos:column="43">-&gt;<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="45">line2<pos:position pos:line="8" pos:column="50"/></name></name> <operator pos:line="8" pos:column="51">==<pos:position pos:line="8" pos:column="53"/></operator> <name pos:line="8" pos:column="54">NON_UNIQUE<pos:position pos:line="8" pos:column="64"/></name></expr>)<pos:position pos:line="8" pos:column="65"/></condition><then pos:line="8" pos:column="65">
			<block type="pseudo"><continue pos:line="9" pos:column="25">continue;<pos:position pos:line="9" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="10" pos:column="17">i<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">binary_search<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><name pos:line="10" pos:column="35">sequence<pos:position pos:line="10" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="45">longest<pos:position pos:line="10" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="54">entry<pos:position pos:line="10" pos:column="59"/></name></expr></argument>)<pos:position pos:line="10" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="11" pos:column="17">entry<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">-&gt;<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="24">previous<pos:position pos:line="11" pos:column="32"/></name></name> <operator pos:line="11" pos:column="33">=<pos:position pos:line="11" pos:column="34"/></operator> <ternary><condition><expr><name pos:line="11" pos:column="35">i<pos:position pos:line="11" pos:column="36"/></name> <operator pos:line="11" pos:column="37">&lt;<pos:position pos:line="11" pos:column="41"/></operator> <literal type="number" pos:line="11" pos:column="39">0<pos:position pos:line="11" pos:column="40"/></literal></expr> ?<pos:position pos:line="11" pos:column="42"/></condition><then pos:line="11" pos:column="42"> <expr><name pos:line="11" pos:column="43">NULL<pos:position pos:line="11" pos:column="47"/></name></expr> <pos:position pos:line="11" pos:column="48"/></then><else pos:line="11" pos:column="48">: <expr><name><name pos:line="11" pos:column="50">sequence<pos:position pos:line="11" pos:column="58"/></name><index pos:line="11" pos:column="58">[<expr><name pos:line="11" pos:column="59">i<pos:position pos:line="11" pos:column="60"/></name></expr>]<pos:position pos:line="11" pos:column="61"/></index></name></expr></else></ternary></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="12" pos:column="17">sequence<pos:position pos:line="12" pos:column="25"/></name><index pos:line="12" pos:column="25">[<expr><operator pos:line="12" pos:column="26">++<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="28">i<pos:position pos:line="12" pos:column="29"/></name></expr>]<pos:position pos:line="12" pos:column="30"/></index></name> <operator pos:line="12" pos:column="31">=<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="33">entry<pos:position pos:line="12" pos:column="38"/></name></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">i<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">==<pos:position pos:line="13" pos:column="25"/></operator> <name pos:line="13" pos:column="26">longest<pos:position pos:line="13" pos:column="33"/></name></expr>)<pos:position pos:line="13" pos:column="34"/></condition><then pos:line="13" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="25">longest<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">++<pos:position pos:line="14" pos:column="34"/></operator></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt></block></then></if>
	}<pos:position pos:line="15" pos:column="10"/></block></for>

	<comment type="block" pos:line="17" pos:column="9">/* No common unique lines were found */</comment>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">longest<pos:position pos:line="18" pos:column="21"/></name></expr>)<pos:position pos:line="18" pos:column="22"/></condition><then pos:line="18" pos:column="22"> <block pos:line="18" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">xdl_free<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">sequence<pos:position pos:line="19" pos:column="34"/></name></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>
		<return pos:line="20" pos:column="17">return <expr><name pos:line="20" pos:column="24">NULL<pos:position pos:line="20" pos:column="28"/></name></expr>;<pos:position pos:line="20" pos:column="29"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="23" pos:column="9">/* Iterate starting at the last element, adjusting the "next" members */</comment>
	<expr_stmt><expr><name pos:line="24" pos:column="9">entry<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <name><name pos:line="24" pos:column="17">sequence<pos:position pos:line="24" pos:column="25"/></name><index pos:line="24" pos:column="25">[<expr><name pos:line="24" pos:column="26">longest<pos:position pos:line="24" pos:column="33"/></name> <operator pos:line="24" pos:column="34">-<pos:position pos:line="24" pos:column="35"/></operator> <literal type="number" pos:line="24" pos:column="36">1<pos:position pos:line="24" pos:column="37"/></literal></expr>]<pos:position pos:line="24" pos:column="38"/></index></name></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="25" pos:column="9">entry<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">-&gt;<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="16">next<pos:position pos:line="25" pos:column="20"/></name></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <name pos:line="25" pos:column="23">NULL<pos:position pos:line="25" pos:column="27"/></name></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
	<while pos:line="26" pos:column="9">while <condition pos:line="26" pos:column="15">(<expr><name><name pos:line="26" pos:column="16">entry<pos:position pos:line="26" pos:column="21"/></name><operator pos:line="26" pos:column="21">-&gt;<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="23">previous<pos:position pos:line="26" pos:column="31"/></name></name></expr>)<pos:position pos:line="26" pos:column="32"/></condition> <block pos:line="26" pos:column="33">{
		<expr_stmt><expr><name><name pos:line="27" pos:column="17">entry<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">-&gt;<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="24">previous<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">-&gt;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="34">next<pos:position pos:line="27" pos:column="38"/></name></name> <operator pos:line="27" pos:column="39">=<pos:position pos:line="27" pos:column="40"/></operator> <name pos:line="27" pos:column="41">entry<pos:position pos:line="27" pos:column="46"/></name></expr>;<pos:position pos:line="27" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name pos:line="28" pos:column="17">entry<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">=<pos:position pos:line="28" pos:column="24"/></operator> <name><name pos:line="28" pos:column="25">entry<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">-&gt;<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="32">previous<pos:position pos:line="28" pos:column="40"/></name></name></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">xdl_free<pos:position pos:line="30" pos:column="17"/></name><argument_list pos:line="30" pos:column="17">(<argument><expr><name pos:line="30" pos:column="18">sequence<pos:position pos:line="30" pos:column="26"/></name></expr></argument>)<pos:position pos:line="30" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="28"/></expr_stmt>
	<return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">entry<pos:position pos:line="31" pos:column="21"/></name></expr>;<pos:position pos:line="31" pos:column="22"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
