<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6103_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">create_output_file<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">output_file<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">output_fd<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><call><name pos:line="3" pos:column="25">open<pos:position pos:line="3" pos:column="29"/></name><argument_list pos:line="3" pos:column="29">(<argument><expr><name pos:line="3" pos:column="30">output_file<pos:position pos:line="3" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="43">O_CREAT<pos:position pos:line="3" pos:column="50"/></name> <operator pos:line="3" pos:column="51">|<pos:position pos:line="3" pos:column="52"/></operator> <name pos:line="3" pos:column="53">O_WRONLY<pos:position pos:line="3" pos:column="61"/></name> <operator pos:line="3" pos:column="62">|<pos:position pos:line="3" pos:column="63"/></operator> <name pos:line="3" pos:column="64">O_TRUNC<pos:position pos:line="3" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="73">0666<pos:position pos:line="3" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="79"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name pos:line="4" pos:column="13">output_fd<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;<pos:position pos:line="4" pos:column="27"/></operator> <literal type="number" pos:line="4" pos:column="25">0<pos:position pos:line="4" pos:column="26"/></literal></expr>)<pos:position pos:line="4" pos:column="27"/></condition><then pos:line="4" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="5" pos:column="17">die_errno<pos:position pos:line="5" pos:column="26"/></name><argument_list pos:line="5" pos:column="26">(<argument><expr><call><name pos:line="5" pos:column="27">_<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><literal type="string" pos:line="5" pos:column="29">"could not create archive file '%s'"<pos:position pos:line="5" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="5" pos:column="68">output_file<pos:position pos:line="5" pos:column="79"/></name></expr></argument>)<pos:position pos:line="5" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="81"/></expr_stmt></block></then></if>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">output_fd<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">!=<pos:position pos:line="6" pos:column="25"/></operator> <literal type="number" pos:line="6" pos:column="26">1<pos:position pos:line="6" pos:column="27"/></literal></expr>)<pos:position pos:line="6" pos:column="28"/></condition><then pos:line="6" pos:column="28"> <block pos:line="6" pos:column="29">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><call><name pos:line="7" pos:column="21">dup2<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><name pos:line="7" pos:column="26">output_fd<pos:position pos:line="7" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="37">1<pos:position pos:line="7" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call> <operator pos:line="7" pos:column="40">&lt;<pos:position pos:line="7" pos:column="44"/></operator> <literal type="number" pos:line="7" pos:column="42">0<pos:position pos:line="7" pos:column="43"/></literal></expr>)<pos:position pos:line="7" pos:column="44"/></condition><then pos:line="7" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="25">die_errno<pos:position pos:line="8" pos:column="34"/></name><argument_list pos:line="8" pos:column="34">(<argument><expr><call><name pos:line="8" pos:column="35">_<pos:position pos:line="8" pos:column="36"/></name><argument_list pos:line="8" pos:column="36">(<argument><expr><literal type="string" pos:line="8" pos:column="37">"could not redirect output"<pos:position pos:line="8" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="67"/></expr_stmt></block></then>
		<else pos:line="9" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">close<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">output_fd<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt></block></else></if>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
