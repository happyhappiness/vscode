<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2318_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">read_loose_object<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">path<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>,
		      <parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">unsigned<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">expected_sha1<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>,
		      <parameter><decl><type><name><name pos:line="3" pos:column="23">enum<pos:position pos:line="3" pos:column="27"/></name> <name pos:line="3" pos:column="28">object_type<pos:position pos:line="3" pos:column="39"/></name></name> <modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier></type><name pos:line="3" pos:column="41">type<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>,
		      <parameter><decl><type><name pos:line="4" pos:column="23">unsigned<pos:position pos:line="4" pos:column="31"/></name> <name pos:line="4" pos:column="32">long<pos:position pos:line="4" pos:column="36"/></name> <modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">size<pos:position pos:line="4" pos:column="42"/></name></decl></parameter>,
		      <parameter><decl><type><name pos:line="5" pos:column="23">void<pos:position pos:line="5" pos:column="27"/></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier><modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">contents<pos:position pos:line="5" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="39"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">ret<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><operator pos:line="7" pos:column="19">-<pos:position pos:line="7" pos:column="20"/></operator><literal type="number" pos:line="7" pos:column="20">1<pos:position pos:line="7" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">void<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">map<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><name pos:line="8" pos:column="21">NULL<pos:position pos:line="8" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name> <name pos:line="9" pos:column="18">long<pos:position pos:line="9" pos:column="22"/></name></type> <name pos:line="9" pos:column="23">mapsize<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">git_zstream<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">stream<pos:position pos:line="10" pos:column="27"/></name></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name></type> <name><name pos:line="11" pos:column="14">hdr<pos:position pos:line="11" pos:column="17"/></name><index pos:line="11" pos:column="17">[<expr><literal type="number" pos:line="11" pos:column="18">32<pos:position pos:line="11" pos:column="20"/></literal></expr>]<pos:position pos:line="11" pos:column="21"/></index></name></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><operator pos:line="13" pos:column="9">*<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">contents<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <name pos:line="13" pos:column="21">NULL<pos:position pos:line="13" pos:column="25"/></name></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><name pos:line="15" pos:column="9">map<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <call><name pos:line="15" pos:column="15">map_sha1_file_1<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">path<pos:position pos:line="15" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="37">NULL<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="43">&amp;<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="44">mapsize<pos:position pos:line="15" pos:column="51"/></name></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="53"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">map<pos:position pos:line="16" pos:column="17"/></name></expr>)<pos:position pos:line="16" pos:column="18"/></condition><then pos:line="16" pos:column="18"> <block pos:line="16" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">error_errno<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><literal type="string" pos:line="17" pos:column="29">"unable to mmap %s"<pos:position pos:line="17" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="50">path<pos:position pos:line="17" pos:column="54"/></name></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="56"/></expr_stmt>
		<goto pos:line="18" pos:column="17">goto <name pos:line="18" pos:column="22">out<pos:position pos:line="18" pos:column="25"/></name>;<pos:position pos:line="18" pos:column="26"/></goto>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">unpack_sha1_header<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><operator pos:line="21" pos:column="32">&amp;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="33">stream<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="41">map<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="46">mapsize<pos:position pos:line="21" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="55">hdr<pos:position pos:line="21" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="60">sizeof<argument_list pos:line="21" pos:column="66">(<argument><expr><name pos:line="21" pos:column="67">hdr<pos:position pos:line="21" pos:column="70"/></name></expr></argument>)<pos:position pos:line="21" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></call> <operator pos:line="21" pos:column="73">&lt;<pos:position pos:line="21" pos:column="77"/></operator> <literal type="number" pos:line="21" pos:column="75">0<pos:position pos:line="21" pos:column="76"/></literal></expr>)<pos:position pos:line="21" pos:column="77"/></condition><then pos:line="21" pos:column="77"> <block pos:line="21" pos:column="78">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">error<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><literal type="string" pos:line="22" pos:column="23">"unable to unpack header of %s"<pos:position pos:line="22" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="56">path<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="62"/></expr_stmt>
		<goto pos:line="23" pos:column="17">goto <name pos:line="23" pos:column="22">out<pos:position pos:line="23" pos:column="25"/></name>;<pos:position pos:line="23" pos:column="26"/></goto>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<expr_stmt><expr><operator pos:line="26" pos:column="9">*<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">type<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <call><name pos:line="26" pos:column="17">parse_sha1_header<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">hdr<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="40">size<pos:position pos:line="26" pos:column="44"/></name></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">*<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">type<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">&lt;<pos:position pos:line="27" pos:column="23"/></operator> <literal type="number" pos:line="27" pos:column="21">0<pos:position pos:line="27" pos:column="22"/></literal></expr>)<pos:position pos:line="27" pos:column="23"/></condition><then pos:line="27" pos:column="23"> <block pos:line="27" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">error<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><literal type="string" pos:line="28" pos:column="23">"unable to parse header of %s"<pos:position pos:line="28" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="55">path<pos:position pos:line="28" pos:column="59"/></name></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">git_inflate_end<pos:position pos:line="29" pos:column="32"/></name><argument_list pos:line="29" pos:column="32">(<argument><expr><operator pos:line="29" pos:column="33">&amp;<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="34">stream<pos:position pos:line="29" pos:column="40"/></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt>
		<goto pos:line="30" pos:column="17">goto <name pos:line="30" pos:column="22">out<pos:position pos:line="30" pos:column="25"/></name>;<pos:position pos:line="30" pos:column="26"/></goto>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>

	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">*<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">type<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">==<pos:position pos:line="33" pos:column="21"/></operator> <name pos:line="33" pos:column="22">OBJ_BLOB<pos:position pos:line="33" pos:column="30"/></name></expr>)<pos:position pos:line="33" pos:column="31"/></condition><then pos:line="33" pos:column="31"> <block pos:line="33" pos:column="32">{
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">check_stream_sha1<pos:position pos:line="34" pos:column="38"/></name><argument_list pos:line="34" pos:column="38">(<argument><expr><operator pos:line="34" pos:column="39">&amp;<pos:position pos:line="34" pos:column="44"/></operator><name pos:line="34" pos:column="40">stream<pos:position pos:line="34" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="48">hdr<pos:position pos:line="34" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="53">*<pos:position pos:line="34" pos:column="54"/></operator><name pos:line="34" pos:column="54">size<pos:position pos:line="34" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="60">path<pos:position pos:line="34" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="66">expected_sha1<pos:position pos:line="34" pos:column="79"/></name></expr></argument>)<pos:position pos:line="34" pos:column="80"/></argument_list></call> <operator pos:line="34" pos:column="81">&lt;<pos:position pos:line="34" pos:column="85"/></operator> <literal type="number" pos:line="34" pos:column="83">0<pos:position pos:line="34" pos:column="84"/></literal></expr>)<pos:position pos:line="34" pos:column="85"/></condition><then pos:line="34" pos:column="85">
			<block type="pseudo"><goto pos:line="35" pos:column="25">goto <name pos:line="35" pos:column="30">out<pos:position pos:line="35" pos:column="33"/></name>;<pos:position pos:line="35" pos:column="34"/></goto></block></then></if>
	}<pos:position pos:line="36" pos:column="10"/></block></then> <else pos:line="36" pos:column="11">else <block pos:line="36" pos:column="16">{
		<expr_stmt><expr><operator pos:line="37" pos:column="17">*<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="18">contents<pos:position pos:line="37" pos:column="26"/></name> <operator pos:line="37" pos:column="27">=<pos:position pos:line="37" pos:column="28"/></operator> <call><name pos:line="37" pos:column="29">unpack_sha1_rest<pos:position pos:line="37" pos:column="45"/></name><argument_list pos:line="37" pos:column="45">(<argument><expr><operator pos:line="37" pos:column="46">&amp;<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="47">stream<pos:position pos:line="37" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="55">hdr<pos:position pos:line="37" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="60">*<pos:position pos:line="37" pos:column="61"/></operator><name pos:line="37" pos:column="61">size<pos:position pos:line="37" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="67">expected_sha1<pos:position pos:line="37" pos:column="80"/></name></expr></argument>)<pos:position pos:line="37" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="82"/></expr_stmt>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><operator pos:line="38" pos:column="21">!<pos:position pos:line="38" pos:column="22"/></operator><operator pos:line="38" pos:column="22">*<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">contents<pos:position pos:line="38" pos:column="31"/></name></expr>)<pos:position pos:line="38" pos:column="32"/></condition><then pos:line="38" pos:column="32"> <block pos:line="38" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">error<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><literal type="string" pos:line="39" pos:column="31">"unable to unpack contents of %s"<pos:position pos:line="39" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="66">path<pos:position pos:line="39" pos:column="70"/></name></expr></argument>)<pos:position pos:line="39" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">git_inflate_end<pos:position pos:line="40" pos:column="40"/></name><argument_list pos:line="40" pos:column="40">(<argument><expr><operator pos:line="40" pos:column="41">&amp;<pos:position pos:line="40" pos:column="46"/></operator><name pos:line="40" pos:column="42">stream<pos:position pos:line="40" pos:column="48"/></name></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="50"/></expr_stmt>
			<goto pos:line="41" pos:column="25">goto <name pos:line="41" pos:column="30">out<pos:position pos:line="41" pos:column="33"/></name>;<pos:position pos:line="41" pos:column="34"/></goto>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><call><name pos:line="43" pos:column="21">check_sha1_signature<pos:position pos:line="43" pos:column="41"/></name><argument_list pos:line="43" pos:column="41">(<argument><expr><name pos:line="43" pos:column="42">expected_sha1<pos:position pos:line="43" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="57">*<pos:position pos:line="43" pos:column="58"/></operator><name pos:line="43" pos:column="58">contents<pos:position pos:line="43" pos:column="66"/></name></expr></argument>,
					 <argument><expr><operator pos:line="44" pos:column="42">*<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="43">size<pos:position pos:line="44" pos:column="47"/></name></expr></argument>, <argument><expr><name><typename pos:line="44" pos:column="49">typename<pos:position pos:line="44" pos:column="57"/></typename></name><operator pos:line="44" pos:column="57">(<pos:position pos:line="44" pos:column="58"/></operator><operator pos:line="44" pos:column="58">*<pos:position pos:line="44" pos:column="59"/></operator><name pos:line="44" pos:column="59">type<pos:position pos:line="44" pos:column="63"/></name><operator pos:line="44" pos:column="63">)<pos:position pos:line="44" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="44" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="66"/></condition><then pos:line="44" pos:column="66"> <block pos:line="44" pos:column="67">{
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">error<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><literal type="string" pos:line="45" pos:column="31">"sha1 mismatch for %s (expected %s)"<pos:position pos:line="45" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="69">path<pos:position pos:line="45" pos:column="73"/></name></expr></argument>,
			      <argument><expr><call><name pos:line="46" pos:column="31">sha1_to_hex<pos:position pos:line="46" pos:column="42"/></name><argument_list pos:line="46" pos:column="42">(<argument><expr><name pos:line="46" pos:column="43">expected_sha1<pos:position pos:line="46" pos:column="56"/></name></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">free<pos:position pos:line="47" pos:column="29"/></name><argument_list pos:line="47" pos:column="29">(<argument><expr><operator pos:line="47" pos:column="30">*<pos:position pos:line="47" pos:column="31"/></operator><name pos:line="47" pos:column="31">contents<pos:position pos:line="47" pos:column="39"/></name></expr></argument>)<pos:position pos:line="47" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="41"/></expr_stmt>
			<goto pos:line="48" pos:column="25">goto <name pos:line="48" pos:column="30">out<pos:position pos:line="48" pos:column="33"/></name>;<pos:position pos:line="48" pos:column="34"/></goto>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if>
	}<pos:position pos:line="50" pos:column="10"/></block></else></if>

	<expr_stmt><expr><name pos:line="52" pos:column="9">ret<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">=<pos:position pos:line="52" pos:column="14"/></operator> <literal type="number" pos:line="52" pos:column="15">0<pos:position pos:line="52" pos:column="16"/></literal></expr>;<pos:position pos:line="52" pos:column="17"/></expr_stmt> <comment type="block" pos:line="52" pos:column="18">/* everything checks out */</comment>

<label><name pos:line="54" pos:column="1">out<pos:position pos:line="54" pos:column="4"/></name>:<pos:position pos:line="54" pos:column="5"/></label>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name pos:line="55" pos:column="13">map<pos:position pos:line="55" pos:column="16"/></name></expr>)<pos:position pos:line="55" pos:column="17"/></condition><then pos:line="55" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="17">munmap<pos:position pos:line="56" pos:column="23"/></name><argument_list pos:line="56" pos:column="23">(<argument><expr><name pos:line="56" pos:column="24">map<pos:position pos:line="56" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="29">mapsize<pos:position pos:line="56" pos:column="36"/></name></expr></argument>)<pos:position pos:line="56" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="38"/></expr_stmt></block></then></if>
	<return pos:line="57" pos:column="9">return <expr><name pos:line="57" pos:column="16">ret<pos:position pos:line="57" pos:column="19"/></name></expr>;<pos:position pos:line="57" pos:column="20"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
