<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3415_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">write_pseudoref<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">pseudoref<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="51">const<pos:position pos:line="1" pos:column="56"/></specifier> <name pos:line="1" pos:column="57">unsigned<pos:position pos:line="1" pos:column="65"/></name> <name pos:line="1" pos:column="66">char<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">sha1<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
			   <parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">unsigned<pos:position pos:line="2" pos:column="42"/></name> <name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">old_sha1<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="59">struct<pos:position pos:line="2" pos:column="65"/></name> <name pos:line="2" pos:column="66">strbuf<pos:position pos:line="2" pos:column="72"/></name></name> <modifier pos:line="2" pos:column="73">*<pos:position pos:line="2" pos:column="74"/></modifier></type><name pos:line="2" pos:column="74">err<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">filename<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">fd<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">static<pos:position pos:line="6" pos:column="15"/></specifier> <type><name><name pos:line="6" pos:column="16">struct<pos:position pos:line="6" pos:column="22"/></name> <name pos:line="6" pos:column="23">lock_file<pos:position pos:line="6" pos:column="32"/></name></name></type> <name pos:line="6" pos:column="33">lock<pos:position pos:line="6" pos:column="37"/></name></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">buf<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><name pos:line="7" pos:column="29">STRBUF_INIT<pos:position pos:line="7" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">ret<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><operator pos:line="8" pos:column="19">-<pos:position pos:line="8" pos:column="20"/></operator><literal type="number" pos:line="8" pos:column="20">1<pos:position pos:line="8" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">strbuf_addf<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><operator pos:line="10" pos:column="21">&amp;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="22">buf<pos:position pos:line="10" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="27">"%s\n"<pos:position pos:line="10" pos:column="33"/></literal></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="35">sha1_to_hex<pos:position pos:line="10" pos:column="46"/></name><argument_list pos:line="10" pos:column="46">(<argument><expr><name pos:line="10" pos:column="47">sha1<pos:position pos:line="10" pos:column="51"/></name></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>

	<expr_stmt><expr><name pos:line="12" pos:column="9">filename<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <call><name pos:line="12" pos:column="20">git_path<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><literal type="string" pos:line="12" pos:column="29">"%s"<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="35">pseudoref<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name pos:line="13" pos:column="9">fd<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <call><name pos:line="13" pos:column="14">hold_lock_file_for_update<pos:position pos:line="13" pos:column="39"/></name><argument_list pos:line="13" pos:column="39">(<argument><expr><operator pos:line="13" pos:column="40">&amp;<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="41">lock<pos:position pos:line="13" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="47">filename<pos:position pos:line="13" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="57">LOCK_DIE_ON_ERROR<pos:position pos:line="13" pos:column="74"/></name></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="76"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">fd<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">&lt;<pos:position pos:line="14" pos:column="20"/></operator> <literal type="number" pos:line="14" pos:column="18">0<pos:position pos:line="14" pos:column="19"/></literal></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20"> <block pos:line="14" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">strbuf_addf<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">err<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="34">"could not open '%s' for writing: %s"<pos:position pos:line="15" pos:column="71"/></literal></expr></argument>,
			    <argument><expr><name pos:line="16" pos:column="29">filename<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="39">strerror<pos:position pos:line="16" pos:column="47"/></name><argument_list pos:line="16" pos:column="47">(<argument><expr><name pos:line="16" pos:column="48">errno<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="56"/></expr_stmt>
		<return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">-<pos:position pos:line="17" pos:column="25"/></operator><literal type="number" pos:line="17" pos:column="25">1<pos:position pos:line="17" pos:column="26"/></literal></expr>;<pos:position pos:line="17" pos:column="27"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">old_sha1<pos:position pos:line="20" pos:column="21"/></name></expr>)<pos:position pos:line="20" pos:column="22"/></condition><then pos:line="20" pos:column="22"> <block pos:line="20" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">unsigned<pos:position pos:line="21" pos:column="25"/></name> <name pos:line="21" pos:column="26">char<pos:position pos:line="21" pos:column="30"/></name></type> <name><name pos:line="21" pos:column="31">actual_old_sha1<pos:position pos:line="21" pos:column="46"/></name><index pos:line="21" pos:column="46">[<expr><literal type="number" pos:line="21" pos:column="47">20<pos:position pos:line="21" pos:column="49"/></literal></expr>]<pos:position pos:line="21" pos:column="50"/></index></name></decl>;<pos:position pos:line="21" pos:column="51"/></decl_stmt>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><call><name pos:line="23" pos:column="21">read_ref<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">pseudoref<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="41">actual_old_sha1<pos:position pos:line="23" pos:column="56"/></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="58"/></condition><then pos:line="23" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="25">die<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><literal type="string" pos:line="24" pos:column="29">"could not read ref '%s'"<pos:position pos:line="24" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="56">pseudoref<pos:position pos:line="24" pos:column="65"/></name></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="67"/></expr_stmt></block></then></if>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">hashcmp<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name pos:line="25" pos:column="29">actual_old_sha1<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">old_sha1<pos:position pos:line="25" pos:column="54"/></name></expr></argument>)<pos:position pos:line="25" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="56"/></condition><then pos:line="25" pos:column="56"> <block pos:line="25" pos:column="57">{
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">strbuf_addf<pos:position pos:line="26" pos:column="36"/></name><argument_list pos:line="26" pos:column="36">(<argument><expr><name pos:line="26" pos:column="37">err<pos:position pos:line="26" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="42">"unexpected sha1 when writing '%s'"<pos:position pos:line="26" pos:column="77"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="79">pseudoref<pos:position pos:line="26" pos:column="88"/></name></expr></argument>)<pos:position pos:line="26" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="90"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">rollback_lock_file<pos:position pos:line="27" pos:column="43"/></name><argument_list pos:line="27" pos:column="43">(<argument><expr><operator pos:line="27" pos:column="44">&amp;<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="45">lock<pos:position pos:line="27" pos:column="49"/></name></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt>
			<goto pos:line="28" pos:column="25">goto <name pos:line="28" pos:column="30">done<pos:position pos:line="28" pos:column="34"/></name>;<pos:position pos:line="28" pos:column="35"/></goto>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">write_in_full<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">(<argument><expr><name pos:line="32" pos:column="27">fd<pos:position pos:line="32" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="31">buf<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">.<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="35">buf<pos:position pos:line="32" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="40">buf<pos:position pos:line="32" pos:column="43"/></name><operator pos:line="32" pos:column="43">.<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="44">len<pos:position pos:line="32" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call> <operator pos:line="32" pos:column="49">!=<pos:position pos:line="32" pos:column="51"/></operator> <name><name pos:line="32" pos:column="52">buf<pos:position pos:line="32" pos:column="55"/></name><operator pos:line="32" pos:column="55">.<pos:position pos:line="32" pos:column="56"/></operator><name pos:line="32" pos:column="56">len<pos:position pos:line="32" pos:column="59"/></name></name></expr>)<pos:position pos:line="32" pos:column="60"/></condition><then pos:line="32" pos:column="60"> <block pos:line="32" pos:column="61">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">strbuf_addf<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name pos:line="33" pos:column="29">err<pos:position pos:line="33" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="34">"could not write to '%s'"<pos:position pos:line="33" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="61">filename<pos:position pos:line="33" pos:column="69"/></name></expr></argument>)<pos:position pos:line="33" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="71"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">rollback_lock_file<pos:position pos:line="34" pos:column="35"/></name><argument_list pos:line="34" pos:column="35">(<argument><expr><operator pos:line="34" pos:column="36">&amp;<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="37">lock<pos:position pos:line="34" pos:column="41"/></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
		<goto pos:line="35" pos:column="17">goto <name pos:line="35" pos:column="22">done<pos:position pos:line="35" pos:column="26"/></name>;<pos:position pos:line="35" pos:column="27"/></goto>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="38" pos:column="9">commit_lock_file<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><operator pos:line="38" pos:column="26">&amp;<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="27">lock<pos:position pos:line="38" pos:column="31"/></name></expr></argument>)<pos:position pos:line="38" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="39" pos:column="9">ret<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></operator> <literal type="number" pos:line="39" pos:column="15">0<pos:position pos:line="39" pos:column="16"/></literal></expr>;<pos:position pos:line="39" pos:column="17"/></expr_stmt>
<label><name pos:line="40" pos:column="1">done<pos:position pos:line="40" pos:column="5"/></name>:<pos:position pos:line="40" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">strbuf_release<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><operator pos:line="41" pos:column="24">&amp;<pos:position pos:line="41" pos:column="29"/></operator><name pos:line="41" pos:column="25">buf<pos:position pos:line="41" pos:column="28"/></name></expr></argument>)<pos:position pos:line="41" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="30"/></expr_stmt>
	<return pos:line="42" pos:column="9">return <expr><name pos:line="42" pos:column="16">ret<pos:position pos:line="42" pos:column="19"/></name></expr>;<pos:position pos:line="42" pos:column="20"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
