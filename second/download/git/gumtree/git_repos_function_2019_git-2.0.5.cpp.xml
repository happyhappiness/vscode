<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2019_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">last_path_elm<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">p<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/* r starts pointing to null at the end of the string */</comment>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">r<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><call><name pos:line="4" pos:column="19">strchr<pos:position pos:line="4" pos:column="25"/></name><argument_list pos:line="4" pos:column="25">(<argument><expr><name pos:line="4" pos:column="26">p<pos:position pos:line="4" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="4" pos:column="29">'\0'<pos:position pos:line="4" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">r<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">==<pos:position pos:line="6" pos:column="17"/></operator> <name pos:line="6" pos:column="18">p<pos:position pos:line="6" pos:column="19"/></name></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><name pos:line="7" pos:column="24">p<pos:position pos:line="7" pos:column="25"/></name></expr>;<pos:position pos:line="7" pos:column="26"/></return></block></then></if> <comment type="block" pos:line="7" pos:column="27">/* just return empty string */</comment>

	<expr_stmt><expr><name pos:line="9" pos:column="9">r<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">--<pos:position pos:line="9" pos:column="12"/></operator></expr>;<pos:position pos:line="9" pos:column="13"/></expr_stmt> <comment type="block" pos:line="9" pos:column="14">/* back up to last non-null character */</comment>

	<comment type="block" pos:line="11" pos:column="9">/* back up past trailing slashes, if any */</comment>
	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><name pos:line="12" pos:column="16">r<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">&gt;<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="20">p<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">&amp;&amp;<pos:position pos:line="12" pos:column="32"/></operator> <operator pos:line="12" pos:column="25">*<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">r<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">==<pos:position pos:line="12" pos:column="30"/></operator> <literal type="char" pos:line="12" pos:column="31">'/'<pos:position pos:line="12" pos:column="34"/></literal></expr>)<pos:position pos:line="12" pos:column="35"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="17">r<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">--<pos:position pos:line="13" pos:column="20"/></operator></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt></block></while>

	<comment type="block" pos:line="15" pos:column="9">/*
	 * then go backwards until I hit a slash, or the beginning of
	 * the string
	 */</comment>
	<while pos:line="19" pos:column="9">while <condition pos:line="19" pos:column="15">(<expr><name pos:line="19" pos:column="16">r<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">&gt;<pos:position pos:line="19" pos:column="22"/></operator> <name pos:line="19" pos:column="20">p<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">&amp;&amp;<pos:position pos:line="19" pos:column="32"/></operator> <operator pos:line="19" pos:column="25">*<pos:position pos:line="19" pos:column="26"/></operator><operator pos:line="19" pos:column="26">(<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">r<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">-<pos:position pos:line="19" pos:column="29"/></operator><literal type="number" pos:line="19" pos:column="29">1<pos:position pos:line="19" pos:column="30"/></literal><operator pos:line="19" pos:column="30">)<pos:position pos:line="19" pos:column="31"/></operator> <operator pos:line="19" pos:column="32">!=<pos:position pos:line="19" pos:column="34"/></operator> <literal type="char" pos:line="19" pos:column="35">'/'<pos:position pos:line="19" pos:column="38"/></literal></expr>)<pos:position pos:line="19" pos:column="39"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="17">r<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">--<pos:position pos:line="20" pos:column="20"/></operator></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt></block></while>
	<return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">r<pos:position pos:line="21" pos:column="17"/></name></expr>;<pos:position pos:line="21" pos:column="18"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
