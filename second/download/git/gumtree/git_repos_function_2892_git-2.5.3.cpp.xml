<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2892_git-2.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">check_merge_bases<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">no_checkout<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">commit_list<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">result<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">rev_nr<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">commit<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier><modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">rev<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><call><name pos:line="5" pos:column="31">get_bad_and_good_commits<pos:position pos:line="5" pos:column="55"/></name><argument_list pos:line="5" pos:column="55">(<argument><expr><operator pos:line="5" pos:column="56">&amp;<pos:position pos:line="5" pos:column="61"/></operator><name pos:line="5" pos:column="57">rev_nr<pos:position pos:line="5" pos:column="63"/></name></expr></argument>)<pos:position pos:line="5" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="65"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">result<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <call><name pos:line="7" pos:column="18">get_merge_bases_many<pos:position pos:line="7" pos:column="38"/></name><argument_list pos:line="7" pos:column="38">(<argument><expr><name><name pos:line="7" pos:column="39">rev<pos:position pos:line="7" pos:column="42"/></name><index pos:line="7" pos:column="42">[<expr><literal type="number" pos:line="7" pos:column="43">0<pos:position pos:line="7" pos:column="44"/></literal></expr>]<pos:position pos:line="7" pos:column="45"/></index></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="47">rev_nr<pos:position pos:line="7" pos:column="53"/></name> <operator pos:line="7" pos:column="54">-<pos:position pos:line="7" pos:column="55"/></operator> <literal type="number" pos:line="7" pos:column="56">1<pos:position pos:line="7" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="59">rev<pos:position pos:line="7" pos:column="62"/></name> <operator pos:line="7" pos:column="63">+<pos:position pos:line="7" pos:column="64"/></operator> <literal type="number" pos:line="7" pos:column="65">1<pos:position pos:line="7" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="68"/></expr_stmt>

	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init pos:line="9" pos:column="14">;<pos:position pos:line="9" pos:column="15"/></init> <condition><expr><name pos:line="9" pos:column="16">result<pos:position pos:line="9" pos:column="22"/></name></expr>;<pos:position pos:line="9" pos:column="23"/></condition> <incr><expr><name pos:line="9" pos:column="24">result<pos:position pos:line="9" pos:column="30"/></name> <operator pos:line="9" pos:column="31">=<pos:position pos:line="9" pos:column="32"/></operator> <name><name pos:line="9" pos:column="33">result<pos:position pos:line="9" pos:column="39"/></name><operator pos:line="9" pos:column="39">-&gt;<pos:position pos:line="9" pos:column="44"/></operator><name pos:line="9" pos:column="41">next<pos:position pos:line="9" pos:column="45"/></name></name></expr></incr>)<pos:position pos:line="9" pos:column="46"/></control> <block pos:line="9" pos:column="47">{
		<decl_stmt><decl><type><specifier pos:line="10" pos:column="17">const<pos:position pos:line="10" pos:column="22"/></specifier> <name pos:line="10" pos:column="23">unsigned<pos:position pos:line="10" pos:column="31"/></name> <name pos:line="10" pos:column="32">char<pos:position pos:line="10" pos:column="36"/></name> <modifier pos:line="10" pos:column="37">*<pos:position pos:line="10" pos:column="38"/></modifier></type><name pos:line="10" pos:column="38">mb<pos:position pos:line="10" pos:column="40"/></name> <init pos:line="10" pos:column="41">= <expr><name><name pos:line="10" pos:column="43">result<pos:position pos:line="10" pos:column="49"/></name><operator pos:line="10" pos:column="49">-&gt;<pos:position pos:line="10" pos:column="54"/></operator><name pos:line="10" pos:column="51">item<pos:position pos:line="10" pos:column="55"/></name><operator pos:line="10" pos:column="55">-&gt;<pos:position pos:line="10" pos:column="60"/></operator><name pos:line="10" pos:column="57">object<pos:position pos:line="10" pos:column="63"/></name><operator pos:line="10" pos:column="63">.<pos:position pos:line="10" pos:column="64"/></operator><name pos:line="10" pos:column="64">sha1<pos:position pos:line="10" pos:column="68"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="69"/></decl_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><call><name pos:line="11" pos:column="22">hashcmp<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">mb<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="34">current_bad_oid<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">-&gt;<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="51">hash<pos:position pos:line="11" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="57"/></condition><then pos:line="11" pos:column="57"> <block pos:line="11" pos:column="58">{
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">handle_bad_merge_base<pos:position pos:line="12" pos:column="46"/></name><argument_list pos:line="12" pos:column="46">()<pos:position pos:line="12" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="13" pos:column="18"/></block></then> <elseif pos:line="13" pos:column="19">else <if pos:line="13" pos:column="24">if <condition pos:line="13" pos:column="27">(<expr><literal type="number" pos:line="13" pos:column="28">0<pos:position pos:line="13" pos:column="29"/></literal> <operator pos:line="13" pos:column="30">&lt;=<pos:position pos:line="13" pos:column="35"/></operator> <call><name pos:line="13" pos:column="33">sha1_array_lookup<pos:position pos:line="13" pos:column="50"/></name><argument_list pos:line="13" pos:column="50">(<argument><expr><operator pos:line="13" pos:column="51">&amp;<pos:position pos:line="13" pos:column="56"/></operator><name pos:line="13" pos:column="52">good_revs<pos:position pos:line="13" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="63">mb<pos:position pos:line="13" pos:column="65"/></name></expr></argument>)<pos:position pos:line="13" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="67"/></condition><then pos:line="13" pos:column="67"> <block pos:line="13" pos:column="68">{
			<continue pos:line="14" pos:column="25">continue;<pos:position pos:line="14" pos:column="34"/></continue>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if></elseif> <elseif pos:line="15" pos:column="19">else <if pos:line="15" pos:column="24">if <condition pos:line="15" pos:column="27">(<expr><literal type="number" pos:line="15" pos:column="28">0<pos:position pos:line="15" pos:column="29"/></literal> <operator pos:line="15" pos:column="30">&lt;=<pos:position pos:line="15" pos:column="35"/></operator> <call><name pos:line="15" pos:column="33">sha1_array_lookup<pos:position pos:line="15" pos:column="50"/></name><argument_list pos:line="15" pos:column="50">(<argument><expr><operator pos:line="15" pos:column="51">&amp;<pos:position pos:line="15" pos:column="56"/></operator><name pos:line="15" pos:column="52">skipped_revs<pos:position pos:line="15" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="66">mb<pos:position pos:line="15" pos:column="68"/></name></expr></argument>)<pos:position pos:line="15" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="70"/></condition><then pos:line="15" pos:column="70"> <block pos:line="15" pos:column="71">{
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">handle_skipped_merge_base<pos:position pos:line="16" pos:column="50"/></name><argument_list pos:line="16" pos:column="50">(<argument><expr><name pos:line="16" pos:column="51">mb<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if></elseif> <else pos:line="17" pos:column="19">else <block pos:line="17" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">printf<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><literal type="string" pos:line="18" pos:column="32">"Bisecting: a merge base must be tested\n"<pos:position pos:line="18" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">exit<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><call><name pos:line="19" pos:column="30">bisect_checkout<pos:position pos:line="19" pos:column="45"/></name><argument_list pos:line="19" pos:column="45">(<argument><expr><call><name pos:line="19" pos:column="46">sha1_to_hex<pos:position pos:line="19" pos:column="57"/></name><argument_list pos:line="19" pos:column="57">(<argument><expr><name pos:line="19" pos:column="58">mb<pos:position pos:line="19" pos:column="60"/></name></expr></argument>)<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="19" pos:column="63">no_checkout<pos:position pos:line="19" pos:column="74"/></name></expr></argument>)<pos:position pos:line="19" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="77"/></expr_stmt>
		}<pos:position pos:line="20" pos:column="18"/></block></else></if>
	}<pos:position pos:line="21" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">free<pos:position pos:line="23" pos:column="13"/></name><argument_list pos:line="23" pos:column="13">(<argument><expr><name pos:line="23" pos:column="14">rev<pos:position pos:line="23" pos:column="17"/></name></expr></argument>)<pos:position pos:line="23" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">free_commit_list<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">result<pos:position pos:line="24" pos:column="32"/></name></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
