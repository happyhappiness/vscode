<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5130_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">name_rev_line<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">p<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">name_ref_data<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">data<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">buf<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">STRBUF_INIT<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">forty<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">p_start<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<for pos:line="6" pos:column="9">for <control pos:line="6" pos:column="13">(<init><expr><name pos:line="6" pos:column="14">p_start<pos:position pos:line="6" pos:column="21"/></name> <operator pos:line="6" pos:column="22">=<pos:position pos:line="6" pos:column="23"/></operator> <name pos:line="6" pos:column="24">p<pos:position pos:line="6" pos:column="25"/></name></expr>;<pos:position pos:line="6" pos:column="26"/></init> <condition><expr><operator pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="28">p<pos:position pos:line="6" pos:column="29"/></name></expr>;<pos:position pos:line="6" pos:column="30"/></condition> <incr><expr><name pos:line="6" pos:column="31">p<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">++<pos:position pos:line="6" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="6" pos:column="35"/></control> <block pos:line="6" pos:column="36">{
<cpp:define pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">define<pos:position pos:line="7" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="7" pos:column="9">ishex<pos:position pos:line="7" pos:column="14"/></name><parameter_list pos:line="7" pos:column="14">(<parameter><type><name pos:line="7" pos:column="15">x<pos:position pos:line="7" pos:column="16"/></name></type></parameter>)<pos:position pos:line="7" pos:column="17"/></parameter_list></cpp:macro> <cpp:value pos:line="7" pos:column="18">(isdigit((x)) || ((x) &gt;= 'a' &amp;&amp; (x) &lt;= 'f'))<pos:position pos:line="7" pos:column="62"/></cpp:value></cpp:define>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><operator pos:line="8" pos:column="21">!<pos:position pos:line="8" pos:column="22"/></operator><call><name pos:line="8" pos:column="22">ishex<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><operator pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="29">p<pos:position pos:line="8" pos:column="30"/></name></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="32"/></condition><then pos:line="8" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="25">forty<pos:position pos:line="9" pos:column="30"/></name> <operator pos:line="9" pos:column="31">=<pos:position pos:line="9" pos:column="32"/></operator> <literal type="number" pos:line="9" pos:column="33">0<pos:position pos:line="9" pos:column="34"/></literal></expr>;<pos:position pos:line="9" pos:column="35"/></expr_stmt></block></then>
		<elseif pos:line="10" pos:column="17">else <if pos:line="10" pos:column="22">if <condition pos:line="10" pos:column="25">(<expr><operator pos:line="10" pos:column="26">++<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">forty<pos:position pos:line="10" pos:column="33"/></name> <operator pos:line="10" pos:column="34">==<pos:position pos:line="10" pos:column="36"/></operator> <name pos:line="10" pos:column="37">GIT_SHA1_HEXSZ<pos:position pos:line="10" pos:column="51"/></name> <operator pos:line="10" pos:column="52">&amp;&amp;<pos:position pos:line="10" pos:column="62"/></operator>
			 <operator pos:line="11" pos:column="26">!<pos:position pos:line="11" pos:column="27"/></operator><call><name pos:line="11" pos:column="27">ishex<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><operator pos:line="11" pos:column="33">*<pos:position pos:line="11" pos:column="34"/></operator><operator pos:line="11" pos:column="34">(<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="35">p<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">+<pos:position pos:line="11" pos:column="37"/></operator><literal type="number" pos:line="11" pos:column="37">1<pos:position pos:line="11" pos:column="38"/></literal><operator pos:line="11" pos:column="38">)<pos:position pos:line="11" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="41"/></condition><then pos:line="11" pos:column="41"> <block pos:line="11" pos:column="42">{
			<decl_stmt><decl><type><name><name pos:line="12" pos:column="25">struct<pos:position pos:line="12" pos:column="31"/></name> <name pos:line="12" pos:column="32">object_id<pos:position pos:line="12" pos:column="41"/></name></name></type> <name pos:line="12" pos:column="42">oid<pos:position pos:line="12" pos:column="45"/></name></decl>;<pos:position pos:line="12" pos:column="46"/></decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="13" pos:column="25">const<pos:position pos:line="13" pos:column="30"/></specifier> <name pos:line="13" pos:column="31">char<pos:position pos:line="13" pos:column="35"/></name> <modifier pos:line="13" pos:column="36">*<pos:position pos:line="13" pos:column="37"/></modifier></type><name pos:line="13" pos:column="37">name<pos:position pos:line="13" pos:column="41"/></name> <init pos:line="13" pos:column="42">= <expr><name pos:line="13" pos:column="44">NULL<pos:position pos:line="13" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="49"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="14" pos:column="25">char<pos:position pos:line="14" pos:column="29"/></name></type> <name pos:line="14" pos:column="30">c<pos:position pos:line="14" pos:column="31"/></name> <init pos:line="14" pos:column="32">= <expr><operator pos:line="14" pos:column="34">*<pos:position pos:line="14" pos:column="35"/></operator><operator pos:line="14" pos:column="35">(<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="36">p<pos:position pos:line="14" pos:column="37"/></name><operator pos:line="14" pos:column="37">+<pos:position pos:line="14" pos:column="38"/></operator><literal type="number" pos:line="14" pos:column="38">1<pos:position pos:line="14" pos:column="39"/></literal><operator pos:line="14" pos:column="39">)<pos:position pos:line="14" pos:column="40"/></operator></expr></init></decl>;<pos:position pos:line="14" pos:column="41"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="15" pos:column="25">int<pos:position pos:line="15" pos:column="28"/></name></type> <name pos:line="15" pos:column="29">p_len<pos:position pos:line="15" pos:column="34"/></name> <init pos:line="15" pos:column="35">= <expr><name pos:line="15" pos:column="37">p<pos:position pos:line="15" pos:column="38"/></name> <operator pos:line="15" pos:column="39">-<pos:position pos:line="15" pos:column="40"/></operator> <name pos:line="15" pos:column="41">p_start<pos:position pos:line="15" pos:column="48"/></name> <operator pos:line="15" pos:column="49">+<pos:position pos:line="15" pos:column="50"/></operator> <literal type="number" pos:line="15" pos:column="51">1<pos:position pos:line="15" pos:column="52"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="53"/></decl_stmt>

			<expr_stmt><expr><name pos:line="17" pos:column="25">forty<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">=<pos:position pos:line="17" pos:column="32"/></operator> <literal type="number" pos:line="17" pos:column="33">0<pos:position pos:line="17" pos:column="34"/></literal></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>

			<expr_stmt><expr><operator pos:line="19" pos:column="25">*<pos:position pos:line="19" pos:column="26"/></operator><operator pos:line="19" pos:column="26">(<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">p<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">+<pos:position pos:line="19" pos:column="29"/></operator><literal type="number" pos:line="19" pos:column="29">1<pos:position pos:line="19" pos:column="30"/></literal><operator pos:line="19" pos:column="30">)<pos:position pos:line="19" pos:column="31"/></operator> <operator pos:line="19" pos:column="32">=<pos:position pos:line="19" pos:column="33"/></operator> <literal type="number" pos:line="19" pos:column="34">0<pos:position pos:line="19" pos:column="35"/></literal></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><operator pos:line="20" pos:column="29">!<pos:position pos:line="20" pos:column="30"/></operator><call><name pos:line="20" pos:column="30">get_oid<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">(<argument><expr><name pos:line="20" pos:column="38">p<pos:position pos:line="20" pos:column="39"/></name> <operator pos:line="20" pos:column="40">-<pos:position pos:line="20" pos:column="41"/></operator> <operator pos:line="20" pos:column="42">(<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="43">GIT_SHA1_HEXSZ<pos:position pos:line="20" pos:column="57"/></name> <operator pos:line="20" pos:column="58">-<pos:position pos:line="20" pos:column="59"/></operator> <literal type="number" pos:line="20" pos:column="60">1<pos:position pos:line="20" pos:column="61"/></literal><operator pos:line="20" pos:column="61">)<pos:position pos:line="20" pos:column="62"/></operator></expr></argument>, <argument><expr><operator pos:line="20" pos:column="64">&amp;<pos:position pos:line="20" pos:column="69"/></operator><name pos:line="20" pos:column="65">oid<pos:position pos:line="20" pos:column="68"/></name></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="70"/></condition><then pos:line="20" pos:column="70"> <block pos:line="20" pos:column="71">{
				<decl_stmt><decl><type><name><name pos:line="21" pos:column="33">struct<pos:position pos:line="21" pos:column="39"/></name> <name pos:line="21" pos:column="40">object<pos:position pos:line="21" pos:column="46"/></name></name> <modifier pos:line="21" pos:column="47">*<pos:position pos:line="21" pos:column="48"/></modifier></type><name pos:line="21" pos:column="48">o<pos:position pos:line="21" pos:column="49"/></name> <init pos:line="21" pos:column="50">=
					<expr><call><name pos:line="22" pos:column="41">lookup_object<pos:position pos:line="22" pos:column="54"/></name><argument_list pos:line="22" pos:column="54">(<argument><expr><name><name pos:line="22" pos:column="55">oid<pos:position pos:line="22" pos:column="58"/></name><operator pos:line="22" pos:column="58">.<pos:position pos:line="22" pos:column="59"/></operator><name pos:line="22" pos:column="59">hash<pos:position pos:line="22" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="65"/></decl_stmt>
				<if pos:line="23" pos:column="33">if <condition pos:line="23" pos:column="36">(<expr><name pos:line="23" pos:column="37">o<pos:position pos:line="23" pos:column="38"/></name></expr>)<pos:position pos:line="23" pos:column="39"/></condition><then pos:line="23" pos:column="39">
					<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="41">name<pos:position pos:line="24" pos:column="45"/></name> <operator pos:line="24" pos:column="46">=<pos:position pos:line="24" pos:column="47"/></operator> <call><name pos:line="24" pos:column="48">get_rev_name<pos:position pos:line="24" pos:column="60"/></name><argument_list pos:line="24" pos:column="60">(<argument><expr><name pos:line="24" pos:column="61">o<pos:position pos:line="24" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="64">&amp;<pos:position pos:line="24" pos:column="69"/></operator><name pos:line="24" pos:column="65">buf<pos:position pos:line="24" pos:column="68"/></name></expr></argument>)<pos:position pos:line="24" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="70"/></expr_stmt></block></then></if>
			}<pos:position pos:line="25" pos:column="26"/></block></then></if>
			<expr_stmt><expr><operator pos:line="26" pos:column="25">*<pos:position pos:line="26" pos:column="26"/></operator><operator pos:line="26" pos:column="26">(<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">p<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">+<pos:position pos:line="26" pos:column="29"/></operator><literal type="number" pos:line="26" pos:column="29">1<pos:position pos:line="26" pos:column="30"/></literal><operator pos:line="26" pos:column="30">)<pos:position pos:line="26" pos:column="31"/></operator> <operator pos:line="26" pos:column="32">=<pos:position pos:line="26" pos:column="33"/></operator> <name pos:line="26" pos:column="34">c<pos:position pos:line="26" pos:column="35"/></name></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>

			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><operator pos:line="28" pos:column="29">!<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="30">name<pos:position pos:line="28" pos:column="34"/></name></expr>)<pos:position pos:line="28" pos:column="35"/></condition><then pos:line="28" pos:column="35">
				<block type="pseudo"><continue pos:line="29" pos:column="33">continue;<pos:position pos:line="29" pos:column="42"/></continue></block></then></if>

			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><name><name pos:line="31" pos:column="29">data<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">-&gt;<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="35">name_only<pos:position pos:line="31" pos:column="44"/></name></name></expr>)<pos:position pos:line="31" pos:column="45"/></condition><then pos:line="31" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="33">printf<pos:position pos:line="32" pos:column="39"/></name><argument_list pos:line="32" pos:column="39">(<argument><expr><literal type="string" pos:line="32" pos:column="40">"%.*s%s"<pos:position pos:line="32" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="50">p_len<pos:position pos:line="32" pos:column="55"/></name> <operator pos:line="32" pos:column="56">-<pos:position pos:line="32" pos:column="57"/></operator> <name pos:line="32" pos:column="58">GIT_SHA1_HEXSZ<pos:position pos:line="32" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="74">p_start<pos:position pos:line="32" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="83">name<pos:position pos:line="32" pos:column="87"/></name></expr></argument>)<pos:position pos:line="32" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="89"/></expr_stmt></block></then>
			<else pos:line="33" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="33">printf<pos:position pos:line="34" pos:column="39"/></name><argument_list pos:line="34" pos:column="39">(<argument><expr><literal type="string" pos:line="34" pos:column="40">"%.*s (%s)"<pos:position pos:line="34" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="53">p_len<pos:position pos:line="34" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="60">p_start<pos:position pos:line="34" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="69">name<pos:position pos:line="34" pos:column="73"/></name></expr></argument>)<pos:position pos:line="34" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="75"/></expr_stmt></block></else></if>
			<expr_stmt><expr><name pos:line="35" pos:column="25">p_start<pos:position pos:line="35" pos:column="32"/></name> <operator pos:line="35" pos:column="33">=<pos:position pos:line="35" pos:column="34"/></operator> <name pos:line="35" pos:column="35">p<pos:position pos:line="35" pos:column="36"/></name> <operator pos:line="35" pos:column="37">+<pos:position pos:line="35" pos:column="38"/></operator> <literal type="number" pos:line="35" pos:column="39">1<pos:position pos:line="35" pos:column="40"/></literal></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="37" pos:column="10"/></block></for>

	<comment type="block" pos:line="39" pos:column="9">/* flush */</comment>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">p_start<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">!=<pos:position pos:line="40" pos:column="23"/></operator> <name pos:line="40" pos:column="24">p<pos:position pos:line="40" pos:column="25"/></name></expr>)<pos:position pos:line="40" pos:column="26"/></condition><then pos:line="40" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="17">fwrite<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><name pos:line="41" pos:column="24">p_start<pos:position pos:line="41" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="33">p<pos:position pos:line="41" pos:column="34"/></name> <operator pos:line="41" pos:column="35">-<pos:position pos:line="41" pos:column="36"/></operator> <name pos:line="41" pos:column="37">p_start<pos:position pos:line="41" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="46">1<pos:position pos:line="41" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="49">stdout<pos:position pos:line="41" pos:column="55"/></name></expr></argument>)<pos:position pos:line="41" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="43" pos:column="9">strbuf_release<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><operator pos:line="43" pos:column="24">&amp;<pos:position pos:line="43" pos:column="29"/></operator><name pos:line="43" pos:column="25">buf<pos:position pos:line="43" pos:column="28"/></name></expr></argument>)<pos:position pos:line="43" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
