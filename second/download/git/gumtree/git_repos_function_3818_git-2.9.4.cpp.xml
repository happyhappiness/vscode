<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3818_git-2.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_stale_heads_cb<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">refname<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name><name pos:line="1" pos:column="58">struct<pos:position pos:line="1" pos:column="64"/></name> <name pos:line="1" pos:column="65">object_id<pos:position pos:line="1" pos:column="74"/></name></name> <modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type><name pos:line="1" pos:column="76">oid<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">flags<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">void<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">cb_data<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">stale_heads_info<pos:position pos:line="4" pos:column="32"/></name></name> <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">info<pos:position pos:line="4" pos:column="38"/></name> <init pos:line="4" pos:column="39">= <expr><name pos:line="4" pos:column="41">cb_data<pos:position pos:line="4" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">string_list<pos:position pos:line="5" pos:column="27"/></name></name></type> <name pos:line="5" pos:column="28">matches<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><name pos:line="5" pos:column="38">STRING_LIST_INIT_DUP<pos:position pos:line="5" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">refspec<pos:position pos:line="6" pos:column="23"/></name></name></type> <name pos:line="6" pos:column="24">query<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">i<pos:position pos:line="7" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="16">stale<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><literal type="number" pos:line="7" pos:column="24">1<pos:position pos:line="7" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">memset<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><operator pos:line="8" pos:column="16">&amp;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="17">query<pos:position pos:line="8" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="27">sizeof<argument_list pos:line="8" pos:column="33">(<argument><expr pos:line="8" pos:column="34">struct <name pos:line="8" pos:column="41">refspec<pos:position pos:line="8" pos:column="48"/></name></expr></argument>)<pos:position pos:line="8" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="9" pos:column="9">query<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">.<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="15">dst<pos:position pos:line="9" pos:column="18"/></name></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <operator pos:line="9" pos:column="21">(<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">char<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">*<pos:position pos:line="9" pos:column="28"/></operator><operator pos:line="9" pos:column="28">)<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="29">refname<pos:position pos:line="9" pos:column="36"/></name></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">query_refspecs_multiple<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><name><name pos:line="11" pos:column="33">info<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">-&gt;<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="39">refs<pos:position pos:line="11" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="45">info<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">-&gt;<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="51">ref_count<pos:position pos:line="11" pos:column="60"/></name></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="62">&amp;<pos:position pos:line="11" pos:column="67"/></operator><name pos:line="11" pos:column="63">query<pos:position pos:line="11" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="70">&amp;<pos:position pos:line="11" pos:column="75"/></operator><name pos:line="11" pos:column="71">matches<pos:position pos:line="11" pos:column="78"/></name></expr></argument>)<pos:position pos:line="11" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="80"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">matches<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">.<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="21">nr<pos:position pos:line="12" pos:column="23"/></name></name> <operator pos:line="12" pos:column="24">==<pos:position pos:line="12" pos:column="26"/></operator> <literal type="number" pos:line="12" pos:column="27">0<pos:position pos:line="12" pos:column="28"/></literal></expr>)<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29">
		<block type="pseudo"><goto pos:line="13" pos:column="17">goto <name pos:line="13" pos:column="22">clean_exit<pos:position pos:line="13" pos:column="32"/></name>;<pos:position pos:line="13" pos:column="33"/></goto></block></then></if> <comment type="block" pos:line="13" pos:column="34">/* No matches */</comment>

	<comment type="block" pos:line="15" pos:column="9">/*
	 * If we did find a suitable refspec and it's not a symref and
	 * it's not in the list of refs that currently exist in that
	 * remote, we consider it to be stale. In order to deal with
	 * overlapping refspecs, we need to go over all of the
	 * matching refs.
	 */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">flags<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">&amp;<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="21">REF_ISSYMREF<pos:position pos:line="22" pos:column="33"/></name></expr>)<pos:position pos:line="22" pos:column="34"/></condition><then pos:line="22" pos:column="34">
		<block type="pseudo"><goto pos:line="23" pos:column="17">goto <name pos:line="23" pos:column="22">clean_exit<pos:position pos:line="23" pos:column="32"/></name>;<pos:position pos:line="23" pos:column="33"/></goto></block></then></if>

	<for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">i<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <literal type="number" pos:line="25" pos:column="18">0<pos:position pos:line="25" pos:column="19"/></literal></expr>;<pos:position pos:line="25" pos:column="20"/></init> <condition><expr><name pos:line="25" pos:column="21">stale<pos:position pos:line="25" pos:column="26"/></name> <operator pos:line="25" pos:column="27">&amp;&amp;<pos:position pos:line="25" pos:column="37"/></operator> <name pos:line="25" pos:column="30">i<pos:position pos:line="25" pos:column="31"/></name> <operator pos:line="25" pos:column="32">&lt;<pos:position pos:line="25" pos:column="36"/></operator> <name><name pos:line="25" pos:column="34">matches<pos:position pos:line="25" pos:column="41"/></name><operator pos:line="25" pos:column="41">.<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="42">nr<pos:position pos:line="25" pos:column="44"/></name></name></expr>;<pos:position pos:line="25" pos:column="45"/></condition> <incr><expr><name pos:line="25" pos:column="46">i<pos:position pos:line="25" pos:column="47"/></name><operator pos:line="25" pos:column="47">++<pos:position pos:line="25" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="50"/></control>
		<block type="pseudo"><if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><call><name pos:line="26" pos:column="21">string_list_has_string<pos:position pos:line="26" pos:column="43"/></name><argument_list pos:line="26" pos:column="43">(<argument><expr><name><name pos:line="26" pos:column="44">info<pos:position pos:line="26" pos:column="48"/></name><operator pos:line="26" pos:column="48">-&gt;<pos:position pos:line="26" pos:column="53"/></operator><name pos:line="26" pos:column="50">ref_names<pos:position pos:line="26" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="61">matches<pos:position pos:line="26" pos:column="68"/></name><operator pos:line="26" pos:column="68">.<pos:position pos:line="26" pos:column="69"/></operator><name pos:line="26" pos:column="69">items<pos:position pos:line="26" pos:column="74"/></name><index pos:line="26" pos:column="74">[<expr><name pos:line="26" pos:column="75">i<pos:position pos:line="26" pos:column="76"/></name></expr>]<pos:position pos:line="26" pos:column="77"/></index></name><operator pos:line="26" pos:column="77">.<pos:position pos:line="26" pos:column="78"/></operator><name pos:line="26" pos:column="78">string<pos:position pos:line="26" pos:column="84"/></name></expr></argument>)<pos:position pos:line="26" pos:column="85"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="86"/></condition><then pos:line="26" pos:column="86">
			<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="25">stale<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">=<pos:position pos:line="27" pos:column="32"/></operator> <literal type="number" pos:line="27" pos:column="33">0<pos:position pos:line="27" pos:column="34"/></literal></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt></block></then></if></block></for>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">stale<pos:position pos:line="29" pos:column="18"/></name></expr>)<pos:position pos:line="29" pos:column="19"/></condition><then pos:line="29" pos:column="19"> <block pos:line="29" pos:column="20">{
		<decl_stmt><decl><type><name><name pos:line="30" pos:column="17">struct<pos:position pos:line="30" pos:column="23"/></name> <name pos:line="30" pos:column="24">ref<pos:position pos:line="30" pos:column="27"/></name></name> <modifier pos:line="30" pos:column="28">*<pos:position pos:line="30" pos:column="29"/></modifier></type><name pos:line="30" pos:column="29">ref<pos:position pos:line="30" pos:column="32"/></name> <init pos:line="30" pos:column="33">= <expr><call><name pos:line="30" pos:column="35">make_linked_ref<pos:position pos:line="30" pos:column="50"/></name><argument_list pos:line="30" pos:column="50">(<argument><expr><name pos:line="30" pos:column="51">refname<pos:position pos:line="30" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="60">&amp;<pos:position pos:line="30" pos:column="65"/></operator><name><name pos:line="30" pos:column="61">info<pos:position pos:line="30" pos:column="65"/></name><operator pos:line="30" pos:column="65">-&gt;<pos:position pos:line="30" pos:column="70"/></operator><name pos:line="30" pos:column="67">stale_refs_tail<pos:position pos:line="30" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="84"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">oidcpy<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><operator pos:line="31" pos:column="24">&amp;<pos:position pos:line="31" pos:column="29"/></operator><name><name pos:line="31" pos:column="25">ref<pos:position pos:line="31" pos:column="28"/></name><operator pos:line="31" pos:column="28">-&gt;<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="30">new_oid<pos:position pos:line="31" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="39">oid<pos:position pos:line="31" pos:column="42"/></name></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

<label><name pos:line="34" pos:column="1">clean_exit<pos:position pos:line="34" pos:column="11"/></name>:<pos:position pos:line="34" pos:column="12"/></label>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">string_list_clear<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><operator pos:line="35" pos:column="27">&amp;<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="28">matches<pos:position pos:line="35" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="37">0<pos:position pos:line="35" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
	<return pos:line="36" pos:column="9">return <expr><literal type="number" pos:line="36" pos:column="16">0<pos:position pos:line="36" pos:column="17"/></literal></expr>;<pos:position pos:line="36" pos:column="18"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
