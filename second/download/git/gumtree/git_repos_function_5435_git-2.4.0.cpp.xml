<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5435_git-2.4.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_ls_response<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">response<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">uint32_t<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">mode<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
					<parameter><decl><type><name><name pos:line="2" pos:column="41">struct<pos:position pos:line="2" pos:column="47"/></name> <name pos:line="2" pos:column="48">strbuf<pos:position pos:line="2" pos:column="54"/></name></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">dataref<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">tab<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">response_end<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">assert<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">response<pos:position pos:line="7" pos:column="24"/></name></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">response_end<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">=<pos:position pos:line="8" pos:column="23"/></operator> <name pos:line="8" pos:column="24">response<pos:position pos:line="8" pos:column="32"/></name> <operator pos:line="8" pos:column="33">+<pos:position pos:line="8" pos:column="34"/></operator> <call><name pos:line="8" pos:column="35">strlen<pos:position pos:line="8" pos:column="41"/></name><argument_list pos:line="8" pos:column="41">(<argument><expr><name pos:line="8" pos:column="42">response<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="52"/></expr_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">*<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">response<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">==<pos:position pos:line="10" pos:column="25"/></operator> <literal type="char" pos:line="10" pos:column="26">'m'<pos:position pos:line="10" pos:column="29"/></literal></expr>)<pos:position pos:line="10" pos:column="30"/></condition><then pos:line="10" pos:column="30"> <block pos:line="10" pos:column="31">{	<comment type="block" pos:line="10" pos:column="33">/* Missing. */</comment>
		<expr_stmt><expr><name pos:line="11" pos:column="17">errno<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">=<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">ENOENT<pos:position pos:line="11" pos:column="31"/></name></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">-<pos:position pos:line="12" pos:column="25"/></operator><literal type="number" pos:line="12" pos:column="25">1<pos:position pos:line="12" pos:column="26"/></literal></expr>;<pos:position pos:line="12" pos:column="27"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="15" pos:column="9">/* Mode. */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">response_end<pos:position pos:line="16" pos:column="25"/></name> <operator pos:line="16" pos:column="26">-<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="28">response<pos:position pos:line="16" pos:column="36"/></name> <operator pos:line="16" pos:column="37">&lt;<pos:position pos:line="16" pos:column="41"/></operator> <operator pos:line="16" pos:column="39">(<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="40">signed<pos:position pos:line="16" pos:column="46"/></name><operator pos:line="16" pos:column="46">)<pos:position pos:line="16" pos:column="47"/></operator> <call><name pos:line="16" pos:column="48">strlen<pos:position pos:line="16" pos:column="54"/></name><argument_list pos:line="16" pos:column="54">(<argument><expr><literal type="string" pos:line="16" pos:column="55">"100644"<pos:position pos:line="16" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call> <operator pos:line="16" pos:column="65">||<pos:position pos:line="16" pos:column="67"/></operator>
	    <name><name pos:line="17" pos:column="13">response<pos:position pos:line="17" pos:column="21"/></name><index pos:line="17" pos:column="21">[<expr><call><name pos:line="17" pos:column="22">strlen<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><literal type="string" pos:line="17" pos:column="29">"100644"<pos:position pos:line="17" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></call></expr>]<pos:position pos:line="17" pos:column="39"/></index></name> <operator pos:line="17" pos:column="40">!=<pos:position pos:line="17" pos:column="42"/></operator> <literal type="char" pos:line="17" pos:column="43">' '<pos:position pos:line="17" pos:column="46"/></literal></expr>)<pos:position pos:line="17" pos:column="47"/></condition><then pos:line="17" pos:column="47">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">die<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><literal type="string" pos:line="18" pos:column="21">"invalid ls response: missing mode: %s"<pos:position pos:line="18" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="62">response<pos:position pos:line="18" pos:column="70"/></name></expr></argument>)<pos:position pos:line="18" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="72"/></expr_stmt></block></then></if>
	<expr_stmt><expr><operator pos:line="19" pos:column="9">*<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">mode<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <literal type="number" pos:line="19" pos:column="17">0<pos:position pos:line="19" pos:column="18"/></literal></expr>;<pos:position pos:line="19" pos:column="19"/></expr_stmt>
	<for pos:line="20" pos:column="9">for <control pos:line="20" pos:column="13">(<init pos:line="20" pos:column="14">;<pos:position pos:line="20" pos:column="15"/></init> <condition><expr><operator pos:line="20" pos:column="16">*<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">response<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">!=<pos:position pos:line="20" pos:column="28"/></operator> <literal type="char" pos:line="20" pos:column="29">' '<pos:position pos:line="20" pos:column="32"/></literal></expr>;<pos:position pos:line="20" pos:column="33"/></condition> <incr><expr><name pos:line="20" pos:column="34">response<pos:position pos:line="20" pos:column="42"/></name><operator pos:line="20" pos:column="42">++<pos:position pos:line="20" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="45"/></control> <block pos:line="20" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">char<pos:position pos:line="21" pos:column="21"/></name></type> <name pos:line="21" pos:column="22">ch<pos:position pos:line="21" pos:column="24"/></name> <init pos:line="21" pos:column="25">= <expr><operator pos:line="21" pos:column="27">*<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="28">response<pos:position pos:line="21" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="37"/></decl_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name><name pos:line="22" pos:column="21">ch<pos:position pos:line="22" pos:column="23"/></name> <argument_list type="generic" pos:line="22" pos:column="24">&lt; <argument><expr><literal type="char" pos:line="22" pos:column="26">'0'<pos:position pos:line="22" pos:column="29"/></literal> <operator pos:line="22" pos:column="30">||<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="33">ch<pos:position pos:line="22" pos:column="35"/></name></expr></argument> &gt;<pos:position pos:line="22" pos:column="40"/></argument_list></name> <literal type="char" pos:line="22" pos:column="38">'7'<pos:position pos:line="22" pos:column="41"/></literal></expr>)<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">die<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><literal type="string" pos:line="23" pos:column="29">"invalid ls response: mode is not octal: %s"<pos:position pos:line="23" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="75">response<pos:position pos:line="23" pos:column="83"/></name></expr></argument>)<pos:position pos:line="23" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="85"/></expr_stmt></block></then></if>
		<expr_stmt><expr><operator pos:line="24" pos:column="17">*<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">mode<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">*=<pos:position pos:line="24" pos:column="25"/></operator> <literal type="number" pos:line="24" pos:column="26">8<pos:position pos:line="24" pos:column="27"/></literal></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="25" pos:column="17">*<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">mode<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">+=<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="26">ch<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">-<pos:position pos:line="25" pos:column="30"/></operator> <literal type="char" pos:line="25" pos:column="31">'0'<pos:position pos:line="25" pos:column="34"/></literal></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></for>

	<comment type="block" pos:line="28" pos:column="9">/* ' blob ' or ' tree ' */</comment>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">response_end<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">-<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="28">response<pos:position pos:line="29" pos:column="36"/></name> <operator pos:line="29" pos:column="37">&lt;<pos:position pos:line="29" pos:column="41"/></operator> <operator pos:line="29" pos:column="39">(<pos:position pos:line="29" pos:column="40"/></operator><name pos:line="29" pos:column="40">signed<pos:position pos:line="29" pos:column="46"/></name><operator pos:line="29" pos:column="46">)<pos:position pos:line="29" pos:column="47"/></operator> <call><name pos:line="29" pos:column="48">strlen<pos:position pos:line="29" pos:column="54"/></name><argument_list pos:line="29" pos:column="54">(<argument><expr><literal type="string" pos:line="29" pos:column="55">" blob "<pos:position pos:line="29" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="64"/></argument_list></call> <operator pos:line="29" pos:column="65">||<pos:position pos:line="29" pos:column="67"/></operator>
	    <operator pos:line="30" pos:column="13">(<pos:position pos:line="30" pos:column="14"/></operator><name><name pos:line="30" pos:column="14">response<pos:position pos:line="30" pos:column="22"/></name><index pos:line="30" pos:column="22">[<expr><literal type="number" pos:line="30" pos:column="23">1<pos:position pos:line="30" pos:column="24"/></literal></expr>]<pos:position pos:line="30" pos:column="25"/></index></name> <operator pos:line="30" pos:column="26">!=<pos:position pos:line="30" pos:column="28"/></operator> <literal type="char" pos:line="30" pos:column="29">'b'<pos:position pos:line="30" pos:column="32"/></literal> <operator pos:line="30" pos:column="33">&amp;&amp;<pos:position pos:line="30" pos:column="43"/></operator> <name><name pos:line="30" pos:column="36">response<pos:position pos:line="30" pos:column="44"/></name><index pos:line="30" pos:column="44">[<expr><literal type="number" pos:line="30" pos:column="45">1<pos:position pos:line="30" pos:column="46"/></literal></expr>]<pos:position pos:line="30" pos:column="47"/></index></name> <operator pos:line="30" pos:column="48">!=<pos:position pos:line="30" pos:column="50"/></operator> <literal type="char" pos:line="30" pos:column="51">'t'<pos:position pos:line="30" pos:column="54"/></literal><operator pos:line="30" pos:column="54">)<pos:position pos:line="30" pos:column="55"/></operator></expr>)<pos:position pos:line="30" pos:column="56"/></condition><then pos:line="30" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="17">die<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><literal type="string" pos:line="31" pos:column="21">"unexpected ls response: not a tree or blob: %s"<pos:position pos:line="31" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="71">response<pos:position pos:line="31" pos:column="79"/></name></expr></argument>)<pos:position pos:line="31" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="81"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="32" pos:column="9">response<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">+=<pos:position pos:line="32" pos:column="20"/></operator> <call><name pos:line="32" pos:column="21">strlen<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">(<argument><expr><literal type="string" pos:line="32" pos:column="28">" blob "<pos:position pos:line="32" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="38"/></expr_stmt>

	<comment type="block" pos:line="34" pos:column="9">/* Dataref. */</comment>
	<expr_stmt><expr><name pos:line="35" pos:column="9">tab<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <call><name pos:line="35" pos:column="15">memchr<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">response<pos:position pos:line="35" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="35" pos:column="32">'\t'<pos:position pos:line="35" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="38">response_end<pos:position pos:line="35" pos:column="50"/></name> <operator pos:line="35" pos:column="51">-<pos:position pos:line="35" pos:column="52"/></operator> <name pos:line="35" pos:column="53">response<pos:position pos:line="35" pos:column="61"/></name></expr></argument>)<pos:position pos:line="35" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="63"/></expr_stmt>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><operator pos:line="36" pos:column="13">!<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">tab<pos:position pos:line="36" pos:column="17"/></name></expr>)<pos:position pos:line="36" pos:column="18"/></condition><then pos:line="36" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="17">die<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><literal type="string" pos:line="37" pos:column="21">"invalid ls response: missing tab: %s"<pos:position pos:line="37" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="61">response<pos:position pos:line="37" pos:column="69"/></name></expr></argument>)<pos:position pos:line="37" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="71"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">strbuf_add<pos:position pos:line="38" pos:column="19"/></name><argument_list pos:line="38" pos:column="19">(<argument><expr><name pos:line="38" pos:column="20">dataref<pos:position pos:line="38" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="29">response<pos:position pos:line="38" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="39">tab<pos:position pos:line="38" pos:column="42"/></name> <operator pos:line="38" pos:column="43">-<pos:position pos:line="38" pos:column="44"/></operator> <name pos:line="38" pos:column="45">response<pos:position pos:line="38" pos:column="53"/></name></expr></argument>)<pos:position pos:line="38" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="55"/></expr_stmt>
	<return pos:line="39" pos:column="9">return <expr><literal type="number" pos:line="39" pos:column="16">0<pos:position pos:line="39" pos:column="17"/></literal></expr>;<pos:position pos:line="39" pos:column="18"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
