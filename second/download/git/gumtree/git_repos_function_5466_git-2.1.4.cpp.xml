<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5466_git-2.1.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">NOINLINE<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">void<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">RemoveCacheEntries<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">nedpool<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">p<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">threadcache<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">tc<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="70">unsigned<pos:position pos:line="1" pos:column="78"/></name> <name pos:line="1" pos:column="79">int<pos:position pos:line="1" pos:column="82"/></name></type> <name pos:line="1" pos:column="83">age<pos:position pos:line="1" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="87"/></parameter_list> <name pos:line="1" pos:column="88">THROWSPEC<pos:position pos:line="1" pos:column="97"/></name>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">FULLSANITYCHECKS<pos:position pos:line="3" pos:column="24"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="4" pos:column="9">tcfullsanitycheck<pos:position pos:line="4" pos:column="26"/></name><argument_list pos:line="4" pos:column="26">(<argument><expr><name pos:line="4" pos:column="27">tc<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">endif<pos:position pos:line="5" pos:column="7"/></cpp:directive></cpp:endif>
	<if pos:line="6" pos:column="9">if<condition pos:line="6" pos:column="11">(<expr><name><name pos:line="6" pos:column="12">tc<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">-&gt;<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="16">freeInCache<pos:position pos:line="6" pos:column="27"/></name></name></expr>)<pos:position pos:line="6" pos:column="28"/></condition><then pos:line="6" pos:column="28">
	<block pos:line="7" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">threadcacheblk<pos:position pos:line="8" pos:column="31"/></name> <modifier pos:line="8" pos:column="32">*<pos:position pos:line="8" pos:column="33"/></modifier><modifier pos:line="8" pos:column="33">*<pos:position pos:line="8" pos:column="34"/></modifier></type><name pos:line="8" pos:column="34">tcbptr<pos:position pos:line="8" pos:column="40"/></name><init pos:line="8" pos:column="40">=<expr><name><name pos:line="8" pos:column="41">tc<pos:position pos:line="8" pos:column="43"/></name><operator pos:line="8" pos:column="43">-&gt;<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="45">bins<pos:position pos:line="8" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="50"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">n<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
		<for pos:line="10" pos:column="17">for<control pos:line="10" pos:column="20">(<init><expr><name pos:line="10" pos:column="21">n<pos:position pos:line="10" pos:column="22"/></name><operator pos:line="10" pos:column="22">=<pos:position pos:line="10" pos:column="23"/></operator><literal type="number" pos:line="10" pos:column="23">0<pos:position pos:line="10" pos:column="24"/></literal></expr>;<pos:position pos:line="10" pos:column="25"/></init> <condition><expr><name pos:line="10" pos:column="26">n<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">&lt;=<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="29">THREADCACHEMAXBINS<pos:position pos:line="10" pos:column="47"/></name></expr>;<pos:position pos:line="10" pos:column="48"/></condition> <incr><expr><name pos:line="10" pos:column="49">n<pos:position pos:line="10" pos:column="50"/></name><operator pos:line="10" pos:column="50">++<pos:position pos:line="10" pos:column="52"/></operator></expr><operator pos:line="10" pos:column="52">,<pos:position pos:line="10" pos:column="53"/></operator> <expr><name pos:line="10" pos:column="54">tcbptr<pos:position pos:line="10" pos:column="60"/></name><operator pos:line="10" pos:column="60">+=<pos:position pos:line="10" pos:column="62"/></operator><literal type="number" pos:line="10" pos:column="62">2<pos:position pos:line="10" pos:column="63"/></literal></expr></incr>)<pos:position pos:line="10" pos:column="64"/></control>
		<block pos:line="11" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="12" pos:column="25">threadcacheblk<pos:position pos:line="12" pos:column="39"/></name> <modifier pos:line="12" pos:column="40">*<pos:position pos:line="12" pos:column="41"/></modifier><modifier pos:line="12" pos:column="41">*<pos:position pos:line="12" pos:column="42"/></modifier></type><name pos:line="12" pos:column="42">tcb<pos:position pos:line="12" pos:column="45"/></name><init pos:line="12" pos:column="45">=<expr><name pos:line="12" pos:column="46">tcbptr<pos:position pos:line="12" pos:column="52"/></name><operator pos:line="12" pos:column="52">+<pos:position pos:line="12" pos:column="53"/></operator><literal type="number" pos:line="12" pos:column="53">1<pos:position pos:line="12" pos:column="54"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="55"/></decl_stmt>		<comment type="block" pos:line="12" pos:column="65">/* come from oldest end of list */</comment>
			<comment type="block" pos:line="13" pos:column="25">/*tcsanitycheck(tcbptr);*/</comment>
			<for pos:line="14" pos:column="25">for<control pos:line="14" pos:column="28">(<init pos:line="14" pos:column="29">;<pos:position pos:line="14" pos:column="30"/></init> <condition><expr><operator pos:line="14" pos:column="31">*<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">tcb<pos:position pos:line="14" pos:column="35"/></name> <operator pos:line="14" pos:column="36">&amp;&amp;<pos:position pos:line="14" pos:column="46"/></operator> <name><name pos:line="14" pos:column="39">tc<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">-&gt;<pos:position pos:line="14" pos:column="46"/></operator><name pos:line="14" pos:column="43">frees<pos:position pos:line="14" pos:column="48"/></name></name><operator pos:line="14" pos:column="48">-<pos:position pos:line="14" pos:column="49"/></operator><name><operator pos:line="14" pos:column="49">(<pos:position pos:line="14" pos:column="50"/></operator><operator pos:line="14" pos:column="50">*<pos:position pos:line="14" pos:column="51"/></operator><name pos:line="14" pos:column="51">tcb<pos:position pos:line="14" pos:column="54"/></name><operator pos:line="14" pos:column="54">)<pos:position pos:line="14" pos:column="55"/></operator><operator pos:line="14" pos:column="55">-&gt;<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="57">lastUsed<pos:position pos:line="14" pos:column="65"/></name></name><operator pos:line="14" pos:column="65">&gt;=<pos:position pos:line="14" pos:column="70"/></operator><name pos:line="14" pos:column="67">age<pos:position pos:line="14" pos:column="70"/></name></expr>;<pos:position pos:line="14" pos:column="71"/></condition> <incr/>)<pos:position pos:line="14" pos:column="73"/></control>
			<block pos:line="15" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="16" pos:column="33">threadcacheblk<pos:position pos:line="16" pos:column="47"/></name> <modifier pos:line="16" pos:column="48">*<pos:position pos:line="16" pos:column="49"/></modifier></type><name pos:line="16" pos:column="49">f<pos:position pos:line="16" pos:column="50"/></name><init pos:line="16" pos:column="50">=<expr><operator pos:line="16" pos:column="51">*<pos:position pos:line="16" pos:column="52"/></operator><name pos:line="16" pos:column="52">tcb<pos:position pos:line="16" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="56"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="17" pos:column="33">size_t<pos:position pos:line="17" pos:column="39"/></name></type> <name pos:line="17" pos:column="40">blksize<pos:position pos:line="17" pos:column="47"/></name><init pos:line="17" pos:column="47">=<expr><name><name pos:line="17" pos:column="48">f<pos:position pos:line="17" pos:column="49"/></name><operator pos:line="17" pos:column="49">-&gt;<pos:position pos:line="17" pos:column="54"/></operator><name pos:line="17" pos:column="51">size<pos:position pos:line="17" pos:column="55"/></name></name></expr></init></decl>;<pos:position pos:line="17" pos:column="56"/></decl_stmt> <comment type="block" pos:line="17" pos:column="57">/*nedblksize(f);*/</comment>
				<expr_stmt><expr><call><name pos:line="18" pos:column="33">assert<pos:position pos:line="18" pos:column="39"/></name><argument_list pos:line="18" pos:column="39">(<argument><expr><name pos:line="18" pos:column="40">blksize<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">&lt;=<pos:position pos:line="18" pos:column="52"/></operator><call><name pos:line="18" pos:column="49">nedblksize<pos:position pos:line="18" pos:column="59"/></name><argument_list pos:line="18" pos:column="59">(<argument><expr><name pos:line="18" pos:column="60">f<pos:position pos:line="18" pos:column="61"/></name></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="19" pos:column="33">assert<pos:position pos:line="19" pos:column="39"/></name><argument_list pos:line="19" pos:column="39">(<argument><expr><name pos:line="19" pos:column="40">blksize<pos:position pos:line="19" pos:column="47"/></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef<pos:position pos:line="20" pos:column="7"/></cpp:directive> <name pos:line="20" pos:column="8">FULLSANITYCHECKS<pos:position pos:line="20" pos:column="24"/></name></cpp:ifdef>
				<expr_stmt><expr><call><name pos:line="21" pos:column="33">assert<pos:position pos:line="21" pos:column="39"/></name><argument_list pos:line="21" pos:column="39">(<argument><expr><operator pos:line="21" pos:column="40">*<pos:position pos:line="21" pos:column="41"/></operator><operator pos:line="21" pos:column="41">(<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="42">unsigned<pos:position pos:line="21" pos:column="50"/></name> <name pos:line="21" pos:column="51">int<pos:position pos:line="21" pos:column="54"/></name> <operator pos:line="21" pos:column="55">*<pos:position pos:line="21" pos:column="56"/></operator><operator pos:line="21" pos:column="56">)<pos:position pos:line="21" pos:column="57"/></operator> <literal type="string" pos:line="21" pos:column="58">"NEDN"<pos:position pos:line="21" pos:column="64"/></literal><operator pos:line="21" pos:column="64">==<pos:position pos:line="21" pos:column="66"/></operator><name><operator pos:line="21" pos:column="66">(<pos:position pos:line="21" pos:column="67"/></operator><operator pos:line="21" pos:column="67">*<pos:position pos:line="21" pos:column="68"/></operator><name pos:line="21" pos:column="68">tcb<pos:position pos:line="21" pos:column="71"/></name><operator pos:line="21" pos:column="71">)<pos:position pos:line="21" pos:column="72"/></operator><operator pos:line="21" pos:column="72">-&gt;<pos:position pos:line="21" pos:column="77"/></operator><name pos:line="21" pos:column="74">magic<pos:position pos:line="21" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="81"/></expr_stmt>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
				<expr_stmt><expr><operator pos:line="23" pos:column="33">*<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="34">tcb<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">=<pos:position pos:line="23" pos:column="38"/></operator><name><operator pos:line="23" pos:column="38">(<pos:position pos:line="23" pos:column="39"/></operator><operator pos:line="23" pos:column="39">*<pos:position pos:line="23" pos:column="40"/></operator><name pos:line="23" pos:column="40">tcb<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">)<pos:position pos:line="23" pos:column="44"/></operator><operator pos:line="23" pos:column="44">-&gt;<pos:position pos:line="23" pos:column="49"/></operator><name pos:line="23" pos:column="46">prev<pos:position pos:line="23" pos:column="50"/></name></name></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt>
				<if pos:line="24" pos:column="33">if<condition pos:line="24" pos:column="35">(<expr><operator pos:line="24" pos:column="36">*<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="37">tcb<pos:position pos:line="24" pos:column="40"/></name></expr>)<pos:position pos:line="24" pos:column="41"/></condition><then pos:line="24" pos:column="41">
					<block type="pseudo"><expr_stmt><expr><name><operator pos:line="25" pos:column="41">(<pos:position pos:line="25" pos:column="42"/></operator><operator pos:line="25" pos:column="42">*<pos:position pos:line="25" pos:column="43"/></operator><name pos:line="25" pos:column="43">tcb<pos:position pos:line="25" pos:column="46"/></name><operator pos:line="25" pos:column="46">)<pos:position pos:line="25" pos:column="47"/></operator><operator pos:line="25" pos:column="47">-&gt;<pos:position pos:line="25" pos:column="52"/></operator><name pos:line="25" pos:column="49">next<pos:position pos:line="25" pos:column="53"/></name></name><operator pos:line="25" pos:column="53">=<pos:position pos:line="25" pos:column="54"/></operator><literal type="number" pos:line="25" pos:column="54">0<pos:position pos:line="25" pos:column="55"/></literal></expr>;<pos:position pos:line="25" pos:column="56"/></expr_stmt></block></then>
				<else pos:line="26" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><operator pos:line="27" pos:column="41">*<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="42">tcbptr<pos:position pos:line="27" pos:column="48"/></name><operator pos:line="27" pos:column="48">=<pos:position pos:line="27" pos:column="49"/></operator><literal type="number" pos:line="27" pos:column="49">0<pos:position pos:line="27" pos:column="50"/></literal></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt></block></else></if>
				<expr_stmt><expr><name><name pos:line="28" pos:column="33">tc<pos:position pos:line="28" pos:column="35"/></name><operator pos:line="28" pos:column="35">-&gt;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="37">freeInCache<pos:position pos:line="28" pos:column="48"/></name></name><operator pos:line="28" pos:column="48">-=<pos:position pos:line="28" pos:column="50"/></operator><name pos:line="28" pos:column="50">blksize<pos:position pos:line="28" pos:column="57"/></name></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="29" pos:column="33">assert<pos:position pos:line="29" pos:column="39"/></name><argument_list pos:line="29" pos:column="39">(<argument><expr><operator pos:line="29" pos:column="40">(<pos:position pos:line="29" pos:column="41"/></operator><name pos:line="29" pos:column="41">long<pos:position pos:line="29" pos:column="45"/></name><operator pos:line="29" pos:column="45">)<pos:position pos:line="29" pos:column="46"/></operator> <name><name pos:line="29" pos:column="47">tc<pos:position pos:line="29" pos:column="49"/></name><operator pos:line="29" pos:column="49">-&gt;<pos:position pos:line="29" pos:column="54"/></operator><name pos:line="29" pos:column="51">freeInCache<pos:position pos:line="29" pos:column="62"/></name></name><operator pos:line="29" pos:column="62">&gt;=<pos:position pos:line="29" pos:column="67"/></operator><literal type="number" pos:line="29" pos:column="64">0<pos:position pos:line="29" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="30" pos:column="33">mspace_free<pos:position pos:line="30" pos:column="44"/></name><argument_list pos:line="30" pos:column="44">(<argument><expr><literal type="number" pos:line="30" pos:column="45">0<pos:position pos:line="30" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">f<pos:position pos:line="30" pos:column="49"/></name></expr></argument>)<pos:position pos:line="30" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="51"/></expr_stmt>
				<comment type="block" pos:line="31" pos:column="33">/*tcsanitycheck(tcbptr);*/</comment>
			}<pos:position pos:line="32" pos:column="26"/></block></for>
		}<pos:position pos:line="33" pos:column="18"/></block></for>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
<cpp:ifdef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifdef<pos:position pos:line="35" pos:column="7"/></cpp:directive> <name pos:line="35" pos:column="8">FULLSANITYCHECKS<pos:position pos:line="35" pos:column="24"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">tcfullsanitycheck<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">tc<pos:position pos:line="36" pos:column="29"/></name></expr></argument>)<pos:position pos:line="36" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif<pos:position pos:line="37" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
