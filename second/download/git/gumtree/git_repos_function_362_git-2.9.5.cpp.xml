<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_362_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">verify_index_from<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">index_state<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">istate<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="64">const<pos:position pos:line="1" pos:column="69"/></specifier> <name pos:line="1" pos:column="70">char<pos:position pos:line="1" pos:column="74"/></name> <modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type><name pos:line="1" pos:column="76">path<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">ssize_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">n<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">stat<pos:position pos:line="5" pos:column="20"/></name></name></type> <name pos:line="5" pos:column="21">st<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name></type> <name><name pos:line="6" pos:column="23">sha1<pos:position pos:line="6" pos:column="27"/></name><index pos:line="6" pos:column="27">[<expr><literal type="number" pos:line="6" pos:column="28">20<pos:position pos:line="6" pos:column="30"/></literal></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name><name pos:line="8" pos:column="14">istate<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">-&gt;<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="22">initialized<pos:position pos:line="8" pos:column="33"/></name></name></expr>)<pos:position pos:line="8" pos:column="34"/></condition><then pos:line="8" pos:column="34">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="11" pos:column="9">fd<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">open<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">path<pos:position pos:line="11" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="25">O_RDONLY<pos:position pos:line="11" pos:column="33"/></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">fd<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">&lt;<pos:position pos:line="12" pos:column="20"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20">
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></return></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">fstat<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">fd<pos:position pos:line="15" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="23">&amp;<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="24">st<pos:position pos:line="15" pos:column="26"/></name></expr></argument>)<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="28"/></condition><then pos:line="15" pos:column="28">
		<block type="pseudo"><goto pos:line="16" pos:column="17">goto <name pos:line="16" pos:column="22">out<pos:position pos:line="16" pos:column="25"/></name>;<pos:position pos:line="16" pos:column="26"/></goto></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name><name pos:line="18" pos:column="13">st<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">.<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">st_size<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">&lt;<pos:position pos:line="18" pos:column="28"/></operator> <sizeof pos:line="18" pos:column="26">sizeof<argument_list pos:line="18" pos:column="32">(<argument><expr pos:line="18" pos:column="33">struct <name pos:line="18" pos:column="40">cache_header<pos:position pos:line="18" pos:column="52"/></name></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></sizeof> <operator pos:line="18" pos:column="54">+<pos:position pos:line="18" pos:column="55"/></operator> <literal type="number" pos:line="18" pos:column="56">20<pos:position pos:line="18" pos:column="58"/></literal></expr>)<pos:position pos:line="18" pos:column="59"/></condition><then pos:line="18" pos:column="59">
		<block type="pseudo"><goto pos:line="19" pos:column="17">goto <name pos:line="19" pos:column="22">out<pos:position pos:line="19" pos:column="25"/></name>;<pos:position pos:line="19" pos:column="26"/></goto></block></then></if>

	<expr_stmt><expr><name pos:line="21" pos:column="9">n<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <call><name pos:line="21" pos:column="13">pread_in_full<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><name pos:line="21" pos:column="27">fd<pos:position pos:line="21" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="31">sha1<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="37">20<pos:position pos:line="21" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="41">st<pos:position pos:line="21" pos:column="43"/></name><operator pos:line="21" pos:column="43">.<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="44">st_size<pos:position pos:line="21" pos:column="51"/></name></name> <operator pos:line="21" pos:column="52">-<pos:position pos:line="21" pos:column="53"/></operator> <literal type="number" pos:line="21" pos:column="54">20<pos:position pos:line="21" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="58"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">n<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">!=<pos:position pos:line="22" pos:column="17"/></operator> <literal type="number" pos:line="22" pos:column="18">20<pos:position pos:line="22" pos:column="20"/></literal></expr>)<pos:position pos:line="22" pos:column="21"/></condition><then pos:line="22" pos:column="21">
		<block type="pseudo"><goto pos:line="23" pos:column="17">goto <name pos:line="23" pos:column="22">out<pos:position pos:line="23" pos:column="25"/></name>;<pos:position pos:line="23" pos:column="26"/></goto></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">hashcmp<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name><name pos:line="25" pos:column="21">istate<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">-&gt;<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="29">sha1<pos:position pos:line="25" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="35">sha1<pos:position pos:line="25" pos:column="39"/></name></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="41"/></condition><then pos:line="25" pos:column="41">
		<block type="pseudo"><goto pos:line="26" pos:column="17">goto <name pos:line="26" pos:column="22">out<pos:position pos:line="26" pos:column="25"/></name>;<pos:position pos:line="26" pos:column="26"/></goto></block></then></if>

	<expr_stmt><expr><call><name pos:line="28" pos:column="9">close<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">fd<pos:position pos:line="28" pos:column="17"/></name></expr></argument>)<pos:position pos:line="28" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="19"/></expr_stmt>
	<return pos:line="29" pos:column="9">return <expr><literal type="number" pos:line="29" pos:column="16">1<pos:position pos:line="29" pos:column="17"/></literal></expr>;<pos:position pos:line="29" pos:column="18"/></return>

<label><name pos:line="31" pos:column="1">out<pos:position pos:line="31" pos:column="4"/></name>:<pos:position pos:line="31" pos:column="5"/></label>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">close<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">fd<pos:position pos:line="32" pos:column="17"/></name></expr></argument>)<pos:position pos:line="32" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="19"/></expr_stmt>
	<return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">0<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
