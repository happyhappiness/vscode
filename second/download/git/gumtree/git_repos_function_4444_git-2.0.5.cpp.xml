<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4444_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">copy_to_sideband<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">in<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">int<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">out<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">void<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">arg<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">data<pos:position pos:line="3" pos:column="18"/></name><index pos:line="3" pos:column="18">[<expr><literal type="number" pos:line="3" pos:column="19">128<pos:position pos:line="3" pos:column="22"/></literal></expr>]<pos:position pos:line="3" pos:column="23"/></index></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<while pos:line="4" pos:column="9">while <condition pos:line="4" pos:column="15">(<expr><literal type="number" pos:line="4" pos:column="16">1<pos:position pos:line="4" pos:column="17"/></literal></expr>)<pos:position pos:line="4" pos:column="18"/></condition> <block pos:line="4" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">ssize_t<pos:position pos:line="5" pos:column="24"/></name></type> <name pos:line="5" pos:column="25">sz<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><call><name pos:line="5" pos:column="30">xread<pos:position pos:line="5" pos:column="35"/></name><argument_list pos:line="5" pos:column="35">(<argument><expr><name pos:line="5" pos:column="36">in<pos:position pos:line="5" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="40">data<pos:position pos:line="5" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="46">sizeof<argument_list pos:line="5" pos:column="52">(<argument><expr><name pos:line="5" pos:column="53">data<pos:position pos:line="5" pos:column="57"/></name></expr></argument>)<pos:position pos:line="5" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="60"/></decl_stmt>
		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><name pos:line="6" pos:column="21">sz<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">&lt;=<pos:position pos:line="6" pos:column="29"/></operator> <literal type="number" pos:line="6" pos:column="27">0<pos:position pos:line="6" pos:column="28"/></literal></expr>)<pos:position pos:line="6" pos:column="29"/></condition><then pos:line="6" pos:column="29">
			<block type="pseudo"><break pos:line="7" pos:column="25">break;<pos:position pos:line="7" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">send_sideband<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><literal type="number" pos:line="8" pos:column="31">1<pos:position pos:line="8" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="34">2<pos:position pos:line="8" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="37">data<pos:position pos:line="8" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="43">sz<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="47">use_sideband<pos:position pos:line="8" pos:column="59"/></name></expr></argument>)<pos:position pos:line="8" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">close<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">in<pos:position pos:line="10" pos:column="17"/></name></expr></argument>)<pos:position pos:line="10" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>
	<return pos:line="11" pos:column="9">return <expr><literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr>;<pos:position pos:line="11" pos:column="18"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
