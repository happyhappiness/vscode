<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6368_git-2.8.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">re_node_set_init_copy<pos:position pos:line="3" pos:column="22"/></name> <parameter_list pos:line="3" pos:column="23">(<parameter><decl><type><name pos:line="3" pos:column="24">re_node_set<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">dest<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="43">const<pos:position pos:line="3" pos:column="48"/></specifier> <name pos:line="3" pos:column="49">re_node_set<pos:position pos:line="3" pos:column="60"/></name> <modifier pos:line="3" pos:column="61">*<pos:position pos:line="3" pos:column="62"/></modifier></type><name pos:line="3" pos:column="62">src<pos:position pos:line="3" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="66"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <expr_stmt><expr><name><name pos:line="5" pos:column="3">dest<pos:position pos:line="5" pos:column="7"/></name><operator pos:line="5" pos:column="7">-&gt;<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="9">nelem<pos:position pos:line="5" pos:column="14"/></name></name> <operator pos:line="5" pos:column="15">=<pos:position pos:line="5" pos:column="16"/></operator> <name><name pos:line="5" pos:column="17">src<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">-&gt;<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="22">nelem<pos:position pos:line="5" pos:column="27"/></name></name></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name><name pos:line="6" pos:column="7">src<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">-&gt;<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="12">nelem<pos:position pos:line="6" pos:column="17"/></name></name> <operator pos:line="6" pos:column="18">&gt;<pos:position pos:line="6" pos:column="22"/></operator> <literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr>)<pos:position pos:line="6" pos:column="22"/></condition><then pos:line="6" pos:column="22">
    <block pos:line="7" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="8" pos:column="7">dest<pos:position pos:line="8" pos:column="11"/></name><operator pos:line="8" pos:column="11">-&gt;<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="13">alloc<pos:position pos:line="8" pos:column="18"/></name></name> <operator pos:line="8" pos:column="19">=<pos:position pos:line="8" pos:column="20"/></operator> <name><name pos:line="8" pos:column="21">dest<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">-&gt;<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="27">nelem<pos:position pos:line="8" pos:column="32"/></name></name></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="9" pos:column="7">dest<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">elems<pos:position pos:line="9" pos:column="18"/></name></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <call><name pos:line="9" pos:column="21">re_malloc<pos:position pos:line="9" pos:column="30"/></name> <argument_list pos:line="9" pos:column="31">(<argument><expr><name pos:line="9" pos:column="32">int<pos:position pos:line="9" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="37">dest<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">-&gt;<pos:position pos:line="9" pos:column="46"/></operator><name pos:line="9" pos:column="43">alloc<pos:position pos:line="9" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="50"/></expr_stmt>
      <if pos:line="10" pos:column="7">if <condition pos:line="10" pos:column="10">(<expr><call><name pos:line="10" pos:column="11">BE<pos:position pos:line="10" pos:column="13"/></name> <argument_list pos:line="10" pos:column="14">(<argument><expr><name><name pos:line="10" pos:column="15">dest<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">-&gt;<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="21">elems<pos:position pos:line="10" pos:column="26"/></name></name> <operator pos:line="10" pos:column="27">==<pos:position pos:line="10" pos:column="29"/></operator> <name pos:line="10" pos:column="30">NULL<pos:position pos:line="10" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="36">0<pos:position pos:line="10" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="39"/></condition><then pos:line="10" pos:column="39">
	<block pos:line="11" pos:column="9">{
	  <expr_stmt><expr><name><name pos:line="12" pos:column="11">dest<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">-&gt;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">alloc<pos:position pos:line="12" pos:column="22"/></name></name> <operator pos:line="12" pos:column="23">=<pos:position pos:line="12" pos:column="24"/></operator> <name><name pos:line="12" pos:column="25">dest<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="31">nelem<pos:position pos:line="12" pos:column="36"/></name></name> <operator pos:line="12" pos:column="37">=<pos:position pos:line="12" pos:column="38"/></operator> <literal type="number" pos:line="12" pos:column="39">0<pos:position pos:line="12" pos:column="40"/></literal></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
	  <return pos:line="13" pos:column="11">return <expr><name pos:line="13" pos:column="18">REG_ESPACE<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">memcpy<pos:position pos:line="15" pos:column="13"/></name> <argument_list pos:line="15" pos:column="14">(<argument><expr><name><name pos:line="15" pos:column="15">dest<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">-&gt;<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="21">elems<pos:position pos:line="15" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="28">src<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">-&gt;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="33">elems<pos:position pos:line="15" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="40">src<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">-&gt;<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="45">nelem<pos:position pos:line="15" pos:column="50"/></name></name> <operator pos:line="15" pos:column="51">*<pos:position pos:line="15" pos:column="52"/></operator> <sizeof pos:line="15" pos:column="53">sizeof <argument_list pos:line="15" pos:column="60">(<argument><expr><name pos:line="15" pos:column="61">int<pos:position pos:line="15" pos:column="64"/></name></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then>
  <else pos:line="17" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="5">re_node_set_init_empty<pos:position pos:line="18" pos:column="27"/></name> <argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">dest<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt></block></else></if>
  <return pos:line="19" pos:column="3">return <expr><name pos:line="19" pos:column="10">REG_NOERROR<pos:position pos:line="19" pos:column="21"/></name></expr>;<pos:position pos:line="19" pos:column="22"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
