<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3109_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">show_http_message<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">strbuf<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">type<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">strbuf<pos:position pos:line="1" pos:column="64"/></name></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">charset<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
			     <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">strbuf<pos:position pos:line="2" pos:column="43"/></name></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">msg<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">p<pos:position pos:line="4" pos:column="22"/></name></decl>, <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="25">eol<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * We only show text/plain parts, as other types are likely
	 * to be ugly to look at on the user's terminal.
	 */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">strcmp<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name><name pos:line="10" pos:column="20">type<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">-&gt;<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="26">buf<pos:position pos:line="10" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="31">"text/plain"<pos:position pos:line="10" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="45"/></condition><then pos:line="10" pos:column="45">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><operator pos:line="11" pos:column="24">-<pos:position pos:line="11" pos:column="25"/></operator><literal type="number" pos:line="11" pos:column="25">1<pos:position pos:line="11" pos:column="26"/></literal></expr>;<pos:position pos:line="11" pos:column="27"/></return></block></then></if>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">charset<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">-&gt;<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="22">len<pos:position pos:line="12" pos:column="25"/></name></name></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">strbuf_reencode<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">msg<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="38">charset<pos:position pos:line="13" pos:column="45"/></name><operator pos:line="13" pos:column="45">-&gt;<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="47">buf<pos:position pos:line="13" pos:column="50"/></name></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="52">get_log_output_encoding<pos:position pos:line="13" pos:column="75"/></name><argument_list pos:line="13" pos:column="75">()<pos:position pos:line="13" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="79"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">strbuf_trim<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">msg<pos:position pos:line="15" pos:column="24"/></name></expr></argument>)<pos:position pos:line="15" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name><name pos:line="16" pos:column="14">msg<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">-&gt;<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="19">len<pos:position pos:line="16" pos:column="22"/></name></name></expr>)<pos:position pos:line="16" pos:column="23"/></condition><then pos:line="16" pos:column="23">
		<block type="pseudo"><return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">-<pos:position pos:line="17" pos:column="25"/></operator><literal type="number" pos:line="17" pos:column="25">1<pos:position pos:line="17" pos:column="26"/></literal></expr>;<pos:position pos:line="17" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">p<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <name><name pos:line="19" pos:column="13">msg<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">-&gt;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="18">buf<pos:position pos:line="19" pos:column="21"/></name></name></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>
	<do pos:line="20" pos:column="9">do <block pos:line="20" pos:column="12">{
		<expr_stmt><expr><name pos:line="21" pos:column="17">eol<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="23">strchrnul<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">p<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="21" pos:column="36">'\n'<pos:position pos:line="21" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">fprintf<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">stderr<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="33">"remote: %.*s\n"<pos:position pos:line="22" pos:column="49"/></literal></expr></argument>, <argument><expr><call pos:line="22" pos:column="51">(<name pos:line="22" pos:column="52">int<pos:position pos:line="22" pos:column="55"/></name>)<argument_list pos:line="22" pos:column="56">(<argument><expr><name pos:line="22" pos:column="57">eol<pos:position pos:line="22" pos:column="60"/></name> <operator pos:line="22" pos:column="61">-<pos:position pos:line="22" pos:column="62"/></operator> <name pos:line="22" pos:column="63">p<pos:position pos:line="22" pos:column="64"/></name></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="22" pos:column="67">p<pos:position pos:line="22" pos:column="68"/></name></expr></argument>)<pos:position pos:line="22" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">p<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="21">eol<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">+<pos:position pos:line="23" pos:column="26"/></operator> <literal type="number" pos:line="23" pos:column="27">1<pos:position pos:line="23" pos:column="28"/></literal></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block> while<condition pos:line="24" pos:column="16">(<expr><operator pos:line="24" pos:column="17">*<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">eol<pos:position pos:line="24" pos:column="21"/></name></expr>)<pos:position pos:line="24" pos:column="22"/></condition>;<pos:position pos:line="24" pos:column="23"/></do>
	<return pos:line="25" pos:column="9">return <expr><literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
