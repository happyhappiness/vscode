<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6455_git-2.8.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_fetch__tool<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">argc<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier><modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">argv<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">prefix<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">verbose<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><literal type="number" pos:line="3" pos:column="23">0<pos:position pos:line="3" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">force<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">sopt<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><literal type="number" pos:line="5" pos:column="20">0<pos:position pos:line="5" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><literal type="number" pos:line="7" pos:column="16">1<pos:position pos:line="7" pos:column="17"/></literal> <operator pos:line="7" pos:column="18">&lt;<pos:position pos:line="7" pos:column="22"/></operator> <name pos:line="7" pos:column="20">argc<pos:position pos:line="7" pos:column="24"/></name></expr>)<pos:position pos:line="7" pos:column="25"/></condition> <block pos:line="7" pos:column="26">{
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name pos:line="8" pos:column="23">char<pos:position pos:line="8" pos:column="27"/></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">arg<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><name><name pos:line="8" pos:column="35">argv<pos:position pos:line="8" pos:column="39"/></name><index pos:line="8" pos:column="39">[<expr><literal type="number" pos:line="8" pos:column="40">1<pos:position pos:line="8" pos:column="41"/></literal></expr>]<pos:position pos:line="8" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">!<pos:position pos:line="9" pos:column="22"/></operator><call><name pos:line="9" pos:column="22">strcmp<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><literal type="string" pos:line="9" pos:column="29">"-v"<pos:position pos:line="9" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="35">arg<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="40"/></condition><then pos:line="9" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="25">verbose<pos:position pos:line="10" pos:column="32"/></name> <operator pos:line="10" pos:column="33">=<pos:position pos:line="10" pos:column="34"/></operator> <literal type="number" pos:line="10" pos:column="35">1<pos:position pos:line="10" pos:column="36"/></literal></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt></block></then>
		<elseif pos:line="11" pos:column="17">else <if pos:line="11" pos:column="22">if <condition pos:line="11" pos:column="25">(<expr><operator pos:line="11" pos:column="26">!<pos:position pos:line="11" pos:column="27"/></operator><call><name pos:line="11" pos:column="27">strcmp<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><literal type="string" pos:line="11" pos:column="34">"-f"<pos:position pos:line="11" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="40">arg<pos:position pos:line="11" pos:column="43"/></name></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="45"/></condition><then pos:line="11" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="25">force<pos:position pos:line="12" pos:column="30"/></name> <operator pos:line="12" pos:column="31">=<pos:position pos:line="12" pos:column="32"/></operator> <literal type="number" pos:line="12" pos:column="33">1<pos:position pos:line="12" pos:column="34"/></literal></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="13" pos:column="17">else <if pos:line="13" pos:column="22">if <condition pos:line="13" pos:column="25">(<expr><operator pos:line="13" pos:column="26">!<pos:position pos:line="13" pos:column="27"/></operator><call><name pos:line="13" pos:column="27">strcmp<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><literal type="string" pos:line="13" pos:column="34">"-s"<pos:position pos:line="13" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">arg<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="45"/></condition><then pos:line="13" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="25">sopt<pos:position pos:line="14" pos:column="29"/></name> <operator pos:line="14" pos:column="30">=<pos:position pos:line="14" pos:column="31"/></operator> <literal type="number" pos:line="14" pos:column="32">1<pos:position pos:line="14" pos:column="33"/></literal></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt></block></then></if></elseif>
		<else pos:line="15" pos:column="17">else
			<block type="pseudo"><break pos:line="16" pos:column="25">break;<pos:position pos:line="16" pos:column="31"/></break></block></else></if>
		<expr_stmt><expr><name pos:line="17" pos:column="17">argc<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">--<pos:position pos:line="17" pos:column="23"/></operator></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name pos:line="18" pos:column="17">argv<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">++<pos:position pos:line="18" pos:column="23"/></operator></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></while>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">argc<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">&lt;=<pos:position pos:line="21" pos:column="23"/></operator> <literal type="number" pos:line="21" pos:column="21">1<pos:position pos:line="21" pos:column="22"/></literal></expr>)<pos:position pos:line="21" pos:column="23"/></condition><then pos:line="21" pos:column="23">
		<block type="pseudo"><return pos:line="22" pos:column="17">return <expr><call><name pos:line="22" pos:column="24">error<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><literal type="string" pos:line="22" pos:column="30">"Missing subcommand"<pos:position pos:line="22" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="52"/></return></block></then></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><call><name pos:line="24" pos:column="14">strcmp<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><literal type="string" pos:line="24" pos:column="21">"append-fetch-head"<pos:position pos:line="24" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="42">argv<pos:position pos:line="24" pos:column="46"/></name><index pos:line="24" pos:column="46">[<expr><literal type="number" pos:line="24" pos:column="47">1<pos:position pos:line="24" pos:column="48"/></literal></expr>]<pos:position pos:line="24" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="51"/></condition><then pos:line="24" pos:column="51"> <block pos:line="24" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">int<pos:position pos:line="25" pos:column="20"/></name></type> <name pos:line="25" pos:column="21">result<pos:position pos:line="25" pos:column="27"/></name></decl>;<pos:position pos:line="25" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">FILE<pos:position pos:line="26" pos:column="21"/></name> <modifier pos:line="26" pos:column="22">*<pos:position pos:line="26" pos:column="23"/></modifier></type><name pos:line="26" pos:column="23">fp<pos:position pos:line="26" pos:column="25"/></name></decl>;<pos:position pos:line="26" pos:column="26"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">char<pos:position pos:line="27" pos:column="21"/></name> <modifier pos:line="27" pos:column="22">*<pos:position pos:line="27" pos:column="23"/></modifier></type><name pos:line="27" pos:column="23">filename<pos:position pos:line="27" pos:column="31"/></name></decl>;<pos:position pos:line="27" pos:column="32"/></decl_stmt>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">argc<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">!=<pos:position pos:line="29" pos:column="28"/></operator> <literal type="number" pos:line="29" pos:column="29">8<pos:position pos:line="29" pos:column="30"/></literal></expr>)<pos:position pos:line="29" pos:column="31"/></condition><then pos:line="29" pos:column="31">
			<block type="pseudo"><return pos:line="30" pos:column="25">return <expr><call><name pos:line="30" pos:column="32">error<pos:position pos:line="30" pos:column="37"/></name><argument_list pos:line="30" pos:column="37">(<argument><expr><literal type="string" pos:line="30" pos:column="38">"append-fetch-head takes 6 args"<pos:position pos:line="30" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="72"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="31" pos:column="17">filename<pos:position pos:line="31" pos:column="25"/></name> <operator pos:line="31" pos:column="26">=<pos:position pos:line="31" pos:column="27"/></operator> <call><name pos:line="31" pos:column="28">git_path_fetch_head<pos:position pos:line="31" pos:column="47"/></name><argument_list pos:line="31" pos:column="47">()<pos:position pos:line="31" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">fp<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">=<pos:position pos:line="32" pos:column="21"/></operator> <call><name pos:line="32" pos:column="22">fopen<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">(<argument><expr><name pos:line="32" pos:column="28">filename<pos:position pos:line="32" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="38">"a"<pos:position pos:line="32" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><operator pos:line="33" pos:column="21">!<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">fp<pos:position pos:line="33" pos:column="24"/></name></expr>)<pos:position pos:line="33" pos:column="25"/></condition><then pos:line="33" pos:column="25">
			<block type="pseudo"><return pos:line="34" pos:column="25">return <expr><call><name pos:line="34" pos:column="32">error<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><literal type="string" pos:line="34" pos:column="38">"cannot open %s: %s"<pos:position pos:line="34" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="60">filename<pos:position pos:line="34" pos:column="68"/></name></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="70">strerror<pos:position pos:line="34" pos:column="78"/></name><argument_list pos:line="34" pos:column="78">(<argument><expr><name pos:line="34" pos:column="79">errno<pos:position pos:line="34" pos:column="84"/></name></expr></argument>)<pos:position pos:line="34" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="87"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="35" pos:column="17">result<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">=<pos:position pos:line="35" pos:column="25"/></operator> <call><name pos:line="35" pos:column="26">append_fetch_head<pos:position pos:line="35" pos:column="43"/></name><argument_list pos:line="35" pos:column="43">(<argument><expr><name pos:line="35" pos:column="44">fp<pos:position pos:line="35" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="48">argv<pos:position pos:line="35" pos:column="52"/></name><index pos:line="35" pos:column="52">[<expr><literal type="number" pos:line="35" pos:column="53">2<pos:position pos:line="35" pos:column="54"/></literal></expr>]<pos:position pos:line="35" pos:column="55"/></index></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="57">argv<pos:position pos:line="35" pos:column="61"/></name><index pos:line="35" pos:column="61">[<expr><literal type="number" pos:line="35" pos:column="62">3<pos:position pos:line="35" pos:column="63"/></literal></expr>]<pos:position pos:line="35" pos:column="64"/></index></name></expr></argument>,
					   <argument><expr><name><name pos:line="36" pos:column="44">argv<pos:position pos:line="36" pos:column="48"/></name><index pos:line="36" pos:column="48">[<expr><literal type="number" pos:line="36" pos:column="49">4<pos:position pos:line="36" pos:column="50"/></literal></expr>]<pos:position pos:line="36" pos:column="51"/></index></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="53">argv<pos:position pos:line="36" pos:column="57"/></name><index pos:line="36" pos:column="57">[<expr><literal type="number" pos:line="36" pos:column="58">5<pos:position pos:line="36" pos:column="59"/></literal></expr>]<pos:position pos:line="36" pos:column="60"/></index></name></expr></argument>,
					   <argument><expr><name><name pos:line="37" pos:column="44">argv<pos:position pos:line="37" pos:column="48"/></name><index pos:line="37" pos:column="48">[<expr><literal type="number" pos:line="37" pos:column="49">6<pos:position pos:line="37" pos:column="50"/></literal></expr>]<pos:position pos:line="37" pos:column="51"/></index></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="53">!<pos:position pos:line="37" pos:column="54"/></operator><operator pos:line="37" pos:column="54">!<pos:position pos:line="37" pos:column="55"/></operator><name><name pos:line="37" pos:column="55">argv<pos:position pos:line="37" pos:column="59"/></name><index pos:line="37" pos:column="59">[<expr><literal type="number" pos:line="37" pos:column="60">7<pos:position pos:line="37" pos:column="61"/></literal></expr>]<pos:position pos:line="37" pos:column="62"/></index><index pos:line="37" pos:column="62">[<expr><literal type="number" pos:line="37" pos:column="63">0<pos:position pos:line="37" pos:column="64"/></literal></expr>]<pos:position pos:line="37" pos:column="65"/></index></name></expr></argument>,
					   <argument><expr><name pos:line="38" pos:column="44">verbose<pos:position pos:line="38" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="53">force<pos:position pos:line="38" pos:column="58"/></name></expr></argument>)<pos:position pos:line="38" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">fclose<pos:position pos:line="39" pos:column="23"/></name><argument_list pos:line="39" pos:column="23">(<argument><expr><name pos:line="39" pos:column="24">fp<pos:position pos:line="39" pos:column="26"/></name></expr></argument>)<pos:position pos:line="39" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt>
		<return pos:line="40" pos:column="17">return <expr><name pos:line="40" pos:column="24">result<pos:position pos:line="40" pos:column="30"/></name></expr>;<pos:position pos:line="40" pos:column="31"/></return>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">!<pos:position pos:line="42" pos:column="14"/></operator><call><name pos:line="42" pos:column="14">strcmp<pos:position pos:line="42" pos:column="20"/></name><argument_list pos:line="42" pos:column="20">(<argument><expr><literal type="string" pos:line="42" pos:column="21">"native-store"<pos:position pos:line="42" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="37">argv<pos:position pos:line="42" pos:column="41"/></name><index pos:line="42" pos:column="41">[<expr><literal type="number" pos:line="42" pos:column="42">1<pos:position pos:line="42" pos:column="43"/></literal></expr>]<pos:position pos:line="42" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="42" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="46"/></condition><then pos:line="42" pos:column="46"> <block pos:line="42" pos:column="47">{
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">int<pos:position pos:line="43" pos:column="20"/></name></type> <name pos:line="43" pos:column="21">result<pos:position pos:line="43" pos:column="27"/></name></decl>;<pos:position pos:line="43" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="44" pos:column="17">FILE<pos:position pos:line="44" pos:column="21"/></name> <modifier pos:line="44" pos:column="22">*<pos:position pos:line="44" pos:column="23"/></modifier></type><name pos:line="44" pos:column="23">fp<pos:position pos:line="44" pos:column="25"/></name></decl>;<pos:position pos:line="44" pos:column="26"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">char<pos:position pos:line="45" pos:column="21"/></name> <modifier pos:line="45" pos:column="22">*<pos:position pos:line="45" pos:column="23"/></modifier></type><name pos:line="45" pos:column="23">filename<pos:position pos:line="45" pos:column="31"/></name></decl>;<pos:position pos:line="45" pos:column="32"/></decl_stmt>

		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">argc<pos:position pos:line="47" pos:column="25"/></name> <operator pos:line="47" pos:column="26">!=<pos:position pos:line="47" pos:column="28"/></operator> <literal type="number" pos:line="47" pos:column="29">5<pos:position pos:line="47" pos:column="30"/></literal></expr>)<pos:position pos:line="47" pos:column="31"/></condition><then pos:line="47" pos:column="31">
			<block type="pseudo"><return pos:line="48" pos:column="25">return <expr><call><name pos:line="48" pos:column="32">error<pos:position pos:line="48" pos:column="37"/></name><argument_list pos:line="48" pos:column="37">(<argument><expr><literal type="string" pos:line="48" pos:column="38">"fetch-native-store takes 3 args"<pos:position pos:line="48" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="73"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="49" pos:column="17">filename<pos:position pos:line="49" pos:column="25"/></name> <operator pos:line="49" pos:column="26">=<pos:position pos:line="49" pos:column="27"/></operator> <call><name pos:line="49" pos:column="28">git_path_fetch_head<pos:position pos:line="49" pos:column="47"/></name><argument_list pos:line="49" pos:column="47">()<pos:position pos:line="49" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name pos:line="50" pos:column="17">fp<pos:position pos:line="50" pos:column="19"/></name> <operator pos:line="50" pos:column="20">=<pos:position pos:line="50" pos:column="21"/></operator> <call><name pos:line="50" pos:column="22">fopen<pos:position pos:line="50" pos:column="27"/></name><argument_list pos:line="50" pos:column="27">(<argument><expr><name pos:line="50" pos:column="28">filename<pos:position pos:line="50" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="38">"a"<pos:position pos:line="50" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="43"/></expr_stmt>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><operator pos:line="51" pos:column="21">!<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">fp<pos:position pos:line="51" pos:column="24"/></name></expr>)<pos:position pos:line="51" pos:column="25"/></condition><then pos:line="51" pos:column="25">
			<block type="pseudo"><return pos:line="52" pos:column="25">return <expr><call><name pos:line="52" pos:column="32">error<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><literal type="string" pos:line="52" pos:column="38">"cannot open %s: %s"<pos:position pos:line="52" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="60">filename<pos:position pos:line="52" pos:column="68"/></name></expr></argument>, <argument><expr><call><name pos:line="52" pos:column="70">strerror<pos:position pos:line="52" pos:column="78"/></name><argument_list pos:line="52" pos:column="78">(<argument><expr><name pos:line="52" pos:column="79">errno<pos:position pos:line="52" pos:column="84"/></name></expr></argument>)<pos:position pos:line="52" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="87"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="53" pos:column="17">result<pos:position pos:line="53" pos:column="23"/></name> <operator pos:line="53" pos:column="24">=<pos:position pos:line="53" pos:column="25"/></operator> <call><name pos:line="53" pos:column="26">fetch_native_store<pos:position pos:line="53" pos:column="44"/></name><argument_list pos:line="53" pos:column="44">(<argument><expr><name pos:line="53" pos:column="45">fp<pos:position pos:line="53" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="49">argv<pos:position pos:line="53" pos:column="53"/></name><index pos:line="53" pos:column="53">[<expr><literal type="number" pos:line="53" pos:column="54">2<pos:position pos:line="53" pos:column="55"/></literal></expr>]<pos:position pos:line="53" pos:column="56"/></index></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="58">argv<pos:position pos:line="53" pos:column="62"/></name><index pos:line="53" pos:column="62">[<expr><literal type="number" pos:line="53" pos:column="63">3<pos:position pos:line="53" pos:column="64"/></literal></expr>]<pos:position pos:line="53" pos:column="65"/></index></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="67">argv<pos:position pos:line="53" pos:column="71"/></name><index pos:line="53" pos:column="71">[<expr><literal type="number" pos:line="53" pos:column="72">4<pos:position pos:line="53" pos:column="73"/></literal></expr>]<pos:position pos:line="53" pos:column="74"/></index></name></expr></argument>,
					    <argument><expr><name pos:line="54" pos:column="45">verbose<pos:position pos:line="54" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="54">force<pos:position pos:line="54" pos:column="59"/></name></expr></argument>)<pos:position pos:line="54" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">fclose<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">fp<pos:position pos:line="55" pos:column="26"/></name></expr></argument>)<pos:position pos:line="55" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="28"/></expr_stmt>
		<return pos:line="56" pos:column="17">return <expr><name pos:line="56" pos:column="24">result<pos:position pos:line="56" pos:column="30"/></name></expr>;<pos:position pos:line="56" pos:column="31"/></return>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><operator pos:line="58" pos:column="13">!<pos:position pos:line="58" pos:column="14"/></operator><call><name pos:line="58" pos:column="14">strcmp<pos:position pos:line="58" pos:column="20"/></name><argument_list pos:line="58" pos:column="20">(<argument><expr><literal type="string" pos:line="58" pos:column="21">"parse-reflist"<pos:position pos:line="58" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="38">argv<pos:position pos:line="58" pos:column="42"/></name><index pos:line="58" pos:column="42">[<expr><literal type="number" pos:line="58" pos:column="43">1<pos:position pos:line="58" pos:column="44"/></literal></expr>]<pos:position pos:line="58" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="58" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="47"/></condition><then pos:line="58" pos:column="47"> <block pos:line="58" pos:column="48">{
		<decl_stmt><decl><type><specifier pos:line="59" pos:column="17">const<pos:position pos:line="59" pos:column="22"/></specifier> <name pos:line="59" pos:column="23">char<pos:position pos:line="59" pos:column="27"/></name> <modifier pos:line="59" pos:column="28">*<pos:position pos:line="59" pos:column="29"/></modifier></type><name pos:line="59" pos:column="29">reflist<pos:position pos:line="59" pos:column="36"/></name></decl>;<pos:position pos:line="59" pos:column="37"/></decl_stmt>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">argc<pos:position pos:line="60" pos:column="25"/></name> <operator pos:line="60" pos:column="26">!=<pos:position pos:line="60" pos:column="28"/></operator> <literal type="number" pos:line="60" pos:column="29">3<pos:position pos:line="60" pos:column="30"/></literal></expr>)<pos:position pos:line="60" pos:column="31"/></condition><then pos:line="60" pos:column="31">
			<block type="pseudo"><return pos:line="61" pos:column="25">return <expr><call><name pos:line="61" pos:column="32">error<pos:position pos:line="61" pos:column="37"/></name><argument_list pos:line="61" pos:column="37">(<argument><expr><literal type="string" pos:line="61" pos:column="38">"parse-reflist takes 1 arg"<pos:position pos:line="61" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="67"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="62" pos:column="17">reflist<pos:position pos:line="62" pos:column="24"/></name> <operator pos:line="62" pos:column="25">=<pos:position pos:line="62" pos:column="26"/></operator> <name><name pos:line="62" pos:column="27">argv<pos:position pos:line="62" pos:column="31"/></name><index pos:line="62" pos:column="31">[<expr><literal type="number" pos:line="62" pos:column="32">2<pos:position pos:line="62" pos:column="33"/></literal></expr>]<pos:position pos:line="62" pos:column="34"/></index></name></expr>;<pos:position pos:line="62" pos:column="35"/></expr_stmt>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><operator pos:line="63" pos:column="21">!<pos:position pos:line="63" pos:column="22"/></operator><call><name pos:line="63" pos:column="22">strcmp<pos:position pos:line="63" pos:column="28"/></name><argument_list pos:line="63" pos:column="28">(<argument><expr><name pos:line="63" pos:column="29">reflist<pos:position pos:line="63" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="38">"-"<pos:position pos:line="63" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="43"/></condition><then pos:line="63" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="25">reflist<pos:position pos:line="64" pos:column="32"/></name> <operator pos:line="64" pos:column="33">=<pos:position pos:line="64" pos:column="34"/></operator> <call><name pos:line="64" pos:column="35">get_stdin<pos:position pos:line="64" pos:column="44"/></name><argument_list pos:line="64" pos:column="44">()<pos:position pos:line="64" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="47"/></expr_stmt></block></then></if>
		<return pos:line="65" pos:column="17">return <expr><call><name pos:line="65" pos:column="24">parse_reflist<pos:position pos:line="65" pos:column="37"/></name><argument_list pos:line="65" pos:column="37">(<argument><expr><name pos:line="65" pos:column="38">reflist<pos:position pos:line="65" pos:column="45"/></name></expr></argument>)<pos:position pos:line="65" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="47"/></return>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if>
	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><operator pos:line="67" pos:column="13">!<pos:position pos:line="67" pos:column="14"/></operator><call><name pos:line="67" pos:column="14">strcmp<pos:position pos:line="67" pos:column="20"/></name><argument_list pos:line="67" pos:column="20">(<argument><expr><literal type="string" pos:line="67" pos:column="21">"pick-rref"<pos:position pos:line="67" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="34">argv<pos:position pos:line="67" pos:column="38"/></name><index pos:line="67" pos:column="38">[<expr><literal type="number" pos:line="67" pos:column="39">1<pos:position pos:line="67" pos:column="40"/></literal></expr>]<pos:position pos:line="67" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="67" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="43"/></condition><then pos:line="67" pos:column="43"> <block pos:line="67" pos:column="44">{
		<decl_stmt><decl><type><specifier pos:line="68" pos:column="17">const<pos:position pos:line="68" pos:column="22"/></specifier> <name pos:line="68" pos:column="23">char<pos:position pos:line="68" pos:column="27"/></name> <modifier pos:line="68" pos:column="28">*<pos:position pos:line="68" pos:column="29"/></modifier></type><name pos:line="68" pos:column="29">ls_remote_result<pos:position pos:line="68" pos:column="45"/></name></decl>;<pos:position pos:line="68" pos:column="46"/></decl_stmt>
		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">argc<pos:position pos:line="69" pos:column="25"/></name> <operator pos:line="69" pos:column="26">!=<pos:position pos:line="69" pos:column="28"/></operator> <literal type="number" pos:line="69" pos:column="29">4<pos:position pos:line="69" pos:column="30"/></literal></expr>)<pos:position pos:line="69" pos:column="31"/></condition><then pos:line="69" pos:column="31">
			<block type="pseudo"><return pos:line="70" pos:column="25">return <expr><call><name pos:line="70" pos:column="32">error<pos:position pos:line="70" pos:column="37"/></name><argument_list pos:line="70" pos:column="37">(<argument><expr><literal type="string" pos:line="70" pos:column="38">"pick-rref takes 2 args"<pos:position pos:line="70" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="64"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="71" pos:column="17">ls_remote_result<pos:position pos:line="71" pos:column="33"/></name> <operator pos:line="71" pos:column="34">=<pos:position pos:line="71" pos:column="35"/></operator> <name><name pos:line="71" pos:column="36">argv<pos:position pos:line="71" pos:column="40"/></name><index pos:line="71" pos:column="40">[<expr><literal type="number" pos:line="71" pos:column="41">3<pos:position pos:line="71" pos:column="42"/></literal></expr>]<pos:position pos:line="71" pos:column="43"/></index></name></expr>;<pos:position pos:line="71" pos:column="44"/></expr_stmt>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><operator pos:line="72" pos:column="21">!<pos:position pos:line="72" pos:column="22"/></operator><call><name pos:line="72" pos:column="22">strcmp<pos:position pos:line="72" pos:column="28"/></name><argument_list pos:line="72" pos:column="28">(<argument><expr><name pos:line="72" pos:column="29">ls_remote_result<pos:position pos:line="72" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="47">"-"<pos:position pos:line="72" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="52"/></condition><then pos:line="72" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="25">ls_remote_result<pos:position pos:line="73" pos:column="41"/></name> <operator pos:line="73" pos:column="42">=<pos:position pos:line="73" pos:column="43"/></operator> <call><name pos:line="73" pos:column="44">get_stdin<pos:position pos:line="73" pos:column="53"/></name><argument_list pos:line="73" pos:column="53">()<pos:position pos:line="73" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="56"/></expr_stmt></block></then></if>
		<return pos:line="74" pos:column="17">return <expr><call><name pos:line="74" pos:column="24">pick_rref<pos:position pos:line="74" pos:column="33"/></name><argument_list pos:line="74" pos:column="33">(<argument><expr><name pos:line="74" pos:column="34">sopt<pos:position pos:line="74" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="40">argv<pos:position pos:line="74" pos:column="44"/></name><index pos:line="74" pos:column="44">[<expr><literal type="number" pos:line="74" pos:column="45">2<pos:position pos:line="74" pos:column="46"/></literal></expr>]<pos:position pos:line="74" pos:column="47"/></index></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="49">ls_remote_result<pos:position pos:line="74" pos:column="65"/></name></expr></argument>)<pos:position pos:line="74" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="67"/></return>
	}<pos:position pos:line="75" pos:column="10"/></block></then></if>
	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><operator pos:line="76" pos:column="13">!<pos:position pos:line="76" pos:column="14"/></operator><call><name pos:line="76" pos:column="14">strcmp<pos:position pos:line="76" pos:column="20"/></name><argument_list pos:line="76" pos:column="20">(<argument><expr><literal type="string" pos:line="76" pos:column="21">"expand-refs-wildcard"<pos:position pos:line="76" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="45">argv<pos:position pos:line="76" pos:column="49"/></name><index pos:line="76" pos:column="49">[<expr><literal type="number" pos:line="76" pos:column="50">1<pos:position pos:line="76" pos:column="51"/></literal></expr>]<pos:position pos:line="76" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="76" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="54"/></condition><then pos:line="76" pos:column="54"> <block pos:line="76" pos:column="55">{
		<decl_stmt><decl><type><specifier pos:line="77" pos:column="17">const<pos:position pos:line="77" pos:column="22"/></specifier> <name pos:line="77" pos:column="23">char<pos:position pos:line="77" pos:column="27"/></name> <modifier pos:line="77" pos:column="28">*<pos:position pos:line="77" pos:column="29"/></modifier></type><name pos:line="77" pos:column="29">reflist<pos:position pos:line="77" pos:column="36"/></name></decl>;<pos:position pos:line="77" pos:column="37"/></decl_stmt>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><name pos:line="78" pos:column="21">argc<pos:position pos:line="78" pos:column="25"/></name> <operator pos:line="78" pos:column="26">&lt;<pos:position pos:line="78" pos:column="30"/></operator> <literal type="number" pos:line="78" pos:column="28">4<pos:position pos:line="78" pos:column="29"/></literal></expr>)<pos:position pos:line="78" pos:column="30"/></condition><then pos:line="78" pos:column="30">
			<block type="pseudo"><return pos:line="79" pos:column="25">return <expr><call><name pos:line="79" pos:column="32">error<pos:position pos:line="79" pos:column="37"/></name><argument_list pos:line="79" pos:column="37">(<argument><expr><literal type="string" pos:line="79" pos:column="38">"expand-refs-wildcard takes at least 2 args"<pos:position pos:line="79" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="84"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="80" pos:column="17">reflist<pos:position pos:line="80" pos:column="24"/></name> <operator pos:line="80" pos:column="25">=<pos:position pos:line="80" pos:column="26"/></operator> <name><name pos:line="80" pos:column="27">argv<pos:position pos:line="80" pos:column="31"/></name><index pos:line="80" pos:column="31">[<expr><literal type="number" pos:line="80" pos:column="32">2<pos:position pos:line="80" pos:column="33"/></literal></expr>]<pos:position pos:line="80" pos:column="34"/></index></name></expr>;<pos:position pos:line="80" pos:column="35"/></expr_stmt>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><operator pos:line="81" pos:column="21">!<pos:position pos:line="81" pos:column="22"/></operator><call><name pos:line="81" pos:column="22">strcmp<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">(<argument><expr><name pos:line="81" pos:column="29">reflist<pos:position pos:line="81" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="38">"-"<pos:position pos:line="81" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="43"/></condition><then pos:line="81" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><name pos:line="82" pos:column="25">reflist<pos:position pos:line="82" pos:column="32"/></name> <operator pos:line="82" pos:column="33">=<pos:position pos:line="82" pos:column="34"/></operator> <call><name pos:line="82" pos:column="35">get_stdin<pos:position pos:line="82" pos:column="44"/></name><argument_list pos:line="82" pos:column="44">()<pos:position pos:line="82" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="47"/></expr_stmt></block></then></if>
		<return pos:line="83" pos:column="17">return <expr><call><name pos:line="83" pos:column="24">expand_refs_wildcard<pos:position pos:line="83" pos:column="44"/></name><argument_list pos:line="83" pos:column="44">(<argument><expr><name pos:line="83" pos:column="45">reflist<pos:position pos:line="83" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="54">argc<pos:position pos:line="83" pos:column="58"/></name> <operator pos:line="83" pos:column="59">-<pos:position pos:line="83" pos:column="60"/></operator> <literal type="number" pos:line="83" pos:column="61">3<pos:position pos:line="83" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="64">argv<pos:position pos:line="83" pos:column="68"/></name> <operator pos:line="83" pos:column="69">+<pos:position pos:line="83" pos:column="70"/></operator> <literal type="number" pos:line="83" pos:column="71">3<pos:position pos:line="83" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="74"/></return>
	}<pos:position pos:line="84" pos:column="10"/></block></then></if>

	<return pos:line="86" pos:column="9">return <expr><call><name pos:line="86" pos:column="16">error<pos:position pos:line="86" pos:column="21"/></name><argument_list pos:line="86" pos:column="21">(<argument><expr><literal type="string" pos:line="86" pos:column="22">"Unknown subcommand: %s"<pos:position pos:line="86" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="48">argv<pos:position pos:line="86" pos:column="52"/></name><index pos:line="86" pos:column="52">[<expr><literal type="number" pos:line="86" pos:column="53">1<pos:position pos:line="86" pos:column="54"/></literal></expr>]<pos:position pos:line="86" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="86" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="57"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
