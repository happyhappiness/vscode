<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6126_git-2.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">file_callback<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">option<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">opt<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">arg<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="69">int<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">unset<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">grep_opt<pos:position pos:line="3" pos:column="24"/></name></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type><name pos:line="3" pos:column="26">grep_opt<pos:position pos:line="3" pos:column="34"/></name> <init pos:line="3" pos:column="35">= <expr><name><name pos:line="3" pos:column="37">opt<pos:position pos:line="3" pos:column="40"/></name><operator pos:line="3" pos:column="40">-&gt;<pos:position pos:line="3" pos:column="45"/></operator><name pos:line="3" pos:column="42">value<pos:position pos:line="3" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">from_stdin<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><operator pos:line="4" pos:column="26">!<pos:position pos:line="4" pos:column="27"/></operator><call><name pos:line="4" pos:column="27">strcmp<pos:position pos:line="4" pos:column="33"/></name><argument_list pos:line="4" pos:column="33">(<argument><expr><name pos:line="4" pos:column="34">arg<pos:position pos:line="4" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="39">"-"<pos:position pos:line="4" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">FILE<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">patterns<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">lno<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><literal type="number" pos:line="6" pos:column="19">0<pos:position pos:line="6" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">sb<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name pos:line="7" pos:column="28">STRBUF_INIT<pos:position pos:line="7" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">patterns<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <ternary><condition><expr><name pos:line="9" pos:column="20">from_stdin<pos:position pos:line="9" pos:column="30"/></name></expr> ?<pos:position pos:line="9" pos:column="32"/></condition><then pos:line="9" pos:column="32"> <expr><name pos:line="9" pos:column="33">stdin<pos:position pos:line="9" pos:column="38"/></name></expr> <pos:position pos:line="9" pos:column="39"/></then><else pos:line="9" pos:column="39">: <expr><call><name pos:line="9" pos:column="41">fopen<pos:position pos:line="9" pos:column="46"/></name><argument_list pos:line="9" pos:column="46">(<argument><expr><name pos:line="9" pos:column="47">arg<pos:position pos:line="9" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="52">"r"<pos:position pos:line="9" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="9" pos:column="57"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">patterns<pos:position pos:line="10" pos:column="22"/></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">die_errno<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><call><name pos:line="11" pos:column="27">_<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><literal type="string" pos:line="11" pos:column="29">"cannot open '%s'"<pos:position pos:line="11" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="11" pos:column="50">arg<pos:position pos:line="11" pos:column="53"/></name></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="55"/></expr_stmt></block></then></if>
	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><call><name pos:line="12" pos:column="16">strbuf_getline<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><operator pos:line="12" pos:column="31">&amp;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="32">sb<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="36">patterns<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call> <operator pos:line="12" pos:column="46">==<pos:position pos:line="12" pos:column="48"/></operator> <literal type="number" pos:line="12" pos:column="49">0<pos:position pos:line="12" pos:column="50"/></literal></expr>)<pos:position pos:line="12" pos:column="51"/></condition> <block pos:line="12" pos:column="52">{
		<comment type="block" pos:line="13" pos:column="17">/* ignore empty line like grep does */</comment>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name><name pos:line="14" pos:column="21">sb<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">.<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">len<pos:position pos:line="14" pos:column="27"/></name></name> <operator pos:line="14" pos:column="28">==<pos:position pos:line="14" pos:column="30"/></operator> <literal type="number" pos:line="14" pos:column="31">0<pos:position pos:line="14" pos:column="32"/></literal></expr>)<pos:position pos:line="14" pos:column="33"/></condition><then pos:line="14" pos:column="33">
			<block type="pseudo"><continue pos:line="15" pos:column="25">continue;<pos:position pos:line="15" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="17" pos:column="17">append_grep_pat<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">grep_opt<pos:position pos:line="17" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="43">sb<pos:position pos:line="17" pos:column="45"/></name><operator pos:line="17" pos:column="45">.<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="46">buf<pos:position pos:line="17" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="51">sb<pos:position pos:line="17" pos:column="53"/></name><operator pos:line="17" pos:column="53">.<pos:position pos:line="17" pos:column="54"/></operator><name pos:line="17" pos:column="54">len<pos:position pos:line="17" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="59">arg<pos:position pos:line="17" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="64">++<pos:position pos:line="17" pos:column="66"/></operator><name pos:line="17" pos:column="66">lno<pos:position pos:line="17" pos:column="69"/></name></expr></argument>,
				<argument><expr><name pos:line="18" pos:column="33">GREP_PATTERN<pos:position pos:line="18" pos:column="45"/></name></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></while>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">from_stdin<pos:position pos:line="20" pos:column="24"/></name></expr>)<pos:position pos:line="20" pos:column="25"/></condition><then pos:line="20" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="17">fclose<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">patterns<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">strbuf_release<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><operator pos:line="22" pos:column="24">&amp;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="25">sb<pos:position pos:line="22" pos:column="27"/></name></expr></argument>)<pos:position pos:line="22" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
	<return pos:line="23" pos:column="9">return <expr><literal type="number" pos:line="23" pos:column="16">0<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
