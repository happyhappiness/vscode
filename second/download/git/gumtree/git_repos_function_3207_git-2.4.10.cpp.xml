<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3207_git-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">read_tree_1<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">tree<pos:position pos:line="1" pos:column="35"/></name></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">tree<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="43">struct<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">strbuf<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">base<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
		       <parameter><decl><type><name pos:line="2" pos:column="24">int<pos:position pos:line="2" pos:column="27"/></name></type> <name pos:line="2" pos:column="28">stage<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name><name pos:line="2" pos:column="41">struct<pos:position pos:line="2" pos:column="47"/></name> <name pos:line="2" pos:column="48">pathspec<pos:position pos:line="2" pos:column="56"/></name></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">pathspec<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,
		       <parameter><decl><type><name pos:line="3" pos:column="24">read_tree_fn_t<pos:position pos:line="3" pos:column="38"/></name></type> <name pos:line="3" pos:column="39">fn<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="43">void<pos:position pos:line="3" pos:column="47"/></name> <modifier pos:line="3" pos:column="48">*<pos:position pos:line="3" pos:column="49"/></modifier></type><name pos:line="3" pos:column="49">context<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="57"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">tree_desc<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">desc<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">name_entry<pos:position pos:line="6" pos:column="26"/></name></name></type> <name pos:line="6" pos:column="27">entry<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">char<pos:position pos:line="7" pos:column="22"/></name></type> <name><name pos:line="7" pos:column="23">sha1<pos:position pos:line="7" pos:column="27"/></name><index pos:line="7" pos:column="27">[<expr><literal type="number" pos:line="7" pos:column="28">20<pos:position pos:line="7" pos:column="30"/></literal></expr>]<pos:position pos:line="7" pos:column="31"/></index></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">len<pos:position pos:line="8" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="18">oldlen<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><name><name pos:line="8" pos:column="27">base<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">-&gt;<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="33">len<pos:position pos:line="8" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">enum<pos:position pos:line="9" pos:column="13"/></name> <name pos:line="9" pos:column="14">interesting<pos:position pos:line="9" pos:column="25"/></name></name></type> <name pos:line="9" pos:column="26">retval<pos:position pos:line="9" pos:column="32"/></name> <init pos:line="9" pos:column="33">= <expr><name pos:line="9" pos:column="35">entry_not_interesting<pos:position pos:line="9" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="57"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">parse_tree<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">tree<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">-<pos:position pos:line="12" pos:column="25"/></operator><literal type="number" pos:line="12" pos:column="25">1<pos:position pos:line="12" pos:column="26"/></literal></expr>;<pos:position pos:line="12" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">init_tree_desc<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><operator pos:line="14" pos:column="24">&amp;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="25">desc<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="31">tree<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">-&gt;<pos:position pos:line="14" pos:column="40"/></operator><name pos:line="14" pos:column="37">buffer<pos:position pos:line="14" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="45">tree<pos:position pos:line="14" pos:column="49"/></name><operator pos:line="14" pos:column="49">-&gt;<pos:position pos:line="14" pos:column="54"/></operator><name pos:line="14" pos:column="51">size<pos:position pos:line="14" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="57"/></expr_stmt>

	<while pos:line="16" pos:column="9">while <condition pos:line="16" pos:column="15">(<expr><call><name pos:line="16" pos:column="16">tree_entry<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><operator pos:line="16" pos:column="27">&amp;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="28">desc<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="34">&amp;<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="35">entry<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="42"/></condition> <block pos:line="16" pos:column="43">{
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">retval<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">!=<pos:position pos:line="17" pos:column="30"/></operator> <name pos:line="17" pos:column="31">all_entries_interesting<pos:position pos:line="17" pos:column="54"/></name></expr>)<pos:position pos:line="17" pos:column="55"/></condition><then pos:line="17" pos:column="55"> <block pos:line="17" pos:column="56">{
			<expr_stmt><expr><name pos:line="18" pos:column="25">retval<pos:position pos:line="18" pos:column="31"/></name> <operator pos:line="18" pos:column="32">=<pos:position pos:line="18" pos:column="33"/></operator> <call><name pos:line="18" pos:column="34">tree_entry_interesting<pos:position pos:line="18" pos:column="56"/></name><argument_list pos:line="18" pos:column="56">(<argument><expr><operator pos:line="18" pos:column="57">&amp;<pos:position pos:line="18" pos:column="62"/></operator><name pos:line="18" pos:column="58">entry<pos:position pos:line="18" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="65">base<pos:position pos:line="18" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="71">0<pos:position pos:line="18" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="74">pathspec<pos:position pos:line="18" pos:column="82"/></name></expr></argument>)<pos:position pos:line="18" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="84"/></expr_stmt>
			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><name pos:line="19" pos:column="29">retval<pos:position pos:line="19" pos:column="35"/></name> <operator pos:line="19" pos:column="36">==<pos:position pos:line="19" pos:column="38"/></operator> <name pos:line="19" pos:column="39">all_entries_not_interesting<pos:position pos:line="19" pos:column="66"/></name></expr>)<pos:position pos:line="19" pos:column="67"/></condition><then pos:line="19" pos:column="67">
				<block type="pseudo"><break pos:line="20" pos:column="33">break;<pos:position pos:line="20" pos:column="39"/></break></block></then></if>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><name pos:line="21" pos:column="29">retval<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">==<pos:position pos:line="21" pos:column="38"/></operator> <name pos:line="21" pos:column="39">entry_not_interesting<pos:position pos:line="21" pos:column="60"/></name></expr>)<pos:position pos:line="21" pos:column="61"/></condition><then pos:line="21" pos:column="61">
				<block type="pseudo"><continue pos:line="22" pos:column="33">continue;<pos:position pos:line="22" pos:column="42"/></continue></block></then></if>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>

		<switch pos:line="25" pos:column="17">switch <condition pos:line="25" pos:column="24">(<expr><call><name pos:line="25" pos:column="25">fn<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name><name pos:line="25" pos:column="28">entry<pos:position pos:line="25" pos:column="33"/></name><operator pos:line="25" pos:column="33">.<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="34">sha1<pos:position pos:line="25" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">base<pos:position pos:line="25" pos:column="44"/></name></expr></argument>,
			   <argument><expr><name><name pos:line="26" pos:column="28">entry<pos:position pos:line="26" pos:column="33"/></name><operator pos:line="26" pos:column="33">.<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="34">path<pos:position pos:line="26" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="40">entry<pos:position pos:line="26" pos:column="45"/></name><operator pos:line="26" pos:column="45">.<pos:position pos:line="26" pos:column="46"/></operator><name pos:line="26" pos:column="46">mode<pos:position pos:line="26" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="52">stage<pos:position pos:line="26" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="59">context<pos:position pos:line="26" pos:column="66"/></name></expr></argument>)<pos:position pos:line="26" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="68"/></condition> <block pos:line="26" pos:column="69">{
		<case pos:line="27" pos:column="17">case <expr><literal type="number" pos:line="27" pos:column="22">0<pos:position pos:line="27" pos:column="23"/></literal></expr>:<pos:position pos:line="27" pos:column="24"/></case>
			<continue pos:line="28" pos:column="25">continue;<pos:position pos:line="28" pos:column="34"/></continue>
		<case pos:line="29" pos:column="17">case <expr><name pos:line="29" pos:column="22">READ_TREE_RECURSIVE<pos:position pos:line="29" pos:column="41"/></name></expr>:<pos:position pos:line="29" pos:column="42"/></case>
			<break pos:line="30" pos:column="25">break;<pos:position pos:line="30" pos:column="31"/></break>
		<default pos:line="31" pos:column="17">default:<pos:position pos:line="31" pos:column="25"/></default>
			<return pos:line="32" pos:column="25">return <expr><operator pos:line="32" pos:column="32">-<pos:position pos:line="32" pos:column="33"/></operator><literal type="number" pos:line="32" pos:column="33">1<pos:position pos:line="32" pos:column="34"/></literal></expr>;<pos:position pos:line="32" pos:column="35"/></return>
		}<pos:position pos:line="33" pos:column="18"/></block></switch>

		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><call><name pos:line="35" pos:column="21">S_ISDIR<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><name><name pos:line="35" pos:column="29">entry<pos:position pos:line="35" pos:column="34"/></name><operator pos:line="35" pos:column="34">.<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="35">mode<pos:position pos:line="35" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="41"/></condition><then pos:line="35" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="25">hashcpy<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name pos:line="36" pos:column="33">sha1<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="39">entry<pos:position pos:line="36" pos:column="44"/></name><operator pos:line="36" pos:column="44">.<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="45">sha1<pos:position pos:line="36" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="51"/></expr_stmt></block></then>
		<elseif pos:line="37" pos:column="17">else <if pos:line="37" pos:column="22">if <condition pos:line="37" pos:column="25">(<expr><call><name pos:line="37" pos:column="26">S_ISGITLINK<pos:position pos:line="37" pos:column="37"/></name><argument_list pos:line="37" pos:column="37">(<argument><expr><name><name pos:line="37" pos:column="38">entry<pos:position pos:line="37" pos:column="43"/></name><operator pos:line="37" pos:column="43">.<pos:position pos:line="37" pos:column="44"/></operator><name pos:line="37" pos:column="44">mode<pos:position pos:line="37" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="50"/></condition><then pos:line="37" pos:column="50"> <block pos:line="37" pos:column="51">{
			<decl_stmt><decl><type><name><name pos:line="38" pos:column="25">struct<pos:position pos:line="38" pos:column="31"/></name> <name pos:line="38" pos:column="32">commit<pos:position pos:line="38" pos:column="38"/></name></name> <modifier pos:line="38" pos:column="39">*<pos:position pos:line="38" pos:column="40"/></modifier></type><name pos:line="38" pos:column="40">commit<pos:position pos:line="38" pos:column="46"/></name></decl>;<pos:position pos:line="38" pos:column="47"/></decl_stmt>

			<expr_stmt><expr><name pos:line="40" pos:column="25">commit<pos:position pos:line="40" pos:column="31"/></name> <operator pos:line="40" pos:column="32">=<pos:position pos:line="40" pos:column="33"/></operator> <call><name pos:line="40" pos:column="34">lookup_commit<pos:position pos:line="40" pos:column="47"/></name><argument_list pos:line="40" pos:column="47">(<argument><expr><name><name pos:line="40" pos:column="48">entry<pos:position pos:line="40" pos:column="53"/></name><operator pos:line="40" pos:column="53">.<pos:position pos:line="40" pos:column="54"/></operator><name pos:line="40" pos:column="54">sha1<pos:position pos:line="40" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="60"/></expr_stmt>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><operator pos:line="41" pos:column="29">!<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="30">commit<pos:position pos:line="41" pos:column="36"/></name></expr>)<pos:position pos:line="41" pos:column="37"/></condition><then pos:line="41" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="33">die<pos:position pos:line="42" pos:column="36"/></name><argument_list pos:line="42" pos:column="36">(<argument><expr><literal type="string" pos:line="42" pos:column="37">"Commit %s in submodule path %s%s not found"<pos:position pos:line="42" pos:column="81"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="43" pos:column="37">sha1_to_hex<pos:position pos:line="43" pos:column="48"/></name><argument_list pos:line="43" pos:column="48">(<argument><expr><name><name pos:line="43" pos:column="49">entry<pos:position pos:line="43" pos:column="54"/></name><operator pos:line="43" pos:column="54">.<pos:position pos:line="43" pos:column="55"/></operator><name pos:line="43" pos:column="55">sha1<pos:position pos:line="43" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="60"/></argument_list></call></expr></argument>,
				    <argument><expr><name><name pos:line="44" pos:column="37">base<pos:position pos:line="44" pos:column="41"/></name><operator pos:line="44" pos:column="41">-&gt;<pos:position pos:line="44" pos:column="46"/></operator><name pos:line="44" pos:column="43">buf<pos:position pos:line="44" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="48">entry<pos:position pos:line="44" pos:column="53"/></name><operator pos:line="44" pos:column="53">.<pos:position pos:line="44" pos:column="54"/></operator><name pos:line="44" pos:column="54">path<pos:position pos:line="44" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="60"/></expr_stmt></block></then></if>

			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><call><name pos:line="46" pos:column="29">parse_commit<pos:position pos:line="46" pos:column="41"/></name><argument_list pos:line="46" pos:column="41">(<argument><expr><name pos:line="46" pos:column="42">commit<pos:position pos:line="46" pos:column="48"/></name></expr></argument>)<pos:position pos:line="46" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="50"/></condition><then pos:line="46" pos:column="50">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="33">die<pos:position pos:line="47" pos:column="36"/></name><argument_list pos:line="47" pos:column="36">(<argument><expr><literal type="string" pos:line="47" pos:column="37">"Invalid commit %s in submodule path %s%s"<pos:position pos:line="47" pos:column="79"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="48" pos:column="37">sha1_to_hex<pos:position pos:line="48" pos:column="48"/></name><argument_list pos:line="48" pos:column="48">(<argument><expr><name><name pos:line="48" pos:column="49">entry<pos:position pos:line="48" pos:column="54"/></name><operator pos:line="48" pos:column="54">.<pos:position pos:line="48" pos:column="55"/></operator><name pos:line="48" pos:column="55">sha1<pos:position pos:line="48" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="60"/></argument_list></call></expr></argument>,
				    <argument><expr><name><name pos:line="49" pos:column="37">base<pos:position pos:line="49" pos:column="41"/></name><operator pos:line="49" pos:column="41">-&gt;<pos:position pos:line="49" pos:column="46"/></operator><name pos:line="49" pos:column="43">buf<pos:position pos:line="49" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="48">entry<pos:position pos:line="49" pos:column="53"/></name><operator pos:line="49" pos:column="53">.<pos:position pos:line="49" pos:column="54"/></operator><name pos:line="49" pos:column="54">path<pos:position pos:line="49" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="60"/></expr_stmt></block></then></if>

			<expr_stmt><expr><call><name pos:line="51" pos:column="25">hashcpy<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">sha1<pos:position pos:line="51" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="39">commit<pos:position pos:line="51" pos:column="45"/></name><operator pos:line="51" pos:column="45">-&gt;<pos:position pos:line="51" pos:column="50"/></operator><name pos:line="51" pos:column="47">tree<pos:position pos:line="51" pos:column="51"/></name><operator pos:line="51" pos:column="51">-&gt;<pos:position pos:line="51" pos:column="56"/></operator><name pos:line="51" pos:column="53">object<pos:position pos:line="51" pos:column="59"/></name><operator pos:line="51" pos:column="59">.<pos:position pos:line="51" pos:column="60"/></operator><name pos:line="51" pos:column="60">sha1<pos:position pos:line="51" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="66"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if></elseif>
		<else pos:line="53" pos:column="17">else
			<block type="pseudo"><continue pos:line="54" pos:column="25">continue;<pos:position pos:line="54" pos:column="34"/></continue></block></else></if>

		<expr_stmt><expr><name pos:line="56" pos:column="17">len<pos:position pos:line="56" pos:column="20"/></name> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <call><name pos:line="56" pos:column="23">tree_entry_len<pos:position pos:line="56" pos:column="37"/></name><argument_list pos:line="56" pos:column="37">(<argument><expr><operator pos:line="56" pos:column="38">&amp;<pos:position pos:line="56" pos:column="43"/></operator><name pos:line="56" pos:column="39">entry<pos:position pos:line="56" pos:column="44"/></name></expr></argument>)<pos:position pos:line="56" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">strbuf_add<pos:position pos:line="57" pos:column="27"/></name><argument_list pos:line="57" pos:column="27">(<argument><expr><name pos:line="57" pos:column="28">base<pos:position pos:line="57" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="34">entry<pos:position pos:line="57" pos:column="39"/></name><operator pos:line="57" pos:column="39">.<pos:position pos:line="57" pos:column="40"/></operator><name pos:line="57" pos:column="40">path<pos:position pos:line="57" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="46">len<pos:position pos:line="57" pos:column="49"/></name></expr></argument>)<pos:position pos:line="57" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">strbuf_addch<pos:position pos:line="58" pos:column="29"/></name><argument_list pos:line="58" pos:column="29">(<argument><expr><name pos:line="58" pos:column="30">base<pos:position pos:line="58" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="58" pos:column="36">'/'<pos:position pos:line="58" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="59" pos:column="17">retval<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <call><name pos:line="59" pos:column="26">read_tree_1<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><call><name pos:line="59" pos:column="38">lookup_tree<pos:position pos:line="59" pos:column="49"/></name><argument_list pos:line="59" pos:column="49">(<argument><expr><name pos:line="59" pos:column="50">sha1<pos:position pos:line="59" pos:column="54"/></name></expr></argument>)<pos:position pos:line="59" pos:column="55"/></argument_list></call></expr></argument>,
				     <argument><expr><name pos:line="60" pos:column="38">base<pos:position pos:line="60" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="44">stage<pos:position pos:line="60" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="51">pathspec<pos:position pos:line="60" pos:column="59"/></name></expr></argument>,
				     <argument><expr><name pos:line="61" pos:column="38">fn<pos:position pos:line="61" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="42">context<pos:position pos:line="61" pos:column="49"/></name></expr></argument>)<pos:position pos:line="61" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">strbuf_setlen<pos:position pos:line="62" pos:column="30"/></name><argument_list pos:line="62" pos:column="30">(<argument><expr><name pos:line="62" pos:column="31">base<pos:position pos:line="62" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="37">oldlen<pos:position pos:line="62" pos:column="43"/></name></expr></argument>)<pos:position pos:line="62" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="45"/></expr_stmt>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name pos:line="63" pos:column="21">retval<pos:position pos:line="63" pos:column="27"/></name></expr>)<pos:position pos:line="63" pos:column="28"/></condition><then pos:line="63" pos:column="28">
			<block type="pseudo"><return pos:line="64" pos:column="25">return <expr><operator pos:line="64" pos:column="32">-<pos:position pos:line="64" pos:column="33"/></operator><literal type="number" pos:line="64" pos:column="33">1<pos:position pos:line="64" pos:column="34"/></literal></expr>;<pos:position pos:line="64" pos:column="35"/></return></block></then></if>
	}<pos:position pos:line="65" pos:column="10"/></block></while>
	<return pos:line="66" pos:column="9">return <expr><literal type="number" pos:line="66" pos:column="16">0<pos:position pos:line="66" pos:column="17"/></literal></expr>;<pos:position pos:line="66" pos:column="18"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
