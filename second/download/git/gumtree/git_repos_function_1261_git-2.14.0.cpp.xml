<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1261_git-2.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">handle_revision_pseudo_opt<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">submodule<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
				<parameter><decl><type><name><name pos:line="2" pos:column="33">struct<pos:position pos:line="2" pos:column="39"/></name> <name pos:line="2" pos:column="40">rev_info<pos:position pos:line="2" pos:column="48"/></name></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">revs<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
				<parameter><decl><type><name pos:line="3" pos:column="33">int<pos:position pos:line="3" pos:column="36"/></name></type> <name pos:line="3" pos:column="37">argc<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="43">const<pos:position pos:line="3" pos:column="48"/></specifier> <name pos:line="3" pos:column="49">char<pos:position pos:line="3" pos:column="53"/></name> <modifier pos:line="3" pos:column="54">*<pos:position pos:line="3" pos:column="55"/></modifier><modifier pos:line="3" pos:column="55">*<pos:position pos:line="3" pos:column="56"/></modifier></type><name pos:line="3" pos:column="56">argv<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="62">int<pos:position pos:line="3" pos:column="65"/></name> <modifier pos:line="3" pos:column="66">*<pos:position pos:line="3" pos:column="67"/></modifier></type><name pos:line="3" pos:column="67">flags<pos:position pos:line="3" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="73"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">arg<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name><name pos:line="5" pos:column="27">argv<pos:position pos:line="5" pos:column="31"/></name><index pos:line="5" pos:column="31">[<expr><literal type="number" pos:line="5" pos:column="32">0<pos:position pos:line="5" pos:column="33"/></literal></expr>]<pos:position pos:line="5" pos:column="34"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">optarg<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">argcount<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * NOTE!
	 *
	 * Commands like "git shortlog" will not accept the options below
	 * unless parse_revision_opt queues them (as opposed to erroring
	 * out).
	 *
	 * When implementing your new pseudo-option, remember to
	 * register it in the list at the top of handle_revision_opt.
	 */</comment>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><call><name pos:line="19" pos:column="14">strcmp<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">arg<pos:position pos:line="19" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="26">"--all"<pos:position pos:line="19" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="35"/></condition><then pos:line="19" pos:column="35"> <block pos:line="19" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">handle_refs<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><name pos:line="20" pos:column="29">submodule<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="40">revs<pos:position pos:line="20" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="46">*<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="47">flags<pos:position pos:line="20" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="54">for_each_ref_submodule<pos:position pos:line="20" pos:column="76"/></name></expr></argument>)<pos:position pos:line="20" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="78"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">handle_refs<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">submodule<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">revs<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="46">*<pos:position pos:line="21" pos:column="47"/></operator><name pos:line="21" pos:column="47">flags<pos:position pos:line="21" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="54">head_ref_submodule<pos:position pos:line="21" pos:column="72"/></name></expr></argument>)<pos:position pos:line="21" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">clear_ref_exclusion<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><operator pos:line="22" pos:column="37">&amp;<pos:position pos:line="22" pos:column="42"/></operator><name><name pos:line="22" pos:column="38">revs<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">-&gt;<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="44">ref_excludes<pos:position pos:line="22" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then> <elseif pos:line="23" pos:column="11">else <if pos:line="23" pos:column="16">if <condition pos:line="23" pos:column="19">(<expr><operator pos:line="23" pos:column="20">!<pos:position pos:line="23" pos:column="21"/></operator><call><name pos:line="23" pos:column="21">strcmp<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">arg<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="33">"--branches"<pos:position pos:line="23" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="47"/></condition><then pos:line="23" pos:column="47"> <block pos:line="23" pos:column="48">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">handle_refs<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><name pos:line="24" pos:column="29">submodule<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="40">revs<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="46">*<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="47">flags<pos:position pos:line="24" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="54">for_each_branch_ref_submodule<pos:position pos:line="24" pos:column="83"/></name></expr></argument>)<pos:position pos:line="24" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="85"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">clear_ref_exclusion<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><operator pos:line="25" pos:column="37">&amp;<pos:position pos:line="25" pos:column="42"/></operator><name><name pos:line="25" pos:column="38">revs<pos:position pos:line="25" pos:column="42"/></name><operator pos:line="25" pos:column="42">-&gt;<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="44">ref_excludes<pos:position pos:line="25" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if></elseif> <elseif pos:line="26" pos:column="11">else <if pos:line="26" pos:column="16">if <condition pos:line="26" pos:column="19">(<expr><operator pos:line="26" pos:column="20">!<pos:position pos:line="26" pos:column="21"/></operator><call><name pos:line="26" pos:column="21">strcmp<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">arg<pos:position pos:line="26" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="33">"--bisect"<pos:position pos:line="26" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="45"/></condition><then pos:line="26" pos:column="45"> <block pos:line="26" pos:column="46">{
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">read_bisect_terms<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><operator pos:line="27" pos:column="35">&amp;<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="36">term_bad<pos:position pos:line="27" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="46">&amp;<pos:position pos:line="27" pos:column="51"/></operator><name pos:line="27" pos:column="47">term_good<pos:position pos:line="27" pos:column="56"/></name></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">handle_refs<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">submodule<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">revs<pos:position pos:line="28" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="46">*<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="47">flags<pos:position pos:line="28" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="54">for_each_bad_bisect_ref<pos:position pos:line="28" pos:column="77"/></name></expr></argument>)<pos:position pos:line="28" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">handle_refs<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">submodule<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="40">revs<pos:position pos:line="29" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="46">*<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="47">flags<pos:position pos:line="29" pos:column="52"/></name> <operator pos:line="29" pos:column="53">^<pos:position pos:line="29" pos:column="54"/></operator> <operator pos:line="29" pos:column="55">(<pos:position pos:line="29" pos:column="56"/></operator><name pos:line="29" pos:column="56">UNINTERESTING<pos:position pos:line="29" pos:column="69"/></name> <operator pos:line="29" pos:column="70">|<pos:position pos:line="29" pos:column="71"/></operator> <name pos:line="29" pos:column="72">BOTTOM<pos:position pos:line="29" pos:column="78"/></name><operator pos:line="29" pos:column="78">)<pos:position pos:line="29" pos:column="79"/></operator></expr></argument>, <argument><expr><name pos:line="29" pos:column="81">for_each_good_bisect_ref<pos:position pos:line="29" pos:column="105"/></name></expr></argument>)<pos:position pos:line="29" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="107"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">revs<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">-&gt;<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="23">bisect<pos:position pos:line="30" pos:column="29"/></name></name> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <literal type="number" pos:line="30" pos:column="32">1<pos:position pos:line="30" pos:column="33"/></literal></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if></elseif> <elseif pos:line="31" pos:column="11">else <if pos:line="31" pos:column="16">if <condition pos:line="31" pos:column="19">(<expr><operator pos:line="31" pos:column="20">!<pos:position pos:line="31" pos:column="21"/></operator><call><name pos:line="31" pos:column="21">strcmp<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">arg<pos:position pos:line="31" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="33">"--tags"<pos:position pos:line="31" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="43"/></condition><then pos:line="31" pos:column="43"> <block pos:line="31" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">handle_refs<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name pos:line="32" pos:column="29">submodule<pos:position pos:line="32" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="40">revs<pos:position pos:line="32" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="46">*<pos:position pos:line="32" pos:column="47"/></operator><name pos:line="32" pos:column="47">flags<pos:position pos:line="32" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="54">for_each_tag_ref_submodule<pos:position pos:line="32" pos:column="80"/></name></expr></argument>)<pos:position pos:line="32" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="82"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">clear_ref_exclusion<pos:position pos:line="33" pos:column="36"/></name><argument_list pos:line="33" pos:column="36">(<argument><expr><operator pos:line="33" pos:column="37">&amp;<pos:position pos:line="33" pos:column="42"/></operator><name><name pos:line="33" pos:column="38">revs<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">-&gt;<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="44">ref_excludes<pos:position pos:line="33" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if></elseif> <elseif pos:line="34" pos:column="11">else <if pos:line="34" pos:column="16">if <condition pos:line="34" pos:column="19">(<expr><operator pos:line="34" pos:column="20">!<pos:position pos:line="34" pos:column="21"/></operator><call><name pos:line="34" pos:column="21">strcmp<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">arg<pos:position pos:line="34" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="33">"--remotes"<pos:position pos:line="34" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="46"/></condition><then pos:line="34" pos:column="46"> <block pos:line="34" pos:column="47">{
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">handle_refs<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><name pos:line="35" pos:column="29">submodule<pos:position pos:line="35" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="40">revs<pos:position pos:line="35" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="46">*<pos:position pos:line="35" pos:column="47"/></operator><name pos:line="35" pos:column="47">flags<pos:position pos:line="35" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="54">for_each_remote_ref_submodule<pos:position pos:line="35" pos:column="83"/></name></expr></argument>)<pos:position pos:line="35" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="85"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">clear_ref_exclusion<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><operator pos:line="36" pos:column="37">&amp;<pos:position pos:line="36" pos:column="42"/></operator><name><name pos:line="36" pos:column="38">revs<pos:position pos:line="36" pos:column="42"/></name><operator pos:line="36" pos:column="42">-&gt;<pos:position pos:line="36" pos:column="47"/></operator><name pos:line="36" pos:column="44">ref_excludes<pos:position pos:line="36" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if></elseif> <elseif pos:line="37" pos:column="11">else <if pos:line="37" pos:column="16">if <condition pos:line="37" pos:column="19">(<expr><operator pos:line="37" pos:column="20">(<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="21">argcount<pos:position pos:line="37" pos:column="29"/></name> <operator pos:line="37" pos:column="30">=<pos:position pos:line="37" pos:column="31"/></operator> <call><name pos:line="37" pos:column="32">parse_long_opt<pos:position pos:line="37" pos:column="46"/></name><argument_list pos:line="37" pos:column="46">(<argument><expr><literal type="string" pos:line="37" pos:column="47">"glob"<pos:position pos:line="37" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="55">argv<pos:position pos:line="37" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="61">&amp;<pos:position pos:line="37" pos:column="66"/></operator><name pos:line="37" pos:column="62">optarg<pos:position pos:line="37" pos:column="68"/></name></expr></argument>)<pos:position pos:line="37" pos:column="69"/></argument_list></call><operator pos:line="37" pos:column="69">)<pos:position pos:line="37" pos:column="70"/></operator></expr>)<pos:position pos:line="37" pos:column="71"/></condition><then pos:line="37" pos:column="71"> <block pos:line="37" pos:column="72">{
		<decl_stmt><decl><type><name><name pos:line="38" pos:column="17">struct<pos:position pos:line="38" pos:column="23"/></name> <name pos:line="38" pos:column="24">all_refs_cb<pos:position pos:line="38" pos:column="35"/></name></name></type> <name pos:line="38" pos:column="36">cb<pos:position pos:line="38" pos:column="38"/></name></decl>;<pos:position pos:line="38" pos:column="39"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">init_all_refs_cb<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><operator pos:line="39" pos:column="34">&amp;<pos:position pos:line="39" pos:column="39"/></operator><name pos:line="39" pos:column="35">cb<pos:position pos:line="39" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="39">revs<pos:position pos:line="39" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="45">*<pos:position pos:line="39" pos:column="46"/></operator><name pos:line="39" pos:column="46">flags<pos:position pos:line="39" pos:column="51"/></name></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">for_each_glob_ref<pos:position pos:line="40" pos:column="34"/></name><argument_list pos:line="40" pos:column="34">(<argument><expr><name pos:line="40" pos:column="35">handle_one_ref<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="51">optarg<pos:position pos:line="40" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="59">&amp;<pos:position pos:line="40" pos:column="64"/></operator><name pos:line="40" pos:column="60">cb<pos:position pos:line="40" pos:column="62"/></name></expr></argument>)<pos:position pos:line="40" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">clear_ref_exclusion<pos:position pos:line="41" pos:column="36"/></name><argument_list pos:line="41" pos:column="36">(<argument><expr><operator pos:line="41" pos:column="37">&amp;<pos:position pos:line="41" pos:column="42"/></operator><name><name pos:line="41" pos:column="38">revs<pos:position pos:line="41" pos:column="42"/></name><operator pos:line="41" pos:column="42">-&gt;<pos:position pos:line="41" pos:column="47"/></operator><name pos:line="41" pos:column="44">ref_excludes<pos:position pos:line="41" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="58"/></expr_stmt>
		<return pos:line="42" pos:column="17">return <expr><name pos:line="42" pos:column="24">argcount<pos:position pos:line="42" pos:column="32"/></name></expr>;<pos:position pos:line="42" pos:column="33"/></return>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if></elseif> <elseif pos:line="43" pos:column="11">else <if pos:line="43" pos:column="16">if <condition pos:line="43" pos:column="19">(<expr><operator pos:line="43" pos:column="20">(<pos:position pos:line="43" pos:column="21"/></operator><name pos:line="43" pos:column="21">argcount<pos:position pos:line="43" pos:column="29"/></name> <operator pos:line="43" pos:column="30">=<pos:position pos:line="43" pos:column="31"/></operator> <call><name pos:line="43" pos:column="32">parse_long_opt<pos:position pos:line="43" pos:column="46"/></name><argument_list pos:line="43" pos:column="46">(<argument><expr><literal type="string" pos:line="43" pos:column="47">"exclude"<pos:position pos:line="43" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="58">argv<pos:position pos:line="43" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="64">&amp;<pos:position pos:line="43" pos:column="69"/></operator><name pos:line="43" pos:column="65">optarg<pos:position pos:line="43" pos:column="71"/></name></expr></argument>)<pos:position pos:line="43" pos:column="72"/></argument_list></call><operator pos:line="43" pos:column="72">)<pos:position pos:line="43" pos:column="73"/></operator></expr>)<pos:position pos:line="43" pos:column="74"/></condition><then pos:line="43" pos:column="74"> <block pos:line="43" pos:column="75">{
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">add_ref_exclusion<pos:position pos:line="44" pos:column="34"/></name><argument_list pos:line="44" pos:column="34">(<argument><expr><operator pos:line="44" pos:column="35">&amp;<pos:position pos:line="44" pos:column="40"/></operator><name><name pos:line="44" pos:column="36">revs<pos:position pos:line="44" pos:column="40"/></name><operator pos:line="44" pos:column="40">-&gt;<pos:position pos:line="44" pos:column="45"/></operator><name pos:line="44" pos:column="42">ref_excludes<pos:position pos:line="44" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="56">optarg<pos:position pos:line="44" pos:column="62"/></name></expr></argument>)<pos:position pos:line="44" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="64"/></expr_stmt>
		<return pos:line="45" pos:column="17">return <expr><name pos:line="45" pos:column="24">argcount<pos:position pos:line="45" pos:column="32"/></name></expr>;<pos:position pos:line="45" pos:column="33"/></return>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if></elseif> <elseif pos:line="46" pos:column="11">else <if pos:line="46" pos:column="16">if <condition pos:line="46" pos:column="19">(<expr><call><name pos:line="46" pos:column="20">skip_prefix<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">(<argument><expr><name pos:line="46" pos:column="32">arg<pos:position pos:line="46" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="37">"--branches="<pos:position pos:line="46" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="46" pos:column="52">&amp;<pos:position pos:line="46" pos:column="57"/></operator><name pos:line="46" pos:column="53">optarg<pos:position pos:line="46" pos:column="59"/></name></expr></argument>)<pos:position pos:line="46" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="61"/></condition><then pos:line="46" pos:column="61"> <block pos:line="46" pos:column="62">{
		<decl_stmt><decl><type><name><name pos:line="47" pos:column="17">struct<pos:position pos:line="47" pos:column="23"/></name> <name pos:line="47" pos:column="24">all_refs_cb<pos:position pos:line="47" pos:column="35"/></name></name></type> <name pos:line="47" pos:column="36">cb<pos:position pos:line="47" pos:column="38"/></name></decl>;<pos:position pos:line="47" pos:column="39"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">init_all_refs_cb<pos:position pos:line="48" pos:column="33"/></name><argument_list pos:line="48" pos:column="33">(<argument><expr><operator pos:line="48" pos:column="34">&amp;<pos:position pos:line="48" pos:column="39"/></operator><name pos:line="48" pos:column="35">cb<pos:position pos:line="48" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="39">revs<pos:position pos:line="48" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="45">*<pos:position pos:line="48" pos:column="46"/></operator><name pos:line="48" pos:column="46">flags<pos:position pos:line="48" pos:column="51"/></name></expr></argument>)<pos:position pos:line="48" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">for_each_glob_ref_in<pos:position pos:line="49" pos:column="37"/></name><argument_list pos:line="49" pos:column="37">(<argument><expr><name pos:line="49" pos:column="38">handle_one_ref<pos:position pos:line="49" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="54">optarg<pos:position pos:line="49" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="62">"refs/heads/"<pos:position pos:line="49" pos:column="75"/></literal></expr></argument>, <argument><expr><operator pos:line="49" pos:column="77">&amp;<pos:position pos:line="49" pos:column="82"/></operator><name pos:line="49" pos:column="78">cb<pos:position pos:line="49" pos:column="80"/></name></expr></argument>)<pos:position pos:line="49" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="82"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">clear_ref_exclusion<pos:position pos:line="50" pos:column="36"/></name><argument_list pos:line="50" pos:column="36">(<argument><expr><operator pos:line="50" pos:column="37">&amp;<pos:position pos:line="50" pos:column="42"/></operator><name><name pos:line="50" pos:column="38">revs<pos:position pos:line="50" pos:column="42"/></name><operator pos:line="50" pos:column="42">-&gt;<pos:position pos:line="50" pos:column="47"/></operator><name pos:line="50" pos:column="44">ref_excludes<pos:position pos:line="50" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if></elseif> <elseif pos:line="51" pos:column="11">else <if pos:line="51" pos:column="16">if <condition pos:line="51" pos:column="19">(<expr><call><name pos:line="51" pos:column="20">skip_prefix<pos:position pos:line="51" pos:column="31"/></name><argument_list pos:line="51" pos:column="31">(<argument><expr><name pos:line="51" pos:column="32">arg<pos:position pos:line="51" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="37">"--tags="<pos:position pos:line="51" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="51" pos:column="48">&amp;<pos:position pos:line="51" pos:column="53"/></operator><name pos:line="51" pos:column="49">optarg<pos:position pos:line="51" pos:column="55"/></name></expr></argument>)<pos:position pos:line="51" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="57"/></condition><then pos:line="51" pos:column="57"> <block pos:line="51" pos:column="58">{
		<decl_stmt><decl><type><name><name pos:line="52" pos:column="17">struct<pos:position pos:line="52" pos:column="23"/></name> <name pos:line="52" pos:column="24">all_refs_cb<pos:position pos:line="52" pos:column="35"/></name></name></type> <name pos:line="52" pos:column="36">cb<pos:position pos:line="52" pos:column="38"/></name></decl>;<pos:position pos:line="52" pos:column="39"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">init_all_refs_cb<pos:position pos:line="53" pos:column="33"/></name><argument_list pos:line="53" pos:column="33">(<argument><expr><operator pos:line="53" pos:column="34">&amp;<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="35">cb<pos:position pos:line="53" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="39">revs<pos:position pos:line="53" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="45">*<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="46">flags<pos:position pos:line="53" pos:column="51"/></name></expr></argument>)<pos:position pos:line="53" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">for_each_glob_ref_in<pos:position pos:line="54" pos:column="37"/></name><argument_list pos:line="54" pos:column="37">(<argument><expr><name pos:line="54" pos:column="38">handle_one_ref<pos:position pos:line="54" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="54">optarg<pos:position pos:line="54" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="62">"refs/tags/"<pos:position pos:line="54" pos:column="74"/></literal></expr></argument>, <argument><expr><operator pos:line="54" pos:column="76">&amp;<pos:position pos:line="54" pos:column="81"/></operator><name pos:line="54" pos:column="77">cb<pos:position pos:line="54" pos:column="79"/></name></expr></argument>)<pos:position pos:line="54" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="81"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">clear_ref_exclusion<pos:position pos:line="55" pos:column="36"/></name><argument_list pos:line="55" pos:column="36">(<argument><expr><operator pos:line="55" pos:column="37">&amp;<pos:position pos:line="55" pos:column="42"/></operator><name><name pos:line="55" pos:column="38">revs<pos:position pos:line="55" pos:column="42"/></name><operator pos:line="55" pos:column="42">-&gt;<pos:position pos:line="55" pos:column="47"/></operator><name pos:line="55" pos:column="44">ref_excludes<pos:position pos:line="55" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if></elseif> <elseif pos:line="56" pos:column="11">else <if pos:line="56" pos:column="16">if <condition pos:line="56" pos:column="19">(<expr><call><name pos:line="56" pos:column="20">skip_prefix<pos:position pos:line="56" pos:column="31"/></name><argument_list pos:line="56" pos:column="31">(<argument><expr><name pos:line="56" pos:column="32">arg<pos:position pos:line="56" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="37">"--remotes="<pos:position pos:line="56" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="56" pos:column="51">&amp;<pos:position pos:line="56" pos:column="56"/></operator><name pos:line="56" pos:column="52">optarg<pos:position pos:line="56" pos:column="58"/></name></expr></argument>)<pos:position pos:line="56" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="60"/></condition><then pos:line="56" pos:column="60"> <block pos:line="56" pos:column="61">{
		<decl_stmt><decl><type><name><name pos:line="57" pos:column="17">struct<pos:position pos:line="57" pos:column="23"/></name> <name pos:line="57" pos:column="24">all_refs_cb<pos:position pos:line="57" pos:column="35"/></name></name></type> <name pos:line="57" pos:column="36">cb<pos:position pos:line="57" pos:column="38"/></name></decl>;<pos:position pos:line="57" pos:column="39"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">init_all_refs_cb<pos:position pos:line="58" pos:column="33"/></name><argument_list pos:line="58" pos:column="33">(<argument><expr><operator pos:line="58" pos:column="34">&amp;<pos:position pos:line="58" pos:column="39"/></operator><name pos:line="58" pos:column="35">cb<pos:position pos:line="58" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="39">revs<pos:position pos:line="58" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="45">*<pos:position pos:line="58" pos:column="46"/></operator><name pos:line="58" pos:column="46">flags<pos:position pos:line="58" pos:column="51"/></name></expr></argument>)<pos:position pos:line="58" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">for_each_glob_ref_in<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><name pos:line="59" pos:column="38">handle_one_ref<pos:position pos:line="59" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="54">optarg<pos:position pos:line="59" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="62">"refs/remotes/"<pos:position pos:line="59" pos:column="77"/></literal></expr></argument>, <argument><expr><operator pos:line="59" pos:column="79">&amp;<pos:position pos:line="59" pos:column="84"/></operator><name pos:line="59" pos:column="80">cb<pos:position pos:line="59" pos:column="82"/></name></expr></argument>)<pos:position pos:line="59" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="84"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">clear_ref_exclusion<pos:position pos:line="60" pos:column="36"/></name><argument_list pos:line="60" pos:column="36">(<argument><expr><operator pos:line="60" pos:column="37">&amp;<pos:position pos:line="60" pos:column="42"/></operator><name><name pos:line="60" pos:column="38">revs<pos:position pos:line="60" pos:column="42"/></name><operator pos:line="60" pos:column="42">-&gt;<pos:position pos:line="60" pos:column="47"/></operator><name pos:line="60" pos:column="44">ref_excludes<pos:position pos:line="60" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if></elseif> <elseif pos:line="61" pos:column="11">else <if pos:line="61" pos:column="16">if <condition pos:line="61" pos:column="19">(<expr><operator pos:line="61" pos:column="20">!<pos:position pos:line="61" pos:column="21"/></operator><call><name pos:line="61" pos:column="21">strcmp<pos:position pos:line="61" pos:column="27"/></name><argument_list pos:line="61" pos:column="27">(<argument><expr><name pos:line="61" pos:column="28">arg<pos:position pos:line="61" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="33">"--reflog"<pos:position pos:line="61" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="45"/></condition><then pos:line="61" pos:column="45"> <block pos:line="61" pos:column="46">{
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">add_reflogs_to_pending<pos:position pos:line="62" pos:column="39"/></name><argument_list pos:line="62" pos:column="39">(<argument><expr><name pos:line="62" pos:column="40">revs<pos:position pos:line="62" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="46">*<pos:position pos:line="62" pos:column="47"/></operator><name pos:line="62" pos:column="47">flags<pos:position pos:line="62" pos:column="52"/></name></expr></argument>)<pos:position pos:line="62" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="63" pos:column="10"/></block></then></if></elseif> <elseif pos:line="63" pos:column="11">else <if pos:line="63" pos:column="16">if <condition pos:line="63" pos:column="19">(<expr><operator pos:line="63" pos:column="20">!<pos:position pos:line="63" pos:column="21"/></operator><call><name pos:line="63" pos:column="21">strcmp<pos:position pos:line="63" pos:column="27"/></name><argument_list pos:line="63" pos:column="27">(<argument><expr><name pos:line="63" pos:column="28">arg<pos:position pos:line="63" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="33">"--indexed-objects"<pos:position pos:line="63" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="54"/></condition><then pos:line="63" pos:column="54"> <block pos:line="63" pos:column="55">{
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">add_index_objects_to_pending<pos:position pos:line="64" pos:column="45"/></name><argument_list pos:line="64" pos:column="45">(<argument><expr><name pos:line="64" pos:column="46">revs<pos:position pos:line="64" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="52">*<pos:position pos:line="64" pos:column="53"/></operator><name pos:line="64" pos:column="53">flags<pos:position pos:line="64" pos:column="58"/></name></expr></argument>)<pos:position pos:line="64" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="65" pos:column="10"/></block></then></if></elseif> <elseif pos:line="65" pos:column="11">else <if pos:line="65" pos:column="16">if <condition pos:line="65" pos:column="19">(<expr><operator pos:line="65" pos:column="20">!<pos:position pos:line="65" pos:column="21"/></operator><call><name pos:line="65" pos:column="21">strcmp<pos:position pos:line="65" pos:column="27"/></name><argument_list pos:line="65" pos:column="27">(<argument><expr><name pos:line="65" pos:column="28">arg<pos:position pos:line="65" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="33">"--not"<pos:position pos:line="65" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="42"/></condition><then pos:line="65" pos:column="42"> <block pos:line="65" pos:column="43">{
		<expr_stmt><expr><operator pos:line="66" pos:column="17">*<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="18">flags<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">^=<pos:position pos:line="66" pos:column="26"/></operator> <name pos:line="66" pos:column="27">UNINTERESTING<pos:position pos:line="66" pos:column="40"/></name> <operator pos:line="66" pos:column="41">|<pos:position pos:line="66" pos:column="42"/></operator> <name pos:line="66" pos:column="43">BOTTOM<pos:position pos:line="66" pos:column="49"/></name></expr>;<pos:position pos:line="66" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></then></if></elseif> <elseif pos:line="67" pos:column="11">else <if pos:line="67" pos:column="16">if <condition pos:line="67" pos:column="19">(<expr><operator pos:line="67" pos:column="20">!<pos:position pos:line="67" pos:column="21"/></operator><call><name pos:line="67" pos:column="21">strcmp<pos:position pos:line="67" pos:column="27"/></name><argument_list pos:line="67" pos:column="27">(<argument><expr><name pos:line="67" pos:column="28">arg<pos:position pos:line="67" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="33">"--no-walk"<pos:position pos:line="67" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="46"/></condition><then pos:line="67" pos:column="46"> <block pos:line="67" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="68" pos:column="17">revs<pos:position pos:line="68" pos:column="21"/></name><operator pos:line="68" pos:column="21">-&gt;<pos:position pos:line="68" pos:column="26"/></operator><name pos:line="68" pos:column="23">no_walk<pos:position pos:line="68" pos:column="30"/></name></name> <operator pos:line="68" pos:column="31">=<pos:position pos:line="68" pos:column="32"/></operator> <name pos:line="68" pos:column="33">REVISION_WALK_NO_WALK_SORTED<pos:position pos:line="68" pos:column="61"/></name></expr>;<pos:position pos:line="68" pos:column="62"/></expr_stmt>
	}<pos:position pos:line="69" pos:column="10"/></block></then></if></elseif> <elseif pos:line="69" pos:column="11">else <if pos:line="69" pos:column="16">if <condition pos:line="69" pos:column="19">(<expr><call><name pos:line="69" pos:column="20">skip_prefix<pos:position pos:line="69" pos:column="31"/></name><argument_list pos:line="69" pos:column="31">(<argument><expr><name pos:line="69" pos:column="32">arg<pos:position pos:line="69" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="37">"--no-walk="<pos:position pos:line="69" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="69" pos:column="51">&amp;<pos:position pos:line="69" pos:column="56"/></operator><name pos:line="69" pos:column="52">optarg<pos:position pos:line="69" pos:column="58"/></name></expr></argument>)<pos:position pos:line="69" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="60"/></condition><then pos:line="69" pos:column="60"> <block pos:line="69" pos:column="61">{
		<comment type="block" pos:line="70" pos:column="17">/*
		 * Detached form ("--no-walk X" as opposed to "--no-walk=X")
		 * not allowed, since the argument is optional.
		 */</comment>
		<if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><operator pos:line="74" pos:column="21">!<pos:position pos:line="74" pos:column="22"/></operator><call><name pos:line="74" pos:column="22">strcmp<pos:position pos:line="74" pos:column="28"/></name><argument_list pos:line="74" pos:column="28">(<argument><expr><name pos:line="74" pos:column="29">optarg<pos:position pos:line="74" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="37">"sorted"<pos:position pos:line="74" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="47"/></condition><then pos:line="74" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="75" pos:column="25">revs<pos:position pos:line="75" pos:column="29"/></name><operator pos:line="75" pos:column="29">-&gt;<pos:position pos:line="75" pos:column="34"/></operator><name pos:line="75" pos:column="31">no_walk<pos:position pos:line="75" pos:column="38"/></name></name> <operator pos:line="75" pos:column="39">=<pos:position pos:line="75" pos:column="40"/></operator> <name pos:line="75" pos:column="41">REVISION_WALK_NO_WALK_SORTED<pos:position pos:line="75" pos:column="69"/></name></expr>;<pos:position pos:line="75" pos:column="70"/></expr_stmt></block></then>
		<elseif pos:line="76" pos:column="17">else <if pos:line="76" pos:column="22">if <condition pos:line="76" pos:column="25">(<expr><operator pos:line="76" pos:column="26">!<pos:position pos:line="76" pos:column="27"/></operator><call><name pos:line="76" pos:column="27">strcmp<pos:position pos:line="76" pos:column="33"/></name><argument_list pos:line="76" pos:column="33">(<argument><expr><name pos:line="76" pos:column="34">optarg<pos:position pos:line="76" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="42">"unsorted"<pos:position pos:line="76" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="54"/></condition><then pos:line="76" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="77" pos:column="25">revs<pos:position pos:line="77" pos:column="29"/></name><operator pos:line="77" pos:column="29">-&gt;<pos:position pos:line="77" pos:column="34"/></operator><name pos:line="77" pos:column="31">no_walk<pos:position pos:line="77" pos:column="38"/></name></name> <operator pos:line="77" pos:column="39">=<pos:position pos:line="77" pos:column="40"/></operator> <name pos:line="77" pos:column="41">REVISION_WALK_NO_WALK_UNSORTED<pos:position pos:line="77" pos:column="71"/></name></expr>;<pos:position pos:line="77" pos:column="72"/></expr_stmt></block></then></if></elseif>
		<else pos:line="78" pos:column="17">else
			<block type="pseudo"><return pos:line="79" pos:column="25">return <expr><call><name pos:line="79" pos:column="32">error<pos:position pos:line="79" pos:column="37"/></name><argument_list pos:line="79" pos:column="37">(<argument><expr><literal type="string" pos:line="79" pos:column="38">"invalid argument to --no-walk"<pos:position pos:line="79" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="71"/></return></block></else></if>
	}<pos:position pos:line="80" pos:column="10"/></block></then></if></elseif> <elseif pos:line="80" pos:column="11">else <if pos:line="80" pos:column="16">if <condition pos:line="80" pos:column="19">(<expr><operator pos:line="80" pos:column="20">!<pos:position pos:line="80" pos:column="21"/></operator><call><name pos:line="80" pos:column="21">strcmp<pos:position pos:line="80" pos:column="27"/></name><argument_list pos:line="80" pos:column="27">(<argument><expr><name pos:line="80" pos:column="28">arg<pos:position pos:line="80" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="33">"--do-walk"<pos:position pos:line="80" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="46"/></condition><then pos:line="80" pos:column="46"> <block pos:line="80" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="81" pos:column="17">revs<pos:position pos:line="81" pos:column="21"/></name><operator pos:line="81" pos:column="21">-&gt;<pos:position pos:line="81" pos:column="26"/></operator><name pos:line="81" pos:column="23">no_walk<pos:position pos:line="81" pos:column="30"/></name></name> <operator pos:line="81" pos:column="31">=<pos:position pos:line="81" pos:column="32"/></operator> <literal type="number" pos:line="81" pos:column="33">0<pos:position pos:line="81" pos:column="34"/></literal></expr>;<pos:position pos:line="81" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="82" pos:column="10"/></block></then></if></elseif> <else pos:line="82" pos:column="11">else <block pos:line="82" pos:column="16">{
		<return pos:line="83" pos:column="17">return <expr><literal type="number" pos:line="83" pos:column="24">0<pos:position pos:line="83" pos:column="25"/></literal></expr>;<pos:position pos:line="83" pos:column="26"/></return>
	}<pos:position pos:line="84" pos:column="10"/></block></else></if>

	<return pos:line="86" pos:column="9">return <expr><literal type="number" pos:line="86" pos:column="16">1<pos:position pos:line="86" pos:column="17"/></literal></expr>;<pos:position pos:line="86" pos:column="18"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
