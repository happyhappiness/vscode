<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6176_git-2.8.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">traverse_and_check<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">mstate<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">m<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list> <block pos:line="1" pos:column="44">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">size_t<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">sum<pos:position pos:line="2" pos:column="13"/></name> <init pos:line="2" pos:column="14">= <expr><literal type="number" pos:line="2" pos:column="16">0<pos:position pos:line="2" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="18"/></decl_stmt>
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><call><name pos:line="3" pos:column="7">is_initialized<pos:position pos:line="3" pos:column="21"/></name><argument_list pos:line="3" pos:column="21">(<argument><expr><name pos:line="3" pos:column="22">m<pos:position pos:line="3" pos:column="23"/></name></expr></argument>)<pos:position pos:line="3" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="25"/></condition><then pos:line="3" pos:column="25"> <block pos:line="3" pos:column="26">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">msegmentptr<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">s<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><operator pos:line="4" pos:column="21">&amp;<pos:position pos:line="4" pos:column="26"/></operator><name><name pos:line="4" pos:column="22">m<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">-&gt;<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="25">seg<pos:position pos:line="4" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">sum<pos:position pos:line="5" pos:column="8"/></name> <operator pos:line="5" pos:column="9">+=<pos:position pos:line="5" pos:column="11"/></operator> <name><name pos:line="5" pos:column="12">m<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">-&gt;<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="15">topsize<pos:position pos:line="5" pos:column="22"/></name></name> <operator pos:line="5" pos:column="23">+<pos:position pos:line="5" pos:column="24"/></operator> <name pos:line="5" pos:column="25">TOP_FOOT_SIZE<pos:position pos:line="5" pos:column="38"/></name></expr>;<pos:position pos:line="5" pos:column="39"/></expr_stmt>
    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><name pos:line="6" pos:column="12">s<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">!=<pos:position pos:line="6" pos:column="16"/></operator> <literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr>)<pos:position pos:line="6" pos:column="19"/></condition> <block pos:line="6" pos:column="20">{
      <decl_stmt><decl><type><name pos:line="7" pos:column="7">mchunkptr<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">q<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><call><name pos:line="7" pos:column="21">align_as_chunk<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><name><name pos:line="7" pos:column="36">s<pos:position pos:line="7" pos:column="37"/></name><operator pos:line="7" pos:column="37">-&gt;<pos:position pos:line="7" pos:column="42"/></operator><name pos:line="7" pos:column="39">base<pos:position pos:line="7" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="45"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="8" pos:column="7">mchunkptr<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">lastq<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><literal type="number" pos:line="8" pos:column="25">0<pos:position pos:line="8" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="9" pos:column="7">assert<pos:position pos:line="9" pos:column="13"/></name><argument_list pos:line="9" pos:column="13">(<argument><expr><call><name pos:line="9" pos:column="14">pinuse<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name pos:line="9" pos:column="21">q<pos:position pos:line="9" pos:column="22"/></name></expr></argument>)<pos:position pos:line="9" pos:column="23"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>
      <while pos:line="10" pos:column="7">while <condition pos:line="10" pos:column="13">(<expr><call><name pos:line="10" pos:column="14">segment_holds<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">s<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="31">q<pos:position pos:line="10" pos:column="32"/></name></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call> <operator pos:line="10" pos:column="34">&amp;&amp;<pos:position pos:line="10" pos:column="44"/></operator>
	     <name pos:line="11" pos:column="14">q<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">!=<pos:position pos:line="11" pos:column="18"/></operator> <name><name pos:line="11" pos:column="19">m<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">-&gt;<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="22">top<pos:position pos:line="11" pos:column="25"/></name></name> <operator pos:line="11" pos:column="26">&amp;&amp;<pos:position pos:line="11" pos:column="36"/></operator> <name><name pos:line="11" pos:column="29">q<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">-&gt;<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="32">head<pos:position pos:line="11" pos:column="36"/></name></name> <operator pos:line="11" pos:column="37">!=<pos:position pos:line="11" pos:column="39"/></operator> <name pos:line="11" pos:column="40">FENCEPOST_HEAD<pos:position pos:line="11" pos:column="54"/></name></expr>)<pos:position pos:line="11" pos:column="55"/></condition> <block pos:line="11" pos:column="56">{
	<expr_stmt><expr><name pos:line="12" pos:column="9">sum<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">+=<pos:position pos:line="12" pos:column="15"/></operator> <call><name pos:line="12" pos:column="16">chunksize<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">q<pos:position pos:line="12" pos:column="27"/></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">cinuse<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">q<pos:position pos:line="13" pos:column="21"/></name></expr></argument>)<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="23"/></condition><then pos:line="13" pos:column="23"> <block pos:line="13" pos:column="24">{
	  <expr_stmt><expr><call><name pos:line="14" pos:column="11">assert<pos:position pos:line="14" pos:column="17"/></name><argument_list pos:line="14" pos:column="17">(<argument><expr><operator pos:line="14" pos:column="18">!<pos:position pos:line="14" pos:column="19"/></operator><call><name pos:line="14" pos:column="19">bin_find<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">m<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="31">q<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="15" pos:column="11">do_check_inuse_chunk<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">m<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="35">q<pos:position pos:line="15" pos:column="36"/></name></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then>
	<else pos:line="17" pos:column="9">else <block pos:line="17" pos:column="14">{
	  <expr_stmt><expr><call><name pos:line="18" pos:column="11">assert<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">q<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">==<pos:position pos:line="18" pos:column="22"/></operator> <name><name pos:line="18" pos:column="23">m<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">-&gt;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="26">dv<pos:position pos:line="18" pos:column="28"/></name></name> <operator pos:line="18" pos:column="29">||<pos:position pos:line="18" pos:column="31"/></operator> <call><name pos:line="18" pos:column="32">bin_find<pos:position pos:line="18" pos:column="40"/></name><argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">m<pos:position pos:line="18" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="44">q<pos:position pos:line="18" pos:column="45"/></name></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="19" pos:column="11">assert<pos:position pos:line="19" pos:column="17"/></name><argument_list pos:line="19" pos:column="17">(<argument><expr><name pos:line="19" pos:column="18">lastq<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">==<pos:position pos:line="19" pos:column="26"/></operator> <literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal> <operator pos:line="19" pos:column="29">||<pos:position pos:line="19" pos:column="31"/></operator> <call><name pos:line="19" pos:column="32">cinuse<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(<argument><expr><name pos:line="19" pos:column="39">lastq<pos:position pos:line="19" pos:column="44"/></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt> <comment type="block" pos:line="19" pos:column="48">/* Not 2 consecutive free */</comment>
	  <expr_stmt><expr><call><name pos:line="20" pos:column="11">do_check_free_chunk<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">m<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">q<pos:position pos:line="20" pos:column="35"/></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></else></if>
	<expr_stmt><expr><name pos:line="22" pos:column="9">lastq<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">=<pos:position pos:line="22" pos:column="16"/></operator> <name pos:line="22" pos:column="17">q<pos:position pos:line="22" pos:column="18"/></name></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="23" pos:column="9">q<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <call><name pos:line="23" pos:column="13">next_chunk<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><name pos:line="23" pos:column="24">q<pos:position pos:line="23" pos:column="25"/></name></expr></argument>)<pos:position pos:line="23" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>
      }<pos:position pos:line="24" pos:column="8"/></block></while>
      <expr_stmt><expr><name pos:line="25" pos:column="7">s<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">=<pos:position pos:line="25" pos:column="10"/></operator> <name><name pos:line="25" pos:column="11">s<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">next<pos:position pos:line="25" pos:column="18"/></name></name></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></while>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>
  <return pos:line="28" pos:column="3">return <expr><name pos:line="28" pos:column="10">sum<pos:position pos:line="28" pos:column="13"/></name></expr>;<pos:position pos:line="28" pos:column="14"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
