<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3822_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">blob_unchanged<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">merge_options<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">opt<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
			  <parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name><name pos:line="2" pos:column="33">struct<pos:position pos:line="2" pos:column="39"/></name> <name pos:line="2" pos:column="40">object_id<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">o_oid<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="3" pos:column="27">unsigned<pos:position pos:line="3" pos:column="35"/></name></type> <name pos:line="3" pos:column="36">o_mode<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>,
			  <parameter><decl><type><specifier pos:line="4" pos:column="27">const<pos:position pos:line="4" pos:column="32"/></specifier> <name><name pos:line="4" pos:column="33">struct<pos:position pos:line="4" pos:column="39"/></name> <name pos:line="4" pos:column="40">object_id<pos:position pos:line="4" pos:column="49"/></name></name> <modifier pos:line="4" pos:column="50">*<pos:position pos:line="4" pos:column="51"/></modifier></type><name pos:line="4" pos:column="51">a_oid<pos:position pos:line="4" pos:column="56"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="5" pos:column="27">unsigned<pos:position pos:line="5" pos:column="35"/></name></type> <name pos:line="5" pos:column="36">a_mode<pos:position pos:line="5" pos:column="42"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="6" pos:column="27">int<pos:position pos:line="6" pos:column="30"/></name></type> <name pos:line="6" pos:column="31">renormalize<pos:position pos:line="6" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="6" pos:column="44">const<pos:position pos:line="6" pos:column="49"/></specifier> <name pos:line="6" pos:column="50">char<pos:position pos:line="6" pos:column="54"/></name> <modifier pos:line="6" pos:column="55">*<pos:position pos:line="6" pos:column="56"/></modifier></type><name pos:line="6" pos:column="56">path<pos:position pos:line="6" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="61"/></parameter_list>
<block pos:line="7" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">o<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><name pos:line="8" pos:column="27">STRBUF_INIT<pos:position pos:line="8" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">strbuf<pos:position pos:line="9" pos:column="22"/></name></name></type> <name pos:line="9" pos:column="23">a<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><name pos:line="9" pos:column="27">STRBUF_INIT<pos:position pos:line="9" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">ret<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt> <comment type="block" pos:line="10" pos:column="22">/* assume changed for safety */</comment>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">a_mode<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">!=<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="23">o_mode<pos:position pos:line="12" pos:column="29"/></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></return></block></then></if>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">oid_eq<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><name pos:line="14" pos:column="20">o_oid<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="27">a_oid<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="34"/></condition><then pos:line="14" pos:column="34">
		<block type="pseudo"><return pos:line="15" pos:column="17">return <expr><literal type="number" pos:line="15" pos:column="24">1<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></return></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">renormalize<pos:position pos:line="16" pos:column="25"/></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26">
		<block type="pseudo"><return pos:line="17" pos:column="17">return <expr><literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="19" pos:column="9">assert<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name pos:line="19" pos:column="16">o_oid<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">&amp;&amp;<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="25">a_oid<pos:position pos:line="19" pos:column="30"/></name></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">read_oid_strbuf<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><name pos:line="20" pos:column="29">opt<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">o_oid<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="41">&amp;<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="42">o<pos:position pos:line="20" pos:column="43"/></name></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call> <operator pos:line="20" pos:column="45">||<pos:position pos:line="20" pos:column="47"/></operator> <call><name pos:line="20" pos:column="48">read_oid_strbuf<pos:position pos:line="20" pos:column="63"/></name><argument_list pos:line="20" pos:column="63">(<argument><expr><name pos:line="20" pos:column="64">opt<pos:position pos:line="20" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="69">a_oid<pos:position pos:line="20" pos:column="74"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="76">&amp;<pos:position pos:line="20" pos:column="81"/></operator><name pos:line="20" pos:column="77">a<pos:position pos:line="20" pos:column="78"/></name></expr></argument>)<pos:position pos:line="20" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="80"/></condition><then pos:line="20" pos:column="80">
		<block type="pseudo"><goto pos:line="21" pos:column="17">goto <name pos:line="21" pos:column="22">error_return<pos:position pos:line="21" pos:column="34"/></name>;<pos:position pos:line="21" pos:column="35"/></goto></block></then></if>
	<comment type="block" pos:line="22" pos:column="9">/*
	 * Note: binary | is used so that both renormalizations are
	 * performed.  Comparison can be skipped if both files are
	 * unchanged since their sha1s have already been compared.
	 */</comment>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><call><name pos:line="27" pos:column="13">renormalize_buffer<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><operator pos:line="27" pos:column="32">&amp;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="33">the_index<pos:position pos:line="27" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="44">path<pos:position pos:line="27" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="50">o<pos:position pos:line="27" pos:column="51"/></name><operator pos:line="27" pos:column="51">.<pos:position pos:line="27" pos:column="52"/></operator><name pos:line="27" pos:column="52">buf<pos:position pos:line="27" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="57">o<pos:position pos:line="27" pos:column="58"/></name><operator pos:line="27" pos:column="58">.<pos:position pos:line="27" pos:column="59"/></operator><name pos:line="27" pos:column="59">len<pos:position pos:line="27" pos:column="62"/></name></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="64">&amp;<pos:position pos:line="27" pos:column="69"/></operator><name pos:line="27" pos:column="65">o<pos:position pos:line="27" pos:column="66"/></name></expr></argument>)<pos:position pos:line="27" pos:column="67"/></argument_list></call> <operator pos:line="27" pos:column="68">|<pos:position pos:line="27" pos:column="69"/></operator>
	    <call><name pos:line="28" pos:column="13">renormalize_buffer<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><operator pos:line="28" pos:column="32">&amp;<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="33">the_index<pos:position pos:line="28" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="44">path<pos:position pos:line="28" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="50">a<pos:position pos:line="28" pos:column="51"/></name><operator pos:line="28" pos:column="51">.<pos:position pos:line="28" pos:column="52"/></operator><name pos:line="28" pos:column="52">buf<pos:position pos:line="28" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="57">a<pos:position pos:line="28" pos:column="58"/></name><operator pos:line="28" pos:column="58">.<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="59">len<pos:position pos:line="28" pos:column="62"/></name></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="64">&amp;<pos:position pos:line="28" pos:column="69"/></operator><name pos:line="28" pos:column="65">a<pos:position pos:line="28" pos:column="66"/></name></expr></argument>)<pos:position pos:line="28" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="68"/></condition><then pos:line="28" pos:column="68">
		<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="17">ret<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <operator pos:line="29" pos:column="23">(<pos:position pos:line="29" pos:column="24"/></operator><name><name pos:line="29" pos:column="24">o<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">.<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">len<pos:position pos:line="29" pos:column="29"/></name></name> <operator pos:line="29" pos:column="30">==<pos:position pos:line="29" pos:column="32"/></operator> <name><name pos:line="29" pos:column="33">a<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">.<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="35">len<pos:position pos:line="29" pos:column="38"/></name></name> <operator pos:line="29" pos:column="39">&amp;&amp;<pos:position pos:line="29" pos:column="49"/></operator> <operator pos:line="29" pos:column="42">!<pos:position pos:line="29" pos:column="43"/></operator><call><name pos:line="29" pos:column="43">memcmp<pos:position pos:line="29" pos:column="49"/></name><argument_list pos:line="29" pos:column="49">(<argument><expr><name><name pos:line="29" pos:column="50">o<pos:position pos:line="29" pos:column="51"/></name><operator pos:line="29" pos:column="51">.<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="52">buf<pos:position pos:line="29" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="57">a<pos:position pos:line="29" pos:column="58"/></name><operator pos:line="29" pos:column="58">.<pos:position pos:line="29" pos:column="59"/></operator><name pos:line="29" pos:column="59">buf<pos:position pos:line="29" pos:column="62"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="64">o<pos:position pos:line="29" pos:column="65"/></name><operator pos:line="29" pos:column="65">.<pos:position pos:line="29" pos:column="66"/></operator><name pos:line="29" pos:column="66">len<pos:position pos:line="29" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></call><operator pos:line="29" pos:column="70">)<pos:position pos:line="29" pos:column="71"/></operator></expr>;<pos:position pos:line="29" pos:column="72"/></expr_stmt></block></then></if>

<label><name pos:line="31" pos:column="1">error_return<pos:position pos:line="31" pos:column="13"/></name>:<pos:position pos:line="31" pos:column="14"/></label>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">strbuf_release<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><operator pos:line="32" pos:column="24">&amp;<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="25">o<pos:position pos:line="32" pos:column="26"/></name></expr></argument>)<pos:position pos:line="32" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">strbuf_release<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><operator pos:line="33" pos:column="24">&amp;<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="25">a<pos:position pos:line="33" pos:column="26"/></name></expr></argument>)<pos:position pos:line="33" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
	<return pos:line="34" pos:column="9">return <expr><name pos:line="34" pos:column="16">ret<pos:position pos:line="34" pos:column="19"/></name></expr>;<pos:position pos:line="34" pos:column="20"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
