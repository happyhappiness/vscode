<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1891.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">show_reference<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">refname<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">unsigned<pos:position pos:line="1" pos:column="62"/></name> <name pos:line="1" pos:column="63">char<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">sha1<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="2" pos:column="27">int<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">flag<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">void<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">cb_data<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">show_data<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">data<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><name pos:line="4" pos:column="34">cb_data<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">wildmatch<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><name><name pos:line="6" pos:column="24">data<pos:position pos:line="6" pos:column="28"/></name><operator pos:line="6" pos:column="28">-&gt;<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="30">pattern<pos:position pos:line="6" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="39">refname<pos:position pos:line="6" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="48">0<pos:position pos:line="6" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="51">NULL<pos:position pos:line="6" pos:column="55"/></name></expr></argument>)<pos:position pos:line="6" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="57"/></condition><then pos:line="6" pos:column="57"> <block pos:line="6" pos:column="58">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name><name pos:line="7" pos:column="21">data<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">-&gt;<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="27">format<pos:position pos:line="7" pos:column="33"/></name></name> <operator pos:line="7" pos:column="34">==<pos:position pos:line="7" pos:column="36"/></operator> <name pos:line="7" pos:column="37">REPLACE_FORMAT_SHORT<pos:position pos:line="7" pos:column="57"/></name></expr>)<pos:position pos:line="7" pos:column="58"/></condition><then pos:line="7" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="25">printf<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><literal type="string" pos:line="8" pos:column="32">"%s\n"<pos:position pos:line="8" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">refname<pos:position pos:line="8" pos:column="47"/></name></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="49"/></expr_stmt></block></then>
		<elseif pos:line="9" pos:column="17">else <if pos:line="9" pos:column="22">if <condition pos:line="9" pos:column="25">(<expr><name><name pos:line="9" pos:column="26">data<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">-&gt;<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="32">format<pos:position pos:line="9" pos:column="38"/></name></name> <operator pos:line="9" pos:column="39">==<pos:position pos:line="9" pos:column="41"/></operator> <name pos:line="9" pos:column="42">REPLACE_FORMAT_MEDIUM<pos:position pos:line="9" pos:column="63"/></name></expr>)<pos:position pos:line="9" pos:column="64"/></condition><then pos:line="9" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">printf<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><literal type="string" pos:line="10" pos:column="32">"%s -&gt; %s\n"<pos:position pos:line="10" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="46">refname<pos:position pos:line="10" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="55">sha1_to_hex<pos:position pos:line="10" pos:column="66"/></name><argument_list pos:line="10" pos:column="66">(<argument><expr><name pos:line="10" pos:column="67">sha1<pos:position pos:line="10" pos:column="71"/></name></expr></argument>)<pos:position pos:line="10" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="74"/></expr_stmt></block></then></if></elseif>
		<else pos:line="11" pos:column="17">else <block pos:line="11" pos:column="22">{ <comment type="block" pos:line="11" pos:column="24">/* data-&gt;format == REPLACE_FORMAT_LONG */</comment>
			<decl_stmt><decl><type><name pos:line="12" pos:column="25">unsigned<pos:position pos:line="12" pos:column="33"/></name> <name pos:line="12" pos:column="34">char<pos:position pos:line="12" pos:column="38"/></name></type> <name><name pos:line="12" pos:column="39">object<pos:position pos:line="12" pos:column="45"/></name><index pos:line="12" pos:column="45">[<expr><literal type="number" pos:line="12" pos:column="46">20<pos:position pos:line="12" pos:column="48"/></literal></expr>]<pos:position pos:line="12" pos:column="49"/></index></name></decl>;<pos:position pos:line="12" pos:column="50"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="13" pos:column="25">enum<pos:position pos:line="13" pos:column="29"/></name> <name pos:line="13" pos:column="30">object_type<pos:position pos:line="13" pos:column="41"/></name></name></type> <name pos:line="13" pos:column="42">obj_type<pos:position pos:line="13" pos:column="50"/></name></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="52">repl_type<pos:position pos:line="13" pos:column="61"/></name></decl>;<pos:position pos:line="13" pos:column="62"/></decl_stmt>

			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><call><name pos:line="15" pos:column="29">get_sha1<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">refname<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="47">object<pos:position pos:line="15" pos:column="53"/></name></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="55"/></condition><then pos:line="15" pos:column="55">
				<block type="pseudo"><return pos:line="16" pos:column="33">return <expr><call><name pos:line="16" pos:column="40">error<pos:position pos:line="16" pos:column="45"/></name><argument_list pos:line="16" pos:column="45">(<argument><expr><literal type="string" pos:line="16" pos:column="46">"Failed to resolve '%s' as a valid ref."<pos:position pos:line="16" pos:column="86"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="88">refname<pos:position pos:line="16" pos:column="95"/></name></expr></argument>)<pos:position pos:line="16" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="97"/></return></block></then></if>

			<expr_stmt><expr><name pos:line="18" pos:column="25">obj_type<pos:position pos:line="18" pos:column="33"/></name> <operator pos:line="18" pos:column="34">=<pos:position pos:line="18" pos:column="35"/></operator> <call><name pos:line="18" pos:column="36">sha1_object_info<pos:position pos:line="18" pos:column="52"/></name><argument_list pos:line="18" pos:column="52">(<argument><expr><name pos:line="18" pos:column="53">object<pos:position pos:line="18" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="61">NULL<pos:position pos:line="18" pos:column="65"/></name></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><name pos:line="19" pos:column="25">repl_type<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">=<pos:position pos:line="19" pos:column="36"/></operator> <call><name pos:line="19" pos:column="37">sha1_object_info<pos:position pos:line="19" pos:column="53"/></name><argument_list pos:line="19" pos:column="53">(<argument><expr><name pos:line="19" pos:column="54">sha1<pos:position pos:line="19" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="60">NULL<pos:position pos:line="19" pos:column="64"/></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="21" pos:column="25">printf<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><literal type="string" pos:line="21" pos:column="32">"%s (%s) -&gt; %s (%s)\n"<pos:position pos:line="21" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="56">refname<pos:position pos:line="21" pos:column="63"/></name></expr></argument>, <argument><expr><name><typename pos:line="21" pos:column="65">typename<pos:position pos:line="21" pos:column="73"/></typename></name><operator pos:line="21" pos:column="73">(<pos:position pos:line="21" pos:column="74"/></operator><name pos:line="21" pos:column="74">obj_type<pos:position pos:line="21" pos:column="82"/></name><operator pos:line="21" pos:column="82">)<pos:position pos:line="21" pos:column="83"/></operator></expr></argument>,
			       <argument><expr><call><name pos:line="22" pos:column="32">sha1_to_hex<pos:position pos:line="22" pos:column="43"/></name><argument_list pos:line="22" pos:column="43">(<argument><expr><name pos:line="22" pos:column="44">sha1<pos:position pos:line="22" pos:column="48"/></name></expr></argument>)<pos:position pos:line="22" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name><typename pos:line="22" pos:column="51">typename<pos:position pos:line="22" pos:column="59"/></typename></name><operator pos:line="22" pos:column="59">(<pos:position pos:line="22" pos:column="60"/></operator><name pos:line="22" pos:column="60">repl_type<pos:position pos:line="22" pos:column="69"/></name><operator pos:line="22" pos:column="69">)<pos:position pos:line="22" pos:column="70"/></operator></expr></argument>)<pos:position pos:line="22" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="72"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></else></if>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<return pos:line="26" pos:column="9">return <expr><literal type="number" pos:line="26" pos:column="16">0<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
