<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4782_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">notes_merge_pair<pos:position pos:line="1" pos:column="31"/></name></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">find_notes_merge_pair_pos<pos:position pos:line="1" pos:column="58"/></name><parameter_list pos:line="1" pos:column="58">(
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">notes_merge_pair<pos:position pos:line="2" pos:column="40"/></name></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">list<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">int<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">len<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="57">struct<pos:position pos:line="2" pos:column="63"/></name> <name pos:line="2" pos:column="64">object_id<pos:position pos:line="2" pos:column="73"/></name></name> <modifier pos:line="2" pos:column="74">*<pos:position pos:line="2" pos:column="75"/></modifier></type><name pos:line="2" pos:column="75">obj<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="3" pos:column="17">int<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">insert_new<pos:position pos:line="3" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="33">int<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">occupied<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="47"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<comment type="block" pos:line="5" pos:column="9">/*
	 * Both diff_tree_remote() and diff_tree_local() tend to process
	 * merge_pairs in ascending order. Therefore, cache last returned
	 * index, and search sequentially from there until the appropriate
	 * position is found.
	 *
	 * Since inserts only happen from diff_tree_remote() (which mainly
	 * _appends_), we don't care that inserting into the middle of the
	 * list is expensive (using memmove()).
	 */</comment>
	<decl_stmt><decl><specifier pos:line="15" pos:column="9">static<pos:position pos:line="15" pos:column="15"/></specifier> <type><name pos:line="15" pos:column="16">int<pos:position pos:line="15" pos:column="19"/></name></type> <name pos:line="15" pos:column="20">last_index<pos:position pos:line="15" pos:column="30"/></name></decl>;<pos:position pos:line="15" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int<pos:position pos:line="16" pos:column="12"/></name></type> <name pos:line="16" pos:column="13">i<pos:position pos:line="16" pos:column="14"/></name> <init pos:line="16" pos:column="15">= <expr><ternary><condition><expr><name pos:line="16" pos:column="17">last_index<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">&lt;<pos:position pos:line="16" pos:column="32"/></operator> <name pos:line="16" pos:column="30">len<pos:position pos:line="16" pos:column="33"/></name></expr> ?<pos:position pos:line="16" pos:column="35"/></condition><then pos:line="16" pos:column="35"> <expr><name pos:line="16" pos:column="36">last_index<pos:position pos:line="16" pos:column="46"/></name></expr> <pos:position pos:line="16" pos:column="47"/></then><else pos:line="16" pos:column="47">: <expr><name pos:line="16" pos:column="49">len<pos:position pos:line="16" pos:column="52"/></name> <operator pos:line="16" pos:column="53">-<pos:position pos:line="16" pos:column="54"/></operator> <literal type="number" pos:line="16" pos:column="55">1<pos:position pos:line="16" pos:column="56"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="16" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">int<pos:position pos:line="17" pos:column="12"/></name></type> <name pos:line="17" pos:column="13">prev_cmp<pos:position pos:line="17" pos:column="21"/></name> <init pos:line="17" pos:column="22">= <expr><literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="17" pos:column="27">cmp<pos:position pos:line="17" pos:column="30"/></name> <init pos:line="17" pos:column="31">= <expr><operator pos:line="17" pos:column="33">-<pos:position pos:line="17" pos:column="34"/></operator><literal type="number" pos:line="17" pos:column="34">1<pos:position pos:line="17" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="36"/></decl_stmt>
	<while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><name pos:line="18" pos:column="16">i<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">&gt;=<pos:position pos:line="18" pos:column="23"/></operator> <literal type="number" pos:line="18" pos:column="21">0<pos:position pos:line="18" pos:column="22"/></literal> <operator pos:line="18" pos:column="23">&amp;&amp;<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="26">i<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">&lt;<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="30">len<pos:position pos:line="18" pos:column="33"/></name></expr>)<pos:position pos:line="18" pos:column="34"/></condition> <block pos:line="18" pos:column="35">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">cmp<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <call><name pos:line="19" pos:column="23">oidcmp<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">obj<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="35">&amp;<pos:position pos:line="19" pos:column="40"/></operator><name><name pos:line="19" pos:column="36">list<pos:position pos:line="19" pos:column="40"/></name><index pos:line="19" pos:column="40">[<expr><name pos:line="19" pos:column="41">i<pos:position pos:line="19" pos:column="42"/></name></expr>]<pos:position pos:line="19" pos:column="43"/></index></name><operator pos:line="19" pos:column="43">.<pos:position pos:line="19" pos:column="44"/></operator><name pos:line="19" pos:column="44">obj<pos:position pos:line="19" pos:column="47"/></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">cmp<pos:position pos:line="20" pos:column="25"/></name></expr>)<pos:position pos:line="20" pos:column="26"/></condition><then pos:line="20" pos:column="26"> <comment type="block" pos:line="20" pos:column="27">/* obj belongs @ i */</comment>
			<block type="pseudo"><break pos:line="21" pos:column="25">break;<pos:position pos:line="21" pos:column="31"/></break></block></then>
		<elseif pos:line="22" pos:column="17">else <if pos:line="22" pos:column="22">if <condition pos:line="22" pos:column="25">(<expr><name pos:line="22" pos:column="26">cmp<pos:position pos:line="22" pos:column="29"/></name> <operator pos:line="22" pos:column="30">&lt;<pos:position pos:line="22" pos:column="34"/></operator> <literal type="number" pos:line="22" pos:column="32">0<pos:position pos:line="22" pos:column="33"/></literal> <operator pos:line="22" pos:column="34">&amp;&amp;<pos:position pos:line="22" pos:column="44"/></operator> <name pos:line="22" pos:column="37">prev_cmp<pos:position pos:line="22" pos:column="45"/></name> <operator pos:line="22" pos:column="46">&lt;=<pos:position pos:line="22" pos:column="51"/></operator> <literal type="number" pos:line="22" pos:column="49">0<pos:position pos:line="22" pos:column="50"/></literal></expr>)<pos:position pos:line="22" pos:column="51"/></condition><then pos:line="22" pos:column="51"> <comment type="block" pos:line="22" pos:column="52">/* obj belongs &lt; i */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="25">i<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">--<pos:position pos:line="23" pos:column="28"/></operator></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="24" pos:column="17">else <if pos:line="24" pos:column="22">if <condition pos:line="24" pos:column="25">(<expr><name pos:line="24" pos:column="26">cmp<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">&lt;<pos:position pos:line="24" pos:column="34"/></operator> <literal type="number" pos:line="24" pos:column="32">0<pos:position pos:line="24" pos:column="33"/></literal></expr>)<pos:position pos:line="24" pos:column="34"/></condition><then pos:line="24" pos:column="34"> <comment type="block" pos:line="24" pos:column="35">/* obj belongs between i-1 and i */</comment>
			<block type="pseudo"><break pos:line="25" pos:column="25">break;<pos:position pos:line="25" pos:column="31"/></break></block></then></if></elseif>
		<elseif pos:line="26" pos:column="17">else <if pos:line="26" pos:column="22">if <condition pos:line="26" pos:column="25">(<expr><name pos:line="26" pos:column="26">cmp<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">&gt;<pos:position pos:line="26" pos:column="34"/></operator> <literal type="number" pos:line="26" pos:column="32">0<pos:position pos:line="26" pos:column="33"/></literal> <operator pos:line="26" pos:column="34">&amp;&amp;<pos:position pos:line="26" pos:column="44"/></operator> <name pos:line="26" pos:column="37">prev_cmp<pos:position pos:line="26" pos:column="45"/></name> <operator pos:line="26" pos:column="46">&gt;=<pos:position pos:line="26" pos:column="51"/></operator> <literal type="number" pos:line="26" pos:column="49">0<pos:position pos:line="26" pos:column="50"/></literal></expr>)<pos:position pos:line="26" pos:column="51"/></condition><then pos:line="26" pos:column="51"> <comment type="block" pos:line="26" pos:column="52">/* obj belongs &gt; i */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="25">i<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">++<pos:position pos:line="27" pos:column="28"/></operator></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt></block></then></if></elseif>
		<else pos:line="28" pos:column="17">else <comment type="block" pos:line="28" pos:column="22">/* if (cmp &gt; 0) */</comment> <block pos:line="28" pos:column="41">{ <comment type="block" pos:line="28" pos:column="43">/* obj belongs between i and i+1 */</comment>
			<expr_stmt><expr><name pos:line="29" pos:column="25">i<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">++<pos:position pos:line="29" pos:column="28"/></operator></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>
			<break pos:line="30" pos:column="25">break;<pos:position pos:line="30" pos:column="31"/></break>
		}<pos:position pos:line="31" pos:column="18"/></block></else></if>
		<expr_stmt><expr><name pos:line="32" pos:column="17">prev_cmp<pos:position pos:line="32" pos:column="25"/></name> <operator pos:line="32" pos:column="26">=<pos:position pos:line="32" pos:column="27"/></operator> <name pos:line="32" pos:column="28">cmp<pos:position pos:line="32" pos:column="31"/></name></expr>;<pos:position pos:line="32" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="33" pos:column="10"/></block></while>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">i<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">&lt;<pos:position pos:line="34" pos:column="19"/></operator> <literal type="number" pos:line="34" pos:column="17">0<pos:position pos:line="34" pos:column="18"/></literal></expr>)<pos:position pos:line="34" pos:column="19"/></condition><then pos:line="34" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="17">i<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <literal type="number" pos:line="35" pos:column="21">0<pos:position pos:line="35" pos:column="22"/></literal></expr>;<pos:position pos:line="35" pos:column="23"/></expr_stmt></block></then></if>
	<comment type="block" pos:line="36" pos:column="9">/* obj belongs at, or immediately preceding, index i (0 &lt;= i &lt;= len) */</comment>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">cmp<pos:position pos:line="38" pos:column="17"/></name></expr>)<pos:position pos:line="38" pos:column="18"/></condition><then pos:line="38" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="39" pos:column="17">*<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="18">occupied<pos:position pos:line="39" pos:column="26"/></name> <operator pos:line="39" pos:column="27">=<pos:position pos:line="39" pos:column="28"/></operator> <literal type="number" pos:line="39" pos:column="29">1<pos:position pos:line="39" pos:column="30"/></literal></expr>;<pos:position pos:line="39" pos:column="31"/></expr_stmt></block></then>
	<else pos:line="40" pos:column="9">else <block pos:line="40" pos:column="14">{
		<expr_stmt><expr><operator pos:line="41" pos:column="17">*<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="18">occupied<pos:position pos:line="41" pos:column="26"/></name> <operator pos:line="41" pos:column="27">=<pos:position pos:line="41" pos:column="28"/></operator> <literal type="number" pos:line="41" pos:column="29">0<pos:position pos:line="41" pos:column="30"/></literal></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">insert_new<pos:position pos:line="42" pos:column="31"/></name> <operator pos:line="42" pos:column="32">&amp;&amp;<pos:position pos:line="42" pos:column="42"/></operator> <name pos:line="42" pos:column="35">i<pos:position pos:line="42" pos:column="36"/></name> <operator pos:line="42" pos:column="37">&lt;<pos:position pos:line="42" pos:column="41"/></operator> <name pos:line="42" pos:column="39">len<pos:position pos:line="42" pos:column="42"/></name></expr>)<pos:position pos:line="42" pos:column="43"/></condition><then pos:line="42" pos:column="43"> <block pos:line="42" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">MOVE_ARRAY<pos:position pos:line="43" pos:column="35"/></name><argument_list pos:line="43" pos:column="35">(<argument><expr><name pos:line="43" pos:column="36">list<pos:position pos:line="43" pos:column="40"/></name> <operator pos:line="43" pos:column="41">+<pos:position pos:line="43" pos:column="42"/></operator> <name pos:line="43" pos:column="43">i<pos:position pos:line="43" pos:column="44"/></name> <operator pos:line="43" pos:column="45">+<pos:position pos:line="43" pos:column="46"/></operator> <literal type="number" pos:line="43" pos:column="47">1<pos:position pos:line="43" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="50">list<pos:position pos:line="43" pos:column="54"/></name> <operator pos:line="43" pos:column="55">+<pos:position pos:line="43" pos:column="56"/></operator> <name pos:line="43" pos:column="57">i<pos:position pos:line="43" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="60">len<pos:position pos:line="43" pos:column="63"/></name> <operator pos:line="43" pos:column="64">-<pos:position pos:line="43" pos:column="65"/></operator> <name pos:line="43" pos:column="66">i<pos:position pos:line="43" pos:column="67"/></name></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">memset<pos:position pos:line="44" pos:column="31"/></name><argument_list pos:line="44" pos:column="31">(<argument><expr><name pos:line="44" pos:column="32">list<pos:position pos:line="44" pos:column="36"/></name> <operator pos:line="44" pos:column="37">+<pos:position pos:line="44" pos:column="38"/></operator> <name pos:line="44" pos:column="39">i<pos:position pos:line="44" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="42">0<pos:position pos:line="44" pos:column="43"/></literal></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="45">sizeof<argument_list pos:line="44" pos:column="51">(<argument><expr pos:line="44" pos:column="52">struct <name pos:line="44" pos:column="59">notes_merge_pair<pos:position pos:line="44" pos:column="75"/></name></expr></argument>)<pos:position pos:line="44" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="78"/></expr_stmt>
		}<pos:position pos:line="45" pos:column="18"/></block></then></if>
	}<pos:position pos:line="46" pos:column="10"/></block></else></if>
	<expr_stmt><expr><name pos:line="47" pos:column="9">last_index<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <name pos:line="47" pos:column="22">i<pos:position pos:line="47" pos:column="23"/></name></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>
	<return pos:line="48" pos:column="9">return <expr><name pos:line="48" pos:column="16">list<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">+<pos:position pos:line="48" pos:column="22"/></operator> <name pos:line="48" pos:column="23">i<pos:position pos:line="48" pos:column="24"/></name></expr>;<pos:position pos:line="48" pos:column="25"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
