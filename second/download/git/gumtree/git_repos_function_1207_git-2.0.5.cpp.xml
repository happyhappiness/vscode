<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1207_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">print_ls<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">mode<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">unsigned<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">sha1<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="59">const<pos:position pos:line="1" pos:column="64"/></specifier> <name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">path<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">strbuf<pos:position pos:line="3" pos:column="29"/></name></name></type> <name pos:line="3" pos:column="30">line<pos:position pos:line="3" pos:column="34"/></name> <init pos:line="3" pos:column="35">= <expr><name pos:line="3" pos:column="37">STRBUF_INIT<pos:position pos:line="3" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="49"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/* See show_tree(). */</comment>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">type<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">=
		<expr><ternary><condition><expr><call><name pos:line="7" pos:column="17">S_ISGITLINK<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">mode<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr> ?<pos:position pos:line="7" pos:column="36"/></condition><then pos:line="7" pos:column="36"> <expr><name pos:line="7" pos:column="37">commit_type<pos:position pos:line="7" pos:column="48"/></name></expr> <pos:position pos:line="7" pos:column="49"/></then><else pos:line="7" pos:column="49">:
		<expr><ternary><condition><expr><call><name pos:line="8" pos:column="17">S_ISDIR<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">mode<pos:position pos:line="8" pos:column="29"/></name></expr></argument>)<pos:position pos:line="8" pos:column="30"/></argument_list></call></expr> ?<pos:position pos:line="8" pos:column="32"/></condition><then pos:line="8" pos:column="32"> <expr><name pos:line="8" pos:column="33">tree_type<pos:position pos:line="8" pos:column="42"/></name></expr> <pos:position pos:line="8" pos:column="43"/></then><else pos:line="8" pos:column="43">:
		<expr><name pos:line="9" pos:column="17">blob_type<pos:position pos:line="9" pos:column="26"/></name></expr></else></ternary></expr></else></ternary></expr></init></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">mode<pos:position pos:line="11" pos:column="18"/></name></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19"> <block pos:line="11" pos:column="20">{
		<comment type="block" pos:line="12" pos:column="17">/* missing SP path LF */</comment>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">strbuf_reset<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><operator pos:line="13" pos:column="30">&amp;<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="31">line<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">strbuf_addstr<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><operator pos:line="14" pos:column="31">&amp;<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="32">line<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="38">"missing "<pos:position pos:line="14" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">quote_c_style<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">path<pos:position pos:line="15" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="37">&amp;<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="38">line<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="44">NULL<pos:position pos:line="15" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="50">0<pos:position pos:line="15" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">strbuf_addch<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><operator pos:line="16" pos:column="30">&amp;<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="31">line<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="16" pos:column="37">'\n'<pos:position pos:line="16" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then> <else pos:line="17" pos:column="11">else <block pos:line="17" pos:column="16">{
		<comment type="block" pos:line="18" pos:column="17">/* mode SP type SP object_name TAB path LF */</comment>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">strbuf_reset<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><operator pos:line="19" pos:column="30">&amp;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="31">line<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">strbuf_addf<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><operator pos:line="20" pos:column="29">&amp;<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="30">line<pos:position pos:line="20" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="36">"%06o %s %s\t"<pos:position pos:line="20" pos:column="50"/></literal></expr></argument>,
				<argument><expr><name pos:line="21" pos:column="33">mode<pos:position pos:line="21" pos:column="37"/></name> <operator pos:line="21" pos:column="38">&amp;<pos:position pos:line="21" pos:column="43"/></operator> <operator pos:line="21" pos:column="40">~<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="41">NO_DELTA<pos:position pos:line="21" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="51">type<pos:position pos:line="21" pos:column="55"/></name></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="57">sha1_to_hex<pos:position pos:line="21" pos:column="68"/></name><argument_list pos:line="21" pos:column="68">(<argument><expr><name pos:line="21" pos:column="69">sha1<pos:position pos:line="21" pos:column="73"/></name></expr></argument>)<pos:position pos:line="21" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">quote_c_style<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">path<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="37">&amp;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="38">line<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="44">NULL<pos:position pos:line="22" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="50">0<pos:position pos:line="22" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">strbuf_addch<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><operator pos:line="23" pos:column="30">&amp;<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="31">line<pos:position pos:line="23" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="37">'\n'<pos:position pos:line="23" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">cat_blob_write<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name><name pos:line="25" pos:column="24">line<pos:position pos:line="25" pos:column="28"/></name><operator pos:line="25" pos:column="28">.<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="29">buf<pos:position pos:line="25" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="34">line<pos:position pos:line="25" pos:column="38"/></name><operator pos:line="25" pos:column="38">.<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="39">len<pos:position pos:line="25" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
