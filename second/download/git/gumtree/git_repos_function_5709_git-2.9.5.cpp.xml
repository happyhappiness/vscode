<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5709_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">has_sha1_pack_kept_or_nonlocal<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">unsigned<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">sha1<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">packed_git<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">last_found<pos:position pos:line="3" pos:column="45"/></name> <init pos:line="3" pos:column="46">= <expr><operator pos:line="3" pos:column="48">(<pos:position pos:line="3" pos:column="49"/></operator><name pos:line="3" pos:column="49">void<pos:position pos:line="3" pos:column="53"/></name> <operator pos:line="3" pos:column="54">*<pos:position pos:line="3" pos:column="55"/></operator><operator pos:line="3" pos:column="55">)<pos:position pos:line="3" pos:column="56"/></operator><literal type="number" pos:line="3" pos:column="56">1<pos:position pos:line="3" pos:column="57"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">packed_git<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">p<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">p<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">=<pos:position pos:line="6" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="6" pos:column="13">(<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">last_found<pos:position pos:line="6" pos:column="24"/></name> <operator pos:line="6" pos:column="25">!=<pos:position pos:line="6" pos:column="27"/></operator> <operator pos:line="6" pos:column="28">(<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="29">void<pos:position pos:line="6" pos:column="33"/></name> <operator pos:line="6" pos:column="34">*<pos:position pos:line="6" pos:column="35"/></operator><operator pos:line="6" pos:column="35">)<pos:position pos:line="6" pos:column="36"/></operator><literal type="number" pos:line="6" pos:column="36">1<pos:position pos:line="6" pos:column="37"/></literal><operator pos:line="6" pos:column="37">)<pos:position pos:line="6" pos:column="38"/></operator></expr> ?<pos:position pos:line="6" pos:column="40"/></condition><then pos:line="6" pos:column="40"> <expr><name pos:line="6" pos:column="41">last_found<pos:position pos:line="6" pos:column="51"/></name></expr> <pos:position pos:line="6" pos:column="52"/></then><else pos:line="6" pos:column="52">: <expr><name pos:line="6" pos:column="54">packed_git<pos:position pos:line="6" pos:column="64"/></name></expr></else></ternary></expr>;<pos:position pos:line="6" pos:column="65"/></expr_stmt>

	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><name pos:line="8" pos:column="16">p<pos:position pos:line="8" pos:column="17"/></name></expr>)<pos:position pos:line="8" pos:column="18"/></condition> <block pos:line="8" pos:column="19">{
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">(<pos:position pos:line="9" pos:column="22"/></operator><operator pos:line="9" pos:column="22">!<pos:position pos:line="9" pos:column="23"/></operator><name><name pos:line="9" pos:column="23">p<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">-&gt;<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="26">pack_local<pos:position pos:line="9" pos:column="36"/></name></name> <operator pos:line="9" pos:column="37">||<pos:position pos:line="9" pos:column="39"/></operator> <name><name pos:line="9" pos:column="40">p<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">-&gt;<pos:position pos:line="9" pos:column="46"/></operator><name pos:line="9" pos:column="43">pack_keep<pos:position pos:line="9" pos:column="52"/></name></name><operator pos:line="9" pos:column="52">)<pos:position pos:line="9" pos:column="53"/></operator> <operator pos:line="9" pos:column="54">&amp;&amp;<pos:position pos:line="9" pos:column="64"/></operator>
			<call><name pos:line="10" pos:column="25">find_pack_entry_one<pos:position pos:line="10" pos:column="44"/></name><argument_list pos:line="10" pos:column="44">(<argument><expr><name pos:line="10" pos:column="45">sha1<pos:position pos:line="10" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="51">p<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="54"/></condition><then pos:line="10" pos:column="54"> <block pos:line="10" pos:column="55">{
			<expr_stmt><expr><name pos:line="11" pos:column="25">last_found<pos:position pos:line="11" pos:column="35"/></name> <operator pos:line="11" pos:column="36">=<pos:position pos:line="11" pos:column="37"/></operator> <name pos:line="11" pos:column="38">p<pos:position pos:line="11" pos:column="39"/></name></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
			<return pos:line="12" pos:column="25">return <expr><literal type="number" pos:line="12" pos:column="32">1<pos:position pos:line="12" pos:column="33"/></literal></expr>;<pos:position pos:line="12" pos:column="34"/></return>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">p<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">==<pos:position pos:line="14" pos:column="25"/></operator> <name pos:line="14" pos:column="26">last_found<pos:position pos:line="14" pos:column="36"/></name></expr>)<pos:position pos:line="14" pos:column="37"/></condition><then pos:line="14" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="25">p<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">=<pos:position pos:line="15" pos:column="28"/></operator> <name pos:line="15" pos:column="29">packed_git<pos:position pos:line="15" pos:column="39"/></name></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt></block></then>
		<else pos:line="16" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="25">p<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">=<pos:position pos:line="17" pos:column="28"/></operator> <name><name pos:line="17" pos:column="29">p<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">next<pos:position pos:line="17" pos:column="36"/></name></name></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt></block></else></if>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">p<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">==<pos:position pos:line="18" pos:column="25"/></operator> <name pos:line="18" pos:column="26">last_found<pos:position pos:line="18" pos:column="36"/></name></expr>)<pos:position pos:line="18" pos:column="37"/></condition><then pos:line="18" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="25">p<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <name><name pos:line="19" pos:column="29">p<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">next<pos:position pos:line="19" pos:column="36"/></name></name></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt></block></then></if>
	}<pos:position pos:line="20" pos:column="10"/></block></while>
	<return pos:line="21" pos:column="9">return <expr><literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
