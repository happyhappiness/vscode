<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2194_git-2.11.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">daemonize<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">void<pos:position pos:line="1" pos:column="19"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="20"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">NO_POSIX_GOODIES<pos:position pos:line="3" pos:column="24"/></name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="4" pos:column="9">errno<pos:position pos:line="4" pos:column="14"/></name> <operator pos:line="4" pos:column="15">=<pos:position pos:line="4" pos:column="16"/></operator> <name pos:line="4" pos:column="17">ENOSYS<pos:position pos:line="4" pos:column="23"/></name></expr>;<pos:position pos:line="4" pos:column="24"/></expr_stmt>
	<return pos:line="5" pos:column="9">return <expr><operator pos:line="5" pos:column="16">-<pos:position pos:line="5" pos:column="17"/></operator><literal type="number" pos:line="5" pos:column="17">1<pos:position pos:line="5" pos:column="18"/></literal></expr>;<pos:position pos:line="5" pos:column="19"/></return>
<cpp:else pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">else<pos:position pos:line="6" pos:column="6"/></cpp:directive></cpp:else>
	<switch pos:line="7" pos:column="9">switch <condition pos:line="7" pos:column="16">(<expr><call><name pos:line="7" pos:column="17">fork<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">()<pos:position pos:line="7" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="24"/></condition> <block pos:line="7" pos:column="25">{
		<case pos:line="8" pos:column="17">case <expr><literal type="number" pos:line="8" pos:column="22">0<pos:position pos:line="8" pos:column="23"/></literal></expr>:<pos:position pos:line="8" pos:column="24"/></case>
			<break pos:line="9" pos:column="25">break;<pos:position pos:line="9" pos:column="31"/></break>
		<case pos:line="10" pos:column="17">case <expr><operator pos:line="10" pos:column="22">-<pos:position pos:line="10" pos:column="23"/></operator><literal type="number" pos:line="10" pos:column="23">1<pos:position pos:line="10" pos:column="24"/></literal></expr>:<pos:position pos:line="10" pos:column="25"/></case>
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">die_errno<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><literal type="string" pos:line="11" pos:column="35">"fork failed"<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
		<default pos:line="12" pos:column="17">default:<pos:position pos:line="12" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">exit<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><literal type="number" pos:line="13" pos:column="30">0<pos:position pos:line="13" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></switch>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">setsid<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">()<pos:position pos:line="15" pos:column="21"/></argument_list></call> <operator pos:line="15" pos:column="22">==<pos:position pos:line="15" pos:column="24"/></operator> <operator pos:line="15" pos:column="25">-<pos:position pos:line="15" pos:column="26"/></operator><literal type="number" pos:line="15" pos:column="26">1<pos:position pos:line="15" pos:column="27"/></literal></expr>)<pos:position pos:line="15" pos:column="28"/></condition><then pos:line="15" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">die_errno<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><literal type="string" pos:line="16" pos:column="27">"setsid failed"<pos:position pos:line="16" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">close<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><literal type="number" pos:line="17" pos:column="15">0<pos:position pos:line="17" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">close<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><literal type="number" pos:line="18" pos:column="15">1<pos:position pos:line="18" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">close<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><literal type="number" pos:line="19" pos:column="15">2<pos:position pos:line="19" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">sanitize_stdfds<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">()<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
	<return pos:line="21" pos:column="9">return <expr><literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></return>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
