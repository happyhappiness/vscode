<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6264_git-2.9.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name><modifier pos:line="1" pos:column="5">*<pos:position pos:line="1" pos:column="6"/></modifier></type> <name pos:line="1" pos:column="7">dlrealloc<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">void<pos:position pos:line="1" pos:column="21"/></name><modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type> <name pos:line="1" pos:column="23">oldmem<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">size_t<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">bytes<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list> <block pos:line="1" pos:column="45">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><name pos:line="2" pos:column="7">oldmem<pos:position pos:line="2" pos:column="13"/></name> <operator pos:line="2" pos:column="14">==<pos:position pos:line="2" pos:column="16"/></operator> <literal type="number" pos:line="2" pos:column="17">0<pos:position pos:line="2" pos:column="18"/></literal></expr>)<pos:position pos:line="2" pos:column="19"/></condition><then pos:line="2" pos:column="19">
    <block type="pseudo"><return pos:line="3" pos:column="5">return <expr><call><name pos:line="3" pos:column="12">dlmalloc<pos:position pos:line="3" pos:column="20"/></name><argument_list pos:line="3" pos:column="20">(<argument><expr><name pos:line="3" pos:column="21">bytes<pos:position pos:line="3" pos:column="26"/></name></expr></argument>)<pos:position pos:line="3" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="28"/></return></block></then></if>
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">REALLOC_ZERO_BYTES_FREES<pos:position pos:line="4" pos:column="32"/></name></cpp:ifdef>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">bytes<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">==<pos:position pos:line="5" pos:column="15"/></operator> <literal type="number" pos:line="5" pos:column="16">0<pos:position pos:line="5" pos:column="17"/></literal></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18"> <block pos:line="5" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">dlfree<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">oldmem<pos:position pos:line="6" pos:column="18"/></name></expr></argument>)<pos:position pos:line="6" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="20"/></expr_stmt>
    <return pos:line="7" pos:column="5">return <expr><literal type="number" pos:line="7" pos:column="12">0<pos:position pos:line="7" pos:column="13"/></literal></expr>;<pos:position pos:line="7" pos:column="14"/></return>
  }<pos:position pos:line="8" pos:column="4"/></block></then>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="9" pos:column="8">/* REALLOC_ZERO_BYTES_FREES */</comment>
  <else pos:line="10" pos:column="3">else <block pos:line="10" pos:column="8">{
<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><operator pos:line="11" pos:column="5">!<pos:position pos:line="11" pos:column="6"/></operator> <name pos:line="11" pos:column="7">FOOTERS<pos:position pos:line="11" pos:column="14"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">mstate<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">m<pos:position pos:line="12" pos:column="13"/></name> <init pos:line="12" pos:column="14">= <expr><name pos:line="12" pos:column="16">gm<pos:position pos:line="12" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>
<cpp:else pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">else<pos:position pos:line="13" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="13" pos:column="7">/* FOOTERS */</comment>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">mstate<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">m<pos:position pos:line="14" pos:column="13"/></name> <init pos:line="14" pos:column="14">= <expr><call><name pos:line="14" pos:column="16">get_mstate_for<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><call><name pos:line="14" pos:column="31">mem2chunk<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">oldmem<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="50"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><call><name pos:line="15" pos:column="10">ok_magic<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">m<pos:position pos:line="15" pos:column="20"/></name></expr></argument>)<pos:position pos:line="15" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22"> <block pos:line="15" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">USAGE_ERROR_ACTION<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">m<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="29">oldmem<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>
      <return pos:line="17" pos:column="7">return <expr><literal type="number" pos:line="17" pos:column="14">0<pos:position pos:line="17" pos:column="15"/></literal></expr>;<pos:position pos:line="17" pos:column="16"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="19" pos:column="8">/* FOOTERS */</comment>
    <return pos:line="20" pos:column="5">return <expr><call><name pos:line="20" pos:column="12">internal_realloc<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><name pos:line="20" pos:column="29">m<pos:position pos:line="20" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="32">oldmem<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="40">bytes<pos:position pos:line="20" pos:column="45"/></name></expr></argument>)<pos:position pos:line="20" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="47"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></else></if>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
