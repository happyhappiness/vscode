<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6139_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">grep_object<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">grep_opt<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">opt<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name><name pos:line="1" pos:column="52">struct<pos:position pos:line="1" pos:column="58"/></name> <name pos:line="1" pos:column="59">pathspec<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">pathspec<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>,
		       <parameter><decl><type><name><name pos:line="2" pos:column="24">struct<pos:position pos:line="2" pos:column="30"/></name> <name pos:line="2" pos:column="31">object<pos:position pos:line="2" pos:column="37"/></name></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">obj<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name pos:line="2" pos:column="50">char<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">name<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="62">const<pos:position pos:line="2" pos:column="67"/></specifier> <name pos:line="2" pos:column="68">char<pos:position pos:line="2" pos:column="72"/></name> <modifier pos:line="2" pos:column="73">*<pos:position pos:line="2" pos:column="74"/></modifier></type><name pos:line="2" pos:column="74">path<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name><name pos:line="4" pos:column="13">obj<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">-&gt;<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="18">type<pos:position pos:line="4" pos:column="22"/></name></name> <operator pos:line="4" pos:column="23">==<pos:position pos:line="4" pos:column="25"/></operator> <name pos:line="4" pos:column="26">OBJ_BLOB<pos:position pos:line="4" pos:column="34"/></name></expr>)<pos:position pos:line="4" pos:column="35"/></condition><then pos:line="4" pos:column="35">
		<block type="pseudo"><return pos:line="5" pos:column="17">return <expr><call><name pos:line="5" pos:column="24">grep_oid<pos:position pos:line="5" pos:column="32"/></name><argument_list pos:line="5" pos:column="32">(<argument><expr><name pos:line="5" pos:column="33">opt<pos:position pos:line="5" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="38">&amp;<pos:position pos:line="5" pos:column="43"/></operator><name><name pos:line="5" pos:column="39">obj<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">-&gt;<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="44">oid<pos:position pos:line="5" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="49">name<pos:position pos:line="5" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="55">0<pos:position pos:line="5" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="58">path<pos:position pos:line="5" pos:column="62"/></name></expr></argument>)<pos:position pos:line="5" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="64"/></return></block></then></if>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">obj<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">-&gt;<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="18">type<pos:position pos:line="6" pos:column="22"/></name></name> <operator pos:line="6" pos:column="23">==<pos:position pos:line="6" pos:column="25"/></operator> <name pos:line="6" pos:column="26">OBJ_COMMIT<pos:position pos:line="6" pos:column="36"/></name> <operator pos:line="6" pos:column="37">||<pos:position pos:line="6" pos:column="39"/></operator> <name><name pos:line="6" pos:column="40">obj<pos:position pos:line="6" pos:column="43"/></name><operator pos:line="6" pos:column="43">-&gt;<pos:position pos:line="6" pos:column="48"/></operator><name pos:line="6" pos:column="45">type<pos:position pos:line="6" pos:column="49"/></name></name> <operator pos:line="6" pos:column="50">==<pos:position pos:line="6" pos:column="52"/></operator> <name pos:line="6" pos:column="53">OBJ_TREE<pos:position pos:line="6" pos:column="61"/></name></expr>)<pos:position pos:line="6" pos:column="62"/></condition><then pos:line="6" pos:column="62"> <block pos:line="6" pos:column="63">{
		<decl_stmt><decl><type><name><name pos:line="7" pos:column="17">struct<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">tree_desc<pos:position pos:line="7" pos:column="33"/></name></name></type> <name pos:line="7" pos:column="34">tree<pos:position pos:line="7" pos:column="38"/></name></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">void<pos:position pos:line="8" pos:column="21"/></name> <modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type><name pos:line="8" pos:column="23">data<pos:position pos:line="8" pos:column="27"/></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">unsigned<pos:position pos:line="9" pos:column="25"/></name> <name pos:line="9" pos:column="26">long<pos:position pos:line="9" pos:column="30"/></name></type> <name pos:line="9" pos:column="31">size<pos:position pos:line="9" pos:column="35"/></name></decl>;<pos:position pos:line="9" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="10" pos:column="17">struct<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">strbuf<pos:position pos:line="10" pos:column="30"/></name></name></type> <name pos:line="10" pos:column="31">base<pos:position pos:line="10" pos:column="35"/></name></decl>;<pos:position pos:line="10" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">hit<pos:position pos:line="11" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="26">len<pos:position pos:line="11" pos:column="29"/></name></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="13" pos:column="17">grep_read_lock<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">()<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">data<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">=<pos:position pos:line="14" pos:column="23"/></operator> <call><name pos:line="14" pos:column="24">read_object_with_reference<pos:position pos:line="14" pos:column="50"/></name><argument_list pos:line="14" pos:column="50">(<argument><expr><name><name pos:line="14" pos:column="51">obj<pos:position pos:line="14" pos:column="54"/></name><operator pos:line="14" pos:column="54">-&gt;<pos:position pos:line="14" pos:column="59"/></operator><name pos:line="14" pos:column="56">oid<pos:position pos:line="14" pos:column="59"/></name><operator pos:line="14" pos:column="59">.<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="60">hash<pos:position pos:line="14" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="66">tree_type<pos:position pos:line="14" pos:column="75"/></name></expr></argument>,
						  <argument><expr><operator pos:line="15" pos:column="51">&amp;<pos:position pos:line="15" pos:column="56"/></operator><name pos:line="15" pos:column="52">size<pos:position pos:line="15" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="58">NULL<pos:position pos:line="15" pos:column="62"/></name></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">grep_read_unlock<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">()<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>

		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">data<pos:position pos:line="18" pos:column="26"/></name></expr>)<pos:position pos:line="18" pos:column="27"/></condition><then pos:line="18" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="25">die<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><call><name pos:line="19" pos:column="29">_<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><literal type="string" pos:line="19" pos:column="31">"unable to read tree (%s)"<pos:position pos:line="19" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="60">oid_to_hex<pos:position pos:line="19" pos:column="70"/></name><argument_list pos:line="19" pos:column="70">(<argument><expr><operator pos:line="19" pos:column="71">&amp;<pos:position pos:line="19" pos:column="76"/></operator><name><name pos:line="19" pos:column="72">obj<pos:position pos:line="19" pos:column="75"/></name><operator pos:line="19" pos:column="75">-&gt;<pos:position pos:line="19" pos:column="80"/></operator><name pos:line="19" pos:column="77">oid<pos:position pos:line="19" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="83"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="21" pos:column="17">/* Use parent's name as base when recursing submodules */</comment>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">recurse_submodules<pos:position pos:line="22" pos:column="39"/></name> <operator pos:line="22" pos:column="40">&amp;&amp;<pos:position pos:line="22" pos:column="50"/></operator> <name pos:line="22" pos:column="43">parent_basename<pos:position pos:line="22" pos:column="58"/></name></expr>)<pos:position pos:line="22" pos:column="59"/></condition><then pos:line="22" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="25">name<pos:position pos:line="23" pos:column="29"/></name> <operator pos:line="23" pos:column="30">=<pos:position pos:line="23" pos:column="31"/></operator> <name pos:line="23" pos:column="32">parent_basename<pos:position pos:line="23" pos:column="47"/></name></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="25" pos:column="17">len<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <ternary><condition><expr><name pos:line="25" pos:column="23">name<pos:position pos:line="25" pos:column="27"/></name></expr> ?<pos:position pos:line="25" pos:column="29"/></condition><then pos:line="25" pos:column="29"> <expr><call><name pos:line="25" pos:column="30">strlen<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">name<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr> <pos:position pos:line="25" pos:column="43"/></then><else pos:line="25" pos:column="43">: <expr><literal type="number" pos:line="25" pos:column="45">0<pos:position pos:line="25" pos:column="46"/></literal></expr></else></ternary></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">strbuf_init<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><operator pos:line="26" pos:column="29">&amp;<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="30">base<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="36">PATH_MAX<pos:position pos:line="26" pos:column="44"/></name> <operator pos:line="26" pos:column="45">+<pos:position pos:line="26" pos:column="46"/></operator> <name pos:line="26" pos:column="47">len<pos:position pos:line="26" pos:column="50"/></name> <operator pos:line="26" pos:column="51">+<pos:position pos:line="26" pos:column="52"/></operator> <literal type="number" pos:line="26" pos:column="53">1<pos:position pos:line="26" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="56"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">len<pos:position pos:line="27" pos:column="24"/></name></expr>)<pos:position pos:line="27" pos:column="25"/></condition><then pos:line="27" pos:column="25"> <block pos:line="27" pos:column="26">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">strbuf_add<pos:position pos:line="28" pos:column="35"/></name><argument_list pos:line="28" pos:column="35">(<argument><expr><operator pos:line="28" pos:column="36">&amp;<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="37">base<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="43">name<pos:position pos:line="28" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="49">len<pos:position pos:line="28" pos:column="52"/></name></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">strbuf_addch<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><operator pos:line="29" pos:column="38">&amp;<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="39">base<pos:position pos:line="29" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="45">':'<pos:position pos:line="29" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">init_tree_desc<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><operator pos:line="31" pos:column="32">&amp;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="33">tree<pos:position pos:line="31" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="39">data<pos:position pos:line="31" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="45">size<pos:position pos:line="31" pos:column="49"/></name></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">hit<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <call><name pos:line="32" pos:column="23">grep_tree<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">opt<pos:position pos:line="32" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="38">pathspec<pos:position pos:line="32" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="48">&amp;<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="49">tree<pos:position pos:line="32" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="55">&amp;<pos:position pos:line="32" pos:column="60"/></operator><name pos:line="32" pos:column="56">base<pos:position pos:line="32" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="62">base<pos:position pos:line="32" pos:column="66"/></name><operator pos:line="32" pos:column="66">.<pos:position pos:line="32" pos:column="67"/></operator><name pos:line="32" pos:column="67">len<pos:position pos:line="32" pos:column="70"/></name></name></expr></argument>,
				<argument><expr><name><name pos:line="33" pos:column="33">obj<pos:position pos:line="33" pos:column="36"/></name><operator pos:line="33" pos:column="36">-&gt;<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="38">type<pos:position pos:line="33" pos:column="42"/></name></name> <operator pos:line="33" pos:column="43">==<pos:position pos:line="33" pos:column="45"/></operator> <name pos:line="33" pos:column="46">OBJ_COMMIT<pos:position pos:line="33" pos:column="56"/></name></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">strbuf_release<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><operator pos:line="34" pos:column="32">&amp;<pos:position pos:line="34" pos:column="37"/></operator><name pos:line="34" pos:column="33">base<pos:position pos:line="34" pos:column="37"/></name></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">free<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">data<pos:position pos:line="35" pos:column="26"/></name></expr></argument>)<pos:position pos:line="35" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt>
		<return pos:line="36" pos:column="17">return <expr><name pos:line="36" pos:column="24">hit<pos:position pos:line="36" pos:column="27"/></name></expr>;<pos:position pos:line="36" pos:column="28"/></return>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">die<pos:position pos:line="38" pos:column="12"/></name><argument_list pos:line="38" pos:column="12">(<argument><expr><call><name pos:line="38" pos:column="13">_<pos:position pos:line="38" pos:column="14"/></name><argument_list pos:line="38" pos:column="14">(<argument><expr><literal type="string" pos:line="38" pos:column="15">"unable to grep from object of type %s"<pos:position pos:line="38" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><name><typename pos:line="38" pos:column="57">typename<pos:position pos:line="38" pos:column="65"/></typename></name><operator pos:line="38" pos:column="65">(<pos:position pos:line="38" pos:column="66"/></operator><name><name pos:line="38" pos:column="66">obj<pos:position pos:line="38" pos:column="69"/></name><operator pos:line="38" pos:column="69">-&gt;<pos:position pos:line="38" pos:column="74"/></operator><name pos:line="38" pos:column="71">type<pos:position pos:line="38" pos:column="75"/></name></name><operator pos:line="38" pos:column="75">)<pos:position pos:line="38" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="38" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="78"/></expr_stmt>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
