<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4021_git-2.13.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ssl_socket_connect<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">imap_socket<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">sock<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">int<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">use_tls_only<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="75">int<pos:position pos:line="1" pos:column="78"/></name></type> <name pos:line="1" pos:column="79">verify<pos:position pos:line="1" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="86"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><operator pos:line="3" pos:column="5">(<pos:position pos:line="3" pos:column="6"/></operator><name pos:line="3" pos:column="6">OPENSSL_VERSION_NUMBER<pos:position pos:line="3" pos:column="28"/></name> <operator pos:line="3" pos:column="29">&gt;=<pos:position pos:line="3" pos:column="34"/></operator> <literal type="number" pos:line="3" pos:column="32">0x10000000L<pos:position pos:line="3" pos:column="43"/></literal><operator pos:line="3" pos:column="43">)<pos:position pos:line="3" pos:column="44"/></operator></expr></cpp:if>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">SSL_METHOD<pos:position pos:line="4" pos:column="25"/></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">meth<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
<cpp:else pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">else<pos:position pos:line="5" pos:column="6"/></cpp:directive></cpp:else>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">SSL_METHOD<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">meth<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">SSL_CTX<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">ctx<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">ret<pos:position pos:line="9" pos:column="16"/></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">X509<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">cert<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">SSL_library_init<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">()<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">SSL_load_error_strings<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">()<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>

	<expr_stmt><expr><name pos:line="15" pos:column="9">meth<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <call><name pos:line="15" pos:column="16">SSLv23_method<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">()<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">meth<pos:position pos:line="16" pos:column="18"/></name></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19"> <block pos:line="16" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">ssl_socket_perror<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><literal type="string" pos:line="17" pos:column="35">"SSLv23_method"<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><operator pos:line="18" pos:column="24">-<pos:position pos:line="18" pos:column="25"/></operator><literal type="number" pos:line="18" pos:column="25">1<pos:position pos:line="18" pos:column="26"/></literal></expr>;<pos:position pos:line="18" pos:column="27"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="21" pos:column="9">ctx<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <call><name pos:line="21" pos:column="15">SSL_CTX_new<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><name pos:line="21" pos:column="27">meth<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">ctx<pos:position pos:line="22" pos:column="17"/></name></expr>)<pos:position pos:line="22" pos:column="18"/></condition><then pos:line="22" pos:column="18"> <block pos:line="22" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">ssl_socket_perror<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><literal type="string" pos:line="23" pos:column="35">"SSL_CTX_new"<pos:position pos:line="23" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
		<return pos:line="24" pos:column="17">return <expr><operator pos:line="24" pos:column="24">-<pos:position pos:line="24" pos:column="25"/></operator><literal type="number" pos:line="24" pos:column="25">1<pos:position pos:line="24" pos:column="26"/></literal></expr>;<pos:position pos:line="24" pos:column="27"/></return>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">use_tls_only<pos:position pos:line="27" pos:column="25"/></name></expr>)<pos:position pos:line="27" pos:column="26"/></condition><then pos:line="27" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="17">SSL_CTX_set_options<pos:position pos:line="28" pos:column="36"/></name><argument_list pos:line="28" pos:column="36">(<argument><expr><name pos:line="28" pos:column="37">ctx<pos:position pos:line="28" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="42">SSL_OP_NO_SSLv2<pos:position pos:line="28" pos:column="57"/></name> <operator pos:line="28" pos:column="58">|<pos:position pos:line="28" pos:column="59"/></operator> <name pos:line="28" pos:column="60">SSL_OP_NO_SSLv3<pos:position pos:line="28" pos:column="75"/></name></expr></argument>)<pos:position pos:line="28" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="77"/></expr_stmt></block></then></if>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">verify<pos:position pos:line="30" pos:column="19"/></name></expr>)<pos:position pos:line="30" pos:column="20"/></condition><then pos:line="30" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="17">SSL_CTX_set_verify<pos:position pos:line="31" pos:column="35"/></name><argument_list pos:line="31" pos:column="35">(<argument><expr><name pos:line="31" pos:column="36">ctx<pos:position pos:line="31" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="41">SSL_VERIFY_PEER<pos:position pos:line="31" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="58">NULL<pos:position pos:line="31" pos:column="62"/></name></expr></argument>)<pos:position pos:line="31" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="64"/></expr_stmt></block></then></if>

	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><call><name pos:line="33" pos:column="14">SSL_CTX_set_default_verify_paths<pos:position pos:line="33" pos:column="46"/></name><argument_list pos:line="33" pos:column="46">(<argument><expr><name pos:line="33" pos:column="47">ctx<pos:position pos:line="33" pos:column="50"/></name></expr></argument>)<pos:position pos:line="33" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="52"/></condition><then pos:line="33" pos:column="52"> <block pos:line="33" pos:column="53">{
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">ssl_socket_perror<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">(<argument><expr><literal type="string" pos:line="34" pos:column="35">"SSL_CTX_set_default_verify_paths"<pos:position pos:line="34" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="71"/></expr_stmt>
		<return pos:line="35" pos:column="17">return <expr><operator pos:line="35" pos:column="24">-<pos:position pos:line="35" pos:column="25"/></operator><literal type="number" pos:line="35" pos:column="25">1<pos:position pos:line="35" pos:column="26"/></literal></expr>;<pos:position pos:line="35" pos:column="27"/></return>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">sock<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">-&gt;<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="15">ssl<pos:position pos:line="37" pos:column="18"/></name></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <call><name pos:line="37" pos:column="21">SSL_new<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name pos:line="37" pos:column="29">ctx<pos:position pos:line="37" pos:column="32"/></name></expr></argument>)<pos:position pos:line="37" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><name><name pos:line="38" pos:column="14">sock<pos:position pos:line="38" pos:column="18"/></name><operator pos:line="38" pos:column="18">-&gt;<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="20">ssl<pos:position pos:line="38" pos:column="23"/></name></name></expr>)<pos:position pos:line="38" pos:column="24"/></condition><then pos:line="38" pos:column="24"> <block pos:line="38" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">ssl_socket_perror<pos:position pos:line="39" pos:column="34"/></name><argument_list pos:line="39" pos:column="34">(<argument><expr><literal type="string" pos:line="39" pos:column="35">"SSL_new"<pos:position pos:line="39" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="46"/></expr_stmt>
		<return pos:line="40" pos:column="17">return <expr><operator pos:line="40" pos:column="24">-<pos:position pos:line="40" pos:column="25"/></operator><literal type="number" pos:line="40" pos:column="25">1<pos:position pos:line="40" pos:column="26"/></literal></expr>;<pos:position pos:line="40" pos:column="27"/></return>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">!<pos:position pos:line="42" pos:column="14"/></operator><call><name pos:line="42" pos:column="14">SSL_set_rfd<pos:position pos:line="42" pos:column="25"/></name><argument_list pos:line="42" pos:column="25">(<argument><expr><name><name pos:line="42" pos:column="26">sock<pos:position pos:line="42" pos:column="30"/></name><operator pos:line="42" pos:column="30">-&gt;<pos:position pos:line="42" pos:column="35"/></operator><name pos:line="42" pos:column="32">ssl<pos:position pos:line="42" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="37">sock<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">-&gt;<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="43">fd<pos:position pos:line="42" pos:column="45"/></name><index pos:line="42" pos:column="45">[<expr><literal type="number" pos:line="42" pos:column="46">0<pos:position pos:line="42" pos:column="47"/></literal></expr>]<pos:position pos:line="42" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="50"/></condition><then pos:line="42" pos:column="50"> <block pos:line="42" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">ssl_socket_perror<pos:position pos:line="43" pos:column="34"/></name><argument_list pos:line="43" pos:column="34">(<argument><expr><literal type="string" pos:line="43" pos:column="35">"SSL_set_rfd"<pos:position pos:line="43" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="50"/></expr_stmt>
		<return pos:line="44" pos:column="17">return <expr><operator pos:line="44" pos:column="24">-<pos:position pos:line="44" pos:column="25"/></operator><literal type="number" pos:line="44" pos:column="25">1<pos:position pos:line="44" pos:column="26"/></literal></expr>;<pos:position pos:line="44" pos:column="27"/></return>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><call><name pos:line="46" pos:column="14">SSL_set_wfd<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><name><name pos:line="46" pos:column="26">sock<pos:position pos:line="46" pos:column="30"/></name><operator pos:line="46" pos:column="30">-&gt;<pos:position pos:line="46" pos:column="35"/></operator><name pos:line="46" pos:column="32">ssl<pos:position pos:line="46" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="37">sock<pos:position pos:line="46" pos:column="41"/></name><operator pos:line="46" pos:column="41">-&gt;<pos:position pos:line="46" pos:column="46"/></operator><name pos:line="46" pos:column="43">fd<pos:position pos:line="46" pos:column="45"/></name><index pos:line="46" pos:column="45">[<expr><literal type="number" pos:line="46" pos:column="46">1<pos:position pos:line="46" pos:column="47"/></literal></expr>]<pos:position pos:line="46" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="46" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="50"/></condition><then pos:line="46" pos:column="50"> <block pos:line="46" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">ssl_socket_perror<pos:position pos:line="47" pos:column="34"/></name><argument_list pos:line="47" pos:column="34">(<argument><expr><literal type="string" pos:line="47" pos:column="35">"SSL_set_wfd"<pos:position pos:line="47" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt>
		<return pos:line="48" pos:column="17">return <expr><operator pos:line="48" pos:column="24">-<pos:position pos:line="48" pos:column="25"/></operator><literal type="number" pos:line="48" pos:column="25">1<pos:position pos:line="48" pos:column="26"/></literal></expr>;<pos:position pos:line="48" pos:column="27"/></return>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

<cpp:ifdef pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">ifdef<pos:position pos:line="51" pos:column="7"/></cpp:directive> <name pos:line="51" pos:column="8">SSL_CTRL_SET_TLSEXT_HOSTNAME<pos:position pos:line="51" pos:column="36"/></name></cpp:ifdef>
	<comment type="block" pos:line="52" pos:column="9">/*
	 * SNI (RFC4366)
	 * OpenSSL does not document this function, but the implementation
	 * returns 1 on success, 0 on failure after calling SSLerr().
	 */</comment>
	<expr_stmt><expr><name pos:line="57" pos:column="9">ret<pos:position pos:line="57" pos:column="12"/></name> <operator pos:line="57" pos:column="13">=<pos:position pos:line="57" pos:column="14"/></operator> <call><name pos:line="57" pos:column="15">SSL_set_tlsext_host_name<pos:position pos:line="57" pos:column="39"/></name><argument_list pos:line="57" pos:column="39">(<argument><expr><name><name pos:line="57" pos:column="40">sock<pos:position pos:line="57" pos:column="44"/></name><operator pos:line="57" pos:column="44">-&gt;<pos:position pos:line="57" pos:column="49"/></operator><name pos:line="57" pos:column="46">ssl<pos:position pos:line="57" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="51">server<pos:position pos:line="57" pos:column="57"/></name><operator pos:line="57" pos:column="57">.<pos:position pos:line="57" pos:column="58"/></operator><name pos:line="57" pos:column="58">host<pos:position pos:line="57" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="64"/></expr_stmt>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">ret<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">!=<pos:position pos:line="58" pos:column="19"/></operator> <literal type="number" pos:line="58" pos:column="20">1<pos:position pos:line="58" pos:column="21"/></literal></expr>)<pos:position pos:line="58" pos:column="22"/></condition><then pos:line="58" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="17">warning<pos:position pos:line="59" pos:column="24"/></name><argument_list pos:line="59" pos:column="24">(<argument><expr><literal type="string" pos:line="59" pos:column="25">"SSL_set_tlsext_host_name(%s) failed."<pos:position pos:line="59" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="65">server<pos:position pos:line="59" pos:column="71"/></name><operator pos:line="59" pos:column="71">.<pos:position pos:line="59" pos:column="72"/></operator><name pos:line="59" pos:column="72">host<pos:position pos:line="59" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="78"/></expr_stmt></block></then></if>
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif>

	<expr_stmt><expr><name pos:line="62" pos:column="9">ret<pos:position pos:line="62" pos:column="12"/></name> <operator pos:line="62" pos:column="13">=<pos:position pos:line="62" pos:column="14"/></operator> <call><name pos:line="62" pos:column="15">SSL_connect<pos:position pos:line="62" pos:column="26"/></name><argument_list pos:line="62" pos:column="26">(<argument><expr><name><name pos:line="62" pos:column="27">sock<pos:position pos:line="62" pos:column="31"/></name><operator pos:line="62" pos:column="31">-&gt;<pos:position pos:line="62" pos:column="36"/></operator><name pos:line="62" pos:column="33">ssl<pos:position pos:line="62" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="38"/></expr_stmt>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">ret<pos:position pos:line="63" pos:column="16"/></name> <operator pos:line="63" pos:column="17">&lt;=<pos:position pos:line="63" pos:column="22"/></operator> <literal type="number" pos:line="63" pos:column="20">0<pos:position pos:line="63" pos:column="21"/></literal></expr>)<pos:position pos:line="63" pos:column="22"/></condition><then pos:line="63" pos:column="22"> <block pos:line="63" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">socket_perror<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><literal type="string" pos:line="64" pos:column="31">"SSL_connect"<pos:position pos:line="64" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="46">sock<pos:position pos:line="64" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="52">ret<pos:position pos:line="64" pos:column="55"/></name></expr></argument>)<pos:position pos:line="64" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="57"/></expr_stmt>
		<return pos:line="65" pos:column="17">return <expr><operator pos:line="65" pos:column="24">-<pos:position pos:line="65" pos:column="25"/></operator><literal type="number" pos:line="65" pos:column="25">1<pos:position pos:line="65" pos:column="26"/></literal></expr>;<pos:position pos:line="65" pos:column="27"/></return>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if>

	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">verify<pos:position pos:line="68" pos:column="19"/></name></expr>)<pos:position pos:line="68" pos:column="20"/></condition><then pos:line="68" pos:column="20"> <block pos:line="68" pos:column="21">{
		<comment type="block" pos:line="69" pos:column="17">/* make sure the hostname matches that of the certificate */</comment>
		<expr_stmt><expr><name pos:line="70" pos:column="17">cert<pos:position pos:line="70" pos:column="21"/></name> <operator pos:line="70" pos:column="22">=<pos:position pos:line="70" pos:column="23"/></operator> <call><name pos:line="70" pos:column="24">SSL_get_peer_certificate<pos:position pos:line="70" pos:column="48"/></name><argument_list pos:line="70" pos:column="48">(<argument><expr><name><name pos:line="70" pos:column="49">sock<pos:position pos:line="70" pos:column="53"/></name><operator pos:line="70" pos:column="53">-&gt;<pos:position pos:line="70" pos:column="58"/></operator><name pos:line="70" pos:column="55">ssl<pos:position pos:line="70" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="60"/></expr_stmt>
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><operator pos:line="71" pos:column="21">!<pos:position pos:line="71" pos:column="22"/></operator><name pos:line="71" pos:column="22">cert<pos:position pos:line="71" pos:column="26"/></name></expr>)<pos:position pos:line="71" pos:column="27"/></condition><then pos:line="71" pos:column="27">
			<block type="pseudo"><return pos:line="72" pos:column="25">return <expr><call><name pos:line="72" pos:column="32">error<pos:position pos:line="72" pos:column="37"/></name><argument_list pos:line="72" pos:column="37">(<argument><expr><literal type="string" pos:line="72" pos:column="38">"unable to get peer certificate."<pos:position pos:line="72" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="73"/></return></block></then></if>
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><call><name pos:line="73" pos:column="21">verify_hostname<pos:position pos:line="73" pos:column="36"/></name><argument_list pos:line="73" pos:column="36">(<argument><expr><name pos:line="73" pos:column="37">cert<pos:position pos:line="73" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="43">server<pos:position pos:line="73" pos:column="49"/></name><operator pos:line="73" pos:column="49">.<pos:position pos:line="73" pos:column="50"/></operator><name pos:line="73" pos:column="50">host<pos:position pos:line="73" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="55"/></argument_list></call> <operator pos:line="73" pos:column="56">&lt;<pos:position pos:line="73" pos:column="60"/></operator> <literal type="number" pos:line="73" pos:column="58">0<pos:position pos:line="73" pos:column="59"/></literal></expr>)<pos:position pos:line="73" pos:column="60"/></condition><then pos:line="73" pos:column="60">
			<block type="pseudo"><return pos:line="74" pos:column="25">return <expr><operator pos:line="74" pos:column="32">-<pos:position pos:line="74" pos:column="33"/></operator><literal type="number" pos:line="74" pos:column="33">1<pos:position pos:line="74" pos:column="34"/></literal></expr>;<pos:position pos:line="74" pos:column="35"/></return></block></then></if>
	}<pos:position pos:line="75" pos:column="10"/></block></then></if>

	<return pos:line="77" pos:column="9">return <expr><literal type="number" pos:line="77" pos:column="16">0<pos:position pos:line="77" pos:column="17"/></literal></expr>;<pos:position pos:line="77" pos:column="18"/></return>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
