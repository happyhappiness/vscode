<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6030_git-2.4.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">convert_tree<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">buffer<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">unsigned<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">long<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">size<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">unsigned<pos:position pos:line="1" pos:column="68"/></name> <name pos:line="1" pos:column="69">char<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">result_sha1<pos:position pos:line="1" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="87"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">void<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">orig_buffer<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">buffer<pos:position pos:line="3" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">long<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">orig_size<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><name pos:line="4" pos:column="35">size<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><name pos:line="6" pos:column="16">size<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition> <block pos:line="6" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">size_t<pos:position pos:line="7" pos:column="23"/></name></type> <name pos:line="7" pos:column="24">len<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><literal type="number" pos:line="7" pos:column="30">1<pos:position pos:line="7" pos:column="31"/></literal><operator pos:line="7" pos:column="31">+<pos:position pos:line="7" pos:column="32"/></operator><call><name pos:line="7" pos:column="32">strlen<pos:position pos:line="7" pos:column="38"/></name><argument_list pos:line="7" pos:column="38">(<argument><expr><name pos:line="7" pos:column="39">buffer<pos:position pos:line="7" pos:column="45"/></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="47"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="9" pos:column="17">convert_binary_sha1<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><operator pos:line="9" pos:column="37">(<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="38">char<pos:position pos:line="9" pos:column="42"/></name> <operator pos:line="9" pos:column="43">*<pos:position pos:line="9" pos:column="44"/></operator><operator pos:line="9" pos:column="44">)<pos:position pos:line="9" pos:column="45"/></operator> <name pos:line="9" pos:column="46">buffer<pos:position pos:line="9" pos:column="52"/></name> <operator pos:line="9" pos:column="53">+<pos:position pos:line="9" pos:column="54"/></operator> <name pos:line="9" pos:column="55">len<pos:position pos:line="9" pos:column="58"/></name></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt>

		<expr_stmt><expr><name pos:line="11" pos:column="17">len<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">+=<pos:position pos:line="11" pos:column="23"/></operator> <literal type="number" pos:line="11" pos:column="24">20<pos:position pos:line="11" pos:column="26"/></literal></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">len<pos:position pos:line="12" pos:column="24"/></name> <operator pos:line="12" pos:column="25">&gt;<pos:position pos:line="12" pos:column="29"/></operator> <name pos:line="12" pos:column="27">size<pos:position pos:line="12" pos:column="31"/></name></expr>)<pos:position pos:line="12" pos:column="32"/></condition><then pos:line="12" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">die<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><literal type="string" pos:line="13" pos:column="29">"corrupt tree object"<pos:position pos:line="13" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="14" pos:column="17">size<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">-=<pos:position pos:line="14" pos:column="24"/></operator> <name pos:line="14" pos:column="25">len<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">buffer<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">=<pos:position pos:line="15" pos:column="25"/></operator> <operator pos:line="15" pos:column="26">(<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="27">char<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">*<pos:position pos:line="15" pos:column="33"/></operator><operator pos:line="15" pos:column="33">)<pos:position pos:line="15" pos:column="34"/></operator> <name pos:line="15" pos:column="35">buffer<pos:position pos:line="15" pos:column="41"/></name> <operator pos:line="15" pos:column="42">+<pos:position pos:line="15" pos:column="43"/></operator> <name pos:line="15" pos:column="44">len<pos:position pos:line="15" pos:column="47"/></name></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">write_subdirectory<pos:position pos:line="18" pos:column="27"/></name><argument_list pos:line="18" pos:column="27">(<argument><expr><name pos:line="18" pos:column="28">orig_buffer<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="41">orig_size<pos:position pos:line="18" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="52">""<pos:position pos:line="18" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="56">0<pos:position pos:line="18" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="59">result_sha1<pos:position pos:line="18" pos:column="70"/></name></expr></argument>)<pos:position pos:line="18" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="72"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
