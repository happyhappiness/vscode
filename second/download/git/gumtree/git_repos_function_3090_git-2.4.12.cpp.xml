<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3090_git-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">handle_remote_ls_ctx<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">xml_ctx<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">ctx<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">int<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">tag_closed<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">remote_ls_ctx<pos:position pos:line="3" pos:column="29"/></name></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="31">ls<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><operator pos:line="3" pos:column="36">(<pos:position pos:line="3" pos:column="37"/></operator>struct <name pos:line="3" pos:column="44">remote_ls_ctx<pos:position pos:line="3" pos:column="57"/></name> <operator pos:line="3" pos:column="58">*<pos:position pos:line="3" pos:column="59"/></operator><operator pos:line="3" pos:column="59">)<pos:position pos:line="3" pos:column="60"/></operator><name><name pos:line="3" pos:column="60">ctx<pos:position pos:line="3" pos:column="63"/></name><operator pos:line="3" pos:column="63">-&gt;<pos:position pos:line="3" pos:column="68"/></operator><name pos:line="3" pos:column="65">userData<pos:position pos:line="3" pos:column="73"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="74"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">tag_closed<pos:position pos:line="5" pos:column="23"/></name></expr>)<pos:position pos:line="5" pos:column="24"/></condition><then pos:line="5" pos:column="24"> <block pos:line="5" pos:column="25">{
		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><operator pos:line="6" pos:column="21">!<pos:position pos:line="6" pos:column="22"/></operator><call><name pos:line="6" pos:column="22">strcmp<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><name><name pos:line="6" pos:column="29">ctx<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">name<pos:position pos:line="6" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="40">DAV_PROPFIND_RESP<pos:position pos:line="6" pos:column="57"/></name></expr></argument>)<pos:position pos:line="6" pos:column="58"/></argument_list></call> <operator pos:line="6" pos:column="59">&amp;&amp;<pos:position pos:line="6" pos:column="69"/></operator> <name><name pos:line="6" pos:column="62">ls<pos:position pos:line="6" pos:column="64"/></name><operator pos:line="6" pos:column="64">-&gt;<pos:position pos:line="6" pos:column="69"/></operator><name pos:line="6" pos:column="66">dentry_name<pos:position pos:line="6" pos:column="77"/></name></name></expr>)<pos:position pos:line="6" pos:column="78"/></condition><then pos:line="6" pos:column="78"> <block pos:line="6" pos:column="79">{
			<if pos:line="7" pos:column="25">if <condition pos:line="7" pos:column="28">(<expr><name><name pos:line="7" pos:column="29">ls<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">-&gt;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="33">dentry_flags<pos:position pos:line="7" pos:column="45"/></name></name> <operator pos:line="7" pos:column="46">&amp;<pos:position pos:line="7" pos:column="51"/></operator> <name pos:line="7" pos:column="48">IS_DIR<pos:position pos:line="7" pos:column="54"/></name></expr>)<pos:position pos:line="7" pos:column="55"/></condition><then pos:line="7" pos:column="55"> <block pos:line="7" pos:column="56">{

				<comment type="block" pos:line="9" pos:column="33">/* ensure collection names end with slash */</comment>
				<expr_stmt><expr><call><name pos:line="10" pos:column="33">str_end_url_with_slash<pos:position pos:line="10" pos:column="55"/></name><argument_list pos:line="10" pos:column="55">(<argument><expr><name><name pos:line="10" pos:column="56">ls<pos:position pos:line="10" pos:column="58"/></name><operator pos:line="10" pos:column="58">-&gt;<pos:position pos:line="10" pos:column="63"/></operator><name pos:line="10" pos:column="60">dentry_name<pos:position pos:line="10" pos:column="71"/></name></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="73">&amp;<pos:position pos:line="10" pos:column="78"/></operator><name><name pos:line="10" pos:column="74">ls<pos:position pos:line="10" pos:column="76"/></name><operator pos:line="10" pos:column="76">-&gt;<pos:position pos:line="10" pos:column="81"/></operator><name pos:line="10" pos:column="78">dentry_name<pos:position pos:line="10" pos:column="89"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="91"/></expr_stmt>

				<if pos:line="12" pos:column="33">if <condition pos:line="12" pos:column="36">(<expr><name><name pos:line="12" pos:column="37">ls<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">-&gt;<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="41">flags<pos:position pos:line="12" pos:column="46"/></name></name> <operator pos:line="12" pos:column="47">&amp;<pos:position pos:line="12" pos:column="52"/></operator> <name pos:line="12" pos:column="49">PROCESS_DIRS<pos:position pos:line="12" pos:column="61"/></name></expr>)<pos:position pos:line="12" pos:column="62"/></condition><then pos:line="12" pos:column="62"> <block pos:line="12" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="13" pos:column="41">ls<pos:position pos:line="13" pos:column="43"/></name><operator pos:line="13" pos:column="43">-&gt;<pos:position pos:line="13" pos:column="48"/></operator><name pos:line="13" pos:column="45">userFunc<pos:position pos:line="13" pos:column="53"/></name></name><argument_list pos:line="13" pos:column="53">(<argument><expr><name pos:line="13" pos:column="54">ls<pos:position pos:line="13" pos:column="56"/></name></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="58"/></expr_stmt>
				}<pos:position pos:line="14" pos:column="34"/></block></then></if>
				<if pos:line="15" pos:column="33">if <condition pos:line="15" pos:column="36">(<expr><call><name pos:line="15" pos:column="37">strcmp<pos:position pos:line="15" pos:column="43"/></name><argument_list pos:line="15" pos:column="43">(<argument><expr><name><name pos:line="15" pos:column="44">ls<pos:position pos:line="15" pos:column="46"/></name><operator pos:line="15" pos:column="46">-&gt;<pos:position pos:line="15" pos:column="51"/></operator><name pos:line="15" pos:column="48">dentry_name<pos:position pos:line="15" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="61">ls<pos:position pos:line="15" pos:column="63"/></name><operator pos:line="15" pos:column="63">-&gt;<pos:position pos:line="15" pos:column="68"/></operator><name pos:line="15" pos:column="65">path<pos:position pos:line="15" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="70"/></argument_list></call> <operator pos:line="15" pos:column="71">&amp;&amp;<pos:position pos:line="15" pos:column="81"/></operator>
				    <name><name pos:line="16" pos:column="37">ls<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">-&gt;<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="41">flags<pos:position pos:line="16" pos:column="46"/></name></name> <operator pos:line="16" pos:column="47">&amp;<pos:position pos:line="16" pos:column="52"/></operator> <name pos:line="16" pos:column="49">RECURSIVE<pos:position pos:line="16" pos:column="58"/></name></expr>)<pos:position pos:line="16" pos:column="59"/></condition><then pos:line="16" pos:column="59"> <block pos:line="16" pos:column="60">{
					<expr_stmt><expr><call><name pos:line="17" pos:column="41">remote_ls<pos:position pos:line="17" pos:column="50"/></name><argument_list pos:line="17" pos:column="50">(<argument><expr><name><name pos:line="17" pos:column="51">ls<pos:position pos:line="17" pos:column="53"/></name><operator pos:line="17" pos:column="53">-&gt;<pos:position pos:line="17" pos:column="58"/></operator><name pos:line="17" pos:column="55">dentry_name<pos:position pos:line="17" pos:column="66"/></name></name></expr></argument>,
						  <argument><expr><name><name pos:line="18" pos:column="51">ls<pos:position pos:line="18" pos:column="53"/></name><operator pos:line="18" pos:column="53">-&gt;<pos:position pos:line="18" pos:column="58"/></operator><name pos:line="18" pos:column="55">flags<pos:position pos:line="18" pos:column="60"/></name></name></expr></argument>,
						  <argument><expr><name><name pos:line="19" pos:column="51">ls<pos:position pos:line="19" pos:column="53"/></name><operator pos:line="19" pos:column="53">-&gt;<pos:position pos:line="19" pos:column="58"/></operator><name pos:line="19" pos:column="55">userFunc<pos:position pos:line="19" pos:column="63"/></name></name></expr></argument>,
						  <argument><expr><name><name pos:line="20" pos:column="51">ls<pos:position pos:line="20" pos:column="53"/></name><operator pos:line="20" pos:column="53">-&gt;<pos:position pos:line="20" pos:column="58"/></operator><name pos:line="20" pos:column="55">userData<pos:position pos:line="20" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="65"/></expr_stmt>
				}<pos:position pos:line="21" pos:column="34"/></block></then></if>
			}<pos:position pos:line="22" pos:column="26"/></block></then> <elseif pos:line="22" pos:column="27">else <if pos:line="22" pos:column="32">if <condition pos:line="22" pos:column="35">(<expr><name><name pos:line="22" pos:column="36">ls<pos:position pos:line="22" pos:column="38"/></name><operator pos:line="22" pos:column="38">-&gt;<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="40">flags<pos:position pos:line="22" pos:column="45"/></name></name> <operator pos:line="22" pos:column="46">&amp;<pos:position pos:line="22" pos:column="51"/></operator> <name pos:line="22" pos:column="48">PROCESS_FILES<pos:position pos:line="22" pos:column="61"/></name></expr>)<pos:position pos:line="22" pos:column="62"/></condition><then pos:line="22" pos:column="62"> <block pos:line="22" pos:column="63">{
				<expr_stmt><expr><call><name><name pos:line="23" pos:column="33">ls<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">-&gt;<pos:position pos:line="23" pos:column="40"/></operator><name pos:line="23" pos:column="37">userFunc<pos:position pos:line="23" pos:column="45"/></name></name><argument_list pos:line="23" pos:column="45">(<argument><expr><name pos:line="23" pos:column="46">ls<pos:position pos:line="23" pos:column="48"/></name></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
			}<pos:position pos:line="24" pos:column="26"/></block></then></if></elseif></if>
		}<pos:position pos:line="25" pos:column="18"/></block></then> <elseif pos:line="25" pos:column="19">else <if pos:line="25" pos:column="24">if <condition pos:line="25" pos:column="27">(<expr><operator pos:line="25" pos:column="28">!<pos:position pos:line="25" pos:column="29"/></operator><call><name pos:line="25" pos:column="29">strcmp<pos:position pos:line="25" pos:column="35"/></name><argument_list pos:line="25" pos:column="35">(<argument><expr><name><name pos:line="25" pos:column="36">ctx<pos:position pos:line="25" pos:column="39"/></name><operator pos:line="25" pos:column="39">-&gt;<pos:position pos:line="25" pos:column="44"/></operator><name pos:line="25" pos:column="41">name<pos:position pos:line="25" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="47">DAV_PROPFIND_NAME<pos:position pos:line="25" pos:column="64"/></name></expr></argument>)<pos:position pos:line="25" pos:column="65"/></argument_list></call> <operator pos:line="25" pos:column="66">&amp;&amp;<pos:position pos:line="25" pos:column="76"/></operator> <name><name pos:line="25" pos:column="69">ctx<pos:position pos:line="25" pos:column="72"/></name><operator pos:line="25" pos:column="72">-&gt;<pos:position pos:line="25" pos:column="77"/></operator><name pos:line="25" pos:column="74">cdata<pos:position pos:line="25" pos:column="79"/></name></name></expr>)<pos:position pos:line="25" pos:column="80"/></condition><then pos:line="25" pos:column="80"> <block pos:line="25" pos:column="81">{
			<decl_stmt><decl><type><name pos:line="26" pos:column="25">char<pos:position pos:line="26" pos:column="29"/></name> <modifier pos:line="26" pos:column="30">*<pos:position pos:line="26" pos:column="31"/></modifier></type><name pos:line="26" pos:column="31">path<pos:position pos:line="26" pos:column="35"/></name> <init pos:line="26" pos:column="36">= <expr><name><name pos:line="26" pos:column="38">ctx<pos:position pos:line="26" pos:column="41"/></name><operator pos:line="26" pos:column="41">-&gt;<pos:position pos:line="26" pos:column="46"/></operator><name pos:line="26" pos:column="43">cdata<pos:position pos:line="26" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="26" pos:column="49"/></decl_stmt>
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><operator pos:line="27" pos:column="29">*<pos:position pos:line="27" pos:column="30"/></operator><name><name pos:line="27" pos:column="30">ctx<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">-&gt;<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="35">cdata<pos:position pos:line="27" pos:column="40"/></name></name> <operator pos:line="27" pos:column="41">==<pos:position pos:line="27" pos:column="43"/></operator> <literal type="char" pos:line="27" pos:column="44">'h'<pos:position pos:line="27" pos:column="47"/></literal></expr>)<pos:position pos:line="27" pos:column="48"/></condition><then pos:line="27" pos:column="48"> <block pos:line="27" pos:column="49">{
				<expr_stmt><expr><name pos:line="28" pos:column="33">path<pos:position pos:line="28" pos:column="37"/></name> <operator pos:line="28" pos:column="38">=<pos:position pos:line="28" pos:column="39"/></operator> <call><name pos:line="28" pos:column="40">strstr<pos:position pos:line="28" pos:column="46"/></name><argument_list pos:line="28" pos:column="46">(<argument><expr><name pos:line="28" pos:column="47">path<pos:position pos:line="28" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="53">"//"<pos:position pos:line="28" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
				<if pos:line="29" pos:column="33">if <condition pos:line="29" pos:column="36">(<expr><name pos:line="29" pos:column="37">path<pos:position pos:line="29" pos:column="41"/></name></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42"> <block pos:line="29" pos:column="43">{
					<expr_stmt><expr><name pos:line="30" pos:column="41">path<pos:position pos:line="30" pos:column="45"/></name> <operator pos:line="30" pos:column="46">=<pos:position pos:line="30" pos:column="47"/></operator> <call><name pos:line="30" pos:column="48">strchr<pos:position pos:line="30" pos:column="54"/></name><argument_list pos:line="30" pos:column="54">(<argument><expr><name pos:line="30" pos:column="55">path<pos:position pos:line="30" pos:column="59"/></name><operator pos:line="30" pos:column="59">+<pos:position pos:line="30" pos:column="60"/></operator><literal type="number" pos:line="30" pos:column="60">2<pos:position pos:line="30" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="63">'/'<pos:position pos:line="30" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="68"/></expr_stmt>
				}<pos:position pos:line="31" pos:column="34"/></block></then></if>
			}<pos:position pos:line="32" pos:column="26"/></block></then></if>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">path<pos:position pos:line="33" pos:column="33"/></name></expr>)<pos:position pos:line="33" pos:column="34"/></condition><then pos:line="33" pos:column="34"> <block pos:line="33" pos:column="35">{
				<decl_stmt><decl><type><specifier pos:line="34" pos:column="33">const<pos:position pos:line="34" pos:column="38"/></specifier> <name pos:line="34" pos:column="39">char<pos:position pos:line="34" pos:column="43"/></name> <modifier pos:line="34" pos:column="44">*<pos:position pos:line="34" pos:column="45"/></modifier></type><name pos:line="34" pos:column="45">url<pos:position pos:line="34" pos:column="48"/></name> <init pos:line="34" pos:column="49">= <expr><name><name pos:line="34" pos:column="51">repo<pos:position pos:line="34" pos:column="55"/></name><operator pos:line="34" pos:column="55">-&gt;<pos:position pos:line="34" pos:column="60"/></operator><name pos:line="34" pos:column="57">url<pos:position pos:line="34" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="34" pos:column="61"/></decl_stmt>
				<if pos:line="35" pos:column="33">if <condition pos:line="35" pos:column="36">(<expr><name><name pos:line="35" pos:column="37">repo<pos:position pos:line="35" pos:column="41"/></name><operator pos:line="35" pos:column="41">-&gt;<pos:position pos:line="35" pos:column="46"/></operator><name pos:line="35" pos:column="43">path<pos:position pos:line="35" pos:column="47"/></name></name></expr>)<pos:position pos:line="35" pos:column="48"/></condition><then pos:line="35" pos:column="48">
					<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="41">url<pos:position pos:line="36" pos:column="44"/></name> <operator pos:line="36" pos:column="45">=<pos:position pos:line="36" pos:column="46"/></operator> <name><name pos:line="36" pos:column="47">repo<pos:position pos:line="36" pos:column="51"/></name><operator pos:line="36" pos:column="51">-&gt;<pos:position pos:line="36" pos:column="56"/></operator><name pos:line="36" pos:column="53">path<pos:position pos:line="36" pos:column="57"/></name></name></expr>;<pos:position pos:line="36" pos:column="58"/></expr_stmt></block></then></if>
				<if pos:line="37" pos:column="33">if <condition pos:line="37" pos:column="36">(<expr><call><name pos:line="37" pos:column="37">strncmp<pos:position pos:line="37" pos:column="44"/></name><argument_list pos:line="37" pos:column="44">(<argument><expr><name pos:line="37" pos:column="45">path<pos:position pos:line="37" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="51">url<pos:position pos:line="37" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="56">repo<pos:position pos:line="37" pos:column="60"/></name><operator pos:line="37" pos:column="60">-&gt;<pos:position pos:line="37" pos:column="65"/></operator><name pos:line="37" pos:column="62">path_len<pos:position pos:line="37" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="72"/></condition><then pos:line="37" pos:column="72">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="41">error<pos:position pos:line="38" pos:column="46"/></name><argument_list pos:line="38" pos:column="46">(<argument><expr><literal type="string" pos:line="38" pos:column="47">"Parsed path '%s' does not match url: '%s'"<pos:position pos:line="38" pos:column="90"/></literal></expr></argument>,
					      <argument><expr><name pos:line="39" pos:column="47">path<pos:position pos:line="39" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="53">url<pos:position pos:line="39" pos:column="56"/></name></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="58"/></expr_stmt></block></then>
				<else pos:line="40" pos:column="33">else <block pos:line="40" pos:column="38">{
					<expr_stmt><expr><name pos:line="41" pos:column="41">path<pos:position pos:line="41" pos:column="45"/></name> <operator pos:line="41" pos:column="46">+=<pos:position pos:line="41" pos:column="48"/></operator> <name><name pos:line="41" pos:column="49">repo<pos:position pos:line="41" pos:column="53"/></name><operator pos:line="41" pos:column="53">-&gt;<pos:position pos:line="41" pos:column="58"/></operator><name pos:line="41" pos:column="55">path_len<pos:position pos:line="41" pos:column="63"/></name></name></expr>;<pos:position pos:line="41" pos:column="64"/></expr_stmt>
					<expr_stmt><expr><name><name pos:line="42" pos:column="41">ls<pos:position pos:line="42" pos:column="43"/></name><operator pos:line="42" pos:column="43">-&gt;<pos:position pos:line="42" pos:column="48"/></operator><name pos:line="42" pos:column="45">dentry_name<pos:position pos:line="42" pos:column="56"/></name></name> <operator pos:line="42" pos:column="57">=<pos:position pos:line="42" pos:column="58"/></operator> <call><name pos:line="42" pos:column="59">xstrdup<pos:position pos:line="42" pos:column="66"/></name><argument_list pos:line="42" pos:column="66">(<argument><expr><name pos:line="42" pos:column="67">path<pos:position pos:line="42" pos:column="71"/></name></expr></argument>)<pos:position pos:line="42" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="73"/></expr_stmt>
				}<pos:position pos:line="43" pos:column="34"/></block></else></if>
			}<pos:position pos:line="44" pos:column="26"/></block></then></if>
		}<pos:position pos:line="45" pos:column="18"/></block></then></if></elseif> <elseif pos:line="45" pos:column="19">else <if pos:line="45" pos:column="24">if <condition pos:line="45" pos:column="27">(<expr><operator pos:line="45" pos:column="28">!<pos:position pos:line="45" pos:column="29"/></operator><call><name pos:line="45" pos:column="29">strcmp<pos:position pos:line="45" pos:column="35"/></name><argument_list pos:line="45" pos:column="35">(<argument><expr><name><name pos:line="45" pos:column="36">ctx<pos:position pos:line="45" pos:column="39"/></name><operator pos:line="45" pos:column="39">-&gt;<pos:position pos:line="45" pos:column="44"/></operator><name pos:line="45" pos:column="41">name<pos:position pos:line="45" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="47">DAV_PROPFIND_COLLECTION<pos:position pos:line="45" pos:column="70"/></name></expr></argument>)<pos:position pos:line="45" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="72"/></condition><then pos:line="45" pos:column="72"> <block pos:line="45" pos:column="73">{
			<expr_stmt><expr><name><name pos:line="46" pos:column="25">ls<pos:position pos:line="46" pos:column="27"/></name><operator pos:line="46" pos:column="27">-&gt;<pos:position pos:line="46" pos:column="32"/></operator><name pos:line="46" pos:column="29">dentry_flags<pos:position pos:line="46" pos:column="41"/></name></name> <operator pos:line="46" pos:column="42">|=<pos:position pos:line="46" pos:column="44"/></operator> <name pos:line="46" pos:column="45">IS_DIR<pos:position pos:line="46" pos:column="51"/></name></expr>;<pos:position pos:line="46" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="48" pos:column="10"/></block></then> <elseif pos:line="48" pos:column="11">else <if pos:line="48" pos:column="16">if <condition pos:line="48" pos:column="19">(<expr><operator pos:line="48" pos:column="20">!<pos:position pos:line="48" pos:column="21"/></operator><call><name pos:line="48" pos:column="21">strcmp<pos:position pos:line="48" pos:column="27"/></name><argument_list pos:line="48" pos:column="27">(<argument><expr><name><name pos:line="48" pos:column="28">ctx<pos:position pos:line="48" pos:column="31"/></name><operator pos:line="48" pos:column="31">-&gt;<pos:position pos:line="48" pos:column="36"/></operator><name pos:line="48" pos:column="33">name<pos:position pos:line="48" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="39">DAV_PROPFIND_RESP<pos:position pos:line="48" pos:column="56"/></name></expr></argument>)<pos:position pos:line="48" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="58"/></condition><then pos:line="48" pos:column="58"> <block pos:line="48" pos:column="59">{
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">free<pos:position pos:line="49" pos:column="21"/></name><argument_list pos:line="49" pos:column="21">(<argument><expr><name><name pos:line="49" pos:column="22">ls<pos:position pos:line="49" pos:column="24"/></name><operator pos:line="49" pos:column="24">-&gt;<pos:position pos:line="49" pos:column="29"/></operator><name pos:line="49" pos:column="26">dentry_name<pos:position pos:line="49" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="50" pos:column="17">ls<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">-&gt;<pos:position pos:line="50" pos:column="24"/></operator><name pos:line="50" pos:column="21">dentry_name<pos:position pos:line="50" pos:column="32"/></name></name> <operator pos:line="50" pos:column="33">=<pos:position pos:line="50" pos:column="34"/></operator> <name pos:line="50" pos:column="35">NULL<pos:position pos:line="50" pos:column="39"/></name></expr>;<pos:position pos:line="50" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="51" pos:column="17">ls<pos:position pos:line="51" pos:column="19"/></name><operator pos:line="51" pos:column="19">-&gt;<pos:position pos:line="51" pos:column="24"/></operator><name pos:line="51" pos:column="21">dentry_flags<pos:position pos:line="51" pos:column="33"/></name></name> <operator pos:line="51" pos:column="34">=<pos:position pos:line="51" pos:column="35"/></operator> <literal type="number" pos:line="51" pos:column="36">0<pos:position pos:line="51" pos:column="37"/></literal></expr>;<pos:position pos:line="51" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if></elseif></if>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
