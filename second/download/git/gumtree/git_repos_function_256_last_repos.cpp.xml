<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_256_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">bitmap<pos:position pos:line="1" pos:column="21"/></name></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">find_objects<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">rev_info<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">revs<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
				   <parameter><decl><type><name><name pos:line="2" pos:column="36">struct<pos:position pos:line="2" pos:column="42"/></name> <name pos:line="2" pos:column="43">object_list<pos:position pos:line="2" pos:column="54"/></name></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">roots<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>,
				   <parameter><decl><type><name><name pos:line="3" pos:column="36">struct<pos:position pos:line="3" pos:column="42"/></name> <name pos:line="3" pos:column="43">bitmap<pos:position pos:line="3" pos:column="49"/></name></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">seen<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="56"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">bitmap<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">base<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><name pos:line="5" pos:column="31">NULL<pos:position pos:line="5" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">needs_walk<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><literal type="number" pos:line="6" pos:column="26">0<pos:position pos:line="6" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">object_list<pos:position pos:line="8" pos:column="27"/></name></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">not_mapped<pos:position pos:line="8" pos:column="39"/></name> <init pos:line="8" pos:column="40">= <expr><name pos:line="8" pos:column="42">NULL<pos:position pos:line="8" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="47"/></decl_stmt>

	<comment type="block" pos:line="10" pos:column="9">/*
	 * Go through all the roots for the walk. The ones that have bitmaps
	 * on the bitmap index will be `or`ed together to form an initial
	 * global reachability analysis.
	 *
	 * The ones without bitmaps in the index will be stored in the
	 * `not_mapped_list` for further processing.
	 */</comment>
	<while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><name pos:line="18" pos:column="16">roots<pos:position pos:line="18" pos:column="21"/></name></expr>)<pos:position pos:line="18" pos:column="22"/></condition> <block pos:line="18" pos:column="23">{
		<decl_stmt><decl><type><name><name pos:line="19" pos:column="17">struct<pos:position pos:line="19" pos:column="23"/></name> <name pos:line="19" pos:column="24">object<pos:position pos:line="19" pos:column="30"/></name></name> <modifier pos:line="19" pos:column="31">*<pos:position pos:line="19" pos:column="32"/></modifier></type><name pos:line="19" pos:column="32">object<pos:position pos:line="19" pos:column="38"/></name> <init pos:line="19" pos:column="39">= <expr><name><name pos:line="19" pos:column="41">roots<pos:position pos:line="19" pos:column="46"/></name><operator pos:line="19" pos:column="46">-&gt;<pos:position pos:line="19" pos:column="51"/></operator><name pos:line="19" pos:column="48">item<pos:position pos:line="19" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="53"/></decl_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">roots<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <name><name pos:line="20" pos:column="25">roots<pos:position pos:line="20" pos:column="30"/></name><operator pos:line="20" pos:column="30">-&gt;<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="32">next<pos:position pos:line="20" pos:column="36"/></name></name></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name><name pos:line="22" pos:column="21">object<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">-&gt;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="29">type<pos:position pos:line="22" pos:column="33"/></name></name> <operator pos:line="22" pos:column="34">==<pos:position pos:line="22" pos:column="36"/></operator> <name pos:line="22" pos:column="37">OBJ_COMMIT<pos:position pos:line="22" pos:column="47"/></name></expr>)<pos:position pos:line="22" pos:column="48"/></condition><then pos:line="22" pos:column="48"> <block pos:line="22" pos:column="49">{
			<decl_stmt><decl><type><name pos:line="23" pos:column="25">khiter_t<pos:position pos:line="23" pos:column="33"/></name></type> <name pos:line="23" pos:column="34">pos<pos:position pos:line="23" pos:column="37"/></name> <init pos:line="23" pos:column="38">= <expr><call><name pos:line="23" pos:column="40">kh_get_sha1<pos:position pos:line="23" pos:column="51"/></name><argument_list pos:line="23" pos:column="51">(<argument><expr><name><name pos:line="23" pos:column="52">bitmap_git<pos:position pos:line="23" pos:column="62"/></name><operator pos:line="23" pos:column="62">.<pos:position pos:line="23" pos:column="63"/></operator><name pos:line="23" pos:column="63">bitmaps<pos:position pos:line="23" pos:column="70"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="72">object<pos:position pos:line="23" pos:column="78"/></name><operator pos:line="23" pos:column="78">-&gt;<pos:position pos:line="23" pos:column="83"/></operator><name pos:line="23" pos:column="80">oid<pos:position pos:line="23" pos:column="83"/></name><operator pos:line="23" pos:column="83">.<pos:position pos:line="23" pos:column="84"/></operator><name pos:line="23" pos:column="84">hash<pos:position pos:line="23" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="89"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="90"/></decl_stmt>

			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><name pos:line="25" pos:column="29">pos<pos:position pos:line="25" pos:column="32"/></name> <operator pos:line="25" pos:column="33">&lt;<pos:position pos:line="25" pos:column="37"/></operator> <call><name pos:line="25" pos:column="35">kh_end<pos:position pos:line="25" pos:column="41"/></name><argument_list pos:line="25" pos:column="41">(<argument><expr><name><name pos:line="25" pos:column="42">bitmap_git<pos:position pos:line="25" pos:column="52"/></name><operator pos:line="25" pos:column="52">.<pos:position pos:line="25" pos:column="53"/></operator><name pos:line="25" pos:column="53">bitmaps<pos:position pos:line="25" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="62"/></condition><then pos:line="25" pos:column="62"> <block pos:line="25" pos:column="63">{
				<decl_stmt><decl><type><name><name pos:line="26" pos:column="33">struct<pos:position pos:line="26" pos:column="39"/></name> <name pos:line="26" pos:column="40">stored_bitmap<pos:position pos:line="26" pos:column="53"/></name></name> <modifier pos:line="26" pos:column="54">*<pos:position pos:line="26" pos:column="55"/></modifier></type><name pos:line="26" pos:column="55">st<pos:position pos:line="26" pos:column="57"/></name> <init pos:line="26" pos:column="58">= <expr><call><name pos:line="26" pos:column="60">kh_value<pos:position pos:line="26" pos:column="68"/></name><argument_list pos:line="26" pos:column="68">(<argument><expr><name><name pos:line="26" pos:column="69">bitmap_git<pos:position pos:line="26" pos:column="79"/></name><operator pos:line="26" pos:column="79">.<pos:position pos:line="26" pos:column="80"/></operator><name pos:line="26" pos:column="80">bitmaps<pos:position pos:line="26" pos:column="87"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="89">pos<pos:position pos:line="26" pos:column="92"/></name></expr></argument>)<pos:position pos:line="26" pos:column="93"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="94"/></decl_stmt>
				<decl_stmt><decl><type><name><name pos:line="27" pos:column="33">struct<pos:position pos:line="27" pos:column="39"/></name> <name pos:line="27" pos:column="40">ewah_bitmap<pos:position pos:line="27" pos:column="51"/></name></name> <modifier pos:line="27" pos:column="52">*<pos:position pos:line="27" pos:column="53"/></modifier></type><name pos:line="27" pos:column="53">or_with<pos:position pos:line="27" pos:column="60"/></name> <init pos:line="27" pos:column="61">= <expr><call><name pos:line="27" pos:column="63">lookup_stored_bitmap<pos:position pos:line="27" pos:column="83"/></name><argument_list pos:line="27" pos:column="83">(<argument><expr><name pos:line="27" pos:column="84">st<pos:position pos:line="27" pos:column="86"/></name></expr></argument>)<pos:position pos:line="27" pos:column="87"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="88"/></decl_stmt>

				<if pos:line="29" pos:column="33">if <condition pos:line="29" pos:column="36">(<expr><name pos:line="29" pos:column="37">base<pos:position pos:line="29" pos:column="41"/></name> <operator pos:line="29" pos:column="42">==<pos:position pos:line="29" pos:column="44"/></operator> <name pos:line="29" pos:column="45">NULL<pos:position pos:line="29" pos:column="49"/></name></expr>)<pos:position pos:line="29" pos:column="50"/></condition><then pos:line="29" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="41">base<pos:position pos:line="30" pos:column="45"/></name> <operator pos:line="30" pos:column="46">=<pos:position pos:line="30" pos:column="47"/></operator> <call><name pos:line="30" pos:column="48">ewah_to_bitmap<pos:position pos:line="30" pos:column="62"/></name><argument_list pos:line="30" pos:column="62">(<argument><expr><name pos:line="30" pos:column="63">or_with<pos:position pos:line="30" pos:column="70"/></name></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="72"/></expr_stmt></block></then>
				<else pos:line="31" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="41">bitmap_or_ewah<pos:position pos:line="32" pos:column="55"/></name><argument_list pos:line="32" pos:column="55">(<argument><expr><name pos:line="32" pos:column="56">base<pos:position pos:line="32" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="62">or_with<pos:position pos:line="32" pos:column="69"/></name></expr></argument>)<pos:position pos:line="32" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="71"/></expr_stmt></block></else></if>

				<expr_stmt><expr><name><name pos:line="34" pos:column="33">object<pos:position pos:line="34" pos:column="39"/></name><operator pos:line="34" pos:column="39">-&gt;<pos:position pos:line="34" pos:column="44"/></operator><name pos:line="34" pos:column="41">flags<pos:position pos:line="34" pos:column="46"/></name></name> <operator pos:line="34" pos:column="47">|=<pos:position pos:line="34" pos:column="49"/></operator> <name pos:line="34" pos:column="50">SEEN<pos:position pos:line="34" pos:column="54"/></name></expr>;<pos:position pos:line="34" pos:column="55"/></expr_stmt>
				<continue pos:line="35" pos:column="33">continue;<pos:position pos:line="35" pos:column="42"/></continue>
			}<pos:position pos:line="36" pos:column="26"/></block></then></if>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="39" pos:column="17">object_list_insert<pos:position pos:line="39" pos:column="35"/></name><argument_list pos:line="39" pos:column="35">(<argument><expr><name pos:line="39" pos:column="36">object<pos:position pos:line="39" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="44">&amp;<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="45">not_mapped<pos:position pos:line="39" pos:column="55"/></name></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></while>

	<comment type="block" pos:line="42" pos:column="9">/*
	 * Best case scenario: We found bitmaps for all the roots,
	 * so the resulting `or` bitmap has the full reachability analysis
	 */</comment>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">not_mapped<pos:position pos:line="46" pos:column="23"/></name> <operator pos:line="46" pos:column="24">==<pos:position pos:line="46" pos:column="26"/></operator> <name pos:line="46" pos:column="27">NULL<pos:position pos:line="46" pos:column="31"/></name></expr>)<pos:position pos:line="46" pos:column="32"/></condition><then pos:line="46" pos:column="32">
		<block type="pseudo"><return pos:line="47" pos:column="17">return <expr><name pos:line="47" pos:column="24">base<pos:position pos:line="47" pos:column="28"/></name></expr>;<pos:position pos:line="47" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="49" pos:column="9">roots<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <name pos:line="49" pos:column="17">not_mapped<pos:position pos:line="49" pos:column="27"/></name></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>

	<comment type="block" pos:line="51" pos:column="9">/*
	 * Let's iterate through all the roots that don't have bitmaps to
	 * check if we can determine them to be reachable from the existing
	 * global bitmap.
	 *
	 * If we cannot find them in the existing global bitmap, we'll need
	 * to push them to an actual walk and run it until we can confirm
	 * they are reachable
	 */</comment>
	<while pos:line="60" pos:column="9">while <condition pos:line="60" pos:column="15">(<expr><name pos:line="60" pos:column="16">roots<pos:position pos:line="60" pos:column="21"/></name></expr>)<pos:position pos:line="60" pos:column="22"/></condition> <block pos:line="60" pos:column="23">{
		<decl_stmt><decl><type><name><name pos:line="61" pos:column="17">struct<pos:position pos:line="61" pos:column="23"/></name> <name pos:line="61" pos:column="24">object<pos:position pos:line="61" pos:column="30"/></name></name> <modifier pos:line="61" pos:column="31">*<pos:position pos:line="61" pos:column="32"/></modifier></type><name pos:line="61" pos:column="32">object<pos:position pos:line="61" pos:column="38"/></name> <init pos:line="61" pos:column="39">= <expr><name><name pos:line="61" pos:column="41">roots<pos:position pos:line="61" pos:column="46"/></name><operator pos:line="61" pos:column="46">-&gt;<pos:position pos:line="61" pos:column="51"/></operator><name pos:line="61" pos:column="48">item<pos:position pos:line="61" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="61" pos:column="53"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="62" pos:column="17">int<pos:position pos:line="62" pos:column="20"/></name></type> <name pos:line="62" pos:column="21">pos<pos:position pos:line="62" pos:column="24"/></name></decl>;<pos:position pos:line="62" pos:column="25"/></decl_stmt>

		<expr_stmt><expr><name pos:line="64" pos:column="17">roots<pos:position pos:line="64" pos:column="22"/></name> <operator pos:line="64" pos:column="23">=<pos:position pos:line="64" pos:column="24"/></operator> <name><name pos:line="64" pos:column="25">roots<pos:position pos:line="64" pos:column="30"/></name><operator pos:line="64" pos:column="30">-&gt;<pos:position pos:line="64" pos:column="35"/></operator><name pos:line="64" pos:column="32">next<pos:position pos:line="64" pos:column="36"/></name></name></expr>;<pos:position pos:line="64" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="65" pos:column="17">pos<pos:position pos:line="65" pos:column="20"/></name> <operator pos:line="65" pos:column="21">=<pos:position pos:line="65" pos:column="22"/></operator> <call><name pos:line="65" pos:column="23">bitmap_position<pos:position pos:line="65" pos:column="38"/></name><argument_list pos:line="65" pos:column="38">(<argument><expr><name><name pos:line="65" pos:column="39">object<pos:position pos:line="65" pos:column="45"/></name><operator pos:line="65" pos:column="45">-&gt;<pos:position pos:line="65" pos:column="50"/></operator><name pos:line="65" pos:column="47">oid<pos:position pos:line="65" pos:column="50"/></name><operator pos:line="65" pos:column="50">.<pos:position pos:line="65" pos:column="51"/></operator><name pos:line="65" pos:column="51">hash<pos:position pos:line="65" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="57"/></expr_stmt>

		<if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><name pos:line="67" pos:column="21">pos<pos:position pos:line="67" pos:column="24"/></name> <operator pos:line="67" pos:column="25">&lt;<pos:position pos:line="67" pos:column="29"/></operator> <literal type="number" pos:line="67" pos:column="27">0<pos:position pos:line="67" pos:column="28"/></literal> <operator pos:line="67" pos:column="29">||<pos:position pos:line="67" pos:column="31"/></operator> <name pos:line="67" pos:column="32">base<pos:position pos:line="67" pos:column="36"/></name> <operator pos:line="67" pos:column="37">==<pos:position pos:line="67" pos:column="39"/></operator> <name pos:line="67" pos:column="40">NULL<pos:position pos:line="67" pos:column="44"/></name> <operator pos:line="67" pos:column="45">||<pos:position pos:line="67" pos:column="47"/></operator> <operator pos:line="67" pos:column="48">!<pos:position pos:line="67" pos:column="49"/></operator><call><name pos:line="67" pos:column="49">bitmap_get<pos:position pos:line="67" pos:column="59"/></name><argument_list pos:line="67" pos:column="59">(<argument><expr><name pos:line="67" pos:column="60">base<pos:position pos:line="67" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="66">pos<pos:position pos:line="67" pos:column="69"/></name></expr></argument>)<pos:position pos:line="67" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="71"/></condition><then pos:line="67" pos:column="71"> <block pos:line="67" pos:column="72">{
			<expr_stmt><expr><name><name pos:line="68" pos:column="25">object<pos:position pos:line="68" pos:column="31"/></name><operator pos:line="68" pos:column="31">-&gt;<pos:position pos:line="68" pos:column="36"/></operator><name pos:line="68" pos:column="33">flags<pos:position pos:line="68" pos:column="38"/></name></name> <operator pos:line="68" pos:column="39">&amp;=<pos:position pos:line="68" pos:column="45"/></operator> <operator pos:line="68" pos:column="42">~<pos:position pos:line="68" pos:column="43"/></operator><name pos:line="68" pos:column="43">UNINTERESTING<pos:position pos:line="68" pos:column="56"/></name></expr>;<pos:position pos:line="68" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="69" pos:column="25">add_pending_object<pos:position pos:line="69" pos:column="43"/></name><argument_list pos:line="69" pos:column="43">(<argument><expr><name pos:line="69" pos:column="44">revs<pos:position pos:line="69" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="50">object<pos:position pos:line="69" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="58">""<pos:position pos:line="69" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name pos:line="70" pos:column="25">needs_walk<pos:position pos:line="70" pos:column="35"/></name> <operator pos:line="70" pos:column="36">=<pos:position pos:line="70" pos:column="37"/></operator> <literal type="number" pos:line="70" pos:column="38">1<pos:position pos:line="70" pos:column="39"/></literal></expr>;<pos:position pos:line="70" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="71" pos:column="18"/></block></then> <else pos:line="71" pos:column="19">else <block pos:line="71" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="72" pos:column="25">object<pos:position pos:line="72" pos:column="31"/></name><operator pos:line="72" pos:column="31">-&gt;<pos:position pos:line="72" pos:column="36"/></operator><name pos:line="72" pos:column="33">flags<pos:position pos:line="72" pos:column="38"/></name></name> <operator pos:line="72" pos:column="39">|=<pos:position pos:line="72" pos:column="41"/></operator> <name pos:line="72" pos:column="42">SEEN<pos:position pos:line="72" pos:column="46"/></name></expr>;<pos:position pos:line="72" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="73" pos:column="18"/></block></else></if>
	}<pos:position pos:line="74" pos:column="10"/></block></while>

	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><name pos:line="76" pos:column="13">needs_walk<pos:position pos:line="76" pos:column="23"/></name></expr>)<pos:position pos:line="76" pos:column="24"/></condition><then pos:line="76" pos:column="24"> <block pos:line="76" pos:column="25">{
		<decl_stmt><decl><type><name><name pos:line="77" pos:column="17">struct<pos:position pos:line="77" pos:column="23"/></name> <name pos:line="77" pos:column="24">include_data<pos:position pos:line="77" pos:column="36"/></name></name></type> <name pos:line="77" pos:column="37">incdata<pos:position pos:line="77" pos:column="44"/></name></decl>;<pos:position pos:line="77" pos:column="45"/></decl_stmt>

		<if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><name pos:line="79" pos:column="21">base<pos:position pos:line="79" pos:column="25"/></name> <operator pos:line="79" pos:column="26">==<pos:position pos:line="79" pos:column="28"/></operator> <name pos:line="79" pos:column="29">NULL<pos:position pos:line="79" pos:column="33"/></name></expr>)<pos:position pos:line="79" pos:column="34"/></condition><then pos:line="79" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><name pos:line="80" pos:column="25">base<pos:position pos:line="80" pos:column="29"/></name> <operator pos:line="80" pos:column="30">=<pos:position pos:line="80" pos:column="31"/></operator> <call><name pos:line="80" pos:column="32">bitmap_new<pos:position pos:line="80" pos:column="42"/></name><argument_list pos:line="80" pos:column="42">()<pos:position pos:line="80" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="45"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name><name pos:line="82" pos:column="17">incdata<pos:position pos:line="82" pos:column="24"/></name><operator pos:line="82" pos:column="24">.<pos:position pos:line="82" pos:column="25"/></operator><name pos:line="82" pos:column="25">base<pos:position pos:line="82" pos:column="29"/></name></name> <operator pos:line="82" pos:column="30">=<pos:position pos:line="82" pos:column="31"/></operator> <name pos:line="82" pos:column="32">base<pos:position pos:line="82" pos:column="36"/></name></expr>;<pos:position pos:line="82" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="83" pos:column="17">incdata<pos:position pos:line="83" pos:column="24"/></name><operator pos:line="83" pos:column="24">.<pos:position pos:line="83" pos:column="25"/></operator><name pos:line="83" pos:column="25">seen<pos:position pos:line="83" pos:column="29"/></name></name> <operator pos:line="83" pos:column="30">=<pos:position pos:line="83" pos:column="31"/></operator> <name pos:line="83" pos:column="32">seen<pos:position pos:line="83" pos:column="36"/></name></expr>;<pos:position pos:line="83" pos:column="37"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="85" pos:column="17">revs<pos:position pos:line="85" pos:column="21"/></name><operator pos:line="85" pos:column="21">-&gt;<pos:position pos:line="85" pos:column="26"/></operator><name pos:line="85" pos:column="23">include_check<pos:position pos:line="85" pos:column="36"/></name></name> <operator pos:line="85" pos:column="37">=<pos:position pos:line="85" pos:column="38"/></operator> <name pos:line="85" pos:column="39">should_include<pos:position pos:line="85" pos:column="53"/></name></expr>;<pos:position pos:line="85" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="86" pos:column="17">revs<pos:position pos:line="86" pos:column="21"/></name><operator pos:line="86" pos:column="21">-&gt;<pos:position pos:line="86" pos:column="26"/></operator><name pos:line="86" pos:column="23">include_check_data<pos:position pos:line="86" pos:column="41"/></name></name> <operator pos:line="86" pos:column="42">=<pos:position pos:line="86" pos:column="43"/></operator> <operator pos:line="86" pos:column="44">&amp;<pos:position pos:line="86" pos:column="49"/></operator><name pos:line="86" pos:column="45">incdata<pos:position pos:line="86" pos:column="52"/></name></expr>;<pos:position pos:line="86" pos:column="53"/></expr_stmt>

		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><call><name pos:line="88" pos:column="21">prepare_revision_walk<pos:position pos:line="88" pos:column="42"/></name><argument_list pos:line="88" pos:column="42">(<argument><expr><name pos:line="88" pos:column="43">revs<pos:position pos:line="88" pos:column="47"/></name></expr></argument>)<pos:position pos:line="88" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="49"/></condition><then pos:line="88" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="25">die<pos:position pos:line="89" pos:column="28"/></name><argument_list pos:line="89" pos:column="28">(<argument><expr><literal type="string" pos:line="89" pos:column="29">"revision walk setup failed"<pos:position pos:line="89" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="59"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="91" pos:column="17">traverse_commit_list<pos:position pos:line="91" pos:column="37"/></name><argument_list pos:line="91" pos:column="37">(<argument><expr><name pos:line="91" pos:column="38">revs<pos:position pos:line="91" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="44">show_commit<pos:position pos:line="91" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="57">show_object<pos:position pos:line="91" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="70">base<pos:position pos:line="91" pos:column="74"/></name></expr></argument>)<pos:position pos:line="91" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="76"/></expr_stmt>
	}<pos:position pos:line="92" pos:column="10"/></block></then></if>

	<return pos:line="94" pos:column="9">return <expr><name pos:line="94" pos:column="16">base<pos:position pos:line="94" pos:column="20"/></name></expr>;<pos:position pos:line="94" pos:column="21"/></return>
}<pos:position pos:line="95" pos:column="2"/></block></function></unit>
