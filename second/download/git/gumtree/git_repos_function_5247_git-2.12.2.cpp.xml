<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5247_git-2.12.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fsck_cache_tree<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">cache_tree<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">it<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">err<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">verbose<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">fprintf<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">stderr<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="33">"Checking cache tree\n"<pos:position pos:line="7" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="58"/></expr_stmt></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><literal type="number" pos:line="9" pos:column="13">0<pos:position pos:line="9" pos:column="14"/></literal> <operator pos:line="9" pos:column="15">&lt;=<pos:position pos:line="9" pos:column="20"/></operator> <name><name pos:line="9" pos:column="18">it<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">-&gt;<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="22">entry_count<pos:position pos:line="9" pos:column="33"/></name></name></expr>)<pos:position pos:line="9" pos:column="34"/></condition><then pos:line="9" pos:column="34"> <block pos:line="9" pos:column="35">{
		<decl_stmt><decl><type><name><name pos:line="10" pos:column="17">struct<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">object<pos:position pos:line="10" pos:column="30"/></name></name> <modifier pos:line="10" pos:column="31">*<pos:position pos:line="10" pos:column="32"/></modifier></type><name pos:line="10" pos:column="32">obj<pos:position pos:line="10" pos:column="35"/></name> <init pos:line="10" pos:column="36">= <expr><call><name pos:line="10" pos:column="38">parse_object<pos:position pos:line="10" pos:column="50"/></name><argument_list pos:line="10" pos:column="50">(<argument><expr><name><name pos:line="10" pos:column="51">it<pos:position pos:line="10" pos:column="53"/></name><operator pos:line="10" pos:column="53">-&gt;<pos:position pos:line="10" pos:column="58"/></operator><name pos:line="10" pos:column="55">sha1<pos:position pos:line="10" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="61"/></decl_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">obj<pos:position pos:line="11" pos:column="25"/></name></expr>)<pos:position pos:line="11" pos:column="26"/></condition><then pos:line="11" pos:column="26"> <block pos:line="11" pos:column="27">{
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">error<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><literal type="string" pos:line="12" pos:column="31">"%s: invalid sha1 pointer in cache-tree"<pos:position pos:line="12" pos:column="71"/></literal></expr></argument>,
			      <argument><expr><call><name pos:line="13" pos:column="31">sha1_to_hex<pos:position pos:line="13" pos:column="42"/></name><argument_list pos:line="13" pos:column="42">(<argument><expr><name><name pos:line="13" pos:column="43">it<pos:position pos:line="13" pos:column="45"/></name><operator pos:line="13" pos:column="45">-&gt;<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="47">sha1<pos:position pos:line="13" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><name pos:line="14" pos:column="25">errors_found<pos:position pos:line="14" pos:column="37"/></name> <operator pos:line="14" pos:column="38">|=<pos:position pos:line="14" pos:column="40"/></operator> <name pos:line="14" pos:column="41">ERROR_REFS<pos:position pos:line="14" pos:column="51"/></name></expr>;<pos:position pos:line="14" pos:column="52"/></expr_stmt>
			<return pos:line="15" pos:column="25">return <expr><literal type="number" pos:line="15" pos:column="32">1<pos:position pos:line="15" pos:column="33"/></literal></expr>;<pos:position pos:line="15" pos:column="34"/></return>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="17" pos:column="17">obj<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">-&gt;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="22">used<pos:position pos:line="17" pos:column="26"/></name></name> <operator pos:line="17" pos:column="27">=<pos:position pos:line="17" pos:column="28"/></operator> <literal type="number" pos:line="17" pos:column="29">1<pos:position pos:line="17" pos:column="30"/></literal></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">name_objects<pos:position pos:line="18" pos:column="33"/></name></expr>)<pos:position pos:line="18" pos:column="34"/></condition><then pos:line="18" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="25">add_decoration<pos:position pos:line="19" pos:column="39"/></name><argument_list pos:line="19" pos:column="39">(<argument><expr><name><name pos:line="19" pos:column="40">fsck_walk_options<pos:position pos:line="19" pos:column="57"/></name><operator pos:line="19" pos:column="57">.<pos:position pos:line="19" pos:column="58"/></operator><name pos:line="19" pos:column="58">object_names<pos:position pos:line="19" pos:column="70"/></name></name></expr></argument>,
				<argument><expr><name pos:line="20" pos:column="33">obj<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="38">xstrdup<pos:position pos:line="20" pos:column="45"/></name><argument_list pos:line="20" pos:column="45">(<argument><expr><literal type="string" pos:line="20" pos:column="46">":"<pos:position pos:line="20" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">mark_object_reachable<pos:position pos:line="21" pos:column="38"/></name><argument_list pos:line="21" pos:column="38">(<argument><expr><name pos:line="21" pos:column="39">obj<pos:position pos:line="21" pos:column="42"/></name></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="44"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name><name pos:line="22" pos:column="21">obj<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">-&gt;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="26">type<pos:position pos:line="22" pos:column="30"/></name></name> <operator pos:line="22" pos:column="31">!=<pos:position pos:line="22" pos:column="33"/></operator> <name pos:line="22" pos:column="34">OBJ_TREE<pos:position pos:line="22" pos:column="42"/></name></expr>)<pos:position pos:line="22" pos:column="43"/></condition><then pos:line="22" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="25">err<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">|=<pos:position pos:line="23" pos:column="31"/></operator> <call><name pos:line="23" pos:column="32">objerror<pos:position pos:line="23" pos:column="40"/></name><argument_list pos:line="23" pos:column="40">(<argument><expr><name pos:line="23" pos:column="41">obj<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="46">"non-tree in cache-tree"<pos:position pos:line="23" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="72"/></expr_stmt></block></then></if>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
	<for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">i<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <literal type="number" pos:line="25" pos:column="18">0<pos:position pos:line="25" pos:column="19"/></literal></expr>;<pos:position pos:line="25" pos:column="20"/></init> <condition><expr><name pos:line="25" pos:column="21">i<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">&lt;<pos:position pos:line="25" pos:column="27"/></operator> <name><name pos:line="25" pos:column="25">it<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">-&gt;<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="29">subtree_nr<pos:position pos:line="25" pos:column="39"/></name></name></expr>;<pos:position pos:line="25" pos:column="40"/></condition> <incr><expr><name pos:line="25" pos:column="41">i<pos:position pos:line="25" pos:column="42"/></name><operator pos:line="25" pos:column="42">++<pos:position pos:line="25" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="45"/></control>
		<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="17">err<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">|=<pos:position pos:line="26" pos:column="23"/></operator> <call><name pos:line="26" pos:column="24">fsck_cache_tree<pos:position pos:line="26" pos:column="39"/></name><argument_list pos:line="26" pos:column="39">(<argument><expr><name><name pos:line="26" pos:column="40">it<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">-&gt;<pos:position pos:line="26" pos:column="47"/></operator><name pos:line="26" pos:column="44">down<pos:position pos:line="26" pos:column="48"/></name><index pos:line="26" pos:column="48">[<expr><name pos:line="26" pos:column="49">i<pos:position pos:line="26" pos:column="50"/></name></expr>]<pos:position pos:line="26" pos:column="51"/></index></name><operator pos:line="26" pos:column="51">-&gt;<pos:position pos:line="26" pos:column="56"/></operator><name pos:line="26" pos:column="53">cache_tree<pos:position pos:line="26" pos:column="63"/></name></expr></argument>)<pos:position pos:line="26" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="65"/></expr_stmt></block></for>
	<return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">err<pos:position pos:line="27" pos:column="19"/></name></expr>;<pos:position pos:line="27" pos:column="20"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
