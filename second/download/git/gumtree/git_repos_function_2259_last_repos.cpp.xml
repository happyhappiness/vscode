<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2259_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">packed_object_info<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">packed_git<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">p<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">off_t<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">obj_offset<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
		       <parameter><decl><type><name><name pos:line="2" pos:column="24">struct<pos:position pos:line="2" pos:column="30"/></name> <name pos:line="2" pos:column="31">object_info<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">oi<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">pack_window<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">w_curs<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><name pos:line="4" pos:column="38">NULL<pos:position pos:line="4" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">size<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">off_t<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">curpos<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><name pos:line="6" pos:column="24">obj_offset<pos:position pos:line="6" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">enum<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">object_type<pos:position pos:line="7" pos:column="25"/></name></name></type> <name pos:line="7" pos:column="26">type<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * We always get the representation type, but only convert it to
	 * a "real" type later if the caller is interested.
	 */</comment>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name><name pos:line="13" pos:column="13">oi<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">-&gt;<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="17">contentp<pos:position pos:line="13" pos:column="25"/></name></name></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26"> <block pos:line="13" pos:column="27">{
		<expr_stmt><expr><operator pos:line="14" pos:column="17">*<pos:position pos:line="14" pos:column="18"/></operator><name><name pos:line="14" pos:column="18">oi<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">-&gt;<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="22">contentp<pos:position pos:line="14" pos:column="30"/></name></name> <operator pos:line="14" pos:column="31">=<pos:position pos:line="14" pos:column="32"/></operator> <call><name pos:line="14" pos:column="33">cache_or_unpack_entry<pos:position pos:line="14" pos:column="54"/></name><argument_list pos:line="14" pos:column="54">(<argument><expr><name pos:line="14" pos:column="55">p<pos:position pos:line="14" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="58">obj_offset<pos:position pos:line="14" pos:column="68"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="70">oi<pos:position pos:line="14" pos:column="72"/></name><operator pos:line="14" pos:column="72">-&gt;<pos:position pos:line="14" pos:column="77"/></operator><name pos:line="14" pos:column="74">sizep<pos:position pos:line="14" pos:column="79"/></name></name></expr></argument>,
						      <argument><expr><operator pos:line="15" pos:column="55">&amp;<pos:position pos:line="15" pos:column="60"/></operator><name pos:line="15" pos:column="56">type<pos:position pos:line="15" pos:column="60"/></name></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><operator pos:line="16" pos:column="22">*<pos:position pos:line="16" pos:column="23"/></operator><name><name pos:line="16" pos:column="23">oi<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">-&gt;<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="27">contentp<pos:position pos:line="16" pos:column="35"/></name></name></expr>)<pos:position pos:line="16" pos:column="36"/></condition><then pos:line="16" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="25">type<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">=<pos:position pos:line="17" pos:column="31"/></operator> <name pos:line="17" pos:column="32">OBJ_BAD<pos:position pos:line="17" pos:column="39"/></name></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt></block></then></if>
	}<pos:position pos:line="18" pos:column="10"/></block></then> <else pos:line="18" pos:column="11">else <block pos:line="18" pos:column="16">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">type<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <call><name pos:line="19" pos:column="24">unpack_object_header<pos:position pos:line="19" pos:column="44"/></name><argument_list pos:line="19" pos:column="44">(<argument><expr><name pos:line="19" pos:column="45">p<pos:position pos:line="19" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="48">&amp;<pos:position pos:line="19" pos:column="53"/></operator><name pos:line="19" pos:column="49">w_curs<pos:position pos:line="19" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="57">&amp;<pos:position pos:line="19" pos:column="62"/></operator><name pos:line="19" pos:column="58">curpos<pos:position pos:line="19" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="66">&amp;<pos:position pos:line="19" pos:column="71"/></operator><name pos:line="19" pos:column="67">size<pos:position pos:line="19" pos:column="71"/></name></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="73"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></else></if>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name><name pos:line="22" pos:column="14">oi<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">-&gt;<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="18">contentp<pos:position pos:line="22" pos:column="26"/></name></name> <operator pos:line="22" pos:column="27">&amp;&amp;<pos:position pos:line="22" pos:column="37"/></operator> <name><name pos:line="22" pos:column="30">oi<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">-&gt;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="34">sizep<pos:position pos:line="22" pos:column="39"/></name></name></expr>)<pos:position pos:line="22" pos:column="40"/></condition><then pos:line="22" pos:column="40"> <block pos:line="22" pos:column="41">{
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">type<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">==<pos:position pos:line="23" pos:column="28"/></operator> <name pos:line="23" pos:column="29">OBJ_OFS_DELTA<pos:position pos:line="23" pos:column="42"/></name> <operator pos:line="23" pos:column="43">||<pos:position pos:line="23" pos:column="45"/></operator> <name pos:line="23" pos:column="46">type<pos:position pos:line="23" pos:column="50"/></name> <operator pos:line="23" pos:column="51">==<pos:position pos:line="23" pos:column="53"/></operator> <name pos:line="23" pos:column="54">OBJ_REF_DELTA<pos:position pos:line="23" pos:column="67"/></name></expr>)<pos:position pos:line="23" pos:column="68"/></condition><then pos:line="23" pos:column="68"> <block pos:line="23" pos:column="69">{
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">off_t<pos:position pos:line="24" pos:column="30"/></name></type> <name pos:line="24" pos:column="31">tmp_pos<pos:position pos:line="24" pos:column="38"/></name> <init pos:line="24" pos:column="39">= <expr><name pos:line="24" pos:column="41">curpos<pos:position pos:line="24" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="48"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="25" pos:column="25">off_t<pos:position pos:line="25" pos:column="30"/></name></type> <name pos:line="25" pos:column="31">base_offset<pos:position pos:line="25" pos:column="42"/></name> <init pos:line="25" pos:column="43">= <expr><call><name pos:line="25" pos:column="45">get_delta_base<pos:position pos:line="25" pos:column="59"/></name><argument_list pos:line="25" pos:column="59">(<argument><expr><name pos:line="25" pos:column="60">p<pos:position pos:line="25" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="63">&amp;<pos:position pos:line="25" pos:column="68"/></operator><name pos:line="25" pos:column="64">w_curs<pos:position pos:line="25" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="72">&amp;<pos:position pos:line="25" pos:column="77"/></operator><name pos:line="25" pos:column="73">tmp_pos<pos:position pos:line="25" pos:column="80"/></name></expr></argument>,
							   <argument><expr><name pos:line="26" pos:column="60">type<pos:position pos:line="26" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="66">obj_offset<pos:position pos:line="26" pos:column="76"/></name></expr></argument>)<pos:position pos:line="26" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="78"/></decl_stmt>
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><operator pos:line="27" pos:column="29">!<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="30">base_offset<pos:position pos:line="27" pos:column="41"/></name></expr>)<pos:position pos:line="27" pos:column="42"/></condition><then pos:line="27" pos:column="42"> <block pos:line="27" pos:column="43">{
				<expr_stmt><expr><name pos:line="28" pos:column="33">type<pos:position pos:line="28" pos:column="37"/></name> <operator pos:line="28" pos:column="38">=<pos:position pos:line="28" pos:column="39"/></operator> <name pos:line="28" pos:column="40">OBJ_BAD<pos:position pos:line="28" pos:column="47"/></name></expr>;<pos:position pos:line="28" pos:column="48"/></expr_stmt>
				<goto pos:line="29" pos:column="33">goto <name pos:line="29" pos:column="38">out<pos:position pos:line="29" pos:column="41"/></name>;<pos:position pos:line="29" pos:column="42"/></goto>
			}<pos:position pos:line="30" pos:column="26"/></block></then></if>
			<expr_stmt><expr><operator pos:line="31" pos:column="25">*<pos:position pos:line="31" pos:column="26"/></operator><name><name pos:line="31" pos:column="26">oi<pos:position pos:line="31" pos:column="28"/></name><operator pos:line="31" pos:column="28">-&gt;<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="30">sizep<pos:position pos:line="31" pos:column="35"/></name></name> <operator pos:line="31" pos:column="36">=<pos:position pos:line="31" pos:column="37"/></operator> <call><name pos:line="31" pos:column="38">get_size_from_delta<pos:position pos:line="31" pos:column="57"/></name><argument_list pos:line="31" pos:column="57">(<argument><expr><name pos:line="31" pos:column="58">p<pos:position pos:line="31" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="61">&amp;<pos:position pos:line="31" pos:column="66"/></operator><name pos:line="31" pos:column="62">w_curs<pos:position pos:line="31" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="70">tmp_pos<pos:position pos:line="31" pos:column="77"/></name></expr></argument>)<pos:position pos:line="31" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="79"/></expr_stmt>
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><operator pos:line="32" pos:column="29">*<pos:position pos:line="32" pos:column="30"/></operator><name><name pos:line="32" pos:column="30">oi<pos:position pos:line="32" pos:column="32"/></name><operator pos:line="32" pos:column="32">-&gt;<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="34">sizep<pos:position pos:line="32" pos:column="39"/></name></name> <operator pos:line="32" pos:column="40">==<pos:position pos:line="32" pos:column="42"/></operator> <literal type="number" pos:line="32" pos:column="43">0<pos:position pos:line="32" pos:column="44"/></literal></expr>)<pos:position pos:line="32" pos:column="45"/></condition><then pos:line="32" pos:column="45"> <block pos:line="32" pos:column="46">{
				<expr_stmt><expr><name pos:line="33" pos:column="33">type<pos:position pos:line="33" pos:column="37"/></name> <operator pos:line="33" pos:column="38">=<pos:position pos:line="33" pos:column="39"/></operator> <name pos:line="33" pos:column="40">OBJ_BAD<pos:position pos:line="33" pos:column="47"/></name></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
				<goto pos:line="34" pos:column="33">goto <name pos:line="34" pos:column="38">out<pos:position pos:line="34" pos:column="41"/></name>;<pos:position pos:line="34" pos:column="42"/></goto>
			}<pos:position pos:line="35" pos:column="26"/></block></then></if>
		}<pos:position pos:line="36" pos:column="18"/></block></then> <else pos:line="36" pos:column="19">else <block pos:line="36" pos:column="24">{
			<expr_stmt><expr><operator pos:line="37" pos:column="25">*<pos:position pos:line="37" pos:column="26"/></operator><name><name pos:line="37" pos:column="26">oi<pos:position pos:line="37" pos:column="28"/></name><operator pos:line="37" pos:column="28">-&gt;<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="30">sizep<pos:position pos:line="37" pos:column="35"/></name></name> <operator pos:line="37" pos:column="36">=<pos:position pos:line="37" pos:column="37"/></operator> <name pos:line="37" pos:column="38">size<pos:position pos:line="37" pos:column="42"/></name></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></else></if>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if>

	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name><name pos:line="41" pos:column="13">oi<pos:position pos:line="41" pos:column="15"/></name><operator pos:line="41" pos:column="15">-&gt;<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="17">disk_sizep<pos:position pos:line="41" pos:column="27"/></name></name></expr>)<pos:position pos:line="41" pos:column="28"/></condition><then pos:line="41" pos:column="28"> <block pos:line="41" pos:column="29">{
		<decl_stmt><decl><type><name><name pos:line="42" pos:column="17">struct<pos:position pos:line="42" pos:column="23"/></name> <name pos:line="42" pos:column="24">revindex_entry<pos:position pos:line="42" pos:column="38"/></name></name> <modifier pos:line="42" pos:column="39">*<pos:position pos:line="42" pos:column="40"/></modifier></type><name pos:line="42" pos:column="40">revidx<pos:position pos:line="42" pos:column="46"/></name> <init pos:line="42" pos:column="47">= <expr><call><name pos:line="42" pos:column="49">find_pack_revindex<pos:position pos:line="42" pos:column="67"/></name><argument_list pos:line="42" pos:column="67">(<argument><expr><name pos:line="42" pos:column="68">p<pos:position pos:line="42" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="71">obj_offset<pos:position pos:line="42" pos:column="81"/></name></expr></argument>)<pos:position pos:line="42" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="42" pos:column="83"/></decl_stmt>
		<expr_stmt><expr><operator pos:line="43" pos:column="17">*<pos:position pos:line="43" pos:column="18"/></operator><name><name pos:line="43" pos:column="18">oi<pos:position pos:line="43" pos:column="20"/></name><operator pos:line="43" pos:column="20">-&gt;<pos:position pos:line="43" pos:column="25"/></operator><name pos:line="43" pos:column="22">disk_sizep<pos:position pos:line="43" pos:column="32"/></name></name> <operator pos:line="43" pos:column="33">=<pos:position pos:line="43" pos:column="34"/></operator> <name><name pos:line="43" pos:column="35">revidx<pos:position pos:line="43" pos:column="41"/></name><index pos:line="43" pos:column="41">[<expr><literal type="number" pos:line="43" pos:column="42">1<pos:position pos:line="43" pos:column="43"/></literal></expr>]<pos:position pos:line="43" pos:column="44"/></index></name><operator pos:line="43" pos:column="44">.<pos:position pos:line="43" pos:column="45"/></operator><name pos:line="43" pos:column="45">offset<pos:position pos:line="43" pos:column="51"/></name> <operator pos:line="43" pos:column="52">-<pos:position pos:line="43" pos:column="53"/></operator> <name pos:line="43" pos:column="54">obj_offset<pos:position pos:line="43" pos:column="64"/></name></expr>;<pos:position pos:line="43" pos:column="65"/></expr_stmt>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name><name pos:line="46" pos:column="13">oi<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">-&gt;<pos:position pos:line="46" pos:column="20"/></operator><name pos:line="46" pos:column="17">typep<pos:position pos:line="46" pos:column="22"/></name></name> <operator pos:line="46" pos:column="23">||<pos:position pos:line="46" pos:column="25"/></operator> <name><name pos:line="46" pos:column="26">oi<pos:position pos:line="46" pos:column="28"/></name><operator pos:line="46" pos:column="28">-&gt;<pos:position pos:line="46" pos:column="33"/></operator></name><name><typename pos:line="46" pos:column="30">typename<pos:position pos:line="46" pos:column="38"/></typename></name></expr>)<pos:position pos:line="46" pos:column="39"/></condition><then pos:line="46" pos:column="39"> <block pos:line="46" pos:column="40">{
		<decl_stmt><decl><type><name><name pos:line="47" pos:column="17">enum<pos:position pos:line="47" pos:column="21"/></name> <name pos:line="47" pos:column="22">object_type<pos:position pos:line="47" pos:column="33"/></name></name></type> <name pos:line="47" pos:column="34">ptot<pos:position pos:line="47" pos:column="38"/></name></decl>;<pos:position pos:line="47" pos:column="39"/></decl_stmt>
		<expr_stmt><expr><name pos:line="48" pos:column="17">ptot<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <call><name pos:line="48" pos:column="24">packed_to_object_type<pos:position pos:line="48" pos:column="45"/></name><argument_list pos:line="48" pos:column="45">(<argument><expr><name pos:line="48" pos:column="46">p<pos:position pos:line="48" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="49">obj_offset<pos:position pos:line="48" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="61">type<pos:position pos:line="48" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="67">&amp;<pos:position pos:line="48" pos:column="72"/></operator><name pos:line="48" pos:column="68">w_curs<pos:position pos:line="48" pos:column="74"/></name></expr></argument>,
					     <argument><expr><name pos:line="49" pos:column="46">curpos<pos:position pos:line="49" pos:column="52"/></name></expr></argument>)<pos:position pos:line="49" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="54"/></expr_stmt>
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name><name pos:line="50" pos:column="21">oi<pos:position pos:line="50" pos:column="23"/></name><operator pos:line="50" pos:column="23">-&gt;<pos:position pos:line="50" pos:column="28"/></operator><name pos:line="50" pos:column="25">typep<pos:position pos:line="50" pos:column="30"/></name></name></expr>)<pos:position pos:line="50" pos:column="31"/></condition><then pos:line="50" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="51" pos:column="25">*<pos:position pos:line="51" pos:column="26"/></operator><name><name pos:line="51" pos:column="26">oi<pos:position pos:line="51" pos:column="28"/></name><operator pos:line="51" pos:column="28">-&gt;<pos:position pos:line="51" pos:column="33"/></operator><name pos:line="51" pos:column="30">typep<pos:position pos:line="51" pos:column="35"/></name></name> <operator pos:line="51" pos:column="36">=<pos:position pos:line="51" pos:column="37"/></operator> <name pos:line="51" pos:column="38">ptot<pos:position pos:line="51" pos:column="42"/></name></expr>;<pos:position pos:line="51" pos:column="43"/></expr_stmt></block></then></if>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name><name pos:line="52" pos:column="21">oi<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">-&gt;<pos:position pos:line="52" pos:column="28"/></operator></name><name><typename pos:line="52" pos:column="25">typename<pos:position pos:line="52" pos:column="33"/></typename></name></expr>)<pos:position pos:line="52" pos:column="34"/></condition><then pos:line="52" pos:column="34"> <block pos:line="52" pos:column="35">{
			<decl_stmt><decl><type><specifier pos:line="53" pos:column="25">const<pos:position pos:line="53" pos:column="30"/></specifier> <name pos:line="53" pos:column="31">char<pos:position pos:line="53" pos:column="35"/></name> <modifier pos:line="53" pos:column="36">*<pos:position pos:line="53" pos:column="37"/></modifier></type><name pos:line="53" pos:column="37">tn<pos:position pos:line="53" pos:column="39"/></name> <init pos:line="53" pos:column="40">= <expr><name><typename pos:line="53" pos:column="42">typename<pos:position pos:line="53" pos:column="50"/></typename></name><operator pos:line="53" pos:column="50">(<pos:position pos:line="53" pos:column="51"/></operator><name pos:line="53" pos:column="51">ptot<pos:position pos:line="53" pos:column="55"/></name><operator pos:line="53" pos:column="55">)<pos:position pos:line="53" pos:column="56"/></operator></expr></init></decl>;<pos:position pos:line="53" pos:column="57"/></decl_stmt>
			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><name pos:line="54" pos:column="29">tn<pos:position pos:line="54" pos:column="31"/></name></expr>)<pos:position pos:line="54" pos:column="32"/></condition><then pos:line="54" pos:column="32">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="33">strbuf_addstr<pos:position pos:line="55" pos:column="46"/></name><argument_list pos:line="55" pos:column="46">(<argument><expr><name><name pos:line="55" pos:column="47">oi<pos:position pos:line="55" pos:column="49"/></name><operator pos:line="55" pos:column="49">-&gt;<pos:position pos:line="55" pos:column="54"/></operator></name><name><typename pos:line="55" pos:column="51">typename<pos:position pos:line="55" pos:column="59"/></typename></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="61">tn<pos:position pos:line="55" pos:column="63"/></name></expr></argument>)<pos:position pos:line="55" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="65"/></expr_stmt></block></then></if>
		}<pos:position pos:line="56" pos:column="18"/></block></then></if>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><name pos:line="57" pos:column="21">ptot<pos:position pos:line="57" pos:column="25"/></name> <operator pos:line="57" pos:column="26">&lt;<pos:position pos:line="57" pos:column="30"/></operator> <literal type="number" pos:line="57" pos:column="28">0<pos:position pos:line="57" pos:column="29"/></literal></expr>)<pos:position pos:line="57" pos:column="30"/></condition><then pos:line="57" pos:column="30"> <block pos:line="57" pos:column="31">{
			<expr_stmt><expr><name pos:line="58" pos:column="25">type<pos:position pos:line="58" pos:column="29"/></name> <operator pos:line="58" pos:column="30">=<pos:position pos:line="58" pos:column="31"/></operator> <name pos:line="58" pos:column="32">OBJ_BAD<pos:position pos:line="58" pos:column="39"/></name></expr>;<pos:position pos:line="58" pos:column="40"/></expr_stmt>
			<goto pos:line="59" pos:column="25">goto <name pos:line="59" pos:column="30">out<pos:position pos:line="59" pos:column="33"/></name>;<pos:position pos:line="59" pos:column="34"/></goto>
		}<pos:position pos:line="60" pos:column="18"/></block></then></if>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if>

	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name><name pos:line="63" pos:column="13">oi<pos:position pos:line="63" pos:column="15"/></name><operator pos:line="63" pos:column="15">-&gt;<pos:position pos:line="63" pos:column="20"/></operator><name pos:line="63" pos:column="17">delta_base_sha1<pos:position pos:line="63" pos:column="32"/></name></name></expr>)<pos:position pos:line="63" pos:column="33"/></condition><then pos:line="63" pos:column="33"> <block pos:line="63" pos:column="34">{
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">type<pos:position pos:line="64" pos:column="25"/></name> <operator pos:line="64" pos:column="26">==<pos:position pos:line="64" pos:column="28"/></operator> <name pos:line="64" pos:column="29">OBJ_OFS_DELTA<pos:position pos:line="64" pos:column="42"/></name> <operator pos:line="64" pos:column="43">||<pos:position pos:line="64" pos:column="45"/></operator> <name pos:line="64" pos:column="46">type<pos:position pos:line="64" pos:column="50"/></name> <operator pos:line="64" pos:column="51">==<pos:position pos:line="64" pos:column="53"/></operator> <name pos:line="64" pos:column="54">OBJ_REF_DELTA<pos:position pos:line="64" pos:column="67"/></name></expr>)<pos:position pos:line="64" pos:column="68"/></condition><then pos:line="64" pos:column="68"> <block pos:line="64" pos:column="69">{
			<decl_stmt><decl><type><specifier pos:line="65" pos:column="25">const<pos:position pos:line="65" pos:column="30"/></specifier> <name pos:line="65" pos:column="31">unsigned<pos:position pos:line="65" pos:column="39"/></name> <name pos:line="65" pos:column="40">char<pos:position pos:line="65" pos:column="44"/></name> <modifier pos:line="65" pos:column="45">*<pos:position pos:line="65" pos:column="46"/></modifier></type><name pos:line="65" pos:column="46">base<pos:position pos:line="65" pos:column="50"/></name></decl>;<pos:position pos:line="65" pos:column="51"/></decl_stmt>

			<expr_stmt><expr><name pos:line="67" pos:column="25">base<pos:position pos:line="67" pos:column="29"/></name> <operator pos:line="67" pos:column="30">=<pos:position pos:line="67" pos:column="31"/></operator> <call><name pos:line="67" pos:column="32">get_delta_base_sha1<pos:position pos:line="67" pos:column="51"/></name><argument_list pos:line="67" pos:column="51">(<argument><expr><name pos:line="67" pos:column="52">p<pos:position pos:line="67" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="55">&amp;<pos:position pos:line="67" pos:column="60"/></operator><name pos:line="67" pos:column="56">w_curs<pos:position pos:line="67" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="64">curpos<pos:position pos:line="67" pos:column="70"/></name></expr></argument>,
						   <argument><expr><name pos:line="68" pos:column="52">type<pos:position pos:line="68" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="58">obj_offset<pos:position pos:line="68" pos:column="68"/></name></expr></argument>)<pos:position pos:line="68" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="70"/></expr_stmt>
			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><operator pos:line="69" pos:column="29">!<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="30">base<pos:position pos:line="69" pos:column="34"/></name></expr>)<pos:position pos:line="69" pos:column="35"/></condition><then pos:line="69" pos:column="35"> <block pos:line="69" pos:column="36">{
				<expr_stmt><expr><name pos:line="70" pos:column="33">type<pos:position pos:line="70" pos:column="37"/></name> <operator pos:line="70" pos:column="38">=<pos:position pos:line="70" pos:column="39"/></operator> <name pos:line="70" pos:column="40">OBJ_BAD<pos:position pos:line="70" pos:column="47"/></name></expr>;<pos:position pos:line="70" pos:column="48"/></expr_stmt>
				<goto pos:line="71" pos:column="33">goto <name pos:line="71" pos:column="38">out<pos:position pos:line="71" pos:column="41"/></name>;<pos:position pos:line="71" pos:column="42"/></goto>
			}<pos:position pos:line="72" pos:column="26"/></block></then></if>

			<expr_stmt><expr><call><name pos:line="74" pos:column="25">hashcpy<pos:position pos:line="74" pos:column="32"/></name><argument_list pos:line="74" pos:column="32">(<argument><expr><name><name pos:line="74" pos:column="33">oi<pos:position pos:line="74" pos:column="35"/></name><operator pos:line="74" pos:column="35">-&gt;<pos:position pos:line="74" pos:column="40"/></operator><name pos:line="74" pos:column="37">delta_base_sha1<pos:position pos:line="74" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="54">base<pos:position pos:line="74" pos:column="58"/></name></expr></argument>)<pos:position pos:line="74" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="60"/></expr_stmt>
		}<pos:position pos:line="75" pos:column="18"/></block></then> <else pos:line="75" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="25">hashclr<pos:position pos:line="76" pos:column="32"/></name><argument_list pos:line="76" pos:column="32">(<argument><expr><name><name pos:line="76" pos:column="33">oi<pos:position pos:line="76" pos:column="35"/></name><operator pos:line="76" pos:column="35">-&gt;<pos:position pos:line="76" pos:column="40"/></operator><name pos:line="76" pos:column="37">delta_base_sha1<pos:position pos:line="76" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="54"/></expr_stmt></block></else></if>
	}<pos:position pos:line="77" pos:column="10"/></block></then></if>

<label><name pos:line="79" pos:column="1">out<pos:position pos:line="79" pos:column="4"/></name>:<pos:position pos:line="79" pos:column="5"/></label>
	<expr_stmt><expr><call><name pos:line="80" pos:column="9">unuse_pack<pos:position pos:line="80" pos:column="19"/></name><argument_list pos:line="80" pos:column="19">(<argument><expr><operator pos:line="80" pos:column="20">&amp;<pos:position pos:line="80" pos:column="25"/></operator><name pos:line="80" pos:column="21">w_curs<pos:position pos:line="80" pos:column="27"/></name></expr></argument>)<pos:position pos:line="80" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="29"/></expr_stmt>
	<return pos:line="81" pos:column="9">return <expr><name pos:line="81" pos:column="16">type<pos:position pos:line="81" pos:column="20"/></name></expr>;<pos:position pos:line="81" pos:column="21"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
