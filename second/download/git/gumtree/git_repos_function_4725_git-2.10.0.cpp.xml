<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4725_git-2.10.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">git_header_name<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">apply_state<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">state<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">line<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="3" pos:column="30">int<pos:position pos:line="3" pos:column="33"/></name></type> <name pos:line="3" pos:column="34">llen<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="39"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">name<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">second<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><name pos:line="6" pos:column="30">NULL<pos:position pos:line="6" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">len<pos:position pos:line="7" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="21">line_len<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">line<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">+=<pos:position pos:line="9" pos:column="16"/></operator> <call><name pos:line="9" pos:column="17">strlen<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><literal type="string" pos:line="9" pos:column="24">"diff --git "<pos:position pos:line="9" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name pos:line="10" pos:column="9">llen<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">-=<pos:position pos:line="10" pos:column="16"/></operator> <call><name pos:line="10" pos:column="17">strlen<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><literal type="string" pos:line="10" pos:column="24">"diff --git "<pos:position pos:line="10" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="39"/></expr_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">*<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">line<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">==<pos:position pos:line="12" pos:column="21"/></operator> <literal type="char" pos:line="12" pos:column="22">'"'<pos:position pos:line="12" pos:column="25"/></literal></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26"> <block pos:line="12" pos:column="27">{
		<decl_stmt><decl><type><specifier pos:line="13" pos:column="17">const<pos:position pos:line="13" pos:column="22"/></specifier> <name pos:line="13" pos:column="23">char<pos:position pos:line="13" pos:column="27"/></name> <modifier pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></modifier></type><name pos:line="13" pos:column="29">cp<pos:position pos:line="13" pos:column="31"/></name></decl>;<pos:position pos:line="13" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="14" pos:column="17">struct<pos:position pos:line="14" pos:column="23"/></name> <name pos:line="14" pos:column="24">strbuf<pos:position pos:line="14" pos:column="30"/></name></name></type> <name pos:line="14" pos:column="31">first<pos:position pos:line="14" pos:column="36"/></name> <init pos:line="14" pos:column="37">= <expr><name pos:line="14" pos:column="39">STRBUF_INIT<pos:position pos:line="14" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="51"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="15" pos:column="17">struct<pos:position pos:line="15" pos:column="23"/></name> <name pos:line="15" pos:column="24">strbuf<pos:position pos:line="15" pos:column="30"/></name></name></type> <name pos:line="15" pos:column="31">sp<pos:position pos:line="15" pos:column="33"/></name> <init pos:line="15" pos:column="34">= <expr><name pos:line="15" pos:column="36">STRBUF_INIT<pos:position pos:line="15" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="48"/></decl_stmt>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><call><name pos:line="17" pos:column="21">unquote_c_style<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><operator pos:line="17" pos:column="37">&amp;<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="38">first<pos:position pos:line="17" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="45">line<pos:position pos:line="17" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="51">&amp;<pos:position pos:line="17" pos:column="56"/></operator><name pos:line="17" pos:column="52">second<pos:position pos:line="17" pos:column="58"/></name></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="60"/></condition><then pos:line="17" pos:column="60">
			<block type="pseudo"><goto pos:line="18" pos:column="25">goto <name pos:line="18" pos:column="30">free_and_fail1<pos:position pos:line="18" pos:column="44"/></name>;<pos:position pos:line="18" pos:column="45"/></goto></block></then></if>

		<comment type="block" pos:line="20" pos:column="17">/* strip the a/b prefix including trailing slash */</comment>
		<expr_stmt><expr><name pos:line="21" pos:column="17">cp<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <call><name pos:line="21" pos:column="22">skip_tree_prefix<pos:position pos:line="21" pos:column="38"/></name><argument_list pos:line="21" pos:column="38">(<argument><expr><name pos:line="21" pos:column="39">state<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="46">first<pos:position pos:line="21" pos:column="51"/></name><operator pos:line="21" pos:column="51">.<pos:position pos:line="21" pos:column="52"/></operator><name pos:line="21" pos:column="52">buf<pos:position pos:line="21" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="57">first<pos:position pos:line="21" pos:column="62"/></name><operator pos:line="21" pos:column="62">.<pos:position pos:line="21" pos:column="63"/></operator><name pos:line="21" pos:column="63">len<pos:position pos:line="21" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="68"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">cp<pos:position pos:line="22" pos:column="24"/></name></expr>)<pos:position pos:line="22" pos:column="25"/></condition><then pos:line="22" pos:column="25">
			<block type="pseudo"><goto pos:line="23" pos:column="25">goto <name pos:line="23" pos:column="30">free_and_fail1<pos:position pos:line="23" pos:column="44"/></name>;<pos:position pos:line="23" pos:column="45"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">strbuf_remove<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><operator pos:line="24" pos:column="31">&amp;<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="32">first<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="39">0<pos:position pos:line="24" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="42">cp<pos:position pos:line="24" pos:column="44"/></name> <operator pos:line="24" pos:column="45">-<pos:position pos:line="24" pos:column="46"/></operator> <name><name pos:line="24" pos:column="47">first<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">.<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="53">buf<pos:position pos:line="24" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>

		<comment type="block" pos:line="26" pos:column="17">/*
		 * second points at one past closing dq of name.
		 * find the second name.
		 */</comment>
		<while pos:line="30" pos:column="17">while <condition pos:line="30" pos:column="23">(<expr><operator pos:line="30" pos:column="24">(<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="25">second<pos:position pos:line="30" pos:column="31"/></name> <operator pos:line="30" pos:column="32">&lt;<pos:position pos:line="30" pos:column="36"/></operator> <name pos:line="30" pos:column="34">line<pos:position pos:line="30" pos:column="38"/></name> <operator pos:line="30" pos:column="39">+<pos:position pos:line="30" pos:column="40"/></operator> <name pos:line="30" pos:column="41">llen<pos:position pos:line="30" pos:column="45"/></name><operator pos:line="30" pos:column="45">)<pos:position pos:line="30" pos:column="46"/></operator> <operator pos:line="30" pos:column="47">&amp;&amp;<pos:position pos:line="30" pos:column="57"/></operator> <call><name pos:line="30" pos:column="50">isspace<pos:position pos:line="30" pos:column="57"/></name><argument_list pos:line="30" pos:column="57">(<argument><expr><operator pos:line="30" pos:column="58">*<pos:position pos:line="30" pos:column="59"/></operator><name pos:line="30" pos:column="59">second<pos:position pos:line="30" pos:column="65"/></name></expr></argument>)<pos:position pos:line="30" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="67"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="25">second<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">++<pos:position pos:line="31" pos:column="33"/></operator></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt></block></while>

		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">line<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">+<pos:position pos:line="33" pos:column="27"/></operator> <name pos:line="33" pos:column="28">llen<pos:position pos:line="33" pos:column="32"/></name> <operator pos:line="33" pos:column="33">&lt;=<pos:position pos:line="33" pos:column="38"/></operator> <name pos:line="33" pos:column="36">second<pos:position pos:line="33" pos:column="42"/></name></expr>)<pos:position pos:line="33" pos:column="43"/></condition><then pos:line="33" pos:column="43">
			<block type="pseudo"><goto pos:line="34" pos:column="25">goto <name pos:line="34" pos:column="30">free_and_fail1<pos:position pos:line="34" pos:column="44"/></name>;<pos:position pos:line="34" pos:column="45"/></goto></block></then></if>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><operator pos:line="35" pos:column="21">*<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">second<pos:position pos:line="35" pos:column="28"/></name> <operator pos:line="35" pos:column="29">==<pos:position pos:line="35" pos:column="31"/></operator> <literal type="char" pos:line="35" pos:column="32">'"'<pos:position pos:line="35" pos:column="35"/></literal></expr>)<pos:position pos:line="35" pos:column="36"/></condition><then pos:line="35" pos:column="36"> <block pos:line="35" pos:column="37">{
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><call><name pos:line="36" pos:column="29">unquote_c_style<pos:position pos:line="36" pos:column="44"/></name><argument_list pos:line="36" pos:column="44">(<argument><expr><operator pos:line="36" pos:column="45">&amp;<pos:position pos:line="36" pos:column="50"/></operator><name pos:line="36" pos:column="46">sp<pos:position pos:line="36" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="50">second<pos:position pos:line="36" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="58">NULL<pos:position pos:line="36" pos:column="62"/></name></expr></argument>)<pos:position pos:line="36" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="64"/></condition><then pos:line="36" pos:column="64">
				<block type="pseudo"><goto pos:line="37" pos:column="33">goto <name pos:line="37" pos:column="38">free_and_fail1<pos:position pos:line="37" pos:column="52"/></name>;<pos:position pos:line="37" pos:column="53"/></goto></block></then></if>
			<expr_stmt><expr><name pos:line="38" pos:column="25">cp<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">=<pos:position pos:line="38" pos:column="29"/></operator> <call><name pos:line="38" pos:column="30">skip_tree_prefix<pos:position pos:line="38" pos:column="46"/></name><argument_list pos:line="38" pos:column="46">(<argument><expr><name pos:line="38" pos:column="47">state<pos:position pos:line="38" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="54">sp<pos:position pos:line="38" pos:column="56"/></name><operator pos:line="38" pos:column="56">.<pos:position pos:line="38" pos:column="57"/></operator><name pos:line="38" pos:column="57">buf<pos:position pos:line="38" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="62">sp<pos:position pos:line="38" pos:column="64"/></name><operator pos:line="38" pos:column="64">.<pos:position pos:line="38" pos:column="65"/></operator><name pos:line="38" pos:column="65">len<pos:position pos:line="38" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="70"/></expr_stmt>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><operator pos:line="39" pos:column="29">!<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="30">cp<pos:position pos:line="39" pos:column="32"/></name></expr>)<pos:position pos:line="39" pos:column="33"/></condition><then pos:line="39" pos:column="33">
				<block type="pseudo"><goto pos:line="40" pos:column="33">goto <name pos:line="40" pos:column="38">free_and_fail1<pos:position pos:line="40" pos:column="52"/></name>;<pos:position pos:line="40" pos:column="53"/></goto></block></then></if>
			<comment type="block" pos:line="41" pos:column="25">/* They must match, otherwise ignore */</comment>
			<if pos:line="42" pos:column="25">if <condition pos:line="42" pos:column="28">(<expr><call><name pos:line="42" pos:column="29">strcmp<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">(<argument><expr><name pos:line="42" pos:column="36">cp<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="40">first<pos:position pos:line="42" pos:column="45"/></name><operator pos:line="42" pos:column="45">.<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="46">buf<pos:position pos:line="42" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="51"/></condition><then pos:line="42" pos:column="51">
				<block type="pseudo"><goto pos:line="43" pos:column="33">goto <name pos:line="43" pos:column="38">free_and_fail1<pos:position pos:line="43" pos:column="52"/></name>;<pos:position pos:line="43" pos:column="53"/></goto></block></then></if>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">strbuf_release<pos:position pos:line="44" pos:column="39"/></name><argument_list pos:line="44" pos:column="39">(<argument><expr><operator pos:line="44" pos:column="40">&amp;<pos:position pos:line="44" pos:column="45"/></operator><name pos:line="44" pos:column="41">sp<pos:position pos:line="44" pos:column="43"/></name></expr></argument>)<pos:position pos:line="44" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="45"/></expr_stmt>
			<return pos:line="45" pos:column="25">return <expr><call><name pos:line="45" pos:column="32">strbuf_detach<pos:position pos:line="45" pos:column="45"/></name><argument_list pos:line="45" pos:column="45">(<argument><expr><operator pos:line="45" pos:column="46">&amp;<pos:position pos:line="45" pos:column="51"/></operator><name pos:line="45" pos:column="47">first<pos:position pos:line="45" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="54">NULL<pos:position pos:line="45" pos:column="58"/></name></expr></argument>)<pos:position pos:line="45" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="60"/></return>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="48" pos:column="17">/* unquoted second */</comment>
		<expr_stmt><expr><name pos:line="49" pos:column="17">cp<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">=<pos:position pos:line="49" pos:column="21"/></operator> <call><name pos:line="49" pos:column="22">skip_tree_prefix<pos:position pos:line="49" pos:column="38"/></name><argument_list pos:line="49" pos:column="38">(<argument><expr><name pos:line="49" pos:column="39">state<pos:position pos:line="49" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="46">second<pos:position pos:line="49" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="54">line<pos:position pos:line="49" pos:column="58"/></name> <operator pos:line="49" pos:column="59">+<pos:position pos:line="49" pos:column="60"/></operator> <name pos:line="49" pos:column="61">llen<pos:position pos:line="49" pos:column="65"/></name> <operator pos:line="49" pos:column="66">-<pos:position pos:line="49" pos:column="67"/></operator> <name pos:line="49" pos:column="68">second<pos:position pos:line="49" pos:column="74"/></name></expr></argument>)<pos:position pos:line="49" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="76"/></expr_stmt>
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><operator pos:line="50" pos:column="21">!<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">cp<pos:position pos:line="50" pos:column="24"/></name></expr>)<pos:position pos:line="50" pos:column="25"/></condition><then pos:line="50" pos:column="25">
			<block type="pseudo"><goto pos:line="51" pos:column="25">goto <name pos:line="51" pos:column="30">free_and_fail1<pos:position pos:line="51" pos:column="44"/></name>;<pos:position pos:line="51" pos:column="45"/></goto></block></then></if>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">line<pos:position pos:line="52" pos:column="25"/></name> <operator pos:line="52" pos:column="26">+<pos:position pos:line="52" pos:column="27"/></operator> <name pos:line="52" pos:column="28">llen<pos:position pos:line="52" pos:column="32"/></name> <operator pos:line="52" pos:column="33">-<pos:position pos:line="52" pos:column="34"/></operator> <name pos:line="52" pos:column="35">cp<pos:position pos:line="52" pos:column="37"/></name> <operator pos:line="52" pos:column="38">!=<pos:position pos:line="52" pos:column="40"/></operator> <name><name pos:line="52" pos:column="41">first<pos:position pos:line="52" pos:column="46"/></name><operator pos:line="52" pos:column="46">.<pos:position pos:line="52" pos:column="47"/></operator><name pos:line="52" pos:column="47">len<pos:position pos:line="52" pos:column="50"/></name></name> <operator pos:line="52" pos:column="51">||<pos:position pos:line="52" pos:column="53"/></operator>
		    <call><name pos:line="53" pos:column="21">memcmp<pos:position pos:line="53" pos:column="27"/></name><argument_list pos:line="53" pos:column="27">(<argument><expr><name><name pos:line="53" pos:column="28">first<pos:position pos:line="53" pos:column="33"/></name><operator pos:line="53" pos:column="33">.<pos:position pos:line="53" pos:column="34"/></operator><name pos:line="53" pos:column="34">buf<pos:position pos:line="53" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="39">cp<pos:position pos:line="53" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="43">first<pos:position pos:line="53" pos:column="48"/></name><operator pos:line="53" pos:column="48">.<pos:position pos:line="53" pos:column="49"/></operator><name pos:line="53" pos:column="49">len<pos:position pos:line="53" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="54"/></condition><then pos:line="53" pos:column="54">
			<block type="pseudo"><goto pos:line="54" pos:column="25">goto <name pos:line="54" pos:column="30">free_and_fail1<pos:position pos:line="54" pos:column="44"/></name>;<pos:position pos:line="54" pos:column="45"/></goto></block></then></if>
		<return pos:line="55" pos:column="17">return <expr><call><name pos:line="55" pos:column="24">strbuf_detach<pos:position pos:line="55" pos:column="37"/></name><argument_list pos:line="55" pos:column="37">(<argument><expr><operator pos:line="55" pos:column="38">&amp;<pos:position pos:line="55" pos:column="43"/></operator><name pos:line="55" pos:column="39">first<pos:position pos:line="55" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="46">NULL<pos:position pos:line="55" pos:column="50"/></name></expr></argument>)<pos:position pos:line="55" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="52"/></return>

	<label><name pos:line="57" pos:column="9">free_and_fail1<pos:position pos:line="57" pos:column="23"/></name>:<pos:position pos:line="57" pos:column="24"/></label>
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">strbuf_release<pos:position pos:line="58" pos:column="31"/></name><argument_list pos:line="58" pos:column="31">(<argument><expr><operator pos:line="58" pos:column="32">&amp;<pos:position pos:line="58" pos:column="37"/></operator><name pos:line="58" pos:column="33">first<pos:position pos:line="58" pos:column="38"/></name></expr></argument>)<pos:position pos:line="58" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">strbuf_release<pos:position pos:line="59" pos:column="31"/></name><argument_list pos:line="59" pos:column="31">(<argument><expr><operator pos:line="59" pos:column="32">&amp;<pos:position pos:line="59" pos:column="37"/></operator><name pos:line="59" pos:column="33">sp<pos:position pos:line="59" pos:column="35"/></name></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>
		<return pos:line="60" pos:column="17">return <expr><name pos:line="60" pos:column="24">NULL<pos:position pos:line="60" pos:column="28"/></name></expr>;<pos:position pos:line="60" pos:column="29"/></return>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="63" pos:column="9">/* unquoted first name */</comment>
	<expr_stmt><expr><name pos:line="64" pos:column="9">name<pos:position pos:line="64" pos:column="13"/></name> <operator pos:line="64" pos:column="14">=<pos:position pos:line="64" pos:column="15"/></operator> <call><name pos:line="64" pos:column="16">skip_tree_prefix<pos:position pos:line="64" pos:column="32"/></name><argument_list pos:line="64" pos:column="32">(<argument><expr><name pos:line="64" pos:column="33">state<pos:position pos:line="64" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="40">line<pos:position pos:line="64" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="46">llen<pos:position pos:line="64" pos:column="50"/></name></expr></argument>)<pos:position pos:line="64" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="52"/></expr_stmt>
	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><operator pos:line="65" pos:column="13">!<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="14">name<pos:position pos:line="65" pos:column="18"/></name></expr>)<pos:position pos:line="65" pos:column="19"/></condition><then pos:line="65" pos:column="19">
		<block type="pseudo"><return pos:line="66" pos:column="17">return <expr><name pos:line="66" pos:column="24">NULL<pos:position pos:line="66" pos:column="28"/></name></expr>;<pos:position pos:line="66" pos:column="29"/></return></block></then></if>

	<comment type="block" pos:line="68" pos:column="9">/*
	 * since the first name is unquoted, a dq if exists must be
	 * the beginning of the second name.
	 */</comment>
	<for pos:line="72" pos:column="9">for <control pos:line="72" pos:column="13">(<init><expr><name pos:line="72" pos:column="14">second<pos:position pos:line="72" pos:column="20"/></name> <operator pos:line="72" pos:column="21">=<pos:position pos:line="72" pos:column="22"/></operator> <name pos:line="72" pos:column="23">name<pos:position pos:line="72" pos:column="27"/></name></expr>;<pos:position pos:line="72" pos:column="28"/></init> <condition><expr><name pos:line="72" pos:column="29">second<pos:position pos:line="72" pos:column="35"/></name> <operator pos:line="72" pos:column="36">&lt;<pos:position pos:line="72" pos:column="40"/></operator> <name pos:line="72" pos:column="38">line<pos:position pos:line="72" pos:column="42"/></name> <operator pos:line="72" pos:column="43">+<pos:position pos:line="72" pos:column="44"/></operator> <name pos:line="72" pos:column="45">llen<pos:position pos:line="72" pos:column="49"/></name></expr>;<pos:position pos:line="72" pos:column="50"/></condition> <incr><expr><name pos:line="72" pos:column="51">second<pos:position pos:line="72" pos:column="57"/></name><operator pos:line="72" pos:column="57">++<pos:position pos:line="72" pos:column="59"/></operator></expr></incr>)<pos:position pos:line="72" pos:column="60"/></control> <block pos:line="72" pos:column="61">{
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><operator pos:line="73" pos:column="21">*<pos:position pos:line="73" pos:column="22"/></operator><name pos:line="73" pos:column="22">second<pos:position pos:line="73" pos:column="28"/></name> <operator pos:line="73" pos:column="29">==<pos:position pos:line="73" pos:column="31"/></operator> <literal type="char" pos:line="73" pos:column="32">'"'<pos:position pos:line="73" pos:column="35"/></literal></expr>)<pos:position pos:line="73" pos:column="36"/></condition><then pos:line="73" pos:column="36"> <block pos:line="73" pos:column="37">{
			<decl_stmt><decl><type><name><name pos:line="74" pos:column="25">struct<pos:position pos:line="74" pos:column="31"/></name> <name pos:line="74" pos:column="32">strbuf<pos:position pos:line="74" pos:column="38"/></name></name></type> <name pos:line="74" pos:column="39">sp<pos:position pos:line="74" pos:column="41"/></name> <init pos:line="74" pos:column="42">= <expr><name pos:line="74" pos:column="44">STRBUF_INIT<pos:position pos:line="74" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="74" pos:column="56"/></decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="75" pos:column="25">const<pos:position pos:line="75" pos:column="30"/></specifier> <name pos:line="75" pos:column="31">char<pos:position pos:line="75" pos:column="35"/></name> <modifier pos:line="75" pos:column="36">*<pos:position pos:line="75" pos:column="37"/></modifier></type><name pos:line="75" pos:column="37">np<pos:position pos:line="75" pos:column="39"/></name></decl>;<pos:position pos:line="75" pos:column="40"/></decl_stmt>

			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><call><name pos:line="77" pos:column="29">unquote_c_style<pos:position pos:line="77" pos:column="44"/></name><argument_list pos:line="77" pos:column="44">(<argument><expr><operator pos:line="77" pos:column="45">&amp;<pos:position pos:line="77" pos:column="50"/></operator><name pos:line="77" pos:column="46">sp<pos:position pos:line="77" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="50">second<pos:position pos:line="77" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="58">NULL<pos:position pos:line="77" pos:column="62"/></name></expr></argument>)<pos:position pos:line="77" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="64"/></condition><then pos:line="77" pos:column="64">
				<block type="pseudo"><goto pos:line="78" pos:column="33">goto <name pos:line="78" pos:column="38">free_and_fail2<pos:position pos:line="78" pos:column="52"/></name>;<pos:position pos:line="78" pos:column="53"/></goto></block></then></if>

			<expr_stmt><expr><name pos:line="80" pos:column="25">np<pos:position pos:line="80" pos:column="27"/></name> <operator pos:line="80" pos:column="28">=<pos:position pos:line="80" pos:column="29"/></operator> <call><name pos:line="80" pos:column="30">skip_tree_prefix<pos:position pos:line="80" pos:column="46"/></name><argument_list pos:line="80" pos:column="46">(<argument><expr><name pos:line="80" pos:column="47">state<pos:position pos:line="80" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="54">sp<pos:position pos:line="80" pos:column="56"/></name><operator pos:line="80" pos:column="56">.<pos:position pos:line="80" pos:column="57"/></operator><name pos:line="80" pos:column="57">buf<pos:position pos:line="80" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="62">sp<pos:position pos:line="80" pos:column="64"/></name><operator pos:line="80" pos:column="64">.<pos:position pos:line="80" pos:column="65"/></operator><name pos:line="80" pos:column="65">len<pos:position pos:line="80" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="70"/></expr_stmt>
			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><operator pos:line="81" pos:column="29">!<pos:position pos:line="81" pos:column="30"/></operator><name pos:line="81" pos:column="30">np<pos:position pos:line="81" pos:column="32"/></name></expr>)<pos:position pos:line="81" pos:column="33"/></condition><then pos:line="81" pos:column="33">
				<block type="pseudo"><goto pos:line="82" pos:column="33">goto <name pos:line="82" pos:column="38">free_and_fail2<pos:position pos:line="82" pos:column="52"/></name>;<pos:position pos:line="82" pos:column="53"/></goto></block></then></if>

			<expr_stmt><expr><name pos:line="84" pos:column="25">len<pos:position pos:line="84" pos:column="28"/></name> <operator pos:line="84" pos:column="29">=<pos:position pos:line="84" pos:column="30"/></operator> <name><name pos:line="84" pos:column="31">sp<pos:position pos:line="84" pos:column="33"/></name><operator pos:line="84" pos:column="33">.<pos:position pos:line="84" pos:column="34"/></operator><name pos:line="84" pos:column="34">buf<pos:position pos:line="84" pos:column="37"/></name></name> <operator pos:line="84" pos:column="38">+<pos:position pos:line="84" pos:column="39"/></operator> <name><name pos:line="84" pos:column="40">sp<pos:position pos:line="84" pos:column="42"/></name><operator pos:line="84" pos:column="42">.<pos:position pos:line="84" pos:column="43"/></operator><name pos:line="84" pos:column="43">len<pos:position pos:line="84" pos:column="46"/></name></name> <operator pos:line="84" pos:column="47">-<pos:position pos:line="84" pos:column="48"/></operator> <name pos:line="84" pos:column="49">np<pos:position pos:line="84" pos:column="51"/></name></expr>;<pos:position pos:line="84" pos:column="52"/></expr_stmt>
			<if pos:line="85" pos:column="25">if <condition pos:line="85" pos:column="28">(<expr><name pos:line="85" pos:column="29">len<pos:position pos:line="85" pos:column="32"/></name> <operator pos:line="85" pos:column="33">&lt;<pos:position pos:line="85" pos:column="37"/></operator> <name pos:line="85" pos:column="35">second<pos:position pos:line="85" pos:column="41"/></name> <operator pos:line="85" pos:column="42">-<pos:position pos:line="85" pos:column="43"/></operator> <name pos:line="85" pos:column="44">name<pos:position pos:line="85" pos:column="48"/></name> <operator pos:line="85" pos:column="49">&amp;&amp;<pos:position pos:line="85" pos:column="59"/></operator>
			    <operator pos:line="86" pos:column="29">!<pos:position pos:line="86" pos:column="30"/></operator><call><name pos:line="86" pos:column="30">strncmp<pos:position pos:line="86" pos:column="37"/></name><argument_list pos:line="86" pos:column="37">(<argument><expr><name pos:line="86" pos:column="38">np<pos:position pos:line="86" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="42">name<pos:position pos:line="86" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="48">len<pos:position pos:line="86" pos:column="51"/></name></expr></argument>)<pos:position pos:line="86" pos:column="52"/></argument_list></call> <operator pos:line="86" pos:column="53">&amp;&amp;<pos:position pos:line="86" pos:column="63"/></operator>
			    <call><name pos:line="87" pos:column="29">isspace<pos:position pos:line="87" pos:column="36"/></name><argument_list pos:line="87" pos:column="36">(<argument><expr><name><name pos:line="87" pos:column="37">name<pos:position pos:line="87" pos:column="41"/></name><index pos:line="87" pos:column="41">[<expr><name pos:line="87" pos:column="42">len<pos:position pos:line="87" pos:column="45"/></name></expr>]<pos:position pos:line="87" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="87" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="48"/></condition><then pos:line="87" pos:column="48"> <block pos:line="87" pos:column="49">{
				<comment type="block" pos:line="88" pos:column="33">/* Good */</comment>
				<expr_stmt><expr><call><name pos:line="89" pos:column="33">strbuf_remove<pos:position pos:line="89" pos:column="46"/></name><argument_list pos:line="89" pos:column="46">(<argument><expr><operator pos:line="89" pos:column="47">&amp;<pos:position pos:line="89" pos:column="52"/></operator><name pos:line="89" pos:column="48">sp<pos:position pos:line="89" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="89" pos:column="52">0<pos:position pos:line="89" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="55">np<pos:position pos:line="89" pos:column="57"/></name> <operator pos:line="89" pos:column="58">-<pos:position pos:line="89" pos:column="59"/></operator> <name><name pos:line="89" pos:column="60">sp<pos:position pos:line="89" pos:column="62"/></name><operator pos:line="89" pos:column="62">.<pos:position pos:line="89" pos:column="63"/></operator><name pos:line="89" pos:column="63">buf<pos:position pos:line="89" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="89" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="68"/></expr_stmt>
				<return pos:line="90" pos:column="33">return <expr><call><name pos:line="90" pos:column="40">strbuf_detach<pos:position pos:line="90" pos:column="53"/></name><argument_list pos:line="90" pos:column="53">(<argument><expr><operator pos:line="90" pos:column="54">&amp;<pos:position pos:line="90" pos:column="59"/></operator><name pos:line="90" pos:column="55">sp<pos:position pos:line="90" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="59">NULL<pos:position pos:line="90" pos:column="63"/></name></expr></argument>)<pos:position pos:line="90" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="65"/></return>
			}<pos:position pos:line="91" pos:column="26"/></block></then></if>

		<label><name pos:line="93" pos:column="17">free_and_fail2<pos:position pos:line="93" pos:column="31"/></name>:<pos:position pos:line="93" pos:column="32"/></label>
			<expr_stmt><expr><call><name pos:line="94" pos:column="25">strbuf_release<pos:position pos:line="94" pos:column="39"/></name><argument_list pos:line="94" pos:column="39">(<argument><expr><operator pos:line="94" pos:column="40">&amp;<pos:position pos:line="94" pos:column="45"/></operator><name pos:line="94" pos:column="41">sp<pos:position pos:line="94" pos:column="43"/></name></expr></argument>)<pos:position pos:line="94" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="45"/></expr_stmt>
			<return pos:line="95" pos:column="25">return <expr><name pos:line="95" pos:column="32">NULL<pos:position pos:line="95" pos:column="36"/></name></expr>;<pos:position pos:line="95" pos:column="37"/></return>
		}<pos:position pos:line="96" pos:column="18"/></block></then></if>
	}<pos:position pos:line="97" pos:column="10"/></block></for>

	<comment type="block" pos:line="99" pos:column="9">/*
	 * Accept a name only if it shows up twice, exactly the same
	 * form.
	 */</comment>
	<expr_stmt><expr><name pos:line="103" pos:column="9">second<pos:position pos:line="103" pos:column="15"/></name> <operator pos:line="103" pos:column="16">=<pos:position pos:line="103" pos:column="17"/></operator> <call><name pos:line="103" pos:column="18">strchr<pos:position pos:line="103" pos:column="24"/></name><argument_list pos:line="103" pos:column="24">(<argument><expr><name pos:line="103" pos:column="25">name<pos:position pos:line="103" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="103" pos:column="31">'\n'<pos:position pos:line="103" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="37"/></expr_stmt>
	<if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><operator pos:line="104" pos:column="13">!<pos:position pos:line="104" pos:column="14"/></operator><name pos:line="104" pos:column="14">second<pos:position pos:line="104" pos:column="20"/></name></expr>)<pos:position pos:line="104" pos:column="21"/></condition><then pos:line="104" pos:column="21">
		<block type="pseudo"><return pos:line="105" pos:column="17">return <expr><name pos:line="105" pos:column="24">NULL<pos:position pos:line="105" pos:column="28"/></name></expr>;<pos:position pos:line="105" pos:column="29"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="106" pos:column="9">line_len<pos:position pos:line="106" pos:column="17"/></name> <operator pos:line="106" pos:column="18">=<pos:position pos:line="106" pos:column="19"/></operator> <name pos:line="106" pos:column="20">second<pos:position pos:line="106" pos:column="26"/></name> <operator pos:line="106" pos:column="27">-<pos:position pos:line="106" pos:column="28"/></operator> <name pos:line="106" pos:column="29">name<pos:position pos:line="106" pos:column="33"/></name></expr>;<pos:position pos:line="106" pos:column="34"/></expr_stmt>
	<for pos:line="107" pos:column="9">for <control pos:line="107" pos:column="13">(<init><expr><name pos:line="107" pos:column="14">len<pos:position pos:line="107" pos:column="17"/></name> <operator pos:line="107" pos:column="18">=<pos:position pos:line="107" pos:column="19"/></operator> <literal type="number" pos:line="107" pos:column="20">0<pos:position pos:line="107" pos:column="21"/></literal></expr> ;<pos:position pos:line="107" pos:column="23"/></init> <condition pos:line="107" pos:column="24">;<pos:position pos:line="107" pos:column="25"/></condition> <incr><expr><name pos:line="107" pos:column="26">len<pos:position pos:line="107" pos:column="29"/></name><operator pos:line="107" pos:column="29">++<pos:position pos:line="107" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="107" pos:column="32"/></control> <block pos:line="107" pos:column="33">{
		<switch pos:line="108" pos:column="17">switch <condition pos:line="108" pos:column="24">(<expr><name><name pos:line="108" pos:column="25">name<pos:position pos:line="108" pos:column="29"/></name><index pos:line="108" pos:column="29">[<expr><name pos:line="108" pos:column="30">len<pos:position pos:line="108" pos:column="33"/></name></expr>]<pos:position pos:line="108" pos:column="34"/></index></name></expr>)<pos:position pos:line="108" pos:column="35"/></condition> <block pos:line="108" pos:column="36">{
		<default pos:line="109" pos:column="17">default:<pos:position pos:line="109" pos:column="25"/></default>
			<continue pos:line="110" pos:column="25">continue;<pos:position pos:line="110" pos:column="34"/></continue>
		<case pos:line="111" pos:column="17">case <expr><literal type="char" pos:line="111" pos:column="22">'\n'<pos:position pos:line="111" pos:column="26"/></literal></expr>:<pos:position pos:line="111" pos:column="27"/></case>
			<return pos:line="112" pos:column="25">return <expr><name pos:line="112" pos:column="32">NULL<pos:position pos:line="112" pos:column="36"/></name></expr>;<pos:position pos:line="112" pos:column="37"/></return>
		<case pos:line="113" pos:column="17">case <expr><literal type="char" pos:line="113" pos:column="22">'\t'<pos:position pos:line="113" pos:column="26"/></literal></expr>:<pos:position pos:line="113" pos:column="27"/></case> <case pos:line="113" pos:column="28">case <expr><literal type="char" pos:line="113" pos:column="33">' '<pos:position pos:line="113" pos:column="36"/></literal></expr>:<pos:position pos:line="113" pos:column="37"/></case>
			<comment type="block" pos:line="114" pos:column="25">/*
			 * Is this the separator between the preimage
			 * and the postimage pathname?  Again, we are
			 * only interested in the case where there is
			 * no rename, as this is only to set def_name
			 * and a rename patch has the names elsewhere
			 * in an unambiguous form.
			 */</comment>
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><operator pos:line="122" pos:column="29">!<pos:position pos:line="122" pos:column="30"/></operator><name><name pos:line="122" pos:column="30">name<pos:position pos:line="122" pos:column="34"/></name><index pos:line="122" pos:column="34">[<expr><name pos:line="122" pos:column="35">len<pos:position pos:line="122" pos:column="38"/></name> <operator pos:line="122" pos:column="39">+<pos:position pos:line="122" pos:column="40"/></operator> <literal type="number" pos:line="122" pos:column="41">1<pos:position pos:line="122" pos:column="42"/></literal></expr>]<pos:position pos:line="122" pos:column="43"/></index></name></expr>)<pos:position pos:line="122" pos:column="44"/></condition><then pos:line="122" pos:column="44">
				<block type="pseudo"><return pos:line="123" pos:column="33">return <expr><name pos:line="123" pos:column="40">NULL<pos:position pos:line="123" pos:column="44"/></name></expr>;<pos:position pos:line="123" pos:column="45"/></return></block></then></if> <comment type="block" pos:line="123" pos:column="46">/* no postimage name */</comment>
			<expr_stmt><expr><name pos:line="124" pos:column="25">second<pos:position pos:line="124" pos:column="31"/></name> <operator pos:line="124" pos:column="32">=<pos:position pos:line="124" pos:column="33"/></operator> <call><name pos:line="124" pos:column="34">skip_tree_prefix<pos:position pos:line="124" pos:column="50"/></name><argument_list pos:line="124" pos:column="50">(<argument><expr><name pos:line="124" pos:column="51">state<pos:position pos:line="124" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="58">name<pos:position pos:line="124" pos:column="62"/></name> <operator pos:line="124" pos:column="63">+<pos:position pos:line="124" pos:column="64"/></operator> <name pos:line="124" pos:column="65">len<pos:position pos:line="124" pos:column="68"/></name> <operator pos:line="124" pos:column="69">+<pos:position pos:line="124" pos:column="70"/></operator> <literal type="number" pos:line="124" pos:column="71">1<pos:position pos:line="124" pos:column="72"/></literal></expr></argument>,
						  <argument><expr><name pos:line="125" pos:column="51">line_len<pos:position pos:line="125" pos:column="59"/></name> <operator pos:line="125" pos:column="60">-<pos:position pos:line="125" pos:column="61"/></operator> <operator pos:line="125" pos:column="62">(<pos:position pos:line="125" pos:column="63"/></operator><name pos:line="125" pos:column="63">len<pos:position pos:line="125" pos:column="66"/></name> <operator pos:line="125" pos:column="67">+<pos:position pos:line="125" pos:column="68"/></operator> <literal type="number" pos:line="125" pos:column="69">1<pos:position pos:line="125" pos:column="70"/></literal><operator pos:line="125" pos:column="70">)<pos:position pos:line="125" pos:column="71"/></operator></expr></argument>)<pos:position pos:line="125" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="73"/></expr_stmt>
			<if pos:line="126" pos:column="25">if <condition pos:line="126" pos:column="28">(<expr><operator pos:line="126" pos:column="29">!<pos:position pos:line="126" pos:column="30"/></operator><name pos:line="126" pos:column="30">second<pos:position pos:line="126" pos:column="36"/></name></expr>)<pos:position pos:line="126" pos:column="37"/></condition><then pos:line="126" pos:column="37">
				<block type="pseudo"><return pos:line="127" pos:column="33">return <expr><name pos:line="127" pos:column="40">NULL<pos:position pos:line="127" pos:column="44"/></name></expr>;<pos:position pos:line="127" pos:column="45"/></return></block></then></if>
			<comment type="block" pos:line="128" pos:column="25">/*
			 * Does len bytes starting at "name" and "second"
			 * (that are separated by one HT or SP we just
			 * found) exactly match?
			 */</comment>
			<if pos:line="133" pos:column="25">if <condition pos:line="133" pos:column="28">(<expr><name><name pos:line="133" pos:column="29">second<pos:position pos:line="133" pos:column="35"/></name><index pos:line="133" pos:column="35">[<expr><name pos:line="133" pos:column="36">len<pos:position pos:line="133" pos:column="39"/></name></expr>]<pos:position pos:line="133" pos:column="40"/></index></name> <operator pos:line="133" pos:column="41">==<pos:position pos:line="133" pos:column="43"/></operator> <literal type="char" pos:line="133" pos:column="44">'\n'<pos:position pos:line="133" pos:column="48"/></literal> <operator pos:line="133" pos:column="49">&amp;&amp;<pos:position pos:line="133" pos:column="59"/></operator> <operator pos:line="133" pos:column="52">!<pos:position pos:line="133" pos:column="53"/></operator><call><name pos:line="133" pos:column="53">strncmp<pos:position pos:line="133" pos:column="60"/></name><argument_list pos:line="133" pos:column="60">(<argument><expr><name pos:line="133" pos:column="61">name<pos:position pos:line="133" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="67">second<pos:position pos:line="133" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="75">len<pos:position pos:line="133" pos:column="78"/></name></expr></argument>)<pos:position pos:line="133" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="80"/></condition><then pos:line="133" pos:column="80">
				<block type="pseudo"><return pos:line="134" pos:column="33">return <expr><call><name pos:line="134" pos:column="40">xmemdupz<pos:position pos:line="134" pos:column="48"/></name><argument_list pos:line="134" pos:column="48">(<argument><expr><name pos:line="134" pos:column="49">name<pos:position pos:line="134" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="55">len<pos:position pos:line="134" pos:column="58"/></name></expr></argument>)<pos:position pos:line="134" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="60"/></return></block></then></if>
		}<pos:position pos:line="135" pos:column="18"/></block></switch>
	}<pos:position pos:line="136" pos:column="10"/></block></for>
}<pos:position pos:line="137" pos:column="2"/></block></function></unit>
