<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6281_git-2.8.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">group_nodes_into_DFAstates<pos:position pos:line="3" pos:column="27"/></name> <parameter_list pos:line="3" pos:column="28">(<parameter><decl><type><specifier pos:line="3" pos:column="29">const<pos:position pos:line="3" pos:column="34"/></specifier> <name pos:line="3" pos:column="35">re_dfa_t<pos:position pos:line="3" pos:column="43"/></name> <modifier pos:line="3" pos:column="44">*<pos:position pos:line="3" pos:column="45"/></modifier></type><name pos:line="3" pos:column="45">dfa<pos:position pos:line="3" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="50">const<pos:position pos:line="3" pos:column="55"/></specifier> <name pos:line="3" pos:column="56">re_dfastate_t<pos:position pos:line="3" pos:column="69"/></name> <modifier pos:line="3" pos:column="70">*<pos:position pos:line="3" pos:column="71"/></modifier></type><name pos:line="3" pos:column="71">state<pos:position pos:line="3" pos:column="76"/></name></decl></parameter>,
			    <parameter><decl><type><name pos:line="4" pos:column="29">re_node_set<pos:position pos:line="4" pos:column="40"/></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier></type><name pos:line="4" pos:column="42">dests_node<pos:position pos:line="4" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="54">bitset_t<pos:position pos:line="4" pos:column="62"/></name> <modifier pos:line="4" pos:column="63">*<pos:position pos:line="4" pos:column="64"/></modifier></type><name pos:line="4" pos:column="64">dests_ch<pos:position pos:line="4" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="73"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">reg_errcode_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">err<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">result<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">i<pos:position pos:line="8" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="10">j<pos:position pos:line="8" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="13">k<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">ndests<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt> <comment type="block" pos:line="9" pos:column="15">/* Number of the destinations from `state'.  */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">bitset_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">accepts<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt> <comment type="block" pos:line="10" pos:column="21">/* Characters a node can accept.  */</comment>
  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">const<pos:position pos:line="11" pos:column="8"/></specifier> <name pos:line="11" pos:column="9">re_node_set<pos:position pos:line="11" pos:column="20"/></name> <modifier pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></modifier></type><name pos:line="11" pos:column="22">cur_nodes<pos:position pos:line="11" pos:column="31"/></name> <init pos:line="11" pos:column="32">= <expr><operator pos:line="11" pos:column="34">&amp;<pos:position pos:line="11" pos:column="39"/></operator><name><name pos:line="11" pos:column="35">state<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">-&gt;<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="42">nodes<pos:position pos:line="11" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="48"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">bitset_empty<pos:position pos:line="12" pos:column="15"/></name> <argument_list pos:line="12" pos:column="16">(<argument><expr><name pos:line="12" pos:column="17">accepts<pos:position pos:line="12" pos:column="24"/></name></expr></argument>)<pos:position pos:line="12" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="13" pos:column="3">ndests<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <literal type="number" pos:line="13" pos:column="12">0<pos:position pos:line="13" pos:column="13"/></literal></expr>;<pos:position pos:line="13" pos:column="14"/></expr_stmt>

  <comment type="block" pos:line="15" pos:column="3">/* For all the nodes belonging to `state',  */</comment>
  <for pos:line="16" pos:column="3">for <control pos:line="16" pos:column="7">(<init><expr><name pos:line="16" pos:column="8">i<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <literal type="number" pos:line="16" pos:column="12">0<pos:position pos:line="16" pos:column="13"/></literal></expr>;<pos:position pos:line="16" pos:column="14"/></init> <condition><expr><name pos:line="16" pos:column="15">i<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">&lt;<pos:position pos:line="16" pos:column="21"/></operator> <name><name pos:line="16" pos:column="19">cur_nodes<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">-&gt;<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="30">nelem<pos:position pos:line="16" pos:column="35"/></name></name></expr>;<pos:position pos:line="16" pos:column="36"/></condition> <incr><expr><operator pos:line="16" pos:column="37">++<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="39">i<pos:position pos:line="16" pos:column="40"/></name></expr></incr>)<pos:position pos:line="16" pos:column="41"/></control>
    <block pos:line="17" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="18" pos:column="7">re_token_t<pos:position pos:line="18" pos:column="17"/></name> <modifier pos:line="18" pos:column="18">*<pos:position pos:line="18" pos:column="19"/></modifier></type><name pos:line="18" pos:column="19">node<pos:position pos:line="18" pos:column="23"/></name> <init pos:line="18" pos:column="24">= <expr><operator pos:line="18" pos:column="26">&amp;<pos:position pos:line="18" pos:column="31"/></operator><name><name pos:line="18" pos:column="27">dfa<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">-&gt;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="32">nodes<pos:position pos:line="18" pos:column="37"/></name><index pos:line="18" pos:column="37">[<expr><name><name pos:line="18" pos:column="38">cur_nodes<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">-&gt;<pos:position pos:line="18" pos:column="52"/></operator><name pos:line="18" pos:column="49">elems<pos:position pos:line="18" pos:column="54"/></name><index pos:line="18" pos:column="54">[<expr><name pos:line="18" pos:column="55">i<pos:position pos:line="18" pos:column="56"/></name></expr>]<pos:position pos:line="18" pos:column="57"/></index></name></expr>]<pos:position pos:line="18" pos:column="58"/></index></name></expr></init></decl>;<pos:position pos:line="18" pos:column="59"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="19" pos:column="7">re_token_type_t<pos:position pos:line="19" pos:column="22"/></name></type> <name pos:line="19" pos:column="23">type<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><name><name pos:line="19" pos:column="30">node<pos:position pos:line="19" pos:column="34"/></name><operator pos:line="19" pos:column="34">-&gt;<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="36">type<pos:position pos:line="19" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="41"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="20" pos:column="7">unsigned<pos:position pos:line="20" pos:column="15"/></name> <name pos:line="20" pos:column="16">int<pos:position pos:line="20" pos:column="19"/></name></type> <name pos:line="20" pos:column="20">constraint<pos:position pos:line="20" pos:column="30"/></name> <init pos:line="20" pos:column="31">= <expr><name><name pos:line="20" pos:column="33">node<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">-&gt;<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="39">constraint<pos:position pos:line="20" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="20" pos:column="50"/></decl_stmt>

      <comment type="block" pos:line="22" pos:column="7">/* Enumerate all single byte character this node can accept.  */</comment>
      <if pos:line="23" pos:column="7">if <condition pos:line="23" pos:column="10">(<expr><name pos:line="23" pos:column="11">type<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">==<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">CHARACTER<pos:position pos:line="23" pos:column="28"/></name></expr>)<pos:position pos:line="23" pos:column="29"/></condition><then pos:line="23" pos:column="29">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="9">bitset_set<pos:position pos:line="24" pos:column="19"/></name> <argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">accepts<pos:position pos:line="24" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="30">node<pos:position pos:line="24" pos:column="34"/></name><operator pos:line="24" pos:column="34">-&gt;<pos:position pos:line="24" pos:column="39"/></operator><name pos:line="24" pos:column="36">opr<pos:position pos:line="24" pos:column="39"/></name><operator pos:line="24" pos:column="39">.<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="40">c<pos:position pos:line="24" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt></block></then>
      <elseif pos:line="25" pos:column="7">else <if pos:line="25" pos:column="12">if <condition pos:line="25" pos:column="15">(<expr><name pos:line="25" pos:column="16">type<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">==<pos:position pos:line="25" pos:column="23"/></operator> <name pos:line="25" pos:column="24">SIMPLE_BRACKET<pos:position pos:line="25" pos:column="38"/></name></expr>)<pos:position pos:line="25" pos:column="39"/></condition><then pos:line="25" pos:column="39">
	<block pos:line="26" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="27" pos:column="11">bitset_merge<pos:position pos:line="27" pos:column="23"/></name> <argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">accepts<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="34">node<pos:position pos:line="27" pos:column="38"/></name><operator pos:line="27" pos:column="38">-&gt;<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="40">opr<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">.<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="44">sbcset<pos:position pos:line="27" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="52"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if></elseif>
      <elseif pos:line="29" pos:column="7">else <if pos:line="29" pos:column="12">if <condition pos:line="29" pos:column="15">(<expr><name pos:line="29" pos:column="16">type<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">==<pos:position pos:line="29" pos:column="23"/></operator> <name pos:line="29" pos:column="24">OP_PERIOD<pos:position pos:line="29" pos:column="33"/></name></expr>)<pos:position pos:line="29" pos:column="34"/></condition><then pos:line="29" pos:column="34">
	<block pos:line="30" pos:column="9">{
<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef<pos:position pos:line="31" pos:column="7"/></cpp:directive> <name pos:line="31" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="31" pos:column="22"/></name></cpp:ifdef>
	  <if pos:line="32" pos:column="11">if <condition pos:line="32" pos:column="14">(<expr><name><name pos:line="32" pos:column="15">dfa<pos:position pos:line="32" pos:column="18"/></name><operator pos:line="32" pos:column="18">-&gt;<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="20">mb_cur_max<pos:position pos:line="32" pos:column="30"/></name></name> <operator pos:line="32" pos:column="31">&gt;<pos:position pos:line="32" pos:column="35"/></operator> <literal type="number" pos:line="32" pos:column="33">1<pos:position pos:line="32" pos:column="34"/></literal></expr>)<pos:position pos:line="32" pos:column="35"/></condition><then pos:line="32" pos:column="35">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="13">bitset_merge<pos:position pos:line="33" pos:column="25"/></name> <argument_list pos:line="33" pos:column="26">(<argument><expr><name pos:line="33" pos:column="27">accepts<pos:position pos:line="33" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="36">dfa<pos:position pos:line="33" pos:column="39"/></name><operator pos:line="33" pos:column="39">-&gt;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="41">sb_char<pos:position pos:line="33" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="50"/></expr_stmt></block></then>
	  <else pos:line="34" pos:column="11">else
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="13">bitset_set_all<pos:position pos:line="36" pos:column="27"/></name> <argument_list pos:line="36" pos:column="28">(<argument><expr><name pos:line="36" pos:column="29">accepts<pos:position pos:line="36" pos:column="36"/></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt></block></else></if>
	  <if pos:line="37" pos:column="11">if <condition pos:line="37" pos:column="14">(<expr><operator pos:line="37" pos:column="15">!<pos:position pos:line="37" pos:column="16"/></operator><operator pos:line="37" pos:column="16">(<pos:position pos:line="37" pos:column="17"/></operator><name><name pos:line="37" pos:column="17">dfa<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">-&gt;<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="22">syntax<pos:position pos:line="37" pos:column="28"/></name></name> <operator pos:line="37" pos:column="29">&amp;<pos:position pos:line="37" pos:column="34"/></operator> <name pos:line="37" pos:column="31">RE_DOT_NEWLINE<pos:position pos:line="37" pos:column="45"/></name><operator pos:line="37" pos:column="45">)<pos:position pos:line="37" pos:column="46"/></operator></expr>)<pos:position pos:line="37" pos:column="47"/></condition><then pos:line="37" pos:column="47">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="13">bitset_clear<pos:position pos:line="38" pos:column="25"/></name> <argument_list pos:line="38" pos:column="26">(<argument><expr><name pos:line="38" pos:column="27">accepts<pos:position pos:line="38" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="38" pos:column="36">'\n'<pos:position pos:line="38" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="42"/></expr_stmt></block></then></if>
	  <if pos:line="39" pos:column="11">if <condition pos:line="39" pos:column="14">(<expr><name><name pos:line="39" pos:column="15">dfa<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">-&gt;<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="20">syntax<pos:position pos:line="39" pos:column="26"/></name></name> <operator pos:line="39" pos:column="27">&amp;<pos:position pos:line="39" pos:column="32"/></operator> <name pos:line="39" pos:column="29">RE_DOT_NOT_NULL<pos:position pos:line="39" pos:column="44"/></name></expr>)<pos:position pos:line="39" pos:column="45"/></condition><then pos:line="39" pos:column="45">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="13">bitset_clear<pos:position pos:line="40" pos:column="25"/></name> <argument_list pos:line="40" pos:column="26">(<argument><expr><name pos:line="40" pos:column="27">accepts<pos:position pos:line="40" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="40" pos:column="36">'\0'<pos:position pos:line="40" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt></block></then></if>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if></elseif>
<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="42" pos:column="22"/></name></cpp:ifdef>
      <elseif pos:line="43" pos:column="7">else <if pos:line="43" pos:column="12">if <condition pos:line="43" pos:column="15">(<expr><name pos:line="43" pos:column="16">type<pos:position pos:line="43" pos:column="20"/></name> <operator pos:line="43" pos:column="21">==<pos:position pos:line="43" pos:column="23"/></operator> <name pos:line="43" pos:column="24">OP_UTF8_PERIOD<pos:position pos:line="43" pos:column="38"/></name></expr>)<pos:position pos:line="43" pos:column="39"/></condition><then pos:line="43" pos:column="39">
	<block pos:line="44" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="45" pos:column="11">memset<pos:position pos:line="45" pos:column="17"/></name> <argument_list pos:line="45" pos:column="18">(<argument><expr><name pos:line="45" pos:column="19">accepts<pos:position pos:line="45" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="45" pos:column="28">'\xff'<pos:position pos:line="45" pos:column="34"/></literal></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="36">sizeof <argument_list pos:line="45" pos:column="43">(<argument><expr><name pos:line="45" pos:column="44">bitset_t<pos:position pos:line="45" pos:column="52"/></name></expr></argument>)<pos:position pos:line="45" pos:column="53"/></argument_list></sizeof> <operator pos:line="45" pos:column="54">/<pos:position pos:line="45" pos:column="55"/></operator> <literal type="number" pos:line="45" pos:column="56">2<pos:position pos:line="45" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="59"/></expr_stmt>
	  <if pos:line="46" pos:column="11">if <condition pos:line="46" pos:column="14">(<expr><operator pos:line="46" pos:column="15">!<pos:position pos:line="46" pos:column="16"/></operator><operator pos:line="46" pos:column="16">(<pos:position pos:line="46" pos:column="17"/></operator><name><name pos:line="46" pos:column="17">dfa<pos:position pos:line="46" pos:column="20"/></name><operator pos:line="46" pos:column="20">-&gt;<pos:position pos:line="46" pos:column="25"/></operator><name pos:line="46" pos:column="22">syntax<pos:position pos:line="46" pos:column="28"/></name></name> <operator pos:line="46" pos:column="29">&amp;<pos:position pos:line="46" pos:column="34"/></operator> <name pos:line="46" pos:column="31">RE_DOT_NEWLINE<pos:position pos:line="46" pos:column="45"/></name><operator pos:line="46" pos:column="45">)<pos:position pos:line="46" pos:column="46"/></operator></expr>)<pos:position pos:line="46" pos:column="47"/></condition><then pos:line="46" pos:column="47">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="13">bitset_clear<pos:position pos:line="47" pos:column="25"/></name> <argument_list pos:line="47" pos:column="26">(<argument><expr><name pos:line="47" pos:column="27">accepts<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="47" pos:column="36">'\n'<pos:position pos:line="47" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="42"/></expr_stmt></block></then></if>
	  <if pos:line="48" pos:column="11">if <condition pos:line="48" pos:column="14">(<expr><name><name pos:line="48" pos:column="15">dfa<pos:position pos:line="48" pos:column="18"/></name><operator pos:line="48" pos:column="18">-&gt;<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="20">syntax<pos:position pos:line="48" pos:column="26"/></name></name> <operator pos:line="48" pos:column="27">&amp;<pos:position pos:line="48" pos:column="32"/></operator> <name pos:line="48" pos:column="29">RE_DOT_NOT_NULL<pos:position pos:line="48" pos:column="44"/></name></expr>)<pos:position pos:line="48" pos:column="45"/></condition><then pos:line="48" pos:column="45">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="13">bitset_clear<pos:position pos:line="49" pos:column="25"/></name> <argument_list pos:line="49" pos:column="26">(<argument><expr><name pos:line="49" pos:column="27">accepts<pos:position pos:line="49" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="49" pos:column="36">'\0'<pos:position pos:line="49" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt></block></then></if>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if></elseif>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>
      <else pos:line="52" pos:column="7">else
	<block type="pseudo"><continue pos:line="53" pos:column="9">continue;<pos:position pos:line="53" pos:column="18"/></continue></block></else></if>

      <comment type="block" pos:line="55" pos:column="7">/* Check the `accepts' and sift the characters which are not
	 match it the context.  */</comment>
      <if pos:line="57" pos:column="7">if <condition pos:line="57" pos:column="10">(<expr><name pos:line="57" pos:column="11">constraint<pos:position pos:line="57" pos:column="21"/></name></expr>)<pos:position pos:line="57" pos:column="22"/></condition><then pos:line="57" pos:column="22">
	<block pos:line="58" pos:column="9">{
	  <if pos:line="59" pos:column="11">if <condition pos:line="59" pos:column="14">(<expr><name pos:line="59" pos:column="15">constraint<pos:position pos:line="59" pos:column="25"/></name> <operator pos:line="59" pos:column="26">&amp;<pos:position pos:line="59" pos:column="31"/></operator> <name pos:line="59" pos:column="28">NEXT_NEWLINE_CONSTRAINT<pos:position pos:line="59" pos:column="51"/></name></expr>)<pos:position pos:line="59" pos:column="52"/></condition><then pos:line="59" pos:column="52">
	    <block pos:line="60" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="61" pos:column="15">bool<pos:position pos:line="61" pos:column="19"/></name></type> <name pos:line="61" pos:column="20">accepts_newline<pos:position pos:line="61" pos:column="35"/></name> <init pos:line="61" pos:column="36">= <expr><call><name pos:line="61" pos:column="38">bitset_contain<pos:position pos:line="61" pos:column="52"/></name> <argument_list pos:line="61" pos:column="53">(<argument><expr><name pos:line="61" pos:column="54">accepts<pos:position pos:line="61" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="63">NEWLINE_CHAR<pos:position pos:line="61" pos:column="75"/></name></expr></argument>)<pos:position pos:line="61" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="61" pos:column="77"/></decl_stmt>
	      <expr_stmt><expr><call><name pos:line="62" pos:column="15">bitset_empty<pos:position pos:line="62" pos:column="27"/></name> <argument_list pos:line="62" pos:column="28">(<argument><expr><name pos:line="62" pos:column="29">accepts<pos:position pos:line="62" pos:column="36"/></name></expr></argument>)<pos:position pos:line="62" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="38"/></expr_stmt>
	      <if pos:line="63" pos:column="15">if <condition pos:line="63" pos:column="18">(<expr><name pos:line="63" pos:column="19">accepts_newline<pos:position pos:line="63" pos:column="34"/></name></expr>)<pos:position pos:line="63" pos:column="35"/></condition><then pos:line="63" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="17">bitset_set<pos:position pos:line="64" pos:column="27"/></name> <argument_list pos:line="64" pos:column="28">(<argument><expr><name pos:line="64" pos:column="29">accepts<pos:position pos:line="64" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="38">NEWLINE_CHAR<pos:position pos:line="64" pos:column="50"/></name></expr></argument>)<pos:position pos:line="64" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="52"/></expr_stmt></block></then>
	      <else pos:line="65" pos:column="15">else
		<block type="pseudo"><continue pos:line="66" pos:column="17">continue;<pos:position pos:line="66" pos:column="26"/></continue></block></else></if>
	    }<pos:position pos:line="67" pos:column="14"/></block></then></if>
	  <if pos:line="68" pos:column="11">if <condition pos:line="68" pos:column="14">(<expr><name pos:line="68" pos:column="15">constraint<pos:position pos:line="68" pos:column="25"/></name> <operator pos:line="68" pos:column="26">&amp;<pos:position pos:line="68" pos:column="31"/></operator> <name pos:line="68" pos:column="28">NEXT_ENDBUF_CONSTRAINT<pos:position pos:line="68" pos:column="50"/></name></expr>)<pos:position pos:line="68" pos:column="51"/></condition><then pos:line="68" pos:column="51">
	    <block pos:line="69" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="70" pos:column="15">bitset_empty<pos:position pos:line="70" pos:column="27"/></name> <argument_list pos:line="70" pos:column="28">(<argument><expr><name pos:line="70" pos:column="29">accepts<pos:position pos:line="70" pos:column="36"/></name></expr></argument>)<pos:position pos:line="70" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="38"/></expr_stmt>
	      <continue pos:line="71" pos:column="15">continue;<pos:position pos:line="71" pos:column="24"/></continue>
	    }<pos:position pos:line="72" pos:column="14"/></block></then></if>

	  <if pos:line="74" pos:column="11">if <condition pos:line="74" pos:column="14">(<expr><name pos:line="74" pos:column="15">constraint<pos:position pos:line="74" pos:column="25"/></name> <operator pos:line="74" pos:column="26">&amp;<pos:position pos:line="74" pos:column="31"/></operator> <name pos:line="74" pos:column="28">NEXT_WORD_CONSTRAINT<pos:position pos:line="74" pos:column="48"/></name></expr>)<pos:position pos:line="74" pos:column="49"/></condition><then pos:line="74" pos:column="49">
	    <block pos:line="75" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="76" pos:column="15">bitset_word_t<pos:position pos:line="76" pos:column="28"/></name></type> <name pos:line="76" pos:column="29">any_set<pos:position pos:line="76" pos:column="36"/></name> <init pos:line="76" pos:column="37">= <expr><literal type="number" pos:line="76" pos:column="39">0<pos:position pos:line="76" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="76" pos:column="41"/></decl_stmt>
	      <if pos:line="77" pos:column="15">if <condition pos:line="77" pos:column="18">(<expr><name pos:line="77" pos:column="19">type<pos:position pos:line="77" pos:column="23"/></name> <operator pos:line="77" pos:column="24">==<pos:position pos:line="77" pos:column="26"/></operator> <name pos:line="77" pos:column="27">CHARACTER<pos:position pos:line="77" pos:column="36"/></name> <operator pos:line="77" pos:column="37">&amp;&amp;<pos:position pos:line="77" pos:column="47"/></operator> <operator pos:line="77" pos:column="40">!<pos:position pos:line="77" pos:column="41"/></operator><name><name pos:line="77" pos:column="41">node<pos:position pos:line="77" pos:column="45"/></name><operator pos:line="77" pos:column="45">-&gt;<pos:position pos:line="77" pos:column="50"/></operator><name pos:line="77" pos:column="47">word_char<pos:position pos:line="77" pos:column="56"/></name></name></expr>)<pos:position pos:line="77" pos:column="57"/></condition><then pos:line="77" pos:column="57">
		<block pos:line="78" pos:column="17">{
		  <expr_stmt><expr><call><name pos:line="79" pos:column="19">bitset_empty<pos:position pos:line="79" pos:column="31"/></name> <argument_list pos:line="79" pos:column="32">(<argument><expr><name pos:line="79" pos:column="33">accepts<pos:position pos:line="79" pos:column="40"/></name></expr></argument>)<pos:position pos:line="79" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="42"/></expr_stmt>
		  <continue pos:line="80" pos:column="19">continue;<pos:position pos:line="80" pos:column="28"/></continue>
		}<pos:position pos:line="81" pos:column="18"/></block></then></if>
<cpp:ifdef pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">ifdef<pos:position pos:line="82" pos:column="7"/></cpp:directive> <name pos:line="82" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="82" pos:column="22"/></name></cpp:ifdef>
	      <if pos:line="83" pos:column="15">if <condition pos:line="83" pos:column="18">(<expr><name><name pos:line="83" pos:column="19">dfa<pos:position pos:line="83" pos:column="22"/></name><operator pos:line="83" pos:column="22">-&gt;<pos:position pos:line="83" pos:column="27"/></operator><name pos:line="83" pos:column="24">mb_cur_max<pos:position pos:line="83" pos:column="34"/></name></name> <operator pos:line="83" pos:column="35">&gt;<pos:position pos:line="83" pos:column="39"/></operator> <literal type="number" pos:line="83" pos:column="37">1<pos:position pos:line="83" pos:column="38"/></literal></expr>)<pos:position pos:line="83" pos:column="39"/></condition><then pos:line="83" pos:column="39">
		<block type="pseudo"><for pos:line="84" pos:column="17">for <control pos:line="84" pos:column="21">(<init><expr><name pos:line="84" pos:column="22">j<pos:position pos:line="84" pos:column="23"/></name> <operator pos:line="84" pos:column="24">=<pos:position pos:line="84" pos:column="25"/></operator> <literal type="number" pos:line="84" pos:column="26">0<pos:position pos:line="84" pos:column="27"/></literal></expr>;<pos:position pos:line="84" pos:column="28"/></init> <condition><expr><name pos:line="84" pos:column="29">j<pos:position pos:line="84" pos:column="30"/></name> <operator pos:line="84" pos:column="31">&lt;<pos:position pos:line="84" pos:column="35"/></operator> <name pos:line="84" pos:column="33">BITSET_WORDS<pos:position pos:line="84" pos:column="45"/></name></expr>;<pos:position pos:line="84" pos:column="46"/></condition> <incr><expr><operator pos:line="84" pos:column="47">++<pos:position pos:line="84" pos:column="49"/></operator><name pos:line="84" pos:column="49">j<pos:position pos:line="84" pos:column="50"/></name></expr></incr>)<pos:position pos:line="84" pos:column="51"/></control>
		  <block type="pseudo"><expr_stmt><expr><name pos:line="85" pos:column="19">any_set<pos:position pos:line="85" pos:column="26"/></name> <operator pos:line="85" pos:column="27">|=<pos:position pos:line="85" pos:column="29"/></operator> <operator pos:line="85" pos:column="30">(<pos:position pos:line="85" pos:column="31"/></operator><name><name pos:line="85" pos:column="31">accepts<pos:position pos:line="85" pos:column="38"/></name><index pos:line="85" pos:column="38">[<expr><name pos:line="85" pos:column="39">j<pos:position pos:line="85" pos:column="40"/></name></expr>]<pos:position pos:line="85" pos:column="41"/></index></name> <operator pos:line="85" pos:column="42">&amp;=<pos:position pos:line="85" pos:column="48"/></operator> <operator pos:line="85" pos:column="45">(<pos:position pos:line="85" pos:column="46"/></operator><name><name pos:line="85" pos:column="46">dfa<pos:position pos:line="85" pos:column="49"/></name><operator pos:line="85" pos:column="49">-&gt;<pos:position pos:line="85" pos:column="54"/></operator><name pos:line="85" pos:column="51">word_char<pos:position pos:line="85" pos:column="60"/></name><index pos:line="85" pos:column="60">[<expr><name pos:line="85" pos:column="61">j<pos:position pos:line="85" pos:column="62"/></name></expr>]<pos:position pos:line="85" pos:column="63"/></index></name> <operator pos:line="85" pos:column="64">|<pos:position pos:line="85" pos:column="65"/></operator> <operator pos:line="85" pos:column="66">~<pos:position pos:line="85" pos:column="67"/></operator><name><name pos:line="85" pos:column="67">dfa<pos:position pos:line="85" pos:column="70"/></name><operator pos:line="85" pos:column="70">-&gt;<pos:position pos:line="85" pos:column="75"/></operator><name pos:line="85" pos:column="72">sb_char<pos:position pos:line="85" pos:column="79"/></name><index pos:line="85" pos:column="79">[<expr><name pos:line="85" pos:column="80">j<pos:position pos:line="85" pos:column="81"/></name></expr>]<pos:position pos:line="85" pos:column="82"/></index></name><operator pos:line="85" pos:column="82">)<pos:position pos:line="85" pos:column="83"/></operator><operator pos:line="85" pos:column="83">)<pos:position pos:line="85" pos:column="84"/></operator></expr>;<pos:position pos:line="85" pos:column="85"/></expr_stmt></block></for></block></then>
	      <else pos:line="86" pos:column="15">else
<cpp:endif pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">endif<pos:position pos:line="87" pos:column="7"/></cpp:directive></cpp:endif>
		<block type="pseudo"><for pos:line="88" pos:column="17">for <control pos:line="88" pos:column="21">(<init><expr><name pos:line="88" pos:column="22">j<pos:position pos:line="88" pos:column="23"/></name> <operator pos:line="88" pos:column="24">=<pos:position pos:line="88" pos:column="25"/></operator> <literal type="number" pos:line="88" pos:column="26">0<pos:position pos:line="88" pos:column="27"/></literal></expr>;<pos:position pos:line="88" pos:column="28"/></init> <condition><expr><name pos:line="88" pos:column="29">j<pos:position pos:line="88" pos:column="30"/></name> <operator pos:line="88" pos:column="31">&lt;<pos:position pos:line="88" pos:column="35"/></operator> <name pos:line="88" pos:column="33">BITSET_WORDS<pos:position pos:line="88" pos:column="45"/></name></expr>;<pos:position pos:line="88" pos:column="46"/></condition> <incr><expr><operator pos:line="88" pos:column="47">++<pos:position pos:line="88" pos:column="49"/></operator><name pos:line="88" pos:column="49">j<pos:position pos:line="88" pos:column="50"/></name></expr></incr>)<pos:position pos:line="88" pos:column="51"/></control>
		  <block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="19">any_set<pos:position pos:line="89" pos:column="26"/></name> <operator pos:line="89" pos:column="27">|=<pos:position pos:line="89" pos:column="29"/></operator> <operator pos:line="89" pos:column="30">(<pos:position pos:line="89" pos:column="31"/></operator><name><name pos:line="89" pos:column="31">accepts<pos:position pos:line="89" pos:column="38"/></name><index pos:line="89" pos:column="38">[<expr><name pos:line="89" pos:column="39">j<pos:position pos:line="89" pos:column="40"/></name></expr>]<pos:position pos:line="89" pos:column="41"/></index></name> <operator pos:line="89" pos:column="42">&amp;=<pos:position pos:line="89" pos:column="48"/></operator> <name><name pos:line="89" pos:column="45">dfa<pos:position pos:line="89" pos:column="48"/></name><operator pos:line="89" pos:column="48">-&gt;<pos:position pos:line="89" pos:column="53"/></operator><name pos:line="89" pos:column="50">word_char<pos:position pos:line="89" pos:column="59"/></name><index pos:line="89" pos:column="59">[<expr><name pos:line="89" pos:column="60">j<pos:position pos:line="89" pos:column="61"/></name></expr>]<pos:position pos:line="89" pos:column="62"/></index></name><operator pos:line="89" pos:column="62">)<pos:position pos:line="89" pos:column="63"/></operator></expr>;<pos:position pos:line="89" pos:column="64"/></expr_stmt></block></for></block></else></if>
	      <if pos:line="90" pos:column="15">if <condition pos:line="90" pos:column="18">(<expr><operator pos:line="90" pos:column="19">!<pos:position pos:line="90" pos:column="20"/></operator><name pos:line="90" pos:column="20">any_set<pos:position pos:line="90" pos:column="27"/></name></expr>)<pos:position pos:line="90" pos:column="28"/></condition><then pos:line="90" pos:column="28">
		<block type="pseudo"><continue pos:line="91" pos:column="17">continue;<pos:position pos:line="91" pos:column="26"/></continue></block></then></if>
	    }<pos:position pos:line="92" pos:column="14"/></block></then></if>
	  <if pos:line="93" pos:column="11">if <condition pos:line="93" pos:column="14">(<expr><name pos:line="93" pos:column="15">constraint<pos:position pos:line="93" pos:column="25"/></name> <operator pos:line="93" pos:column="26">&amp;<pos:position pos:line="93" pos:column="31"/></operator> <name pos:line="93" pos:column="28">NEXT_NOTWORD_CONSTRAINT<pos:position pos:line="93" pos:column="51"/></name></expr>)<pos:position pos:line="93" pos:column="52"/></condition><then pos:line="93" pos:column="52">
	    <block pos:line="94" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="95" pos:column="15">bitset_word_t<pos:position pos:line="95" pos:column="28"/></name></type> <name pos:line="95" pos:column="29">any_set<pos:position pos:line="95" pos:column="36"/></name> <init pos:line="95" pos:column="37">= <expr><literal type="number" pos:line="95" pos:column="39">0<pos:position pos:line="95" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="95" pos:column="41"/></decl_stmt>
	      <if pos:line="96" pos:column="15">if <condition pos:line="96" pos:column="18">(<expr><name pos:line="96" pos:column="19">type<pos:position pos:line="96" pos:column="23"/></name> <operator pos:line="96" pos:column="24">==<pos:position pos:line="96" pos:column="26"/></operator> <name pos:line="96" pos:column="27">CHARACTER<pos:position pos:line="96" pos:column="36"/></name> <operator pos:line="96" pos:column="37">&amp;&amp;<pos:position pos:line="96" pos:column="47"/></operator> <name><name pos:line="96" pos:column="40">node<pos:position pos:line="96" pos:column="44"/></name><operator pos:line="96" pos:column="44">-&gt;<pos:position pos:line="96" pos:column="49"/></operator><name pos:line="96" pos:column="46">word_char<pos:position pos:line="96" pos:column="55"/></name></name></expr>)<pos:position pos:line="96" pos:column="56"/></condition><then pos:line="96" pos:column="56">
		<block pos:line="97" pos:column="17">{
		  <expr_stmt><expr><call><name pos:line="98" pos:column="19">bitset_empty<pos:position pos:line="98" pos:column="31"/></name> <argument_list pos:line="98" pos:column="32">(<argument><expr><name pos:line="98" pos:column="33">accepts<pos:position pos:line="98" pos:column="40"/></name></expr></argument>)<pos:position pos:line="98" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="42"/></expr_stmt>
		  <continue pos:line="99" pos:column="19">continue;<pos:position pos:line="99" pos:column="28"/></continue>
		}<pos:position pos:line="100" pos:column="18"/></block></then></if>
<cpp:ifdef pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">ifdef<pos:position pos:line="101" pos:column="7"/></cpp:directive> <name pos:line="101" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="101" pos:column="22"/></name></cpp:ifdef>
	      <if pos:line="102" pos:column="15">if <condition pos:line="102" pos:column="18">(<expr><name><name pos:line="102" pos:column="19">dfa<pos:position pos:line="102" pos:column="22"/></name><operator pos:line="102" pos:column="22">-&gt;<pos:position pos:line="102" pos:column="27"/></operator><name pos:line="102" pos:column="24">mb_cur_max<pos:position pos:line="102" pos:column="34"/></name></name> <operator pos:line="102" pos:column="35">&gt;<pos:position pos:line="102" pos:column="39"/></operator> <literal type="number" pos:line="102" pos:column="37">1<pos:position pos:line="102" pos:column="38"/></literal></expr>)<pos:position pos:line="102" pos:column="39"/></condition><then pos:line="102" pos:column="39">
		<block type="pseudo"><for pos:line="103" pos:column="17">for <control pos:line="103" pos:column="21">(<init><expr><name pos:line="103" pos:column="22">j<pos:position pos:line="103" pos:column="23"/></name> <operator pos:line="103" pos:column="24">=<pos:position pos:line="103" pos:column="25"/></operator> <literal type="number" pos:line="103" pos:column="26">0<pos:position pos:line="103" pos:column="27"/></literal></expr>;<pos:position pos:line="103" pos:column="28"/></init> <condition><expr><name pos:line="103" pos:column="29">j<pos:position pos:line="103" pos:column="30"/></name> <operator pos:line="103" pos:column="31">&lt;<pos:position pos:line="103" pos:column="35"/></operator> <name pos:line="103" pos:column="33">BITSET_WORDS<pos:position pos:line="103" pos:column="45"/></name></expr>;<pos:position pos:line="103" pos:column="46"/></condition> <incr><expr><operator pos:line="103" pos:column="47">++<pos:position pos:line="103" pos:column="49"/></operator><name pos:line="103" pos:column="49">j<pos:position pos:line="103" pos:column="50"/></name></expr></incr>)<pos:position pos:line="103" pos:column="51"/></control>
		  <block type="pseudo"><expr_stmt><expr><name pos:line="104" pos:column="19">any_set<pos:position pos:line="104" pos:column="26"/></name> <operator pos:line="104" pos:column="27">|=<pos:position pos:line="104" pos:column="29"/></operator> <operator pos:line="104" pos:column="30">(<pos:position pos:line="104" pos:column="31"/></operator><name><name pos:line="104" pos:column="31">accepts<pos:position pos:line="104" pos:column="38"/></name><index pos:line="104" pos:column="38">[<expr><name pos:line="104" pos:column="39">j<pos:position pos:line="104" pos:column="40"/></name></expr>]<pos:position pos:line="104" pos:column="41"/></index></name> <operator pos:line="104" pos:column="42">&amp;=<pos:position pos:line="104" pos:column="48"/></operator> <operator pos:line="104" pos:column="45">~<pos:position pos:line="104" pos:column="46"/></operator><operator pos:line="104" pos:column="46">(<pos:position pos:line="104" pos:column="47"/></operator><name><name pos:line="104" pos:column="47">dfa<pos:position pos:line="104" pos:column="50"/></name><operator pos:line="104" pos:column="50">-&gt;<pos:position pos:line="104" pos:column="55"/></operator><name pos:line="104" pos:column="52">word_char<pos:position pos:line="104" pos:column="61"/></name><index pos:line="104" pos:column="61">[<expr><name pos:line="104" pos:column="62">j<pos:position pos:line="104" pos:column="63"/></name></expr>]<pos:position pos:line="104" pos:column="64"/></index></name> <operator pos:line="104" pos:column="65">&amp;<pos:position pos:line="104" pos:column="70"/></operator> <name><name pos:line="104" pos:column="67">dfa<pos:position pos:line="104" pos:column="70"/></name><operator pos:line="104" pos:column="70">-&gt;<pos:position pos:line="104" pos:column="75"/></operator><name pos:line="104" pos:column="72">sb_char<pos:position pos:line="104" pos:column="79"/></name><index pos:line="104" pos:column="79">[<expr><name pos:line="104" pos:column="80">j<pos:position pos:line="104" pos:column="81"/></name></expr>]<pos:position pos:line="104" pos:column="82"/></index></name><operator pos:line="104" pos:column="82">)<pos:position pos:line="104" pos:column="83"/></operator><operator pos:line="104" pos:column="83">)<pos:position pos:line="104" pos:column="84"/></operator></expr>;<pos:position pos:line="104" pos:column="85"/></expr_stmt></block></for></block></then>
	      <else pos:line="105" pos:column="15">else
<cpp:endif pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">endif<pos:position pos:line="106" pos:column="7"/></cpp:directive></cpp:endif>
		<block type="pseudo"><for pos:line="107" pos:column="17">for <control pos:line="107" pos:column="21">(<init><expr><name pos:line="107" pos:column="22">j<pos:position pos:line="107" pos:column="23"/></name> <operator pos:line="107" pos:column="24">=<pos:position pos:line="107" pos:column="25"/></operator> <literal type="number" pos:line="107" pos:column="26">0<pos:position pos:line="107" pos:column="27"/></literal></expr>;<pos:position pos:line="107" pos:column="28"/></init> <condition><expr><name pos:line="107" pos:column="29">j<pos:position pos:line="107" pos:column="30"/></name> <operator pos:line="107" pos:column="31">&lt;<pos:position pos:line="107" pos:column="35"/></operator> <name pos:line="107" pos:column="33">BITSET_WORDS<pos:position pos:line="107" pos:column="45"/></name></expr>;<pos:position pos:line="107" pos:column="46"/></condition> <incr><expr><operator pos:line="107" pos:column="47">++<pos:position pos:line="107" pos:column="49"/></operator><name pos:line="107" pos:column="49">j<pos:position pos:line="107" pos:column="50"/></name></expr></incr>)<pos:position pos:line="107" pos:column="51"/></control>
		  <block type="pseudo"><expr_stmt><expr><name pos:line="108" pos:column="19">any_set<pos:position pos:line="108" pos:column="26"/></name> <operator pos:line="108" pos:column="27">|=<pos:position pos:line="108" pos:column="29"/></operator> <operator pos:line="108" pos:column="30">(<pos:position pos:line="108" pos:column="31"/></operator><name><name pos:line="108" pos:column="31">accepts<pos:position pos:line="108" pos:column="38"/></name><index pos:line="108" pos:column="38">[<expr><name pos:line="108" pos:column="39">j<pos:position pos:line="108" pos:column="40"/></name></expr>]<pos:position pos:line="108" pos:column="41"/></index></name> <operator pos:line="108" pos:column="42">&amp;=<pos:position pos:line="108" pos:column="48"/></operator> <operator pos:line="108" pos:column="45">~<pos:position pos:line="108" pos:column="46"/></operator><name><name pos:line="108" pos:column="46">dfa<pos:position pos:line="108" pos:column="49"/></name><operator pos:line="108" pos:column="49">-&gt;<pos:position pos:line="108" pos:column="54"/></operator><name pos:line="108" pos:column="51">word_char<pos:position pos:line="108" pos:column="60"/></name><index pos:line="108" pos:column="60">[<expr><name pos:line="108" pos:column="61">j<pos:position pos:line="108" pos:column="62"/></name></expr>]<pos:position pos:line="108" pos:column="63"/></index></name><operator pos:line="108" pos:column="63">)<pos:position pos:line="108" pos:column="64"/></operator></expr>;<pos:position pos:line="108" pos:column="65"/></expr_stmt></block></for></block></else></if>
	      <if pos:line="109" pos:column="15">if <condition pos:line="109" pos:column="18">(<expr><operator pos:line="109" pos:column="19">!<pos:position pos:line="109" pos:column="20"/></operator><name pos:line="109" pos:column="20">any_set<pos:position pos:line="109" pos:column="27"/></name></expr>)<pos:position pos:line="109" pos:column="28"/></condition><then pos:line="109" pos:column="28">
		<block type="pseudo"><continue pos:line="110" pos:column="17">continue;<pos:position pos:line="110" pos:column="26"/></continue></block></then></if>
	    }<pos:position pos:line="111" pos:column="14"/></block></then></if>
	}<pos:position pos:line="112" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="114" pos:column="7">/* Then divide `accepts' into DFA states, or create a new
	 state.  Above, we make sure that accepts is not empty.  */</comment>
      <for pos:line="116" pos:column="7">for <control pos:line="116" pos:column="11">(<init><expr><name pos:line="116" pos:column="12">j<pos:position pos:line="116" pos:column="13"/></name> <operator pos:line="116" pos:column="14">=<pos:position pos:line="116" pos:column="15"/></operator> <literal type="number" pos:line="116" pos:column="16">0<pos:position pos:line="116" pos:column="17"/></literal></expr>;<pos:position pos:line="116" pos:column="18"/></init> <condition><expr><name pos:line="116" pos:column="19">j<pos:position pos:line="116" pos:column="20"/></name> <operator pos:line="116" pos:column="21">&lt;<pos:position pos:line="116" pos:column="25"/></operator> <name pos:line="116" pos:column="23">ndests<pos:position pos:line="116" pos:column="29"/></name></expr>;<pos:position pos:line="116" pos:column="30"/></condition> <incr><expr><operator pos:line="116" pos:column="31">++<pos:position pos:line="116" pos:column="33"/></operator><name pos:line="116" pos:column="33">j<pos:position pos:line="116" pos:column="34"/></name></expr></incr>)<pos:position pos:line="116" pos:column="35"/></control>
	<block pos:line="117" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="118" pos:column="11">bitset_t<pos:position pos:line="118" pos:column="19"/></name></type> <name pos:line="118" pos:column="20">intersec<pos:position pos:line="118" pos:column="28"/></name></decl>;<pos:position pos:line="118" pos:column="29"/></decl_stmt> <comment type="block" pos:line="118" pos:column="30">/* Intersection sets, see below.  */</comment>
	  <decl_stmt><decl><type><name pos:line="119" pos:column="11">bitset_t<pos:position pos:line="119" pos:column="19"/></name></type> <name pos:line="119" pos:column="20">remains<pos:position pos:line="119" pos:column="27"/></name></decl>;<pos:position pos:line="119" pos:column="28"/></decl_stmt>
	  <comment type="block" pos:line="120" pos:column="11">/* Flags, see below.  */</comment>
	  <decl_stmt><decl><type><name pos:line="121" pos:column="11">bitset_word_t<pos:position pos:line="121" pos:column="24"/></name></type> <name pos:line="121" pos:column="25">has_intersec<pos:position pos:line="121" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="121" pos:column="39">not_subset<pos:position pos:line="121" pos:column="49"/></name></decl>, <decl><type ref="prev"/><name pos:line="121" pos:column="51">not_consumed<pos:position pos:line="121" pos:column="63"/></name></decl>;<pos:position pos:line="121" pos:column="64"/></decl_stmt>

	  <comment type="block" pos:line="123" pos:column="11">/* Optimization, skip if this state doesn't accept the character.  */</comment>
	  <if pos:line="124" pos:column="11">if <condition pos:line="124" pos:column="14">(<expr><name pos:line="124" pos:column="15">type<pos:position pos:line="124" pos:column="19"/></name> <operator pos:line="124" pos:column="20">==<pos:position pos:line="124" pos:column="22"/></operator> <name pos:line="124" pos:column="23">CHARACTER<pos:position pos:line="124" pos:column="32"/></name> <operator pos:line="124" pos:column="33">&amp;&amp;<pos:position pos:line="124" pos:column="43"/></operator> <operator pos:line="124" pos:column="36">!<pos:position pos:line="124" pos:column="37"/></operator><call><name pos:line="124" pos:column="37">bitset_contain<pos:position pos:line="124" pos:column="51"/></name> <argument_list pos:line="124" pos:column="52">(<argument><expr><name><name pos:line="124" pos:column="53">dests_ch<pos:position pos:line="124" pos:column="61"/></name><index pos:line="124" pos:column="61">[<expr><name pos:line="124" pos:column="62">j<pos:position pos:line="124" pos:column="63"/></name></expr>]<pos:position pos:line="124" pos:column="64"/></index></name></expr></argument>, <argument><expr><name><name pos:line="124" pos:column="66">node<pos:position pos:line="124" pos:column="70"/></name><operator pos:line="124" pos:column="70">-&gt;<pos:position pos:line="124" pos:column="75"/></operator><name pos:line="124" pos:column="72">opr<pos:position pos:line="124" pos:column="75"/></name><operator pos:line="124" pos:column="75">.<pos:position pos:line="124" pos:column="76"/></operator><name pos:line="124" pos:column="76">c<pos:position pos:line="124" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="124" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="124" pos:column="79"/></condition><then pos:line="124" pos:column="79">
	    <block type="pseudo"><continue pos:line="125" pos:column="13">continue;<pos:position pos:line="125" pos:column="22"/></continue></block></then></if>

	  <comment type="block" pos:line="127" pos:column="11">/* Enumerate the intersection set of this state and `accepts'.  */</comment>
	  <expr_stmt><expr><name pos:line="128" pos:column="11">has_intersec<pos:position pos:line="128" pos:column="23"/></name> <operator pos:line="128" pos:column="24">=<pos:position pos:line="128" pos:column="25"/></operator> <literal type="number" pos:line="128" pos:column="26">0<pos:position pos:line="128" pos:column="27"/></literal></expr>;<pos:position pos:line="128" pos:column="28"/></expr_stmt>
	  <for pos:line="129" pos:column="11">for <control pos:line="129" pos:column="15">(<init><expr><name pos:line="129" pos:column="16">k<pos:position pos:line="129" pos:column="17"/></name> <operator pos:line="129" pos:column="18">=<pos:position pos:line="129" pos:column="19"/></operator> <literal type="number" pos:line="129" pos:column="20">0<pos:position pos:line="129" pos:column="21"/></literal></expr>;<pos:position pos:line="129" pos:column="22"/></init> <condition><expr><name pos:line="129" pos:column="23">k<pos:position pos:line="129" pos:column="24"/></name> <operator pos:line="129" pos:column="25">&lt;<pos:position pos:line="129" pos:column="29"/></operator> <name pos:line="129" pos:column="27">BITSET_WORDS<pos:position pos:line="129" pos:column="39"/></name></expr>;<pos:position pos:line="129" pos:column="40"/></condition> <incr><expr><operator pos:line="129" pos:column="41">++<pos:position pos:line="129" pos:column="43"/></operator><name pos:line="129" pos:column="43">k<pos:position pos:line="129" pos:column="44"/></name></expr></incr>)<pos:position pos:line="129" pos:column="45"/></control>
	    <block type="pseudo"><expr_stmt><expr><name pos:line="130" pos:column="13">has_intersec<pos:position pos:line="130" pos:column="25"/></name> <operator pos:line="130" pos:column="26">|=<pos:position pos:line="130" pos:column="28"/></operator> <name><name pos:line="130" pos:column="29">intersec<pos:position pos:line="130" pos:column="37"/></name><index pos:line="130" pos:column="37">[<expr><name pos:line="130" pos:column="38">k<pos:position pos:line="130" pos:column="39"/></name></expr>]<pos:position pos:line="130" pos:column="40"/></index></name> <operator pos:line="130" pos:column="41">=<pos:position pos:line="130" pos:column="42"/></operator> <name><name pos:line="130" pos:column="43">accepts<pos:position pos:line="130" pos:column="50"/></name><index pos:line="130" pos:column="50">[<expr><name pos:line="130" pos:column="51">k<pos:position pos:line="130" pos:column="52"/></name></expr>]<pos:position pos:line="130" pos:column="53"/></index></name> <operator pos:line="130" pos:column="54">&amp;<pos:position pos:line="130" pos:column="59"/></operator> <name><name pos:line="130" pos:column="56">dests_ch<pos:position pos:line="130" pos:column="64"/></name><index pos:line="130" pos:column="64">[<expr><name pos:line="130" pos:column="65">j<pos:position pos:line="130" pos:column="66"/></name></expr>]<pos:position pos:line="130" pos:column="67"/></index><index pos:line="130" pos:column="67">[<expr><name pos:line="130" pos:column="68">k<pos:position pos:line="130" pos:column="69"/></name></expr>]<pos:position pos:line="130" pos:column="70"/></index></name></expr>;<pos:position pos:line="130" pos:column="71"/></expr_stmt></block></for>
	  <comment type="block" pos:line="131" pos:column="11">/* And skip if the intersection set is empty.  */</comment>
	  <if pos:line="132" pos:column="11">if <condition pos:line="132" pos:column="14">(<expr><operator pos:line="132" pos:column="15">!<pos:position pos:line="132" pos:column="16"/></operator><name pos:line="132" pos:column="16">has_intersec<pos:position pos:line="132" pos:column="28"/></name></expr>)<pos:position pos:line="132" pos:column="29"/></condition><then pos:line="132" pos:column="29">
	    <block type="pseudo"><continue pos:line="133" pos:column="13">continue;<pos:position pos:line="133" pos:column="22"/></continue></block></then></if>

	  <comment type="block" pos:line="135" pos:column="11">/* Then check if this state is a subset of `accepts'.  */</comment>
	  <expr_stmt><expr><name pos:line="136" pos:column="11">not_subset<pos:position pos:line="136" pos:column="21"/></name> <operator pos:line="136" pos:column="22">=<pos:position pos:line="136" pos:column="23"/></operator> <name pos:line="136" pos:column="24">not_consumed<pos:position pos:line="136" pos:column="36"/></name> <operator pos:line="136" pos:column="37">=<pos:position pos:line="136" pos:column="38"/></operator> <literal type="number" pos:line="136" pos:column="39">0<pos:position pos:line="136" pos:column="40"/></literal></expr>;<pos:position pos:line="136" pos:column="41"/></expr_stmt>
	  <for pos:line="137" pos:column="11">for <control pos:line="137" pos:column="15">(<init><expr><name pos:line="137" pos:column="16">k<pos:position pos:line="137" pos:column="17"/></name> <operator pos:line="137" pos:column="18">=<pos:position pos:line="137" pos:column="19"/></operator> <literal type="number" pos:line="137" pos:column="20">0<pos:position pos:line="137" pos:column="21"/></literal></expr>;<pos:position pos:line="137" pos:column="22"/></init> <condition><expr><name pos:line="137" pos:column="23">k<pos:position pos:line="137" pos:column="24"/></name> <operator pos:line="137" pos:column="25">&lt;<pos:position pos:line="137" pos:column="29"/></operator> <name pos:line="137" pos:column="27">BITSET_WORDS<pos:position pos:line="137" pos:column="39"/></name></expr>;<pos:position pos:line="137" pos:column="40"/></condition> <incr><expr><operator pos:line="137" pos:column="41">++<pos:position pos:line="137" pos:column="43"/></operator><name pos:line="137" pos:column="43">k<pos:position pos:line="137" pos:column="44"/></name></expr></incr>)<pos:position pos:line="137" pos:column="45"/></control>
	    <block pos:line="138" pos:column="13">{
	      <expr_stmt><expr><name pos:line="139" pos:column="15">not_subset<pos:position pos:line="139" pos:column="25"/></name> <operator pos:line="139" pos:column="26">|=<pos:position pos:line="139" pos:column="28"/></operator> <name><name pos:line="139" pos:column="29">remains<pos:position pos:line="139" pos:column="36"/></name><index pos:line="139" pos:column="36">[<expr><name pos:line="139" pos:column="37">k<pos:position pos:line="139" pos:column="38"/></name></expr>]<pos:position pos:line="139" pos:column="39"/></index></name> <operator pos:line="139" pos:column="40">=<pos:position pos:line="139" pos:column="41"/></operator> <operator pos:line="139" pos:column="42">~<pos:position pos:line="139" pos:column="43"/></operator><name><name pos:line="139" pos:column="43">accepts<pos:position pos:line="139" pos:column="50"/></name><index pos:line="139" pos:column="50">[<expr><name pos:line="139" pos:column="51">k<pos:position pos:line="139" pos:column="52"/></name></expr>]<pos:position pos:line="139" pos:column="53"/></index></name> <operator pos:line="139" pos:column="54">&amp;<pos:position pos:line="139" pos:column="59"/></operator> <name><name pos:line="139" pos:column="56">dests_ch<pos:position pos:line="139" pos:column="64"/></name><index pos:line="139" pos:column="64">[<expr><name pos:line="139" pos:column="65">j<pos:position pos:line="139" pos:column="66"/></name></expr>]<pos:position pos:line="139" pos:column="67"/></index><index pos:line="139" pos:column="67">[<expr><name pos:line="139" pos:column="68">k<pos:position pos:line="139" pos:column="69"/></name></expr>]<pos:position pos:line="139" pos:column="70"/></index></name></expr>;<pos:position pos:line="139" pos:column="71"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="140" pos:column="15">not_consumed<pos:position pos:line="140" pos:column="27"/></name> <operator pos:line="140" pos:column="28">|=<pos:position pos:line="140" pos:column="30"/></operator> <name><name pos:line="140" pos:column="31">accepts<pos:position pos:line="140" pos:column="38"/></name><index pos:line="140" pos:column="38">[<expr><name pos:line="140" pos:column="39">k<pos:position pos:line="140" pos:column="40"/></name></expr>]<pos:position pos:line="140" pos:column="41"/></index></name> <operator pos:line="140" pos:column="42">=<pos:position pos:line="140" pos:column="43"/></operator> <name><name pos:line="140" pos:column="44">accepts<pos:position pos:line="140" pos:column="51"/></name><index pos:line="140" pos:column="51">[<expr><name pos:line="140" pos:column="52">k<pos:position pos:line="140" pos:column="53"/></name></expr>]<pos:position pos:line="140" pos:column="54"/></index></name> <operator pos:line="140" pos:column="55">&amp;<pos:position pos:line="140" pos:column="60"/></operator> <operator pos:line="140" pos:column="57">~<pos:position pos:line="140" pos:column="58"/></operator><name><name pos:line="140" pos:column="58">dests_ch<pos:position pos:line="140" pos:column="66"/></name><index pos:line="140" pos:column="66">[<expr><name pos:line="140" pos:column="67">j<pos:position pos:line="140" pos:column="68"/></name></expr>]<pos:position pos:line="140" pos:column="69"/></index><index pos:line="140" pos:column="69">[<expr><name pos:line="140" pos:column="70">k<pos:position pos:line="140" pos:column="71"/></name></expr>]<pos:position pos:line="140" pos:column="72"/></index></name></expr>;<pos:position pos:line="140" pos:column="73"/></expr_stmt>
	    }<pos:position pos:line="141" pos:column="14"/></block></for>

	  <comment type="block" pos:line="143" pos:column="11">/* If this state isn't a subset of `accepts', create a
	     new group state, which has the `remains'. */</comment>
	  <if pos:line="145" pos:column="11">if <condition pos:line="145" pos:column="14">(<expr><name pos:line="145" pos:column="15">not_subset<pos:position pos:line="145" pos:column="25"/></name></expr>)<pos:position pos:line="145" pos:column="26"/></condition><then pos:line="145" pos:column="26">
	    <block pos:line="146" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="147" pos:column="15">bitset_copy<pos:position pos:line="147" pos:column="26"/></name> <argument_list pos:line="147" pos:column="27">(<argument><expr><name><name pos:line="147" pos:column="28">dests_ch<pos:position pos:line="147" pos:column="36"/></name><index pos:line="147" pos:column="36">[<expr><name pos:line="147" pos:column="37">ndests<pos:position pos:line="147" pos:column="43"/></name></expr>]<pos:position pos:line="147" pos:column="44"/></index></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="46">remains<pos:position pos:line="147" pos:column="53"/></name></expr></argument>)<pos:position pos:line="147" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="55"/></expr_stmt>
	      <expr_stmt><expr><call><name pos:line="148" pos:column="15">bitset_copy<pos:position pos:line="148" pos:column="26"/></name> <argument_list pos:line="148" pos:column="27">(<argument><expr><name><name pos:line="148" pos:column="28">dests_ch<pos:position pos:line="148" pos:column="36"/></name><index pos:line="148" pos:column="36">[<expr><name pos:line="148" pos:column="37">j<pos:position pos:line="148" pos:column="38"/></name></expr>]<pos:position pos:line="148" pos:column="39"/></index></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="41">intersec<pos:position pos:line="148" pos:column="49"/></name></expr></argument>)<pos:position pos:line="148" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="51"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="149" pos:column="15">err<pos:position pos:line="149" pos:column="18"/></name> <operator pos:line="149" pos:column="19">=<pos:position pos:line="149" pos:column="20"/></operator> <call><name pos:line="149" pos:column="21">re_node_set_init_copy<pos:position pos:line="149" pos:column="42"/></name> <argument_list pos:line="149" pos:column="43">(<argument><expr><name pos:line="149" pos:column="44">dests_node<pos:position pos:line="149" pos:column="54"/></name> <operator pos:line="149" pos:column="55">+<pos:position pos:line="149" pos:column="56"/></operator> <name pos:line="149" pos:column="57">ndests<pos:position pos:line="149" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="149" pos:column="65">&amp;<pos:position pos:line="149" pos:column="70"/></operator><name><name pos:line="149" pos:column="66">dests_node<pos:position pos:line="149" pos:column="76"/></name><index pos:line="149" pos:column="76">[<expr><name pos:line="149" pos:column="77">j<pos:position pos:line="149" pos:column="78"/></name></expr>]<pos:position pos:line="149" pos:column="79"/></index></name></expr></argument>)<pos:position pos:line="149" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="81"/></expr_stmt>
	      <if pos:line="150" pos:column="15">if <condition pos:line="150" pos:column="18">(<expr><call><name pos:line="150" pos:column="19">BE<pos:position pos:line="150" pos:column="21"/></name> <argument_list pos:line="150" pos:column="22">(<argument><expr><name pos:line="150" pos:column="23">err<pos:position pos:line="150" pos:column="26"/></name> <operator pos:line="150" pos:column="27">!=<pos:position pos:line="150" pos:column="29"/></operator> <name pos:line="150" pos:column="30">REG_NOERROR<pos:position pos:line="150" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="150" pos:column="43">0<pos:position pos:line="150" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="150" pos:column="46"/></condition><then pos:line="150" pos:column="46">
		<block type="pseudo"><goto pos:line="151" pos:column="17">goto <name pos:line="151" pos:column="22">error_return<pos:position pos:line="151" pos:column="34"/></name>;<pos:position pos:line="151" pos:column="35"/></goto></block></then></if>
	      <expr_stmt><expr><operator pos:line="152" pos:column="15">++<pos:position pos:line="152" pos:column="17"/></operator><name pos:line="152" pos:column="17">ndests<pos:position pos:line="152" pos:column="23"/></name></expr>;<pos:position pos:line="152" pos:column="24"/></expr_stmt>
	    }<pos:position pos:line="153" pos:column="14"/></block></then></if>

	  <comment type="block" pos:line="155" pos:column="11">/* Put the position in the current group. */</comment>
	  <expr_stmt><expr><name pos:line="156" pos:column="11">result<pos:position pos:line="156" pos:column="17"/></name> <operator pos:line="156" pos:column="18">=<pos:position pos:line="156" pos:column="19"/></operator> <call><name pos:line="156" pos:column="20">re_node_set_insert<pos:position pos:line="156" pos:column="38"/></name> <argument_list pos:line="156" pos:column="39">(<argument><expr><operator pos:line="156" pos:column="40">&amp;<pos:position pos:line="156" pos:column="45"/></operator><name><name pos:line="156" pos:column="41">dests_node<pos:position pos:line="156" pos:column="51"/></name><index pos:line="156" pos:column="51">[<expr><name pos:line="156" pos:column="52">j<pos:position pos:line="156" pos:column="53"/></name></expr>]<pos:position pos:line="156" pos:column="54"/></index></name></expr></argument>, <argument><expr><name><name pos:line="156" pos:column="56">cur_nodes<pos:position pos:line="156" pos:column="65"/></name><operator pos:line="156" pos:column="65">-&gt;<pos:position pos:line="156" pos:column="70"/></operator><name pos:line="156" pos:column="67">elems<pos:position pos:line="156" pos:column="72"/></name><index pos:line="156" pos:column="72">[<expr><name pos:line="156" pos:column="73">i<pos:position pos:line="156" pos:column="74"/></name></expr>]<pos:position pos:line="156" pos:column="75"/></index></name></expr></argument>)<pos:position pos:line="156" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="77"/></expr_stmt>
	  <if pos:line="157" pos:column="11">if <condition pos:line="157" pos:column="14">(<expr><call><name pos:line="157" pos:column="15">BE<pos:position pos:line="157" pos:column="17"/></name> <argument_list pos:line="157" pos:column="18">(<argument><expr><name pos:line="157" pos:column="19">result<pos:position pos:line="157" pos:column="25"/></name> <operator pos:line="157" pos:column="26">&lt;<pos:position pos:line="157" pos:column="30"/></operator> <literal type="number" pos:line="157" pos:column="28">0<pos:position pos:line="157" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="157" pos:column="31">0<pos:position pos:line="157" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="157" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="157" pos:column="34"/></condition><then pos:line="157" pos:column="34">
	    <block type="pseudo"><goto pos:line="158" pos:column="13">goto <name pos:line="158" pos:column="18">error_return<pos:position pos:line="158" pos:column="30"/></name>;<pos:position pos:line="158" pos:column="31"/></goto></block></then></if>

	  <comment type="block" pos:line="160" pos:column="11">/* If all characters are consumed, go to next node. */</comment>
	  <if pos:line="161" pos:column="11">if <condition pos:line="161" pos:column="14">(<expr><operator pos:line="161" pos:column="15">!<pos:position pos:line="161" pos:column="16"/></operator><name pos:line="161" pos:column="16">not_consumed<pos:position pos:line="161" pos:column="28"/></name></expr>)<pos:position pos:line="161" pos:column="29"/></condition><then pos:line="161" pos:column="29">
	    <block type="pseudo"><break pos:line="162" pos:column="13">break;<pos:position pos:line="162" pos:column="19"/></break></block></then></if>
	}<pos:position pos:line="163" pos:column="10"/></block></for>
      <comment type="block" pos:line="164" pos:column="7">/* Some characters remain, create a new group. */</comment>
      <if pos:line="165" pos:column="7">if <condition pos:line="165" pos:column="10">(<expr><name pos:line="165" pos:column="11">j<pos:position pos:line="165" pos:column="12"/></name> <operator pos:line="165" pos:column="13">==<pos:position pos:line="165" pos:column="15"/></operator> <name pos:line="165" pos:column="16">ndests<pos:position pos:line="165" pos:column="22"/></name></expr>)<pos:position pos:line="165" pos:column="23"/></condition><then pos:line="165" pos:column="23">
	<block pos:line="166" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="167" pos:column="11">bitset_copy<pos:position pos:line="167" pos:column="22"/></name> <argument_list pos:line="167" pos:column="23">(<argument><expr><name><name pos:line="167" pos:column="24">dests_ch<pos:position pos:line="167" pos:column="32"/></name><index pos:line="167" pos:column="32">[<expr><name pos:line="167" pos:column="33">ndests<pos:position pos:line="167" pos:column="39"/></name></expr>]<pos:position pos:line="167" pos:column="40"/></index></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="42">accepts<pos:position pos:line="167" pos:column="49"/></name></expr></argument>)<pos:position pos:line="167" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="51"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="168" pos:column="11">err<pos:position pos:line="168" pos:column="14"/></name> <operator pos:line="168" pos:column="15">=<pos:position pos:line="168" pos:column="16"/></operator> <call><name pos:line="168" pos:column="17">re_node_set_init_1<pos:position pos:line="168" pos:column="35"/></name> <argument_list pos:line="168" pos:column="36">(<argument><expr><name pos:line="168" pos:column="37">dests_node<pos:position pos:line="168" pos:column="47"/></name> <operator pos:line="168" pos:column="48">+<pos:position pos:line="168" pos:column="49"/></operator> <name pos:line="168" pos:column="50">ndests<pos:position pos:line="168" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="168" pos:column="58">cur_nodes<pos:position pos:line="168" pos:column="67"/></name><operator pos:line="168" pos:column="67">-&gt;<pos:position pos:line="168" pos:column="72"/></operator><name pos:line="168" pos:column="69">elems<pos:position pos:line="168" pos:column="74"/></name><index pos:line="168" pos:column="74">[<expr><name pos:line="168" pos:column="75">i<pos:position pos:line="168" pos:column="76"/></name></expr>]<pos:position pos:line="168" pos:column="77"/></index></name></expr></argument>)<pos:position pos:line="168" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="79"/></expr_stmt>
	  <if pos:line="169" pos:column="11">if <condition pos:line="169" pos:column="14">(<expr><call><name pos:line="169" pos:column="15">BE<pos:position pos:line="169" pos:column="17"/></name> <argument_list pos:line="169" pos:column="18">(<argument><expr><name pos:line="169" pos:column="19">err<pos:position pos:line="169" pos:column="22"/></name> <operator pos:line="169" pos:column="23">!=<pos:position pos:line="169" pos:column="25"/></operator> <name pos:line="169" pos:column="26">REG_NOERROR<pos:position pos:line="169" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="169" pos:column="39">0<pos:position pos:line="169" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="169" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="169" pos:column="42"/></condition><then pos:line="169" pos:column="42">
	    <block type="pseudo"><goto pos:line="170" pos:column="13">goto <name pos:line="170" pos:column="18">error_return<pos:position pos:line="170" pos:column="30"/></name>;<pos:position pos:line="170" pos:column="31"/></goto></block></then></if>
	  <expr_stmt><expr><operator pos:line="171" pos:column="11">++<pos:position pos:line="171" pos:column="13"/></operator><name pos:line="171" pos:column="13">ndests<pos:position pos:line="171" pos:column="19"/></name></expr>;<pos:position pos:line="171" pos:column="20"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="172" pos:column="11">bitset_empty<pos:position pos:line="172" pos:column="23"/></name> <argument_list pos:line="172" pos:column="24">(<argument><expr><name pos:line="172" pos:column="25">accepts<pos:position pos:line="172" pos:column="32"/></name></expr></argument>)<pos:position pos:line="172" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="173" pos:column="10"/></block></then></if>
    }<pos:position pos:line="174" pos:column="6"/></block></for>
  <return pos:line="175" pos:column="3">return <expr><name pos:line="175" pos:column="10">ndests<pos:position pos:line="175" pos:column="16"/></name></expr>;<pos:position pos:line="175" pos:column="17"/></return>
 <label><name pos:line="176" pos:column="2">error_return<pos:position pos:line="176" pos:column="14"/></name>:<pos:position pos:line="176" pos:column="15"/></label>
  <for pos:line="177" pos:column="3">for <control pos:line="177" pos:column="7">(<init><expr><name pos:line="177" pos:column="8">j<pos:position pos:line="177" pos:column="9"/></name> <operator pos:line="177" pos:column="10">=<pos:position pos:line="177" pos:column="11"/></operator> <literal type="number" pos:line="177" pos:column="12">0<pos:position pos:line="177" pos:column="13"/></literal></expr>;<pos:position pos:line="177" pos:column="14"/></init> <condition><expr><name pos:line="177" pos:column="15">j<pos:position pos:line="177" pos:column="16"/></name> <operator pos:line="177" pos:column="17">&lt;<pos:position pos:line="177" pos:column="21"/></operator> <name pos:line="177" pos:column="19">ndests<pos:position pos:line="177" pos:column="25"/></name></expr>;<pos:position pos:line="177" pos:column="26"/></condition> <incr><expr><operator pos:line="177" pos:column="27">++<pos:position pos:line="177" pos:column="29"/></operator><name pos:line="177" pos:column="29">j<pos:position pos:line="177" pos:column="30"/></name></expr></incr>)<pos:position pos:line="177" pos:column="31"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="178" pos:column="5">re_node_set_free<pos:position pos:line="178" pos:column="21"/></name> <argument_list pos:line="178" pos:column="22">(<argument><expr><name pos:line="178" pos:column="23">dests_node<pos:position pos:line="178" pos:column="33"/></name> <operator pos:line="178" pos:column="34">+<pos:position pos:line="178" pos:column="35"/></operator> <name pos:line="178" pos:column="36">j<pos:position pos:line="178" pos:column="37"/></name></expr></argument>)<pos:position pos:line="178" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="39"/></expr_stmt></block></for>
  <return pos:line="179" pos:column="3">return <expr><operator pos:line="179" pos:column="10">-<pos:position pos:line="179" pos:column="11"/></operator><literal type="number" pos:line="179" pos:column="11">1<pos:position pos:line="179" pos:column="12"/></literal></expr>;<pos:position pos:line="179" pos:column="13"/></return>
}<pos:position pos:line="180" pos:column="2"/></block></function></unit>
