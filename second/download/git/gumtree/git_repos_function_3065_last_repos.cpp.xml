<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3065_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">arg_item<pos:position pos:line="1" pos:column="23"/></name></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">get_conf_item<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">name<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">list_head<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">pos<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">arg_item<pos:position pos:line="4" pos:column="24"/></name></name> <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">item<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* Look up item with same name */</comment>
	<macro><name pos:line="7" pos:column="9">list_for_each<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument pos:line="7" pos:column="23">pos<pos:position pos:line="7" pos:column="26"/></argument>, <argument pos:line="7" pos:column="28">&amp;conf_head<pos:position pos:line="7" pos:column="38"/></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></macro> <block pos:line="7" pos:column="40">{
		<expr_stmt><expr><name pos:line="8" pos:column="17">item<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">=<pos:position pos:line="8" pos:column="23"/></operator> <call><name pos:line="8" pos:column="24">list_entry<pos:position pos:line="8" pos:column="34"/></name><argument_list pos:line="8" pos:column="34">(<argument><expr><name pos:line="8" pos:column="35">pos<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr pos:line="8" pos:column="40">struct <name pos:line="8" pos:column="47">arg_item<pos:position pos:line="8" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="57">list<pos:position pos:line="8" pos:column="61"/></name></expr></argument>)<pos:position pos:line="8" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="63"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">!<pos:position pos:line="9" pos:column="22"/></operator><call><name pos:line="9" pos:column="22">strcasecmp<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><name><name pos:line="9" pos:column="33">item<pos:position pos:line="9" pos:column="37"/></name><operator pos:line="9" pos:column="37">-&gt;<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="39">conf<pos:position pos:line="9" pos:column="43"/></name><operator pos:line="9" pos:column="43">.<pos:position pos:line="9" pos:column="44"/></operator><name pos:line="9" pos:column="44">name<pos:position pos:line="9" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="50">name<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="56"/></condition><then pos:line="9" pos:column="56">
			<block type="pseudo"><return pos:line="10" pos:column="25">return <expr><name pos:line="10" pos:column="32">item<pos:position pos:line="10" pos:column="36"/></name></expr>;<pos:position pos:line="10" pos:column="37"/></return></block></then></if>
	}<pos:position pos:line="11" pos:column="10"/></block>

	<comment type="block" pos:line="13" pos:column="9">/* Item does not already exists, create it */</comment>
	<expr_stmt><expr><name pos:line="14" pos:column="9">item<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <call><name pos:line="14" pos:column="16">xcalloc<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><sizeof pos:line="14" pos:column="24">sizeof<argument_list pos:line="14" pos:column="30">(<argument><expr><operator pos:line="14" pos:column="31">*<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">item<pos:position pos:line="14" pos:column="36"/></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="39">1<pos:position pos:line="14" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">duplicate_conf<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><operator pos:line="15" pos:column="24">&amp;<pos:position pos:line="15" pos:column="29"/></operator><name><name pos:line="15" pos:column="25">item<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">conf<pos:position pos:line="15" pos:column="35"/></name></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="37">&amp;<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="38">default_conf_info<pos:position pos:line="15" pos:column="55"/></name></expr></argument>)<pos:position pos:line="15" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">item<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">conf<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">.<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">name<pos:position pos:line="16" pos:column="24"/></name></name> <operator pos:line="16" pos:column="25">=<pos:position pos:line="16" pos:column="26"/></operator> <call><name pos:line="16" pos:column="27">xstrdup<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">name<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">list_add_tail<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><operator pos:line="18" pos:column="23">&amp;<pos:position pos:line="18" pos:column="28"/></operator><name><name pos:line="18" pos:column="24">item<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">-&gt;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="30">list<pos:position pos:line="18" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="36">&amp;<pos:position pos:line="18" pos:column="41"/></operator><name pos:line="18" pos:column="37">conf_head<pos:position pos:line="18" pos:column="46"/></name></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>

	<return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">item<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
