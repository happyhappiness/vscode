<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_707_git-2.4.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">start_command<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name><name pos:line="1" pos:column="19">struct<pos:position pos:line="1" pos:column="25"/></name> <name pos:line="1" pos:column="26">child_process<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">cmd<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">need_in<pos:position pos:line="3" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="22">need_out<pos:position pos:line="3" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="32">need_err<pos:position pos:line="3" pos:column="40"/></name></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name><name pos:line="4" pos:column="13">fdin<pos:position pos:line="4" pos:column="17"/></name><index pos:line="4" pos:column="17">[<expr><literal type="number" pos:line="4" pos:column="18">2<pos:position pos:line="4" pos:column="19"/></literal></expr>]<pos:position pos:line="4" pos:column="20"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="4" pos:column="22">fdout<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">2<pos:position pos:line="4" pos:column="29"/></literal></expr>]<pos:position pos:line="4" pos:column="30"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="4" pos:column="32">fderr<pos:position pos:line="4" pos:column="37"/></name><index pos:line="4" pos:column="37">[<expr><literal type="number" pos:line="4" pos:column="38">2<pos:position pos:line="4" pos:column="39"/></literal></expr>]<pos:position pos:line="4" pos:column="40"/></index></name></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">failed_errno<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">str<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name><name pos:line="8" pos:column="14">cmd<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">-&gt;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="19">argv<pos:position pos:line="8" pos:column="23"/></name></name></expr>)<pos:position pos:line="8" pos:column="24"/></condition><then pos:line="8" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="9" pos:column="17">cmd<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">-&gt;<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="22">argv<pos:position pos:line="9" pos:column="26"/></name></name> <operator pos:line="9" pos:column="27">=<pos:position pos:line="9" pos:column="28"/></operator> <name><name pos:line="9" pos:column="29">cmd<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">-&gt;<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="34">args<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">.<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="39">argv<pos:position pos:line="9" pos:column="43"/></name></name></expr>;<pos:position pos:line="9" pos:column="44"/></expr_stmt></block></then></if>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name><name pos:line="10" pos:column="14">cmd<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">-&gt;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="19">env<pos:position pos:line="10" pos:column="22"/></name></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="11" pos:column="17">cmd<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">-&gt;<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="22">env<pos:position pos:line="11" pos:column="25"/></name></name> <operator pos:line="11" pos:column="26">=<pos:position pos:line="11" pos:column="27"/></operator> <name><name pos:line="11" pos:column="28">cmd<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">-&gt;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="33">env_array<pos:position pos:line="11" pos:column="42"/></name><operator pos:line="11" pos:column="42">.<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="43">argv<pos:position pos:line="11" pos:column="47"/></name></name></expr>;<pos:position pos:line="11" pos:column="48"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="13" pos:column="9">/*
	 * In case of errors we must keep the promise to close FDs
	 * that have been passed in via -&gt;in and -&gt;out.
	 */</comment>

	<expr_stmt><expr><name pos:line="18" pos:column="9">need_in<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <operator pos:line="18" pos:column="19">!<pos:position pos:line="18" pos:column="20"/></operator><name><name pos:line="18" pos:column="20">cmd<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">-&gt;<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="25">no_stdin<pos:position pos:line="18" pos:column="33"/></name></name> <operator pos:line="18" pos:column="34">&amp;&amp;<pos:position pos:line="18" pos:column="44"/></operator> <name><name pos:line="18" pos:column="37">cmd<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">-&gt;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="42">in<pos:position pos:line="18" pos:column="44"/></name></name> <operator pos:line="18" pos:column="45">&lt;<pos:position pos:line="18" pos:column="49"/></operator> <literal type="number" pos:line="18" pos:column="47">0<pos:position pos:line="18" pos:column="48"/></literal></expr>;<pos:position pos:line="18" pos:column="49"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">need_in<pos:position pos:line="19" pos:column="20"/></name></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21"> <block pos:line="19" pos:column="22">{
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name pos:line="20" pos:column="21">pipe<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name pos:line="20" pos:column="26">fdin<pos:position pos:line="20" pos:column="30"/></name></expr></argument>)<pos:position pos:line="20" pos:column="31"/></argument_list></call> <operator pos:line="20" pos:column="32">&lt;<pos:position pos:line="20" pos:column="36"/></operator> <literal type="number" pos:line="20" pos:column="34">0<pos:position pos:line="20" pos:column="35"/></literal></expr>)<pos:position pos:line="20" pos:column="36"/></condition><then pos:line="20" pos:column="36"> <block pos:line="20" pos:column="37">{
			<expr_stmt><expr><name pos:line="21" pos:column="25">failed_errno<pos:position pos:line="21" pos:column="37"/></name> <operator pos:line="21" pos:column="38">=<pos:position pos:line="21" pos:column="39"/></operator> <name pos:line="21" pos:column="40">errno<pos:position pos:line="21" pos:column="45"/></name></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name><name pos:line="22" pos:column="29">cmd<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">-&gt;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="34">out<pos:position pos:line="22" pos:column="37"/></name></name> <operator pos:line="22" pos:column="38">&gt;<pos:position pos:line="22" pos:column="42"/></operator> <literal type="number" pos:line="22" pos:column="40">0<pos:position pos:line="22" pos:column="41"/></literal></expr>)<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="33">close<pos:position pos:line="23" pos:column="38"/></name><argument_list pos:line="23" pos:column="38">(<argument><expr><name><name pos:line="23" pos:column="39">cmd<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">-&gt;<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="44">out<pos:position pos:line="23" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="24" pos:column="25">str<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <literal type="string" pos:line="24" pos:column="31">"standard input"<pos:position pos:line="24" pos:column="47"/></literal></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>
			<goto pos:line="25" pos:column="25">goto <name pos:line="25" pos:column="30">fail_pipe<pos:position pos:line="25" pos:column="39"/></name>;<pos:position pos:line="25" pos:column="40"/></goto>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="27" pos:column="17">cmd<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">-&gt;<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="22">in<pos:position pos:line="27" pos:column="24"/></name></name> <operator pos:line="27" pos:column="25">=<pos:position pos:line="27" pos:column="26"/></operator> <name><name pos:line="27" pos:column="27">fdin<pos:position pos:line="27" pos:column="31"/></name><index pos:line="27" pos:column="31">[<expr><literal type="number" pos:line="27" pos:column="32">1<pos:position pos:line="27" pos:column="33"/></literal></expr>]<pos:position pos:line="27" pos:column="34"/></index></name></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="30" pos:column="9">need_out<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <operator pos:line="30" pos:column="20">!<pos:position pos:line="30" pos:column="21"/></operator><name><name pos:line="30" pos:column="21">cmd<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">-&gt;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="26">no_stdout<pos:position pos:line="30" pos:column="35"/></name></name>
		<operator pos:line="31" pos:column="17">&amp;&amp;<pos:position pos:line="31" pos:column="27"/></operator> <operator pos:line="31" pos:column="20">!<pos:position pos:line="31" pos:column="21"/></operator><name><name pos:line="31" pos:column="21">cmd<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">-&gt;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="26">stdout_to_stderr<pos:position pos:line="31" pos:column="42"/></name></name>
		<operator pos:line="32" pos:column="17">&amp;&amp;<pos:position pos:line="32" pos:column="27"/></operator> <name><name pos:line="32" pos:column="20">cmd<pos:position pos:line="32" pos:column="23"/></name><operator pos:line="32" pos:column="23">-&gt;<pos:position pos:line="32" pos:column="28"/></operator><name pos:line="32" pos:column="25">out<pos:position pos:line="32" pos:column="28"/></name></name> <operator pos:line="32" pos:column="29">&lt;<pos:position pos:line="32" pos:column="33"/></operator> <literal type="number" pos:line="32" pos:column="31">0<pos:position pos:line="32" pos:column="32"/></literal></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">need_out<pos:position pos:line="33" pos:column="21"/></name></expr>)<pos:position pos:line="33" pos:column="22"/></condition><then pos:line="33" pos:column="22"> <block pos:line="33" pos:column="23">{
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">pipe<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><name pos:line="34" pos:column="26">fdout<pos:position pos:line="34" pos:column="31"/></name></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></call> <operator pos:line="34" pos:column="33">&lt;<pos:position pos:line="34" pos:column="37"/></operator> <literal type="number" pos:line="34" pos:column="35">0<pos:position pos:line="34" pos:column="36"/></literal></expr>)<pos:position pos:line="34" pos:column="37"/></condition><then pos:line="34" pos:column="37"> <block pos:line="34" pos:column="38">{
			<expr_stmt><expr><name pos:line="35" pos:column="25">failed_errno<pos:position pos:line="35" pos:column="37"/></name> <operator pos:line="35" pos:column="38">=<pos:position pos:line="35" pos:column="39"/></operator> <name pos:line="35" pos:column="40">errno<pos:position pos:line="35" pos:column="45"/></name></expr>;<pos:position pos:line="35" pos:column="46"/></expr_stmt>
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name pos:line="36" pos:column="29">need_in<pos:position pos:line="36" pos:column="36"/></name></expr>)<pos:position pos:line="36" pos:column="37"/></condition><then pos:line="36" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="33">close_pair<pos:position pos:line="37" pos:column="43"/></name><argument_list pos:line="37" pos:column="43">(<argument><expr><name pos:line="37" pos:column="44">fdin<pos:position pos:line="37" pos:column="48"/></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="50"/></expr_stmt></block></then>
			<elseif pos:line="38" pos:column="25">else <if pos:line="38" pos:column="30">if <condition pos:line="38" pos:column="33">(<expr><name><name pos:line="38" pos:column="34">cmd<pos:position pos:line="38" pos:column="37"/></name><operator pos:line="38" pos:column="37">-&gt;<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="39">in<pos:position pos:line="38" pos:column="41"/></name></name></expr>)<pos:position pos:line="38" pos:column="42"/></condition><then pos:line="38" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="33">close<pos:position pos:line="39" pos:column="38"/></name><argument_list pos:line="39" pos:column="38">(<argument><expr><name><name pos:line="39" pos:column="39">cmd<pos:position pos:line="39" pos:column="42"/></name><operator pos:line="39" pos:column="42">-&gt;<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="44">in<pos:position pos:line="39" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="48"/></expr_stmt></block></then></if></elseif></if>
			<expr_stmt><expr><name pos:line="40" pos:column="25">str<pos:position pos:line="40" pos:column="28"/></name> <operator pos:line="40" pos:column="29">=<pos:position pos:line="40" pos:column="30"/></operator> <literal type="string" pos:line="40" pos:column="31">"standard output"<pos:position pos:line="40" pos:column="48"/></literal></expr>;<pos:position pos:line="40" pos:column="49"/></expr_stmt>
			<goto pos:line="41" pos:column="25">goto <name pos:line="41" pos:column="30">fail_pipe<pos:position pos:line="41" pos:column="39"/></name>;<pos:position pos:line="41" pos:column="40"/></goto>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">cmd<pos:position pos:line="43" pos:column="20"/></name><operator pos:line="43" pos:column="20">-&gt;<pos:position pos:line="43" pos:column="25"/></operator><name pos:line="43" pos:column="22">out<pos:position pos:line="43" pos:column="25"/></name></name> <operator pos:line="43" pos:column="26">=<pos:position pos:line="43" pos:column="27"/></operator> <name><name pos:line="43" pos:column="28">fdout<pos:position pos:line="43" pos:column="33"/></name><index pos:line="43" pos:column="33">[<expr><literal type="number" pos:line="43" pos:column="34">0<pos:position pos:line="43" pos:column="35"/></literal></expr>]<pos:position pos:line="43" pos:column="36"/></index></name></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="46" pos:column="9">need_err<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <operator pos:line="46" pos:column="20">!<pos:position pos:line="46" pos:column="21"/></operator><name><name pos:line="46" pos:column="21">cmd<pos:position pos:line="46" pos:column="24"/></name><operator pos:line="46" pos:column="24">-&gt;<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="26">no_stderr<pos:position pos:line="46" pos:column="35"/></name></name> <operator pos:line="46" pos:column="36">&amp;&amp;<pos:position pos:line="46" pos:column="46"/></operator> <name><name pos:line="46" pos:column="39">cmd<pos:position pos:line="46" pos:column="42"/></name><operator pos:line="46" pos:column="42">-&gt;<pos:position pos:line="46" pos:column="47"/></operator><name pos:line="46" pos:column="44">err<pos:position pos:line="46" pos:column="47"/></name></name> <operator pos:line="46" pos:column="48">&lt;<pos:position pos:line="46" pos:column="52"/></operator> <literal type="number" pos:line="46" pos:column="50">0<pos:position pos:line="46" pos:column="51"/></literal></expr>;<pos:position pos:line="46" pos:column="52"/></expr_stmt>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">need_err<pos:position pos:line="47" pos:column="21"/></name></expr>)<pos:position pos:line="47" pos:column="22"/></condition><then pos:line="47" pos:column="22"> <block pos:line="47" pos:column="23">{
		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><call><name pos:line="48" pos:column="21">pipe<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">fderr<pos:position pos:line="48" pos:column="31"/></name></expr></argument>)<pos:position pos:line="48" pos:column="32"/></argument_list></call> <operator pos:line="48" pos:column="33">&lt;<pos:position pos:line="48" pos:column="37"/></operator> <literal type="number" pos:line="48" pos:column="35">0<pos:position pos:line="48" pos:column="36"/></literal></expr>)<pos:position pos:line="48" pos:column="37"/></condition><then pos:line="48" pos:column="37"> <block pos:line="48" pos:column="38">{
			<expr_stmt><expr><name pos:line="49" pos:column="25">failed_errno<pos:position pos:line="49" pos:column="37"/></name> <operator pos:line="49" pos:column="38">=<pos:position pos:line="49" pos:column="39"/></operator> <name pos:line="49" pos:column="40">errno<pos:position pos:line="49" pos:column="45"/></name></expr>;<pos:position pos:line="49" pos:column="46"/></expr_stmt>
			<if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<expr><name pos:line="50" pos:column="29">need_in<pos:position pos:line="50" pos:column="36"/></name></expr>)<pos:position pos:line="50" pos:column="37"/></condition><then pos:line="50" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="33">close_pair<pos:position pos:line="51" pos:column="43"/></name><argument_list pos:line="51" pos:column="43">(<argument><expr><name pos:line="51" pos:column="44">fdin<pos:position pos:line="51" pos:column="48"/></name></expr></argument>)<pos:position pos:line="51" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="50"/></expr_stmt></block></then>
			<elseif pos:line="52" pos:column="25">else <if pos:line="52" pos:column="30">if <condition pos:line="52" pos:column="33">(<expr><name><name pos:line="52" pos:column="34">cmd<pos:position pos:line="52" pos:column="37"/></name><operator pos:line="52" pos:column="37">-&gt;<pos:position pos:line="52" pos:column="42"/></operator><name pos:line="52" pos:column="39">in<pos:position pos:line="52" pos:column="41"/></name></name></expr>)<pos:position pos:line="52" pos:column="42"/></condition><then pos:line="52" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="33">close<pos:position pos:line="53" pos:column="38"/></name><argument_list pos:line="53" pos:column="38">(<argument><expr><name><name pos:line="53" pos:column="39">cmd<pos:position pos:line="53" pos:column="42"/></name><operator pos:line="53" pos:column="42">-&gt;<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="44">in<pos:position pos:line="53" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="48"/></expr_stmt></block></then></if></elseif></if>
			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><name pos:line="54" pos:column="29">need_out<pos:position pos:line="54" pos:column="37"/></name></expr>)<pos:position pos:line="54" pos:column="38"/></condition><then pos:line="54" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="33">close_pair<pos:position pos:line="55" pos:column="43"/></name><argument_list pos:line="55" pos:column="43">(<argument><expr><name pos:line="55" pos:column="44">fdout<pos:position pos:line="55" pos:column="49"/></name></expr></argument>)<pos:position pos:line="55" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="51"/></expr_stmt></block></then>
			<elseif pos:line="56" pos:column="25">else <if pos:line="56" pos:column="30">if <condition pos:line="56" pos:column="33">(<expr><name><name pos:line="56" pos:column="34">cmd<pos:position pos:line="56" pos:column="37"/></name><operator pos:line="56" pos:column="37">-&gt;<pos:position pos:line="56" pos:column="42"/></operator><name pos:line="56" pos:column="39">out<pos:position pos:line="56" pos:column="42"/></name></name></expr>)<pos:position pos:line="56" pos:column="43"/></condition><then pos:line="56" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="33">close<pos:position pos:line="57" pos:column="38"/></name><argument_list pos:line="57" pos:column="38">(<argument><expr><name><name pos:line="57" pos:column="39">cmd<pos:position pos:line="57" pos:column="42"/></name><operator pos:line="57" pos:column="42">-&gt;<pos:position pos:line="57" pos:column="47"/></operator><name pos:line="57" pos:column="44">out<pos:position pos:line="57" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="49"/></expr_stmt></block></then></if></elseif></if>
			<expr_stmt><expr><name pos:line="58" pos:column="25">str<pos:position pos:line="58" pos:column="28"/></name> <operator pos:line="58" pos:column="29">=<pos:position pos:line="58" pos:column="30"/></operator> <literal type="string" pos:line="58" pos:column="31">"standard error"<pos:position pos:line="58" pos:column="47"/></literal></expr>;<pos:position pos:line="58" pos:column="48"/></expr_stmt>
<label><name pos:line="59" pos:column="1">fail_pipe<pos:position pos:line="59" pos:column="10"/></name>:<pos:position pos:line="59" pos:column="11"/></label>
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">error<pos:position pos:line="60" pos:column="30"/></name><argument_list pos:line="60" pos:column="30">(<argument><expr><literal type="string" pos:line="60" pos:column="31">"cannot create %s pipe for %s: %s"<pos:position pos:line="60" pos:column="65"/></literal></expr></argument>,
				<argument><expr><name pos:line="61" pos:column="33">str<pos:position pos:line="61" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="38">cmd<pos:position pos:line="61" pos:column="41"/></name><operator pos:line="61" pos:column="41">-&gt;<pos:position pos:line="61" pos:column="46"/></operator><name pos:line="61" pos:column="43">argv<pos:position pos:line="61" pos:column="47"/></name><index pos:line="61" pos:column="47">[<expr><literal type="number" pos:line="61" pos:column="48">0<pos:position pos:line="61" pos:column="49"/></literal></expr>]<pos:position pos:line="61" pos:column="50"/></index></name></expr></argument>, <argument><expr><call><name pos:line="61" pos:column="52">strerror<pos:position pos:line="61" pos:column="60"/></name><argument_list pos:line="61" pos:column="60">(<argument><expr><name pos:line="61" pos:column="61">failed_errno<pos:position pos:line="61" pos:column="73"/></name></expr></argument>)<pos:position pos:line="61" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">argv_array_clear<pos:position pos:line="62" pos:column="41"/></name><argument_list pos:line="62" pos:column="41">(<argument><expr><operator pos:line="62" pos:column="42">&amp;<pos:position pos:line="62" pos:column="47"/></operator><name><name pos:line="62" pos:column="43">cmd<pos:position pos:line="62" pos:column="46"/></name><operator pos:line="62" pos:column="46">-&gt;<pos:position pos:line="62" pos:column="51"/></operator><name pos:line="62" pos:column="48">args<pos:position pos:line="62" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">argv_array_clear<pos:position pos:line="63" pos:column="41"/></name><argument_list pos:line="63" pos:column="41">(<argument><expr><operator pos:line="63" pos:column="42">&amp;<pos:position pos:line="63" pos:column="47"/></operator><name><name pos:line="63" pos:column="43">cmd<pos:position pos:line="63" pos:column="46"/></name><operator pos:line="63" pos:column="46">-&gt;<pos:position pos:line="63" pos:column="51"/></operator><name pos:line="63" pos:column="48">env_array<pos:position pos:line="63" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><name pos:line="64" pos:column="25">errno<pos:position pos:line="64" pos:column="30"/></name> <operator pos:line="64" pos:column="31">=<pos:position pos:line="64" pos:column="32"/></operator> <name pos:line="64" pos:column="33">failed_errno<pos:position pos:line="64" pos:column="45"/></name></expr>;<pos:position pos:line="64" pos:column="46"/></expr_stmt>
			<return pos:line="65" pos:column="25">return <expr><operator pos:line="65" pos:column="32">-<pos:position pos:line="65" pos:column="33"/></operator><literal type="number" pos:line="65" pos:column="33">1<pos:position pos:line="65" pos:column="34"/></literal></expr>;<pos:position pos:line="65" pos:column="35"/></return>
		}<pos:position pos:line="66" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="67" pos:column="17">cmd<pos:position pos:line="67" pos:column="20"/></name><operator pos:line="67" pos:column="20">-&gt;<pos:position pos:line="67" pos:column="25"/></operator><name pos:line="67" pos:column="22">err<pos:position pos:line="67" pos:column="25"/></name></name> <operator pos:line="67" pos:column="26">=<pos:position pos:line="67" pos:column="27"/></operator> <name><name pos:line="67" pos:column="28">fderr<pos:position pos:line="67" pos:column="33"/></name><index pos:line="67" pos:column="33">[<expr><literal type="number" pos:line="67" pos:column="34">0<pos:position pos:line="67" pos:column="35"/></literal></expr>]<pos:position pos:line="67" pos:column="36"/></index></name></expr>;<pos:position pos:line="67" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="68" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="70" pos:column="9">trace_argv_printf<pos:position pos:line="70" pos:column="26"/></name><argument_list pos:line="70" pos:column="26">(<argument><expr><name><name pos:line="70" pos:column="27">cmd<pos:position pos:line="70" pos:column="30"/></name><operator pos:line="70" pos:column="30">-&gt;<pos:position pos:line="70" pos:column="35"/></operator><name pos:line="70" pos:column="32">argv<pos:position pos:line="70" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="38">"trace: run_command:"<pos:position pos:line="70" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">fflush<pos:position pos:line="71" pos:column="15"/></name><argument_list pos:line="71" pos:column="15">(<argument><expr><name pos:line="71" pos:column="16">NULL<pos:position pos:line="71" pos:column="20"/></name></expr></argument>)<pos:position pos:line="71" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="22"/></expr_stmt>

<cpp:ifndef pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">ifndef<pos:position pos:line="73" pos:column="8"/></cpp:directive> <name pos:line="73" pos:column="9">GIT_WINDOWS_NATIVE<pos:position pos:line="73" pos:column="27"/></name></cpp:ifndef>
<block pos:line="74" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">int<pos:position pos:line="75" pos:column="12"/></name></type> <name><name pos:line="75" pos:column="13">notify_pipe<pos:position pos:line="75" pos:column="24"/></name><index pos:line="75" pos:column="24">[<expr><literal type="number" pos:line="75" pos:column="25">2<pos:position pos:line="75" pos:column="26"/></literal></expr>]<pos:position pos:line="75" pos:column="27"/></index></name></decl>;<pos:position pos:line="75" pos:column="28"/></decl_stmt>
	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><call><name pos:line="76" pos:column="13">pipe<pos:position pos:line="76" pos:column="17"/></name><argument_list pos:line="76" pos:column="17">(<argument><expr><name pos:line="76" pos:column="18">notify_pipe<pos:position pos:line="76" pos:column="29"/></name></expr></argument>)<pos:position pos:line="76" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="31"/></condition><then pos:line="76" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="77" pos:column="17">notify_pipe<pos:position pos:line="77" pos:column="28"/></name><index pos:line="77" pos:column="28">[<expr><literal type="number" pos:line="77" pos:column="29">0<pos:position pos:line="77" pos:column="30"/></literal></expr>]<pos:position pos:line="77" pos:column="31"/></index></name> <operator pos:line="77" pos:column="32">=<pos:position pos:line="77" pos:column="33"/></operator> <name><name pos:line="77" pos:column="34">notify_pipe<pos:position pos:line="77" pos:column="45"/></name><index pos:line="77" pos:column="45">[<expr><literal type="number" pos:line="77" pos:column="46">1<pos:position pos:line="77" pos:column="47"/></literal></expr>]<pos:position pos:line="77" pos:column="48"/></index></name> <operator pos:line="77" pos:column="49">=<pos:position pos:line="77" pos:column="50"/></operator> <operator pos:line="77" pos:column="51">-<pos:position pos:line="77" pos:column="52"/></operator><literal type="number" pos:line="77" pos:column="52">1<pos:position pos:line="77" pos:column="53"/></literal></expr>;<pos:position pos:line="77" pos:column="54"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="79" pos:column="9">cmd<pos:position pos:line="79" pos:column="12"/></name><operator pos:line="79" pos:column="12">-&gt;<pos:position pos:line="79" pos:column="17"/></operator><name pos:line="79" pos:column="14">pid<pos:position pos:line="79" pos:column="17"/></name></name> <operator pos:line="79" pos:column="18">=<pos:position pos:line="79" pos:column="19"/></operator> <call><name pos:line="79" pos:column="20">fork<pos:position pos:line="79" pos:column="24"/></name><argument_list pos:line="79" pos:column="24">()<pos:position pos:line="79" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name pos:line="80" pos:column="9">failed_errno<pos:position pos:line="80" pos:column="21"/></name> <operator pos:line="80" pos:column="22">=<pos:position pos:line="80" pos:column="23"/></operator> <name pos:line="80" pos:column="24">errno<pos:position pos:line="80" pos:column="29"/></name></expr>;<pos:position pos:line="80" pos:column="30"/></expr_stmt>
	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><operator pos:line="81" pos:column="13">!<pos:position pos:line="81" pos:column="14"/></operator><name><name pos:line="81" pos:column="14">cmd<pos:position pos:line="81" pos:column="17"/></name><operator pos:line="81" pos:column="17">-&gt;<pos:position pos:line="81" pos:column="22"/></operator><name pos:line="81" pos:column="19">pid<pos:position pos:line="81" pos:column="22"/></name></name></expr>)<pos:position pos:line="81" pos:column="23"/></condition><then pos:line="81" pos:column="23"> <block pos:line="81" pos:column="24">{
		<comment type="block" pos:line="82" pos:column="17">/*
		 * Redirect the channel to write syscall error messages to
		 * before redirecting the process's stderr so that all die()
		 * in subsequent call paths use the parent's stderr.
		 */</comment>
		<if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><name><name pos:line="87" pos:column="21">cmd<pos:position pos:line="87" pos:column="24"/></name><operator pos:line="87" pos:column="24">-&gt;<pos:position pos:line="87" pos:column="29"/></operator><name pos:line="87" pos:column="26">no_stderr<pos:position pos:line="87" pos:column="35"/></name></name> <operator pos:line="87" pos:column="36">||<pos:position pos:line="87" pos:column="38"/></operator> <name pos:line="87" pos:column="39">need_err<pos:position pos:line="87" pos:column="47"/></name></expr>)<pos:position pos:line="87" pos:column="48"/></condition><then pos:line="87" pos:column="48"> <block pos:line="87" pos:column="49">{
			<expr_stmt><expr><name pos:line="88" pos:column="25">child_err<pos:position pos:line="88" pos:column="34"/></name> <operator pos:line="88" pos:column="35">=<pos:position pos:line="88" pos:column="36"/></operator> <call><name pos:line="88" pos:column="37">dup<pos:position pos:line="88" pos:column="40"/></name><argument_list pos:line="88" pos:column="40">(<argument><expr><literal type="number" pos:line="88" pos:column="41">2<pos:position pos:line="88" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="89" pos:column="25">set_cloexec<pos:position pos:line="89" pos:column="36"/></name><argument_list pos:line="89" pos:column="36">(<argument><expr><name pos:line="89" pos:column="37">child_err<pos:position pos:line="89" pos:column="46"/></name></expr></argument>)<pos:position pos:line="89" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="90" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="91" pos:column="17">set_die_routine<pos:position pos:line="91" pos:column="32"/></name><argument_list pos:line="91" pos:column="32">(<argument><expr><name pos:line="91" pos:column="33">die_child<pos:position pos:line="91" pos:column="42"/></name></expr></argument>)<pos:position pos:line="91" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="92" pos:column="17">set_error_routine<pos:position pos:line="92" pos:column="34"/></name><argument_list pos:line="92" pos:column="34">(<argument><expr><name pos:line="92" pos:column="35">error_child<pos:position pos:line="92" pos:column="46"/></name></expr></argument>)<pos:position pos:line="92" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="48"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="94" pos:column="17">close<pos:position pos:line="94" pos:column="22"/></name><argument_list pos:line="94" pos:column="22">(<argument><expr><name><name pos:line="94" pos:column="23">notify_pipe<pos:position pos:line="94" pos:column="34"/></name><index pos:line="94" pos:column="34">[<expr><literal type="number" pos:line="94" pos:column="35">0<pos:position pos:line="94" pos:column="36"/></literal></expr>]<pos:position pos:line="94" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="94" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="95" pos:column="17">set_cloexec<pos:position pos:line="95" pos:column="28"/></name><argument_list pos:line="95" pos:column="28">(<argument><expr><name><name pos:line="95" pos:column="29">notify_pipe<pos:position pos:line="95" pos:column="40"/></name><index pos:line="95" pos:column="40">[<expr><literal type="number" pos:line="95" pos:column="41">1<pos:position pos:line="95" pos:column="42"/></literal></expr>]<pos:position pos:line="95" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="95" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="96" pos:column="17">child_notifier<pos:position pos:line="96" pos:column="31"/></name> <operator pos:line="96" pos:column="32">=<pos:position pos:line="96" pos:column="33"/></operator> <name><name pos:line="96" pos:column="34">notify_pipe<pos:position pos:line="96" pos:column="45"/></name><index pos:line="96" pos:column="45">[<expr><literal type="number" pos:line="96" pos:column="46">1<pos:position pos:line="96" pos:column="47"/></literal></expr>]<pos:position pos:line="96" pos:column="48"/></index></name></expr>;<pos:position pos:line="96" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="97" pos:column="17">atexit<pos:position pos:line="97" pos:column="23"/></name><argument_list pos:line="97" pos:column="23">(<argument><expr><name pos:line="97" pos:column="24">notify_parent<pos:position pos:line="97" pos:column="37"/></name></expr></argument>)<pos:position pos:line="97" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="39"/></expr_stmt>

		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><name><name pos:line="99" pos:column="21">cmd<pos:position pos:line="99" pos:column="24"/></name><operator pos:line="99" pos:column="24">-&gt;<pos:position pos:line="99" pos:column="29"/></operator><name pos:line="99" pos:column="26">no_stdin<pos:position pos:line="99" pos:column="34"/></name></name></expr>)<pos:position pos:line="99" pos:column="35"/></condition><then pos:line="99" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="100" pos:column="25">dup_devnull<pos:position pos:line="100" pos:column="36"/></name><argument_list pos:line="100" pos:column="36">(<argument><expr><literal type="number" pos:line="100" pos:column="37">0<pos:position pos:line="100" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="40"/></expr_stmt></block></then>
		<elseif pos:line="101" pos:column="17">else <if pos:line="101" pos:column="22">if <condition pos:line="101" pos:column="25">(<expr><name pos:line="101" pos:column="26">need_in<pos:position pos:line="101" pos:column="33"/></name></expr>)<pos:position pos:line="101" pos:column="34"/></condition><then pos:line="101" pos:column="34"> <block pos:line="101" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="102" pos:column="25">dup2<pos:position pos:line="102" pos:column="29"/></name><argument_list pos:line="102" pos:column="29">(<argument><expr><name><name pos:line="102" pos:column="30">fdin<pos:position pos:line="102" pos:column="34"/></name><index pos:line="102" pos:column="34">[<expr><literal type="number" pos:line="102" pos:column="35">0<pos:position pos:line="102" pos:column="36"/></literal></expr>]<pos:position pos:line="102" pos:column="37"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="102" pos:column="39">0<pos:position pos:line="102" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="103" pos:column="25">close_pair<pos:position pos:line="103" pos:column="35"/></name><argument_list pos:line="103" pos:column="35">(<argument><expr><name pos:line="103" pos:column="36">fdin<pos:position pos:line="103" pos:column="40"/></name></expr></argument>)<pos:position pos:line="103" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="104" pos:column="18"/></block></then></if></elseif> <elseif pos:line="104" pos:column="19">else <if pos:line="104" pos:column="24">if <condition pos:line="104" pos:column="27">(<expr><name><name pos:line="104" pos:column="28">cmd<pos:position pos:line="104" pos:column="31"/></name><operator pos:line="104" pos:column="31">-&gt;<pos:position pos:line="104" pos:column="36"/></operator><name pos:line="104" pos:column="33">in<pos:position pos:line="104" pos:column="35"/></name></name></expr>)<pos:position pos:line="104" pos:column="36"/></condition><then pos:line="104" pos:column="36"> <block pos:line="104" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="105" pos:column="25">dup2<pos:position pos:line="105" pos:column="29"/></name><argument_list pos:line="105" pos:column="29">(<argument><expr><name><name pos:line="105" pos:column="30">cmd<pos:position pos:line="105" pos:column="33"/></name><operator pos:line="105" pos:column="33">-&gt;<pos:position pos:line="105" pos:column="38"/></operator><name pos:line="105" pos:column="35">in<pos:position pos:line="105" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="105" pos:column="39">0<pos:position pos:line="105" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="106" pos:column="25">close<pos:position pos:line="106" pos:column="30"/></name><argument_list pos:line="106" pos:column="30">(<argument><expr><name><name pos:line="106" pos:column="31">cmd<pos:position pos:line="106" pos:column="34"/></name><operator pos:line="106" pos:column="34">-&gt;<pos:position pos:line="106" pos:column="39"/></operator><name pos:line="106" pos:column="36">in<pos:position pos:line="106" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="107" pos:column="18"/></block></then></if></elseif></if>

		<if pos:line="109" pos:column="17">if <condition pos:line="109" pos:column="20">(<expr><name><name pos:line="109" pos:column="21">cmd<pos:position pos:line="109" pos:column="24"/></name><operator pos:line="109" pos:column="24">-&gt;<pos:position pos:line="109" pos:column="29"/></operator><name pos:line="109" pos:column="26">no_stderr<pos:position pos:line="109" pos:column="35"/></name></name></expr>)<pos:position pos:line="109" pos:column="36"/></condition><then pos:line="109" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="110" pos:column="25">dup_devnull<pos:position pos:line="110" pos:column="36"/></name><argument_list pos:line="110" pos:column="36">(<argument><expr><literal type="number" pos:line="110" pos:column="37">2<pos:position pos:line="110" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="40"/></expr_stmt></block></then>
		<elseif pos:line="111" pos:column="17">else <if pos:line="111" pos:column="22">if <condition pos:line="111" pos:column="25">(<expr><name pos:line="111" pos:column="26">need_err<pos:position pos:line="111" pos:column="34"/></name></expr>)<pos:position pos:line="111" pos:column="35"/></condition><then pos:line="111" pos:column="35"> <block pos:line="111" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="112" pos:column="25">dup2<pos:position pos:line="112" pos:column="29"/></name><argument_list pos:line="112" pos:column="29">(<argument><expr><name><name pos:line="112" pos:column="30">fderr<pos:position pos:line="112" pos:column="35"/></name><index pos:line="112" pos:column="35">[<expr><literal type="number" pos:line="112" pos:column="36">1<pos:position pos:line="112" pos:column="37"/></literal></expr>]<pos:position pos:line="112" pos:column="38"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="112" pos:column="40">2<pos:position pos:line="112" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="113" pos:column="25">close_pair<pos:position pos:line="113" pos:column="35"/></name><argument_list pos:line="113" pos:column="35">(<argument><expr><name pos:line="113" pos:column="36">fderr<pos:position pos:line="113" pos:column="41"/></name></expr></argument>)<pos:position pos:line="113" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="114" pos:column="18"/></block></then></if></elseif> <elseif pos:line="114" pos:column="19">else <if pos:line="114" pos:column="24">if <condition pos:line="114" pos:column="27">(<expr><name><name pos:line="114" pos:column="28">cmd<pos:position pos:line="114" pos:column="31"/></name><operator pos:line="114" pos:column="31">-&gt;<pos:position pos:line="114" pos:column="36"/></operator><name pos:line="114" pos:column="33">err<pos:position pos:line="114" pos:column="36"/></name></name> <operator pos:line="114" pos:column="37">&gt;<pos:position pos:line="114" pos:column="41"/></operator> <literal type="number" pos:line="114" pos:column="39">1<pos:position pos:line="114" pos:column="40"/></literal></expr>)<pos:position pos:line="114" pos:column="41"/></condition><then pos:line="114" pos:column="41"> <block pos:line="114" pos:column="42">{
			<expr_stmt><expr><call><name pos:line="115" pos:column="25">dup2<pos:position pos:line="115" pos:column="29"/></name><argument_list pos:line="115" pos:column="29">(<argument><expr><name><name pos:line="115" pos:column="30">cmd<pos:position pos:line="115" pos:column="33"/></name><operator pos:line="115" pos:column="33">-&gt;<pos:position pos:line="115" pos:column="38"/></operator><name pos:line="115" pos:column="35">err<pos:position pos:line="115" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="115" pos:column="40">2<pos:position pos:line="115" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="116" pos:column="25">close<pos:position pos:line="116" pos:column="30"/></name><argument_list pos:line="116" pos:column="30">(<argument><expr><name><name pos:line="116" pos:column="31">cmd<pos:position pos:line="116" pos:column="34"/></name><operator pos:line="116" pos:column="34">-&gt;<pos:position pos:line="116" pos:column="39"/></operator><name pos:line="116" pos:column="36">err<pos:position pos:line="116" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="116" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="117" pos:column="18"/></block></then></if></elseif></if>

		<if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><name><name pos:line="119" pos:column="21">cmd<pos:position pos:line="119" pos:column="24"/></name><operator pos:line="119" pos:column="24">-&gt;<pos:position pos:line="119" pos:column="29"/></operator><name pos:line="119" pos:column="26">no_stdout<pos:position pos:line="119" pos:column="35"/></name></name></expr>)<pos:position pos:line="119" pos:column="36"/></condition><then pos:line="119" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="25">dup_devnull<pos:position pos:line="120" pos:column="36"/></name><argument_list pos:line="120" pos:column="36">(<argument><expr><literal type="number" pos:line="120" pos:column="37">1<pos:position pos:line="120" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="40"/></expr_stmt></block></then>
		<elseif pos:line="121" pos:column="17">else <if pos:line="121" pos:column="22">if <condition pos:line="121" pos:column="25">(<expr><name><name pos:line="121" pos:column="26">cmd<pos:position pos:line="121" pos:column="29"/></name><operator pos:line="121" pos:column="29">-&gt;<pos:position pos:line="121" pos:column="34"/></operator><name pos:line="121" pos:column="31">stdout_to_stderr<pos:position pos:line="121" pos:column="47"/></name></name></expr>)<pos:position pos:line="121" pos:column="48"/></condition><then pos:line="121" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="122" pos:column="25">dup2<pos:position pos:line="122" pos:column="29"/></name><argument_list pos:line="122" pos:column="29">(<argument><expr><literal type="number" pos:line="122" pos:column="30">2<pos:position pos:line="122" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="122" pos:column="33">1<pos:position pos:line="122" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="36"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="123" pos:column="17">else <if pos:line="123" pos:column="22">if <condition pos:line="123" pos:column="25">(<expr><name pos:line="123" pos:column="26">need_out<pos:position pos:line="123" pos:column="34"/></name></expr>)<pos:position pos:line="123" pos:column="35"/></condition><then pos:line="123" pos:column="35"> <block pos:line="123" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="124" pos:column="25">dup2<pos:position pos:line="124" pos:column="29"/></name><argument_list pos:line="124" pos:column="29">(<argument><expr><name><name pos:line="124" pos:column="30">fdout<pos:position pos:line="124" pos:column="35"/></name><index pos:line="124" pos:column="35">[<expr><literal type="number" pos:line="124" pos:column="36">1<pos:position pos:line="124" pos:column="37"/></literal></expr>]<pos:position pos:line="124" pos:column="38"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="124" pos:column="40">1<pos:position pos:line="124" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="125" pos:column="25">close_pair<pos:position pos:line="125" pos:column="35"/></name><argument_list pos:line="125" pos:column="35">(<argument><expr><name pos:line="125" pos:column="36">fdout<pos:position pos:line="125" pos:column="41"/></name></expr></argument>)<pos:position pos:line="125" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="126" pos:column="18"/></block></then></if></elseif> <elseif pos:line="126" pos:column="19">else <if pos:line="126" pos:column="24">if <condition pos:line="126" pos:column="27">(<expr><name><name pos:line="126" pos:column="28">cmd<pos:position pos:line="126" pos:column="31"/></name><operator pos:line="126" pos:column="31">-&gt;<pos:position pos:line="126" pos:column="36"/></operator><name pos:line="126" pos:column="33">out<pos:position pos:line="126" pos:column="36"/></name></name> <operator pos:line="126" pos:column="37">&gt;<pos:position pos:line="126" pos:column="41"/></operator> <literal type="number" pos:line="126" pos:column="39">1<pos:position pos:line="126" pos:column="40"/></literal></expr>)<pos:position pos:line="126" pos:column="41"/></condition><then pos:line="126" pos:column="41"> <block pos:line="126" pos:column="42">{
			<expr_stmt><expr><call><name pos:line="127" pos:column="25">dup2<pos:position pos:line="127" pos:column="29"/></name><argument_list pos:line="127" pos:column="29">(<argument><expr><name><name pos:line="127" pos:column="30">cmd<pos:position pos:line="127" pos:column="33"/></name><operator pos:line="127" pos:column="33">-&gt;<pos:position pos:line="127" pos:column="38"/></operator><name pos:line="127" pos:column="35">out<pos:position pos:line="127" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="127" pos:column="40">1<pos:position pos:line="127" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="128" pos:column="25">close<pos:position pos:line="128" pos:column="30"/></name><argument_list pos:line="128" pos:column="30">(<argument><expr><name><name pos:line="128" pos:column="31">cmd<pos:position pos:line="128" pos:column="34"/></name><operator pos:line="128" pos:column="34">-&gt;<pos:position pos:line="128" pos:column="39"/></operator><name pos:line="128" pos:column="36">out<pos:position pos:line="128" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="128" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="129" pos:column="18"/></block></then></if></elseif></if>

		<if pos:line="131" pos:column="17">if <condition pos:line="131" pos:column="20">(<expr><name><name pos:line="131" pos:column="21">cmd<pos:position pos:line="131" pos:column="24"/></name><operator pos:line="131" pos:column="24">-&gt;<pos:position pos:line="131" pos:column="29"/></operator><name pos:line="131" pos:column="26">dir<pos:position pos:line="131" pos:column="29"/></name></name> <operator pos:line="131" pos:column="30">&amp;&amp;<pos:position pos:line="131" pos:column="40"/></operator> <call><name pos:line="131" pos:column="33">chdir<pos:position pos:line="131" pos:column="38"/></name><argument_list pos:line="131" pos:column="38">(<argument><expr><name><name pos:line="131" pos:column="39">cmd<pos:position pos:line="131" pos:column="42"/></name><operator pos:line="131" pos:column="42">-&gt;<pos:position pos:line="131" pos:column="47"/></operator><name pos:line="131" pos:column="44">dir<pos:position pos:line="131" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="131" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="131" pos:column="49"/></condition><then pos:line="131" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="132" pos:column="25">die_errno<pos:position pos:line="132" pos:column="34"/></name><argument_list pos:line="132" pos:column="34">(<argument><expr><literal type="string" pos:line="132" pos:column="35">"exec '%s': cd to '%s' failed"<pos:position pos:line="132" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="132" pos:column="67">cmd<pos:position pos:line="132" pos:column="70"/></name><operator pos:line="132" pos:column="70">-&gt;<pos:position pos:line="132" pos:column="75"/></operator><name pos:line="132" pos:column="72">argv<pos:position pos:line="132" pos:column="76"/></name><index pos:line="132" pos:column="76">[<expr><literal type="number" pos:line="132" pos:column="77">0<pos:position pos:line="132" pos:column="78"/></literal></expr>]<pos:position pos:line="132" pos:column="79"/></index></name></expr></argument>,
			    <argument><expr><name><name pos:line="133" pos:column="29">cmd<pos:position pos:line="133" pos:column="32"/></name><operator pos:line="133" pos:column="32">-&gt;<pos:position pos:line="133" pos:column="37"/></operator><name pos:line="133" pos:column="34">dir<pos:position pos:line="133" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="133" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="39"/></expr_stmt></block></then></if>
		<if pos:line="134" pos:column="17">if <condition pos:line="134" pos:column="20">(<expr><name><name pos:line="134" pos:column="21">cmd<pos:position pos:line="134" pos:column="24"/></name><operator pos:line="134" pos:column="24">-&gt;<pos:position pos:line="134" pos:column="29"/></operator><name pos:line="134" pos:column="26">env<pos:position pos:line="134" pos:column="29"/></name></name></expr>)<pos:position pos:line="134" pos:column="30"/></condition><then pos:line="134" pos:column="30"> <block pos:line="134" pos:column="31">{
			<for pos:line="135" pos:column="25">for <control pos:line="135" pos:column="29">(<init pos:line="135" pos:column="30">;<pos:position pos:line="135" pos:column="31"/></init> <condition><expr><operator pos:line="135" pos:column="32">*<pos:position pos:line="135" pos:column="33"/></operator><name><name pos:line="135" pos:column="33">cmd<pos:position pos:line="135" pos:column="36"/></name><operator pos:line="135" pos:column="36">-&gt;<pos:position pos:line="135" pos:column="41"/></operator><name pos:line="135" pos:column="38">env<pos:position pos:line="135" pos:column="41"/></name></name></expr>;<pos:position pos:line="135" pos:column="42"/></condition> <incr><expr><name><name pos:line="135" pos:column="43">cmd<pos:position pos:line="135" pos:column="46"/></name><operator pos:line="135" pos:column="46">-&gt;<pos:position pos:line="135" pos:column="51"/></operator><name pos:line="135" pos:column="48">env<pos:position pos:line="135" pos:column="51"/></name></name><operator pos:line="135" pos:column="51">++<pos:position pos:line="135" pos:column="53"/></operator></expr></incr>)<pos:position pos:line="135" pos:column="54"/></control> <block pos:line="135" pos:column="55">{
				<if pos:line="136" pos:column="33">if <condition pos:line="136" pos:column="36">(<expr><call><name pos:line="136" pos:column="37">strchr<pos:position pos:line="136" pos:column="43"/></name><argument_list pos:line="136" pos:column="43">(<argument><expr><operator pos:line="136" pos:column="44">*<pos:position pos:line="136" pos:column="45"/></operator><name><name pos:line="136" pos:column="45">cmd<pos:position pos:line="136" pos:column="48"/></name><operator pos:line="136" pos:column="48">-&gt;<pos:position pos:line="136" pos:column="53"/></operator><name pos:line="136" pos:column="50">env<pos:position pos:line="136" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="136" pos:column="55">'='<pos:position pos:line="136" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="136" pos:column="60"/></condition><then pos:line="136" pos:column="60">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="137" pos:column="41">putenv<pos:position pos:line="137" pos:column="47"/></name><argument_list pos:line="137" pos:column="47">(<argument><expr><operator pos:line="137" pos:column="48">(<pos:position pos:line="137" pos:column="49"/></operator><name pos:line="137" pos:column="49">char<pos:position pos:line="137" pos:column="53"/></name> <operator pos:line="137" pos:column="54">*<pos:position pos:line="137" pos:column="55"/></operator><operator pos:line="137" pos:column="55">)<pos:position pos:line="137" pos:column="56"/></operator><operator pos:line="137" pos:column="56">*<pos:position pos:line="137" pos:column="57"/></operator><name><name pos:line="137" pos:column="57">cmd<pos:position pos:line="137" pos:column="60"/></name><operator pos:line="137" pos:column="60">-&gt;<pos:position pos:line="137" pos:column="65"/></operator><name pos:line="137" pos:column="62">env<pos:position pos:line="137" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="137" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="67"/></expr_stmt></block></then>
				<else pos:line="138" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="139" pos:column="41">unsetenv<pos:position pos:line="139" pos:column="49"/></name><argument_list pos:line="139" pos:column="49">(<argument><expr><operator pos:line="139" pos:column="50">*<pos:position pos:line="139" pos:column="51"/></operator><name><name pos:line="139" pos:column="51">cmd<pos:position pos:line="139" pos:column="54"/></name><operator pos:line="139" pos:column="54">-&gt;<pos:position pos:line="139" pos:column="59"/></operator><name pos:line="139" pos:column="56">env<pos:position pos:line="139" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="139" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="61"/></expr_stmt></block></else></if>
			}<pos:position pos:line="140" pos:column="26"/></block></for>
		}<pos:position pos:line="141" pos:column="18"/></block></then></if>
		<if pos:line="142" pos:column="17">if <condition pos:line="142" pos:column="20">(<expr><name><name pos:line="142" pos:column="21">cmd<pos:position pos:line="142" pos:column="24"/></name><operator pos:line="142" pos:column="24">-&gt;<pos:position pos:line="142" pos:column="29"/></operator><name pos:line="142" pos:column="26">git_cmd<pos:position pos:line="142" pos:column="33"/></name></name></expr>)<pos:position pos:line="142" pos:column="34"/></condition><then pos:line="142" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="143" pos:column="25">execv_git_cmd<pos:position pos:line="143" pos:column="38"/></name><argument_list pos:line="143" pos:column="38">(<argument><expr><name><name pos:line="143" pos:column="39">cmd<pos:position pos:line="143" pos:column="42"/></name><operator pos:line="143" pos:column="42">-&gt;<pos:position pos:line="143" pos:column="47"/></operator><name pos:line="143" pos:column="44">argv<pos:position pos:line="143" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="143" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="50"/></expr_stmt></block></then>
		<elseif pos:line="144" pos:column="17">else <if pos:line="144" pos:column="22">if <condition pos:line="144" pos:column="25">(<expr><name><name pos:line="144" pos:column="26">cmd<pos:position pos:line="144" pos:column="29"/></name><operator pos:line="144" pos:column="29">-&gt;<pos:position pos:line="144" pos:column="34"/></operator><name pos:line="144" pos:column="31">use_shell<pos:position pos:line="144" pos:column="40"/></name></name></expr>)<pos:position pos:line="144" pos:column="41"/></condition><then pos:line="144" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="145" pos:column="25">execv_shell_cmd<pos:position pos:line="145" pos:column="40"/></name><argument_list pos:line="145" pos:column="40">(<argument><expr><name><name pos:line="145" pos:column="41">cmd<pos:position pos:line="145" pos:column="44"/></name><operator pos:line="145" pos:column="44">-&gt;<pos:position pos:line="145" pos:column="49"/></operator><name pos:line="145" pos:column="46">argv<pos:position pos:line="145" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="145" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="52"/></expr_stmt></block></then></if></elseif>
		<else pos:line="146" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="147" pos:column="25">sane_execvp<pos:position pos:line="147" pos:column="36"/></name><argument_list pos:line="147" pos:column="36">(<argument><expr><name><name pos:line="147" pos:column="37">cmd<pos:position pos:line="147" pos:column="40"/></name><operator pos:line="147" pos:column="40">-&gt;<pos:position pos:line="147" pos:column="45"/></operator><name pos:line="147" pos:column="42">argv<pos:position pos:line="147" pos:column="46"/></name><index pos:line="147" pos:column="46">[<expr><literal type="number" pos:line="147" pos:column="47">0<pos:position pos:line="147" pos:column="48"/></literal></expr>]<pos:position pos:line="147" pos:column="49"/></index></name></expr></argument>, <argument><expr><operator pos:line="147" pos:column="51">(<pos:position pos:line="147" pos:column="52"/></operator><name pos:line="147" pos:column="52">char<pos:position pos:line="147" pos:column="56"/></name> <operator pos:line="147" pos:column="57">*<pos:position pos:line="147" pos:column="58"/></operator><specifier pos:line="147" pos:column="58">const<pos:position pos:line="147" pos:column="63"/></specifier><operator pos:line="147" pos:column="63">*<pos:position pos:line="147" pos:column="64"/></operator><operator pos:line="147" pos:column="64">)<pos:position pos:line="147" pos:column="65"/></operator> <name><name pos:line="147" pos:column="66">cmd<pos:position pos:line="147" pos:column="69"/></name><operator pos:line="147" pos:column="69">-&gt;<pos:position pos:line="147" pos:column="74"/></operator><name pos:line="147" pos:column="71">argv<pos:position pos:line="147" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="147" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="77"/></expr_stmt></block></else></if>
		<if pos:line="148" pos:column="17">if <condition pos:line="148" pos:column="20">(<expr><name pos:line="148" pos:column="21">errno<pos:position pos:line="148" pos:column="26"/></name> <operator pos:line="148" pos:column="27">==<pos:position pos:line="148" pos:column="29"/></operator> <name pos:line="148" pos:column="30">ENOENT<pos:position pos:line="148" pos:column="36"/></name></expr>)<pos:position pos:line="148" pos:column="37"/></condition><then pos:line="148" pos:column="37"> <block pos:line="148" pos:column="38">{
			<if pos:line="149" pos:column="25">if <condition pos:line="149" pos:column="28">(<expr><operator pos:line="149" pos:column="29">!<pos:position pos:line="149" pos:column="30"/></operator><name><name pos:line="149" pos:column="30">cmd<pos:position pos:line="149" pos:column="33"/></name><operator pos:line="149" pos:column="33">-&gt;<pos:position pos:line="149" pos:column="38"/></operator><name pos:line="149" pos:column="35">silent_exec_failure<pos:position pos:line="149" pos:column="54"/></name></name></expr>)<pos:position pos:line="149" pos:column="55"/></condition><then pos:line="149" pos:column="55">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="150" pos:column="33">error<pos:position pos:line="150" pos:column="38"/></name><argument_list pos:line="150" pos:column="38">(<argument><expr><literal type="string" pos:line="150" pos:column="39">"cannot run %s: %s"<pos:position pos:line="150" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="150" pos:column="60">cmd<pos:position pos:line="150" pos:column="63"/></name><operator pos:line="150" pos:column="63">-&gt;<pos:position pos:line="150" pos:column="68"/></operator><name pos:line="150" pos:column="65">argv<pos:position pos:line="150" pos:column="69"/></name><index pos:line="150" pos:column="69">[<expr><literal type="number" pos:line="150" pos:column="70">0<pos:position pos:line="150" pos:column="71"/></literal></expr>]<pos:position pos:line="150" pos:column="72"/></index></name></expr></argument>,
					<argument><expr><call><name pos:line="151" pos:column="41">strerror<pos:position pos:line="151" pos:column="49"/></name><argument_list pos:line="151" pos:column="49">(<argument><expr><name pos:line="151" pos:column="50">ENOENT<pos:position pos:line="151" pos:column="56"/></name></expr></argument>)<pos:position pos:line="151" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="151" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="59"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="152" pos:column="25">exit<pos:position pos:line="152" pos:column="29"/></name><argument_list pos:line="152" pos:column="29">(<argument><expr><literal type="number" pos:line="152" pos:column="30">127<pos:position pos:line="152" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="152" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="153" pos:column="18"/></block></then> <else pos:line="153" pos:column="19">else <block pos:line="153" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="154" pos:column="25">die_errno<pos:position pos:line="154" pos:column="34"/></name><argument_list pos:line="154" pos:column="34">(<argument><expr><literal type="string" pos:line="154" pos:column="35">"cannot exec '%s'"<pos:position pos:line="154" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="154" pos:column="55">cmd<pos:position pos:line="154" pos:column="58"/></name><operator pos:line="154" pos:column="58">-&gt;<pos:position pos:line="154" pos:column="63"/></operator><name pos:line="154" pos:column="60">argv<pos:position pos:line="154" pos:column="64"/></name><index pos:line="154" pos:column="64">[<expr><literal type="number" pos:line="154" pos:column="65">0<pos:position pos:line="154" pos:column="66"/></literal></expr>]<pos:position pos:line="154" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="154" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="69"/></expr_stmt>
		}<pos:position pos:line="155" pos:column="18"/></block></else></if>
	}<pos:position pos:line="156" pos:column="10"/></block></then></if>
	<if pos:line="157" pos:column="9">if <condition pos:line="157" pos:column="12">(<expr><name><name pos:line="157" pos:column="13">cmd<pos:position pos:line="157" pos:column="16"/></name><operator pos:line="157" pos:column="16">-&gt;<pos:position pos:line="157" pos:column="21"/></operator><name pos:line="157" pos:column="18">pid<pos:position pos:line="157" pos:column="21"/></name></name> <operator pos:line="157" pos:column="22">&lt;<pos:position pos:line="157" pos:column="26"/></operator> <literal type="number" pos:line="157" pos:column="24">0<pos:position pos:line="157" pos:column="25"/></literal></expr>)<pos:position pos:line="157" pos:column="26"/></condition><then pos:line="157" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="158" pos:column="17">error<pos:position pos:line="158" pos:column="22"/></name><argument_list pos:line="158" pos:column="22">(<argument><expr><literal type="string" pos:line="158" pos:column="23">"cannot fork() for %s: %s"<pos:position pos:line="158" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="51">cmd<pos:position pos:line="158" pos:column="54"/></name><operator pos:line="158" pos:column="54">-&gt;<pos:position pos:line="158" pos:column="59"/></operator><name pos:line="158" pos:column="56">argv<pos:position pos:line="158" pos:column="60"/></name><index pos:line="158" pos:column="60">[<expr><literal type="number" pos:line="158" pos:column="61">0<pos:position pos:line="158" pos:column="62"/></literal></expr>]<pos:position pos:line="158" pos:column="63"/></index></name></expr></argument>,
			<argument><expr><call><name pos:line="159" pos:column="25">strerror<pos:position pos:line="159" pos:column="33"/></name><argument_list pos:line="159" pos:column="33">(<argument><expr><name pos:line="159" pos:column="34">errno<pos:position pos:line="159" pos:column="39"/></name></expr></argument>)<pos:position pos:line="159" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="159" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="42"/></expr_stmt></block></then>
	<elseif pos:line="160" pos:column="9">else <if pos:line="160" pos:column="14">if <condition pos:line="160" pos:column="17">(<expr><name><name pos:line="160" pos:column="18">cmd<pos:position pos:line="160" pos:column="21"/></name><operator pos:line="160" pos:column="21">-&gt;<pos:position pos:line="160" pos:column="26"/></operator><name pos:line="160" pos:column="23">clean_on_exit<pos:position pos:line="160" pos:column="36"/></name></name></expr>)<pos:position pos:line="160" pos:column="37"/></condition><then pos:line="160" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="161" pos:column="17">mark_child_for_cleanup<pos:position pos:line="161" pos:column="39"/></name><argument_list pos:line="161" pos:column="39">(<argument><expr><name><name pos:line="161" pos:column="40">cmd<pos:position pos:line="161" pos:column="43"/></name><operator pos:line="161" pos:column="43">-&gt;<pos:position pos:line="161" pos:column="48"/></operator><name pos:line="161" pos:column="45">pid<pos:position pos:line="161" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="161" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="50"/></expr_stmt></block></then></if></elseif></if>

	<comment type="block" pos:line="163" pos:column="9">/*
	 * Wait for child's execvp. If the execvp succeeds (or if fork()
	 * failed), EOF is seen immediately by the parent. Otherwise, the
	 * child process sends a single byte.
	 * Note that use of this infrastructure is completely advisory,
	 * therefore, we keep error checks minimal.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="170" pos:column="9">close<pos:position pos:line="170" pos:column="14"/></name><argument_list pos:line="170" pos:column="14">(<argument><expr><name><name pos:line="170" pos:column="15">notify_pipe<pos:position pos:line="170" pos:column="26"/></name><index pos:line="170" pos:column="26">[<expr><literal type="number" pos:line="170" pos:column="27">1<pos:position pos:line="170" pos:column="28"/></literal></expr>]<pos:position pos:line="170" pos:column="29"/></index></name></expr></argument>)<pos:position pos:line="170" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="31"/></expr_stmt>
	<if pos:line="171" pos:column="9">if <condition pos:line="171" pos:column="12">(<expr><call><name pos:line="171" pos:column="13">read<pos:position pos:line="171" pos:column="17"/></name><argument_list pos:line="171" pos:column="17">(<argument><expr><name><name pos:line="171" pos:column="18">notify_pipe<pos:position pos:line="171" pos:column="29"/></name><index pos:line="171" pos:column="29">[<expr><literal type="number" pos:line="171" pos:column="30">0<pos:position pos:line="171" pos:column="31"/></literal></expr>]<pos:position pos:line="171" pos:column="32"/></index></name></expr></argument>, <argument><expr><operator pos:line="171" pos:column="34">&amp;<pos:position pos:line="171" pos:column="39"/></operator><name><name pos:line="171" pos:column="35">notify_pipe<pos:position pos:line="171" pos:column="46"/></name><index pos:line="171" pos:column="46">[<expr><literal type="number" pos:line="171" pos:column="47">1<pos:position pos:line="171" pos:column="48"/></literal></expr>]<pos:position pos:line="171" pos:column="49"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="171" pos:column="51">1<pos:position pos:line="171" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="171" pos:column="53"/></argument_list></call> <operator pos:line="171" pos:column="54">==<pos:position pos:line="171" pos:column="56"/></operator> <literal type="number" pos:line="171" pos:column="57">1<pos:position pos:line="171" pos:column="58"/></literal></expr>)<pos:position pos:line="171" pos:column="59"/></condition><then pos:line="171" pos:column="59"> <block pos:line="171" pos:column="60">{
		<comment type="block" pos:line="172" pos:column="17">/*
		 * At this point we know that fork() succeeded, but execvp()
		 * failed. Errors have been reported to our stderr.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="176" pos:column="17">wait_or_whine<pos:position pos:line="176" pos:column="30"/></name><argument_list pos:line="176" pos:column="30">(<argument><expr><name><name pos:line="176" pos:column="31">cmd<pos:position pos:line="176" pos:column="34"/></name><operator pos:line="176" pos:column="34">-&gt;<pos:position pos:line="176" pos:column="39"/></operator><name pos:line="176" pos:column="36">pid<pos:position pos:line="176" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="176" pos:column="41">cmd<pos:position pos:line="176" pos:column="44"/></name><operator pos:line="176" pos:column="44">-&gt;<pos:position pos:line="176" pos:column="49"/></operator><name pos:line="176" pos:column="46">argv<pos:position pos:line="176" pos:column="50"/></name><index pos:line="176" pos:column="50">[<expr><literal type="number" pos:line="176" pos:column="51">0<pos:position pos:line="176" pos:column="52"/></literal></expr>]<pos:position pos:line="176" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="176" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><name pos:line="177" pos:column="17">failed_errno<pos:position pos:line="177" pos:column="29"/></name> <operator pos:line="177" pos:column="30">=<pos:position pos:line="177" pos:column="31"/></operator> <name pos:line="177" pos:column="32">errno<pos:position pos:line="177" pos:column="37"/></name></expr>;<pos:position pos:line="177" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="178" pos:column="17">cmd<pos:position pos:line="178" pos:column="20"/></name><operator pos:line="178" pos:column="20">-&gt;<pos:position pos:line="178" pos:column="25"/></operator><name pos:line="178" pos:column="22">pid<pos:position pos:line="178" pos:column="25"/></name></name> <operator pos:line="178" pos:column="26">=<pos:position pos:line="178" pos:column="27"/></operator> <operator pos:line="178" pos:column="28">-<pos:position pos:line="178" pos:column="29"/></operator><literal type="number" pos:line="178" pos:column="29">1<pos:position pos:line="178" pos:column="30"/></literal></expr>;<pos:position pos:line="178" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="179" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="180" pos:column="9">close<pos:position pos:line="180" pos:column="14"/></name><argument_list pos:line="180" pos:column="14">(<argument><expr><name><name pos:line="180" pos:column="15">notify_pipe<pos:position pos:line="180" pos:column="26"/></name><index pos:line="180" pos:column="26">[<expr><literal type="number" pos:line="180" pos:column="27">0<pos:position pos:line="180" pos:column="28"/></literal></expr>]<pos:position pos:line="180" pos:column="29"/></index></name></expr></argument>)<pos:position pos:line="180" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="31"/></expr_stmt>
}<pos:position pos:line="181" pos:column="2"/></block>
<cpp:else pos:line="182" pos:column="1">#<cpp:directive pos:line="182" pos:column="2">else<pos:position pos:line="182" pos:column="6"/></cpp:directive></cpp:else>
<block pos:line="183" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="184" pos:column="9">int<pos:position pos:line="184" pos:column="12"/></name></type> <name pos:line="184" pos:column="13">fhin<pos:position pos:line="184" pos:column="17"/></name> <init pos:line="184" pos:column="18">= <expr><literal type="number" pos:line="184" pos:column="20">0<pos:position pos:line="184" pos:column="21"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="184" pos:column="23">fhout<pos:position pos:line="184" pos:column="28"/></name> <init pos:line="184" pos:column="29">= <expr><literal type="number" pos:line="184" pos:column="31">1<pos:position pos:line="184" pos:column="32"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="184" pos:column="34">fherr<pos:position pos:line="184" pos:column="39"/></name> <init pos:line="184" pos:column="40">= <expr><literal type="number" pos:line="184" pos:column="42">2<pos:position pos:line="184" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="184" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="185" pos:column="9">const<pos:position pos:line="185" pos:column="14"/></specifier> <name pos:line="185" pos:column="15">char<pos:position pos:line="185" pos:column="19"/></name> <modifier pos:line="185" pos:column="20">*<pos:position pos:line="185" pos:column="21"/></modifier><modifier pos:line="185" pos:column="21">*<pos:position pos:line="185" pos:column="22"/></modifier></type><name pos:line="185" pos:column="22">sargv<pos:position pos:line="185" pos:column="27"/></name> <init pos:line="185" pos:column="28">= <expr><name><name pos:line="185" pos:column="30">cmd<pos:position pos:line="185" pos:column="33"/></name><operator pos:line="185" pos:column="33">-&gt;<pos:position pos:line="185" pos:column="38"/></operator><name pos:line="185" pos:column="35">argv<pos:position pos:line="185" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="185" pos:column="40"/></decl_stmt>

	<if pos:line="187" pos:column="9">if <condition pos:line="187" pos:column="12">(<expr><name><name pos:line="187" pos:column="13">cmd<pos:position pos:line="187" pos:column="16"/></name><operator pos:line="187" pos:column="16">-&gt;<pos:position pos:line="187" pos:column="21"/></operator><name pos:line="187" pos:column="18">no_stdin<pos:position pos:line="187" pos:column="26"/></name></name></expr>)<pos:position pos:line="187" pos:column="27"/></condition><then pos:line="187" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="188" pos:column="17">fhin<pos:position pos:line="188" pos:column="21"/></name> <operator pos:line="188" pos:column="22">=<pos:position pos:line="188" pos:column="23"/></operator> <call><name pos:line="188" pos:column="24">open<pos:position pos:line="188" pos:column="28"/></name><argument_list pos:line="188" pos:column="28">(<argument><expr><literal type="string" pos:line="188" pos:column="29">"/dev/null"<pos:position pos:line="188" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="188" pos:column="42">O_RDWR<pos:position pos:line="188" pos:column="48"/></name></expr></argument>)<pos:position pos:line="188" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="50"/></expr_stmt></block></then>
	<elseif pos:line="189" pos:column="9">else <if pos:line="189" pos:column="14">if <condition pos:line="189" pos:column="17">(<expr><name pos:line="189" pos:column="18">need_in<pos:position pos:line="189" pos:column="25"/></name></expr>)<pos:position pos:line="189" pos:column="26"/></condition><then pos:line="189" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="190" pos:column="17">fhin<pos:position pos:line="190" pos:column="21"/></name> <operator pos:line="190" pos:column="22">=<pos:position pos:line="190" pos:column="23"/></operator> <call><name pos:line="190" pos:column="24">dup<pos:position pos:line="190" pos:column="27"/></name><argument_list pos:line="190" pos:column="27">(<argument><expr><name><name pos:line="190" pos:column="28">fdin<pos:position pos:line="190" pos:column="32"/></name><index pos:line="190" pos:column="32">[<expr><literal type="number" pos:line="190" pos:column="33">0<pos:position pos:line="190" pos:column="34"/></literal></expr>]<pos:position pos:line="190" pos:column="35"/></index></name></expr></argument>)<pos:position pos:line="190" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="37"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="191" pos:column="9">else <if pos:line="191" pos:column="14">if <condition pos:line="191" pos:column="17">(<expr><name><name pos:line="191" pos:column="18">cmd<pos:position pos:line="191" pos:column="21"/></name><operator pos:line="191" pos:column="21">-&gt;<pos:position pos:line="191" pos:column="26"/></operator><name pos:line="191" pos:column="23">in<pos:position pos:line="191" pos:column="25"/></name></name></expr>)<pos:position pos:line="191" pos:column="26"/></condition><then pos:line="191" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="192" pos:column="17">fhin<pos:position pos:line="192" pos:column="21"/></name> <operator pos:line="192" pos:column="22">=<pos:position pos:line="192" pos:column="23"/></operator> <call><name pos:line="192" pos:column="24">dup<pos:position pos:line="192" pos:column="27"/></name><argument_list pos:line="192" pos:column="27">(<argument><expr><name><name pos:line="192" pos:column="28">cmd<pos:position pos:line="192" pos:column="31"/></name><operator pos:line="192" pos:column="31">-&gt;<pos:position pos:line="192" pos:column="36"/></operator><name pos:line="192" pos:column="33">in<pos:position pos:line="192" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="192" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="37"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="194" pos:column="9">if <condition pos:line="194" pos:column="12">(<expr><name><name pos:line="194" pos:column="13">cmd<pos:position pos:line="194" pos:column="16"/></name><operator pos:line="194" pos:column="16">-&gt;<pos:position pos:line="194" pos:column="21"/></operator><name pos:line="194" pos:column="18">no_stderr<pos:position pos:line="194" pos:column="27"/></name></name></expr>)<pos:position pos:line="194" pos:column="28"/></condition><then pos:line="194" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="195" pos:column="17">fherr<pos:position pos:line="195" pos:column="22"/></name> <operator pos:line="195" pos:column="23">=<pos:position pos:line="195" pos:column="24"/></operator> <call><name pos:line="195" pos:column="25">open<pos:position pos:line="195" pos:column="29"/></name><argument_list pos:line="195" pos:column="29">(<argument><expr><literal type="string" pos:line="195" pos:column="30">"/dev/null"<pos:position pos:line="195" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="195" pos:column="43">O_RDWR<pos:position pos:line="195" pos:column="49"/></name></expr></argument>)<pos:position pos:line="195" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="51"/></expr_stmt></block></then>
	<elseif pos:line="196" pos:column="9">else <if pos:line="196" pos:column="14">if <condition pos:line="196" pos:column="17">(<expr><name pos:line="196" pos:column="18">need_err<pos:position pos:line="196" pos:column="26"/></name></expr>)<pos:position pos:line="196" pos:column="27"/></condition><then pos:line="196" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="197" pos:column="17">fherr<pos:position pos:line="197" pos:column="22"/></name> <operator pos:line="197" pos:column="23">=<pos:position pos:line="197" pos:column="24"/></operator> <call><name pos:line="197" pos:column="25">dup<pos:position pos:line="197" pos:column="28"/></name><argument_list pos:line="197" pos:column="28">(<argument><expr><name><name pos:line="197" pos:column="29">fderr<pos:position pos:line="197" pos:column="34"/></name><index pos:line="197" pos:column="34">[<expr><literal type="number" pos:line="197" pos:column="35">1<pos:position pos:line="197" pos:column="36"/></literal></expr>]<pos:position pos:line="197" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="197" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="39"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="198" pos:column="9">else <if pos:line="198" pos:column="14">if <condition pos:line="198" pos:column="17">(<expr><name><name pos:line="198" pos:column="18">cmd<pos:position pos:line="198" pos:column="21"/></name><operator pos:line="198" pos:column="21">-&gt;<pos:position pos:line="198" pos:column="26"/></operator><name pos:line="198" pos:column="23">err<pos:position pos:line="198" pos:column="26"/></name></name> <operator pos:line="198" pos:column="27">&gt;<pos:position pos:line="198" pos:column="31"/></operator> <literal type="number" pos:line="198" pos:column="29">2<pos:position pos:line="198" pos:column="30"/></literal></expr>)<pos:position pos:line="198" pos:column="31"/></condition><then pos:line="198" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="199" pos:column="17">fherr<pos:position pos:line="199" pos:column="22"/></name> <operator pos:line="199" pos:column="23">=<pos:position pos:line="199" pos:column="24"/></operator> <call><name pos:line="199" pos:column="25">dup<pos:position pos:line="199" pos:column="28"/></name><argument_list pos:line="199" pos:column="28">(<argument><expr><name><name pos:line="199" pos:column="29">cmd<pos:position pos:line="199" pos:column="32"/></name><operator pos:line="199" pos:column="32">-&gt;<pos:position pos:line="199" pos:column="37"/></operator><name pos:line="199" pos:column="34">err<pos:position pos:line="199" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="199" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="39"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="201" pos:column="9">if <condition pos:line="201" pos:column="12">(<expr><name><name pos:line="201" pos:column="13">cmd<pos:position pos:line="201" pos:column="16"/></name><operator pos:line="201" pos:column="16">-&gt;<pos:position pos:line="201" pos:column="21"/></operator><name pos:line="201" pos:column="18">no_stdout<pos:position pos:line="201" pos:column="27"/></name></name></expr>)<pos:position pos:line="201" pos:column="28"/></condition><then pos:line="201" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="202" pos:column="17">fhout<pos:position pos:line="202" pos:column="22"/></name> <operator pos:line="202" pos:column="23">=<pos:position pos:line="202" pos:column="24"/></operator> <call><name pos:line="202" pos:column="25">open<pos:position pos:line="202" pos:column="29"/></name><argument_list pos:line="202" pos:column="29">(<argument><expr><literal type="string" pos:line="202" pos:column="30">"/dev/null"<pos:position pos:line="202" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="202" pos:column="43">O_RDWR<pos:position pos:line="202" pos:column="49"/></name></expr></argument>)<pos:position pos:line="202" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="51"/></expr_stmt></block></then>
	<elseif pos:line="203" pos:column="9">else <if pos:line="203" pos:column="14">if <condition pos:line="203" pos:column="17">(<expr><name><name pos:line="203" pos:column="18">cmd<pos:position pos:line="203" pos:column="21"/></name><operator pos:line="203" pos:column="21">-&gt;<pos:position pos:line="203" pos:column="26"/></operator><name pos:line="203" pos:column="23">stdout_to_stderr<pos:position pos:line="203" pos:column="39"/></name></name></expr>)<pos:position pos:line="203" pos:column="40"/></condition><then pos:line="203" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name pos:line="204" pos:column="17">fhout<pos:position pos:line="204" pos:column="22"/></name> <operator pos:line="204" pos:column="23">=<pos:position pos:line="204" pos:column="24"/></operator> <call><name pos:line="204" pos:column="25">dup<pos:position pos:line="204" pos:column="28"/></name><argument_list pos:line="204" pos:column="28">(<argument><expr><name pos:line="204" pos:column="29">fherr<pos:position pos:line="204" pos:column="34"/></name></expr></argument>)<pos:position pos:line="204" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="36"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="205" pos:column="9">else <if pos:line="205" pos:column="14">if <condition pos:line="205" pos:column="17">(<expr><name pos:line="205" pos:column="18">need_out<pos:position pos:line="205" pos:column="26"/></name></expr>)<pos:position pos:line="205" pos:column="27"/></condition><then pos:line="205" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="206" pos:column="17">fhout<pos:position pos:line="206" pos:column="22"/></name> <operator pos:line="206" pos:column="23">=<pos:position pos:line="206" pos:column="24"/></operator> <call><name pos:line="206" pos:column="25">dup<pos:position pos:line="206" pos:column="28"/></name><argument_list pos:line="206" pos:column="28">(<argument><expr><name><name pos:line="206" pos:column="29">fdout<pos:position pos:line="206" pos:column="34"/></name><index pos:line="206" pos:column="34">[<expr><literal type="number" pos:line="206" pos:column="35">1<pos:position pos:line="206" pos:column="36"/></literal></expr>]<pos:position pos:line="206" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="206" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="39"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="207" pos:column="9">else <if pos:line="207" pos:column="14">if <condition pos:line="207" pos:column="17">(<expr><name><name pos:line="207" pos:column="18">cmd<pos:position pos:line="207" pos:column="21"/></name><operator pos:line="207" pos:column="21">-&gt;<pos:position pos:line="207" pos:column="26"/></operator><name pos:line="207" pos:column="23">out<pos:position pos:line="207" pos:column="26"/></name></name> <operator pos:line="207" pos:column="27">&gt;<pos:position pos:line="207" pos:column="31"/></operator> <literal type="number" pos:line="207" pos:column="29">1<pos:position pos:line="207" pos:column="30"/></literal></expr>)<pos:position pos:line="207" pos:column="31"/></condition><then pos:line="207" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="208" pos:column="17">fhout<pos:position pos:line="208" pos:column="22"/></name> <operator pos:line="208" pos:column="23">=<pos:position pos:line="208" pos:column="24"/></operator> <call><name pos:line="208" pos:column="25">dup<pos:position pos:line="208" pos:column="28"/></name><argument_list pos:line="208" pos:column="28">(<argument><expr><name><name pos:line="208" pos:column="29">cmd<pos:position pos:line="208" pos:column="32"/></name><operator pos:line="208" pos:column="32">-&gt;<pos:position pos:line="208" pos:column="37"/></operator><name pos:line="208" pos:column="34">out<pos:position pos:line="208" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="208" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="39"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="210" pos:column="9">if <condition pos:line="210" pos:column="12">(<expr><name><name pos:line="210" pos:column="13">cmd<pos:position pos:line="210" pos:column="16"/></name><operator pos:line="210" pos:column="16">-&gt;<pos:position pos:line="210" pos:column="21"/></operator><name pos:line="210" pos:column="18">git_cmd<pos:position pos:line="210" pos:column="25"/></name></name></expr>)<pos:position pos:line="210" pos:column="26"/></condition><then pos:line="210" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="211" pos:column="17">cmd<pos:position pos:line="211" pos:column="20"/></name><operator pos:line="211" pos:column="20">-&gt;<pos:position pos:line="211" pos:column="25"/></operator><name pos:line="211" pos:column="22">argv<pos:position pos:line="211" pos:column="26"/></name></name> <operator pos:line="211" pos:column="27">=<pos:position pos:line="211" pos:column="28"/></operator> <call><name pos:line="211" pos:column="29">prepare_git_cmd<pos:position pos:line="211" pos:column="44"/></name><argument_list pos:line="211" pos:column="44">(<argument><expr><name><name pos:line="211" pos:column="45">cmd<pos:position pos:line="211" pos:column="48"/></name><operator pos:line="211" pos:column="48">-&gt;<pos:position pos:line="211" pos:column="53"/></operator><name pos:line="211" pos:column="50">argv<pos:position pos:line="211" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="211" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="56"/></expr_stmt></block></then>
	<elseif pos:line="212" pos:column="9">else <if pos:line="212" pos:column="14">if <condition pos:line="212" pos:column="17">(<expr><name><name pos:line="212" pos:column="18">cmd<pos:position pos:line="212" pos:column="21"/></name><operator pos:line="212" pos:column="21">-&gt;<pos:position pos:line="212" pos:column="26"/></operator><name pos:line="212" pos:column="23">use_shell<pos:position pos:line="212" pos:column="32"/></name></name></expr>)<pos:position pos:line="212" pos:column="33"/></condition><then pos:line="212" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="213" pos:column="17">cmd<pos:position pos:line="213" pos:column="20"/></name><operator pos:line="213" pos:column="20">-&gt;<pos:position pos:line="213" pos:column="25"/></operator><name pos:line="213" pos:column="22">argv<pos:position pos:line="213" pos:column="26"/></name></name> <operator pos:line="213" pos:column="27">=<pos:position pos:line="213" pos:column="28"/></operator> <call><name pos:line="213" pos:column="29">prepare_shell_cmd<pos:position pos:line="213" pos:column="46"/></name><argument_list pos:line="213" pos:column="46">(<argument><expr><name><name pos:line="213" pos:column="47">cmd<pos:position pos:line="213" pos:column="50"/></name><operator pos:line="213" pos:column="50">-&gt;<pos:position pos:line="213" pos:column="55"/></operator><name pos:line="213" pos:column="52">argv<pos:position pos:line="213" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="213" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="58"/></expr_stmt></block></then></if></elseif></if>

	<expr_stmt><expr><name><name pos:line="215" pos:column="9">cmd<pos:position pos:line="215" pos:column="12"/></name><operator pos:line="215" pos:column="12">-&gt;<pos:position pos:line="215" pos:column="17"/></operator><name pos:line="215" pos:column="14">pid<pos:position pos:line="215" pos:column="17"/></name></name> <operator pos:line="215" pos:column="18">=<pos:position pos:line="215" pos:column="19"/></operator> <call><name pos:line="215" pos:column="20">mingw_spawnvpe<pos:position pos:line="215" pos:column="34"/></name><argument_list pos:line="215" pos:column="34">(<argument><expr><name><name pos:line="215" pos:column="35">cmd<pos:position pos:line="215" pos:column="38"/></name><operator pos:line="215" pos:column="38">-&gt;<pos:position pos:line="215" pos:column="43"/></operator><name pos:line="215" pos:column="40">argv<pos:position pos:line="215" pos:column="44"/></name><index pos:line="215" pos:column="44">[<expr><literal type="number" pos:line="215" pos:column="45">0<pos:position pos:line="215" pos:column="46"/></literal></expr>]<pos:position pos:line="215" pos:column="47"/></index></name></expr></argument>, <argument><expr><name><name pos:line="215" pos:column="49">cmd<pos:position pos:line="215" pos:column="52"/></name><operator pos:line="215" pos:column="52">-&gt;<pos:position pos:line="215" pos:column="57"/></operator><name pos:line="215" pos:column="54">argv<pos:position pos:line="215" pos:column="58"/></name></name></expr></argument>, <argument><expr><operator pos:line="215" pos:column="60">(<pos:position pos:line="215" pos:column="61"/></operator><name pos:line="215" pos:column="61">char<pos:position pos:line="215" pos:column="65"/></name><operator pos:line="215" pos:column="65">*<pos:position pos:line="215" pos:column="66"/></operator><operator pos:line="215" pos:column="66">*<pos:position pos:line="215" pos:column="67"/></operator><operator pos:line="215" pos:column="67">)<pos:position pos:line="215" pos:column="68"/></operator> <name><name pos:line="215" pos:column="69">cmd<pos:position pos:line="215" pos:column="72"/></name><operator pos:line="215" pos:column="72">-&gt;<pos:position pos:line="215" pos:column="77"/></operator><name pos:line="215" pos:column="74">env<pos:position pos:line="215" pos:column="77"/></name></name></expr></argument>,
			<argument><expr><name><name pos:line="216" pos:column="25">cmd<pos:position pos:line="216" pos:column="28"/></name><operator pos:line="216" pos:column="28">-&gt;<pos:position pos:line="216" pos:column="33"/></operator><name pos:line="216" pos:column="30">dir<pos:position pos:line="216" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="35">fhin<pos:position pos:line="216" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="41">fhout<pos:position pos:line="216" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="48">fherr<pos:position pos:line="216" pos:column="53"/></name></expr></argument>)<pos:position pos:line="216" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><name pos:line="217" pos:column="9">failed_errno<pos:position pos:line="217" pos:column="21"/></name> <operator pos:line="217" pos:column="22">=<pos:position pos:line="217" pos:column="23"/></operator> <name pos:line="217" pos:column="24">errno<pos:position pos:line="217" pos:column="29"/></name></expr>;<pos:position pos:line="217" pos:column="30"/></expr_stmt>
	<if pos:line="218" pos:column="9">if <condition pos:line="218" pos:column="12">(<expr><name><name pos:line="218" pos:column="13">cmd<pos:position pos:line="218" pos:column="16"/></name><operator pos:line="218" pos:column="16">-&gt;<pos:position pos:line="218" pos:column="21"/></operator><name pos:line="218" pos:column="18">pid<pos:position pos:line="218" pos:column="21"/></name></name> <operator pos:line="218" pos:column="22">&lt;<pos:position pos:line="218" pos:column="26"/></operator> <literal type="number" pos:line="218" pos:column="24">0<pos:position pos:line="218" pos:column="25"/></literal> <operator pos:line="218" pos:column="26">&amp;&amp;<pos:position pos:line="218" pos:column="36"/></operator> <operator pos:line="218" pos:column="29">(<pos:position pos:line="218" pos:column="30"/></operator><operator pos:line="218" pos:column="30">!<pos:position pos:line="218" pos:column="31"/></operator><name><name pos:line="218" pos:column="31">cmd<pos:position pos:line="218" pos:column="34"/></name><operator pos:line="218" pos:column="34">-&gt;<pos:position pos:line="218" pos:column="39"/></operator><name pos:line="218" pos:column="36">silent_exec_failure<pos:position pos:line="218" pos:column="55"/></name></name> <operator pos:line="218" pos:column="56">||<pos:position pos:line="218" pos:column="58"/></operator> <name pos:line="218" pos:column="59">errno<pos:position pos:line="218" pos:column="64"/></name> <operator pos:line="218" pos:column="65">!=<pos:position pos:line="218" pos:column="67"/></operator> <name pos:line="218" pos:column="68">ENOENT<pos:position pos:line="218" pos:column="74"/></name><operator pos:line="218" pos:column="74">)<pos:position pos:line="218" pos:column="75"/></operator></expr>)<pos:position pos:line="218" pos:column="76"/></condition><then pos:line="218" pos:column="76">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="219" pos:column="17">error<pos:position pos:line="219" pos:column="22"/></name><argument_list pos:line="219" pos:column="22">(<argument><expr><literal type="string" pos:line="219" pos:column="23">"cannot spawn %s: %s"<pos:position pos:line="219" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="219" pos:column="46">cmd<pos:position pos:line="219" pos:column="49"/></name><operator pos:line="219" pos:column="49">-&gt;<pos:position pos:line="219" pos:column="54"/></operator><name pos:line="219" pos:column="51">argv<pos:position pos:line="219" pos:column="55"/></name><index pos:line="219" pos:column="55">[<expr><literal type="number" pos:line="219" pos:column="56">0<pos:position pos:line="219" pos:column="57"/></literal></expr>]<pos:position pos:line="219" pos:column="58"/></index></name></expr></argument>, <argument><expr><call><name pos:line="219" pos:column="60">strerror<pos:position pos:line="219" pos:column="68"/></name><argument_list pos:line="219" pos:column="68">(<argument><expr><name pos:line="219" pos:column="69">errno<pos:position pos:line="219" pos:column="74"/></name></expr></argument>)<pos:position pos:line="219" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="219" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="77"/></expr_stmt></block></then></if>
	<if pos:line="220" pos:column="9">if <condition pos:line="220" pos:column="12">(<expr><name><name pos:line="220" pos:column="13">cmd<pos:position pos:line="220" pos:column="16"/></name><operator pos:line="220" pos:column="16">-&gt;<pos:position pos:line="220" pos:column="21"/></operator><name pos:line="220" pos:column="18">clean_on_exit<pos:position pos:line="220" pos:column="31"/></name></name> <operator pos:line="220" pos:column="32">&amp;&amp;<pos:position pos:line="220" pos:column="42"/></operator> <name><name pos:line="220" pos:column="35">cmd<pos:position pos:line="220" pos:column="38"/></name><operator pos:line="220" pos:column="38">-&gt;<pos:position pos:line="220" pos:column="43"/></operator><name pos:line="220" pos:column="40">pid<pos:position pos:line="220" pos:column="43"/></name></name> <operator pos:line="220" pos:column="44">&gt;=<pos:position pos:line="220" pos:column="49"/></operator> <literal type="number" pos:line="220" pos:column="47">0<pos:position pos:line="220" pos:column="48"/></literal></expr>)<pos:position pos:line="220" pos:column="49"/></condition><then pos:line="220" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="221" pos:column="17">mark_child_for_cleanup<pos:position pos:line="221" pos:column="39"/></name><argument_list pos:line="221" pos:column="39">(<argument><expr><name><name pos:line="221" pos:column="40">cmd<pos:position pos:line="221" pos:column="43"/></name><operator pos:line="221" pos:column="43">-&gt;<pos:position pos:line="221" pos:column="48"/></operator><name pos:line="221" pos:column="45">pid<pos:position pos:line="221" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="221" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="50"/></expr_stmt></block></then></if>

	<if pos:line="223" pos:column="9">if <condition pos:line="223" pos:column="12">(<expr><name><name pos:line="223" pos:column="13">cmd<pos:position pos:line="223" pos:column="16"/></name><operator pos:line="223" pos:column="16">-&gt;<pos:position pos:line="223" pos:column="21"/></operator><name pos:line="223" pos:column="18">git_cmd<pos:position pos:line="223" pos:column="25"/></name></name></expr>)<pos:position pos:line="223" pos:column="26"/></condition><then pos:line="223" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="224" pos:column="17">free<pos:position pos:line="224" pos:column="21"/></name><argument_list pos:line="224" pos:column="21">(<argument><expr><name><name pos:line="224" pos:column="22">cmd<pos:position pos:line="224" pos:column="25"/></name><operator pos:line="224" pos:column="25">-&gt;<pos:position pos:line="224" pos:column="30"/></operator><name pos:line="224" pos:column="27">argv<pos:position pos:line="224" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="224" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="33"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="226" pos:column="9">cmd<pos:position pos:line="226" pos:column="12"/></name><operator pos:line="226" pos:column="12">-&gt;<pos:position pos:line="226" pos:column="17"/></operator><name pos:line="226" pos:column="14">argv<pos:position pos:line="226" pos:column="18"/></name></name> <operator pos:line="226" pos:column="19">=<pos:position pos:line="226" pos:column="20"/></operator> <name pos:line="226" pos:column="21">sargv<pos:position pos:line="226" pos:column="26"/></name></expr>;<pos:position pos:line="226" pos:column="27"/></expr_stmt>
	<if pos:line="227" pos:column="9">if <condition pos:line="227" pos:column="12">(<expr><name pos:line="227" pos:column="13">fhin<pos:position pos:line="227" pos:column="17"/></name> <operator pos:line="227" pos:column="18">!=<pos:position pos:line="227" pos:column="20"/></operator> <literal type="number" pos:line="227" pos:column="21">0<pos:position pos:line="227" pos:column="22"/></literal></expr>)<pos:position pos:line="227" pos:column="23"/></condition><then pos:line="227" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="228" pos:column="17">close<pos:position pos:line="228" pos:column="22"/></name><argument_list pos:line="228" pos:column="22">(<argument><expr><name pos:line="228" pos:column="23">fhin<pos:position pos:line="228" pos:column="27"/></name></expr></argument>)<pos:position pos:line="228" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="29"/></expr_stmt></block></then></if>
	<if pos:line="229" pos:column="9">if <condition pos:line="229" pos:column="12">(<expr><name pos:line="229" pos:column="13">fhout<pos:position pos:line="229" pos:column="18"/></name> <operator pos:line="229" pos:column="19">!=<pos:position pos:line="229" pos:column="21"/></operator> <literal type="number" pos:line="229" pos:column="22">1<pos:position pos:line="229" pos:column="23"/></literal></expr>)<pos:position pos:line="229" pos:column="24"/></condition><then pos:line="229" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="230" pos:column="17">close<pos:position pos:line="230" pos:column="22"/></name><argument_list pos:line="230" pos:column="22">(<argument><expr><name pos:line="230" pos:column="23">fhout<pos:position pos:line="230" pos:column="28"/></name></expr></argument>)<pos:position pos:line="230" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="30"/></expr_stmt></block></then></if>
	<if pos:line="231" pos:column="9">if <condition pos:line="231" pos:column="12">(<expr><name pos:line="231" pos:column="13">fherr<pos:position pos:line="231" pos:column="18"/></name> <operator pos:line="231" pos:column="19">!=<pos:position pos:line="231" pos:column="21"/></operator> <literal type="number" pos:line="231" pos:column="22">2<pos:position pos:line="231" pos:column="23"/></literal></expr>)<pos:position pos:line="231" pos:column="24"/></condition><then pos:line="231" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="232" pos:column="17">close<pos:position pos:line="232" pos:column="22"/></name><argument_list pos:line="232" pos:column="22">(<argument><expr><name pos:line="232" pos:column="23">fherr<pos:position pos:line="232" pos:column="28"/></name></expr></argument>)<pos:position pos:line="232" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="30"/></expr_stmt></block></then></if>
}<pos:position pos:line="233" pos:column="2"/></block>
<cpp:endif pos:line="234" pos:column="1">#<cpp:directive pos:line="234" pos:column="2">endif<pos:position pos:line="234" pos:column="7"/></cpp:directive></cpp:endif>

	<if pos:line="236" pos:column="9">if <condition pos:line="236" pos:column="12">(<expr><name><name pos:line="236" pos:column="13">cmd<pos:position pos:line="236" pos:column="16"/></name><operator pos:line="236" pos:column="16">-&gt;<pos:position pos:line="236" pos:column="21"/></operator><name pos:line="236" pos:column="18">pid<pos:position pos:line="236" pos:column="21"/></name></name> <operator pos:line="236" pos:column="22">&lt;<pos:position pos:line="236" pos:column="26"/></operator> <literal type="number" pos:line="236" pos:column="24">0<pos:position pos:line="236" pos:column="25"/></literal></expr>)<pos:position pos:line="236" pos:column="26"/></condition><then pos:line="236" pos:column="26"> <block pos:line="236" pos:column="27">{
		<if pos:line="237" pos:column="17">if <condition pos:line="237" pos:column="20">(<expr><name pos:line="237" pos:column="21">need_in<pos:position pos:line="237" pos:column="28"/></name></expr>)<pos:position pos:line="237" pos:column="29"/></condition><then pos:line="237" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="238" pos:column="25">close_pair<pos:position pos:line="238" pos:column="35"/></name><argument_list pos:line="238" pos:column="35">(<argument><expr><name pos:line="238" pos:column="36">fdin<pos:position pos:line="238" pos:column="40"/></name></expr></argument>)<pos:position pos:line="238" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="42"/></expr_stmt></block></then>
		<elseif pos:line="239" pos:column="17">else <if pos:line="239" pos:column="22">if <condition pos:line="239" pos:column="25">(<expr><name><name pos:line="239" pos:column="26">cmd<pos:position pos:line="239" pos:column="29"/></name><operator pos:line="239" pos:column="29">-&gt;<pos:position pos:line="239" pos:column="34"/></operator><name pos:line="239" pos:column="31">in<pos:position pos:line="239" pos:column="33"/></name></name></expr>)<pos:position pos:line="239" pos:column="34"/></condition><then pos:line="239" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="240" pos:column="25">close<pos:position pos:line="240" pos:column="30"/></name><argument_list pos:line="240" pos:column="30">(<argument><expr><name><name pos:line="240" pos:column="31">cmd<pos:position pos:line="240" pos:column="34"/></name><operator pos:line="240" pos:column="34">-&gt;<pos:position pos:line="240" pos:column="39"/></operator><name pos:line="240" pos:column="36">in<pos:position pos:line="240" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="240" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="40"/></expr_stmt></block></then></if></elseif></if>
		<if pos:line="241" pos:column="17">if <condition pos:line="241" pos:column="20">(<expr><name pos:line="241" pos:column="21">need_out<pos:position pos:line="241" pos:column="29"/></name></expr>)<pos:position pos:line="241" pos:column="30"/></condition><then pos:line="241" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="242" pos:column="25">close_pair<pos:position pos:line="242" pos:column="35"/></name><argument_list pos:line="242" pos:column="35">(<argument><expr><name pos:line="242" pos:column="36">fdout<pos:position pos:line="242" pos:column="41"/></name></expr></argument>)<pos:position pos:line="242" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="43"/></expr_stmt></block></then>
		<elseif pos:line="243" pos:column="17">else <if pos:line="243" pos:column="22">if <condition pos:line="243" pos:column="25">(<expr><name><name pos:line="243" pos:column="26">cmd<pos:position pos:line="243" pos:column="29"/></name><operator pos:line="243" pos:column="29">-&gt;<pos:position pos:line="243" pos:column="34"/></operator><name pos:line="243" pos:column="31">out<pos:position pos:line="243" pos:column="34"/></name></name></expr>)<pos:position pos:line="243" pos:column="35"/></condition><then pos:line="243" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="244" pos:column="25">close<pos:position pos:line="244" pos:column="30"/></name><argument_list pos:line="244" pos:column="30">(<argument><expr><name><name pos:line="244" pos:column="31">cmd<pos:position pos:line="244" pos:column="34"/></name><operator pos:line="244" pos:column="34">-&gt;<pos:position pos:line="244" pos:column="39"/></operator><name pos:line="244" pos:column="36">out<pos:position pos:line="244" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="244" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="41"/></expr_stmt></block></then></if></elseif></if>
		<if pos:line="245" pos:column="17">if <condition pos:line="245" pos:column="20">(<expr><name pos:line="245" pos:column="21">need_err<pos:position pos:line="245" pos:column="29"/></name></expr>)<pos:position pos:line="245" pos:column="30"/></condition><then pos:line="245" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="246" pos:column="25">close_pair<pos:position pos:line="246" pos:column="35"/></name><argument_list pos:line="246" pos:column="35">(<argument><expr><name pos:line="246" pos:column="36">fderr<pos:position pos:line="246" pos:column="41"/></name></expr></argument>)<pos:position pos:line="246" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="43"/></expr_stmt></block></then>
		<elseif pos:line="247" pos:column="17">else <if pos:line="247" pos:column="22">if <condition pos:line="247" pos:column="25">(<expr><name><name pos:line="247" pos:column="26">cmd<pos:position pos:line="247" pos:column="29"/></name><operator pos:line="247" pos:column="29">-&gt;<pos:position pos:line="247" pos:column="34"/></operator><name pos:line="247" pos:column="31">err<pos:position pos:line="247" pos:column="34"/></name></name></expr>)<pos:position pos:line="247" pos:column="35"/></condition><then pos:line="247" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="248" pos:column="25">close<pos:position pos:line="248" pos:column="30"/></name><argument_list pos:line="248" pos:column="30">(<argument><expr><name><name pos:line="248" pos:column="31">cmd<pos:position pos:line="248" pos:column="34"/></name><operator pos:line="248" pos:column="34">-&gt;<pos:position pos:line="248" pos:column="39"/></operator><name pos:line="248" pos:column="36">err<pos:position pos:line="248" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="248" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="41"/></expr_stmt></block></then></if></elseif></if>
		<expr_stmt><expr><call><name pos:line="249" pos:column="17">argv_array_clear<pos:position pos:line="249" pos:column="33"/></name><argument_list pos:line="249" pos:column="33">(<argument><expr><operator pos:line="249" pos:column="34">&amp;<pos:position pos:line="249" pos:column="39"/></operator><name><name pos:line="249" pos:column="35">cmd<pos:position pos:line="249" pos:column="38"/></name><operator pos:line="249" pos:column="38">-&gt;<pos:position pos:line="249" pos:column="43"/></operator><name pos:line="249" pos:column="40">args<pos:position pos:line="249" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="249" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="250" pos:column="17">argv_array_clear<pos:position pos:line="250" pos:column="33"/></name><argument_list pos:line="250" pos:column="33">(<argument><expr><operator pos:line="250" pos:column="34">&amp;<pos:position pos:line="250" pos:column="39"/></operator><name><name pos:line="250" pos:column="35">cmd<pos:position pos:line="250" pos:column="38"/></name><operator pos:line="250" pos:column="38">-&gt;<pos:position pos:line="250" pos:column="43"/></operator><name pos:line="250" pos:column="40">env_array<pos:position pos:line="250" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="250" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name pos:line="251" pos:column="17">errno<pos:position pos:line="251" pos:column="22"/></name> <operator pos:line="251" pos:column="23">=<pos:position pos:line="251" pos:column="24"/></operator> <name pos:line="251" pos:column="25">failed_errno<pos:position pos:line="251" pos:column="37"/></name></expr>;<pos:position pos:line="251" pos:column="38"/></expr_stmt>
		<return pos:line="252" pos:column="17">return <expr><operator pos:line="252" pos:column="24">-<pos:position pos:line="252" pos:column="25"/></operator><literal type="number" pos:line="252" pos:column="25">1<pos:position pos:line="252" pos:column="26"/></literal></expr>;<pos:position pos:line="252" pos:column="27"/></return>
	}<pos:position pos:line="253" pos:column="10"/></block></then></if>

	<if pos:line="255" pos:column="9">if <condition pos:line="255" pos:column="12">(<expr><name pos:line="255" pos:column="13">need_in<pos:position pos:line="255" pos:column="20"/></name></expr>)<pos:position pos:line="255" pos:column="21"/></condition><then pos:line="255" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="256" pos:column="17">close<pos:position pos:line="256" pos:column="22"/></name><argument_list pos:line="256" pos:column="22">(<argument><expr><name><name pos:line="256" pos:column="23">fdin<pos:position pos:line="256" pos:column="27"/></name><index pos:line="256" pos:column="27">[<expr><literal type="number" pos:line="256" pos:column="28">0<pos:position pos:line="256" pos:column="29"/></literal></expr>]<pos:position pos:line="256" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="256" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="32"/></expr_stmt></block></then>
	<elseif pos:line="257" pos:column="9">else <if pos:line="257" pos:column="14">if <condition pos:line="257" pos:column="17">(<expr><name><name pos:line="257" pos:column="18">cmd<pos:position pos:line="257" pos:column="21"/></name><operator pos:line="257" pos:column="21">-&gt;<pos:position pos:line="257" pos:column="26"/></operator><name pos:line="257" pos:column="23">in<pos:position pos:line="257" pos:column="25"/></name></name></expr>)<pos:position pos:line="257" pos:column="26"/></condition><then pos:line="257" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="258" pos:column="17">close<pos:position pos:line="258" pos:column="22"/></name><argument_list pos:line="258" pos:column="22">(<argument><expr><name><name pos:line="258" pos:column="23">cmd<pos:position pos:line="258" pos:column="26"/></name><operator pos:line="258" pos:column="26">-&gt;<pos:position pos:line="258" pos:column="31"/></operator><name pos:line="258" pos:column="28">in<pos:position pos:line="258" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="258" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="32"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="260" pos:column="9">if <condition pos:line="260" pos:column="12">(<expr><name pos:line="260" pos:column="13">need_out<pos:position pos:line="260" pos:column="21"/></name></expr>)<pos:position pos:line="260" pos:column="22"/></condition><then pos:line="260" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="261" pos:column="17">close<pos:position pos:line="261" pos:column="22"/></name><argument_list pos:line="261" pos:column="22">(<argument><expr><name><name pos:line="261" pos:column="23">fdout<pos:position pos:line="261" pos:column="28"/></name><index pos:line="261" pos:column="28">[<expr><literal type="number" pos:line="261" pos:column="29">1<pos:position pos:line="261" pos:column="30"/></literal></expr>]<pos:position pos:line="261" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="261" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="261" pos:column="33"/></expr_stmt></block></then>
	<elseif pos:line="262" pos:column="9">else <if pos:line="262" pos:column="14">if <condition pos:line="262" pos:column="17">(<expr><name><name pos:line="262" pos:column="18">cmd<pos:position pos:line="262" pos:column="21"/></name><operator pos:line="262" pos:column="21">-&gt;<pos:position pos:line="262" pos:column="26"/></operator><name pos:line="262" pos:column="23">out<pos:position pos:line="262" pos:column="26"/></name></name></expr>)<pos:position pos:line="262" pos:column="27"/></condition><then pos:line="262" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="263" pos:column="17">close<pos:position pos:line="263" pos:column="22"/></name><argument_list pos:line="263" pos:column="22">(<argument><expr><name><name pos:line="263" pos:column="23">cmd<pos:position pos:line="263" pos:column="26"/></name><operator pos:line="263" pos:column="26">-&gt;<pos:position pos:line="263" pos:column="31"/></operator><name pos:line="263" pos:column="28">out<pos:position pos:line="263" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="263" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="33"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="265" pos:column="9">if <condition pos:line="265" pos:column="12">(<expr><name pos:line="265" pos:column="13">need_err<pos:position pos:line="265" pos:column="21"/></name></expr>)<pos:position pos:line="265" pos:column="22"/></condition><then pos:line="265" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="266" pos:column="17">close<pos:position pos:line="266" pos:column="22"/></name><argument_list pos:line="266" pos:column="22">(<argument><expr><name><name pos:line="266" pos:column="23">fderr<pos:position pos:line="266" pos:column="28"/></name><index pos:line="266" pos:column="28">[<expr><literal type="number" pos:line="266" pos:column="29">1<pos:position pos:line="266" pos:column="30"/></literal></expr>]<pos:position pos:line="266" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="266" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="266" pos:column="33"/></expr_stmt></block></then>
	<elseif pos:line="267" pos:column="9">else <if pos:line="267" pos:column="14">if <condition pos:line="267" pos:column="17">(<expr><name><name pos:line="267" pos:column="18">cmd<pos:position pos:line="267" pos:column="21"/></name><operator pos:line="267" pos:column="21">-&gt;<pos:position pos:line="267" pos:column="26"/></operator><name pos:line="267" pos:column="23">err<pos:position pos:line="267" pos:column="26"/></name></name></expr>)<pos:position pos:line="267" pos:column="27"/></condition><then pos:line="267" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="268" pos:column="17">close<pos:position pos:line="268" pos:column="22"/></name><argument_list pos:line="268" pos:column="22">(<argument><expr><name><name pos:line="268" pos:column="23">cmd<pos:position pos:line="268" pos:column="26"/></name><operator pos:line="268" pos:column="26">-&gt;<pos:position pos:line="268" pos:column="31"/></operator><name pos:line="268" pos:column="28">err<pos:position pos:line="268" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="268" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="268" pos:column="33"/></expr_stmt></block></then></if></elseif></if>

	<return pos:line="270" pos:column="9">return <expr><literal type="number" pos:line="270" pos:column="16">0<pos:position pos:line="270" pos:column="17"/></literal></expr>;<pos:position pos:line="270" pos:column="18"/></return>
}<pos:position pos:line="271" pos:column="2"/></block></function></unit>
