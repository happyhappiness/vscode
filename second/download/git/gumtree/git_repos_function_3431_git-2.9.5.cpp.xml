<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3431_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">child_process<pos:position pos:line="1" pos:column="28"/></name></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">get_helper<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">transport<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">transport<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">helper_data<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">data<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><name><name pos:line="3" pos:column="36">transport<pos:position pos:line="3" pos:column="45"/></name><operator pos:line="3" pos:column="45">-&gt;<pos:position pos:line="3" pos:column="50"/></operator><name pos:line="3" pos:column="47">data<pos:position pos:line="3" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">buf<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">STRBUF_INIT<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">child_process<pos:position pos:line="5" pos:column="29"/></name></name> <modifier pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></modifier></type><name pos:line="5" pos:column="31">helper<pos:position pos:line="5" pos:column="37"/></name></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier><modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">refspecs<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><name pos:line="6" pos:column="33">NULL<pos:position pos:line="6" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">refspec_nr<pos:position pos:line="7" pos:column="23"/></name> <init pos:line="7" pos:column="24">= <expr><literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">refspec_alloc<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><literal type="number" pos:line="8" pos:column="29">0<pos:position pos:line="8" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">duped<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">code<pos:position pos:line="10" pos:column="17"/></name></decl>;<pos:position pos:line="10" pos:column="18"/></decl_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">data<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">-&gt;<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="19">helper<pos:position pos:line="12" pos:column="25"/></name></name></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26">
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><name><name pos:line="13" pos:column="24">data<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">-&gt;<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="30">helper<pos:position pos:line="13" pos:column="36"/></name></name></expr>;<pos:position pos:line="13" pos:column="37"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="15" pos:column="9">helper<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <call><name pos:line="15" pos:column="18">xmalloc<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><sizeof pos:line="15" pos:column="26">sizeof<argument_list pos:line="15" pos:column="32">(<argument><expr><operator pos:line="15" pos:column="33">*<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">helper<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">child_process_init<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">helper<pos:position pos:line="16" pos:column="34"/></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">helper<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">-&gt;<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="17">in<pos:position pos:line="17" pos:column="19"/></name></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <operator pos:line="17" pos:column="22">-<pos:position pos:line="17" pos:column="23"/></operator><literal type="number" pos:line="17" pos:column="23">1<pos:position pos:line="17" pos:column="24"/></literal></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">helper<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">out<pos:position pos:line="18" pos:column="20"/></name></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <operator pos:line="18" pos:column="23">-<pos:position pos:line="18" pos:column="24"/></operator><literal type="number" pos:line="18" pos:column="24">1<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">helper<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">-&gt;<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="17">err<pos:position pos:line="19" pos:column="20"/></name></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <literal type="number" pos:line="19" pos:column="23">0<pos:position pos:line="19" pos:column="24"/></literal></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">argv_array_pushf<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><operator pos:line="20" pos:column="26">&amp;<pos:position pos:line="20" pos:column="31"/></operator><name><name pos:line="20" pos:column="27">helper<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">-&gt;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="35">args<pos:position pos:line="20" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="41">"git-remote-%s"<pos:position pos:line="20" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="58">data<pos:position pos:line="20" pos:column="62"/></name><operator pos:line="20" pos:column="62">-&gt;<pos:position pos:line="20" pos:column="67"/></operator><name pos:line="20" pos:column="64">name<pos:position pos:line="20" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="70"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">argv_array_push<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><operator pos:line="21" pos:column="25">&amp;<pos:position pos:line="21" pos:column="30"/></operator><name><name pos:line="21" pos:column="26">helper<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">-&gt;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="34">args<pos:position pos:line="21" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="40">transport<pos:position pos:line="21" pos:column="49"/></name><operator pos:line="21" pos:column="49">-&gt;<pos:position pos:line="21" pos:column="54"/></operator><name pos:line="21" pos:column="51">remote<pos:position pos:line="21" pos:column="57"/></name><operator pos:line="21" pos:column="57">-&gt;<pos:position pos:line="21" pos:column="62"/></operator><name pos:line="21" pos:column="59">name<pos:position pos:line="21" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">argv_array_push<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><operator pos:line="22" pos:column="25">&amp;<pos:position pos:line="22" pos:column="30"/></operator><name><name pos:line="22" pos:column="26">helper<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">-&gt;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="34">args<pos:position pos:line="22" pos:column="38"/></name></name></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="40">remove_ext_force<pos:position pos:line="22" pos:column="56"/></name><argument_list pos:line="22" pos:column="56">(<argument><expr><name><name pos:line="22" pos:column="57">transport<pos:position pos:line="22" pos:column="66"/></name><operator pos:line="22" pos:column="66">-&gt;<pos:position pos:line="22" pos:column="71"/></operator><name pos:line="22" pos:column="68">url<pos:position pos:line="22" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="74"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">helper<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">-&gt;<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="17">git_cmd<pos:position pos:line="23" pos:column="24"/></name></name> <operator pos:line="23" pos:column="25">=<pos:position pos:line="23" pos:column="26"/></operator> <literal type="number" pos:line="23" pos:column="27">0<pos:position pos:line="23" pos:column="28"/></literal></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">helper<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">silent_exec_failure<pos:position pos:line="24" pos:column="36"/></name></name> <operator pos:line="24" pos:column="37">=<pos:position pos:line="24" pos:column="38"/></operator> <literal type="number" pos:line="24" pos:column="39">1<pos:position pos:line="24" pos:column="40"/></literal></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="26" pos:column="9">argv_array_pushf<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">(<argument><expr><operator pos:line="26" pos:column="26">&amp;<pos:position pos:line="26" pos:column="31"/></operator><name><name pos:line="26" pos:column="27">helper<pos:position pos:line="26" pos:column="33"/></name><operator pos:line="26" pos:column="33">-&gt;<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="35">env_array<pos:position pos:line="26" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="46">"%s=%s"<pos:position pos:line="26" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="55">GIT_DIR_ENVIRONMENT<pos:position pos:line="26" pos:column="74"/></name></expr></argument>,
			 <argument><expr><call><name pos:line="27" pos:column="26">get_git_dir<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">()<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><name pos:line="29" pos:column="9">code<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <call><name pos:line="29" pos:column="16">start_command<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">helper<pos:position pos:line="29" pos:column="36"/></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">code<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">&lt;<pos:position pos:line="30" pos:column="22"/></operator> <literal type="number" pos:line="30" pos:column="20">0<pos:position pos:line="30" pos:column="21"/></literal> <operator pos:line="30" pos:column="22">&amp;&amp;<pos:position pos:line="30" pos:column="32"/></operator> <name pos:line="30" pos:column="25">errno<pos:position pos:line="30" pos:column="30"/></name> <operator pos:line="30" pos:column="31">==<pos:position pos:line="30" pos:column="33"/></operator> <name pos:line="30" pos:column="34">ENOENT<pos:position pos:line="30" pos:column="40"/></name></expr>)<pos:position pos:line="30" pos:column="41"/></condition><then pos:line="30" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="17">die<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><literal type="string" pos:line="31" pos:column="21">"Unable to find remote helper for '%s'"<pos:position pos:line="31" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="62">data<pos:position pos:line="31" pos:column="66"/></name><operator pos:line="31" pos:column="66">-&gt;<pos:position pos:line="31" pos:column="71"/></operator><name pos:line="31" pos:column="68">name<pos:position pos:line="31" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="74"/></expr_stmt></block></then>
	<elseif pos:line="32" pos:column="9">else <if pos:line="32" pos:column="14">if <condition pos:line="32" pos:column="17">(<expr><name pos:line="32" pos:column="18">code<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">!=<pos:position pos:line="32" pos:column="25"/></operator> <literal type="number" pos:line="32" pos:column="26">0<pos:position pos:line="32" pos:column="27"/></literal></expr>)<pos:position pos:line="32" pos:column="28"/></condition><then pos:line="32" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="17">exit<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">code<pos:position pos:line="33" pos:column="26"/></name></expr></argument>)<pos:position pos:line="33" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt></block></then></if></elseif></if>

	<expr_stmt><expr><name><name pos:line="35" pos:column="9">data<pos:position pos:line="35" pos:column="13"/></name><operator pos:line="35" pos:column="13">-&gt;<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="15">helper<pos:position pos:line="35" pos:column="21"/></name></name> <operator pos:line="35" pos:column="22">=<pos:position pos:line="35" pos:column="23"/></operator> <name pos:line="35" pos:column="24">helper<pos:position pos:line="35" pos:column="30"/></name></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="36" pos:column="9">data<pos:position pos:line="36" pos:column="13"/></name><operator pos:line="36" pos:column="13">-&gt;<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="15">no_disconnect_req<pos:position pos:line="36" pos:column="32"/></name></name> <operator pos:line="36" pos:column="33">=<pos:position pos:line="36" pos:column="34"/></operator> <literal type="number" pos:line="36" pos:column="35">0<pos:position pos:line="36" pos:column="36"/></literal></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>

	<comment type="block" pos:line="38" pos:column="9">/*
	 * Open the output as FILE* so strbuf_getline_*() family of
	 * functions can be used.
	 * Do this with duped fd because fclose() will close the fd,
	 * and stuff like taking over will require the fd to remain.
	 */</comment>
	<expr_stmt><expr><name pos:line="44" pos:column="9">duped<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">=<pos:position pos:line="44" pos:column="16"/></operator> <call><name pos:line="44" pos:column="17">dup<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><name><name pos:line="44" pos:column="21">helper<pos:position pos:line="44" pos:column="27"/></name><operator pos:line="44" pos:column="27">-&gt;<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="29">out<pos:position pos:line="44" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">duped<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">&lt;<pos:position pos:line="45" pos:column="23"/></operator> <literal type="number" pos:line="45" pos:column="21">0<pos:position pos:line="45" pos:column="22"/></literal></expr>)<pos:position pos:line="45" pos:column="23"/></condition><then pos:line="45" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="17">die_errno<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><literal type="string" pos:line="46" pos:column="27">"Can't dup helper output fd"<pos:position pos:line="46" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="57"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="47" pos:column="9">data<pos:position pos:line="47" pos:column="13"/></name><operator pos:line="47" pos:column="13">-&gt;<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="15">out<pos:position pos:line="47" pos:column="18"/></name></name> <operator pos:line="47" pos:column="19">=<pos:position pos:line="47" pos:column="20"/></operator> <call><name pos:line="47" pos:column="21">xfdopen<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name pos:line="47" pos:column="29">duped<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="36">"r"<pos:position pos:line="47" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="49" pos:column="9">write_constant<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><name><name pos:line="49" pos:column="24">helper<pos:position pos:line="49" pos:column="30"/></name><operator pos:line="49" pos:column="30">-&gt;<pos:position pos:line="49" pos:column="35"/></operator><name pos:line="49" pos:column="32">in<pos:position pos:line="49" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="36">"capabilities\n"<pos:position pos:line="49" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="54"/></expr_stmt>

	<while pos:line="51" pos:column="9">while <condition pos:line="51" pos:column="15">(<expr><literal type="number" pos:line="51" pos:column="16">1<pos:position pos:line="51" pos:column="17"/></literal></expr>)<pos:position pos:line="51" pos:column="18"/></condition> <block pos:line="51" pos:column="19">{
		<decl_stmt><decl><type><specifier pos:line="52" pos:column="17">const<pos:position pos:line="52" pos:column="22"/></specifier> <name pos:line="52" pos:column="23">char<pos:position pos:line="52" pos:column="27"/></name> <modifier pos:line="52" pos:column="28">*<pos:position pos:line="52" pos:column="29"/></modifier></type><name pos:line="52" pos:column="29">capname<pos:position pos:line="52" pos:column="36"/></name></decl>, <modifier pos:line="52" pos:column="38">*<pos:position pos:line="52" pos:column="39"/></modifier><decl><type ref="prev"/><name pos:line="52" pos:column="39">arg<pos:position pos:line="52" pos:column="42"/></name></decl>;<pos:position pos:line="52" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="53" pos:column="17">int<pos:position pos:line="53" pos:column="20"/></name></type> <name pos:line="53" pos:column="21">mandatory<pos:position pos:line="53" pos:column="30"/></name> <init pos:line="53" pos:column="31">= <expr><literal type="number" pos:line="53" pos:column="33">0<pos:position pos:line="53" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="53" pos:column="35"/></decl_stmt>
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><call><name pos:line="54" pos:column="21">recvline<pos:position pos:line="54" pos:column="29"/></name><argument_list pos:line="54" pos:column="29">(<argument><expr><name pos:line="54" pos:column="30">data<pos:position pos:line="54" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="36">&amp;<pos:position pos:line="54" pos:column="41"/></operator><name pos:line="54" pos:column="37">buf<pos:position pos:line="54" pos:column="40"/></name></expr></argument>)<pos:position pos:line="54" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="42"/></condition><then pos:line="54" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="25">exit<pos:position pos:line="55" pos:column="29"/></name><argument_list pos:line="55" pos:column="29">(<argument><expr><literal type="number" pos:line="55" pos:column="30">128<pos:position pos:line="55" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="35"/></expr_stmt></block></then></if>

		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><operator pos:line="57" pos:column="21">!<pos:position pos:line="57" pos:column="22"/></operator><operator pos:line="57" pos:column="22">*<pos:position pos:line="57" pos:column="23"/></operator><name><name pos:line="57" pos:column="23">buf<pos:position pos:line="57" pos:column="26"/></name><operator pos:line="57" pos:column="26">.<pos:position pos:line="57" pos:column="27"/></operator><name pos:line="57" pos:column="27">buf<pos:position pos:line="57" pos:column="30"/></name></name></expr>)<pos:position pos:line="57" pos:column="31"/></condition><then pos:line="57" pos:column="31">
			<block type="pseudo"><break pos:line="58" pos:column="25">break;<pos:position pos:line="58" pos:column="31"/></break></block></then></if>

		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><operator pos:line="60" pos:column="21">*<pos:position pos:line="60" pos:column="22"/></operator><name><name pos:line="60" pos:column="22">buf<pos:position pos:line="60" pos:column="25"/></name><operator pos:line="60" pos:column="25">.<pos:position pos:line="60" pos:column="26"/></operator><name pos:line="60" pos:column="26">buf<pos:position pos:line="60" pos:column="29"/></name></name> <operator pos:line="60" pos:column="30">==<pos:position pos:line="60" pos:column="32"/></operator> <literal type="char" pos:line="60" pos:column="33">'*'<pos:position pos:line="60" pos:column="36"/></literal></expr>)<pos:position pos:line="60" pos:column="37"/></condition><then pos:line="60" pos:column="37"> <block pos:line="60" pos:column="38">{
			<expr_stmt><expr><name pos:line="61" pos:column="25">capname<pos:position pos:line="61" pos:column="32"/></name> <operator pos:line="61" pos:column="33">=<pos:position pos:line="61" pos:column="34"/></operator> <name><name pos:line="61" pos:column="35">buf<pos:position pos:line="61" pos:column="38"/></name><operator pos:line="61" pos:column="38">.<pos:position pos:line="61" pos:column="39"/></operator><name pos:line="61" pos:column="39">buf<pos:position pos:line="61" pos:column="42"/></name></name> <operator pos:line="61" pos:column="43">+<pos:position pos:line="61" pos:column="44"/></operator> <literal type="number" pos:line="61" pos:column="45">1<pos:position pos:line="61" pos:column="46"/></literal></expr>;<pos:position pos:line="61" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="62" pos:column="25">mandatory<pos:position pos:line="62" pos:column="34"/></name> <operator pos:line="62" pos:column="35">=<pos:position pos:line="62" pos:column="36"/></operator> <literal type="number" pos:line="62" pos:column="37">1<pos:position pos:line="62" pos:column="38"/></literal></expr>;<pos:position pos:line="62" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="63" pos:column="18"/></block></then> <else pos:line="63" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="25">capname<pos:position pos:line="64" pos:column="32"/></name> <operator pos:line="64" pos:column="33">=<pos:position pos:line="64" pos:column="34"/></operator> <name><name pos:line="64" pos:column="35">buf<pos:position pos:line="64" pos:column="38"/></name><operator pos:line="64" pos:column="38">.<pos:position pos:line="64" pos:column="39"/></operator><name pos:line="64" pos:column="39">buf<pos:position pos:line="64" pos:column="42"/></name></name></expr>;<pos:position pos:line="64" pos:column="43"/></expr_stmt></block></else></if>

		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">debug<pos:position pos:line="66" pos:column="26"/></name></expr>)<pos:position pos:line="66" pos:column="27"/></condition><then pos:line="66" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="25">fprintf<pos:position pos:line="67" pos:column="32"/></name><argument_list pos:line="67" pos:column="32">(<argument><expr><name pos:line="67" pos:column="33">stderr<pos:position pos:line="67" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="41">"Debug: Got cap %s\n"<pos:position pos:line="67" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="64">capname<pos:position pos:line="67" pos:column="71"/></name></expr></argument>)<pos:position pos:line="67" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="73"/></expr_stmt></block></then></if>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><operator pos:line="68" pos:column="21">!<pos:position pos:line="68" pos:column="22"/></operator><call><name pos:line="68" pos:column="22">strcmp<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><name pos:line="68" pos:column="29">capname<pos:position pos:line="68" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="38">"fetch"<pos:position pos:line="68" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="47"/></condition><then pos:line="68" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="69" pos:column="25">data<pos:position pos:line="69" pos:column="29"/></name><operator pos:line="69" pos:column="29">-&gt;<pos:position pos:line="69" pos:column="34"/></operator><name pos:line="69" pos:column="31">fetch<pos:position pos:line="69" pos:column="36"/></name></name> <operator pos:line="69" pos:column="37">=<pos:position pos:line="69" pos:column="38"/></operator> <literal type="number" pos:line="69" pos:column="39">1<pos:position pos:line="69" pos:column="40"/></literal></expr>;<pos:position pos:line="69" pos:column="41"/></expr_stmt></block></then>
		<elseif pos:line="70" pos:column="17">else <if pos:line="70" pos:column="22">if <condition pos:line="70" pos:column="25">(<expr><operator pos:line="70" pos:column="26">!<pos:position pos:line="70" pos:column="27"/></operator><call><name pos:line="70" pos:column="27">strcmp<pos:position pos:line="70" pos:column="33"/></name><argument_list pos:line="70" pos:column="33">(<argument><expr><name pos:line="70" pos:column="34">capname<pos:position pos:line="70" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="43">"option"<pos:position pos:line="70" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="53"/></condition><then pos:line="70" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="71" pos:column="25">data<pos:position pos:line="71" pos:column="29"/></name><operator pos:line="71" pos:column="29">-&gt;<pos:position pos:line="71" pos:column="34"/></operator><name pos:line="71" pos:column="31">option<pos:position pos:line="71" pos:column="37"/></name></name> <operator pos:line="71" pos:column="38">=<pos:position pos:line="71" pos:column="39"/></operator> <literal type="number" pos:line="71" pos:column="40">1<pos:position pos:line="71" pos:column="41"/></literal></expr>;<pos:position pos:line="71" pos:column="42"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="72" pos:column="17">else <if pos:line="72" pos:column="22">if <condition pos:line="72" pos:column="25">(<expr><operator pos:line="72" pos:column="26">!<pos:position pos:line="72" pos:column="27"/></operator><call><name pos:line="72" pos:column="27">strcmp<pos:position pos:line="72" pos:column="33"/></name><argument_list pos:line="72" pos:column="33">(<argument><expr><name pos:line="72" pos:column="34">capname<pos:position pos:line="72" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="43">"push"<pos:position pos:line="72" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="51"/></condition><then pos:line="72" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="73" pos:column="25">data<pos:position pos:line="73" pos:column="29"/></name><operator pos:line="73" pos:column="29">-&gt;<pos:position pos:line="73" pos:column="34"/></operator><name pos:line="73" pos:column="31">push<pos:position pos:line="73" pos:column="35"/></name></name> <operator pos:line="73" pos:column="36">=<pos:position pos:line="73" pos:column="37"/></operator> <literal type="number" pos:line="73" pos:column="38">1<pos:position pos:line="73" pos:column="39"/></literal></expr>;<pos:position pos:line="73" pos:column="40"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="74" pos:column="17">else <if pos:line="74" pos:column="22">if <condition pos:line="74" pos:column="25">(<expr><operator pos:line="74" pos:column="26">!<pos:position pos:line="74" pos:column="27"/></operator><call><name pos:line="74" pos:column="27">strcmp<pos:position pos:line="74" pos:column="33"/></name><argument_list pos:line="74" pos:column="33">(<argument><expr><name pos:line="74" pos:column="34">capname<pos:position pos:line="74" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="43">"import"<pos:position pos:line="74" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="53"/></condition><then pos:line="74" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="75" pos:column="25">data<pos:position pos:line="75" pos:column="29"/></name><operator pos:line="75" pos:column="29">-&gt;<pos:position pos:line="75" pos:column="34"/></operator><name pos:line="75" pos:column="31">import<pos:position pos:line="75" pos:column="37"/></name></name> <operator pos:line="75" pos:column="38">=<pos:position pos:line="75" pos:column="39"/></operator> <literal type="number" pos:line="75" pos:column="40">1<pos:position pos:line="75" pos:column="41"/></literal></expr>;<pos:position pos:line="75" pos:column="42"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="76" pos:column="17">else <if pos:line="76" pos:column="22">if <condition pos:line="76" pos:column="25">(<expr><operator pos:line="76" pos:column="26">!<pos:position pos:line="76" pos:column="27"/></operator><call><name pos:line="76" pos:column="27">strcmp<pos:position pos:line="76" pos:column="33"/></name><argument_list pos:line="76" pos:column="33">(<argument><expr><name pos:line="76" pos:column="34">capname<pos:position pos:line="76" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="43">"bidi-import"<pos:position pos:line="76" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="58"/></condition><then pos:line="76" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="77" pos:column="25">data<pos:position pos:line="77" pos:column="29"/></name><operator pos:line="77" pos:column="29">-&gt;<pos:position pos:line="77" pos:column="34"/></operator><name pos:line="77" pos:column="31">bidi_import<pos:position pos:line="77" pos:column="42"/></name></name> <operator pos:line="77" pos:column="43">=<pos:position pos:line="77" pos:column="44"/></operator> <literal type="number" pos:line="77" pos:column="45">1<pos:position pos:line="77" pos:column="46"/></literal></expr>;<pos:position pos:line="77" pos:column="47"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="78" pos:column="17">else <if pos:line="78" pos:column="22">if <condition pos:line="78" pos:column="25">(<expr><operator pos:line="78" pos:column="26">!<pos:position pos:line="78" pos:column="27"/></operator><call><name pos:line="78" pos:column="27">strcmp<pos:position pos:line="78" pos:column="33"/></name><argument_list pos:line="78" pos:column="33">(<argument><expr><name pos:line="78" pos:column="34">capname<pos:position pos:line="78" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="43">"export"<pos:position pos:line="78" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="53"/></condition><then pos:line="78" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="79" pos:column="25">data<pos:position pos:line="79" pos:column="29"/></name><operator pos:line="79" pos:column="29">-&gt;<pos:position pos:line="79" pos:column="34"/></operator><name pos:line="79" pos:column="31">export<pos:position pos:line="79" pos:column="37"/></name></name> <operator pos:line="79" pos:column="38">=<pos:position pos:line="79" pos:column="39"/></operator> <literal type="number" pos:line="79" pos:column="40">1<pos:position pos:line="79" pos:column="41"/></literal></expr>;<pos:position pos:line="79" pos:column="42"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="80" pos:column="17">else <if pos:line="80" pos:column="22">if <condition pos:line="80" pos:column="25">(<expr><operator pos:line="80" pos:column="26">!<pos:position pos:line="80" pos:column="27"/></operator><call><name pos:line="80" pos:column="27">strcmp<pos:position pos:line="80" pos:column="33"/></name><argument_list pos:line="80" pos:column="33">(<argument><expr><name pos:line="80" pos:column="34">capname<pos:position pos:line="80" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="43">"check-connectivity"<pos:position pos:line="80" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="65"/></condition><then pos:line="80" pos:column="65">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="81" pos:column="25">data<pos:position pos:line="81" pos:column="29"/></name><operator pos:line="81" pos:column="29">-&gt;<pos:position pos:line="81" pos:column="34"/></operator><name pos:line="81" pos:column="31">check_connectivity<pos:position pos:line="81" pos:column="49"/></name></name> <operator pos:line="81" pos:column="50">=<pos:position pos:line="81" pos:column="51"/></operator> <literal type="number" pos:line="81" pos:column="52">1<pos:position pos:line="81" pos:column="53"/></literal></expr>;<pos:position pos:line="81" pos:column="54"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="82" pos:column="17">else <if pos:line="82" pos:column="22">if <condition pos:line="82" pos:column="25">(<expr><operator pos:line="82" pos:column="26">!<pos:position pos:line="82" pos:column="27"/></operator><name><name pos:line="82" pos:column="27">data<pos:position pos:line="82" pos:column="31"/></name><operator pos:line="82" pos:column="31">-&gt;<pos:position pos:line="82" pos:column="36"/></operator><name pos:line="82" pos:column="33">refspecs<pos:position pos:line="82" pos:column="41"/></name></name> <operator pos:line="82" pos:column="42">&amp;&amp;<pos:position pos:line="82" pos:column="52"/></operator> <call><name pos:line="82" pos:column="45">skip_prefix<pos:position pos:line="82" pos:column="56"/></name><argument_list pos:line="82" pos:column="56">(<argument><expr><name pos:line="82" pos:column="57">capname<pos:position pos:line="82" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="66">"refspec "<pos:position pos:line="82" pos:column="76"/></literal></expr></argument>, <argument><expr><operator pos:line="82" pos:column="78">&amp;<pos:position pos:line="82" pos:column="83"/></operator><name pos:line="82" pos:column="79">arg<pos:position pos:line="82" pos:column="82"/></name></expr></argument>)<pos:position pos:line="82" pos:column="83"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="84"/></condition><then pos:line="82" pos:column="84"> <block pos:line="82" pos:column="85">{
			<expr_stmt><expr><call><name pos:line="83" pos:column="25">ALLOC_GROW<pos:position pos:line="83" pos:column="35"/></name><argument_list pos:line="83" pos:column="35">(<argument><expr><name pos:line="83" pos:column="36">refspecs<pos:position pos:line="83" pos:column="44"/></name></expr></argument>,
				   <argument><expr><name pos:line="84" pos:column="36">refspec_nr<pos:position pos:line="84" pos:column="46"/></name> <operator pos:line="84" pos:column="47">+<pos:position pos:line="84" pos:column="48"/></operator> <literal type="number" pos:line="84" pos:column="49">1<pos:position pos:line="84" pos:column="50"/></literal></expr></argument>,
				   <argument><expr><name pos:line="85" pos:column="36">refspec_alloc<pos:position pos:line="85" pos:column="49"/></name></expr></argument>)<pos:position pos:line="85" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="86" pos:column="25">refspecs<pos:position pos:line="86" pos:column="33"/></name><index pos:line="86" pos:column="33">[<expr><name pos:line="86" pos:column="34">refspec_nr<pos:position pos:line="86" pos:column="44"/></name><operator pos:line="86" pos:column="44">++<pos:position pos:line="86" pos:column="46"/></operator></expr>]<pos:position pos:line="86" pos:column="47"/></index></name> <operator pos:line="86" pos:column="48">=<pos:position pos:line="86" pos:column="49"/></operator> <call><name pos:line="86" pos:column="50">xstrdup<pos:position pos:line="86" pos:column="57"/></name><argument_list pos:line="86" pos:column="57">(<argument><expr><name pos:line="86" pos:column="58">arg<pos:position pos:line="86" pos:column="61"/></name></expr></argument>)<pos:position pos:line="86" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="63"/></expr_stmt>
		}<pos:position pos:line="87" pos:column="18"/></block></then></if></elseif> <elseif pos:line="87" pos:column="19">else <if pos:line="87" pos:column="24">if <condition pos:line="87" pos:column="27">(<expr><operator pos:line="87" pos:column="28">!<pos:position pos:line="87" pos:column="29"/></operator><call><name pos:line="87" pos:column="29">strcmp<pos:position pos:line="87" pos:column="35"/></name><argument_list pos:line="87" pos:column="35">(<argument><expr><name pos:line="87" pos:column="36">capname<pos:position pos:line="87" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="45">"connect"<pos:position pos:line="87" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="56"/></condition><then pos:line="87" pos:column="56"> <block pos:line="87" pos:column="57">{
			<expr_stmt><expr><name><name pos:line="88" pos:column="25">data<pos:position pos:line="88" pos:column="29"/></name><operator pos:line="88" pos:column="29">-&gt;<pos:position pos:line="88" pos:column="34"/></operator><name pos:line="88" pos:column="31">connect<pos:position pos:line="88" pos:column="38"/></name></name> <operator pos:line="88" pos:column="39">=<pos:position pos:line="88" pos:column="40"/></operator> <literal type="number" pos:line="88" pos:column="41">1<pos:position pos:line="88" pos:column="42"/></literal></expr>;<pos:position pos:line="88" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="89" pos:column="18"/></block></then></if></elseif> <elseif pos:line="89" pos:column="19">else <if pos:line="89" pos:column="24">if <condition pos:line="89" pos:column="27">(<expr><operator pos:line="89" pos:column="28">!<pos:position pos:line="89" pos:column="29"/></operator><call><name pos:line="89" pos:column="29">strcmp<pos:position pos:line="89" pos:column="35"/></name><argument_list pos:line="89" pos:column="35">(<argument><expr><name pos:line="89" pos:column="36">capname<pos:position pos:line="89" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="45">"signed-tags"<pos:position pos:line="89" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="60"/></condition><then pos:line="89" pos:column="60"> <block pos:line="89" pos:column="61">{
			<expr_stmt><expr><name><name pos:line="90" pos:column="25">data<pos:position pos:line="90" pos:column="29"/></name><operator pos:line="90" pos:column="29">-&gt;<pos:position pos:line="90" pos:column="34"/></operator><name pos:line="90" pos:column="31">signed_tags<pos:position pos:line="90" pos:column="42"/></name></name> <operator pos:line="90" pos:column="43">=<pos:position pos:line="90" pos:column="44"/></operator> <literal type="number" pos:line="90" pos:column="45">1<pos:position pos:line="90" pos:column="46"/></literal></expr>;<pos:position pos:line="90" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="91" pos:column="18"/></block></then></if></elseif> <elseif pos:line="91" pos:column="19">else <if pos:line="91" pos:column="24">if <condition pos:line="91" pos:column="27">(<expr><call><name pos:line="91" pos:column="28">skip_prefix<pos:position pos:line="91" pos:column="39"/></name><argument_list pos:line="91" pos:column="39">(<argument><expr><name pos:line="91" pos:column="40">capname<pos:position pos:line="91" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="49">"export-marks "<pos:position pos:line="91" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="91" pos:column="66">&amp;<pos:position pos:line="91" pos:column="71"/></operator><name pos:line="91" pos:column="67">arg<pos:position pos:line="91" pos:column="70"/></name></expr></argument>)<pos:position pos:line="91" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="72"/></condition><then pos:line="91" pos:column="72"> <block pos:line="91" pos:column="73">{
			<expr_stmt><expr><name><name pos:line="92" pos:column="25">data<pos:position pos:line="92" pos:column="29"/></name><operator pos:line="92" pos:column="29">-&gt;<pos:position pos:line="92" pos:column="34"/></operator><name pos:line="92" pos:column="31">export_marks<pos:position pos:line="92" pos:column="43"/></name></name> <operator pos:line="92" pos:column="44">=<pos:position pos:line="92" pos:column="45"/></operator> <call><name pos:line="92" pos:column="46">xstrdup<pos:position pos:line="92" pos:column="53"/></name><argument_list pos:line="92" pos:column="53">(<argument><expr><name pos:line="92" pos:column="54">arg<pos:position pos:line="92" pos:column="57"/></name></expr></argument>)<pos:position pos:line="92" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="93" pos:column="18"/></block></then></if></elseif> <elseif pos:line="93" pos:column="19">else <if pos:line="93" pos:column="24">if <condition pos:line="93" pos:column="27">(<expr><call><name pos:line="93" pos:column="28">skip_prefix<pos:position pos:line="93" pos:column="39"/></name><argument_list pos:line="93" pos:column="39">(<argument><expr><name pos:line="93" pos:column="40">capname<pos:position pos:line="93" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="49">"import-marks "<pos:position pos:line="93" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="93" pos:column="66">&amp;<pos:position pos:line="93" pos:column="71"/></operator><name pos:line="93" pos:column="67">arg<pos:position pos:line="93" pos:column="70"/></name></expr></argument>)<pos:position pos:line="93" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="93" pos:column="72"/></condition><then pos:line="93" pos:column="72"> <block pos:line="93" pos:column="73">{
			<expr_stmt><expr><name><name pos:line="94" pos:column="25">data<pos:position pos:line="94" pos:column="29"/></name><operator pos:line="94" pos:column="29">-&gt;<pos:position pos:line="94" pos:column="34"/></operator><name pos:line="94" pos:column="31">import_marks<pos:position pos:line="94" pos:column="43"/></name></name> <operator pos:line="94" pos:column="44">=<pos:position pos:line="94" pos:column="45"/></operator> <call><name pos:line="94" pos:column="46">xstrdup<pos:position pos:line="94" pos:column="53"/></name><argument_list pos:line="94" pos:column="53">(<argument><expr><name pos:line="94" pos:column="54">arg<pos:position pos:line="94" pos:column="57"/></name></expr></argument>)<pos:position pos:line="94" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="95" pos:column="18"/></block></then></if></elseif> <elseif pos:line="95" pos:column="19">else <if pos:line="95" pos:column="24">if <condition pos:line="95" pos:column="27">(<expr><call><name pos:line="95" pos:column="28">starts_with<pos:position pos:line="95" pos:column="39"/></name><argument_list pos:line="95" pos:column="39">(<argument><expr><name pos:line="95" pos:column="40">capname<pos:position pos:line="95" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="49">"no-private-update"<pos:position pos:line="95" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="95" pos:column="70"/></condition><then pos:line="95" pos:column="70"> <block pos:line="95" pos:column="71">{
			<expr_stmt><expr><name><name pos:line="96" pos:column="25">data<pos:position pos:line="96" pos:column="29"/></name><operator pos:line="96" pos:column="29">-&gt;<pos:position pos:line="96" pos:column="34"/></operator><name pos:line="96" pos:column="31">no_private_update<pos:position pos:line="96" pos:column="48"/></name></name> <operator pos:line="96" pos:column="49">=<pos:position pos:line="96" pos:column="50"/></operator> <literal type="number" pos:line="96" pos:column="51">1<pos:position pos:line="96" pos:column="52"/></literal></expr>;<pos:position pos:line="96" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="97" pos:column="18"/></block></then></if></elseif> <elseif pos:line="97" pos:column="19">else <if pos:line="97" pos:column="24">if <condition pos:line="97" pos:column="27">(<expr><name pos:line="97" pos:column="28">mandatory<pos:position pos:line="97" pos:column="37"/></name></expr>)<pos:position pos:line="97" pos:column="38"/></condition><then pos:line="97" pos:column="38"> <block pos:line="97" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="98" pos:column="25">die<pos:position pos:line="98" pos:column="28"/></name><argument_list pos:line="98" pos:column="28">(<argument><expr><literal type="string" pos:line="98" pos:column="29">"Unknown mandatory capability %s. This remote "<pos:position pos:line="98" pos:column="76"/></literal>
			    <literal type="string" pos:line="99" pos:column="29">"helper probably needs newer version of Git."<pos:position pos:line="99" pos:column="74"/></literal></expr></argument>,
			    <argument><expr><name pos:line="100" pos:column="29">capname<pos:position pos:line="100" pos:column="36"/></name></expr></argument>)<pos:position pos:line="100" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="101" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="102" pos:column="10"/></block></while>
	<if pos:line="103" pos:column="9">if <condition pos:line="103" pos:column="12">(<expr><name pos:line="103" pos:column="13">refspecs<pos:position pos:line="103" pos:column="21"/></name></expr>)<pos:position pos:line="103" pos:column="22"/></condition><then pos:line="103" pos:column="22"> <block pos:line="103" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="104" pos:column="17">int<pos:position pos:line="104" pos:column="20"/></name></type> <name pos:line="104" pos:column="21">i<pos:position pos:line="104" pos:column="22"/></name></decl>;<pos:position pos:line="104" pos:column="23"/></decl_stmt>
		<expr_stmt><expr><name><name pos:line="105" pos:column="17">data<pos:position pos:line="105" pos:column="21"/></name><operator pos:line="105" pos:column="21">-&gt;<pos:position pos:line="105" pos:column="26"/></operator><name pos:line="105" pos:column="23">refspec_nr<pos:position pos:line="105" pos:column="33"/></name></name> <operator pos:line="105" pos:column="34">=<pos:position pos:line="105" pos:column="35"/></operator> <name pos:line="105" pos:column="36">refspec_nr<pos:position pos:line="105" pos:column="46"/></name></expr>;<pos:position pos:line="105" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="106" pos:column="17">data<pos:position pos:line="106" pos:column="21"/></name><operator pos:line="106" pos:column="21">-&gt;<pos:position pos:line="106" pos:column="26"/></operator><name pos:line="106" pos:column="23">refspecs<pos:position pos:line="106" pos:column="31"/></name></name> <operator pos:line="106" pos:column="32">=<pos:position pos:line="106" pos:column="33"/></operator> <call><name pos:line="106" pos:column="34">parse_fetch_refspec<pos:position pos:line="106" pos:column="53"/></name><argument_list pos:line="106" pos:column="53">(<argument><expr><name pos:line="106" pos:column="54">refspec_nr<pos:position pos:line="106" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="66">refspecs<pos:position pos:line="106" pos:column="74"/></name></expr></argument>)<pos:position pos:line="106" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="76"/></expr_stmt>
		<for pos:line="107" pos:column="17">for <control pos:line="107" pos:column="21">(<init><expr><name pos:line="107" pos:column="22">i<pos:position pos:line="107" pos:column="23"/></name> <operator pos:line="107" pos:column="24">=<pos:position pos:line="107" pos:column="25"/></operator> <literal type="number" pos:line="107" pos:column="26">0<pos:position pos:line="107" pos:column="27"/></literal></expr>;<pos:position pos:line="107" pos:column="28"/></init> <condition><expr><name pos:line="107" pos:column="29">i<pos:position pos:line="107" pos:column="30"/></name> <operator pos:line="107" pos:column="31">&lt;<pos:position pos:line="107" pos:column="35"/></operator> <name pos:line="107" pos:column="33">refspec_nr<pos:position pos:line="107" pos:column="43"/></name></expr>;<pos:position pos:line="107" pos:column="44"/></condition> <incr><expr><name pos:line="107" pos:column="45">i<pos:position pos:line="107" pos:column="46"/></name><operator pos:line="107" pos:column="46">++<pos:position pos:line="107" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="107" pos:column="49"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="108" pos:column="25">free<pos:position pos:line="108" pos:column="29"/></name><argument_list pos:line="108" pos:column="29">(<argument><expr><operator pos:line="108" pos:column="30">(<pos:position pos:line="108" pos:column="31"/></operator><name pos:line="108" pos:column="31">char<pos:position pos:line="108" pos:column="35"/></name> <operator pos:line="108" pos:column="36">*<pos:position pos:line="108" pos:column="37"/></operator><operator pos:line="108" pos:column="37">)<pos:position pos:line="108" pos:column="38"/></operator><name><name pos:line="108" pos:column="38">refspecs<pos:position pos:line="108" pos:column="46"/></name><index pos:line="108" pos:column="46">[<expr><name pos:line="108" pos:column="47">i<pos:position pos:line="108" pos:column="48"/></name></expr>]<pos:position pos:line="108" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="108" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="51"/></expr_stmt></block></for>
		<expr_stmt><expr><call><name pos:line="109" pos:column="17">free<pos:position pos:line="109" pos:column="21"/></name><argument_list pos:line="109" pos:column="21">(<argument><expr><name pos:line="109" pos:column="22">refspecs<pos:position pos:line="109" pos:column="30"/></name></expr></argument>)<pos:position pos:line="109" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="110" pos:column="10"/></block></then> <elseif pos:line="110" pos:column="11">else <if pos:line="110" pos:column="16">if <condition pos:line="110" pos:column="19">(<expr><name><name pos:line="110" pos:column="20">data<pos:position pos:line="110" pos:column="24"/></name><operator pos:line="110" pos:column="24">-&gt;<pos:position pos:line="110" pos:column="29"/></operator><name pos:line="110" pos:column="26">import<pos:position pos:line="110" pos:column="32"/></name></name> <operator pos:line="110" pos:column="33">||<pos:position pos:line="110" pos:column="35"/></operator> <name><name pos:line="110" pos:column="36">data<pos:position pos:line="110" pos:column="40"/></name><operator pos:line="110" pos:column="40">-&gt;<pos:position pos:line="110" pos:column="45"/></operator><name pos:line="110" pos:column="42">bidi_import<pos:position pos:line="110" pos:column="53"/></name></name> <operator pos:line="110" pos:column="54">||<pos:position pos:line="110" pos:column="56"/></operator> <name><name pos:line="110" pos:column="57">data<pos:position pos:line="110" pos:column="61"/></name><operator pos:line="110" pos:column="61">-&gt;<pos:position pos:line="110" pos:column="66"/></operator><name pos:line="110" pos:column="63">export<pos:position pos:line="110" pos:column="69"/></name></name></expr>)<pos:position pos:line="110" pos:column="70"/></condition><then pos:line="110" pos:column="70"> <block pos:line="110" pos:column="71">{
		<expr_stmt><expr><call><name pos:line="111" pos:column="17">warning<pos:position pos:line="111" pos:column="24"/></name><argument_list pos:line="111" pos:column="24">(<argument><expr><literal type="string" pos:line="111" pos:column="25">"This remote helper should implement refspec capability."<pos:position pos:line="111" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="84"/></expr_stmt>
	}<pos:position pos:line="112" pos:column="10"/></block></then></if></elseif></if>
	<expr_stmt><expr><call><name pos:line="113" pos:column="9">strbuf_release<pos:position pos:line="113" pos:column="23"/></name><argument_list pos:line="113" pos:column="23">(<argument><expr><operator pos:line="113" pos:column="24">&amp;<pos:position pos:line="113" pos:column="29"/></operator><name pos:line="113" pos:column="25">buf<pos:position pos:line="113" pos:column="28"/></name></expr></argument>)<pos:position pos:line="113" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="30"/></expr_stmt>
	<if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><name pos:line="114" pos:column="13">debug<pos:position pos:line="114" pos:column="18"/></name></expr>)<pos:position pos:line="114" pos:column="19"/></condition><then pos:line="114" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="115" pos:column="17">fprintf<pos:position pos:line="115" pos:column="24"/></name><argument_list pos:line="115" pos:column="24">(<argument><expr><name pos:line="115" pos:column="25">stderr<pos:position pos:line="115" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="33">"Debug: Capabilities complete.\n"<pos:position pos:line="115" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="68"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="116" pos:column="9">standard_options<pos:position pos:line="116" pos:column="25"/></name><argument_list pos:line="116" pos:column="25">(<argument><expr><name pos:line="116" pos:column="26">transport<pos:position pos:line="116" pos:column="35"/></name></expr></argument>)<pos:position pos:line="116" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="37"/></expr_stmt>
	<return pos:line="117" pos:column="9">return <expr><name><name pos:line="117" pos:column="16">data<pos:position pos:line="117" pos:column="20"/></name><operator pos:line="117" pos:column="20">-&gt;<pos:position pos:line="117" pos:column="25"/></operator><name pos:line="117" pos:column="22">helper<pos:position pos:line="117" pos:column="28"/></name></name></expr>;<pos:position pos:line="117" pos:column="29"/></return>
}<pos:position pos:line="118" pos:column="2"/></block></function></unit>
