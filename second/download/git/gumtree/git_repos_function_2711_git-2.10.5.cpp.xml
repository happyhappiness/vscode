<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2711_git-2.10.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ident_filter_fn<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">stream_filter<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">filter<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
			   <parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">input<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">size_t<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">isize_p<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="3" pos:column="28">char<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">output<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="42">size_t<pos:position pos:line="3" pos:column="48"/></name> <modifier pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></modifier></type><name pos:line="3" pos:column="50">osize_p<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="58"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">ident_filter<pos:position pos:line="5" pos:column="28"/></name></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">ident<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><operator pos:line="5" pos:column="38">(<pos:position pos:line="5" pos:column="39"/></operator>struct <name pos:line="5" pos:column="46">ident_filter<pos:position pos:line="5" pos:column="58"/></name> <operator pos:line="5" pos:column="59">*<pos:position pos:line="5" pos:column="60"/></operator><operator pos:line="5" pos:column="60">)<pos:position pos:line="5" pos:column="61"/></operator><name pos:line="5" pos:column="61">filter<pos:position pos:line="5" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="68"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">static<pos:position pos:line="6" pos:column="15"/></specifier> <type><specifier pos:line="6" pos:column="16">const<pos:position pos:line="6" pos:column="21"/></specifier> <name pos:line="6" pos:column="22">char<pos:position pos:line="6" pos:column="26"/></name></type> <name><name pos:line="6" pos:column="27">head<pos:position pos:line="6" pos:column="31"/></name><index pos:line="6" pos:column="31">[]<pos:position pos:line="6" pos:column="33"/></index></name> <init pos:line="6" pos:column="34">= <expr><literal type="string" pos:line="6" pos:column="36">"$Id"<pos:position pos:line="6" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">input<pos:position pos:line="8" pos:column="19"/></name></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20"> <block pos:line="8" pos:column="21">{
		<comment type="block" pos:line="9" pos:column="17">/* drain upon eof */</comment>
		<switch pos:line="10" pos:column="17">switch <condition pos:line="10" pos:column="24">(<expr><name><name pos:line="10" pos:column="25">ident<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">-&gt;<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="32">state<pos:position pos:line="10" pos:column="37"/></name></name></expr>)<pos:position pos:line="10" pos:column="38"/></condition> <block pos:line="10" pos:column="39">{
		<default pos:line="11" pos:column="17">default:<pos:position pos:line="11" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">strbuf_add<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">(<argument><expr><operator pos:line="12" pos:column="36">&amp;<pos:position pos:line="12" pos:column="41"/></operator><name><name pos:line="12" pos:column="37">ident<pos:position pos:line="12" pos:column="42"/></name><operator pos:line="12" pos:column="42">-&gt;<pos:position pos:line="12" pos:column="47"/></operator><name pos:line="12" pos:column="44">left<pos:position pos:line="12" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="50">head<pos:position pos:line="12" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="56">ident<pos:position pos:line="12" pos:column="61"/></name><operator pos:line="12" pos:column="61">-&gt;<pos:position pos:line="12" pos:column="66"/></operator><name pos:line="12" pos:column="63">state<pos:position pos:line="12" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="70"/></expr_stmt>
		<case pos:line="13" pos:column="17">case <expr><name pos:line="13" pos:column="22">IDENT_SKIPPING<pos:position pos:line="13" pos:column="36"/></name></expr>:<pos:position pos:line="13" pos:column="37"/></case>
			<comment type="block" pos:line="14" pos:column="25">/* fallthru */</comment>
		<case pos:line="15" pos:column="17">case <expr><name pos:line="15" pos:column="22">IDENT_DRAINING<pos:position pos:line="15" pos:column="36"/></name></expr>:<pos:position pos:line="15" pos:column="37"/></case>
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">ident_drain<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><name pos:line="16" pos:column="37">ident<pos:position pos:line="16" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="44">&amp;<pos:position pos:line="16" pos:column="49"/></operator><name pos:line="16" pos:column="45">output<pos:position pos:line="16" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="53">osize_p<pos:position pos:line="16" pos:column="60"/></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></switch>
		<return pos:line="18" pos:column="17">return <expr><literal type="number" pos:line="18" pos:column="24">0<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><operator pos:line="21" pos:column="16">*<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">isize_p<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">||<pos:position pos:line="21" pos:column="27"/></operator> <operator pos:line="21" pos:column="28">(<pos:position pos:line="21" pos:column="29"/></operator><name><name pos:line="21" pos:column="29">ident<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">-&gt;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="36">state<pos:position pos:line="21" pos:column="41"/></name></name> <operator pos:line="21" pos:column="42">==<pos:position pos:line="21" pos:column="44"/></operator> <name pos:line="21" pos:column="45">IDENT_DRAINING<pos:position pos:line="21" pos:column="59"/></name><operator pos:line="21" pos:column="59">)<pos:position pos:line="21" pos:column="60"/></operator></expr>)<pos:position pos:line="21" pos:column="61"/></condition> <block pos:line="21" pos:column="62">{
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">int<pos:position pos:line="22" pos:column="20"/></name></type> <name pos:line="22" pos:column="21">ch<pos:position pos:line="22" pos:column="23"/></name></decl>;<pos:position pos:line="22" pos:column="24"/></decl_stmt>

		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name><name pos:line="24" pos:column="21">ident<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">-&gt;<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="28">state<pos:position pos:line="24" pos:column="33"/></name></name> <operator pos:line="24" pos:column="34">==<pos:position pos:line="24" pos:column="36"/></operator> <name pos:line="24" pos:column="37">IDENT_DRAINING<pos:position pos:line="24" pos:column="51"/></name></expr>)<pos:position pos:line="24" pos:column="52"/></condition><then pos:line="24" pos:column="52"> <block pos:line="24" pos:column="53">{
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">ident_drain<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">ident<pos:position pos:line="25" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="44">&amp;<pos:position pos:line="25" pos:column="49"/></operator><name pos:line="25" pos:column="45">output<pos:position pos:line="25" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="53">osize_p<pos:position pos:line="25" pos:column="60"/></name></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="62"/></expr_stmt>
			<if pos:line="26" pos:column="25">if <condition pos:line="26" pos:column="28">(<expr><operator pos:line="26" pos:column="29">!<pos:position pos:line="26" pos:column="30"/></operator><operator pos:line="26" pos:column="30">*<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="31">osize_p<pos:position pos:line="26" pos:column="38"/></name></expr>)<pos:position pos:line="26" pos:column="39"/></condition><then pos:line="26" pos:column="39">
				<block type="pseudo"><break pos:line="27" pos:column="33">break;<pos:position pos:line="27" pos:column="39"/></break></block></then></if>
			<continue pos:line="28" pos:column="25">continue;<pos:position pos:line="28" pos:column="34"/></continue>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="31" pos:column="17">ch<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">=<pos:position pos:line="31" pos:column="21"/></operator> <operator pos:line="31" pos:column="22">*<pos:position pos:line="31" pos:column="23"/></operator><operator pos:line="31" pos:column="23">(<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="24">input<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">++<pos:position pos:line="31" pos:column="31"/></operator><operator pos:line="31" pos:column="31">)<pos:position pos:line="31" pos:column="32"/></operator></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="32" pos:column="17">(<pos:position pos:line="32" pos:column="18"/></operator><operator pos:line="32" pos:column="18">*<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="19">isize_p<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">)<pos:position pos:line="32" pos:column="27"/></operator><operator pos:line="32" pos:column="27">--<pos:position pos:line="32" pos:column="29"/></operator></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name><name pos:line="34" pos:column="21">ident<pos:position pos:line="34" pos:column="26"/></name><operator pos:line="34" pos:column="26">-&gt;<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="28">state<pos:position pos:line="34" pos:column="33"/></name></name> <operator pos:line="34" pos:column="34">==<pos:position pos:line="34" pos:column="36"/></operator> <name pos:line="34" pos:column="37">IDENT_SKIPPING<pos:position pos:line="34" pos:column="51"/></name></expr>)<pos:position pos:line="34" pos:column="52"/></condition><then pos:line="34" pos:column="52"> <block pos:line="34" pos:column="53">{
			<comment type="block" pos:line="35" pos:column="25">/*
			 * Skipping until '$' or LF, but keeping them
			 * in case it is a foreign ident.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">strbuf_addch<pos:position pos:line="39" pos:column="37"/></name><argument_list pos:line="39" pos:column="37">(<argument><expr><operator pos:line="39" pos:column="38">&amp;<pos:position pos:line="39" pos:column="43"/></operator><name><name pos:line="39" pos:column="39">ident<pos:position pos:line="39" pos:column="44"/></name><operator pos:line="39" pos:column="44">-&gt;<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="46">left<pos:position pos:line="39" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="52">ch<pos:position pos:line="39" pos:column="54"/></name></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="56"/></expr_stmt>
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><name pos:line="40" pos:column="29">ch<pos:position pos:line="40" pos:column="31"/></name> <operator pos:line="40" pos:column="32">!=<pos:position pos:line="40" pos:column="34"/></operator> <literal type="char" pos:line="40" pos:column="35">'\n'<pos:position pos:line="40" pos:column="39"/></literal> <operator pos:line="40" pos:column="40">&amp;&amp;<pos:position pos:line="40" pos:column="50"/></operator> <name pos:line="40" pos:column="43">ch<pos:position pos:line="40" pos:column="45"/></name> <operator pos:line="40" pos:column="46">!=<pos:position pos:line="40" pos:column="48"/></operator> <literal type="char" pos:line="40" pos:column="49">'$'<pos:position pos:line="40" pos:column="52"/></literal></expr>)<pos:position pos:line="40" pos:column="53"/></condition><then pos:line="40" pos:column="53">
				<block type="pseudo"><continue pos:line="41" pos:column="33">continue;<pos:position pos:line="41" pos:column="42"/></continue></block></then></if>
			<if pos:line="42" pos:column="25">if <condition pos:line="42" pos:column="28">(<expr><name pos:line="42" pos:column="29">ch<pos:position pos:line="42" pos:column="31"/></name> <operator pos:line="42" pos:column="32">==<pos:position pos:line="42" pos:column="34"/></operator> <literal type="char" pos:line="42" pos:column="35">'$'<pos:position pos:line="42" pos:column="38"/></literal> <operator pos:line="42" pos:column="39">&amp;&amp;<pos:position pos:line="42" pos:column="49"/></operator> <operator pos:line="42" pos:column="42">!<pos:position pos:line="42" pos:column="43"/></operator><call><name pos:line="42" pos:column="43">is_foreign_ident<pos:position pos:line="42" pos:column="59"/></name><argument_list pos:line="42" pos:column="59">(<argument><expr><name><name pos:line="42" pos:column="60">ident<pos:position pos:line="42" pos:column="65"/></name><operator pos:line="42" pos:column="65">-&gt;<pos:position pos:line="42" pos:column="70"/></operator><name pos:line="42" pos:column="67">left<pos:position pos:line="42" pos:column="71"/></name><operator pos:line="42" pos:column="71">.<pos:position pos:line="42" pos:column="72"/></operator><name pos:line="42" pos:column="72">buf<pos:position pos:line="42" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="77"/></condition><then pos:line="42" pos:column="77"> <block pos:line="42" pos:column="78">{
				<expr_stmt><expr><call><name pos:line="43" pos:column="33">strbuf_setlen<pos:position pos:line="43" pos:column="46"/></name><argument_list pos:line="43" pos:column="46">(<argument><expr><operator pos:line="43" pos:column="47">&amp;<pos:position pos:line="43" pos:column="52"/></operator><name><name pos:line="43" pos:column="48">ident<pos:position pos:line="43" pos:column="53"/></name><operator pos:line="43" pos:column="53">-&gt;<pos:position pos:line="43" pos:column="58"/></operator><name pos:line="43" pos:column="55">left<pos:position pos:line="43" pos:column="59"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="61">sizeof<argument_list pos:line="43" pos:column="67">(<argument><expr><name pos:line="43" pos:column="68">head<pos:position pos:line="43" pos:column="72"/></name></expr></argument>)<pos:position pos:line="43" pos:column="73"/></argument_list></sizeof> <operator pos:line="43" pos:column="74">-<pos:position pos:line="43" pos:column="75"/></operator> <literal type="number" pos:line="43" pos:column="76">1<pos:position pos:line="43" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="79"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="44" pos:column="33">strbuf_addstr<pos:position pos:line="44" pos:column="46"/></name><argument_list pos:line="44" pos:column="46">(<argument><expr><operator pos:line="44" pos:column="47">&amp;<pos:position pos:line="44" pos:column="52"/></operator><name><name pos:line="44" pos:column="48">ident<pos:position pos:line="44" pos:column="53"/></name><operator pos:line="44" pos:column="53">-&gt;<pos:position pos:line="44" pos:column="58"/></operator><name pos:line="44" pos:column="55">left<pos:position pos:line="44" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="61">ident<pos:position pos:line="44" pos:column="66"/></name><operator pos:line="44" pos:column="66">-&gt;<pos:position pos:line="44" pos:column="71"/></operator><name pos:line="44" pos:column="68">ident<pos:position pos:line="44" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="75"/></expr_stmt>
			}<pos:position pos:line="45" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="46" pos:column="25">ident<pos:position pos:line="46" pos:column="30"/></name><operator pos:line="46" pos:column="30">-&gt;<pos:position pos:line="46" pos:column="35"/></operator><name pos:line="46" pos:column="32">state<pos:position pos:line="46" pos:column="37"/></name></name> <operator pos:line="46" pos:column="38">=<pos:position pos:line="46" pos:column="39"/></operator> <name pos:line="46" pos:column="40">IDENT_DRAINING<pos:position pos:line="46" pos:column="54"/></name></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt>
			<continue pos:line="47" pos:column="25">continue;<pos:position pos:line="47" pos:column="34"/></continue>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>

		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name><name pos:line="50" pos:column="21">ident<pos:position pos:line="50" pos:column="26"/></name><operator pos:line="50" pos:column="26">-&gt;<pos:position pos:line="50" pos:column="31"/></operator><name pos:line="50" pos:column="28">state<pos:position pos:line="50" pos:column="33"/></name></name> <operator pos:line="50" pos:column="34">&lt;<pos:position pos:line="50" pos:column="38"/></operator> <sizeof pos:line="50" pos:column="36">sizeof<argument_list pos:line="50" pos:column="42">(<argument><expr><name pos:line="50" pos:column="43">head<pos:position pos:line="50" pos:column="47"/></name></expr></argument>)<pos:position pos:line="50" pos:column="48"/></argument_list></sizeof> <operator pos:line="50" pos:column="49">&amp;&amp;<pos:position pos:line="50" pos:column="59"/></operator>
		    <name><name pos:line="51" pos:column="21">head<pos:position pos:line="51" pos:column="25"/></name><index pos:line="51" pos:column="25">[<expr><name><name pos:line="51" pos:column="26">ident<pos:position pos:line="51" pos:column="31"/></name><operator pos:line="51" pos:column="31">-&gt;<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="33">state<pos:position pos:line="51" pos:column="38"/></name></name></expr>]<pos:position pos:line="51" pos:column="39"/></index></name> <operator pos:line="51" pos:column="40">==<pos:position pos:line="51" pos:column="42"/></operator> <name pos:line="51" pos:column="43">ch<pos:position pos:line="51" pos:column="45"/></name></expr>)<pos:position pos:line="51" pos:column="46"/></condition><then pos:line="51" pos:column="46"> <block pos:line="51" pos:column="47">{
			<expr_stmt><expr><name><name pos:line="52" pos:column="25">ident<pos:position pos:line="52" pos:column="30"/></name><operator pos:line="52" pos:column="30">-&gt;<pos:position pos:line="52" pos:column="35"/></operator><name pos:line="52" pos:column="32">state<pos:position pos:line="52" pos:column="37"/></name></name><operator pos:line="52" pos:column="37">++<pos:position pos:line="52" pos:column="39"/></operator></expr>;<pos:position pos:line="52" pos:column="40"/></expr_stmt>
			<continue pos:line="53" pos:column="25">continue;<pos:position pos:line="53" pos:column="34"/></continue>
		}<pos:position pos:line="54" pos:column="18"/></block></then></if>

		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name><name pos:line="56" pos:column="21">ident<pos:position pos:line="56" pos:column="26"/></name><operator pos:line="56" pos:column="26">-&gt;<pos:position pos:line="56" pos:column="31"/></operator><name pos:line="56" pos:column="28">state<pos:position pos:line="56" pos:column="33"/></name></name></expr>)<pos:position pos:line="56" pos:column="34"/></condition><then pos:line="56" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="25">strbuf_add<pos:position pos:line="57" pos:column="35"/></name><argument_list pos:line="57" pos:column="35">(<argument><expr><operator pos:line="57" pos:column="36">&amp;<pos:position pos:line="57" pos:column="41"/></operator><name><name pos:line="57" pos:column="37">ident<pos:position pos:line="57" pos:column="42"/></name><operator pos:line="57" pos:column="42">-&gt;<pos:position pos:line="57" pos:column="47"/></operator><name pos:line="57" pos:column="44">left<pos:position pos:line="57" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="50">head<pos:position pos:line="57" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="56">ident<pos:position pos:line="57" pos:column="61"/></name><operator pos:line="57" pos:column="61">-&gt;<pos:position pos:line="57" pos:column="66"/></operator><name pos:line="57" pos:column="63">state<pos:position pos:line="57" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="70"/></expr_stmt></block></then></if>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name><name pos:line="58" pos:column="21">ident<pos:position pos:line="58" pos:column="26"/></name><operator pos:line="58" pos:column="26">-&gt;<pos:position pos:line="58" pos:column="31"/></operator><name pos:line="58" pos:column="28">state<pos:position pos:line="58" pos:column="33"/></name></name> <operator pos:line="58" pos:column="34">==<pos:position pos:line="58" pos:column="36"/></operator> <sizeof pos:line="58" pos:column="37">sizeof<argument_list pos:line="58" pos:column="43">(<argument><expr><name pos:line="58" pos:column="44">head<pos:position pos:line="58" pos:column="48"/></name></expr></argument>)<pos:position pos:line="58" pos:column="49"/></argument_list></sizeof> <operator pos:line="58" pos:column="50">-<pos:position pos:line="58" pos:column="51"/></operator> <literal type="number" pos:line="58" pos:column="52">1<pos:position pos:line="58" pos:column="53"/></literal></expr>)<pos:position pos:line="58" pos:column="54"/></condition><then pos:line="58" pos:column="54"> <block pos:line="58" pos:column="55">{
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name pos:line="59" pos:column="29">ch<pos:position pos:line="59" pos:column="31"/></name> <operator pos:line="59" pos:column="32">!=<pos:position pos:line="59" pos:column="34"/></operator> <literal type="char" pos:line="59" pos:column="35">':'<pos:position pos:line="59" pos:column="38"/></literal> <operator pos:line="59" pos:column="39">&amp;&amp;<pos:position pos:line="59" pos:column="49"/></operator> <name pos:line="59" pos:column="42">ch<pos:position pos:line="59" pos:column="44"/></name> <operator pos:line="59" pos:column="45">!=<pos:position pos:line="59" pos:column="47"/></operator> <literal type="char" pos:line="59" pos:column="48">'$'<pos:position pos:line="59" pos:column="51"/></literal></expr>)<pos:position pos:line="59" pos:column="52"/></condition><then pos:line="59" pos:column="52"> <block pos:line="59" pos:column="53">{
				<expr_stmt><expr><call><name pos:line="60" pos:column="33">strbuf_addch<pos:position pos:line="60" pos:column="45"/></name><argument_list pos:line="60" pos:column="45">(<argument><expr><operator pos:line="60" pos:column="46">&amp;<pos:position pos:line="60" pos:column="51"/></operator><name><name pos:line="60" pos:column="47">ident<pos:position pos:line="60" pos:column="52"/></name><operator pos:line="60" pos:column="52">-&gt;<pos:position pos:line="60" pos:column="57"/></operator><name pos:line="60" pos:column="54">left<pos:position pos:line="60" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="60">ch<pos:position pos:line="60" pos:column="62"/></name></expr></argument>)<pos:position pos:line="60" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="61" pos:column="33">ident<pos:position pos:line="61" pos:column="38"/></name><operator pos:line="61" pos:column="38">-&gt;<pos:position pos:line="61" pos:column="43"/></operator><name pos:line="61" pos:column="40">state<pos:position pos:line="61" pos:column="45"/></name></name> <operator pos:line="61" pos:column="46">=<pos:position pos:line="61" pos:column="47"/></operator> <literal type="number" pos:line="61" pos:column="48">0<pos:position pos:line="61" pos:column="49"/></literal></expr>;<pos:position pos:line="61" pos:column="50"/></expr_stmt>
				<continue pos:line="62" pos:column="33">continue;<pos:position pos:line="62" pos:column="42"/></continue>
			}<pos:position pos:line="63" pos:column="26"/></block></then></if>

			<if pos:line="65" pos:column="25">if <condition pos:line="65" pos:column="28">(<expr><name pos:line="65" pos:column="29">ch<pos:position pos:line="65" pos:column="31"/></name> <operator pos:line="65" pos:column="32">==<pos:position pos:line="65" pos:column="34"/></operator> <literal type="char" pos:line="65" pos:column="35">':'<pos:position pos:line="65" pos:column="38"/></literal></expr>)<pos:position pos:line="65" pos:column="39"/></condition><then pos:line="65" pos:column="39"> <block pos:line="65" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="66" pos:column="33">strbuf_addch<pos:position pos:line="66" pos:column="45"/></name><argument_list pos:line="66" pos:column="45">(<argument><expr><operator pos:line="66" pos:column="46">&amp;<pos:position pos:line="66" pos:column="51"/></operator><name><name pos:line="66" pos:column="47">ident<pos:position pos:line="66" pos:column="52"/></name><operator pos:line="66" pos:column="52">-&gt;<pos:position pos:line="66" pos:column="57"/></operator><name pos:line="66" pos:column="54">left<pos:position pos:line="66" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="60">ch<pos:position pos:line="66" pos:column="62"/></name></expr></argument>)<pos:position pos:line="66" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="67" pos:column="33">ident<pos:position pos:line="67" pos:column="38"/></name><operator pos:line="67" pos:column="38">-&gt;<pos:position pos:line="67" pos:column="43"/></operator><name pos:line="67" pos:column="40">state<pos:position pos:line="67" pos:column="45"/></name></name> <operator pos:line="67" pos:column="46">=<pos:position pos:line="67" pos:column="47"/></operator> <name pos:line="67" pos:column="48">IDENT_SKIPPING<pos:position pos:line="67" pos:column="62"/></name></expr>;<pos:position pos:line="67" pos:column="63"/></expr_stmt>
			}<pos:position pos:line="68" pos:column="26"/></block></then> <else pos:line="68" pos:column="27">else <block pos:line="68" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="69" pos:column="33">strbuf_addstr<pos:position pos:line="69" pos:column="46"/></name><argument_list pos:line="69" pos:column="46">(<argument><expr><operator pos:line="69" pos:column="47">&amp;<pos:position pos:line="69" pos:column="52"/></operator><name><name pos:line="69" pos:column="48">ident<pos:position pos:line="69" pos:column="53"/></name><operator pos:line="69" pos:column="53">-&gt;<pos:position pos:line="69" pos:column="58"/></operator><name pos:line="69" pos:column="55">left<pos:position pos:line="69" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="61">ident<pos:position pos:line="69" pos:column="66"/></name><operator pos:line="69" pos:column="66">-&gt;<pos:position pos:line="69" pos:column="71"/></operator><name pos:line="69" pos:column="68">ident<pos:position pos:line="69" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="70" pos:column="33">ident<pos:position pos:line="70" pos:column="38"/></name><operator pos:line="70" pos:column="38">-&gt;<pos:position pos:line="70" pos:column="43"/></operator><name pos:line="70" pos:column="40">state<pos:position pos:line="70" pos:column="45"/></name></name> <operator pos:line="70" pos:column="46">=<pos:position pos:line="70" pos:column="47"/></operator> <name pos:line="70" pos:column="48">IDENT_DRAINING<pos:position pos:line="70" pos:column="62"/></name></expr>;<pos:position pos:line="70" pos:column="63"/></expr_stmt>
			}<pos:position pos:line="71" pos:column="26"/></block></else></if>
			<continue pos:line="72" pos:column="25">continue;<pos:position pos:line="72" pos:column="34"/></continue>
		}<pos:position pos:line="73" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="75" pos:column="17">strbuf_addch<pos:position pos:line="75" pos:column="29"/></name><argument_list pos:line="75" pos:column="29">(<argument><expr><operator pos:line="75" pos:column="30">&amp;<pos:position pos:line="75" pos:column="35"/></operator><name><name pos:line="75" pos:column="31">ident<pos:position pos:line="75" pos:column="36"/></name><operator pos:line="75" pos:column="36">-&gt;<pos:position pos:line="75" pos:column="41"/></operator><name pos:line="75" pos:column="38">left<pos:position pos:line="75" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="44">ch<pos:position pos:line="75" pos:column="46"/></name></expr></argument>)<pos:position pos:line="75" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="76" pos:column="17">ident<pos:position pos:line="76" pos:column="22"/></name><operator pos:line="76" pos:column="22">-&gt;<pos:position pos:line="76" pos:column="27"/></operator><name pos:line="76" pos:column="24">state<pos:position pos:line="76" pos:column="29"/></name></name> <operator pos:line="76" pos:column="30">=<pos:position pos:line="76" pos:column="31"/></operator> <name pos:line="76" pos:column="32">IDENT_DRAINING<pos:position pos:line="76" pos:column="46"/></name></expr>;<pos:position pos:line="76" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="77" pos:column="10"/></block></while>
	<return pos:line="78" pos:column="9">return <expr><literal type="number" pos:line="78" pos:column="16">0<pos:position pos:line="78" pos:column="17"/></literal></expr>;<pos:position pos:line="78" pos:column="18"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
