<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_366_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">check_ce_order<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">index_state<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">istate<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">i<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

	<for pos:line="5" pos:column="9">for <control pos:line="5" pos:column="13">(<init><expr><name pos:line="5" pos:column="14">i<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">=<pos:position pos:line="5" pos:column="17"/></operator> <literal type="number" pos:line="5" pos:column="18">1<pos:position pos:line="5" pos:column="19"/></literal></expr>;<pos:position pos:line="5" pos:column="20"/></init> <condition><expr><name pos:line="5" pos:column="21">i<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">&lt;<pos:position pos:line="5" pos:column="27"/></operator> <name><name pos:line="5" pos:column="25">istate<pos:position pos:line="5" pos:column="31"/></name><operator pos:line="5" pos:column="31">-&gt;<pos:position pos:line="5" pos:column="36"/></operator><name pos:line="5" pos:column="33">cache_nr<pos:position pos:line="5" pos:column="41"/></name></name></expr>;<pos:position pos:line="5" pos:column="42"/></condition> <incr><expr><name pos:line="5" pos:column="43">i<pos:position pos:line="5" pos:column="44"/></name><operator pos:line="5" pos:column="44">++<pos:position pos:line="5" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="5" pos:column="47"/></control> <block pos:line="5" pos:column="48">{
		<decl_stmt><decl><type><name><name pos:line="6" pos:column="17">struct<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">cache_entry<pos:position pos:line="6" pos:column="35"/></name></name> <modifier pos:line="6" pos:column="36">*<pos:position pos:line="6" pos:column="37"/></modifier></type><name pos:line="6" pos:column="37">ce<pos:position pos:line="6" pos:column="39"/></name> <init pos:line="6" pos:column="40">= <expr><name><name pos:line="6" pos:column="42">istate<pos:position pos:line="6" pos:column="48"/></name><operator pos:line="6" pos:column="48">-&gt;<pos:position pos:line="6" pos:column="53"/></operator><name pos:line="6" pos:column="50">cache<pos:position pos:line="6" pos:column="55"/></name><index pos:line="6" pos:column="55">[<expr><name pos:line="6" pos:column="56">i<pos:position pos:line="6" pos:column="57"/></name> <operator pos:line="6" pos:column="58">-<pos:position pos:line="6" pos:column="59"/></operator> <literal type="number" pos:line="6" pos:column="60">1<pos:position pos:line="6" pos:column="61"/></literal></expr>]<pos:position pos:line="6" pos:column="62"/></index></name></expr></init></decl>;<pos:position pos:line="6" pos:column="63"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="7" pos:column="17">struct<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">cache_entry<pos:position pos:line="7" pos:column="35"/></name></name> <modifier pos:line="7" pos:column="36">*<pos:position pos:line="7" pos:column="37"/></modifier></type><name pos:line="7" pos:column="37">next_ce<pos:position pos:line="7" pos:column="44"/></name> <init pos:line="7" pos:column="45">= <expr><name><name pos:line="7" pos:column="47">istate<pos:position pos:line="7" pos:column="53"/></name><operator pos:line="7" pos:column="53">-&gt;<pos:position pos:line="7" pos:column="58"/></operator><name pos:line="7" pos:column="55">cache<pos:position pos:line="7" pos:column="60"/></name><index pos:line="7" pos:column="60">[<expr><name pos:line="7" pos:column="61">i<pos:position pos:line="7" pos:column="62"/></name></expr>]<pos:position pos:line="7" pos:column="63"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="64"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">name_compare<pos:position pos:line="8" pos:column="33"/></name> <init pos:line="8" pos:column="34">= <expr><call><name pos:line="8" pos:column="36">strcmp<pos:position pos:line="8" pos:column="42"/></name><argument_list pos:line="8" pos:column="42">(<argument><expr><name><name pos:line="8" pos:column="43">ce<pos:position pos:line="8" pos:column="45"/></name><operator pos:line="8" pos:column="45">-&gt;<pos:position pos:line="8" pos:column="50"/></operator><name pos:line="8" pos:column="47">name<pos:position pos:line="8" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="53">next_ce<pos:position pos:line="8" pos:column="60"/></name><operator pos:line="8" pos:column="60">-&gt;<pos:position pos:line="8" pos:column="65"/></operator><name pos:line="8" pos:column="62">name<pos:position pos:line="8" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="68"/></decl_stmt>

		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal> <operator pos:line="10" pos:column="23">&lt;<pos:position pos:line="10" pos:column="27"/></operator> <name pos:line="10" pos:column="25">name_compare<pos:position pos:line="10" pos:column="37"/></name></expr>)<pos:position pos:line="10" pos:column="38"/></condition><then pos:line="10" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="25">die<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><literal type="string" pos:line="11" pos:column="29">"unordered stage entries in index"<pos:position pos:line="11" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="65"/></expr_stmt></block></then></if>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">name_compare<pos:position pos:line="12" pos:column="34"/></name></expr>)<pos:position pos:line="12" pos:column="35"/></condition><then pos:line="12" pos:column="35"> <block pos:line="12" pos:column="36">{
			<if pos:line="13" pos:column="25">if <condition pos:line="13" pos:column="28">(<expr><operator pos:line="13" pos:column="29">!<pos:position pos:line="13" pos:column="30"/></operator><call><name pos:line="13" pos:column="30">ce_stage<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">(<argument><expr><name pos:line="13" pos:column="39">ce<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="43"/></condition><then pos:line="13" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="33">die<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><literal type="string" pos:line="14" pos:column="37">"multiple stage entries for merged file '%s'"<pos:position pos:line="14" pos:column="82"/></literal></expr></argument>,
				    <argument><expr><name><name pos:line="15" pos:column="37">ce<pos:position pos:line="15" pos:column="39"/></name><operator pos:line="15" pos:column="39">-&gt;<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="41">name<pos:position pos:line="15" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt></block></then></if>
			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><call><name pos:line="16" pos:column="29">ce_stage<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">ce<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call> <operator pos:line="16" pos:column="42">&gt;<pos:position pos:line="16" pos:column="46"/></operator> <call><name pos:line="16" pos:column="44">ce_stage<pos:position pos:line="16" pos:column="52"/></name><argument_list pos:line="16" pos:column="52">(<argument><expr><name pos:line="16" pos:column="53">next_ce<pos:position pos:line="16" pos:column="60"/></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="62"/></condition><then pos:line="16" pos:column="62">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="33">die<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><literal type="string" pos:line="17" pos:column="37">"unordered stage entries for '%s'"<pos:position pos:line="17" pos:column="71"/></literal></expr></argument>,
				    <argument><expr><name><name pos:line="18" pos:column="37">ce<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">name<pos:position pos:line="18" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt></block></then></if>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>
	}<pos:position pos:line="20" pos:column="10"/></block></for>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
