<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2936_git-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">record_df_conflict_files<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">merge_options<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">o<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
				     <parameter><decl><type><name><name pos:line="2" pos:column="38">struct<pos:position pos:line="2" pos:column="44"/></name> <name pos:line="2" pos:column="45">string_list<pos:position pos:line="2" pos:column="56"/></name></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">entries<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<comment type="block" pos:line="4" pos:column="9">/* If there is a D/F conflict and the file for such a conflict
	 * currently exist in the working tree, we want to allow it to be
	 * removed to make room for the corresponding directory if needed.
	 * The files underneath the directories of such D/F conflicts will
	 * be processed before the corresponding file involved in the D/F
	 * conflict.  If the D/F directory ends up being removed by the
	 * merge, then we won't have to touch the D/F file.  If the D/F
	 * directory needs to be written to the working copy, then the D/F
	 * file will simply be removed (in make_room_for_path()) to make
	 * room for the necessary paths.  Note that if both the directory
	 * and the file need to be present, then the D/F file will be
	 * reinstated with a new unique name at the time it is processed.
	 */</comment>
	<decl_stmt><decl><type><name><name pos:line="17" pos:column="9">struct<pos:position pos:line="17" pos:column="15"/></name> <name pos:line="17" pos:column="16">string_list<pos:position pos:line="17" pos:column="27"/></name></name></type> <name pos:line="17" pos:column="28">df_sorted_entries<pos:position pos:line="17" pos:column="45"/></name></decl>;<pos:position pos:line="17" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="18" pos:column="9">const<pos:position pos:line="18" pos:column="14"/></specifier> <name pos:line="18" pos:column="15">char<pos:position pos:line="18" pos:column="19"/></name> <modifier pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></modifier></type><name pos:line="18" pos:column="21">last_file<pos:position pos:line="18" pos:column="30"/></name> <init pos:line="18" pos:column="31">= <expr><name pos:line="18" pos:column="33">NULL<pos:position pos:line="18" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="19" pos:column="9">int<pos:position pos:line="19" pos:column="12"/></name></type> <name pos:line="19" pos:column="13">last_len<pos:position pos:line="19" pos:column="21"/></name> <init pos:line="19" pos:column="22">= <expr><literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="20" pos:column="9">int<pos:position pos:line="20" pos:column="12"/></name></type> <name pos:line="20" pos:column="13">i<pos:position pos:line="20" pos:column="14"/></name></decl>;<pos:position pos:line="20" pos:column="15"/></decl_stmt>

	<comment type="block" pos:line="22" pos:column="9">/*
	 * If we're merging merge-bases, we don't want to bother with
	 * any working directory changes.
	 */</comment>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">o<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">call_depth<pos:position pos:line="26" pos:column="26"/></name></name></expr>)<pos:position pos:line="26" pos:column="27"/></condition><then pos:line="26" pos:column="27">
		<block type="pseudo"><return pos:line="27" pos:column="17">return;<pos:position pos:line="27" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="29" pos:column="9">/* Ensure D/F conflicts are adjacent in the entries list. */</comment>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">memset<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><operator pos:line="30" pos:column="16">&amp;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="17">df_sorted_entries<pos:position pos:line="30" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="36">0<pos:position pos:line="30" pos:column="37"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="39">sizeof<argument_list pos:line="30" pos:column="45">(<argument><expr pos:line="30" pos:column="46">struct <name pos:line="30" pos:column="53">string_list<pos:position pos:line="30" pos:column="64"/></name></expr></argument>)<pos:position pos:line="30" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="67"/></expr_stmt>
	<for pos:line="31" pos:column="9">for <control pos:line="31" pos:column="13">(<init><expr><name pos:line="31" pos:column="14">i<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <literal type="number" pos:line="31" pos:column="18">0<pos:position pos:line="31" pos:column="19"/></literal></expr>;<pos:position pos:line="31" pos:column="20"/></init> <condition><expr><name pos:line="31" pos:column="21">i<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">&lt;<pos:position pos:line="31" pos:column="27"/></operator> <name><name pos:line="31" pos:column="25">entries<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">-&gt;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="34">nr<pos:position pos:line="31" pos:column="36"/></name></name></expr>;<pos:position pos:line="31" pos:column="37"/></condition> <incr><expr><name pos:line="31" pos:column="38">i<pos:position pos:line="31" pos:column="39"/></name><operator pos:line="31" pos:column="39">++<pos:position pos:line="31" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="31" pos:column="42"/></control> <block pos:line="31" pos:column="43">{
		<decl_stmt><decl><type><name><name pos:line="32" pos:column="17">struct<pos:position pos:line="32" pos:column="23"/></name> <name pos:line="32" pos:column="24">string_list_item<pos:position pos:line="32" pos:column="40"/></name></name> <modifier pos:line="32" pos:column="41">*<pos:position pos:line="32" pos:column="42"/></modifier></type><name pos:line="32" pos:column="42">next<pos:position pos:line="32" pos:column="46"/></name> <init pos:line="32" pos:column="47">= <expr><operator pos:line="32" pos:column="49">&amp;<pos:position pos:line="32" pos:column="54"/></operator><name><name pos:line="32" pos:column="50">entries<pos:position pos:line="32" pos:column="57"/></name><operator pos:line="32" pos:column="57">-&gt;<pos:position pos:line="32" pos:column="62"/></operator><name pos:line="32" pos:column="59">items<pos:position pos:line="32" pos:column="64"/></name><index pos:line="32" pos:column="64">[<expr><name pos:line="32" pos:column="65">i<pos:position pos:line="32" pos:column="66"/></name></expr>]<pos:position pos:line="32" pos:column="67"/></index></name></expr></init></decl>;<pos:position pos:line="32" pos:column="68"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">string_list_append<pos:position pos:line="33" pos:column="35"/></name><argument_list pos:line="33" pos:column="35">(<argument><expr><operator pos:line="33" pos:column="36">&amp;<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="37">df_sorted_entries<pos:position pos:line="33" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="56">next<pos:position pos:line="33" pos:column="60"/></name><operator pos:line="33" pos:column="60">-&gt;<pos:position pos:line="33" pos:column="65"/></operator><name pos:line="33" pos:column="62">string<pos:position pos:line="33" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="69"/></argument_list></call><operator pos:line="33" pos:column="69">-&gt;<pos:position pos:line="33" pos:column="74"/></operator><name pos:line="33" pos:column="71">util<pos:position pos:line="33" pos:column="75"/></name> <operator pos:line="33" pos:column="76">=<pos:position pos:line="33" pos:column="77"/></operator>
				   <name><name pos:line="34" pos:column="36">next<pos:position pos:line="34" pos:column="40"/></name><operator pos:line="34" pos:column="40">-&gt;<pos:position pos:line="34" pos:column="45"/></operator><name pos:line="34" pos:column="42">util<pos:position pos:line="34" pos:column="46"/></name></name></expr>;<pos:position pos:line="34" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">qsort<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><name><name pos:line="36" pos:column="15">df_sorted_entries<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">.<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="33">items<pos:position pos:line="36" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="40">entries<pos:position pos:line="36" pos:column="47"/></name><operator pos:line="36" pos:column="47">-&gt;<pos:position pos:line="36" pos:column="52"/></operator><name pos:line="36" pos:column="49">nr<pos:position pos:line="36" pos:column="51"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="53">sizeof<argument_list pos:line="36" pos:column="59">(<argument><expr><operator pos:line="36" pos:column="60">*<pos:position pos:line="36" pos:column="61"/></operator><name><name pos:line="36" pos:column="61">entries<pos:position pos:line="36" pos:column="68"/></name><operator pos:line="36" pos:column="68">-&gt;<pos:position pos:line="36" pos:column="73"/></operator><name pos:line="36" pos:column="70">items<pos:position pos:line="36" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="76"/></argument_list></sizeof></expr></argument>,
	      <argument><expr><name pos:line="37" pos:column="15">string_list_df_name_compare<pos:position pos:line="37" pos:column="42"/></name></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="39" pos:column="9">string_list_clear<pos:position pos:line="39" pos:column="26"/></name><argument_list pos:line="39" pos:column="26">(<argument><expr><operator pos:line="39" pos:column="27">&amp;<pos:position pos:line="39" pos:column="32"/></operator><name><name pos:line="39" pos:column="28">o<pos:position pos:line="39" pos:column="29"/></name><operator pos:line="39" pos:column="29">-&gt;<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="31">df_conflict_file_set<pos:position pos:line="39" pos:column="51"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="53">1<pos:position pos:line="39" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="56"/></expr_stmt>
	<for pos:line="40" pos:column="9">for <control pos:line="40" pos:column="13">(<init><expr><name pos:line="40" pos:column="14">i<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <literal type="number" pos:line="40" pos:column="18">0<pos:position pos:line="40" pos:column="19"/></literal></expr>;<pos:position pos:line="40" pos:column="20"/></init> <condition><expr><name pos:line="40" pos:column="21">i<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">&lt;<pos:position pos:line="40" pos:column="27"/></operator> <name><name pos:line="40" pos:column="25">df_sorted_entries<pos:position pos:line="40" pos:column="42"/></name><operator pos:line="40" pos:column="42">.<pos:position pos:line="40" pos:column="43"/></operator><name pos:line="40" pos:column="43">nr<pos:position pos:line="40" pos:column="45"/></name></name></expr>;<pos:position pos:line="40" pos:column="46"/></condition> <incr><expr><name pos:line="40" pos:column="47">i<pos:position pos:line="40" pos:column="48"/></name><operator pos:line="40" pos:column="48">++<pos:position pos:line="40" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="40" pos:column="51"/></control> <block pos:line="40" pos:column="52">{
		<decl_stmt><decl><type><specifier pos:line="41" pos:column="17">const<pos:position pos:line="41" pos:column="22"/></specifier> <name pos:line="41" pos:column="23">char<pos:position pos:line="41" pos:column="27"/></name> <modifier pos:line="41" pos:column="28">*<pos:position pos:line="41" pos:column="29"/></modifier></type><name pos:line="41" pos:column="29">path<pos:position pos:line="41" pos:column="33"/></name> <init pos:line="41" pos:column="34">= <expr><name><name pos:line="41" pos:column="36">df_sorted_entries<pos:position pos:line="41" pos:column="53"/></name><operator pos:line="41" pos:column="53">.<pos:position pos:line="41" pos:column="54"/></operator><name pos:line="41" pos:column="54">items<pos:position pos:line="41" pos:column="59"/></name><index pos:line="41" pos:column="59">[<expr><name pos:line="41" pos:column="60">i<pos:position pos:line="41" pos:column="61"/></name></expr>]<pos:position pos:line="41" pos:column="62"/></index></name><operator pos:line="41" pos:column="62">.<pos:position pos:line="41" pos:column="63"/></operator><name pos:line="41" pos:column="63">string<pos:position pos:line="41" pos:column="69"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="70"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="42" pos:column="17">int<pos:position pos:line="42" pos:column="20"/></name></type> <name pos:line="42" pos:column="21">len<pos:position pos:line="42" pos:column="24"/></name> <init pos:line="42" pos:column="25">= <expr><call><name pos:line="42" pos:column="27">strlen<pos:position pos:line="42" pos:column="33"/></name><argument_list pos:line="42" pos:column="33">(<argument><expr><name pos:line="42" pos:column="34">path<pos:position pos:line="42" pos:column="38"/></name></expr></argument>)<pos:position pos:line="42" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="42" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="43" pos:column="17">struct<pos:position pos:line="43" pos:column="23"/></name> <name pos:line="43" pos:column="24">stage_data<pos:position pos:line="43" pos:column="34"/></name></name> <modifier pos:line="43" pos:column="35">*<pos:position pos:line="43" pos:column="36"/></modifier></type><name pos:line="43" pos:column="36">e<pos:position pos:line="43" pos:column="37"/></name> <init pos:line="43" pos:column="38">= <expr><name><name pos:line="43" pos:column="40">df_sorted_entries<pos:position pos:line="43" pos:column="57"/></name><operator pos:line="43" pos:column="57">.<pos:position pos:line="43" pos:column="58"/></operator><name pos:line="43" pos:column="58">items<pos:position pos:line="43" pos:column="63"/></name><index pos:line="43" pos:column="63">[<expr><name pos:line="43" pos:column="64">i<pos:position pos:line="43" pos:column="65"/></name></expr>]<pos:position pos:line="43" pos:column="66"/></index></name><operator pos:line="43" pos:column="66">.<pos:position pos:line="43" pos:column="67"/></operator><name pos:line="43" pos:column="67">util<pos:position pos:line="43" pos:column="71"/></name></expr></init></decl>;<pos:position pos:line="43" pos:column="72"/></decl_stmt>

		<comment type="block" pos:line="45" pos:column="17">/*
		 * Check if last_file &amp; path correspond to a D/F conflict;
		 * i.e. whether path is last_file+'/'+&lt;something&gt;.
		 * If so, record that it's okay to remove last_file to make
		 * room for path and friends if needed.
		 */</comment>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><name pos:line="51" pos:column="21">last_file<pos:position pos:line="51" pos:column="30"/></name> <operator pos:line="51" pos:column="31">&amp;&amp;<pos:position pos:line="51" pos:column="41"/></operator>
		    <name pos:line="52" pos:column="21">len<pos:position pos:line="52" pos:column="24"/></name> <operator pos:line="52" pos:column="25">&gt;<pos:position pos:line="52" pos:column="29"/></operator> <name pos:line="52" pos:column="27">last_len<pos:position pos:line="52" pos:column="35"/></name> <operator pos:line="52" pos:column="36">&amp;&amp;<pos:position pos:line="52" pos:column="46"/></operator>
		    <call><name pos:line="53" pos:column="21">memcmp<pos:position pos:line="53" pos:column="27"/></name><argument_list pos:line="53" pos:column="27">(<argument><expr><name pos:line="53" pos:column="28">path<pos:position pos:line="53" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="34">last_file<pos:position pos:line="53" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="45">last_len<pos:position pos:line="53" pos:column="53"/></name></expr></argument>)<pos:position pos:line="53" pos:column="54"/></argument_list></call> <operator pos:line="53" pos:column="55">==<pos:position pos:line="53" pos:column="57"/></operator> <literal type="number" pos:line="53" pos:column="58">0<pos:position pos:line="53" pos:column="59"/></literal> <operator pos:line="53" pos:column="60">&amp;&amp;<pos:position pos:line="53" pos:column="70"/></operator>
		    <name><name pos:line="54" pos:column="21">path<pos:position pos:line="54" pos:column="25"/></name><index pos:line="54" pos:column="25">[<expr><name pos:line="54" pos:column="26">last_len<pos:position pos:line="54" pos:column="34"/></name></expr>]<pos:position pos:line="54" pos:column="35"/></index></name> <operator pos:line="54" pos:column="36">==<pos:position pos:line="54" pos:column="38"/></operator> <literal type="char" pos:line="54" pos:column="39">'/'<pos:position pos:line="54" pos:column="42"/></literal></expr>)<pos:position pos:line="54" pos:column="43"/></condition><then pos:line="54" pos:column="43"> <block pos:line="54" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">string_list_insert<pos:position pos:line="55" pos:column="43"/></name><argument_list pos:line="55" pos:column="43">(<argument><expr><operator pos:line="55" pos:column="44">&amp;<pos:position pos:line="55" pos:column="49"/></operator><name><name pos:line="55" pos:column="45">o<pos:position pos:line="55" pos:column="46"/></name><operator pos:line="55" pos:column="46">-&gt;<pos:position pos:line="55" pos:column="51"/></operator><name pos:line="55" pos:column="48">df_conflict_file_set<pos:position pos:line="55" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="70">last_file<pos:position pos:line="55" pos:column="79"/></name></expr></argument>)<pos:position pos:line="55" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="81"/></expr_stmt>
		}<pos:position pos:line="56" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="58" pos:column="17">/*
		 * Determine whether path could exist as a file in the
		 * working directory as a possible D/F conflict.  This
		 * will only occur when it exists in stage 2 as a
		 * file.
		 */</comment>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><call><name pos:line="64" pos:column="21">S_ISREG<pos:position pos:line="64" pos:column="28"/></name><argument_list pos:line="64" pos:column="28">(<argument><expr><name><name pos:line="64" pos:column="29">e<pos:position pos:line="64" pos:column="30"/></name><operator pos:line="64" pos:column="30">-&gt;<pos:position pos:line="64" pos:column="35"/></operator><name pos:line="64" pos:column="32">stages<pos:position pos:line="64" pos:column="38"/></name><index pos:line="64" pos:column="38">[<expr><literal type="number" pos:line="64" pos:column="39">2<pos:position pos:line="64" pos:column="40"/></literal></expr>]<pos:position pos:line="64" pos:column="41"/></index></name><operator pos:line="64" pos:column="41">.<pos:position pos:line="64" pos:column="42"/></operator><name pos:line="64" pos:column="42">mode<pos:position pos:line="64" pos:column="46"/></name></expr></argument>)<pos:position pos:line="64" pos:column="47"/></argument_list></call> <operator pos:line="64" pos:column="48">||<pos:position pos:line="64" pos:column="50"/></operator> <call><name pos:line="64" pos:column="51">S_ISLNK<pos:position pos:line="64" pos:column="58"/></name><argument_list pos:line="64" pos:column="58">(<argument><expr><name><name pos:line="64" pos:column="59">e<pos:position pos:line="64" pos:column="60"/></name><operator pos:line="64" pos:column="60">-&gt;<pos:position pos:line="64" pos:column="65"/></operator><name pos:line="64" pos:column="62">stages<pos:position pos:line="64" pos:column="68"/></name><index pos:line="64" pos:column="68">[<expr><literal type="number" pos:line="64" pos:column="69">2<pos:position pos:line="64" pos:column="70"/></literal></expr>]<pos:position pos:line="64" pos:column="71"/></index></name><operator pos:line="64" pos:column="71">.<pos:position pos:line="64" pos:column="72"/></operator><name pos:line="64" pos:column="72">mode<pos:position pos:line="64" pos:column="76"/></name></expr></argument>)<pos:position pos:line="64" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="78"/></condition><then pos:line="64" pos:column="78"> <block pos:line="64" pos:column="79">{
			<expr_stmt><expr><name pos:line="65" pos:column="25">last_file<pos:position pos:line="65" pos:column="34"/></name> <operator pos:line="65" pos:column="35">=<pos:position pos:line="65" pos:column="36"/></operator> <name pos:line="65" pos:column="37">path<pos:position pos:line="65" pos:column="41"/></name></expr>;<pos:position pos:line="65" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="66" pos:column="25">last_len<pos:position pos:line="66" pos:column="33"/></name> <operator pos:line="66" pos:column="34">=<pos:position pos:line="66" pos:column="35"/></operator> <name pos:line="66" pos:column="36">len<pos:position pos:line="66" pos:column="39"/></name></expr>;<pos:position pos:line="66" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="67" pos:column="18"/></block></then> <else pos:line="67" pos:column="19">else <block pos:line="67" pos:column="24">{
			<expr_stmt><expr><name pos:line="68" pos:column="25">last_file<pos:position pos:line="68" pos:column="34"/></name> <operator pos:line="68" pos:column="35">=<pos:position pos:line="68" pos:column="36"/></operator> <name pos:line="68" pos:column="37">NULL<pos:position pos:line="68" pos:column="41"/></name></expr>;<pos:position pos:line="68" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="69" pos:column="18"/></block></else></if>
	}<pos:position pos:line="70" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">string_list_clear<pos:position pos:line="71" pos:column="26"/></name><argument_list pos:line="71" pos:column="26">(<argument><expr><operator pos:line="71" pos:column="27">&amp;<pos:position pos:line="71" pos:column="32"/></operator><name pos:line="71" pos:column="28">df_sorted_entries<pos:position pos:line="71" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="47">0<pos:position pos:line="71" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="50"/></expr_stmt>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
