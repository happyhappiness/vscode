<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6780_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">git_mmap<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">void<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type><name pos:line="1" pos:column="22">start<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">size_t<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">length<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">prot<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">int<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">flags<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">int<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">fd<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="73">off_t<pos:position pos:line="1" pos:column="78"/></name></type> <name pos:line="1" pos:column="79">offset<pos:position pos:line="1" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="86"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">n<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><literal type="number" pos:line="3" pos:column="20">0<pos:position pos:line="3" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">start<pos:position pos:line="5" pos:column="18"/></name> <operator pos:line="5" pos:column="19">!=<pos:position pos:line="5" pos:column="21"/></operator> <name pos:line="5" pos:column="22">NULL<pos:position pos:line="5" pos:column="26"/></name> <operator pos:line="5" pos:column="27">||<pos:position pos:line="5" pos:column="29"/></operator> <operator pos:line="5" pos:column="30">!<pos:position pos:line="5" pos:column="31"/></operator><operator pos:line="5" pos:column="31">(<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="32">flags<pos:position pos:line="5" pos:column="37"/></name> <operator pos:line="5" pos:column="38">&amp;<pos:position pos:line="5" pos:column="43"/></operator> <name pos:line="5" pos:column="40">MAP_PRIVATE<pos:position pos:line="5" pos:column="51"/></name><operator pos:line="5" pos:column="51">)<pos:position pos:line="5" pos:column="52"/></operator></expr>)<pos:position pos:line="5" pos:column="53"/></condition><then pos:line="5" pos:column="53">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="17">die<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><literal type="string" pos:line="6" pos:column="21">"Invalid usage of mmap when built with NO_MMAP"<pos:position pos:line="6" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="70"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="8" pos:column="9">start<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">=<pos:position pos:line="8" pos:column="16"/></operator> <call><name pos:line="8" pos:column="17">xmalloc<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">length<pos:position pos:line="8" pos:column="31"/></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">start<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">==<pos:position pos:line="9" pos:column="21"/></operator> <name pos:line="9" pos:column="22">NULL<pos:position pos:line="9" pos:column="26"/></name></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27"> <block pos:line="9" pos:column="28">{
		<expr_stmt><expr><name pos:line="10" pos:column="17">errno<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">=<pos:position pos:line="10" pos:column="24"/></operator> <name pos:line="10" pos:column="25">ENOMEM<pos:position pos:line="10" pos:column="31"/></name></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
		<return pos:line="11" pos:column="17">return <expr><name pos:line="11" pos:column="24">MAP_FAILED<pos:position pos:line="11" pos:column="34"/></name></expr>;<pos:position pos:line="11" pos:column="35"/></return>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<while pos:line="14" pos:column="9">while <condition pos:line="14" pos:column="15">(<expr><name pos:line="14" pos:column="16">n<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">&lt;<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="20">length<pos:position pos:line="14" pos:column="26"/></name></expr>)<pos:position pos:line="14" pos:column="27"/></condition> <block pos:line="14" pos:column="28">{
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">ssize_t<pos:position pos:line="15" pos:column="24"/></name></type> <name pos:line="15" pos:column="25">count<pos:position pos:line="15" pos:column="30"/></name> <init pos:line="15" pos:column="31">= <expr><call><name pos:line="15" pos:column="33">xpread<pos:position pos:line="15" pos:column="39"/></name><argument_list pos:line="15" pos:column="39">(<argument><expr><name pos:line="15" pos:column="40">fd<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="44">(<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="45">char<pos:position pos:line="15" pos:column="49"/></name> <operator pos:line="15" pos:column="50">*<pos:position pos:line="15" pos:column="51"/></operator><operator pos:line="15" pos:column="51">)<pos:position pos:line="15" pos:column="52"/></operator><name pos:line="15" pos:column="52">start<pos:position pos:line="15" pos:column="57"/></name> <operator pos:line="15" pos:column="58">+<pos:position pos:line="15" pos:column="59"/></operator> <name pos:line="15" pos:column="60">n<pos:position pos:line="15" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="63">length<pos:position pos:line="15" pos:column="69"/></name> <operator pos:line="15" pos:column="70">-<pos:position pos:line="15" pos:column="71"/></operator> <name pos:line="15" pos:column="72">n<pos:position pos:line="15" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="75">offset<pos:position pos:line="15" pos:column="81"/></name> <operator pos:line="15" pos:column="82">+<pos:position pos:line="15" pos:column="83"/></operator> <name pos:line="15" pos:column="84">n<pos:position pos:line="15" pos:column="85"/></name></expr></argument>)<pos:position pos:line="15" pos:column="86"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="87"/></decl_stmt>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">count<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">==<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="30">0<pos:position pos:line="17" pos:column="31"/></literal></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32"> <block pos:line="17" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">memset<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><operator pos:line="18" pos:column="32">(<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="33">char<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">*<pos:position pos:line="18" pos:column="39"/></operator><operator pos:line="18" pos:column="39">)<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="40">start<pos:position pos:line="18" pos:column="45"/></name><operator pos:line="18" pos:column="45">+<pos:position pos:line="18" pos:column="46"/></operator><name pos:line="18" pos:column="46">n<pos:position pos:line="18" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="49">0<pos:position pos:line="18" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="52">length<pos:position pos:line="18" pos:column="58"/></name><operator pos:line="18" pos:column="58">-<pos:position pos:line="18" pos:column="59"/></operator><name pos:line="18" pos:column="59">n<pos:position pos:line="18" pos:column="60"/></name></expr></argument>)<pos:position pos:line="18" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="62"/></expr_stmt>
			<break pos:line="19" pos:column="25">break;<pos:position pos:line="19" pos:column="31"/></break>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">count<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">&lt;<pos:position pos:line="22" pos:column="31"/></operator> <literal type="number" pos:line="22" pos:column="29">0<pos:position pos:line="22" pos:column="30"/></literal></expr>)<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31"> <block pos:line="22" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">free<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">start<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><name pos:line="24" pos:column="25">errno<pos:position pos:line="24" pos:column="30"/></name> <operator pos:line="24" pos:column="31">=<pos:position pos:line="24" pos:column="32"/></operator> <name pos:line="24" pos:column="33">EACCES<pos:position pos:line="24" pos:column="39"/></name></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
			<return pos:line="25" pos:column="25">return <expr><name pos:line="25" pos:column="32">MAP_FAILED<pos:position pos:line="25" pos:column="42"/></name></expr>;<pos:position pos:line="25" pos:column="43"/></return>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="28" pos:column="17">n<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">+=<pos:position pos:line="28" pos:column="21"/></operator> <name pos:line="28" pos:column="22">count<pos:position pos:line="28" pos:column="27"/></name></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></while>

	<return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">start<pos:position pos:line="31" pos:column="21"/></name></expr>;<pos:position pos:line="31" pos:column="22"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
