<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1745_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">only_spaces_and_periods<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">path<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">size_t<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">len<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">size_t<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">skip<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">len<pos:position pos:line="3" pos:column="16"/></name> <operator pos:line="3" pos:column="17">&lt;<pos:position pos:line="3" pos:column="21"/></operator> <name pos:line="3" pos:column="19">skip<pos:position pos:line="3" pos:column="23"/></name></expr>)<pos:position pos:line="3" pos:column="24"/></condition><then pos:line="3" pos:column="24">
		<block type="pseudo"><return pos:line="4" pos:column="17">return <expr><literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr>;<pos:position pos:line="4" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="5" pos:column="9">len<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">-=<pos:position pos:line="5" pos:column="15"/></operator> <name pos:line="5" pos:column="16">skip<pos:position pos:line="5" pos:column="20"/></name></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name pos:line="6" pos:column="9">path<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">+=<pos:position pos:line="6" pos:column="16"/></operator> <name pos:line="6" pos:column="17">skip<pos:position pos:line="6" pos:column="21"/></name></expr>;<pos:position pos:line="6" pos:column="22"/></expr_stmt>
	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><name pos:line="7" pos:column="16">len<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">--<pos:position pos:line="7" pos:column="21"/></operator> <operator pos:line="7" pos:column="22">&gt;<pos:position pos:line="7" pos:column="26"/></operator> <literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>)<pos:position pos:line="7" pos:column="26"/></condition> <block pos:line="7" pos:column="27">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">char<pos:position pos:line="8" pos:column="21"/></name></type> <name pos:line="8" pos:column="22">c<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><operator pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></operator><operator pos:line="8" pos:column="27">(<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">path<pos:position pos:line="8" pos:column="32"/></name><operator pos:line="8" pos:column="32">++<pos:position pos:line="8" pos:column="34"/></operator><operator pos:line="8" pos:column="34">)<pos:position pos:line="8" pos:column="35"/></operator></expr></init></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">c<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">!=<pos:position pos:line="9" pos:column="25"/></operator> <literal type="char" pos:line="9" pos:column="26">' '<pos:position pos:line="9" pos:column="29"/></literal> <operator pos:line="9" pos:column="30">&amp;&amp;<pos:position pos:line="9" pos:column="40"/></operator> <name pos:line="9" pos:column="33">c<pos:position pos:line="9" pos:column="34"/></name> <operator pos:line="9" pos:column="35">!=<pos:position pos:line="9" pos:column="37"/></operator> <literal type="char" pos:line="9" pos:column="38">'.'<pos:position pos:line="9" pos:column="41"/></literal></expr>)<pos:position pos:line="9" pos:column="42"/></condition><then pos:line="9" pos:column="42">
			<block type="pseudo"><return pos:line="10" pos:column="25">return <expr><literal type="number" pos:line="10" pos:column="32">0<pos:position pos:line="10" pos:column="33"/></literal></expr>;<pos:position pos:line="10" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="11" pos:column="10"/></block></while>
	<return pos:line="12" pos:column="9">return <expr><literal type="number" pos:line="12" pos:column="16">1<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
