<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3664_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">patch_delta<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">src_buf<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">unsigned<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">long<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">src_size<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
		  <parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">void<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">delta_buf<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">unsigned<pos:position pos:line="2" pos:column="50"/></name> <name pos:line="2" pos:column="51">long<pos:position pos:line="2" pos:column="55"/></name></type> <name pos:line="2" pos:column="56">delta_size<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,
		  <parameter><decl><type><name pos:line="3" pos:column="19">unsigned<pos:position pos:line="3" pos:column="27"/></name> <name pos:line="3" pos:column="28">long<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">dst_size<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="43"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">unsigned<pos:position pos:line="5" pos:column="23"/></name> <name pos:line="5" pos:column="24">char<pos:position pos:line="5" pos:column="28"/></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">data<pos:position pos:line="5" pos:column="34"/></name></decl>, <modifier pos:line="5" pos:column="36">*<pos:position pos:line="5" pos:column="37"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="37">top<pos:position pos:line="5" pos:column="40"/></name></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">dst_buf<pos:position pos:line="6" pos:column="31"/></name></decl>, <modifier pos:line="6" pos:column="33">*<pos:position pos:line="6" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="34">out<pos:position pos:line="6" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="39">cmd<pos:position pos:line="6" pos:column="42"/></name></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">long<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">size<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">delta_size<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">&lt;<pos:position pos:line="9" pos:column="28"/></operator> <name pos:line="9" pos:column="26">DELTA_SIZE_MIN<pos:position pos:line="9" pos:column="40"/></name></expr>)<pos:position pos:line="9" pos:column="41"/></condition><then pos:line="9" pos:column="41">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><name pos:line="10" pos:column="24">NULL<pos:position pos:line="10" pos:column="28"/></name></expr>;<pos:position pos:line="10" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="12" pos:column="9">data<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">delta_buf<pos:position pos:line="12" pos:column="25"/></name></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name pos:line="13" pos:column="9">top<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <operator pos:line="13" pos:column="15">(<pos:position pos:line="13" pos:column="16"/></operator><specifier pos:line="13" pos:column="16">const<pos:position pos:line="13" pos:column="21"/></specifier> <name pos:line="13" pos:column="22">unsigned<pos:position pos:line="13" pos:column="30"/></name> <name pos:line="13" pos:column="31">char<pos:position pos:line="13" pos:column="35"/></name> <operator pos:line="13" pos:column="36">*<pos:position pos:line="13" pos:column="37"/></operator><operator pos:line="13" pos:column="37">)<pos:position pos:line="13" pos:column="38"/></operator> <name pos:line="13" pos:column="39">delta_buf<pos:position pos:line="13" pos:column="48"/></name> <operator pos:line="13" pos:column="49">+<pos:position pos:line="13" pos:column="50"/></operator> <name pos:line="13" pos:column="51">delta_size<pos:position pos:line="13" pos:column="61"/></name></expr>;<pos:position pos:line="13" pos:column="62"/></expr_stmt>

	<comment type="block" pos:line="15" pos:column="9">/* make sure the orig file size matches what we expect */</comment>
	<expr_stmt><expr><name pos:line="16" pos:column="9">size<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">get_delta_hdr_size<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><operator pos:line="16" pos:column="35">&amp;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="36">data<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">top<pos:position pos:line="16" pos:column="45"/></name></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">size<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">!=<pos:position pos:line="17" pos:column="20"/></operator> <name pos:line="17" pos:column="21">src_size<pos:position pos:line="17" pos:column="29"/></name></expr>)<pos:position pos:line="17" pos:column="30"/></condition><then pos:line="17" pos:column="30">
		<block type="pseudo"><return pos:line="18" pos:column="17">return <expr><name pos:line="18" pos:column="24">NULL<pos:position pos:line="18" pos:column="28"/></name></expr>;<pos:position pos:line="18" pos:column="29"/></return></block></then></if>

	<comment type="block" pos:line="20" pos:column="9">/* now the result size */</comment>
	<expr_stmt><expr><name pos:line="21" pos:column="9">size<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">get_delta_hdr_size<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><operator pos:line="21" pos:column="35">&amp;<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="36">data<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="42">top<pos:position pos:line="21" pos:column="45"/></name></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">dst_buf<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <call><name pos:line="22" pos:column="19">xmallocz<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">size<pos:position pos:line="22" pos:column="32"/></name></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>

	<expr_stmt><expr><name pos:line="24" pos:column="9">out<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <name pos:line="24" pos:column="15">dst_buf<pos:position pos:line="24" pos:column="22"/></name></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>
	<while pos:line="25" pos:column="9">while <condition pos:line="25" pos:column="15">(<expr><name pos:line="25" pos:column="16">data<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">&lt;<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="23">top<pos:position pos:line="25" pos:column="26"/></name></expr>)<pos:position pos:line="25" pos:column="27"/></condition> <block pos:line="25" pos:column="28">{
		<expr_stmt><expr><name pos:line="26" pos:column="17">cmd<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <operator pos:line="26" pos:column="23">*<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="24">data<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">++<pos:position pos:line="26" pos:column="30"/></operator></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">cmd<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">&amp;<pos:position pos:line="27" pos:column="30"/></operator> <literal type="number" pos:line="27" pos:column="27">0x80<pos:position pos:line="27" pos:column="31"/></literal></expr>)<pos:position pos:line="27" pos:column="32"/></condition><then pos:line="27" pos:column="32"> <block pos:line="27" pos:column="33">{
			<decl_stmt><decl><type><name pos:line="28" pos:column="25">unsigned<pos:position pos:line="28" pos:column="33"/></name> <name pos:line="28" pos:column="34">long<pos:position pos:line="28" pos:column="38"/></name></type> <name pos:line="28" pos:column="39">cp_off<pos:position pos:line="28" pos:column="45"/></name> <init pos:line="28" pos:column="46">= <expr><literal type="number" pos:line="28" pos:column="48">0<pos:position pos:line="28" pos:column="49"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="28" pos:column="51">cp_size<pos:position pos:line="28" pos:column="58"/></name> <init pos:line="28" pos:column="59">= <expr><literal type="number" pos:line="28" pos:column="61">0<pos:position pos:line="28" pos:column="62"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="63"/></decl_stmt>
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><name pos:line="29" pos:column="29">cmd<pos:position pos:line="29" pos:column="32"/></name> <operator pos:line="29" pos:column="33">&amp;<pos:position pos:line="29" pos:column="38"/></operator> <literal type="number" pos:line="29" pos:column="35">0x01<pos:position pos:line="29" pos:column="39"/></literal></expr>)<pos:position pos:line="29" pos:column="40"/></condition><then pos:line="29" pos:column="40"> <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="41">cp_off<pos:position pos:line="29" pos:column="47"/></name> <operator pos:line="29" pos:column="48">=<pos:position pos:line="29" pos:column="49"/></operator> <operator pos:line="29" pos:column="50">*<pos:position pos:line="29" pos:column="51"/></operator><name pos:line="29" pos:column="51">data<pos:position pos:line="29" pos:column="55"/></name><operator pos:line="29" pos:column="55">++<pos:position pos:line="29" pos:column="57"/></operator></expr>;<pos:position pos:line="29" pos:column="58"/></expr_stmt></block></then></if>
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name pos:line="30" pos:column="29">cmd<pos:position pos:line="30" pos:column="32"/></name> <operator pos:line="30" pos:column="33">&amp;<pos:position pos:line="30" pos:column="38"/></operator> <literal type="number" pos:line="30" pos:column="35">0x02<pos:position pos:line="30" pos:column="39"/></literal></expr>)<pos:position pos:line="30" pos:column="40"/></condition><then pos:line="30" pos:column="40"> <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="41">cp_off<pos:position pos:line="30" pos:column="47"/></name> <operator pos:line="30" pos:column="48">|=<pos:position pos:line="30" pos:column="50"/></operator> <operator pos:line="30" pos:column="51">(<pos:position pos:line="30" pos:column="52"/></operator><operator pos:line="30" pos:column="52">*<pos:position pos:line="30" pos:column="53"/></operator><name pos:line="30" pos:column="53">data<pos:position pos:line="30" pos:column="57"/></name><operator pos:line="30" pos:column="57">++<pos:position pos:line="30" pos:column="59"/></operator> <operator pos:line="30" pos:column="60">&lt;&lt;<pos:position pos:line="30" pos:column="68"/></operator> <literal type="number" pos:line="30" pos:column="63">8<pos:position pos:line="30" pos:column="64"/></literal><operator pos:line="30" pos:column="64">)<pos:position pos:line="30" pos:column="65"/></operator></expr>;<pos:position pos:line="30" pos:column="66"/></expr_stmt></block></then></if>
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><name pos:line="31" pos:column="29">cmd<pos:position pos:line="31" pos:column="32"/></name> <operator pos:line="31" pos:column="33">&amp;<pos:position pos:line="31" pos:column="38"/></operator> <literal type="number" pos:line="31" pos:column="35">0x04<pos:position pos:line="31" pos:column="39"/></literal></expr>)<pos:position pos:line="31" pos:column="40"/></condition><then pos:line="31" pos:column="40"> <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="41">cp_off<pos:position pos:line="31" pos:column="47"/></name> <operator pos:line="31" pos:column="48">|=<pos:position pos:line="31" pos:column="50"/></operator> <operator pos:line="31" pos:column="51">(<pos:position pos:line="31" pos:column="52"/></operator><operator pos:line="31" pos:column="52">*<pos:position pos:line="31" pos:column="53"/></operator><name pos:line="31" pos:column="53">data<pos:position pos:line="31" pos:column="57"/></name><operator pos:line="31" pos:column="57">++<pos:position pos:line="31" pos:column="59"/></operator> <operator pos:line="31" pos:column="60">&lt;&lt;<pos:position pos:line="31" pos:column="68"/></operator> <literal type="number" pos:line="31" pos:column="63">16<pos:position pos:line="31" pos:column="65"/></literal><operator pos:line="31" pos:column="65">)<pos:position pos:line="31" pos:column="66"/></operator></expr>;<pos:position pos:line="31" pos:column="67"/></expr_stmt></block></then></if>
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><name pos:line="32" pos:column="29">cmd<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">&amp;<pos:position pos:line="32" pos:column="38"/></operator> <literal type="number" pos:line="32" pos:column="35">0x08<pos:position pos:line="32" pos:column="39"/></literal></expr>)<pos:position pos:line="32" pos:column="40"/></condition><then pos:line="32" pos:column="40"> <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="41">cp_off<pos:position pos:line="32" pos:column="47"/></name> <operator pos:line="32" pos:column="48">|=<pos:position pos:line="32" pos:column="50"/></operator> <operator pos:line="32" pos:column="51">(<pos:position pos:line="32" pos:column="52"/></operator><operator pos:line="32" pos:column="52">(<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="53">unsigned<pos:position pos:line="32" pos:column="61"/></name><operator pos:line="32" pos:column="61">)<pos:position pos:line="32" pos:column="62"/></operator> <operator pos:line="32" pos:column="63">*<pos:position pos:line="32" pos:column="64"/></operator><name pos:line="32" pos:column="64">data<pos:position pos:line="32" pos:column="68"/></name><operator pos:line="32" pos:column="68">++<pos:position pos:line="32" pos:column="70"/></operator> <operator pos:line="32" pos:column="71">&lt;&lt;<pos:position pos:line="32" pos:column="79"/></operator> <literal type="number" pos:line="32" pos:column="74">24<pos:position pos:line="32" pos:column="76"/></literal><operator pos:line="32" pos:column="76">)<pos:position pos:line="32" pos:column="77"/></operator></expr>;<pos:position pos:line="32" pos:column="78"/></expr_stmt></block></then></if>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">cmd<pos:position pos:line="33" pos:column="32"/></name> <operator pos:line="33" pos:column="33">&amp;<pos:position pos:line="33" pos:column="38"/></operator> <literal type="number" pos:line="33" pos:column="35">0x10<pos:position pos:line="33" pos:column="39"/></literal></expr>)<pos:position pos:line="33" pos:column="40"/></condition><then pos:line="33" pos:column="40"> <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="41">cp_size<pos:position pos:line="33" pos:column="48"/></name> <operator pos:line="33" pos:column="49">=<pos:position pos:line="33" pos:column="50"/></operator> <operator pos:line="33" pos:column="51">*<pos:position pos:line="33" pos:column="52"/></operator><name pos:line="33" pos:column="52">data<pos:position pos:line="33" pos:column="56"/></name><operator pos:line="33" pos:column="56">++<pos:position pos:line="33" pos:column="58"/></operator></expr>;<pos:position pos:line="33" pos:column="59"/></expr_stmt></block></then></if>
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><name pos:line="34" pos:column="29">cmd<pos:position pos:line="34" pos:column="32"/></name> <operator pos:line="34" pos:column="33">&amp;<pos:position pos:line="34" pos:column="38"/></operator> <literal type="number" pos:line="34" pos:column="35">0x20<pos:position pos:line="34" pos:column="39"/></literal></expr>)<pos:position pos:line="34" pos:column="40"/></condition><then pos:line="34" pos:column="40"> <block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="41">cp_size<pos:position pos:line="34" pos:column="48"/></name> <operator pos:line="34" pos:column="49">|=<pos:position pos:line="34" pos:column="51"/></operator> <operator pos:line="34" pos:column="52">(<pos:position pos:line="34" pos:column="53"/></operator><operator pos:line="34" pos:column="53">*<pos:position pos:line="34" pos:column="54"/></operator><name pos:line="34" pos:column="54">data<pos:position pos:line="34" pos:column="58"/></name><operator pos:line="34" pos:column="58">++<pos:position pos:line="34" pos:column="60"/></operator> <operator pos:line="34" pos:column="61">&lt;&lt;<pos:position pos:line="34" pos:column="69"/></operator> <literal type="number" pos:line="34" pos:column="64">8<pos:position pos:line="34" pos:column="65"/></literal><operator pos:line="34" pos:column="65">)<pos:position pos:line="34" pos:column="66"/></operator></expr>;<pos:position pos:line="34" pos:column="67"/></expr_stmt></block></then></if>
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><name pos:line="35" pos:column="29">cmd<pos:position pos:line="35" pos:column="32"/></name> <operator pos:line="35" pos:column="33">&amp;<pos:position pos:line="35" pos:column="38"/></operator> <literal type="number" pos:line="35" pos:column="35">0x40<pos:position pos:line="35" pos:column="39"/></literal></expr>)<pos:position pos:line="35" pos:column="40"/></condition><then pos:line="35" pos:column="40"> <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="41">cp_size<pos:position pos:line="35" pos:column="48"/></name> <operator pos:line="35" pos:column="49">|=<pos:position pos:line="35" pos:column="51"/></operator> <operator pos:line="35" pos:column="52">(<pos:position pos:line="35" pos:column="53"/></operator><operator pos:line="35" pos:column="53">*<pos:position pos:line="35" pos:column="54"/></operator><name pos:line="35" pos:column="54">data<pos:position pos:line="35" pos:column="58"/></name><operator pos:line="35" pos:column="58">++<pos:position pos:line="35" pos:column="60"/></operator> <operator pos:line="35" pos:column="61">&lt;&lt;<pos:position pos:line="35" pos:column="69"/></operator> <literal type="number" pos:line="35" pos:column="64">16<pos:position pos:line="35" pos:column="66"/></literal><operator pos:line="35" pos:column="66">)<pos:position pos:line="35" pos:column="67"/></operator></expr>;<pos:position pos:line="35" pos:column="68"/></expr_stmt></block></then></if>
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name pos:line="36" pos:column="29">cp_size<pos:position pos:line="36" pos:column="36"/></name> <operator pos:line="36" pos:column="37">==<pos:position pos:line="36" pos:column="39"/></operator> <literal type="number" pos:line="36" pos:column="40">0<pos:position pos:line="36" pos:column="41"/></literal></expr>)<pos:position pos:line="36" pos:column="42"/></condition><then pos:line="36" pos:column="42"> <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="43">cp_size<pos:position pos:line="36" pos:column="50"/></name> <operator pos:line="36" pos:column="51">=<pos:position pos:line="36" pos:column="52"/></operator> <literal type="number" pos:line="36" pos:column="53">0x10000<pos:position pos:line="36" pos:column="60"/></literal></expr>;<pos:position pos:line="36" pos:column="61"/></expr_stmt></block></then></if>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><call><name pos:line="37" pos:column="29">unsigned_add_overflows<pos:position pos:line="37" pos:column="51"/></name><argument_list pos:line="37" pos:column="51">(<argument><expr><name pos:line="37" pos:column="52">cp_off<pos:position pos:line="37" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="60">cp_size<pos:position pos:line="37" pos:column="67"/></name></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call> <operator pos:line="37" pos:column="69">||<pos:position pos:line="37" pos:column="71"/></operator>
			    <name pos:line="38" pos:column="29">cp_off<pos:position pos:line="38" pos:column="35"/></name> <operator pos:line="38" pos:column="36">+<pos:position pos:line="38" pos:column="37"/></operator> <name pos:line="38" pos:column="38">cp_size<pos:position pos:line="38" pos:column="45"/></name> <operator pos:line="38" pos:column="46">&gt;<pos:position pos:line="38" pos:column="50"/></operator> <name pos:line="38" pos:column="48">src_size<pos:position pos:line="38" pos:column="56"/></name> <operator pos:line="38" pos:column="57">||<pos:position pos:line="38" pos:column="59"/></operator>
			    <name pos:line="39" pos:column="29">cp_size<pos:position pos:line="39" pos:column="36"/></name> <operator pos:line="39" pos:column="37">&gt;<pos:position pos:line="39" pos:column="41"/></operator> <name pos:line="39" pos:column="39">size<pos:position pos:line="39" pos:column="43"/></name></expr>)<pos:position pos:line="39" pos:column="44"/></condition><then pos:line="39" pos:column="44">
				<block type="pseudo"><break pos:line="40" pos:column="33">break;<pos:position pos:line="40" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">memcpy<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">out<pos:position pos:line="41" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="37">(<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="38">char<pos:position pos:line="41" pos:column="42"/></name> <operator pos:line="41" pos:column="43">*<pos:position pos:line="41" pos:column="44"/></operator><operator pos:line="41" pos:column="44">)<pos:position pos:line="41" pos:column="45"/></operator> <name pos:line="41" pos:column="46">src_buf<pos:position pos:line="41" pos:column="53"/></name> <operator pos:line="41" pos:column="54">+<pos:position pos:line="41" pos:column="55"/></operator> <name pos:line="41" pos:column="56">cp_off<pos:position pos:line="41" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="64">cp_size<pos:position pos:line="41" pos:column="71"/></name></expr></argument>)<pos:position pos:line="41" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="73"/></expr_stmt>
			<expr_stmt><expr><name pos:line="42" pos:column="25">out<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">+=<pos:position pos:line="42" pos:column="31"/></operator> <name pos:line="42" pos:column="32">cp_size<pos:position pos:line="42" pos:column="39"/></name></expr>;<pos:position pos:line="42" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="43" pos:column="25">size<pos:position pos:line="43" pos:column="29"/></name> <operator pos:line="43" pos:column="30">-=<pos:position pos:line="43" pos:column="32"/></operator> <name pos:line="43" pos:column="33">cp_size<pos:position pos:line="43" pos:column="40"/></name></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></then> <elseif pos:line="44" pos:column="19">else <if pos:line="44" pos:column="24">if <condition pos:line="44" pos:column="27">(<expr><name pos:line="44" pos:column="28">cmd<pos:position pos:line="44" pos:column="31"/></name></expr>)<pos:position pos:line="44" pos:column="32"/></condition><then pos:line="44" pos:column="32"> <block pos:line="44" pos:column="33">{
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><name pos:line="45" pos:column="29">cmd<pos:position pos:line="45" pos:column="32"/></name> <operator pos:line="45" pos:column="33">&gt;<pos:position pos:line="45" pos:column="37"/></operator> <name pos:line="45" pos:column="35">size<pos:position pos:line="45" pos:column="39"/></name></expr>)<pos:position pos:line="45" pos:column="40"/></condition><then pos:line="45" pos:column="40">
				<block type="pseudo"><break pos:line="46" pos:column="33">break;<pos:position pos:line="46" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">memcpy<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name pos:line="47" pos:column="32">out<pos:position pos:line="47" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="37">data<pos:position pos:line="47" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="43">cmd<pos:position pos:line="47" pos:column="46"/></name></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name pos:line="48" pos:column="25">out<pos:position pos:line="48" pos:column="28"/></name> <operator pos:line="48" pos:column="29">+=<pos:position pos:line="48" pos:column="31"/></operator> <name pos:line="48" pos:column="32">cmd<pos:position pos:line="48" pos:column="35"/></name></expr>;<pos:position pos:line="48" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name pos:line="49" pos:column="25">data<pos:position pos:line="49" pos:column="29"/></name> <operator pos:line="49" pos:column="30">+=<pos:position pos:line="49" pos:column="32"/></operator> <name pos:line="49" pos:column="33">cmd<pos:position pos:line="49" pos:column="36"/></name></expr>;<pos:position pos:line="49" pos:column="37"/></expr_stmt>
			<expr_stmt><expr><name pos:line="50" pos:column="25">size<pos:position pos:line="50" pos:column="29"/></name> <operator pos:line="50" pos:column="30">-=<pos:position pos:line="50" pos:column="32"/></operator> <name pos:line="50" pos:column="33">cmd<pos:position pos:line="50" pos:column="36"/></name></expr>;<pos:position pos:line="50" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="51" pos:column="18"/></block></then></if></elseif> <else pos:line="51" pos:column="19">else <block pos:line="51" pos:column="24">{
			<comment type="block" pos:line="52" pos:column="25">/*
			 * cmd == 0 is reserved for future encoding
			 * extensions. In the mean time we must fail when
			 * encountering them (might be data corruption).
			 */</comment>
			<expr_stmt><expr><call><name pos:line="57" pos:column="25">error<pos:position pos:line="57" pos:column="30"/></name><argument_list pos:line="57" pos:column="30">(<argument><expr><literal type="string" pos:line="57" pos:column="31">"unexpected delta opcode 0"<pos:position pos:line="57" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="60"/></expr_stmt>
			<goto pos:line="58" pos:column="25">goto <name pos:line="58" pos:column="30">bad<pos:position pos:line="58" pos:column="33"/></name>;<pos:position pos:line="58" pos:column="34"/></goto>
		}<pos:position pos:line="59" pos:column="18"/></block></else></if>
	}<pos:position pos:line="60" pos:column="10"/></block></while>

	<comment type="block" pos:line="62" pos:column="9">/* sanity check */</comment>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">data<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">!=<pos:position pos:line="63" pos:column="20"/></operator> <name pos:line="63" pos:column="21">top<pos:position pos:line="63" pos:column="24"/></name> <operator pos:line="63" pos:column="25">||<pos:position pos:line="63" pos:column="27"/></operator> <name pos:line="63" pos:column="28">size<pos:position pos:line="63" pos:column="32"/></name> <operator pos:line="63" pos:column="33">!=<pos:position pos:line="63" pos:column="35"/></operator> <literal type="number" pos:line="63" pos:column="36">0<pos:position pos:line="63" pos:column="37"/></literal></expr>)<pos:position pos:line="63" pos:column="38"/></condition><then pos:line="63" pos:column="38"> <block pos:line="63" pos:column="39">{
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">error<pos:position pos:line="64" pos:column="22"/></name><argument_list pos:line="64" pos:column="22">(<argument><expr><literal type="string" pos:line="64" pos:column="23">"delta replay has gone wild"<pos:position pos:line="64" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="53"/></expr_stmt>
		<label><name pos:line="65" pos:column="17">bad<pos:position pos:line="65" pos:column="20"/></name>:<pos:position pos:line="65" pos:column="21"/></label>
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">free<pos:position pos:line="66" pos:column="21"/></name><argument_list pos:line="66" pos:column="21">(<argument><expr><name pos:line="66" pos:column="22">dst_buf<pos:position pos:line="66" pos:column="29"/></name></expr></argument>)<pos:position pos:line="66" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="31"/></expr_stmt>
		<return pos:line="67" pos:column="17">return <expr><name pos:line="67" pos:column="24">NULL<pos:position pos:line="67" pos:column="28"/></name></expr>;<pos:position pos:line="67" pos:column="29"/></return>
	}<pos:position pos:line="68" pos:column="10"/></block></then></if>

	<expr_stmt><expr><operator pos:line="70" pos:column="9">*<pos:position pos:line="70" pos:column="10"/></operator><name pos:line="70" pos:column="10">dst_size<pos:position pos:line="70" pos:column="18"/></name> <operator pos:line="70" pos:column="19">=<pos:position pos:line="70" pos:column="20"/></operator> <name pos:line="70" pos:column="21">out<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">-<pos:position pos:line="70" pos:column="26"/></operator> <name pos:line="70" pos:column="27">dst_buf<pos:position pos:line="70" pos:column="34"/></name></expr>;<pos:position pos:line="70" pos:column="35"/></expr_stmt>
	<return pos:line="71" pos:column="9">return <expr><name pos:line="71" pos:column="16">dst_buf<pos:position pos:line="71" pos:column="23"/></name></expr>;<pos:position pos:line="71" pos:column="24"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
