<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5191_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_branchname_arg<pos:position pos:line="1" pos:column="32"/></name><argument_list pos:line="1" pos:column="32">(<argument><expr><name pos:line="1" pos:column="33">int<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">argc<pos:position pos:line="1" pos:column="41"/></name></expr></argument>, <argument><expr><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <operator pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></operator><operator pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></operator><name pos:line="1" pos:column="56">argv<pos:position pos:line="1" pos:column="60"/></name></expr></argument>,
				<argument><expr><name pos:line="2" pos:column="33">int<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">dwim_new_local_branch_ok<pos:position pos:line="2" pos:column="61"/></name></expr></argument>,
				<argument><expr pos:line="3" pos:column="33">struct <name pos:line="3" pos:column="40">branch_info<pos:position pos:line="3" pos:column="51"/></name> <operator pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></operator><operator pos:line="3" pos:column="53">new<pos:position pos:line="3" pos:column="56"/></operator></expr></argument>,
				<argument><expr pos:line="4" pos:column="33">struct <name pos:line="4" pos:column="40">checkout_opts<pos:position pos:line="4" pos:column="53"/></name> <operator pos:line="4" pos:column="54">*<pos:position pos:line="4" pos:column="55"/></operator><name pos:line="4" pos:column="55">opts<pos:position pos:line="4" pos:column="59"/></name></expr></argument>,
				<argument><expr pos:line="5" pos:column="33">struct <name pos:line="5" pos:column="40">object_id<pos:position pos:line="5" pos:column="49"/></name> <operator pos:line="5" pos:column="50">*<pos:position pos:line="5" pos:column="51"/></operator><name pos:line="5" pos:column="51">rev<pos:position pos:line="5" pos:column="54"/></name></expr></argument>)<pos:position pos:line="5" pos:column="55"/></argument_list>
<argument_list pos:line="6" pos:column="1">{
	<argument><expr pos:line="7" pos:column="9">struct <name pos:line="7" pos:column="16">tree<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></operator><operator pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">source_tree<pos:position pos:line="7" pos:column="34"/></name> <operator pos:line="7" pos:column="35">=<pos:position pos:line="7" pos:column="36"/></operator> <operator pos:line="7" pos:column="37">&amp;<pos:position pos:line="7" pos:column="42"/></operator><name><name pos:line="7" pos:column="38">opts<pos:position pos:line="7" pos:column="42"/></name><operator pos:line="7" pos:column="42">-&gt;<pos:position pos:line="7" pos:column="47"/></operator><name pos:line="7" pos:column="44">source_tree<pos:position pos:line="7" pos:column="55"/></name></name></expr></argument>;
	<argument><expr><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></operator><operator pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">new_branch<pos:position pos:line="8" pos:column="32"/></name> <operator pos:line="8" pos:column="33">=<pos:position pos:line="8" pos:column="34"/></operator> <operator pos:line="8" pos:column="35">&amp;<pos:position pos:line="8" pos:column="40"/></operator><name><name pos:line="8" pos:column="36">opts<pos:position pos:line="8" pos:column="40"/></name><operator pos:line="8" pos:column="40">-&gt;<pos:position pos:line="8" pos:column="45"/></operator><name pos:line="8" pos:column="42">new_branch<pos:position pos:line="8" pos:column="52"/></name></name></expr></argument>;
	<argument><expr><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name> <name pos:line="9" pos:column="13">argcount<pos:position pos:line="9" pos:column="21"/></name> <operator pos:line="9" pos:column="22">=<pos:position pos:line="9" pos:column="23"/></operator> <literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr></argument>;
	<argument><expr pos:line="10" pos:column="9">struct <name pos:line="10" pos:column="16">object_id<pos:position pos:line="10" pos:column="25"/></name> <name pos:line="10" pos:column="26">branch_rev<pos:position pos:line="10" pos:column="36"/></name></expr></argument>;
	<argument><expr><specifier pos:line="11" pos:column="9">const<pos:position pos:line="11" pos:column="14"/></specifier> <name pos:line="11" pos:column="15">char<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">arg<pos:position pos:line="11" pos:column="24"/></name></expr></argument>;
	<argument><expr><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name> <name pos:line="12" pos:column="13">dash_dash_pos<pos:position pos:line="12" pos:column="26"/></name></expr></argument>;
	<argument><expr><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name> <name pos:line="13" pos:column="13">has_dash_dash<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <literal type="number" pos:line="13" pos:column="29">0<pos:position pos:line="13" pos:column="30"/></literal></expr></argument>;
	<argument><expr><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name> <name pos:line="14" pos:column="13">i<pos:position pos:line="14" pos:column="14"/></name></expr></argument>;

	<comment type="block" pos:line="16" pos:column="9">/*
	 * case 1: git checkout &lt;ref&gt; -- [&lt;paths&gt;]
	 *
	 *   &lt;ref&gt; must be a valid tree, everything after the '--' must be
	 *   a path.
	 *
	 * case 2: git checkout -- [&lt;paths&gt;]
	 *
	 *   everything after the '--' must be paths.
	 *
	 * case 3: git checkout &lt;something&gt; [--]
	 *
	 *   (a) If &lt;something&gt; is a commit, that is to
	 *       switch to the branch or detach HEAD at it.  As a special case,
	 *       if &lt;something&gt; is A...B (missing A or B means HEAD but you can
	 *       omit at most one side), and if there is a unique merge base
	 *       between A and B, A...B names that merge base.
	 *
	 *   (b) If &lt;something&gt; is _not_ a commit, either "--" is present
	 *       or &lt;something&gt; is not a path, no -t or -b was given, and
	 *       and there is a tracking branch whose name is &lt;something&gt;
	 *       in one and only one remote, then this is a short-hand to
	 *       fork local &lt;something&gt; from that remote-tracking branch.
	 *
	 *   (c) Otherwise, if "--" is present, treat it like case (1).
	 *
	 *   (d) Otherwise :
	 *       - if it's a reference, treat it like case (1)
	 *       - else if it's a path, treat it like case (2)
	 *       - else: fail.
	 *
	 * case 4: git checkout &lt;something&gt; &lt;paths&gt;
	 *
	 *   The first argument must not be ambiguous.
	 *   - If it's *only* a reference, treat it like case (1).
	 *   - If it's only a path, treat it like case (2).
	 *   - else: fail.
	 *
	 */</comment>
	if <argument><expr><operator pos:line="55" pos:column="12">(<pos:position pos:line="55" pos:column="13"/></operator><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="14">argc<pos:position pos:line="55" pos:column="18"/></name><operator pos:line="55" pos:column="18">)<pos:position pos:line="55" pos:column="19"/></operator></expr></argument>
		<return pos:line="56" pos:column="17">return <expr><literal type="number" pos:line="56" pos:column="24">0<pos:position pos:line="56" pos:column="25"/></literal></expr>;<pos:position pos:line="56" pos:column="26"/></return></argument_list></decl></decl_stmt>

	<expr_stmt><expr><name pos:line="58" pos:column="9">arg<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">=<pos:position pos:line="58" pos:column="14"/></operator> <name><name pos:line="58" pos:column="15">argv<pos:position pos:line="58" pos:column="19"/></name><index pos:line="58" pos:column="19">[<expr><literal type="number" pos:line="58" pos:column="20">0<pos:position pos:line="58" pos:column="21"/></literal></expr>]<pos:position pos:line="58" pos:column="22"/></index></name></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name pos:line="59" pos:column="9">dash_dash_pos<pos:position pos:line="59" pos:column="22"/></name> <operator pos:line="59" pos:column="23">=<pos:position pos:line="59" pos:column="24"/></operator> <operator pos:line="59" pos:column="25">-<pos:position pos:line="59" pos:column="26"/></operator><literal type="number" pos:line="59" pos:column="26">1<pos:position pos:line="59" pos:column="27"/></literal></expr>;<pos:position pos:line="59" pos:column="28"/></expr_stmt>
	<for pos:line="60" pos:column="9">for <control pos:line="60" pos:column="13">(<init><expr><name pos:line="60" pos:column="14">i<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">=<pos:position pos:line="60" pos:column="17"/></operator> <literal type="number" pos:line="60" pos:column="18">0<pos:position pos:line="60" pos:column="19"/></literal></expr>;<pos:position pos:line="60" pos:column="20"/></init> <condition><expr><name pos:line="60" pos:column="21">i<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">&lt;<pos:position pos:line="60" pos:column="27"/></operator> <name pos:line="60" pos:column="25">argc<pos:position pos:line="60" pos:column="29"/></name></expr>;<pos:position pos:line="60" pos:column="30"/></condition> <incr><expr><name pos:line="60" pos:column="31">i<pos:position pos:line="60" pos:column="32"/></name><operator pos:line="60" pos:column="32">++<pos:position pos:line="60" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="60" pos:column="35"/></control> <block pos:line="60" pos:column="36">{
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><operator pos:line="61" pos:column="21">!<pos:position pos:line="61" pos:column="22"/></operator><call><name pos:line="61" pos:column="22">strcmp<pos:position pos:line="61" pos:column="28"/></name><argument_list pos:line="61" pos:column="28">(<argument><expr><name><name pos:line="61" pos:column="29">argv<pos:position pos:line="61" pos:column="33"/></name><index pos:line="61" pos:column="33">[<expr><name pos:line="61" pos:column="34">i<pos:position pos:line="61" pos:column="35"/></name></expr>]<pos:position pos:line="61" pos:column="36"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="38">"--"<pos:position pos:line="61" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="44"/></condition><then pos:line="61" pos:column="44"> <block pos:line="61" pos:column="45">{
			<expr_stmt><expr><name pos:line="62" pos:column="25">dash_dash_pos<pos:position pos:line="62" pos:column="38"/></name> <operator pos:line="62" pos:column="39">=<pos:position pos:line="62" pos:column="40"/></operator> <name pos:line="62" pos:column="41">i<pos:position pos:line="62" pos:column="42"/></name></expr>;<pos:position pos:line="62" pos:column="43"/></expr_stmt>
			<break pos:line="63" pos:column="25">break;<pos:position pos:line="63" pos:column="31"/></break>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>
	}<pos:position pos:line="65" pos:column="10"/></block></for>
	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name pos:line="66" pos:column="13">dash_dash_pos<pos:position pos:line="66" pos:column="26"/></name> <operator pos:line="66" pos:column="27">==<pos:position pos:line="66" pos:column="29"/></operator> <literal type="number" pos:line="66" pos:column="30">0<pos:position pos:line="66" pos:column="31"/></literal></expr>)<pos:position pos:line="66" pos:column="32"/></condition><then pos:line="66" pos:column="32">
		<block type="pseudo"><return pos:line="67" pos:column="17">return <expr><literal type="number" pos:line="67" pos:column="24">1<pos:position pos:line="67" pos:column="25"/></literal></expr>;<pos:position pos:line="67" pos:column="26"/></return></block></then> <comment type="block" pos:line="67" pos:column="27">/* case (2) */</comment>
	<elseif pos:line="68" pos:column="9">else <if pos:line="68" pos:column="14">if <condition pos:line="68" pos:column="17">(<expr><name pos:line="68" pos:column="18">dash_dash_pos<pos:position pos:line="68" pos:column="31"/></name> <operator pos:line="68" pos:column="32">==<pos:position pos:line="68" pos:column="34"/></operator> <literal type="number" pos:line="68" pos:column="35">1<pos:position pos:line="68" pos:column="36"/></literal></expr>)<pos:position pos:line="68" pos:column="37"/></condition><then pos:line="68" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><name pos:line="69" pos:column="17">has_dash_dash<pos:position pos:line="69" pos:column="30"/></name> <operator pos:line="69" pos:column="31">=<pos:position pos:line="69" pos:column="32"/></operator> <literal type="number" pos:line="69" pos:column="33">1<pos:position pos:line="69" pos:column="34"/></literal></expr>;<pos:position pos:line="69" pos:column="35"/></expr_stmt></block></then></if></elseif> <comment type="block" pos:line="69" pos:column="36">/* case (3) or (1) */</comment>
	<elseif pos:line="70" pos:column="9">else <if pos:line="70" pos:column="14">if <condition pos:line="70" pos:column="17">(<expr><name pos:line="70" pos:column="18">dash_dash_pos<pos:position pos:line="70" pos:column="31"/></name> <operator pos:line="70" pos:column="32">&gt;=<pos:position pos:line="70" pos:column="37"/></operator> <literal type="number" pos:line="70" pos:column="35">2<pos:position pos:line="70" pos:column="36"/></literal></expr>)<pos:position pos:line="70" pos:column="37"/></condition><then pos:line="70" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="17">die<pos:position pos:line="71" pos:column="20"/></name><argument_list pos:line="71" pos:column="20">(<argument><expr><call><name pos:line="71" pos:column="21">_<pos:position pos:line="71" pos:column="22"/></name><argument_list pos:line="71" pos:column="22">(<argument><expr><literal type="string" pos:line="71" pos:column="23">"only one reference expected, %d given."<pos:position pos:line="71" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="71" pos:column="66">dash_dash_pos<pos:position pos:line="71" pos:column="79"/></name></expr></argument>)<pos:position pos:line="71" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="81"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><operator pos:line="73" pos:column="13">!<pos:position pos:line="73" pos:column="14"/></operator><call><name pos:line="73" pos:column="14">strcmp<pos:position pos:line="73" pos:column="20"/></name><argument_list pos:line="73" pos:column="20">(<argument><expr><name pos:line="73" pos:column="21">arg<pos:position pos:line="73" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="26">"-"<pos:position pos:line="73" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="31"/></condition><then pos:line="73" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="74" pos:column="17">arg<pos:position pos:line="74" pos:column="20"/></name> <operator pos:line="74" pos:column="21">=<pos:position pos:line="74" pos:column="22"/></operator> <literal type="string" pos:line="74" pos:column="23">"@{-1}"<pos:position pos:line="74" pos:column="30"/></literal></expr>;<pos:position pos:line="74" pos:column="31"/></expr_stmt></block></then></if>

	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><call><name pos:line="76" pos:column="13">get_oid_mb<pos:position pos:line="76" pos:column="23"/></name><argument_list pos:line="76" pos:column="23">(<argument><expr><name pos:line="76" pos:column="24">arg<pos:position pos:line="76" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="29">rev<pos:position pos:line="76" pos:column="32"/></name></expr></argument>)<pos:position pos:line="76" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="34"/></condition><then pos:line="76" pos:column="34"> <block pos:line="76" pos:column="35">{
		<comment type="block" pos:line="77" pos:column="17">/*
		 * Either case (3) or (4), with &lt;something&gt; not being
		 * a commit, or an attempt to use case (1) with an
		 * invalid ref.
		 *
		 * It's likely an error, but we need to find out if
		 * we should auto-create the branch, case (3).(b).
		 */</comment>
		<decl_stmt><decl><type><name pos:line="85" pos:column="17">int<pos:position pos:line="85" pos:column="20"/></name></type> <name pos:line="85" pos:column="21">recover_with_dwim<pos:position pos:line="85" pos:column="38"/></name> <init pos:line="85" pos:column="39">= <expr><name pos:line="85" pos:column="41">dwim_new_local_branch_ok<pos:position pos:line="85" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="85" pos:column="66"/></decl_stmt>

		<if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><operator pos:line="87" pos:column="21">!<pos:position pos:line="87" pos:column="22"/></operator><name pos:line="87" pos:column="22">has_dash_dash<pos:position pos:line="87" pos:column="35"/></name> <operator pos:line="87" pos:column="36">&amp;&amp;<pos:position pos:line="87" pos:column="46"/></operator>
		    <operator pos:line="88" pos:column="21">(<pos:position pos:line="88" pos:column="22"/></operator><call><name pos:line="88" pos:column="22">check_filename<pos:position pos:line="88" pos:column="36"/></name><argument_list pos:line="88" pos:column="36">(<argument><expr><name><name pos:line="88" pos:column="37">opts<pos:position pos:line="88" pos:column="41"/></name><operator pos:line="88" pos:column="41">-&gt;<pos:position pos:line="88" pos:column="46"/></operator><name pos:line="88" pos:column="43">prefix<pos:position pos:line="88" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="51">arg<pos:position pos:line="88" pos:column="54"/></name></expr></argument>)<pos:position pos:line="88" pos:column="55"/></argument_list></call> <operator pos:line="88" pos:column="56">||<pos:position pos:line="88" pos:column="58"/></operator> <operator pos:line="88" pos:column="59">!<pos:position pos:line="88" pos:column="60"/></operator><call><name pos:line="88" pos:column="60">no_wildcard<pos:position pos:line="88" pos:column="71"/></name><argument_list pos:line="88" pos:column="71">(<argument><expr><name pos:line="88" pos:column="72">arg<pos:position pos:line="88" pos:column="75"/></name></expr></argument>)<pos:position pos:line="88" pos:column="76"/></argument_list></call><operator pos:line="88" pos:column="76">)<pos:position pos:line="88" pos:column="77"/></operator></expr>)<pos:position pos:line="88" pos:column="78"/></condition><then pos:line="88" pos:column="78">
			<block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="25">recover_with_dwim<pos:position pos:line="89" pos:column="42"/></name> <operator pos:line="89" pos:column="43">=<pos:position pos:line="89" pos:column="44"/></operator> <literal type="number" pos:line="89" pos:column="45">0<pos:position pos:line="89" pos:column="46"/></literal></expr>;<pos:position pos:line="89" pos:column="47"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="90" pos:column="17">/*
		 * Accept "git checkout foo" and "git checkout foo --"
		 * as candidates for dwim.
		 */</comment>
		<if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><operator pos:line="94" pos:column="21">!<pos:position pos:line="94" pos:column="22"/></operator><operator pos:line="94" pos:column="22">(<pos:position pos:line="94" pos:column="23"/></operator><name pos:line="94" pos:column="23">argc<pos:position pos:line="94" pos:column="27"/></name> <operator pos:line="94" pos:column="28">==<pos:position pos:line="94" pos:column="30"/></operator> <literal type="number" pos:line="94" pos:column="31">1<pos:position pos:line="94" pos:column="32"/></literal> <operator pos:line="94" pos:column="33">&amp;&amp;<pos:position pos:line="94" pos:column="43"/></operator> <operator pos:line="94" pos:column="36">!<pos:position pos:line="94" pos:column="37"/></operator><name pos:line="94" pos:column="37">has_dash_dash<pos:position pos:line="94" pos:column="50"/></name><operator pos:line="94" pos:column="50">)<pos:position pos:line="94" pos:column="51"/></operator> <operator pos:line="94" pos:column="52">&amp;&amp;<pos:position pos:line="94" pos:column="62"/></operator>
		    <operator pos:line="95" pos:column="21">!<pos:position pos:line="95" pos:column="22"/></operator><operator pos:line="95" pos:column="22">(<pos:position pos:line="95" pos:column="23"/></operator><name pos:line="95" pos:column="23">argc<pos:position pos:line="95" pos:column="27"/></name> <operator pos:line="95" pos:column="28">==<pos:position pos:line="95" pos:column="30"/></operator> <literal type="number" pos:line="95" pos:column="31">2<pos:position pos:line="95" pos:column="32"/></literal> <operator pos:line="95" pos:column="33">&amp;&amp;<pos:position pos:line="95" pos:column="43"/></operator> <name pos:line="95" pos:column="36">has_dash_dash<pos:position pos:line="95" pos:column="49"/></name><operator pos:line="95" pos:column="49">)<pos:position pos:line="95" pos:column="50"/></operator></expr>)<pos:position pos:line="95" pos:column="51"/></condition><then pos:line="95" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><name pos:line="96" pos:column="25">recover_with_dwim<pos:position pos:line="96" pos:column="42"/></name> <operator pos:line="96" pos:column="43">=<pos:position pos:line="96" pos:column="44"/></operator> <literal type="number" pos:line="96" pos:column="45">0<pos:position pos:line="96" pos:column="46"/></literal></expr>;<pos:position pos:line="96" pos:column="47"/></expr_stmt></block></then></if>

		<if pos:line="98" pos:column="17">if <condition pos:line="98" pos:column="20">(<expr><name pos:line="98" pos:column="21">recover_with_dwim<pos:position pos:line="98" pos:column="38"/></name></expr>)<pos:position pos:line="98" pos:column="39"/></condition><then pos:line="98" pos:column="39"> <block pos:line="98" pos:column="40">{
			<decl_stmt><decl><type><specifier pos:line="99" pos:column="25">const<pos:position pos:line="99" pos:column="30"/></specifier> <name pos:line="99" pos:column="31">char<pos:position pos:line="99" pos:column="35"/></name> <modifier pos:line="99" pos:column="36">*<pos:position pos:line="99" pos:column="37"/></modifier></type><name pos:line="99" pos:column="37">remote<pos:position pos:line="99" pos:column="43"/></name> <init pos:line="99" pos:column="44">= <expr><call><name pos:line="99" pos:column="46">unique_tracking_name<pos:position pos:line="99" pos:column="66"/></name><argument_list pos:line="99" pos:column="66">(<argument><expr><name pos:line="99" pos:column="67">arg<pos:position pos:line="99" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="72">rev<pos:position pos:line="99" pos:column="75"/></name></expr></argument>)<pos:position pos:line="99" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="99" pos:column="77"/></decl_stmt>
			<if pos:line="100" pos:column="25">if <condition pos:line="100" pos:column="28">(<expr><name pos:line="100" pos:column="29">remote<pos:position pos:line="100" pos:column="35"/></name></expr>)<pos:position pos:line="100" pos:column="36"/></condition><then pos:line="100" pos:column="36"> <block pos:line="100" pos:column="37">{
				<expr_stmt><expr><operator pos:line="101" pos:column="33">*<pos:position pos:line="101" pos:column="34"/></operator><name pos:line="101" pos:column="34">new_branch<pos:position pos:line="101" pos:column="44"/></name> <operator pos:line="101" pos:column="45">=<pos:position pos:line="101" pos:column="46"/></operator> <name pos:line="101" pos:column="47">arg<pos:position pos:line="101" pos:column="50"/></name></expr>;<pos:position pos:line="101" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><name pos:line="102" pos:column="33">arg<pos:position pos:line="102" pos:column="36"/></name> <operator pos:line="102" pos:column="37">=<pos:position pos:line="102" pos:column="38"/></operator> <name pos:line="102" pos:column="39">remote<pos:position pos:line="102" pos:column="45"/></name></expr>;<pos:position pos:line="102" pos:column="46"/></expr_stmt>
				<comment type="block" pos:line="103" pos:column="33">/* DWIMmed to create local branch, case (3).(b) */</comment>
			}<pos:position pos:line="104" pos:column="26"/></block></then> <else pos:line="104" pos:column="27">else <block pos:line="104" pos:column="32">{
				<expr_stmt><expr><name pos:line="105" pos:column="33">recover_with_dwim<pos:position pos:line="105" pos:column="50"/></name> <operator pos:line="105" pos:column="51">=<pos:position pos:line="105" pos:column="52"/></operator> <literal type="number" pos:line="105" pos:column="53">0<pos:position pos:line="105" pos:column="54"/></literal></expr>;<pos:position pos:line="105" pos:column="55"/></expr_stmt>
			}<pos:position pos:line="106" pos:column="26"/></block></else></if>
		}<pos:position pos:line="107" pos:column="18"/></block></then></if>

		<if pos:line="109" pos:column="17">if <condition pos:line="109" pos:column="20">(<expr><operator pos:line="109" pos:column="21">!<pos:position pos:line="109" pos:column="22"/></operator><name pos:line="109" pos:column="22">recover_with_dwim<pos:position pos:line="109" pos:column="39"/></name></expr>)<pos:position pos:line="109" pos:column="40"/></condition><then pos:line="109" pos:column="40"> <block pos:line="109" pos:column="41">{
			<if pos:line="110" pos:column="25">if <condition pos:line="110" pos:column="28">(<expr><name pos:line="110" pos:column="29">has_dash_dash<pos:position pos:line="110" pos:column="42"/></name></expr>)<pos:position pos:line="110" pos:column="43"/></condition><then pos:line="110" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="33">die<pos:position pos:line="111" pos:column="36"/></name><argument_list pos:line="111" pos:column="36">(<argument><expr><call><name pos:line="111" pos:column="37">_<pos:position pos:line="111" pos:column="38"/></name><argument_list pos:line="111" pos:column="38">(<argument><expr><literal type="string" pos:line="111" pos:column="39">"invalid reference: %s"<pos:position pos:line="111" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="111" pos:column="65">arg<pos:position pos:line="111" pos:column="68"/></name></expr></argument>)<pos:position pos:line="111" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="70"/></expr_stmt></block></then></if>
			<return pos:line="112" pos:column="25">return <expr><name pos:line="112" pos:column="32">argcount<pos:position pos:line="112" pos:column="40"/></name></expr>;<pos:position pos:line="112" pos:column="41"/></return>
		}<pos:position pos:line="113" pos:column="18"/></block></then></if>
	}<pos:position pos:line="114" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="116" pos:column="9">/* we can't end up being in (2) anymore, eat the argument */</comment>
	<expr_stmt><expr><name pos:line="117" pos:column="9">argcount<pos:position pos:line="117" pos:column="17"/></name><operator pos:line="117" pos:column="17">++<pos:position pos:line="117" pos:column="19"/></operator></expr>;<pos:position pos:line="117" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="118" pos:column="9">argv<pos:position pos:line="118" pos:column="13"/></name><operator pos:line="118" pos:column="13">++<pos:position pos:line="118" pos:column="15"/></operator></expr>;<pos:position pos:line="118" pos:column="16"/></expr_stmt>
	<expr_stmt><expr><name pos:line="119" pos:column="9">argc<pos:position pos:line="119" pos:column="13"/></name><operator pos:line="119" pos:column="13">--<pos:position pos:line="119" pos:column="15"/></operator></expr>;<pos:position pos:line="119" pos:column="16"/></expr_stmt>

	<expr_stmt><expr><operator pos:line="121" pos:column="9">new<pos:position pos:line="121" pos:column="12"/></operator><operator pos:line="121" pos:column="12">-&gt;<pos:position pos:line="121" pos:column="17"/></operator><name pos:line="121" pos:column="14">name<pos:position pos:line="121" pos:column="18"/></name> <operator pos:line="121" pos:column="19">=<pos:position pos:line="121" pos:column="20"/></operator> <name pos:line="121" pos:column="21">arg<pos:position pos:line="121" pos:column="24"/></name></expr>;<pos:position pos:line="121" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="122" pos:column="9">setup_branch_path<pos:position pos:line="122" pos:column="26"/></name><argument_list pos:line="122" pos:column="26">(<argument><expr><operator pos:line="122" pos:column="27">new<pos:position pos:line="122" pos:column="30"/></operator></expr></argument>)<pos:position pos:line="122" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="32"/></expr_stmt>

	<if pos:line="124" pos:column="9">if <condition pos:line="124" pos:column="12">(<expr><operator pos:line="124" pos:column="13">!<pos:position pos:line="124" pos:column="14"/></operator><call><name pos:line="124" pos:column="14">check_refname_format<pos:position pos:line="124" pos:column="34"/></name><argument_list pos:line="124" pos:column="34">(<argument><expr><operator pos:line="124" pos:column="35">new<pos:position pos:line="124" pos:column="38"/></operator><operator pos:line="124" pos:column="38">-&gt;<pos:position pos:line="124" pos:column="43"/></operator><name pos:line="124" pos:column="40">path<pos:position pos:line="124" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="124" pos:column="46">0<pos:position pos:line="124" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="48"/></argument_list></call> <operator pos:line="124" pos:column="49">&amp;&amp;<pos:position pos:line="124" pos:column="59"/></operator>
	    <operator pos:line="125" pos:column="13">!<pos:position pos:line="125" pos:column="14"/></operator><call><name pos:line="125" pos:column="14">read_ref<pos:position pos:line="125" pos:column="22"/></name><argument_list pos:line="125" pos:column="22">(<argument><expr><operator pos:line="125" pos:column="23">new<pos:position pos:line="125" pos:column="26"/></operator><operator pos:line="125" pos:column="26">-&gt;<pos:position pos:line="125" pos:column="31"/></operator><name pos:line="125" pos:column="28">path<pos:position pos:line="125" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="34">branch_rev<pos:position pos:line="125" pos:column="44"/></name><operator pos:line="125" pos:column="44">.<pos:position pos:line="125" pos:column="45"/></operator><name pos:line="125" pos:column="45">hash<pos:position pos:line="125" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="125" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="125" pos:column="51"/></condition><then pos:line="125" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="126" pos:column="17">oidcpy<pos:position pos:line="126" pos:column="23"/></name><argument_list pos:line="126" pos:column="23">(<argument><expr><name pos:line="126" pos:column="24">rev<pos:position pos:line="126" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="126" pos:column="29">&amp;<pos:position pos:line="126" pos:column="34"/></operator><name pos:line="126" pos:column="30">branch_rev<pos:position pos:line="126" pos:column="40"/></name></expr></argument>)<pos:position pos:line="126" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="42"/></expr_stmt></block></then>
	<else pos:line="127" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><operator pos:line="128" pos:column="17">new<pos:position pos:line="128" pos:column="20"/></operator><operator pos:line="128" pos:column="20">-&gt;<pos:position pos:line="128" pos:column="25"/></operator><name pos:line="128" pos:column="22">path<pos:position pos:line="128" pos:column="26"/></name> <operator pos:line="128" pos:column="27">=<pos:position pos:line="128" pos:column="28"/></operator> <name pos:line="128" pos:column="29">NULL<pos:position pos:line="128" pos:column="33"/></name></expr>;<pos:position pos:line="128" pos:column="34"/></expr_stmt></block></else></if> <comment type="block" pos:line="128" pos:column="35">/* not an existing branch */</comment>

	<expr_stmt><expr><operator pos:line="130" pos:column="9">new<pos:position pos:line="130" pos:column="12"/></operator><operator pos:line="130" pos:column="12">-&gt;<pos:position pos:line="130" pos:column="17"/></operator><name pos:line="130" pos:column="14">commit<pos:position pos:line="130" pos:column="20"/></name> <operator pos:line="130" pos:column="21">=<pos:position pos:line="130" pos:column="22"/></operator> <call><name pos:line="130" pos:column="23">lookup_commit_reference_gently<pos:position pos:line="130" pos:column="53"/></name><argument_list pos:line="130" pos:column="53">(<argument><expr><name pos:line="130" pos:column="54">rev<pos:position pos:line="130" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="130" pos:column="59">1<pos:position pos:line="130" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="62"/></expr_stmt>
	<if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><operator pos:line="131" pos:column="13">!<pos:position pos:line="131" pos:column="14"/></operator><operator pos:line="131" pos:column="14">new<pos:position pos:line="131" pos:column="17"/></operator><operator pos:line="131" pos:column="17">-&gt;<pos:position pos:line="131" pos:column="22"/></operator><name pos:line="131" pos:column="19">commit<pos:position pos:line="131" pos:column="25"/></name></expr>)<pos:position pos:line="131" pos:column="26"/></condition><then pos:line="131" pos:column="26"> <block pos:line="131" pos:column="27">{
		<comment type="block" pos:line="132" pos:column="17">/* not a commit */</comment>
		<expr_stmt><expr><operator pos:line="133" pos:column="17">*<pos:position pos:line="133" pos:column="18"/></operator><name pos:line="133" pos:column="18">source_tree<pos:position pos:line="133" pos:column="29"/></name> <operator pos:line="133" pos:column="30">=<pos:position pos:line="133" pos:column="31"/></operator> <call><name pos:line="133" pos:column="32">parse_tree_indirect<pos:position pos:line="133" pos:column="51"/></name><argument_list pos:line="133" pos:column="51">(<argument><expr><name pos:line="133" pos:column="52">rev<pos:position pos:line="133" pos:column="55"/></name></expr></argument>)<pos:position pos:line="133" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="134" pos:column="10"/></block></then> <else pos:line="134" pos:column="11">else <block pos:line="134" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="135" pos:column="17">parse_commit_or_die<pos:position pos:line="135" pos:column="36"/></name><argument_list pos:line="135" pos:column="36">(<argument><expr><operator pos:line="135" pos:column="37">new<pos:position pos:line="135" pos:column="40"/></operator><operator pos:line="135" pos:column="40">-&gt;<pos:position pos:line="135" pos:column="45"/></operator><name pos:line="135" pos:column="42">commit<pos:position pos:line="135" pos:column="48"/></name></expr></argument>)<pos:position pos:line="135" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="136" pos:column="17">*<pos:position pos:line="136" pos:column="18"/></operator><name pos:line="136" pos:column="18">source_tree<pos:position pos:line="136" pos:column="29"/></name> <operator pos:line="136" pos:column="30">=<pos:position pos:line="136" pos:column="31"/></operator> <operator pos:line="136" pos:column="32">new<pos:position pos:line="136" pos:column="35"/></operator><operator pos:line="136" pos:column="35">-&gt;<pos:position pos:line="136" pos:column="40"/></operator><name><name pos:line="136" pos:column="37">commit<pos:position pos:line="136" pos:column="43"/></name><operator pos:line="136" pos:column="43">-&gt;<pos:position pos:line="136" pos:column="48"/></operator><name pos:line="136" pos:column="45">tree<pos:position pos:line="136" pos:column="49"/></name></name></expr>;<pos:position pos:line="136" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="137" pos:column="10"/></block></else></if>

	<if pos:line="139" pos:column="9">if <condition pos:line="139" pos:column="12">(<expr><operator pos:line="139" pos:column="13">!<pos:position pos:line="139" pos:column="14"/></operator><operator pos:line="139" pos:column="14">*<pos:position pos:line="139" pos:column="15"/></operator><name pos:line="139" pos:column="15">source_tree<pos:position pos:line="139" pos:column="26"/></name></expr>)<pos:position pos:line="139" pos:column="27"/></condition><then pos:line="139" pos:column="27">                   <comment type="block" pos:line="139" pos:column="46">/* case (1): want a tree */</comment>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="140" pos:column="17">die<pos:position pos:line="140" pos:column="20"/></name><argument_list pos:line="140" pos:column="20">(<argument><expr><call><name pos:line="140" pos:column="21">_<pos:position pos:line="140" pos:column="22"/></name><argument_list pos:line="140" pos:column="22">(<argument><expr><literal type="string" pos:line="140" pos:column="23">"reference is not a tree: %s"<pos:position pos:line="140" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="140" pos:column="55">arg<pos:position pos:line="140" pos:column="58"/></name></expr></argument>)<pos:position pos:line="140" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="60"/></expr_stmt></block></then></if>
	<if pos:line="141" pos:column="9">if <condition pos:line="141" pos:column="12">(<expr><operator pos:line="141" pos:column="13">!<pos:position pos:line="141" pos:column="14"/></operator><name pos:line="141" pos:column="14">has_dash_dash<pos:position pos:line="141" pos:column="27"/></name></expr>)<pos:position pos:line="141" pos:column="28"/></condition><then pos:line="141" pos:column="28"> <block pos:line="141" pos:column="29">{	<comment type="block" pos:line="141" pos:column="33">/* case (3).(d) -&gt; (1) */</comment>
		<comment type="block" pos:line="142" pos:column="17">/*
		 * Do not complain the most common case
		 *	git checkout branch
		 * even if there happen to be a file called 'branch';
		 * it would be extremely annoying.
		 */</comment>
		<if pos:line="148" pos:column="17">if <condition pos:line="148" pos:column="20">(<expr><name pos:line="148" pos:column="21">argc<pos:position pos:line="148" pos:column="25"/></name></expr>)<pos:position pos:line="148" pos:column="26"/></condition><then pos:line="148" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="149" pos:column="25">verify_non_filename<pos:position pos:line="149" pos:column="44"/></name><argument_list pos:line="149" pos:column="44">(<argument><expr><name><name pos:line="149" pos:column="45">opts<pos:position pos:line="149" pos:column="49"/></name><operator pos:line="149" pos:column="49">-&gt;<pos:position pos:line="149" pos:column="54"/></operator><name pos:line="149" pos:column="51">prefix<pos:position pos:line="149" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="59">arg<pos:position pos:line="149" pos:column="62"/></name></expr></argument>)<pos:position pos:line="149" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="64"/></expr_stmt></block></then></if>
	}<pos:position pos:line="150" pos:column="10"/></block></then> <else pos:line="150" pos:column="11">else <block pos:line="150" pos:column="16">{
		<expr_stmt><expr><name pos:line="151" pos:column="17">argcount<pos:position pos:line="151" pos:column="25"/></name><operator pos:line="151" pos:column="25">++<pos:position pos:line="151" pos:column="27"/></operator></expr>;<pos:position pos:line="151" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="152" pos:column="17">argv<pos:position pos:line="152" pos:column="21"/></name><operator pos:line="152" pos:column="21">++<pos:position pos:line="152" pos:column="23"/></operator></expr>;<pos:position pos:line="152" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name pos:line="153" pos:column="17">argc<pos:position pos:line="153" pos:column="21"/></name><operator pos:line="153" pos:column="21">--<pos:position pos:line="153" pos:column="23"/></operator></expr>;<pos:position pos:line="153" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="154" pos:column="10"/></block></else></if>

	<return pos:line="156" pos:column="9">return <expr><name pos:line="156" pos:column="16">argcount<pos:position pos:line="156" pos:column="24"/></name></expr>;<pos:position pos:line="156" pos:column="25"/></return>
}</unit>
