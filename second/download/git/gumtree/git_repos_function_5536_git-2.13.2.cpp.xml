<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5536_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">check_nonce<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">buf<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">size_t<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">len<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">nonce<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><call><name pos:line="3" pos:column="23">find_header<pos:position pos:line="3" pos:column="34"/></name><argument_list pos:line="3" pos:column="34">(<argument><expr><name pos:line="3" pos:column="35">buf<pos:position pos:line="3" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="40">len<pos:position pos:line="3" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="45">"nonce"<pos:position pos:line="3" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="54">NULL<pos:position pos:line="3" pos:column="58"/></name></expr></argument>)<pos:position pos:line="3" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">long<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">stamp<pos:position pos:line="4" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="30">ostamp<pos:position pos:line="4" pos:column="36"/></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">bohmac<pos:position pos:line="5" pos:column="21"/></name></decl>, <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="24">expect<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><name pos:line="5" pos:column="33">NULL<pos:position pos:line="5" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">retval<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><name pos:line="6" pos:column="30">NONCE_BAD<pos:position pos:line="6" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">nonce<pos:position pos:line="8" pos:column="19"/></name></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20"> <block pos:line="8" pos:column="21">{
		<expr_stmt><expr><name pos:line="9" pos:column="17">retval<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">=<pos:position pos:line="9" pos:column="25"/></operator> <name pos:line="9" pos:column="26">NONCE_MISSING<pos:position pos:line="9" pos:column="39"/></name></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>
		<goto pos:line="10" pos:column="17">goto <name pos:line="10" pos:column="22">leave<pos:position pos:line="10" pos:column="27"/></name>;<pos:position pos:line="10" pos:column="28"/></goto>
	}<pos:position pos:line="11" pos:column="10"/></block></then> <elseif pos:line="11" pos:column="11">else <if pos:line="11" pos:column="16">if <condition pos:line="11" pos:column="19">(<expr><operator pos:line="11" pos:column="20">!<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">push_cert_nonce<pos:position pos:line="11" pos:column="36"/></name></expr>)<pos:position pos:line="11" pos:column="37"/></condition><then pos:line="11" pos:column="37"> <block pos:line="11" pos:column="38">{
		<expr_stmt><expr><name pos:line="12" pos:column="17">retval<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <name pos:line="12" pos:column="26">NONCE_UNSOLICITED<pos:position pos:line="12" pos:column="43"/></name></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
		<goto pos:line="13" pos:column="17">goto <name pos:line="13" pos:column="22">leave<pos:position pos:line="13" pos:column="27"/></name>;<pos:position pos:line="13" pos:column="28"/></goto>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if></elseif> <elseif pos:line="14" pos:column="11">else <if pos:line="14" pos:column="16">if <condition pos:line="14" pos:column="19">(<expr><operator pos:line="14" pos:column="20">!<pos:position pos:line="14" pos:column="21"/></operator><call><name pos:line="14" pos:column="21">strcmp<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">push_cert_nonce<pos:position pos:line="14" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="45">nonce<pos:position pos:line="14" pos:column="50"/></name></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="52"/></condition><then pos:line="14" pos:column="52"> <block pos:line="14" pos:column="53">{
		<expr_stmt><expr><name pos:line="15" pos:column="17">retval<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">=<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="26">NONCE_OK<pos:position pos:line="15" pos:column="34"/></name></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
		<goto pos:line="16" pos:column="17">goto <name pos:line="16" pos:column="22">leave<pos:position pos:line="16" pos:column="27"/></name>;<pos:position pos:line="16" pos:column="28"/></goto>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if></elseif></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">stateless_rpc<pos:position pos:line="19" pos:column="27"/></name></expr>)<pos:position pos:line="19" pos:column="28"/></condition><then pos:line="19" pos:column="28"> <block pos:line="19" pos:column="29">{
		<comment type="block" pos:line="20" pos:column="17">/* returned nonce MUST match what we gave out earlier */</comment>
		<expr_stmt><expr><name pos:line="21" pos:column="17">retval<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">=<pos:position pos:line="21" pos:column="25"/></operator> <name pos:line="21" pos:column="26">NONCE_BAD<pos:position pos:line="21" pos:column="35"/></name></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
		<goto pos:line="22" pos:column="17">goto <name pos:line="22" pos:column="22">leave<pos:position pos:line="22" pos:column="27"/></name>;<pos:position pos:line="22" pos:column="28"/></goto>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="25" pos:column="9">/*
	 * In stateless mode, we may be receiving a nonce issued by
	 * another instance of the server that serving the same
	 * repository, and the timestamps may not match, but the
	 * nonce-seed and dir should match, so we can recompute and
	 * report the time slop.
	 *
	 * In addition, when a nonce issued by another instance has
	 * timestamp within receive.certnonceslop seconds, we pretend
	 * as if we issued that nonce when reporting to the hook.
	 */</comment>

	<comment type="block" pos:line="37" pos:column="9">/* nonce is concat(&lt;seconds-since-epoch&gt;, "-", &lt;hmac&gt;) */</comment>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">*<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">nonce<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">&lt;=<pos:position pos:line="38" pos:column="25"/></operator> <literal type="char" pos:line="38" pos:column="23">'0'<pos:position pos:line="38" pos:column="26"/></literal> <operator pos:line="38" pos:column="27">||<pos:position pos:line="38" pos:column="29"/></operator> <literal type="char" pos:line="38" pos:column="30">'9'<pos:position pos:line="38" pos:column="33"/></literal> <operator pos:line="38" pos:column="34">&lt;<pos:position pos:line="38" pos:column="38"/></operator> <operator pos:line="38" pos:column="36">*<pos:position pos:line="38" pos:column="37"/></operator><name pos:line="38" pos:column="37">nonce<pos:position pos:line="38" pos:column="42"/></name></expr>)<pos:position pos:line="38" pos:column="43"/></condition><then pos:line="38" pos:column="43"> <block pos:line="38" pos:column="44">{
		<expr_stmt><expr><name pos:line="39" pos:column="17">retval<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">=<pos:position pos:line="39" pos:column="25"/></operator> <name pos:line="39" pos:column="26">NONCE_BAD<pos:position pos:line="39" pos:column="35"/></name></expr>;<pos:position pos:line="39" pos:column="36"/></expr_stmt>
		<goto pos:line="40" pos:column="17">goto <name pos:line="40" pos:column="22">leave<pos:position pos:line="40" pos:column="27"/></name>;<pos:position pos:line="40" pos:column="28"/></goto>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="42" pos:column="9">stamp<pos:position pos:line="42" pos:column="14"/></name> <operator pos:line="42" pos:column="15">=<pos:position pos:line="42" pos:column="16"/></operator> <call><name pos:line="42" pos:column="17">strtoul<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">nonce<pos:position pos:line="42" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="32">&amp;<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="33">bohmac<pos:position pos:line="42" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="41">10<pos:position pos:line="42" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="45"/></expr_stmt>
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">bohmac<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">==<pos:position pos:line="43" pos:column="22"/></operator> <name pos:line="43" pos:column="23">nonce<pos:position pos:line="43" pos:column="28"/></name> <operator pos:line="43" pos:column="29">||<pos:position pos:line="43" pos:column="31"/></operator> <name><name pos:line="43" pos:column="32">bohmac<pos:position pos:line="43" pos:column="38"/></name><index pos:line="43" pos:column="38">[<expr><literal type="number" pos:line="43" pos:column="39">0<pos:position pos:line="43" pos:column="40"/></literal></expr>]<pos:position pos:line="43" pos:column="41"/></index></name> <operator pos:line="43" pos:column="42">!=<pos:position pos:line="43" pos:column="44"/></operator> <literal type="char" pos:line="43" pos:column="45">'-'<pos:position pos:line="43" pos:column="48"/></literal></expr>)<pos:position pos:line="43" pos:column="49"/></condition><then pos:line="43" pos:column="49"> <block pos:line="43" pos:column="50">{
		<expr_stmt><expr><name pos:line="44" pos:column="17">retval<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <name pos:line="44" pos:column="26">NONCE_BAD<pos:position pos:line="44" pos:column="35"/></name></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt>
		<goto pos:line="45" pos:column="17">goto <name pos:line="45" pos:column="22">leave<pos:position pos:line="45" pos:column="27"/></name>;<pos:position pos:line="45" pos:column="28"/></goto>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="48" pos:column="9">expect<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <call><name pos:line="48" pos:column="18">prepare_push_cert_nonce<pos:position pos:line="48" pos:column="41"/></name><argument_list pos:line="48" pos:column="41">(<argument><expr><name pos:line="48" pos:column="42">service_dir<pos:position pos:line="48" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="55">stamp<pos:position pos:line="48" pos:column="60"/></name></expr></argument>)<pos:position pos:line="48" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="62"/></expr_stmt>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><call><name pos:line="49" pos:column="13">strcmp<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><name pos:line="49" pos:column="20">expect<pos:position pos:line="49" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="28">nonce<pos:position pos:line="49" pos:column="33"/></name></expr></argument>)<pos:position pos:line="49" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="35"/></condition><then pos:line="49" pos:column="35"> <block pos:line="49" pos:column="36">{
		<comment type="block" pos:line="50" pos:column="17">/* Not what we would have signed earlier */</comment>
		<expr_stmt><expr><name pos:line="51" pos:column="17">retval<pos:position pos:line="51" pos:column="23"/></name> <operator pos:line="51" pos:column="24">=<pos:position pos:line="51" pos:column="25"/></operator> <name pos:line="51" pos:column="26">NONCE_BAD<pos:position pos:line="51" pos:column="35"/></name></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>
		<goto pos:line="52" pos:column="17">goto <name pos:line="52" pos:column="22">leave<pos:position pos:line="52" pos:column="27"/></name>;<pos:position pos:line="52" pos:column="28"/></goto>
	}<pos:position pos:line="53" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="55" pos:column="9">/*
	 * By how many seconds is this nonce stale?  Negative value
	 * would mean it was issued by another server with its clock
	 * skewed in the future.
	 */</comment>
	<expr_stmt><expr><name pos:line="60" pos:column="9">ostamp<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">=<pos:position pos:line="60" pos:column="17"/></operator> <call><name pos:line="60" pos:column="18">strtoul<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">push_cert_nonce<pos:position pos:line="60" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="43">NULL<pos:position pos:line="60" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="49">10<pos:position pos:line="60" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name pos:line="61" pos:column="9">nonce_stamp_slop<pos:position pos:line="61" pos:column="25"/></name> <operator pos:line="61" pos:column="26">=<pos:position pos:line="61" pos:column="27"/></operator> <operator pos:line="61" pos:column="28">(<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="29">long<pos:position pos:line="61" pos:column="33"/></name><operator pos:line="61" pos:column="33">)<pos:position pos:line="61" pos:column="34"/></operator><name pos:line="61" pos:column="34">ostamp<pos:position pos:line="61" pos:column="40"/></name> <operator pos:line="61" pos:column="41">-<pos:position pos:line="61" pos:column="42"/></operator> <operator pos:line="61" pos:column="43">(<pos:position pos:line="61" pos:column="44"/></operator><name pos:line="61" pos:column="44">long<pos:position pos:line="61" pos:column="48"/></name><operator pos:line="61" pos:column="48">)<pos:position pos:line="61" pos:column="49"/></operator><name pos:line="61" pos:column="49">stamp<pos:position pos:line="61" pos:column="54"/></name></expr>;<pos:position pos:line="61" pos:column="55"/></expr_stmt>

	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">nonce_stamp_slop_limit<pos:position pos:line="63" pos:column="35"/></name> <operator pos:line="63" pos:column="36">&amp;&amp;<pos:position pos:line="63" pos:column="46"/></operator>
	    <call><name pos:line="64" pos:column="13">labs<pos:position pos:line="64" pos:column="17"/></name><argument_list pos:line="64" pos:column="17">(<argument><expr><name pos:line="64" pos:column="18">nonce_stamp_slop<pos:position pos:line="64" pos:column="34"/></name></expr></argument>)<pos:position pos:line="64" pos:column="35"/></argument_list></call> <operator pos:line="64" pos:column="36">&lt;=<pos:position pos:line="64" pos:column="41"/></operator> <name pos:line="64" pos:column="39">nonce_stamp_slop_limit<pos:position pos:line="64" pos:column="61"/></name></expr>)<pos:position pos:line="64" pos:column="62"/></condition><then pos:line="64" pos:column="62"> <block pos:line="64" pos:column="63">{
		<comment type="block" pos:line="65" pos:column="17">/*
		 * Pretend as if the received nonce (which passes the
		 * HMAC check, so it is not a forged by third-party)
		 * is what we issued.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">free<pos:position pos:line="70" pos:column="21"/></name><argument_list pos:line="70" pos:column="21">(<argument><expr><operator pos:line="70" pos:column="22">(<pos:position pos:line="70" pos:column="23"/></operator><name pos:line="70" pos:column="23">void<pos:position pos:line="70" pos:column="27"/></name> <operator pos:line="70" pos:column="28">*<pos:position pos:line="70" pos:column="29"/></operator><operator pos:line="70" pos:column="29">)<pos:position pos:line="70" pos:column="30"/></operator><name pos:line="70" pos:column="30">push_cert_nonce<pos:position pos:line="70" pos:column="45"/></name></expr></argument>)<pos:position pos:line="70" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name pos:line="71" pos:column="17">push_cert_nonce<pos:position pos:line="71" pos:column="32"/></name> <operator pos:line="71" pos:column="33">=<pos:position pos:line="71" pos:column="34"/></operator> <call><name pos:line="71" pos:column="35">xstrdup<pos:position pos:line="71" pos:column="42"/></name><argument_list pos:line="71" pos:column="42">(<argument><expr><name pos:line="71" pos:column="43">nonce<pos:position pos:line="71" pos:column="48"/></name></expr></argument>)<pos:position pos:line="71" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name pos:line="72" pos:column="17">retval<pos:position pos:line="72" pos:column="23"/></name> <operator pos:line="72" pos:column="24">=<pos:position pos:line="72" pos:column="25"/></operator> <name pos:line="72" pos:column="26">NONCE_OK<pos:position pos:line="72" pos:column="34"/></name></expr>;<pos:position pos:line="72" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="73" pos:column="10"/></block></then> <else pos:line="73" pos:column="11">else <block pos:line="73" pos:column="16">{
		<expr_stmt><expr><name pos:line="74" pos:column="17">retval<pos:position pos:line="74" pos:column="23"/></name> <operator pos:line="74" pos:column="24">=<pos:position pos:line="74" pos:column="25"/></operator> <name pos:line="74" pos:column="26">NONCE_SLOP<pos:position pos:line="74" pos:column="36"/></name></expr>;<pos:position pos:line="74" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="75" pos:column="10"/></block></else></if>

<label><name pos:line="77" pos:column="1">leave<pos:position pos:line="77" pos:column="6"/></name>:<pos:position pos:line="77" pos:column="7"/></label>
	<expr_stmt><expr><call><name pos:line="78" pos:column="9">free<pos:position pos:line="78" pos:column="13"/></name><argument_list pos:line="78" pos:column="13">(<argument><expr><name pos:line="78" pos:column="14">nonce<pos:position pos:line="78" pos:column="19"/></name></expr></argument>)<pos:position pos:line="78" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="79" pos:column="9">free<pos:position pos:line="79" pos:column="13"/></name><argument_list pos:line="79" pos:column="13">(<argument><expr><name pos:line="79" pos:column="14">expect<pos:position pos:line="79" pos:column="20"/></name></expr></argument>)<pos:position pos:line="79" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="22"/></expr_stmt>
	<return pos:line="80" pos:column="9">return <expr><name pos:line="80" pos:column="16">retval<pos:position pos:line="80" pos:column="22"/></name></expr>;<pos:position pos:line="80" pos:column="23"/></return>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
