<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6745_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bin_tree_t<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type>
<name pos:line="2" pos:column="1">parse_reg_exp<pos:position pos:line="2" pos:column="14"/></name> <parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">re_string_t<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">regexp<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">regex_t<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">preg<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">re_token_t<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">token<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>,
	       <parameter><decl><type><name pos:line="3" pos:column="16">reg_syntax_t<pos:position pos:line="3" pos:column="28"/></name></type> <name pos:line="3" pos:column="29">syntax<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="37">int<pos:position pos:line="3" pos:column="40"/></name></type> <name pos:line="3" pos:column="41">nest<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="47">reg_errcode_t<pos:position pos:line="3" pos:column="60"/></name> <modifier pos:line="3" pos:column="61">*<pos:position pos:line="3" pos:column="62"/></modifier></type><name pos:line="3" pos:column="62">err<pos:position pos:line="3" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="66"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">re_dfa_t<pos:position pos:line="5" pos:column="11"/></name> <modifier pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></modifier></type><name pos:line="5" pos:column="13">dfa<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><operator pos:line="5" pos:column="19">(<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="20">re_dfa_t<pos:position pos:line="5" pos:column="28"/></name> <operator pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></operator><operator pos:line="5" pos:column="30">)<pos:position pos:line="5" pos:column="31"/></operator> <name><name pos:line="5" pos:column="32">preg<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">buffer<pos:position pos:line="5" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">bin_tree_t<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">tree<pos:position pos:line="6" pos:column="19"/></name></decl>, <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="22">branch<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name pos:line="6" pos:column="31">NULL<pos:position pos:line="6" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
  <expr_stmt><expr><name pos:line="7" pos:column="3">tree<pos:position pos:line="7" pos:column="7"/></name> <operator pos:line="7" pos:column="8">=<pos:position pos:line="7" pos:column="9"/></operator> <call><name pos:line="7" pos:column="10">parse_branch<pos:position pos:line="7" pos:column="22"/></name> <argument_list pos:line="7" pos:column="23">(<argument><expr><name pos:line="7" pos:column="24">regexp<pos:position pos:line="7" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="32">preg<pos:position pos:line="7" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="38">token<pos:position pos:line="7" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="45">syntax<pos:position pos:line="7" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="53">nest<pos:position pos:line="7" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="59">err<pos:position pos:line="7" pos:column="62"/></name></expr></argument>)<pos:position pos:line="7" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="64"/></expr_stmt>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><call><name pos:line="8" pos:column="7">BE<pos:position pos:line="8" pos:column="9"/></name> <argument_list pos:line="8" pos:column="10">(<argument><expr><operator pos:line="8" pos:column="11">*<pos:position pos:line="8" pos:column="12"/></operator><name pos:line="8" pos:column="12">err<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">!=<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="19">REG_NOERROR<pos:position pos:line="8" pos:column="30"/></name> <operator pos:line="8" pos:column="31">&amp;&amp;<pos:position pos:line="8" pos:column="41"/></operator> <name pos:line="8" pos:column="34">tree<pos:position pos:line="8" pos:column="38"/></name> <operator pos:line="8" pos:column="39">==<pos:position pos:line="8" pos:column="41"/></operator> <name pos:line="8" pos:column="42">NULL<pos:position pos:line="8" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="48">0<pos:position pos:line="8" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="51"/></condition><then pos:line="8" pos:column="51">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">NULL<pos:position pos:line="9" pos:column="16"/></name></expr>;<pos:position pos:line="9" pos:column="17"/></return></block></then></if>

  <while pos:line="11" pos:column="3">while <condition pos:line="11" pos:column="9">(<expr><name><name pos:line="11" pos:column="10">token<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">type<pos:position pos:line="11" pos:column="21"/></name></name> <operator pos:line="11" pos:column="22">==<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">OP_ALT<pos:position pos:line="11" pos:column="31"/></name></expr>)<pos:position pos:line="11" pos:column="32"/></condition>
    <block pos:line="12" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="13" pos:column="7">fetch_token<pos:position pos:line="13" pos:column="18"/></name> <argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">token<pos:position pos:line="13" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="27">regexp<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="35">syntax<pos:position pos:line="13" pos:column="41"/></name> <operator pos:line="13" pos:column="42">|<pos:position pos:line="13" pos:column="43"/></operator> <name pos:line="13" pos:column="44">RE_CARET_ANCHORS_HERE<pos:position pos:line="13" pos:column="65"/></name></expr></argument>)<pos:position pos:line="13" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="67"/></expr_stmt>
      <if pos:line="14" pos:column="7">if <condition pos:line="14" pos:column="10">(<expr><name><name pos:line="14" pos:column="11">token<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">type<pos:position pos:line="14" pos:column="22"/></name></name> <operator pos:line="14" pos:column="23">!=<pos:position pos:line="14" pos:column="25"/></operator> <name pos:line="14" pos:column="26">OP_ALT<pos:position pos:line="14" pos:column="32"/></name> <operator pos:line="14" pos:column="33">&amp;&amp;<pos:position pos:line="14" pos:column="43"/></operator> <name><name pos:line="14" pos:column="36">token<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">-&gt;<pos:position pos:line="14" pos:column="46"/></operator><name pos:line="14" pos:column="43">type<pos:position pos:line="14" pos:column="47"/></name></name> <operator pos:line="14" pos:column="48">!=<pos:position pos:line="14" pos:column="50"/></operator> <name pos:line="14" pos:column="51">END_OF_RE<pos:position pos:line="14" pos:column="60"/></name>
	  <operator pos:line="15" pos:column="11">&amp;&amp;<pos:position pos:line="15" pos:column="21"/></operator> <operator pos:line="15" pos:column="14">(<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">nest<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">==<pos:position pos:line="15" pos:column="22"/></operator> <literal type="number" pos:line="15" pos:column="23">0<pos:position pos:line="15" pos:column="24"/></literal> <operator pos:line="15" pos:column="25">||<pos:position pos:line="15" pos:column="27"/></operator> <name><name pos:line="15" pos:column="28">token<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">-&gt;<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="35">type<pos:position pos:line="15" pos:column="39"/></name></name> <operator pos:line="15" pos:column="40">!=<pos:position pos:line="15" pos:column="42"/></operator> <name pos:line="15" pos:column="43">OP_CLOSE_SUBEXP<pos:position pos:line="15" pos:column="58"/></name><operator pos:line="15" pos:column="58">)<pos:position pos:line="15" pos:column="59"/></operator></expr>)<pos:position pos:line="15" pos:column="60"/></condition><then pos:line="15" pos:column="60">
	<block pos:line="16" pos:column="9">{
	  <expr_stmt><expr><name pos:line="17" pos:column="11">branch<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <call><name pos:line="17" pos:column="20">parse_branch<pos:position pos:line="17" pos:column="32"/></name> <argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">regexp<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="42">preg<pos:position pos:line="17" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="48">token<pos:position pos:line="17" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="55">syntax<pos:position pos:line="17" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="63">nest<pos:position pos:line="17" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="69">err<pos:position pos:line="17" pos:column="72"/></name></expr></argument>)<pos:position pos:line="17" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="74"/></expr_stmt>
	  <if pos:line="18" pos:column="11">if <condition pos:line="18" pos:column="14">(<expr><call><name pos:line="18" pos:column="15">BE<pos:position pos:line="18" pos:column="17"/></name> <argument_list pos:line="18" pos:column="18">(<argument><expr><operator pos:line="18" pos:column="19">*<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">err<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">!=<pos:position pos:line="18" pos:column="26"/></operator> <name pos:line="18" pos:column="27">REG_NOERROR<pos:position pos:line="18" pos:column="38"/></name> <operator pos:line="18" pos:column="39">&amp;&amp;<pos:position pos:line="18" pos:column="49"/></operator> <name pos:line="18" pos:column="42">branch<pos:position pos:line="18" pos:column="48"/></name> <operator pos:line="18" pos:column="49">==<pos:position pos:line="18" pos:column="51"/></operator> <name pos:line="18" pos:column="52">NULL<pos:position pos:line="18" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="58">0<pos:position pos:line="18" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="61"/></condition><then pos:line="18" pos:column="61">
	    <block type="pseudo"><return pos:line="19" pos:column="13">return <expr><name pos:line="19" pos:column="20">NULL<pos:position pos:line="19" pos:column="24"/></name></expr>;<pos:position pos:line="19" pos:column="25"/></return></block></then></if>
	}<pos:position pos:line="20" pos:column="10"/></block></then>
      <else pos:line="21" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="9">branch<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <name pos:line="22" pos:column="18">NULL<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt></block></else></if>
      <expr_stmt><expr><name pos:line="23" pos:column="7">tree<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <call><name pos:line="23" pos:column="14">create_tree<pos:position pos:line="23" pos:column="25"/></name> <argument_list pos:line="23" pos:column="26">(<argument><expr><name pos:line="23" pos:column="27">dfa<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="32">tree<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="38">branch<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="46">OP_ALT<pos:position pos:line="23" pos:column="52"/></name></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="54"/></expr_stmt>
      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><call><name pos:line="24" pos:column="11">BE<pos:position pos:line="24" pos:column="13"/></name> <argument_list pos:line="24" pos:column="14">(<argument><expr><name pos:line="24" pos:column="15">tree<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">==<pos:position pos:line="24" pos:column="22"/></operator> <name pos:line="24" pos:column="23">NULL<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="29">0<pos:position pos:line="24" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="32"/></condition><then pos:line="24" pos:column="32">
	<block pos:line="25" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="26" pos:column="11">*<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">err<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <name pos:line="26" pos:column="18">REG_ESPACE<pos:position pos:line="26" pos:column="28"/></name></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
	  <return pos:line="27" pos:column="11">return <expr><name pos:line="27" pos:column="18">NULL<pos:position pos:line="27" pos:column="22"/></name></expr>;<pos:position pos:line="27" pos:column="23"/></return>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>
    }<pos:position pos:line="29" pos:column="6"/></block></while>
  <return pos:line="30" pos:column="3">return <expr><name pos:line="30" pos:column="10">tree<pos:position pos:line="30" pos:column="14"/></name></expr>;<pos:position pos:line="30" pos:column="15"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
