<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6166_git-2.5.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">convert_commit<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">buffer<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">unsigned<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">long<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">size<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">unsigned<pos:position pos:line="1" pos:column="70"/></name> <name pos:line="1" pos:column="71">char<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">result_sha1<pos:position pos:line="1" pos:column="88"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="89"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">void<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">orig_buffer<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">buffer<pos:position pos:line="3" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">long<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">orig_size<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><name pos:line="4" pos:column="35">size<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">memcmp<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">(<argument><expr><name pos:line="6" pos:column="20">buffer<pos:position pos:line="6" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="28">"tree "<pos:position pos:line="6" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="37">5<pos:position pos:line="6" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="40"/></condition><then pos:line="6" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">die<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><literal type="string" pos:line="7" pos:column="21">"Bad commit '%s'"<pos:position pos:line="7" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="7" pos:column="40">(<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="41">char<pos:position pos:line="7" pos:column="45"/></name> <operator pos:line="7" pos:column="46">*<pos:position pos:line="7" pos:column="47"/></operator><operator pos:line="7" pos:column="47">)<pos:position pos:line="7" pos:column="48"/></operator> <name pos:line="7" pos:column="49">buffer<pos:position pos:line="7" pos:column="55"/></name></expr></argument>)<pos:position pos:line="7" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="57"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">convert_ascii_sha1<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><operator pos:line="8" pos:column="28">(<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="29">char<pos:position pos:line="8" pos:column="33"/></name> <operator pos:line="8" pos:column="34">*<pos:position pos:line="8" pos:column="35"/></operator><operator pos:line="8" pos:column="35">)<pos:position pos:line="8" pos:column="36"/></operator> <name pos:line="8" pos:column="37">buffer<pos:position pos:line="8" pos:column="43"/></name> <operator pos:line="8" pos:column="44">+<pos:position pos:line="8" pos:column="45"/></operator> <literal type="number" pos:line="8" pos:column="46">5<pos:position pos:line="8" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name pos:line="9" pos:column="9">buffer<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <operator pos:line="9" pos:column="18">(<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">char<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></operator><operator pos:line="9" pos:column="25">)<pos:position pos:line="9" pos:column="26"/></operator> <name pos:line="9" pos:column="27">buffer<pos:position pos:line="9" pos:column="33"/></name> <operator pos:line="9" pos:column="34">+<pos:position pos:line="9" pos:column="35"/></operator> <literal type="number" pos:line="9" pos:column="36">46<pos:position pos:line="9" pos:column="38"/></literal></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>    <comment type="block" pos:line="9" pos:column="43">/* "tree " + "hex sha1" + "\n" */</comment>
	<while pos:line="10" pos:column="9">while <condition pos:line="10" pos:column="15">(<expr><operator pos:line="10" pos:column="16">!<pos:position pos:line="10" pos:column="17"/></operator><call><name pos:line="10" pos:column="17">memcmp<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">buffer<pos:position pos:line="10" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="32">"parent "<pos:position pos:line="10" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="43">7<pos:position pos:line="10" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="46"/></condition> <block pos:line="10" pos:column="47">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">convert_ascii_sha1<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><operator pos:line="11" pos:column="36">(<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">char<pos:position pos:line="11" pos:column="41"/></name> <operator pos:line="11" pos:column="42">*<pos:position pos:line="11" pos:column="43"/></operator><operator pos:line="11" pos:column="43">)<pos:position pos:line="11" pos:column="44"/></operator> <name pos:line="11" pos:column="45">buffer<pos:position pos:line="11" pos:column="51"/></name> <operator pos:line="11" pos:column="52">+<pos:position pos:line="11" pos:column="53"/></operator> <literal type="number" pos:line="11" pos:column="54">7<pos:position pos:line="11" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><name pos:line="12" pos:column="17">buffer<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <operator pos:line="12" pos:column="26">(<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">char<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">*<pos:position pos:line="12" pos:column="33"/></operator><operator pos:line="12" pos:column="33">)<pos:position pos:line="12" pos:column="34"/></operator> <name pos:line="12" pos:column="35">buffer<pos:position pos:line="12" pos:column="41"/></name> <operator pos:line="12" pos:column="42">+<pos:position pos:line="12" pos:column="43"/></operator> <literal type="number" pos:line="12" pos:column="44">48<pos:position pos:line="12" pos:column="46"/></literal></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">convert_date<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">orig_buffer<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="35">orig_size<pos:position pos:line="14" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="46">result_sha1<pos:position pos:line="14" pos:column="57"/></name></expr></argument>)<pos:position pos:line="14" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="59"/></expr_stmt>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
