<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_860.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">pick_commits<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">todo_list<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">todo_list<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="54">struct<pos:position pos:line="1" pos:column="60"/></name> <name pos:line="1" pos:column="61">replay_opts<pos:position pos:line="1" pos:column="72"/></name></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">opts<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">res<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><literal type="number" pos:line="3" pos:column="19">0<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">setenv<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">GIT_REFLOG_ACTION<pos:position pos:line="5" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="5" pos:column="35">action_name<pos:position pos:line="5" pos:column="46"/></name><argument_list pos:line="5" pos:column="46">(<argument><expr><name pos:line="5" pos:column="47">opts<pos:position pos:line="5" pos:column="51"/></name></expr></argument>)<pos:position pos:line="5" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="54">0<pos:position pos:line="5" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="57"/></expr_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">opts<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">allow_ff<pos:position pos:line="6" pos:column="27"/></name></name></expr>)<pos:position pos:line="6" pos:column="28"/></condition><then pos:line="6" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">assert<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><operator pos:line="7" pos:column="24">!<pos:position pos:line="7" pos:column="25"/></operator><operator pos:line="7" pos:column="25">(<pos:position pos:line="7" pos:column="26"/></operator><name><name pos:line="7" pos:column="26">opts<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">-&gt;<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="32">signoff<pos:position pos:line="7" pos:column="39"/></name></name> <operator pos:line="7" pos:column="40">||<pos:position pos:line="7" pos:column="42"/></operator> <name><name pos:line="7" pos:column="43">opts<pos:position pos:line="7" pos:column="47"/></name><operator pos:line="7" pos:column="47">-&gt;<pos:position pos:line="7" pos:column="52"/></operator><name pos:line="7" pos:column="49">no_commit<pos:position pos:line="7" pos:column="58"/></name></name> <operator pos:line="7" pos:column="59">||<pos:position pos:line="7" pos:column="61"/></operator>
				<name><name pos:line="8" pos:column="33">opts<pos:position pos:line="8" pos:column="37"/></name><operator pos:line="8" pos:column="37">-&gt;<pos:position pos:line="8" pos:column="42"/></operator><name pos:line="8" pos:column="39">record_origin<pos:position pos:line="8" pos:column="52"/></name></name> <operator pos:line="8" pos:column="53">||<pos:position pos:line="8" pos:column="55"/></operator> <name><name pos:line="8" pos:column="56">opts<pos:position pos:line="8" pos:column="60"/></name><operator pos:line="8" pos:column="60">-&gt;<pos:position pos:line="8" pos:column="65"/></operator><name pos:line="8" pos:column="62">edit<pos:position pos:line="8" pos:column="66"/></name></name><operator pos:line="8" pos:column="66">)<pos:position pos:line="8" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="8" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="69"/></expr_stmt></block></then></if>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">read_and_refresh_cache<pos:position pos:line="9" pos:column="35"/></name><argument_list pos:line="9" pos:column="35">(<argument><expr><name pos:line="9" pos:column="36">opts<pos:position pos:line="9" pos:column="40"/></name></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="42"/></condition><then pos:line="9" pos:column="42">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><operator pos:line="10" pos:column="24">-<pos:position pos:line="10" pos:column="25"/></operator><literal type="number" pos:line="10" pos:column="25">1<pos:position pos:line="10" pos:column="26"/></literal></expr>;<pos:position pos:line="10" pos:column="27"/></return></block></then></if>

	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><name><name pos:line="12" pos:column="16">todo_list<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">-&gt;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="27">current<pos:position pos:line="12" pos:column="34"/></name></name> <operator pos:line="12" pos:column="35">&lt;<pos:position pos:line="12" pos:column="39"/></operator> <name><name pos:line="12" pos:column="37">todo_list<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">-&gt;<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="48">nr<pos:position pos:line="12" pos:column="50"/></name></name></expr>)<pos:position pos:line="12" pos:column="51"/></condition> <block pos:line="12" pos:column="52">{
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">todo_item<pos:position pos:line="13" pos:column="33"/></name></name> <modifier pos:line="13" pos:column="34">*<pos:position pos:line="13" pos:column="35"/></modifier></type><name pos:line="13" pos:column="35">item<pos:position pos:line="13" pos:column="39"/></name> <init pos:line="13" pos:column="40">= <expr><name><name pos:line="13" pos:column="42">todo_list<pos:position pos:line="13" pos:column="51"/></name><operator pos:line="13" pos:column="51">-&gt;<pos:position pos:line="13" pos:column="56"/></operator><name pos:line="13" pos:column="53">items<pos:position pos:line="13" pos:column="58"/></name></name> <operator pos:line="13" pos:column="59">+<pos:position pos:line="13" pos:column="60"/></operator> <name><name pos:line="13" pos:column="61">todo_list<pos:position pos:line="13" pos:column="70"/></name><operator pos:line="13" pos:column="70">-&gt;<pos:position pos:line="13" pos:column="75"/></operator><name pos:line="13" pos:column="72">current<pos:position pos:line="13" pos:column="79"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="80"/></decl_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><call><name pos:line="14" pos:column="21">save_todo<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">todo_list<pos:position pos:line="14" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="42">opts<pos:position pos:line="14" pos:column="46"/></name></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="48"/></condition><then pos:line="14" pos:column="48">
			<block type="pseudo"><return pos:line="15" pos:column="25">return <expr><operator pos:line="15" pos:column="32">-<pos:position pos:line="15" pos:column="33"/></operator><literal type="number" pos:line="15" pos:column="33">1<pos:position pos:line="15" pos:column="34"/></literal></expr>;<pos:position pos:line="15" pos:column="35"/></return></block></then></if>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">is_rebase_i<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">opts<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="39"/></condition><then pos:line="16" pos:column="39"> <block pos:line="16" pos:column="40">{
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><name><name pos:line="17" pos:column="29">item<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">-&gt;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="35">command<pos:position pos:line="17" pos:column="42"/></name></name> <operator pos:line="17" pos:column="43">!=<pos:position pos:line="17" pos:column="45"/></operator> <name pos:line="17" pos:column="46">TODO_COMMENT<pos:position pos:line="17" pos:column="58"/></name></expr>)<pos:position pos:line="17" pos:column="59"/></condition><then pos:line="17" pos:column="59"> <block pos:line="17" pos:column="60">{
				<decl_stmt><decl><type><name pos:line="18" pos:column="33">FILE<pos:position pos:line="18" pos:column="37"/></name> <modifier pos:line="18" pos:column="38">*<pos:position pos:line="18" pos:column="39"/></modifier></type><name pos:line="18" pos:column="39">f<pos:position pos:line="18" pos:column="40"/></name> <init pos:line="18" pos:column="41">= <expr><call><name pos:line="18" pos:column="43">fopen<pos:position pos:line="18" pos:column="48"/></name><argument_list pos:line="18" pos:column="48">(<argument><expr><call><name pos:line="18" pos:column="49">rebase_path_msgnum<pos:position pos:line="18" pos:column="67"/></name><argument_list pos:line="18" pos:column="67">()<pos:position pos:line="18" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="71">"w"<pos:position pos:line="18" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="76"/></decl_stmt>

				<expr_stmt><expr><name><name pos:line="20" pos:column="33">todo_list<pos:position pos:line="20" pos:column="42"/></name><operator pos:line="20" pos:column="42">-&gt;<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="44">done_nr<pos:position pos:line="20" pos:column="51"/></name></name><operator pos:line="20" pos:column="51">++<pos:position pos:line="20" pos:column="53"/></operator></expr>;<pos:position pos:line="20" pos:column="54"/></expr_stmt>

				<if pos:line="22" pos:column="33">if <condition pos:line="22" pos:column="36">(<expr><name pos:line="22" pos:column="37">f<pos:position pos:line="22" pos:column="38"/></name></expr>)<pos:position pos:line="22" pos:column="39"/></condition><then pos:line="22" pos:column="39"> <block pos:line="22" pos:column="40">{
					<expr_stmt><expr><call><name pos:line="23" pos:column="41">fprintf<pos:position pos:line="23" pos:column="48"/></name><argument_list pos:line="23" pos:column="48">(<argument><expr><name pos:line="23" pos:column="49">f<pos:position pos:line="23" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="52">"%d\n"<pos:position pos:line="23" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="60">todo_list<pos:position pos:line="23" pos:column="69"/></name><operator pos:line="23" pos:column="69">-&gt;<pos:position pos:line="23" pos:column="74"/></operator><name pos:line="23" pos:column="71">done_nr<pos:position pos:line="23" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="80"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="24" pos:column="41">fclose<pos:position pos:line="24" pos:column="47"/></name><argument_list pos:line="24" pos:column="47">(<argument><expr><name pos:line="24" pos:column="48">f<pos:position pos:line="24" pos:column="49"/></name></expr></argument>)<pos:position pos:line="24" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="51"/></expr_stmt>
				}<pos:position pos:line="25" pos:column="34"/></block></then></if>
				<expr_stmt><expr><call><name pos:line="26" pos:column="33">fprintf<pos:position pos:line="26" pos:column="40"/></name><argument_list pos:line="26" pos:column="40">(<argument><expr><name pos:line="26" pos:column="41">stderr<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="49">"Rebasing (%d/%d)%s"<pos:position pos:line="26" pos:column="69"/></literal></expr></argument>,
					<argument><expr><name><name pos:line="27" pos:column="41">todo_list<pos:position pos:line="27" pos:column="50"/></name><operator pos:line="27" pos:column="50">-&gt;<pos:position pos:line="27" pos:column="55"/></operator><name pos:line="27" pos:column="52">done_nr<pos:position pos:line="27" pos:column="59"/></name></name></expr></argument>,
					<argument><expr><name><name pos:line="28" pos:column="41">todo_list<pos:position pos:line="28" pos:column="50"/></name><operator pos:line="28" pos:column="50">-&gt;<pos:position pos:line="28" pos:column="55"/></operator><name pos:line="28" pos:column="52">total_nr<pos:position pos:line="28" pos:column="60"/></name></name></expr></argument>,
					<argument><expr><ternary><condition><expr><name><name pos:line="29" pos:column="41">opts<pos:position pos:line="29" pos:column="45"/></name><operator pos:line="29" pos:column="45">-&gt;<pos:position pos:line="29" pos:column="50"/></operator><name pos:line="29" pos:column="47">verbose<pos:position pos:line="29" pos:column="54"/></name></name></expr> ?<pos:position pos:line="29" pos:column="56"/></condition><then pos:line="29" pos:column="56"> <expr><literal type="string" pos:line="29" pos:column="57">"\n"<pos:position pos:line="29" pos:column="61"/></literal></expr> <pos:position pos:line="29" pos:column="62"/></then><else pos:line="29" pos:column="62">: <expr><literal type="string" pos:line="29" pos:column="64">"\r"<pos:position pos:line="29" pos:column="68"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="29" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="70"/></expr_stmt>
			}<pos:position pos:line="30" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">unlink<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><call><name pos:line="31" pos:column="32">rebase_path_message<pos:position pos:line="31" pos:column="51"/></name><argument_list pos:line="31" pos:column="51">()<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">unlink<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><call><name pos:line="32" pos:column="32">rebase_path_author_script<pos:position pos:line="32" pos:column="57"/></name><argument_list pos:line="32" pos:column="57">()<pos:position pos:line="32" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">unlink<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><call><name pos:line="33" pos:column="32">rebase_path_stopped_sha<pos:position pos:line="33" pos:column="55"/></name><argument_list pos:line="33" pos:column="55">()<pos:position pos:line="33" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">unlink<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><call><name pos:line="34" pos:column="32">rebase_path_amend<pos:position pos:line="34" pos:column="49"/></name><argument_list pos:line="34" pos:column="49">()<pos:position pos:line="34" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name><name pos:line="36" pos:column="21">item<pos:position pos:line="36" pos:column="25"/></name><operator pos:line="36" pos:column="25">-&gt;<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="27">command<pos:position pos:line="36" pos:column="34"/></name></name> <operator pos:line="36" pos:column="35">&lt;=<pos:position pos:line="36" pos:column="40"/></operator> <name pos:line="36" pos:column="38">TODO_SQUASH<pos:position pos:line="36" pos:column="49"/></name></expr>)<pos:position pos:line="36" pos:column="50"/></condition><then pos:line="36" pos:column="50"> <block pos:line="36" pos:column="51">{
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><call><name pos:line="37" pos:column="29">is_rebase_i<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><name pos:line="37" pos:column="41">opts<pos:position pos:line="37" pos:column="45"/></name></expr></argument>)<pos:position pos:line="37" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="47"/></condition><then pos:line="37" pos:column="47">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="33">setenv<pos:position pos:line="38" pos:column="39"/></name><argument_list pos:line="38" pos:column="39">(<argument><expr><literal type="string" pos:line="38" pos:column="40">"GIT_REFLOG_ACTION"<pos:position pos:line="38" pos:column="59"/></literal></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="61">reflog_message<pos:position pos:line="38" pos:column="75"/></name><argument_list pos:line="38" pos:column="75">(<argument><expr><name pos:line="38" pos:column="76">opts<pos:position pos:line="38" pos:column="80"/></name></expr></argument>,
					<argument><expr><call><name pos:line="39" pos:column="41">command_to_string<pos:position pos:line="39" pos:column="58"/></name><argument_list pos:line="39" pos:column="58">(<argument><expr><name><name pos:line="39" pos:column="59">item<pos:position pos:line="39" pos:column="63"/></name><operator pos:line="39" pos:column="63">-&gt;<pos:position pos:line="39" pos:column="68"/></operator><name pos:line="39" pos:column="65">command<pos:position pos:line="39" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="39" pos:column="75">NULL<pos:position pos:line="39" pos:column="79"/></name></expr></argument>)<pos:position pos:line="39" pos:column="80"/></argument_list></call></expr></argument>,
					<argument><expr><literal type="number" pos:line="40" pos:column="41">1<pos:position pos:line="40" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="44"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="41" pos:column="25">res<pos:position pos:line="41" pos:column="28"/></name> <operator pos:line="41" pos:column="29">=<pos:position pos:line="41" pos:column="30"/></operator> <call><name pos:line="41" pos:column="31">do_pick_commit<pos:position pos:line="41" pos:column="45"/></name><argument_list pos:line="41" pos:column="45">(<argument><expr><name><name pos:line="41" pos:column="46">item<pos:position pos:line="41" pos:column="50"/></name><operator pos:line="41" pos:column="50">-&gt;<pos:position pos:line="41" pos:column="55"/></operator><name pos:line="41" pos:column="52">command<pos:position pos:line="41" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="61">item<pos:position pos:line="41" pos:column="65"/></name><operator pos:line="41" pos:column="65">-&gt;<pos:position pos:line="41" pos:column="70"/></operator><name pos:line="41" pos:column="67">commit<pos:position pos:line="41" pos:column="73"/></name></name></expr></argument>,
					<argument><expr><name pos:line="42" pos:column="41">opts<pos:position pos:line="42" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="47">is_final_fixup<pos:position pos:line="42" pos:column="61"/></name><argument_list pos:line="42" pos:column="61">(<argument><expr><name pos:line="42" pos:column="62">todo_list<pos:position pos:line="42" pos:column="71"/></name></expr></argument>)<pos:position pos:line="42" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="74"/></expr_stmt>
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><call><name pos:line="43" pos:column="29">is_rebase_i<pos:position pos:line="43" pos:column="40"/></name><argument_list pos:line="43" pos:column="40">(<argument><expr><name pos:line="43" pos:column="41">opts<pos:position pos:line="43" pos:column="45"/></name></expr></argument>)<pos:position pos:line="43" pos:column="46"/></argument_list></call> <operator pos:line="43" pos:column="47">&amp;&amp;<pos:position pos:line="43" pos:column="57"/></operator> <name pos:line="43" pos:column="50">res<pos:position pos:line="43" pos:column="53"/></name> <operator pos:line="43" pos:column="54">&lt;<pos:position pos:line="43" pos:column="58"/></operator> <literal type="number" pos:line="43" pos:column="56">0<pos:position pos:line="43" pos:column="57"/></literal></expr>)<pos:position pos:line="43" pos:column="58"/></condition><then pos:line="43" pos:column="58"> <block pos:line="43" pos:column="59">{
				<comment type="block" pos:line="44" pos:column="33">/* Reschedule */</comment>
				<expr_stmt><expr><name><name pos:line="45" pos:column="33">todo_list<pos:position pos:line="45" pos:column="42"/></name><operator pos:line="45" pos:column="42">-&gt;<pos:position pos:line="45" pos:column="47"/></operator><name pos:line="45" pos:column="44">current<pos:position pos:line="45" pos:column="51"/></name></name><operator pos:line="45" pos:column="51">--<pos:position pos:line="45" pos:column="53"/></operator></expr>;<pos:position pos:line="45" pos:column="54"/></expr_stmt>
				<if pos:line="46" pos:column="33">if <condition pos:line="46" pos:column="36">(<expr><call><name pos:line="46" pos:column="37">save_todo<pos:position pos:line="46" pos:column="46"/></name><argument_list pos:line="46" pos:column="46">(<argument><expr><name pos:line="46" pos:column="47">todo_list<pos:position pos:line="46" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="58">opts<pos:position pos:line="46" pos:column="62"/></name></expr></argument>)<pos:position pos:line="46" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="64"/></condition><then pos:line="46" pos:column="64">
					<block type="pseudo"><return pos:line="47" pos:column="41">return <expr><operator pos:line="47" pos:column="48">-<pos:position pos:line="47" pos:column="49"/></operator><literal type="number" pos:line="47" pos:column="49">1<pos:position pos:line="47" pos:column="50"/></literal></expr>;<pos:position pos:line="47" pos:column="51"/></return></block></then></if>
			}<pos:position pos:line="48" pos:column="26"/></block></then></if>
			<if pos:line="49" pos:column="25">if <condition pos:line="49" pos:column="28">(<expr><name><name pos:line="49" pos:column="29">item<pos:position pos:line="49" pos:column="33"/></name><operator pos:line="49" pos:column="33">-&gt;<pos:position pos:line="49" pos:column="38"/></operator><name pos:line="49" pos:column="35">command<pos:position pos:line="49" pos:column="42"/></name></name> <operator pos:line="49" pos:column="43">==<pos:position pos:line="49" pos:column="45"/></operator> <name pos:line="49" pos:column="46">TODO_EDIT<pos:position pos:line="49" pos:column="55"/></name></expr>)<pos:position pos:line="49" pos:column="56"/></condition><then pos:line="49" pos:column="56"> <block pos:line="49" pos:column="57">{
				<decl_stmt><decl><type><name><name pos:line="50" pos:column="33">struct<pos:position pos:line="50" pos:column="39"/></name> <name pos:line="50" pos:column="40">commit<pos:position pos:line="50" pos:column="46"/></name></name> <modifier pos:line="50" pos:column="47">*<pos:position pos:line="50" pos:column="48"/></modifier></type><name pos:line="50" pos:column="48">commit<pos:position pos:line="50" pos:column="54"/></name> <init pos:line="50" pos:column="55">= <expr><name><name pos:line="50" pos:column="57">item<pos:position pos:line="50" pos:column="61"/></name><operator pos:line="50" pos:column="61">-&gt;<pos:position pos:line="50" pos:column="66"/></operator><name pos:line="50" pos:column="63">commit<pos:position pos:line="50" pos:column="69"/></name></name></expr></init></decl>;<pos:position pos:line="50" pos:column="70"/></decl_stmt>
				<if pos:line="51" pos:column="33">if <condition pos:line="51" pos:column="36">(<expr><operator pos:line="51" pos:column="37">!<pos:position pos:line="51" pos:column="38"/></operator><name pos:line="51" pos:column="38">res<pos:position pos:line="51" pos:column="41"/></name></expr>)<pos:position pos:line="51" pos:column="42"/></condition><then pos:line="51" pos:column="42">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="41">warning<pos:position pos:line="52" pos:column="48"/></name><argument_list pos:line="52" pos:column="48">(<argument><expr><call><name pos:line="52" pos:column="49">_<pos:position pos:line="52" pos:column="50"/></name><argument_list pos:line="52" pos:column="50">(<argument><expr><literal type="string" pos:line="52" pos:column="51">"stopped at %s... %.*s"<pos:position pos:line="52" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="75"/></argument_list></call></expr></argument>,
						<argument><expr><call><name pos:line="53" pos:column="49">short_commit_name<pos:position pos:line="53" pos:column="66"/></name><argument_list pos:line="53" pos:column="66">(<argument><expr><name pos:line="53" pos:column="67">commit<pos:position pos:line="53" pos:column="73"/></name></expr></argument>)<pos:position pos:line="53" pos:column="74"/></argument_list></call></expr></argument>,
						<argument><expr><name><name pos:line="54" pos:column="49">item<pos:position pos:line="54" pos:column="53"/></name><operator pos:line="54" pos:column="53">-&gt;<pos:position pos:line="54" pos:column="58"/></operator><name pos:line="54" pos:column="55">arg_len<pos:position pos:line="54" pos:column="62"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="64">item<pos:position pos:line="54" pos:column="68"/></name><operator pos:line="54" pos:column="68">-&gt;<pos:position pos:line="54" pos:column="73"/></operator><name pos:line="54" pos:column="70">arg<pos:position pos:line="54" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="75"/></expr_stmt></block></then></if>
				<return pos:line="55" pos:column="33">return <expr><call><name pos:line="55" pos:column="40">error_with_patch<pos:position pos:line="55" pos:column="56"/></name><argument_list pos:line="55" pos:column="56">(<argument><expr><name pos:line="55" pos:column="57">commit<pos:position pos:line="55" pos:column="63"/></name></expr></argument>,
					<argument><expr><name><name pos:line="56" pos:column="41">item<pos:position pos:line="56" pos:column="45"/></name><operator pos:line="56" pos:column="45">-&gt;<pos:position pos:line="56" pos:column="50"/></operator><name pos:line="56" pos:column="47">arg<pos:position pos:line="56" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="52">item<pos:position pos:line="56" pos:column="56"/></name><operator pos:line="56" pos:column="56">-&gt;<pos:position pos:line="56" pos:column="61"/></operator><name pos:line="56" pos:column="58">arg_len<pos:position pos:line="56" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="67">opts<pos:position pos:line="56" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="73">res<pos:position pos:line="56" pos:column="76"/></name></expr></argument>,
					<argument><expr><operator pos:line="57" pos:column="41">!<pos:position pos:line="57" pos:column="42"/></operator><name pos:line="57" pos:column="42">res<pos:position pos:line="57" pos:column="45"/></name></expr></argument>)<pos:position pos:line="57" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="47"/></return>
			}<pos:position pos:line="58" pos:column="26"/></block></then></if>
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><call><name pos:line="59" pos:column="29">is_rebase_i<pos:position pos:line="59" pos:column="40"/></name><argument_list pos:line="59" pos:column="40">(<argument><expr><name pos:line="59" pos:column="41">opts<pos:position pos:line="59" pos:column="45"/></name></expr></argument>)<pos:position pos:line="59" pos:column="46"/></argument_list></call> <operator pos:line="59" pos:column="47">&amp;&amp;<pos:position pos:line="59" pos:column="57"/></operator> <operator pos:line="59" pos:column="50">!<pos:position pos:line="59" pos:column="51"/></operator><name pos:line="59" pos:column="51">res<pos:position pos:line="59" pos:column="54"/></name></expr>)<pos:position pos:line="59" pos:column="55"/></condition><then pos:line="59" pos:column="55">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="33">record_in_rewritten<pos:position pos:line="60" pos:column="52"/></name><argument_list pos:line="60" pos:column="52">(<argument><expr><operator pos:line="60" pos:column="53">&amp;<pos:position pos:line="60" pos:column="58"/></operator><name><name pos:line="60" pos:column="54">item<pos:position pos:line="60" pos:column="58"/></name><operator pos:line="60" pos:column="58">-&gt;<pos:position pos:line="60" pos:column="63"/></operator><name pos:line="60" pos:column="60">commit<pos:position pos:line="60" pos:column="66"/></name><operator pos:line="60" pos:column="66">-&gt;<pos:position pos:line="60" pos:column="71"/></operator><name pos:line="60" pos:column="68">object<pos:position pos:line="60" pos:column="74"/></name><operator pos:line="60" pos:column="74">.<pos:position pos:line="60" pos:column="75"/></operator><name pos:line="60" pos:column="75">oid<pos:position pos:line="60" pos:column="78"/></name></name></expr></argument>,
					<argument><expr><call><name pos:line="61" pos:column="41">peek_command<pos:position pos:line="61" pos:column="53"/></name><argument_list pos:line="61" pos:column="53">(<argument><expr><name pos:line="61" pos:column="54">todo_list<pos:position pos:line="61" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="65">1<pos:position pos:line="61" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="69"/></expr_stmt></block></then></if>
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><name pos:line="62" pos:column="29">res<pos:position pos:line="62" pos:column="32"/></name> <operator pos:line="62" pos:column="33">&amp;&amp;<pos:position pos:line="62" pos:column="43"/></operator> <call><name pos:line="62" pos:column="36">is_fixup<pos:position pos:line="62" pos:column="44"/></name><argument_list pos:line="62" pos:column="44">(<argument><expr><name><name pos:line="62" pos:column="45">item<pos:position pos:line="62" pos:column="49"/></name><operator pos:line="62" pos:column="49">-&gt;<pos:position pos:line="62" pos:column="54"/></operator><name pos:line="62" pos:column="51">command<pos:position pos:line="62" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="60"/></condition><then pos:line="62" pos:column="60"> <block pos:line="62" pos:column="61">{
				<if pos:line="63" pos:column="33">if <condition pos:line="63" pos:column="36">(<expr><name pos:line="63" pos:column="37">res<pos:position pos:line="63" pos:column="40"/></name> <operator pos:line="63" pos:column="41">==<pos:position pos:line="63" pos:column="43"/></operator> <literal type="number" pos:line="63" pos:column="44">1<pos:position pos:line="63" pos:column="45"/></literal></expr>)<pos:position pos:line="63" pos:column="46"/></condition><then pos:line="63" pos:column="46">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="41">intend_to_amend<pos:position pos:line="64" pos:column="56"/></name><argument_list pos:line="64" pos:column="56">()<pos:position pos:line="64" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="59"/></expr_stmt></block></then></if>
				<return pos:line="65" pos:column="33">return <expr><call><name pos:line="65" pos:column="40">error_failed_squash<pos:position pos:line="65" pos:column="59"/></name><argument_list pos:line="65" pos:column="59">(<argument><expr><name><name pos:line="65" pos:column="60">item<pos:position pos:line="65" pos:column="64"/></name><operator pos:line="65" pos:column="64">-&gt;<pos:position pos:line="65" pos:column="69"/></operator><name pos:line="65" pos:column="66">commit<pos:position pos:line="65" pos:column="72"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="74">opts<pos:position pos:line="65" pos:column="78"/></name></expr></argument>,
					<argument><expr><name><name pos:line="66" pos:column="41">item<pos:position pos:line="66" pos:column="45"/></name><operator pos:line="66" pos:column="45">-&gt;<pos:position pos:line="66" pos:column="50"/></operator><name pos:line="66" pos:column="47">arg_len<pos:position pos:line="66" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="56">item<pos:position pos:line="66" pos:column="60"/></name><operator pos:line="66" pos:column="60">-&gt;<pos:position pos:line="66" pos:column="65"/></operator><name pos:line="66" pos:column="62">arg<pos:position pos:line="66" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="67"/></return>
			}<pos:position pos:line="67" pos:column="26"/></block></then> <elseif pos:line="67" pos:column="27">else <if pos:line="67" pos:column="32">if <condition pos:line="67" pos:column="35">(<expr><name pos:line="67" pos:column="36">res<pos:position pos:line="67" pos:column="39"/></name> <operator pos:line="67" pos:column="40">&amp;&amp;<pos:position pos:line="67" pos:column="50"/></operator> <call><name pos:line="67" pos:column="43">is_rebase_i<pos:position pos:line="67" pos:column="54"/></name><argument_list pos:line="67" pos:column="54">(<argument><expr><name pos:line="67" pos:column="55">opts<pos:position pos:line="67" pos:column="59"/></name></expr></argument>)<pos:position pos:line="67" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="61"/></condition><then pos:line="67" pos:column="61">
				<block type="pseudo"><return pos:line="68" pos:column="33">return <expr><name pos:line="68" pos:column="40">res<pos:position pos:line="68" pos:column="43"/></name> <operator pos:line="68" pos:column="44">|<pos:position pos:line="68" pos:column="45"/></operator> <call><name pos:line="68" pos:column="46">error_with_patch<pos:position pos:line="68" pos:column="62"/></name><argument_list pos:line="68" pos:column="62">(<argument><expr><name><name pos:line="68" pos:column="63">item<pos:position pos:line="68" pos:column="67"/></name><operator pos:line="68" pos:column="67">-&gt;<pos:position pos:line="68" pos:column="72"/></operator><name pos:line="68" pos:column="69">commit<pos:position pos:line="68" pos:column="75"/></name></name></expr></argument>,
					<argument><expr><name><name pos:line="69" pos:column="41">item<pos:position pos:line="69" pos:column="45"/></name><operator pos:line="69" pos:column="45">-&gt;<pos:position pos:line="69" pos:column="50"/></operator><name pos:line="69" pos:column="47">arg<pos:position pos:line="69" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="52">item<pos:position pos:line="69" pos:column="56"/></name><operator pos:line="69" pos:column="56">-&gt;<pos:position pos:line="69" pos:column="61"/></operator><name pos:line="69" pos:column="58">arg_len<pos:position pos:line="69" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="67">opts<pos:position pos:line="69" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="73">res<pos:position pos:line="69" pos:column="76"/></name></expr></argument>,
					<argument><expr><name><name pos:line="70" pos:column="41">item<pos:position pos:line="70" pos:column="45"/></name><operator pos:line="70" pos:column="45">-&gt;<pos:position pos:line="70" pos:column="50"/></operator><name pos:line="70" pos:column="47">command<pos:position pos:line="70" pos:column="54"/></name></name> <operator pos:line="70" pos:column="55">==<pos:position pos:line="70" pos:column="57"/></operator> <name pos:line="70" pos:column="58">TODO_REWORD<pos:position pos:line="70" pos:column="69"/></name></expr></argument>)<pos:position pos:line="70" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="71"/></return></block></then></if></elseif></if>
		}<pos:position pos:line="71" pos:column="18"/></block></then> <elseif pos:line="71" pos:column="19">else <if pos:line="71" pos:column="24">if <condition pos:line="71" pos:column="27">(<expr><name><name pos:line="71" pos:column="28">item<pos:position pos:line="71" pos:column="32"/></name><operator pos:line="71" pos:column="32">-&gt;<pos:position pos:line="71" pos:column="37"/></operator><name pos:line="71" pos:column="34">command<pos:position pos:line="71" pos:column="41"/></name></name> <operator pos:line="71" pos:column="42">==<pos:position pos:line="71" pos:column="44"/></operator> <name pos:line="71" pos:column="45">TODO_EXEC<pos:position pos:line="71" pos:column="54"/></name></expr>)<pos:position pos:line="71" pos:column="55"/></condition><then pos:line="71" pos:column="55"> <block pos:line="71" pos:column="56">{
			<decl_stmt><decl><type><name pos:line="72" pos:column="25">char<pos:position pos:line="72" pos:column="29"/></name> <modifier pos:line="72" pos:column="30">*<pos:position pos:line="72" pos:column="31"/></modifier></type><name pos:line="72" pos:column="31">end_of_arg<pos:position pos:line="72" pos:column="41"/></name> <init pos:line="72" pos:column="42">= <expr><operator pos:line="72" pos:column="44">(<pos:position pos:line="72" pos:column="45"/></operator><name pos:line="72" pos:column="45">char<pos:position pos:line="72" pos:column="49"/></name> <operator pos:line="72" pos:column="50">*<pos:position pos:line="72" pos:column="51"/></operator><operator pos:line="72" pos:column="51">)<pos:position pos:line="72" pos:column="52"/></operator><operator pos:line="72" pos:column="52">(<pos:position pos:line="72" pos:column="53"/></operator><name><name pos:line="72" pos:column="53">item<pos:position pos:line="72" pos:column="57"/></name><operator pos:line="72" pos:column="57">-&gt;<pos:position pos:line="72" pos:column="62"/></operator><name pos:line="72" pos:column="59">arg<pos:position pos:line="72" pos:column="62"/></name></name> <operator pos:line="72" pos:column="63">+<pos:position pos:line="72" pos:column="64"/></operator> <name><name pos:line="72" pos:column="65">item<pos:position pos:line="72" pos:column="69"/></name><operator pos:line="72" pos:column="69">-&gt;<pos:position pos:line="72" pos:column="74"/></operator><name pos:line="72" pos:column="71">arg_len<pos:position pos:line="72" pos:column="78"/></name></name><operator pos:line="72" pos:column="78">)<pos:position pos:line="72" pos:column="79"/></operator></expr></init></decl>;<pos:position pos:line="72" pos:column="80"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="73" pos:column="25">int<pos:position pos:line="73" pos:column="28"/></name></type> <name pos:line="73" pos:column="29">saved<pos:position pos:line="73" pos:column="34"/></name> <init pos:line="73" pos:column="35">= <expr><operator pos:line="73" pos:column="37">*<pos:position pos:line="73" pos:column="38"/></operator><name pos:line="73" pos:column="38">end_of_arg<pos:position pos:line="73" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="73" pos:column="49"/></decl_stmt>

			<expr_stmt><expr><operator pos:line="75" pos:column="25">*<pos:position pos:line="75" pos:column="26"/></operator><name pos:line="75" pos:column="26">end_of_arg<pos:position pos:line="75" pos:column="36"/></name> <operator pos:line="75" pos:column="37">=<pos:position pos:line="75" pos:column="38"/></operator> <literal type="char" pos:line="75" pos:column="39">'\0'<pos:position pos:line="75" pos:column="43"/></literal></expr>;<pos:position pos:line="75" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="76" pos:column="25">res<pos:position pos:line="76" pos:column="28"/></name> <operator pos:line="76" pos:column="29">=<pos:position pos:line="76" pos:column="30"/></operator> <call><name pos:line="76" pos:column="31">do_exec<pos:position pos:line="76" pos:column="38"/></name><argument_list pos:line="76" pos:column="38">(<argument><expr><name><name pos:line="76" pos:column="39">item<pos:position pos:line="76" pos:column="43"/></name><operator pos:line="76" pos:column="43">-&gt;<pos:position pos:line="76" pos:column="48"/></operator><name pos:line="76" pos:column="45">arg<pos:position pos:line="76" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="77" pos:column="25">*<pos:position pos:line="77" pos:column="26"/></operator><name pos:line="77" pos:column="26">end_of_arg<pos:position pos:line="77" pos:column="36"/></name> <operator pos:line="77" pos:column="37">=<pos:position pos:line="77" pos:column="38"/></operator> <name pos:line="77" pos:column="39">saved<pos:position pos:line="77" pos:column="44"/></name></expr>;<pos:position pos:line="77" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="78" pos:column="18"/></block></then></if></elseif> <elseif pos:line="78" pos:column="19">else <if pos:line="78" pos:column="24">if <condition pos:line="78" pos:column="27">(<expr><operator pos:line="78" pos:column="28">!<pos:position pos:line="78" pos:column="29"/></operator><call><name pos:line="78" pos:column="29">is_noop<pos:position pos:line="78" pos:column="36"/></name><argument_list pos:line="78" pos:column="36">(<argument><expr><name><name pos:line="78" pos:column="37">item<pos:position pos:line="78" pos:column="41"/></name><operator pos:line="78" pos:column="41">-&gt;<pos:position pos:line="78" pos:column="46"/></operator><name pos:line="78" pos:column="43">command<pos:position pos:line="78" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="52"/></condition><then pos:line="78" pos:column="52">
			<block type="pseudo"><return pos:line="79" pos:column="25">return <expr><call><name pos:line="79" pos:column="32">error<pos:position pos:line="79" pos:column="37"/></name><argument_list pos:line="79" pos:column="37">(<argument><expr><call><name pos:line="79" pos:column="38">_<pos:position pos:line="79" pos:column="39"/></name><argument_list pos:line="79" pos:column="39">(<argument><expr><literal type="string" pos:line="79" pos:column="40">"unknown command %d"<pos:position pos:line="79" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="63">item<pos:position pos:line="79" pos:column="67"/></name><operator pos:line="79" pos:column="67">-&gt;<pos:position pos:line="79" pos:column="72"/></operator><name pos:line="79" pos:column="69">command<pos:position pos:line="79" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="78"/></return></block></then></if></elseif></if>

		<expr_stmt><expr><name><name pos:line="81" pos:column="17">todo_list<pos:position pos:line="81" pos:column="26"/></name><operator pos:line="81" pos:column="26">-&gt;<pos:position pos:line="81" pos:column="31"/></operator><name pos:line="81" pos:column="28">current<pos:position pos:line="81" pos:column="35"/></name></name><operator pos:line="81" pos:column="35">++<pos:position pos:line="81" pos:column="37"/></operator></expr>;<pos:position pos:line="81" pos:column="38"/></expr_stmt>
		<if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><name pos:line="82" pos:column="21">res<pos:position pos:line="82" pos:column="24"/></name></expr>)<pos:position pos:line="82" pos:column="25"/></condition><then pos:line="82" pos:column="25">
			<block type="pseudo"><return pos:line="83" pos:column="25">return <expr><name pos:line="83" pos:column="32">res<pos:position pos:line="83" pos:column="35"/></name></expr>;<pos:position pos:line="83" pos:column="36"/></return></block></then></if>
	}<pos:position pos:line="84" pos:column="10"/></block></while>

	<if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><call><name pos:line="86" pos:column="13">is_rebase_i<pos:position pos:line="86" pos:column="24"/></name><argument_list pos:line="86" pos:column="24">(<argument><expr><name pos:line="86" pos:column="25">opts<pos:position pos:line="86" pos:column="29"/></name></expr></argument>)<pos:position pos:line="86" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="31"/></condition><then pos:line="86" pos:column="31"> <block pos:line="86" pos:column="32">{
		<decl_stmt><decl><type><name><name pos:line="87" pos:column="17">struct<pos:position pos:line="87" pos:column="23"/></name> <name pos:line="87" pos:column="24">strbuf<pos:position pos:line="87" pos:column="30"/></name></name></type> <name pos:line="87" pos:column="31">head_ref<pos:position pos:line="87" pos:column="39"/></name> <init pos:line="87" pos:column="40">= <expr><name pos:line="87" pos:column="42">STRBUF_INIT<pos:position pos:line="87" pos:column="53"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="87" pos:column="55">buf<pos:position pos:line="87" pos:column="58"/></name> <init pos:line="87" pos:column="59">= <expr><name pos:line="87" pos:column="61">STRBUF_INIT<pos:position pos:line="87" pos:column="72"/></name></expr></init></decl>;<pos:position pos:line="87" pos:column="73"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="88" pos:column="17">struct<pos:position pos:line="88" pos:column="23"/></name> <name pos:line="88" pos:column="24">stat<pos:position pos:line="88" pos:column="28"/></name></name></type> <name pos:line="88" pos:column="29">st<pos:position pos:line="88" pos:column="31"/></name></decl>;<pos:position pos:line="88" pos:column="32"/></decl_stmt>

		<comment type="block" pos:line="90" pos:column="17">/* Stopped in the middle, as planned? */</comment>
		<if pos:line="91" pos:column="17">if <condition pos:line="91" pos:column="20">(<expr><name><name pos:line="91" pos:column="21">todo_list<pos:position pos:line="91" pos:column="30"/></name><operator pos:line="91" pos:column="30">-&gt;<pos:position pos:line="91" pos:column="35"/></operator><name pos:line="91" pos:column="32">current<pos:position pos:line="91" pos:column="39"/></name></name> <operator pos:line="91" pos:column="40">&lt;<pos:position pos:line="91" pos:column="44"/></operator> <name><name pos:line="91" pos:column="42">todo_list<pos:position pos:line="91" pos:column="51"/></name><operator pos:line="91" pos:column="51">-&gt;<pos:position pos:line="91" pos:column="56"/></operator><name pos:line="91" pos:column="53">nr<pos:position pos:line="91" pos:column="55"/></name></name></expr>)<pos:position pos:line="91" pos:column="56"/></condition><then pos:line="91" pos:column="56">
			<block type="pseudo"><return pos:line="92" pos:column="25">return <expr><literal type="number" pos:line="92" pos:column="32">0<pos:position pos:line="92" pos:column="33"/></literal></expr>;<pos:position pos:line="92" pos:column="34"/></return></block></then></if>

		<if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><call><name pos:line="94" pos:column="21">read_oneliner<pos:position pos:line="94" pos:column="34"/></name><argument_list pos:line="94" pos:column="34">(<argument><expr><operator pos:line="94" pos:column="35">&amp;<pos:position pos:line="94" pos:column="40"/></operator><name pos:line="94" pos:column="36">head_ref<pos:position pos:line="94" pos:column="44"/></name></expr></argument>, <argument><expr><call><name pos:line="94" pos:column="46">rebase_path_head_name<pos:position pos:line="94" pos:column="67"/></name><argument_list pos:line="94" pos:column="67">()<pos:position pos:line="94" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="94" pos:column="71">0<pos:position pos:line="94" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="73"/></argument_list></call> <operator pos:line="94" pos:column="74">&amp;&amp;<pos:position pos:line="94" pos:column="84"/></operator>
				<call><name pos:line="95" pos:column="33">starts_with<pos:position pos:line="95" pos:column="44"/></name><argument_list pos:line="95" pos:column="44">(<argument><expr><name><name pos:line="95" pos:column="45">head_ref<pos:position pos:line="95" pos:column="53"/></name><operator pos:line="95" pos:column="53">.<pos:position pos:line="95" pos:column="54"/></operator><name pos:line="95" pos:column="54">buf<pos:position pos:line="95" pos:column="57"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="59">"refs/"<pos:position pos:line="95" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="95" pos:column="68"/></condition><then pos:line="95" pos:column="68"> <block pos:line="95" pos:column="69">{
			<decl_stmt><decl><type><specifier pos:line="96" pos:column="25">const<pos:position pos:line="96" pos:column="30"/></specifier> <name pos:line="96" pos:column="31">char<pos:position pos:line="96" pos:column="35"/></name> <modifier pos:line="96" pos:column="36">*<pos:position pos:line="96" pos:column="37"/></modifier></type><name pos:line="96" pos:column="37">msg<pos:position pos:line="96" pos:column="40"/></name></decl>;<pos:position pos:line="96" pos:column="41"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="97" pos:column="25">unsigned<pos:position pos:line="97" pos:column="33"/></name> <name pos:line="97" pos:column="34">char<pos:position pos:line="97" pos:column="38"/></name></type> <name><name pos:line="97" pos:column="39">head<pos:position pos:line="97" pos:column="43"/></name><index pos:line="97" pos:column="43">[<expr><literal type="number" pos:line="97" pos:column="44">20<pos:position pos:line="97" pos:column="46"/></literal></expr>]<pos:position pos:line="97" pos:column="47"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="97" pos:column="49">orig<pos:position pos:line="97" pos:column="53"/></name><index pos:line="97" pos:column="53">[<expr><literal type="number" pos:line="97" pos:column="54">20<pos:position pos:line="97" pos:column="56"/></literal></expr>]<pos:position pos:line="97" pos:column="57"/></index></name></decl>;<pos:position pos:line="97" pos:column="58"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="98" pos:column="25">int<pos:position pos:line="98" pos:column="28"/></name></type> <name pos:line="98" pos:column="29">res<pos:position pos:line="98" pos:column="32"/></name></decl>;<pos:position pos:line="98" pos:column="33"/></decl_stmt>

			<if pos:line="100" pos:column="25">if <condition pos:line="100" pos:column="28">(<expr><call><name pos:line="100" pos:column="29">get_sha1<pos:position pos:line="100" pos:column="37"/></name><argument_list pos:line="100" pos:column="37">(<argument><expr><literal type="string" pos:line="100" pos:column="38">"HEAD"<pos:position pos:line="100" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="46">head<pos:position pos:line="100" pos:column="50"/></name></expr></argument>)<pos:position pos:line="100" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="100" pos:column="52"/></condition><then pos:line="100" pos:column="52"> <block pos:line="100" pos:column="53">{
				<expr_stmt><expr><name pos:line="101" pos:column="33">res<pos:position pos:line="101" pos:column="36"/></name> <operator pos:line="101" pos:column="37">=<pos:position pos:line="101" pos:column="38"/></operator> <call><name pos:line="101" pos:column="39">error<pos:position pos:line="101" pos:column="44"/></name><argument_list pos:line="101" pos:column="44">(<argument><expr><call><name pos:line="101" pos:column="45">_<pos:position pos:line="101" pos:column="46"/></name><argument_list pos:line="101" pos:column="46">(<argument><expr><literal type="string" pos:line="101" pos:column="47">"cannot read HEAD"<pos:position pos:line="101" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="101" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="68"/></expr_stmt>
<label><name pos:line="102" pos:column="1">cleanup_head_ref<pos:position pos:line="102" pos:column="17"/></name>:<pos:position pos:line="102" pos:column="18"/></label>
				<expr_stmt><expr><call><name pos:line="103" pos:column="33">strbuf_release<pos:position pos:line="103" pos:column="47"/></name><argument_list pos:line="103" pos:column="47">(<argument><expr><operator pos:line="103" pos:column="48">&amp;<pos:position pos:line="103" pos:column="53"/></operator><name pos:line="103" pos:column="49">head_ref<pos:position pos:line="103" pos:column="57"/></name></expr></argument>)<pos:position pos:line="103" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="59"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="104" pos:column="33">strbuf_release<pos:position pos:line="104" pos:column="47"/></name><argument_list pos:line="104" pos:column="47">(<argument><expr><operator pos:line="104" pos:column="48">&amp;<pos:position pos:line="104" pos:column="53"/></operator><name pos:line="104" pos:column="49">buf<pos:position pos:line="104" pos:column="52"/></name></expr></argument>)<pos:position pos:line="104" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="54"/></expr_stmt>
				<return pos:line="105" pos:column="33">return <expr><name pos:line="105" pos:column="40">res<pos:position pos:line="105" pos:column="43"/></name></expr>;<pos:position pos:line="105" pos:column="44"/></return>
			}<pos:position pos:line="106" pos:column="26"/></block></then></if>
			<if pos:line="107" pos:column="25">if <condition pos:line="107" pos:column="28">(<expr><operator pos:line="107" pos:column="29">!<pos:position pos:line="107" pos:column="30"/></operator><call><name pos:line="107" pos:column="30">read_oneliner<pos:position pos:line="107" pos:column="43"/></name><argument_list pos:line="107" pos:column="43">(<argument><expr><operator pos:line="107" pos:column="44">&amp;<pos:position pos:line="107" pos:column="49"/></operator><name pos:line="107" pos:column="45">buf<pos:position pos:line="107" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="107" pos:column="50">rebase_path_orig_head<pos:position pos:line="107" pos:column="71"/></name><argument_list pos:line="107" pos:column="71">()<pos:position pos:line="107" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="107" pos:column="75">0<pos:position pos:line="107" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="77"/></argument_list></call> <operator pos:line="107" pos:column="78">||<pos:position pos:line="107" pos:column="80"/></operator>
					<call><name pos:line="108" pos:column="41">get_sha1_hex<pos:position pos:line="108" pos:column="53"/></name><argument_list pos:line="108" pos:column="53">(<argument><expr><name><name pos:line="108" pos:column="54">buf<pos:position pos:line="108" pos:column="57"/></name><operator pos:line="108" pos:column="57">.<pos:position pos:line="108" pos:column="58"/></operator><name pos:line="108" pos:column="58">buf<pos:position pos:line="108" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="63">orig<pos:position pos:line="108" pos:column="67"/></name></expr></argument>)<pos:position pos:line="108" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="108" pos:column="69"/></condition><then pos:line="108" pos:column="69"> <block pos:line="108" pos:column="70">{
				<expr_stmt><expr><name pos:line="109" pos:column="33">res<pos:position pos:line="109" pos:column="36"/></name> <operator pos:line="109" pos:column="37">=<pos:position pos:line="109" pos:column="38"/></operator> <call><name pos:line="109" pos:column="39">error<pos:position pos:line="109" pos:column="44"/></name><argument_list pos:line="109" pos:column="44">(<argument><expr><call><name pos:line="109" pos:column="45">_<pos:position pos:line="109" pos:column="46"/></name><argument_list pos:line="109" pos:column="46">(<argument><expr><literal type="string" pos:line="109" pos:column="47">"could not read orig-head"<pos:position pos:line="109" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="109" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="76"/></expr_stmt>
				<goto pos:line="110" pos:column="33">goto <name pos:line="110" pos:column="38">cleanup_head_ref<pos:position pos:line="110" pos:column="54"/></name>;<pos:position pos:line="110" pos:column="55"/></goto>
			}<pos:position pos:line="111" pos:column="26"/></block></then></if>
			<if pos:line="112" pos:column="25">if <condition pos:line="112" pos:column="28">(<expr><operator pos:line="112" pos:column="29">!<pos:position pos:line="112" pos:column="30"/></operator><call><name pos:line="112" pos:column="30">read_oneliner<pos:position pos:line="112" pos:column="43"/></name><argument_list pos:line="112" pos:column="43">(<argument><expr><operator pos:line="112" pos:column="44">&amp;<pos:position pos:line="112" pos:column="49"/></operator><name pos:line="112" pos:column="45">buf<pos:position pos:line="112" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="112" pos:column="50">rebase_path_onto<pos:position pos:line="112" pos:column="66"/></name><argument_list pos:line="112" pos:column="66">()<pos:position pos:line="112" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="112" pos:column="70">0<pos:position pos:line="112" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="112" pos:column="73"/></condition><then pos:line="112" pos:column="73"> <block pos:line="112" pos:column="74">{
				<expr_stmt><expr><name pos:line="113" pos:column="33">res<pos:position pos:line="113" pos:column="36"/></name> <operator pos:line="113" pos:column="37">=<pos:position pos:line="113" pos:column="38"/></operator> <call><name pos:line="113" pos:column="39">error<pos:position pos:line="113" pos:column="44"/></name><argument_list pos:line="113" pos:column="44">(<argument><expr><call><name pos:line="113" pos:column="45">_<pos:position pos:line="113" pos:column="46"/></name><argument_list pos:line="113" pos:column="46">(<argument><expr><literal type="string" pos:line="113" pos:column="47">"could not read 'onto'"<pos:position pos:line="113" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="113" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="73"/></expr_stmt>
				<goto pos:line="114" pos:column="33">goto <name pos:line="114" pos:column="38">cleanup_head_ref<pos:position pos:line="114" pos:column="54"/></name>;<pos:position pos:line="114" pos:column="55"/></goto>
			}<pos:position pos:line="115" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="116" pos:column="25">msg<pos:position pos:line="116" pos:column="28"/></name> <operator pos:line="116" pos:column="29">=<pos:position pos:line="116" pos:column="30"/></operator> <call><name pos:line="116" pos:column="31">reflog_message<pos:position pos:line="116" pos:column="45"/></name><argument_list pos:line="116" pos:column="45">(<argument><expr><name pos:line="116" pos:column="46">opts<pos:position pos:line="116" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="52">"finish"<pos:position pos:line="116" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="62">"%s onto %s"<pos:position pos:line="116" pos:column="74"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="117" pos:column="33">head_ref<pos:position pos:line="117" pos:column="41"/></name><operator pos:line="117" pos:column="41">.<pos:position pos:line="117" pos:column="42"/></operator><name pos:line="117" pos:column="42">buf<pos:position pos:line="117" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="47">buf<pos:position pos:line="117" pos:column="50"/></name><operator pos:line="117" pos:column="50">.<pos:position pos:line="117" pos:column="51"/></operator><name pos:line="117" pos:column="51">buf<pos:position pos:line="117" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="117" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="56"/></expr_stmt>
			<if pos:line="118" pos:column="25">if <condition pos:line="118" pos:column="28">(<expr><call><name pos:line="118" pos:column="29">update_ref<pos:position pos:line="118" pos:column="39"/></name><argument_list pos:line="118" pos:column="39">(<argument><expr><name pos:line="118" pos:column="40">msg<pos:position pos:line="118" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="118" pos:column="45">head_ref<pos:position pos:line="118" pos:column="53"/></name><operator pos:line="118" pos:column="53">.<pos:position pos:line="118" pos:column="54"/></operator><name pos:line="118" pos:column="54">buf<pos:position pos:line="118" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="59">head<pos:position pos:line="118" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="65">orig<pos:position pos:line="118" pos:column="69"/></name></expr></argument>,
					<argument><expr><name pos:line="119" pos:column="41">REF_NODEREF<pos:position pos:line="119" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="54">UPDATE_REFS_MSG_ON_ERR<pos:position pos:line="119" pos:column="76"/></name></expr></argument>)<pos:position pos:line="119" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="119" pos:column="78"/></condition><then pos:line="119" pos:column="78"> <block pos:line="119" pos:column="79">{
				<expr_stmt><expr><name pos:line="120" pos:column="33">res<pos:position pos:line="120" pos:column="36"/></name> <operator pos:line="120" pos:column="37">=<pos:position pos:line="120" pos:column="38"/></operator> <call><name pos:line="120" pos:column="39">error<pos:position pos:line="120" pos:column="44"/></name><argument_list pos:line="120" pos:column="44">(<argument><expr><call><name pos:line="120" pos:column="45">_<pos:position pos:line="120" pos:column="46"/></name><argument_list pos:line="120" pos:column="46">(<argument><expr><literal type="string" pos:line="120" pos:column="47">"could not update %s"<pos:position pos:line="120" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="69"/></argument_list></call></expr></argument>,
					<argument><expr><name><name pos:line="121" pos:column="41">head_ref<pos:position pos:line="121" pos:column="49"/></name><operator pos:line="121" pos:column="49">.<pos:position pos:line="121" pos:column="50"/></operator><name pos:line="121" pos:column="50">buf<pos:position pos:line="121" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="121" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="55"/></expr_stmt>
				<goto pos:line="122" pos:column="33">goto <name pos:line="122" pos:column="38">cleanup_head_ref<pos:position pos:line="122" pos:column="54"/></name>;<pos:position pos:line="122" pos:column="55"/></goto>
			}<pos:position pos:line="123" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="124" pos:column="25">msg<pos:position pos:line="124" pos:column="28"/></name> <operator pos:line="124" pos:column="29">=<pos:position pos:line="124" pos:column="30"/></operator> <call><name pos:line="124" pos:column="31">reflog_message<pos:position pos:line="124" pos:column="45"/></name><argument_list pos:line="124" pos:column="45">(<argument><expr><name pos:line="124" pos:column="46">opts<pos:position pos:line="124" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="124" pos:column="52">"finish"<pos:position pos:line="124" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="124" pos:column="62">"returning to %s"<pos:position pos:line="124" pos:column="79"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="125" pos:column="33">head_ref<pos:position pos:line="125" pos:column="41"/></name><operator pos:line="125" pos:column="41">.<pos:position pos:line="125" pos:column="42"/></operator><name pos:line="125" pos:column="42">buf<pos:position pos:line="125" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="125" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="47"/></expr_stmt>
			<if pos:line="126" pos:column="25">if <condition pos:line="126" pos:column="28">(<expr><call><name pos:line="126" pos:column="29">create_symref<pos:position pos:line="126" pos:column="42"/></name><argument_list pos:line="126" pos:column="42">(<argument><expr><literal type="string" pos:line="126" pos:column="43">"HEAD"<pos:position pos:line="126" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="126" pos:column="51">head_ref<pos:position pos:line="126" pos:column="59"/></name><operator pos:line="126" pos:column="59">.<pos:position pos:line="126" pos:column="60"/></operator><name pos:line="126" pos:column="60">buf<pos:position pos:line="126" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="65">msg<pos:position pos:line="126" pos:column="68"/></name></expr></argument>)<pos:position pos:line="126" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="70"/></condition><then pos:line="126" pos:column="70"> <block pos:line="126" pos:column="71">{
				<expr_stmt><expr><name pos:line="127" pos:column="33">res<pos:position pos:line="127" pos:column="36"/></name> <operator pos:line="127" pos:column="37">=<pos:position pos:line="127" pos:column="38"/></operator> <call><name pos:line="127" pos:column="39">error<pos:position pos:line="127" pos:column="44"/></name><argument_list pos:line="127" pos:column="44">(<argument><expr><call><name pos:line="127" pos:column="45">_<pos:position pos:line="127" pos:column="46"/></name><argument_list pos:line="127" pos:column="46">(<argument><expr><literal type="string" pos:line="127" pos:column="47">"could not update HEAD to %s"<pos:position pos:line="127" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="77"/></argument_list></call></expr></argument>,
					<argument><expr><name><name pos:line="128" pos:column="41">head_ref<pos:position pos:line="128" pos:column="49"/></name><operator pos:line="128" pos:column="49">.<pos:position pos:line="128" pos:column="50"/></operator><name pos:line="128" pos:column="50">buf<pos:position pos:line="128" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="128" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="55"/></expr_stmt>
				<goto pos:line="129" pos:column="33">goto <name pos:line="129" pos:column="38">cleanup_head_ref<pos:position pos:line="129" pos:column="54"/></name>;<pos:position pos:line="129" pos:column="55"/></goto>
			}<pos:position pos:line="130" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="131" pos:column="25">strbuf_reset<pos:position pos:line="131" pos:column="37"/></name><argument_list pos:line="131" pos:column="37">(<argument><expr><operator pos:line="131" pos:column="38">&amp;<pos:position pos:line="131" pos:column="43"/></operator><name pos:line="131" pos:column="39">buf<pos:position pos:line="131" pos:column="42"/></name></expr></argument>)<pos:position pos:line="131" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="132" pos:column="18"/></block></then></if>

		<if pos:line="134" pos:column="17">if <condition pos:line="134" pos:column="20">(<expr><name><name pos:line="134" pos:column="21">opts<pos:position pos:line="134" pos:column="25"/></name><operator pos:line="134" pos:column="25">-&gt;<pos:position pos:line="134" pos:column="30"/></operator><name pos:line="134" pos:column="27">verbose<pos:position pos:line="134" pos:column="34"/></name></name></expr>)<pos:position pos:line="134" pos:column="35"/></condition><then pos:line="134" pos:column="35"> <block pos:line="134" pos:column="36">{
			<decl_stmt><decl><type><name><name pos:line="135" pos:column="25">struct<pos:position pos:line="135" pos:column="31"/></name> <name pos:line="135" pos:column="32">rev_info<pos:position pos:line="135" pos:column="40"/></name></name></type> <name pos:line="135" pos:column="41">log_tree_opt<pos:position pos:line="135" pos:column="53"/></name></decl>;<pos:position pos:line="135" pos:column="54"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="136" pos:column="25">struct<pos:position pos:line="136" pos:column="31"/></name> <name pos:line="136" pos:column="32">object_id<pos:position pos:line="136" pos:column="41"/></name></name></type> <name pos:line="136" pos:column="42">orig<pos:position pos:line="136" pos:column="46"/></name></decl>, <decl><type ref="prev"/><name pos:line="136" pos:column="48">head<pos:position pos:line="136" pos:column="52"/></name></decl>;<pos:position pos:line="136" pos:column="53"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="138" pos:column="25">memset<pos:position pos:line="138" pos:column="31"/></name><argument_list pos:line="138" pos:column="31">(<argument><expr><operator pos:line="138" pos:column="32">&amp;<pos:position pos:line="138" pos:column="37"/></operator><name pos:line="138" pos:column="33">log_tree_opt<pos:position pos:line="138" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="138" pos:column="47">0<pos:position pos:line="138" pos:column="48"/></literal></expr></argument>, <argument><expr><sizeof pos:line="138" pos:column="50">sizeof<argument_list pos:line="138" pos:column="56">(<argument><expr><name pos:line="138" pos:column="57">log_tree_opt<pos:position pos:line="138" pos:column="69"/></name></expr></argument>)<pos:position pos:line="138" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="138" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="139" pos:column="25">init_revisions<pos:position pos:line="139" pos:column="39"/></name><argument_list pos:line="139" pos:column="39">(<argument><expr><operator pos:line="139" pos:column="40">&amp;<pos:position pos:line="139" pos:column="45"/></operator><name pos:line="139" pos:column="41">log_tree_opt<pos:position pos:line="139" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="55">NULL<pos:position pos:line="139" pos:column="59"/></name></expr></argument>)<pos:position pos:line="139" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="140" pos:column="25">log_tree_opt<pos:position pos:line="140" pos:column="37"/></name><operator pos:line="140" pos:column="37">.<pos:position pos:line="140" pos:column="38"/></operator><name pos:line="140" pos:column="38">diff<pos:position pos:line="140" pos:column="42"/></name></name> <operator pos:line="140" pos:column="43">=<pos:position pos:line="140" pos:column="44"/></operator> <literal type="number" pos:line="140" pos:column="45">1<pos:position pos:line="140" pos:column="46"/></literal></expr>;<pos:position pos:line="140" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="141" pos:column="25">log_tree_opt<pos:position pos:line="141" pos:column="37"/></name><operator pos:line="141" pos:column="37">.<pos:position pos:line="141" pos:column="38"/></operator><name pos:line="141" pos:column="38">diffopt<pos:position pos:line="141" pos:column="45"/></name><operator pos:line="141" pos:column="45">.<pos:position pos:line="141" pos:column="46"/></operator><name pos:line="141" pos:column="46">output_format<pos:position pos:line="141" pos:column="59"/></name></name> <operator pos:line="141" pos:column="60">=<pos:position pos:line="141" pos:column="61"/></operator>
				<name pos:line="142" pos:column="33">DIFF_FORMAT_DIFFSTAT<pos:position pos:line="142" pos:column="53"/></name></expr>;<pos:position pos:line="142" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="143" pos:column="25">log_tree_opt<pos:position pos:line="143" pos:column="37"/></name><operator pos:line="143" pos:column="37">.<pos:position pos:line="143" pos:column="38"/></operator><name pos:line="143" pos:column="38">disable_stdin<pos:position pos:line="143" pos:column="51"/></name></name> <operator pos:line="143" pos:column="52">=<pos:position pos:line="143" pos:column="53"/></operator> <literal type="number" pos:line="143" pos:column="54">1<pos:position pos:line="143" pos:column="55"/></literal></expr>;<pos:position pos:line="143" pos:column="56"/></expr_stmt>

			<if pos:line="145" pos:column="25">if <condition pos:line="145" pos:column="28">(<expr><call><name pos:line="145" pos:column="29">read_oneliner<pos:position pos:line="145" pos:column="42"/></name><argument_list pos:line="145" pos:column="42">(<argument><expr><operator pos:line="145" pos:column="43">&amp;<pos:position pos:line="145" pos:column="48"/></operator><name pos:line="145" pos:column="44">buf<pos:position pos:line="145" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="145" pos:column="49">rebase_path_orig_head<pos:position pos:line="145" pos:column="70"/></name><argument_list pos:line="145" pos:column="70">()<pos:position pos:line="145" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="145" pos:column="74">0<pos:position pos:line="145" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="76"/></argument_list></call> <operator pos:line="145" pos:column="77">&amp;&amp;<pos:position pos:line="145" pos:column="87"/></operator>
			    <operator pos:line="146" pos:column="29">!<pos:position pos:line="146" pos:column="30"/></operator><call><name pos:line="146" pos:column="30">get_sha1<pos:position pos:line="146" pos:column="38"/></name><argument_list pos:line="146" pos:column="38">(<argument><expr><name><name pos:line="146" pos:column="39">buf<pos:position pos:line="146" pos:column="42"/></name><operator pos:line="146" pos:column="42">.<pos:position pos:line="146" pos:column="43"/></operator><name pos:line="146" pos:column="43">buf<pos:position pos:line="146" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="146" pos:column="48">orig<pos:position pos:line="146" pos:column="52"/></name><operator pos:line="146" pos:column="52">.<pos:position pos:line="146" pos:column="53"/></operator><name pos:line="146" pos:column="53">hash<pos:position pos:line="146" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="146" pos:column="58"/></argument_list></call> <operator pos:line="146" pos:column="59">&amp;&amp;<pos:position pos:line="146" pos:column="69"/></operator>
			    <operator pos:line="147" pos:column="29">!<pos:position pos:line="147" pos:column="30"/></operator><call><name pos:line="147" pos:column="30">get_sha1<pos:position pos:line="147" pos:column="38"/></name><argument_list pos:line="147" pos:column="38">(<argument><expr><literal type="string" pos:line="147" pos:column="39">"HEAD"<pos:position pos:line="147" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="47">head<pos:position pos:line="147" pos:column="51"/></name><operator pos:line="147" pos:column="51">.<pos:position pos:line="147" pos:column="52"/></operator><name pos:line="147" pos:column="52">hash<pos:position pos:line="147" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="147" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="147" pos:column="58"/></condition><then pos:line="147" pos:column="58"> <block pos:line="147" pos:column="59">{
				<expr_stmt><expr><call><name pos:line="148" pos:column="33">diff_tree_sha1<pos:position pos:line="148" pos:column="47"/></name><argument_list pos:line="148" pos:column="47">(<argument><expr><name><name pos:line="148" pos:column="48">orig<pos:position pos:line="148" pos:column="52"/></name><operator pos:line="148" pos:column="52">.<pos:position pos:line="148" pos:column="53"/></operator><name pos:line="148" pos:column="53">hash<pos:position pos:line="148" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="59">head<pos:position pos:line="148" pos:column="63"/></name><operator pos:line="148" pos:column="63">.<pos:position pos:line="148" pos:column="64"/></operator><name pos:line="148" pos:column="64">hash<pos:position pos:line="148" pos:column="68"/></name></name></expr></argument>,
					       <argument><expr><literal type="string" pos:line="149" pos:column="48">""<pos:position pos:line="149" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="149" pos:column="52">&amp;<pos:position pos:line="149" pos:column="57"/></operator><name><name pos:line="149" pos:column="53">log_tree_opt<pos:position pos:line="149" pos:column="65"/></name><operator pos:line="149" pos:column="65">.<pos:position pos:line="149" pos:column="66"/></operator><name pos:line="149" pos:column="66">diffopt<pos:position pos:line="149" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="149" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="150" pos:column="33">log_tree_diff_flush<pos:position pos:line="150" pos:column="52"/></name><argument_list pos:line="150" pos:column="52">(<argument><expr><operator pos:line="150" pos:column="53">&amp;<pos:position pos:line="150" pos:column="58"/></operator><name pos:line="150" pos:column="54">log_tree_opt<pos:position pos:line="150" pos:column="66"/></name></expr></argument>)<pos:position pos:line="150" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="68"/></expr_stmt>
			}<pos:position pos:line="151" pos:column="26"/></block></then></if>
		}<pos:position pos:line="152" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="153" pos:column="17">flush_rewritten_pending<pos:position pos:line="153" pos:column="40"/></name><argument_list pos:line="153" pos:column="40">()<pos:position pos:line="153" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="43"/></expr_stmt>
		<if pos:line="154" pos:column="17">if <condition pos:line="154" pos:column="20">(<expr><operator pos:line="154" pos:column="21">!<pos:position pos:line="154" pos:column="22"/></operator><call><name pos:line="154" pos:column="22">stat<pos:position pos:line="154" pos:column="26"/></name><argument_list pos:line="154" pos:column="26">(<argument><expr><call><name pos:line="154" pos:column="27">rebase_path_rewritten_list<pos:position pos:line="154" pos:column="53"/></name><argument_list pos:line="154" pos:column="53">()<pos:position pos:line="154" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="154" pos:column="57">&amp;<pos:position pos:line="154" pos:column="62"/></operator><name pos:line="154" pos:column="58">st<pos:position pos:line="154" pos:column="60"/></name></expr></argument>)<pos:position pos:line="154" pos:column="61"/></argument_list></call> <operator pos:line="154" pos:column="62">&amp;&amp;<pos:position pos:line="154" pos:column="72"/></operator>
				<name><name pos:line="155" pos:column="33">st<pos:position pos:line="155" pos:column="35"/></name><operator pos:line="155" pos:column="35">.<pos:position pos:line="155" pos:column="36"/></operator><name pos:line="155" pos:column="36">st_size<pos:position pos:line="155" pos:column="43"/></name></name> <operator pos:line="155" pos:column="44">&gt;<pos:position pos:line="155" pos:column="48"/></operator> <literal type="number" pos:line="155" pos:column="46">0<pos:position pos:line="155" pos:column="47"/></literal></expr>)<pos:position pos:line="155" pos:column="48"/></condition><then pos:line="155" pos:column="48"> <block pos:line="155" pos:column="49">{
			<decl_stmt><decl><type><name><name pos:line="156" pos:column="25">struct<pos:position pos:line="156" pos:column="31"/></name> <name pos:line="156" pos:column="32">child_process<pos:position pos:line="156" pos:column="45"/></name></name></type> <name pos:line="156" pos:column="46">child<pos:position pos:line="156" pos:column="51"/></name> <init pos:line="156" pos:column="52">= <expr><name pos:line="156" pos:column="54">CHILD_PROCESS_INIT<pos:position pos:line="156" pos:column="72"/></name></expr></init></decl>;<pos:position pos:line="156" pos:column="73"/></decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="157" pos:column="25">const<pos:position pos:line="157" pos:column="30"/></specifier> <name pos:line="157" pos:column="31">char<pos:position pos:line="157" pos:column="35"/></name> <modifier pos:line="157" pos:column="36">*<pos:position pos:line="157" pos:column="37"/></modifier></type><name pos:line="157" pos:column="37">post_rewrite_hook<pos:position pos:line="157" pos:column="54"/></name> <init pos:line="157" pos:column="55">=
				<expr><call><name pos:line="158" pos:column="33">find_hook<pos:position pos:line="158" pos:column="42"/></name><argument_list pos:line="158" pos:column="42">(<argument><expr><literal type="string" pos:line="158" pos:column="43">"post-rewrite"<pos:position pos:line="158" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="158" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="158" pos:column="59"/></decl_stmt>

			<expr_stmt><expr><name><name pos:line="160" pos:column="25">child<pos:position pos:line="160" pos:column="30"/></name><operator pos:line="160" pos:column="30">.<pos:position pos:line="160" pos:column="31"/></operator><name pos:line="160" pos:column="31">in<pos:position pos:line="160" pos:column="33"/></name></name> <operator pos:line="160" pos:column="34">=<pos:position pos:line="160" pos:column="35"/></operator> <call><name pos:line="160" pos:column="36">open<pos:position pos:line="160" pos:column="40"/></name><argument_list pos:line="160" pos:column="40">(<argument><expr><call><name pos:line="160" pos:column="41">rebase_path_rewritten_list<pos:position pos:line="160" pos:column="67"/></name><argument_list pos:line="160" pos:column="67">()<pos:position pos:line="160" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="160" pos:column="71">O_RDONLY<pos:position pos:line="160" pos:column="79"/></name></expr></argument>)<pos:position pos:line="160" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="81"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="161" pos:column="25">child<pos:position pos:line="161" pos:column="30"/></name><operator pos:line="161" pos:column="30">.<pos:position pos:line="161" pos:column="31"/></operator><name pos:line="161" pos:column="31">git_cmd<pos:position pos:line="161" pos:column="38"/></name></name> <operator pos:line="161" pos:column="39">=<pos:position pos:line="161" pos:column="40"/></operator> <literal type="number" pos:line="161" pos:column="41">1<pos:position pos:line="161" pos:column="42"/></literal></expr>;<pos:position pos:line="161" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="162" pos:column="25">argv_array_push<pos:position pos:line="162" pos:column="40"/></name><argument_list pos:line="162" pos:column="40">(<argument><expr><operator pos:line="162" pos:column="41">&amp;<pos:position pos:line="162" pos:column="46"/></operator><name><name pos:line="162" pos:column="42">child<pos:position pos:line="162" pos:column="47"/></name><operator pos:line="162" pos:column="47">.<pos:position pos:line="162" pos:column="48"/></operator><name pos:line="162" pos:column="48">args<pos:position pos:line="162" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="162" pos:column="54">"notes"<pos:position pos:line="162" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="162" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="163" pos:column="25">argv_array_push<pos:position pos:line="163" pos:column="40"/></name><argument_list pos:line="163" pos:column="40">(<argument><expr><operator pos:line="163" pos:column="41">&amp;<pos:position pos:line="163" pos:column="46"/></operator><name><name pos:line="163" pos:column="42">child<pos:position pos:line="163" pos:column="47"/></name><operator pos:line="163" pos:column="47">.<pos:position pos:line="163" pos:column="48"/></operator><name pos:line="163" pos:column="48">args<pos:position pos:line="163" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="163" pos:column="54">"copy"<pos:position pos:line="163" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="163" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="164" pos:column="25">argv_array_push<pos:position pos:line="164" pos:column="40"/></name><argument_list pos:line="164" pos:column="40">(<argument><expr><operator pos:line="164" pos:column="41">&amp;<pos:position pos:line="164" pos:column="46"/></operator><name><name pos:line="164" pos:column="42">child<pos:position pos:line="164" pos:column="47"/></name><operator pos:line="164" pos:column="47">.<pos:position pos:line="164" pos:column="48"/></operator><name pos:line="164" pos:column="48">args<pos:position pos:line="164" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="164" pos:column="54">"--for-rewrite=rebase"<pos:position pos:line="164" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="164" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="78"/></expr_stmt>
			<comment type="block" pos:line="165" pos:column="25">/* we don't care if this copying failed */</comment>
			<expr_stmt><expr><call><name pos:line="166" pos:column="25">run_command<pos:position pos:line="166" pos:column="36"/></name><argument_list pos:line="166" pos:column="36">(<argument><expr><operator pos:line="166" pos:column="37">&amp;<pos:position pos:line="166" pos:column="42"/></operator><name pos:line="166" pos:column="38">child<pos:position pos:line="166" pos:column="43"/></name></expr></argument>)<pos:position pos:line="166" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="45"/></expr_stmt>

			<if pos:line="168" pos:column="25">if <condition pos:line="168" pos:column="28">(<expr><name pos:line="168" pos:column="29">post_rewrite_hook<pos:position pos:line="168" pos:column="46"/></name></expr>)<pos:position pos:line="168" pos:column="47"/></condition><then pos:line="168" pos:column="47"> <block pos:line="168" pos:column="48">{
				<decl_stmt><decl><type><name><name pos:line="169" pos:column="33">struct<pos:position pos:line="169" pos:column="39"/></name> <name pos:line="169" pos:column="40">child_process<pos:position pos:line="169" pos:column="53"/></name></name></type> <name pos:line="169" pos:column="54">hook<pos:position pos:line="169" pos:column="58"/></name> <init pos:line="169" pos:column="59">= <expr><name pos:line="169" pos:column="61">CHILD_PROCESS_INIT<pos:position pos:line="169" pos:column="79"/></name></expr></init></decl>;<pos:position pos:line="169" pos:column="80"/></decl_stmt>

				<expr_stmt><expr><name><name pos:line="171" pos:column="33">hook<pos:position pos:line="171" pos:column="37"/></name><operator pos:line="171" pos:column="37">.<pos:position pos:line="171" pos:column="38"/></operator><name pos:line="171" pos:column="38">in<pos:position pos:line="171" pos:column="40"/></name></name> <operator pos:line="171" pos:column="41">=<pos:position pos:line="171" pos:column="42"/></operator> <call><name pos:line="171" pos:column="43">open<pos:position pos:line="171" pos:column="47"/></name><argument_list pos:line="171" pos:column="47">(<argument><expr><call><name pos:line="171" pos:column="48">rebase_path_rewritten_list<pos:position pos:line="171" pos:column="74"/></name><argument_list pos:line="171" pos:column="74">()<pos:position pos:line="171" pos:column="76"/></argument_list></call></expr></argument>,
					<argument><expr><name pos:line="172" pos:column="41">O_RDONLY<pos:position pos:line="172" pos:column="49"/></name></expr></argument>)<pos:position pos:line="172" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="173" pos:column="33">hook<pos:position pos:line="173" pos:column="37"/></name><operator pos:line="173" pos:column="37">.<pos:position pos:line="173" pos:column="38"/></operator><name pos:line="173" pos:column="38">stdout_to_stderr<pos:position pos:line="173" pos:column="54"/></name></name> <operator pos:line="173" pos:column="55">=<pos:position pos:line="173" pos:column="56"/></operator> <literal type="number" pos:line="173" pos:column="57">1<pos:position pos:line="173" pos:column="58"/></literal></expr>;<pos:position pos:line="173" pos:column="59"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="174" pos:column="33">argv_array_push<pos:position pos:line="174" pos:column="48"/></name><argument_list pos:line="174" pos:column="48">(<argument><expr><operator pos:line="174" pos:column="49">&amp;<pos:position pos:line="174" pos:column="54"/></operator><name><name pos:line="174" pos:column="50">hook<pos:position pos:line="174" pos:column="54"/></name><operator pos:line="174" pos:column="54">.<pos:position pos:line="174" pos:column="55"/></operator><name pos:line="174" pos:column="55">args<pos:position pos:line="174" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="174" pos:column="61">post_rewrite_hook<pos:position pos:line="174" pos:column="78"/></name></expr></argument>)<pos:position pos:line="174" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="80"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="175" pos:column="33">argv_array_push<pos:position pos:line="175" pos:column="48"/></name><argument_list pos:line="175" pos:column="48">(<argument><expr><operator pos:line="175" pos:column="49">&amp;<pos:position pos:line="175" pos:column="54"/></operator><name><name pos:line="175" pos:column="50">hook<pos:position pos:line="175" pos:column="54"/></name><operator pos:line="175" pos:column="54">.<pos:position pos:line="175" pos:column="55"/></operator><name pos:line="175" pos:column="55">args<pos:position pos:line="175" pos:column="59"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="175" pos:column="61">"rebase"<pos:position pos:line="175" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="71"/></expr_stmt>
				<comment type="block" pos:line="176" pos:column="33">/* we don't care if this hook failed */</comment>
				<expr_stmt><expr><call><name pos:line="177" pos:column="33">run_command<pos:position pos:line="177" pos:column="44"/></name><argument_list pos:line="177" pos:column="44">(<argument><expr><operator pos:line="177" pos:column="45">&amp;<pos:position pos:line="177" pos:column="50"/></operator><name pos:line="177" pos:column="46">hook<pos:position pos:line="177" pos:column="50"/></name></expr></argument>)<pos:position pos:line="177" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="52"/></expr_stmt>
			}<pos:position pos:line="178" pos:column="26"/></block></then></if>
		}<pos:position pos:line="179" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="180" pos:column="17">apply_autostash<pos:position pos:line="180" pos:column="32"/></name><argument_list pos:line="180" pos:column="32">(<argument><expr><name pos:line="180" pos:column="33">opts<pos:position pos:line="180" pos:column="37"/></name></expr></argument>)<pos:position pos:line="180" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="39"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="182" pos:column="17">fprintf<pos:position pos:line="182" pos:column="24"/></name><argument_list pos:line="182" pos:column="24">(<argument><expr><name pos:line="182" pos:column="25">stderr<pos:position pos:line="182" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="182" pos:column="33">"Successfully rebased and updated %s.\n"<pos:position pos:line="182" pos:column="73"/></literal></expr></argument>,
			<argument><expr><name><name pos:line="183" pos:column="25">head_ref<pos:position pos:line="183" pos:column="33"/></name><operator pos:line="183" pos:column="33">.<pos:position pos:line="183" pos:column="34"/></operator><name pos:line="183" pos:column="34">buf<pos:position pos:line="183" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="183" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="39"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="185" pos:column="17">strbuf_release<pos:position pos:line="185" pos:column="31"/></name><argument_list pos:line="185" pos:column="31">(<argument><expr><operator pos:line="185" pos:column="32">&amp;<pos:position pos:line="185" pos:column="37"/></operator><name pos:line="185" pos:column="33">buf<pos:position pos:line="185" pos:column="36"/></name></expr></argument>)<pos:position pos:line="185" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="186" pos:column="17">strbuf_release<pos:position pos:line="186" pos:column="31"/></name><argument_list pos:line="186" pos:column="31">(<argument><expr><operator pos:line="186" pos:column="32">&amp;<pos:position pos:line="186" pos:column="37"/></operator><name pos:line="186" pos:column="33">head_ref<pos:position pos:line="186" pos:column="41"/></name></expr></argument>)<pos:position pos:line="186" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="187" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="189" pos:column="9">/*
	 * Sequence of picks finished successfully; cleanup by
	 * removing the .git/sequencer directory
	 */</comment>
	<return pos:line="193" pos:column="9">return <expr><call><name pos:line="193" pos:column="16">sequencer_remove_state<pos:position pos:line="193" pos:column="38"/></name><argument_list pos:line="193" pos:column="38">(<argument><expr><name pos:line="193" pos:column="39">opts<pos:position pos:line="193" pos:column="43"/></name></expr></argument>)<pos:position pos:line="193" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="45"/></return>
}<pos:position pos:line="194" pos:column="2"/></block></function></unit>
