<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2946_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">strbuf_realpath<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">strbuf<pos:position pos:line="1" pos:column="36"/></name></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">resolved<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">path<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
		      <parameter><decl><type><name pos:line="2" pos:column="23">int<pos:position pos:line="2" pos:column="26"/></name></type> <name pos:line="2" pos:column="27">die_on_error<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">remaining<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><name pos:line="4" pos:column="35">STRBUF_INIT<pos:position pos:line="4" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">next<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><name pos:line="5" pos:column="30">STRBUF_INIT<pos:position pos:line="5" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">symlink<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><name pos:line="6" pos:column="33">STRBUF_INIT<pos:position pos:line="6" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">retval<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><name pos:line="7" pos:column="24">NULL<pos:position pos:line="7" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">num_symlinks<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><literal type="number" pos:line="8" pos:column="28">0<pos:position pos:line="8" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">stat<pos:position pos:line="9" pos:column="20"/></name></name></type> <name pos:line="9" pos:column="21">st<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><operator pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">path<pos:position pos:line="11" pos:column="19"/></name></expr>)<pos:position pos:line="11" pos:column="20"/></condition><then pos:line="11" pos:column="20"> <block pos:line="11" pos:column="21">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">die_on_error<pos:position pos:line="12" pos:column="33"/></name></expr>)<pos:position pos:line="12" pos:column="34"/></condition><then pos:line="12" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">die<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><literal type="string" pos:line="13" pos:column="29">"The empty string is not a valid path"<pos:position pos:line="13" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="69"/></expr_stmt></block></then>
		<else pos:line="14" pos:column="17">else
			<block type="pseudo"><goto pos:line="15" pos:column="25">goto <name pos:line="15" pos:column="30">error_out<pos:position pos:line="15" pos:column="39"/></name>;<pos:position pos:line="15" pos:column="40"/></goto></block></else></if>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">strbuf_addstr<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><operator pos:line="18" pos:column="23">&amp;<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="24">remaining<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">path<pos:position pos:line="18" pos:column="39"/></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">get_root_part<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">resolved<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="33">&amp;<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="34">remaining<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">!<pos:position pos:line="21" pos:column="14"/></operator><name><name pos:line="21" pos:column="14">resolved<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">-&gt;<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="24">len<pos:position pos:line="21" pos:column="27"/></name></name></expr>)<pos:position pos:line="21" pos:column="28"/></condition><then pos:line="21" pos:column="28"> <block pos:line="21" pos:column="29">{
		<comment type="block" pos:line="22" pos:column="17">/* relative path; can use CWD as the initial resolved path */</comment>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><call><name pos:line="23" pos:column="21">strbuf_getcwd<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">resolved<pos:position pos:line="23" pos:column="43"/></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="45"/></condition><then pos:line="23" pos:column="45"> <block pos:line="23" pos:column="46">{
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name pos:line="24" pos:column="29">die_on_error<pos:position pos:line="24" pos:column="41"/></name></expr>)<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="33">die_errno<pos:position pos:line="25" pos:column="42"/></name><argument_list pos:line="25" pos:column="42">(<argument><expr><literal type="string" pos:line="25" pos:column="43">"unable to get current working directory"<pos:position pos:line="25" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="86"/></expr_stmt></block></then>
			<else pos:line="26" pos:column="25">else
				<block type="pseudo"><goto pos:line="27" pos:column="33">goto <name pos:line="27" pos:column="38">error_out<pos:position pos:line="27" pos:column="47"/></name>;<pos:position pos:line="27" pos:column="48"/></goto></block></else></if>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="31" pos:column="9">/* Iterate over the remaining path components */</comment>
	<while pos:line="32" pos:column="9">while <condition pos:line="32" pos:column="15">(<expr><name><name pos:line="32" pos:column="16">remaining<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">.<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="26">len<pos:position pos:line="32" pos:column="29"/></name></name> <operator pos:line="32" pos:column="30">&gt;<pos:position pos:line="32" pos:column="34"/></operator> <literal type="number" pos:line="32" pos:column="32">0<pos:position pos:line="32" pos:column="33"/></literal></expr>)<pos:position pos:line="32" pos:column="34"/></condition> <block pos:line="32" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">get_next_component<pos:position pos:line="33" pos:column="35"/></name><argument_list pos:line="33" pos:column="35">(<argument><expr><operator pos:line="33" pos:column="36">&amp;<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="37">next<pos:position pos:line="33" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="43">&amp;<pos:position pos:line="33" pos:column="48"/></operator><name pos:line="33" pos:column="44">remaining<pos:position pos:line="33" pos:column="53"/></name></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>

		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name><name pos:line="35" pos:column="21">next<pos:position pos:line="35" pos:column="25"/></name><operator pos:line="35" pos:column="25">.<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="26">len<pos:position pos:line="35" pos:column="29"/></name></name> <operator pos:line="35" pos:column="30">==<pos:position pos:line="35" pos:column="32"/></operator> <literal type="number" pos:line="35" pos:column="33">0<pos:position pos:line="35" pos:column="34"/></literal></expr>)<pos:position pos:line="35" pos:column="35"/></condition><then pos:line="35" pos:column="35"> <block pos:line="35" pos:column="36">{
			<continue pos:line="36" pos:column="25">continue;<pos:position pos:line="36" pos:column="34"/></continue> <comment type="block" pos:line="36" pos:column="35">/* empty component */</comment>
		}<pos:position pos:line="37" pos:column="18"/></block></then> <elseif pos:line="37" pos:column="19">else <if pos:line="37" pos:column="24">if <condition pos:line="37" pos:column="27">(<expr><name><name pos:line="37" pos:column="28">next<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">.<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="33">len<pos:position pos:line="37" pos:column="36"/></name></name> <operator pos:line="37" pos:column="37">==<pos:position pos:line="37" pos:column="39"/></operator> <literal type="number" pos:line="37" pos:column="40">1<pos:position pos:line="37" pos:column="41"/></literal> <operator pos:line="37" pos:column="42">&amp;&amp;<pos:position pos:line="37" pos:column="52"/></operator> <operator pos:line="37" pos:column="45">!<pos:position pos:line="37" pos:column="46"/></operator><call><name pos:line="37" pos:column="46">strcmp<pos:position pos:line="37" pos:column="52"/></name><argument_list pos:line="37" pos:column="52">(<argument><expr><name><name pos:line="37" pos:column="53">next<pos:position pos:line="37" pos:column="57"/></name><operator pos:line="37" pos:column="57">.<pos:position pos:line="37" pos:column="58"/></operator><name pos:line="37" pos:column="58">buf<pos:position pos:line="37" pos:column="61"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="63">"."<pos:position pos:line="37" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="68"/></condition><then pos:line="37" pos:column="68"> <block pos:line="37" pos:column="69">{
			<continue pos:line="38" pos:column="25">continue;<pos:position pos:line="38" pos:column="34"/></continue> <comment type="block" pos:line="38" pos:column="35">/* '.' component */</comment>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if></elseif> <elseif pos:line="39" pos:column="19">else <if pos:line="39" pos:column="24">if <condition pos:line="39" pos:column="27">(<expr><name><name pos:line="39" pos:column="28">next<pos:position pos:line="39" pos:column="32"/></name><operator pos:line="39" pos:column="32">.<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="33">len<pos:position pos:line="39" pos:column="36"/></name></name> <operator pos:line="39" pos:column="37">==<pos:position pos:line="39" pos:column="39"/></operator> <literal type="number" pos:line="39" pos:column="40">2<pos:position pos:line="39" pos:column="41"/></literal> <operator pos:line="39" pos:column="42">&amp;&amp;<pos:position pos:line="39" pos:column="52"/></operator> <operator pos:line="39" pos:column="45">!<pos:position pos:line="39" pos:column="46"/></operator><call><name pos:line="39" pos:column="46">strcmp<pos:position pos:line="39" pos:column="52"/></name><argument_list pos:line="39" pos:column="52">(<argument><expr><name><name pos:line="39" pos:column="53">next<pos:position pos:line="39" pos:column="57"/></name><operator pos:line="39" pos:column="57">.<pos:position pos:line="39" pos:column="58"/></operator><name pos:line="39" pos:column="58">buf<pos:position pos:line="39" pos:column="61"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="63">".."<pos:position pos:line="39" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="69"/></condition><then pos:line="39" pos:column="69"> <block pos:line="39" pos:column="70">{
			<comment type="block" pos:line="40" pos:column="25">/* '..' component; strip the last path component */</comment>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">strip_last_component<pos:position pos:line="41" pos:column="45"/></name><argument_list pos:line="41" pos:column="45">(<argument><expr><name pos:line="41" pos:column="46">resolved<pos:position pos:line="41" pos:column="54"/></name></expr></argument>)<pos:position pos:line="41" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="56"/></expr_stmt>
			<continue pos:line="42" pos:column="25">continue;<pos:position pos:line="42" pos:column="34"/></continue>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if></elseif></if>

		<comment type="block" pos:line="45" pos:column="17">/* append the next component and resolve resultant path */</comment>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><operator pos:line="46" pos:column="21">!<pos:position pos:line="46" pos:column="22"/></operator><call><name pos:line="46" pos:column="22">is_dir_sep<pos:position pos:line="46" pos:column="32"/></name><argument_list pos:line="46" pos:column="32">(<argument><expr><name><name pos:line="46" pos:column="33">resolved<pos:position pos:line="46" pos:column="41"/></name><operator pos:line="46" pos:column="41">-&gt;<pos:position pos:line="46" pos:column="46"/></operator><name pos:line="46" pos:column="43">buf<pos:position pos:line="46" pos:column="46"/></name><index pos:line="46" pos:column="46">[<expr><name><name pos:line="46" pos:column="47">resolved<pos:position pos:line="46" pos:column="55"/></name><operator pos:line="46" pos:column="55">-&gt;<pos:position pos:line="46" pos:column="60"/></operator><name pos:line="46" pos:column="57">len<pos:position pos:line="46" pos:column="60"/></name></name> <operator pos:line="46" pos:column="61">-<pos:position pos:line="46" pos:column="62"/></operator> <literal type="number" pos:line="46" pos:column="63">1<pos:position pos:line="46" pos:column="64"/></literal></expr>]<pos:position pos:line="46" pos:column="65"/></index></name></expr></argument>)<pos:position pos:line="46" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="67"/></condition><then pos:line="46" pos:column="67">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="25">strbuf_addch<pos:position pos:line="47" pos:column="37"/></name><argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">resolved<pos:position pos:line="47" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="47" pos:column="48">'/'<pos:position pos:line="47" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="53"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">strbuf_addbuf<pos:position pos:line="48" pos:column="30"/></name><argument_list pos:line="48" pos:column="30">(<argument><expr><name pos:line="48" pos:column="31">resolved<pos:position pos:line="48" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="41">&amp;<pos:position pos:line="48" pos:column="46"/></operator><name pos:line="48" pos:column="42">next<pos:position pos:line="48" pos:column="46"/></name></expr></argument>)<pos:position pos:line="48" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="48"/></expr_stmt>

		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><call><name pos:line="50" pos:column="21">lstat<pos:position pos:line="50" pos:column="26"/></name><argument_list pos:line="50" pos:column="26">(<argument><expr><name><name pos:line="50" pos:column="27">resolved<pos:position pos:line="50" pos:column="35"/></name><operator pos:line="50" pos:column="35">-&gt;<pos:position pos:line="50" pos:column="40"/></operator><name pos:line="50" pos:column="37">buf<pos:position pos:line="50" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="42">&amp;<pos:position pos:line="50" pos:column="47"/></operator><name pos:line="50" pos:column="43">st<pos:position pos:line="50" pos:column="45"/></name></expr></argument>)<pos:position pos:line="50" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="47"/></condition><then pos:line="50" pos:column="47"> <block pos:line="50" pos:column="48">{
			<comment type="block" pos:line="51" pos:column="25">/* error out unless this was the last component */</comment>
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><name pos:line="52" pos:column="29">errno<pos:position pos:line="52" pos:column="34"/></name> <operator pos:line="52" pos:column="35">!=<pos:position pos:line="52" pos:column="37"/></operator> <name pos:line="52" pos:column="38">ENOENT<pos:position pos:line="52" pos:column="44"/></name> <operator pos:line="52" pos:column="45">||<pos:position pos:line="52" pos:column="47"/></operator> <name><name pos:line="52" pos:column="48">remaining<pos:position pos:line="52" pos:column="57"/></name><operator pos:line="52" pos:column="57">.<pos:position pos:line="52" pos:column="58"/></operator><name pos:line="52" pos:column="58">len<pos:position pos:line="52" pos:column="61"/></name></name></expr>)<pos:position pos:line="52" pos:column="62"/></condition><then pos:line="52" pos:column="62"> <block pos:line="52" pos:column="63">{
				<if pos:line="53" pos:column="33">if <condition pos:line="53" pos:column="36">(<expr><name pos:line="53" pos:column="37">die_on_error<pos:position pos:line="53" pos:column="49"/></name></expr>)<pos:position pos:line="53" pos:column="50"/></condition><then pos:line="53" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="41">die_errno<pos:position pos:line="54" pos:column="50"/></name><argument_list pos:line="54" pos:column="50">(<argument><expr><literal type="string" pos:line="54" pos:column="51">"Invalid path '%s'"<pos:position pos:line="54" pos:column="70"/></literal></expr></argument>,
						  <argument><expr><name><name pos:line="55" pos:column="51">resolved<pos:position pos:line="55" pos:column="59"/></name><operator pos:line="55" pos:column="59">-&gt;<pos:position pos:line="55" pos:column="64"/></operator><name pos:line="55" pos:column="61">buf<pos:position pos:line="55" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="66"/></expr_stmt></block></then>
				<else pos:line="56" pos:column="33">else
					<block type="pseudo"><goto pos:line="57" pos:column="41">goto <name pos:line="57" pos:column="46">error_out<pos:position pos:line="57" pos:column="55"/></name>;<pos:position pos:line="57" pos:column="56"/></goto></block></else></if>
			}<pos:position pos:line="58" pos:column="26"/></block></then></if>
		}<pos:position pos:line="59" pos:column="18"/></block></then> <elseif pos:line="59" pos:column="19">else <if pos:line="59" pos:column="24">if <condition pos:line="59" pos:column="27">(<expr><call><name pos:line="59" pos:column="28">S_ISLNK<pos:position pos:line="59" pos:column="35"/></name><argument_list pos:line="59" pos:column="35">(<argument><expr><name><name pos:line="59" pos:column="36">st<pos:position pos:line="59" pos:column="38"/></name><operator pos:line="59" pos:column="38">.<pos:position pos:line="59" pos:column="39"/></operator><name pos:line="59" pos:column="39">st_mode<pos:position pos:line="59" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="48"/></condition><then pos:line="59" pos:column="48"> <block pos:line="59" pos:column="49">{
			<decl_stmt><decl><type><name pos:line="60" pos:column="25">ssize_t<pos:position pos:line="60" pos:column="32"/></name></type> <name pos:line="60" pos:column="33">len<pos:position pos:line="60" pos:column="36"/></name></decl>;<pos:position pos:line="60" pos:column="37"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="61" pos:column="25">strbuf_reset<pos:position pos:line="61" pos:column="37"/></name><argument_list pos:line="61" pos:column="37">(<argument><expr><operator pos:line="61" pos:column="38">&amp;<pos:position pos:line="61" pos:column="43"/></operator><name pos:line="61" pos:column="39">symlink<pos:position pos:line="61" pos:column="46"/></name></expr></argument>)<pos:position pos:line="61" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="48"/></expr_stmt>

			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><name pos:line="63" pos:column="29">num_symlinks<pos:position pos:line="63" pos:column="41"/></name><operator pos:line="63" pos:column="41">++<pos:position pos:line="63" pos:column="43"/></operator> <operator pos:line="63" pos:column="44">&gt;<pos:position pos:line="63" pos:column="48"/></operator> <name pos:line="63" pos:column="46">MAXSYMLINKS<pos:position pos:line="63" pos:column="57"/></name></expr>)<pos:position pos:line="63" pos:column="58"/></condition><then pos:line="63" pos:column="58"> <block pos:line="63" pos:column="59">{
				<expr_stmt><expr><name pos:line="64" pos:column="33">errno<pos:position pos:line="64" pos:column="38"/></name> <operator pos:line="64" pos:column="39">=<pos:position pos:line="64" pos:column="40"/></operator> <name pos:line="64" pos:column="41">ELOOP<pos:position pos:line="64" pos:column="46"/></name></expr>;<pos:position pos:line="64" pos:column="47"/></expr_stmt>

				<if pos:line="66" pos:column="33">if <condition pos:line="66" pos:column="36">(<expr><name pos:line="66" pos:column="37">die_on_error<pos:position pos:line="66" pos:column="49"/></name></expr>)<pos:position pos:line="66" pos:column="50"/></condition><then pos:line="66" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="41">die<pos:position pos:line="67" pos:column="44"/></name><argument_list pos:line="67" pos:column="44">(<argument><expr><literal type="string" pos:line="67" pos:column="45">"More than %d nested symlinks "<pos:position pos:line="67" pos:column="76"/></literal>
					    <literal type="string" pos:line="68" pos:column="45">"on path '%s'"<pos:position pos:line="68" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="61">MAXSYMLINKS<pos:position pos:line="68" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="74">path<pos:position pos:line="68" pos:column="78"/></name></expr></argument>)<pos:position pos:line="68" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="80"/></expr_stmt></block></then>
				<else pos:line="69" pos:column="33">else
					<block type="pseudo"><goto pos:line="70" pos:column="41">goto <name pos:line="70" pos:column="46">error_out<pos:position pos:line="70" pos:column="55"/></name>;<pos:position pos:line="70" pos:column="56"/></goto></block></else></if>
			}<pos:position pos:line="71" pos:column="26"/></block></then></if>

			<expr_stmt><expr><name pos:line="73" pos:column="25">len<pos:position pos:line="73" pos:column="28"/></name> <operator pos:line="73" pos:column="29">=<pos:position pos:line="73" pos:column="30"/></operator> <call><name pos:line="73" pos:column="31">strbuf_readlink<pos:position pos:line="73" pos:column="46"/></name><argument_list pos:line="73" pos:column="46">(<argument><expr><operator pos:line="73" pos:column="47">&amp;<pos:position pos:line="73" pos:column="52"/></operator><name pos:line="73" pos:column="48">symlink<pos:position pos:line="73" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="57">resolved<pos:position pos:line="73" pos:column="65"/></name><operator pos:line="73" pos:column="65">-&gt;<pos:position pos:line="73" pos:column="70"/></operator><name pos:line="73" pos:column="67">buf<pos:position pos:line="73" pos:column="70"/></name></name></expr></argument>,
					      <argument><expr><name><name pos:line="74" pos:column="47">st<pos:position pos:line="74" pos:column="49"/></name><operator pos:line="74" pos:column="49">.<pos:position pos:line="74" pos:column="50"/></operator><name pos:line="74" pos:column="50">st_size<pos:position pos:line="74" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="59"/></expr_stmt>
			<if pos:line="75" pos:column="25">if <condition pos:line="75" pos:column="28">(<expr><name pos:line="75" pos:column="29">len<pos:position pos:line="75" pos:column="32"/></name> <operator pos:line="75" pos:column="33">&lt;<pos:position pos:line="75" pos:column="37"/></operator> <literal type="number" pos:line="75" pos:column="35">0<pos:position pos:line="75" pos:column="36"/></literal></expr>)<pos:position pos:line="75" pos:column="37"/></condition><then pos:line="75" pos:column="37"> <block pos:line="75" pos:column="38">{
				<if pos:line="76" pos:column="33">if <condition pos:line="76" pos:column="36">(<expr><name pos:line="76" pos:column="37">die_on_error<pos:position pos:line="76" pos:column="49"/></name></expr>)<pos:position pos:line="76" pos:column="50"/></condition><then pos:line="76" pos:column="50">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="41">die_errno<pos:position pos:line="77" pos:column="50"/></name><argument_list pos:line="77" pos:column="50">(<argument><expr><literal type="string" pos:line="77" pos:column="51">"Invalid symlink '%s'"<pos:position pos:line="77" pos:column="73"/></literal></expr></argument>,
						  <argument><expr><name><name pos:line="78" pos:column="51">resolved<pos:position pos:line="78" pos:column="59"/></name><operator pos:line="78" pos:column="59">-&gt;<pos:position pos:line="78" pos:column="64"/></operator><name pos:line="78" pos:column="61">buf<pos:position pos:line="78" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="66"/></expr_stmt></block></then>
				<else pos:line="79" pos:column="33">else
					<block type="pseudo"><goto pos:line="80" pos:column="41">goto <name pos:line="80" pos:column="46">error_out<pos:position pos:line="80" pos:column="55"/></name>;<pos:position pos:line="80" pos:column="56"/></goto></block></else></if>
			}<pos:position pos:line="81" pos:column="26"/></block></then></if>

			<if pos:line="83" pos:column="25">if <condition pos:line="83" pos:column="28">(<expr><call><name pos:line="83" pos:column="29">is_absolute_path<pos:position pos:line="83" pos:column="45"/></name><argument_list pos:line="83" pos:column="45">(<argument><expr><name><name pos:line="83" pos:column="46">symlink<pos:position pos:line="83" pos:column="53"/></name><operator pos:line="83" pos:column="53">.<pos:position pos:line="83" pos:column="54"/></operator><name pos:line="83" pos:column="54">buf<pos:position pos:line="83" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="59"/></condition><then pos:line="83" pos:column="59"> <block pos:line="83" pos:column="60">{
				<comment type="block" pos:line="84" pos:column="33">/* absolute symlink; set resolved to root */</comment>
				<expr_stmt><expr><call><name pos:line="85" pos:column="33">get_root_part<pos:position pos:line="85" pos:column="46"/></name><argument_list pos:line="85" pos:column="46">(<argument><expr><name pos:line="85" pos:column="47">resolved<pos:position pos:line="85" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="57">&amp;<pos:position pos:line="85" pos:column="62"/></operator><name pos:line="85" pos:column="58">symlink<pos:position pos:line="85" pos:column="65"/></name></expr></argument>)<pos:position pos:line="85" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="67"/></expr_stmt>
			}<pos:position pos:line="86" pos:column="26"/></block></then> <else pos:line="86" pos:column="27">else <block pos:line="86" pos:column="32">{
				<comment type="block" pos:line="87" pos:column="33">/*
				 * relative symlink
				 * strip off the last component since it will
				 * be replaced with the contents of the symlink
				 */</comment>
				<expr_stmt><expr><call><name pos:line="92" pos:column="33">strip_last_component<pos:position pos:line="92" pos:column="53"/></name><argument_list pos:line="92" pos:column="53">(<argument><expr><name pos:line="92" pos:column="54">resolved<pos:position pos:line="92" pos:column="62"/></name></expr></argument>)<pos:position pos:line="92" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="64"/></expr_stmt>
			}<pos:position pos:line="93" pos:column="26"/></block></else></if>

			<comment type="block" pos:line="95" pos:column="25">/*
			 * if there are still remaining components to resolve
			 * then append them to symlink
			 */</comment>
			<if pos:line="99" pos:column="25">if <condition pos:line="99" pos:column="28">(<expr><name><name pos:line="99" pos:column="29">remaining<pos:position pos:line="99" pos:column="38"/></name><operator pos:line="99" pos:column="38">.<pos:position pos:line="99" pos:column="39"/></operator><name pos:line="99" pos:column="39">len<pos:position pos:line="99" pos:column="42"/></name></name></expr>)<pos:position pos:line="99" pos:column="43"/></condition><then pos:line="99" pos:column="43"> <block pos:line="99" pos:column="44">{
				<expr_stmt><expr><call><name pos:line="100" pos:column="33">strbuf_addch<pos:position pos:line="100" pos:column="45"/></name><argument_list pos:line="100" pos:column="45">(<argument><expr><operator pos:line="100" pos:column="46">&amp;<pos:position pos:line="100" pos:column="51"/></operator><name pos:line="100" pos:column="47">symlink<pos:position pos:line="100" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="100" pos:column="56">'/'<pos:position pos:line="100" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="61"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="101" pos:column="33">strbuf_addbuf<pos:position pos:line="101" pos:column="46"/></name><argument_list pos:line="101" pos:column="46">(<argument><expr><operator pos:line="101" pos:column="47">&amp;<pos:position pos:line="101" pos:column="52"/></operator><name pos:line="101" pos:column="48">symlink<pos:position pos:line="101" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="57">&amp;<pos:position pos:line="101" pos:column="62"/></operator><name pos:line="101" pos:column="58">remaining<pos:position pos:line="101" pos:column="67"/></name></expr></argument>)<pos:position pos:line="101" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="69"/></expr_stmt>
			}<pos:position pos:line="102" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="104" pos:column="25">/*
			 * use the symlink as the remaining components that
			 * need to be resolved
			 */</comment>
			<expr_stmt><expr><call><name pos:line="108" pos:column="25">strbuf_swap<pos:position pos:line="108" pos:column="36"/></name><argument_list pos:line="108" pos:column="36">(<argument><expr><operator pos:line="108" pos:column="37">&amp;<pos:position pos:line="108" pos:column="42"/></operator><name pos:line="108" pos:column="38">symlink<pos:position pos:line="108" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="47">&amp;<pos:position pos:line="108" pos:column="52"/></operator><name pos:line="108" pos:column="48">remaining<pos:position pos:line="108" pos:column="57"/></name></expr></argument>)<pos:position pos:line="108" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="109" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="110" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="112" pos:column="9">retval<pos:position pos:line="112" pos:column="15"/></name> <operator pos:line="112" pos:column="16">=<pos:position pos:line="112" pos:column="17"/></operator> <name><name pos:line="112" pos:column="18">resolved<pos:position pos:line="112" pos:column="26"/></name><operator pos:line="112" pos:column="26">-&gt;<pos:position pos:line="112" pos:column="31"/></operator><name pos:line="112" pos:column="28">buf<pos:position pos:line="112" pos:column="31"/></name></name></expr>;<pos:position pos:line="112" pos:column="32"/></expr_stmt>

<label><name pos:line="114" pos:column="1">error_out<pos:position pos:line="114" pos:column="10"/></name>:<pos:position pos:line="114" pos:column="11"/></label>
	<expr_stmt><expr><call><name pos:line="115" pos:column="9">strbuf_release<pos:position pos:line="115" pos:column="23"/></name><argument_list pos:line="115" pos:column="23">(<argument><expr><operator pos:line="115" pos:column="24">&amp;<pos:position pos:line="115" pos:column="29"/></operator><name pos:line="115" pos:column="25">remaining<pos:position pos:line="115" pos:column="34"/></name></expr></argument>)<pos:position pos:line="115" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="116" pos:column="9">strbuf_release<pos:position pos:line="116" pos:column="23"/></name><argument_list pos:line="116" pos:column="23">(<argument><expr><operator pos:line="116" pos:column="24">&amp;<pos:position pos:line="116" pos:column="29"/></operator><name pos:line="116" pos:column="25">next<pos:position pos:line="116" pos:column="29"/></name></expr></argument>)<pos:position pos:line="116" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="117" pos:column="9">strbuf_release<pos:position pos:line="117" pos:column="23"/></name><argument_list pos:line="117" pos:column="23">(<argument><expr><operator pos:line="117" pos:column="24">&amp;<pos:position pos:line="117" pos:column="29"/></operator><name pos:line="117" pos:column="25">symlink<pos:position pos:line="117" pos:column="32"/></name></expr></argument>)<pos:position pos:line="117" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="34"/></expr_stmt>

	<if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><operator pos:line="119" pos:column="13">!<pos:position pos:line="119" pos:column="14"/></operator><name pos:line="119" pos:column="14">retval<pos:position pos:line="119" pos:column="20"/></name></expr>)<pos:position pos:line="119" pos:column="21"/></condition><then pos:line="119" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="17">strbuf_reset<pos:position pos:line="120" pos:column="29"/></name><argument_list pos:line="120" pos:column="29">(<argument><expr><name pos:line="120" pos:column="30">resolved<pos:position pos:line="120" pos:column="38"/></name></expr></argument>)<pos:position pos:line="120" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="40"/></expr_stmt></block></then></if>

	<return pos:line="122" pos:column="9">return <expr><name pos:line="122" pos:column="16">retval<pos:position pos:line="122" pos:column="22"/></name></expr>;<pos:position pos:line="122" pos:column="23"/></return>
}<pos:position pos:line="123" pos:column="2"/></block></function></unit>
