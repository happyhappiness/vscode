<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2487_git-2.0.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">update_refs<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">action<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name><name pos:line="1" pos:column="43">struct<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">ref_update<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier><modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">updates_orig<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">int<pos:position pos:line="2" pos:column="20"/></name></type> <name pos:line="2" pos:column="21">n<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="24">enum<pos:position pos:line="2" pos:column="28"/></name> <name pos:line="2" pos:column="29">action_on_err<pos:position pos:line="2" pos:column="42"/></name></name></type> <name pos:line="2" pos:column="43">onerr<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="22">delnum<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><literal type="number" pos:line="4" pos:column="31">0<pos:position pos:line="4" pos:column="32"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="34">i<pos:position pos:line="4" pos:column="35"/></name></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">ref_update<pos:position pos:line="5" pos:column="26"/></name></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier><modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">updates<pos:position pos:line="5" pos:column="36"/></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name> <modifier pos:line="6" pos:column="13">*<pos:position pos:line="6" pos:column="14"/></modifier></type><name pos:line="6" pos:column="14">types<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">ref_lock<pos:position pos:line="7" pos:column="24"/></name></name> <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier><modifier pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></modifier></type><name pos:line="7" pos:column="27">locks<pos:position pos:line="7" pos:column="32"/></name></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier><modifier pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></modifier></type><name pos:line="8" pos:column="22">delnames<pos:position pos:line="8" pos:column="30"/></name></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">updates_orig<pos:position pos:line="10" pos:column="26"/></name> <operator pos:line="10" pos:column="27">||<pos:position pos:line="10" pos:column="29"/></operator> <operator pos:line="10" pos:column="30">!<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="31">n<pos:position pos:line="10" pos:column="32"/></name></expr>)<pos:position pos:line="10" pos:column="33"/></condition><then pos:line="10" pos:column="33">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="13" pos:column="9">/* Allocate work space */</comment>
	<expr_stmt><expr><name pos:line="14" pos:column="9">updates<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <call><name pos:line="14" pos:column="19">xmalloc<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><sizeof pos:line="14" pos:column="27">sizeof<argument_list pos:line="14" pos:column="33">(<argument><expr><operator pos:line="14" pos:column="34">*<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="35">updates<pos:position pos:line="14" pos:column="42"/></name></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></sizeof> <operator pos:line="14" pos:column="44">*<pos:position pos:line="14" pos:column="45"/></operator> <name pos:line="14" pos:column="46">n<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">types<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <call><name pos:line="15" pos:column="17">xmalloc<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><sizeof pos:line="15" pos:column="25">sizeof<argument_list pos:line="15" pos:column="31">(<argument><expr><operator pos:line="15" pos:column="32">*<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="33">types<pos:position pos:line="15" pos:column="38"/></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></sizeof> <operator pos:line="15" pos:column="40">*<pos:position pos:line="15" pos:column="41"/></operator> <name pos:line="15" pos:column="42">n<pos:position pos:line="15" pos:column="43"/></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">locks<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">=<pos:position pos:line="16" pos:column="16"/></operator> <call><name pos:line="16" pos:column="17">xcalloc<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">n<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="28">sizeof<argument_list pos:line="16" pos:column="34">(<argument><expr><operator pos:line="16" pos:column="35">*<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="36">locks<pos:position pos:line="16" pos:column="41"/></name></expr></argument>)<pos:position pos:line="16" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">delnames<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <call><name pos:line="17" pos:column="20">xmalloc<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><sizeof pos:line="17" pos:column="28">sizeof<argument_list pos:line="17" pos:column="34">(<argument><expr><operator pos:line="17" pos:column="35">*<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="36">delnames<pos:position pos:line="17" pos:column="44"/></name></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></sizeof> <operator pos:line="17" pos:column="46">*<pos:position pos:line="17" pos:column="47"/></operator> <name pos:line="17" pos:column="48">n<pos:position pos:line="17" pos:column="49"/></name></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="51"/></expr_stmt>

	<comment type="block" pos:line="19" pos:column="9">/* Copy, sort, and reject duplicate refs */</comment>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">memcpy<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">updates<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="25">updates_orig<pos:position pos:line="20" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="39">sizeof<argument_list pos:line="20" pos:column="45">(<argument><expr><operator pos:line="20" pos:column="46">*<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="47">updates<pos:position pos:line="20" pos:column="54"/></name></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></sizeof> <operator pos:line="20" pos:column="56">*<pos:position pos:line="20" pos:column="57"/></operator> <name pos:line="20" pos:column="58">n<pos:position pos:line="20" pos:column="59"/></name></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">qsort<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><name pos:line="21" pos:column="15">updates<pos:position pos:line="21" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="24">n<pos:position pos:line="21" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="27">sizeof<argument_list pos:line="21" pos:column="33">(<argument><expr><operator pos:line="21" pos:column="34">*<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="35">updates<pos:position pos:line="21" pos:column="42"/></name></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="21" pos:column="45">ref_update_compare<pos:position pos:line="21" pos:column="63"/></name></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">ret<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">ref_update_reject_duplicates<pos:position pos:line="22" pos:column="43"/></name><argument_list pos:line="22" pos:column="43">(<argument><expr><name pos:line="22" pos:column="44">updates<pos:position pos:line="22" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="53">n<pos:position pos:line="22" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="56">onerr<pos:position pos:line="22" pos:column="61"/></name></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="63"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">ret<pos:position pos:line="23" pos:column="16"/></name></expr>)<pos:position pos:line="23" pos:column="17"/></condition><then pos:line="23" pos:column="17">
		<block type="pseudo"><goto pos:line="24" pos:column="17">goto <name pos:line="24" pos:column="22">cleanup<pos:position pos:line="24" pos:column="29"/></name>;<pos:position pos:line="24" pos:column="30"/></goto></block></then></if>

	<comment type="block" pos:line="26" pos:column="9">/* Acquire all locks while verifying old values */</comment>
	<for pos:line="27" pos:column="9">for <control pos:line="27" pos:column="13">(<init><expr><name pos:line="27" pos:column="14">i<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <literal type="number" pos:line="27" pos:column="18">0<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></init> <condition><expr><name pos:line="27" pos:column="21">i<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="25">n<pos:position pos:line="27" pos:column="26"/></name></expr>;<pos:position pos:line="27" pos:column="27"/></condition> <incr><expr><name pos:line="27" pos:column="28">i<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">++<pos:position pos:line="27" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="27" pos:column="32"/></control> <block pos:line="27" pos:column="33">{
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">locks<pos:position pos:line="28" pos:column="22"/></name><index pos:line="28" pos:column="22">[<expr><name pos:line="28" pos:column="23">i<pos:position pos:line="28" pos:column="24"/></name></expr>]<pos:position pos:line="28" pos:column="25"/></index></name> <operator pos:line="28" pos:column="26">=<pos:position pos:line="28" pos:column="27"/></operator> <call><name pos:line="28" pos:column="28">update_ref_lock<pos:position pos:line="28" pos:column="43"/></name><argument_list pos:line="28" pos:column="43">(<argument><expr><name><name pos:line="28" pos:column="44">updates<pos:position pos:line="28" pos:column="51"/></name><index pos:line="28" pos:column="51">[<expr><name pos:line="28" pos:column="52">i<pos:position pos:line="28" pos:column="53"/></name></expr>]<pos:position pos:line="28" pos:column="54"/></index></name><operator pos:line="28" pos:column="54">-&gt;<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="56">ref_name<pos:position pos:line="28" pos:column="64"/></name></expr></argument>,
					   <argument><expr><operator pos:line="29" pos:column="44">(<pos:position pos:line="29" pos:column="45"/></operator><ternary><condition><expr><name><name pos:line="29" pos:column="45">updates<pos:position pos:line="29" pos:column="52"/></name><index pos:line="29" pos:column="52">[<expr><name pos:line="29" pos:column="53">i<pos:position pos:line="29" pos:column="54"/></name></expr>]<pos:position pos:line="29" pos:column="55"/></index></name><operator pos:line="29" pos:column="55">-&gt;<pos:position pos:line="29" pos:column="60"/></operator><name pos:line="29" pos:column="57">have_old<pos:position pos:line="29" pos:column="65"/></name></expr> ?<pos:position pos:line="29" pos:column="67"/></condition><then pos:line="29" pos:column="67">
					    <expr><name><name pos:line="30" pos:column="45">updates<pos:position pos:line="30" pos:column="52"/></name><index pos:line="30" pos:column="52">[<expr><name pos:line="30" pos:column="53">i<pos:position pos:line="30" pos:column="54"/></name></expr>]<pos:position pos:line="30" pos:column="55"/></index></name><operator pos:line="30" pos:column="55">-&gt;<pos:position pos:line="30" pos:column="60"/></operator><name pos:line="30" pos:column="57">old_sha1<pos:position pos:line="30" pos:column="65"/></name></expr> <pos:position pos:line="30" pos:column="66"/></then><else pos:line="30" pos:column="66">: <expr><name pos:line="30" pos:column="68">NULL<pos:position pos:line="30" pos:column="72"/></name></expr></else></ternary><operator pos:line="30" pos:column="72">)<pos:position pos:line="30" pos:column="73"/></operator></expr></argument>,
					   <argument><expr><name><name pos:line="31" pos:column="44">updates<pos:position pos:line="31" pos:column="51"/></name><index pos:line="31" pos:column="51">[<expr><name pos:line="31" pos:column="52">i<pos:position pos:line="31" pos:column="53"/></name></expr>]<pos:position pos:line="31" pos:column="54"/></index></name><operator pos:line="31" pos:column="54">-&gt;<pos:position pos:line="31" pos:column="59"/></operator><name pos:line="31" pos:column="56">flags<pos:position pos:line="31" pos:column="61"/></name></expr></argument>,
					   <argument><expr><operator pos:line="32" pos:column="44">&amp;<pos:position pos:line="32" pos:column="49"/></operator><name><name pos:line="32" pos:column="45">types<pos:position pos:line="32" pos:column="50"/></name><index pos:line="32" pos:column="50">[<expr><name pos:line="32" pos:column="51">i<pos:position pos:line="32" pos:column="52"/></name></expr>]<pos:position pos:line="32" pos:column="53"/></index></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="55">onerr<pos:position pos:line="32" pos:column="60"/></name></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><operator pos:line="33" pos:column="21">!<pos:position pos:line="33" pos:column="22"/></operator><name><name pos:line="33" pos:column="22">locks<pos:position pos:line="33" pos:column="27"/></name><index pos:line="33" pos:column="27">[<expr><name pos:line="33" pos:column="28">i<pos:position pos:line="33" pos:column="29"/></name></expr>]<pos:position pos:line="33" pos:column="30"/></index></name></expr>)<pos:position pos:line="33" pos:column="31"/></condition><then pos:line="33" pos:column="31"> <block pos:line="33" pos:column="32">{
			<expr_stmt><expr><name pos:line="34" pos:column="25">ret<pos:position pos:line="34" pos:column="28"/></name> <operator pos:line="34" pos:column="29">=<pos:position pos:line="34" pos:column="30"/></operator> <literal type="number" pos:line="34" pos:column="31">1<pos:position pos:line="34" pos:column="32"/></literal></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>
			<goto pos:line="35" pos:column="25">goto <name pos:line="35" pos:column="30">cleanup<pos:position pos:line="35" pos:column="37"/></name>;<pos:position pos:line="35" pos:column="38"/></goto>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>
	}<pos:position pos:line="37" pos:column="10"/></block></for>

	<comment type="block" pos:line="39" pos:column="9">/* Perform updates first so live commits remain referenced */</comment>
	<for pos:line="40" pos:column="9">for <control pos:line="40" pos:column="13">(<init><expr><name pos:line="40" pos:column="14">i<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <literal type="number" pos:line="40" pos:column="18">0<pos:position pos:line="40" pos:column="19"/></literal></expr>;<pos:position pos:line="40" pos:column="20"/></init> <condition><expr><name pos:line="40" pos:column="21">i<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">&lt;<pos:position pos:line="40" pos:column="27"/></operator> <name pos:line="40" pos:column="25">n<pos:position pos:line="40" pos:column="26"/></name></expr>;<pos:position pos:line="40" pos:column="27"/></condition> <incr><expr><name pos:line="40" pos:column="28">i<pos:position pos:line="40" pos:column="29"/></name><operator pos:line="40" pos:column="29">++<pos:position pos:line="40" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="40" pos:column="32"/></control>
		<block type="pseudo"><if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><operator pos:line="41" pos:column="21">!<pos:position pos:line="41" pos:column="22"/></operator><call><name pos:line="41" pos:column="22">is_null_sha1<pos:position pos:line="41" pos:column="34"/></name><argument_list pos:line="41" pos:column="34">(<argument><expr><name><name pos:line="41" pos:column="35">updates<pos:position pos:line="41" pos:column="42"/></name><index pos:line="41" pos:column="42">[<expr><name pos:line="41" pos:column="43">i<pos:position pos:line="41" pos:column="44"/></name></expr>]<pos:position pos:line="41" pos:column="45"/></index></name><operator pos:line="41" pos:column="45">-&gt;<pos:position pos:line="41" pos:column="50"/></operator><name pos:line="41" pos:column="47">new_sha1<pos:position pos:line="41" pos:column="55"/></name></expr></argument>)<pos:position pos:line="41" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="57"/></condition><then pos:line="41" pos:column="57"> <block pos:line="41" pos:column="58">{
			<expr_stmt><expr><name pos:line="42" pos:column="25">ret<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">=<pos:position pos:line="42" pos:column="30"/></operator> <call><name pos:line="42" pos:column="31">update_ref_write<pos:position pos:line="42" pos:column="47"/></name><argument_list pos:line="42" pos:column="47">(<argument><expr><name pos:line="42" pos:column="48">action<pos:position pos:line="42" pos:column="54"/></name></expr></argument>,
					       <argument><expr><name><name pos:line="43" pos:column="48">updates<pos:position pos:line="43" pos:column="55"/></name><index pos:line="43" pos:column="55">[<expr><name pos:line="43" pos:column="56">i<pos:position pos:line="43" pos:column="57"/></name></expr>]<pos:position pos:line="43" pos:column="58"/></index></name><operator pos:line="43" pos:column="58">-&gt;<pos:position pos:line="43" pos:column="63"/></operator><name pos:line="43" pos:column="60">ref_name<pos:position pos:line="43" pos:column="68"/></name></expr></argument>,
					       <argument><expr><name><name pos:line="44" pos:column="48">updates<pos:position pos:line="44" pos:column="55"/></name><index pos:line="44" pos:column="55">[<expr><name pos:line="44" pos:column="56">i<pos:position pos:line="44" pos:column="57"/></name></expr>]<pos:position pos:line="44" pos:column="58"/></index></name><operator pos:line="44" pos:column="58">-&gt;<pos:position pos:line="44" pos:column="63"/></operator><name pos:line="44" pos:column="60">new_sha1<pos:position pos:line="44" pos:column="68"/></name></expr></argument>,
					       <argument><expr><name><name pos:line="45" pos:column="48">locks<pos:position pos:line="45" pos:column="53"/></name><index pos:line="45" pos:column="53">[<expr><name pos:line="45" pos:column="54">i<pos:position pos:line="45" pos:column="55"/></name></expr>]<pos:position pos:line="45" pos:column="56"/></index></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="58">onerr<pos:position pos:line="45" pos:column="63"/></name></expr></argument>)<pos:position pos:line="45" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="46" pos:column="25">locks<pos:position pos:line="46" pos:column="30"/></name><index pos:line="46" pos:column="30">[<expr><name pos:line="46" pos:column="31">i<pos:position pos:line="46" pos:column="32"/></name></expr>]<pos:position pos:line="46" pos:column="33"/></index></name> <operator pos:line="46" pos:column="34">=<pos:position pos:line="46" pos:column="35"/></operator> <name pos:line="46" pos:column="36">NULL<pos:position pos:line="46" pos:column="40"/></name></expr>;<pos:position pos:line="46" pos:column="41"/></expr_stmt> <comment type="block" pos:line="46" pos:column="42">/* freed by update_ref_write */</comment>
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><name pos:line="47" pos:column="29">ret<pos:position pos:line="47" pos:column="32"/></name></expr>)<pos:position pos:line="47" pos:column="33"/></condition><then pos:line="47" pos:column="33">
				<block type="pseudo"><goto pos:line="48" pos:column="33">goto <name pos:line="48" pos:column="38">cleanup<pos:position pos:line="48" pos:column="45"/></name>;<pos:position pos:line="48" pos:column="46"/></goto></block></then></if>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if></block></for>

	<comment type="block" pos:line="51" pos:column="9">/* Perform deletes now that updates are safely completed */</comment>
	<for pos:line="52" pos:column="9">for <control pos:line="52" pos:column="13">(<init><expr><name pos:line="52" pos:column="14">i<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">=<pos:position pos:line="52" pos:column="17"/></operator> <literal type="number" pos:line="52" pos:column="18">0<pos:position pos:line="52" pos:column="19"/></literal></expr>;<pos:position pos:line="52" pos:column="20"/></init> <condition><expr><name pos:line="52" pos:column="21">i<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">&lt;<pos:position pos:line="52" pos:column="27"/></operator> <name pos:line="52" pos:column="25">n<pos:position pos:line="52" pos:column="26"/></name></expr>;<pos:position pos:line="52" pos:column="27"/></condition> <incr><expr><name pos:line="52" pos:column="28">i<pos:position pos:line="52" pos:column="29"/></name><operator pos:line="52" pos:column="29">++<pos:position pos:line="52" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="52" pos:column="32"/></control>
		<block type="pseudo"><if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name><name pos:line="53" pos:column="21">locks<pos:position pos:line="53" pos:column="26"/></name><index pos:line="53" pos:column="26">[<expr><name pos:line="53" pos:column="27">i<pos:position pos:line="53" pos:column="28"/></name></expr>]<pos:position pos:line="53" pos:column="29"/></index></name></expr>)<pos:position pos:line="53" pos:column="30"/></condition><then pos:line="53" pos:column="30"> <block pos:line="53" pos:column="31">{
			<expr_stmt><expr><name><name pos:line="54" pos:column="25">delnames<pos:position pos:line="54" pos:column="33"/></name><index pos:line="54" pos:column="33">[<expr><name pos:line="54" pos:column="34">delnum<pos:position pos:line="54" pos:column="40"/></name><operator pos:line="54" pos:column="40">++<pos:position pos:line="54" pos:column="42"/></operator></expr>]<pos:position pos:line="54" pos:column="43"/></index></name> <operator pos:line="54" pos:column="44">=<pos:position pos:line="54" pos:column="45"/></operator> <name><name pos:line="54" pos:column="46">locks<pos:position pos:line="54" pos:column="51"/></name><index pos:line="54" pos:column="51">[<expr><name pos:line="54" pos:column="52">i<pos:position pos:line="54" pos:column="53"/></name></expr>]<pos:position pos:line="54" pos:column="54"/></index></name><operator pos:line="54" pos:column="54">-&gt;<pos:position pos:line="54" pos:column="59"/></operator><name pos:line="54" pos:column="56">ref_name<pos:position pos:line="54" pos:column="64"/></name></expr>;<pos:position pos:line="54" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name pos:line="55" pos:column="25">ret<pos:position pos:line="55" pos:column="28"/></name> <operator pos:line="55" pos:column="29">|=<pos:position pos:line="55" pos:column="31"/></operator> <call><name pos:line="55" pos:column="32">delete_ref_loose<pos:position pos:line="55" pos:column="48"/></name><argument_list pos:line="55" pos:column="48">(<argument><expr><name><name pos:line="55" pos:column="49">locks<pos:position pos:line="55" pos:column="54"/></name><index pos:line="55" pos:column="54">[<expr><name pos:line="55" pos:column="55">i<pos:position pos:line="55" pos:column="56"/></name></expr>]<pos:position pos:line="55" pos:column="57"/></index></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="59">types<pos:position pos:line="55" pos:column="64"/></name><index pos:line="55" pos:column="64">[<expr><name pos:line="55" pos:column="65">i<pos:position pos:line="55" pos:column="66"/></name></expr>]<pos:position pos:line="55" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="55" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="69"/></expr_stmt>
		}<pos:position pos:line="56" pos:column="18"/></block></then></if></block></for>
	<expr_stmt><expr><name pos:line="57" pos:column="9">ret<pos:position pos:line="57" pos:column="12"/></name> <operator pos:line="57" pos:column="13">|=<pos:position pos:line="57" pos:column="15"/></operator> <call><name pos:line="57" pos:column="16">repack_without_refs<pos:position pos:line="57" pos:column="35"/></name><argument_list pos:line="57" pos:column="35">(<argument><expr><name pos:line="57" pos:column="36">delnames<pos:position pos:line="57" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="46">delnum<pos:position pos:line="57" pos:column="52"/></name></expr></argument>)<pos:position pos:line="57" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="54"/></expr_stmt>
	<for pos:line="58" pos:column="9">for <control pos:line="58" pos:column="13">(<init><expr><name pos:line="58" pos:column="14">i<pos:position pos:line="58" pos:column="15"/></name> <operator pos:line="58" pos:column="16">=<pos:position pos:line="58" pos:column="17"/></operator> <literal type="number" pos:line="58" pos:column="18">0<pos:position pos:line="58" pos:column="19"/></literal></expr>;<pos:position pos:line="58" pos:column="20"/></init> <condition><expr><name pos:line="58" pos:column="21">i<pos:position pos:line="58" pos:column="22"/></name> <operator pos:line="58" pos:column="23">&lt;<pos:position pos:line="58" pos:column="27"/></operator> <name pos:line="58" pos:column="25">delnum<pos:position pos:line="58" pos:column="31"/></name></expr>;<pos:position pos:line="58" pos:column="32"/></condition> <incr><expr><name pos:line="58" pos:column="33">i<pos:position pos:line="58" pos:column="34"/></name><operator pos:line="58" pos:column="34">++<pos:position pos:line="58" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="58" pos:column="37"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="17">unlink_or_warn<pos:position pos:line="59" pos:column="31"/></name><argument_list pos:line="59" pos:column="31">(<argument><expr><call><name pos:line="59" pos:column="32">git_path<pos:position pos:line="59" pos:column="40"/></name><argument_list pos:line="59" pos:column="40">(<argument><expr><literal type="string" pos:line="59" pos:column="41">"logs/%s"<pos:position pos:line="59" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="52">delnames<pos:position pos:line="59" pos:column="60"/></name><index pos:line="59" pos:column="60">[<expr><name pos:line="59" pos:column="61">i<pos:position pos:line="59" pos:column="62"/></name></expr>]<pos:position pos:line="59" pos:column="63"/></index></name></expr></argument>)<pos:position pos:line="59" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="66"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">clear_loose_ref_cache<pos:position pos:line="60" pos:column="30"/></name><argument_list pos:line="60" pos:column="30">(<argument><expr><operator pos:line="60" pos:column="31">&amp;<pos:position pos:line="60" pos:column="36"/></operator><name pos:line="60" pos:column="32">ref_cache<pos:position pos:line="60" pos:column="41"/></name></expr></argument>)<pos:position pos:line="60" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="43"/></expr_stmt>

<label><name pos:line="62" pos:column="1">cleanup<pos:position pos:line="62" pos:column="8"/></name>:<pos:position pos:line="62" pos:column="9"/></label>
	<for pos:line="63" pos:column="9">for <control pos:line="63" pos:column="13">(<init><expr><name pos:line="63" pos:column="14">i<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">=<pos:position pos:line="63" pos:column="17"/></operator> <literal type="number" pos:line="63" pos:column="18">0<pos:position pos:line="63" pos:column="19"/></literal></expr>;<pos:position pos:line="63" pos:column="20"/></init> <condition><expr><name pos:line="63" pos:column="21">i<pos:position pos:line="63" pos:column="22"/></name> <operator pos:line="63" pos:column="23">&lt;<pos:position pos:line="63" pos:column="27"/></operator> <name pos:line="63" pos:column="25">n<pos:position pos:line="63" pos:column="26"/></name></expr>;<pos:position pos:line="63" pos:column="27"/></condition> <incr><expr><name pos:line="63" pos:column="28">i<pos:position pos:line="63" pos:column="29"/></name><operator pos:line="63" pos:column="29">++<pos:position pos:line="63" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="63" pos:column="32"/></control>
		<block type="pseudo"><if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name><name pos:line="64" pos:column="21">locks<pos:position pos:line="64" pos:column="26"/></name><index pos:line="64" pos:column="26">[<expr><name pos:line="64" pos:column="27">i<pos:position pos:line="64" pos:column="28"/></name></expr>]<pos:position pos:line="64" pos:column="29"/></index></name></expr>)<pos:position pos:line="64" pos:column="30"/></condition><then pos:line="64" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="25">unlock_ref<pos:position pos:line="65" pos:column="35"/></name><argument_list pos:line="65" pos:column="35">(<argument><expr><name><name pos:line="65" pos:column="36">locks<pos:position pos:line="65" pos:column="41"/></name><index pos:line="65" pos:column="41">[<expr><name pos:line="65" pos:column="42">i<pos:position pos:line="65" pos:column="43"/></name></expr>]<pos:position pos:line="65" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="65" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="46"/></expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><call><name pos:line="66" pos:column="9">free<pos:position pos:line="66" pos:column="13"/></name><argument_list pos:line="66" pos:column="13">(<argument><expr><name pos:line="66" pos:column="14">updates<pos:position pos:line="66" pos:column="21"/></name></expr></argument>)<pos:position pos:line="66" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="67" pos:column="9">free<pos:position pos:line="67" pos:column="13"/></name><argument_list pos:line="67" pos:column="13">(<argument><expr><name pos:line="67" pos:column="14">types<pos:position pos:line="67" pos:column="19"/></name></expr></argument>)<pos:position pos:line="67" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="68" pos:column="9">free<pos:position pos:line="68" pos:column="13"/></name><argument_list pos:line="68" pos:column="13">(<argument><expr><name pos:line="68" pos:column="14">locks<pos:position pos:line="68" pos:column="19"/></name></expr></argument>)<pos:position pos:line="68" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="69" pos:column="9">free<pos:position pos:line="69" pos:column="13"/></name><argument_list pos:line="69" pos:column="13">(<argument><expr><name pos:line="69" pos:column="14">delnames<pos:position pos:line="69" pos:column="22"/></name></expr></argument>)<pos:position pos:line="69" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="24"/></expr_stmt>
	<return pos:line="70" pos:column="9">return <expr><name pos:line="70" pos:column="16">ret<pos:position pos:line="70" pos:column="19"/></name></expr>;<pos:position pos:line="70" pos:column="20"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
