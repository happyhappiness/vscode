<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1166_git-2.13.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">commit_match<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">commit<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">commit<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">rev_info<pos:position pos:line="1" pos:column="63"/></name></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">opt<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">retval<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">encoding<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">message<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">buf<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><name pos:line="6" pos:column="29">STRBUF_INIT<pos:position pos:line="6" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name><name pos:line="8" pos:column="14">opt<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">-&gt;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="19">grep_filter<pos:position pos:line="8" pos:column="30"/></name><operator pos:line="8" pos:column="30">.<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="31">pattern_list<pos:position pos:line="8" pos:column="43"/></name></name> <operator pos:line="8" pos:column="44">&amp;&amp;<pos:position pos:line="8" pos:column="54"/></operator> <operator pos:line="8" pos:column="47">!<pos:position pos:line="8" pos:column="48"/></operator><name><name pos:line="8" pos:column="48">opt<pos:position pos:line="8" pos:column="51"/></name><operator pos:line="8" pos:column="51">-&gt;<pos:position pos:line="8" pos:column="56"/></operator><name pos:line="8" pos:column="53">grep_filter<pos:position pos:line="8" pos:column="64"/></name><operator pos:line="8" pos:column="64">.<pos:position pos:line="8" pos:column="65"/></operator><name pos:line="8" pos:column="65">header_list<pos:position pos:line="8" pos:column="76"/></name></name></expr>)<pos:position pos:line="8" pos:column="77"/></condition><then pos:line="8" pos:column="77">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">1<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="11" pos:column="9">/* Prepend "fake" headers as needed */</comment>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">opt<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">grep_filter<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">.<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">use_reflog_filter<pos:position pos:line="12" pos:column="47"/></name></name></expr>)<pos:position pos:line="12" pos:column="48"/></condition><then pos:line="12" pos:column="48"> <block pos:line="12" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">strbuf_addstr<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><operator pos:line="13" pos:column="31">&amp;<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="32">buf<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="37">"reflog "<pos:position pos:line="13" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">get_reflog_message<pos:position pos:line="14" pos:column="35"/></name><argument_list pos:line="14" pos:column="35">(<argument><expr><operator pos:line="14" pos:column="36">&amp;<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="37">buf<pos:position pos:line="14" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="42">opt<pos:position pos:line="14" pos:column="45"/></name><operator pos:line="14" pos:column="45">-&gt;<pos:position pos:line="14" pos:column="50"/></operator><name pos:line="14" pos:column="47">reflog_info<pos:position pos:line="14" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">strbuf_addch<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><operator pos:line="15" pos:column="30">&amp;<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="31">buf<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="36">'\n'<pos:position pos:line="15" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="18" pos:column="9">/*
	 * We grep in the user's output encoding, under the assumption that it
	 * is the encoding they are most likely to write their grep pattern
	 * for. In addition, it means we will match the "notes" encoding below,
	 * so we will not end up with a buffer that has two different encodings
	 * in it.
	 */</comment>
	<expr_stmt><expr><name pos:line="25" pos:column="9">encoding<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <call><name pos:line="25" pos:column="20">get_log_output_encoding<pos:position pos:line="25" pos:column="43"/></name><argument_list pos:line="25" pos:column="43">()<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">message<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">=<pos:position pos:line="26" pos:column="18"/></operator> <call><name pos:line="26" pos:column="19">logmsg_reencode<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">commit<pos:position pos:line="26" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="43">NULL<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">encoding<pos:position pos:line="26" pos:column="57"/></name></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>

	<comment type="block" pos:line="28" pos:column="9">/* Copy the commit to temporary if we are using "fake" headers */</comment>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name><name pos:line="29" pos:column="13">buf<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">.<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="17">len<pos:position pos:line="29" pos:column="20"/></name></name></expr>)<pos:position pos:line="29" pos:column="21"/></condition><then pos:line="29" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="17">strbuf_addstr<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><operator pos:line="30" pos:column="31">&amp;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="32">buf<pos:position pos:line="30" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="37">message<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt></block></then></if>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name><name pos:line="32" pos:column="13">opt<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">-&gt;<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="18">grep_filter<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">.<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="30">header_list<pos:position pos:line="32" pos:column="41"/></name></name> <operator pos:line="32" pos:column="42">&amp;&amp;<pos:position pos:line="32" pos:column="52"/></operator> <name><name pos:line="32" pos:column="45">opt<pos:position pos:line="32" pos:column="48"/></name><operator pos:line="32" pos:column="48">-&gt;<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="50">mailmap<pos:position pos:line="32" pos:column="57"/></name></name></expr>)<pos:position pos:line="32" pos:column="58"/></condition><then pos:line="32" pos:column="58"> <block pos:line="32" pos:column="59">{
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><operator pos:line="33" pos:column="21">!<pos:position pos:line="33" pos:column="22"/></operator><name><name pos:line="33" pos:column="22">buf<pos:position pos:line="33" pos:column="25"/></name><operator pos:line="33" pos:column="25">.<pos:position pos:line="33" pos:column="26"/></operator><name pos:line="33" pos:column="26">len<pos:position pos:line="33" pos:column="29"/></name></name></expr>)<pos:position pos:line="33" pos:column="30"/></condition><then pos:line="33" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">strbuf_addstr<pos:position pos:line="34" pos:column="38"/></name><argument_list pos:line="34" pos:column="38">(<argument><expr><operator pos:line="34" pos:column="39">&amp;<pos:position pos:line="34" pos:column="44"/></operator><name pos:line="34" pos:column="40">buf<pos:position pos:line="34" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="45">message<pos:position pos:line="34" pos:column="52"/></name></expr></argument>)<pos:position pos:line="34" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="54"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="36" pos:column="17">commit_rewrite_person<pos:position pos:line="36" pos:column="38"/></name><argument_list pos:line="36" pos:column="38">(<argument><expr><operator pos:line="36" pos:column="39">&amp;<pos:position pos:line="36" pos:column="44"/></operator><name pos:line="36" pos:column="40">buf<pos:position pos:line="36" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="45">"\nauthor "<pos:position pos:line="36" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="58">opt<pos:position pos:line="36" pos:column="61"/></name><operator pos:line="36" pos:column="61">-&gt;<pos:position pos:line="36" pos:column="66"/></operator><name pos:line="36" pos:column="63">mailmap<pos:position pos:line="36" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">commit_rewrite_person<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><operator pos:line="37" pos:column="39">&amp;<pos:position pos:line="37" pos:column="44"/></operator><name pos:line="37" pos:column="40">buf<pos:position pos:line="37" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="45">"\ncommitter "<pos:position pos:line="37" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="61">opt<pos:position pos:line="37" pos:column="64"/></name><operator pos:line="37" pos:column="64">-&gt;<pos:position pos:line="37" pos:column="69"/></operator><name pos:line="37" pos:column="66">mailmap<pos:position pos:line="37" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="75"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="40" pos:column="9">/* Append "fake" message parts as needed */</comment>
	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name><name pos:line="41" pos:column="13">opt<pos:position pos:line="41" pos:column="16"/></name><operator pos:line="41" pos:column="16">-&gt;<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="18">show_notes<pos:position pos:line="41" pos:column="28"/></name></name></expr>)<pos:position pos:line="41" pos:column="29"/></condition><then pos:line="41" pos:column="29"> <block pos:line="41" pos:column="30">{
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><operator pos:line="42" pos:column="21">!<pos:position pos:line="42" pos:column="22"/></operator><name><name pos:line="42" pos:column="22">buf<pos:position pos:line="42" pos:column="25"/></name><operator pos:line="42" pos:column="25">.<pos:position pos:line="42" pos:column="26"/></operator><name pos:line="42" pos:column="26">len<pos:position pos:line="42" pos:column="29"/></name></name></expr>)<pos:position pos:line="42" pos:column="30"/></condition><then pos:line="42" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="25">strbuf_addstr<pos:position pos:line="43" pos:column="38"/></name><argument_list pos:line="43" pos:column="38">(<argument><expr><operator pos:line="43" pos:column="39">&amp;<pos:position pos:line="43" pos:column="44"/></operator><name pos:line="43" pos:column="40">buf<pos:position pos:line="43" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="45">message<pos:position pos:line="43" pos:column="52"/></name></expr></argument>)<pos:position pos:line="43" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="54"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">format_display_notes<pos:position pos:line="44" pos:column="37"/></name><argument_list pos:line="44" pos:column="37">(<argument><expr><name><name pos:line="44" pos:column="38">commit<pos:position pos:line="44" pos:column="44"/></name><operator pos:line="44" pos:column="44">-&gt;<pos:position pos:line="44" pos:column="49"/></operator><name pos:line="44" pos:column="46">object<pos:position pos:line="44" pos:column="52"/></name><operator pos:line="44" pos:column="52">.<pos:position pos:line="44" pos:column="53"/></operator><name pos:line="44" pos:column="53">oid<pos:position pos:line="44" pos:column="56"/></name><operator pos:line="44" pos:column="56">.<pos:position pos:line="44" pos:column="57"/></operator><name pos:line="44" pos:column="57">hash<pos:position pos:line="44" pos:column="61"/></name></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="63">&amp;<pos:position pos:line="44" pos:column="68"/></operator><name pos:line="44" pos:column="64">buf<pos:position pos:line="44" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="69">encoding<pos:position pos:line="44" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="79">1<pos:position pos:line="44" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="82"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="47" pos:column="9">/*
	 * Find either in the original commit message, or in the temporary.
	 * Note that we cast away the constness of "message" here. It is
	 * const because it may come from the cached commit buffer. That's OK,
	 * because we know that it is modifiable heap memory, and that while
	 * grep_buffer may modify it for speed, it will restore any
	 * changes before returning.
	 */</comment>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name><name pos:line="55" pos:column="13">buf<pos:position pos:line="55" pos:column="16"/></name><operator pos:line="55" pos:column="16">.<pos:position pos:line="55" pos:column="17"/></operator><name pos:line="55" pos:column="17">len<pos:position pos:line="55" pos:column="20"/></name></name></expr>)<pos:position pos:line="55" pos:column="21"/></condition><then pos:line="55" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="17">retval<pos:position pos:line="56" pos:column="23"/></name> <operator pos:line="56" pos:column="24">=<pos:position pos:line="56" pos:column="25"/></operator> <call><name pos:line="56" pos:column="26">grep_buffer<pos:position pos:line="56" pos:column="37"/></name><argument_list pos:line="56" pos:column="37">(<argument><expr><operator pos:line="56" pos:column="38">&amp;<pos:position pos:line="56" pos:column="43"/></operator><name><name pos:line="56" pos:column="39">opt<pos:position pos:line="56" pos:column="42"/></name><operator pos:line="56" pos:column="42">-&gt;<pos:position pos:line="56" pos:column="47"/></operator><name pos:line="56" pos:column="44">grep_filter<pos:position pos:line="56" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="57">buf<pos:position pos:line="56" pos:column="60"/></name><operator pos:line="56" pos:column="60">.<pos:position pos:line="56" pos:column="61"/></operator><name pos:line="56" pos:column="61">buf<pos:position pos:line="56" pos:column="64"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="66">buf<pos:position pos:line="56" pos:column="69"/></name><operator pos:line="56" pos:column="69">.<pos:position pos:line="56" pos:column="70"/></operator><name pos:line="56" pos:column="70">len<pos:position pos:line="56" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="75"/></expr_stmt></block></then>
	<else pos:line="57" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="17">retval<pos:position pos:line="58" pos:column="23"/></name> <operator pos:line="58" pos:column="24">=<pos:position pos:line="58" pos:column="25"/></operator> <call><name pos:line="58" pos:column="26">grep_buffer<pos:position pos:line="58" pos:column="37"/></name><argument_list pos:line="58" pos:column="37">(<argument><expr><operator pos:line="58" pos:column="38">&amp;<pos:position pos:line="58" pos:column="43"/></operator><name><name pos:line="58" pos:column="39">opt<pos:position pos:line="58" pos:column="42"/></name><operator pos:line="58" pos:column="42">-&gt;<pos:position pos:line="58" pos:column="47"/></operator><name pos:line="58" pos:column="44">grep_filter<pos:position pos:line="58" pos:column="55"/></name></name></expr></argument>,
				     <argument><expr><operator pos:line="59" pos:column="38">(<pos:position pos:line="59" pos:column="39"/></operator><name pos:line="59" pos:column="39">char<pos:position pos:line="59" pos:column="43"/></name> <operator pos:line="59" pos:column="44">*<pos:position pos:line="59" pos:column="45"/></operator><operator pos:line="59" pos:column="45">)<pos:position pos:line="59" pos:column="46"/></operator><name pos:line="59" pos:column="46">message<pos:position pos:line="59" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="59" pos:column="55">strlen<pos:position pos:line="59" pos:column="61"/></name><argument_list pos:line="59" pos:column="61">(<argument><expr><name pos:line="59" pos:column="62">message<pos:position pos:line="59" pos:column="69"/></name></expr></argument>)<pos:position pos:line="59" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="72"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">strbuf_release<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">(<argument><expr><operator pos:line="60" pos:column="24">&amp;<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="25">buf<pos:position pos:line="60" pos:column="28"/></name></expr></argument>)<pos:position pos:line="60" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">unuse_commit_buffer<pos:position pos:line="61" pos:column="28"/></name><argument_list pos:line="61" pos:column="28">(<argument><expr><name pos:line="61" pos:column="29">commit<pos:position pos:line="61" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="37">message<pos:position pos:line="61" pos:column="44"/></name></expr></argument>)<pos:position pos:line="61" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="46"/></expr_stmt>
	<return pos:line="62" pos:column="9">return <expr><ternary><condition><expr><name><name pos:line="62" pos:column="16">opt<pos:position pos:line="62" pos:column="19"/></name><operator pos:line="62" pos:column="19">-&gt;<pos:position pos:line="62" pos:column="24"/></operator><name pos:line="62" pos:column="21">invert_grep<pos:position pos:line="62" pos:column="32"/></name></name></expr> ?<pos:position pos:line="62" pos:column="34"/></condition><then pos:line="62" pos:column="34"> <expr><operator pos:line="62" pos:column="35">!<pos:position pos:line="62" pos:column="36"/></operator><name pos:line="62" pos:column="36">retval<pos:position pos:line="62" pos:column="42"/></name></expr> <pos:position pos:line="62" pos:column="43"/></then><else pos:line="62" pos:column="43">: <expr><name pos:line="62" pos:column="45">retval<pos:position pos:line="62" pos:column="51"/></name></expr></else></ternary></expr>;<pos:position pos:line="62" pos:column="52"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
