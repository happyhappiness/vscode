<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_143.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">parse_ls<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">branch<pos:position pos:line="1" pos:column="35"/></name></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">b<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">p<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">tree_entry<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">root<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><name pos:line="4" pos:column="35">NULL<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">tree_entry<pos:position pos:line="5" pos:column="26"/></name></name></type> <name pos:line="5" pos:column="27">leaf<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><block pos:line="5" pos:column="34">{<expr><name pos:line="5" pos:column="35">NULL<pos:position pos:line="5" pos:column="39"/></name></expr>}<pos:position pos:line="5" pos:column="40"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* ls SP (&lt;tree-ish&gt; SP)? &lt;path&gt; */</comment>
	<expr_stmt><expr><name pos:line="8" pos:column="9">p<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <name><name pos:line="8" pos:column="13">command_buf<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">.<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">buf<pos:position pos:line="8" pos:column="28"/></name></name> <operator pos:line="8" pos:column="29">+<pos:position pos:line="8" pos:column="30"/></operator> <call><name pos:line="8" pos:column="31">strlen<pos:position pos:line="8" pos:column="37"/></name><argument_list pos:line="8" pos:column="37">(<argument><expr><literal type="string" pos:line="8" pos:column="38">"ls "<pos:position pos:line="8" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">*<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">p<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">==<pos:position pos:line="9" pos:column="18"/></operator> <literal type="char" pos:line="9" pos:column="19">'"'<pos:position pos:line="9" pos:column="22"/></literal></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23"> <block pos:line="9" pos:column="24">{
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">b<pos:position pos:line="10" pos:column="23"/></name></expr>)<pos:position pos:line="10" pos:column="24"/></condition><then pos:line="10" pos:column="24">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="25">die<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><literal type="string" pos:line="11" pos:column="29">"Not in a commit: %s"<pos:position pos:line="11" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="52">command_buf<pos:position pos:line="11" pos:column="63"/></name><operator pos:line="11" pos:column="63">.<pos:position pos:line="11" pos:column="64"/></operator><name pos:line="11" pos:column="64">buf<pos:position pos:line="11" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="69"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="12" pos:column="17">root<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <operator pos:line="12" pos:column="24">&amp;<pos:position pos:line="12" pos:column="29"/></operator><name><name pos:line="12" pos:column="25">b<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">-&gt;<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="28">branch_tree<pos:position pos:line="12" pos:column="39"/></name></name></expr>;<pos:position pos:line="12" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then> <else pos:line="13" pos:column="11">else <block pos:line="13" pos:column="16">{
		<decl_stmt><decl><type><name><name pos:line="14" pos:column="17">struct<pos:position pos:line="14" pos:column="23"/></name> <name pos:line="14" pos:column="24">object_entry<pos:position pos:line="14" pos:column="36"/></name></name> <modifier pos:line="14" pos:column="37">*<pos:position pos:line="14" pos:column="38"/></modifier></type><name pos:line="14" pos:column="38">e<pos:position pos:line="14" pos:column="39"/></name> <init pos:line="14" pos:column="40">= <expr><call><name pos:line="14" pos:column="42">parse_treeish_dataref<pos:position pos:line="14" pos:column="63"/></name><argument_list pos:line="14" pos:column="63">(<argument><expr><operator pos:line="14" pos:column="64">&amp;<pos:position pos:line="14" pos:column="69"/></operator><name pos:line="14" pos:column="65">p<pos:position pos:line="14" pos:column="66"/></name></expr></argument>)<pos:position pos:line="14" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="68"/></decl_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">root<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">=<pos:position pos:line="15" pos:column="23"/></operator> <call><name pos:line="15" pos:column="24">new_tree_entry<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">()<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">hashcpy<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name><name pos:line="16" pos:column="25">root<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">-&gt;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="31">versions<pos:position pos:line="16" pos:column="39"/></name><index pos:line="16" pos:column="39">[<expr><literal type="number" pos:line="16" pos:column="40">1<pos:position pos:line="16" pos:column="41"/></literal></expr>]<pos:position pos:line="16" pos:column="42"/></index></name><operator pos:line="16" pos:column="42">.<pos:position pos:line="16" pos:column="43"/></operator><name pos:line="16" pos:column="43">sha1<pos:position pos:line="16" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="49">e<pos:position pos:line="16" pos:column="50"/></name><operator pos:line="16" pos:column="50">-&gt;<pos:position pos:line="16" pos:column="55"/></operator><name pos:line="16" pos:column="52">idx<pos:position pos:line="16" pos:column="55"/></name><operator pos:line="16" pos:column="55">.<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="56">sha1<pos:position pos:line="16" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><call><name pos:line="17" pos:column="22">is_null_sha1<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><name><name pos:line="17" pos:column="35">root<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">-&gt;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="41">versions<pos:position pos:line="17" pos:column="49"/></name><index pos:line="17" pos:column="49">[<expr><literal type="number" pos:line="17" pos:column="50">1<pos:position pos:line="17" pos:column="51"/></literal></expr>]<pos:position pos:line="17" pos:column="52"/></index></name><operator pos:line="17" pos:column="52">.<pos:position pos:line="17" pos:column="53"/></operator><name pos:line="17" pos:column="53">sha1<pos:position pos:line="17" pos:column="57"/></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="59"/></condition><then pos:line="17" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="25">root<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">versions<pos:position pos:line="18" pos:column="39"/></name><index pos:line="18" pos:column="39">[<expr><literal type="number" pos:line="18" pos:column="40">1<pos:position pos:line="18" pos:column="41"/></literal></expr>]<pos:position pos:line="18" pos:column="42"/></index></name><operator pos:line="18" pos:column="42">.<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="43">mode<pos:position pos:line="18" pos:column="47"/></name> <operator pos:line="18" pos:column="48">=<pos:position pos:line="18" pos:column="49"/></operator> <name pos:line="18" pos:column="50">S_IFDIR<pos:position pos:line="18" pos:column="57"/></name></expr>;<pos:position pos:line="18" pos:column="58"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">load_tree<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">root<pos:position pos:line="19" pos:column="31"/></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">*<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">p<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">++<pos:position pos:line="20" pos:column="25"/></operator> <operator pos:line="20" pos:column="26">!=<pos:position pos:line="20" pos:column="28"/></operator> <literal type="char" pos:line="20" pos:column="29">' '<pos:position pos:line="20" pos:column="32"/></literal></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">die<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><literal type="string" pos:line="21" pos:column="29">"Missing space after tree-ish: %s"<pos:position pos:line="21" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="65">command_buf<pos:position pos:line="21" pos:column="76"/></name><operator pos:line="21" pos:column="76">.<pos:position pos:line="21" pos:column="77"/></operator><name pos:line="21" pos:column="77">buf<pos:position pos:line="21" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="82"/></expr_stmt></block></then></if>
	}<pos:position pos:line="22" pos:column="10"/></block></else></if>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">*<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">p<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">==<pos:position pos:line="23" pos:column="18"/></operator> <literal type="char" pos:line="23" pos:column="19">'"'<pos:position pos:line="23" pos:column="22"/></literal></expr>)<pos:position pos:line="23" pos:column="23"/></condition><then pos:line="23" pos:column="23"> <block pos:line="23" pos:column="24">{
		<decl_stmt><decl><specifier pos:line="24" pos:column="17">static<pos:position pos:line="24" pos:column="23"/></specifier> <type><name><name pos:line="24" pos:column="24">struct<pos:position pos:line="24" pos:column="30"/></name> <name pos:line="24" pos:column="31">strbuf<pos:position pos:line="24" pos:column="37"/></name></name></type> <name pos:line="24" pos:column="38">uq<pos:position pos:line="24" pos:column="40"/></name> <init pos:line="24" pos:column="41">= <expr><name pos:line="24" pos:column="43">STRBUF_INIT<pos:position pos:line="24" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="55"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="25" pos:column="17">const<pos:position pos:line="25" pos:column="22"/></specifier> <name pos:line="25" pos:column="23">char<pos:position pos:line="25" pos:column="27"/></name> <modifier pos:line="25" pos:column="28">*<pos:position pos:line="25" pos:column="29"/></modifier></type><name pos:line="25" pos:column="29">endp<pos:position pos:line="25" pos:column="33"/></name></decl>;<pos:position pos:line="25" pos:column="34"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">strbuf_reset<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><operator pos:line="26" pos:column="30">&amp;<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="31">uq<pos:position pos:line="26" pos:column="33"/></name></expr></argument>)<pos:position pos:line="26" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">unquote_c_style<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><operator pos:line="27" pos:column="37">&amp;<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="38">uq<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="42">p<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="45">&amp;<pos:position pos:line="27" pos:column="50"/></operator><name pos:line="27" pos:column="46">endp<pos:position pos:line="27" pos:column="50"/></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="52"/></condition><then pos:line="27" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">die<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><literal type="string" pos:line="28" pos:column="29">"Invalid path: %s"<pos:position pos:line="28" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="49">command_buf<pos:position pos:line="28" pos:column="60"/></name><operator pos:line="28" pos:column="60">.<pos:position pos:line="28" pos:column="61"/></operator><name pos:line="28" pos:column="61">buf<pos:position pos:line="28" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt></block></then></if>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">*<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">endp<pos:position pos:line="29" pos:column="26"/></name></expr>)<pos:position pos:line="29" pos:column="27"/></condition><then pos:line="29" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="25">die<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><literal type="string" pos:line="30" pos:column="29">"Garbage after path in: %s"<pos:position pos:line="30" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="58">command_buf<pos:position pos:line="30" pos:column="69"/></name><operator pos:line="30" pos:column="69">.<pos:position pos:line="30" pos:column="70"/></operator><name pos:line="30" pos:column="70">buf<pos:position pos:line="30" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="75"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="31" pos:column="17">p<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <name><name pos:line="31" pos:column="21">uq<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">.<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="24">buf<pos:position pos:line="31" pos:column="27"/></name></name></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">tree_content_get<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">root<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="32">p<pos:position pos:line="33" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="35">&amp;<pos:position pos:line="33" pos:column="40"/></operator><name pos:line="33" pos:column="36">leaf<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="42">1<pos:position pos:line="33" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>
	<comment type="block" pos:line="34" pos:column="9">/*
	 * A directory in preparation would have a sha1 of zero
	 * until it is saved.  Save, for simplicity.
	 */</comment>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">S_ISDIR<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><name><name pos:line="38" pos:column="21">leaf<pos:position pos:line="38" pos:column="25"/></name><operator pos:line="38" pos:column="25">.<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="26">versions<pos:position pos:line="38" pos:column="34"/></name><index pos:line="38" pos:column="34">[<expr><literal type="number" pos:line="38" pos:column="35">1<pos:position pos:line="38" pos:column="36"/></literal></expr>]<pos:position pos:line="38" pos:column="37"/></index></name><operator pos:line="38" pos:column="37">.<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="38">mode<pos:position pos:line="38" pos:column="42"/></name></expr></argument>)<pos:position pos:line="38" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="44"/></condition><then pos:line="38" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="17">store_tree<pos:position pos:line="39" pos:column="27"/></name><argument_list pos:line="39" pos:column="27">(<argument><expr><operator pos:line="39" pos:column="28">&amp;<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="29">leaf<pos:position pos:line="39" pos:column="33"/></name></expr></argument>)<pos:position pos:line="39" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="35"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="41" pos:column="9">print_ls<pos:position pos:line="41" pos:column="17"/></name><argument_list pos:line="41" pos:column="17">(<argument><expr><name><name pos:line="41" pos:column="18">leaf<pos:position pos:line="41" pos:column="22"/></name><operator pos:line="41" pos:column="22">.<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">versions<pos:position pos:line="41" pos:column="31"/></name><index pos:line="41" pos:column="31">[<expr><literal type="number" pos:line="41" pos:column="32">1<pos:position pos:line="41" pos:column="33"/></literal></expr>]<pos:position pos:line="41" pos:column="34"/></index></name><operator pos:line="41" pos:column="34">.<pos:position pos:line="41" pos:column="35"/></operator><name pos:line="41" pos:column="35">mode<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="41">leaf<pos:position pos:line="41" pos:column="45"/></name><operator pos:line="41" pos:column="45">.<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="46">versions<pos:position pos:line="41" pos:column="54"/></name><index pos:line="41" pos:column="54">[<expr><literal type="number" pos:line="41" pos:column="55">1<pos:position pos:line="41" pos:column="56"/></literal></expr>]<pos:position pos:line="41" pos:column="57"/></index></name><operator pos:line="41" pos:column="57">.<pos:position pos:line="41" pos:column="58"/></operator><name pos:line="41" pos:column="58">sha1<pos:position pos:line="41" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="64">p<pos:position pos:line="41" pos:column="65"/></name></expr></argument>)<pos:position pos:line="41" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="67"/></expr_stmt>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name><name pos:line="42" pos:column="13">leaf<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">.<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">tree<pos:position pos:line="42" pos:column="22"/></name></name></expr>)<pos:position pos:line="42" pos:column="23"/></condition><then pos:line="42" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="17">release_tree_content_recursive<pos:position pos:line="43" pos:column="47"/></name><argument_list pos:line="43" pos:column="47">(<argument><expr><name><name pos:line="43" pos:column="48">leaf<pos:position pos:line="43" pos:column="52"/></name><operator pos:line="43" pos:column="52">.<pos:position pos:line="43" pos:column="53"/></operator><name pos:line="43" pos:column="53">tree<pos:position pos:line="43" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="59"/></expr_stmt></block></then></if>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">b<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">||<pos:position pos:line="44" pos:column="18"/></operator> <name pos:line="44" pos:column="19">root<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">!=<pos:position pos:line="44" pos:column="26"/></operator> <operator pos:line="44" pos:column="27">&amp;<pos:position pos:line="44" pos:column="32"/></operator><name><name pos:line="44" pos:column="28">b<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">-&gt;<pos:position pos:line="44" pos:column="34"/></operator><name pos:line="44" pos:column="31">branch_tree<pos:position pos:line="44" pos:column="42"/></name></name></expr>)<pos:position pos:line="44" pos:column="43"/></condition><then pos:line="44" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="17">release_tree_entry<pos:position pos:line="45" pos:column="35"/></name><argument_list pos:line="45" pos:column="35">(<argument><expr><name pos:line="45" pos:column="36">root<pos:position pos:line="45" pos:column="40"/></name></expr></argument>)<pos:position pos:line="45" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="42"/></expr_stmt></block></then></if>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
