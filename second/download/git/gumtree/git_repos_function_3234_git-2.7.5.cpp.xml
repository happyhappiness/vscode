<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3234_git-2.7.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">graph_output_post_merge_line<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">git_graph<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">graph<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="67">struct<pos:position pos:line="1" pos:column="73"/></name> <name pos:line="1" pos:column="74">strbuf<pos:position pos:line="1" pos:column="80"/></name></name> <modifier pos:line="1" pos:column="81">*<pos:position pos:line="1" pos:column="82"/></modifier></type><name pos:line="1" pos:column="82">sb<pos:position pos:line="1" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="85"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">seen_this<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><literal type="number" pos:line="3" pos:column="25">0<pos:position pos:line="3" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">j<pos:position pos:line="4" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="19">chars_written<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * Output the post-merge row
	 */</comment>
	<expr_stmt><expr><name pos:line="9" pos:column="9">chars_written<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">=<pos:position pos:line="9" pos:column="24"/></operator> <literal type="number" pos:line="9" pos:column="25">0<pos:position pos:line="9" pos:column="26"/></literal></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt>
	<for pos:line="10" pos:column="9">for <control pos:line="10" pos:column="13">(<init><expr><name pos:line="10" pos:column="14">i<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <literal type="number" pos:line="10" pos:column="18">0<pos:position pos:line="10" pos:column="19"/></literal></expr>;<pos:position pos:line="10" pos:column="20"/></init> <condition><expr><name pos:line="10" pos:column="21">i<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">&lt;=<pos:position pos:line="10" pos:column="28"/></operator> <name><name pos:line="10" pos:column="26">graph<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">num_columns<pos:position pos:line="10" pos:column="44"/></name></name></expr>;<pos:position pos:line="10" pos:column="45"/></condition> <incr><expr><name pos:line="10" pos:column="46">i<pos:position pos:line="10" pos:column="47"/></name><operator pos:line="10" pos:column="47">++<pos:position pos:line="10" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="10" pos:column="50"/></control> <block pos:line="10" pos:column="51">{
		<decl_stmt><decl><type><name><name pos:line="11" pos:column="17">struct<pos:position pos:line="11" pos:column="23"/></name> <name pos:line="11" pos:column="24">column<pos:position pos:line="11" pos:column="30"/></name></name> <modifier pos:line="11" pos:column="31">*<pos:position pos:line="11" pos:column="32"/></modifier></type><name pos:line="11" pos:column="32">col<pos:position pos:line="11" pos:column="35"/></name> <init pos:line="11" pos:column="36">= <expr><operator pos:line="11" pos:column="38">&amp;<pos:position pos:line="11" pos:column="43"/></operator><name><name pos:line="11" pos:column="39">graph<pos:position pos:line="11" pos:column="44"/></name><operator pos:line="11" pos:column="44">-&gt;<pos:position pos:line="11" pos:column="49"/></operator><name pos:line="11" pos:column="46">columns<pos:position pos:line="11" pos:column="53"/></name><index pos:line="11" pos:column="53">[<expr><name pos:line="11" pos:column="54">i<pos:position pos:line="11" pos:column="55"/></name></expr>]<pos:position pos:line="11" pos:column="56"/></index></name></expr></init></decl>;<pos:position pos:line="11" pos:column="57"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">struct<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">commit<pos:position pos:line="12" pos:column="30"/></name></name> <modifier pos:line="12" pos:column="31">*<pos:position pos:line="12" pos:column="32"/></modifier></type><name pos:line="12" pos:column="32">col_commit<pos:position pos:line="12" pos:column="42"/></name></decl>;<pos:position pos:line="12" pos:column="43"/></decl_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">i<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">==<pos:position pos:line="13" pos:column="25"/></operator> <name><name pos:line="13" pos:column="26">graph<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">-&gt;<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="33">num_columns<pos:position pos:line="13" pos:column="44"/></name></name></expr>)<pos:position pos:line="13" pos:column="45"/></condition><then pos:line="13" pos:column="45"> <block pos:line="13" pos:column="46">{
			<if pos:line="14" pos:column="25">if <condition pos:line="14" pos:column="28">(<expr><name pos:line="14" pos:column="29">seen_this<pos:position pos:line="14" pos:column="38"/></name></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39">
				<block type="pseudo"><break pos:line="15" pos:column="33">break;<pos:position pos:line="15" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="16" pos:column="25">col_commit<pos:position pos:line="16" pos:column="35"/></name> <operator pos:line="16" pos:column="36">=<pos:position pos:line="16" pos:column="37"/></operator> <name><name pos:line="16" pos:column="38">graph<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">-&gt;<pos:position pos:line="16" pos:column="48"/></operator><name pos:line="16" pos:column="45">commit<pos:position pos:line="16" pos:column="51"/></name></name></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></then> <else pos:line="17" pos:column="19">else <block pos:line="17" pos:column="24">{
			<expr_stmt><expr><name pos:line="18" pos:column="25">col_commit<pos:position pos:line="18" pos:column="35"/></name> <operator pos:line="18" pos:column="36">=<pos:position pos:line="18" pos:column="37"/></operator> <name><name pos:line="18" pos:column="38">col<pos:position pos:line="18" pos:column="41"/></name><operator pos:line="18" pos:column="41">-&gt;<pos:position pos:line="18" pos:column="46"/></operator><name pos:line="18" pos:column="43">commit<pos:position pos:line="18" pos:column="49"/></name></name></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="19" pos:column="18"/></block></else></if>

		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">col_commit<pos:position pos:line="21" pos:column="31"/></name> <operator pos:line="21" pos:column="32">==<pos:position pos:line="21" pos:column="34"/></operator> <name><name pos:line="21" pos:column="35">graph<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">-&gt;<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="42">commit<pos:position pos:line="21" pos:column="48"/></name></name></expr>)<pos:position pos:line="21" pos:column="49"/></condition><then pos:line="21" pos:column="49"> <block pos:line="21" pos:column="50">{
			<comment type="block" pos:line="22" pos:column="25">/*
			 * Since the current commit is a merge find
			 * the columns for the parent commits in
			 * new_columns and use those to format the
			 * edges.
			 */</comment>
			<decl_stmt><decl><type><name><name pos:line="28" pos:column="25">struct<pos:position pos:line="28" pos:column="31"/></name> <name pos:line="28" pos:column="32">commit_list<pos:position pos:line="28" pos:column="43"/></name></name> <modifier pos:line="28" pos:column="44">*<pos:position pos:line="28" pos:column="45"/></modifier></type><name pos:line="28" pos:column="45">parents<pos:position pos:line="28" pos:column="52"/></name> <init pos:line="28" pos:column="53">= <expr><name pos:line="28" pos:column="55">NULL<pos:position pos:line="28" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="60"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="29" pos:column="25">struct<pos:position pos:line="29" pos:column="31"/></name> <name pos:line="29" pos:column="32">column<pos:position pos:line="29" pos:column="38"/></name></name> <modifier pos:line="29" pos:column="39">*<pos:position pos:line="29" pos:column="40"/></modifier></type><name pos:line="29" pos:column="40">par_column<pos:position pos:line="29" pos:column="50"/></name></decl>;<pos:position pos:line="29" pos:column="51"/></decl_stmt>
			<expr_stmt><expr><name pos:line="30" pos:column="25">seen_this<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">=<pos:position pos:line="30" pos:column="36"/></operator> <literal type="number" pos:line="30" pos:column="37">1<pos:position pos:line="30" pos:column="38"/></literal></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="31" pos:column="25">parents<pos:position pos:line="31" pos:column="32"/></name> <operator pos:line="31" pos:column="33">=<pos:position pos:line="31" pos:column="34"/></operator> <call><name pos:line="31" pos:column="35">first_interesting_parent<pos:position pos:line="31" pos:column="59"/></name><argument_list pos:line="31" pos:column="59">(<argument><expr><name pos:line="31" pos:column="60">graph<pos:position pos:line="31" pos:column="65"/></name></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">assert<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><name pos:line="32" pos:column="32">parents<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">par_column<pos:position pos:line="33" pos:column="35"/></name> <operator pos:line="33" pos:column="36">=<pos:position pos:line="33" pos:column="37"/></operator> <call><name pos:line="33" pos:column="38">find_new_column_by_commit<pos:position pos:line="33" pos:column="63"/></name><argument_list pos:line="33" pos:column="63">(<argument><expr><name pos:line="33" pos:column="64">graph<pos:position pos:line="33" pos:column="69"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="71">parents<pos:position pos:line="33" pos:column="78"/></name><operator pos:line="33" pos:column="78">-&gt;<pos:position pos:line="33" pos:column="83"/></operator><name pos:line="33" pos:column="80">item<pos:position pos:line="33" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="86"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">assert<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><name pos:line="34" pos:column="32">par_column<pos:position pos:line="34" pos:column="42"/></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="36" pos:column="25">strbuf_write_column<pos:position pos:line="36" pos:column="44"/></name><argument_list pos:line="36" pos:column="44">(<argument><expr><name pos:line="36" pos:column="45">sb<pos:position pos:line="36" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">par_column<pos:position pos:line="36" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="36" pos:column="61">'|'<pos:position pos:line="36" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><name pos:line="37" pos:column="25">chars_written<pos:position pos:line="37" pos:column="38"/></name><operator pos:line="37" pos:column="38">++<pos:position pos:line="37" pos:column="40"/></operator></expr>;<pos:position pos:line="37" pos:column="41"/></expr_stmt>
			<for pos:line="38" pos:column="25">for <control pos:line="38" pos:column="29">(<init><expr><name pos:line="38" pos:column="30">j<pos:position pos:line="38" pos:column="31"/></name> <operator pos:line="38" pos:column="32">=<pos:position pos:line="38" pos:column="33"/></operator> <literal type="number" pos:line="38" pos:column="34">0<pos:position pos:line="38" pos:column="35"/></literal></expr>;<pos:position pos:line="38" pos:column="36"/></init> <condition><expr><name pos:line="38" pos:column="37">j<pos:position pos:line="38" pos:column="38"/></name> <operator pos:line="38" pos:column="39">&lt;<pos:position pos:line="38" pos:column="43"/></operator> <name><name pos:line="38" pos:column="41">graph<pos:position pos:line="38" pos:column="46"/></name><operator pos:line="38" pos:column="46">-&gt;<pos:position pos:line="38" pos:column="51"/></operator><name pos:line="38" pos:column="48">num_parents<pos:position pos:line="38" pos:column="59"/></name></name> <operator pos:line="38" pos:column="60">-<pos:position pos:line="38" pos:column="61"/></operator> <literal type="number" pos:line="38" pos:column="62">1<pos:position pos:line="38" pos:column="63"/></literal></expr>;<pos:position pos:line="38" pos:column="64"/></condition> <incr><expr><name pos:line="38" pos:column="65">j<pos:position pos:line="38" pos:column="66"/></name><operator pos:line="38" pos:column="66">++<pos:position pos:line="38" pos:column="68"/></operator></expr></incr>)<pos:position pos:line="38" pos:column="69"/></control> <block pos:line="38" pos:column="70">{
				<expr_stmt><expr><name pos:line="39" pos:column="33">parents<pos:position pos:line="39" pos:column="40"/></name> <operator pos:line="39" pos:column="41">=<pos:position pos:line="39" pos:column="42"/></operator> <call><name pos:line="39" pos:column="43">next_interesting_parent<pos:position pos:line="39" pos:column="66"/></name><argument_list pos:line="39" pos:column="66">(<argument><expr><name pos:line="39" pos:column="67">graph<pos:position pos:line="39" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="74">parents<pos:position pos:line="39" pos:column="81"/></name></expr></argument>)<pos:position pos:line="39" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="83"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="40" pos:column="33">assert<pos:position pos:line="40" pos:column="39"/></name><argument_list pos:line="40" pos:column="39">(<argument><expr><name pos:line="40" pos:column="40">parents<pos:position pos:line="40" pos:column="47"/></name></expr></argument>)<pos:position pos:line="40" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="49"/></expr_stmt>
				<expr_stmt><expr><name pos:line="41" pos:column="33">par_column<pos:position pos:line="41" pos:column="43"/></name> <operator pos:line="41" pos:column="44">=<pos:position pos:line="41" pos:column="45"/></operator> <call><name pos:line="41" pos:column="46">find_new_column_by_commit<pos:position pos:line="41" pos:column="71"/></name><argument_list pos:line="41" pos:column="71">(<argument><expr><name pos:line="41" pos:column="72">graph<pos:position pos:line="41" pos:column="77"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="79">parents<pos:position pos:line="41" pos:column="86"/></name><operator pos:line="41" pos:column="86">-&gt;<pos:position pos:line="41" pos:column="91"/></operator><name pos:line="41" pos:column="88">item<pos:position pos:line="41" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="94"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="42" pos:column="33">assert<pos:position pos:line="42" pos:column="39"/></name><argument_list pos:line="42" pos:column="39">(<argument><expr><name pos:line="42" pos:column="40">par_column<pos:position pos:line="42" pos:column="50"/></name></expr></argument>)<pos:position pos:line="42" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="52"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="43" pos:column="33">strbuf_write_column<pos:position pos:line="43" pos:column="52"/></name><argument_list pos:line="43" pos:column="52">(<argument><expr><name pos:line="43" pos:column="53">sb<pos:position pos:line="43" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="57">par_column<pos:position pos:line="43" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="43" pos:column="69">'\\'<pos:position pos:line="43" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="44" pos:column="33">strbuf_addch<pos:position pos:line="44" pos:column="45"/></name><argument_list pos:line="44" pos:column="45">(<argument><expr><name pos:line="44" pos:column="46">sb<pos:position pos:line="44" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="44" pos:column="50">' '<pos:position pos:line="44" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="55"/></expr_stmt>
			}<pos:position pos:line="45" pos:column="26"/></block></for>
			<expr_stmt><expr><name pos:line="46" pos:column="25">chars_written<pos:position pos:line="46" pos:column="38"/></name> <operator pos:line="46" pos:column="39">+=<pos:position pos:line="46" pos:column="41"/></operator> <name pos:line="46" pos:column="42">j<pos:position pos:line="46" pos:column="43"/></name> <operator pos:line="46" pos:column="44">*<pos:position pos:line="46" pos:column="45"/></operator> <literal type="number" pos:line="46" pos:column="46">2<pos:position pos:line="46" pos:column="47"/></literal></expr>;<pos:position pos:line="46" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="47" pos:column="18"/></block></then> <elseif pos:line="47" pos:column="19">else <if pos:line="47" pos:column="24">if <condition pos:line="47" pos:column="27">(<expr><name pos:line="47" pos:column="28">seen_this<pos:position pos:line="47" pos:column="37"/></name></expr>)<pos:position pos:line="47" pos:column="38"/></condition><then pos:line="47" pos:column="38"> <block pos:line="47" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">strbuf_write_column<pos:position pos:line="48" pos:column="44"/></name><argument_list pos:line="48" pos:column="44">(<argument><expr><name pos:line="48" pos:column="45">sb<pos:position pos:line="48" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="49">col<pos:position pos:line="48" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="48" pos:column="54">'\\'<pos:position pos:line="48" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="49" pos:column="25">strbuf_addch<pos:position pos:line="49" pos:column="37"/></name><argument_list pos:line="49" pos:column="37">(<argument><expr><name pos:line="49" pos:column="38">sb<pos:position pos:line="49" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="49" pos:column="42">' '<pos:position pos:line="49" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="50" pos:column="25">chars_written<pos:position pos:line="50" pos:column="38"/></name> <operator pos:line="50" pos:column="39">+=<pos:position pos:line="50" pos:column="41"/></operator> <literal type="number" pos:line="50" pos:column="42">2<pos:position pos:line="50" pos:column="43"/></literal></expr>;<pos:position pos:line="50" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="51" pos:column="18"/></block></then></if></elseif> <else pos:line="51" pos:column="19">else <block pos:line="51" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="52" pos:column="25">strbuf_write_column<pos:position pos:line="52" pos:column="44"/></name><argument_list pos:line="52" pos:column="44">(<argument><expr><name pos:line="52" pos:column="45">sb<pos:position pos:line="52" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="49">col<pos:position pos:line="52" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="52" pos:column="54">'|'<pos:position pos:line="52" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="53" pos:column="25">strbuf_addch<pos:position pos:line="53" pos:column="37"/></name><argument_list pos:line="53" pos:column="37">(<argument><expr><name pos:line="53" pos:column="38">sb<pos:position pos:line="53" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="53" pos:column="42">' '<pos:position pos:line="53" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="54" pos:column="25">chars_written<pos:position pos:line="54" pos:column="38"/></name> <operator pos:line="54" pos:column="39">+=<pos:position pos:line="54" pos:column="41"/></operator> <literal type="number" pos:line="54" pos:column="42">2<pos:position pos:line="54" pos:column="43"/></literal></expr>;<pos:position pos:line="54" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="55" pos:column="18"/></block></else></if>
	}<pos:position pos:line="56" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="58" pos:column="9">graph_pad_horizontally<pos:position pos:line="58" pos:column="31"/></name><argument_list pos:line="58" pos:column="31">(<argument><expr><name pos:line="58" pos:column="32">graph<pos:position pos:line="58" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="39">sb<pos:position pos:line="58" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="43">chars_written<pos:position pos:line="58" pos:column="56"/></name></expr></argument>)<pos:position pos:line="58" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="58"/></expr_stmt>

	<comment type="block" pos:line="60" pos:column="9">/*
	 * Update graph-&gt;state
	 */</comment>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><call><name pos:line="63" pos:column="13">graph_is_mapping_correct<pos:position pos:line="63" pos:column="37"/></name><argument_list pos:line="63" pos:column="37">(<argument><expr><name pos:line="63" pos:column="38">graph<pos:position pos:line="63" pos:column="43"/></name></expr></argument>)<pos:position pos:line="63" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="45"/></condition><then pos:line="63" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="17">graph_update_state<pos:position pos:line="64" pos:column="35"/></name><argument_list pos:line="64" pos:column="35">(<argument><expr><name pos:line="64" pos:column="36">graph<pos:position pos:line="64" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="43">GRAPH_PADDING<pos:position pos:line="64" pos:column="56"/></name></expr></argument>)<pos:position pos:line="64" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="58"/></expr_stmt></block></then>
	<else pos:line="65" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="17">graph_update_state<pos:position pos:line="66" pos:column="35"/></name><argument_list pos:line="66" pos:column="35">(<argument><expr><name pos:line="66" pos:column="36">graph<pos:position pos:line="66" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="43">GRAPH_COLLAPSING<pos:position pos:line="66" pos:column="59"/></name></expr></argument>)<pos:position pos:line="66" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="61"/></expr_stmt></block></else></if>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
