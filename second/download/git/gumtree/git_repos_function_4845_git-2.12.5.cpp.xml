<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4845_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">commit<pos:position pos:line="1" pos:column="21"/></name></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">fake_working_tree_commit<pos:position pos:line="1" pos:column="47"/></name><parameter_list pos:line="1" pos:column="47">(<parameter><decl><type><name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">diff_options<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">opt<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
					       <parameter><decl><type><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <name pos:line="2" pos:column="54">char<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">path<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
					       <parameter><decl><type><specifier pos:line="3" pos:column="48">const<pos:position pos:line="3" pos:column="53"/></specifier> <name pos:line="3" pos:column="54">char<pos:position pos:line="3" pos:column="58"/></name> <modifier pos:line="3" pos:column="59">*<pos:position pos:line="3" pos:column="60"/></modifier></type><name pos:line="3" pos:column="60">contents_from<pos:position pos:line="3" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="74"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">commit<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">commit<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">origin<pos:position pos:line="6" pos:column="22"/></name></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">origin<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">commit_list<pos:position pos:line="7" pos:column="27"/></name></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier><modifier pos:line="7" pos:column="29">*<pos:position pos:line="7" pos:column="30"/></modifier></type><name pos:line="7" pos:column="30">parent_tail<pos:position pos:line="7" pos:column="41"/></name></decl>, <modifier pos:line="7" pos:column="43">*<pos:position pos:line="7" pos:column="44"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="44">parent<pos:position pos:line="7" pos:column="50"/></name></decl>;<pos:position pos:line="7" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">object_id<pos:position pos:line="8" pos:column="25"/></name></name></type> <name pos:line="8" pos:column="26">head_oid<pos:position pos:line="8" pos:column="34"/></name></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">strbuf<pos:position pos:line="9" pos:column="22"/></name></name></type> <name pos:line="9" pos:column="23">buf<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><name pos:line="9" pos:column="29">STRBUF_INIT<pos:position pos:line="9" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">ident<pos:position pos:line="10" pos:column="26"/></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">time_t<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">now<pos:position pos:line="11" pos:column="19"/></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">size<pos:position pos:line="12" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="19">len<pos:position pos:line="12" pos:column="22"/></name></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="13" pos:column="9">struct<pos:position pos:line="13" pos:column="15"/></name> <name pos:line="13" pos:column="16">cache_entry<pos:position pos:line="13" pos:column="27"/></name></name> <modifier pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></modifier></type><name pos:line="13" pos:column="29">ce<pos:position pos:line="13" pos:column="31"/></name></decl>;<pos:position pos:line="13" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">unsigned<pos:position pos:line="14" pos:column="17"/></name></type> <name pos:line="14" pos:column="18">mode<pos:position pos:line="14" pos:column="22"/></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="15" pos:column="9">struct<pos:position pos:line="15" pos:column="15"/></name> <name pos:line="15" pos:column="16">strbuf<pos:position pos:line="15" pos:column="22"/></name></name></type> <name pos:line="15" pos:column="23">msg<pos:position pos:line="15" pos:column="26"/></name> <init pos:line="15" pos:column="27">= <expr><name pos:line="15" pos:column="29">STRBUF_INIT<pos:position pos:line="15" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="41"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">read_cache<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">()<pos:position pos:line="17" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">time<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><operator pos:line="18" pos:column="14">&amp;<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="15">now<pos:position pos:line="18" pos:column="18"/></name></expr></argument>)<pos:position pos:line="18" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">commit<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">alloc_commit_node<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">()<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">commit<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">-&gt;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="17">object<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">.<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="24">parsed<pos:position pos:line="20" pos:column="30"/></name></name> <operator pos:line="20" pos:column="31">=<pos:position pos:line="20" pos:column="32"/></operator> <literal type="number" pos:line="20" pos:column="33">1<pos:position pos:line="20" pos:column="34"/></literal></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">commit<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">date<pos:position pos:line="21" pos:column="21"/></name></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <name pos:line="21" pos:column="24">now<pos:position pos:line="21" pos:column="27"/></name></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">parent_tail<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <operator pos:line="22" pos:column="23">&amp;<pos:position pos:line="22" pos:column="28"/></operator><name><name pos:line="22" pos:column="24">commit<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">-&gt;<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="32">parents<pos:position pos:line="22" pos:column="39"/></name></name></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><call><name pos:line="24" pos:column="14">resolve_ref_unsafe<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><literal type="string" pos:line="24" pos:column="33">"HEAD"<pos:position pos:line="24" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">RESOLVE_REF_READING<pos:position pos:line="24" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="62">head_oid<pos:position pos:line="24" pos:column="70"/></name><operator pos:line="24" pos:column="70">.<pos:position pos:line="24" pos:column="71"/></operator><name pos:line="24" pos:column="71">hash<pos:position pos:line="24" pos:column="75"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="77">NULL<pos:position pos:line="24" pos:column="81"/></name></expr></argument>)<pos:position pos:line="24" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="83"/></condition><then pos:line="24" pos:column="83">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="17">die<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><literal type="string" pos:line="25" pos:column="21">"no such ref: HEAD"<pos:position pos:line="25" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="42"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="27" pos:column="9">parent_tail<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <call><name pos:line="27" pos:column="23">append_parent<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><name pos:line="27" pos:column="37">parent_tail<pos:position pos:line="27" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="50">&amp;<pos:position pos:line="27" pos:column="55"/></operator><name pos:line="27" pos:column="51">head_oid<pos:position pos:line="27" pos:column="59"/></name></expr></argument>)<pos:position pos:line="27" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">append_merge_parents<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">parent_tail<pos:position pos:line="28" pos:column="41"/></name></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">verify_working_tree_path<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><name pos:line="29" pos:column="34">commit<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="42">path<pos:position pos:line="29" pos:column="46"/></name></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><name pos:line="31" pos:column="9">origin<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <call><name pos:line="31" pos:column="18">make_origin<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">commit<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="38">path<pos:position pos:line="31" pos:column="42"/></name></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><name pos:line="33" pos:column="9">ident<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <call><name pos:line="33" pos:column="17">fmt_ident<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><literal type="string" pos:line="33" pos:column="27">"Not Committed Yet"<pos:position pos:line="33" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="48">"not.committed.yet"<pos:position pos:line="33" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="69">NULL<pos:position pos:line="33" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="75">0<pos:position pos:line="33" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="78"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">strbuf_addstr<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><operator pos:line="34" pos:column="23">&amp;<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="24">msg<pos:position pos:line="34" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="29">"tree 0000000000000000000000000000000000000000\n"<pos:position pos:line="34" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="80"/></expr_stmt>
	<for pos:line="35" pos:column="9">for <control pos:line="35" pos:column="13">(<init><expr><name pos:line="35" pos:column="14">parent<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <name><name pos:line="35" pos:column="23">commit<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">-&gt;<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="31">parents<pos:position pos:line="35" pos:column="38"/></name></name></expr>;<pos:position pos:line="35" pos:column="39"/></init> <condition><expr><name pos:line="35" pos:column="40">parent<pos:position pos:line="35" pos:column="46"/></name></expr>;<pos:position pos:line="35" pos:column="47"/></condition> <incr><expr><name pos:line="35" pos:column="48">parent<pos:position pos:line="35" pos:column="54"/></name> <operator pos:line="35" pos:column="55">=<pos:position pos:line="35" pos:column="56"/></operator> <name><name pos:line="35" pos:column="57">parent<pos:position pos:line="35" pos:column="63"/></name><operator pos:line="35" pos:column="63">-&gt;<pos:position pos:line="35" pos:column="68"/></operator><name pos:line="35" pos:column="65">next<pos:position pos:line="35" pos:column="69"/></name></name></expr></incr>)<pos:position pos:line="35" pos:column="70"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="17">strbuf_addf<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><operator pos:line="36" pos:column="29">&amp;<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="30">msg<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="35">"parent %s\n"<pos:position pos:line="36" pos:column="48"/></literal></expr></argument>,
			    <argument><expr><call><name pos:line="37" pos:column="29">oid_to_hex<pos:position pos:line="37" pos:column="39"/></name><argument_list pos:line="37" pos:column="39">(<argument><expr><operator pos:line="37" pos:column="40">&amp;<pos:position pos:line="37" pos:column="45"/></operator><name><name pos:line="37" pos:column="41">parent<pos:position pos:line="37" pos:column="47"/></name><operator pos:line="37" pos:column="47">-&gt;<pos:position pos:line="37" pos:column="52"/></operator><name pos:line="37" pos:column="49">item<pos:position pos:line="37" pos:column="53"/></name><operator pos:line="37" pos:column="53">-&gt;<pos:position pos:line="37" pos:column="58"/></operator><name pos:line="37" pos:column="55">object<pos:position pos:line="37" pos:column="61"/></name><operator pos:line="37" pos:column="61">.<pos:position pos:line="37" pos:column="62"/></operator><name pos:line="37" pos:column="62">oid<pos:position pos:line="37" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="68"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">strbuf_addf<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><operator pos:line="38" pos:column="21">&amp;<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="22">msg<pos:position pos:line="38" pos:column="25"/></name></expr></argument>,
		    <argument><expr><literal type="string" pos:line="39" pos:column="21">"author %s\n"<pos:position pos:line="39" pos:column="34"/></literal>
		    <literal type="string" pos:line="40" pos:column="21">"committer %s\n\n"<pos:position pos:line="40" pos:column="39"/></literal>
		    <literal type="string" pos:line="41" pos:column="21">"Version of %s from %s\n"<pos:position pos:line="41" pos:column="46"/></literal></expr></argument>,
		    <argument><expr><name pos:line="42" pos:column="21">ident<pos:position pos:line="42" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="28">ident<pos:position pos:line="42" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="35">path<pos:position pos:line="42" pos:column="39"/></name></expr></argument>,
		    <argument><expr><operator pos:line="43" pos:column="21">(<pos:position pos:line="43" pos:column="22"/></operator><ternary><condition><expr><operator pos:line="43" pos:column="22">!<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">contents_from<pos:position pos:line="43" pos:column="36"/></name></expr> ?<pos:position pos:line="43" pos:column="38"/></condition><then pos:line="43" pos:column="38"> <expr><name pos:line="43" pos:column="39">path<pos:position pos:line="43" pos:column="43"/></name></expr> <pos:position pos:line="43" pos:column="44"/></then><else pos:line="43" pos:column="44">:
		     <expr><operator pos:line="44" pos:column="22">(<pos:position pos:line="44" pos:column="23"/></operator><ternary><condition><expr><operator pos:line="44" pos:column="23">!<pos:position pos:line="44" pos:column="24"/></operator><call><name pos:line="44" pos:column="24">strcmp<pos:position pos:line="44" pos:column="30"/></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">contents_from<pos:position pos:line="44" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="46">"-"<pos:position pos:line="44" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="50"/></argument_list></call></expr> ?<pos:position pos:line="44" pos:column="52"/></condition><then pos:line="44" pos:column="52"> <expr><literal type="string" pos:line="44" pos:column="53">"standard input"<pos:position pos:line="44" pos:column="69"/></literal></expr> <pos:position pos:line="44" pos:column="70"/></then><else pos:line="44" pos:column="70">: <expr><name pos:line="44" pos:column="72">contents_from<pos:position pos:line="44" pos:column="85"/></name></expr></else></ternary><operator pos:line="44" pos:column="85">)<pos:position pos:line="44" pos:column="86"/></operator></expr></else></ternary><operator pos:line="44" pos:column="86">)<pos:position pos:line="44" pos:column="87"/></operator></expr></argument>)<pos:position pos:line="44" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="89"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">set_commit_buffer_from_strbuf<pos:position pos:line="45" pos:column="38"/></name><argument_list pos:line="45" pos:column="38">(<argument><expr><name pos:line="45" pos:column="39">commit<pos:position pos:line="45" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="47">&amp;<pos:position pos:line="45" pos:column="52"/></operator><name pos:line="45" pos:column="48">msg<pos:position pos:line="45" pos:column="51"/></name></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="53"/></expr_stmt>

	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">!<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="14">contents_from<pos:position pos:line="47" pos:column="27"/></name> <operator pos:line="47" pos:column="28">||<pos:position pos:line="47" pos:column="30"/></operator> <call><name pos:line="47" pos:column="31">strcmp<pos:position pos:line="47" pos:column="37"/></name><argument_list pos:line="47" pos:column="37">(<argument><expr><literal type="string" pos:line="47" pos:column="38">"-"<pos:position pos:line="47" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="43">contents_from<pos:position pos:line="47" pos:column="56"/></name></expr></argument>)<pos:position pos:line="47" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="58"/></condition><then pos:line="47" pos:column="58"> <block pos:line="47" pos:column="59">{
		<decl_stmt><decl><type><name><name pos:line="48" pos:column="17">struct<pos:position pos:line="48" pos:column="23"/></name> <name pos:line="48" pos:column="24">stat<pos:position pos:line="48" pos:column="28"/></name></name></type> <name pos:line="48" pos:column="29">st<pos:position pos:line="48" pos:column="31"/></name></decl>;<pos:position pos:line="48" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="49" pos:column="17">const<pos:position pos:line="49" pos:column="22"/></specifier> <name pos:line="49" pos:column="23">char<pos:position pos:line="49" pos:column="27"/></name> <modifier pos:line="49" pos:column="28">*<pos:position pos:line="49" pos:column="29"/></modifier></type><name pos:line="49" pos:column="29">read_from<pos:position pos:line="49" pos:column="38"/></name></decl>;<pos:position pos:line="49" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="50" pos:column="17">char<pos:position pos:line="50" pos:column="21"/></name> <modifier pos:line="50" pos:column="22">*<pos:position pos:line="50" pos:column="23"/></modifier></type><name pos:line="50" pos:column="23">buf_ptr<pos:position pos:line="50" pos:column="30"/></name></decl>;<pos:position pos:line="50" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="51" pos:column="17">unsigned<pos:position pos:line="51" pos:column="25"/></name> <name pos:line="51" pos:column="26">long<pos:position pos:line="51" pos:column="30"/></name></type> <name pos:line="51" pos:column="31">buf_len<pos:position pos:line="51" pos:column="38"/></name></decl>;<pos:position pos:line="51" pos:column="39"/></decl_stmt>

		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name pos:line="53" pos:column="21">contents_from<pos:position pos:line="53" pos:column="34"/></name></expr>)<pos:position pos:line="53" pos:column="35"/></condition><then pos:line="53" pos:column="35"> <block pos:line="53" pos:column="36">{
			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><call><name pos:line="54" pos:column="29">stat<pos:position pos:line="54" pos:column="33"/></name><argument_list pos:line="54" pos:column="33">(<argument><expr><name pos:line="54" pos:column="34">contents_from<pos:position pos:line="54" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="49">&amp;<pos:position pos:line="54" pos:column="54"/></operator><name pos:line="54" pos:column="50">st<pos:position pos:line="54" pos:column="52"/></name></expr></argument>)<pos:position pos:line="54" pos:column="53"/></argument_list></call> <operator pos:line="54" pos:column="54">&lt;<pos:position pos:line="54" pos:column="58"/></operator> <literal type="number" pos:line="54" pos:column="56">0<pos:position pos:line="54" pos:column="57"/></literal></expr>)<pos:position pos:line="54" pos:column="58"/></condition><then pos:line="54" pos:column="58">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="33">die_errno<pos:position pos:line="55" pos:column="42"/></name><argument_list pos:line="55" pos:column="42">(<argument><expr><literal type="string" pos:line="55" pos:column="43">"Cannot stat '%s'"<pos:position pos:line="55" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="63">contents_from<pos:position pos:line="55" pos:column="76"/></name></expr></argument>)<pos:position pos:line="55" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="78"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="56" pos:column="25">read_from<pos:position pos:line="56" pos:column="34"/></name> <operator pos:line="56" pos:column="35">=<pos:position pos:line="56" pos:column="36"/></operator> <name pos:line="56" pos:column="37">contents_from<pos:position pos:line="56" pos:column="50"/></name></expr>;<pos:position pos:line="56" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="57" pos:column="18"/></block></then>
		<else pos:line="58" pos:column="17">else <block pos:line="58" pos:column="22">{
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><call><name pos:line="59" pos:column="29">lstat<pos:position pos:line="59" pos:column="34"/></name><argument_list pos:line="59" pos:column="34">(<argument><expr><name pos:line="59" pos:column="35">path<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="41">&amp;<pos:position pos:line="59" pos:column="46"/></operator><name pos:line="59" pos:column="42">st<pos:position pos:line="59" pos:column="44"/></name></expr></argument>)<pos:position pos:line="59" pos:column="45"/></argument_list></call> <operator pos:line="59" pos:column="46">&lt;<pos:position pos:line="59" pos:column="50"/></operator> <literal type="number" pos:line="59" pos:column="48">0<pos:position pos:line="59" pos:column="49"/></literal></expr>)<pos:position pos:line="59" pos:column="50"/></condition><then pos:line="59" pos:column="50">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="33">die_errno<pos:position pos:line="60" pos:column="42"/></name><argument_list pos:line="60" pos:column="42">(<argument><expr><literal type="string" pos:line="60" pos:column="43">"Cannot lstat '%s'"<pos:position pos:line="60" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="64">path<pos:position pos:line="60" pos:column="68"/></name></expr></argument>)<pos:position pos:line="60" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="70"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="61" pos:column="25">read_from<pos:position pos:line="61" pos:column="34"/></name> <operator pos:line="61" pos:column="35">=<pos:position pos:line="61" pos:column="36"/></operator> <name pos:line="61" pos:column="37">path<pos:position pos:line="61" pos:column="41"/></name></expr>;<pos:position pos:line="61" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="62" pos:column="18"/></block></else></if>
		<expr_stmt><expr><name pos:line="63" pos:column="17">mode<pos:position pos:line="63" pos:column="21"/></name> <operator pos:line="63" pos:column="22">=<pos:position pos:line="63" pos:column="23"/></operator> <call><name pos:line="63" pos:column="24">canon_mode<pos:position pos:line="63" pos:column="34"/></name><argument_list pos:line="63" pos:column="34">(<argument><expr><name><name pos:line="63" pos:column="35">st<pos:position pos:line="63" pos:column="37"/></name><operator pos:line="63" pos:column="37">.<pos:position pos:line="63" pos:column="38"/></operator><name pos:line="63" pos:column="38">st_mode<pos:position pos:line="63" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="47"/></expr_stmt>

		<switch pos:line="65" pos:column="17">switch <condition pos:line="65" pos:column="24">(<expr><name><name pos:line="65" pos:column="25">st<pos:position pos:line="65" pos:column="27"/></name><operator pos:line="65" pos:column="27">.<pos:position pos:line="65" pos:column="28"/></operator><name pos:line="65" pos:column="28">st_mode<pos:position pos:line="65" pos:column="35"/></name></name> <operator pos:line="65" pos:column="36">&amp;<pos:position pos:line="65" pos:column="41"/></operator> <name pos:line="65" pos:column="38">S_IFMT<pos:position pos:line="65" pos:column="44"/></name></expr>)<pos:position pos:line="65" pos:column="45"/></condition> <block pos:line="65" pos:column="46">{
		<case pos:line="66" pos:column="17">case <expr><name pos:line="66" pos:column="22">S_IFREG<pos:position pos:line="66" pos:column="29"/></name></expr>:<pos:position pos:line="66" pos:column="30"/></case>
			<if pos:line="67" pos:column="25">if <condition pos:line="67" pos:column="28">(<expr><call><name pos:line="67" pos:column="29">DIFF_OPT_TST<pos:position pos:line="67" pos:column="41"/></name><argument_list pos:line="67" pos:column="41">(<argument><expr><name pos:line="67" pos:column="42">opt<pos:position pos:line="67" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="47">ALLOW_TEXTCONV<pos:position pos:line="67" pos:column="61"/></name></expr></argument>)<pos:position pos:line="67" pos:column="62"/></argument_list></call> <operator pos:line="67" pos:column="63">&amp;&amp;<pos:position pos:line="67" pos:column="73"/></operator>
			    <call><name pos:line="68" pos:column="29">textconv_object<pos:position pos:line="68" pos:column="44"/></name><argument_list pos:line="68" pos:column="44">(<argument><expr><name pos:line="68" pos:column="45">read_from<pos:position pos:line="68" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="56">mode<pos:position pos:line="68" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="62">&amp;<pos:position pos:line="68" pos:column="67"/></operator><name pos:line="68" pos:column="63">null_oid<pos:position pos:line="68" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="73">0<pos:position pos:line="68" pos:column="74"/></literal></expr></argument>, <argument><expr><operator pos:line="68" pos:column="76">&amp;<pos:position pos:line="68" pos:column="81"/></operator><name pos:line="68" pos:column="77">buf_ptr<pos:position pos:line="68" pos:column="84"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="86">&amp;<pos:position pos:line="68" pos:column="91"/></operator><name pos:line="68" pos:column="87">buf_len<pos:position pos:line="68" pos:column="94"/></name></expr></argument>)<pos:position pos:line="68" pos:column="95"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="96"/></condition><then pos:line="68" pos:column="96">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="33">strbuf_attach<pos:position pos:line="69" pos:column="46"/></name><argument_list pos:line="69" pos:column="46">(<argument><expr><operator pos:line="69" pos:column="47">&amp;<pos:position pos:line="69" pos:column="52"/></operator><name pos:line="69" pos:column="48">buf<pos:position pos:line="69" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="53">buf_ptr<pos:position pos:line="69" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="62">buf_len<pos:position pos:line="69" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="71">buf_len<pos:position pos:line="69" pos:column="78"/></name> <operator pos:line="69" pos:column="79">+<pos:position pos:line="69" pos:column="80"/></operator> <literal type="number" pos:line="69" pos:column="81">1<pos:position pos:line="69" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="84"/></expr_stmt></block></then>
			<elseif pos:line="70" pos:column="25">else <if pos:line="70" pos:column="30">if <condition pos:line="70" pos:column="33">(<expr><call><name pos:line="70" pos:column="34">strbuf_read_file<pos:position pos:line="70" pos:column="50"/></name><argument_list pos:line="70" pos:column="50">(<argument><expr><operator pos:line="70" pos:column="51">&amp;<pos:position pos:line="70" pos:column="56"/></operator><name pos:line="70" pos:column="52">buf<pos:position pos:line="70" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="57">read_from<pos:position pos:line="70" pos:column="66"/></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="68">st<pos:position pos:line="70" pos:column="70"/></name><operator pos:line="70" pos:column="70">.<pos:position pos:line="70" pos:column="71"/></operator><name pos:line="70" pos:column="71">st_size<pos:position pos:line="70" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="79"/></argument_list></call> <operator pos:line="70" pos:column="80">!=<pos:position pos:line="70" pos:column="82"/></operator> <name><name pos:line="70" pos:column="83">st<pos:position pos:line="70" pos:column="85"/></name><operator pos:line="70" pos:column="85">.<pos:position pos:line="70" pos:column="86"/></operator><name pos:line="70" pos:column="86">st_size<pos:position pos:line="70" pos:column="93"/></name></name></expr>)<pos:position pos:line="70" pos:column="94"/></condition><then pos:line="70" pos:column="94">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="33">die_errno<pos:position pos:line="71" pos:column="42"/></name><argument_list pos:line="71" pos:column="42">(<argument><expr><literal type="string" pos:line="71" pos:column="43">"cannot open or read '%s'"<pos:position pos:line="71" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="71">read_from<pos:position pos:line="71" pos:column="80"/></name></expr></argument>)<pos:position pos:line="71" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="82"/></expr_stmt></block></then></if></elseif></if>
			<break pos:line="72" pos:column="25">break;<pos:position pos:line="72" pos:column="31"/></break>
		<case pos:line="73" pos:column="17">case <expr><name pos:line="73" pos:column="22">S_IFLNK<pos:position pos:line="73" pos:column="29"/></name></expr>:<pos:position pos:line="73" pos:column="30"/></case>
			<if pos:line="74" pos:column="25">if <condition pos:line="74" pos:column="28">(<expr><call><name pos:line="74" pos:column="29">strbuf_readlink<pos:position pos:line="74" pos:column="44"/></name><argument_list pos:line="74" pos:column="44">(<argument><expr><operator pos:line="74" pos:column="45">&amp;<pos:position pos:line="74" pos:column="50"/></operator><name pos:line="74" pos:column="46">buf<pos:position pos:line="74" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="51">read_from<pos:position pos:line="74" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="62">st<pos:position pos:line="74" pos:column="64"/></name><operator pos:line="74" pos:column="64">.<pos:position pos:line="74" pos:column="65"/></operator><name pos:line="74" pos:column="65">st_size<pos:position pos:line="74" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="73"/></argument_list></call> <operator pos:line="74" pos:column="74">&lt;<pos:position pos:line="74" pos:column="78"/></operator> <literal type="number" pos:line="74" pos:column="76">0<pos:position pos:line="74" pos:column="77"/></literal></expr>)<pos:position pos:line="74" pos:column="78"/></condition><then pos:line="74" pos:column="78">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="33">die_errno<pos:position pos:line="75" pos:column="42"/></name><argument_list pos:line="75" pos:column="42">(<argument><expr><literal type="string" pos:line="75" pos:column="43">"cannot readlink '%s'"<pos:position pos:line="75" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="67">read_from<pos:position pos:line="75" pos:column="76"/></name></expr></argument>)<pos:position pos:line="75" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="78"/></expr_stmt></block></then></if>
			<break pos:line="76" pos:column="25">break;<pos:position pos:line="76" pos:column="31"/></break>
		<default pos:line="77" pos:column="17">default:<pos:position pos:line="77" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="78" pos:column="25">die<pos:position pos:line="78" pos:column="28"/></name><argument_list pos:line="78" pos:column="28">(<argument><expr><literal type="string" pos:line="78" pos:column="29">"unsupported file type %s"<pos:position pos:line="78" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="57">read_from<pos:position pos:line="78" pos:column="66"/></name></expr></argument>)<pos:position pos:line="78" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="79" pos:column="18"/></block></switch>
	}<pos:position pos:line="80" pos:column="10"/></block></then>
	<else pos:line="81" pos:column="9">else <block pos:line="81" pos:column="14">{
		<comment type="block" pos:line="82" pos:column="17">/* Reading from stdin */</comment>
		<expr_stmt><expr><name pos:line="83" pos:column="17">mode<pos:position pos:line="83" pos:column="21"/></name> <operator pos:line="83" pos:column="22">=<pos:position pos:line="83" pos:column="23"/></operator> <literal type="number" pos:line="83" pos:column="24">0<pos:position pos:line="83" pos:column="25"/></literal></expr>;<pos:position pos:line="83" pos:column="26"/></expr_stmt>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><call><name pos:line="84" pos:column="21">strbuf_read<pos:position pos:line="84" pos:column="32"/></name><argument_list pos:line="84" pos:column="32">(<argument><expr><operator pos:line="84" pos:column="33">&amp;<pos:position pos:line="84" pos:column="38"/></operator><name pos:line="84" pos:column="34">buf<pos:position pos:line="84" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="39">0<pos:position pos:line="84" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="42">0<pos:position pos:line="84" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="44"/></argument_list></call> <operator pos:line="84" pos:column="45">&lt;<pos:position pos:line="84" pos:column="49"/></operator> <literal type="number" pos:line="84" pos:column="47">0<pos:position pos:line="84" pos:column="48"/></literal></expr>)<pos:position pos:line="84" pos:column="49"/></condition><then pos:line="84" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="25">die_errno<pos:position pos:line="85" pos:column="34"/></name><argument_list pos:line="85" pos:column="34">(<argument><expr><literal type="string" pos:line="85" pos:column="35">"failed to read from stdin"<pos:position pos:line="85" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="64"/></expr_stmt></block></then></if>
	}<pos:position pos:line="86" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="87" pos:column="9">convert_to_git<pos:position pos:line="87" pos:column="23"/></name><argument_list pos:line="87" pos:column="23">(<argument><expr><name pos:line="87" pos:column="24">path<pos:position pos:line="87" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="30">buf<pos:position pos:line="87" pos:column="33"/></name><operator pos:line="87" pos:column="33">.<pos:position pos:line="87" pos:column="34"/></operator><name pos:line="87" pos:column="34">buf<pos:position pos:line="87" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="39">buf<pos:position pos:line="87" pos:column="42"/></name><operator pos:line="87" pos:column="42">.<pos:position pos:line="87" pos:column="43"/></operator><name pos:line="87" pos:column="43">len<pos:position pos:line="87" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="48">&amp;<pos:position pos:line="87" pos:column="53"/></operator><name pos:line="87" pos:column="49">buf<pos:position pos:line="87" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="54">0<pos:position pos:line="87" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="88" pos:column="9">origin<pos:position pos:line="88" pos:column="15"/></name><operator pos:line="88" pos:column="15">-&gt;<pos:position pos:line="88" pos:column="20"/></operator><name pos:line="88" pos:column="17">file<pos:position pos:line="88" pos:column="21"/></name><operator pos:line="88" pos:column="21">.<pos:position pos:line="88" pos:column="22"/></operator><name pos:line="88" pos:column="22">ptr<pos:position pos:line="88" pos:column="25"/></name></name> <operator pos:line="88" pos:column="26">=<pos:position pos:line="88" pos:column="27"/></operator> <name><name pos:line="88" pos:column="28">buf<pos:position pos:line="88" pos:column="31"/></name><operator pos:line="88" pos:column="31">.<pos:position pos:line="88" pos:column="32"/></operator><name pos:line="88" pos:column="32">buf<pos:position pos:line="88" pos:column="35"/></name></name></expr>;<pos:position pos:line="88" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="89" pos:column="9">origin<pos:position pos:line="89" pos:column="15"/></name><operator pos:line="89" pos:column="15">-&gt;<pos:position pos:line="89" pos:column="20"/></operator><name pos:line="89" pos:column="17">file<pos:position pos:line="89" pos:column="21"/></name><operator pos:line="89" pos:column="21">.<pos:position pos:line="89" pos:column="22"/></operator><name pos:line="89" pos:column="22">size<pos:position pos:line="89" pos:column="26"/></name></name> <operator pos:line="89" pos:column="27">=<pos:position pos:line="89" pos:column="28"/></operator> <name><name pos:line="89" pos:column="29">buf<pos:position pos:line="89" pos:column="32"/></name><operator pos:line="89" pos:column="32">.<pos:position pos:line="89" pos:column="33"/></operator><name pos:line="89" pos:column="33">len<pos:position pos:line="89" pos:column="36"/></name></name></expr>;<pos:position pos:line="89" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="90" pos:column="9">pretend_sha1_file<pos:position pos:line="90" pos:column="26"/></name><argument_list pos:line="90" pos:column="26">(<argument><expr><name><name pos:line="90" pos:column="27">buf<pos:position pos:line="90" pos:column="30"/></name><operator pos:line="90" pos:column="30">.<pos:position pos:line="90" pos:column="31"/></operator><name pos:line="90" pos:column="31">buf<pos:position pos:line="90" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="36">buf<pos:position pos:line="90" pos:column="39"/></name><operator pos:line="90" pos:column="39">.<pos:position pos:line="90" pos:column="40"/></operator><name pos:line="90" pos:column="40">len<pos:position pos:line="90" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="45">OBJ_BLOB<pos:position pos:line="90" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="55">origin<pos:position pos:line="90" pos:column="61"/></name><operator pos:line="90" pos:column="61">-&gt;<pos:position pos:line="90" pos:column="66"/></operator><name pos:line="90" pos:column="63">blob_oid<pos:position pos:line="90" pos:column="71"/></name><operator pos:line="90" pos:column="71">.<pos:position pos:line="90" pos:column="72"/></operator><name pos:line="90" pos:column="72">hash<pos:position pos:line="90" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="78"/></expr_stmt>

	<comment type="block" pos:line="92" pos:column="9">/*
	 * Read the current index, replace the path entry with
	 * origin-&gt;blob_sha1 without mucking with its mode or type
	 * bits; we are not going to write this index out -- we just
	 * want to run "diff-index --cached".
	 */</comment>
	<expr_stmt><expr><call><name pos:line="98" pos:column="9">discard_cache<pos:position pos:line="98" pos:column="22"/></name><argument_list pos:line="98" pos:column="22">()<pos:position pos:line="98" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="99" pos:column="9">read_cache<pos:position pos:line="99" pos:column="19"/></name><argument_list pos:line="99" pos:column="19">()<pos:position pos:line="99" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="22"/></expr_stmt>

	<expr_stmt><expr><name pos:line="101" pos:column="9">len<pos:position pos:line="101" pos:column="12"/></name> <operator pos:line="101" pos:column="13">=<pos:position pos:line="101" pos:column="14"/></operator> <call><name pos:line="101" pos:column="15">strlen<pos:position pos:line="101" pos:column="21"/></name><argument_list pos:line="101" pos:column="21">(<argument><expr><name pos:line="101" pos:column="22">path<pos:position pos:line="101" pos:column="26"/></name></expr></argument>)<pos:position pos:line="101" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="28"/></expr_stmt>
	<if pos:line="102" pos:column="9">if <condition pos:line="102" pos:column="12">(<expr><operator pos:line="102" pos:column="13">!<pos:position pos:line="102" pos:column="14"/></operator><name pos:line="102" pos:column="14">mode<pos:position pos:line="102" pos:column="18"/></name></expr>)<pos:position pos:line="102" pos:column="19"/></condition><then pos:line="102" pos:column="19"> <block pos:line="102" pos:column="20">{
		<decl_stmt><decl><type><name pos:line="103" pos:column="17">int<pos:position pos:line="103" pos:column="20"/></name></type> <name pos:line="103" pos:column="21">pos<pos:position pos:line="103" pos:column="24"/></name> <init pos:line="103" pos:column="25">= <expr><call><name pos:line="103" pos:column="27">cache_name_pos<pos:position pos:line="103" pos:column="41"/></name><argument_list pos:line="103" pos:column="41">(<argument><expr><name pos:line="103" pos:column="42">path<pos:position pos:line="103" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="48">len<pos:position pos:line="103" pos:column="51"/></name></expr></argument>)<pos:position pos:line="103" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="103" pos:column="53"/></decl_stmt>
		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><literal type="number" pos:line="104" pos:column="21">0<pos:position pos:line="104" pos:column="22"/></literal> <operator pos:line="104" pos:column="23">&lt;=<pos:position pos:line="104" pos:column="28"/></operator> <name pos:line="104" pos:column="26">pos<pos:position pos:line="104" pos:column="29"/></name></expr>)<pos:position pos:line="104" pos:column="30"/></condition><then pos:line="104" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><name pos:line="105" pos:column="25">mode<pos:position pos:line="105" pos:column="29"/></name> <operator pos:line="105" pos:column="30">=<pos:position pos:line="105" pos:column="31"/></operator> <name><name pos:line="105" pos:column="32">active_cache<pos:position pos:line="105" pos:column="44"/></name><index pos:line="105" pos:column="44">[<expr><name pos:line="105" pos:column="45">pos<pos:position pos:line="105" pos:column="48"/></name></expr>]<pos:position pos:line="105" pos:column="49"/></index></name><operator pos:line="105" pos:column="49">-&gt;<pos:position pos:line="105" pos:column="54"/></operator><name pos:line="105" pos:column="51">ce_mode<pos:position pos:line="105" pos:column="58"/></name></expr>;<pos:position pos:line="105" pos:column="59"/></expr_stmt></block></then>
		<else pos:line="106" pos:column="17">else
			<comment type="block" pos:line="107" pos:column="25">/* Let's not bother reading from HEAD tree */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="108" pos:column="25">mode<pos:position pos:line="108" pos:column="29"/></name> <operator pos:line="108" pos:column="30">=<pos:position pos:line="108" pos:column="31"/></operator> <name pos:line="108" pos:column="32">S_IFREG<pos:position pos:line="108" pos:column="39"/></name> <operator pos:line="108" pos:column="40">|<pos:position pos:line="108" pos:column="41"/></operator> <literal type="number" pos:line="108" pos:column="42">0644<pos:position pos:line="108" pos:column="46"/></literal></expr>;<pos:position pos:line="108" pos:column="47"/></expr_stmt></block></else></if>
	}<pos:position pos:line="109" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="110" pos:column="9">size<pos:position pos:line="110" pos:column="13"/></name> <operator pos:line="110" pos:column="14">=<pos:position pos:line="110" pos:column="15"/></operator> <call><name pos:line="110" pos:column="16">cache_entry_size<pos:position pos:line="110" pos:column="32"/></name><argument_list pos:line="110" pos:column="32">(<argument><expr><name pos:line="110" pos:column="33">len<pos:position pos:line="110" pos:column="36"/></name></expr></argument>)<pos:position pos:line="110" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="111" pos:column="9">ce<pos:position pos:line="111" pos:column="11"/></name> <operator pos:line="111" pos:column="12">=<pos:position pos:line="111" pos:column="13"/></operator> <call><name pos:line="111" pos:column="14">xcalloc<pos:position pos:line="111" pos:column="21"/></name><argument_list pos:line="111" pos:column="21">(<argument><expr><literal type="number" pos:line="111" pos:column="22">1<pos:position pos:line="111" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="111" pos:column="25">size<pos:position pos:line="111" pos:column="29"/></name></expr></argument>)<pos:position pos:line="111" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="112" pos:column="9">oidcpy<pos:position pos:line="112" pos:column="15"/></name><argument_list pos:line="112" pos:column="15">(<argument><expr><operator pos:line="112" pos:column="16">&amp;<pos:position pos:line="112" pos:column="21"/></operator><name><name pos:line="112" pos:column="17">ce<pos:position pos:line="112" pos:column="19"/></name><operator pos:line="112" pos:column="19">-&gt;<pos:position pos:line="112" pos:column="24"/></operator><name pos:line="112" pos:column="21">oid<pos:position pos:line="112" pos:column="24"/></name></name></expr></argument>, <argument><expr><operator pos:line="112" pos:column="26">&amp;<pos:position pos:line="112" pos:column="31"/></operator><name><name pos:line="112" pos:column="27">origin<pos:position pos:line="112" pos:column="33"/></name><operator pos:line="112" pos:column="33">-&gt;<pos:position pos:line="112" pos:column="38"/></operator><name pos:line="112" pos:column="35">blob_oid<pos:position pos:line="112" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="112" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="113" pos:column="9">memcpy<pos:position pos:line="113" pos:column="15"/></name><argument_list pos:line="113" pos:column="15">(<argument><expr><name><name pos:line="113" pos:column="16">ce<pos:position pos:line="113" pos:column="18"/></name><operator pos:line="113" pos:column="18">-&gt;<pos:position pos:line="113" pos:column="23"/></operator><name pos:line="113" pos:column="20">name<pos:position pos:line="113" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="26">path<pos:position pos:line="113" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="32">len<pos:position pos:line="113" pos:column="35"/></name></expr></argument>)<pos:position pos:line="113" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="114" pos:column="9">ce<pos:position pos:line="114" pos:column="11"/></name><operator pos:line="114" pos:column="11">-&gt;<pos:position pos:line="114" pos:column="16"/></operator><name pos:line="114" pos:column="13">ce_flags<pos:position pos:line="114" pos:column="21"/></name></name> <operator pos:line="114" pos:column="22">=<pos:position pos:line="114" pos:column="23"/></operator> <call><name pos:line="114" pos:column="24">create_ce_flags<pos:position pos:line="114" pos:column="39"/></name><argument_list pos:line="114" pos:column="39">(<argument><expr><literal type="number" pos:line="114" pos:column="40">0<pos:position pos:line="114" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="115" pos:column="9">ce<pos:position pos:line="115" pos:column="11"/></name><operator pos:line="115" pos:column="11">-&gt;<pos:position pos:line="115" pos:column="16"/></operator><name pos:line="115" pos:column="13">ce_namelen<pos:position pos:line="115" pos:column="23"/></name></name> <operator pos:line="115" pos:column="24">=<pos:position pos:line="115" pos:column="25"/></operator> <name pos:line="115" pos:column="26">len<pos:position pos:line="115" pos:column="29"/></name></expr>;<pos:position pos:line="115" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="116" pos:column="9">ce<pos:position pos:line="116" pos:column="11"/></name><operator pos:line="116" pos:column="11">-&gt;<pos:position pos:line="116" pos:column="16"/></operator><name pos:line="116" pos:column="13">ce_mode<pos:position pos:line="116" pos:column="20"/></name></name> <operator pos:line="116" pos:column="21">=<pos:position pos:line="116" pos:column="22"/></operator> <call><name pos:line="116" pos:column="23">create_ce_mode<pos:position pos:line="116" pos:column="37"/></name><argument_list pos:line="116" pos:column="37">(<argument><expr><name pos:line="116" pos:column="38">mode<pos:position pos:line="116" pos:column="42"/></name></expr></argument>)<pos:position pos:line="116" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="117" pos:column="9">add_cache_entry<pos:position pos:line="117" pos:column="24"/></name><argument_list pos:line="117" pos:column="24">(<argument><expr><name pos:line="117" pos:column="25">ce<pos:position pos:line="117" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="29">ADD_CACHE_OK_TO_ADD<pos:position pos:line="117" pos:column="48"/></name><operator pos:line="117" pos:column="48">|<pos:position pos:line="117" pos:column="49"/></operator><name pos:line="117" pos:column="49">ADD_CACHE_OK_TO_REPLACE<pos:position pos:line="117" pos:column="72"/></name></expr></argument>)<pos:position pos:line="117" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="74"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="119" pos:column="9">cache_tree_invalidate_path<pos:position pos:line="119" pos:column="35"/></name><argument_list pos:line="119" pos:column="35">(<argument><expr><operator pos:line="119" pos:column="36">&amp;<pos:position pos:line="119" pos:column="41"/></operator><name pos:line="119" pos:column="37">the_index<pos:position pos:line="119" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="48">path<pos:position pos:line="119" pos:column="52"/></name></expr></argument>)<pos:position pos:line="119" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="54"/></expr_stmt>

	<return pos:line="121" pos:column="9">return <expr><name pos:line="121" pos:column="16">commit<pos:position pos:line="121" pos:column="22"/></name></expr>;<pos:position pos:line="121" pos:column="23"/></return>
}<pos:position pos:line="122" pos:column="2"/></block></function></unit>
