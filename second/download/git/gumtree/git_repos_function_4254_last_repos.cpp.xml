<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4254_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">match_trees<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">object_id<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">hash1<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">object_id<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">hash2<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="3" pos:column="25">int<pos:position pos:line="3" pos:column="28"/></name> <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier></type><name pos:line="3" pos:column="30">best_score<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="4" pos:column="25">char<pos:position pos:line="4" pos:column="29"/></name> <modifier pos:line="4" pos:column="30">*<pos:position pos:line="4" pos:column="31"/></modifier><modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">best_match<pos:position pos:line="4" pos:column="42"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="5" pos:column="25">const<pos:position pos:line="5" pos:column="30"/></specifier> <name pos:line="5" pos:column="31">char<pos:position pos:line="5" pos:column="35"/></name> <modifier pos:line="5" pos:column="36">*<pos:position pos:line="5" pos:column="37"/></modifier></type><name pos:line="5" pos:column="37">base<pos:position pos:line="5" pos:column="41"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="6" pos:column="25">int<pos:position pos:line="6" pos:column="28"/></name></type> <name pos:line="6" pos:column="29">recurse_limit<pos:position pos:line="6" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="43"/></parameter_list>
<block pos:line="7" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">tree_desc<pos:position pos:line="8" pos:column="25"/></name></name></type> <name pos:line="8" pos:column="26">one<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">void<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">one_buf<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><call><name pos:line="9" pos:column="25">fill_tree_desc_strict<pos:position pos:line="9" pos:column="46"/></name><argument_list pos:line="9" pos:column="46">(<argument><expr><operator pos:line="9" pos:column="47">&amp;<pos:position pos:line="9" pos:column="52"/></operator><name pos:line="9" pos:column="48">one<pos:position pos:line="9" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="53">hash1<pos:position pos:line="9" pos:column="58"/></name></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="60"/></decl_stmt>

	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><name><name pos:line="11" pos:column="16">one<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">.<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">size<pos:position pos:line="11" pos:column="24"/></name></name></expr>)<pos:position pos:line="11" pos:column="25"/></condition> <block pos:line="11" pos:column="26">{
		<decl_stmt><decl><type><specifier pos:line="12" pos:column="17">const<pos:position pos:line="12" pos:column="22"/></specifier> <name pos:line="12" pos:column="23">char<pos:position pos:line="12" pos:column="27"/></name> <modifier pos:line="12" pos:column="28">*<pos:position pos:line="12" pos:column="29"/></modifier></type><name pos:line="12" pos:column="29">path<pos:position pos:line="12" pos:column="33"/></name></decl>;<pos:position pos:line="12" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="13" pos:column="17">const<pos:position pos:line="13" pos:column="22"/></specifier> <name><name pos:line="13" pos:column="23">struct<pos:position pos:line="13" pos:column="29"/></name> <name pos:line="13" pos:column="30">object_id<pos:position pos:line="13" pos:column="39"/></name></name> <modifier pos:line="13" pos:column="40">*<pos:position pos:line="13" pos:column="41"/></modifier></type><name pos:line="13" pos:column="41">elem<pos:position pos:line="13" pos:column="45"/></name></decl>;<pos:position pos:line="13" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">unsigned<pos:position pos:line="14" pos:column="25"/></name></type> <name pos:line="14" pos:column="26">mode<pos:position pos:line="14" pos:column="30"/></name></decl>;<pos:position pos:line="14" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">int<pos:position pos:line="15" pos:column="20"/></name></type> <name pos:line="15" pos:column="21">score<pos:position pos:line="15" pos:column="26"/></name></decl>;<pos:position pos:line="15" pos:column="27"/></decl_stmt>

		<expr_stmt><expr><name pos:line="17" pos:column="17">elem<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <call><name pos:line="17" pos:column="24">tree_entry_extract<pos:position pos:line="17" pos:column="42"/></name><argument_list pos:line="17" pos:column="42">(<argument><expr><operator pos:line="17" pos:column="43">&amp;<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="44">one<pos:position pos:line="17" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="49">&amp;<pos:position pos:line="17" pos:column="54"/></operator><name pos:line="17" pos:column="50">path<pos:position pos:line="17" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="56">&amp;<pos:position pos:line="17" pos:column="61"/></operator><name pos:line="17" pos:column="57">mode<pos:position pos:line="17" pos:column="61"/></name></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="63"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><call><name pos:line="18" pos:column="22">S_ISDIR<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">mode<pos:position pos:line="18" pos:column="34"/></name></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="36"/></condition><then pos:line="18" pos:column="36">
			<block type="pseudo"><goto pos:line="19" pos:column="25">goto <name pos:line="19" pos:column="30">next<pos:position pos:line="19" pos:column="34"/></name>;<pos:position pos:line="19" pos:column="35"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="20" pos:column="17">score<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <call><name pos:line="20" pos:column="25">score_trees<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><name pos:line="20" pos:column="37">elem<pos:position pos:line="20" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="43">hash2<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">*<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">best_score<pos:position pos:line="21" pos:column="32"/></name> <operator pos:line="21" pos:column="33">&lt;<pos:position pos:line="21" pos:column="37"/></operator> <name pos:line="21" pos:column="35">score<pos:position pos:line="21" pos:column="40"/></name></expr>)<pos:position pos:line="21" pos:column="41"/></condition><then pos:line="21" pos:column="41"> <block pos:line="21" pos:column="42">{
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">free<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><operator pos:line="22" pos:column="30">*<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">best_match<pos:position pos:line="22" pos:column="41"/></name></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="23" pos:column="25">*<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">best_match<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">=<pos:position pos:line="23" pos:column="38"/></operator> <call><name pos:line="23" pos:column="39">xstrfmt<pos:position pos:line="23" pos:column="46"/></name><argument_list pos:line="23" pos:column="46">(<argument><expr><literal type="string" pos:line="23" pos:column="47">"%s%s"<pos:position pos:line="23" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="55">base<pos:position pos:line="23" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="61">path<pos:position pos:line="23" pos:column="65"/></name></expr></argument>)<pos:position pos:line="23" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="24" pos:column="25">*<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="26">best_score<pos:position pos:line="24" pos:column="36"/></name> <operator pos:line="24" pos:column="37">=<pos:position pos:line="24" pos:column="38"/></operator> <name pos:line="24" pos:column="39">score<pos:position pos:line="24" pos:column="44"/></name></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">recurse_limit<pos:position pos:line="26" pos:column="34"/></name></expr>)<pos:position pos:line="26" pos:column="35"/></condition><then pos:line="26" pos:column="35"> <block pos:line="26" pos:column="36">{
			<decl_stmt><decl><type><name pos:line="27" pos:column="25">char<pos:position pos:line="27" pos:column="29"/></name> <modifier pos:line="27" pos:column="30">*<pos:position pos:line="27" pos:column="31"/></modifier></type><name pos:line="27" pos:column="31">newbase<pos:position pos:line="27" pos:column="38"/></name> <init pos:line="27" pos:column="39">= <expr><call><name pos:line="27" pos:column="41">xstrfmt<pos:position pos:line="27" pos:column="48"/></name><argument_list pos:line="27" pos:column="48">(<argument><expr><literal type="string" pos:line="27" pos:column="49">"%s%s/"<pos:position pos:line="27" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="58">base<pos:position pos:line="27" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="64">path<pos:position pos:line="27" pos:column="68"/></name></expr></argument>)<pos:position pos:line="27" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="70"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">match_trees<pos:position pos:line="28" pos:column="36"/></name><argument_list pos:line="28" pos:column="36">(<argument><expr><name pos:line="28" pos:column="37">elem<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="43">hash2<pos:position pos:line="28" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="50">best_score<pos:position pos:line="28" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="62">best_match<pos:position pos:line="28" pos:column="72"/></name></expr></argument>,
				    <argument><expr><name pos:line="29" pos:column="37">newbase<pos:position pos:line="29" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="46">recurse_limit<pos:position pos:line="29" pos:column="59"/></name> <operator pos:line="29" pos:column="60">-<pos:position pos:line="29" pos:column="61"/></operator> <literal type="number" pos:line="29" pos:column="62">1<pos:position pos:line="29" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">free<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">newbase<pos:position pos:line="30" pos:column="37"/></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if>

	<label><name pos:line="33" pos:column="9">next<pos:position pos:line="33" pos:column="13"/></name>:<pos:position pos:line="33" pos:column="14"/></label>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">update_tree_entry<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">(<argument><expr><operator pos:line="34" pos:column="35">&amp;<pos:position pos:line="34" pos:column="40"/></operator><name pos:line="34" pos:column="36">one<pos:position pos:line="34" pos:column="39"/></name></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">free<pos:position pos:line="36" pos:column="13"/></name><argument_list pos:line="36" pos:column="13">(<argument><expr><name pos:line="36" pos:column="14">one_buf<pos:position pos:line="36" pos:column="21"/></name></expr></argument>)<pos:position pos:line="36" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="23"/></expr_stmt>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
