<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1562_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">emit_rewrite_lines<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">emit_callback<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">ecb<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
			       <parameter><decl><type><name pos:line="2" pos:column="32">int<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">prefix<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name pos:line="2" pos:column="50">char<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">data<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="62">int<pos:position pos:line="2" pos:column="65"/></name></type> <name pos:line="2" pos:column="66">size<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">endp<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">NULL<pos:position pos:line="4" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">static<pos:position pos:line="5" pos:column="15"/></specifier> <type><specifier pos:line="5" pos:column="16">const<pos:position pos:line="5" pos:column="21"/></specifier> <name pos:line="5" pos:column="22">char<pos:position pos:line="5" pos:column="26"/></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">nneof<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><literal type="string" pos:line="5" pos:column="36">" No newline at end of file\n"<pos:position pos:line="5" pos:column="66"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="67"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">reset<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><call><name pos:line="6" pos:column="29">diff_get_color<pos:position pos:line="6" pos:column="43"/></name><argument_list pos:line="6" pos:column="43">(<argument><expr><name><name pos:line="6" pos:column="44">ecb<pos:position pos:line="6" pos:column="47"/></name><operator pos:line="6" pos:column="47">-&gt;<pos:position pos:line="6" pos:column="52"/></operator><name pos:line="6" pos:column="49">color_diff<pos:position pos:line="6" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="61">DIFF_RESET<pos:position pos:line="6" pos:column="71"/></name></expr></argument>)<pos:position pos:line="6" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="73"/></decl_stmt>

	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal> <operator pos:line="8" pos:column="18">&lt;<pos:position pos:line="8" pos:column="22"/></operator> <name pos:line="8" pos:column="20">size<pos:position pos:line="8" pos:column="24"/></name></expr>)<pos:position pos:line="8" pos:column="25"/></condition> <block pos:line="8" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">len<pos:position pos:line="9" pos:column="24"/></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>

		<expr_stmt><expr><name pos:line="11" pos:column="17">endp<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <call><name pos:line="11" pos:column="24">memchr<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">data<pos:position pos:line="11" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="37">'\n'<pos:position pos:line="11" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="43">size<pos:position pos:line="11" pos:column="47"/></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="12" pos:column="17">len<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <ternary><condition><expr><name pos:line="12" pos:column="23">endp<pos:position pos:line="12" pos:column="27"/></name></expr> ?<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29"> <expr><operator pos:line="12" pos:column="30">(<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">endp<pos:position pos:line="12" pos:column="35"/></name> <operator pos:line="12" pos:column="36">-<pos:position pos:line="12" pos:column="37"/></operator> <name pos:line="12" pos:column="38">data<pos:position pos:line="12" pos:column="42"/></name> <operator pos:line="12" pos:column="43">+<pos:position pos:line="12" pos:column="44"/></operator> <literal type="number" pos:line="12" pos:column="45">1<pos:position pos:line="12" pos:column="46"/></literal><operator pos:line="12" pos:column="46">)<pos:position pos:line="12" pos:column="47"/></operator></expr> <pos:position pos:line="12" pos:column="48"/></then><else pos:line="12" pos:column="48">: <expr><name pos:line="12" pos:column="50">size<pos:position pos:line="12" pos:column="54"/></name></expr></else></ternary></expr>;<pos:position pos:line="12" pos:column="55"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">prefix<pos:position pos:line="13" pos:column="27"/></name> <operator pos:line="13" pos:column="28">!=<pos:position pos:line="13" pos:column="30"/></operator> <literal type="char" pos:line="13" pos:column="31">'+'<pos:position pos:line="13" pos:column="34"/></literal></expr>)<pos:position pos:line="13" pos:column="35"/></condition><then pos:line="13" pos:column="35"> <block pos:line="13" pos:column="36">{
			<expr_stmt><expr><name><name pos:line="14" pos:column="25">ecb<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">-&gt;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="30">lno_in_preimage<pos:position pos:line="14" pos:column="45"/></name></name><operator pos:line="14" pos:column="45">++<pos:position pos:line="14" pos:column="47"/></operator></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="15" pos:column="25">emit_del_line<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><name pos:line="15" pos:column="39">reset<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">ecb<pos:position pos:line="15" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="51">data<pos:position pos:line="15" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="57">len<pos:position pos:line="15" pos:column="60"/></name></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="16" pos:column="18"/></block></then> <else pos:line="16" pos:column="19">else <block pos:line="16" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="17" pos:column="25">ecb<pos:position pos:line="17" pos:column="28"/></name><operator pos:line="17" pos:column="28">-&gt;<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="30">lno_in_postimage<pos:position pos:line="17" pos:column="46"/></name></name><operator pos:line="17" pos:column="46">++<pos:position pos:line="17" pos:column="48"/></operator></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">emit_add_line<pos:position pos:line="18" pos:column="38"/></name><argument_list pos:line="18" pos:column="38">(<argument><expr><name pos:line="18" pos:column="39">reset<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="46">ecb<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">data<pos:position pos:line="18" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="57">len<pos:position pos:line="18" pos:column="60"/></name></expr></argument>)<pos:position pos:line="18" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="19" pos:column="18"/></block></else></if>
		<expr_stmt><expr><name pos:line="20" pos:column="17">size<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">-=<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="25">len<pos:position pos:line="20" pos:column="28"/></name></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="21" pos:column="17">data<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">+=<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="25">len<pos:position pos:line="21" pos:column="28"/></name></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></while>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">endp<pos:position pos:line="23" pos:column="18"/></name></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19"> <block pos:line="23" pos:column="20">{
		<decl_stmt><decl><type><specifier pos:line="24" pos:column="17">const<pos:position pos:line="24" pos:column="22"/></specifier> <name pos:line="24" pos:column="23">char<pos:position pos:line="24" pos:column="27"/></name> <modifier pos:line="24" pos:column="28">*<pos:position pos:line="24" pos:column="29"/></modifier></type><name pos:line="24" pos:column="29">context<pos:position pos:line="24" pos:column="36"/></name> <init pos:line="24" pos:column="37">= <expr><call><name pos:line="24" pos:column="39">diff_get_color<pos:position pos:line="24" pos:column="53"/></name><argument_list pos:line="24" pos:column="53">(<argument><expr><name><name pos:line="24" pos:column="54">ecb<pos:position pos:line="24" pos:column="57"/></name><operator pos:line="24" pos:column="57">-&gt;<pos:position pos:line="24" pos:column="62"/></operator><name pos:line="24" pos:column="59">color_diff<pos:position pos:line="24" pos:column="69"/></name></name></expr></argument>,
						     <argument><expr><name pos:line="25" pos:column="54">DIFF_CONTEXT<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="68"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">putc<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><literal type="char" pos:line="26" pos:column="22">'\n'<pos:position pos:line="26" pos:column="26"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="28">ecb<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">-&gt;<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="33">opt<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">-&gt;<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="38">file<pos:position pos:line="26" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">emit_line_0<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name><name pos:line="27" pos:column="29">ecb<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">-&gt;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="34">opt<pos:position pos:line="27" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="39">context<pos:position pos:line="27" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="48">reset<pos:position pos:line="27" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="27" pos:column="55">'\\'<pos:position pos:line="27" pos:column="59"/></literal></expr></argument>,
			    <argument><expr><name pos:line="28" pos:column="29">nneof<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="36">strlen<pos:position pos:line="28" pos:column="42"/></name><argument_list pos:line="28" pos:column="42">(<argument><expr><name pos:line="28" pos:column="43">nneof<pos:position pos:line="28" pos:column="48"/></name></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
