<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_761.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sequencer_rollback<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">replay_opts<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">opts<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">FILE<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">f<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">sha1<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">20<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">buf<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name pos:line="5" pos:column="29">STRBUF_INIT<pos:position pos:line="5" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">f<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">=<pos:position pos:line="7" pos:column="12"/></operator> <call><name pos:line="7" pos:column="13">fopen<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">(<argument><expr><call><name pos:line="7" pos:column="19">git_path_head_file<pos:position pos:line="7" pos:column="37"/></name><argument_list pos:line="7" pos:column="37">()<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="41">"r"<pos:position pos:line="7" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="46"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">f<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">&amp;&amp;<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="19">errno<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">==<pos:position pos:line="8" pos:column="27"/></operator> <name pos:line="8" pos:column="28">ENOENT<pos:position pos:line="8" pos:column="34"/></name></expr>)<pos:position pos:line="8" pos:column="35"/></condition><then pos:line="8" pos:column="35"> <block pos:line="8" pos:column="36">{
		<comment type="block" pos:line="9" pos:column="17">/*
		 * There is no multiple-cherry-pick in progress.
		 * If CHERRY_PICK_HEAD or REVERT_HEAD indicates
		 * a single-cherry-pick in progress, abort that.
		 */</comment>
		<return pos:line="14" pos:column="17">return <expr><call><name pos:line="14" pos:column="24">rollback_single_pick<pos:position pos:line="14" pos:column="44"/></name><argument_list pos:line="14" pos:column="44">()<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">f<pos:position pos:line="16" pos:column="15"/></name></expr>)<pos:position pos:line="16" pos:column="16"/></condition><then pos:line="16" pos:column="16">
		<block type="pseudo"><return pos:line="17" pos:column="17">return <expr><call><name pos:line="17" pos:column="24">error_errno<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><call><name pos:line="17" pos:column="36">_<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><literal type="string" pos:line="17" pos:column="38">"cannot open '%s'"<pos:position pos:line="17" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="59">git_path_head_file<pos:position pos:line="17" pos:column="77"/></name><argument_list pos:line="17" pos:column="77">()<pos:position pos:line="17" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="81"/></return></block></then></if>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">strbuf_getline_lf<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><operator pos:line="18" pos:column="31">&amp;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="32">buf<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="37">f<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="40"/></condition><then pos:line="18" pos:column="40"> <block pos:line="18" pos:column="41">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">error<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><call><name pos:line="19" pos:column="23">_<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><literal type="string" pos:line="19" pos:column="25">"cannot read '%s': %s"<pos:position pos:line="19" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="50">git_path_head_file<pos:position pos:line="19" pos:column="68"/></name><argument_list pos:line="19" pos:column="68">()<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr></argument>,
		      <argument><expr><ternary><condition><expr><call><name pos:line="20" pos:column="23">ferror<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">f<pos:position pos:line="20" pos:column="31"/></name></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr> ?<pos:position pos:line="20" pos:column="34"/></condition><then pos:line="20" pos:column="34">  <expr><call><name pos:line="20" pos:column="36">strerror<pos:position pos:line="20" pos:column="44"/></name><argument_list pos:line="20" pos:column="44">(<argument><expr><name pos:line="20" pos:column="45">errno<pos:position pos:line="20" pos:column="50"/></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr> <pos:position pos:line="20" pos:column="52"/></then><else pos:line="20" pos:column="52">: <expr><call><name pos:line="20" pos:column="54">_<pos:position pos:line="20" pos:column="55"/></name><argument_list pos:line="20" pos:column="55">(<argument><expr><literal type="string" pos:line="20" pos:column="56">"unexpected end of file"<pos:position pos:line="20" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="81"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="20" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="83"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">fclose<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">f<pos:position pos:line="21" pos:column="25"/></name></expr></argument>)<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
		<goto pos:line="22" pos:column="17">goto <name pos:line="22" pos:column="22">fail<pos:position pos:line="22" pos:column="26"/></name>;<pos:position pos:line="22" pos:column="27"/></goto>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">fclose<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">f<pos:position pos:line="24" pos:column="17"/></name></expr></argument>)<pos:position pos:line="24" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">get_sha1_hex<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name><name pos:line="25" pos:column="26">buf<pos:position pos:line="25" pos:column="29"/></name><operator pos:line="25" pos:column="29">.<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="30">buf<pos:position pos:line="25" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="35">sha1<pos:position pos:line="25" pos:column="39"/></name></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call> <operator pos:line="25" pos:column="41">||<pos:position pos:line="25" pos:column="43"/></operator> <name><name pos:line="25" pos:column="44">buf<pos:position pos:line="25" pos:column="47"/></name><operator pos:line="25" pos:column="47">.<pos:position pos:line="25" pos:column="48"/></operator><name pos:line="25" pos:column="48">buf<pos:position pos:line="25" pos:column="51"/></name><index pos:line="25" pos:column="51">[<expr><literal type="number" pos:line="25" pos:column="52">40<pos:position pos:line="25" pos:column="54"/></literal></expr>]<pos:position pos:line="25" pos:column="55"/></index></name> <operator pos:line="25" pos:column="56">!=<pos:position pos:line="25" pos:column="58"/></operator> <literal type="char" pos:line="25" pos:column="59">'\0'<pos:position pos:line="25" pos:column="63"/></literal></expr>)<pos:position pos:line="25" pos:column="64"/></condition><then pos:line="25" pos:column="64"> <block pos:line="25" pos:column="65">{
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">error<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><call><name pos:line="26" pos:column="23">_<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><literal type="string" pos:line="26" pos:column="25">"stored pre-cherry-pick HEAD file '%s' is corrupt"<pos:position pos:line="26" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="76"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="27" pos:column="25">git_path_head_file<pos:position pos:line="27" pos:column="43"/></name><argument_list pos:line="27" pos:column="43">()<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="47"/></expr_stmt>
		<goto pos:line="28" pos:column="17">goto <name pos:line="28" pos:column="22">fail<pos:position pos:line="28" pos:column="26"/></name>;<pos:position pos:line="28" pos:column="27"/></goto>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">is_null_sha1<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name pos:line="30" pos:column="26">sha1<pos:position pos:line="30" pos:column="30"/></name></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="32"/></condition><then pos:line="30" pos:column="32"> <block pos:line="30" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">error<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><call><name pos:line="31" pos:column="23">_<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><literal type="string" pos:line="31" pos:column="25">"cannot abort from a branch yet to be born"<pos:position pos:line="31" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="71"/></expr_stmt>
		<goto pos:line="32" pos:column="17">goto <name pos:line="32" pos:column="22">fail<pos:position pos:line="32" pos:column="26"/></name>;<pos:position pos:line="32" pos:column="27"/></goto>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>

	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">!<pos:position pos:line="35" pos:column="14"/></operator><call><name pos:line="35" pos:column="14">rollback_is_safe<pos:position pos:line="35" pos:column="30"/></name><argument_list pos:line="35" pos:column="30">()<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="33"/></condition><then pos:line="35" pos:column="33"> <block pos:line="35" pos:column="34">{
		<comment type="block" pos:line="36" pos:column="17">/* Do not error, just do not rollback */</comment>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">warning<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><call><name pos:line="37" pos:column="25">_<pos:position pos:line="37" pos:column="26"/></name><argument_list pos:line="37" pos:column="26">(<argument><expr><literal type="string" pos:line="37" pos:column="27">"You seem to have moved HEAD. "<pos:position pos:line="37" pos:column="58"/></literal>
			  <literal type="string" pos:line="38" pos:column="27">"Not rewinding, check your HEAD!"<pos:position pos:line="38" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="39" pos:column="10"/></block></then> <elseif pos:line="39" pos:column="11">else
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><call><name pos:line="40" pos:column="13">reset_for_rollback<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">(<argument><expr><name pos:line="40" pos:column="32">sha1<pos:position pos:line="40" pos:column="36"/></name></expr></argument>)<pos:position pos:line="40" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="38"/></condition><then pos:line="40" pos:column="38">
		<block type="pseudo"><goto pos:line="41" pos:column="17">goto <name pos:line="41" pos:column="22">fail<pos:position pos:line="41" pos:column="26"/></name>;<pos:position pos:line="41" pos:column="27"/></goto></block></then></if></elseif></if>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">strbuf_release<pos:position pos:line="42" pos:column="23"/></name><argument_list pos:line="42" pos:column="23">(<argument><expr><operator pos:line="42" pos:column="24">&amp;<pos:position pos:line="42" pos:column="29"/></operator><name pos:line="42" pos:column="25">buf<pos:position pos:line="42" pos:column="28"/></name></expr></argument>)<pos:position pos:line="42" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="30"/></expr_stmt>
	<return pos:line="43" pos:column="9">return <expr><call><name pos:line="43" pos:column="16">sequencer_remove_state<pos:position pos:line="43" pos:column="38"/></name><argument_list pos:line="43" pos:column="38">(<argument><expr><name pos:line="43" pos:column="39">opts<pos:position pos:line="43" pos:column="43"/></name></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="45"/></return>
<label><name pos:line="44" pos:column="1">fail<pos:position pos:line="44" pos:column="5"/></name>:<pos:position pos:line="44" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">strbuf_release<pos:position pos:line="45" pos:column="23"/></name><argument_list pos:line="45" pos:column="23">(<argument><expr><operator pos:line="45" pos:column="24">&amp;<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="25">buf<pos:position pos:line="45" pos:column="28"/></name></expr></argument>)<pos:position pos:line="45" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="30"/></expr_stmt>
	<return pos:line="46" pos:column="9">return <expr><operator pos:line="46" pos:column="16">-<pos:position pos:line="46" pos:column="17"/></operator><literal type="number" pos:line="46" pos:column="17">1<pos:position pos:line="46" pos:column="18"/></literal></expr>;<pos:position pos:line="46" pos:column="19"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
