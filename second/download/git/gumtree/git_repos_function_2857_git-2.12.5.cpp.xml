<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2857_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_input_file<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">strbuf<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">sb<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">file<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">file<pos:position pos:line="3" pos:column="17"/></name></expr>)<pos:position pos:line="3" pos:column="18"/></condition><then pos:line="3" pos:column="18"> <block pos:line="3" pos:column="19">{
		<if pos:line="4" pos:column="17">if <condition pos:line="4" pos:column="20">(<expr><call><name pos:line="4" pos:column="21">strbuf_read_file<pos:position pos:line="4" pos:column="37"/></name><argument_list pos:line="4" pos:column="37">(<argument><expr><name pos:line="4" pos:column="38">sb<pos:position pos:line="4" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="42">file<pos:position pos:line="4" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="48">0<pos:position pos:line="4" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="50"/></argument_list></call> <operator pos:line="4" pos:column="51">&lt;<pos:position pos:line="4" pos:column="55"/></operator> <literal type="number" pos:line="4" pos:column="53">0<pos:position pos:line="4" pos:column="54"/></literal></expr>)<pos:position pos:line="4" pos:column="55"/></condition><then pos:line="4" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="5" pos:column="25">die_errno<pos:position pos:line="5" pos:column="34"/></name><argument_list pos:line="5" pos:column="34">(<argument><expr><call><name pos:line="5" pos:column="35">_<pos:position pos:line="5" pos:column="36"/></name><argument_list pos:line="5" pos:column="36">(<argument><expr><literal type="string" pos:line="5" pos:column="37">"could not read input file '%s'"<pos:position pos:line="5" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="5" pos:column="72">file<pos:position pos:line="5" pos:column="76"/></name></expr></argument>)<pos:position pos:line="5" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="78"/></expr_stmt></block></then></if>
	}<pos:position pos:line="6" pos:column="10"/></block></then> <else pos:line="6" pos:column="11">else <block pos:line="6" pos:column="16">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><call><name pos:line="7" pos:column="21">strbuf_read<pos:position pos:line="7" pos:column="32"/></name><argument_list pos:line="7" pos:column="32">(<argument><expr><name pos:line="7" pos:column="33">sb<pos:position pos:line="7" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="7" pos:column="37">fileno<pos:position pos:line="7" pos:column="43"/></name><argument_list pos:line="7" pos:column="43">(<argument><expr><name pos:line="7" pos:column="44">stdin<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="52">0<pos:position pos:line="7" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call> <operator pos:line="7" pos:column="55">&lt;<pos:position pos:line="7" pos:column="59"/></operator> <literal type="number" pos:line="7" pos:column="57">0<pos:position pos:line="7" pos:column="58"/></literal></expr>)<pos:position pos:line="7" pos:column="59"/></condition><then pos:line="7" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="25">die_errno<pos:position pos:line="8" pos:column="34"/></name><argument_list pos:line="8" pos:column="34">(<argument><expr><call><name pos:line="8" pos:column="35">_<pos:position pos:line="8" pos:column="36"/></name><argument_list pos:line="8" pos:column="36">(<argument><expr><literal type="string" pos:line="8" pos:column="37">"could not read from stdin"<pos:position pos:line="8" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="67"/></expr_stmt></block></then></if>
	}<pos:position pos:line="9" pos:column="10"/></block></else></if>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
