<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6108_git-2.13.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_hash_object<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">argc<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier><modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">argv<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">prefix<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><specifier pos:line="3" pos:column="16">const<pos:position pos:line="3" pos:column="21"/></specifier> <name pos:line="3" pos:column="22">char<pos:position pos:line="3" pos:column="26"/></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier> <specifier pos:line="3" pos:column="29">const<pos:position pos:line="3" pos:column="34"/></specifier></type> <name><name pos:line="3" pos:column="35">hash_object_usage<pos:position pos:line="3" pos:column="52"/></name><index pos:line="3" pos:column="52">[]<pos:position pos:line="3" pos:column="54"/></index></name> <init pos:line="3" pos:column="55">= <expr><block pos:line="3" pos:column="57">{
		<expr><call><name pos:line="4" pos:column="17">N_<pos:position pos:line="4" pos:column="19"/></name><argument_list pos:line="4" pos:column="19">(<argument><expr><literal type="string" pos:line="4" pos:column="20">"git hash-object [-t &lt;type&gt;] [-w] [--path=&lt;file&gt; | --no-filters] [--stdin] [--] &lt;file&gt;..."<pos:position pos:line="4" pos:column="128"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="111"/></argument_list></call></expr>,
		<expr><call><name pos:line="5" pos:column="17">N_<pos:position pos:line="5" pos:column="19"/></name><argument_list pos:line="5" pos:column="19">(<argument><expr><literal type="string" pos:line="5" pos:column="20">"git hash-object  --stdin-paths"<pos:position pos:line="5" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="53"/></argument_list></call></expr>,
		<expr><name pos:line="6" pos:column="17">NULL<pos:position pos:line="6" pos:column="21"/></name></expr>
	}<pos:position pos:line="7" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">type<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><name pos:line="8" pos:column="28">blob_type<pos:position pos:line="8" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">hashstdin<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><literal type="number" pos:line="9" pos:column="25">0<pos:position pos:line="9" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">stdin_paths<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><literal type="number" pos:line="10" pos:column="27">0<pos:position pos:line="10" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">no_filters<pos:position pos:line="11" pos:column="23"/></name> <init pos:line="11" pos:column="24">= <expr><literal type="number" pos:line="11" pos:column="26">0<pos:position pos:line="11" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">literally<pos:position pos:line="12" pos:column="22"/></name> <init pos:line="12" pos:column="23">= <expr><literal type="number" pos:line="12" pos:column="25">0<pos:position pos:line="12" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">nongit<pos:position pos:line="13" pos:column="19"/></name> <init pos:line="13" pos:column="20">= <expr><literal type="number" pos:line="13" pos:column="22">0<pos:position pos:line="13" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">unsigned<pos:position pos:line="14" pos:column="17"/></name></type> <name pos:line="14" pos:column="18">flags<pos:position pos:line="14" pos:column="23"/></name> <init pos:line="14" pos:column="24">= <expr><name pos:line="14" pos:column="26">HASH_FORMAT_CHECK<pos:position pos:line="14" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="15" pos:column="9">const<pos:position pos:line="15" pos:column="14"/></specifier> <name pos:line="15" pos:column="15">char<pos:position pos:line="15" pos:column="19"/></name> <modifier pos:line="15" pos:column="20">*<pos:position pos:line="15" pos:column="21"/></modifier></type><name pos:line="15" pos:column="21">vpath<pos:position pos:line="15" pos:column="26"/></name> <init pos:line="15" pos:column="27">= <expr><name pos:line="15" pos:column="29">NULL<pos:position pos:line="15" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="16" pos:column="9">const<pos:position pos:line="16" pos:column="14"/></specifier> <name><name pos:line="16" pos:column="15">struct<pos:position pos:line="16" pos:column="21"/></name> <name pos:line="16" pos:column="22">option<pos:position pos:line="16" pos:column="28"/></name></name></type> <name><name pos:line="16" pos:column="29">hash_object_options<pos:position pos:line="16" pos:column="48"/></name><index pos:line="16" pos:column="48">[]<pos:position pos:line="16" pos:column="50"/></index></name> <init pos:line="16" pos:column="51">= <expr><block pos:line="16" pos:column="53">{
		<expr><call><name pos:line="17" pos:column="17">OPT_STRING<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><literal type="char" pos:line="17" pos:column="28">'t'<pos:position pos:line="17" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">NULL<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="39">&amp;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="40">type<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="46">N_<pos:position pos:line="17" pos:column="48"/></name><argument_list pos:line="17" pos:column="48">(<argument><expr><literal type="string" pos:line="17" pos:column="49">"type"<pos:position pos:line="17" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="58">N_<pos:position pos:line="17" pos:column="60"/></name><argument_list pos:line="17" pos:column="60">(<argument><expr><literal type="string" pos:line="17" pos:column="61">"object type"<pos:position pos:line="17" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="76"/></argument_list></call></expr>,
		<expr><call><name pos:line="18" pos:column="17">OPT_BIT<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><literal type="char" pos:line="18" pos:column="25">'w'<pos:position pos:line="18" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="30">NULL<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="36">&amp;<pos:position pos:line="18" pos:column="41"/></operator><name pos:line="18" pos:column="37">flags<pos:position pos:line="18" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="44">N_<pos:position pos:line="18" pos:column="46"/></name><argument_list pos:line="18" pos:column="46">(<argument><expr><literal type="string" pos:line="18" pos:column="47">"write the object into the object database"<pos:position pos:line="18" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="91"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="19" pos:column="25">HASH_WRITE_OBJECT<pos:position pos:line="19" pos:column="42"/></name></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>,
		<expr><call><name pos:line="20" pos:column="17">OPT_COUNTUP<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">( <argument><expr><literal type="number" pos:line="20" pos:column="30">0<pos:position pos:line="20" pos:column="31"/></literal></expr></argument> , <argument><expr><literal type="string" pos:line="20" pos:column="34">"stdin"<pos:position pos:line="20" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="43">&amp;<pos:position pos:line="20" pos:column="48"/></operator><name pos:line="20" pos:column="44">hashstdin<pos:position pos:line="20" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="55">N_<pos:position pos:line="20" pos:column="57"/></name><argument_list pos:line="20" pos:column="57">(<argument><expr><literal type="string" pos:line="20" pos:column="58">"read the object from stdin"<pos:position pos:line="20" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="88"/></argument_list></call></expr>,
		<expr><call><name pos:line="21" pos:column="17">OPT_BOOL<pos:position pos:line="21" pos:column="25"/></name><argument_list pos:line="21" pos:column="25">( <argument><expr><literal type="number" pos:line="21" pos:column="27">0<pos:position pos:line="21" pos:column="28"/></literal></expr></argument> , <argument><expr><literal type="string" pos:line="21" pos:column="31">"stdin-paths"<pos:position pos:line="21" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="46">&amp;<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="47">stdin_paths<pos:position pos:line="21" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="60">N_<pos:position pos:line="21" pos:column="62"/></name><argument_list pos:line="21" pos:column="62">(<argument><expr><literal type="string" pos:line="21" pos:column="63">"read file names from stdin"<pos:position pos:line="21" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="93"/></argument_list></call></expr>,
		<expr><call><name pos:line="22" pos:column="17">OPT_BOOL<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">( <argument><expr><literal type="number" pos:line="22" pos:column="27">0<pos:position pos:line="22" pos:column="28"/></literal></expr></argument> , <argument><expr><literal type="string" pos:line="22" pos:column="31">"no-filters"<pos:position pos:line="22" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="45">&amp;<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="46">no_filters<pos:position pos:line="22" pos:column="56"/></name></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="58">N_<pos:position pos:line="22" pos:column="60"/></name><argument_list pos:line="22" pos:column="60">(<argument><expr><literal type="string" pos:line="22" pos:column="61">"store file as is without filters"<pos:position pos:line="22" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="97"/></argument_list></call></expr>,
		<expr><call><name pos:line="23" pos:column="17">OPT_BOOL<pos:position pos:line="23" pos:column="25"/></name><argument_list pos:line="23" pos:column="25">( <argument><expr><literal type="number" pos:line="23" pos:column="27">0<pos:position pos:line="23" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="30">"literally"<pos:position pos:line="23" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="43">&amp;<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="44">literally<pos:position pos:line="23" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="55">N_<pos:position pos:line="23" pos:column="57"/></name><argument_list pos:line="23" pos:column="57">(<argument><expr><literal type="string" pos:line="23" pos:column="58">"just hash any random garbage to create corrupt objects for debugging Git"<pos:position pos:line="23" pos:column="132"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="133"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="134"/></argument_list></call></expr>,
		<expr><call><name pos:line="24" pos:column="17">OPT_STRING<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">( <argument><expr><literal type="number" pos:line="24" pos:column="29">0<pos:position pos:line="24" pos:column="30"/></literal></expr></argument> , <argument><expr><literal type="string" pos:line="24" pos:column="33">"path"<pos:position pos:line="24" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="24" pos:column="41">&amp;<pos:position pos:line="24" pos:column="46"/></operator><name pos:line="24" pos:column="42">vpath<pos:position pos:line="24" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="49">N_<pos:position pos:line="24" pos:column="51"/></name><argument_list pos:line="24" pos:column="51">(<argument><expr><literal type="string" pos:line="24" pos:column="52">"file"<pos:position pos:line="24" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="61">N_<pos:position pos:line="24" pos:column="63"/></name><argument_list pos:line="24" pos:column="63">(<argument><expr><literal type="string" pos:line="24" pos:column="64">"process file as it were from this path"<pos:position pos:line="24" pos:column="104"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="105"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="106"/></argument_list></call></expr>,
		<macro><name pos:line="25" pos:column="17">OPT_END<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">()<pos:position pos:line="25" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="26" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="26" pos:column="11"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="27" pos:column="9">int<pos:position pos:line="27" pos:column="12"/></name></type> <name pos:line="27" pos:column="13">i<pos:position pos:line="27" pos:column="14"/></name></decl>;<pos:position pos:line="27" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="28" pos:column="9">const<pos:position pos:line="28" pos:column="14"/></specifier> <name pos:line="28" pos:column="15">char<pos:position pos:line="28" pos:column="19"/></name> <modifier pos:line="28" pos:column="20">*<pos:position pos:line="28" pos:column="21"/></modifier></type><name pos:line="28" pos:column="21">errstr<pos:position pos:line="28" pos:column="27"/></name> <init pos:line="28" pos:column="28">= <expr><name pos:line="28" pos:column="30">NULL<pos:position pos:line="28" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="35"/></decl_stmt>

	<expr_stmt><expr><name pos:line="30" pos:column="9">argc<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <call><name pos:line="30" pos:column="16">parse_options<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">argc<pos:position pos:line="30" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="36">argv<pos:position pos:line="30" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="42">NULL<pos:position pos:line="30" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">hash_object_options<pos:position pos:line="30" pos:column="67"/></name></expr></argument>,
			     <argument><expr><name pos:line="31" pos:column="30">hash_object_usage<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="49">0<pos:position pos:line="31" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="52"/></expr_stmt>

	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">flags<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">&amp;<pos:position pos:line="33" pos:column="24"/></operator> <name pos:line="33" pos:column="21">HASH_WRITE_OBJECT<pos:position pos:line="33" pos:column="38"/></name></expr>)<pos:position pos:line="33" pos:column="39"/></condition><then pos:line="33" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="17">prefix<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">=<pos:position pos:line="34" pos:column="25"/></operator> <call><name pos:line="34" pos:column="26">setup_git_directory<pos:position pos:line="34" pos:column="45"/></name><argument_list pos:line="34" pos:column="45">()<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="48"/></expr_stmt></block></then>
	<else pos:line="35" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="17">prefix<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">=<pos:position pos:line="36" pos:column="25"/></operator> <call><name pos:line="36" pos:column="26">setup_git_directory_gently<pos:position pos:line="36" pos:column="52"/></name><argument_list pos:line="36" pos:column="52">(<argument><expr><operator pos:line="36" pos:column="53">&amp;<pos:position pos:line="36" pos:column="58"/></operator><name pos:line="36" pos:column="54">nongit<pos:position pos:line="36" pos:column="60"/></name></expr></argument>)<pos:position pos:line="36" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="62"/></expr_stmt></block></else></if>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">vpath<pos:position pos:line="38" pos:column="18"/></name> <operator pos:line="38" pos:column="19">&amp;&amp;<pos:position pos:line="38" pos:column="29"/></operator> <name pos:line="38" pos:column="22">prefix<pos:position pos:line="38" pos:column="28"/></name></expr>)<pos:position pos:line="38" pos:column="29"/></condition><then pos:line="38" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="17">vpath<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <call><name pos:line="39" pos:column="25">xstrdup<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><call><name pos:line="39" pos:column="33">prefix_filename<pos:position pos:line="39" pos:column="48"/></name><argument_list pos:line="39" pos:column="48">(<argument><expr><name pos:line="39" pos:column="49">prefix<pos:position pos:line="39" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="57">vpath<pos:position pos:line="39" pos:column="62"/></name></expr></argument>)<pos:position pos:line="39" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="65"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="41" pos:column="9">git_config<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">(<argument><expr><name pos:line="41" pos:column="20">git_default_config<pos:position pos:line="41" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="40">NULL<pos:position pos:line="41" pos:column="44"/></name></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="46"/></expr_stmt>

	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">stdin_paths<pos:position pos:line="43" pos:column="24"/></name></expr>)<pos:position pos:line="43" pos:column="25"/></condition><then pos:line="43" pos:column="25"> <block pos:line="43" pos:column="26">{
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">hashstdin<pos:position pos:line="44" pos:column="30"/></name></expr>)<pos:position pos:line="44" pos:column="31"/></condition><then pos:line="44" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="25">errstr<pos:position pos:line="45" pos:column="31"/></name> <operator pos:line="45" pos:column="32">=<pos:position pos:line="45" pos:column="33"/></operator> <literal type="string" pos:line="45" pos:column="34">"Can't use --stdin-paths with --stdin"<pos:position pos:line="45" pos:column="72"/></literal></expr>;<pos:position pos:line="45" pos:column="73"/></expr_stmt></block></then>
		<elseif pos:line="46" pos:column="17">else <if pos:line="46" pos:column="22">if <condition pos:line="46" pos:column="25">(<expr><name pos:line="46" pos:column="26">argc<pos:position pos:line="46" pos:column="30"/></name></expr>)<pos:position pos:line="46" pos:column="31"/></condition><then pos:line="46" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="25">errstr<pos:position pos:line="47" pos:column="31"/></name> <operator pos:line="47" pos:column="32">=<pos:position pos:line="47" pos:column="33"/></operator> <literal type="string" pos:line="47" pos:column="34">"Can't specify files with --stdin-paths"<pos:position pos:line="47" pos:column="74"/></literal></expr>;<pos:position pos:line="47" pos:column="75"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="48" pos:column="17">else <if pos:line="48" pos:column="22">if <condition pos:line="48" pos:column="25">(<expr><name pos:line="48" pos:column="26">vpath<pos:position pos:line="48" pos:column="31"/></name></expr>)<pos:position pos:line="48" pos:column="32"/></condition><then pos:line="48" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="25">errstr<pos:position pos:line="49" pos:column="31"/></name> <operator pos:line="49" pos:column="32">=<pos:position pos:line="49" pos:column="33"/></operator> <literal type="string" pos:line="49" pos:column="34">"Can't use --stdin-paths with --path"<pos:position pos:line="49" pos:column="71"/></literal></expr>;<pos:position pos:line="49" pos:column="72"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="50" pos:column="10"/></block></then>
	<else pos:line="51" pos:column="9">else <block pos:line="51" pos:column="14">{
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">hashstdin<pos:position pos:line="52" pos:column="30"/></name> <operator pos:line="52" pos:column="31">&gt;<pos:position pos:line="52" pos:column="35"/></operator> <literal type="number" pos:line="52" pos:column="33">1<pos:position pos:line="52" pos:column="34"/></literal></expr>)<pos:position pos:line="52" pos:column="35"/></condition><then pos:line="52" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="25">errstr<pos:position pos:line="53" pos:column="31"/></name> <operator pos:line="53" pos:column="32">=<pos:position pos:line="53" pos:column="33"/></operator> <literal type="string" pos:line="53" pos:column="34">"Multiple --stdin arguments are not supported"<pos:position pos:line="53" pos:column="80"/></literal></expr>;<pos:position pos:line="53" pos:column="81"/></expr_stmt></block></then></if>
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name pos:line="54" pos:column="21">vpath<pos:position pos:line="54" pos:column="26"/></name> <operator pos:line="54" pos:column="27">&amp;&amp;<pos:position pos:line="54" pos:column="37"/></operator> <name pos:line="54" pos:column="30">no_filters<pos:position pos:line="54" pos:column="40"/></name></expr>)<pos:position pos:line="54" pos:column="41"/></condition><then pos:line="54" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="25">errstr<pos:position pos:line="55" pos:column="31"/></name> <operator pos:line="55" pos:column="32">=<pos:position pos:line="55" pos:column="33"/></operator> <literal type="string" pos:line="55" pos:column="34">"Can't use --path with --no-filters"<pos:position pos:line="55" pos:column="70"/></literal></expr>;<pos:position pos:line="55" pos:column="71"/></expr_stmt></block></then></if>
	}<pos:position pos:line="56" pos:column="10"/></block></else></if>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">errstr<pos:position pos:line="58" pos:column="19"/></name></expr>)<pos:position pos:line="58" pos:column="20"/></condition><then pos:line="58" pos:column="20"> <block pos:line="58" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">error<pos:position pos:line="59" pos:column="22"/></name><argument_list pos:line="59" pos:column="22">(<argument><expr><literal type="string" pos:line="59" pos:column="23">"%s"<pos:position pos:line="59" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="29">errstr<pos:position pos:line="59" pos:column="35"/></name></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">usage_with_options<pos:position pos:line="60" pos:column="35"/></name><argument_list pos:line="60" pos:column="35">(<argument><expr><name pos:line="60" pos:column="36">hash_object_usage<pos:position pos:line="60" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="55">hash_object_options<pos:position pos:line="60" pos:column="74"/></name></expr></argument>)<pos:position pos:line="60" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="76"/></expr_stmt>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if>

	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">hashstdin<pos:position pos:line="63" pos:column="22"/></name></expr>)<pos:position pos:line="63" pos:column="23"/></condition><then pos:line="63" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="17">hash_fd<pos:position pos:line="64" pos:column="24"/></name><argument_list pos:line="64" pos:column="24">(<argument><expr><literal type="number" pos:line="64" pos:column="25">0<pos:position pos:line="64" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="28">type<pos:position pos:line="64" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="34">vpath<pos:position pos:line="64" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="41">flags<pos:position pos:line="64" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="48">literally<pos:position pos:line="64" pos:column="57"/></name></expr></argument>)<pos:position pos:line="64" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="59"/></expr_stmt></block></then></if>

	<for pos:line="66" pos:column="9">for <control pos:line="66" pos:column="13">(<init><expr><name pos:line="66" pos:column="14">i<pos:position pos:line="66" pos:column="15"/></name> <operator pos:line="66" pos:column="16">=<pos:position pos:line="66" pos:column="17"/></operator> <literal type="number" pos:line="66" pos:column="18">0<pos:position pos:line="66" pos:column="19"/></literal></expr> ;<pos:position pos:line="66" pos:column="21"/></init> <condition><expr><name pos:line="66" pos:column="22">i<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">&lt;<pos:position pos:line="66" pos:column="28"/></operator> <name pos:line="66" pos:column="26">argc<pos:position pos:line="66" pos:column="30"/></name></expr>;<pos:position pos:line="66" pos:column="31"/></condition> <incr><expr><name pos:line="66" pos:column="32">i<pos:position pos:line="66" pos:column="33"/></name><operator pos:line="66" pos:column="33">++<pos:position pos:line="66" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="66" pos:column="36"/></control> <block pos:line="66" pos:column="37">{
		<decl_stmt><decl><type><specifier pos:line="67" pos:column="17">const<pos:position pos:line="67" pos:column="22"/></specifier> <name pos:line="67" pos:column="23">char<pos:position pos:line="67" pos:column="27"/></name> <modifier pos:line="67" pos:column="28">*<pos:position pos:line="67" pos:column="29"/></modifier></type><name pos:line="67" pos:column="29">arg<pos:position pos:line="67" pos:column="32"/></name> <init pos:line="67" pos:column="33">= <expr><name><name pos:line="67" pos:column="35">argv<pos:position pos:line="67" pos:column="39"/></name><index pos:line="67" pos:column="39">[<expr><name pos:line="67" pos:column="40">i<pos:position pos:line="67" pos:column="41"/></name></expr>]<pos:position pos:line="67" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="67" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="68" pos:column="17">char<pos:position pos:line="68" pos:column="21"/></name> <modifier pos:line="68" pos:column="22">*<pos:position pos:line="68" pos:column="23"/></modifier></type><name pos:line="68" pos:column="23">to_free<pos:position pos:line="68" pos:column="30"/></name> <init pos:line="68" pos:column="31">= <expr><name pos:line="68" pos:column="33">NULL<pos:position pos:line="68" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="68" pos:column="38"/></decl_stmt>

		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><name pos:line="70" pos:column="21">prefix<pos:position pos:line="70" pos:column="27"/></name></expr>)<pos:position pos:line="70" pos:column="28"/></condition><then pos:line="70" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="25">arg<pos:position pos:line="71" pos:column="28"/></name> <operator pos:line="71" pos:column="29">=<pos:position pos:line="71" pos:column="30"/></operator> <name pos:line="71" pos:column="31">to_free<pos:position pos:line="71" pos:column="38"/></name> <operator pos:line="71" pos:column="39">=<pos:position pos:line="71" pos:column="40"/></operator> <call><name pos:line="71" pos:column="41">prefix_filename<pos:position pos:line="71" pos:column="56"/></name><argument_list pos:line="71" pos:column="56">(<argument><expr><name pos:line="71" pos:column="57">prefix<pos:position pos:line="71" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="65">arg<pos:position pos:line="71" pos:column="68"/></name></expr></argument>)<pos:position pos:line="71" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="70"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">hash_object<pos:position pos:line="72" pos:column="28"/></name><argument_list pos:line="72" pos:column="28">(<argument><expr><name pos:line="72" pos:column="29">arg<pos:position pos:line="72" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="34">type<pos:position pos:line="72" pos:column="38"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="72" pos:column="40">no_filters<pos:position pos:line="72" pos:column="50"/></name></expr> ?<pos:position pos:line="72" pos:column="52"/></condition><then pos:line="72" pos:column="52"> <expr><name pos:line="72" pos:column="53">NULL<pos:position pos:line="72" pos:column="57"/></name></expr> <pos:position pos:line="72" pos:column="58"/></then><else pos:line="72" pos:column="58">: <expr><ternary><condition><expr><name pos:line="72" pos:column="60">vpath<pos:position pos:line="72" pos:column="65"/></name></expr> ?<pos:position pos:line="72" pos:column="67"/></condition><then pos:line="72" pos:column="67"> <expr><name pos:line="72" pos:column="68">vpath<pos:position pos:line="72" pos:column="73"/></name></expr> <pos:position pos:line="72" pos:column="74"/></then><else pos:line="72" pos:column="74">: <expr><name pos:line="72" pos:column="76">arg<pos:position pos:line="72" pos:column="79"/></name></expr></else></ternary></expr></else></ternary></expr></argument>,
			    <argument><expr><name pos:line="73" pos:column="29">flags<pos:position pos:line="73" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="36">literally<pos:position pos:line="73" pos:column="45"/></name></expr></argument>)<pos:position pos:line="73" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">free<pos:position pos:line="74" pos:column="21"/></name><argument_list pos:line="74" pos:column="21">(<argument><expr><name pos:line="74" pos:column="22">to_free<pos:position pos:line="74" pos:column="29"/></name></expr></argument>)<pos:position pos:line="74" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="75" pos:column="10"/></block></for>

	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><name pos:line="77" pos:column="13">stdin_paths<pos:position pos:line="77" pos:column="24"/></name></expr>)<pos:position pos:line="77" pos:column="25"/></condition><then pos:line="77" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="17">hash_stdin_paths<pos:position pos:line="78" pos:column="33"/></name><argument_list pos:line="78" pos:column="33">(<argument><expr><name pos:line="78" pos:column="34">type<pos:position pos:line="78" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="40">no_filters<pos:position pos:line="78" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="52">flags<pos:position pos:line="78" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="59">literally<pos:position pos:line="78" pos:column="68"/></name></expr></argument>)<pos:position pos:line="78" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="70"/></expr_stmt></block></then></if>

	<return pos:line="80" pos:column="9">return <expr><literal type="number" pos:line="80" pos:column="16">0<pos:position pos:line="80" pos:column="17"/></literal></expr>;<pos:position pos:line="80" pos:column="18"/></return>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
