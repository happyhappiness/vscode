<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3056_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">apply_item_command<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">trailer_item<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">in_tok<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="61">struct<pos:position pos:line="1" pos:column="67"/></name> <name pos:line="1" pos:column="68">arg_item<pos:position pos:line="1" pos:column="76"/></name></name> <modifier pos:line="1" pos:column="77">*<pos:position pos:line="1" pos:column="78"/></modifier></type><name pos:line="1" pos:column="78">arg_tok<pos:position pos:line="1" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="86"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name><name pos:line="3" pos:column="13">arg_tok<pos:position pos:line="3" pos:column="20"/></name><operator pos:line="3" pos:column="20">-&gt;<pos:position pos:line="3" pos:column="25"/></operator><name pos:line="3" pos:column="22">conf<pos:position pos:line="3" pos:column="26"/></name><operator pos:line="3" pos:column="26">.<pos:position pos:line="3" pos:column="27"/></operator><name pos:line="3" pos:column="27">command<pos:position pos:line="3" pos:column="34"/></name></name></expr>)<pos:position pos:line="3" pos:column="35"/></condition><then pos:line="3" pos:column="35"> <block pos:line="3" pos:column="36">{
		<decl_stmt><decl><type><specifier pos:line="4" pos:column="17">const<pos:position pos:line="4" pos:column="22"/></specifier> <name pos:line="4" pos:column="23">char<pos:position pos:line="4" pos:column="27"/></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">arg<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
		<if pos:line="5" pos:column="17">if <condition pos:line="5" pos:column="20">(<expr><name><name pos:line="5" pos:column="21">arg_tok<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">-&gt;<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="30">value<pos:position pos:line="5" pos:column="35"/></name></name> <operator pos:line="5" pos:column="36">&amp;&amp;<pos:position pos:line="5" pos:column="46"/></operator> <name><name pos:line="5" pos:column="39">arg_tok<pos:position pos:line="5" pos:column="46"/></name><operator pos:line="5" pos:column="46">-&gt;<pos:position pos:line="5" pos:column="51"/></operator><name pos:line="5" pos:column="48">value<pos:position pos:line="5" pos:column="53"/></name><index pos:line="5" pos:column="53">[<expr><literal type="number" pos:line="5" pos:column="54">0<pos:position pos:line="5" pos:column="55"/></literal></expr>]<pos:position pos:line="5" pos:column="56"/></index></name></expr>)<pos:position pos:line="5" pos:column="57"/></condition><then pos:line="5" pos:column="57"> <block pos:line="5" pos:column="58">{
			<expr_stmt><expr><name pos:line="6" pos:column="25">arg<pos:position pos:line="6" pos:column="28"/></name> <operator pos:line="6" pos:column="29">=<pos:position pos:line="6" pos:column="30"/></operator> <name><name pos:line="6" pos:column="31">arg_tok<pos:position pos:line="6" pos:column="38"/></name><operator pos:line="6" pos:column="38">-&gt;<pos:position pos:line="6" pos:column="43"/></operator><name pos:line="6" pos:column="40">value<pos:position pos:line="6" pos:column="45"/></name></name></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="7" pos:column="18"/></block></then> <else pos:line="7" pos:column="19">else <block pos:line="7" pos:column="24">{
			<if pos:line="8" pos:column="25">if <condition pos:line="8" pos:column="28">(<expr><name pos:line="8" pos:column="29">in_tok<pos:position pos:line="8" pos:column="35"/></name> <operator pos:line="8" pos:column="36">&amp;&amp;<pos:position pos:line="8" pos:column="46"/></operator> <name><name pos:line="8" pos:column="39">in_tok<pos:position pos:line="8" pos:column="45"/></name><operator pos:line="8" pos:column="45">-&gt;<pos:position pos:line="8" pos:column="50"/></operator><name pos:line="8" pos:column="47">value<pos:position pos:line="8" pos:column="52"/></name></name></expr>)<pos:position pos:line="8" pos:column="53"/></condition><then pos:line="8" pos:column="53">
				<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="33">arg<pos:position pos:line="9" pos:column="36"/></name> <operator pos:line="9" pos:column="37">=<pos:position pos:line="9" pos:column="38"/></operator> <call><name pos:line="9" pos:column="39">xstrdup<pos:position pos:line="9" pos:column="46"/></name><argument_list pos:line="9" pos:column="46">(<argument><expr><name><name pos:line="9" pos:column="47">in_tok<pos:position pos:line="9" pos:column="53"/></name><operator pos:line="9" pos:column="53">-&gt;<pos:position pos:line="9" pos:column="58"/></operator><name pos:line="9" pos:column="55">value<pos:position pos:line="9" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="62"/></expr_stmt></block></then>
			<else pos:line="10" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="33">arg<pos:position pos:line="11" pos:column="36"/></name> <operator pos:line="11" pos:column="37">=<pos:position pos:line="11" pos:column="38"/></operator> <call><name pos:line="11" pos:column="39">xstrdup<pos:position pos:line="11" pos:column="46"/></name><argument_list pos:line="11" pos:column="46">(<argument><expr><literal type="string" pos:line="11" pos:column="47">""<pos:position pos:line="11" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt></block></else></if>
		}<pos:position pos:line="12" pos:column="18"/></block></else></if>
		<expr_stmt><expr><name><name pos:line="13" pos:column="17">arg_tok<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">value<pos:position pos:line="13" pos:column="31"/></name></name> <operator pos:line="13" pos:column="32">=<pos:position pos:line="13" pos:column="33"/></operator> <call><name pos:line="13" pos:column="34">apply_command<pos:position pos:line="13" pos:column="47"/></name><argument_list pos:line="13" pos:column="47">(<argument><expr><name><name pos:line="13" pos:column="48">arg_tok<pos:position pos:line="13" pos:column="55"/></name><operator pos:line="13" pos:column="55">-&gt;<pos:position pos:line="13" pos:column="60"/></operator><name pos:line="13" pos:column="57">conf<pos:position pos:line="13" pos:column="61"/></name><operator pos:line="13" pos:column="61">.<pos:position pos:line="13" pos:column="62"/></operator><name pos:line="13" pos:column="62">command<pos:position pos:line="13" pos:column="69"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="71">arg<pos:position pos:line="13" pos:column="74"/></name></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">free<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><operator pos:line="14" pos:column="22">(<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="23">char<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">*<pos:position pos:line="14" pos:column="29"/></operator><operator pos:line="14" pos:column="29">)<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="30">arg<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
