<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1496.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">count_objects<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">DIR<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">d<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">path<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">int<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">len<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">verbose<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="2" pos:column="27">unsigned<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">long<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">loose<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="3" pos:column="27">off_t<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">loose_size<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="4" pos:column="27">unsigned<pos:position pos:line="4" pos:column="35"/></name> <name pos:line="4" pos:column="36">long<pos:position pos:line="4" pos:column="40"/></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier></type><name pos:line="4" pos:column="42">packed_loose<pos:position pos:line="4" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="55"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">dirent<pos:position pos:line="6" pos:column="22"/></name></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">ent<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><operator pos:line="7" pos:column="16">(<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">ent<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">=<pos:position pos:line="7" pos:column="22"/></operator> <call><name pos:line="7" pos:column="23">readdir<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><name pos:line="7" pos:column="31">d<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call><operator pos:line="7" pos:column="33">)<pos:position pos:line="7" pos:column="34"/></operator> <operator pos:line="7" pos:column="35">!=<pos:position pos:line="7" pos:column="37"/></operator> <name pos:line="7" pos:column="38">NULL<pos:position pos:line="7" pos:column="42"/></name></expr>)<pos:position pos:line="7" pos:column="43"/></condition> <block pos:line="7" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">char<pos:position pos:line="8" pos:column="21"/></name></type> <name><name pos:line="8" pos:column="22">hex<pos:position pos:line="8" pos:column="25"/></name><index pos:line="8" pos:column="25">[<expr><literal type="number" pos:line="8" pos:column="26">41<pos:position pos:line="8" pos:column="28"/></literal></expr>]<pos:position pos:line="8" pos:column="29"/></index></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">unsigned<pos:position pos:line="9" pos:column="25"/></name> <name pos:line="9" pos:column="26">char<pos:position pos:line="9" pos:column="30"/></name></type> <name><name pos:line="9" pos:column="31">sha1<pos:position pos:line="9" pos:column="35"/></name><index pos:line="9" pos:column="35">[<expr><literal type="number" pos:line="9" pos:column="36">20<pos:position pos:line="9" pos:column="38"/></literal></expr>]<pos:position pos:line="9" pos:column="39"/></index></name></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="10" pos:column="17">const<pos:position pos:line="10" pos:column="22"/></specifier> <name pos:line="10" pos:column="23">char<pos:position pos:line="10" pos:column="27"/></name> <modifier pos:line="10" pos:column="28">*<pos:position pos:line="10" pos:column="29"/></modifier></type><name pos:line="10" pos:column="29">cp<pos:position pos:line="10" pos:column="31"/></name></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">bad<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><literal type="number" pos:line="11" pos:column="27">0<pos:position pos:line="11" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>

		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><call><name pos:line="13" pos:column="21">is_dot_or_dotdot<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name><name pos:line="13" pos:column="38">ent<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">-&gt;<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="43">d_name<pos:position pos:line="13" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="51"/></condition><then pos:line="13" pos:column="51">
			<block type="pseudo"><continue pos:line="14" pos:column="25">continue;<pos:position pos:line="14" pos:column="34"/></continue></block></then></if>
		<for pos:line="15" pos:column="17">for <control pos:line="15" pos:column="21">(<init><expr><name pos:line="15" pos:column="22">cp<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">=<pos:position pos:line="15" pos:column="26"/></operator> <name><name pos:line="15" pos:column="27">ent<pos:position pos:line="15" pos:column="30"/></name><operator pos:line="15" pos:column="30">-&gt;<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="32">d_name<pos:position pos:line="15" pos:column="38"/></name></name></expr>;<pos:position pos:line="15" pos:column="39"/></init> <condition><expr><operator pos:line="15" pos:column="40">*<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="41">cp<pos:position pos:line="15" pos:column="43"/></name></expr>;<pos:position pos:line="15" pos:column="44"/></condition> <incr><expr><name pos:line="15" pos:column="45">cp<pos:position pos:line="15" pos:column="47"/></name><operator pos:line="15" pos:column="47">++<pos:position pos:line="15" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="15" pos:column="50"/></control> <block pos:line="15" pos:column="51">{
			<decl_stmt><decl><type><name pos:line="16" pos:column="25">int<pos:position pos:line="16" pos:column="28"/></name></type> <name pos:line="16" pos:column="29">ch<pos:position pos:line="16" pos:column="31"/></name> <init pos:line="16" pos:column="32">= <expr><operator pos:line="16" pos:column="34">*<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="35">cp<pos:position pos:line="16" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="38"/></decl_stmt>
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><operator pos:line="17" pos:column="29">(<pos:position pos:line="17" pos:column="30"/></operator><literal type="char" pos:line="17" pos:column="30">'0'<pos:position pos:line="17" pos:column="33"/></literal> <operator pos:line="17" pos:column="34">&lt;=<pos:position pos:line="17" pos:column="39"/></operator> <name pos:line="17" pos:column="37">ch<pos:position pos:line="17" pos:column="39"/></name> <operator pos:line="17" pos:column="40">&amp;&amp;<pos:position pos:line="17" pos:column="50"/></operator> <name pos:line="17" pos:column="43">ch<pos:position pos:line="17" pos:column="45"/></name> <operator pos:line="17" pos:column="46">&lt;=<pos:position pos:line="17" pos:column="51"/></operator> <literal type="char" pos:line="17" pos:column="49">'9'<pos:position pos:line="17" pos:column="52"/></literal><operator pos:line="17" pos:column="52">)<pos:position pos:line="17" pos:column="53"/></operator> <operator pos:line="17" pos:column="54">||<pos:position pos:line="17" pos:column="56"/></operator>
			    <operator pos:line="18" pos:column="29">(<pos:position pos:line="18" pos:column="30"/></operator><literal type="char" pos:line="18" pos:column="30">'a'<pos:position pos:line="18" pos:column="33"/></literal> <operator pos:line="18" pos:column="34">&lt;=<pos:position pos:line="18" pos:column="39"/></operator> <name pos:line="18" pos:column="37">ch<pos:position pos:line="18" pos:column="39"/></name> <operator pos:line="18" pos:column="40">&amp;&amp;<pos:position pos:line="18" pos:column="50"/></operator> <name pos:line="18" pos:column="43">ch<pos:position pos:line="18" pos:column="45"/></name> <operator pos:line="18" pos:column="46">&lt;=<pos:position pos:line="18" pos:column="51"/></operator> <literal type="char" pos:line="18" pos:column="49">'f'<pos:position pos:line="18" pos:column="52"/></literal><operator pos:line="18" pos:column="52">)<pos:position pos:line="18" pos:column="53"/></operator></expr>)<pos:position pos:line="18" pos:column="54"/></condition><then pos:line="18" pos:column="54">
				<block type="pseudo"><continue pos:line="19" pos:column="33">continue;<pos:position pos:line="19" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="20" pos:column="25">bad<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">=<pos:position pos:line="20" pos:column="30"/></operator> <literal type="number" pos:line="20" pos:column="31">1<pos:position pos:line="20" pos:column="32"/></literal></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
			<break pos:line="21" pos:column="25">break;<pos:position pos:line="21" pos:column="31"/></break>
		}<pos:position pos:line="22" pos:column="18"/></block></for>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">cp<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">-<pos:position pos:line="23" pos:column="25"/></operator> <name><name pos:line="23" pos:column="26">ent<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">-&gt;<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="31">d_name<pos:position pos:line="23" pos:column="37"/></name></name> <operator pos:line="23" pos:column="38">!=<pos:position pos:line="23" pos:column="40"/></operator> <literal type="number" pos:line="23" pos:column="41">38<pos:position pos:line="23" pos:column="43"/></literal></expr>)<pos:position pos:line="23" pos:column="44"/></condition><then pos:line="23" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="25">bad<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <literal type="number" pos:line="24" pos:column="31">1<pos:position pos:line="24" pos:column="32"/></literal></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt></block></then>
		<else pos:line="25" pos:column="17">else <block pos:line="25" pos:column="22">{
			<decl_stmt><decl><type><name><name pos:line="26" pos:column="25">struct<pos:position pos:line="26" pos:column="31"/></name> <name pos:line="26" pos:column="32">stat<pos:position pos:line="26" pos:column="36"/></name></name></type> <name pos:line="26" pos:column="37">st<pos:position pos:line="26" pos:column="39"/></name></decl>;<pos:position pos:line="26" pos:column="40"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">memcpy<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">path<pos:position pos:line="27" pos:column="36"/></name> <operator pos:line="27" pos:column="37">+<pos:position pos:line="27" pos:column="38"/></operator> <name pos:line="27" pos:column="39">len<pos:position pos:line="27" pos:column="42"/></name> <operator pos:line="27" pos:column="43">+<pos:position pos:line="27" pos:column="44"/></operator> <literal type="number" pos:line="27" pos:column="45">3<pos:position pos:line="27" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="48">ent<pos:position pos:line="27" pos:column="51"/></name><operator pos:line="27" pos:column="51">-&gt;<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="53">d_name<pos:position pos:line="27" pos:column="59"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="61">38<pos:position pos:line="27" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="28" pos:column="25">path<pos:position pos:line="28" pos:column="29"/></name><index pos:line="28" pos:column="29">[<expr><name pos:line="28" pos:column="30">len<pos:position pos:line="28" pos:column="33"/></name> <operator pos:line="28" pos:column="34">+<pos:position pos:line="28" pos:column="35"/></operator> <literal type="number" pos:line="28" pos:column="36">2<pos:position pos:line="28" pos:column="37"/></literal></expr>]<pos:position pos:line="28" pos:column="38"/></index></name> <operator pos:line="28" pos:column="39">=<pos:position pos:line="28" pos:column="40"/></operator> <literal type="char" pos:line="28" pos:column="41">'/'<pos:position pos:line="28" pos:column="44"/></literal></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="29" pos:column="25">path<pos:position pos:line="29" pos:column="29"/></name><index pos:line="29" pos:column="29">[<expr><name pos:line="29" pos:column="30">len<pos:position pos:line="29" pos:column="33"/></name> <operator pos:line="29" pos:column="34">+<pos:position pos:line="29" pos:column="35"/></operator> <literal type="number" pos:line="29" pos:column="36">41<pos:position pos:line="29" pos:column="38"/></literal></expr>]<pos:position pos:line="29" pos:column="39"/></index></name> <operator pos:line="29" pos:column="40">=<pos:position pos:line="29" pos:column="41"/></operator> <literal type="number" pos:line="29" pos:column="42">0<pos:position pos:line="29" pos:column="43"/></literal></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><call><name pos:line="30" pos:column="29">lstat<pos:position pos:line="30" pos:column="34"/></name><argument_list pos:line="30" pos:column="34">(<argument><expr><name pos:line="30" pos:column="35">path<pos:position pos:line="30" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="41">&amp;<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="42">st<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call> <operator pos:line="30" pos:column="46">||<pos:position pos:line="30" pos:column="48"/></operator> <operator pos:line="30" pos:column="49">!<pos:position pos:line="30" pos:column="50"/></operator><call><name pos:line="30" pos:column="50">S_ISREG<pos:position pos:line="30" pos:column="57"/></name><argument_list pos:line="30" pos:column="57">(<argument><expr><name><name pos:line="30" pos:column="58">st<pos:position pos:line="30" pos:column="60"/></name><operator pos:line="30" pos:column="60">.<pos:position pos:line="30" pos:column="61"/></operator><name pos:line="30" pos:column="61">st_mode<pos:position pos:line="30" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="70"/></condition><then pos:line="30" pos:column="70">
				<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="33">bad<pos:position pos:line="31" pos:column="36"/></name> <operator pos:line="31" pos:column="37">=<pos:position pos:line="31" pos:column="38"/></operator> <literal type="number" pos:line="31" pos:column="39">1<pos:position pos:line="31" pos:column="40"/></literal></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt></block></then>
			<else pos:line="32" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><operator pos:line="33" pos:column="33">(<pos:position pos:line="33" pos:column="34"/></operator><operator pos:line="33" pos:column="34">*<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="35">loose_size<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">)<pos:position pos:line="33" pos:column="46"/></operator> <operator pos:line="33" pos:column="47">+=<pos:position pos:line="33" pos:column="49"/></operator> <call><name pos:line="33" pos:column="50">xsize_t<pos:position pos:line="33" pos:column="57"/></name><argument_list pos:line="33" pos:column="57">(<argument><expr><call><name pos:line="33" pos:column="58">on_disk_bytes<pos:position pos:line="33" pos:column="71"/></name><argument_list pos:line="33" pos:column="71">(<argument><expr><name pos:line="33" pos:column="72">st<pos:position pos:line="33" pos:column="74"/></name></expr></argument>)<pos:position pos:line="33" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="77"/></expr_stmt></block></else></if>
		}<pos:position pos:line="34" pos:column="18"/></block></else></if>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">bad<pos:position pos:line="35" pos:column="24"/></name></expr>)<pos:position pos:line="35" pos:column="25"/></condition><then pos:line="35" pos:column="25"> <block pos:line="35" pos:column="26">{
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name pos:line="36" pos:column="29">verbose<pos:position pos:line="36" pos:column="36"/></name></expr>)<pos:position pos:line="36" pos:column="37"/></condition><then pos:line="36" pos:column="37"> <block pos:line="36" pos:column="38">{
				<decl_stmt><decl><type><name><name pos:line="37" pos:column="33">struct<pos:position pos:line="37" pos:column="39"/></name> <name pos:line="37" pos:column="40">strbuf<pos:position pos:line="37" pos:column="46"/></name></name></type> <name pos:line="37" pos:column="47">sb<pos:position pos:line="37" pos:column="49"/></name> <init pos:line="37" pos:column="50">= <expr><name pos:line="37" pos:column="52">STRBUF_INIT<pos:position pos:line="37" pos:column="63"/></name></expr></init></decl>;<pos:position pos:line="37" pos:column="64"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="38" pos:column="33">strbuf_addf<pos:position pos:line="38" pos:column="44"/></name><argument_list pos:line="38" pos:column="44">(<argument><expr><operator pos:line="38" pos:column="45">&amp;<pos:position pos:line="38" pos:column="50"/></operator><name pos:line="38" pos:column="46">sb<pos:position pos:line="38" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="50">"%.*s/%s"<pos:position pos:line="38" pos:column="59"/></literal></expr></argument>,
					    <argument><expr><name pos:line="39" pos:column="45">len<pos:position pos:line="39" pos:column="48"/></name> <operator pos:line="39" pos:column="49">+<pos:position pos:line="39" pos:column="50"/></operator> <literal type="number" pos:line="39" pos:column="51">2<pos:position pos:line="39" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="54">path<pos:position pos:line="39" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="60">ent<pos:position pos:line="39" pos:column="63"/></name><operator pos:line="39" pos:column="63">-&gt;<pos:position pos:line="39" pos:column="68"/></operator><name pos:line="39" pos:column="65">d_name<pos:position pos:line="39" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="73"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="40" pos:column="33">report_garbage<pos:position pos:line="40" pos:column="47"/></name><argument_list pos:line="40" pos:column="47">(<argument><expr><literal type="string" pos:line="40" pos:column="48">"garbage found"<pos:position pos:line="40" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="65">sb<pos:position pos:line="40" pos:column="67"/></name><operator pos:line="40" pos:column="67">.<pos:position pos:line="40" pos:column="68"/></operator><name pos:line="40" pos:column="68">buf<pos:position pos:line="40" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="73"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="41" pos:column="33">strbuf_release<pos:position pos:line="41" pos:column="47"/></name><argument_list pos:line="41" pos:column="47">(<argument><expr><operator pos:line="41" pos:column="48">&amp;<pos:position pos:line="41" pos:column="53"/></operator><name pos:line="41" pos:column="49">sb<pos:position pos:line="41" pos:column="51"/></name></expr></argument>)<pos:position pos:line="41" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="53"/></expr_stmt>
			}<pos:position pos:line="42" pos:column="26"/></block></then></if>
			<continue pos:line="43" pos:column="25">continue;<pos:position pos:line="43" pos:column="34"/></continue>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>
		<expr_stmt><expr><operator pos:line="45" pos:column="17">(<pos:position pos:line="45" pos:column="18"/></operator><operator pos:line="45" pos:column="18">*<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="19">loose<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">)<pos:position pos:line="45" pos:column="25"/></operator><operator pos:line="45" pos:column="25">++<pos:position pos:line="45" pos:column="27"/></operator></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><operator pos:line="46" pos:column="21">!<pos:position pos:line="46" pos:column="22"/></operator><name pos:line="46" pos:column="22">verbose<pos:position pos:line="46" pos:column="29"/></name></expr>)<pos:position pos:line="46" pos:column="30"/></condition><then pos:line="46" pos:column="30">
			<block type="pseudo"><continue pos:line="47" pos:column="25">continue;<pos:position pos:line="47" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">memcpy<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><name pos:line="48" pos:column="24">hex<pos:position pos:line="48" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="29">path<pos:position pos:line="48" pos:column="33"/></name><operator pos:line="48" pos:column="33">+<pos:position pos:line="48" pos:column="34"/></operator><name pos:line="48" pos:column="34">len<pos:position pos:line="48" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="39">2<pos:position pos:line="48" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">memcpy<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><name pos:line="49" pos:column="24">hex<pos:position pos:line="49" pos:column="27"/></name><operator pos:line="49" pos:column="27">+<pos:position pos:line="49" pos:column="28"/></operator><literal type="number" pos:line="49" pos:column="28">2<pos:position pos:line="49" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="31">ent<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">-&gt;<pos:position pos:line="49" pos:column="39"/></operator><name pos:line="49" pos:column="36">d_name<pos:position pos:line="49" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="44">38<pos:position pos:line="49" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="50" pos:column="17">hex<pos:position pos:line="50" pos:column="20"/></name><index pos:line="50" pos:column="20">[<expr><literal type="number" pos:line="50" pos:column="21">40<pos:position pos:line="50" pos:column="23"/></literal></expr>]<pos:position pos:line="50" pos:column="24"/></index></name> <operator pos:line="50" pos:column="25">=<pos:position pos:line="50" pos:column="26"/></operator> <literal type="number" pos:line="50" pos:column="27">0<pos:position pos:line="50" pos:column="28"/></literal></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><call><name pos:line="51" pos:column="21">get_sha1_hex<pos:position pos:line="51" pos:column="33"/></name><argument_list pos:line="51" pos:column="33">(<argument><expr><name pos:line="51" pos:column="34">hex<pos:position pos:line="51" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="39">sha1<pos:position pos:line="51" pos:column="43"/></name></expr></argument>)<pos:position pos:line="51" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="45"/></condition><then pos:line="51" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="25">die<pos:position pos:line="52" pos:column="28"/></name><argument_list pos:line="52" pos:column="28">(<argument><expr><literal type="string" pos:line="52" pos:column="29">"internal error"<pos:position pos:line="52" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="47"/></expr_stmt></block></then></if>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><call><name pos:line="53" pos:column="21">has_sha1_pack<pos:position pos:line="53" pos:column="34"/></name><argument_list pos:line="53" pos:column="34">(<argument><expr><name pos:line="53" pos:column="35">sha1<pos:position pos:line="53" pos:column="39"/></name></expr></argument>)<pos:position pos:line="53" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="41"/></condition><then pos:line="53" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="54" pos:column="25">(<pos:position pos:line="54" pos:column="26"/></operator><operator pos:line="54" pos:column="26">*<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="27">packed_loose<pos:position pos:line="54" pos:column="39"/></name><operator pos:line="54" pos:column="39">)<pos:position pos:line="54" pos:column="40"/></operator><operator pos:line="54" pos:column="40">++<pos:position pos:line="54" pos:column="42"/></operator></expr>;<pos:position pos:line="54" pos:column="43"/></expr_stmt></block></then></if>
	}<pos:position pos:line="55" pos:column="10"/></block></while>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
