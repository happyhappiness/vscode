<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_536.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">find_common<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">fetch_pack_args<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">args<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
		       <parameter><decl><type><name pos:line="2" pos:column="24">int<pos:position pos:line="2" pos:column="27"/></name></type> <name><name pos:line="2" pos:column="28">fd<pos:position pos:line="2" pos:column="30"/></name><index pos:line="2" pos:column="30">[<expr><literal type="number" pos:line="2" pos:column="31">2<pos:position pos:line="2" pos:column="32"/></literal></expr>]<pos:position pos:line="2" pos:column="33"/></index></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="35">unsigned<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">result_sha1<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>,
		       <parameter><decl><type><name><name pos:line="3" pos:column="24">struct<pos:position pos:line="3" pos:column="30"/></name> <name pos:line="3" pos:column="31">ref<pos:position pos:line="3" pos:column="34"/></name></name> <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier></type><name pos:line="3" pos:column="36">refs<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="41"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">fetching<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">count<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="24">flushes<pos:position pos:line="6" pos:column="31"/></name> <init pos:line="6" pos:column="32">= <expr><literal type="number" pos:line="6" pos:column="34">0<pos:position pos:line="6" pos:column="35"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="37">flush_at<pos:position pos:line="6" pos:column="45"/></name> <init pos:line="6" pos:column="46">= <expr><name pos:line="6" pos:column="48">INITIAL_FLUSH<pos:position pos:line="6" pos:column="61"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="63">retval<pos:position pos:line="6" pos:column="69"/></name></decl>;<pos:position pos:line="6" pos:column="70"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">unsigned<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">char<pos:position pos:line="7" pos:column="28"/></name> <modifier pos:line="7" pos:column="29">*<pos:position pos:line="7" pos:column="30"/></modifier></type><name pos:line="7" pos:column="30">sha1<pos:position pos:line="7" pos:column="34"/></name></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">in_vain<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><literal type="number" pos:line="8" pos:column="28">0<pos:position pos:line="8" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">got_continue<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><literal type="number" pos:line="9" pos:column="28">0<pos:position pos:line="9" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">got_ready<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><literal type="number" pos:line="10" pos:column="25">0<pos:position pos:line="10" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">strbuf<pos:position pos:line="11" pos:column="22"/></name></name></type> <name pos:line="11" pos:column="23">req_buf<pos:position pos:line="11" pos:column="30"/></name> <init pos:line="11" pos:column="31">= <expr><name pos:line="11" pos:column="33">STRBUF_INIT<pos:position pos:line="11" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">size_t<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">state_len<pos:position pos:line="12" pos:column="25"/></name> <init pos:line="12" pos:column="26">= <expr><literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name><name pos:line="14" pos:column="13">args<pos:position pos:line="14" pos:column="17"/></name><operator pos:line="14" pos:column="17">-&gt;<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="19">stateless_rpc<pos:position pos:line="14" pos:column="32"/></name></name> <operator pos:line="14" pos:column="33">&amp;&amp;<pos:position pos:line="14" pos:column="43"/></operator> <name pos:line="14" pos:column="36">multi_ack<pos:position pos:line="14" pos:column="45"/></name> <operator pos:line="14" pos:column="46">==<pos:position pos:line="14" pos:column="48"/></operator> <literal type="number" pos:line="14" pos:column="49">1<pos:position pos:line="14" pos:column="50"/></literal></expr>)<pos:position pos:line="14" pos:column="51"/></condition><then pos:line="14" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">die<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><literal type="string" pos:line="15" pos:column="21">"--stateless-rpc requires multi_ack_detailed"<pos:position pos:line="15" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="68"/></expr_stmt></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">marked<pos:position pos:line="16" pos:column="19"/></name></expr>)<pos:position pos:line="16" pos:column="20"/></condition><then pos:line="16" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">for_each_ref<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">clear_marks<pos:position pos:line="17" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="43">NULL<pos:position pos:line="17" pos:column="47"/></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="18" pos:column="9">marked<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <literal type="number" pos:line="18" pos:column="18">1<pos:position pos:line="18" pos:column="19"/></literal></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="20" pos:column="9">for_each_ref<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">rev_list_insert_ref_oid<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">NULL<pos:position pos:line="20" pos:column="51"/></name></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">for_each_alternate_ref<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">insert_one_alternate_ref<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="58">NULL<pos:position pos:line="21" pos:column="62"/></name></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="64"/></expr_stmt>

	<expr_stmt><expr><name pos:line="23" pos:column="9">fetching<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <literal type="number" pos:line="23" pos:column="20">0<pos:position pos:line="23" pos:column="21"/></literal></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt>
	<for pos:line="24" pos:column="9">for <control pos:line="24" pos:column="13">( <init pos:line="24" pos:column="15">;<pos:position pos:line="24" pos:column="16"/></init> <condition><expr><name pos:line="24" pos:column="17">refs<pos:position pos:line="24" pos:column="21"/></name></expr> ;<pos:position pos:line="24" pos:column="23"/></condition> <incr><expr><name pos:line="24" pos:column="24">refs<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <name><name pos:line="24" pos:column="31">refs<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">-&gt;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="37">next<pos:position pos:line="24" pos:column="41"/></name></name></expr></incr>)<pos:position pos:line="24" pos:column="42"/></control> <block pos:line="24" pos:column="43">{
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">unsigned<pos:position pos:line="25" pos:column="25"/></name> <name pos:line="25" pos:column="26">char<pos:position pos:line="25" pos:column="30"/></name> <modifier pos:line="25" pos:column="31">*<pos:position pos:line="25" pos:column="32"/></modifier></type><name pos:line="25" pos:column="32">remote<pos:position pos:line="25" pos:column="38"/></name> <init pos:line="25" pos:column="39">= <expr><name><name pos:line="25" pos:column="41">refs<pos:position pos:line="25" pos:column="45"/></name><operator pos:line="25" pos:column="45">-&gt;<pos:position pos:line="25" pos:column="50"/></operator><name pos:line="25" pos:column="47">old_oid<pos:position pos:line="25" pos:column="54"/></name><operator pos:line="25" pos:column="54">.<pos:position pos:line="25" pos:column="55"/></operator><name pos:line="25" pos:column="55">hash<pos:position pos:line="25" pos:column="59"/></name></name></expr></init></decl>;<pos:position pos:line="25" pos:column="60"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">const<pos:position pos:line="26" pos:column="22"/></specifier> <name pos:line="26" pos:column="23">char<pos:position pos:line="26" pos:column="27"/></name> <modifier pos:line="26" pos:column="28">*<pos:position pos:line="26" pos:column="29"/></modifier></type><name pos:line="26" pos:column="29">remote_hex<pos:position pos:line="26" pos:column="39"/></name></decl>;<pos:position pos:line="26" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="27" pos:column="17">struct<pos:position pos:line="27" pos:column="23"/></name> <name pos:line="27" pos:column="24">object<pos:position pos:line="27" pos:column="30"/></name></name> <modifier pos:line="27" pos:column="31">*<pos:position pos:line="27" pos:column="32"/></modifier></type><name pos:line="27" pos:column="32">o<pos:position pos:line="27" pos:column="33"/></name></decl>;<pos:position pos:line="27" pos:column="34"/></decl_stmt>

		<comment type="block" pos:line="29" pos:column="17">/*
		 * If that object is complete (i.e. it is an ancestor of a
		 * local ref), we tell them we have it but do not have to
		 * tell them about its ancestors, which they already know
		 * about.
		 *
		 * We use lookup_object here because we are only
		 * interested in the case we *know* the object is
		 * reachable and we have already scanned it.
		 */</comment>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">(<pos:position pos:line="39" pos:column="22"/></operator><operator pos:line="39" pos:column="22">(<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="23">o<pos:position pos:line="39" pos:column="24"/></name> <operator pos:line="39" pos:column="25">=<pos:position pos:line="39" pos:column="26"/></operator> <call><name pos:line="39" pos:column="27">lookup_object<pos:position pos:line="39" pos:column="40"/></name><argument_list pos:line="39" pos:column="40">(<argument><expr><name pos:line="39" pos:column="41">remote<pos:position pos:line="39" pos:column="47"/></name></expr></argument>)<pos:position pos:line="39" pos:column="48"/></argument_list></call><operator pos:line="39" pos:column="48">)<pos:position pos:line="39" pos:column="49"/></operator> <operator pos:line="39" pos:column="50">!=<pos:position pos:line="39" pos:column="52"/></operator> <name pos:line="39" pos:column="53">NULL<pos:position pos:line="39" pos:column="57"/></name><operator pos:line="39" pos:column="57">)<pos:position pos:line="39" pos:column="58"/></operator> <operator pos:line="39" pos:column="59">&amp;&amp;<pos:position pos:line="39" pos:column="69"/></operator>
				<operator pos:line="40" pos:column="33">(<pos:position pos:line="40" pos:column="34"/></operator><name><name pos:line="40" pos:column="34">o<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">-&gt;<pos:position pos:line="40" pos:column="40"/></operator><name pos:line="40" pos:column="37">flags<pos:position pos:line="40" pos:column="42"/></name></name> <operator pos:line="40" pos:column="43">&amp;<pos:position pos:line="40" pos:column="48"/></operator> <name pos:line="40" pos:column="45">COMPLETE<pos:position pos:line="40" pos:column="53"/></name><operator pos:line="40" pos:column="53">)<pos:position pos:line="40" pos:column="54"/></operator></expr>)<pos:position pos:line="40" pos:column="55"/></condition><then pos:line="40" pos:column="55"> <block pos:line="40" pos:column="56">{
			<continue pos:line="41" pos:column="25">continue;<pos:position pos:line="41" pos:column="34"/></continue>
		}<pos:position pos:line="42" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="44" pos:column="17">remote_hex<pos:position pos:line="44" pos:column="27"/></name> <operator pos:line="44" pos:column="28">=<pos:position pos:line="44" pos:column="29"/></operator> <call><name pos:line="44" pos:column="30">sha1_to_hex<pos:position pos:line="44" pos:column="41"/></name><argument_list pos:line="44" pos:column="41">(<argument><expr><name pos:line="44" pos:column="42">remote<pos:position pos:line="44" pos:column="48"/></name></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="50"/></expr_stmt>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><operator pos:line="45" pos:column="21">!<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="22">fetching<pos:position pos:line="45" pos:column="30"/></name></expr>)<pos:position pos:line="45" pos:column="31"/></condition><then pos:line="45" pos:column="31"> <block pos:line="45" pos:column="32">{
			<decl_stmt><decl><type><name><name pos:line="46" pos:column="25">struct<pos:position pos:line="46" pos:column="31"/></name> <name pos:line="46" pos:column="32">strbuf<pos:position pos:line="46" pos:column="38"/></name></name></type> <name pos:line="46" pos:column="39">c<pos:position pos:line="46" pos:column="40"/></name> <init pos:line="46" pos:column="41">= <expr><name pos:line="46" pos:column="43">STRBUF_INIT<pos:position pos:line="46" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="46" pos:column="55"/></decl_stmt>
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><name pos:line="47" pos:column="29">multi_ack<pos:position pos:line="47" pos:column="38"/></name> <operator pos:line="47" pos:column="39">==<pos:position pos:line="47" pos:column="41"/></operator> <literal type="number" pos:line="47" pos:column="42">2<pos:position pos:line="47" pos:column="43"/></literal></expr>)<pos:position pos:line="47" pos:column="44"/></condition><then pos:line="47" pos:column="44">     <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="49">strbuf_addstr<pos:position pos:line="47" pos:column="62"/></name><argument_list pos:line="47" pos:column="62">(<argument><expr><operator pos:line="47" pos:column="63">&amp;<pos:position pos:line="47" pos:column="68"/></operator><name pos:line="47" pos:column="64">c<pos:position pos:line="47" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="67">" multi_ack_detailed"<pos:position pos:line="47" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="90"/></expr_stmt></block></then></if>
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><name pos:line="48" pos:column="29">multi_ack<pos:position pos:line="48" pos:column="38"/></name> <operator pos:line="48" pos:column="39">==<pos:position pos:line="48" pos:column="41"/></operator> <literal type="number" pos:line="48" pos:column="42">1<pos:position pos:line="48" pos:column="43"/></literal></expr>)<pos:position pos:line="48" pos:column="44"/></condition><then pos:line="48" pos:column="44">     <block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="49">strbuf_addstr<pos:position pos:line="48" pos:column="62"/></name><argument_list pos:line="48" pos:column="62">(<argument><expr><operator pos:line="48" pos:column="63">&amp;<pos:position pos:line="48" pos:column="68"/></operator><name pos:line="48" pos:column="64">c<pos:position pos:line="48" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="67">" multi_ack"<pos:position pos:line="48" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="81"/></expr_stmt></block></then></if>
			<if pos:line="49" pos:column="25">if <condition pos:line="49" pos:column="28">(<expr><name pos:line="49" pos:column="29">no_done<pos:position pos:line="49" pos:column="36"/></name></expr>)<pos:position pos:line="49" pos:column="37"/></condition><then pos:line="49" pos:column="37">            <block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="49">strbuf_addstr<pos:position pos:line="49" pos:column="62"/></name><argument_list pos:line="49" pos:column="62">(<argument><expr><operator pos:line="49" pos:column="63">&amp;<pos:position pos:line="49" pos:column="68"/></operator><name pos:line="49" pos:column="64">c<pos:position pos:line="49" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="67">" no-done"<pos:position pos:line="49" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="79"/></expr_stmt></block></then></if>
			<if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<expr><name pos:line="50" pos:column="29">use_sideband<pos:position pos:line="50" pos:column="41"/></name> <operator pos:line="50" pos:column="42">==<pos:position pos:line="50" pos:column="44"/></operator> <literal type="number" pos:line="50" pos:column="45">2<pos:position pos:line="50" pos:column="46"/></literal></expr>)<pos:position pos:line="50" pos:column="47"/></condition><then pos:line="50" pos:column="47">  <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="49">strbuf_addstr<pos:position pos:line="50" pos:column="62"/></name><argument_list pos:line="50" pos:column="62">(<argument><expr><operator pos:line="50" pos:column="63">&amp;<pos:position pos:line="50" pos:column="68"/></operator><name pos:line="50" pos:column="64">c<pos:position pos:line="50" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="67">" side-band-64k"<pos:position pos:line="50" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="85"/></expr_stmt></block></then></if>
			<if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><name pos:line="51" pos:column="29">use_sideband<pos:position pos:line="51" pos:column="41"/></name> <operator pos:line="51" pos:column="42">==<pos:position pos:line="51" pos:column="44"/></operator> <literal type="number" pos:line="51" pos:column="45">1<pos:position pos:line="51" pos:column="46"/></literal></expr>)<pos:position pos:line="51" pos:column="47"/></condition><then pos:line="51" pos:column="47">  <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="49">strbuf_addstr<pos:position pos:line="51" pos:column="62"/></name><argument_list pos:line="51" pos:column="62">(<argument><expr><operator pos:line="51" pos:column="63">&amp;<pos:position pos:line="51" pos:column="68"/></operator><name pos:line="51" pos:column="64">c<pos:position pos:line="51" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="67">" side-band"<pos:position pos:line="51" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="81"/></expr_stmt></block></then></if>
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><name><name pos:line="52" pos:column="29">args<pos:position pos:line="52" pos:column="33"/></name><operator pos:line="52" pos:column="33">-&gt;<pos:position pos:line="52" pos:column="38"/></operator><name pos:line="52" pos:column="35">use_thin_pack<pos:position pos:line="52" pos:column="48"/></name></name></expr>)<pos:position pos:line="52" pos:column="49"/></condition><then pos:line="52" pos:column="49"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="50">strbuf_addstr<pos:position pos:line="52" pos:column="63"/></name><argument_list pos:line="52" pos:column="63">(<argument><expr><operator pos:line="52" pos:column="64">&amp;<pos:position pos:line="52" pos:column="69"/></operator><name pos:line="52" pos:column="65">c<pos:position pos:line="52" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="68">" thin-pack"<pos:position pos:line="52" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="82"/></expr_stmt></block></then></if>
			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><name><name pos:line="53" pos:column="29">args<pos:position pos:line="53" pos:column="33"/></name><operator pos:line="53" pos:column="33">-&gt;<pos:position pos:line="53" pos:column="38"/></operator><name pos:line="53" pos:column="35">no_progress<pos:position pos:line="53" pos:column="46"/></name></name></expr>)<pos:position pos:line="53" pos:column="47"/></condition><then pos:line="53" pos:column="47">   <block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="50">strbuf_addstr<pos:position pos:line="53" pos:column="63"/></name><argument_list pos:line="53" pos:column="63">(<argument><expr><operator pos:line="53" pos:column="64">&amp;<pos:position pos:line="53" pos:column="69"/></operator><name pos:line="53" pos:column="65">c<pos:position pos:line="53" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="68">" no-progress"<pos:position pos:line="53" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="84"/></expr_stmt></block></then></if>
			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><name><name pos:line="54" pos:column="29">args<pos:position pos:line="54" pos:column="33"/></name><operator pos:line="54" pos:column="33">-&gt;<pos:position pos:line="54" pos:column="38"/></operator><name pos:line="54" pos:column="35">include_tag<pos:position pos:line="54" pos:column="46"/></name></name></expr>)<pos:position pos:line="54" pos:column="47"/></condition><then pos:line="54" pos:column="47">   <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="50">strbuf_addstr<pos:position pos:line="54" pos:column="63"/></name><argument_list pos:line="54" pos:column="63">(<argument><expr><operator pos:line="54" pos:column="64">&amp;<pos:position pos:line="54" pos:column="69"/></operator><name pos:line="54" pos:column="65">c<pos:position pos:line="54" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="68">" include-tag"<pos:position pos:line="54" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="84"/></expr_stmt></block></then></if>
			<if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><name pos:line="55" pos:column="29">prefer_ofs_delta<pos:position pos:line="55" pos:column="45"/></name></expr>)<pos:position pos:line="55" pos:column="46"/></condition><then pos:line="55" pos:column="46">   <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="49">strbuf_addstr<pos:position pos:line="55" pos:column="62"/></name><argument_list pos:line="55" pos:column="62">(<argument><expr><operator pos:line="55" pos:column="63">&amp;<pos:position pos:line="55" pos:column="68"/></operator><name pos:line="55" pos:column="64">c<pos:position pos:line="55" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="67">" ofs-delta"<pos:position pos:line="55" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="81"/></expr_stmt></block></then></if>
			<if pos:line="56" pos:column="25">if <condition pos:line="56" pos:column="28">(<expr><name pos:line="56" pos:column="29">agent_supported<pos:position pos:line="56" pos:column="44"/></name></expr>)<pos:position pos:line="56" pos:column="45"/></condition><then pos:line="56" pos:column="45">    <block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="49">strbuf_addf<pos:position pos:line="56" pos:column="60"/></name><argument_list pos:line="56" pos:column="60">(<argument><expr><operator pos:line="56" pos:column="61">&amp;<pos:position pos:line="56" pos:column="66"/></operator><name pos:line="56" pos:column="62">c<pos:position pos:line="56" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="65">" agent=%s"<pos:position pos:line="56" pos:column="76"/></literal></expr></argument>,
							    <argument><expr><call><name pos:line="57" pos:column="61">git_user_agent_sanitized<pos:position pos:line="57" pos:column="85"/></name><argument_list pos:line="57" pos:column="85">()<pos:position pos:line="57" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="89"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">packet_buf_write<pos:position pos:line="58" pos:column="41"/></name><argument_list pos:line="58" pos:column="41">(<argument><expr><operator pos:line="58" pos:column="42">&amp;<pos:position pos:line="58" pos:column="47"/></operator><name pos:line="58" pos:column="43">req_buf<pos:position pos:line="58" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="52">"want %s%s\n"<pos:position pos:line="58" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="67">remote_hex<pos:position pos:line="58" pos:column="77"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="79">c<pos:position pos:line="58" pos:column="80"/></name><operator pos:line="58" pos:column="80">.<pos:position pos:line="58" pos:column="81"/></operator><name pos:line="58" pos:column="81">buf<pos:position pos:line="58" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="86"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">strbuf_release<pos:position pos:line="59" pos:column="39"/></name><argument_list pos:line="59" pos:column="39">(<argument><expr><operator pos:line="59" pos:column="40">&amp;<pos:position pos:line="59" pos:column="45"/></operator><name pos:line="59" pos:column="41">c<pos:position pos:line="59" pos:column="42"/></name></expr></argument>)<pos:position pos:line="59" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="60" pos:column="18"/></block></then> <else pos:line="60" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="25">packet_buf_write<pos:position pos:line="61" pos:column="41"/></name><argument_list pos:line="61" pos:column="41">(<argument><expr><operator pos:line="61" pos:column="42">&amp;<pos:position pos:line="61" pos:column="47"/></operator><name pos:line="61" pos:column="43">req_buf<pos:position pos:line="61" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="52">"want %s\n"<pos:position pos:line="61" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="65">remote_hex<pos:position pos:line="61" pos:column="75"/></name></expr></argument>)<pos:position pos:line="61" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="77"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name pos:line="62" pos:column="17">fetching<pos:position pos:line="62" pos:column="25"/></name><operator pos:line="62" pos:column="25">++<pos:position pos:line="62" pos:column="27"/></operator></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="63" pos:column="10"/></block></for>

	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><operator pos:line="65" pos:column="13">!<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="14">fetching<pos:position pos:line="65" pos:column="22"/></name></expr>)<pos:position pos:line="65" pos:column="23"/></condition><then pos:line="65" pos:column="23"> <block pos:line="65" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">strbuf_release<pos:position pos:line="66" pos:column="31"/></name><argument_list pos:line="66" pos:column="31">(<argument><expr><operator pos:line="66" pos:column="32">&amp;<pos:position pos:line="66" pos:column="37"/></operator><name pos:line="66" pos:column="33">req_buf<pos:position pos:line="66" pos:column="40"/></name></expr></argument>)<pos:position pos:line="66" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="67" pos:column="17">packet_flush<pos:position pos:line="67" pos:column="29"/></name><argument_list pos:line="67" pos:column="29">(<argument><expr><name><name pos:line="67" pos:column="30">fd<pos:position pos:line="67" pos:column="32"/></name><index pos:line="67" pos:column="32">[<expr><literal type="number" pos:line="67" pos:column="33">1<pos:position pos:line="67" pos:column="34"/></literal></expr>]<pos:position pos:line="67" pos:column="35"/></index></name></expr></argument>)<pos:position pos:line="67" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="37"/></expr_stmt>
		<return pos:line="68" pos:column="17">return <expr><literal type="number" pos:line="68" pos:column="24">1<pos:position pos:line="68" pos:column="25"/></literal></expr>;<pos:position pos:line="68" pos:column="26"/></return>
	}<pos:position pos:line="69" pos:column="10"/></block></then></if>

	<if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><call><name pos:line="71" pos:column="13">is_repository_shallow<pos:position pos:line="71" pos:column="34"/></name><argument_list pos:line="71" pos:column="34">()<pos:position pos:line="71" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="37"/></condition><then pos:line="71" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="17">write_shallow_commits<pos:position pos:line="72" pos:column="38"/></name><argument_list pos:line="72" pos:column="38">(<argument><expr><operator pos:line="72" pos:column="39">&amp;<pos:position pos:line="72" pos:column="44"/></operator><name pos:line="72" pos:column="40">req_buf<pos:position pos:line="72" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="49">1<pos:position pos:line="72" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="52">NULL<pos:position pos:line="72" pos:column="56"/></name></expr></argument>)<pos:position pos:line="72" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="58"/></expr_stmt></block></then></if>
	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name><name pos:line="73" pos:column="13">args<pos:position pos:line="73" pos:column="17"/></name><operator pos:line="73" pos:column="17">-&gt;<pos:position pos:line="73" pos:column="22"/></operator><name pos:line="73" pos:column="19">depth<pos:position pos:line="73" pos:column="24"/></name></name> <operator pos:line="73" pos:column="25">&gt;<pos:position pos:line="73" pos:column="29"/></operator> <literal type="number" pos:line="73" pos:column="27">0<pos:position pos:line="73" pos:column="28"/></literal></expr>)<pos:position pos:line="73" pos:column="29"/></condition><then pos:line="73" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="17">packet_buf_write<pos:position pos:line="74" pos:column="33"/></name><argument_list pos:line="74" pos:column="33">(<argument><expr><operator pos:line="74" pos:column="34">&amp;<pos:position pos:line="74" pos:column="39"/></operator><name pos:line="74" pos:column="35">req_buf<pos:position pos:line="74" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="44">"deepen %d"<pos:position pos:line="74" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="57">args<pos:position pos:line="74" pos:column="61"/></name><operator pos:line="74" pos:column="61">-&gt;<pos:position pos:line="74" pos:column="66"/></operator><name pos:line="74" pos:column="63">depth<pos:position pos:line="74" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="70"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="75" pos:column="9">packet_buf_flush<pos:position pos:line="75" pos:column="25"/></name><argument_list pos:line="75" pos:column="25">(<argument><expr><operator pos:line="75" pos:column="26">&amp;<pos:position pos:line="75" pos:column="31"/></operator><name pos:line="75" pos:column="27">req_buf<pos:position pos:line="75" pos:column="34"/></name></expr></argument>)<pos:position pos:line="75" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="76" pos:column="9">state_len<pos:position pos:line="76" pos:column="18"/></name> <operator pos:line="76" pos:column="19">=<pos:position pos:line="76" pos:column="20"/></operator> <name><name pos:line="76" pos:column="21">req_buf<pos:position pos:line="76" pos:column="28"/></name><operator pos:line="76" pos:column="28">.<pos:position pos:line="76" pos:column="29"/></operator><name pos:line="76" pos:column="29">len<pos:position pos:line="76" pos:column="32"/></name></name></expr>;<pos:position pos:line="76" pos:column="33"/></expr_stmt>

	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name><name pos:line="78" pos:column="13">args<pos:position pos:line="78" pos:column="17"/></name><operator pos:line="78" pos:column="17">-&gt;<pos:position pos:line="78" pos:column="22"/></operator><name pos:line="78" pos:column="19">depth<pos:position pos:line="78" pos:column="24"/></name></name> <operator pos:line="78" pos:column="25">&gt;<pos:position pos:line="78" pos:column="29"/></operator> <literal type="number" pos:line="78" pos:column="27">0<pos:position pos:line="78" pos:column="28"/></literal></expr>)<pos:position pos:line="78" pos:column="29"/></condition><then pos:line="78" pos:column="29"> <block pos:line="78" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="79" pos:column="17">char<pos:position pos:line="79" pos:column="21"/></name> <modifier pos:line="79" pos:column="22">*<pos:position pos:line="79" pos:column="23"/></modifier></type><name pos:line="79" pos:column="23">line<pos:position pos:line="79" pos:column="27"/></name></decl>;<pos:position pos:line="79" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="80" pos:column="17">const<pos:position pos:line="80" pos:column="22"/></specifier> <name pos:line="80" pos:column="23">char<pos:position pos:line="80" pos:column="27"/></name> <modifier pos:line="80" pos:column="28">*<pos:position pos:line="80" pos:column="29"/></modifier></type><name pos:line="80" pos:column="29">arg<pos:position pos:line="80" pos:column="32"/></name></decl>;<pos:position pos:line="80" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="81" pos:column="17">unsigned<pos:position pos:line="81" pos:column="25"/></name> <name pos:line="81" pos:column="26">char<pos:position pos:line="81" pos:column="30"/></name></type> <name><name pos:line="81" pos:column="31">sha1<pos:position pos:line="81" pos:column="35"/></name><index pos:line="81" pos:column="35">[<expr><literal type="number" pos:line="81" pos:column="36">20<pos:position pos:line="81" pos:column="38"/></literal></expr>]<pos:position pos:line="81" pos:column="39"/></index></name></decl>;<pos:position pos:line="81" pos:column="40"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="83" pos:column="17">send_request<pos:position pos:line="83" pos:column="29"/></name><argument_list pos:line="83" pos:column="29">(<argument><expr><name pos:line="83" pos:column="30">args<pos:position pos:line="83" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="36">fd<pos:position pos:line="83" pos:column="38"/></name><index pos:line="83" pos:column="38">[<expr><literal type="number" pos:line="83" pos:column="39">1<pos:position pos:line="83" pos:column="40"/></literal></expr>]<pos:position pos:line="83" pos:column="41"/></index></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="43">&amp;<pos:position pos:line="83" pos:column="48"/></operator><name pos:line="83" pos:column="44">req_buf<pos:position pos:line="83" pos:column="51"/></name></expr></argument>)<pos:position pos:line="83" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="53"/></expr_stmt>
		<while pos:line="84" pos:column="17">while <condition pos:line="84" pos:column="23">(<expr><operator pos:line="84" pos:column="24">(<pos:position pos:line="84" pos:column="25"/></operator><name pos:line="84" pos:column="25">line<pos:position pos:line="84" pos:column="29"/></name> <operator pos:line="84" pos:column="30">=<pos:position pos:line="84" pos:column="31"/></operator> <call><name pos:line="84" pos:column="32">packet_read_line<pos:position pos:line="84" pos:column="48"/></name><argument_list pos:line="84" pos:column="48">(<argument><expr><name><name pos:line="84" pos:column="49">fd<pos:position pos:line="84" pos:column="51"/></name><index pos:line="84" pos:column="51">[<expr><literal type="number" pos:line="84" pos:column="52">0<pos:position pos:line="84" pos:column="53"/></literal></expr>]<pos:position pos:line="84" pos:column="54"/></index></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="56">NULL<pos:position pos:line="84" pos:column="60"/></name></expr></argument>)<pos:position pos:line="84" pos:column="61"/></argument_list></call><operator pos:line="84" pos:column="61">)<pos:position pos:line="84" pos:column="62"/></operator></expr>)<pos:position pos:line="84" pos:column="63"/></condition> <block pos:line="84" pos:column="64">{
			<if pos:line="85" pos:column="25">if <condition pos:line="85" pos:column="28">(<expr><call><name pos:line="85" pos:column="29">skip_prefix<pos:position pos:line="85" pos:column="40"/></name><argument_list pos:line="85" pos:column="40">(<argument><expr><name pos:line="85" pos:column="41">line<pos:position pos:line="85" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="47">"shallow "<pos:position pos:line="85" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="85" pos:column="59">&amp;<pos:position pos:line="85" pos:column="64"/></operator><name pos:line="85" pos:column="60">arg<pos:position pos:line="85" pos:column="63"/></name></expr></argument>)<pos:position pos:line="85" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="85" pos:column="65"/></condition><then pos:line="85" pos:column="65"> <block pos:line="85" pos:column="66">{
				<if pos:line="86" pos:column="33">if <condition pos:line="86" pos:column="36">(<expr><call><name pos:line="86" pos:column="37">get_sha1_hex<pos:position pos:line="86" pos:column="49"/></name><argument_list pos:line="86" pos:column="49">(<argument><expr><name pos:line="86" pos:column="50">arg<pos:position pos:line="86" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="55">sha1<pos:position pos:line="86" pos:column="59"/></name></expr></argument>)<pos:position pos:line="86" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="61"/></condition><then pos:line="86" pos:column="61">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="41">die<pos:position pos:line="87" pos:column="44"/></name><argument_list pos:line="87" pos:column="44">(<argument><expr><literal type="string" pos:line="87" pos:column="45">"invalid shallow line: %s"<pos:position pos:line="87" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="73">line<pos:position pos:line="87" pos:column="77"/></name></expr></argument>)<pos:position pos:line="87" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="79"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="88" pos:column="33">register_shallow<pos:position pos:line="88" pos:column="49"/></name><argument_list pos:line="88" pos:column="49">(<argument><expr><name pos:line="88" pos:column="50">sha1<pos:position pos:line="88" pos:column="54"/></name></expr></argument>)<pos:position pos:line="88" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="56"/></expr_stmt>
				<continue pos:line="89" pos:column="33">continue;<pos:position pos:line="89" pos:column="42"/></continue>
			}<pos:position pos:line="90" pos:column="26"/></block></then></if>
			<if pos:line="91" pos:column="25">if <condition pos:line="91" pos:column="28">(<expr><call><name pos:line="91" pos:column="29">skip_prefix<pos:position pos:line="91" pos:column="40"/></name><argument_list pos:line="91" pos:column="40">(<argument><expr><name pos:line="91" pos:column="41">line<pos:position pos:line="91" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="47">"unshallow "<pos:position pos:line="91" pos:column="59"/></literal></expr></argument>, <argument><expr><operator pos:line="91" pos:column="61">&amp;<pos:position pos:line="91" pos:column="66"/></operator><name pos:line="91" pos:column="62">arg<pos:position pos:line="91" pos:column="65"/></name></expr></argument>)<pos:position pos:line="91" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="67"/></condition><then pos:line="91" pos:column="67"> <block pos:line="91" pos:column="68">{
				<if pos:line="92" pos:column="33">if <condition pos:line="92" pos:column="36">(<expr><call><name pos:line="92" pos:column="37">get_sha1_hex<pos:position pos:line="92" pos:column="49"/></name><argument_list pos:line="92" pos:column="49">(<argument><expr><name pos:line="92" pos:column="50">arg<pos:position pos:line="92" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="55">sha1<pos:position pos:line="92" pos:column="59"/></name></expr></argument>)<pos:position pos:line="92" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="92" pos:column="61"/></condition><then pos:line="92" pos:column="61">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="41">die<pos:position pos:line="93" pos:column="44"/></name><argument_list pos:line="93" pos:column="44">(<argument><expr><literal type="string" pos:line="93" pos:column="45">"invalid unshallow line: %s"<pos:position pos:line="93" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="75">line<pos:position pos:line="93" pos:column="79"/></name></expr></argument>)<pos:position pos:line="93" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="81"/></expr_stmt></block></then></if>
				<if pos:line="94" pos:column="33">if <condition pos:line="94" pos:column="36">(<expr><operator pos:line="94" pos:column="37">!<pos:position pos:line="94" pos:column="38"/></operator><call><name pos:line="94" pos:column="38">lookup_object<pos:position pos:line="94" pos:column="51"/></name><argument_list pos:line="94" pos:column="51">(<argument><expr><name pos:line="94" pos:column="52">sha1<pos:position pos:line="94" pos:column="56"/></name></expr></argument>)<pos:position pos:line="94" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="58"/></condition><then pos:line="94" pos:column="58">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="95" pos:column="41">die<pos:position pos:line="95" pos:column="44"/></name><argument_list pos:line="95" pos:column="44">(<argument><expr><literal type="string" pos:line="95" pos:column="45">"object not found: %s"<pos:position pos:line="95" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="69">line<pos:position pos:line="95" pos:column="73"/></name></expr></argument>)<pos:position pos:line="95" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="75"/></expr_stmt></block></then></if>
				<comment type="block" pos:line="96" pos:column="33">/* make sure that it is parsed as shallow */</comment>
				<if pos:line="97" pos:column="33">if <condition pos:line="97" pos:column="36">(<expr><operator pos:line="97" pos:column="37">!<pos:position pos:line="97" pos:column="38"/></operator><call><name pos:line="97" pos:column="38">parse_object<pos:position pos:line="97" pos:column="50"/></name><argument_list pos:line="97" pos:column="50">(<argument><expr><name pos:line="97" pos:column="51">sha1<pos:position pos:line="97" pos:column="55"/></name></expr></argument>)<pos:position pos:line="97" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="97" pos:column="57"/></condition><then pos:line="97" pos:column="57">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="98" pos:column="41">die<pos:position pos:line="98" pos:column="44"/></name><argument_list pos:line="98" pos:column="44">(<argument><expr><literal type="string" pos:line="98" pos:column="45">"error in object: %s"<pos:position pos:line="98" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="68">line<pos:position pos:line="98" pos:column="72"/></name></expr></argument>)<pos:position pos:line="98" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="74"/></expr_stmt></block></then></if>
				<if pos:line="99" pos:column="33">if <condition pos:line="99" pos:column="36">(<expr><call><name pos:line="99" pos:column="37">unregister_shallow<pos:position pos:line="99" pos:column="55"/></name><argument_list pos:line="99" pos:column="55">(<argument><expr><name pos:line="99" pos:column="56">sha1<pos:position pos:line="99" pos:column="60"/></name></expr></argument>)<pos:position pos:line="99" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="62"/></condition><then pos:line="99" pos:column="62">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="100" pos:column="41">die<pos:position pos:line="100" pos:column="44"/></name><argument_list pos:line="100" pos:column="44">(<argument><expr><literal type="string" pos:line="100" pos:column="45">"no shallow found: %s"<pos:position pos:line="100" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="69">line<pos:position pos:line="100" pos:column="73"/></name></expr></argument>)<pos:position pos:line="100" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="75"/></expr_stmt></block></then></if>
				<continue pos:line="101" pos:column="33">continue;<pos:position pos:line="101" pos:column="42"/></continue>
			}<pos:position pos:line="102" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="103" pos:column="25">die<pos:position pos:line="103" pos:column="28"/></name><argument_list pos:line="103" pos:column="28">(<argument><expr><literal type="string" pos:line="103" pos:column="29">"expected shallow/unshallow, got %s"<pos:position pos:line="103" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="67">line<pos:position pos:line="103" pos:column="71"/></name></expr></argument>)<pos:position pos:line="103" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="73"/></expr_stmt>
		}<pos:position pos:line="104" pos:column="18"/></block></while>
	}<pos:position pos:line="105" pos:column="10"/></block></then> <elseif pos:line="105" pos:column="11">else <if pos:line="105" pos:column="16">if <condition pos:line="105" pos:column="19">(<expr><operator pos:line="105" pos:column="20">!<pos:position pos:line="105" pos:column="21"/></operator><name><name pos:line="105" pos:column="21">args<pos:position pos:line="105" pos:column="25"/></name><operator pos:line="105" pos:column="25">-&gt;<pos:position pos:line="105" pos:column="30"/></operator><name pos:line="105" pos:column="27">stateless_rpc<pos:position pos:line="105" pos:column="40"/></name></name></expr>)<pos:position pos:line="105" pos:column="41"/></condition><then pos:line="105" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="106" pos:column="17">send_request<pos:position pos:line="106" pos:column="29"/></name><argument_list pos:line="106" pos:column="29">(<argument><expr><name pos:line="106" pos:column="30">args<pos:position pos:line="106" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="36">fd<pos:position pos:line="106" pos:column="38"/></name><index pos:line="106" pos:column="38">[<expr><literal type="number" pos:line="106" pos:column="39">1<pos:position pos:line="106" pos:column="40"/></literal></expr>]<pos:position pos:line="106" pos:column="41"/></index></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="43">&amp;<pos:position pos:line="106" pos:column="48"/></operator><name pos:line="106" pos:column="44">req_buf<pos:position pos:line="106" pos:column="51"/></name></expr></argument>)<pos:position pos:line="106" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="53"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<expr><operator pos:line="108" pos:column="13">!<pos:position pos:line="108" pos:column="14"/></operator><name><name pos:line="108" pos:column="14">args<pos:position pos:line="108" pos:column="18"/></name><operator pos:line="108" pos:column="18">-&gt;<pos:position pos:line="108" pos:column="23"/></operator><name pos:line="108" pos:column="20">stateless_rpc<pos:position pos:line="108" pos:column="33"/></name></name></expr>)<pos:position pos:line="108" pos:column="34"/></condition><then pos:line="108" pos:column="34"> <block pos:line="108" pos:column="35">{
		<comment type="block" pos:line="109" pos:column="17">/* If we aren't using the stateless-rpc interface
		 * we don't need to retain the headers.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="112" pos:column="17">strbuf_setlen<pos:position pos:line="112" pos:column="30"/></name><argument_list pos:line="112" pos:column="30">(<argument><expr><operator pos:line="112" pos:column="31">&amp;<pos:position pos:line="112" pos:column="36"/></operator><name pos:line="112" pos:column="32">req_buf<pos:position pos:line="112" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="112" pos:column="41">0<pos:position pos:line="112" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name pos:line="113" pos:column="17">state_len<pos:position pos:line="113" pos:column="26"/></name> <operator pos:line="113" pos:column="27">=<pos:position pos:line="113" pos:column="28"/></operator> <literal type="number" pos:line="113" pos:column="29">0<pos:position pos:line="113" pos:column="30"/></literal></expr>;<pos:position pos:line="113" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="114" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="116" pos:column="9">flushes<pos:position pos:line="116" pos:column="16"/></name> <operator pos:line="116" pos:column="17">=<pos:position pos:line="116" pos:column="18"/></operator> <literal type="number" pos:line="116" pos:column="19">0<pos:position pos:line="116" pos:column="20"/></literal></expr>;<pos:position pos:line="116" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name pos:line="117" pos:column="9">retval<pos:position pos:line="117" pos:column="15"/></name> <operator pos:line="117" pos:column="16">=<pos:position pos:line="117" pos:column="17"/></operator> <operator pos:line="117" pos:column="18">-<pos:position pos:line="117" pos:column="19"/></operator><literal type="number" pos:line="117" pos:column="19">1<pos:position pos:line="117" pos:column="20"/></literal></expr>;<pos:position pos:line="117" pos:column="21"/></expr_stmt>
	<while pos:line="118" pos:column="9">while <condition pos:line="118" pos:column="15">(<expr><operator pos:line="118" pos:column="16">(<pos:position pos:line="118" pos:column="17"/></operator><name pos:line="118" pos:column="17">sha1<pos:position pos:line="118" pos:column="21"/></name> <operator pos:line="118" pos:column="22">=<pos:position pos:line="118" pos:column="23"/></operator> <call><name pos:line="118" pos:column="24">get_rev<pos:position pos:line="118" pos:column="31"/></name><argument_list pos:line="118" pos:column="31">()<pos:position pos:line="118" pos:column="33"/></argument_list></call><operator pos:line="118" pos:column="33">)<pos:position pos:line="118" pos:column="34"/></operator></expr>)<pos:position pos:line="118" pos:column="35"/></condition> <block pos:line="118" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="119" pos:column="17">packet_buf_write<pos:position pos:line="119" pos:column="33"/></name><argument_list pos:line="119" pos:column="33">(<argument><expr><operator pos:line="119" pos:column="34">&amp;<pos:position pos:line="119" pos:column="39"/></operator><name pos:line="119" pos:column="35">req_buf<pos:position pos:line="119" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="44">"have %s\n"<pos:position pos:line="119" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="119" pos:column="57">sha1_to_hex<pos:position pos:line="119" pos:column="68"/></name><argument_list pos:line="119" pos:column="68">(<argument><expr><name pos:line="119" pos:column="69">sha1<pos:position pos:line="119" pos:column="73"/></name></expr></argument>)<pos:position pos:line="119" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="119" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="76"/></expr_stmt>
		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><name><name pos:line="120" pos:column="21">args<pos:position pos:line="120" pos:column="25"/></name><operator pos:line="120" pos:column="25">-&gt;<pos:position pos:line="120" pos:column="30"/></operator><name pos:line="120" pos:column="27">verbose<pos:position pos:line="120" pos:column="34"/></name></name></expr>)<pos:position pos:line="120" pos:column="35"/></condition><then pos:line="120" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="121" pos:column="25">fprintf<pos:position pos:line="121" pos:column="32"/></name><argument_list pos:line="121" pos:column="32">(<argument><expr><name pos:line="121" pos:column="33">stderr<pos:position pos:line="121" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="121" pos:column="41">"have %s\n"<pos:position pos:line="121" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="121" pos:column="54">sha1_to_hex<pos:position pos:line="121" pos:column="65"/></name><argument_list pos:line="121" pos:column="65">(<argument><expr><name pos:line="121" pos:column="66">sha1<pos:position pos:line="121" pos:column="70"/></name></expr></argument>)<pos:position pos:line="121" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="121" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="73"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="122" pos:column="17">in_vain<pos:position pos:line="122" pos:column="24"/></name><operator pos:line="122" pos:column="24">++<pos:position pos:line="122" pos:column="26"/></operator></expr>;<pos:position pos:line="122" pos:column="27"/></expr_stmt>
		<if pos:line="123" pos:column="17">if <condition pos:line="123" pos:column="20">(<expr><name pos:line="123" pos:column="21">flush_at<pos:position pos:line="123" pos:column="29"/></name> <operator pos:line="123" pos:column="30">&lt;=<pos:position pos:line="123" pos:column="35"/></operator> <operator pos:line="123" pos:column="33">++<pos:position pos:line="123" pos:column="35"/></operator><name pos:line="123" pos:column="35">count<pos:position pos:line="123" pos:column="40"/></name></expr>)<pos:position pos:line="123" pos:column="41"/></condition><then pos:line="123" pos:column="41"> <block pos:line="123" pos:column="42">{
			<decl_stmt><decl><type><name pos:line="124" pos:column="25">int<pos:position pos:line="124" pos:column="28"/></name></type> <name pos:line="124" pos:column="29">ack<pos:position pos:line="124" pos:column="32"/></name></decl>;<pos:position pos:line="124" pos:column="33"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="126" pos:column="25">packet_buf_flush<pos:position pos:line="126" pos:column="41"/></name><argument_list pos:line="126" pos:column="41">(<argument><expr><operator pos:line="126" pos:column="42">&amp;<pos:position pos:line="126" pos:column="47"/></operator><name pos:line="126" pos:column="43">req_buf<pos:position pos:line="126" pos:column="50"/></name></expr></argument>)<pos:position pos:line="126" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="127" pos:column="25">send_request<pos:position pos:line="127" pos:column="37"/></name><argument_list pos:line="127" pos:column="37">(<argument><expr><name pos:line="127" pos:column="38">args<pos:position pos:line="127" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="44">fd<pos:position pos:line="127" pos:column="46"/></name><index pos:line="127" pos:column="46">[<expr><literal type="number" pos:line="127" pos:column="47">1<pos:position pos:line="127" pos:column="48"/></literal></expr>]<pos:position pos:line="127" pos:column="49"/></index></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="51">&amp;<pos:position pos:line="127" pos:column="56"/></operator><name pos:line="127" pos:column="52">req_buf<pos:position pos:line="127" pos:column="59"/></name></expr></argument>)<pos:position pos:line="127" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="128" pos:column="25">strbuf_setlen<pos:position pos:line="128" pos:column="38"/></name><argument_list pos:line="128" pos:column="38">(<argument><expr><operator pos:line="128" pos:column="39">&amp;<pos:position pos:line="128" pos:column="44"/></operator><name pos:line="128" pos:column="40">req_buf<pos:position pos:line="128" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="49">state_len<pos:position pos:line="128" pos:column="58"/></name></expr></argument>)<pos:position pos:line="128" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><name pos:line="129" pos:column="25">flushes<pos:position pos:line="129" pos:column="32"/></name><operator pos:line="129" pos:column="32">++<pos:position pos:line="129" pos:column="34"/></operator></expr>;<pos:position pos:line="129" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="130" pos:column="25">flush_at<pos:position pos:line="130" pos:column="33"/></name> <operator pos:line="130" pos:column="34">=<pos:position pos:line="130" pos:column="35"/></operator> <call><name pos:line="130" pos:column="36">next_flush<pos:position pos:line="130" pos:column="46"/></name><argument_list pos:line="130" pos:column="46">(<argument><expr><name pos:line="130" pos:column="47">args<pos:position pos:line="130" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="53">count<pos:position pos:line="130" pos:column="58"/></name></expr></argument>)<pos:position pos:line="130" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="60"/></expr_stmt>

			<comment type="block" pos:line="132" pos:column="25">/*
			 * We keep one window "ahead" of the other side, and
			 * will wait for an ACK only on the next one
			 */</comment>
			<if pos:line="136" pos:column="25">if <condition pos:line="136" pos:column="28">(<expr><operator pos:line="136" pos:column="29">!<pos:position pos:line="136" pos:column="30"/></operator><name><name pos:line="136" pos:column="30">args<pos:position pos:line="136" pos:column="34"/></name><operator pos:line="136" pos:column="34">-&gt;<pos:position pos:line="136" pos:column="39"/></operator><name pos:line="136" pos:column="36">stateless_rpc<pos:position pos:line="136" pos:column="49"/></name></name> <operator pos:line="136" pos:column="50">&amp;&amp;<pos:position pos:line="136" pos:column="60"/></operator> <name pos:line="136" pos:column="53">count<pos:position pos:line="136" pos:column="58"/></name> <operator pos:line="136" pos:column="59">==<pos:position pos:line="136" pos:column="61"/></operator> <name pos:line="136" pos:column="62">INITIAL_FLUSH<pos:position pos:line="136" pos:column="75"/></name></expr>)<pos:position pos:line="136" pos:column="76"/></condition><then pos:line="136" pos:column="76">
				<block type="pseudo"><continue pos:line="137" pos:column="33">continue;<pos:position pos:line="137" pos:column="42"/></continue></block></then></if>

			<expr_stmt><expr><call><name pos:line="139" pos:column="25">consume_shallow_list<pos:position pos:line="139" pos:column="45"/></name><argument_list pos:line="139" pos:column="45">(<argument><expr><name pos:line="139" pos:column="46">args<pos:position pos:line="139" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="139" pos:column="52">fd<pos:position pos:line="139" pos:column="54"/></name><index pos:line="139" pos:column="54">[<expr><literal type="number" pos:line="139" pos:column="55">0<pos:position pos:line="139" pos:column="56"/></literal></expr>]<pos:position pos:line="139" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="139" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="59"/></expr_stmt>
			<do pos:line="140" pos:column="25">do <block pos:line="140" pos:column="28">{
				<expr_stmt><expr><name pos:line="141" pos:column="33">ack<pos:position pos:line="141" pos:column="36"/></name> <operator pos:line="141" pos:column="37">=<pos:position pos:line="141" pos:column="38"/></operator> <call><name pos:line="141" pos:column="39">get_ack<pos:position pos:line="141" pos:column="46"/></name><argument_list pos:line="141" pos:column="46">(<argument><expr><name><name pos:line="141" pos:column="47">fd<pos:position pos:line="141" pos:column="49"/></name><index pos:line="141" pos:column="49">[<expr><literal type="number" pos:line="141" pos:column="50">0<pos:position pos:line="141" pos:column="51"/></literal></expr>]<pos:position pos:line="141" pos:column="52"/></index></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="54">result_sha1<pos:position pos:line="141" pos:column="65"/></name></expr></argument>)<pos:position pos:line="141" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="67"/></expr_stmt>
				<if pos:line="142" pos:column="33">if <condition pos:line="142" pos:column="36">(<expr><name><name pos:line="142" pos:column="37">args<pos:position pos:line="142" pos:column="41"/></name><operator pos:line="142" pos:column="41">-&gt;<pos:position pos:line="142" pos:column="46"/></operator><name pos:line="142" pos:column="43">verbose<pos:position pos:line="142" pos:column="50"/></name></name> <operator pos:line="142" pos:column="51">&amp;&amp;<pos:position pos:line="142" pos:column="61"/></operator> <name pos:line="142" pos:column="54">ack<pos:position pos:line="142" pos:column="57"/></name></expr>)<pos:position pos:line="142" pos:column="58"/></condition><then pos:line="142" pos:column="58">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="143" pos:column="41">fprintf<pos:position pos:line="143" pos:column="48"/></name><argument_list pos:line="143" pos:column="48">(<argument><expr><name pos:line="143" pos:column="49">stderr<pos:position pos:line="143" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="143" pos:column="57">"got ack %d %s\n"<pos:position pos:line="143" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="143" pos:column="76">ack<pos:position pos:line="143" pos:column="79"/></name></expr></argument>,
							<argument><expr><call><name pos:line="144" pos:column="57">sha1_to_hex<pos:position pos:line="144" pos:column="68"/></name><argument_list pos:line="144" pos:column="68">(<argument><expr><name pos:line="144" pos:column="69">result_sha1<pos:position pos:line="144" pos:column="80"/></name></expr></argument>)<pos:position pos:line="144" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="144" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="83"/></expr_stmt></block></then></if>
				<switch pos:line="145" pos:column="33">switch <condition pos:line="145" pos:column="40">(<expr><name pos:line="145" pos:column="41">ack<pos:position pos:line="145" pos:column="44"/></name></expr>)<pos:position pos:line="145" pos:column="45"/></condition> <block pos:line="145" pos:column="46">{
				<case pos:line="146" pos:column="33">case <expr><name pos:line="146" pos:column="38">ACK<pos:position pos:line="146" pos:column="41"/></name></expr>:<pos:position pos:line="146" pos:column="42"/></case>
					<expr_stmt><expr><name pos:line="147" pos:column="41">flushes<pos:position pos:line="147" pos:column="48"/></name> <operator pos:line="147" pos:column="49">=<pos:position pos:line="147" pos:column="50"/></operator> <literal type="number" pos:line="147" pos:column="51">0<pos:position pos:line="147" pos:column="52"/></literal></expr>;<pos:position pos:line="147" pos:column="53"/></expr_stmt>
					<expr_stmt><expr><name pos:line="148" pos:column="41">multi_ack<pos:position pos:line="148" pos:column="50"/></name> <operator pos:line="148" pos:column="51">=<pos:position pos:line="148" pos:column="52"/></operator> <literal type="number" pos:line="148" pos:column="53">0<pos:position pos:line="148" pos:column="54"/></literal></expr>;<pos:position pos:line="148" pos:column="55"/></expr_stmt>
					<expr_stmt><expr><name pos:line="149" pos:column="41">retval<pos:position pos:line="149" pos:column="47"/></name> <operator pos:line="149" pos:column="48">=<pos:position pos:line="149" pos:column="49"/></operator> <literal type="number" pos:line="149" pos:column="50">0<pos:position pos:line="149" pos:column="51"/></literal></expr>;<pos:position pos:line="149" pos:column="52"/></expr_stmt>
					<goto pos:line="150" pos:column="41">goto <name pos:line="150" pos:column="46">done<pos:position pos:line="150" pos:column="50"/></name>;<pos:position pos:line="150" pos:column="51"/></goto>
				<case pos:line="151" pos:column="33">case <expr><name pos:line="151" pos:column="38">ACK_common<pos:position pos:line="151" pos:column="48"/></name></expr>:<pos:position pos:line="151" pos:column="49"/></case>
				<case pos:line="152" pos:column="33">case <expr><name pos:line="152" pos:column="38">ACK_ready<pos:position pos:line="152" pos:column="47"/></name></expr>:<pos:position pos:line="152" pos:column="48"/></case>
				<case pos:line="153" pos:column="33">case <expr><name pos:line="153" pos:column="38">ACK_continue<pos:position pos:line="153" pos:column="50"/></name></expr>:<pos:position pos:line="153" pos:column="51"/></case> <block pos:line="153" pos:column="52">{
					<decl_stmt><decl><type><name><name pos:line="154" pos:column="41">struct<pos:position pos:line="154" pos:column="47"/></name> <name pos:line="154" pos:column="48">commit<pos:position pos:line="154" pos:column="54"/></name></name> <modifier pos:line="154" pos:column="55">*<pos:position pos:line="154" pos:column="56"/></modifier></type><name pos:line="154" pos:column="56">commit<pos:position pos:line="154" pos:column="62"/></name> <init pos:line="154" pos:column="63">=
						<expr><call><name pos:line="155" pos:column="49">lookup_commit<pos:position pos:line="155" pos:column="62"/></name><argument_list pos:line="155" pos:column="62">(<argument><expr><name pos:line="155" pos:column="63">result_sha1<pos:position pos:line="155" pos:column="74"/></name></expr></argument>)<pos:position pos:line="155" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="155" pos:column="76"/></decl_stmt>
					<if pos:line="156" pos:column="41">if <condition pos:line="156" pos:column="44">(<expr><operator pos:line="156" pos:column="45">!<pos:position pos:line="156" pos:column="46"/></operator><name pos:line="156" pos:column="46">commit<pos:position pos:line="156" pos:column="52"/></name></expr>)<pos:position pos:line="156" pos:column="53"/></condition><then pos:line="156" pos:column="53">
						<block type="pseudo"><expr_stmt><expr><call><name pos:line="157" pos:column="49">die<pos:position pos:line="157" pos:column="52"/></name><argument_list pos:line="157" pos:column="52">(<argument><expr><literal type="string" pos:line="157" pos:column="53">"invalid commit %s"<pos:position pos:line="157" pos:column="72"/></literal></expr></argument>, <argument><expr><call><name pos:line="157" pos:column="74">sha1_to_hex<pos:position pos:line="157" pos:column="85"/></name><argument_list pos:line="157" pos:column="85">(<argument><expr><name pos:line="157" pos:column="86">result_sha1<pos:position pos:line="157" pos:column="97"/></name></expr></argument>)<pos:position pos:line="157" pos:column="98"/></argument_list></call></expr></argument>)<pos:position pos:line="157" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="100"/></expr_stmt></block></then></if>
					<if pos:line="158" pos:column="41">if <condition pos:line="158" pos:column="44">(<expr><name><name pos:line="158" pos:column="45">args<pos:position pos:line="158" pos:column="49"/></name><operator pos:line="158" pos:column="49">-&gt;<pos:position pos:line="158" pos:column="54"/></operator><name pos:line="158" pos:column="51">stateless_rpc<pos:position pos:line="158" pos:column="64"/></name></name>
					 <operator pos:line="159" pos:column="42">&amp;&amp;<pos:position pos:line="159" pos:column="52"/></operator> <name pos:line="159" pos:column="45">ack<pos:position pos:line="159" pos:column="48"/></name> <operator pos:line="159" pos:column="49">==<pos:position pos:line="159" pos:column="51"/></operator> <name pos:line="159" pos:column="52">ACK_common<pos:position pos:line="159" pos:column="62"/></name>
					 <operator pos:line="160" pos:column="42">&amp;&amp;<pos:position pos:line="160" pos:column="52"/></operator> <operator pos:line="160" pos:column="45">!<pos:position pos:line="160" pos:column="46"/></operator><operator pos:line="160" pos:column="46">(<pos:position pos:line="160" pos:column="47"/></operator><name><name pos:line="160" pos:column="47">commit<pos:position pos:line="160" pos:column="53"/></name><operator pos:line="160" pos:column="53">-&gt;<pos:position pos:line="160" pos:column="58"/></operator><name pos:line="160" pos:column="55">object<pos:position pos:line="160" pos:column="61"/></name><operator pos:line="160" pos:column="61">.<pos:position pos:line="160" pos:column="62"/></operator><name pos:line="160" pos:column="62">flags<pos:position pos:line="160" pos:column="67"/></name></name> <operator pos:line="160" pos:column="68">&amp;<pos:position pos:line="160" pos:column="73"/></operator> <name pos:line="160" pos:column="70">COMMON<pos:position pos:line="160" pos:column="76"/></name><operator pos:line="160" pos:column="76">)<pos:position pos:line="160" pos:column="77"/></operator></expr>)<pos:position pos:line="160" pos:column="78"/></condition><then pos:line="160" pos:column="78"> <block pos:line="160" pos:column="79">{
						<comment type="block" pos:line="161" pos:column="49">/* We need to replay the have for this object
						 * on the next RPC request so the peer knows
						 * it is in common with us.
						 */</comment>
						<decl_stmt><decl><type><specifier pos:line="165" pos:column="49">const<pos:position pos:line="165" pos:column="54"/></specifier> <name pos:line="165" pos:column="55">char<pos:position pos:line="165" pos:column="59"/></name> <modifier pos:line="165" pos:column="60">*<pos:position pos:line="165" pos:column="61"/></modifier></type><name pos:line="165" pos:column="61">hex<pos:position pos:line="165" pos:column="64"/></name> <init pos:line="165" pos:column="65">= <expr><call><name pos:line="165" pos:column="67">sha1_to_hex<pos:position pos:line="165" pos:column="78"/></name><argument_list pos:line="165" pos:column="78">(<argument><expr><name pos:line="165" pos:column="79">result_sha1<pos:position pos:line="165" pos:column="90"/></name></expr></argument>)<pos:position pos:line="165" pos:column="91"/></argument_list></call></expr></init></decl>;<pos:position pos:line="165" pos:column="92"/></decl_stmt>
						<expr_stmt><expr><call><name pos:line="166" pos:column="49">packet_buf_write<pos:position pos:line="166" pos:column="65"/></name><argument_list pos:line="166" pos:column="65">(<argument><expr><operator pos:line="166" pos:column="66">&amp;<pos:position pos:line="166" pos:column="71"/></operator><name pos:line="166" pos:column="67">req_buf<pos:position pos:line="166" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="76">"have %s\n"<pos:position pos:line="166" pos:column="87"/></literal></expr></argument>, <argument><expr><name pos:line="166" pos:column="89">hex<pos:position pos:line="166" pos:column="92"/></name></expr></argument>)<pos:position pos:line="166" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="94"/></expr_stmt>
						<expr_stmt><expr><name pos:line="167" pos:column="49">state_len<pos:position pos:line="167" pos:column="58"/></name> <operator pos:line="167" pos:column="59">=<pos:position pos:line="167" pos:column="60"/></operator> <name><name pos:line="167" pos:column="61">req_buf<pos:position pos:line="167" pos:column="68"/></name><operator pos:line="167" pos:column="68">.<pos:position pos:line="167" pos:column="69"/></operator><name pos:line="167" pos:column="69">len<pos:position pos:line="167" pos:column="72"/></name></name></expr>;<pos:position pos:line="167" pos:column="73"/></expr_stmt>
						<comment type="block" pos:line="168" pos:column="49">/*
						 * Reset in_vain because an ack
						 * for this commit has not been
						 * seen.
						 */</comment>
						<expr_stmt><expr><name pos:line="173" pos:column="49">in_vain<pos:position pos:line="173" pos:column="56"/></name> <operator pos:line="173" pos:column="57">=<pos:position pos:line="173" pos:column="58"/></operator> <literal type="number" pos:line="173" pos:column="59">0<pos:position pos:line="173" pos:column="60"/></literal></expr>;<pos:position pos:line="173" pos:column="61"/></expr_stmt>
					}<pos:position pos:line="174" pos:column="42"/></block></then> <elseif pos:line="174" pos:column="43">else <if pos:line="174" pos:column="48">if <condition pos:line="174" pos:column="51">(<expr><operator pos:line="174" pos:column="52">!<pos:position pos:line="174" pos:column="53"/></operator><name><name pos:line="174" pos:column="53">args<pos:position pos:line="174" pos:column="57"/></name><operator pos:line="174" pos:column="57">-&gt;<pos:position pos:line="174" pos:column="62"/></operator><name pos:line="174" pos:column="59">stateless_rpc<pos:position pos:line="174" pos:column="72"/></name></name>
						   <operator pos:line="175" pos:column="52">||<pos:position pos:line="175" pos:column="54"/></operator> <name pos:line="175" pos:column="55">ack<pos:position pos:line="175" pos:column="58"/></name> <operator pos:line="175" pos:column="59">!=<pos:position pos:line="175" pos:column="61"/></operator> <name pos:line="175" pos:column="62">ACK_common<pos:position pos:line="175" pos:column="72"/></name></expr>)<pos:position pos:line="175" pos:column="73"/></condition><then pos:line="175" pos:column="73">
						<block type="pseudo"><expr_stmt><expr><name pos:line="176" pos:column="49">in_vain<pos:position pos:line="176" pos:column="56"/></name> <operator pos:line="176" pos:column="57">=<pos:position pos:line="176" pos:column="58"/></operator> <literal type="number" pos:line="176" pos:column="59">0<pos:position pos:line="176" pos:column="60"/></literal></expr>;<pos:position pos:line="176" pos:column="61"/></expr_stmt></block></then></if></elseif></if>
					<expr_stmt><expr><call><name pos:line="177" pos:column="41">mark_common<pos:position pos:line="177" pos:column="52"/></name><argument_list pos:line="177" pos:column="52">(<argument><expr><name pos:line="177" pos:column="53">commit<pos:position pos:line="177" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="177" pos:column="61">0<pos:position pos:line="177" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="177" pos:column="64">1<pos:position pos:line="177" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="67"/></expr_stmt>
					<expr_stmt><expr><name pos:line="178" pos:column="41">retval<pos:position pos:line="178" pos:column="47"/></name> <operator pos:line="178" pos:column="48">=<pos:position pos:line="178" pos:column="49"/></operator> <literal type="number" pos:line="178" pos:column="50">0<pos:position pos:line="178" pos:column="51"/></literal></expr>;<pos:position pos:line="178" pos:column="52"/></expr_stmt>
					<expr_stmt><expr><name pos:line="179" pos:column="41">got_continue<pos:position pos:line="179" pos:column="53"/></name> <operator pos:line="179" pos:column="54">=<pos:position pos:line="179" pos:column="55"/></operator> <literal type="number" pos:line="179" pos:column="56">1<pos:position pos:line="179" pos:column="57"/></literal></expr>;<pos:position pos:line="179" pos:column="58"/></expr_stmt>
					<if pos:line="180" pos:column="41">if <condition pos:line="180" pos:column="44">(<expr><name pos:line="180" pos:column="45">ack<pos:position pos:line="180" pos:column="48"/></name> <operator pos:line="180" pos:column="49">==<pos:position pos:line="180" pos:column="51"/></operator> <name pos:line="180" pos:column="52">ACK_ready<pos:position pos:line="180" pos:column="61"/></name></expr>)<pos:position pos:line="180" pos:column="62"/></condition><then pos:line="180" pos:column="62"> <block pos:line="180" pos:column="63">{
						<expr_stmt><expr><call><name pos:line="181" pos:column="49">clear_prio_queue<pos:position pos:line="181" pos:column="65"/></name><argument_list pos:line="181" pos:column="65">(<argument><expr><operator pos:line="181" pos:column="66">&amp;<pos:position pos:line="181" pos:column="71"/></operator><name pos:line="181" pos:column="67">rev_list<pos:position pos:line="181" pos:column="75"/></name></expr></argument>)<pos:position pos:line="181" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="77"/></expr_stmt>
						<expr_stmt><expr><name pos:line="182" pos:column="49">got_ready<pos:position pos:line="182" pos:column="58"/></name> <operator pos:line="182" pos:column="59">=<pos:position pos:line="182" pos:column="60"/></operator> <literal type="number" pos:line="182" pos:column="61">1<pos:position pos:line="182" pos:column="62"/></literal></expr>;<pos:position pos:line="182" pos:column="63"/></expr_stmt>
					}<pos:position pos:line="183" pos:column="42"/></block></then></if>
					<break pos:line="184" pos:column="41">break;<pos:position pos:line="184" pos:column="47"/></break>
					}<pos:position pos:line="185" pos:column="42"/></block>
				}<pos:position pos:line="186" pos:column="34"/></block></switch>
			}<pos:position pos:line="187" pos:column="26"/></block> while <condition pos:line="187" pos:column="33">(<expr><name pos:line="187" pos:column="34">ack<pos:position pos:line="187" pos:column="37"/></name></expr>)<pos:position pos:line="187" pos:column="38"/></condition>;<pos:position pos:line="187" pos:column="39"/></do>
			<expr_stmt><expr><name pos:line="188" pos:column="25">flushes<pos:position pos:line="188" pos:column="32"/></name><operator pos:line="188" pos:column="32">--<pos:position pos:line="188" pos:column="34"/></operator></expr>;<pos:position pos:line="188" pos:column="35"/></expr_stmt>
			<if pos:line="189" pos:column="25">if <condition pos:line="189" pos:column="28">(<expr><name pos:line="189" pos:column="29">got_continue<pos:position pos:line="189" pos:column="41"/></name> <operator pos:line="189" pos:column="42">&amp;&amp;<pos:position pos:line="189" pos:column="52"/></operator> <name pos:line="189" pos:column="45">MAX_IN_VAIN<pos:position pos:line="189" pos:column="56"/></name> <operator pos:line="189" pos:column="57">&lt;<pos:position pos:line="189" pos:column="61"/></operator> <name pos:line="189" pos:column="59">in_vain<pos:position pos:line="189" pos:column="66"/></name></expr>)<pos:position pos:line="189" pos:column="67"/></condition><then pos:line="189" pos:column="67"> <block pos:line="189" pos:column="68">{
				<if pos:line="190" pos:column="33">if <condition pos:line="190" pos:column="36">(<expr><name><name pos:line="190" pos:column="37">args<pos:position pos:line="190" pos:column="41"/></name><operator pos:line="190" pos:column="41">-&gt;<pos:position pos:line="190" pos:column="46"/></operator><name pos:line="190" pos:column="43">verbose<pos:position pos:line="190" pos:column="50"/></name></name></expr>)<pos:position pos:line="190" pos:column="51"/></condition><then pos:line="190" pos:column="51">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="191" pos:column="41">fprintf<pos:position pos:line="191" pos:column="48"/></name><argument_list pos:line="191" pos:column="48">(<argument><expr><name pos:line="191" pos:column="49">stderr<pos:position pos:line="191" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="191" pos:column="57">"giving up\n"<pos:position pos:line="191" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="72"/></expr_stmt></block></then></if>
				<break pos:line="192" pos:column="33">break;<pos:position pos:line="192" pos:column="39"/></break> <comment type="block" pos:line="192" pos:column="40">/* give up */</comment>
			}<pos:position pos:line="193" pos:column="26"/></block></then></if>
		}<pos:position pos:line="194" pos:column="18"/></block></then></if>
	}<pos:position pos:line="195" pos:column="10"/></block></while>
<label><name pos:line="196" pos:column="1">done<pos:position pos:line="196" pos:column="5"/></name>:<pos:position pos:line="196" pos:column="6"/></label>
	<if pos:line="197" pos:column="9">if <condition pos:line="197" pos:column="12">(<expr><operator pos:line="197" pos:column="13">!<pos:position pos:line="197" pos:column="14"/></operator><name pos:line="197" pos:column="14">got_ready<pos:position pos:line="197" pos:column="23"/></name> <operator pos:line="197" pos:column="24">||<pos:position pos:line="197" pos:column="26"/></operator> <operator pos:line="197" pos:column="27">!<pos:position pos:line="197" pos:column="28"/></operator><name pos:line="197" pos:column="28">no_done<pos:position pos:line="197" pos:column="35"/></name></expr>)<pos:position pos:line="197" pos:column="36"/></condition><then pos:line="197" pos:column="36"> <block pos:line="197" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="198" pos:column="17">packet_buf_write<pos:position pos:line="198" pos:column="33"/></name><argument_list pos:line="198" pos:column="33">(<argument><expr><operator pos:line="198" pos:column="34">&amp;<pos:position pos:line="198" pos:column="39"/></operator><name pos:line="198" pos:column="35">req_buf<pos:position pos:line="198" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="198" pos:column="44">"done\n"<pos:position pos:line="198" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="198" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="199" pos:column="17">send_request<pos:position pos:line="199" pos:column="29"/></name><argument_list pos:line="199" pos:column="29">(<argument><expr><name pos:line="199" pos:column="30">args<pos:position pos:line="199" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="199" pos:column="36">fd<pos:position pos:line="199" pos:column="38"/></name><index pos:line="199" pos:column="38">[<expr><literal type="number" pos:line="199" pos:column="39">1<pos:position pos:line="199" pos:column="40"/></literal></expr>]<pos:position pos:line="199" pos:column="41"/></index></name></expr></argument>, <argument><expr><operator pos:line="199" pos:column="43">&amp;<pos:position pos:line="199" pos:column="48"/></operator><name pos:line="199" pos:column="44">req_buf<pos:position pos:line="199" pos:column="51"/></name></expr></argument>)<pos:position pos:line="199" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="53"/></expr_stmt>
	}<pos:position pos:line="200" pos:column="10"/></block></then></if>
	<if pos:line="201" pos:column="9">if <condition pos:line="201" pos:column="12">(<expr><name><name pos:line="201" pos:column="13">args<pos:position pos:line="201" pos:column="17"/></name><operator pos:line="201" pos:column="17">-&gt;<pos:position pos:line="201" pos:column="22"/></operator><name pos:line="201" pos:column="19">verbose<pos:position pos:line="201" pos:column="26"/></name></name></expr>)<pos:position pos:line="201" pos:column="27"/></condition><then pos:line="201" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="202" pos:column="17">fprintf<pos:position pos:line="202" pos:column="24"/></name><argument_list pos:line="202" pos:column="24">(<argument><expr><name pos:line="202" pos:column="25">stderr<pos:position pos:line="202" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="202" pos:column="33">"done\n"<pos:position pos:line="202" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="202" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="43"/></expr_stmt></block></then></if>
	<if pos:line="203" pos:column="9">if <condition pos:line="203" pos:column="12">(<expr><name pos:line="203" pos:column="13">retval<pos:position pos:line="203" pos:column="19"/></name> <operator pos:line="203" pos:column="20">!=<pos:position pos:line="203" pos:column="22"/></operator> <literal type="number" pos:line="203" pos:column="23">0<pos:position pos:line="203" pos:column="24"/></literal></expr>)<pos:position pos:line="203" pos:column="25"/></condition><then pos:line="203" pos:column="25"> <block pos:line="203" pos:column="26">{
		<expr_stmt><expr><name pos:line="204" pos:column="17">multi_ack<pos:position pos:line="204" pos:column="26"/></name> <operator pos:line="204" pos:column="27">=<pos:position pos:line="204" pos:column="28"/></operator> <literal type="number" pos:line="204" pos:column="29">0<pos:position pos:line="204" pos:column="30"/></literal></expr>;<pos:position pos:line="204" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="205" pos:column="17">flushes<pos:position pos:line="205" pos:column="24"/></name><operator pos:line="205" pos:column="24">++<pos:position pos:line="205" pos:column="26"/></operator></expr>;<pos:position pos:line="205" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="206" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="207" pos:column="9">strbuf_release<pos:position pos:line="207" pos:column="23"/></name><argument_list pos:line="207" pos:column="23">(<argument><expr><operator pos:line="207" pos:column="24">&amp;<pos:position pos:line="207" pos:column="29"/></operator><name pos:line="207" pos:column="25">req_buf<pos:position pos:line="207" pos:column="32"/></name></expr></argument>)<pos:position pos:line="207" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="34"/></expr_stmt>

	<if pos:line="209" pos:column="9">if <condition pos:line="209" pos:column="12">(<expr><operator pos:line="209" pos:column="13">!<pos:position pos:line="209" pos:column="14"/></operator><name pos:line="209" pos:column="14">got_ready<pos:position pos:line="209" pos:column="23"/></name> <operator pos:line="209" pos:column="24">||<pos:position pos:line="209" pos:column="26"/></operator> <operator pos:line="209" pos:column="27">!<pos:position pos:line="209" pos:column="28"/></operator><name pos:line="209" pos:column="28">no_done<pos:position pos:line="209" pos:column="35"/></name></expr>)<pos:position pos:line="209" pos:column="36"/></condition><then pos:line="209" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="210" pos:column="17">consume_shallow_list<pos:position pos:line="210" pos:column="37"/></name><argument_list pos:line="210" pos:column="37">(<argument><expr><name pos:line="210" pos:column="38">args<pos:position pos:line="210" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="210" pos:column="44">fd<pos:position pos:line="210" pos:column="46"/></name><index pos:line="210" pos:column="46">[<expr><literal type="number" pos:line="210" pos:column="47">0<pos:position pos:line="210" pos:column="48"/></literal></expr>]<pos:position pos:line="210" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="210" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="51"/></expr_stmt></block></then></if>
	<while pos:line="211" pos:column="9">while <condition pos:line="211" pos:column="15">(<expr><name pos:line="211" pos:column="16">flushes<pos:position pos:line="211" pos:column="23"/></name> <operator pos:line="211" pos:column="24">||<pos:position pos:line="211" pos:column="26"/></operator> <name pos:line="211" pos:column="27">multi_ack<pos:position pos:line="211" pos:column="36"/></name></expr>)<pos:position pos:line="211" pos:column="37"/></condition> <block pos:line="211" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="212" pos:column="17">int<pos:position pos:line="212" pos:column="20"/></name></type> <name pos:line="212" pos:column="21">ack<pos:position pos:line="212" pos:column="24"/></name> <init pos:line="212" pos:column="25">= <expr><call><name pos:line="212" pos:column="27">get_ack<pos:position pos:line="212" pos:column="34"/></name><argument_list pos:line="212" pos:column="34">(<argument><expr><name><name pos:line="212" pos:column="35">fd<pos:position pos:line="212" pos:column="37"/></name><index pos:line="212" pos:column="37">[<expr><literal type="number" pos:line="212" pos:column="38">0<pos:position pos:line="212" pos:column="39"/></literal></expr>]<pos:position pos:line="212" pos:column="40"/></index></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="42">result_sha1<pos:position pos:line="212" pos:column="53"/></name></expr></argument>)<pos:position pos:line="212" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="212" pos:column="55"/></decl_stmt>
		<if pos:line="213" pos:column="17">if <condition pos:line="213" pos:column="20">(<expr><name pos:line="213" pos:column="21">ack<pos:position pos:line="213" pos:column="24"/></name></expr>)<pos:position pos:line="213" pos:column="25"/></condition><then pos:line="213" pos:column="25"> <block pos:line="213" pos:column="26">{
			<if pos:line="214" pos:column="25">if <condition pos:line="214" pos:column="28">(<expr><name><name pos:line="214" pos:column="29">args<pos:position pos:line="214" pos:column="33"/></name><operator pos:line="214" pos:column="33">-&gt;<pos:position pos:line="214" pos:column="38"/></operator><name pos:line="214" pos:column="35">verbose<pos:position pos:line="214" pos:column="42"/></name></name></expr>)<pos:position pos:line="214" pos:column="43"/></condition><then pos:line="214" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="215" pos:column="33">fprintf<pos:position pos:line="215" pos:column="40"/></name><argument_list pos:line="215" pos:column="40">(<argument><expr><name pos:line="215" pos:column="41">stderr<pos:position pos:line="215" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="215" pos:column="49">"got ack (%d) %s\n"<pos:position pos:line="215" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="215" pos:column="70">ack<pos:position pos:line="215" pos:column="73"/></name></expr></argument>,
					<argument><expr><call><name pos:line="216" pos:column="41">sha1_to_hex<pos:position pos:line="216" pos:column="52"/></name><argument_list pos:line="216" pos:column="52">(<argument><expr><name pos:line="216" pos:column="53">result_sha1<pos:position pos:line="216" pos:column="64"/></name></expr></argument>)<pos:position pos:line="216" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="216" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="67"/></expr_stmt></block></then></if>
			<if pos:line="217" pos:column="25">if <condition pos:line="217" pos:column="28">(<expr><name pos:line="217" pos:column="29">ack<pos:position pos:line="217" pos:column="32"/></name> <operator pos:line="217" pos:column="33">==<pos:position pos:line="217" pos:column="35"/></operator> <name pos:line="217" pos:column="36">ACK<pos:position pos:line="217" pos:column="39"/></name></expr>)<pos:position pos:line="217" pos:column="40"/></condition><then pos:line="217" pos:column="40">
				<block type="pseudo"><return pos:line="218" pos:column="33">return <expr><literal type="number" pos:line="218" pos:column="40">0<pos:position pos:line="218" pos:column="41"/></literal></expr>;<pos:position pos:line="218" pos:column="42"/></return></block></then></if>
			<expr_stmt><expr><name pos:line="219" pos:column="25">multi_ack<pos:position pos:line="219" pos:column="34"/></name> <operator pos:line="219" pos:column="35">=<pos:position pos:line="219" pos:column="36"/></operator> <literal type="number" pos:line="219" pos:column="37">1<pos:position pos:line="219" pos:column="38"/></literal></expr>;<pos:position pos:line="219" pos:column="39"/></expr_stmt>
			<continue pos:line="220" pos:column="25">continue;<pos:position pos:line="220" pos:column="34"/></continue>
		}<pos:position pos:line="221" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="222" pos:column="17">flushes<pos:position pos:line="222" pos:column="24"/></name><operator pos:line="222" pos:column="24">--<pos:position pos:line="222" pos:column="26"/></operator></expr>;<pos:position pos:line="222" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="223" pos:column="10"/></block></while>
	<comment type="block" pos:line="224" pos:column="9">/* it is no error to fetch into a completely empty repo */</comment>
	<return pos:line="225" pos:column="9">return <expr><ternary><condition><expr><name pos:line="225" pos:column="16">count<pos:position pos:line="225" pos:column="21"/></name></expr> ?<pos:position pos:line="225" pos:column="23"/></condition><then pos:line="225" pos:column="23"> <expr><name pos:line="225" pos:column="24">retval<pos:position pos:line="225" pos:column="30"/></name></expr> <pos:position pos:line="225" pos:column="31"/></then><else pos:line="225" pos:column="31">: <expr><literal type="number" pos:line="225" pos:column="33">0<pos:position pos:line="225" pos:column="34"/></literal></expr></else></ternary></expr>;<pos:position pos:line="225" pos:column="35"/></return>
}<pos:position pos:line="226" pos:column="2"/></block></function></unit>
