<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2002_git-2.10.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_bundle_header<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">fd<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">bundle_header<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">header<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
			       <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">report_path<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">buf<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">STRBUF_INIT<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* The bundle header begins with the signature */</comment>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">strbuf_getwholeline_fd<pos:position pos:line="8" pos:column="35"/></name><argument_list pos:line="8" pos:column="35">(<argument><expr><operator pos:line="8" pos:column="36">&amp;<pos:position pos:line="8" pos:column="41"/></operator><name pos:line="8" pos:column="37">buf<pos:position pos:line="8" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="42">fd<pos:position pos:line="8" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="8" pos:column="46">'\n'<pos:position pos:line="8" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call> <operator pos:line="8" pos:column="52">||<pos:position pos:line="8" pos:column="54"/></operator>
	    <call><name pos:line="9" pos:column="13">strcmp<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name><name pos:line="9" pos:column="20">buf<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">.<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="24">buf<pos:position pos:line="9" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="29">bundle_signature<pos:position pos:line="9" pos:column="45"/></name></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="47"/></condition><then pos:line="9" pos:column="47"> <block pos:line="9" pos:column="48">{
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name pos:line="10" pos:column="21">report_path<pos:position pos:line="10" pos:column="32"/></name></expr>)<pos:position pos:line="10" pos:column="33"/></condition><then pos:line="10" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="25">error<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><call><name pos:line="11" pos:column="31">_<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><literal type="string" pos:line="11" pos:column="33">"'%s' does not look like a v2 bundle file"<pos:position pos:line="11" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="76"/></argument_list></call></expr></argument>,
			      <argument><expr><name pos:line="12" pos:column="31">report_path<pos:position pos:line="12" pos:column="42"/></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="13" pos:column="17">status<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <operator pos:line="13" pos:column="26">-<pos:position pos:line="13" pos:column="27"/></operator><literal type="number" pos:line="13" pos:column="27">1<pos:position pos:line="13" pos:column="28"/></literal></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
		<goto pos:line="14" pos:column="17">goto <name pos:line="14" pos:column="22">abort<pos:position pos:line="14" pos:column="27"/></name>;<pos:position pos:line="14" pos:column="28"/></goto>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="17" pos:column="9">/* The bundle header ends with an empty line */</comment>
	<while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><operator pos:line="18" pos:column="16">!<pos:position pos:line="18" pos:column="17"/></operator><call><name pos:line="18" pos:column="17">strbuf_getwholeline_fd<pos:position pos:line="18" pos:column="39"/></name><argument_list pos:line="18" pos:column="39">(<argument><expr><operator pos:line="18" pos:column="40">&amp;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="41">buf<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="46">fd<pos:position pos:line="18" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="50">'\n'<pos:position pos:line="18" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call> <operator pos:line="18" pos:column="56">&amp;&amp;<pos:position pos:line="18" pos:column="66"/></operator>
	       <name><name pos:line="19" pos:column="16">buf<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">.<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="20">len<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">&amp;&amp;<pos:position pos:line="19" pos:column="34"/></operator> <name><name pos:line="19" pos:column="27">buf<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">.<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="31">buf<pos:position pos:line="19" pos:column="34"/></name><index pos:line="19" pos:column="34">[<expr><literal type="number" pos:line="19" pos:column="35">0<pos:position pos:line="19" pos:column="36"/></literal></expr>]<pos:position pos:line="19" pos:column="37"/></index></name> <operator pos:line="19" pos:column="38">!=<pos:position pos:line="19" pos:column="40"/></operator> <literal type="char" pos:line="19" pos:column="41">'\n'<pos:position pos:line="19" pos:column="45"/></literal></expr>)<pos:position pos:line="19" pos:column="46"/></condition> <block pos:line="19" pos:column="47">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">unsigned<pos:position pos:line="20" pos:column="25"/></name> <name pos:line="20" pos:column="26">char<pos:position pos:line="20" pos:column="30"/></name></type> <name><name pos:line="20" pos:column="31">sha1<pos:position pos:line="20" pos:column="35"/></name><index pos:line="20" pos:column="35">[<expr><literal type="number" pos:line="20" pos:column="36">20<pos:position pos:line="20" pos:column="38"/></literal></expr>]<pos:position pos:line="20" pos:column="39"/></index></name></decl>;<pos:position pos:line="20" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">int<pos:position pos:line="21" pos:column="20"/></name></type> <name pos:line="21" pos:column="21">is_prereq<pos:position pos:line="21" pos:column="30"/></name> <init pos:line="21" pos:column="31">= <expr><literal type="number" pos:line="21" pos:column="33">0<pos:position pos:line="21" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="35"/></decl_stmt>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">*<pos:position pos:line="23" pos:column="22"/></operator><name><name pos:line="23" pos:column="22">buf<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">.<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">buf<pos:position pos:line="23" pos:column="29"/></name></name> <operator pos:line="23" pos:column="30">==<pos:position pos:line="23" pos:column="32"/></operator> <literal type="char" pos:line="23" pos:column="33">'-'<pos:position pos:line="23" pos:column="36"/></literal></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37"> <block pos:line="23" pos:column="38">{
			<expr_stmt><expr><name pos:line="24" pos:column="25">is_prereq<pos:position pos:line="24" pos:column="34"/></name> <operator pos:line="24" pos:column="35">=<pos:position pos:line="24" pos:column="36"/></operator> <literal type="number" pos:line="24" pos:column="37">1<pos:position pos:line="24" pos:column="38"/></literal></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">strbuf_remove<pos:position pos:line="25" pos:column="38"/></name><argument_list pos:line="25" pos:column="38">(<argument><expr><operator pos:line="25" pos:column="39">&amp;<pos:position pos:line="25" pos:column="44"/></operator><name pos:line="25" pos:column="40">buf<pos:position pos:line="25" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="45">0<pos:position pos:line="25" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="48">1<pos:position pos:line="25" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">strbuf_rtrim<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><operator pos:line="27" pos:column="30">&amp;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="31">buf<pos:position pos:line="27" pos:column="34"/></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>

		<comment type="block" pos:line="29" pos:column="17">/*
		 * Tip lines have object name, SP, and refname.
		 * Prerequisites have object name that is optionally
		 * followed by SP and subject line.
		 */</comment>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">get_sha1_hex<pos:position pos:line="34" pos:column="33"/></name><argument_list pos:line="34" pos:column="33">(<argument><expr><name><name pos:line="34" pos:column="34">buf<pos:position pos:line="34" pos:column="37"/></name><operator pos:line="34" pos:column="37">.<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="38">buf<pos:position pos:line="34" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="43">sha1<pos:position pos:line="34" pos:column="47"/></name></expr></argument>)<pos:position pos:line="34" pos:column="48"/></argument_list></call> <operator pos:line="34" pos:column="49">||<pos:position pos:line="34" pos:column="51"/></operator>
		    <operator pos:line="35" pos:column="21">(<pos:position pos:line="35" pos:column="22"/></operator><name><name pos:line="35" pos:column="22">buf<pos:position pos:line="35" pos:column="25"/></name><operator pos:line="35" pos:column="25">.<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="26">len<pos:position pos:line="35" pos:column="29"/></name></name> <operator pos:line="35" pos:column="30">&gt;<pos:position pos:line="35" pos:column="34"/></operator> <literal type="number" pos:line="35" pos:column="32">40<pos:position pos:line="35" pos:column="34"/></literal> <operator pos:line="35" pos:column="35">&amp;&amp;<pos:position pos:line="35" pos:column="45"/></operator> <operator pos:line="35" pos:column="38">!<pos:position pos:line="35" pos:column="39"/></operator><call><name pos:line="35" pos:column="39">isspace<pos:position pos:line="35" pos:column="46"/></name><argument_list pos:line="35" pos:column="46">(<argument><expr><name><name pos:line="35" pos:column="47">buf<pos:position pos:line="35" pos:column="50"/></name><operator pos:line="35" pos:column="50">.<pos:position pos:line="35" pos:column="51"/></operator><name pos:line="35" pos:column="51">buf<pos:position pos:line="35" pos:column="54"/></name><index pos:line="35" pos:column="54">[<expr><literal type="number" pos:line="35" pos:column="55">40<pos:position pos:line="35" pos:column="57"/></literal></expr>]<pos:position pos:line="35" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="35" pos:column="59"/></argument_list></call><operator pos:line="35" pos:column="59">)<pos:position pos:line="35" pos:column="60"/></operator> <operator pos:line="35" pos:column="61">||<pos:position pos:line="35" pos:column="63"/></operator>
		    <operator pos:line="36" pos:column="21">(<pos:position pos:line="36" pos:column="22"/></operator><operator pos:line="36" pos:column="22">!<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="23">is_prereq<pos:position pos:line="36" pos:column="32"/></name> <operator pos:line="36" pos:column="33">&amp;&amp;<pos:position pos:line="36" pos:column="43"/></operator> <name><name pos:line="36" pos:column="36">buf<pos:position pos:line="36" pos:column="39"/></name><operator pos:line="36" pos:column="39">.<pos:position pos:line="36" pos:column="40"/></operator><name pos:line="36" pos:column="40">len<pos:position pos:line="36" pos:column="43"/></name></name> <operator pos:line="36" pos:column="44">&lt;=<pos:position pos:line="36" pos:column="49"/></operator> <literal type="number" pos:line="36" pos:column="47">40<pos:position pos:line="36" pos:column="49"/></literal><operator pos:line="36" pos:column="49">)<pos:position pos:line="36" pos:column="50"/></operator></expr>)<pos:position pos:line="36" pos:column="51"/></condition><then pos:line="36" pos:column="51"> <block pos:line="36" pos:column="52">{
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><name pos:line="37" pos:column="29">report_path<pos:position pos:line="37" pos:column="40"/></name></expr>)<pos:position pos:line="37" pos:column="41"/></condition><then pos:line="37" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="33">error<pos:position pos:line="38" pos:column="38"/></name><argument_list pos:line="38" pos:column="38">(<argument><expr><call><name pos:line="38" pos:column="39">_<pos:position pos:line="38" pos:column="40"/></name><argument_list pos:line="38" pos:column="40">(<argument><expr><literal type="string" pos:line="38" pos:column="41">"unrecognized header: %s%s (%d)"<pos:position pos:line="38" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="74"/></argument_list></call></expr></argument>,
				      <argument><expr><operator pos:line="39" pos:column="39">(<pos:position pos:line="39" pos:column="40"/></operator><ternary><condition><expr><name pos:line="39" pos:column="40">is_prereq<pos:position pos:line="39" pos:column="49"/></name></expr> ?<pos:position pos:line="39" pos:column="51"/></condition><then pos:line="39" pos:column="51"> <expr><literal type="string" pos:line="39" pos:column="52">"-"<pos:position pos:line="39" pos:column="55"/></literal></expr> <pos:position pos:line="39" pos:column="56"/></then><else pos:line="39" pos:column="56">: <expr><literal type="string" pos:line="39" pos:column="58">""<pos:position pos:line="39" pos:column="60"/></literal></expr></else></ternary><operator pos:line="39" pos:column="60">)<pos:position pos:line="39" pos:column="61"/></operator></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="63">buf<pos:position pos:line="39" pos:column="66"/></name><operator pos:line="39" pos:column="66">.<pos:position pos:line="39" pos:column="67"/></operator><name pos:line="39" pos:column="67">buf<pos:position pos:line="39" pos:column="70"/></name></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="72">(<pos:position pos:line="39" pos:column="73"/></operator><name pos:line="39" pos:column="73">int<pos:position pos:line="39" pos:column="76"/></name><operator pos:line="39" pos:column="76">)<pos:position pos:line="39" pos:column="77"/></operator><name><name pos:line="39" pos:column="77">buf<pos:position pos:line="39" pos:column="80"/></name><operator pos:line="39" pos:column="80">.<pos:position pos:line="39" pos:column="81"/></operator><name pos:line="39" pos:column="81">len<pos:position pos:line="39" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="86"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="40" pos:column="25">status<pos:position pos:line="40" pos:column="31"/></name> <operator pos:line="40" pos:column="32">=<pos:position pos:line="40" pos:column="33"/></operator> <operator pos:line="40" pos:column="34">-<pos:position pos:line="40" pos:column="35"/></operator><literal type="number" pos:line="40" pos:column="35">1<pos:position pos:line="40" pos:column="36"/></literal></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
			<break pos:line="41" pos:column="25">break;<pos:position pos:line="41" pos:column="31"/></break>
		}<pos:position pos:line="42" pos:column="18"/></block></then> <else pos:line="42" pos:column="19">else <block pos:line="42" pos:column="24">{
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><name pos:line="43" pos:column="29">is_prereq<pos:position pos:line="43" pos:column="38"/></name></expr>)<pos:position pos:line="43" pos:column="39"/></condition><then pos:line="43" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="33">add_to_ref_list<pos:position pos:line="44" pos:column="48"/></name><argument_list pos:line="44" pos:column="48">(<argument><expr><name pos:line="44" pos:column="49">sha1<pos:position pos:line="44" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="55">""<pos:position pos:line="44" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="44" pos:column="59">&amp;<pos:position pos:line="44" pos:column="64"/></operator><name><name pos:line="44" pos:column="60">header<pos:position pos:line="44" pos:column="66"/></name><operator pos:line="44" pos:column="66">-&gt;<pos:position pos:line="44" pos:column="71"/></operator><name pos:line="44" pos:column="68">prerequisites<pos:position pos:line="44" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="83"/></expr_stmt></block></then>
			<else pos:line="45" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="33">add_to_ref_list<pos:position pos:line="46" pos:column="48"/></name><argument_list pos:line="46" pos:column="48">(<argument><expr><name pos:line="46" pos:column="49">sha1<pos:position pos:line="46" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="55">buf<pos:position pos:line="46" pos:column="58"/></name><operator pos:line="46" pos:column="58">.<pos:position pos:line="46" pos:column="59"/></operator><name pos:line="46" pos:column="59">buf<pos:position pos:line="46" pos:column="62"/></name></name> <operator pos:line="46" pos:column="63">+<pos:position pos:line="46" pos:column="64"/></operator> <literal type="number" pos:line="46" pos:column="65">41<pos:position pos:line="46" pos:column="67"/></literal></expr></argument>, <argument><expr><operator pos:line="46" pos:column="69">&amp;<pos:position pos:line="46" pos:column="74"/></operator><name><name pos:line="46" pos:column="70">header<pos:position pos:line="46" pos:column="76"/></name><operator pos:line="46" pos:column="76">-&gt;<pos:position pos:line="46" pos:column="81"/></operator><name pos:line="46" pos:column="78">references<pos:position pos:line="46" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="90"/></expr_stmt></block></else></if>
		}<pos:position pos:line="47" pos:column="18"/></block></else></if>
	}<pos:position pos:line="48" pos:column="10"/></block></while>

 <label><name pos:line="50" pos:column="2">abort<pos:position pos:line="50" pos:column="7"/></name>:<pos:position pos:line="50" pos:column="8"/></label>
	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">status<pos:position pos:line="51" pos:column="19"/></name></expr>)<pos:position pos:line="51" pos:column="20"/></condition><then pos:line="51" pos:column="20"> <block pos:line="51" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">close<pos:position pos:line="52" pos:column="22"/></name><argument_list pos:line="52" pos:column="22">(<argument><expr><name pos:line="52" pos:column="23">fd<pos:position pos:line="52" pos:column="25"/></name></expr></argument>)<pos:position pos:line="52" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="53" pos:column="17">fd<pos:position pos:line="53" pos:column="19"/></name> <operator pos:line="53" pos:column="20">=<pos:position pos:line="53" pos:column="21"/></operator> <operator pos:line="53" pos:column="22">-<pos:position pos:line="53" pos:column="23"/></operator><literal type="number" pos:line="53" pos:column="23">1<pos:position pos:line="53" pos:column="24"/></literal></expr>;<pos:position pos:line="53" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">strbuf_release<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><operator pos:line="55" pos:column="24">&amp;<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="25">buf<pos:position pos:line="55" pos:column="28"/></name></expr></argument>)<pos:position pos:line="55" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="30"/></expr_stmt>
	<return pos:line="56" pos:column="9">return <expr><name pos:line="56" pos:column="16">fd<pos:position pos:line="56" pos:column="18"/></name></expr>;<pos:position pos:line="56" pos:column="19"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
