<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1835.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">queue_diff<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">diff_options<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">o<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>,
		      <parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">name1<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="42">const<pos:position pos:line="2" pos:column="47"/></specifier> <name pos:line="2" pos:column="48">char<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">name2<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">mode1<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="24">mode2<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><literal type="number" pos:line="4" pos:column="32">0<pos:position pos:line="4" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">get_mode<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">name1<pos:position pos:line="6" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="30">mode1<pos:position pos:line="6" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></call> <operator pos:line="6" pos:column="37">||<pos:position pos:line="6" pos:column="39"/></operator> <call><name pos:line="6" pos:column="40">get_mode<pos:position pos:line="6" pos:column="48"/></name><argument_list pos:line="6" pos:column="48">(<argument><expr><name pos:line="6" pos:column="49">name2<pos:position pos:line="6" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="56">&amp;<pos:position pos:line="6" pos:column="61"/></operator><name pos:line="6" pos:column="57">mode2<pos:position pos:line="6" pos:column="62"/></name></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="64"/></condition><then pos:line="6" pos:column="64">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><operator pos:line="7" pos:column="24">-<pos:position pos:line="7" pos:column="25"/></operator><literal type="number" pos:line="7" pos:column="25">1<pos:position pos:line="7" pos:column="26"/></literal></expr>;<pos:position pos:line="7" pos:column="27"/></return></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">mode1<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">&amp;&amp;<pos:position pos:line="9" pos:column="29"/></operator> <name pos:line="9" pos:column="22">mode2<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">&amp;&amp;<pos:position pos:line="9" pos:column="38"/></operator> <call><name pos:line="9" pos:column="31">S_ISDIR<pos:position pos:line="9" pos:column="38"/></name><argument_list pos:line="9" pos:column="38">(<argument><expr><name pos:line="9" pos:column="39">mode1<pos:position pos:line="9" pos:column="44"/></name></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call> <operator pos:line="9" pos:column="46">!=<pos:position pos:line="9" pos:column="48"/></operator> <call><name pos:line="9" pos:column="49">S_ISDIR<pos:position pos:line="9" pos:column="56"/></name><argument_list pos:line="9" pos:column="56">(<argument><expr><name pos:line="9" pos:column="57">mode2<pos:position pos:line="9" pos:column="62"/></name></expr></argument>)<pos:position pos:line="9" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="64"/></condition><then pos:line="9" pos:column="64">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><call><name pos:line="10" pos:column="24">error<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><literal type="string" pos:line="10" pos:column="30">"file/directory conflict: %s, %s"<pos:position pos:line="10" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="65">name1<pos:position pos:line="10" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="72">name2<pos:position pos:line="10" pos:column="77"/></name></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="79"/></return></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">S_ISDIR<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">mode1<pos:position pos:line="12" pos:column="26"/></name></expr></argument>)<pos:position pos:line="12" pos:column="27"/></argument_list></call> <operator pos:line="12" pos:column="28">||<pos:position pos:line="12" pos:column="30"/></operator> <call><name pos:line="12" pos:column="31">S_ISDIR<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(<argument><expr><name pos:line="12" pos:column="39">mode2<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="46"/></condition><then pos:line="12" pos:column="46"> <block pos:line="12" pos:column="47">{
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">strbuf<pos:position pos:line="13" pos:column="30"/></name></name></type> <name pos:line="13" pos:column="31">buffer1<pos:position pos:line="13" pos:column="38"/></name> <init pos:line="13" pos:column="39">= <expr><name pos:line="13" pos:column="41">STRBUF_INIT<pos:position pos:line="13" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="53"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="14" pos:column="17">struct<pos:position pos:line="14" pos:column="23"/></name> <name pos:line="14" pos:column="24">strbuf<pos:position pos:line="14" pos:column="30"/></name></name></type> <name pos:line="14" pos:column="31">buffer2<pos:position pos:line="14" pos:column="38"/></name> <init pos:line="14" pos:column="39">= <expr><name pos:line="14" pos:column="41">STRBUF_INIT<pos:position pos:line="14" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="53"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="15" pos:column="17">struct<pos:position pos:line="15" pos:column="23"/></name> <name pos:line="15" pos:column="24">string_list<pos:position pos:line="15" pos:column="35"/></name></name></type> <name pos:line="15" pos:column="36">p1<pos:position pos:line="15" pos:column="38"/></name> <init pos:line="15" pos:column="39">= <expr><name pos:line="15" pos:column="41">STRING_LIST_INIT_DUP<pos:position pos:line="15" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="62"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="16" pos:column="17">struct<pos:position pos:line="16" pos:column="23"/></name> <name pos:line="16" pos:column="24">string_list<pos:position pos:line="16" pos:column="35"/></name></name></type> <name pos:line="16" pos:column="36">p2<pos:position pos:line="16" pos:column="38"/></name> <init pos:line="16" pos:column="39">= <expr><name pos:line="16" pos:column="41">STRING_LIST_INIT_DUP<pos:position pos:line="16" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="62"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">int<pos:position pos:line="17" pos:column="20"/></name></type> <name pos:line="17" pos:column="21">i1<pos:position pos:line="17" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="17" pos:column="25">i2<pos:position pos:line="17" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="17" pos:column="29">ret<pos:position pos:line="17" pos:column="32"/></name> <init pos:line="17" pos:column="33">= <expr><literal type="number" pos:line="17" pos:column="35">0<pos:position pos:line="17" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">size_t<pos:position pos:line="18" pos:column="23"/></name></type> <name pos:line="18" pos:column="24">len1<pos:position pos:line="18" pos:column="28"/></name> <init pos:line="18" pos:column="29">= <expr><literal type="number" pos:line="18" pos:column="31">0<pos:position pos:line="18" pos:column="32"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="18" pos:column="34">len2<pos:position pos:line="18" pos:column="38"/></name> <init pos:line="18" pos:column="39">= <expr><literal type="number" pos:line="18" pos:column="41">0<pos:position pos:line="18" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="43"/></decl_stmt>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">name1<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">&amp;&amp;<pos:position pos:line="20" pos:column="37"/></operator> <call><name pos:line="20" pos:column="30">read_directory_contents<pos:position pos:line="20" pos:column="53"/></name><argument_list pos:line="20" pos:column="53">(<argument><expr><name pos:line="20" pos:column="54">name1<pos:position pos:line="20" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="61">&amp;<pos:position pos:line="20" pos:column="66"/></operator><name pos:line="20" pos:column="62">p1<pos:position pos:line="20" pos:column="64"/></name></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="66"/></condition><then pos:line="20" pos:column="66">
			<block type="pseudo"><return pos:line="21" pos:column="25">return <expr><operator pos:line="21" pos:column="32">-<pos:position pos:line="21" pos:column="33"/></operator><literal type="number" pos:line="21" pos:column="33">1<pos:position pos:line="21" pos:column="34"/></literal></expr>;<pos:position pos:line="21" pos:column="35"/></return></block></then></if>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">name2<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">&amp;&amp;<pos:position pos:line="22" pos:column="37"/></operator> <call><name pos:line="22" pos:column="30">read_directory_contents<pos:position pos:line="22" pos:column="53"/></name><argument_list pos:line="22" pos:column="53">(<argument><expr><name pos:line="22" pos:column="54">name2<pos:position pos:line="22" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="61">&amp;<pos:position pos:line="22" pos:column="66"/></operator><name pos:line="22" pos:column="62">p2<pos:position pos:line="22" pos:column="64"/></name></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="66"/></condition><then pos:line="22" pos:column="66"> <block pos:line="22" pos:column="67">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">string_list_clear<pos:position pos:line="23" pos:column="42"/></name><argument_list pos:line="23" pos:column="42">(<argument><expr><operator pos:line="23" pos:column="43">&amp;<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="44">p1<pos:position pos:line="23" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="48">0<pos:position pos:line="23" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt>
			<return pos:line="24" pos:column="25">return <expr><operator pos:line="24" pos:column="32">-<pos:position pos:line="24" pos:column="33"/></operator><literal type="number" pos:line="24" pos:column="33">1<pos:position pos:line="24" pos:column="34"/></literal></expr>;<pos:position pos:line="24" pos:column="35"/></return>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>

		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">name1<pos:position pos:line="27" pos:column="26"/></name></expr>)<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27"> <block pos:line="27" pos:column="28">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">strbuf_addstr<pos:position pos:line="28" pos:column="38"/></name><argument_list pos:line="28" pos:column="38">(<argument><expr><operator pos:line="28" pos:column="39">&amp;<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="40">buffer1<pos:position pos:line="28" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="49">name1<pos:position pos:line="28" pos:column="54"/></name></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt>
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><name><name pos:line="29" pos:column="29">buffer1<pos:position pos:line="29" pos:column="36"/></name><operator pos:line="29" pos:column="36">.<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="37">len<pos:position pos:line="29" pos:column="40"/></name></name> <operator pos:line="29" pos:column="41">&amp;&amp;<pos:position pos:line="29" pos:column="51"/></operator> <name><name pos:line="29" pos:column="44">buffer1<pos:position pos:line="29" pos:column="51"/></name><operator pos:line="29" pos:column="51">.<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="52">buf<pos:position pos:line="29" pos:column="55"/></name><index pos:line="29" pos:column="55">[<expr><name><name pos:line="29" pos:column="56">buffer1<pos:position pos:line="29" pos:column="63"/></name><operator pos:line="29" pos:column="63">.<pos:position pos:line="29" pos:column="64"/></operator><name pos:line="29" pos:column="64">len<pos:position pos:line="29" pos:column="67"/></name></name> <operator pos:line="29" pos:column="68">-<pos:position pos:line="29" pos:column="69"/></operator> <literal type="number" pos:line="29" pos:column="70">1<pos:position pos:line="29" pos:column="71"/></literal></expr>]<pos:position pos:line="29" pos:column="72"/></index></name> <operator pos:line="29" pos:column="73">!=<pos:position pos:line="29" pos:column="75"/></operator> <literal type="char" pos:line="29" pos:column="76">'/'<pos:position pos:line="29" pos:column="79"/></literal></expr>)<pos:position pos:line="29" pos:column="80"/></condition><then pos:line="29" pos:column="80">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="33">strbuf_addch<pos:position pos:line="30" pos:column="45"/></name><argument_list pos:line="30" pos:column="45">(<argument><expr><operator pos:line="30" pos:column="46">&amp;<pos:position pos:line="30" pos:column="51"/></operator><name pos:line="30" pos:column="47">buffer1<pos:position pos:line="30" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="56">'/'<pos:position pos:line="30" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="61"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="31" pos:column="25">len1<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">=<pos:position pos:line="31" pos:column="31"/></operator> <name><name pos:line="31" pos:column="32">buffer1<pos:position pos:line="31" pos:column="39"/></name><operator pos:line="31" pos:column="39">.<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="40">len<pos:position pos:line="31" pos:column="43"/></name></name></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">name2<pos:position pos:line="34" pos:column="26"/></name></expr>)<pos:position pos:line="34" pos:column="27"/></condition><then pos:line="34" pos:column="27"> <block pos:line="34" pos:column="28">{
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">strbuf_addstr<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">(<argument><expr><operator pos:line="35" pos:column="39">&amp;<pos:position pos:line="35" pos:column="44"/></operator><name pos:line="35" pos:column="40">buffer2<pos:position pos:line="35" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="49">name2<pos:position pos:line="35" pos:column="54"/></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="56"/></expr_stmt>
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name><name pos:line="36" pos:column="29">buffer2<pos:position pos:line="36" pos:column="36"/></name><operator pos:line="36" pos:column="36">.<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="37">len<pos:position pos:line="36" pos:column="40"/></name></name> <operator pos:line="36" pos:column="41">&amp;&amp;<pos:position pos:line="36" pos:column="51"/></operator> <name><name pos:line="36" pos:column="44">buffer2<pos:position pos:line="36" pos:column="51"/></name><operator pos:line="36" pos:column="51">.<pos:position pos:line="36" pos:column="52"/></operator><name pos:line="36" pos:column="52">buf<pos:position pos:line="36" pos:column="55"/></name><index pos:line="36" pos:column="55">[<expr><name><name pos:line="36" pos:column="56">buffer2<pos:position pos:line="36" pos:column="63"/></name><operator pos:line="36" pos:column="63">.<pos:position pos:line="36" pos:column="64"/></operator><name pos:line="36" pos:column="64">len<pos:position pos:line="36" pos:column="67"/></name></name> <operator pos:line="36" pos:column="68">-<pos:position pos:line="36" pos:column="69"/></operator> <literal type="number" pos:line="36" pos:column="70">1<pos:position pos:line="36" pos:column="71"/></literal></expr>]<pos:position pos:line="36" pos:column="72"/></index></name> <operator pos:line="36" pos:column="73">!=<pos:position pos:line="36" pos:column="75"/></operator> <literal type="char" pos:line="36" pos:column="76">'/'<pos:position pos:line="36" pos:column="79"/></literal></expr>)<pos:position pos:line="36" pos:column="80"/></condition><then pos:line="36" pos:column="80">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="33">strbuf_addch<pos:position pos:line="37" pos:column="45"/></name><argument_list pos:line="37" pos:column="45">(<argument><expr><operator pos:line="37" pos:column="46">&amp;<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="47">buffer2<pos:position pos:line="37" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="37" pos:column="56">'/'<pos:position pos:line="37" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="61"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="38" pos:column="25">len2<pos:position pos:line="38" pos:column="29"/></name> <operator pos:line="38" pos:column="30">=<pos:position pos:line="38" pos:column="31"/></operator> <name><name pos:line="38" pos:column="32">buffer2<pos:position pos:line="38" pos:column="39"/></name><operator pos:line="38" pos:column="39">.<pos:position pos:line="38" pos:column="40"/></operator><name pos:line="38" pos:column="40">len<pos:position pos:line="38" pos:column="43"/></name></name></expr>;<pos:position pos:line="38" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>

		<for pos:line="41" pos:column="17">for <control pos:line="41" pos:column="21">(<init><expr><name pos:line="41" pos:column="22">i1<pos:position pos:line="41" pos:column="24"/></name> <operator pos:line="41" pos:column="25">=<pos:position pos:line="41" pos:column="26"/></operator> <name pos:line="41" pos:column="27">i2<pos:position pos:line="41" pos:column="29"/></name> <operator pos:line="41" pos:column="30">=<pos:position pos:line="41" pos:column="31"/></operator> <literal type="number" pos:line="41" pos:column="32">0<pos:position pos:line="41" pos:column="33"/></literal></expr>;<pos:position pos:line="41" pos:column="34"/></init> <condition><expr><operator pos:line="41" pos:column="35">!<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="36">ret<pos:position pos:line="41" pos:column="39"/></name> <operator pos:line="41" pos:column="40">&amp;&amp;<pos:position pos:line="41" pos:column="50"/></operator> <operator pos:line="41" pos:column="43">(<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="44">i1<pos:position pos:line="41" pos:column="46"/></name> <operator pos:line="41" pos:column="47">&lt;<pos:position pos:line="41" pos:column="51"/></operator> <name><name pos:line="41" pos:column="49">p1<pos:position pos:line="41" pos:column="51"/></name><operator pos:line="41" pos:column="51">.<pos:position pos:line="41" pos:column="52"/></operator><name pos:line="41" pos:column="52">nr<pos:position pos:line="41" pos:column="54"/></name></name> <operator pos:line="41" pos:column="55">||<pos:position pos:line="41" pos:column="57"/></operator> <name pos:line="41" pos:column="58">i2<pos:position pos:line="41" pos:column="60"/></name> <operator pos:line="41" pos:column="61">&lt;<pos:position pos:line="41" pos:column="65"/></operator> <name><name pos:line="41" pos:column="63">p2<pos:position pos:line="41" pos:column="65"/></name><operator pos:line="41" pos:column="65">.<pos:position pos:line="41" pos:column="66"/></operator><name pos:line="41" pos:column="66">nr<pos:position pos:line="41" pos:column="68"/></name></name><operator pos:line="41" pos:column="68">)<pos:position pos:line="41" pos:column="69"/></operator></expr>;<pos:position pos:line="41" pos:column="70"/></condition> <incr/>)<pos:position pos:line="41" pos:column="72"/></control> <block pos:line="41" pos:column="73">{
			<decl_stmt><decl><type><specifier pos:line="42" pos:column="25">const<pos:position pos:line="42" pos:column="30"/></specifier> <name pos:line="42" pos:column="31">char<pos:position pos:line="42" pos:column="35"/></name> <modifier pos:line="42" pos:column="36">*<pos:position pos:line="42" pos:column="37"/></modifier></type><name pos:line="42" pos:column="37">n1<pos:position pos:line="42" pos:column="39"/></name></decl>, <modifier pos:line="42" pos:column="41">*<pos:position pos:line="42" pos:column="42"/></modifier><decl><type ref="prev"/><name pos:line="42" pos:column="42">n2<pos:position pos:line="42" pos:column="44"/></name></decl>;<pos:position pos:line="42" pos:column="45"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="43" pos:column="25">int<pos:position pos:line="43" pos:column="28"/></name></type> <name pos:line="43" pos:column="29">comp<pos:position pos:line="43" pos:column="33"/></name></decl>;<pos:position pos:line="43" pos:column="34"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="45" pos:column="25">strbuf_setlen<pos:position pos:line="45" pos:column="38"/></name><argument_list pos:line="45" pos:column="38">(<argument><expr><operator pos:line="45" pos:column="39">&amp;<pos:position pos:line="45" pos:column="44"/></operator><name pos:line="45" pos:column="40">buffer1<pos:position pos:line="45" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="49">len1<pos:position pos:line="45" pos:column="53"/></name></expr></argument>)<pos:position pos:line="45" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">strbuf_setlen<pos:position pos:line="46" pos:column="38"/></name><argument_list pos:line="46" pos:column="38">(<argument><expr><operator pos:line="46" pos:column="39">&amp;<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="40">buffer2<pos:position pos:line="46" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="49">len2<pos:position pos:line="46" pos:column="53"/></name></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt>

			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><name pos:line="48" pos:column="29">i1<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">==<pos:position pos:line="48" pos:column="34"/></operator> <name><name pos:line="48" pos:column="35">p1<pos:position pos:line="48" pos:column="37"/></name><operator pos:line="48" pos:column="37">.<pos:position pos:line="48" pos:column="38"/></operator><name pos:line="48" pos:column="38">nr<pos:position pos:line="48" pos:column="40"/></name></name></expr>)<pos:position pos:line="48" pos:column="41"/></condition><then pos:line="48" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="33">comp<pos:position pos:line="49" pos:column="37"/></name> <operator pos:line="49" pos:column="38">=<pos:position pos:line="49" pos:column="39"/></operator> <literal type="number" pos:line="49" pos:column="40">1<pos:position pos:line="49" pos:column="41"/></literal></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt></block></then>
			<elseif pos:line="50" pos:column="25">else <if pos:line="50" pos:column="30">if <condition pos:line="50" pos:column="33">(<expr><name pos:line="50" pos:column="34">i2<pos:position pos:line="50" pos:column="36"/></name> <operator pos:line="50" pos:column="37">==<pos:position pos:line="50" pos:column="39"/></operator> <name><name pos:line="50" pos:column="40">p2<pos:position pos:line="50" pos:column="42"/></name><operator pos:line="50" pos:column="42">.<pos:position pos:line="50" pos:column="43"/></operator><name pos:line="50" pos:column="43">nr<pos:position pos:line="50" pos:column="45"/></name></name></expr>)<pos:position pos:line="50" pos:column="46"/></condition><then pos:line="50" pos:column="46">
				<block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="33">comp<pos:position pos:line="51" pos:column="37"/></name> <operator pos:line="51" pos:column="38">=<pos:position pos:line="51" pos:column="39"/></operator> <operator pos:line="51" pos:column="40">-<pos:position pos:line="51" pos:column="41"/></operator><literal type="number" pos:line="51" pos:column="41">1<pos:position pos:line="51" pos:column="42"/></literal></expr>;<pos:position pos:line="51" pos:column="43"/></expr_stmt></block></then></if></elseif>
			<else pos:line="52" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="33">comp<pos:position pos:line="53" pos:column="37"/></name> <operator pos:line="53" pos:column="38">=<pos:position pos:line="53" pos:column="39"/></operator> <call><name pos:line="53" pos:column="40">strcmp<pos:position pos:line="53" pos:column="46"/></name><argument_list pos:line="53" pos:column="46">(<argument><expr><name><name pos:line="53" pos:column="47">p1<pos:position pos:line="53" pos:column="49"/></name><operator pos:line="53" pos:column="49">.<pos:position pos:line="53" pos:column="50"/></operator><name pos:line="53" pos:column="50">items<pos:position pos:line="53" pos:column="55"/></name><index pos:line="53" pos:column="55">[<expr><name pos:line="53" pos:column="56">i1<pos:position pos:line="53" pos:column="58"/></name></expr>]<pos:position pos:line="53" pos:column="59"/></index></name><operator pos:line="53" pos:column="59">.<pos:position pos:line="53" pos:column="60"/></operator><name pos:line="53" pos:column="60">string<pos:position pos:line="53" pos:column="66"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="68">p2<pos:position pos:line="53" pos:column="70"/></name><operator pos:line="53" pos:column="70">.<pos:position pos:line="53" pos:column="71"/></operator><name pos:line="53" pos:column="71">items<pos:position pos:line="53" pos:column="76"/></name><index pos:line="53" pos:column="76">[<expr><name pos:line="53" pos:column="77">i2<pos:position pos:line="53" pos:column="79"/></name></expr>]<pos:position pos:line="53" pos:column="80"/></index></name><operator pos:line="53" pos:column="80">.<pos:position pos:line="53" pos:column="81"/></operator><name pos:line="53" pos:column="81">string<pos:position pos:line="53" pos:column="87"/></name></expr></argument>)<pos:position pos:line="53" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="89"/></expr_stmt></block></else></if>

			<if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><name pos:line="55" pos:column="29">comp<pos:position pos:line="55" pos:column="33"/></name> <operator pos:line="55" pos:column="34">&gt;<pos:position pos:line="55" pos:column="38"/></operator> <literal type="number" pos:line="55" pos:column="36">0<pos:position pos:line="55" pos:column="37"/></literal></expr>)<pos:position pos:line="55" pos:column="38"/></condition><then pos:line="55" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="33">n1<pos:position pos:line="56" pos:column="35"/></name> <operator pos:line="56" pos:column="36">=<pos:position pos:line="56" pos:column="37"/></operator> <name pos:line="56" pos:column="38">NULL<pos:position pos:line="56" pos:column="42"/></name></expr>;<pos:position pos:line="56" pos:column="43"/></expr_stmt></block></then>
			<else pos:line="57" pos:column="25">else <block pos:line="57" pos:column="30">{
				<expr_stmt><expr><call><name pos:line="58" pos:column="33">strbuf_addstr<pos:position pos:line="58" pos:column="46"/></name><argument_list pos:line="58" pos:column="46">(<argument><expr><operator pos:line="58" pos:column="47">&amp;<pos:position pos:line="58" pos:column="52"/></operator><name pos:line="58" pos:column="48">buffer1<pos:position pos:line="58" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="57">p1<pos:position pos:line="58" pos:column="59"/></name><operator pos:line="58" pos:column="59">.<pos:position pos:line="58" pos:column="60"/></operator><name pos:line="58" pos:column="60">items<pos:position pos:line="58" pos:column="65"/></name><index pos:line="58" pos:column="65">[<expr><name pos:line="58" pos:column="66">i1<pos:position pos:line="58" pos:column="68"/></name><operator pos:line="58" pos:column="68">++<pos:position pos:line="58" pos:column="70"/></operator></expr>]<pos:position pos:line="58" pos:column="71"/></index></name><operator pos:line="58" pos:column="71">.<pos:position pos:line="58" pos:column="72"/></operator><name pos:line="58" pos:column="72">string<pos:position pos:line="58" pos:column="78"/></name></expr></argument>)<pos:position pos:line="58" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="80"/></expr_stmt>
				<expr_stmt><expr><name pos:line="59" pos:column="33">n1<pos:position pos:line="59" pos:column="35"/></name> <operator pos:line="59" pos:column="36">=<pos:position pos:line="59" pos:column="37"/></operator> <name><name pos:line="59" pos:column="38">buffer1<pos:position pos:line="59" pos:column="45"/></name><operator pos:line="59" pos:column="45">.<pos:position pos:line="59" pos:column="46"/></operator><name pos:line="59" pos:column="46">buf<pos:position pos:line="59" pos:column="49"/></name></name></expr>;<pos:position pos:line="59" pos:column="50"/></expr_stmt>
			}<pos:position pos:line="60" pos:column="26"/></block></else></if>

			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><name pos:line="62" pos:column="29">comp<pos:position pos:line="62" pos:column="33"/></name> <operator pos:line="62" pos:column="34">&lt;<pos:position pos:line="62" pos:column="38"/></operator> <literal type="number" pos:line="62" pos:column="36">0<pos:position pos:line="62" pos:column="37"/></literal></expr>)<pos:position pos:line="62" pos:column="38"/></condition><then pos:line="62" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="33">n2<pos:position pos:line="63" pos:column="35"/></name> <operator pos:line="63" pos:column="36">=<pos:position pos:line="63" pos:column="37"/></operator> <name pos:line="63" pos:column="38">NULL<pos:position pos:line="63" pos:column="42"/></name></expr>;<pos:position pos:line="63" pos:column="43"/></expr_stmt></block></then>
			<else pos:line="64" pos:column="25">else <block pos:line="64" pos:column="30">{
				<expr_stmt><expr><call><name pos:line="65" pos:column="33">strbuf_addstr<pos:position pos:line="65" pos:column="46"/></name><argument_list pos:line="65" pos:column="46">(<argument><expr><operator pos:line="65" pos:column="47">&amp;<pos:position pos:line="65" pos:column="52"/></operator><name pos:line="65" pos:column="48">buffer2<pos:position pos:line="65" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="57">p2<pos:position pos:line="65" pos:column="59"/></name><operator pos:line="65" pos:column="59">.<pos:position pos:line="65" pos:column="60"/></operator><name pos:line="65" pos:column="60">items<pos:position pos:line="65" pos:column="65"/></name><index pos:line="65" pos:column="65">[<expr><name pos:line="65" pos:column="66">i2<pos:position pos:line="65" pos:column="68"/></name><operator pos:line="65" pos:column="68">++<pos:position pos:line="65" pos:column="70"/></operator></expr>]<pos:position pos:line="65" pos:column="71"/></index></name><operator pos:line="65" pos:column="71">.<pos:position pos:line="65" pos:column="72"/></operator><name pos:line="65" pos:column="72">string<pos:position pos:line="65" pos:column="78"/></name></expr></argument>)<pos:position pos:line="65" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="80"/></expr_stmt>
				<expr_stmt><expr><name pos:line="66" pos:column="33">n2<pos:position pos:line="66" pos:column="35"/></name> <operator pos:line="66" pos:column="36">=<pos:position pos:line="66" pos:column="37"/></operator> <name><name pos:line="66" pos:column="38">buffer2<pos:position pos:line="66" pos:column="45"/></name><operator pos:line="66" pos:column="45">.<pos:position pos:line="66" pos:column="46"/></operator><name pos:line="66" pos:column="46">buf<pos:position pos:line="66" pos:column="49"/></name></name></expr>;<pos:position pos:line="66" pos:column="50"/></expr_stmt>
			}<pos:position pos:line="67" pos:column="26"/></block></else></if>

			<expr_stmt><expr><name pos:line="69" pos:column="25">ret<pos:position pos:line="69" pos:column="28"/></name> <operator pos:line="69" pos:column="29">=<pos:position pos:line="69" pos:column="30"/></operator> <call><name pos:line="69" pos:column="31">queue_diff<pos:position pos:line="69" pos:column="41"/></name><argument_list pos:line="69" pos:column="41">(<argument><expr><name pos:line="69" pos:column="42">o<pos:position pos:line="69" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="45">n1<pos:position pos:line="69" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="49">n2<pos:position pos:line="69" pos:column="51"/></name></expr></argument>)<pos:position pos:line="69" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="70" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">string_list_clear<pos:position pos:line="71" pos:column="34"/></name><argument_list pos:line="71" pos:column="34">(<argument><expr><operator pos:line="71" pos:column="35">&amp;<pos:position pos:line="71" pos:column="40"/></operator><name pos:line="71" pos:column="36">p1<pos:position pos:line="71" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="40">0<pos:position pos:line="71" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">string_list_clear<pos:position pos:line="72" pos:column="34"/></name><argument_list pos:line="72" pos:column="34">(<argument><expr><operator pos:line="72" pos:column="35">&amp;<pos:position pos:line="72" pos:column="40"/></operator><name pos:line="72" pos:column="36">p2<pos:position pos:line="72" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="40">0<pos:position pos:line="72" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">strbuf_release<pos:position pos:line="73" pos:column="31"/></name><argument_list pos:line="73" pos:column="31">(<argument><expr><operator pos:line="73" pos:column="32">&amp;<pos:position pos:line="73" pos:column="37"/></operator><name pos:line="73" pos:column="33">buffer1<pos:position pos:line="73" pos:column="40"/></name></expr></argument>)<pos:position pos:line="73" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">strbuf_release<pos:position pos:line="74" pos:column="31"/></name><argument_list pos:line="74" pos:column="31">(<argument><expr><operator pos:line="74" pos:column="32">&amp;<pos:position pos:line="74" pos:column="37"/></operator><name pos:line="74" pos:column="33">buffer2<pos:position pos:line="74" pos:column="40"/></name></expr></argument>)<pos:position pos:line="74" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="42"/></expr_stmt>

		<return pos:line="76" pos:column="17">return <expr><name pos:line="76" pos:column="24">ret<pos:position pos:line="76" pos:column="27"/></name></expr>;<pos:position pos:line="76" pos:column="28"/></return>
	}<pos:position pos:line="77" pos:column="10"/></block></then> <else pos:line="77" pos:column="11">else <block pos:line="77" pos:column="16">{
		<decl_stmt><decl><type><name><name pos:line="78" pos:column="17">struct<pos:position pos:line="78" pos:column="23"/></name> <name pos:line="78" pos:column="24">diff_filespec<pos:position pos:line="78" pos:column="37"/></name></name> <modifier pos:line="78" pos:column="38">*<pos:position pos:line="78" pos:column="39"/></modifier></type><name pos:line="78" pos:column="39">d1<pos:position pos:line="78" pos:column="41"/></name></decl>, <modifier pos:line="78" pos:column="43">*<pos:position pos:line="78" pos:column="44"/></modifier><decl><type ref="prev"/><name pos:line="78" pos:column="44">d2<pos:position pos:line="78" pos:column="46"/></name></decl>;<pos:position pos:line="78" pos:column="47"/></decl_stmt>

		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><call><name pos:line="80" pos:column="21">DIFF_OPT_TST<pos:position pos:line="80" pos:column="33"/></name><argument_list pos:line="80" pos:column="33">(<argument><expr><name pos:line="80" pos:column="34">o<pos:position pos:line="80" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="37">REVERSE_DIFF<pos:position pos:line="80" pos:column="49"/></name></expr></argument>)<pos:position pos:line="80" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="51"/></condition><then pos:line="80" pos:column="51"> <block pos:line="80" pos:column="52">{
			<decl_stmt><decl><type><name pos:line="81" pos:column="25">unsigned<pos:position pos:line="81" pos:column="33"/></name></type> <name pos:line="81" pos:column="34">tmp<pos:position pos:line="81" pos:column="37"/></name></decl>;<pos:position pos:line="81" pos:column="38"/></decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="82" pos:column="25">const<pos:position pos:line="82" pos:column="30"/></specifier> <name pos:line="82" pos:column="31">char<pos:position pos:line="82" pos:column="35"/></name> <modifier pos:line="82" pos:column="36">*<pos:position pos:line="82" pos:column="37"/></modifier></type><name pos:line="82" pos:column="37">tmp_c<pos:position pos:line="82" pos:column="42"/></name></decl>;<pos:position pos:line="82" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><name pos:line="83" pos:column="25">tmp<pos:position pos:line="83" pos:column="28"/></name> <operator pos:line="83" pos:column="29">=<pos:position pos:line="83" pos:column="30"/></operator> <name pos:line="83" pos:column="31">mode1<pos:position pos:line="83" pos:column="36"/></name></expr>;<pos:position pos:line="83" pos:column="37"/></expr_stmt> <expr_stmt><expr><name pos:line="83" pos:column="38">mode1<pos:position pos:line="83" pos:column="43"/></name> <operator pos:line="83" pos:column="44">=<pos:position pos:line="83" pos:column="45"/></operator> <name pos:line="83" pos:column="46">mode2<pos:position pos:line="83" pos:column="51"/></name></expr>;<pos:position pos:line="83" pos:column="52"/></expr_stmt> <expr_stmt><expr><name pos:line="83" pos:column="53">mode2<pos:position pos:line="83" pos:column="58"/></name> <operator pos:line="83" pos:column="59">=<pos:position pos:line="83" pos:column="60"/></operator> <name pos:line="83" pos:column="61">tmp<pos:position pos:line="83" pos:column="64"/></name></expr>;<pos:position pos:line="83" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name pos:line="84" pos:column="25">tmp_c<pos:position pos:line="84" pos:column="30"/></name> <operator pos:line="84" pos:column="31">=<pos:position pos:line="84" pos:column="32"/></operator> <name pos:line="84" pos:column="33">name1<pos:position pos:line="84" pos:column="38"/></name></expr>;<pos:position pos:line="84" pos:column="39"/></expr_stmt> <expr_stmt><expr><name pos:line="84" pos:column="40">name1<pos:position pos:line="84" pos:column="45"/></name> <operator pos:line="84" pos:column="46">=<pos:position pos:line="84" pos:column="47"/></operator> <name pos:line="84" pos:column="48">name2<pos:position pos:line="84" pos:column="53"/></name></expr>;<pos:position pos:line="84" pos:column="54"/></expr_stmt> <expr_stmt><expr><name pos:line="84" pos:column="55">name2<pos:position pos:line="84" pos:column="60"/></name> <operator pos:line="84" pos:column="61">=<pos:position pos:line="84" pos:column="62"/></operator> <name pos:line="84" pos:column="63">tmp_c<pos:position pos:line="84" pos:column="68"/></name></expr>;<pos:position pos:line="84" pos:column="69"/></expr_stmt>
		}<pos:position pos:line="85" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="87" pos:column="17">d1<pos:position pos:line="87" pos:column="19"/></name> <operator pos:line="87" pos:column="20">=<pos:position pos:line="87" pos:column="21"/></operator> <call><name pos:line="87" pos:column="22">noindex_filespec<pos:position pos:line="87" pos:column="38"/></name><argument_list pos:line="87" pos:column="38">(<argument><expr><name pos:line="87" pos:column="39">name1<pos:position pos:line="87" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="46">mode1<pos:position pos:line="87" pos:column="51"/></name></expr></argument>)<pos:position pos:line="87" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><name pos:line="88" pos:column="17">d2<pos:position pos:line="88" pos:column="19"/></name> <operator pos:line="88" pos:column="20">=<pos:position pos:line="88" pos:column="21"/></operator> <call><name pos:line="88" pos:column="22">noindex_filespec<pos:position pos:line="88" pos:column="38"/></name><argument_list pos:line="88" pos:column="38">(<argument><expr><name pos:line="88" pos:column="39">name2<pos:position pos:line="88" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="46">mode2<pos:position pos:line="88" pos:column="51"/></name></expr></argument>)<pos:position pos:line="88" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="89" pos:column="17">diff_queue<pos:position pos:line="89" pos:column="27"/></name><argument_list pos:line="89" pos:column="27">(<argument><expr><operator pos:line="89" pos:column="28">&amp;<pos:position pos:line="89" pos:column="33"/></operator><name pos:line="89" pos:column="29">diff_queued_diff<pos:position pos:line="89" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="47">d1<pos:position pos:line="89" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="51">d2<pos:position pos:line="89" pos:column="53"/></name></expr></argument>)<pos:position pos:line="89" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="55"/></expr_stmt>
		<return pos:line="90" pos:column="17">return <expr><literal type="number" pos:line="90" pos:column="24">0<pos:position pos:line="90" pos:column="25"/></literal></expr>;<pos:position pos:line="90" pos:column="26"/></return>
	}<pos:position pos:line="91" pos:column="10"/></block></else></if>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
