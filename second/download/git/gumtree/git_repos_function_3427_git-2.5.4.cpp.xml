<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3427_git-2.5.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_sha1_with_context_1<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">name<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
				   <parameter><decl><type><name pos:line="2" pos:column="36">unsigned<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">flags<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>,
				   <parameter><decl><type><specifier pos:line="3" pos:column="36">const<pos:position pos:line="3" pos:column="41"/></specifier> <name pos:line="3" pos:column="42">char<pos:position pos:line="3" pos:column="46"/></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type><name pos:line="3" pos:column="48">prefix<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>,
				   <parameter><decl><type><name pos:line="4" pos:column="36">unsigned<pos:position pos:line="4" pos:column="44"/></name> <name pos:line="4" pos:column="45">char<pos:position pos:line="4" pos:column="49"/></name> <modifier pos:line="4" pos:column="50">*<pos:position pos:line="4" pos:column="51"/></modifier></type><name pos:line="4" pos:column="51">sha1<pos:position pos:line="4" pos:column="55"/></name></decl></parameter>,
				   <parameter><decl><type><name><name pos:line="5" pos:column="36">struct<pos:position pos:line="5" pos:column="42"/></name> <name pos:line="5" pos:column="43">object_context<pos:position pos:line="5" pos:column="57"/></name></name> <modifier pos:line="5" pos:column="58">*<pos:position pos:line="5" pos:column="59"/></modifier></type><name pos:line="5" pos:column="59">oc<pos:position pos:line="5" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="62"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">ret<pos:position pos:line="7" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="18">bracket_depth<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">namelen<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><call><name pos:line="8" pos:column="23">strlen<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name pos:line="8" pos:column="30">name<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">cp<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">only_to_die<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><name pos:line="10" pos:column="27">flags<pos:position pos:line="10" pos:column="32"/></name> <operator pos:line="10" pos:column="33">&amp;<pos:position pos:line="10" pos:column="38"/></operator> <name pos:line="10" pos:column="35">GET_SHA1_ONLY_TO_DIE<pos:position pos:line="10" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="56"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">memset<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">oc<pos:position pos:line="12" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="20">0<pos:position pos:line="12" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="23">sizeof<argument_list pos:line="12" pos:column="29">(<argument><expr><operator pos:line="12" pos:column="30">*<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">oc<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">oc<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">-&gt;<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="13">mode<pos:position pos:line="13" pos:column="17"/></name></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="20">S_IFINVALID<pos:position pos:line="13" pos:column="31"/></name></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name pos:line="14" pos:column="9">ret<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <call><name pos:line="14" pos:column="15">get_sha1_1<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">name<pos:position pos:line="14" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="32">namelen<pos:position pos:line="14" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="41">sha1<pos:position pos:line="14" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="47">flags<pos:position pos:line="14" pos:column="52"/></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">ret<pos:position pos:line="15" pos:column="17"/></name></expr>)<pos:position pos:line="15" pos:column="18"/></condition><then pos:line="15" pos:column="18">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">ret<pos:position pos:line="16" pos:column="27"/></name></expr>;<pos:position pos:line="16" pos:column="28"/></return></block></then></if>
	<comment type="block" pos:line="17" pos:column="9">/*
	 * sha1:path --&gt; object name of path in ent sha1
	 * :path -&gt; object name of absolute path in index
	 * :./path -&gt; object name of path relative to cwd in index
	 * :[0-3]:path -&gt; object name of path in index at stage
	 * :/foo -&gt; recent commit matching foo
	 */</comment>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">name<pos:position pos:line="24" pos:column="17"/></name><index pos:line="24" pos:column="17">[<expr><literal type="number" pos:line="24" pos:column="18">0<pos:position pos:line="24" pos:column="19"/></literal></expr>]<pos:position pos:line="24" pos:column="20"/></index></name> <operator pos:line="24" pos:column="21">==<pos:position pos:line="24" pos:column="23"/></operator> <literal type="char" pos:line="24" pos:column="24">':'<pos:position pos:line="24" pos:column="27"/></literal></expr>)<pos:position pos:line="24" pos:column="28"/></condition><then pos:line="24" pos:column="28"> <block pos:line="24" pos:column="29">{
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">int<pos:position pos:line="25" pos:column="20"/></name></type> <name pos:line="25" pos:column="21">stage<pos:position pos:line="25" pos:column="26"/></name> <init pos:line="25" pos:column="27">= <expr><literal type="number" pos:line="25" pos:column="29">0<pos:position pos:line="25" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">const<pos:position pos:line="26" pos:column="22"/></specifier> <name><name pos:line="26" pos:column="23">struct<pos:position pos:line="26" pos:column="29"/></name> <name pos:line="26" pos:column="30">cache_entry<pos:position pos:line="26" pos:column="41"/></name></name> <modifier pos:line="26" pos:column="42">*<pos:position pos:line="26" pos:column="43"/></modifier></type><name pos:line="26" pos:column="43">ce<pos:position pos:line="26" pos:column="45"/></name></decl>;<pos:position pos:line="26" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">char<pos:position pos:line="27" pos:column="21"/></name> <modifier pos:line="27" pos:column="22">*<pos:position pos:line="27" pos:column="23"/></modifier></type><name pos:line="27" pos:column="23">new_path<pos:position pos:line="27" pos:column="31"/></name> <init pos:line="27" pos:column="32">= <expr><name pos:line="27" pos:column="34">NULL<pos:position pos:line="27" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">int<pos:position pos:line="28" pos:column="20"/></name></type> <name pos:line="28" pos:column="21">pos<pos:position pos:line="28" pos:column="24"/></name></decl>;<pos:position pos:line="28" pos:column="25"/></decl_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">!<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">only_to_die<pos:position pos:line="29" pos:column="33"/></name> <operator pos:line="29" pos:column="34">&amp;&amp;<pos:position pos:line="29" pos:column="44"/></operator> <name pos:line="29" pos:column="37">namelen<pos:position pos:line="29" pos:column="44"/></name> <operator pos:line="29" pos:column="45">&gt;<pos:position pos:line="29" pos:column="49"/></operator> <literal type="number" pos:line="29" pos:column="47">2<pos:position pos:line="29" pos:column="48"/></literal> <operator pos:line="29" pos:column="49">&amp;&amp;<pos:position pos:line="29" pos:column="59"/></operator> <name><name pos:line="29" pos:column="52">name<pos:position pos:line="29" pos:column="56"/></name><index pos:line="29" pos:column="56">[<expr><literal type="number" pos:line="29" pos:column="57">1<pos:position pos:line="29" pos:column="58"/></literal></expr>]<pos:position pos:line="29" pos:column="59"/></index></name> <operator pos:line="29" pos:column="60">==<pos:position pos:line="29" pos:column="62"/></operator> <literal type="char" pos:line="29" pos:column="63">'/'<pos:position pos:line="29" pos:column="66"/></literal></expr>)<pos:position pos:line="29" pos:column="67"/></condition><then pos:line="29" pos:column="67"> <block pos:line="29" pos:column="68">{
			<decl_stmt><decl><type><name><name pos:line="30" pos:column="25">struct<pos:position pos:line="30" pos:column="31"/></name> <name pos:line="30" pos:column="32">commit_list<pos:position pos:line="30" pos:column="43"/></name></name> <modifier pos:line="30" pos:column="44">*<pos:position pos:line="30" pos:column="45"/></modifier></type><name pos:line="30" pos:column="45">list<pos:position pos:line="30" pos:column="49"/></name> <init pos:line="30" pos:column="50">= <expr><name pos:line="30" pos:column="52">NULL<pos:position pos:line="30" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="30" pos:column="57"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="32" pos:column="25">for_each_ref<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">(<argument><expr><name pos:line="32" pos:column="38">handle_one_ref<pos:position pos:line="32" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="54">&amp;<pos:position pos:line="32" pos:column="59"/></operator><name pos:line="32" pos:column="55">list<pos:position pos:line="32" pos:column="59"/></name></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">commit_list_sort_by_date<pos:position pos:line="33" pos:column="49"/></name><argument_list pos:line="33" pos:column="49">(<argument><expr><operator pos:line="33" pos:column="50">&amp;<pos:position pos:line="33" pos:column="55"/></operator><name pos:line="33" pos:column="51">list<pos:position pos:line="33" pos:column="55"/></name></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt>
			<return pos:line="34" pos:column="25">return <expr><call><name pos:line="34" pos:column="32">get_sha1_oneline<pos:position pos:line="34" pos:column="48"/></name><argument_list pos:line="34" pos:column="48">(<argument><expr><name pos:line="34" pos:column="49">name<pos:position pos:line="34" pos:column="53"/></name> <operator pos:line="34" pos:column="54">+<pos:position pos:line="34" pos:column="55"/></operator> <literal type="number" pos:line="34" pos:column="56">2<pos:position pos:line="34" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="59">sha1<pos:position pos:line="34" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="65">list<pos:position pos:line="34" pos:column="69"/></name></expr></argument>)<pos:position pos:line="34" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="71"/></return>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">namelen<pos:position pos:line="36" pos:column="28"/></name> <operator pos:line="36" pos:column="29">&lt;<pos:position pos:line="36" pos:column="33"/></operator> <literal type="number" pos:line="36" pos:column="31">3<pos:position pos:line="36" pos:column="32"/></literal> <operator pos:line="36" pos:column="33">||<pos:position pos:line="36" pos:column="35"/></operator>
		    <name><name pos:line="37" pos:column="21">name<pos:position pos:line="37" pos:column="25"/></name><index pos:line="37" pos:column="25">[<expr><literal type="number" pos:line="37" pos:column="26">2<pos:position pos:line="37" pos:column="27"/></literal></expr>]<pos:position pos:line="37" pos:column="28"/></index></name> <operator pos:line="37" pos:column="29">!=<pos:position pos:line="37" pos:column="31"/></operator> <literal type="char" pos:line="37" pos:column="32">':'<pos:position pos:line="37" pos:column="35"/></literal> <operator pos:line="37" pos:column="36">||<pos:position pos:line="37" pos:column="38"/></operator>
		    <name><name pos:line="38" pos:column="21">name<pos:position pos:line="38" pos:column="25"/></name><index pos:line="38" pos:column="25">[<expr><literal type="number" pos:line="38" pos:column="26">1<pos:position pos:line="38" pos:column="27"/></literal></expr>]<pos:position pos:line="38" pos:column="28"/></index></name> <operator pos:line="38" pos:column="29">&lt;<pos:position pos:line="38" pos:column="33"/></operator> <literal type="char" pos:line="38" pos:column="31">'0'<pos:position pos:line="38" pos:column="34"/></literal> <operator pos:line="38" pos:column="35">||<pos:position pos:line="38" pos:column="37"/></operator> <literal type="char" pos:line="38" pos:column="38">'3'<pos:position pos:line="38" pos:column="41"/></literal> <operator pos:line="38" pos:column="42">&lt;<pos:position pos:line="38" pos:column="46"/></operator> <name><name pos:line="38" pos:column="44">name<pos:position pos:line="38" pos:column="48"/></name><index pos:line="38" pos:column="48">[<expr><literal type="number" pos:line="38" pos:column="49">1<pos:position pos:line="38" pos:column="50"/></literal></expr>]<pos:position pos:line="38" pos:column="51"/></index></name></expr>)<pos:position pos:line="38" pos:column="52"/></condition><then pos:line="38" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="25">cp<pos:position pos:line="39" pos:column="27"/></name> <operator pos:line="39" pos:column="28">=<pos:position pos:line="39" pos:column="29"/></operator> <name pos:line="39" pos:column="30">name<pos:position pos:line="39" pos:column="34"/></name> <operator pos:line="39" pos:column="35">+<pos:position pos:line="39" pos:column="36"/></operator> <literal type="number" pos:line="39" pos:column="37">1<pos:position pos:line="39" pos:column="38"/></literal></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt></block></then>
		<else pos:line="40" pos:column="17">else <block pos:line="40" pos:column="22">{
			<expr_stmt><expr><name pos:line="41" pos:column="25">stage<pos:position pos:line="41" pos:column="30"/></name> <operator pos:line="41" pos:column="31">=<pos:position pos:line="41" pos:column="32"/></operator> <name><name pos:line="41" pos:column="33">name<pos:position pos:line="41" pos:column="37"/></name><index pos:line="41" pos:column="37">[<expr><literal type="number" pos:line="41" pos:column="38">1<pos:position pos:line="41" pos:column="39"/></literal></expr>]<pos:position pos:line="41" pos:column="40"/></index></name> <operator pos:line="41" pos:column="41">-<pos:position pos:line="41" pos:column="42"/></operator> <literal type="char" pos:line="41" pos:column="43">'0'<pos:position pos:line="41" pos:column="46"/></literal></expr>;<pos:position pos:line="41" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="42" pos:column="25">cp<pos:position pos:line="42" pos:column="27"/></name> <operator pos:line="42" pos:column="28">=<pos:position pos:line="42" pos:column="29"/></operator> <name pos:line="42" pos:column="30">name<pos:position pos:line="42" pos:column="34"/></name> <operator pos:line="42" pos:column="35">+<pos:position pos:line="42" pos:column="36"/></operator> <literal type="number" pos:line="42" pos:column="37">3<pos:position pos:line="42" pos:column="38"/></literal></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="43" pos:column="18"/></block></else></if>
		<expr_stmt><expr><name pos:line="44" pos:column="17">new_path<pos:position pos:line="44" pos:column="25"/></name> <operator pos:line="44" pos:column="26">=<pos:position pos:line="44" pos:column="27"/></operator> <call><name pos:line="44" pos:column="28">resolve_relative_path<pos:position pos:line="44" pos:column="49"/></name><argument_list pos:line="44" pos:column="49">(<argument><expr><name pos:line="44" pos:column="50">cp<pos:position pos:line="44" pos:column="52"/></name></expr></argument>)<pos:position pos:line="44" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="54"/></expr_stmt>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><operator pos:line="45" pos:column="21">!<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="22">new_path<pos:position pos:line="45" pos:column="30"/></name></expr>)<pos:position pos:line="45" pos:column="31"/></condition><then pos:line="45" pos:column="31"> <block pos:line="45" pos:column="32">{
			<expr_stmt><expr><name pos:line="46" pos:column="25">namelen<pos:position pos:line="46" pos:column="32"/></name> <operator pos:line="46" pos:column="33">=<pos:position pos:line="46" pos:column="34"/></operator> <name pos:line="46" pos:column="35">namelen<pos:position pos:line="46" pos:column="42"/></name> <operator pos:line="46" pos:column="43">-<pos:position pos:line="46" pos:column="44"/></operator> <operator pos:line="46" pos:column="45">(<pos:position pos:line="46" pos:column="46"/></operator><name pos:line="46" pos:column="46">cp<pos:position pos:line="46" pos:column="48"/></name> <operator pos:line="46" pos:column="49">-<pos:position pos:line="46" pos:column="50"/></operator> <name pos:line="46" pos:column="51">name<pos:position pos:line="46" pos:column="55"/></name><operator pos:line="46" pos:column="55">)<pos:position pos:line="46" pos:column="56"/></operator></expr>;<pos:position pos:line="46" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="47" pos:column="18"/></block></then> <else pos:line="47" pos:column="19">else <block pos:line="47" pos:column="24">{
			<expr_stmt><expr><name pos:line="48" pos:column="25">cp<pos:position pos:line="48" pos:column="27"/></name> <operator pos:line="48" pos:column="28">=<pos:position pos:line="48" pos:column="29"/></operator> <name pos:line="48" pos:column="30">new_path<pos:position pos:line="48" pos:column="38"/></name></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="49" pos:column="25">namelen<pos:position pos:line="49" pos:column="32"/></name> <operator pos:line="49" pos:column="33">=<pos:position pos:line="49" pos:column="34"/></operator> <call><name pos:line="49" pos:column="35">strlen<pos:position pos:line="49" pos:column="41"/></name><argument_list pos:line="49" pos:column="41">(<argument><expr><name pos:line="49" pos:column="42">cp<pos:position pos:line="49" pos:column="44"/></name></expr></argument>)<pos:position pos:line="49" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="50" pos:column="18"/></block></else></if>

		<expr_stmt><expr><call><name pos:line="52" pos:column="17">strlcpy<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name><name pos:line="52" pos:column="25">oc<pos:position pos:line="52" pos:column="27"/></name><operator pos:line="52" pos:column="27">-&gt;<pos:position pos:line="52" pos:column="32"/></operator><name pos:line="52" pos:column="29">path<pos:position pos:line="52" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="35">cp<pos:position pos:line="52" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="39">sizeof<argument_list pos:line="52" pos:column="45">(<argument><expr><name><name pos:line="52" pos:column="46">oc<pos:position pos:line="52" pos:column="48"/></name><operator pos:line="52" pos:column="48">-&gt;<pos:position pos:line="52" pos:column="53"/></operator><name pos:line="52" pos:column="50">path<pos:position pos:line="52" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="57"/></expr_stmt>

		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><operator pos:line="54" pos:column="21">!<pos:position pos:line="54" pos:column="22"/></operator><name pos:line="54" pos:column="22">active_cache<pos:position pos:line="54" pos:column="34"/></name></expr>)<pos:position pos:line="54" pos:column="35"/></condition><then pos:line="54" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="25">read_cache<pos:position pos:line="55" pos:column="35"/></name><argument_list pos:line="55" pos:column="35">()<pos:position pos:line="55" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="38"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="56" pos:column="17">pos<pos:position pos:line="56" pos:column="20"/></name> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <call><name pos:line="56" pos:column="23">cache_name_pos<pos:position pos:line="56" pos:column="37"/></name><argument_list pos:line="56" pos:column="37">(<argument><expr><name pos:line="56" pos:column="38">cp<pos:position pos:line="56" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="42">namelen<pos:position pos:line="56" pos:column="49"/></name></expr></argument>)<pos:position pos:line="56" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="51"/></expr_stmt>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><name pos:line="57" pos:column="21">pos<pos:position pos:line="57" pos:column="24"/></name> <operator pos:line="57" pos:column="25">&lt;<pos:position pos:line="57" pos:column="29"/></operator> <literal type="number" pos:line="57" pos:column="27">0<pos:position pos:line="57" pos:column="28"/></literal></expr>)<pos:position pos:line="57" pos:column="29"/></condition><then pos:line="57" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="25">pos<pos:position pos:line="58" pos:column="28"/></name> <operator pos:line="58" pos:column="29">=<pos:position pos:line="58" pos:column="30"/></operator> <operator pos:line="58" pos:column="31">-<pos:position pos:line="58" pos:column="32"/></operator><name pos:line="58" pos:column="32">pos<pos:position pos:line="58" pos:column="35"/></name> <operator pos:line="58" pos:column="36">-<pos:position pos:line="58" pos:column="37"/></operator> <literal type="number" pos:line="58" pos:column="38">1<pos:position pos:line="58" pos:column="39"/></literal></expr>;<pos:position pos:line="58" pos:column="40"/></expr_stmt></block></then></if>
		<while pos:line="59" pos:column="17">while <condition pos:line="59" pos:column="23">(<expr><name pos:line="59" pos:column="24">pos<pos:position pos:line="59" pos:column="27"/></name> <operator pos:line="59" pos:column="28">&lt;<pos:position pos:line="59" pos:column="32"/></operator> <name pos:line="59" pos:column="30">active_nr<pos:position pos:line="59" pos:column="39"/></name></expr>)<pos:position pos:line="59" pos:column="40"/></condition> <block pos:line="59" pos:column="41">{
			<expr_stmt><expr><name pos:line="60" pos:column="25">ce<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">=<pos:position pos:line="60" pos:column="29"/></operator> <name><name pos:line="60" pos:column="30">active_cache<pos:position pos:line="60" pos:column="42"/></name><index pos:line="60" pos:column="42">[<expr><name pos:line="60" pos:column="43">pos<pos:position pos:line="60" pos:column="46"/></name></expr>]<pos:position pos:line="60" pos:column="47"/></index></name></expr>;<pos:position pos:line="60" pos:column="48"/></expr_stmt>
			<if pos:line="61" pos:column="25">if <condition pos:line="61" pos:column="28">(<expr><call><name pos:line="61" pos:column="29">ce_namelen<pos:position pos:line="61" pos:column="39"/></name><argument_list pos:line="61" pos:column="39">(<argument><expr><name pos:line="61" pos:column="40">ce<pos:position pos:line="61" pos:column="42"/></name></expr></argument>)<pos:position pos:line="61" pos:column="43"/></argument_list></call> <operator pos:line="61" pos:column="44">!=<pos:position pos:line="61" pos:column="46"/></operator> <name pos:line="61" pos:column="47">namelen<pos:position pos:line="61" pos:column="54"/></name> <operator pos:line="61" pos:column="55">||<pos:position pos:line="61" pos:column="57"/></operator>
			    <call><name pos:line="62" pos:column="29">memcmp<pos:position pos:line="62" pos:column="35"/></name><argument_list pos:line="62" pos:column="35">(<argument><expr><name><name pos:line="62" pos:column="36">ce<pos:position pos:line="62" pos:column="38"/></name><operator pos:line="62" pos:column="38">-&gt;<pos:position pos:line="62" pos:column="43"/></operator><name pos:line="62" pos:column="40">name<pos:position pos:line="62" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="46">cp<pos:position pos:line="62" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="50">namelen<pos:position pos:line="62" pos:column="57"/></name></expr></argument>)<pos:position pos:line="62" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="59"/></condition><then pos:line="62" pos:column="59">
				<block type="pseudo"><break pos:line="63" pos:column="33">break;<pos:position pos:line="63" pos:column="39"/></break></block></then></if>
			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><call><name pos:line="64" pos:column="29">ce_stage<pos:position pos:line="64" pos:column="37"/></name><argument_list pos:line="64" pos:column="37">(<argument><expr><name pos:line="64" pos:column="38">ce<pos:position pos:line="64" pos:column="40"/></name></expr></argument>)<pos:position pos:line="64" pos:column="41"/></argument_list></call> <operator pos:line="64" pos:column="42">==<pos:position pos:line="64" pos:column="44"/></operator> <name pos:line="64" pos:column="45">stage<pos:position pos:line="64" pos:column="50"/></name></expr>)<pos:position pos:line="64" pos:column="51"/></condition><then pos:line="64" pos:column="51"> <block pos:line="64" pos:column="52">{
				<expr_stmt><expr><call><name pos:line="65" pos:column="33">hashcpy<pos:position pos:line="65" pos:column="40"/></name><argument_list pos:line="65" pos:column="40">(<argument><expr><name pos:line="65" pos:column="41">sha1<pos:position pos:line="65" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="47">ce<pos:position pos:line="65" pos:column="49"/></name><operator pos:line="65" pos:column="49">-&gt;<pos:position pos:line="65" pos:column="54"/></operator><name pos:line="65" pos:column="51">sha1<pos:position pos:line="65" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="66" pos:column="33">oc<pos:position pos:line="66" pos:column="35"/></name><operator pos:line="66" pos:column="35">-&gt;<pos:position pos:line="66" pos:column="40"/></operator><name pos:line="66" pos:column="37">mode<pos:position pos:line="66" pos:column="41"/></name></name> <operator pos:line="66" pos:column="42">=<pos:position pos:line="66" pos:column="43"/></operator> <name><name pos:line="66" pos:column="44">ce<pos:position pos:line="66" pos:column="46"/></name><operator pos:line="66" pos:column="46">-&gt;<pos:position pos:line="66" pos:column="51"/></operator><name pos:line="66" pos:column="48">ce_mode<pos:position pos:line="66" pos:column="55"/></name></name></expr>;<pos:position pos:line="66" pos:column="56"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="67" pos:column="33">free<pos:position pos:line="67" pos:column="37"/></name><argument_list pos:line="67" pos:column="37">(<argument><expr><name pos:line="67" pos:column="38">new_path<pos:position pos:line="67" pos:column="46"/></name></expr></argument>)<pos:position pos:line="67" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="48"/></expr_stmt>
				<return pos:line="68" pos:column="33">return <expr><literal type="number" pos:line="68" pos:column="40">0<pos:position pos:line="68" pos:column="41"/></literal></expr>;<pos:position pos:line="68" pos:column="42"/></return>
			}<pos:position pos:line="69" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="70" pos:column="25">pos<pos:position pos:line="70" pos:column="28"/></name><operator pos:line="70" pos:column="28">++<pos:position pos:line="70" pos:column="30"/></operator></expr>;<pos:position pos:line="70" pos:column="31"/></expr_stmt>
		}<pos:position pos:line="71" pos:column="18"/></block></while>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><name pos:line="72" pos:column="21">only_to_die<pos:position pos:line="72" pos:column="32"/></name> <operator pos:line="72" pos:column="33">&amp;&amp;<pos:position pos:line="72" pos:column="43"/></operator> <name><name pos:line="72" pos:column="36">name<pos:position pos:line="72" pos:column="40"/></name><index pos:line="72" pos:column="40">[<expr><literal type="number" pos:line="72" pos:column="41">1<pos:position pos:line="72" pos:column="42"/></literal></expr>]<pos:position pos:line="72" pos:column="43"/></index></name> <operator pos:line="72" pos:column="44">&amp;&amp;<pos:position pos:line="72" pos:column="54"/></operator> <name><name pos:line="72" pos:column="47">name<pos:position pos:line="72" pos:column="51"/></name><index pos:line="72" pos:column="51">[<expr><literal type="number" pos:line="72" pos:column="52">1<pos:position pos:line="72" pos:column="53"/></literal></expr>]<pos:position pos:line="72" pos:column="54"/></index></name> <operator pos:line="72" pos:column="55">!=<pos:position pos:line="72" pos:column="57"/></operator> <literal type="char" pos:line="72" pos:column="58">'/'<pos:position pos:line="72" pos:column="61"/></literal></expr>)<pos:position pos:line="72" pos:column="62"/></condition><then pos:line="72" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="25">diagnose_invalid_index_path<pos:position pos:line="73" pos:column="52"/></name><argument_list pos:line="73" pos:column="52">(<argument><expr><name pos:line="73" pos:column="53">stage<pos:position pos:line="73" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="60">prefix<pos:position pos:line="73" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="68">cp<pos:position pos:line="73" pos:column="70"/></name></expr></argument>)<pos:position pos:line="73" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="72"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">free<pos:position pos:line="74" pos:column="21"/></name><argument_list pos:line="74" pos:column="21">(<argument><expr><name pos:line="74" pos:column="22">new_path<pos:position pos:line="74" pos:column="30"/></name></expr></argument>)<pos:position pos:line="74" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="32"/></expr_stmt>
		<return pos:line="75" pos:column="17">return <expr><operator pos:line="75" pos:column="24">-<pos:position pos:line="75" pos:column="25"/></operator><literal type="number" pos:line="75" pos:column="25">1<pos:position pos:line="75" pos:column="26"/></literal></expr>;<pos:position pos:line="75" pos:column="27"/></return>
	}<pos:position pos:line="76" pos:column="10"/></block></then></if>
	<for pos:line="77" pos:column="9">for <control pos:line="77" pos:column="13">(<init><expr><name pos:line="77" pos:column="14">cp<pos:position pos:line="77" pos:column="16"/></name> <operator pos:line="77" pos:column="17">=<pos:position pos:line="77" pos:column="18"/></operator> <name pos:line="77" pos:column="19">name<pos:position pos:line="77" pos:column="23"/></name></expr><operator pos:line="77" pos:column="23">,<pos:position pos:line="77" pos:column="24"/></operator> <expr><name pos:line="77" pos:column="25">bracket_depth<pos:position pos:line="77" pos:column="38"/></name> <operator pos:line="77" pos:column="39">=<pos:position pos:line="77" pos:column="40"/></operator> <literal type="number" pos:line="77" pos:column="41">0<pos:position pos:line="77" pos:column="42"/></literal></expr>;<pos:position pos:line="77" pos:column="43"/></init> <condition><expr><operator pos:line="77" pos:column="44">*<pos:position pos:line="77" pos:column="45"/></operator><name pos:line="77" pos:column="45">cp<pos:position pos:line="77" pos:column="47"/></name></expr>;<pos:position pos:line="77" pos:column="48"/></condition> <incr><expr><name pos:line="77" pos:column="49">cp<pos:position pos:line="77" pos:column="51"/></name><operator pos:line="77" pos:column="51">++<pos:position pos:line="77" pos:column="53"/></operator></expr></incr>)<pos:position pos:line="77" pos:column="54"/></control> <block pos:line="77" pos:column="55">{
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><operator pos:line="78" pos:column="21">*<pos:position pos:line="78" pos:column="22"/></operator><name pos:line="78" pos:column="22">cp<pos:position pos:line="78" pos:column="24"/></name> <operator pos:line="78" pos:column="25">==<pos:position pos:line="78" pos:column="27"/></operator> <literal type="char" pos:line="78" pos:column="28">'{'<pos:position pos:line="78" pos:column="31"/></literal></expr>)<pos:position pos:line="78" pos:column="32"/></condition><then pos:line="78" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="79" pos:column="25">bracket_depth<pos:position pos:line="79" pos:column="38"/></name><operator pos:line="79" pos:column="38">++<pos:position pos:line="79" pos:column="40"/></operator></expr>;<pos:position pos:line="79" pos:column="41"/></expr_stmt></block></then>
		<elseif pos:line="80" pos:column="17">else <if pos:line="80" pos:column="22">if <condition pos:line="80" pos:column="25">(<expr><name pos:line="80" pos:column="26">bracket_depth<pos:position pos:line="80" pos:column="39"/></name> <operator pos:line="80" pos:column="40">&amp;&amp;<pos:position pos:line="80" pos:column="50"/></operator> <operator pos:line="80" pos:column="43">*<pos:position pos:line="80" pos:column="44"/></operator><name pos:line="80" pos:column="44">cp<pos:position pos:line="80" pos:column="46"/></name> <operator pos:line="80" pos:column="47">==<pos:position pos:line="80" pos:column="49"/></operator> <literal type="char" pos:line="80" pos:column="50">'}'<pos:position pos:line="80" pos:column="53"/></literal></expr>)<pos:position pos:line="80" pos:column="54"/></condition><then pos:line="80" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><name pos:line="81" pos:column="25">bracket_depth<pos:position pos:line="81" pos:column="38"/></name><operator pos:line="81" pos:column="38">--<pos:position pos:line="81" pos:column="40"/></operator></expr>;<pos:position pos:line="81" pos:column="41"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="82" pos:column="17">else <if pos:line="82" pos:column="22">if <condition pos:line="82" pos:column="25">(<expr><operator pos:line="82" pos:column="26">!<pos:position pos:line="82" pos:column="27"/></operator><name pos:line="82" pos:column="27">bracket_depth<pos:position pos:line="82" pos:column="40"/></name> <operator pos:line="82" pos:column="41">&amp;&amp;<pos:position pos:line="82" pos:column="51"/></operator> <operator pos:line="82" pos:column="44">*<pos:position pos:line="82" pos:column="45"/></operator><name pos:line="82" pos:column="45">cp<pos:position pos:line="82" pos:column="47"/></name> <operator pos:line="82" pos:column="48">==<pos:position pos:line="82" pos:column="50"/></operator> <literal type="char" pos:line="82" pos:column="51">':'<pos:position pos:line="82" pos:column="54"/></literal></expr>)<pos:position pos:line="82" pos:column="55"/></condition><then pos:line="82" pos:column="55">
			<block type="pseudo"><break pos:line="83" pos:column="25">break;<pos:position pos:line="83" pos:column="31"/></break></block></then></if></elseif></if>
	}<pos:position pos:line="84" pos:column="10"/></block></for>
	<if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><operator pos:line="85" pos:column="13">*<pos:position pos:line="85" pos:column="14"/></operator><name pos:line="85" pos:column="14">cp<pos:position pos:line="85" pos:column="16"/></name> <operator pos:line="85" pos:column="17">==<pos:position pos:line="85" pos:column="19"/></operator> <literal type="char" pos:line="85" pos:column="20">':'<pos:position pos:line="85" pos:column="23"/></literal></expr>)<pos:position pos:line="85" pos:column="24"/></condition><then pos:line="85" pos:column="24"> <block pos:line="85" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="86" pos:column="17">unsigned<pos:position pos:line="86" pos:column="25"/></name> <name pos:line="86" pos:column="26">char<pos:position pos:line="86" pos:column="30"/></name></type> <name><name pos:line="86" pos:column="31">tree_sha1<pos:position pos:line="86" pos:column="40"/></name><index pos:line="86" pos:column="40">[<expr><literal type="number" pos:line="86" pos:column="41">20<pos:position pos:line="86" pos:column="43"/></literal></expr>]<pos:position pos:line="86" pos:column="44"/></index></name></decl>;<pos:position pos:line="86" pos:column="45"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="87" pos:column="17">int<pos:position pos:line="87" pos:column="20"/></name></type> <name pos:line="87" pos:column="21">len<pos:position pos:line="87" pos:column="24"/></name> <init pos:line="87" pos:column="25">= <expr><name pos:line="87" pos:column="27">cp<pos:position pos:line="87" pos:column="29"/></name> <operator pos:line="87" pos:column="30">-<pos:position pos:line="87" pos:column="31"/></operator> <name pos:line="87" pos:column="32">name<pos:position pos:line="87" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="87" pos:column="37"/></decl_stmt>
		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><operator pos:line="88" pos:column="21">!<pos:position pos:line="88" pos:column="22"/></operator><call><name pos:line="88" pos:column="22">get_sha1_1<pos:position pos:line="88" pos:column="32"/></name><argument_list pos:line="88" pos:column="32">(<argument><expr><name pos:line="88" pos:column="33">name<pos:position pos:line="88" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="39">len<pos:position pos:line="88" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="44">tree_sha1<pos:position pos:line="88" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="55">GET_SHA1_TREEISH<pos:position pos:line="88" pos:column="71"/></name></expr></argument>)<pos:position pos:line="88" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="73"/></condition><then pos:line="88" pos:column="73"> <block pos:line="88" pos:column="74">{
			<decl_stmt><decl><type><specifier pos:line="89" pos:column="25">const<pos:position pos:line="89" pos:column="30"/></specifier> <name pos:line="89" pos:column="31">char<pos:position pos:line="89" pos:column="35"/></name> <modifier pos:line="89" pos:column="36">*<pos:position pos:line="89" pos:column="37"/></modifier></type><name pos:line="89" pos:column="37">filename<pos:position pos:line="89" pos:column="45"/></name> <init pos:line="89" pos:column="46">= <expr><name pos:line="89" pos:column="48">cp<pos:position pos:line="89" pos:column="50"/></name><operator pos:line="89" pos:column="50">+<pos:position pos:line="89" pos:column="51"/></operator><literal type="number" pos:line="89" pos:column="51">1<pos:position pos:line="89" pos:column="52"/></literal></expr></init></decl>;<pos:position pos:line="89" pos:column="53"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="90" pos:column="25">char<pos:position pos:line="90" pos:column="29"/></name> <modifier pos:line="90" pos:column="30">*<pos:position pos:line="90" pos:column="31"/></modifier></type><name pos:line="90" pos:column="31">new_filename<pos:position pos:line="90" pos:column="43"/></name> <init pos:line="90" pos:column="44">= <expr><name pos:line="90" pos:column="46">NULL<pos:position pos:line="90" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="90" pos:column="51"/></decl_stmt>

			<expr_stmt><expr><name pos:line="92" pos:column="25">new_filename<pos:position pos:line="92" pos:column="37"/></name> <operator pos:line="92" pos:column="38">=<pos:position pos:line="92" pos:column="39"/></operator> <call><name pos:line="92" pos:column="40">resolve_relative_path<pos:position pos:line="92" pos:column="61"/></name><argument_list pos:line="92" pos:column="61">(<argument><expr><name pos:line="92" pos:column="62">filename<pos:position pos:line="92" pos:column="70"/></name></expr></argument>)<pos:position pos:line="92" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="72"/></expr_stmt>
			<if pos:line="93" pos:column="25">if <condition pos:line="93" pos:column="28">(<expr><name pos:line="93" pos:column="29">new_filename<pos:position pos:line="93" pos:column="41"/></name></expr>)<pos:position pos:line="93" pos:column="42"/></condition><then pos:line="93" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><name pos:line="94" pos:column="33">filename<pos:position pos:line="94" pos:column="41"/></name> <operator pos:line="94" pos:column="42">=<pos:position pos:line="94" pos:column="43"/></operator> <name pos:line="94" pos:column="44">new_filename<pos:position pos:line="94" pos:column="56"/></name></expr>;<pos:position pos:line="94" pos:column="57"/></expr_stmt></block></then></if>
			<if pos:line="95" pos:column="25">if <condition pos:line="95" pos:column="28">(<expr><name pos:line="95" pos:column="29">flags<pos:position pos:line="95" pos:column="34"/></name> <operator pos:line="95" pos:column="35">&amp;<pos:position pos:line="95" pos:column="40"/></operator> <name pos:line="95" pos:column="37">GET_SHA1_FOLLOW_SYMLINKS<pos:position pos:line="95" pos:column="61"/></name></expr>)<pos:position pos:line="95" pos:column="62"/></condition><then pos:line="95" pos:column="62"> <block pos:line="95" pos:column="63">{
				<expr_stmt><expr><name pos:line="96" pos:column="33">ret<pos:position pos:line="96" pos:column="36"/></name> <operator pos:line="96" pos:column="37">=<pos:position pos:line="96" pos:column="38"/></operator> <call><name pos:line="96" pos:column="39">get_tree_entry_follow_symlinks<pos:position pos:line="96" pos:column="69"/></name><argument_list pos:line="96" pos:column="69">(<argument><expr><name pos:line="96" pos:column="70">tree_sha1<pos:position pos:line="96" pos:column="79"/></name></expr></argument>,
					<argument><expr><name pos:line="97" pos:column="41">filename<pos:position pos:line="97" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="51">sha1<pos:position pos:line="97" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="57">&amp;<pos:position pos:line="97" pos:column="62"/></operator><name><name pos:line="97" pos:column="58">oc<pos:position pos:line="97" pos:column="60"/></name><operator pos:line="97" pos:column="60">-&gt;<pos:position pos:line="97" pos:column="65"/></operator><name pos:line="97" pos:column="62">symlink_path<pos:position pos:line="97" pos:column="74"/></name></name></expr></argument>,
					<argument><expr><operator pos:line="98" pos:column="41">&amp;<pos:position pos:line="98" pos:column="46"/></operator><name><name pos:line="98" pos:column="42">oc<pos:position pos:line="98" pos:column="44"/></name><operator pos:line="98" pos:column="44">-&gt;<pos:position pos:line="98" pos:column="49"/></operator><name pos:line="98" pos:column="46">mode<pos:position pos:line="98" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="98" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="52"/></expr_stmt>
			}<pos:position pos:line="99" pos:column="26"/></block></then> <else pos:line="99" pos:column="27">else <block pos:line="99" pos:column="32">{
				<expr_stmt><expr><name pos:line="100" pos:column="33">ret<pos:position pos:line="100" pos:column="36"/></name> <operator pos:line="100" pos:column="37">=<pos:position pos:line="100" pos:column="38"/></operator> <call><name pos:line="100" pos:column="39">get_tree_entry<pos:position pos:line="100" pos:column="53"/></name><argument_list pos:line="100" pos:column="53">(<argument><expr><name pos:line="100" pos:column="54">tree_sha1<pos:position pos:line="100" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="65">filename<pos:position pos:line="100" pos:column="73"/></name></expr></argument>,
						     <argument><expr><name pos:line="101" pos:column="54">sha1<pos:position pos:line="101" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="60">&amp;<pos:position pos:line="101" pos:column="65"/></operator><name><name pos:line="101" pos:column="61">oc<pos:position pos:line="101" pos:column="63"/></name><operator pos:line="101" pos:column="63">-&gt;<pos:position pos:line="101" pos:column="68"/></operator><name pos:line="101" pos:column="65">mode<pos:position pos:line="101" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="71"/></expr_stmt>
				<if pos:line="102" pos:column="33">if <condition pos:line="102" pos:column="36">(<expr><name pos:line="102" pos:column="37">ret<pos:position pos:line="102" pos:column="40"/></name> <operator pos:line="102" pos:column="41">&amp;&amp;<pos:position pos:line="102" pos:column="51"/></operator> <name pos:line="102" pos:column="44">only_to_die<pos:position pos:line="102" pos:column="55"/></name></expr>)<pos:position pos:line="102" pos:column="56"/></condition><then pos:line="102" pos:column="56"> <block pos:line="102" pos:column="57">{
					<expr_stmt><expr><call><name pos:line="103" pos:column="41">diagnose_invalid_sha1_path<pos:position pos:line="103" pos:column="67"/></name><argument_list pos:line="103" pos:column="67">(<argument><expr><name pos:line="103" pos:column="68">prefix<pos:position pos:line="103" pos:column="74"/></name></expr></argument>,
								   <argument><expr><name pos:line="104" pos:column="68">filename<pos:position pos:line="104" pos:column="76"/></name></expr></argument>,
								   <argument><expr><name pos:line="105" pos:column="68">tree_sha1<pos:position pos:line="105" pos:column="77"/></name></expr></argument>,
								   <argument><expr><name pos:line="106" pos:column="68">name<pos:position pos:line="106" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="74">len<pos:position pos:line="106" pos:column="77"/></name></expr></argument>)<pos:position pos:line="106" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="79"/></expr_stmt>
				}<pos:position pos:line="107" pos:column="34"/></block></then></if>
			}<pos:position pos:line="108" pos:column="26"/></block></else></if>
			<expr_stmt><expr><call><name pos:line="109" pos:column="25">hashcpy<pos:position pos:line="109" pos:column="32"/></name><argument_list pos:line="109" pos:column="32">(<argument><expr><name><name pos:line="109" pos:column="33">oc<pos:position pos:line="109" pos:column="35"/></name><operator pos:line="109" pos:column="35">-&gt;<pos:position pos:line="109" pos:column="40"/></operator><name pos:line="109" pos:column="37">tree<pos:position pos:line="109" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="43">tree_sha1<pos:position pos:line="109" pos:column="52"/></name></expr></argument>)<pos:position pos:line="109" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="110" pos:column="25">strlcpy<pos:position pos:line="110" pos:column="32"/></name><argument_list pos:line="110" pos:column="32">(<argument><expr><name><name pos:line="110" pos:column="33">oc<pos:position pos:line="110" pos:column="35"/></name><operator pos:line="110" pos:column="35">-&gt;<pos:position pos:line="110" pos:column="40"/></operator><name pos:line="110" pos:column="37">path<pos:position pos:line="110" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="43">filename<pos:position pos:line="110" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="110" pos:column="53">sizeof<argument_list pos:line="110" pos:column="59">(<argument><expr><name><name pos:line="110" pos:column="60">oc<pos:position pos:line="110" pos:column="62"/></name><operator pos:line="110" pos:column="62">-&gt;<pos:position pos:line="110" pos:column="67"/></operator><name pos:line="110" pos:column="64">path<pos:position pos:line="110" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="110" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="71"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="112" pos:column="25">free<pos:position pos:line="112" pos:column="29"/></name><argument_list pos:line="112" pos:column="29">(<argument><expr><name pos:line="112" pos:column="30">new_filename<pos:position pos:line="112" pos:column="42"/></name></expr></argument>)<pos:position pos:line="112" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="44"/></expr_stmt>
			<return pos:line="113" pos:column="25">return <expr><name pos:line="113" pos:column="32">ret<pos:position pos:line="113" pos:column="35"/></name></expr>;<pos:position pos:line="113" pos:column="36"/></return>
		}<pos:position pos:line="114" pos:column="18"/></block></then> <else pos:line="114" pos:column="19">else <block pos:line="114" pos:column="24">{
			<if pos:line="115" pos:column="25">if <condition pos:line="115" pos:column="28">(<expr><name pos:line="115" pos:column="29">only_to_die<pos:position pos:line="115" pos:column="40"/></name></expr>)<pos:position pos:line="115" pos:column="41"/></condition><then pos:line="115" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="116" pos:column="33">die<pos:position pos:line="116" pos:column="36"/></name><argument_list pos:line="116" pos:column="36">(<argument><expr><literal type="string" pos:line="116" pos:column="37">"Invalid object name '%.*s'."<pos:position pos:line="116" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="68">len<pos:position pos:line="116" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="73">name<pos:position pos:line="116" pos:column="77"/></name></expr></argument>)<pos:position pos:line="116" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="79"/></expr_stmt></block></then></if>
		}<pos:position pos:line="117" pos:column="18"/></block></else></if>
	}<pos:position pos:line="118" pos:column="10"/></block></then></if>
	<return pos:line="119" pos:column="9">return <expr><name pos:line="119" pos:column="16">ret<pos:position pos:line="119" pos:column="19"/></name></expr>;<pos:position pos:line="119" pos:column="20"/></return>
}<pos:position pos:line="120" pos:column="2"/></block></function></unit>
