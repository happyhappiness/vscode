<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4228_git-2.9.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">ewah_each_bit<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">ewah_bitmap<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">self<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><function_decl><type><name pos:line="1" pos:column="46">void<pos:position pos:line="1" pos:column="50"/></name></type> (<modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier><name pos:line="1" pos:column="53">callback<pos:position pos:line="1" pos:column="61"/></name>)<parameter_list pos:line="1" pos:column="62">(<parameter><decl><type><name pos:line="1" pos:column="63">size_t<pos:position pos:line="1" pos:column="69"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">void<pos:position pos:line="1" pos:column="75"/></name><modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list></function_decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="79">void<pos:position pos:line="1" pos:column="83"/></name> <modifier pos:line="1" pos:column="84">*<pos:position pos:line="1" pos:column="85"/></modifier></type><name pos:line="1" pos:column="85">payload<pos:position pos:line="1" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="93"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">pos<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><literal type="number" pos:line="3" pos:column="22">0<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">pointer<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><literal type="number" pos:line="4" pos:column="26">0<pos:position pos:line="4" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">k<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><name pos:line="7" pos:column="16">pointer<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">&lt;<pos:position pos:line="7" pos:column="28"/></operator> <name><name pos:line="7" pos:column="26">self<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">-&gt;<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="32">buffer_size<pos:position pos:line="7" pos:column="43"/></name></name></expr>)<pos:position pos:line="7" pos:column="44"/></condition> <block pos:line="7" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">eword_t<pos:position pos:line="8" pos:column="24"/></name> <modifier pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></modifier></type><name pos:line="8" pos:column="26">word<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><operator pos:line="8" pos:column="33">&amp;<pos:position pos:line="8" pos:column="38"/></operator><name><name pos:line="8" pos:column="34">self<pos:position pos:line="8" pos:column="38"/></name><operator pos:line="8" pos:column="38">-&gt;<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="40">buffer<pos:position pos:line="8" pos:column="46"/></name><index pos:line="8" pos:column="46">[<expr><name pos:line="8" pos:column="47">pointer<pos:position pos:line="8" pos:column="54"/></name></expr>]<pos:position pos:line="8" pos:column="55"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="56"/></decl_stmt>

		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">rlw_get_run_bit<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name pos:line="10" pos:column="37">word<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="43"/></condition><then pos:line="10" pos:column="43"> <block pos:line="10" pos:column="44">{
			<decl_stmt><decl><type><name pos:line="11" pos:column="25">size_t<pos:position pos:line="11" pos:column="31"/></name></type> <name pos:line="11" pos:column="32">len<pos:position pos:line="11" pos:column="35"/></name> <init pos:line="11" pos:column="36">= <expr><call><name pos:line="11" pos:column="38">rlw_get_running_len<pos:position pos:line="11" pos:column="57"/></name><argument_list pos:line="11" pos:column="57">(<argument><expr><name pos:line="11" pos:column="58">word<pos:position pos:line="11" pos:column="62"/></name></expr></argument>)<pos:position pos:line="11" pos:column="63"/></argument_list></call> <operator pos:line="11" pos:column="64">*<pos:position pos:line="11" pos:column="65"/></operator> <name pos:line="11" pos:column="66">BITS_IN_EWORD<pos:position pos:line="11" pos:column="79"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="80"/></decl_stmt>
			<for pos:line="12" pos:column="25">for <control pos:line="12" pos:column="29">(<init><expr><name pos:line="12" pos:column="30">k<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">=<pos:position pos:line="12" pos:column="33"/></operator> <literal type="number" pos:line="12" pos:column="34">0<pos:position pos:line="12" pos:column="35"/></literal></expr>;<pos:position pos:line="12" pos:column="36"/></init> <condition><expr><name pos:line="12" pos:column="37">k<pos:position pos:line="12" pos:column="38"/></name> <operator pos:line="12" pos:column="39">&lt;<pos:position pos:line="12" pos:column="43"/></operator> <name pos:line="12" pos:column="41">len<pos:position pos:line="12" pos:column="44"/></name></expr>;<pos:position pos:line="12" pos:column="45"/></condition> <incr><expr><operator pos:line="12" pos:column="46">++<pos:position pos:line="12" pos:column="48"/></operator><name pos:line="12" pos:column="48">k<pos:position pos:line="12" pos:column="49"/></name></expr><operator pos:line="12" pos:column="49">,<pos:position pos:line="12" pos:column="50"/></operator> <expr><operator pos:line="12" pos:column="51">++<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="53">pos<pos:position pos:line="12" pos:column="56"/></name></expr></incr>)<pos:position pos:line="12" pos:column="57"/></control>
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="33">callback<pos:position pos:line="13" pos:column="41"/></name><argument_list pos:line="13" pos:column="41">(<argument><expr><name pos:line="13" pos:column="42">pos<pos:position pos:line="13" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="47">payload<pos:position pos:line="13" pos:column="54"/></name></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="56"/></expr_stmt></block></for>
		}<pos:position pos:line="14" pos:column="18"/></block></then> <else pos:line="14" pos:column="19">else <block pos:line="14" pos:column="24">{
			<expr_stmt><expr><name pos:line="15" pos:column="25">pos<pos:position pos:line="15" pos:column="28"/></name> <operator pos:line="15" pos:column="29">+=<pos:position pos:line="15" pos:column="31"/></operator> <call><name pos:line="15" pos:column="32">rlw_get_running_len<pos:position pos:line="15" pos:column="51"/></name><argument_list pos:line="15" pos:column="51">(<argument><expr><name pos:line="15" pos:column="52">word<pos:position pos:line="15" pos:column="56"/></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call> <operator pos:line="15" pos:column="58">*<pos:position pos:line="15" pos:column="59"/></operator> <name pos:line="15" pos:column="60">BITS_IN_EWORD<pos:position pos:line="15" pos:column="73"/></name></expr>;<pos:position pos:line="15" pos:column="74"/></expr_stmt>
		}<pos:position pos:line="16" pos:column="18"/></block></else></if>

		<expr_stmt><expr><operator pos:line="18" pos:column="17">++<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">pointer<pos:position pos:line="18" pos:column="26"/></name></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>

		<for pos:line="20" pos:column="17">for <control pos:line="20" pos:column="21">(<init><expr><name pos:line="20" pos:column="22">k<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="26">0<pos:position pos:line="20" pos:column="27"/></literal></expr>;<pos:position pos:line="20" pos:column="28"/></init> <condition><expr><name pos:line="20" pos:column="29">k<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">&lt;<pos:position pos:line="20" pos:column="35"/></operator> <call><name pos:line="20" pos:column="33">rlw_get_literal_words<pos:position pos:line="20" pos:column="54"/></name><argument_list pos:line="20" pos:column="54">(<argument><expr><name pos:line="20" pos:column="55">word<pos:position pos:line="20" pos:column="59"/></name></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></condition> <incr><expr><operator pos:line="20" pos:column="62">++<pos:position pos:line="20" pos:column="64"/></operator><name pos:line="20" pos:column="64">k<pos:position pos:line="20" pos:column="65"/></name></expr></incr>)<pos:position pos:line="20" pos:column="66"/></control> <block pos:line="20" pos:column="67">{
			<decl_stmt><decl><type><name pos:line="21" pos:column="25">int<pos:position pos:line="21" pos:column="28"/></name></type> <name pos:line="21" pos:column="29">c<pos:position pos:line="21" pos:column="30"/></name></decl>;<pos:position pos:line="21" pos:column="31"/></decl_stmt>

			<comment type="block" pos:line="23" pos:column="25">/* todo: zero count optimization */</comment>
			<for pos:line="24" pos:column="25">for <control pos:line="24" pos:column="29">(<init><expr><name pos:line="24" pos:column="30">c<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <literal type="number" pos:line="24" pos:column="34">0<pos:position pos:line="24" pos:column="35"/></literal></expr>;<pos:position pos:line="24" pos:column="36"/></init> <condition><expr><name pos:line="24" pos:column="37">c<pos:position pos:line="24" pos:column="38"/></name> <operator pos:line="24" pos:column="39">&lt;<pos:position pos:line="24" pos:column="43"/></operator> <name pos:line="24" pos:column="41">BITS_IN_EWORD<pos:position pos:line="24" pos:column="54"/></name></expr>;<pos:position pos:line="24" pos:column="55"/></condition> <incr><expr><operator pos:line="24" pos:column="56">++<pos:position pos:line="24" pos:column="58"/></operator><name pos:line="24" pos:column="58">c<pos:position pos:line="24" pos:column="59"/></name></expr><operator pos:line="24" pos:column="59">,<pos:position pos:line="24" pos:column="60"/></operator> <expr><operator pos:line="24" pos:column="61">++<pos:position pos:line="24" pos:column="63"/></operator><name pos:line="24" pos:column="63">pos<pos:position pos:line="24" pos:column="66"/></name></expr></incr>)<pos:position pos:line="24" pos:column="67"/></control> <block pos:line="24" pos:column="68">{
				<if pos:line="25" pos:column="33">if <condition pos:line="25" pos:column="36">(<expr><operator pos:line="25" pos:column="37">(<pos:position pos:line="25" pos:column="38"/></operator><name><name pos:line="25" pos:column="38">self<pos:position pos:line="25" pos:column="42"/></name><operator pos:line="25" pos:column="42">-&gt;<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="44">buffer<pos:position pos:line="25" pos:column="50"/></name><index pos:line="25" pos:column="50">[<expr><name pos:line="25" pos:column="51">pointer<pos:position pos:line="25" pos:column="58"/></name></expr>]<pos:position pos:line="25" pos:column="59"/></index></name> <operator pos:line="25" pos:column="60">&amp;<pos:position pos:line="25" pos:column="65"/></operator> <operator pos:line="25" pos:column="62">(<pos:position pos:line="25" pos:column="63"/></operator><operator pos:line="25" pos:column="63">(<pos:position pos:line="25" pos:column="64"/></operator><name pos:line="25" pos:column="64">eword_t<pos:position pos:line="25" pos:column="71"/></name><operator pos:line="25" pos:column="71">)<pos:position pos:line="25" pos:column="72"/></operator><literal type="number" pos:line="25" pos:column="72">1<pos:position pos:line="25" pos:column="73"/></literal> <operator pos:line="25" pos:column="74">&lt;&lt;<pos:position pos:line="25" pos:column="82"/></operator> <name pos:line="25" pos:column="77">c<pos:position pos:line="25" pos:column="78"/></name><operator pos:line="25" pos:column="78">)<pos:position pos:line="25" pos:column="79"/></operator><operator pos:line="25" pos:column="79">)<pos:position pos:line="25" pos:column="80"/></operator> <operator pos:line="25" pos:column="81">!=<pos:position pos:line="25" pos:column="83"/></operator> <literal type="number" pos:line="25" pos:column="84">0<pos:position pos:line="25" pos:column="85"/></literal></expr>)<pos:position pos:line="25" pos:column="86"/></condition><then pos:line="25" pos:column="86">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="41">callback<pos:position pos:line="26" pos:column="49"/></name><argument_list pos:line="26" pos:column="49">(<argument><expr><name pos:line="26" pos:column="50">pos<pos:position pos:line="26" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="55">payload<pos:position pos:line="26" pos:column="62"/></name></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="64"/></expr_stmt></block></then></if>
			}<pos:position pos:line="27" pos:column="26"/></block></for>

			<expr_stmt><expr><operator pos:line="29" pos:column="25">++<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="27">pointer<pos:position pos:line="29" pos:column="34"/></name></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></for>
	}<pos:position pos:line="31" pos:column="10"/></block></while>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
