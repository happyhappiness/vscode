<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1519_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">url_decode_internal<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">query<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">int<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">len<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
				 <parameter><decl><type><specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <name pos:line="2" pos:column="40">char<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">stop_at<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="55">struct<pos:position pos:line="2" pos:column="61"/></name> <name pos:line="2" pos:column="62">strbuf<pos:position pos:line="2" pos:column="68"/></name></name> <modifier pos:line="2" pos:column="69">*<pos:position pos:line="2" pos:column="70"/></modifier></type><name pos:line="2" pos:column="70">out<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>,
				 <parameter><decl><type><name pos:line="3" pos:column="34">int<pos:position pos:line="3" pos:column="37"/></name></type> <name pos:line="3" pos:column="38">decode_plus<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="50"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">q<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><operator pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="26">query<pos:position pos:line="5" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><name pos:line="7" pos:column="16">len<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition> <block pos:line="7" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">unsigned<pos:position pos:line="8" pos:column="25"/></name> <name pos:line="8" pos:column="26">char<pos:position pos:line="8" pos:column="30"/></name></type> <name pos:line="8" pos:column="31">c<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><operator pos:line="8" pos:column="35">*<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="36">q<pos:position pos:line="8" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>

		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">c<pos:position pos:line="10" pos:column="23"/></name></expr>)<pos:position pos:line="10" pos:column="24"/></condition><then pos:line="10" pos:column="24">
			<block type="pseudo"><break pos:line="11" pos:column="25">break;<pos:position pos:line="11" pos:column="31"/></break></block></then></if>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">stop_at<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">&amp;&amp;<pos:position pos:line="12" pos:column="39"/></operator> <call><name pos:line="12" pos:column="32">strchr<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(<argument><expr><name pos:line="12" pos:column="39">stop_at<pos:position pos:line="12" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="48">c<pos:position pos:line="12" pos:column="49"/></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="51"/></condition><then pos:line="12" pos:column="51"> <block pos:line="12" pos:column="52">{
			<expr_stmt><expr><name pos:line="13" pos:column="25">q<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">++<pos:position pos:line="13" pos:column="28"/></operator></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
			<expr_stmt><expr><name pos:line="14" pos:column="25">len<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">--<pos:position pos:line="14" pos:column="30"/></operator></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>
			<break pos:line="15" pos:column="25">break;<pos:position pos:line="15" pos:column="31"/></break>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>

		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">c<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">==<pos:position pos:line="18" pos:column="25"/></operator> <literal type="char" pos:line="18" pos:column="26">'%'<pos:position pos:line="18" pos:column="29"/></literal></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30"> <block pos:line="18" pos:column="31">{
			<decl_stmt><decl><type><name pos:line="19" pos:column="25">int<pos:position pos:line="19" pos:column="28"/></name></type> <name pos:line="19" pos:column="29">val<pos:position pos:line="19" pos:column="32"/></name> <init pos:line="19" pos:column="33">= <expr><call><name pos:line="19" pos:column="35">hex2chr<pos:position pos:line="19" pos:column="42"/></name><argument_list pos:line="19" pos:column="42">(<argument><expr><name pos:line="19" pos:column="43">q<pos:position pos:line="19" pos:column="44"/></name> <operator pos:line="19" pos:column="45">+<pos:position pos:line="19" pos:column="46"/></operator> <literal type="number" pos:line="19" pos:column="47">1<pos:position pos:line="19" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="50"/></decl_stmt>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><literal type="number" pos:line="20" pos:column="29">0<pos:position pos:line="20" pos:column="30"/></literal> <operator pos:line="20" pos:column="31">&lt;=<pos:position pos:line="20" pos:column="36"/></operator> <name pos:line="20" pos:column="34">val<pos:position pos:line="20" pos:column="37"/></name></expr>)<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38"> <block pos:line="20" pos:column="39">{
				<expr_stmt><expr><call><name pos:line="21" pos:column="33">strbuf_addch<pos:position pos:line="21" pos:column="45"/></name><argument_list pos:line="21" pos:column="45">(<argument><expr><name pos:line="21" pos:column="46">out<pos:position pos:line="21" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="51">val<pos:position pos:line="21" pos:column="54"/></name></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt>
				<expr_stmt><expr><name pos:line="22" pos:column="33">q<pos:position pos:line="22" pos:column="34"/></name> <operator pos:line="22" pos:column="35">+=<pos:position pos:line="22" pos:column="37"/></operator> <literal type="number" pos:line="22" pos:column="38">3<pos:position pos:line="22" pos:column="39"/></literal></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
				<expr_stmt><expr><name pos:line="23" pos:column="33">len<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">-=<pos:position pos:line="23" pos:column="39"/></operator> <literal type="number" pos:line="23" pos:column="40">3<pos:position pos:line="23" pos:column="41"/></literal></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
				<continue pos:line="24" pos:column="33">continue;<pos:position pos:line="24" pos:column="42"/></continue>
			}<pos:position pos:line="25" pos:column="26"/></block></then></if>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>

		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">decode_plus<pos:position pos:line="28" pos:column="32"/></name> <operator pos:line="28" pos:column="33">&amp;&amp;<pos:position pos:line="28" pos:column="43"/></operator> <name pos:line="28" pos:column="36">c<pos:position pos:line="28" pos:column="37"/></name> <operator pos:line="28" pos:column="38">==<pos:position pos:line="28" pos:column="40"/></operator> <literal type="char" pos:line="28" pos:column="41">'+'<pos:position pos:line="28" pos:column="44"/></literal></expr>)<pos:position pos:line="28" pos:column="45"/></condition><then pos:line="28" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">strbuf_addch<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><name pos:line="29" pos:column="38">out<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="43">' '<pos:position pos:line="29" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt></block></then>
		<else pos:line="30" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">strbuf_addch<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><name pos:line="31" pos:column="38">out<pos:position pos:line="31" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="43">c<pos:position pos:line="31" pos:column="44"/></name></expr></argument>)<pos:position pos:line="31" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="46"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name pos:line="32" pos:column="17">q<pos:position pos:line="32" pos:column="18"/></name><operator pos:line="32" pos:column="18">++<pos:position pos:line="32" pos:column="20"/></operator></expr>;<pos:position pos:line="32" pos:column="21"/></expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">len<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">--<pos:position pos:line="33" pos:column="22"/></operator></expr>;<pos:position pos:line="33" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></while>
	<expr_stmt><expr><operator pos:line="35" pos:column="9">*<pos:position pos:line="35" pos:column="10"/></operator><name pos:line="35" pos:column="10">query<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <name pos:line="35" pos:column="18">q<pos:position pos:line="35" pos:column="19"/></name></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>
	<return pos:line="36" pos:column="9">return <expr><call><name pos:line="36" pos:column="16">strbuf_detach<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">out<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="35">NULL<pos:position pos:line="36" pos:column="39"/></name></expr></argument>)<pos:position pos:line="36" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="41"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
