<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3457_git-2.8.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">socket_perror<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">func<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">imap_socket<pos:position pos:line="1" pos:column="63"/></name></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">sock<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">int<pos:position pos:line="1" pos:column="74"/></name></type> <name pos:line="1" pos:column="75">ret<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifndef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifndef<pos:position pos:line="3" pos:column="8"/></cpp:directive> <name pos:line="3" pos:column="9">NO_OPENSSL<pos:position pos:line="3" pos:column="19"/></name></cpp:ifndef>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name><name pos:line="4" pos:column="13">sock<pos:position pos:line="4" pos:column="17"/></name><operator pos:line="4" pos:column="17">-&gt;<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="19">ssl<pos:position pos:line="4" pos:column="22"/></name></name></expr>)<pos:position pos:line="4" pos:column="23"/></condition><then pos:line="4" pos:column="23"> <block pos:line="4" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">int<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">sslerr<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><call><name pos:line="5" pos:column="30">SSL_get_error<pos:position pos:line="5" pos:column="43"/></name><argument_list pos:line="5" pos:column="43">(<argument><expr><name><name pos:line="5" pos:column="44">sock<pos:position pos:line="5" pos:column="48"/></name><operator pos:line="5" pos:column="48">-&gt;<pos:position pos:line="5" pos:column="53"/></operator><name pos:line="5" pos:column="50">ssl<pos:position pos:line="5" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="55">ret<pos:position pos:line="5" pos:column="58"/></name></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="60"/></decl_stmt>
		<switch pos:line="6" pos:column="17">switch <condition pos:line="6" pos:column="24">(<expr><name pos:line="6" pos:column="25">sslerr<pos:position pos:line="6" pos:column="31"/></name></expr>)<pos:position pos:line="6" pos:column="32"/></condition> <block pos:line="6" pos:column="33">{
		<case pos:line="7" pos:column="17">case <expr><name pos:line="7" pos:column="22">SSL_ERROR_NONE<pos:position pos:line="7" pos:column="36"/></name></expr>:<pos:position pos:line="7" pos:column="37"/></case>
			<break pos:line="8" pos:column="25">break;<pos:position pos:line="8" pos:column="31"/></break>
		<case pos:line="9" pos:column="17">case <expr><name pos:line="9" pos:column="22">SSL_ERROR_SYSCALL<pos:position pos:line="9" pos:column="39"/></name></expr>:<pos:position pos:line="9" pos:column="40"/></case>
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">perror<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><literal type="string" pos:line="10" pos:column="32">"SSL_connect"<pos:position pos:line="10" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt>
			<break pos:line="11" pos:column="25">break;<pos:position pos:line="11" pos:column="31"/></break>
		<default pos:line="12" pos:column="17">default:<pos:position pos:line="12" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">ssl_socket_perror<pos:position pos:line="13" pos:column="42"/></name><argument_list pos:line="13" pos:column="42">(<argument><expr><literal type="string" pos:line="13" pos:column="43">"SSL_connect"<pos:position pos:line="13" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="58"/></expr_stmt>
			<break pos:line="14" pos:column="25">break;<pos:position pos:line="14" pos:column="31"/></break>
		}<pos:position pos:line="15" pos:column="18"/></block></switch>
	}<pos:position pos:line="16" pos:column="10"/></block></then> <else pos:line="16" pos:column="11">else
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>
	<block pos:line="18" pos:column="9">{
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">ret<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">&lt;<pos:position pos:line="19" pos:column="29"/></operator> <literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="25">perror<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">func<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt></block></then>
		<else pos:line="21" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="25">fprintf<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">stderr<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="41">"%s: unexpected EOF\n"<pos:position pos:line="22" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="65">func<pos:position pos:line="22" pos:column="69"/></name></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="71"/></expr_stmt></block></else></if>
	}<pos:position pos:line="23" pos:column="10"/></block></else></if>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
