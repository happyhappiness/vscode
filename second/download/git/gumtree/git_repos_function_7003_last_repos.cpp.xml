<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7003_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">re_compile_internal<pos:position pos:line="2" pos:column="20"/></name> <parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">regex_t<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">preg<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type> <name pos:line="2" pos:column="50">pattern<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">size_t<pos:position pos:line="2" pos:column="65"/></name></type> <name pos:line="2" pos:column="66">length<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="3" pos:column="22">reg_syntax_t<pos:position pos:line="3" pos:column="34"/></name></type> <name pos:line="3" pos:column="35">syntax<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="42"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">reg_errcode_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">err<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name pos:line="5" pos:column="23">REG_NOERROR<pos:position pos:line="5" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">re_dfa_t<pos:position pos:line="6" pos:column="11"/></name> <modifier pos:line="6" pos:column="12">*<pos:position pos:line="6" pos:column="13"/></modifier></type><name pos:line="6" pos:column="13">dfa<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">re_string_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">regexp<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* Initialize the pattern buffer.  */</comment>
  <expr_stmt><expr><name><name pos:line="10" pos:column="3">preg<pos:position pos:line="10" pos:column="7"/></name><operator pos:line="10" pos:column="7">-&gt;<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="9">fastmap_accurate<pos:position pos:line="10" pos:column="25"/></name></name> <operator pos:line="10" pos:column="26">=<pos:position pos:line="10" pos:column="27"/></operator> <literal type="number" pos:line="10" pos:column="28">0<pos:position pos:line="10" pos:column="29"/></literal></expr>;<pos:position pos:line="10" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">preg<pos:position pos:line="11" pos:column="7"/></name><operator pos:line="11" pos:column="7">-&gt;<pos:position pos:line="11" pos:column="12"/></operator><name pos:line="11" pos:column="9">syntax<pos:position pos:line="11" pos:column="15"/></name></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">syntax<pos:position pos:line="11" pos:column="24"/></name></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">preg<pos:position pos:line="12" pos:column="7"/></name><operator pos:line="12" pos:column="7">-&gt;<pos:position pos:line="12" pos:column="12"/></operator><name pos:line="12" pos:column="9">not_bol<pos:position pos:line="12" pos:column="16"/></name></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <name><name pos:line="12" pos:column="19">preg<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">-&gt;<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="25">not_eol<pos:position pos:line="12" pos:column="32"/></name></name> <operator pos:line="12" pos:column="33">=<pos:position pos:line="12" pos:column="34"/></operator> <literal type="number" pos:line="12" pos:column="35">0<pos:position pos:line="12" pos:column="36"/></literal></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="13" pos:column="3">preg<pos:position pos:line="13" pos:column="7"/></name><operator pos:line="13" pos:column="7">-&gt;<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="9">used<pos:position pos:line="13" pos:column="13"/></name></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="14" pos:column="3">preg<pos:position pos:line="14" pos:column="7"/></name><operator pos:line="14" pos:column="7">-&gt;<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="9">re_nsub<pos:position pos:line="14" pos:column="16"/></name></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <literal type="number" pos:line="14" pos:column="19">0<pos:position pos:line="14" pos:column="20"/></literal></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">preg<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">-&gt;<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="9">can_be_null<pos:position pos:line="15" pos:column="20"/></name></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <literal type="number" pos:line="15" pos:column="23">0<pos:position pos:line="15" pos:column="24"/></literal></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">preg<pos:position pos:line="16" pos:column="7"/></name><operator pos:line="16" pos:column="7">-&gt;<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="9">regs_allocated<pos:position pos:line="16" pos:column="23"/></name></name> <operator pos:line="16" pos:column="24">=<pos:position pos:line="16" pos:column="25"/></operator> <name pos:line="16" pos:column="26">REGS_UNALLOCATED<pos:position pos:line="16" pos:column="42"/></name></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt>

  <comment type="block" pos:line="18" pos:column="3">/* Initialize the dfa.  */</comment>
  <expr_stmt><expr><name pos:line="19" pos:column="3">dfa<pos:position pos:line="19" pos:column="6"/></name> <operator pos:line="19" pos:column="7">=<pos:position pos:line="19" pos:column="8"/></operator> <operator pos:line="19" pos:column="9">(<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">re_dfa_t<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">*<pos:position pos:line="19" pos:column="20"/></operator><operator pos:line="19" pos:column="20">)<pos:position pos:line="19" pos:column="21"/></operator> <name><name pos:line="19" pos:column="22">preg<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">-&gt;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="28">buffer<pos:position pos:line="19" pos:column="34"/></name></name></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><call><name pos:line="20" pos:column="7">BE<pos:position pos:line="20" pos:column="9"/></name> <argument_list pos:line="20" pos:column="10">(<argument><expr><name><name pos:line="20" pos:column="11">preg<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">-&gt;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="17">allocated<pos:position pos:line="20" pos:column="26"/></name></name> <operator pos:line="20" pos:column="27">&lt;<pos:position pos:line="20" pos:column="31"/></operator> <sizeof pos:line="20" pos:column="29">sizeof <argument_list pos:line="20" pos:column="36">(<argument><expr><name pos:line="20" pos:column="37">re_dfa_t<pos:position pos:line="20" pos:column="45"/></name></expr></argument>)<pos:position pos:line="20" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="48">0<pos:position pos:line="20" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="51"/></condition><then pos:line="20" pos:column="51">
    <block pos:line="21" pos:column="5">{
      <comment type="block" pos:line="22" pos:column="7">/* If zero allocated, but buffer is non-null, try to realloc
	 enough space.  This loses if buffer's address is bogus, but
	 that is the user's responsibility.  If -&gt;buffer is NULL this
	 is a simple allocation.  */</comment>
      <expr_stmt><expr><name pos:line="26" pos:column="7">dfa<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <call><name pos:line="26" pos:column="13">re_realloc<pos:position pos:line="26" pos:column="23"/></name> <argument_list pos:line="26" pos:column="24">(<argument><expr><name><name pos:line="26" pos:column="25">preg<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">-&gt;<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="31">buffer<pos:position pos:line="26" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="39">re_dfa_t<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="49">1<pos:position pos:line="26" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="52"/></expr_stmt>
      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><name pos:line="27" pos:column="11">dfa<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">==<pos:position pos:line="27" pos:column="17"/></operator> <name pos:line="27" pos:column="18">NULL<pos:position pos:line="27" pos:column="22"/></name></expr>)<pos:position pos:line="27" pos:column="23"/></condition><then pos:line="27" pos:column="23">
	<block type="pseudo"><return pos:line="28" pos:column="9">return <expr><name pos:line="28" pos:column="16">REG_ESPACE<pos:position pos:line="28" pos:column="26"/></name></expr>;<pos:position pos:line="28" pos:column="27"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="29" pos:column="7">preg<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">-&gt;<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="13">allocated<pos:position pos:line="29" pos:column="22"/></name></name> <operator pos:line="29" pos:column="23">=<pos:position pos:line="29" pos:column="24"/></operator> <sizeof pos:line="29" pos:column="25">sizeof <argument_list pos:line="29" pos:column="32">(<argument><expr><name pos:line="29" pos:column="33">re_dfa_t<pos:position pos:line="29" pos:column="41"/></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></sizeof></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="30" pos:column="7">preg<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">-&gt;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="13">buffer<pos:position pos:line="30" pos:column="19"/></name></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <operator pos:line="30" pos:column="22">(<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="23">unsigned<pos:position pos:line="30" pos:column="31"/></name> <name pos:line="30" pos:column="32">char<pos:position pos:line="30" pos:column="36"/></name> <operator pos:line="30" pos:column="37">*<pos:position pos:line="30" pos:column="38"/></operator><operator pos:line="30" pos:column="38">)<pos:position pos:line="30" pos:column="39"/></operator> <name pos:line="30" pos:column="40">dfa<pos:position pos:line="30" pos:column="43"/></name></expr>;<pos:position pos:line="30" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="32" pos:column="3">preg<pos:position pos:line="32" pos:column="7"/></name><operator pos:line="32" pos:column="7">-&gt;<pos:position pos:line="32" pos:column="12"/></operator><name pos:line="32" pos:column="9">used<pos:position pos:line="32" pos:column="13"/></name></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <sizeof pos:line="32" pos:column="16">sizeof <argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">re_dfa_t<pos:position pos:line="32" pos:column="32"/></name></expr></argument>)<pos:position pos:line="32" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name pos:line="34" pos:column="3">err<pos:position pos:line="34" pos:column="6"/></name> <operator pos:line="34" pos:column="7">=<pos:position pos:line="34" pos:column="8"/></operator> <call><name pos:line="34" pos:column="9">init_dfa<pos:position pos:line="34" pos:column="17"/></name> <argument_list pos:line="34" pos:column="18">(<argument><expr><name pos:line="34" pos:column="19">dfa<pos:position pos:line="34" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="24">length<pos:position pos:line="34" pos:column="30"/></name></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>
  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><call><name pos:line="35" pos:column="7">BE<pos:position pos:line="35" pos:column="9"/></name> <argument_list pos:line="35" pos:column="10">(<argument><expr><name pos:line="35" pos:column="11">err<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">!=<pos:position pos:line="35" pos:column="17"/></operator> <name pos:line="35" pos:column="18">REG_NOERROR<pos:position pos:line="35" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="31">0<pos:position pos:line="35" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="34"/></condition><then pos:line="35" pos:column="34">
    <block pos:line="36" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">free_dfa_content<pos:position pos:line="37" pos:column="23"/></name> <argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">dfa<pos:position pos:line="37" pos:column="28"/></name></expr></argument>)<pos:position pos:line="37" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="38" pos:column="7">preg<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">-&gt;<pos:position pos:line="38" pos:column="16"/></operator><name pos:line="38" pos:column="13">buffer<pos:position pos:line="38" pos:column="19"/></name></name> <operator pos:line="38" pos:column="20">=<pos:position pos:line="38" pos:column="21"/></operator> <name pos:line="38" pos:column="22">NULL<pos:position pos:line="38" pos:column="26"/></name></expr>;<pos:position pos:line="38" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="39" pos:column="7">preg<pos:position pos:line="39" pos:column="11"/></name><operator pos:line="39" pos:column="11">-&gt;<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="13">allocated<pos:position pos:line="39" pos:column="22"/></name></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <literal type="number" pos:line="39" pos:column="25">0<pos:position pos:line="39" pos:column="26"/></literal></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
      <return pos:line="40" pos:column="7">return <expr><name pos:line="40" pos:column="14">err<pos:position pos:line="40" pos:column="17"/></name></expr>;<pos:position pos:line="40" pos:column="18"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">DEBUG<pos:position pos:line="42" pos:column="13"/></name></cpp:ifdef>
  <comment type="block" pos:line="43" pos:column="3">/* Note: length+1 will not overflow since it is checked in init_dfa.  */</comment>
  <expr_stmt><expr><name><name pos:line="44" pos:column="3">dfa<pos:position pos:line="44" pos:column="6"/></name><operator pos:line="44" pos:column="6">-&gt;<pos:position pos:line="44" pos:column="11"/></operator><name pos:line="44" pos:column="8">re_str<pos:position pos:line="44" pos:column="14"/></name></name> <operator pos:line="44" pos:column="15">=<pos:position pos:line="44" pos:column="16"/></operator> <call><name pos:line="44" pos:column="17">re_malloc<pos:position pos:line="44" pos:column="26"/></name> <argument_list pos:line="44" pos:column="27">(<argument><expr><name pos:line="44" pos:column="28">char<pos:position pos:line="44" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="34">length<pos:position pos:line="44" pos:column="40"/></name> <operator pos:line="44" pos:column="41">+<pos:position pos:line="44" pos:column="42"/></operator> <literal type="number" pos:line="44" pos:column="43">1<pos:position pos:line="44" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="45" pos:column="3">strncpy<pos:position pos:line="45" pos:column="10"/></name> <argument_list pos:line="45" pos:column="11">(<argument><expr><name><name pos:line="45" pos:column="12">dfa<pos:position pos:line="45" pos:column="15"/></name><operator pos:line="45" pos:column="15">-&gt;<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="17">re_str<pos:position pos:line="45" pos:column="23"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="25">pattern<pos:position pos:line="45" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="34">length<pos:position pos:line="45" pos:column="40"/></name> <operator pos:line="45" pos:column="41">+<pos:position pos:line="45" pos:column="42"/></operator> <literal type="number" pos:line="45" pos:column="43">1<pos:position pos:line="45" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="48" pos:column="3">__libc_lock_init<pos:position pos:line="48" pos:column="19"/></name> <argument_list pos:line="48" pos:column="20">(<argument><expr><name><name pos:line="48" pos:column="21">dfa<pos:position pos:line="48" pos:column="24"/></name><operator pos:line="48" pos:column="24">-&gt;<pos:position pos:line="48" pos:column="29"/></operator><name pos:line="48" pos:column="26">lock<pos:position pos:line="48" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="32"/></expr_stmt>

  <expr_stmt><expr><name pos:line="50" pos:column="3">err<pos:position pos:line="50" pos:column="6"/></name> <operator pos:line="50" pos:column="7">=<pos:position pos:line="50" pos:column="8"/></operator> <call><name pos:line="50" pos:column="9">re_string_construct<pos:position pos:line="50" pos:column="28"/></name> <argument_list pos:line="50" pos:column="29">(<argument><expr><operator pos:line="50" pos:column="30">&amp;<pos:position pos:line="50" pos:column="35"/></operator><name pos:line="50" pos:column="31">regexp<pos:position pos:line="50" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="39">pattern<pos:position pos:line="50" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="48">length<pos:position pos:line="50" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="56">preg<pos:position pos:line="50" pos:column="60"/></name><operator pos:line="50" pos:column="60">-&gt;<pos:position pos:line="50" pos:column="65"/></operator><name pos:line="50" pos:column="62">translate<pos:position pos:line="50" pos:column="71"/></name></name></expr></argument>,
			     <argument><expr><name pos:line="51" pos:column="30">syntax<pos:position pos:line="51" pos:column="36"/></name> <operator pos:line="51" pos:column="37">&amp;<pos:position pos:line="51" pos:column="42"/></operator> <name pos:line="51" pos:column="39">RE_ICASE<pos:position pos:line="51" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="49">dfa<pos:position pos:line="51" pos:column="52"/></name></expr></argument>)<pos:position pos:line="51" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="54"/></expr_stmt>
  <if pos:line="52" pos:column="3">if <condition pos:line="52" pos:column="6">(<expr><call><name pos:line="52" pos:column="7">BE<pos:position pos:line="52" pos:column="9"/></name> <argument_list pos:line="52" pos:column="10">(<argument><expr><name pos:line="52" pos:column="11">err<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">!=<pos:position pos:line="52" pos:column="17"/></operator> <name pos:line="52" pos:column="18">REG_NOERROR<pos:position pos:line="52" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="31">0<pos:position pos:line="52" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="34"/></condition><then pos:line="52" pos:column="34">
    <block pos:line="53" pos:column="5">{
    <label><name pos:line="54" pos:column="5">re_compile_internal_free_return<pos:position pos:line="54" pos:column="36"/></name>:<pos:position pos:line="54" pos:column="37"/></label>
      <expr_stmt><expr><call><name pos:line="55" pos:column="7">free_workarea_compile<pos:position pos:line="55" pos:column="28"/></name> <argument_list pos:line="55" pos:column="29">(<argument><expr><name pos:line="55" pos:column="30">preg<pos:position pos:line="55" pos:column="34"/></name></expr></argument>)<pos:position pos:line="55" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">re_string_destruct<pos:position pos:line="56" pos:column="25"/></name> <argument_list pos:line="56" pos:column="26">(<argument><expr><operator pos:line="56" pos:column="27">&amp;<pos:position pos:line="56" pos:column="32"/></operator><name pos:line="56" pos:column="28">regexp<pos:position pos:line="56" pos:column="34"/></name></expr></argument>)<pos:position pos:line="56" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">free_dfa_content<pos:position pos:line="57" pos:column="23"/></name> <argument_list pos:line="57" pos:column="24">(<argument><expr><name pos:line="57" pos:column="25">dfa<pos:position pos:line="57" pos:column="28"/></name></expr></argument>)<pos:position pos:line="57" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="58" pos:column="7">preg<pos:position pos:line="58" pos:column="11"/></name><operator pos:line="58" pos:column="11">-&gt;<pos:position pos:line="58" pos:column="16"/></operator><name pos:line="58" pos:column="13">buffer<pos:position pos:line="58" pos:column="19"/></name></name> <operator pos:line="58" pos:column="20">=<pos:position pos:line="58" pos:column="21"/></operator> <name pos:line="58" pos:column="22">NULL<pos:position pos:line="58" pos:column="26"/></name></expr>;<pos:position pos:line="58" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="59" pos:column="7">preg<pos:position pos:line="59" pos:column="11"/></name><operator pos:line="59" pos:column="11">-&gt;<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="13">allocated<pos:position pos:line="59" pos:column="22"/></name></name> <operator pos:line="59" pos:column="23">=<pos:position pos:line="59" pos:column="24"/></operator> <literal type="number" pos:line="59" pos:column="25">0<pos:position pos:line="59" pos:column="26"/></literal></expr>;<pos:position pos:line="59" pos:column="27"/></expr_stmt>
      <return pos:line="60" pos:column="7">return <expr><name pos:line="60" pos:column="14">err<pos:position pos:line="60" pos:column="17"/></name></expr>;<pos:position pos:line="60" pos:column="18"/></return>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="63" pos:column="3">/* Parse the regular expression, and build a structure tree.  */</comment>
  <expr_stmt><expr><name><name pos:line="64" pos:column="3">preg<pos:position pos:line="64" pos:column="7"/></name><operator pos:line="64" pos:column="7">-&gt;<pos:position pos:line="64" pos:column="12"/></operator><name pos:line="64" pos:column="9">re_nsub<pos:position pos:line="64" pos:column="16"/></name></name> <operator pos:line="64" pos:column="17">=<pos:position pos:line="64" pos:column="18"/></operator> <literal type="number" pos:line="64" pos:column="19">0<pos:position pos:line="64" pos:column="20"/></literal></expr>;<pos:position pos:line="64" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="65" pos:column="3">dfa<pos:position pos:line="65" pos:column="6"/></name><operator pos:line="65" pos:column="6">-&gt;<pos:position pos:line="65" pos:column="11"/></operator><name pos:line="65" pos:column="8">str_tree<pos:position pos:line="65" pos:column="16"/></name></name> <operator pos:line="65" pos:column="17">=<pos:position pos:line="65" pos:column="18"/></operator> <call><name pos:line="65" pos:column="19">parse<pos:position pos:line="65" pos:column="24"/></name> <argument_list pos:line="65" pos:column="25">(<argument><expr><operator pos:line="65" pos:column="26">&amp;<pos:position pos:line="65" pos:column="31"/></operator><name pos:line="65" pos:column="27">regexp<pos:position pos:line="65" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="35">preg<pos:position pos:line="65" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="41">syntax<pos:position pos:line="65" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="49">&amp;<pos:position pos:line="65" pos:column="54"/></operator><name pos:line="65" pos:column="50">err<pos:position pos:line="65" pos:column="53"/></name></expr></argument>)<pos:position pos:line="65" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="55"/></expr_stmt>
  <if pos:line="66" pos:column="3">if <condition pos:line="66" pos:column="6">(<expr><call><name pos:line="66" pos:column="7">BE<pos:position pos:line="66" pos:column="9"/></name> <argument_list pos:line="66" pos:column="10">(<argument><expr><name><name pos:line="66" pos:column="11">dfa<pos:position pos:line="66" pos:column="14"/></name><operator pos:line="66" pos:column="14">-&gt;<pos:position pos:line="66" pos:column="19"/></operator><name pos:line="66" pos:column="16">str_tree<pos:position pos:line="66" pos:column="24"/></name></name> <operator pos:line="66" pos:column="25">==<pos:position pos:line="66" pos:column="27"/></operator> <name pos:line="66" pos:column="28">NULL<pos:position pos:line="66" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="34">0<pos:position pos:line="66" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="37"/></condition><then pos:line="66" pos:column="37">
    <block type="pseudo"><goto pos:line="67" pos:column="5">goto <name pos:line="67" pos:column="10">re_compile_internal_free_return<pos:position pos:line="67" pos:column="41"/></name>;<pos:position pos:line="67" pos:column="42"/></goto></block></then></if>

  <comment type="block" pos:line="69" pos:column="3">/* Analyze the tree and create the nfa.  */</comment>
  <expr_stmt><expr><name pos:line="70" pos:column="3">err<pos:position pos:line="70" pos:column="6"/></name> <operator pos:line="70" pos:column="7">=<pos:position pos:line="70" pos:column="8"/></operator> <call><name pos:line="70" pos:column="9">analyze<pos:position pos:line="70" pos:column="16"/></name> <argument_list pos:line="70" pos:column="17">(<argument><expr><name pos:line="70" pos:column="18">preg<pos:position pos:line="70" pos:column="22"/></name></expr></argument>)<pos:position pos:line="70" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="24"/></expr_stmt>
  <if pos:line="71" pos:column="3">if <condition pos:line="71" pos:column="6">(<expr><call><name pos:line="71" pos:column="7">BE<pos:position pos:line="71" pos:column="9"/></name> <argument_list pos:line="71" pos:column="10">(<argument><expr><name pos:line="71" pos:column="11">err<pos:position pos:line="71" pos:column="14"/></name> <operator pos:line="71" pos:column="15">!=<pos:position pos:line="71" pos:column="17"/></operator> <name pos:line="71" pos:column="18">REG_NOERROR<pos:position pos:line="71" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="31">0<pos:position pos:line="71" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="34"/></condition><then pos:line="71" pos:column="34">
    <block type="pseudo"><goto pos:line="72" pos:column="5">goto <name pos:line="72" pos:column="10">re_compile_internal_free_return<pos:position pos:line="72" pos:column="41"/></name>;<pos:position pos:line="72" pos:column="42"/></goto></block></then></if>

<cpp:ifdef pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">ifdef<pos:position pos:line="74" pos:column="7"/></cpp:directive> <name pos:line="74" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="74" pos:column="22"/></name></cpp:ifdef>
  <comment type="block" pos:line="75" pos:column="3">/* If possible, do searching in single byte encoding to speed things up.  */</comment>
  <if pos:line="76" pos:column="3">if <condition pos:line="76" pos:column="6">(<expr><name><name pos:line="76" pos:column="7">dfa<pos:position pos:line="76" pos:column="10"/></name><operator pos:line="76" pos:column="10">-&gt;<pos:position pos:line="76" pos:column="15"/></operator><name pos:line="76" pos:column="12">is_utf8<pos:position pos:line="76" pos:column="19"/></name></name> <operator pos:line="76" pos:column="20">&amp;&amp;<pos:position pos:line="76" pos:column="30"/></operator> <operator pos:line="76" pos:column="23">!<pos:position pos:line="76" pos:column="24"/></operator><operator pos:line="76" pos:column="24">(<pos:position pos:line="76" pos:column="25"/></operator><name pos:line="76" pos:column="25">syntax<pos:position pos:line="76" pos:column="31"/></name> <operator pos:line="76" pos:column="32">&amp;<pos:position pos:line="76" pos:column="37"/></operator> <name pos:line="76" pos:column="34">RE_ICASE<pos:position pos:line="76" pos:column="42"/></name><operator pos:line="76" pos:column="42">)<pos:position pos:line="76" pos:column="43"/></operator> <operator pos:line="76" pos:column="44">&amp;&amp;<pos:position pos:line="76" pos:column="54"/></operator> <name><name pos:line="76" pos:column="47">preg<pos:position pos:line="76" pos:column="51"/></name><operator pos:line="76" pos:column="51">-&gt;<pos:position pos:line="76" pos:column="56"/></operator><name pos:line="76" pos:column="53">translate<pos:position pos:line="76" pos:column="62"/></name></name> <operator pos:line="76" pos:column="63">==<pos:position pos:line="76" pos:column="65"/></operator> <name pos:line="76" pos:column="66">NULL<pos:position pos:line="76" pos:column="70"/></name></expr>)<pos:position pos:line="76" pos:column="71"/></condition><then pos:line="76" pos:column="71">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="5">optimize_utf8<pos:position pos:line="77" pos:column="18"/></name> <argument_list pos:line="77" pos:column="19">(<argument><expr><name pos:line="77" pos:column="20">dfa<pos:position pos:line="77" pos:column="23"/></name></expr></argument>)<pos:position pos:line="77" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="25"/></expr_stmt></block></then></if>
<cpp:endif pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">endif<pos:position pos:line="78" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="80" pos:column="3">/* Then create the initial state of the dfa.  */</comment>
  <expr_stmt><expr><name pos:line="81" pos:column="3">err<pos:position pos:line="81" pos:column="6"/></name> <operator pos:line="81" pos:column="7">=<pos:position pos:line="81" pos:column="8"/></operator> <call><name pos:line="81" pos:column="9">create_initial_state<pos:position pos:line="81" pos:column="29"/></name> <argument_list pos:line="81" pos:column="30">(<argument><expr><name pos:line="81" pos:column="31">dfa<pos:position pos:line="81" pos:column="34"/></name></expr></argument>)<pos:position pos:line="81" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="83" pos:column="3">/* Release work areas.  */</comment>
  <expr_stmt><expr><call><name pos:line="84" pos:column="3">free_workarea_compile<pos:position pos:line="84" pos:column="24"/></name> <argument_list pos:line="84" pos:column="25">(<argument><expr><name pos:line="84" pos:column="26">preg<pos:position pos:line="84" pos:column="30"/></name></expr></argument>)<pos:position pos:line="84" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="85" pos:column="3">re_string_destruct<pos:position pos:line="85" pos:column="21"/></name> <argument_list pos:line="85" pos:column="22">(<argument><expr><operator pos:line="85" pos:column="23">&amp;<pos:position pos:line="85" pos:column="28"/></operator><name pos:line="85" pos:column="24">regexp<pos:position pos:line="85" pos:column="30"/></name></expr></argument>)<pos:position pos:line="85" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="32"/></expr_stmt>

  <if pos:line="87" pos:column="3">if <condition pos:line="87" pos:column="6">(<expr><call><name pos:line="87" pos:column="7">BE<pos:position pos:line="87" pos:column="9"/></name> <argument_list pos:line="87" pos:column="10">(<argument><expr><name pos:line="87" pos:column="11">err<pos:position pos:line="87" pos:column="14"/></name> <operator pos:line="87" pos:column="15">!=<pos:position pos:line="87" pos:column="17"/></operator> <name pos:line="87" pos:column="18">REG_NOERROR<pos:position pos:line="87" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="31">0<pos:position pos:line="87" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="34"/></condition><then pos:line="87" pos:column="34">
    <block pos:line="88" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="89" pos:column="7">free_dfa_content<pos:position pos:line="89" pos:column="23"/></name> <argument_list pos:line="89" pos:column="24">(<argument><expr><name pos:line="89" pos:column="25">dfa<pos:position pos:line="89" pos:column="28"/></name></expr></argument>)<pos:position pos:line="89" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="90" pos:column="7">preg<pos:position pos:line="90" pos:column="11"/></name><operator pos:line="90" pos:column="11">-&gt;<pos:position pos:line="90" pos:column="16"/></operator><name pos:line="90" pos:column="13">buffer<pos:position pos:line="90" pos:column="19"/></name></name> <operator pos:line="90" pos:column="20">=<pos:position pos:line="90" pos:column="21"/></operator> <name pos:line="90" pos:column="22">NULL<pos:position pos:line="90" pos:column="26"/></name></expr>;<pos:position pos:line="90" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="91" pos:column="7">preg<pos:position pos:line="91" pos:column="11"/></name><operator pos:line="91" pos:column="11">-&gt;<pos:position pos:line="91" pos:column="16"/></operator><name pos:line="91" pos:column="13">allocated<pos:position pos:line="91" pos:column="22"/></name></name> <operator pos:line="91" pos:column="23">=<pos:position pos:line="91" pos:column="24"/></operator> <literal type="number" pos:line="91" pos:column="25">0<pos:position pos:line="91" pos:column="26"/></literal></expr>;<pos:position pos:line="91" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>

  <return pos:line="94" pos:column="3">return <expr><name pos:line="94" pos:column="10">err<pos:position pos:line="94" pos:column="13"/></name></expr>;<pos:position pos:line="94" pos:column="14"/></return>
}<pos:position pos:line="95" pos:column="2"/></block></function></unit>
