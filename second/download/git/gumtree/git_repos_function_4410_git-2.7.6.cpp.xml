<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4410_git-2.7.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">check_stages<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">unsigned<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">stages<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">cache_entry<pos:position pos:line="1" pos:column="66"/></name></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">ce<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="72">int<pos:position pos:line="1" pos:column="75"/></name></type> <name pos:line="1" pos:column="76">pos<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">seen<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><literal type="number" pos:line="3" pos:column="25">0<pos:position pos:line="3" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">name<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">ce<pos:position pos:line="4" pos:column="30"/></name><operator pos:line="4" pos:column="30">-&gt;<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="32">name<pos:position pos:line="4" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><name pos:line="6" pos:column="16">pos<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">&lt;<pos:position pos:line="6" pos:column="24"/></operator> <name pos:line="6" pos:column="22">active_nr<pos:position pos:line="6" pos:column="31"/></name></expr>)<pos:position pos:line="6" pos:column="32"/></condition> <block pos:line="6" pos:column="33">{
		<expr_stmt><expr><name pos:line="7" pos:column="17">ce<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <name><name pos:line="7" pos:column="22">active_cache<pos:position pos:line="7" pos:column="34"/></name><index pos:line="7" pos:column="34">[<expr><name pos:line="7" pos:column="35">pos<pos:position pos:line="7" pos:column="38"/></name></expr>]<pos:position pos:line="7" pos:column="39"/></index></name></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><call><name pos:line="8" pos:column="21">strcmp<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name pos:line="8" pos:column="28">name<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="34">ce<pos:position pos:line="8" pos:column="36"/></name><operator pos:line="8" pos:column="36">-&gt;<pos:position pos:line="8" pos:column="41"/></operator><name pos:line="8" pos:column="38">name<pos:position pos:line="8" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="44"/></condition><then pos:line="8" pos:column="44">
			<block type="pseudo"><break pos:line="9" pos:column="25">break;<pos:position pos:line="9" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="10" pos:column="17">seen<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">|=<pos:position pos:line="10" pos:column="24"/></operator> <operator pos:line="10" pos:column="25">(<pos:position pos:line="10" pos:column="26"/></operator><literal type="number" pos:line="10" pos:column="26">1<pos:position pos:line="10" pos:column="27"/></literal> <operator pos:line="10" pos:column="28">&lt;&lt;<pos:position pos:line="10" pos:column="36"/></operator> <call><name pos:line="10" pos:column="31">ce_stage<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">(<argument><expr><name pos:line="10" pos:column="40">ce<pos:position pos:line="10" pos:column="42"/></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call><operator pos:line="10" pos:column="43">)<pos:position pos:line="10" pos:column="44"/></operator></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="11" pos:column="17">pos<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">++<pos:position pos:line="11" pos:column="22"/></operator></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></while>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">(<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">stages<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">&amp;<pos:position pos:line="13" pos:column="26"/></operator> <name pos:line="13" pos:column="23">seen<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">)<pos:position pos:line="13" pos:column="28"/></operator> <operator pos:line="13" pos:column="29">!=<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="32">stages<pos:position pos:line="13" pos:column="38"/></name></expr>)<pos:position pos:line="13" pos:column="39"/></condition><then pos:line="13" pos:column="39">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><call><name pos:line="14" pos:column="24">error<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><call><name pos:line="14" pos:column="30">_<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><literal type="string" pos:line="14" pos:column="32">"path '%s' does not have all necessary versions"<pos:position pos:line="14" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="81"/></argument_list></call></expr></argument>,
			     <argument><expr><name pos:line="15" pos:column="30">name<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></return></block></then></if>
	<return pos:line="16" pos:column="9">return <expr><literal type="number" pos:line="16" pos:column="16">0<pos:position pos:line="16" pos:column="17"/></literal></expr>;<pos:position pos:line="16" pos:column="18"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
