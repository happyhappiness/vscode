<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5780_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_mktree<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">int<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">ac<pos:position pos:line="1" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier><modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">av<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">prefix<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">sb<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name pos:line="3" pos:column="28">STRBUF_INIT<pos:position pos:line="3" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">sha1<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">20<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">nul_term_line<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><literal type="number" pos:line="5" pos:column="29">0<pos:position pos:line="5" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">allow_missing<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><literal type="number" pos:line="6" pos:column="29">0<pos:position pos:line="6" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">is_batch_mode<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">got_eof<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><literal type="number" pos:line="8" pos:column="23">0<pos:position pos:line="8" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">strbuf_getline_fn<pos:position pos:line="9" pos:column="26"/></name></type> <name pos:line="9" pos:column="27">getline_fn<pos:position pos:line="9" pos:column="37"/></name></decl>;<pos:position pos:line="9" pos:column="38"/></decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="11" pos:column="9">const<pos:position pos:line="11" pos:column="14"/></specifier> <name><name pos:line="11" pos:column="15">struct<pos:position pos:line="11" pos:column="21"/></name> <name pos:line="11" pos:column="22">option<pos:position pos:line="11" pos:column="28"/></name></name></type> <name><name pos:line="11" pos:column="29">option<pos:position pos:line="11" pos:column="35"/></name><index pos:line="11" pos:column="35">[]<pos:position pos:line="11" pos:column="37"/></index></name> <init pos:line="11" pos:column="38">= <expr><block pos:line="11" pos:column="40">{
		<expr><call><name pos:line="12" pos:column="17">OPT_BOOL<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><literal type="char" pos:line="12" pos:column="26">'z'<pos:position pos:line="12" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="31">NULL<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="37">&amp;<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="38">nul_term_line<pos:position pos:line="12" pos:column="51"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="53">N_<pos:position pos:line="12" pos:column="55"/></name><argument_list pos:line="12" pos:column="55">(<argument><expr><literal type="string" pos:line="12" pos:column="56">"input is NUL terminated"<pos:position pos:line="12" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="83"/></argument_list></call></expr>,
		<expr><call><name pos:line="13" pos:column="17">OPT_SET_INT<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">( <argument><expr><literal type="number" pos:line="13" pos:column="30">0<pos:position pos:line="13" pos:column="31"/></literal></expr></argument> , <argument><expr><literal type="string" pos:line="13" pos:column="34">"missing"<pos:position pos:line="13" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="13" pos:column="45">&amp;<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="46">allow_missing<pos:position pos:line="13" pos:column="59"/></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="61">N_<pos:position pos:line="13" pos:column="63"/></name><argument_list pos:line="13" pos:column="63">(<argument><expr><literal type="string" pos:line="13" pos:column="64">"allow missing objects"<pos:position pos:line="13" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="88"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="90">1<pos:position pos:line="13" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="92"/></argument_list></call></expr>,
		<expr><call><name pos:line="14" pos:column="17">OPT_SET_INT<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">( <argument><expr><literal type="number" pos:line="14" pos:column="30">0<pos:position pos:line="14" pos:column="31"/></literal></expr></argument> , <argument><expr><literal type="string" pos:line="14" pos:column="34">"batch"<pos:position pos:line="14" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="14" pos:column="43">&amp;<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="44">is_batch_mode<pos:position pos:line="14" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="59">N_<pos:position pos:line="14" pos:column="61"/></name><argument_list pos:line="14" pos:column="61">(<argument><expr><literal type="string" pos:line="14" pos:column="62">"allow creation of more than one tree"<pos:position pos:line="14" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="101"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="103">1<pos:position pos:line="14" pos:column="104"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="105"/></argument_list></call></expr>,
		<macro><name pos:line="15" pos:column="17">OPT_END<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">()<pos:position pos:line="15" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="16" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="16" pos:column="11"/></decl_stmt>

	<expr_stmt><expr><name pos:line="18" pos:column="9">ac<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <call><name pos:line="18" pos:column="14">parse_options<pos:position pos:line="18" pos:column="27"/></name><argument_list pos:line="18" pos:column="27">(<argument><expr><name pos:line="18" pos:column="28">ac<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="32">av<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="36">prefix<pos:position pos:line="18" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="44">option<pos:position pos:line="18" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="52">mktree_usage<pos:position pos:line="18" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="66">0<pos:position pos:line="18" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="69"/></expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">getline_fn<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <ternary><condition><expr><name pos:line="19" pos:column="22">nul_term_line<pos:position pos:line="19" pos:column="35"/></name></expr> ?<pos:position pos:line="19" pos:column="37"/></condition><then pos:line="19" pos:column="37"> <expr><name pos:line="19" pos:column="38">strbuf_getline_nul<pos:position pos:line="19" pos:column="56"/></name></expr> <pos:position pos:line="19" pos:column="57"/></then><else pos:line="19" pos:column="57">: <expr><name pos:line="19" pos:column="59">strbuf_getline_lf<pos:position pos:line="19" pos:column="76"/></name></expr></else></ternary></expr>;<pos:position pos:line="19" pos:column="77"/></expr_stmt>

	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><operator pos:line="21" pos:column="16">!<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">got_eof<pos:position pos:line="21" pos:column="24"/></name></expr>)<pos:position pos:line="21" pos:column="25"/></condition> <block pos:line="21" pos:column="26">{
		<while pos:line="22" pos:column="17">while <condition pos:line="22" pos:column="23">(<expr><literal type="number" pos:line="22" pos:column="24">1<pos:position pos:line="22" pos:column="25"/></literal></expr>)<pos:position pos:line="22" pos:column="26"/></condition> <block pos:line="22" pos:column="27">{
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><call><name pos:line="23" pos:column="29">getline_fn<pos:position pos:line="23" pos:column="39"/></name><argument_list pos:line="23" pos:column="39">(<argument><expr><operator pos:line="23" pos:column="40">&amp;<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="41">sb<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="45">stdin<pos:position pos:line="23" pos:column="50"/></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call> <operator pos:line="23" pos:column="52">==<pos:position pos:line="23" pos:column="54"/></operator> <name pos:line="23" pos:column="55">EOF<pos:position pos:line="23" pos:column="58"/></name></expr>)<pos:position pos:line="23" pos:column="59"/></condition><then pos:line="23" pos:column="59"> <block pos:line="23" pos:column="60">{
				<expr_stmt><expr><name pos:line="24" pos:column="33">got_eof<pos:position pos:line="24" pos:column="40"/></name> <operator pos:line="24" pos:column="41">=<pos:position pos:line="24" pos:column="42"/></operator> <literal type="number" pos:line="24" pos:column="43">1<pos:position pos:line="24" pos:column="44"/></literal></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
				<break pos:line="25" pos:column="33">break;<pos:position pos:line="25" pos:column="39"/></break>
			}<pos:position pos:line="26" pos:column="26"/></block></then></if>
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><name><name pos:line="27" pos:column="29">sb<pos:position pos:line="27" pos:column="31"/></name><operator pos:line="27" pos:column="31">.<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="32">buf<pos:position pos:line="27" pos:column="35"/></name><index pos:line="27" pos:column="35">[<expr><literal type="number" pos:line="27" pos:column="36">0<pos:position pos:line="27" pos:column="37"/></literal></expr>]<pos:position pos:line="27" pos:column="38"/></index></name> <operator pos:line="27" pos:column="39">==<pos:position pos:line="27" pos:column="41"/></operator> <literal type="char" pos:line="27" pos:column="42">'\0'<pos:position pos:line="27" pos:column="46"/></literal></expr>)<pos:position pos:line="27" pos:column="47"/></condition><then pos:line="27" pos:column="47"> <block pos:line="27" pos:column="48">{
				<comment type="block" pos:line="28" pos:column="33">/* empty lines denote tree boundaries in batch mode */</comment>
				<if pos:line="29" pos:column="33">if <condition pos:line="29" pos:column="36">(<expr><name pos:line="29" pos:column="37">is_batch_mode<pos:position pos:line="29" pos:column="50"/></name></expr>)<pos:position pos:line="29" pos:column="51"/></condition><then pos:line="29" pos:column="51">
					<block type="pseudo"><break pos:line="30" pos:column="41">break;<pos:position pos:line="30" pos:column="47"/></break></block></then></if>
				<expr_stmt><expr><call><name pos:line="31" pos:column="33">die<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><literal type="string" pos:line="31" pos:column="37">"input format error: (blank line only valid in batch mode)"<pos:position pos:line="31" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="98"/></expr_stmt>
			}<pos:position pos:line="32" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">mktree_line<pos:position pos:line="33" pos:column="36"/></name><argument_list pos:line="33" pos:column="36">(<argument><expr><name><name pos:line="33" pos:column="37">sb<pos:position pos:line="33" pos:column="39"/></name><operator pos:line="33" pos:column="39">.<pos:position pos:line="33" pos:column="40"/></operator><name pos:line="33" pos:column="40">buf<pos:position pos:line="33" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="45">sb<pos:position pos:line="33" pos:column="47"/></name><operator pos:line="33" pos:column="47">.<pos:position pos:line="33" pos:column="48"/></operator><name pos:line="33" pos:column="48">len<pos:position pos:line="33" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="53">nul_term_line<pos:position pos:line="33" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="68">allow_missing<pos:position pos:line="33" pos:column="81"/></name></expr></argument>)<pos:position pos:line="33" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="83"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></while>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">is_batch_mode<pos:position pos:line="35" pos:column="34"/></name> <operator pos:line="35" pos:column="35">&amp;&amp;<pos:position pos:line="35" pos:column="45"/></operator> <name pos:line="35" pos:column="38">got_eof<pos:position pos:line="35" pos:column="45"/></name> <operator pos:line="35" pos:column="46">&amp;&amp;<pos:position pos:line="35" pos:column="56"/></operator> <name pos:line="35" pos:column="49">used<pos:position pos:line="35" pos:column="53"/></name> <operator pos:line="35" pos:column="54">&lt;<pos:position pos:line="35" pos:column="58"/></operator> <literal type="number" pos:line="35" pos:column="56">1<pos:position pos:line="35" pos:column="57"/></literal></expr>)<pos:position pos:line="35" pos:column="58"/></condition><then pos:line="35" pos:column="58"> <block pos:line="35" pos:column="59">{
			<comment type="block" pos:line="36" pos:column="25">/*
			 * Execution gets here if the last tree entry is terminated with a
			 * new-line.  The final new-line has been made optional to be
			 * consistent with the original non-batch behaviour of mktree.
			 */</comment>
			<empty_stmt pos:line="41" pos:column="25">;<pos:position pos:line="41" pos:column="26"/></empty_stmt> <comment type="block" pos:line="41" pos:column="27">/* skip creating an empty tree */</comment>
		}<pos:position pos:line="42" pos:column="18"/></block></then> <else pos:line="42" pos:column="19">else <block pos:line="42" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">write_tree<pos:position pos:line="43" pos:column="35"/></name><argument_list pos:line="43" pos:column="35">(<argument><expr><name pos:line="43" pos:column="36">sha1<pos:position pos:line="43" pos:column="40"/></name></expr></argument>)<pos:position pos:line="43" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">puts<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><call><name pos:line="44" pos:column="30">sha1_to_hex<pos:position pos:line="44" pos:column="41"/></name><argument_list pos:line="44" pos:column="41">(<argument><expr><name pos:line="44" pos:column="42">sha1<pos:position pos:line="44" pos:column="46"/></name></expr></argument>)<pos:position pos:line="44" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">fflush<pos:position pos:line="45" pos:column="31"/></name><argument_list pos:line="45" pos:column="31">(<argument><expr><name pos:line="45" pos:column="32">stdout<pos:position pos:line="45" pos:column="38"/></name></expr></argument>)<pos:position pos:line="45" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="46" pos:column="18"/></block></else></if>
		<expr_stmt><expr><name pos:line="47" pos:column="17">used<pos:position pos:line="47" pos:column="21"/></name><operator pos:line="47" pos:column="21">=<pos:position pos:line="47" pos:column="22"/></operator><literal type="number" pos:line="47" pos:column="22">0<pos:position pos:line="47" pos:column="23"/></literal></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt> <comment type="block" pos:line="47" pos:column="25">/* reset tree entry buffer for re-use in batch mode */</comment>
	}<pos:position pos:line="48" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="49" pos:column="9">strbuf_release<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><operator pos:line="49" pos:column="24">&amp;<pos:position pos:line="49" pos:column="29"/></operator><name pos:line="49" pos:column="25">sb<pos:position pos:line="49" pos:column="27"/></name></expr></argument>)<pos:position pos:line="49" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">exit<pos:position pos:line="50" pos:column="13"/></name><argument_list pos:line="50" pos:column="13">(<argument><expr><literal type="number" pos:line="50" pos:column="14">0<pos:position pos:line="50" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="17"/></expr_stmt>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
