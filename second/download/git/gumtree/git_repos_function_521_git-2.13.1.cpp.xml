<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_521_git-2.13.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">populate_value<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">ref_array_item<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">ref<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">void<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">buf<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">object<pos:position pos:line="4" pos:column="22"/></name></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">obj<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">eaten<pos:position pos:line="5" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="20">i<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">long<pos:position pos:line="6" pos:column="22"/></name></type> <name pos:line="6" pos:column="23">size<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">unsigned<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">char<pos:position pos:line="7" pos:column="28"/></name> <modifier pos:line="7" pos:column="29">*<pos:position pos:line="7" pos:column="30"/></modifier></type><name pos:line="7" pos:column="30">tagged<pos:position pos:line="7" pos:column="36"/></name></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="9" pos:column="9">ref<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">-&gt;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="14">value<pos:position pos:line="9" pos:column="19"/></name></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <call><name pos:line="9" pos:column="22">xcalloc<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">used_atom_cnt<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="45">sizeof<argument_list pos:line="9" pos:column="51">(<argument><expr pos:line="9" pos:column="52">struct <name pos:line="9" pos:column="59">atom_value<pos:position pos:line="9" pos:column="69"/></name></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="72"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">need_symref<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">&amp;&amp;<pos:position pos:line="11" pos:column="35"/></operator> <operator pos:line="11" pos:column="28">(<pos:position pos:line="11" pos:column="29"/></operator><name><name pos:line="11" pos:column="29">ref<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">-&gt;<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="34">flag<pos:position pos:line="11" pos:column="38"/></name></name> <operator pos:line="11" pos:column="39">&amp;<pos:position pos:line="11" pos:column="44"/></operator> <name pos:line="11" pos:column="41">REF_ISSYMREF<pos:position pos:line="11" pos:column="53"/></name><operator pos:line="11" pos:column="53">)<pos:position pos:line="11" pos:column="54"/></operator> <operator pos:line="11" pos:column="55">&amp;&amp;<pos:position pos:line="11" pos:column="65"/></operator> <operator pos:line="11" pos:column="58">!<pos:position pos:line="11" pos:column="59"/></operator><name><name pos:line="11" pos:column="59">ref<pos:position pos:line="11" pos:column="62"/></name><operator pos:line="11" pos:column="62">-&gt;<pos:position pos:line="11" pos:column="67"/></operator><name pos:line="11" pos:column="64">symref<pos:position pos:line="11" pos:column="70"/></name></name></expr>)<pos:position pos:line="11" pos:column="71"/></condition><then pos:line="11" pos:column="71"> <block pos:line="11" pos:column="72">{
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">struct<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">object_id<pos:position pos:line="12" pos:column="33"/></name></name></type> <name pos:line="12" pos:column="34">unused1<pos:position pos:line="12" pos:column="41"/></name></decl>;<pos:position pos:line="12" pos:column="42"/></decl_stmt>
		<expr_stmt><expr><name><name pos:line="13" pos:column="17">ref<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">-&gt;<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="22">symref<pos:position pos:line="13" pos:column="28"/></name></name> <operator pos:line="13" pos:column="29">=<pos:position pos:line="13" pos:column="30"/></operator> <call><name pos:line="13" pos:column="31">resolve_refdup<pos:position pos:line="13" pos:column="45"/></name><argument_list pos:line="13" pos:column="45">(<argument><expr><name><name pos:line="13" pos:column="46">ref<pos:position pos:line="13" pos:column="49"/></name><operator pos:line="13" pos:column="49">-&gt;<pos:position pos:line="13" pos:column="54"/></operator><name pos:line="13" pos:column="51">refname<pos:position pos:line="13" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="60">RESOLVE_REF_READING<pos:position pos:line="13" pos:column="79"/></name></expr></argument>,
					     <argument><expr><name><name pos:line="14" pos:column="46">unused1<pos:position pos:line="14" pos:column="53"/></name><operator pos:line="14" pos:column="53">.<pos:position pos:line="14" pos:column="54"/></operator><name pos:line="14" pos:column="54">hash<pos:position pos:line="14" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="60">NULL<pos:position pos:line="14" pos:column="64"/></name></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><name><name pos:line="15" pos:column="22">ref<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">-&gt;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="27">symref<pos:position pos:line="15" pos:column="33"/></name></name></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="16" pos:column="25">ref<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">-&gt;<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="30">symref<pos:position pos:line="16" pos:column="36"/></name></name> <operator pos:line="16" pos:column="37">=<pos:position pos:line="16" pos:column="38"/></operator> <literal type="string" pos:line="16" pos:column="39">""<pos:position pos:line="16" pos:column="41"/></literal></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt></block></then></if>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="19" pos:column="9">/* Fill in specials first */</comment>
	<for pos:line="20" pos:column="9">for <control pos:line="20" pos:column="13">(<init><expr><name pos:line="20" pos:column="14">i<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="number" pos:line="20" pos:column="18">0<pos:position pos:line="20" pos:column="19"/></literal></expr>;<pos:position pos:line="20" pos:column="20"/></init> <condition><expr><name pos:line="20" pos:column="21">i<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">&lt;<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="25">used_atom_cnt<pos:position pos:line="20" pos:column="38"/></name></expr>;<pos:position pos:line="20" pos:column="39"/></condition> <incr><expr><name pos:line="20" pos:column="40">i<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">++<pos:position pos:line="20" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="44"/></control> <block pos:line="20" pos:column="45">{
		<decl_stmt><decl><type><name><name pos:line="21" pos:column="17">struct<pos:position pos:line="21" pos:column="23"/></name> <name pos:line="21" pos:column="24">used_atom<pos:position pos:line="21" pos:column="33"/></name></name> <modifier pos:line="21" pos:column="34">*<pos:position pos:line="21" pos:column="35"/></modifier></type><name pos:line="21" pos:column="35">atom<pos:position pos:line="21" pos:column="39"/></name> <init pos:line="21" pos:column="40">= <expr><operator pos:line="21" pos:column="42">&amp;<pos:position pos:line="21" pos:column="47"/></operator><name><name pos:line="21" pos:column="43">used_atom<pos:position pos:line="21" pos:column="52"/></name><index pos:line="21" pos:column="52">[<expr><name pos:line="21" pos:column="53">i<pos:position pos:line="21" pos:column="54"/></name></expr>]<pos:position pos:line="21" pos:column="55"/></index></name></expr></init></decl>;<pos:position pos:line="21" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="22" pos:column="17">const<pos:position pos:line="22" pos:column="22"/></specifier> <name pos:line="22" pos:column="23">char<pos:position pos:line="22" pos:column="27"/></name> <modifier pos:line="22" pos:column="28">*<pos:position pos:line="22" pos:column="29"/></modifier></type><name pos:line="22" pos:column="29">name<pos:position pos:line="22" pos:column="33"/></name> <init pos:line="22" pos:column="34">= <expr><name><name pos:line="22" pos:column="36">used_atom<pos:position pos:line="22" pos:column="45"/></name><index pos:line="22" pos:column="45">[<expr><name pos:line="22" pos:column="46">i<pos:position pos:line="22" pos:column="47"/></name></expr>]<pos:position pos:line="22" pos:column="48"/></index></name><operator pos:line="22" pos:column="48">.<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="49">name<pos:position pos:line="22" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="54"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="23" pos:column="17">struct<pos:position pos:line="23" pos:column="23"/></name> <name pos:line="23" pos:column="24">atom_value<pos:position pos:line="23" pos:column="34"/></name></name> <modifier pos:line="23" pos:column="35">*<pos:position pos:line="23" pos:column="36"/></modifier></type><name pos:line="23" pos:column="36">v<pos:position pos:line="23" pos:column="37"/></name> <init pos:line="23" pos:column="38">= <expr><operator pos:line="23" pos:column="40">&amp;<pos:position pos:line="23" pos:column="45"/></operator><name><name pos:line="23" pos:column="41">ref<pos:position pos:line="23" pos:column="44"/></name><operator pos:line="23" pos:column="44">-&gt;<pos:position pos:line="23" pos:column="49"/></operator><name pos:line="23" pos:column="46">value<pos:position pos:line="23" pos:column="51"/></name><index pos:line="23" pos:column="51">[<expr><name pos:line="23" pos:column="52">i<pos:position pos:line="23" pos:column="53"/></name></expr>]<pos:position pos:line="23" pos:column="54"/></index></name></expr></init></decl>;<pos:position pos:line="23" pos:column="55"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">int<pos:position pos:line="24" pos:column="20"/></name></type> <name pos:line="24" pos:column="21">deref<pos:position pos:line="24" pos:column="26"/></name> <init pos:line="24" pos:column="27">= <expr><literal type="number" pos:line="24" pos:column="29">0<pos:position pos:line="24" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="25" pos:column="17">const<pos:position pos:line="25" pos:column="22"/></specifier> <name pos:line="25" pos:column="23">char<pos:position pos:line="25" pos:column="27"/></name> <modifier pos:line="25" pos:column="28">*<pos:position pos:line="25" pos:column="29"/></modifier></type><name pos:line="25" pos:column="29">refname<pos:position pos:line="25" pos:column="36"/></name></decl>;<pos:position pos:line="25" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="26" pos:column="17">struct<pos:position pos:line="26" pos:column="23"/></name> <name pos:line="26" pos:column="24">branch<pos:position pos:line="26" pos:column="30"/></name></name> <modifier pos:line="26" pos:column="31">*<pos:position pos:line="26" pos:column="32"/></modifier></type><name pos:line="26" pos:column="32">branch<pos:position pos:line="26" pos:column="38"/></name> <init pos:line="26" pos:column="39">= <expr><name pos:line="26" pos:column="41">NULL<pos:position pos:line="26" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="46"/></decl_stmt>

		<expr_stmt><expr><name><name pos:line="28" pos:column="17">v<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">-&gt;<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="20">handler<pos:position pos:line="28" pos:column="27"/></name></name> <operator pos:line="28" pos:column="28">=<pos:position pos:line="28" pos:column="29"/></operator> <name pos:line="28" pos:column="30">append_atom<pos:position pos:line="28" pos:column="41"/></name></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="29" pos:column="17">v<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">-&gt;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="20">atom<pos:position pos:line="29" pos:column="24"/></name></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">atom<pos:position pos:line="29" pos:column="31"/></name></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>

		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><operator pos:line="31" pos:column="21">*<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">name<pos:position pos:line="31" pos:column="26"/></name> <operator pos:line="31" pos:column="27">==<pos:position pos:line="31" pos:column="29"/></operator> <literal type="char" pos:line="31" pos:column="30">'*'<pos:position pos:line="31" pos:column="33"/></literal></expr>)<pos:position pos:line="31" pos:column="34"/></condition><then pos:line="31" pos:column="34"> <block pos:line="31" pos:column="35">{
			<expr_stmt><expr><name pos:line="32" pos:column="25">deref<pos:position pos:line="32" pos:column="30"/></name> <operator pos:line="32" pos:column="31">=<pos:position pos:line="32" pos:column="32"/></operator> <literal type="number" pos:line="32" pos:column="33">1<pos:position pos:line="32" pos:column="34"/></literal></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">name<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">++<pos:position pos:line="33" pos:column="31"/></operator></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>

		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><call><name pos:line="36" pos:column="21">starts_with<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name pos:line="36" pos:column="33">name<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="39">"refname"<pos:position pos:line="36" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="50"/></condition><then pos:line="36" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="25">refname<pos:position pos:line="37" pos:column="32"/></name> <operator pos:line="37" pos:column="33">=<pos:position pos:line="37" pos:column="34"/></operator> <call><name pos:line="37" pos:column="35">get_refname<pos:position pos:line="37" pos:column="46"/></name><argument_list pos:line="37" pos:column="46">(<argument><expr><name pos:line="37" pos:column="47">atom<pos:position pos:line="37" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="53">ref<pos:position pos:line="37" pos:column="56"/></name></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="58"/></expr_stmt></block></then>
		<elseif pos:line="38" pos:column="17">else <if pos:line="38" pos:column="22">if <condition pos:line="38" pos:column="25">(<expr><call><name pos:line="38" pos:column="26">starts_with<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">(<argument><expr><name pos:line="38" pos:column="38">name<pos:position pos:line="38" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="44">"symref"<pos:position pos:line="38" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="54"/></condition><then pos:line="38" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="25">refname<pos:position pos:line="39" pos:column="32"/></name> <operator pos:line="39" pos:column="33">=<pos:position pos:line="39" pos:column="34"/></operator> <call><name pos:line="39" pos:column="35">get_symref<pos:position pos:line="39" pos:column="45"/></name><argument_list pos:line="39" pos:column="45">(<argument><expr><name pos:line="39" pos:column="46">atom<pos:position pos:line="39" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="52">ref<pos:position pos:line="39" pos:column="55"/></name></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="57"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="40" pos:column="17">else <if pos:line="40" pos:column="22">if <condition pos:line="40" pos:column="25">(<expr><call><name pos:line="40" pos:column="26">starts_with<pos:position pos:line="40" pos:column="37"/></name><argument_list pos:line="40" pos:column="37">(<argument><expr><name pos:line="40" pos:column="38">name<pos:position pos:line="40" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="44">"upstream"<pos:position pos:line="40" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="56"/></condition><then pos:line="40" pos:column="56"> <block pos:line="40" pos:column="57">{
			<decl_stmt><decl><type><specifier pos:line="41" pos:column="25">const<pos:position pos:line="41" pos:column="30"/></specifier> <name pos:line="41" pos:column="31">char<pos:position pos:line="41" pos:column="35"/></name> <modifier pos:line="41" pos:column="36">*<pos:position pos:line="41" pos:column="37"/></modifier></type><name pos:line="41" pos:column="37">branch_name<pos:position pos:line="41" pos:column="48"/></name></decl>;<pos:position pos:line="41" pos:column="49"/></decl_stmt>
			<comment type="block" pos:line="42" pos:column="25">/* only local branches may have an upstream */</comment>
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><operator pos:line="43" pos:column="29">!<pos:position pos:line="43" pos:column="30"/></operator><call><name pos:line="43" pos:column="30">skip_prefix<pos:position pos:line="43" pos:column="41"/></name><argument_list pos:line="43" pos:column="41">(<argument><expr><name><name pos:line="43" pos:column="42">ref<pos:position pos:line="43" pos:column="45"/></name><operator pos:line="43" pos:column="45">-&gt;<pos:position pos:line="43" pos:column="50"/></operator><name pos:line="43" pos:column="47">refname<pos:position pos:line="43" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="56">"refs/heads/"<pos:position pos:line="43" pos:column="69"/></literal></expr></argument>,
					 <argument><expr><operator pos:line="44" pos:column="42">&amp;<pos:position pos:line="44" pos:column="47"/></operator><name pos:line="44" pos:column="43">branch_name<pos:position pos:line="44" pos:column="54"/></name></expr></argument>)<pos:position pos:line="44" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="56"/></condition><then pos:line="44" pos:column="56">
				<block type="pseudo"><continue pos:line="45" pos:column="33">continue;<pos:position pos:line="45" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="46" pos:column="25">branch<pos:position pos:line="46" pos:column="31"/></name> <operator pos:line="46" pos:column="32">=<pos:position pos:line="46" pos:column="33"/></operator> <call><name pos:line="46" pos:column="34">branch_get<pos:position pos:line="46" pos:column="44"/></name><argument_list pos:line="46" pos:column="44">(<argument><expr><name pos:line="46" pos:column="45">branch_name<pos:position pos:line="46" pos:column="56"/></name></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="58"/></expr_stmt>

			<expr_stmt><expr><name pos:line="48" pos:column="25">refname<pos:position pos:line="48" pos:column="32"/></name> <operator pos:line="48" pos:column="33">=<pos:position pos:line="48" pos:column="34"/></operator> <call><name pos:line="48" pos:column="35">branch_get_upstream<pos:position pos:line="48" pos:column="54"/></name><argument_list pos:line="48" pos:column="54">(<argument><expr><name pos:line="48" pos:column="55">branch<pos:position pos:line="48" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="63">NULL<pos:position pos:line="48" pos:column="67"/></name></expr></argument>)<pos:position pos:line="48" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="69"/></expr_stmt>
			<if pos:line="49" pos:column="25">if <condition pos:line="49" pos:column="28">(<expr><name pos:line="49" pos:column="29">refname<pos:position pos:line="49" pos:column="36"/></name></expr>)<pos:position pos:line="49" pos:column="37"/></condition><then pos:line="49" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="33">fill_remote_ref_details<pos:position pos:line="50" pos:column="56"/></name><argument_list pos:line="50" pos:column="56">(<argument><expr><name pos:line="50" pos:column="57">atom<pos:position pos:line="50" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="63">refname<pos:position pos:line="50" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="72">branch<pos:position pos:line="50" pos:column="78"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="80">&amp;<pos:position pos:line="50" pos:column="85"/></operator><name><name pos:line="50" pos:column="81">v<pos:position pos:line="50" pos:column="82"/></name><operator pos:line="50" pos:column="82">-&gt;<pos:position pos:line="50" pos:column="87"/></operator><name pos:line="50" pos:column="84">s<pos:position pos:line="50" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="87"/></expr_stmt></block></then></if>
			<continue pos:line="51" pos:column="25">continue;<pos:position pos:line="51" pos:column="34"/></continue>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if></elseif> <elseif pos:line="52" pos:column="19">else <if pos:line="52" pos:column="24">if <condition pos:line="52" pos:column="27">(<expr><call><name pos:line="52" pos:column="28">starts_with<pos:position pos:line="52" pos:column="39"/></name><argument_list pos:line="52" pos:column="39">(<argument><expr><name pos:line="52" pos:column="40">name<pos:position pos:line="52" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="46">"push"<pos:position pos:line="52" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="54"/></condition><then pos:line="52" pos:column="54"> <block pos:line="52" pos:column="55">{
			<decl_stmt><decl><type><specifier pos:line="53" pos:column="25">const<pos:position pos:line="53" pos:column="30"/></specifier> <name pos:line="53" pos:column="31">char<pos:position pos:line="53" pos:column="35"/></name> <modifier pos:line="53" pos:column="36">*<pos:position pos:line="53" pos:column="37"/></modifier></type><name pos:line="53" pos:column="37">branch_name<pos:position pos:line="53" pos:column="48"/></name></decl>;<pos:position pos:line="53" pos:column="49"/></decl_stmt>
			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><operator pos:line="54" pos:column="29">!<pos:position pos:line="54" pos:column="30"/></operator><call><name pos:line="54" pos:column="30">skip_prefix<pos:position pos:line="54" pos:column="41"/></name><argument_list pos:line="54" pos:column="41">(<argument><expr><name><name pos:line="54" pos:column="42">ref<pos:position pos:line="54" pos:column="45"/></name><operator pos:line="54" pos:column="45">-&gt;<pos:position pos:line="54" pos:column="50"/></operator><name pos:line="54" pos:column="47">refname<pos:position pos:line="54" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="56">"refs/heads/"<pos:position pos:line="54" pos:column="69"/></literal></expr></argument>,
					 <argument><expr><operator pos:line="55" pos:column="42">&amp;<pos:position pos:line="55" pos:column="47"/></operator><name pos:line="55" pos:column="43">branch_name<pos:position pos:line="55" pos:column="54"/></name></expr></argument>)<pos:position pos:line="55" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="56"/></condition><then pos:line="55" pos:column="56">
				<block type="pseudo"><continue pos:line="56" pos:column="33">continue;<pos:position pos:line="56" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="57" pos:column="25">branch<pos:position pos:line="57" pos:column="31"/></name> <operator pos:line="57" pos:column="32">=<pos:position pos:line="57" pos:column="33"/></operator> <call><name pos:line="57" pos:column="34">branch_get<pos:position pos:line="57" pos:column="44"/></name><argument_list pos:line="57" pos:column="44">(<argument><expr><name pos:line="57" pos:column="45">branch_name<pos:position pos:line="57" pos:column="56"/></name></expr></argument>)<pos:position pos:line="57" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="58"/></expr_stmt>

			<expr_stmt><expr><name pos:line="59" pos:column="25">refname<pos:position pos:line="59" pos:column="32"/></name> <operator pos:line="59" pos:column="33">=<pos:position pos:line="59" pos:column="34"/></operator> <call><name pos:line="59" pos:column="35">branch_get_push<pos:position pos:line="59" pos:column="50"/></name><argument_list pos:line="59" pos:column="50">(<argument><expr><name pos:line="59" pos:column="51">branch<pos:position pos:line="59" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="59">NULL<pos:position pos:line="59" pos:column="63"/></name></expr></argument>)<pos:position pos:line="59" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="65"/></expr_stmt>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><operator pos:line="60" pos:column="29">!<pos:position pos:line="60" pos:column="30"/></operator><name pos:line="60" pos:column="30">refname<pos:position pos:line="60" pos:column="37"/></name></expr>)<pos:position pos:line="60" pos:column="38"/></condition><then pos:line="60" pos:column="38">
				<block type="pseudo"><continue pos:line="61" pos:column="33">continue;<pos:position pos:line="61" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">fill_remote_ref_details<pos:position pos:line="62" pos:column="48"/></name><argument_list pos:line="62" pos:column="48">(<argument><expr><name pos:line="62" pos:column="49">atom<pos:position pos:line="62" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="55">refname<pos:position pos:line="62" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="64">branch<pos:position pos:line="62" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="72">&amp;<pos:position pos:line="62" pos:column="77"/></operator><name><name pos:line="62" pos:column="73">v<pos:position pos:line="62" pos:column="74"/></name><operator pos:line="62" pos:column="74">-&gt;<pos:position pos:line="62" pos:column="79"/></operator><name pos:line="62" pos:column="76">s<pos:position pos:line="62" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="79"/></expr_stmt>
			<continue pos:line="63" pos:column="25">continue;<pos:position pos:line="63" pos:column="34"/></continue>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if></elseif> <elseif pos:line="64" pos:column="19">else <if pos:line="64" pos:column="24">if <condition pos:line="64" pos:column="27">(<expr><call><name pos:line="64" pos:column="28">starts_with<pos:position pos:line="64" pos:column="39"/></name><argument_list pos:line="64" pos:column="39">(<argument><expr><name pos:line="64" pos:column="40">name<pos:position pos:line="64" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="46">"color:"<pos:position pos:line="64" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="56"/></condition><then pos:line="64" pos:column="56"> <block pos:line="64" pos:column="57">{
			<expr_stmt><expr><name><name pos:line="65" pos:column="25">v<pos:position pos:line="65" pos:column="26"/></name><operator pos:line="65" pos:column="26">-&gt;<pos:position pos:line="65" pos:column="31"/></operator><name pos:line="65" pos:column="28">s<pos:position pos:line="65" pos:column="29"/></name></name> <operator pos:line="65" pos:column="30">=<pos:position pos:line="65" pos:column="31"/></operator> <name><name pos:line="65" pos:column="32">atom<pos:position pos:line="65" pos:column="36"/></name><operator pos:line="65" pos:column="36">-&gt;<pos:position pos:line="65" pos:column="41"/></operator><name pos:line="65" pos:column="38">u<pos:position pos:line="65" pos:column="39"/></name><operator pos:line="65" pos:column="39">.<pos:position pos:line="65" pos:column="40"/></operator><name pos:line="65" pos:column="40">color<pos:position pos:line="65" pos:column="45"/></name></name></expr>;<pos:position pos:line="65" pos:column="46"/></expr_stmt>
			<continue pos:line="66" pos:column="25">continue;<pos:position pos:line="66" pos:column="34"/></continue>
		}<pos:position pos:line="67" pos:column="18"/></block></then></if></elseif> <elseif pos:line="67" pos:column="19">else <if pos:line="67" pos:column="24">if <condition pos:line="67" pos:column="27">(<expr><operator pos:line="67" pos:column="28">!<pos:position pos:line="67" pos:column="29"/></operator><call><name pos:line="67" pos:column="29">strcmp<pos:position pos:line="67" pos:column="35"/></name><argument_list pos:line="67" pos:column="35">(<argument><expr><name pos:line="67" pos:column="36">name<pos:position pos:line="67" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="42">"flag"<pos:position pos:line="67" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="50"/></condition><then pos:line="67" pos:column="50"> <block pos:line="67" pos:column="51">{
			<decl_stmt><decl><type><name pos:line="68" pos:column="25">char<pos:position pos:line="68" pos:column="29"/></name></type> <name><name pos:line="68" pos:column="30">buf<pos:position pos:line="68" pos:column="33"/></name><index pos:line="68" pos:column="33">[<expr><literal type="number" pos:line="68" pos:column="34">256<pos:position pos:line="68" pos:column="37"/></literal></expr>]<pos:position pos:line="68" pos:column="38"/></index></name></decl>, <modifier pos:line="68" pos:column="40">*<pos:position pos:line="68" pos:column="41"/></modifier><decl><type ref="prev"/><name pos:line="68" pos:column="41">cp<pos:position pos:line="68" pos:column="43"/></name> <init pos:line="68" pos:column="44">= <expr><name pos:line="68" pos:column="46">buf<pos:position pos:line="68" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="68" pos:column="50"/></decl_stmt>
			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><name><name pos:line="69" pos:column="29">ref<pos:position pos:line="69" pos:column="32"/></name><operator pos:line="69" pos:column="32">-&gt;<pos:position pos:line="69" pos:column="37"/></operator><name pos:line="69" pos:column="34">flag<pos:position pos:line="69" pos:column="38"/></name></name> <operator pos:line="69" pos:column="39">&amp;<pos:position pos:line="69" pos:column="44"/></operator> <name pos:line="69" pos:column="41">REF_ISSYMREF<pos:position pos:line="69" pos:column="53"/></name></expr>)<pos:position pos:line="69" pos:column="54"/></condition><then pos:line="69" pos:column="54">
				<block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="33">cp<pos:position pos:line="70" pos:column="35"/></name> <operator pos:line="70" pos:column="36">=<pos:position pos:line="70" pos:column="37"/></operator> <call><name pos:line="70" pos:column="38">copy_advance<pos:position pos:line="70" pos:column="50"/></name><argument_list pos:line="70" pos:column="50">(<argument><expr><name pos:line="70" pos:column="51">cp<pos:position pos:line="70" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="55">",symref"<pos:position pos:line="70" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="66"/></expr_stmt></block></then></if>
			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><name><name pos:line="71" pos:column="29">ref<pos:position pos:line="71" pos:column="32"/></name><operator pos:line="71" pos:column="32">-&gt;<pos:position pos:line="71" pos:column="37"/></operator><name pos:line="71" pos:column="34">flag<pos:position pos:line="71" pos:column="38"/></name></name> <operator pos:line="71" pos:column="39">&amp;<pos:position pos:line="71" pos:column="44"/></operator> <name pos:line="71" pos:column="41">REF_ISPACKED<pos:position pos:line="71" pos:column="53"/></name></expr>)<pos:position pos:line="71" pos:column="54"/></condition><then pos:line="71" pos:column="54">
				<block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="33">cp<pos:position pos:line="72" pos:column="35"/></name> <operator pos:line="72" pos:column="36">=<pos:position pos:line="72" pos:column="37"/></operator> <call><name pos:line="72" pos:column="38">copy_advance<pos:position pos:line="72" pos:column="50"/></name><argument_list pos:line="72" pos:column="50">(<argument><expr><name pos:line="72" pos:column="51">cp<pos:position pos:line="72" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="55">",packed"<pos:position pos:line="72" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="66"/></expr_stmt></block></then></if>
			<if pos:line="73" pos:column="25">if <condition pos:line="73" pos:column="28">(<expr><name pos:line="73" pos:column="29">cp<pos:position pos:line="73" pos:column="31"/></name> <operator pos:line="73" pos:column="32">==<pos:position pos:line="73" pos:column="34"/></operator> <name pos:line="73" pos:column="35">buf<pos:position pos:line="73" pos:column="38"/></name></expr>)<pos:position pos:line="73" pos:column="39"/></condition><then pos:line="73" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="74" pos:column="33">v<pos:position pos:line="74" pos:column="34"/></name><operator pos:line="74" pos:column="34">-&gt;<pos:position pos:line="74" pos:column="39"/></operator><name pos:line="74" pos:column="36">s<pos:position pos:line="74" pos:column="37"/></name></name> <operator pos:line="74" pos:column="38">=<pos:position pos:line="74" pos:column="39"/></operator> <literal type="string" pos:line="74" pos:column="40">""<pos:position pos:line="74" pos:column="42"/></literal></expr>;<pos:position pos:line="74" pos:column="43"/></expr_stmt></block></then>
			<else pos:line="75" pos:column="25">else <block pos:line="75" pos:column="30">{
				<expr_stmt><expr><operator pos:line="76" pos:column="33">*<pos:position pos:line="76" pos:column="34"/></operator><name pos:line="76" pos:column="34">cp<pos:position pos:line="76" pos:column="36"/></name> <operator pos:line="76" pos:column="37">=<pos:position pos:line="76" pos:column="38"/></operator> <literal type="char" pos:line="76" pos:column="39">'\0'<pos:position pos:line="76" pos:column="43"/></literal></expr>;<pos:position pos:line="76" pos:column="44"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="77" pos:column="33">v<pos:position pos:line="77" pos:column="34"/></name><operator pos:line="77" pos:column="34">-&gt;<pos:position pos:line="77" pos:column="39"/></operator><name pos:line="77" pos:column="36">s<pos:position pos:line="77" pos:column="37"/></name></name> <operator pos:line="77" pos:column="38">=<pos:position pos:line="77" pos:column="39"/></operator> <call><name pos:line="77" pos:column="40">xstrdup<pos:position pos:line="77" pos:column="47"/></name><argument_list pos:line="77" pos:column="47">(<argument><expr><name pos:line="77" pos:column="48">buf<pos:position pos:line="77" pos:column="51"/></name> <operator pos:line="77" pos:column="52">+<pos:position pos:line="77" pos:column="53"/></operator> <literal type="number" pos:line="77" pos:column="54">1<pos:position pos:line="77" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="57"/></expr_stmt>
			}<pos:position pos:line="78" pos:column="26"/></block></else></if>
			<continue pos:line="79" pos:column="25">continue;<pos:position pos:line="79" pos:column="34"/></continue>
		}<pos:position pos:line="80" pos:column="18"/></block></then></if></elseif> <elseif pos:line="80" pos:column="19">else <if pos:line="80" pos:column="24">if <condition pos:line="80" pos:column="27">(<expr><operator pos:line="80" pos:column="28">!<pos:position pos:line="80" pos:column="29"/></operator><name pos:line="80" pos:column="29">deref<pos:position pos:line="80" pos:column="34"/></name> <operator pos:line="80" pos:column="35">&amp;&amp;<pos:position pos:line="80" pos:column="45"/></operator> <call><name pos:line="80" pos:column="38">grab_objectname<pos:position pos:line="80" pos:column="53"/></name><argument_list pos:line="80" pos:column="53">(<argument><expr><name pos:line="80" pos:column="54">name<pos:position pos:line="80" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="60">ref<pos:position pos:line="80" pos:column="63"/></name><operator pos:line="80" pos:column="63">-&gt;<pos:position pos:line="80" pos:column="68"/></operator><name pos:line="80" pos:column="65">objectname<pos:position pos:line="80" pos:column="75"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="77">v<pos:position pos:line="80" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="80">atom<pos:position pos:line="80" pos:column="84"/></name></expr></argument>)<pos:position pos:line="80" pos:column="85"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="86"/></condition><then pos:line="80" pos:column="86"> <block pos:line="80" pos:column="87">{
			<continue pos:line="81" pos:column="25">continue;<pos:position pos:line="81" pos:column="34"/></continue>
		}<pos:position pos:line="82" pos:column="18"/></block></then></if></elseif> <elseif pos:line="82" pos:column="19">else <if pos:line="82" pos:column="24">if <condition pos:line="82" pos:column="27">(<expr><operator pos:line="82" pos:column="28">!<pos:position pos:line="82" pos:column="29"/></operator><call><name pos:line="82" pos:column="29">strcmp<pos:position pos:line="82" pos:column="35"/></name><argument_list pos:line="82" pos:column="35">(<argument><expr><name pos:line="82" pos:column="36">name<pos:position pos:line="82" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="42">"HEAD"<pos:position pos:line="82" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="50"/></condition><then pos:line="82" pos:column="50"> <block pos:line="82" pos:column="51">{
			<if pos:line="83" pos:column="25">if <condition pos:line="83" pos:column="28">(<expr><name><name pos:line="83" pos:column="29">atom<pos:position pos:line="83" pos:column="33"/></name><operator pos:line="83" pos:column="33">-&gt;<pos:position pos:line="83" pos:column="38"/></operator><name pos:line="83" pos:column="35">u<pos:position pos:line="83" pos:column="36"/></name><operator pos:line="83" pos:column="36">.<pos:position pos:line="83" pos:column="37"/></operator><name pos:line="83" pos:column="37">head<pos:position pos:line="83" pos:column="41"/></name></name> <operator pos:line="83" pos:column="42">&amp;&amp;<pos:position pos:line="83" pos:column="52"/></operator> <operator pos:line="83" pos:column="45">!<pos:position pos:line="83" pos:column="46"/></operator><call><name pos:line="83" pos:column="46">strcmp<pos:position pos:line="83" pos:column="52"/></name><argument_list pos:line="83" pos:column="52">(<argument><expr><name><name pos:line="83" pos:column="53">ref<pos:position pos:line="83" pos:column="56"/></name><operator pos:line="83" pos:column="56">-&gt;<pos:position pos:line="83" pos:column="61"/></operator><name pos:line="83" pos:column="58">refname<pos:position pos:line="83" pos:column="65"/></name></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="67">atom<pos:position pos:line="83" pos:column="71"/></name><operator pos:line="83" pos:column="71">-&gt;<pos:position pos:line="83" pos:column="76"/></operator><name pos:line="83" pos:column="73">u<pos:position pos:line="83" pos:column="74"/></name><operator pos:line="83" pos:column="74">.<pos:position pos:line="83" pos:column="75"/></operator><name pos:line="83" pos:column="75">head<pos:position pos:line="83" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="80"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="81"/></condition><then pos:line="83" pos:column="81">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="84" pos:column="33">v<pos:position pos:line="84" pos:column="34"/></name><operator pos:line="84" pos:column="34">-&gt;<pos:position pos:line="84" pos:column="39"/></operator><name pos:line="84" pos:column="36">s<pos:position pos:line="84" pos:column="37"/></name></name> <operator pos:line="84" pos:column="38">=<pos:position pos:line="84" pos:column="39"/></operator> <literal type="string" pos:line="84" pos:column="40">"*"<pos:position pos:line="84" pos:column="43"/></literal></expr>;<pos:position pos:line="84" pos:column="44"/></expr_stmt></block></then>
			<else pos:line="85" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="86" pos:column="33">v<pos:position pos:line="86" pos:column="34"/></name><operator pos:line="86" pos:column="34">-&gt;<pos:position pos:line="86" pos:column="39"/></operator><name pos:line="86" pos:column="36">s<pos:position pos:line="86" pos:column="37"/></name></name> <operator pos:line="86" pos:column="38">=<pos:position pos:line="86" pos:column="39"/></operator> <literal type="string" pos:line="86" pos:column="40">" "<pos:position pos:line="86" pos:column="43"/></literal></expr>;<pos:position pos:line="86" pos:column="44"/></expr_stmt></block></else></if>
			<continue pos:line="87" pos:column="25">continue;<pos:position pos:line="87" pos:column="34"/></continue>
		}<pos:position pos:line="88" pos:column="18"/></block></then></if></elseif> <elseif pos:line="88" pos:column="19">else <if pos:line="88" pos:column="24">if <condition pos:line="88" pos:column="27">(<expr><call><name pos:line="88" pos:column="28">starts_with<pos:position pos:line="88" pos:column="39"/></name><argument_list pos:line="88" pos:column="39">(<argument><expr><name pos:line="88" pos:column="40">name<pos:position pos:line="88" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="46">"align"<pos:position pos:line="88" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="55"/></condition><then pos:line="88" pos:column="55"> <block pos:line="88" pos:column="56">{
			<expr_stmt><expr><name><name pos:line="89" pos:column="25">v<pos:position pos:line="89" pos:column="26"/></name><operator pos:line="89" pos:column="26">-&gt;<pos:position pos:line="89" pos:column="31"/></operator><name pos:line="89" pos:column="28">handler<pos:position pos:line="89" pos:column="35"/></name></name> <operator pos:line="89" pos:column="36">=<pos:position pos:line="89" pos:column="37"/></operator> <name pos:line="89" pos:column="38">align_atom_handler<pos:position pos:line="89" pos:column="56"/></name></expr>;<pos:position pos:line="89" pos:column="57"/></expr_stmt>
			<continue pos:line="90" pos:column="25">continue;<pos:position pos:line="90" pos:column="34"/></continue>
		}<pos:position pos:line="91" pos:column="18"/></block></then></if></elseif> <elseif pos:line="91" pos:column="19">else <if pos:line="91" pos:column="24">if <condition pos:line="91" pos:column="27">(<expr><operator pos:line="91" pos:column="28">!<pos:position pos:line="91" pos:column="29"/></operator><call><name pos:line="91" pos:column="29">strcmp<pos:position pos:line="91" pos:column="35"/></name><argument_list pos:line="91" pos:column="35">(<argument><expr><name pos:line="91" pos:column="36">name<pos:position pos:line="91" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="42">"end"<pos:position pos:line="91" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="49"/></condition><then pos:line="91" pos:column="49"> <block pos:line="91" pos:column="50">{
			<expr_stmt><expr><name><name pos:line="92" pos:column="25">v<pos:position pos:line="92" pos:column="26"/></name><operator pos:line="92" pos:column="26">-&gt;<pos:position pos:line="92" pos:column="31"/></operator><name pos:line="92" pos:column="28">handler<pos:position pos:line="92" pos:column="35"/></name></name> <operator pos:line="92" pos:column="36">=<pos:position pos:line="92" pos:column="37"/></operator> <name pos:line="92" pos:column="38">end_atom_handler<pos:position pos:line="92" pos:column="54"/></name></expr>;<pos:position pos:line="92" pos:column="55"/></expr_stmt>
			<continue pos:line="93" pos:column="25">continue;<pos:position pos:line="93" pos:column="34"/></continue>
		}<pos:position pos:line="94" pos:column="18"/></block></then></if></elseif> <elseif pos:line="94" pos:column="19">else <if pos:line="94" pos:column="24">if <condition pos:line="94" pos:column="27">(<expr><call><name pos:line="94" pos:column="28">starts_with<pos:position pos:line="94" pos:column="39"/></name><argument_list pos:line="94" pos:column="39">(<argument><expr><name pos:line="94" pos:column="40">name<pos:position pos:line="94" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="46">"if"<pos:position pos:line="94" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="52"/></condition><then pos:line="94" pos:column="52"> <block pos:line="94" pos:column="53">{
			<decl_stmt><decl><type><specifier pos:line="95" pos:column="25">const<pos:position pos:line="95" pos:column="30"/></specifier> <name pos:line="95" pos:column="31">char<pos:position pos:line="95" pos:column="35"/></name> <modifier pos:line="95" pos:column="36">*<pos:position pos:line="95" pos:column="37"/></modifier></type><name pos:line="95" pos:column="37">s<pos:position pos:line="95" pos:column="38"/></name></decl>;<pos:position pos:line="95" pos:column="39"/></decl_stmt>

			<if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><call><name pos:line="97" pos:column="29">skip_prefix<pos:position pos:line="97" pos:column="40"/></name><argument_list pos:line="97" pos:column="40">(<argument><expr><name pos:line="97" pos:column="41">name<pos:position pos:line="97" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="47">"if:"<pos:position pos:line="97" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="97" pos:column="54">&amp;<pos:position pos:line="97" pos:column="59"/></operator><name pos:line="97" pos:column="55">s<pos:position pos:line="97" pos:column="56"/></name></expr></argument>)<pos:position pos:line="97" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="97" pos:column="58"/></condition><then pos:line="97" pos:column="58">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="98" pos:column="33">v<pos:position pos:line="98" pos:column="34"/></name><operator pos:line="98" pos:column="34">-&gt;<pos:position pos:line="98" pos:column="39"/></operator><name pos:line="98" pos:column="36">s<pos:position pos:line="98" pos:column="37"/></name></name> <operator pos:line="98" pos:column="38">=<pos:position pos:line="98" pos:column="39"/></operator> <call><name pos:line="98" pos:column="40">xstrdup<pos:position pos:line="98" pos:column="47"/></name><argument_list pos:line="98" pos:column="47">(<argument><expr><name pos:line="98" pos:column="48">s<pos:position pos:line="98" pos:column="49"/></name></expr></argument>)<pos:position pos:line="98" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="51"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="99" pos:column="25">v<pos:position pos:line="99" pos:column="26"/></name><operator pos:line="99" pos:column="26">-&gt;<pos:position pos:line="99" pos:column="31"/></operator><name pos:line="99" pos:column="28">handler<pos:position pos:line="99" pos:column="35"/></name></name> <operator pos:line="99" pos:column="36">=<pos:position pos:line="99" pos:column="37"/></operator> <name pos:line="99" pos:column="38">if_atom_handler<pos:position pos:line="99" pos:column="53"/></name></expr>;<pos:position pos:line="99" pos:column="54"/></expr_stmt>
			<continue pos:line="100" pos:column="25">continue;<pos:position pos:line="100" pos:column="34"/></continue>
		}<pos:position pos:line="101" pos:column="18"/></block></then></if></elseif> <elseif pos:line="101" pos:column="19">else <if pos:line="101" pos:column="24">if <condition pos:line="101" pos:column="27">(<expr><operator pos:line="101" pos:column="28">!<pos:position pos:line="101" pos:column="29"/></operator><call><name pos:line="101" pos:column="29">strcmp<pos:position pos:line="101" pos:column="35"/></name><argument_list pos:line="101" pos:column="35">(<argument><expr><name pos:line="101" pos:column="36">name<pos:position pos:line="101" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="42">"then"<pos:position pos:line="101" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="101" pos:column="50"/></condition><then pos:line="101" pos:column="50"> <block pos:line="101" pos:column="51">{
			<expr_stmt><expr><name><name pos:line="102" pos:column="25">v<pos:position pos:line="102" pos:column="26"/></name><operator pos:line="102" pos:column="26">-&gt;<pos:position pos:line="102" pos:column="31"/></operator><name pos:line="102" pos:column="28">handler<pos:position pos:line="102" pos:column="35"/></name></name> <operator pos:line="102" pos:column="36">=<pos:position pos:line="102" pos:column="37"/></operator> <name pos:line="102" pos:column="38">then_atom_handler<pos:position pos:line="102" pos:column="55"/></name></expr>;<pos:position pos:line="102" pos:column="56"/></expr_stmt>
			<continue pos:line="103" pos:column="25">continue;<pos:position pos:line="103" pos:column="34"/></continue>
		}<pos:position pos:line="104" pos:column="18"/></block></then></if></elseif> <elseif pos:line="104" pos:column="19">else <if pos:line="104" pos:column="24">if <condition pos:line="104" pos:column="27">(<expr><operator pos:line="104" pos:column="28">!<pos:position pos:line="104" pos:column="29"/></operator><call><name pos:line="104" pos:column="29">strcmp<pos:position pos:line="104" pos:column="35"/></name><argument_list pos:line="104" pos:column="35">(<argument><expr><name pos:line="104" pos:column="36">name<pos:position pos:line="104" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="42">"else"<pos:position pos:line="104" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="104" pos:column="50"/></condition><then pos:line="104" pos:column="50"> <block pos:line="104" pos:column="51">{
			<expr_stmt><expr><name><name pos:line="105" pos:column="25">v<pos:position pos:line="105" pos:column="26"/></name><operator pos:line="105" pos:column="26">-&gt;<pos:position pos:line="105" pos:column="31"/></operator><name pos:line="105" pos:column="28">handler<pos:position pos:line="105" pos:column="35"/></name></name> <operator pos:line="105" pos:column="36">=<pos:position pos:line="105" pos:column="37"/></operator> <name pos:line="105" pos:column="38">else_atom_handler<pos:position pos:line="105" pos:column="55"/></name></expr>;<pos:position pos:line="105" pos:column="56"/></expr_stmt>
			<continue pos:line="106" pos:column="25">continue;<pos:position pos:line="106" pos:column="34"/></continue>
		}<pos:position pos:line="107" pos:column="18"/></block></then></if></elseif> <else pos:line="107" pos:column="19">else
			<block type="pseudo"><continue pos:line="108" pos:column="25">continue;<pos:position pos:line="108" pos:column="34"/></continue></block></else></if>

		<if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><operator pos:line="110" pos:column="21">!<pos:position pos:line="110" pos:column="22"/></operator><name pos:line="110" pos:column="22">deref<pos:position pos:line="110" pos:column="27"/></name></expr>)<pos:position pos:line="110" pos:column="28"/></condition><then pos:line="110" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="111" pos:column="25">v<pos:position pos:line="111" pos:column="26"/></name><operator pos:line="111" pos:column="26">-&gt;<pos:position pos:line="111" pos:column="31"/></operator><name pos:line="111" pos:column="28">s<pos:position pos:line="111" pos:column="29"/></name></name> <operator pos:line="111" pos:column="30">=<pos:position pos:line="111" pos:column="31"/></operator> <name pos:line="111" pos:column="32">refname<pos:position pos:line="111" pos:column="39"/></name></expr>;<pos:position pos:line="111" pos:column="40"/></expr_stmt></block></then>
		<else pos:line="112" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="113" pos:column="25">v<pos:position pos:line="113" pos:column="26"/></name><operator pos:line="113" pos:column="26">-&gt;<pos:position pos:line="113" pos:column="31"/></operator><name pos:line="113" pos:column="28">s<pos:position pos:line="113" pos:column="29"/></name></name> <operator pos:line="113" pos:column="30">=<pos:position pos:line="113" pos:column="31"/></operator> <call><name pos:line="113" pos:column="32">xstrfmt<pos:position pos:line="113" pos:column="39"/></name><argument_list pos:line="113" pos:column="39">(<argument><expr><literal type="string" pos:line="113" pos:column="40">"%s^{}"<pos:position pos:line="113" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="49">refname<pos:position pos:line="113" pos:column="56"/></name></expr></argument>)<pos:position pos:line="113" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="58"/></expr_stmt></block></else></if>
	}<pos:position pos:line="114" pos:column="10"/></block></for>

	<for pos:line="116" pos:column="9">for <control pos:line="116" pos:column="13">(<init><expr><name pos:line="116" pos:column="14">i<pos:position pos:line="116" pos:column="15"/></name> <operator pos:line="116" pos:column="16">=<pos:position pos:line="116" pos:column="17"/></operator> <literal type="number" pos:line="116" pos:column="18">0<pos:position pos:line="116" pos:column="19"/></literal></expr>;<pos:position pos:line="116" pos:column="20"/></init> <condition><expr><name pos:line="116" pos:column="21">i<pos:position pos:line="116" pos:column="22"/></name> <operator pos:line="116" pos:column="23">&lt;<pos:position pos:line="116" pos:column="27"/></operator> <name pos:line="116" pos:column="25">used_atom_cnt<pos:position pos:line="116" pos:column="38"/></name></expr>;<pos:position pos:line="116" pos:column="39"/></condition> <incr><expr><name pos:line="116" pos:column="40">i<pos:position pos:line="116" pos:column="41"/></name><operator pos:line="116" pos:column="41">++<pos:position pos:line="116" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="116" pos:column="44"/></control> <block pos:line="116" pos:column="45">{
		<decl_stmt><decl><type><name><name pos:line="117" pos:column="17">struct<pos:position pos:line="117" pos:column="23"/></name> <name pos:line="117" pos:column="24">atom_value<pos:position pos:line="117" pos:column="34"/></name></name> <modifier pos:line="117" pos:column="35">*<pos:position pos:line="117" pos:column="36"/></modifier></type><name pos:line="117" pos:column="36">v<pos:position pos:line="117" pos:column="37"/></name> <init pos:line="117" pos:column="38">= <expr><operator pos:line="117" pos:column="40">&amp;<pos:position pos:line="117" pos:column="45"/></operator><name><name pos:line="117" pos:column="41">ref<pos:position pos:line="117" pos:column="44"/></name><operator pos:line="117" pos:column="44">-&gt;<pos:position pos:line="117" pos:column="49"/></operator><name pos:line="117" pos:column="46">value<pos:position pos:line="117" pos:column="51"/></name><index pos:line="117" pos:column="51">[<expr><name pos:line="117" pos:column="52">i<pos:position pos:line="117" pos:column="53"/></name></expr>]<pos:position pos:line="117" pos:column="54"/></index></name></expr></init></decl>;<pos:position pos:line="117" pos:column="55"/></decl_stmt>
		<if pos:line="118" pos:column="17">if <condition pos:line="118" pos:column="20">(<expr><name><name pos:line="118" pos:column="21">v<pos:position pos:line="118" pos:column="22"/></name><operator pos:line="118" pos:column="22">-&gt;<pos:position pos:line="118" pos:column="27"/></operator><name pos:line="118" pos:column="24">s<pos:position pos:line="118" pos:column="25"/></name></name> <operator pos:line="118" pos:column="26">==<pos:position pos:line="118" pos:column="28"/></operator> <name pos:line="118" pos:column="29">NULL<pos:position pos:line="118" pos:column="33"/></name></expr>)<pos:position pos:line="118" pos:column="34"/></condition><then pos:line="118" pos:column="34">
			<block type="pseudo"><goto pos:line="119" pos:column="25">goto <name pos:line="119" pos:column="30">need_obj<pos:position pos:line="119" pos:column="38"/></name>;<pos:position pos:line="119" pos:column="39"/></goto></block></then></if>
	}<pos:position pos:line="120" pos:column="10"/></block></for>
	<return pos:line="121" pos:column="9">return;<pos:position pos:line="121" pos:column="16"/></return>

 <label><name pos:line="123" pos:column="2">need_obj<pos:position pos:line="123" pos:column="10"/></name>:<pos:position pos:line="123" pos:column="11"/></label>
	<expr_stmt><expr><name pos:line="124" pos:column="9">buf<pos:position pos:line="124" pos:column="12"/></name> <operator pos:line="124" pos:column="13">=<pos:position pos:line="124" pos:column="14"/></operator> <call><name pos:line="124" pos:column="15">get_obj<pos:position pos:line="124" pos:column="22"/></name><argument_list pos:line="124" pos:column="22">(<argument><expr><name><name pos:line="124" pos:column="23">ref<pos:position pos:line="124" pos:column="26"/></name><operator pos:line="124" pos:column="26">-&gt;<pos:position pos:line="124" pos:column="31"/></operator><name pos:line="124" pos:column="28">objectname<pos:position pos:line="124" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="124" pos:column="40">&amp;<pos:position pos:line="124" pos:column="45"/></operator><name pos:line="124" pos:column="41">obj<pos:position pos:line="124" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="124" pos:column="46">&amp;<pos:position pos:line="124" pos:column="51"/></operator><name pos:line="124" pos:column="47">size<pos:position pos:line="124" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="124" pos:column="53">&amp;<pos:position pos:line="124" pos:column="58"/></operator><name pos:line="124" pos:column="54">eaten<pos:position pos:line="124" pos:column="59"/></name></expr></argument>)<pos:position pos:line="124" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="61"/></expr_stmt>
	<if pos:line="125" pos:column="9">if <condition pos:line="125" pos:column="12">(<expr><operator pos:line="125" pos:column="13">!<pos:position pos:line="125" pos:column="14"/></operator><name pos:line="125" pos:column="14">buf<pos:position pos:line="125" pos:column="17"/></name></expr>)<pos:position pos:line="125" pos:column="18"/></condition><then pos:line="125" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="126" pos:column="17">die<pos:position pos:line="126" pos:column="20"/></name><argument_list pos:line="126" pos:column="20">(<argument><expr><call><name pos:line="126" pos:column="21">_<pos:position pos:line="126" pos:column="22"/></name><argument_list pos:line="126" pos:column="22">(<argument><expr><literal type="string" pos:line="126" pos:column="23">"missing object %s for %s"<pos:position pos:line="126" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="50"/></argument_list></call></expr></argument>,
		    <argument><expr><call><name pos:line="127" pos:column="21">sha1_to_hex<pos:position pos:line="127" pos:column="32"/></name><argument_list pos:line="127" pos:column="32">(<argument><expr><name><name pos:line="127" pos:column="33">ref<pos:position pos:line="127" pos:column="36"/></name><operator pos:line="127" pos:column="36">-&gt;<pos:position pos:line="127" pos:column="41"/></operator><name pos:line="127" pos:column="38">objectname<pos:position pos:line="127" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="127" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="51">ref<pos:position pos:line="127" pos:column="54"/></name><operator pos:line="127" pos:column="54">-&gt;<pos:position pos:line="127" pos:column="59"/></operator><name pos:line="127" pos:column="56">refname<pos:position pos:line="127" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="127" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="65"/></expr_stmt></block></then></if>
	<if pos:line="128" pos:column="9">if <condition pos:line="128" pos:column="12">(<expr><operator pos:line="128" pos:column="13">!<pos:position pos:line="128" pos:column="14"/></operator><name pos:line="128" pos:column="14">obj<pos:position pos:line="128" pos:column="17"/></name></expr>)<pos:position pos:line="128" pos:column="18"/></condition><then pos:line="128" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="129" pos:column="17">die<pos:position pos:line="129" pos:column="20"/></name><argument_list pos:line="129" pos:column="20">(<argument><expr><call><name pos:line="129" pos:column="21">_<pos:position pos:line="129" pos:column="22"/></name><argument_list pos:line="129" pos:column="22">(<argument><expr><literal type="string" pos:line="129" pos:column="23">"parse_object_buffer failed on %s for %s"<pos:position pos:line="129" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="65"/></argument_list></call></expr></argument>,
		    <argument><expr><call><name pos:line="130" pos:column="21">sha1_to_hex<pos:position pos:line="130" pos:column="32"/></name><argument_list pos:line="130" pos:column="32">(<argument><expr><name><name pos:line="130" pos:column="33">ref<pos:position pos:line="130" pos:column="36"/></name><operator pos:line="130" pos:column="36">-&gt;<pos:position pos:line="130" pos:column="41"/></operator><name pos:line="130" pos:column="38">objectname<pos:position pos:line="130" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="130" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="130" pos:column="51">ref<pos:position pos:line="130" pos:column="54"/></name><operator pos:line="130" pos:column="54">-&gt;<pos:position pos:line="130" pos:column="59"/></operator><name pos:line="130" pos:column="56">refname<pos:position pos:line="130" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="130" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="65"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="132" pos:column="9">grab_values<pos:position pos:line="132" pos:column="20"/></name><argument_list pos:line="132" pos:column="20">(<argument><expr><name><name pos:line="132" pos:column="21">ref<pos:position pos:line="132" pos:column="24"/></name><operator pos:line="132" pos:column="24">-&gt;<pos:position pos:line="132" pos:column="29"/></operator><name pos:line="132" pos:column="26">value<pos:position pos:line="132" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="132" pos:column="33">0<pos:position pos:line="132" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="132" pos:column="36">obj<pos:position pos:line="132" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="41">buf<pos:position pos:line="132" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="46">size<pos:position pos:line="132" pos:column="50"/></name></expr></argument>)<pos:position pos:line="132" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="52"/></expr_stmt>
	<if pos:line="133" pos:column="9">if <condition pos:line="133" pos:column="12">(<expr><operator pos:line="133" pos:column="13">!<pos:position pos:line="133" pos:column="14"/></operator><name pos:line="133" pos:column="14">eaten<pos:position pos:line="133" pos:column="19"/></name></expr>)<pos:position pos:line="133" pos:column="20"/></condition><then pos:line="133" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="134" pos:column="17">free<pos:position pos:line="134" pos:column="21"/></name><argument_list pos:line="134" pos:column="21">(<argument><expr><name pos:line="134" pos:column="22">buf<pos:position pos:line="134" pos:column="25"/></name></expr></argument>)<pos:position pos:line="134" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="27"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="136" pos:column="9">/*
	 * If there is no atom that wants to know about tagged
	 * object, we are done.
	 */</comment>
	<if pos:line="140" pos:column="9">if <condition pos:line="140" pos:column="12">(<expr><operator pos:line="140" pos:column="13">!<pos:position pos:line="140" pos:column="14"/></operator><name pos:line="140" pos:column="14">need_tagged<pos:position pos:line="140" pos:column="25"/></name> <operator pos:line="140" pos:column="26">||<pos:position pos:line="140" pos:column="28"/></operator> <operator pos:line="140" pos:column="29">(<pos:position pos:line="140" pos:column="30"/></operator><name><name pos:line="140" pos:column="30">obj<pos:position pos:line="140" pos:column="33"/></name><operator pos:line="140" pos:column="33">-&gt;<pos:position pos:line="140" pos:column="38"/></operator><name pos:line="140" pos:column="35">type<pos:position pos:line="140" pos:column="39"/></name></name> <operator pos:line="140" pos:column="40">!=<pos:position pos:line="140" pos:column="42"/></operator> <name pos:line="140" pos:column="43">OBJ_TAG<pos:position pos:line="140" pos:column="50"/></name><operator pos:line="140" pos:column="50">)<pos:position pos:line="140" pos:column="51"/></operator></expr>)<pos:position pos:line="140" pos:column="52"/></condition><then pos:line="140" pos:column="52">
		<block type="pseudo"><return pos:line="141" pos:column="17">return;<pos:position pos:line="141" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="143" pos:column="9">/*
	 * If it is a tag object, see if we use a value that derefs
	 * the object, and if we do grab the object it refers to.
	 */</comment>
	<expr_stmt><expr><name pos:line="147" pos:column="9">tagged<pos:position pos:line="147" pos:column="15"/></name> <operator pos:line="147" pos:column="16">=<pos:position pos:line="147" pos:column="17"/></operator> <operator pos:line="147" pos:column="18">(<pos:position pos:line="147" pos:column="19"/></operator><operator pos:line="147" pos:column="19">(<pos:position pos:line="147" pos:column="20"/></operator>struct <name pos:line="147" pos:column="27">tag<pos:position pos:line="147" pos:column="30"/></name> <operator pos:line="147" pos:column="31">*<pos:position pos:line="147" pos:column="32"/></operator><operator pos:line="147" pos:column="32">)<pos:position pos:line="147" pos:column="33"/></operator><name pos:line="147" pos:column="33">obj<pos:position pos:line="147" pos:column="36"/></name><operator pos:line="147" pos:column="36">)<pos:position pos:line="147" pos:column="37"/></operator><operator pos:line="147" pos:column="37">-&gt;<pos:position pos:line="147" pos:column="42"/></operator><name><name pos:line="147" pos:column="39">tagged<pos:position pos:line="147" pos:column="45"/></name><operator pos:line="147" pos:column="45">-&gt;<pos:position pos:line="147" pos:column="50"/></operator><name pos:line="147" pos:column="47">oid<pos:position pos:line="147" pos:column="50"/></name><operator pos:line="147" pos:column="50">.<pos:position pos:line="147" pos:column="51"/></operator><name pos:line="147" pos:column="51">hash<pos:position pos:line="147" pos:column="55"/></name></name></expr>;<pos:position pos:line="147" pos:column="56"/></expr_stmt>

	<comment type="block" pos:line="149" pos:column="9">/*
	 * NEEDSWORK: This derefs tag only once, which
	 * is good to deal with chains of trust, but
	 * is not consistent with what deref_tag() does
	 * which peels the onion to the core.
	 */</comment>
	<expr_stmt><expr><name pos:line="155" pos:column="9">buf<pos:position pos:line="155" pos:column="12"/></name> <operator pos:line="155" pos:column="13">=<pos:position pos:line="155" pos:column="14"/></operator> <call><name pos:line="155" pos:column="15">get_obj<pos:position pos:line="155" pos:column="22"/></name><argument_list pos:line="155" pos:column="22">(<argument><expr><name pos:line="155" pos:column="23">tagged<pos:position pos:line="155" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="155" pos:column="31">&amp;<pos:position pos:line="155" pos:column="36"/></operator><name pos:line="155" pos:column="32">obj<pos:position pos:line="155" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="155" pos:column="37">&amp;<pos:position pos:line="155" pos:column="42"/></operator><name pos:line="155" pos:column="38">size<pos:position pos:line="155" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="155" pos:column="44">&amp;<pos:position pos:line="155" pos:column="49"/></operator><name pos:line="155" pos:column="45">eaten<pos:position pos:line="155" pos:column="50"/></name></expr></argument>)<pos:position pos:line="155" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="52"/></expr_stmt>
	<if pos:line="156" pos:column="9">if <condition pos:line="156" pos:column="12">(<expr><operator pos:line="156" pos:column="13">!<pos:position pos:line="156" pos:column="14"/></operator><name pos:line="156" pos:column="14">buf<pos:position pos:line="156" pos:column="17"/></name></expr>)<pos:position pos:line="156" pos:column="18"/></condition><then pos:line="156" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="157" pos:column="17">die<pos:position pos:line="157" pos:column="20"/></name><argument_list pos:line="157" pos:column="20">(<argument><expr><call><name pos:line="157" pos:column="21">_<pos:position pos:line="157" pos:column="22"/></name><argument_list pos:line="157" pos:column="22">(<argument><expr><literal type="string" pos:line="157" pos:column="23">"missing object %s for %s"<pos:position pos:line="157" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="157" pos:column="50"/></argument_list></call></expr></argument>,
		    <argument><expr><call><name pos:line="158" pos:column="21">sha1_to_hex<pos:position pos:line="158" pos:column="32"/></name><argument_list pos:line="158" pos:column="32">(<argument><expr><name pos:line="158" pos:column="33">tagged<pos:position pos:line="158" pos:column="39"/></name></expr></argument>)<pos:position pos:line="158" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="42">ref<pos:position pos:line="158" pos:column="45"/></name><operator pos:line="158" pos:column="45">-&gt;<pos:position pos:line="158" pos:column="50"/></operator><name pos:line="158" pos:column="47">refname<pos:position pos:line="158" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="158" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="56"/></expr_stmt></block></then></if>
	<if pos:line="159" pos:column="9">if <condition pos:line="159" pos:column="12">(<expr><operator pos:line="159" pos:column="13">!<pos:position pos:line="159" pos:column="14"/></operator><name pos:line="159" pos:column="14">obj<pos:position pos:line="159" pos:column="17"/></name></expr>)<pos:position pos:line="159" pos:column="18"/></condition><then pos:line="159" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="160" pos:column="17">die<pos:position pos:line="160" pos:column="20"/></name><argument_list pos:line="160" pos:column="20">(<argument><expr><call><name pos:line="160" pos:column="21">_<pos:position pos:line="160" pos:column="22"/></name><argument_list pos:line="160" pos:column="22">(<argument><expr><literal type="string" pos:line="160" pos:column="23">"parse_object_buffer failed on %s for %s"<pos:position pos:line="160" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="160" pos:column="65"/></argument_list></call></expr></argument>,
		    <argument><expr><call><name pos:line="161" pos:column="21">sha1_to_hex<pos:position pos:line="161" pos:column="32"/></name><argument_list pos:line="161" pos:column="32">(<argument><expr><name pos:line="161" pos:column="33">tagged<pos:position pos:line="161" pos:column="39"/></name></expr></argument>)<pos:position pos:line="161" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="161" pos:column="42">ref<pos:position pos:line="161" pos:column="45"/></name><operator pos:line="161" pos:column="45">-&gt;<pos:position pos:line="161" pos:column="50"/></operator><name pos:line="161" pos:column="47">refname<pos:position pos:line="161" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="161" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="56"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="162" pos:column="9">grab_values<pos:position pos:line="162" pos:column="20"/></name><argument_list pos:line="162" pos:column="20">(<argument><expr><name><name pos:line="162" pos:column="21">ref<pos:position pos:line="162" pos:column="24"/></name><operator pos:line="162" pos:column="24">-&gt;<pos:position pos:line="162" pos:column="29"/></operator><name pos:line="162" pos:column="26">value<pos:position pos:line="162" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="162" pos:column="33">1<pos:position pos:line="162" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="162" pos:column="36">obj<pos:position pos:line="162" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="41">buf<pos:position pos:line="162" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="46">size<pos:position pos:line="162" pos:column="50"/></name></expr></argument>)<pos:position pos:line="162" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="52"/></expr_stmt>
	<if pos:line="163" pos:column="9">if <condition pos:line="163" pos:column="12">(<expr><operator pos:line="163" pos:column="13">!<pos:position pos:line="163" pos:column="14"/></operator><name pos:line="163" pos:column="14">eaten<pos:position pos:line="163" pos:column="19"/></name></expr>)<pos:position pos:line="163" pos:column="20"/></condition><then pos:line="163" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="164" pos:column="17">free<pos:position pos:line="164" pos:column="21"/></name><argument_list pos:line="164" pos:column="21">(<argument><expr><name pos:line="164" pos:column="22">buf<pos:position pos:line="164" pos:column="25"/></name></expr></argument>)<pos:position pos:line="164" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="27"/></expr_stmt></block></then></if>
}<pos:position pos:line="165" pos:column="2"/></block></function></unit>
