<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2230_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">check_sha1_signature<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">unsigned<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">sha1<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">void<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">map<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="2" pos:column="26">unsigned<pos:position pos:line="2" pos:column="34"/></name> <name pos:line="2" pos:column="35">long<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">size<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">type<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">real_sha1<pos:position pos:line="4" pos:column="32"/></name><index pos:line="4" pos:column="32">[<expr><literal type="number" pos:line="4" pos:column="33">20<pos:position pos:line="4" pos:column="35"/></literal></expr>]<pos:position pos:line="4" pos:column="36"/></index></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">enum<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">object_type<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">obj_type<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">git_istream<pos:position pos:line="6" pos:column="27"/></name></name> <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">st<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">git_SHA_CTX<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">c<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name></type> <name><name pos:line="8" pos:column="14">hdr<pos:position pos:line="8" pos:column="17"/></name><index pos:line="8" pos:column="17">[<expr><literal type="number" pos:line="8" pos:column="18">32<pos:position pos:line="8" pos:column="20"/></literal></expr>]<pos:position pos:line="8" pos:column="21"/></index></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">hdrlen<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">map<pos:position pos:line="11" pos:column="16"/></name></expr>)<pos:position pos:line="11" pos:column="17"/></condition><then pos:line="11" pos:column="17"> <block pos:line="11" pos:column="18">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">hash_sha1_file<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">map<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="37">size<pos:position pos:line="12" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="43">type<pos:position pos:line="12" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="49">real_sha1<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="60"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><ternary><condition><expr><call><name pos:line="13" pos:column="24">hashcmp<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">sha1<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="38">real_sha1<pos:position pos:line="13" pos:column="47"/></name></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr> ?<pos:position pos:line="13" pos:column="50"/></condition><then pos:line="13" pos:column="50"> <expr><operator pos:line="13" pos:column="51">-<pos:position pos:line="13" pos:column="52"/></operator><literal type="number" pos:line="13" pos:column="52">1<pos:position pos:line="13" pos:column="53"/></literal></expr> <pos:position pos:line="13" pos:column="54"/></then><else pos:line="13" pos:column="54">: <expr><literal type="number" pos:line="13" pos:column="56">0<pos:position pos:line="13" pos:column="57"/></literal></expr></else></ternary></expr>;<pos:position pos:line="13" pos:column="58"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">st<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">open_istream<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">sha1<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="33">&amp;<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="34">obj_type<pos:position pos:line="16" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="44">&amp;<pos:position pos:line="16" pos:column="49"/></operator><name pos:line="16" pos:column="45">size<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">NULL<pos:position pos:line="16" pos:column="55"/></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">st<pos:position pos:line="17" pos:column="16"/></name></expr>)<pos:position pos:line="17" pos:column="17"/></condition><then pos:line="17" pos:column="17">
		<block type="pseudo"><return pos:line="18" pos:column="17">return <expr><operator pos:line="18" pos:column="24">-<pos:position pos:line="18" pos:column="25"/></operator><literal type="number" pos:line="18" pos:column="25">1<pos:position pos:line="18" pos:column="26"/></literal></expr>;<pos:position pos:line="18" pos:column="27"/></return></block></then></if>

	<comment type="block" pos:line="20" pos:column="9">/* Generate the header */</comment>
	<expr_stmt><expr><name pos:line="21" pos:column="9">hdrlen<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <call><name pos:line="21" pos:column="18">xsnprintf<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">hdr<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="33">sizeof<argument_list pos:line="21" pos:column="39">(<argument><expr><name pos:line="21" pos:column="40">hdr<pos:position pos:line="21" pos:column="43"/></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="46">"%s %lu"<pos:position pos:line="21" pos:column="54"/></literal></expr></argument>, <argument><expr><name><typename pos:line="21" pos:column="56">typename<pos:position pos:line="21" pos:column="64"/></typename></name><operator pos:line="21" pos:column="64">(<pos:position pos:line="21" pos:column="65"/></operator><name pos:line="21" pos:column="65">obj_type<pos:position pos:line="21" pos:column="73"/></name><operator pos:line="21" pos:column="73">)<pos:position pos:line="21" pos:column="74"/></operator></expr></argument>, <argument><expr><name pos:line="21" pos:column="76">size<pos:position pos:line="21" pos:column="80"/></name></expr></argument>)<pos:position pos:line="21" pos:column="81"/></argument_list></call> <operator pos:line="21" pos:column="82">+<pos:position pos:line="21" pos:column="83"/></operator> <literal type="number" pos:line="21" pos:column="84">1<pos:position pos:line="21" pos:column="85"/></literal></expr>;<pos:position pos:line="21" pos:column="86"/></expr_stmt>

	<comment type="block" pos:line="23" pos:column="9">/* Sha1.. */</comment>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">git_SHA1_Init<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><operator pos:line="24" pos:column="23">&amp;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="24">c<pos:position pos:line="24" pos:column="25"/></name></expr></argument>)<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">git_SHA1_Update<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><operator pos:line="25" pos:column="25">&amp;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="26">c<pos:position pos:line="25" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="29">hdr<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">hdrlen<pos:position pos:line="25" pos:column="40"/></name></expr></argument>)<pos:position pos:line="25" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="42"/></expr_stmt>
	<for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">(<init pos:line="26" pos:column="14">;<pos:position pos:line="26" pos:column="15"/></init><condition pos:line="26" pos:column="15">;<pos:position pos:line="26" pos:column="16"/></condition><incr/>)<pos:position pos:line="26" pos:column="17"/></control> <block pos:line="26" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">char<pos:position pos:line="27" pos:column="21"/></name></type> <name><name pos:line="27" pos:column="22">buf<pos:position pos:line="27" pos:column="25"/></name><index pos:line="27" pos:column="25">[<expr><literal type="number" pos:line="27" pos:column="26">1024<pos:position pos:line="27" pos:column="30"/></literal> <operator pos:line="27" pos:column="31">*<pos:position pos:line="27" pos:column="32"/></operator> <literal type="number" pos:line="27" pos:column="33">16<pos:position pos:line="27" pos:column="35"/></literal></expr>]<pos:position pos:line="27" pos:column="36"/></index></name></decl>;<pos:position pos:line="27" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">ssize_t<pos:position pos:line="28" pos:column="24"/></name></type> <name pos:line="28" pos:column="25">readlen<pos:position pos:line="28" pos:column="32"/></name> <init pos:line="28" pos:column="33">= <expr><call><name pos:line="28" pos:column="35">read_istream<pos:position pos:line="28" pos:column="47"/></name><argument_list pos:line="28" pos:column="47">(<argument><expr><name pos:line="28" pos:column="48">st<pos:position pos:line="28" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="52">buf<pos:position pos:line="28" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="57">sizeof<argument_list pos:line="28" pos:column="63">(<argument><expr><name pos:line="28" pos:column="64">buf<pos:position pos:line="28" pos:column="67"/></name></expr></argument>)<pos:position pos:line="28" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="70"/></decl_stmt>

		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">readlen<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">&lt;<pos:position pos:line="30" pos:column="33"/></operator> <literal type="number" pos:line="30" pos:column="31">0<pos:position pos:line="30" pos:column="32"/></literal></expr>)<pos:position pos:line="30" pos:column="33"/></condition><then pos:line="30" pos:column="33"> <block pos:line="30" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">close_istream<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><name pos:line="31" pos:column="39">st<pos:position pos:line="31" pos:column="41"/></name></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
			<return pos:line="32" pos:column="25">return <expr><operator pos:line="32" pos:column="32">-<pos:position pos:line="32" pos:column="33"/></operator><literal type="number" pos:line="32" pos:column="33">1<pos:position pos:line="32" pos:column="34"/></literal></expr>;<pos:position pos:line="32" pos:column="35"/></return>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><operator pos:line="34" pos:column="21">!<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">readlen<pos:position pos:line="34" pos:column="29"/></name></expr>)<pos:position pos:line="34" pos:column="30"/></condition><then pos:line="34" pos:column="30">
			<block type="pseudo"><break pos:line="35" pos:column="25">break;<pos:position pos:line="35" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">git_SHA1_Update<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><operator pos:line="36" pos:column="33">&amp;<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="34">c<pos:position pos:line="36" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="37">buf<pos:position pos:line="36" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="42">readlen<pos:position pos:line="36" pos:column="49"/></name></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">git_SHA1_Final<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><name pos:line="38" pos:column="24">real_sha1<pos:position pos:line="38" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="35">&amp;<pos:position pos:line="38" pos:column="40"/></operator><name pos:line="38" pos:column="36">c<pos:position pos:line="38" pos:column="37"/></name></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">close_istream<pos:position pos:line="39" pos:column="22"/></name><argument_list pos:line="39" pos:column="22">(<argument><expr><name pos:line="39" pos:column="23">st<pos:position pos:line="39" pos:column="25"/></name></expr></argument>)<pos:position pos:line="39" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
	<return pos:line="40" pos:column="9">return <expr><ternary><condition><expr><call><name pos:line="40" pos:column="16">hashcmp<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name pos:line="40" pos:column="24">sha1<pos:position pos:line="40" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="30">real_sha1<pos:position pos:line="40" pos:column="39"/></name></expr></argument>)<pos:position pos:line="40" pos:column="40"/></argument_list></call></expr> ?<pos:position pos:line="40" pos:column="42"/></condition><then pos:line="40" pos:column="42"> <expr><operator pos:line="40" pos:column="43">-<pos:position pos:line="40" pos:column="44"/></operator><literal type="number" pos:line="40" pos:column="44">1<pos:position pos:line="40" pos:column="45"/></literal></expr> <pos:position pos:line="40" pos:column="46"/></then><else pos:line="40" pos:column="46">: <expr><literal type="number" pos:line="40" pos:column="48">0<pos:position pos:line="40" pos:column="49"/></literal></expr></else></ternary></expr>;<pos:position pos:line="40" pos:column="50"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
