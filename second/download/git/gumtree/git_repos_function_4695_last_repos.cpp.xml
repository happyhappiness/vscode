<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4695_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">prepare_trace_line<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">file<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">int<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">line<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">trace_key<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">key<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="54">struct<pos:position pos:line="2" pos:column="60"/></name> <name pos:line="2" pos:column="61">strbuf<pos:position pos:line="2" pos:column="67"/></name></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">buf<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name><name pos:line="4" pos:column="16">struct<pos:position pos:line="4" pos:column="22"/></name> <name pos:line="4" pos:column="23">trace_key<pos:position pos:line="4" pos:column="32"/></name></name></type> <name pos:line="4" pos:column="33">trace_bare<pos:position pos:line="4" pos:column="43"/></name> <init pos:line="4" pos:column="44">= <expr><call><name pos:line="4" pos:column="46">TRACE_KEY_INIT<pos:position pos:line="4" pos:column="60"/></name><argument_list pos:line="4" pos:column="60">(<argument><expr><name pos:line="4" pos:column="61">BARE<pos:position pos:line="4" pos:column="65"/></name></expr></argument>)<pos:position pos:line="4" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="67"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">timeval<pos:position pos:line="5" pos:column="23"/></name></name></type> <name pos:line="5" pos:column="24">tv<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">tm<pos:position pos:line="6" pos:column="18"/></name></name></type> <name pos:line="6" pos:column="19">tm<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">time_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">secs<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">trace_want<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">key<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="30"/></condition><then pos:line="9" pos:column="30">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">set_try_to_free_routine<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">NULL<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>	<comment type="block" pos:line="12" pos:column="41">/* is never reset */</comment>

	<comment type="block" pos:line="14" pos:column="9">/* unit tests may want to disable additional trace output */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">trace_want<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><operator pos:line="15" pos:column="24">&amp;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="25">trace_bare<pos:position pos:line="15" pos:column="35"/></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="37"/></condition><then pos:line="15" pos:column="37">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><literal type="number" pos:line="16" pos:column="24">1<pos:position pos:line="16" pos:column="25"/></literal></expr>;<pos:position pos:line="16" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="18" pos:column="9">/* print current timestamp */</comment>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">gettimeofday<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><operator pos:line="19" pos:column="22">&amp;<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="23">tv<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="27">NULL<pos:position pos:line="19" pos:column="31"/></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">secs<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <name><name pos:line="20" pos:column="16">tv<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">.<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">tv_sec<pos:position pos:line="20" pos:column="25"/></name></name></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">localtime_r<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><operator pos:line="21" pos:column="21">&amp;<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="22">secs<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="28">&amp;<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="29">tm<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">strbuf_addf<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">buf<pos:position pos:line="22" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="26">"%02d:%02d:%02d.%06ld "<pos:position pos:line="22" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="51">tm<pos:position pos:line="22" pos:column="53"/></name><operator pos:line="22" pos:column="53">.<pos:position pos:line="22" pos:column="54"/></operator><name pos:line="22" pos:column="54">tm_hour<pos:position pos:line="22" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="63">tm<pos:position pos:line="22" pos:column="65"/></name><operator pos:line="22" pos:column="65">.<pos:position pos:line="22" pos:column="66"/></operator><name pos:line="22" pos:column="66">tm_min<pos:position pos:line="22" pos:column="72"/></name></name></expr></argument>,
		    <argument><expr><name><name pos:line="23" pos:column="21">tm<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">.<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="24">tm_sec<pos:position pos:line="23" pos:column="30"/></name></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="32">(<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="33">long<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">)<pos:position pos:line="23" pos:column="38"/></operator> <name><name pos:line="23" pos:column="39">tv<pos:position pos:line="23" pos:column="41"/></name><operator pos:line="23" pos:column="41">.<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="42">tv_usec<pos:position pos:line="23" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt>

<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">HAVE_VARIADIC_MACROS<pos:position pos:line="25" pos:column="28"/></name></cpp:ifdef>
	<comment type="block" pos:line="26" pos:column="9">/* print file:line */</comment>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">strbuf_addf<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">buf<pos:position pos:line="27" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="26">"%s:%d "<pos:position pos:line="27" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="36">file<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="42">line<pos:position pos:line="27" pos:column="46"/></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt>
	<comment type="block" pos:line="28" pos:column="9">/* align trace output (column 40 catches most files names in git) */</comment>
	<while pos:line="29" pos:column="9">while <condition pos:line="29" pos:column="15">(<expr><name><name pos:line="29" pos:column="16">buf<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">-&gt;<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="21">len<pos:position pos:line="29" pos:column="24"/></name></name> <operator pos:line="29" pos:column="25">&lt;<pos:position pos:line="29" pos:column="29"/></operator> <literal type="number" pos:line="29" pos:column="27">40<pos:position pos:line="29" pos:column="29"/></literal></expr>)<pos:position pos:line="29" pos:column="30"/></condition>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="17">strbuf_addch<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">buf<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="35">' '<pos:position pos:line="30" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt></block></while>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>

	<return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">1<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
