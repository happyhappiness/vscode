<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6869_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_check_smallbin<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">mstate<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">m<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">bindex_t<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">i<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list> <block pos:line="1" pos:column="53">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">sbinptr<pos:position pos:line="2" pos:column="10"/></name></type> <name pos:line="2" pos:column="11">b<pos:position pos:line="2" pos:column="12"/></name> <init pos:line="2" pos:column="13">= <expr><call><name pos:line="2" pos:column="15">smallbin_at<pos:position pos:line="2" pos:column="26"/></name><argument_list pos:line="2" pos:column="26">(<argument><expr><name pos:line="2" pos:column="27">m<pos:position pos:line="2" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="30">i<pos:position pos:line="2" pos:column="31"/></name></expr></argument>)<pos:position pos:line="2" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="2" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">mchunkptr<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">p<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><name><name pos:line="3" pos:column="17">b<pos:position pos:line="3" pos:column="18"/></name><operator pos:line="3" pos:column="18">-&gt;<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="20">bk<pos:position pos:line="3" pos:column="22"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">empty<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><operator pos:line="4" pos:column="24">(<pos:position pos:line="4" pos:column="25"/></operator><name><name pos:line="4" pos:column="25">m<pos:position pos:line="4" pos:column="26"/></name><operator pos:line="4" pos:column="26">-&gt;<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="28">smallmap<pos:position pos:line="4" pos:column="36"/></name></name> <operator pos:line="4" pos:column="37">&amp;<pos:position pos:line="4" pos:column="42"/></operator> <operator pos:line="4" pos:column="39">(<pos:position pos:line="4" pos:column="40"/></operator><literal type="number" pos:line="4" pos:column="40">1U<pos:position pos:line="4" pos:column="42"/></literal> <operator pos:line="4" pos:column="43">&lt;&lt;<pos:position pos:line="4" pos:column="51"/></operator> <name pos:line="4" pos:column="46">i<pos:position pos:line="4" pos:column="47"/></name><operator pos:line="4" pos:column="47">)<pos:position pos:line="4" pos:column="48"/></operator><operator pos:line="4" pos:column="48">)<pos:position pos:line="4" pos:column="49"/></operator> <operator pos:line="4" pos:column="50">==<pos:position pos:line="4" pos:column="52"/></operator> <literal type="number" pos:line="4" pos:column="53">0<pos:position pos:line="4" pos:column="54"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="55"/></decl_stmt>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">p<pos:position pos:line="5" pos:column="8"/></name> <operator pos:line="5" pos:column="9">==<pos:position pos:line="5" pos:column="11"/></operator> <name pos:line="5" pos:column="12">b<pos:position pos:line="5" pos:column="13"/></name></expr>)<pos:position pos:line="5" pos:column="14"/></condition><then pos:line="5" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">empty<pos:position pos:line="6" pos:column="17"/></name></expr></argument>)<pos:position pos:line="6" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="19"/></expr_stmt></block></then></if>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">!<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">empty<pos:position pos:line="7" pos:column="13"/></name></expr>)<pos:position pos:line="7" pos:column="14"/></condition><then pos:line="7" pos:column="14"> <block pos:line="7" pos:column="15">{
    <for pos:line="8" pos:column="5">for <control pos:line="8" pos:column="9">(<init pos:line="8" pos:column="10">;<pos:position pos:line="8" pos:column="11"/></init> <condition><expr><name pos:line="8" pos:column="12">p<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">!=<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">b<pos:position pos:line="8" pos:column="18"/></name></expr>;<pos:position pos:line="8" pos:column="19"/></condition> <incr><expr><name pos:line="8" pos:column="20">p<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">=<pos:position pos:line="8" pos:column="23"/></operator> <name><name pos:line="8" pos:column="24">p<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">-&gt;<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="27">bk<pos:position pos:line="8" pos:column="29"/></name></name></expr></incr>)<pos:position pos:line="8" pos:column="30"/></control> <block pos:line="8" pos:column="31">{
      <decl_stmt><decl><type><name pos:line="9" pos:column="7">size_t<pos:position pos:line="9" pos:column="13"/></name></type> <name pos:line="9" pos:column="14">size<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><call><name pos:line="9" pos:column="21">chunksize<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">(<argument><expr><name pos:line="9" pos:column="31">p<pos:position pos:line="9" pos:column="32"/></name></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="10" pos:column="7">mchunkptr<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">q<pos:position pos:line="10" pos:column="18"/></name></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
      <comment type="block" pos:line="11" pos:column="7">/* each chunk claims to be free */</comment>
      <expr_stmt><expr><call><name pos:line="12" pos:column="7">do_check_free_chunk<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><name pos:line="12" pos:column="27">m<pos:position pos:line="12" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="30">p<pos:position pos:line="12" pos:column="31"/></name></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
      <comment type="block" pos:line="13" pos:column="7">/* chunk belongs in bin */</comment>
      <expr_stmt><expr><call><name pos:line="14" pos:column="7">assert<pos:position pos:line="14" pos:column="13"/></name><argument_list pos:line="14" pos:column="13">(<argument><expr><call><name pos:line="14" pos:column="14">small_index<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">size<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call> <operator pos:line="14" pos:column="32">==<pos:position pos:line="14" pos:column="34"/></operator> <name pos:line="14" pos:column="35">i<pos:position pos:line="14" pos:column="36"/></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">assert<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><name><name pos:line="15" pos:column="14">p<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">-&gt;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="17">bk<pos:position pos:line="15" pos:column="19"/></name></name> <operator pos:line="15" pos:column="20">==<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">b<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">||<pos:position pos:line="15" pos:column="27"/></operator> <call><name pos:line="15" pos:column="28">chunksize<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name><name pos:line="15" pos:column="38">p<pos:position pos:line="15" pos:column="39"/></name><operator pos:line="15" pos:column="39">-&gt;<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="41">bk<pos:position pos:line="15" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call> <operator pos:line="15" pos:column="45">==<pos:position pos:line="15" pos:column="47"/></operator> <call><name pos:line="15" pos:column="48">chunksize<pos:position pos:line="15" pos:column="57"/></name><argument_list pos:line="15" pos:column="57">(<argument><expr><name pos:line="15" pos:column="58">p<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
      <comment type="block" pos:line="16" pos:column="7">/* chunk is followed by an inuse chunk */</comment>
      <expr_stmt><expr><name pos:line="17" pos:column="7">q<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <call><name pos:line="17" pos:column="11">next_chunk<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">p<pos:position pos:line="17" pos:column="23"/></name></expr></argument>)<pos:position pos:line="17" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
      <if pos:line="18" pos:column="7">if <condition pos:line="18" pos:column="10">(<expr><name><name pos:line="18" pos:column="11">q<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">head<pos:position pos:line="18" pos:column="18"/></name></name> <operator pos:line="18" pos:column="19">!=<pos:position pos:line="18" pos:column="21"/></operator> <name pos:line="18" pos:column="22">FENCEPOST_HEAD<pos:position pos:line="18" pos:column="36"/></name></expr>)<pos:position pos:line="18" pos:column="37"/></condition><then pos:line="18" pos:column="37">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="9">do_check_inuse_chunk<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">m<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="33">q<pos:position pos:line="19" pos:column="34"/></name></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt></block></then></if>
    }<pos:position pos:line="20" pos:column="6"/></block></for>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
