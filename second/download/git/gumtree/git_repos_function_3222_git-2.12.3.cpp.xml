<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3222_git-2.12.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">resolve_ref_recursively<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name><name pos:line="1" pos:column="44">struct<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">ref_store<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">refs<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
					   <parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name pos:line="2" pos:column="50">char<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">refname<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>,
					   <parameter><decl><type><name pos:line="3" pos:column="44">int<pos:position pos:line="3" pos:column="47"/></name></type> <name pos:line="3" pos:column="48">resolve_flags<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>,
					   <parameter><decl><type><name pos:line="4" pos:column="44">unsigned<pos:position pos:line="4" pos:column="52"/></name> <name pos:line="4" pos:column="53">char<pos:position pos:line="4" pos:column="57"/></name> <modifier pos:line="4" pos:column="58">*<pos:position pos:line="4" pos:column="59"/></modifier></type><name pos:line="4" pos:column="59">sha1<pos:position pos:line="4" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="65">int<pos:position pos:line="4" pos:column="68"/></name> <modifier pos:line="4" pos:column="69">*<pos:position pos:line="4" pos:column="70"/></modifier></type><name pos:line="4" pos:column="70">flags<pos:position pos:line="4" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="76"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">static<pos:position pos:line="6" pos:column="15"/></specifier> <type><name><name pos:line="6" pos:column="16">struct<pos:position pos:line="6" pos:column="22"/></name> <name pos:line="6" pos:column="23">strbuf<pos:position pos:line="6" pos:column="29"/></name></name></type> <name pos:line="6" pos:column="30">sb_refname<pos:position pos:line="6" pos:column="40"/></name> <init pos:line="6" pos:column="41">= <expr><name pos:line="6" pos:column="43">STRBUF_INIT<pos:position pos:line="6" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="55"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">unused_flags<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">symref_count<pos:position pos:line="8" pos:column="25"/></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">flags<pos:position pos:line="10" pos:column="19"/></name></expr>)<pos:position pos:line="10" pos:column="20"/></condition><then pos:line="10" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">flags<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">=<pos:position pos:line="11" pos:column="24"/></operator> <operator pos:line="11" pos:column="25">&amp;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="26">unused_flags<pos:position pos:line="11" pos:column="38"/></name></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt></block></then></if>

	<expr_stmt><expr><operator pos:line="13" pos:column="9">*<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">flags<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">check_refname_format<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">(<argument><expr><name pos:line="15" pos:column="34">refname<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="43">REFNAME_ALLOW_ONELEVEL<pos:position pos:line="15" pos:column="65"/></name></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="67"/></condition><then pos:line="15" pos:column="67"> <block pos:line="15" pos:column="68">{
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><operator pos:line="16" pos:column="22">(<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">resolve_flags<pos:position pos:line="16" pos:column="36"/></name> <operator pos:line="16" pos:column="37">&amp;<pos:position pos:line="16" pos:column="42"/></operator> <name pos:line="16" pos:column="39">RESOLVE_REF_ALLOW_BAD_NAME<pos:position pos:line="16" pos:column="65"/></name><operator pos:line="16" pos:column="65">)<pos:position pos:line="16" pos:column="66"/></operator> <operator pos:line="16" pos:column="67">||<pos:position pos:line="16" pos:column="69"/></operator>
		    <operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><call><name pos:line="17" pos:column="22">refname_is_safe<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><name pos:line="17" pos:column="38">refname<pos:position pos:line="17" pos:column="45"/></name></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="47"/></condition><then pos:line="17" pos:column="47"> <block pos:line="17" pos:column="48">{
			<expr_stmt><expr><name pos:line="18" pos:column="25">errno<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">=<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="33">EINVAL<pos:position pos:line="18" pos:column="39"/></name></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
			<return pos:line="19" pos:column="25">return <expr><name pos:line="19" pos:column="32">NULL<pos:position pos:line="19" pos:column="36"/></name></expr>;<pos:position pos:line="19" pos:column="37"/></return>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="22" pos:column="17">/*
		 * dwim_ref() uses REF_ISBROKEN to distinguish between
		 * missing refs and refs that were present but invalid,
		 * to complain about the latter to stderr.
		 *
		 * We don't know whether the ref exists, so don't set
		 * REF_ISBROKEN yet.
		 */</comment>
		<expr_stmt><expr><operator pos:line="30" pos:column="17">*<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">flags<pos:position pos:line="30" pos:column="23"/></name> <operator pos:line="30" pos:column="24">|=<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="27">REF_BAD_NAME<pos:position pos:line="30" pos:column="39"/></name></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>

	<for pos:line="33" pos:column="9">for <control pos:line="33" pos:column="13">(<init><expr><name pos:line="33" pos:column="14">symref_count<pos:position pos:line="33" pos:column="26"/></name> <operator pos:line="33" pos:column="27">=<pos:position pos:line="33" pos:column="28"/></operator> <literal type="number" pos:line="33" pos:column="29">0<pos:position pos:line="33" pos:column="30"/></literal></expr>;<pos:position pos:line="33" pos:column="31"/></init> <condition><expr><name pos:line="33" pos:column="32">symref_count<pos:position pos:line="33" pos:column="44"/></name> <operator pos:line="33" pos:column="45">&lt;<pos:position pos:line="33" pos:column="49"/></operator> <name pos:line="33" pos:column="47">SYMREF_MAXDEPTH<pos:position pos:line="33" pos:column="62"/></name></expr>;<pos:position pos:line="33" pos:column="63"/></condition> <incr><expr><name pos:line="33" pos:column="64">symref_count<pos:position pos:line="33" pos:column="76"/></name><operator pos:line="33" pos:column="76">++<pos:position pos:line="33" pos:column="78"/></operator></expr></incr>)<pos:position pos:line="33" pos:column="79"/></control> <block pos:line="33" pos:column="80">{
		<decl_stmt><decl><type><name pos:line="34" pos:column="17">unsigned<pos:position pos:line="34" pos:column="25"/></name> <name pos:line="34" pos:column="26">int<pos:position pos:line="34" pos:column="29"/></name></type> <name pos:line="34" pos:column="30">read_flags<pos:position pos:line="34" pos:column="40"/></name> <init pos:line="34" pos:column="41">= <expr><literal type="number" pos:line="34" pos:column="43">0<pos:position pos:line="34" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="34" pos:column="45"/></decl_stmt>

		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><call><name><name pos:line="36" pos:column="21">refs<pos:position pos:line="36" pos:column="25"/></name><operator pos:line="36" pos:column="25">-&gt;<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="27">be<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">-&gt;<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="31">read_raw_ref<pos:position pos:line="36" pos:column="43"/></name></name><argument_list pos:line="36" pos:column="43">(<argument><expr><name pos:line="36" pos:column="44">refs<pos:position pos:line="36" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="50">refname<pos:position pos:line="36" pos:column="57"/></name></expr></argument>,
					   <argument><expr><name pos:line="37" pos:column="44">sha1<pos:position pos:line="37" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="50">&amp;<pos:position pos:line="37" pos:column="55"/></operator><name pos:line="37" pos:column="51">sb_refname<pos:position pos:line="37" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="63">&amp;<pos:position pos:line="37" pos:column="68"/></operator><name pos:line="37" pos:column="64">read_flags<pos:position pos:line="37" pos:column="74"/></name></expr></argument>)<pos:position pos:line="37" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="76"/></condition><then pos:line="37" pos:column="76"> <block pos:line="37" pos:column="77">{
			<expr_stmt><expr><operator pos:line="38" pos:column="25">*<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="26">flags<pos:position pos:line="38" pos:column="31"/></name> <operator pos:line="38" pos:column="32">|=<pos:position pos:line="38" pos:column="34"/></operator> <name pos:line="38" pos:column="35">read_flags<pos:position pos:line="38" pos:column="45"/></name></expr>;<pos:position pos:line="38" pos:column="46"/></expr_stmt>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><name pos:line="39" pos:column="29">errno<pos:position pos:line="39" pos:column="34"/></name> <operator pos:line="39" pos:column="35">!=<pos:position pos:line="39" pos:column="37"/></operator> <name pos:line="39" pos:column="38">ENOENT<pos:position pos:line="39" pos:column="44"/></name> <operator pos:line="39" pos:column="45">||<pos:position pos:line="39" pos:column="47"/></operator> <operator pos:line="39" pos:column="48">(<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="49">resolve_flags<pos:position pos:line="39" pos:column="62"/></name> <operator pos:line="39" pos:column="63">&amp;<pos:position pos:line="39" pos:column="68"/></operator> <name pos:line="39" pos:column="65">RESOLVE_REF_READING<pos:position pos:line="39" pos:column="84"/></name><operator pos:line="39" pos:column="84">)<pos:position pos:line="39" pos:column="85"/></operator></expr>)<pos:position pos:line="39" pos:column="86"/></condition><then pos:line="39" pos:column="86">
				<block type="pseudo"><return pos:line="40" pos:column="33">return <expr><name pos:line="40" pos:column="40">NULL<pos:position pos:line="40" pos:column="44"/></name></expr>;<pos:position pos:line="40" pos:column="45"/></return></block></then></if>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">hashclr<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">(<argument><expr><name pos:line="41" pos:column="33">sha1<pos:position pos:line="41" pos:column="37"/></name></expr></argument>)<pos:position pos:line="41" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="39"/></expr_stmt>
			<if pos:line="42" pos:column="25">if <condition pos:line="42" pos:column="28">(<expr><operator pos:line="42" pos:column="29">*<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="30">flags<pos:position pos:line="42" pos:column="35"/></name> <operator pos:line="42" pos:column="36">&amp;<pos:position pos:line="42" pos:column="41"/></operator> <name pos:line="42" pos:column="38">REF_BAD_NAME<pos:position pos:line="42" pos:column="50"/></name></expr>)<pos:position pos:line="42" pos:column="51"/></condition><then pos:line="42" pos:column="51">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="43" pos:column="33">*<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="34">flags<pos:position pos:line="43" pos:column="39"/></name> <operator pos:line="43" pos:column="40">|=<pos:position pos:line="43" pos:column="42"/></operator> <name pos:line="43" pos:column="43">REF_ISBROKEN<pos:position pos:line="43" pos:column="55"/></name></expr>;<pos:position pos:line="43" pos:column="56"/></expr_stmt></block></then></if>
			<return pos:line="44" pos:column="25">return <expr><name pos:line="44" pos:column="32">refname<pos:position pos:line="44" pos:column="39"/></name></expr>;<pos:position pos:line="44" pos:column="40"/></return>
		}<pos:position pos:line="45" pos:column="18"/></block></then></if>

		<expr_stmt><expr><operator pos:line="47" pos:column="17">*<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">flags<pos:position pos:line="47" pos:column="23"/></name> <operator pos:line="47" pos:column="24">|=<pos:position pos:line="47" pos:column="26"/></operator> <name pos:line="47" pos:column="27">read_flags<pos:position pos:line="47" pos:column="37"/></name></expr>;<pos:position pos:line="47" pos:column="38"/></expr_stmt>

		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><operator pos:line="49" pos:column="21">!<pos:position pos:line="49" pos:column="22"/></operator><operator pos:line="49" pos:column="22">(<pos:position pos:line="49" pos:column="23"/></operator><name pos:line="49" pos:column="23">read_flags<pos:position pos:line="49" pos:column="33"/></name> <operator pos:line="49" pos:column="34">&amp;<pos:position pos:line="49" pos:column="39"/></operator> <name pos:line="49" pos:column="36">REF_ISSYMREF<pos:position pos:line="49" pos:column="48"/></name><operator pos:line="49" pos:column="48">)<pos:position pos:line="49" pos:column="49"/></operator></expr>)<pos:position pos:line="49" pos:column="50"/></condition><then pos:line="49" pos:column="50"> <block pos:line="49" pos:column="51">{
			<if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<expr><operator pos:line="50" pos:column="29">*<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="30">flags<pos:position pos:line="50" pos:column="35"/></name> <operator pos:line="50" pos:column="36">&amp;<pos:position pos:line="50" pos:column="41"/></operator> <name pos:line="50" pos:column="38">REF_BAD_NAME<pos:position pos:line="50" pos:column="50"/></name></expr>)<pos:position pos:line="50" pos:column="51"/></condition><then pos:line="50" pos:column="51"> <block pos:line="50" pos:column="52">{
				<expr_stmt><expr><call><name pos:line="51" pos:column="33">hashclr<pos:position pos:line="51" pos:column="40"/></name><argument_list pos:line="51" pos:column="40">(<argument><expr><name pos:line="51" pos:column="41">sha1<pos:position pos:line="51" pos:column="45"/></name></expr></argument>)<pos:position pos:line="51" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><operator pos:line="52" pos:column="33">*<pos:position pos:line="52" pos:column="34"/></operator><name pos:line="52" pos:column="34">flags<pos:position pos:line="52" pos:column="39"/></name> <operator pos:line="52" pos:column="40">|=<pos:position pos:line="52" pos:column="42"/></operator> <name pos:line="52" pos:column="43">REF_ISBROKEN<pos:position pos:line="52" pos:column="55"/></name></expr>;<pos:position pos:line="52" pos:column="56"/></expr_stmt>
			}<pos:position pos:line="53" pos:column="26"/></block></then></if>
			<return pos:line="54" pos:column="25">return <expr><name pos:line="54" pos:column="32">refname<pos:position pos:line="54" pos:column="39"/></name></expr>;<pos:position pos:line="54" pos:column="40"/></return>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="57" pos:column="17">refname<pos:position pos:line="57" pos:column="24"/></name> <operator pos:line="57" pos:column="25">=<pos:position pos:line="57" pos:column="26"/></operator> <name><name pos:line="57" pos:column="27">sb_refname<pos:position pos:line="57" pos:column="37"/></name><operator pos:line="57" pos:column="37">.<pos:position pos:line="57" pos:column="38"/></operator><name pos:line="57" pos:column="38">buf<pos:position pos:line="57" pos:column="41"/></name></name></expr>;<pos:position pos:line="57" pos:column="42"/></expr_stmt>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name pos:line="58" pos:column="21">resolve_flags<pos:position pos:line="58" pos:column="34"/></name> <operator pos:line="58" pos:column="35">&amp;<pos:position pos:line="58" pos:column="40"/></operator> <name pos:line="58" pos:column="37">RESOLVE_REF_NO_RECURSE<pos:position pos:line="58" pos:column="59"/></name></expr>)<pos:position pos:line="58" pos:column="60"/></condition><then pos:line="58" pos:column="60"> <block pos:line="58" pos:column="61">{
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">hashclr<pos:position pos:line="59" pos:column="32"/></name><argument_list pos:line="59" pos:column="32">(<argument><expr><name pos:line="59" pos:column="33">sha1<pos:position pos:line="59" pos:column="37"/></name></expr></argument>)<pos:position pos:line="59" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="39"/></expr_stmt>
			<return pos:line="60" pos:column="25">return <expr><name pos:line="60" pos:column="32">refname<pos:position pos:line="60" pos:column="39"/></name></expr>;<pos:position pos:line="60" pos:column="40"/></return>
		}<pos:position pos:line="61" pos:column="18"/></block></then></if>
		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><call><name pos:line="62" pos:column="21">check_refname_format<pos:position pos:line="62" pos:column="41"/></name><argument_list pos:line="62" pos:column="41">(<argument><expr><name pos:line="62" pos:column="42">refname<pos:position pos:line="62" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="51">REFNAME_ALLOW_ONELEVEL<pos:position pos:line="62" pos:column="73"/></name></expr></argument>)<pos:position pos:line="62" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="75"/></condition><then pos:line="62" pos:column="75"> <block pos:line="62" pos:column="76">{
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><operator pos:line="63" pos:column="29">!<pos:position pos:line="63" pos:column="30"/></operator><operator pos:line="63" pos:column="30">(<pos:position pos:line="63" pos:column="31"/></operator><name pos:line="63" pos:column="31">resolve_flags<pos:position pos:line="63" pos:column="44"/></name> <operator pos:line="63" pos:column="45">&amp;<pos:position pos:line="63" pos:column="50"/></operator> <name pos:line="63" pos:column="47">RESOLVE_REF_ALLOW_BAD_NAME<pos:position pos:line="63" pos:column="73"/></name><operator pos:line="63" pos:column="73">)<pos:position pos:line="63" pos:column="74"/></operator> <operator pos:line="63" pos:column="75">||<pos:position pos:line="63" pos:column="77"/></operator>
			    <operator pos:line="64" pos:column="29">!<pos:position pos:line="64" pos:column="30"/></operator><call><name pos:line="64" pos:column="30">refname_is_safe<pos:position pos:line="64" pos:column="45"/></name><argument_list pos:line="64" pos:column="45">(<argument><expr><name pos:line="64" pos:column="46">refname<pos:position pos:line="64" pos:column="53"/></name></expr></argument>)<pos:position pos:line="64" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="55"/></condition><then pos:line="64" pos:column="55"> <block pos:line="64" pos:column="56">{
				<expr_stmt><expr><name pos:line="65" pos:column="33">errno<pos:position pos:line="65" pos:column="38"/></name> <operator pos:line="65" pos:column="39">=<pos:position pos:line="65" pos:column="40"/></operator> <name pos:line="65" pos:column="41">EINVAL<pos:position pos:line="65" pos:column="47"/></name></expr>;<pos:position pos:line="65" pos:column="48"/></expr_stmt>
				<return pos:line="66" pos:column="33">return <expr><name pos:line="66" pos:column="40">NULL<pos:position pos:line="66" pos:column="44"/></name></expr>;<pos:position pos:line="66" pos:column="45"/></return>
			}<pos:position pos:line="67" pos:column="26"/></block></then></if>

			<expr_stmt><expr><operator pos:line="69" pos:column="25">*<pos:position pos:line="69" pos:column="26"/></operator><name pos:line="69" pos:column="26">flags<pos:position pos:line="69" pos:column="31"/></name> <operator pos:line="69" pos:column="32">|=<pos:position pos:line="69" pos:column="34"/></operator> <name pos:line="69" pos:column="35">REF_ISBROKEN<pos:position pos:line="69" pos:column="47"/></name> <operator pos:line="69" pos:column="48">|<pos:position pos:line="69" pos:column="49"/></operator> <name pos:line="69" pos:column="50">REF_BAD_NAME<pos:position pos:line="69" pos:column="62"/></name></expr>;<pos:position pos:line="69" pos:column="63"/></expr_stmt>
		}<pos:position pos:line="70" pos:column="18"/></block></then></if>
	}<pos:position pos:line="71" pos:column="10"/></block></for>

	<expr_stmt><expr><name pos:line="73" pos:column="9">errno<pos:position pos:line="73" pos:column="14"/></name> <operator pos:line="73" pos:column="15">=<pos:position pos:line="73" pos:column="16"/></operator> <name pos:line="73" pos:column="17">ELOOP<pos:position pos:line="73" pos:column="22"/></name></expr>;<pos:position pos:line="73" pos:column="23"/></expr_stmt>
	<return pos:line="74" pos:column="9">return <expr><name pos:line="74" pos:column="16">NULL<pos:position pos:line="74" pos:column="20"/></name></expr>;<pos:position pos:line="74" pos:column="21"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
