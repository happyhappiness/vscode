<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_123_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">sort_revindex<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">revindex_entry<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">entries<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">unsigned<pos:position pos:line="1" pos:column="67"/></name></type> <name pos:line="1" pos:column="68">n<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">off_t<pos:position pos:line="1" pos:column="76"/></name></type> <name pos:line="1" pos:column="77">max<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * We use a "digit" size of 16 bits. That keeps our memory
	 * usage reasonable, and we can generally (for a 4G or smaller
	 * packfile) quit after two rounds of radix-sorting.
	 */</comment>
<cpp:define pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">define<pos:position pos:line="8" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="8" pos:column="9">DIGIT_SIZE<pos:position pos:line="8" pos:column="19"/></name></cpp:macro> <cpp:value pos:line="8" pos:column="20">(16)<pos:position pos:line="8" pos:column="24"/></cpp:value></cpp:define>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define<pos:position pos:line="9" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">BUCKETS<pos:position pos:line="9" pos:column="16"/></name></cpp:macro> <cpp:value pos:line="9" pos:column="17">(1 &lt;&lt; DIGIT_SIZE)<pos:position pos:line="9" pos:column="34"/></cpp:value></cpp:define>
	<comment type="block" pos:line="10" pos:column="9">/*
	 * We want to know the bucket that a[i] will go into when we are using
	 * the digit that is N bits from the (least significant) end.
	 */</comment>
<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define<pos:position pos:line="14" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">BUCKET_FOR<pos:position pos:line="14" pos:column="19"/></name><parameter_list pos:line="14" pos:column="19">(<parameter><type><name pos:line="14" pos:column="20">a<pos:position pos:line="14" pos:column="21"/></name></type></parameter>, <parameter><type><name pos:line="14" pos:column="23">i<pos:position pos:line="14" pos:column="24"/></name></type></parameter>, <parameter><type><name pos:line="14" pos:column="26">bits<pos:position pos:line="14" pos:column="30"/></name></type></parameter>)<pos:position pos:line="14" pos:column="31"/></parameter_list></cpp:macro> <cpp:value pos:line="14" pos:column="32">(((a)[(i)].offset &gt;&gt; (bits)) &amp; (BUCKETS-1))<pos:position pos:line="14" pos:column="75"/></cpp:value></cpp:define>

	<comment type="block" pos:line="16" pos:column="9">/*
	 * We need O(n) temporary storage. Rather than do an extra copy of the
	 * partial results into "entries", we sort back and forth between the
	 * real array and temporary storage. In each iteration of the loop, we
	 * keep track of them with alias pointers, always sorting from "from"
	 * to "to".
	 */</comment>
	<decl_stmt><decl><type><name><name pos:line="23" pos:column="9">struct<pos:position pos:line="23" pos:column="15"/></name> <name pos:line="23" pos:column="16">revindex_entry<pos:position pos:line="23" pos:column="30"/></name></name> <modifier pos:line="23" pos:column="31">*<pos:position pos:line="23" pos:column="32"/></modifier></type><name pos:line="23" pos:column="32">tmp<pos:position pos:line="23" pos:column="35"/></name> <init pos:line="23" pos:column="36">= <expr><call><name pos:line="23" pos:column="38">xmalloc<pos:position pos:line="23" pos:column="45"/></name><argument_list pos:line="23" pos:column="45">(<argument><expr><name pos:line="23" pos:column="46">n<pos:position pos:line="23" pos:column="47"/></name> <operator pos:line="23" pos:column="48">*<pos:position pos:line="23" pos:column="49"/></operator> <sizeof pos:line="23" pos:column="50">sizeof<argument_list pos:line="23" pos:column="56">(<argument><expr><operator pos:line="23" pos:column="57">*<pos:position pos:line="23" pos:column="58"/></operator><name pos:line="23" pos:column="58">tmp<pos:position pos:line="23" pos:column="61"/></name></expr></argument>)<pos:position pos:line="23" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="64"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="24" pos:column="9">struct<pos:position pos:line="24" pos:column="15"/></name> <name pos:line="24" pos:column="16">revindex_entry<pos:position pos:line="24" pos:column="30"/></name></name> <modifier pos:line="24" pos:column="31">*<pos:position pos:line="24" pos:column="32"/></modifier></type><name pos:line="24" pos:column="32">from<pos:position pos:line="24" pos:column="36"/></name> <init pos:line="24" pos:column="37">= <expr><name pos:line="24" pos:column="39">entries<pos:position pos:line="24" pos:column="46"/></name></expr></init></decl>, <modifier pos:line="24" pos:column="48">*<pos:position pos:line="24" pos:column="49"/></modifier><decl><type ref="prev"/><name pos:line="24" pos:column="49">to<pos:position pos:line="24" pos:column="51"/></name> <init pos:line="24" pos:column="52">= <expr><name pos:line="24" pos:column="54">tmp<pos:position pos:line="24" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="25" pos:column="9">int<pos:position pos:line="25" pos:column="12"/></name></type> <name pos:line="25" pos:column="13">bits<pos:position pos:line="25" pos:column="17"/></name></decl>;<pos:position pos:line="25" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="26" pos:column="9">unsigned<pos:position pos:line="26" pos:column="17"/></name> <modifier pos:line="26" pos:column="18">*<pos:position pos:line="26" pos:column="19"/></modifier></type><name pos:line="26" pos:column="19">pos<pos:position pos:line="26" pos:column="22"/></name> <init pos:line="26" pos:column="23">= <expr><call><name pos:line="26" pos:column="25">xmalloc<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><name pos:line="26" pos:column="33">BUCKETS<pos:position pos:line="26" pos:column="40"/></name> <operator pos:line="26" pos:column="41">*<pos:position pos:line="26" pos:column="42"/></operator> <sizeof pos:line="26" pos:column="43">sizeof<argument_list pos:line="26" pos:column="49">(<argument><expr><operator pos:line="26" pos:column="50">*<pos:position pos:line="26" pos:column="51"/></operator><name pos:line="26" pos:column="51">pos<pos:position pos:line="26" pos:column="54"/></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="57"/></decl_stmt>

	<comment type="block" pos:line="28" pos:column="9">/*
	 * If (max &gt;&gt; bits) is zero, then we know that the radix digit we are
	 * on (and any higher) will be zero for all entries, and our loop will
	 * be a no-op, as everybody lands in the same zero-th bucket.
	 */</comment>
	<for pos:line="33" pos:column="9">for <control pos:line="33" pos:column="13">(<init><expr><name pos:line="33" pos:column="14">bits<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <literal type="number" pos:line="33" pos:column="21">0<pos:position pos:line="33" pos:column="22"/></literal></expr>;<pos:position pos:line="33" pos:column="23"/></init> <condition><expr><name pos:line="33" pos:column="24">max<pos:position pos:line="33" pos:column="27"/></name> <operator pos:line="33" pos:column="28">&gt;&gt;<pos:position pos:line="33" pos:column="33"/></operator> <name pos:line="33" pos:column="31">bits<pos:position pos:line="33" pos:column="35"/></name></expr>;<pos:position pos:line="33" pos:column="36"/></condition> <incr><expr><name pos:line="33" pos:column="37">bits<pos:position pos:line="33" pos:column="41"/></name> <operator pos:line="33" pos:column="42">+=<pos:position pos:line="33" pos:column="44"/></operator> <name pos:line="33" pos:column="45">DIGIT_SIZE<pos:position pos:line="33" pos:column="55"/></name></expr></incr>)<pos:position pos:line="33" pos:column="56"/></control> <block pos:line="33" pos:column="57">{
		<decl_stmt><decl><type><name><name pos:line="34" pos:column="17">struct<pos:position pos:line="34" pos:column="23"/></name> <name pos:line="34" pos:column="24">revindex_entry<pos:position pos:line="34" pos:column="38"/></name></name> <modifier pos:line="34" pos:column="39">*<pos:position pos:line="34" pos:column="40"/></modifier></type><name pos:line="34" pos:column="40">swap<pos:position pos:line="34" pos:column="44"/></name></decl>;<pos:position pos:line="34" pos:column="45"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="35" pos:column="17">unsigned<pos:position pos:line="35" pos:column="25"/></name></type> <name pos:line="35" pos:column="26">i<pos:position pos:line="35" pos:column="27"/></name></decl>;<pos:position pos:line="35" pos:column="28"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="37" pos:column="17">memset<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><name pos:line="37" pos:column="24">pos<pos:position pos:line="37" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="29">0<pos:position pos:line="37" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="32">BUCKETS<pos:position pos:line="37" pos:column="39"/></name> <operator pos:line="37" pos:column="40">*<pos:position pos:line="37" pos:column="41"/></operator> <sizeof pos:line="37" pos:column="42">sizeof<argument_list pos:line="37" pos:column="48">(<argument><expr><operator pos:line="37" pos:column="49">*<pos:position pos:line="37" pos:column="50"/></operator><name pos:line="37" pos:column="50">pos<pos:position pos:line="37" pos:column="53"/></name></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="56"/></expr_stmt>

		<comment type="block" pos:line="39" pos:column="17">/*
		 * We want pos[i] to store the index of the last element that
		 * will go in bucket "i" (actually one past the last element).
		 * To do this, we first count the items that will go in each
		 * bucket, which gives us a relative offset from the last
		 * bucket. We can then cumulatively add the index from the
		 * previous bucket to get the true index.
		 */</comment>
		<for pos:line="47" pos:column="17">for <control pos:line="47" pos:column="21">(<init><expr><name pos:line="47" pos:column="22">i<pos:position pos:line="47" pos:column="23"/></name> <operator pos:line="47" pos:column="24">=<pos:position pos:line="47" pos:column="25"/></operator> <literal type="number" pos:line="47" pos:column="26">0<pos:position pos:line="47" pos:column="27"/></literal></expr>;<pos:position pos:line="47" pos:column="28"/></init> <condition><expr><name pos:line="47" pos:column="29">i<pos:position pos:line="47" pos:column="30"/></name> <operator pos:line="47" pos:column="31">&lt;<pos:position pos:line="47" pos:column="35"/></operator> <name pos:line="47" pos:column="33">n<pos:position pos:line="47" pos:column="34"/></name></expr>;<pos:position pos:line="47" pos:column="35"/></condition> <incr><expr><name pos:line="47" pos:column="36">i<pos:position pos:line="47" pos:column="37"/></name><operator pos:line="47" pos:column="37">++<pos:position pos:line="47" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="47" pos:column="40"/></control>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="48" pos:column="25">pos<pos:position pos:line="48" pos:column="28"/></name><index pos:line="48" pos:column="28">[<expr><call><name pos:line="48" pos:column="29">BUCKET_FOR<pos:position pos:line="48" pos:column="39"/></name><argument_list pos:line="48" pos:column="39">(<argument><expr><name pos:line="48" pos:column="40">from<pos:position pos:line="48" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="46">i<pos:position pos:line="48" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="49">bits<pos:position pos:line="48" pos:column="53"/></name></expr></argument>)<pos:position pos:line="48" pos:column="54"/></argument_list></call></expr>]<pos:position pos:line="48" pos:column="55"/></index></name><operator pos:line="48" pos:column="55">++<pos:position pos:line="48" pos:column="57"/></operator></expr>;<pos:position pos:line="48" pos:column="58"/></expr_stmt></block></for>
		<for pos:line="49" pos:column="17">for <control pos:line="49" pos:column="21">(<init><expr><name pos:line="49" pos:column="22">i<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">=<pos:position pos:line="49" pos:column="25"/></operator> <literal type="number" pos:line="49" pos:column="26">1<pos:position pos:line="49" pos:column="27"/></literal></expr>;<pos:position pos:line="49" pos:column="28"/></init> <condition><expr><name pos:line="49" pos:column="29">i<pos:position pos:line="49" pos:column="30"/></name> <operator pos:line="49" pos:column="31">&lt;<pos:position pos:line="49" pos:column="35"/></operator> <name pos:line="49" pos:column="33">BUCKETS<pos:position pos:line="49" pos:column="40"/></name></expr>;<pos:position pos:line="49" pos:column="41"/></condition> <incr><expr><name pos:line="49" pos:column="42">i<pos:position pos:line="49" pos:column="43"/></name><operator pos:line="49" pos:column="43">++<pos:position pos:line="49" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="49" pos:column="46"/></control>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="50" pos:column="25">pos<pos:position pos:line="50" pos:column="28"/></name><index pos:line="50" pos:column="28">[<expr><name pos:line="50" pos:column="29">i<pos:position pos:line="50" pos:column="30"/></name></expr>]<pos:position pos:line="50" pos:column="31"/></index></name> <operator pos:line="50" pos:column="32">+=<pos:position pos:line="50" pos:column="34"/></operator> <name><name pos:line="50" pos:column="35">pos<pos:position pos:line="50" pos:column="38"/></name><index pos:line="50" pos:column="38">[<expr><name pos:line="50" pos:column="39">i<pos:position pos:line="50" pos:column="40"/></name><operator pos:line="50" pos:column="40">-<pos:position pos:line="50" pos:column="41"/></operator><literal type="number" pos:line="50" pos:column="41">1<pos:position pos:line="50" pos:column="42"/></literal></expr>]<pos:position pos:line="50" pos:column="43"/></index></name></expr>;<pos:position pos:line="50" pos:column="44"/></expr_stmt></block></for>

		<comment type="block" pos:line="52" pos:column="17">/*
		 * Now we can drop the elements into their correct buckets (in
		 * our temporary array).  We iterate the pos counter backwards
		 * to avoid using an extra index to count up. And since we are
		 * going backwards there, we must also go backwards through the
		 * array itself, to keep the sort stable.
		 *
		 * Note that we use an unsigned iterator to make sure we can
		 * handle 2^32-1 objects, even on a 32-bit system. But this
		 * means we cannot use the more obvious "i &gt;= 0" loop condition
		 * for counting backwards, and must instead check for
		 * wrap-around with UINT_MAX.
		 */</comment>
		<for pos:line="65" pos:column="17">for <control pos:line="65" pos:column="21">(<init><expr><name pos:line="65" pos:column="22">i<pos:position pos:line="65" pos:column="23"/></name> <operator pos:line="65" pos:column="24">=<pos:position pos:line="65" pos:column="25"/></operator> <name pos:line="65" pos:column="26">n<pos:position pos:line="65" pos:column="27"/></name> <operator pos:line="65" pos:column="28">-<pos:position pos:line="65" pos:column="29"/></operator> <literal type="number" pos:line="65" pos:column="30">1<pos:position pos:line="65" pos:column="31"/></literal></expr>;<pos:position pos:line="65" pos:column="32"/></init> <condition><expr><name pos:line="65" pos:column="33">i<pos:position pos:line="65" pos:column="34"/></name> <operator pos:line="65" pos:column="35">!=<pos:position pos:line="65" pos:column="37"/></operator> <name pos:line="65" pos:column="38">UINT_MAX<pos:position pos:line="65" pos:column="46"/></name></expr>;<pos:position pos:line="65" pos:column="47"/></condition> <incr><expr><name pos:line="65" pos:column="48">i<pos:position pos:line="65" pos:column="49"/></name><operator pos:line="65" pos:column="49">--<pos:position pos:line="65" pos:column="51"/></operator></expr></incr>)<pos:position pos:line="65" pos:column="52"/></control>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="66" pos:column="25">to<pos:position pos:line="66" pos:column="27"/></name><index pos:line="66" pos:column="27">[<expr><operator pos:line="66" pos:column="28">--<pos:position pos:line="66" pos:column="30"/></operator><name><name pos:line="66" pos:column="30">pos<pos:position pos:line="66" pos:column="33"/></name><index pos:line="66" pos:column="33">[<expr><call><name pos:line="66" pos:column="34">BUCKET_FOR<pos:position pos:line="66" pos:column="44"/></name><argument_list pos:line="66" pos:column="44">(<argument><expr><name pos:line="66" pos:column="45">from<pos:position pos:line="66" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="51">i<pos:position pos:line="66" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="54">bits<pos:position pos:line="66" pos:column="58"/></name></expr></argument>)<pos:position pos:line="66" pos:column="59"/></argument_list></call></expr>]<pos:position pos:line="66" pos:column="60"/></index></name></expr>]<pos:position pos:line="66" pos:column="61"/></index></name> <operator pos:line="66" pos:column="62">=<pos:position pos:line="66" pos:column="63"/></operator> <name><name pos:line="66" pos:column="64">from<pos:position pos:line="66" pos:column="68"/></name><index pos:line="66" pos:column="68">[<expr><name pos:line="66" pos:column="69">i<pos:position pos:line="66" pos:column="70"/></name></expr>]<pos:position pos:line="66" pos:column="71"/></index></name></expr>;<pos:position pos:line="66" pos:column="72"/></expr_stmt></block></for>

		<comment type="block" pos:line="68" pos:column="17">/*
		 * Now "to" contains the most sorted list, so we swap "from" and
		 * "to" for the next iteration.
		 */</comment>
		<expr_stmt><expr><name pos:line="72" pos:column="17">swap<pos:position pos:line="72" pos:column="21"/></name> <operator pos:line="72" pos:column="22">=<pos:position pos:line="72" pos:column="23"/></operator> <name pos:line="72" pos:column="24">from<pos:position pos:line="72" pos:column="28"/></name></expr>;<pos:position pos:line="72" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="73" pos:column="17">from<pos:position pos:line="73" pos:column="21"/></name> <operator pos:line="73" pos:column="22">=<pos:position pos:line="73" pos:column="23"/></operator> <name pos:line="73" pos:column="24">to<pos:position pos:line="73" pos:column="26"/></name></expr>;<pos:position pos:line="73" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="74" pos:column="17">to<pos:position pos:line="74" pos:column="19"/></name> <operator pos:line="74" pos:column="20">=<pos:position pos:line="74" pos:column="21"/></operator> <name pos:line="74" pos:column="22">swap<pos:position pos:line="74" pos:column="26"/></name></expr>;<pos:position pos:line="74" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="75" pos:column="10"/></block></for>

	<comment type="block" pos:line="77" pos:column="9">/*
	 * If we ended with our data in the original array, great. If not,
	 * we have to move it back from the temporary storage.
	 */</comment>
	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name pos:line="81" pos:column="13">from<pos:position pos:line="81" pos:column="17"/></name> <operator pos:line="81" pos:column="18">!=<pos:position pos:line="81" pos:column="20"/></operator> <name pos:line="81" pos:column="21">entries<pos:position pos:line="81" pos:column="28"/></name></expr>)<pos:position pos:line="81" pos:column="29"/></condition><then pos:line="81" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="17">memcpy<pos:position pos:line="82" pos:column="23"/></name><argument_list pos:line="82" pos:column="23">(<argument><expr><name pos:line="82" pos:column="24">entries<pos:position pos:line="82" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="33">tmp<pos:position pos:line="82" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="38">n<pos:position pos:line="82" pos:column="39"/></name> <operator pos:line="82" pos:column="40">*<pos:position pos:line="82" pos:column="41"/></operator> <sizeof pos:line="82" pos:column="42">sizeof<argument_list pos:line="82" pos:column="48">(<argument><expr><operator pos:line="82" pos:column="49">*<pos:position pos:line="82" pos:column="50"/></operator><name pos:line="82" pos:column="50">entries<pos:position pos:line="82" pos:column="57"/></name></expr></argument>)<pos:position pos:line="82" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="82" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="60"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="83" pos:column="9">free<pos:position pos:line="83" pos:column="13"/></name><argument_list pos:line="83" pos:column="13">(<argument><expr><name pos:line="83" pos:column="14">tmp<pos:position pos:line="83" pos:column="17"/></name></expr></argument>)<pos:position pos:line="83" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="84" pos:column="9">free<pos:position pos:line="84" pos:column="13"/></name><argument_list pos:line="84" pos:column="13">(<argument><expr><name pos:line="84" pos:column="14">pos<pos:position pos:line="84" pos:column="17"/></name></expr></argument>)<pos:position pos:line="84" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="19"/></expr_stmt>

<cpp:undef pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">undef<pos:position pos:line="86" pos:column="7"/></cpp:directive> <name pos:line="86" pos:column="8">BUCKET_FOR<pos:position pos:line="86" pos:column="18"/></name></cpp:undef>
<cpp:undef pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">undef<pos:position pos:line="87" pos:column="7"/></cpp:directive> <name pos:line="87" pos:column="8">BUCKETS<pos:position pos:line="87" pos:column="15"/></name></cpp:undef>
<cpp:undef pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">undef<pos:position pos:line="88" pos:column="7"/></cpp:directive> <name pos:line="88" pos:column="8">DIGIT_SIZE<pos:position pos:line="88" pos:column="18"/></name></cpp:undef>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
