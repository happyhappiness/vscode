<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1869_git-2.4.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">parse_range_funcname<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">arg<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">nth_line_fn_t<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">nth_line_cb<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>,
					<parameter><decl><type><name pos:line="2" pos:column="41">void<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">cb_data<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">long<pos:position pos:line="2" pos:column="60"/></name></type> <name pos:line="2" pos:column="61">lines<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="68">long<pos:position pos:line="2" pos:column="72"/></name></type> <name pos:line="2" pos:column="73">anchor<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="81">long<pos:position pos:line="2" pos:column="85"/></name> <modifier pos:line="2" pos:column="86">*<pos:position pos:line="2" pos:column="87"/></modifier></type><name pos:line="2" pos:column="87">begin<pos:position pos:line="2" pos:column="92"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="94">long<pos:position pos:line="2" pos:column="98"/></name> <modifier pos:line="2" pos:column="99">*<pos:position pos:line="2" pos:column="100"/></modifier></type><name pos:line="2" pos:column="100">end<pos:position pos:line="2" pos:column="103"/></name></decl></parameter>,
					<parameter><decl><type><specifier pos:line="3" pos:column="41">const<pos:position pos:line="3" pos:column="46"/></specifier> <name pos:line="3" pos:column="47">char<pos:position pos:line="3" pos:column="51"/></name> <modifier pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></modifier></type><name pos:line="3" pos:column="53">path<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="58"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">pattern<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">term<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">userdiff_driver<pos:position pos:line="7" pos:column="31"/></name></name> <modifier pos:line="7" pos:column="32">*<pos:position pos:line="7" pos:column="33"/></modifier></type><name pos:line="7" pos:column="33">drv<pos:position pos:line="7" pos:column="36"/></name></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">xdemitconf_t<pos:position pos:line="8" pos:column="21"/></name> <modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type><name pos:line="8" pos:column="23">xecfg<pos:position pos:line="8" pos:column="28"/></name> <init pos:line="8" pos:column="29">= <expr><name pos:line="8" pos:column="31">NULL<pos:position pos:line="8" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">start<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">p<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">reg_error<pos:position pos:line="11" pos:column="22"/></name></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">regex_t<pos:position pos:line="12" pos:column="16"/></name></type> <name pos:line="12" pos:column="17">regexp<pos:position pos:line="12" pos:column="23"/></name></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">*<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">arg<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">==<pos:position pos:line="14" pos:column="20"/></operator> <literal type="char" pos:line="14" pos:column="21">'^'<pos:position pos:line="14" pos:column="24"/></literal></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25"> <block pos:line="14" pos:column="26">{
		<expr_stmt><expr><name pos:line="15" pos:column="17">anchor<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">=<pos:position pos:line="15" pos:column="25"/></operator> <literal type="number" pos:line="15" pos:column="26">1<pos:position pos:line="15" pos:column="27"/></literal></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">arg<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">++<pos:position pos:line="16" pos:column="22"/></operator></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="19" pos:column="9">assert<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><operator pos:line="19" pos:column="16">*<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">arg<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">==<pos:position pos:line="19" pos:column="23"/></operator> <literal type="char" pos:line="19" pos:column="24">':'<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">term<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <name pos:line="20" pos:column="16">arg<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">+<pos:position pos:line="20" pos:column="20"/></operator><literal type="number" pos:line="20" pos:column="20">1<pos:position pos:line="20" pos:column="21"/></literal></expr>;<pos:position pos:line="20" pos:column="22"/></expr_stmt>
	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><operator pos:line="21" pos:column="16">*<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">term<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">&amp;&amp;<pos:position pos:line="21" pos:column="32"/></operator> <operator pos:line="21" pos:column="25">*<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">term<pos:position pos:line="21" pos:column="30"/></name> <operator pos:line="21" pos:column="31">!=<pos:position pos:line="21" pos:column="33"/></operator> <literal type="char" pos:line="21" pos:column="34">':'<pos:position pos:line="21" pos:column="37"/></literal></expr>)<pos:position pos:line="21" pos:column="38"/></condition> <block pos:line="21" pos:column="39">{
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">*<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">term<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">==<pos:position pos:line="22" pos:column="29"/></operator> <literal type="char" pos:line="22" pos:column="30">'\\'<pos:position pos:line="22" pos:column="34"/></literal> <operator pos:line="22" pos:column="35">&amp;&amp;<pos:position pos:line="22" pos:column="45"/></operator> <operator pos:line="22" pos:column="38">*<pos:position pos:line="22" pos:column="39"/></operator><operator pos:line="22" pos:column="39">(<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="40">term<pos:position pos:line="22" pos:column="44"/></name><operator pos:line="22" pos:column="44">+<pos:position pos:line="22" pos:column="45"/></operator><literal type="number" pos:line="22" pos:column="45">1<pos:position pos:line="22" pos:column="46"/></literal><operator pos:line="22" pos:column="46">)<pos:position pos:line="22" pos:column="47"/></operator></expr>)<pos:position pos:line="22" pos:column="48"/></condition><then pos:line="22" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="25">term<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">++<pos:position pos:line="23" pos:column="31"/></operator></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="24" pos:column="17">term<pos:position pos:line="24" pos:column="21"/></name><operator pos:line="24" pos:column="21">++<pos:position pos:line="24" pos:column="23"/></operator></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></while>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">term<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">==<pos:position pos:line="26" pos:column="20"/></operator> <name pos:line="26" pos:column="21">arg<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">+<pos:position pos:line="26" pos:column="25"/></operator><literal type="number" pos:line="26" pos:column="25">1<pos:position pos:line="26" pos:column="26"/></literal></expr>)<pos:position pos:line="26" pos:column="27"/></condition><then pos:line="26" pos:column="27">
		<block type="pseudo"><return pos:line="27" pos:column="17">return <expr><name pos:line="27" pos:column="24">NULL<pos:position pos:line="27" pos:column="28"/></name></expr>;<pos:position pos:line="27" pos:column="29"/></return></block></then></if>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">begin<pos:position pos:line="28" pos:column="19"/></name></expr>)<pos:position pos:line="28" pos:column="20"/></condition><then pos:line="28" pos:column="20"> <comment type="block" pos:line="28" pos:column="21">/* skip_range_arg case */</comment>
		<block type="pseudo"><return pos:line="29" pos:column="17">return <expr><name pos:line="29" pos:column="24">term<pos:position pos:line="29" pos:column="28"/></name></expr>;<pos:position pos:line="29" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="31" pos:column="9">pattern<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <call><name pos:line="31" pos:column="19">xstrndup<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">arg<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">+<pos:position pos:line="31" pos:column="32"/></operator><literal type="number" pos:line="31" pos:column="32">1<pos:position pos:line="31" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="35">term<pos:position pos:line="31" pos:column="39"/></name><operator pos:line="31" pos:column="39">-<pos:position pos:line="31" pos:column="40"/></operator><operator pos:line="31" pos:column="40">(<pos:position pos:line="31" pos:column="41"/></operator><name pos:line="31" pos:column="41">arg<pos:position pos:line="31" pos:column="44"/></name><operator pos:line="31" pos:column="44">+<pos:position pos:line="31" pos:column="45"/></operator><literal type="number" pos:line="31" pos:column="45">1<pos:position pos:line="31" pos:column="46"/></literal><operator pos:line="31" pos:column="46">)<pos:position pos:line="31" pos:column="47"/></operator></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="49"/></expr_stmt>

	<expr_stmt><expr><name pos:line="33" pos:column="9">anchor<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">--<pos:position pos:line="33" pos:column="17"/></operator></expr>;<pos:position pos:line="33" pos:column="18"/></expr_stmt> <comment type="block" pos:line="33" pos:column="19">/* input is in human terms */</comment>
	<expr_stmt><expr><name pos:line="34" pos:column="9">start<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">=<pos:position pos:line="34" pos:column="16"/></operator> <call><name pos:line="34" pos:column="17">nth_line_cb<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><name pos:line="34" pos:column="29">cb_data<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="38">anchor<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt>

	<expr_stmt><expr><name pos:line="36" pos:column="9">drv<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <call><name pos:line="36" pos:column="15">userdiff_find_by_path<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><name pos:line="36" pos:column="37">path<pos:position pos:line="36" pos:column="41"/></name></expr></argument>)<pos:position pos:line="36" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="43"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">drv<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">&amp;&amp;<pos:position pos:line="37" pos:column="27"/></operator> <name><name pos:line="37" pos:column="20">drv<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">-&gt;<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="25">funcname<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">.<pos:position pos:line="37" pos:column="34"/></operator><name pos:line="37" pos:column="34">pattern<pos:position pos:line="37" pos:column="41"/></name></name></expr>)<pos:position pos:line="37" pos:column="42"/></condition><then pos:line="37" pos:column="42"> <block pos:line="37" pos:column="43">{
		<decl_stmt><decl><type><specifier pos:line="38" pos:column="17">const<pos:position pos:line="38" pos:column="22"/></specifier> <name><name pos:line="38" pos:column="23">struct<pos:position pos:line="38" pos:column="29"/></name> <name pos:line="38" pos:column="30">userdiff_funcname<pos:position pos:line="38" pos:column="47"/></name></name> <modifier pos:line="38" pos:column="48">*<pos:position pos:line="38" pos:column="49"/></modifier></type><name pos:line="38" pos:column="49">pe<pos:position pos:line="38" pos:column="51"/></name> <init pos:line="38" pos:column="52">= <expr><operator pos:line="38" pos:column="54">&amp;<pos:position pos:line="38" pos:column="59"/></operator><name><name pos:line="38" pos:column="55">drv<pos:position pos:line="38" pos:column="58"/></name><operator pos:line="38" pos:column="58">-&gt;<pos:position pos:line="38" pos:column="63"/></operator><name pos:line="38" pos:column="60">funcname<pos:position pos:line="38" pos:column="68"/></name></name></expr></init></decl>;<pos:position pos:line="38" pos:column="69"/></decl_stmt>
		<expr_stmt><expr><name pos:line="39" pos:column="17">xecfg<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <call><name pos:line="39" pos:column="25">xcalloc<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><literal type="number" pos:line="39" pos:column="33">1<pos:position pos:line="39" pos:column="34"/></literal></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="36">sizeof<argument_list pos:line="39" pos:column="42">(<argument><expr><operator pos:line="39" pos:column="43">*<pos:position pos:line="39" pos:column="44"/></operator><name pos:line="39" pos:column="44">xecfg<pos:position pos:line="39" pos:column="49"/></name></expr></argument>)<pos:position pos:line="39" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">xdiff_set_find_func<pos:position pos:line="40" pos:column="36"/></name><argument_list pos:line="40" pos:column="36">(<argument><expr><name pos:line="40" pos:column="37">xecfg<pos:position pos:line="40" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="44">pe<pos:position pos:line="40" pos:column="46"/></name><operator pos:line="40" pos:column="46">-&gt;<pos:position pos:line="40" pos:column="51"/></operator><name pos:line="40" pos:column="48">pattern<pos:position pos:line="40" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="57">pe<pos:position pos:line="40" pos:column="59"/></name><operator pos:line="40" pos:column="59">-&gt;<pos:position pos:line="40" pos:column="64"/></operator><name pos:line="40" pos:column="61">cflags<pos:position pos:line="40" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="69"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="43" pos:column="9">reg_error<pos:position pos:line="43" pos:column="18"/></name> <operator pos:line="43" pos:column="19">=<pos:position pos:line="43" pos:column="20"/></operator> <call><name pos:line="43" pos:column="21">regcomp<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><operator pos:line="43" pos:column="29">&amp;<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="30">regexp<pos:position pos:line="43" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="38">pattern<pos:position pos:line="43" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="47">REG_NEWLINE<pos:position pos:line="43" pos:column="58"/></name></expr></argument>)<pos:position pos:line="43" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="60"/></expr_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">reg_error<pos:position pos:line="44" pos:column="22"/></name></expr>)<pos:position pos:line="44" pos:column="23"/></condition><then pos:line="44" pos:column="23"> <block pos:line="44" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">char<pos:position pos:line="45" pos:column="21"/></name></type> <name><name pos:line="45" pos:column="22">errbuf<pos:position pos:line="45" pos:column="28"/></name><index pos:line="45" pos:column="28">[<expr><literal type="number" pos:line="45" pos:column="29">1024<pos:position pos:line="45" pos:column="33"/></literal></expr>]<pos:position pos:line="45" pos:column="34"/></index></name></decl>;<pos:position pos:line="45" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">regerror<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">reg_error<pos:position pos:line="46" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="37">&amp;<pos:position pos:line="46" pos:column="42"/></operator><name pos:line="46" pos:column="38">regexp<pos:position pos:line="46" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="46">errbuf<pos:position pos:line="46" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="54">1024<pos:position pos:line="46" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">die<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><literal type="string" pos:line="47" pos:column="21">"-L parameter '%s': %s"<pos:position pos:line="47" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="46">pattern<pos:position pos:line="47" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="55">errbuf<pos:position pos:line="47" pos:column="61"/></name></expr></argument>)<pos:position pos:line="47" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="50" pos:column="9">p<pos:position pos:line="50" pos:column="10"/></name> <operator pos:line="50" pos:column="11">=<pos:position pos:line="50" pos:column="12"/></operator> <call><name pos:line="50" pos:column="13">find_funcname_matching_regexp<pos:position pos:line="50" pos:column="42"/></name><argument_list pos:line="50" pos:column="42">(<argument><expr><name pos:line="50" pos:column="43">xecfg<pos:position pos:line="50" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="50">(<pos:position pos:line="50" pos:column="51"/></operator><name pos:line="50" pos:column="51">char<pos:position pos:line="50" pos:column="55"/></name><operator pos:line="50" pos:column="55">*<pos:position pos:line="50" pos:column="56"/></operator><operator pos:line="50" pos:column="56">)<pos:position pos:line="50" pos:column="57"/></operator> <name pos:line="50" pos:column="58">start<pos:position pos:line="50" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="65">&amp;<pos:position pos:line="50" pos:column="70"/></operator><name pos:line="50" pos:column="66">regexp<pos:position pos:line="50" pos:column="72"/></name></expr></argument>)<pos:position pos:line="50" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="74"/></expr_stmt>
	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><operator pos:line="51" pos:column="13">!<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">p<pos:position pos:line="51" pos:column="15"/></name></expr>)<pos:position pos:line="51" pos:column="16"/></condition><then pos:line="51" pos:column="16">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="17">die<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><literal type="string" pos:line="52" pos:column="21">"-L parameter '%s' starting at line %ld: no match"<pos:position pos:line="52" pos:column="71"/></literal></expr></argument>,
		    <argument><expr><name pos:line="53" pos:column="21">pattern<pos:position pos:line="53" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="30">anchor<pos:position pos:line="53" pos:column="36"/></name> <operator pos:line="53" pos:column="37">+<pos:position pos:line="53" pos:column="38"/></operator> <literal type="number" pos:line="53" pos:column="39">1<pos:position pos:line="53" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt></block></then></if>
	<expr_stmt><expr><operator pos:line="54" pos:column="9">*<pos:position pos:line="54" pos:column="10"/></operator><name pos:line="54" pos:column="10">begin<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">=<pos:position pos:line="54" pos:column="17"/></operator> <literal type="number" pos:line="54" pos:column="18">0<pos:position pos:line="54" pos:column="19"/></literal></expr>;<pos:position pos:line="54" pos:column="20"/></expr_stmt>
	<while pos:line="55" pos:column="9">while <condition pos:line="55" pos:column="15">(<expr><name pos:line="55" pos:column="16">p<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">&gt;<pos:position pos:line="55" pos:column="22"/></operator> <call><name pos:line="55" pos:column="20">nth_line_cb<pos:position pos:line="55" pos:column="31"/></name><argument_list pos:line="55" pos:column="31">(<argument><expr><name pos:line="55" pos:column="32">cb_data<pos:position pos:line="55" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="41">*<pos:position pos:line="55" pos:column="42"/></operator><name pos:line="55" pos:column="42">begin<pos:position pos:line="55" pos:column="47"/></name></expr></argument>)<pos:position pos:line="55" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="49"/></condition>
		<block type="pseudo"><expr_stmt><expr><operator pos:line="56" pos:column="17">(<pos:position pos:line="56" pos:column="18"/></operator><operator pos:line="56" pos:column="18">*<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="19">begin<pos:position pos:line="56" pos:column="24"/></name><operator pos:line="56" pos:column="24">)<pos:position pos:line="56" pos:column="25"/></operator><operator pos:line="56" pos:column="25">++<pos:position pos:line="56" pos:column="27"/></operator></expr>;<pos:position pos:line="56" pos:column="28"/></expr_stmt></block></while>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><operator pos:line="58" pos:column="13">*<pos:position pos:line="58" pos:column="14"/></operator><name pos:line="58" pos:column="14">begin<pos:position pos:line="58" pos:column="19"/></name> <operator pos:line="58" pos:column="20">&gt;=<pos:position pos:line="58" pos:column="25"/></operator> <name pos:line="58" pos:column="23">lines<pos:position pos:line="58" pos:column="28"/></name></expr>)<pos:position pos:line="58" pos:column="29"/></condition><then pos:line="58" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="17">die<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><literal type="string" pos:line="59" pos:column="21">"-L parameter '%s' matches at EOF"<pos:position pos:line="59" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="57">pattern<pos:position pos:line="59" pos:column="64"/></name></expr></argument>)<pos:position pos:line="59" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="66"/></expr_stmt></block></then></if>

	<expr_stmt><expr><operator pos:line="61" pos:column="9">*<pos:position pos:line="61" pos:column="10"/></operator><name pos:line="61" pos:column="10">end<pos:position pos:line="61" pos:column="13"/></name> <operator pos:line="61" pos:column="14">=<pos:position pos:line="61" pos:column="15"/></operator> <operator pos:line="61" pos:column="16">*<pos:position pos:line="61" pos:column="17"/></operator><name pos:line="61" pos:column="17">begin<pos:position pos:line="61" pos:column="22"/></name><operator pos:line="61" pos:column="22">+<pos:position pos:line="61" pos:column="23"/></operator><literal type="number" pos:line="61" pos:column="23">1<pos:position pos:line="61" pos:column="24"/></literal></expr>;<pos:position pos:line="61" pos:column="25"/></expr_stmt>
	<while pos:line="62" pos:column="9">while <condition pos:line="62" pos:column="15">(<expr><operator pos:line="62" pos:column="16">*<pos:position pos:line="62" pos:column="17"/></operator><name pos:line="62" pos:column="17">end<pos:position pos:line="62" pos:column="20"/></name> <operator pos:line="62" pos:column="21">&lt;<pos:position pos:line="62" pos:column="25"/></operator> <name pos:line="62" pos:column="23">lines<pos:position pos:line="62" pos:column="28"/></name></expr>)<pos:position pos:line="62" pos:column="29"/></condition> <block pos:line="62" pos:column="30">{
		<decl_stmt><decl><type><specifier pos:line="63" pos:column="17">const<pos:position pos:line="63" pos:column="22"/></specifier> <name pos:line="63" pos:column="23">char<pos:position pos:line="63" pos:column="27"/></name> <modifier pos:line="63" pos:column="28">*<pos:position pos:line="63" pos:column="29"/></modifier></type><name pos:line="63" pos:column="29">bol<pos:position pos:line="63" pos:column="32"/></name> <init pos:line="63" pos:column="33">= <expr><call><name pos:line="63" pos:column="35">nth_line_cb<pos:position pos:line="63" pos:column="46"/></name><argument_list pos:line="63" pos:column="46">(<argument><expr><name pos:line="63" pos:column="47">cb_data<pos:position pos:line="63" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="56">*<pos:position pos:line="63" pos:column="57"/></operator><name pos:line="63" pos:column="57">end<pos:position pos:line="63" pos:column="60"/></name></expr></argument>)<pos:position pos:line="63" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="63" pos:column="62"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="64" pos:column="17">const<pos:position pos:line="64" pos:column="22"/></specifier> <name pos:line="64" pos:column="23">char<pos:position pos:line="64" pos:column="27"/></name> <modifier pos:line="64" pos:column="28">*<pos:position pos:line="64" pos:column="29"/></modifier></type><name pos:line="64" pos:column="29">eol<pos:position pos:line="64" pos:column="32"/></name> <init pos:line="64" pos:column="33">= <expr><call><name pos:line="64" pos:column="35">nth_line_cb<pos:position pos:line="64" pos:column="46"/></name><argument_list pos:line="64" pos:column="46">(<argument><expr><name pos:line="64" pos:column="47">cb_data<pos:position pos:line="64" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="56">*<pos:position pos:line="64" pos:column="57"/></operator><name pos:line="64" pos:column="57">end<pos:position pos:line="64" pos:column="60"/></name><operator pos:line="64" pos:column="60">+<pos:position pos:line="64" pos:column="61"/></operator><literal type="number" pos:line="64" pos:column="61">1<pos:position pos:line="64" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="64" pos:column="64"/></decl_stmt>
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><call><name pos:line="65" pos:column="21">match_funcname<pos:position pos:line="65" pos:column="35"/></name><argument_list pos:line="65" pos:column="35">(<argument><expr><name pos:line="65" pos:column="36">xecfg<pos:position pos:line="65" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="43">bol<pos:position pos:line="65" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="48">eol<pos:position pos:line="65" pos:column="51"/></name></expr></argument>)<pos:position pos:line="65" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="53"/></condition><then pos:line="65" pos:column="53">
			<block type="pseudo"><break pos:line="66" pos:column="25">break;<pos:position pos:line="66" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><operator pos:line="67" pos:column="17">(<pos:position pos:line="67" pos:column="18"/></operator><operator pos:line="67" pos:column="18">*<pos:position pos:line="67" pos:column="19"/></operator><name pos:line="67" pos:column="19">end<pos:position pos:line="67" pos:column="22"/></name><operator pos:line="67" pos:column="22">)<pos:position pos:line="67" pos:column="23"/></operator><operator pos:line="67" pos:column="23">++<pos:position pos:line="67" pos:column="25"/></operator></expr>;<pos:position pos:line="67" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="68" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="70" pos:column="9">regfree<pos:position pos:line="70" pos:column="16"/></name><argument_list pos:line="70" pos:column="16">(<argument><expr><operator pos:line="70" pos:column="17">&amp;<pos:position pos:line="70" pos:column="22"/></operator><name pos:line="70" pos:column="18">regexp<pos:position pos:line="70" pos:column="24"/></name></expr></argument>)<pos:position pos:line="70" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">free<pos:position pos:line="71" pos:column="13"/></name><argument_list pos:line="71" pos:column="13">(<argument><expr><name pos:line="71" pos:column="14">xecfg<pos:position pos:line="71" pos:column="19"/></name></expr></argument>)<pos:position pos:line="71" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="72" pos:column="9">free<pos:position pos:line="72" pos:column="13"/></name><argument_list pos:line="72" pos:column="13">(<argument><expr><name pos:line="72" pos:column="14">pattern<pos:position pos:line="72" pos:column="21"/></name></expr></argument>)<pos:position pos:line="72" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="23"/></expr_stmt>

	<comment type="block" pos:line="74" pos:column="9">/* compensate for 1-based numbering */</comment>
	<expr_stmt><expr><operator pos:line="75" pos:column="9">(<pos:position pos:line="75" pos:column="10"/></operator><operator pos:line="75" pos:column="10">*<pos:position pos:line="75" pos:column="11"/></operator><name pos:line="75" pos:column="11">begin<pos:position pos:line="75" pos:column="16"/></name><operator pos:line="75" pos:column="16">)<pos:position pos:line="75" pos:column="17"/></operator><operator pos:line="75" pos:column="17">++<pos:position pos:line="75" pos:column="19"/></operator></expr>;<pos:position pos:line="75" pos:column="20"/></expr_stmt>

	<return pos:line="77" pos:column="9">return <expr><name pos:line="77" pos:column="16">term<pos:position pos:line="77" pos:column="20"/></name></expr>;<pos:position pos:line="77" pos:column="21"/></return>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
