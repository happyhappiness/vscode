<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1110.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">pack_if_possible_fn<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">ref_entry<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">entry<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">void<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">cb_data<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">pack_refs_cb_data<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">cb<pos:position pos:line="3" pos:column="37"/></name> <init pos:line="3" pos:column="38">= <expr><name pos:line="3" pos:column="40">cb_data<pos:position pos:line="3" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">enum<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">peel_status<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">peel_status<pos:position pos:line="4" pos:column="37"/></name></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">ref_entry<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">packed_entry<pos:position pos:line="5" pos:column="39"/></name></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">is_tag_ref<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><call><name pos:line="6" pos:column="26">starts_with<pos:position pos:line="6" pos:column="37"/></name><argument_list pos:line="6" pos:column="37">(<argument><expr><name><name pos:line="6" pos:column="38">entry<pos:position pos:line="6" pos:column="43"/></name><operator pos:line="6" pos:column="43">-&gt;<pos:position pos:line="6" pos:column="48"/></operator><name pos:line="6" pos:column="45">name<pos:position pos:line="6" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="51">"refs/tags/"<pos:position pos:line="6" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="65"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/* Do not pack per-worktree refs: */</comment>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">ref_type<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name><name pos:line="9" pos:column="22">entry<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">-&gt;<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="29">name<pos:position pos:line="9" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call> <operator pos:line="9" pos:column="35">!=<pos:position pos:line="9" pos:column="37"/></operator> <name pos:line="9" pos:column="38">REF_TYPE_NORMAL<pos:position pos:line="9" pos:column="53"/></name></expr>)<pos:position pos:line="9" pos:column="54"/></condition><then pos:line="9" pos:column="54">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="12" pos:column="9">/* ALWAYS pack tags */</comment>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><operator pos:line="13" pos:column="14">(<pos:position pos:line="13" pos:column="15"/></operator><name><name pos:line="13" pos:column="15">cb<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">flags<pos:position pos:line="13" pos:column="24"/></name></name> <operator pos:line="13" pos:column="25">&amp;<pos:position pos:line="13" pos:column="30"/></operator> <name pos:line="13" pos:column="27">PACK_REFS_ALL<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">)<pos:position pos:line="13" pos:column="41"/></operator> <operator pos:line="13" pos:column="42">&amp;&amp;<pos:position pos:line="13" pos:column="52"/></operator> <operator pos:line="13" pos:column="45">!<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="46">is_tag_ref<pos:position pos:line="13" pos:column="56"/></name></expr>)<pos:position pos:line="13" pos:column="57"/></condition><then pos:line="13" pos:column="57">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>;<pos:position pos:line="14" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="16" pos:column="9">/* Do not pack symbolic or broken refs: */</comment>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">(<pos:position pos:line="17" pos:column="14"/></operator><name><name pos:line="17" pos:column="14">entry<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">-&gt;<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="21">flag<pos:position pos:line="17" pos:column="25"/></name></name> <operator pos:line="17" pos:column="26">&amp;<pos:position pos:line="17" pos:column="31"/></operator> <name pos:line="17" pos:column="28">REF_ISSYMREF<pos:position pos:line="17" pos:column="40"/></name><operator pos:line="17" pos:column="40">)<pos:position pos:line="17" pos:column="41"/></operator> <operator pos:line="17" pos:column="42">||<pos:position pos:line="17" pos:column="44"/></operator> <operator pos:line="17" pos:column="45">!<pos:position pos:line="17" pos:column="46"/></operator><call><name pos:line="17" pos:column="46">entry_resolves_to_object<pos:position pos:line="17" pos:column="70"/></name><argument_list pos:line="17" pos:column="70">(<argument><expr><name pos:line="17" pos:column="71">entry<pos:position pos:line="17" pos:column="76"/></name></expr></argument>)<pos:position pos:line="17" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="78"/></condition><then pos:line="17" pos:column="78">
		<block type="pseudo"><return pos:line="18" pos:column="17">return <expr><literal type="number" pos:line="18" pos:column="24">0<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="20" pos:column="9">/* Add a packed ref cache entry equivalent to the loose entry. */</comment>
	<expr_stmt><expr><name pos:line="21" pos:column="9">peel_status<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="23">peel_entry<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">entry<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="41">1<pos:position pos:line="21" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="44"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">peel_status<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">!=<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="28">PEEL_PEELED<pos:position pos:line="22" pos:column="39"/></name> <operator pos:line="22" pos:column="40">&amp;&amp;<pos:position pos:line="22" pos:column="50"/></operator> <name pos:line="22" pos:column="43">peel_status<pos:position pos:line="22" pos:column="54"/></name> <operator pos:line="22" pos:column="55">!=<pos:position pos:line="22" pos:column="57"/></operator> <name pos:line="22" pos:column="58">PEEL_NON_TAG<pos:position pos:line="22" pos:column="70"/></name></expr>)<pos:position pos:line="22" pos:column="71"/></condition><then pos:line="22" pos:column="71">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">die<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><literal type="string" pos:line="23" pos:column="21">"internal error peeling reference %s (%s)"<pos:position pos:line="23" pos:column="63"/></literal></expr></argument>,
		    <argument><expr><name><name pos:line="24" pos:column="21">entry<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">-&gt;<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="28">name<pos:position pos:line="24" pos:column="32"/></name></name></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="34">oid_to_hex<pos:position pos:line="24" pos:column="44"/></name><argument_list pos:line="24" pos:column="44">(<argument><expr><operator pos:line="24" pos:column="45">&amp;<pos:position pos:line="24" pos:column="50"/></operator><name><name pos:line="24" pos:column="46">entry<pos:position pos:line="24" pos:column="51"/></name><operator pos:line="24" pos:column="51">-&gt;<pos:position pos:line="24" pos:column="56"/></operator><name pos:line="24" pos:column="53">u<pos:position pos:line="24" pos:column="54"/></name><operator pos:line="24" pos:column="54">.<pos:position pos:line="24" pos:column="55"/></operator><name pos:line="24" pos:column="55">value<pos:position pos:line="24" pos:column="60"/></name><operator pos:line="24" pos:column="60">.<pos:position pos:line="24" pos:column="61"/></operator><name pos:line="24" pos:column="61">oid<pos:position pos:line="24" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="67"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="25" pos:column="9">packed_entry<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <call><name pos:line="25" pos:column="24">find_ref<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name><name pos:line="25" pos:column="33">cb<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">-&gt;<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="37">packed_refs<pos:position pos:line="25" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="50">entry<pos:position pos:line="25" pos:column="55"/></name><operator pos:line="25" pos:column="55">-&gt;<pos:position pos:line="25" pos:column="60"/></operator><name pos:line="25" pos:column="57">name<pos:position pos:line="25" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="63"/></expr_stmt>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">packed_entry<pos:position pos:line="26" pos:column="25"/></name></expr>)<pos:position pos:line="26" pos:column="26"/></condition><then pos:line="26" pos:column="26"> <block pos:line="26" pos:column="27">{
		<comment type="block" pos:line="27" pos:column="17">/* Overwrite existing packed entry with info from loose entry */</comment>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">packed_entry<pos:position pos:line="28" pos:column="29"/></name><operator pos:line="28" pos:column="29">-&gt;<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="31">flag<pos:position pos:line="28" pos:column="35"/></name></name> <operator pos:line="28" pos:column="36">=<pos:position pos:line="28" pos:column="37"/></operator> <name pos:line="28" pos:column="38">REF_ISPACKED<pos:position pos:line="28" pos:column="50"/></name> <operator pos:line="28" pos:column="51">|<pos:position pos:line="28" pos:column="52"/></operator> <name pos:line="28" pos:column="53">REF_KNOWS_PEELED<pos:position pos:line="28" pos:column="69"/></name></expr>;<pos:position pos:line="28" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">oidcpy<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><operator pos:line="29" pos:column="24">&amp;<pos:position pos:line="29" pos:column="29"/></operator><name><name pos:line="29" pos:column="25">packed_entry<pos:position pos:line="29" pos:column="37"/></name><operator pos:line="29" pos:column="37">-&gt;<pos:position pos:line="29" pos:column="42"/></operator><name pos:line="29" pos:column="39">u<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">.<pos:position pos:line="29" pos:column="41"/></operator><name pos:line="29" pos:column="41">value<pos:position pos:line="29" pos:column="46"/></name><operator pos:line="29" pos:column="46">.<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="47">oid<pos:position pos:line="29" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="52">&amp;<pos:position pos:line="29" pos:column="57"/></operator><name><name pos:line="29" pos:column="53">entry<pos:position pos:line="29" pos:column="58"/></name><operator pos:line="29" pos:column="58">-&gt;<pos:position pos:line="29" pos:column="63"/></operator><name pos:line="29" pos:column="60">u<pos:position pos:line="29" pos:column="61"/></name><operator pos:line="29" pos:column="61">.<pos:position pos:line="29" pos:column="62"/></operator><name pos:line="29" pos:column="62">value<pos:position pos:line="29" pos:column="67"/></name><operator pos:line="29" pos:column="67">.<pos:position pos:line="29" pos:column="68"/></operator><name pos:line="29" pos:column="68">oid<pos:position pos:line="29" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="73"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></then> <else pos:line="30" pos:column="11">else <block pos:line="30" pos:column="16">{
		<expr_stmt><expr><name pos:line="31" pos:column="17">packed_entry<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">=<pos:position pos:line="31" pos:column="31"/></operator> <call><name pos:line="31" pos:column="32">create_ref_entry<pos:position pos:line="31" pos:column="48"/></name><argument_list pos:line="31" pos:column="48">(<argument><expr><name><name pos:line="31" pos:column="49">entry<pos:position pos:line="31" pos:column="54"/></name><operator pos:line="31" pos:column="54">-&gt;<pos:position pos:line="31" pos:column="59"/></operator><name pos:line="31" pos:column="56">name<pos:position pos:line="31" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="62">entry<pos:position pos:line="31" pos:column="67"/></name><operator pos:line="31" pos:column="67">-&gt;<pos:position pos:line="31" pos:column="72"/></operator><name pos:line="31" pos:column="69">u<pos:position pos:line="31" pos:column="70"/></name><operator pos:line="31" pos:column="70">.<pos:position pos:line="31" pos:column="71"/></operator><name pos:line="31" pos:column="71">value<pos:position pos:line="31" pos:column="76"/></name><operator pos:line="31" pos:column="76">.<pos:position pos:line="31" pos:column="77"/></operator><name pos:line="31" pos:column="77">oid<pos:position pos:line="31" pos:column="80"/></name><operator pos:line="31" pos:column="80">.<pos:position pos:line="31" pos:column="81"/></operator><name pos:line="31" pos:column="81">hash<pos:position pos:line="31" pos:column="85"/></name></name></expr></argument>,
						<argument><expr><name pos:line="32" pos:column="49">REF_ISPACKED<pos:position pos:line="32" pos:column="61"/></name> <operator pos:line="32" pos:column="62">|<pos:position pos:line="32" pos:column="63"/></operator> <name pos:line="32" pos:column="64">REF_KNOWS_PEELED<pos:position pos:line="32" pos:column="80"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="82">0<pos:position pos:line="32" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="85"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">add_ref<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name><name pos:line="33" pos:column="25">cb<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">-&gt;<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="29">packed_refs<pos:position pos:line="33" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="42">packed_entry<pos:position pos:line="33" pos:column="54"/></name></expr></argument>)<pos:position pos:line="33" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="56"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">oidcpy<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><operator pos:line="35" pos:column="16">&amp;<pos:position pos:line="35" pos:column="21"/></operator><name><name pos:line="35" pos:column="17">packed_entry<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">-&gt;<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="31">u<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">.<pos:position pos:line="35" pos:column="33"/></operator><name pos:line="35" pos:column="33">value<pos:position pos:line="35" pos:column="38"/></name><operator pos:line="35" pos:column="38">.<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="39">peeled<pos:position pos:line="35" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="47">&amp;<pos:position pos:line="35" pos:column="52"/></operator><name><name pos:line="35" pos:column="48">entry<pos:position pos:line="35" pos:column="53"/></name><operator pos:line="35" pos:column="53">-&gt;<pos:position pos:line="35" pos:column="58"/></operator><name pos:line="35" pos:column="55">u<pos:position pos:line="35" pos:column="56"/></name><operator pos:line="35" pos:column="56">.<pos:position pos:line="35" pos:column="57"/></operator><name pos:line="35" pos:column="57">value<pos:position pos:line="35" pos:column="62"/></name><operator pos:line="35" pos:column="62">.<pos:position pos:line="35" pos:column="63"/></operator><name pos:line="35" pos:column="63">peeled<pos:position pos:line="35" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="71"/></expr_stmt>

	<comment type="block" pos:line="37" pos:column="9">/* Schedule the loose reference for pruning if requested. */</comment>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">(<pos:position pos:line="38" pos:column="14"/></operator><name><name pos:line="38" pos:column="14">cb<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">-&gt;<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="18">flags<pos:position pos:line="38" pos:column="23"/></name></name> <operator pos:line="38" pos:column="24">&amp;<pos:position pos:line="38" pos:column="29"/></operator> <name pos:line="38" pos:column="26">PACK_REFS_PRUNE<pos:position pos:line="38" pos:column="41"/></name><operator pos:line="38" pos:column="41">)<pos:position pos:line="38" pos:column="42"/></operator></expr>)<pos:position pos:line="38" pos:column="43"/></condition><then pos:line="38" pos:column="43"> <block pos:line="38" pos:column="44">{
		<decl_stmt><decl><type><name><name pos:line="39" pos:column="17">struct<pos:position pos:line="39" pos:column="23"/></name> <name pos:line="39" pos:column="24">ref_to_prune<pos:position pos:line="39" pos:column="36"/></name></name> <modifier pos:line="39" pos:column="37">*<pos:position pos:line="39" pos:column="38"/></modifier></type><name pos:line="39" pos:column="38">n<pos:position pos:line="39" pos:column="39"/></name></decl>;<pos:position pos:line="39" pos:column="40"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">FLEX_ALLOC_STR<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">(<argument><expr><name pos:line="40" pos:column="32">n<pos:position pos:line="40" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="35">name<pos:position pos:line="40" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="41">entry<pos:position pos:line="40" pos:column="46"/></name><operator pos:line="40" pos:column="46">-&gt;<pos:position pos:line="40" pos:column="51"/></operator><name pos:line="40" pos:column="48">name<pos:position pos:line="40" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">hashcpy<pos:position pos:line="41" pos:column="24"/></name><argument_list pos:line="41" pos:column="24">(<argument><expr><name><name pos:line="41" pos:column="25">n<pos:position pos:line="41" pos:column="26"/></name><operator pos:line="41" pos:column="26">-&gt;<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="28">sha1<pos:position pos:line="41" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="34">entry<pos:position pos:line="41" pos:column="39"/></name><operator pos:line="41" pos:column="39">-&gt;<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="41">u<pos:position pos:line="41" pos:column="42"/></name><operator pos:line="41" pos:column="42">.<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="43">value<pos:position pos:line="41" pos:column="48"/></name><operator pos:line="41" pos:column="48">.<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="49">oid<pos:position pos:line="41" pos:column="52"/></name><operator pos:line="41" pos:column="52">.<pos:position pos:line="41" pos:column="53"/></operator><name pos:line="41" pos:column="53">hash<pos:position pos:line="41" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="42" pos:column="17">n<pos:position pos:line="42" pos:column="18"/></name><operator pos:line="42" pos:column="18">-&gt;<pos:position pos:line="42" pos:column="23"/></operator><name pos:line="42" pos:column="20">next<pos:position pos:line="42" pos:column="24"/></name></name> <operator pos:line="42" pos:column="25">=<pos:position pos:line="42" pos:column="26"/></operator> <name><name pos:line="42" pos:column="27">cb<pos:position pos:line="42" pos:column="29"/></name><operator pos:line="42" pos:column="29">-&gt;<pos:position pos:line="42" pos:column="34"/></operator><name pos:line="42" pos:column="31">ref_to_prune<pos:position pos:line="42" pos:column="43"/></name></name></expr>;<pos:position pos:line="42" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">cb<pos:position pos:line="43" pos:column="19"/></name><operator pos:line="43" pos:column="19">-&gt;<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="21">ref_to_prune<pos:position pos:line="43" pos:column="33"/></name></name> <operator pos:line="43" pos:column="34">=<pos:position pos:line="43" pos:column="35"/></operator> <name pos:line="43" pos:column="36">n<pos:position pos:line="43" pos:column="37"/></name></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>
	<return pos:line="45" pos:column="9">return <expr><literal type="number" pos:line="45" pos:column="16">0<pos:position pos:line="45" pos:column="17"/></literal></expr>;<pos:position pos:line="45" pos:column="18"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
