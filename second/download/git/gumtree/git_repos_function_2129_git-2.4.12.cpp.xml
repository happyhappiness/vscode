<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2129_git-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">add_ref_decoration<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">refname<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">unsigned<pos:position pos:line="1" pos:column="66"/></name> <name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">sha1<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="79">int<pos:position pos:line="1" pos:column="82"/></name></type> <name pos:line="1" pos:column="83">flags<pos:position pos:line="1" pos:column="88"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="90">void<pos:position pos:line="1" pos:column="94"/></name> <modifier pos:line="1" pos:column="95">*<pos:position pos:line="1" pos:column="96"/></modifier></type><name pos:line="1" pos:column="96">cb_data<pos:position pos:line="1" pos:column="103"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="104"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">obj<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">enum<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">decoration_type<pos:position pos:line="4" pos:column="29"/></name></name></type> <name pos:line="4" pos:column="30">type<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><name pos:line="4" pos:column="37">DECORATION_NONE<pos:position pos:line="4" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="53"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">assert<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><name pos:line="6" pos:column="16">cb_data<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">==<pos:position pos:line="6" pos:column="26"/></operator> <name pos:line="6" pos:column="27">NULL<pos:position pos:line="6" pos:column="31"/></name></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="33"/></expr_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">starts_with<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">refname<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="34">"refs/replace/"<pos:position pos:line="8" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="51"/></condition><then pos:line="8" pos:column="51"> <block pos:line="8" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">unsigned<pos:position pos:line="9" pos:column="25"/></name> <name pos:line="9" pos:column="26">char<pos:position pos:line="9" pos:column="30"/></name></type> <name><name pos:line="9" pos:column="31">original_sha1<pos:position pos:line="9" pos:column="44"/></name><index pos:line="9" pos:column="44">[<expr><literal type="number" pos:line="9" pos:column="45">20<pos:position pos:line="9" pos:column="47"/></literal></expr>]<pos:position pos:line="9" pos:column="48"/></index></name></decl>;<pos:position pos:line="9" pos:column="49"/></decl_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">check_replace_refs<pos:position pos:line="10" pos:column="40"/></name></expr>)<pos:position pos:line="10" pos:column="41"/></condition><then pos:line="10" pos:column="41">
			<block type="pseudo"><return pos:line="11" pos:column="25">return <expr><literal type="number" pos:line="11" pos:column="32">0<pos:position pos:line="11" pos:column="33"/></literal></expr>;<pos:position pos:line="11" pos:column="34"/></return></block></then></if>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">get_sha1_hex<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">refname<pos:position pos:line="12" pos:column="41"/></name> <operator pos:line="12" pos:column="42">+<pos:position pos:line="12" pos:column="43"/></operator> <literal type="number" pos:line="12" pos:column="44">13<pos:position pos:line="12" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="48">original_sha1<pos:position pos:line="12" pos:column="61"/></name></expr></argument>)<pos:position pos:line="12" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="63"/></condition><then pos:line="12" pos:column="63"> <block pos:line="12" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">warning<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><literal type="string" pos:line="13" pos:column="33">"invalid replace ref %s"<pos:position pos:line="13" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="59">refname<pos:position pos:line="13" pos:column="66"/></name></expr></argument>)<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="68"/></expr_stmt>
			<return pos:line="14" pos:column="25">return <expr><literal type="number" pos:line="14" pos:column="32">0<pos:position pos:line="14" pos:column="33"/></literal></expr>;<pos:position pos:line="14" pos:column="34"/></return>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="16" pos:column="17">obj<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <call><name pos:line="16" pos:column="23">parse_object<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">original_sha1<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="51"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">obj<pos:position pos:line="17" pos:column="24"/></name></expr>)<pos:position pos:line="17" pos:column="25"/></condition><then pos:line="17" pos:column="25">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="25">add_name_decoration<pos:position pos:line="18" pos:column="44"/></name><argument_list pos:line="18" pos:column="44">(<argument><expr><name pos:line="18" pos:column="45">DECORATION_GRAFTED<pos:position pos:line="18" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="65">"replaced"<pos:position pos:line="18" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="77">obj<pos:position pos:line="18" pos:column="80"/></name></expr></argument>)<pos:position pos:line="18" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="82"/></expr_stmt></block></then></if>
		<return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="22" pos:column="9">obj<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">parse_object<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">sha1<pos:position pos:line="22" pos:column="32"/></name></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">obj<pos:position pos:line="23" pos:column="17"/></name></expr>)<pos:position pos:line="23" pos:column="18"/></condition><then pos:line="23" pos:column="18">
		<block type="pseudo"><return pos:line="24" pos:column="17">return <expr><literal type="number" pos:line="24" pos:column="24">0<pos:position pos:line="24" pos:column="25"/></literal></expr>;<pos:position pos:line="24" pos:column="26"/></return></block></then></if>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name pos:line="26" pos:column="13">starts_with<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">refname<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="34">"refs/heads/"<pos:position pos:line="26" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="49"/></condition><then pos:line="26" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="17">type<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">DECORATION_REF_LOCAL<pos:position pos:line="27" pos:column="44"/></name></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt></block></then>
	<elseif pos:line="28" pos:column="9">else <if pos:line="28" pos:column="14">if <condition pos:line="28" pos:column="17">(<expr><call><name pos:line="28" pos:column="18">starts_with<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">refname<pos:position pos:line="28" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="39">"refs/remotes/"<pos:position pos:line="28" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="56"/></condition><then pos:line="28" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="17">type<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <name pos:line="29" pos:column="24">DECORATION_REF_REMOTE<pos:position pos:line="29" pos:column="45"/></name></expr>;<pos:position pos:line="29" pos:column="46"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="30" pos:column="9">else <if pos:line="30" pos:column="14">if <condition pos:line="30" pos:column="17">(<expr><call><name pos:line="30" pos:column="18">starts_with<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">refname<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="39">"refs/tags/"<pos:position pos:line="30" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53">
		<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="17">type<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <name pos:line="31" pos:column="24">DECORATION_REF_TAG<pos:position pos:line="31" pos:column="42"/></name></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="32" pos:column="9">else <if pos:line="32" pos:column="14">if <condition pos:line="32" pos:column="17">(<expr><operator pos:line="32" pos:column="18">!<pos:position pos:line="32" pos:column="19"/></operator><call><name pos:line="32" pos:column="19">strcmp<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">refname<pos:position pos:line="32" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="35">"refs/stash"<pos:position pos:line="32" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="49"/></condition><then pos:line="32" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="17">type<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">=<pos:position pos:line="33" pos:column="23"/></operator> <name pos:line="33" pos:column="24">DECORATION_REF_STASH<pos:position pos:line="33" pos:column="44"/></name></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="34" pos:column="9">else <if pos:line="34" pos:column="14">if <condition pos:line="34" pos:column="17">(<expr><operator pos:line="34" pos:column="18">!<pos:position pos:line="34" pos:column="19"/></operator><call><name pos:line="34" pos:column="19">strcmp<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><name pos:line="34" pos:column="26">refname<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="35">"HEAD"<pos:position pos:line="34" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="43"/></condition><then pos:line="34" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="17">type<pos:position pos:line="35" pos:column="21"/></name> <operator pos:line="35" pos:column="22">=<pos:position pos:line="35" pos:column="23"/></operator> <name pos:line="35" pos:column="24">DECORATION_REF_HEAD<pos:position pos:line="35" pos:column="43"/></name></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="37" pos:column="9">add_name_decoration<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name pos:line="37" pos:column="29">type<pos:position pos:line="37" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="35">refname<pos:position pos:line="37" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="44">obj<pos:position pos:line="37" pos:column="47"/></name></expr></argument>)<pos:position pos:line="37" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="49"/></expr_stmt>
	<while pos:line="38" pos:column="9">while <condition pos:line="38" pos:column="15">(<expr><name><name pos:line="38" pos:column="16">obj<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">-&gt;<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="21">type<pos:position pos:line="38" pos:column="25"/></name></name> <operator pos:line="38" pos:column="26">==<pos:position pos:line="38" pos:column="28"/></operator> <name pos:line="38" pos:column="29">OBJ_TAG<pos:position pos:line="38" pos:column="36"/></name></expr>)<pos:position pos:line="38" pos:column="37"/></condition> <block pos:line="38" pos:column="38">{
		<expr_stmt><expr><name pos:line="39" pos:column="17">obj<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">=<pos:position pos:line="39" pos:column="22"/></operator> <operator pos:line="39" pos:column="23">(<pos:position pos:line="39" pos:column="24"/></operator><operator pos:line="39" pos:column="24">(<pos:position pos:line="39" pos:column="25"/></operator>struct <name pos:line="39" pos:column="32">tag<pos:position pos:line="39" pos:column="35"/></name> <operator pos:line="39" pos:column="36">*<pos:position pos:line="39" pos:column="37"/></operator><operator pos:line="39" pos:column="37">)<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="38">obj<pos:position pos:line="39" pos:column="41"/></name><operator pos:line="39" pos:column="41">)<pos:position pos:line="39" pos:column="42"/></operator><operator pos:line="39" pos:column="42">-&gt;<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="44">tagged<pos:position pos:line="39" pos:column="50"/></name></expr>;<pos:position pos:line="39" pos:column="51"/></expr_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">!<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="22">obj<pos:position pos:line="40" pos:column="25"/></name></expr>)<pos:position pos:line="40" pos:column="26"/></condition><then pos:line="40" pos:column="26">
			<block type="pseudo"><break pos:line="41" pos:column="25">break;<pos:position pos:line="41" pos:column="31"/></break></block></then></if>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><operator pos:line="42" pos:column="21">!<pos:position pos:line="42" pos:column="22"/></operator><name><name pos:line="42" pos:column="22">obj<pos:position pos:line="42" pos:column="25"/></name><operator pos:line="42" pos:column="25">-&gt;<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="27">parsed<pos:position pos:line="42" pos:column="33"/></name></name></expr>)<pos:position pos:line="42" pos:column="34"/></condition><then pos:line="42" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="25">parse_object<pos:position pos:line="43" pos:column="37"/></name><argument_list pos:line="43" pos:column="37">(<argument><expr><name><name pos:line="43" pos:column="38">obj<pos:position pos:line="43" pos:column="41"/></name><operator pos:line="43" pos:column="41">-&gt;<pos:position pos:line="43" pos:column="46"/></operator><name pos:line="43" pos:column="43">sha1<pos:position pos:line="43" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">add_name_decoration<pos:position pos:line="44" pos:column="36"/></name><argument_list pos:line="44" pos:column="36">(<argument><expr><name pos:line="44" pos:column="37">DECORATION_REF_TAG<pos:position pos:line="44" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="57">refname<pos:position pos:line="44" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="66">obj<pos:position pos:line="44" pos:column="69"/></name></expr></argument>)<pos:position pos:line="44" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="71"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></while>
	<return pos:line="46" pos:column="9">return <expr><literal type="number" pos:line="46" pos:column="16">0<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
