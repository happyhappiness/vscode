<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4214_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_one_patchid<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">unsigned<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">next_sha1<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">git_SHA_CTX<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">ctx<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="72">struct<pos:position pos:line="1" pos:column="78"/></name> <name pos:line="1" pos:column="79">strbuf<pos:position pos:line="1" pos:column="85"/></name></name> <modifier pos:line="1" pos:column="86">*<pos:position pos:line="1" pos:column="87"/></modifier></type><name pos:line="1" pos:column="87">line_buf<pos:position pos:line="1" pos:column="95"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="96"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">patchlen<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><literal type="number" pos:line="3" pos:column="24">0<pos:position pos:line="3" pos:column="25"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="27">found_next<pos:position pos:line="3" pos:column="37"/></name> <init pos:line="3" pos:column="38">= <expr><literal type="number" pos:line="3" pos:column="40">0<pos:position pos:line="3" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">before<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><operator pos:line="4" pos:column="22">-<pos:position pos:line="4" pos:column="23"/></operator><literal type="number" pos:line="4" pos:column="23">1<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="26">after<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><operator pos:line="4" pos:column="34">-<pos:position pos:line="4" pos:column="35"/></operator><literal type="number" pos:line="4" pos:column="35">1<pos:position pos:line="4" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><call><name pos:line="6" pos:column="16">strbuf_getwholeline<pos:position pos:line="6" pos:column="35"/></name><argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">line_buf<pos:position pos:line="6" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="46">stdin<pos:position pos:line="6" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="6" pos:column="53">'\n'<pos:position pos:line="6" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="58"/></argument_list></call> <operator pos:line="6" pos:column="59">!=<pos:position pos:line="6" pos:column="61"/></operator> <name pos:line="6" pos:column="62">EOF<pos:position pos:line="6" pos:column="65"/></name></expr>)<pos:position pos:line="6" pos:column="66"/></condition> <block pos:line="6" pos:column="67">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">char<pos:position pos:line="7" pos:column="21"/></name> <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier></type><name pos:line="7" pos:column="23">line<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><name><name pos:line="7" pos:column="30">line_buf<pos:position pos:line="7" pos:column="38"/></name><operator pos:line="7" pos:column="38">-&gt;<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="40">buf<pos:position pos:line="7" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="44"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">char<pos:position pos:line="8" pos:column="21"/></name> <modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type><name pos:line="8" pos:column="23">p<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><name pos:line="8" pos:column="27">line<pos:position pos:line="8" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">len<pos:position pos:line="9" pos:column="24"/></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>

		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><call><name pos:line="11" pos:column="22">memcmp<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">line<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="35">"diff-tree "<pos:position pos:line="11" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="49">10<pos:position pos:line="11" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="53"/></condition><then pos:line="11" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="25">p<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">+=<pos:position pos:line="12" pos:column="29"/></operator> <literal type="number" pos:line="12" pos:column="30">10<pos:position pos:line="12" pos:column="32"/></literal></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt></block></then>
		<elseif pos:line="13" pos:column="17">else <if pos:line="13" pos:column="22">if <condition pos:line="13" pos:column="25">(<expr><operator pos:line="13" pos:column="26">!<pos:position pos:line="13" pos:column="27"/></operator><call><name pos:line="13" pos:column="27">memcmp<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">line<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="40">"commit "<pos:position pos:line="13" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="51">7<pos:position pos:line="13" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="54"/></condition><then pos:line="13" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="25">p<pos:position pos:line="14" pos:column="26"/></name> <operator pos:line="14" pos:column="27">+=<pos:position pos:line="14" pos:column="29"/></operator> <literal type="number" pos:line="14" pos:column="30">7<pos:position pos:line="14" pos:column="31"/></literal></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="15" pos:column="17">else <if pos:line="15" pos:column="22">if <condition pos:line="15" pos:column="25">(<expr><operator pos:line="15" pos:column="26">!<pos:position pos:line="15" pos:column="27"/></operator><call><name pos:line="15" pos:column="27">memcmp<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">(<argument><expr><name pos:line="15" pos:column="34">line<pos:position pos:line="15" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="40">"From "<pos:position pos:line="15" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="49">5<pos:position pos:line="15" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="52"/></condition><then pos:line="15" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="25">p<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">+=<pos:position pos:line="16" pos:column="29"/></operator> <literal type="number" pos:line="16" pos:column="30">5<pos:position pos:line="16" pos:column="31"/></literal></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="17" pos:column="17">else <if pos:line="17" pos:column="22">if <condition pos:line="17" pos:column="25">(<expr><operator pos:line="17" pos:column="26">!<pos:position pos:line="17" pos:column="27"/></operator><call><name pos:line="17" pos:column="27">memcmp<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">line<pos:position pos:line="17" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="40">"\\ "<pos:position pos:line="17" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="47">2<pos:position pos:line="17" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call> <operator pos:line="17" pos:column="50">&amp;&amp;<pos:position pos:line="17" pos:column="60"/></operator> <literal type="number" pos:line="17" pos:column="53">12<pos:position pos:line="17" pos:column="55"/></literal> <operator pos:line="17" pos:column="56">&lt;<pos:position pos:line="17" pos:column="60"/></operator> <call><name pos:line="17" pos:column="58">strlen<pos:position pos:line="17" pos:column="64"/></name><argument_list pos:line="17" pos:column="64">(<argument><expr><name pos:line="17" pos:column="65">line<pos:position pos:line="17" pos:column="69"/></name></expr></argument>)<pos:position pos:line="17" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="71"/></condition><then pos:line="17" pos:column="71">
			<block type="pseudo"><continue pos:line="18" pos:column="25">continue;<pos:position pos:line="18" pos:column="34"/></continue></block></then></if></elseif></if>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><call><name pos:line="20" pos:column="22">get_sha1_hex<pos:position pos:line="20" pos:column="34"/></name><argument_list pos:line="20" pos:column="34">(<argument><expr><name pos:line="20" pos:column="35">p<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="38">next_sha1<pos:position pos:line="20" pos:column="47"/></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="49"/></condition><then pos:line="20" pos:column="49"> <block pos:line="20" pos:column="50">{
			<expr_stmt><expr><name pos:line="21" pos:column="25">found_next<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">=<pos:position pos:line="21" pos:column="37"/></operator> <literal type="number" pos:line="21" pos:column="38">1<pos:position pos:line="21" pos:column="39"/></literal></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>
			<break pos:line="22" pos:column="25">break;<pos:position pos:line="22" pos:column="31"/></break>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="25" pos:column="17">/* Ignore commit comments */</comment>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><operator pos:line="26" pos:column="21">!<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="22">patchlen<pos:position pos:line="26" pos:column="30"/></name> <operator pos:line="26" pos:column="31">&amp;&amp;<pos:position pos:line="26" pos:column="41"/></operator> <call><name pos:line="26" pos:column="34">memcmp<pos:position pos:line="26" pos:column="40"/></name><argument_list pos:line="26" pos:column="40">(<argument><expr><name pos:line="26" pos:column="41">line<pos:position pos:line="26" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="47">"diff "<pos:position pos:line="26" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="56">5<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="59"/></condition><then pos:line="26" pos:column="59">
			<block type="pseudo"><continue pos:line="27" pos:column="25">continue;<pos:position pos:line="27" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="29" pos:column="17">/* Parsing diff header?  */</comment>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">before<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">==<pos:position pos:line="30" pos:column="30"/></operator> <operator pos:line="30" pos:column="31">-<pos:position pos:line="30" pos:column="32"/></operator><literal type="number" pos:line="30" pos:column="32">1<pos:position pos:line="30" pos:column="33"/></literal></expr>)<pos:position pos:line="30" pos:column="34"/></condition><then pos:line="30" pos:column="34"> <block pos:line="30" pos:column="35">{
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><operator pos:line="31" pos:column="29">!<pos:position pos:line="31" pos:column="30"/></operator><call><name pos:line="31" pos:column="30">memcmp<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><name pos:line="31" pos:column="37">line<pos:position pos:line="31" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="43">"index "<pos:position pos:line="31" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="53">6<pos:position pos:line="31" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="56"/></condition><then pos:line="31" pos:column="56">
				<block type="pseudo"><continue pos:line="32" pos:column="33">continue;<pos:position pos:line="32" pos:column="42"/></continue></block></then>
			<elseif pos:line="33" pos:column="25">else <if pos:line="33" pos:column="30">if <condition pos:line="33" pos:column="33">(<expr><operator pos:line="33" pos:column="34">!<pos:position pos:line="33" pos:column="35"/></operator><call><name pos:line="33" pos:column="35">memcmp<pos:position pos:line="33" pos:column="41"/></name><argument_list pos:line="33" pos:column="41">(<argument><expr><name pos:line="33" pos:column="42">line<pos:position pos:line="33" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="48">"--- "<pos:position pos:line="33" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="56">4<pos:position pos:line="33" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="59"/></condition><then pos:line="33" pos:column="59">
				<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="33">before<pos:position pos:line="34" pos:column="39"/></name> <operator pos:line="34" pos:column="40">=<pos:position pos:line="34" pos:column="41"/></operator> <name pos:line="34" pos:column="42">after<pos:position pos:line="34" pos:column="47"/></name> <operator pos:line="34" pos:column="48">=<pos:position pos:line="34" pos:column="49"/></operator> <literal type="number" pos:line="34" pos:column="50">1<pos:position pos:line="34" pos:column="51"/></literal></expr>;<pos:position pos:line="34" pos:column="52"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="35" pos:column="25">else <if pos:line="35" pos:column="30">if <condition pos:line="35" pos:column="33">(<expr><operator pos:line="35" pos:column="34">!<pos:position pos:line="35" pos:column="35"/></operator><call><name pos:line="35" pos:column="35">isalpha<pos:position pos:line="35" pos:column="42"/></name><argument_list pos:line="35" pos:column="42">(<argument><expr><name><name pos:line="35" pos:column="43">line<pos:position pos:line="35" pos:column="47"/></name><index pos:line="35" pos:column="47">[<expr><literal type="number" pos:line="35" pos:column="48">0<pos:position pos:line="35" pos:column="49"/></literal></expr>]<pos:position pos:line="35" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="35" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="52"/></condition><then pos:line="35" pos:column="52">
				<block type="pseudo"><break pos:line="36" pos:column="33">break;<pos:position pos:line="36" pos:column="39"/></break></block></then></if></elseif></if>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="39" pos:column="17">/* Looking for a valid hunk header?  */</comment>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">before<pos:position pos:line="40" pos:column="27"/></name> <operator pos:line="40" pos:column="28">==<pos:position pos:line="40" pos:column="30"/></operator> <literal type="number" pos:line="40" pos:column="31">0<pos:position pos:line="40" pos:column="32"/></literal> <operator pos:line="40" pos:column="33">&amp;&amp;<pos:position pos:line="40" pos:column="43"/></operator> <name pos:line="40" pos:column="36">after<pos:position pos:line="40" pos:column="41"/></name> <operator pos:line="40" pos:column="42">==<pos:position pos:line="40" pos:column="44"/></operator> <literal type="number" pos:line="40" pos:column="45">0<pos:position pos:line="40" pos:column="46"/></literal></expr>)<pos:position pos:line="40" pos:column="47"/></condition><then pos:line="40" pos:column="47"> <block pos:line="40" pos:column="48">{
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><operator pos:line="41" pos:column="29">!<pos:position pos:line="41" pos:column="30"/></operator><call><name pos:line="41" pos:column="30">memcmp<pos:position pos:line="41" pos:column="36"/></name><argument_list pos:line="41" pos:column="36">(<argument><expr><name pos:line="41" pos:column="37">line<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="43">"@@ -"<pos:position pos:line="41" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="51">4<pos:position pos:line="41" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="54"/></condition><then pos:line="41" pos:column="54"> <block pos:line="41" pos:column="55">{
				<comment type="block" pos:line="42" pos:column="33">/* Parse next hunk, but ignore line numbers.  */</comment>
				<expr_stmt><expr><call><name pos:line="43" pos:column="33">scan_hunk_header<pos:position pos:line="43" pos:column="49"/></name><argument_list pos:line="43" pos:column="49">(<argument><expr><name pos:line="43" pos:column="50">line<pos:position pos:line="43" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="56">&amp;<pos:position pos:line="43" pos:column="61"/></operator><name pos:line="43" pos:column="57">before<pos:position pos:line="43" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="65">&amp;<pos:position pos:line="43" pos:column="70"/></operator><name pos:line="43" pos:column="66">after<pos:position pos:line="43" pos:column="71"/></name></expr></argument>)<pos:position pos:line="43" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="73"/></expr_stmt>
				<continue pos:line="44" pos:column="33">continue;<pos:position pos:line="44" pos:column="42"/></continue>
			}<pos:position pos:line="45" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="47" pos:column="25">/* Split at the end of the patch.  */</comment>
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><call><name pos:line="48" pos:column="29">memcmp<pos:position pos:line="48" pos:column="35"/></name><argument_list pos:line="48" pos:column="35">(<argument><expr><name pos:line="48" pos:column="36">line<pos:position pos:line="48" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="42">"diff "<pos:position pos:line="48" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="51">5<pos:position pos:line="48" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="54"/></condition><then pos:line="48" pos:column="54">
				<block type="pseudo"><break pos:line="49" pos:column="33">break;<pos:position pos:line="49" pos:column="39"/></break></block></then></if>

			<comment type="block" pos:line="51" pos:column="25">/* Else we're parsing another header.  */</comment>
			<expr_stmt><expr><name pos:line="52" pos:column="25">before<pos:position pos:line="52" pos:column="31"/></name> <operator pos:line="52" pos:column="32">=<pos:position pos:line="52" pos:column="33"/></operator> <name pos:line="52" pos:column="34">after<pos:position pos:line="52" pos:column="39"/></name> <operator pos:line="52" pos:column="40">=<pos:position pos:line="52" pos:column="41"/></operator> <operator pos:line="52" pos:column="42">-<pos:position pos:line="52" pos:column="43"/></operator><literal type="number" pos:line="52" pos:column="43">1<pos:position pos:line="52" pos:column="44"/></literal></expr>;<pos:position pos:line="52" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="53" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="55" pos:column="17">/* If we get here, we're inside a hunk.  */</comment>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name><name pos:line="56" pos:column="21">line<pos:position pos:line="56" pos:column="25"/></name><index pos:line="56" pos:column="25">[<expr><literal type="number" pos:line="56" pos:column="26">0<pos:position pos:line="56" pos:column="27"/></literal></expr>]<pos:position pos:line="56" pos:column="28"/></index></name> <operator pos:line="56" pos:column="29">==<pos:position pos:line="56" pos:column="31"/></operator> <literal type="char" pos:line="56" pos:column="32">'-'<pos:position pos:line="56" pos:column="35"/></literal> <operator pos:line="56" pos:column="36">||<pos:position pos:line="56" pos:column="38"/></operator> <name><name pos:line="56" pos:column="39">line<pos:position pos:line="56" pos:column="43"/></name><index pos:line="56" pos:column="43">[<expr><literal type="number" pos:line="56" pos:column="44">0<pos:position pos:line="56" pos:column="45"/></literal></expr>]<pos:position pos:line="56" pos:column="46"/></index></name> <operator pos:line="56" pos:column="47">==<pos:position pos:line="56" pos:column="49"/></operator> <literal type="char" pos:line="56" pos:column="50">' '<pos:position pos:line="56" pos:column="53"/></literal></expr>)<pos:position pos:line="56" pos:column="54"/></condition><then pos:line="56" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><name pos:line="57" pos:column="25">before<pos:position pos:line="57" pos:column="31"/></name><operator pos:line="57" pos:column="31">--<pos:position pos:line="57" pos:column="33"/></operator></expr>;<pos:position pos:line="57" pos:column="34"/></expr_stmt></block></then></if>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name><name pos:line="58" pos:column="21">line<pos:position pos:line="58" pos:column="25"/></name><index pos:line="58" pos:column="25">[<expr><literal type="number" pos:line="58" pos:column="26">0<pos:position pos:line="58" pos:column="27"/></literal></expr>]<pos:position pos:line="58" pos:column="28"/></index></name> <operator pos:line="58" pos:column="29">==<pos:position pos:line="58" pos:column="31"/></operator> <literal type="char" pos:line="58" pos:column="32">'+'<pos:position pos:line="58" pos:column="35"/></literal> <operator pos:line="58" pos:column="36">||<pos:position pos:line="58" pos:column="38"/></operator> <name><name pos:line="58" pos:column="39">line<pos:position pos:line="58" pos:column="43"/></name><index pos:line="58" pos:column="43">[<expr><literal type="number" pos:line="58" pos:column="44">0<pos:position pos:line="58" pos:column="45"/></literal></expr>]<pos:position pos:line="58" pos:column="46"/></index></name> <operator pos:line="58" pos:column="47">==<pos:position pos:line="58" pos:column="49"/></operator> <literal type="char" pos:line="58" pos:column="50">' '<pos:position pos:line="58" pos:column="53"/></literal></expr>)<pos:position pos:line="58" pos:column="54"/></condition><then pos:line="58" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="25">after<pos:position pos:line="59" pos:column="30"/></name><operator pos:line="59" pos:column="30">--<pos:position pos:line="59" pos:column="32"/></operator></expr>;<pos:position pos:line="59" pos:column="33"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="61" pos:column="17">/* Compute the sha without whitespace */</comment>
		<expr_stmt><expr><name pos:line="62" pos:column="17">len<pos:position pos:line="62" pos:column="20"/></name> <operator pos:line="62" pos:column="21">=<pos:position pos:line="62" pos:column="22"/></operator> <call><name pos:line="62" pos:column="23">remove_space<pos:position pos:line="62" pos:column="35"/></name><argument_list pos:line="62" pos:column="35">(<argument><expr><name pos:line="62" pos:column="36">line<pos:position pos:line="62" pos:column="40"/></name></expr></argument>)<pos:position pos:line="62" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="63" pos:column="17">patchlen<pos:position pos:line="63" pos:column="25"/></name> <operator pos:line="63" pos:column="26">+=<pos:position pos:line="63" pos:column="28"/></operator> <name pos:line="63" pos:column="29">len<pos:position pos:line="63" pos:column="32"/></name></expr>;<pos:position pos:line="63" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">git_SHA1_Update<pos:position pos:line="64" pos:column="32"/></name><argument_list pos:line="64" pos:column="32">(<argument><expr><name pos:line="64" pos:column="33">ctx<pos:position pos:line="64" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="38">line<pos:position pos:line="64" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="44">len<pos:position pos:line="64" pos:column="47"/></name></expr></argument>)<pos:position pos:line="64" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="65" pos:column="10"/></block></while>

	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><operator pos:line="67" pos:column="13">!<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="14">found_next<pos:position pos:line="67" pos:column="24"/></name></expr>)<pos:position pos:line="67" pos:column="25"/></condition><then pos:line="67" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="17">hashclr<pos:position pos:line="68" pos:column="24"/></name><argument_list pos:line="68" pos:column="24">(<argument><expr><name pos:line="68" pos:column="25">next_sha1<pos:position pos:line="68" pos:column="34"/></name></expr></argument>)<pos:position pos:line="68" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="36"/></expr_stmt></block></then></if>

	<return pos:line="70" pos:column="9">return <expr><name pos:line="70" pos:column="16">patchlen<pos:position pos:line="70" pos:column="24"/></name></expr>;<pos:position pos:line="70" pos:column="25"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
