<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_480_git-2.10.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">grab_sub_body_contents<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">atom_value<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">val<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">int<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">deref<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="71">struct<pos:position pos:line="1" pos:column="77"/></name> <name pos:line="1" pos:column="78">object<pos:position pos:line="1" pos:column="84"/></name></name> <modifier pos:line="1" pos:column="85">*<pos:position pos:line="1" pos:column="86"/></modifier></type><name pos:line="1" pos:column="86">obj<pos:position pos:line="1" pos:column="89"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="91">void<pos:position pos:line="1" pos:column="95"/></name> <modifier pos:line="1" pos:column="96">*<pos:position pos:line="1" pos:column="97"/></modifier></type><name pos:line="1" pos:column="97">buf<pos:position pos:line="1" pos:column="100"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="102">unsigned<pos:position pos:line="1" pos:column="110"/></name> <name pos:line="1" pos:column="111">long<pos:position pos:line="1" pos:column="115"/></name></type> <name pos:line="1" pos:column="116">sz<pos:position pos:line="1" pos:column="118"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="119"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">subpos<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name pos:line="4" pos:column="30">NULL<pos:position pos:line="4" pos:column="34"/></name></expr></init></decl>, <modifier pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="37">bodypos<pos:position pos:line="4" pos:column="44"/></name> <init pos:line="4" pos:column="45">= <expr><name pos:line="4" pos:column="47">NULL<pos:position pos:line="4" pos:column="51"/></name></expr></init></decl>, <modifier pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="54">sigpos<pos:position pos:line="4" pos:column="60"/></name> <init pos:line="4" pos:column="61">= <expr><name pos:line="4" pos:column="63">NULL<pos:position pos:line="4" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="68"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">sublen<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><literal type="number" pos:line="5" pos:column="32">0<pos:position pos:line="5" pos:column="33"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="35">bodylen<pos:position pos:line="5" pos:column="42"/></name> <init pos:line="5" pos:column="43">= <expr><literal type="number" pos:line="5" pos:column="45">0<pos:position pos:line="5" pos:column="46"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="48">nonsiglen<pos:position pos:line="5" pos:column="57"/></name> <init pos:line="5" pos:column="58">= <expr><literal type="number" pos:line="5" pos:column="60">0<pos:position pos:line="5" pos:column="61"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="63">siglen<pos:position pos:line="5" pos:column="69"/></name> <init pos:line="5" pos:column="70">= <expr><literal type="number" pos:line="5" pos:column="72">0<pos:position pos:line="5" pos:column="73"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="74"/></decl_stmt>

	<for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init><expr><name pos:line="7" pos:column="14">i<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr>;<pos:position pos:line="7" pos:column="20"/></init> <condition><expr><name pos:line="7" pos:column="21">i<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&lt;<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="25">used_atom_cnt<pos:position pos:line="7" pos:column="38"/></name></expr>;<pos:position pos:line="7" pos:column="39"/></condition> <incr><expr><name pos:line="7" pos:column="40">i<pos:position pos:line="7" pos:column="41"/></name><operator pos:line="7" pos:column="41">++<pos:position pos:line="7" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="44"/></control> <block pos:line="7" pos:column="45">{
		<decl_stmt><decl><type><name><name pos:line="8" pos:column="17">struct<pos:position pos:line="8" pos:column="23"/></name> <name pos:line="8" pos:column="24">used_atom<pos:position pos:line="8" pos:column="33"/></name></name> <modifier pos:line="8" pos:column="34">*<pos:position pos:line="8" pos:column="35"/></modifier></type><name pos:line="8" pos:column="35">atom<pos:position pos:line="8" pos:column="39"/></name> <init pos:line="8" pos:column="40">= <expr><operator pos:line="8" pos:column="42">&amp;<pos:position pos:line="8" pos:column="47"/></operator><name><name pos:line="8" pos:column="43">used_atom<pos:position pos:line="8" pos:column="52"/></name><index pos:line="8" pos:column="52">[<expr><name pos:line="8" pos:column="53">i<pos:position pos:line="8" pos:column="54"/></name></expr>]<pos:position pos:line="8" pos:column="55"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="9" pos:column="17">const<pos:position pos:line="9" pos:column="22"/></specifier> <name pos:line="9" pos:column="23">char<pos:position pos:line="9" pos:column="27"/></name> <modifier pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></modifier></type><name pos:line="9" pos:column="29">name<pos:position pos:line="9" pos:column="33"/></name> <init pos:line="9" pos:column="34">= <expr><name><name pos:line="9" pos:column="36">atom<pos:position pos:line="9" pos:column="40"/></name><operator pos:line="9" pos:column="40">-&gt;<pos:position pos:line="9" pos:column="45"/></operator><name pos:line="9" pos:column="42">name<pos:position pos:line="9" pos:column="46"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="47"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="10" pos:column="17">struct<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">atom_value<pos:position pos:line="10" pos:column="34"/></name></name> <modifier pos:line="10" pos:column="35">*<pos:position pos:line="10" pos:column="36"/></modifier></type><name pos:line="10" pos:column="36">v<pos:position pos:line="10" pos:column="37"/></name> <init pos:line="10" pos:column="38">= <expr><operator pos:line="10" pos:column="40">&amp;<pos:position pos:line="10" pos:column="45"/></operator><name><name pos:line="10" pos:column="41">val<pos:position pos:line="10" pos:column="44"/></name><index pos:line="10" pos:column="44">[<expr><name pos:line="10" pos:column="45">i<pos:position pos:line="10" pos:column="46"/></name></expr>]<pos:position pos:line="10" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="10" pos:column="48"/></decl_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><operator pos:line="11" pos:column="22">!<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">deref<pos:position pos:line="11" pos:column="28"/></name> <operator pos:line="11" pos:column="29">!=<pos:position pos:line="11" pos:column="31"/></operator> <operator pos:line="11" pos:column="32">(<pos:position pos:line="11" pos:column="33"/></operator><operator pos:line="11" pos:column="33">*<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">name<pos:position pos:line="11" pos:column="38"/></name> <operator pos:line="11" pos:column="39">==<pos:position pos:line="11" pos:column="41"/></operator> <literal type="char" pos:line="11" pos:column="42">'*'<pos:position pos:line="11" pos:column="45"/></literal><operator pos:line="11" pos:column="45">)<pos:position pos:line="11" pos:column="46"/></operator></expr>)<pos:position pos:line="11" pos:column="47"/></condition><then pos:line="11" pos:column="47">
			<block type="pseudo"><continue pos:line="12" pos:column="25">continue;<pos:position pos:line="12" pos:column="34"/></continue></block></then></if>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">deref<pos:position pos:line="13" pos:column="26"/></name></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="25">name<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">++<pos:position pos:line="14" pos:column="31"/></operator></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt></block></then></if>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">strcmp<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">name<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="34">"subject"<pos:position pos:line="15" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call> <operator pos:line="15" pos:column="45">&amp;&amp;<pos:position pos:line="15" pos:column="55"/></operator>
		    <call><name pos:line="16" pos:column="21">strcmp<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">name<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="34">"body"<pos:position pos:line="16" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call> <operator pos:line="16" pos:column="42">&amp;&amp;<pos:position pos:line="16" pos:column="52"/></operator>
		    <operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><call><name pos:line="17" pos:column="22">starts_with<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">name<pos:position pos:line="17" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="40">"contents"<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="52"/></condition><then pos:line="17" pos:column="52">
			<block type="pseudo"><continue pos:line="18" pos:column="25">continue;<pos:position pos:line="18" pos:column="34"/></continue></block></then></if>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><operator pos:line="19" pos:column="21">!<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">subpos<pos:position pos:line="19" pos:column="28"/></name></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="25">find_subpos<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><name pos:line="20" pos:column="37">buf<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="42">sz<pos:position pos:line="20" pos:column="44"/></name></expr></argument>,
				    <argument><expr><operator pos:line="21" pos:column="37">&amp;<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="38">subpos<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="46">&amp;<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="47">sublen<pos:position pos:line="21" pos:column="53"/></name></expr></argument>,
				    <argument><expr><operator pos:line="22" pos:column="37">&amp;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="38">bodypos<pos:position pos:line="22" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="47">&amp;<pos:position pos:line="22" pos:column="52"/></operator><name pos:line="22" pos:column="48">bodylen<pos:position pos:line="22" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="57">&amp;<pos:position pos:line="22" pos:column="62"/></operator><name pos:line="22" pos:column="58">nonsiglen<pos:position pos:line="22" pos:column="67"/></name></expr></argument>,
				    <argument><expr><operator pos:line="23" pos:column="37">&amp;<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="38">sigpos<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="46">&amp;<pos:position pos:line="23" pos:column="51"/></operator><name pos:line="23" pos:column="47">siglen<pos:position pos:line="23" pos:column="53"/></name></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="55"/></expr_stmt></block></then></if>

		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name><name pos:line="25" pos:column="21">atom<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">-&gt;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="27">u<pos:position pos:line="25" pos:column="28"/></name><operator pos:line="25" pos:column="28">.<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="29">contents<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">.<pos:position pos:line="25" pos:column="38"/></operator><name pos:line="25" pos:column="38">option<pos:position pos:line="25" pos:column="44"/></name></name> <operator pos:line="25" pos:column="45">==<pos:position pos:line="25" pos:column="47"/></operator> <name pos:line="25" pos:column="48">C_SUB<pos:position pos:line="25" pos:column="53"/></name></expr>)<pos:position pos:line="25" pos:column="54"/></condition><then pos:line="25" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="25">v<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">-&gt;<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="28">s<pos:position pos:line="26" pos:column="29"/></name></name> <operator pos:line="26" pos:column="30">=<pos:position pos:line="26" pos:column="31"/></operator> <call><name pos:line="26" pos:column="32">copy_subject<pos:position pos:line="26" pos:column="44"/></name><argument_list pos:line="26" pos:column="44">(<argument><expr><name pos:line="26" pos:column="45">subpos<pos:position pos:line="26" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="53">sublen<pos:position pos:line="26" pos:column="59"/></name></expr></argument>)<pos:position pos:line="26" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="61"/></expr_stmt></block></then>
		<elseif pos:line="27" pos:column="17">else <if pos:line="27" pos:column="22">if <condition pos:line="27" pos:column="25">(<expr><name><name pos:line="27" pos:column="26">atom<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">-&gt;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="32">u<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">.<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">contents<pos:position pos:line="27" pos:column="42"/></name><operator pos:line="27" pos:column="42">.<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="43">option<pos:position pos:line="27" pos:column="49"/></name></name> <operator pos:line="27" pos:column="50">==<pos:position pos:line="27" pos:column="52"/></operator> <name pos:line="27" pos:column="53">C_BODY_DEP<pos:position pos:line="27" pos:column="63"/></name></expr>)<pos:position pos:line="27" pos:column="64"/></condition><then pos:line="27" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="28" pos:column="25">v<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">-&gt;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="28">s<pos:position pos:line="28" pos:column="29"/></name></name> <operator pos:line="28" pos:column="30">=<pos:position pos:line="28" pos:column="31"/></operator> <call><name pos:line="28" pos:column="32">xmemdupz<pos:position pos:line="28" pos:column="40"/></name><argument_list pos:line="28" pos:column="40">(<argument><expr><name pos:line="28" pos:column="41">bodypos<pos:position pos:line="28" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="50">bodylen<pos:position pos:line="28" pos:column="57"/></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="29" pos:column="17">else <if pos:line="29" pos:column="22">if <condition pos:line="29" pos:column="25">(<expr><name><name pos:line="29" pos:column="26">atom<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">-&gt;<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="32">u<pos:position pos:line="29" pos:column="33"/></name><operator pos:line="29" pos:column="33">.<pos:position pos:line="29" pos:column="34"/></operator><name pos:line="29" pos:column="34">contents<pos:position pos:line="29" pos:column="42"/></name><operator pos:line="29" pos:column="42">.<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="43">option<pos:position pos:line="29" pos:column="49"/></name></name> <operator pos:line="29" pos:column="50">==<pos:position pos:line="29" pos:column="52"/></operator> <name pos:line="29" pos:column="53">C_BODY<pos:position pos:line="29" pos:column="59"/></name></expr>)<pos:position pos:line="29" pos:column="60"/></condition><then pos:line="29" pos:column="60">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="30" pos:column="25">v<pos:position pos:line="30" pos:column="26"/></name><operator pos:line="30" pos:column="26">-&gt;<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="28">s<pos:position pos:line="30" pos:column="29"/></name></name> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <call><name pos:line="30" pos:column="32">xmemdupz<pos:position pos:line="30" pos:column="40"/></name><argument_list pos:line="30" pos:column="40">(<argument><expr><name pos:line="30" pos:column="41">bodypos<pos:position pos:line="30" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="50">nonsiglen<pos:position pos:line="30" pos:column="59"/></name></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="61"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="31" pos:column="17">else <if pos:line="31" pos:column="22">if <condition pos:line="31" pos:column="25">(<expr><name><name pos:line="31" pos:column="26">atom<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">-&gt;<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="32">u<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">.<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">contents<pos:position pos:line="31" pos:column="42"/></name><operator pos:line="31" pos:column="42">.<pos:position pos:line="31" pos:column="43"/></operator><name pos:line="31" pos:column="43">option<pos:position pos:line="31" pos:column="49"/></name></name> <operator pos:line="31" pos:column="50">==<pos:position pos:line="31" pos:column="52"/></operator> <name pos:line="31" pos:column="53">C_SIG<pos:position pos:line="31" pos:column="58"/></name></expr>)<pos:position pos:line="31" pos:column="59"/></condition><then pos:line="31" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="25">v<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">-&gt;<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="28">s<pos:position pos:line="32" pos:column="29"/></name></name> <operator pos:line="32" pos:column="30">=<pos:position pos:line="32" pos:column="31"/></operator> <call><name pos:line="32" pos:column="32">xmemdupz<pos:position pos:line="32" pos:column="40"/></name><argument_list pos:line="32" pos:column="40">(<argument><expr><name pos:line="32" pos:column="41">sigpos<pos:position pos:line="32" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="49">siglen<pos:position pos:line="32" pos:column="55"/></name></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="33" pos:column="17">else <if pos:line="33" pos:column="22">if <condition pos:line="33" pos:column="25">(<expr><name><name pos:line="33" pos:column="26">atom<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">-&gt;<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="32">u<pos:position pos:line="33" pos:column="33"/></name><operator pos:line="33" pos:column="33">.<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">contents<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">.<pos:position pos:line="33" pos:column="43"/></operator><name pos:line="33" pos:column="43">option<pos:position pos:line="33" pos:column="49"/></name></name> <operator pos:line="33" pos:column="50">==<pos:position pos:line="33" pos:column="52"/></operator> <name pos:line="33" pos:column="53">C_LINES<pos:position pos:line="33" pos:column="60"/></name></expr>)<pos:position pos:line="33" pos:column="61"/></condition><then pos:line="33" pos:column="61"> <block pos:line="33" pos:column="62">{
			<decl_stmt><decl><type><name><name pos:line="34" pos:column="25">struct<pos:position pos:line="34" pos:column="31"/></name> <name pos:line="34" pos:column="32">strbuf<pos:position pos:line="34" pos:column="38"/></name></name></type> <name pos:line="34" pos:column="39">s<pos:position pos:line="34" pos:column="40"/></name> <init pos:line="34" pos:column="41">= <expr><name pos:line="34" pos:column="43">STRBUF_INIT<pos:position pos:line="34" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="55"/></decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="35" pos:column="25">const<pos:position pos:line="35" pos:column="30"/></specifier> <name pos:line="35" pos:column="31">char<pos:position pos:line="35" pos:column="35"/></name> <modifier pos:line="35" pos:column="36">*<pos:position pos:line="35" pos:column="37"/></modifier></type><name pos:line="35" pos:column="37">contents_end<pos:position pos:line="35" pos:column="49"/></name> <init pos:line="35" pos:column="50">= <expr><name pos:line="35" pos:column="52">bodylen<pos:position pos:line="35" pos:column="59"/></name> <operator pos:line="35" pos:column="60">+<pos:position pos:line="35" pos:column="61"/></operator> <name pos:line="35" pos:column="62">bodypos<pos:position pos:line="35" pos:column="69"/></name> <operator pos:line="35" pos:column="70">-<pos:position pos:line="35" pos:column="71"/></operator> <name pos:line="35" pos:column="72">siglen<pos:position pos:line="35" pos:column="78"/></name></expr></init></decl>;<pos:position pos:line="35" pos:column="79"/></decl_stmt>

			<comment type="block" pos:line="37" pos:column="25">/*  Size is the length of the message after removing the signature */</comment>
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">append_lines<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">(<argument><expr><operator pos:line="38" pos:column="38">&amp;<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="39">s<pos:position pos:line="38" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="42">subpos<pos:position pos:line="38" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="50">contents_end<pos:position pos:line="38" pos:column="62"/></name> <operator pos:line="38" pos:column="63">-<pos:position pos:line="38" pos:column="64"/></operator> <name pos:line="38" pos:column="65">subpos<pos:position pos:line="38" pos:column="71"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="73">atom<pos:position pos:line="38" pos:column="77"/></name><operator pos:line="38" pos:column="77">-&gt;<pos:position pos:line="38" pos:column="82"/></operator><name pos:line="38" pos:column="79">u<pos:position pos:line="38" pos:column="80"/></name><operator pos:line="38" pos:column="80">.<pos:position pos:line="38" pos:column="81"/></operator><name pos:line="38" pos:column="81">contents<pos:position pos:line="38" pos:column="89"/></name><operator pos:line="38" pos:column="89">.<pos:position pos:line="38" pos:column="90"/></operator><name pos:line="38" pos:column="90">nlines<pos:position pos:line="38" pos:column="96"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="98"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="39" pos:column="25">v<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">-&gt;<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="28">s<pos:position pos:line="39" pos:column="29"/></name></name> <operator pos:line="39" pos:column="30">=<pos:position pos:line="39" pos:column="31"/></operator> <call><name pos:line="39" pos:column="32">strbuf_detach<pos:position pos:line="39" pos:column="45"/></name><argument_list pos:line="39" pos:column="45">(<argument><expr><operator pos:line="39" pos:column="46">&amp;<pos:position pos:line="39" pos:column="51"/></operator><name pos:line="39" pos:column="47">s<pos:position pos:line="39" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="50">NULL<pos:position pos:line="39" pos:column="54"/></name></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if></elseif> <elseif pos:line="40" pos:column="19">else <if pos:line="40" pos:column="24">if <condition pos:line="40" pos:column="27">(<expr><name><name pos:line="40" pos:column="28">atom<pos:position pos:line="40" pos:column="32"/></name><operator pos:line="40" pos:column="32">-&gt;<pos:position pos:line="40" pos:column="37"/></operator><name pos:line="40" pos:column="34">u<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">.<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="36">contents<pos:position pos:line="40" pos:column="44"/></name><operator pos:line="40" pos:column="44">.<pos:position pos:line="40" pos:column="45"/></operator><name pos:line="40" pos:column="45">option<pos:position pos:line="40" pos:column="51"/></name></name> <operator pos:line="40" pos:column="52">==<pos:position pos:line="40" pos:column="54"/></operator> <name pos:line="40" pos:column="55">C_BARE<pos:position pos:line="40" pos:column="61"/></name></expr>)<pos:position pos:line="40" pos:column="62"/></condition><then pos:line="40" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="41" pos:column="25">v<pos:position pos:line="41" pos:column="26"/></name><operator pos:line="41" pos:column="26">-&gt;<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="28">s<pos:position pos:line="41" pos:column="29"/></name></name> <operator pos:line="41" pos:column="30">=<pos:position pos:line="41" pos:column="31"/></operator> <call><name pos:line="41" pos:column="32">xstrdup<pos:position pos:line="41" pos:column="39"/></name><argument_list pos:line="41" pos:column="39">(<argument><expr><name pos:line="41" pos:column="40">subpos<pos:position pos:line="41" pos:column="46"/></name></expr></argument>)<pos:position pos:line="41" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="48"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="42" pos:column="10"/></block></for>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
