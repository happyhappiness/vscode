<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5726_git-2.7.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_for_each_entry<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">ref_cache<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">refs<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">base<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="2" pos:column="30">each_ref_entry_fn<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">fn<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">void<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">cb_data<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">packed_ref_cache<pos:position pos:line="4" pos:column="32"/></name></name> <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">packed_ref_cache<pos:position pos:line="4" pos:column="50"/></name></decl>;<pos:position pos:line="4" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">ref_dir<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">loose_dir<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">ref_dir<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">packed_dir<pos:position pos:line="6" pos:column="35"/></name></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">retval<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * We must make sure that all loose refs are read before accessing the
	 * packed-refs file; this avoids a race condition in which loose refs
	 * are migrated to the packed-refs file by a simultaneous process, but
	 * our in-memory view is from before the migration. get_packed_ref_cache()
	 * takes care of making sure our view is up to date with what is on
	 * disk.
	 */</comment>
	<expr_stmt><expr><name pos:line="17" pos:column="9">loose_dir<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <call><name pos:line="17" pos:column="21">get_loose_refs<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">refs<pos:position pos:line="17" pos:column="40"/></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">base<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">&amp;&amp;<pos:position pos:line="18" pos:column="28"/></operator> <operator pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">base<pos:position pos:line="18" pos:column="26"/></name></expr>)<pos:position pos:line="18" pos:column="27"/></condition><then pos:line="18" pos:column="27"> <block pos:line="18" pos:column="28">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">loose_dir<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <call><name pos:line="19" pos:column="29">find_containing_dir<pos:position pos:line="19" pos:column="48"/></name><argument_list pos:line="19" pos:column="48">(<argument><expr><name pos:line="19" pos:column="49">loose_dir<pos:position pos:line="19" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="60">base<pos:position pos:line="19" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="66">0<pos:position pos:line="19" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="69"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">loose_dir<pos:position pos:line="21" pos:column="22"/></name></expr>)<pos:position pos:line="21" pos:column="23"/></condition><then pos:line="21" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="17">prime_ref_dir<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">loose_dir<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="24" pos:column="9">packed_ref_cache<pos:position pos:line="24" pos:column="25"/></name> <operator pos:line="24" pos:column="26">=<pos:position pos:line="24" pos:column="27"/></operator> <call><name pos:line="24" pos:column="28">get_packed_ref_cache<pos:position pos:line="24" pos:column="48"/></name><argument_list pos:line="24" pos:column="48">(<argument><expr><name pos:line="24" pos:column="49">refs<pos:position pos:line="24" pos:column="53"/></name></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">acquire_packed_ref_cache<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">packed_ref_cache<pos:position pos:line="25" pos:column="50"/></name></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">packed_dir<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <call><name pos:line="26" pos:column="22">get_packed_ref_dir<pos:position pos:line="26" pos:column="40"/></name><argument_list pos:line="26" pos:column="40">(<argument><expr><name pos:line="26" pos:column="41">packed_ref_cache<pos:position pos:line="26" pos:column="57"/></name></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">base<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">&amp;&amp;<pos:position pos:line="27" pos:column="28"/></operator> <operator pos:line="27" pos:column="21">*<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="22">base<pos:position pos:line="27" pos:column="26"/></name></expr>)<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27"> <block pos:line="27" pos:column="28">{
		<expr_stmt><expr><name pos:line="28" pos:column="17">packed_dir<pos:position pos:line="28" pos:column="27"/></name> <operator pos:line="28" pos:column="28">=<pos:position pos:line="28" pos:column="29"/></operator> <call><name pos:line="28" pos:column="30">find_containing_dir<pos:position pos:line="28" pos:column="49"/></name><argument_list pos:line="28" pos:column="49">(<argument><expr><name pos:line="28" pos:column="50">packed_dir<pos:position pos:line="28" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="62">base<pos:position pos:line="28" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="68">0<pos:position pos:line="28" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="71"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">packed_dir<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">&amp;&amp;<pos:position pos:line="31" pos:column="34"/></operator> <name pos:line="31" pos:column="27">loose_dir<pos:position pos:line="31" pos:column="36"/></name></expr>)<pos:position pos:line="31" pos:column="37"/></condition><then pos:line="31" pos:column="37"> <block pos:line="31" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">sort_ref_dir<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">packed_dir<pos:position pos:line="32" pos:column="40"/></name></expr></argument>)<pos:position pos:line="32" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">sort_ref_dir<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">loose_dir<pos:position pos:line="33" pos:column="39"/></name></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">retval<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">=<pos:position pos:line="34" pos:column="25"/></operator> <call><name pos:line="34" pos:column="26">do_for_each_entry_in_dirs<pos:position pos:line="34" pos:column="51"/></name><argument_list pos:line="34" pos:column="51">(
				<argument><expr><name pos:line="35" pos:column="33">packed_dir<pos:position pos:line="35" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="45">loose_dir<pos:position pos:line="35" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="56">fn<pos:position pos:line="35" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="60">cb_data<pos:position pos:line="35" pos:column="67"/></name></expr></argument>)<pos:position pos:line="35" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="69"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></then> <elseif pos:line="36" pos:column="11">else <if pos:line="36" pos:column="16">if <condition pos:line="36" pos:column="19">(<expr><name pos:line="36" pos:column="20">packed_dir<pos:position pos:line="36" pos:column="30"/></name></expr>)<pos:position pos:line="36" pos:column="31"/></condition><then pos:line="36" pos:column="31"> <block pos:line="36" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">sort_ref_dir<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">packed_dir<pos:position pos:line="37" pos:column="40"/></name></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="38" pos:column="17">retval<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">=<pos:position pos:line="38" pos:column="25"/></operator> <call><name pos:line="38" pos:column="26">do_for_each_entry_in_dir<pos:position pos:line="38" pos:column="50"/></name><argument_list pos:line="38" pos:column="50">(
				<argument><expr><name pos:line="39" pos:column="33">packed_dir<pos:position pos:line="39" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="45">0<pos:position pos:line="39" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="48">fn<pos:position pos:line="39" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="52">cb_data<pos:position pos:line="39" pos:column="59"/></name></expr></argument>)<pos:position pos:line="39" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if></elseif> <elseif pos:line="40" pos:column="11">else <if pos:line="40" pos:column="16">if <condition pos:line="40" pos:column="19">(<expr><name pos:line="40" pos:column="20">loose_dir<pos:position pos:line="40" pos:column="29"/></name></expr>)<pos:position pos:line="40" pos:column="30"/></condition><then pos:line="40" pos:column="30"> <block pos:line="40" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">sort_ref_dir<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">(<argument><expr><name pos:line="41" pos:column="30">loose_dir<pos:position pos:line="41" pos:column="39"/></name></expr></argument>)<pos:position pos:line="41" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="42" pos:column="17">retval<pos:position pos:line="42" pos:column="23"/></name> <operator pos:line="42" pos:column="24">=<pos:position pos:line="42" pos:column="25"/></operator> <call><name pos:line="42" pos:column="26">do_for_each_entry_in_dir<pos:position pos:line="42" pos:column="50"/></name><argument_list pos:line="42" pos:column="50">(
				<argument><expr><name pos:line="43" pos:column="33">loose_dir<pos:position pos:line="43" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="44">0<pos:position pos:line="43" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="47">fn<pos:position pos:line="43" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="51">cb_data<pos:position pos:line="43" pos:column="58"/></name></expr></argument>)<pos:position pos:line="43" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="46" pos:column="9">release_packed_ref_cache<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><name pos:line="46" pos:column="34">packed_ref_cache<pos:position pos:line="46" pos:column="50"/></name></expr></argument>)<pos:position pos:line="46" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="52"/></expr_stmt>
	<return pos:line="47" pos:column="9">return <expr><name pos:line="47" pos:column="16">retval<pos:position pos:line="47" pos:column="22"/></name></expr>;<pos:position pos:line="47" pos:column="23"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
