<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1633.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">walk_commit_list<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">rev_info<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">revs<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
			     <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">connectivity_progress<pos:position pos:line="2" pos:column="58"/></name></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">cp<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">commit<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">commit<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">object_array<pos:position pos:line="6" pos:column="28"/></name></name></type> <name pos:line="6" pos:column="29">objects<pos:position pos:line="6" pos:column="36"/></name> <init pos:line="6" pos:column="37">= <expr><name pos:line="6" pos:column="39">OBJECT_ARRAY_INIT<pos:position pos:line="6" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="57"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/* Walk all commits, process their trees */</comment>
	<while pos:line="9" pos:column="9">while <condition pos:line="9" pos:column="15">(<expr><operator pos:line="9" pos:column="16">(<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">commit<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">=<pos:position pos:line="9" pos:column="25"/></operator> <call><name pos:line="9" pos:column="26">get_revision<pos:position pos:line="9" pos:column="38"/></name><argument_list pos:line="9" pos:column="38">(<argument><expr><name pos:line="9" pos:column="39">revs<pos:position pos:line="9" pos:column="43"/></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call><operator pos:line="9" pos:column="44">)<pos:position pos:line="9" pos:column="45"/></operator> <operator pos:line="9" pos:column="46">!=<pos:position pos:line="9" pos:column="48"/></operator> <name pos:line="9" pos:column="49">NULL<pos:position pos:line="9" pos:column="53"/></name></expr>)<pos:position pos:line="9" pos:column="54"/></condition> <block pos:line="9" pos:column="55">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">process_tree<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name><name pos:line="10" pos:column="30">commit<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">-&gt;<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="38">tree<pos:position pos:line="10" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="44">&amp;<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="45">objects<pos:position pos:line="10" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="54">NULL<pos:position pos:line="10" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="60">""<pos:position pos:line="10" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="64">cp<pos:position pos:line="10" pos:column="66"/></name></expr></argument>)<pos:position pos:line="10" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">update_progress<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><name pos:line="11" pos:column="33">cp<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></while>

	<comment type="block" pos:line="14" pos:column="9">/* Then walk all the pending objects, recursively processing them too */</comment>
	<for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">(<init><expr><name pos:line="15" pos:column="14">i<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>;<pos:position pos:line="15" pos:column="20"/></init> <condition><expr><name pos:line="15" pos:column="21">i<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">&lt;<pos:position pos:line="15" pos:column="27"/></operator> <name><name pos:line="15" pos:column="25">revs<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">pending<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">.<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="39">nr<pos:position pos:line="15" pos:column="41"/></name></name></expr>;<pos:position pos:line="15" pos:column="42"/></condition> <incr><expr><name pos:line="15" pos:column="43">i<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">++<pos:position pos:line="15" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="15" pos:column="47"/></control> <block pos:line="15" pos:column="48">{
		<decl_stmt><decl><type><name><name pos:line="16" pos:column="17">struct<pos:position pos:line="16" pos:column="23"/></name> <name pos:line="16" pos:column="24">object_array_entry<pos:position pos:line="16" pos:column="42"/></name></name> <modifier pos:line="16" pos:column="43">*<pos:position pos:line="16" pos:column="44"/></modifier></type><name pos:line="16" pos:column="44">pending<pos:position pos:line="16" pos:column="51"/></name> <init pos:line="16" pos:column="52">= <expr><name><name pos:line="16" pos:column="54">revs<pos:position pos:line="16" pos:column="58"/></name><operator pos:line="16" pos:column="58">-&gt;<pos:position pos:line="16" pos:column="63"/></operator><name pos:line="16" pos:column="60">pending<pos:position pos:line="16" pos:column="67"/></name><operator pos:line="16" pos:column="67">.<pos:position pos:line="16" pos:column="68"/></operator><name pos:line="16" pos:column="68">objects<pos:position pos:line="16" pos:column="75"/></name></name> <operator pos:line="16" pos:column="76">+<pos:position pos:line="16" pos:column="77"/></operator> <name pos:line="16" pos:column="78">i<pos:position pos:line="16" pos:column="79"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="80"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="17" pos:column="17">struct<pos:position pos:line="17" pos:column="23"/></name> <name pos:line="17" pos:column="24">object<pos:position pos:line="17" pos:column="30"/></name></name> <modifier pos:line="17" pos:column="31">*<pos:position pos:line="17" pos:column="32"/></modifier></type><name pos:line="17" pos:column="32">obj<pos:position pos:line="17" pos:column="35"/></name> <init pos:line="17" pos:column="36">= <expr><name><name pos:line="17" pos:column="38">pending<pos:position pos:line="17" pos:column="45"/></name><operator pos:line="17" pos:column="45">-&gt;<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="47">item<pos:position pos:line="17" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="17" pos:column="52"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="18" pos:column="17">const<pos:position pos:line="18" pos:column="22"/></specifier> <name pos:line="18" pos:column="23">char<pos:position pos:line="18" pos:column="27"/></name> <modifier pos:line="18" pos:column="28">*<pos:position pos:line="18" pos:column="29"/></modifier></type><name pos:line="18" pos:column="29">name<pos:position pos:line="18" pos:column="33"/></name> <init pos:line="18" pos:column="34">= <expr><name><name pos:line="18" pos:column="36">pending<pos:position pos:line="18" pos:column="43"/></name><operator pos:line="18" pos:column="43">-&gt;<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="45">name<pos:position pos:line="18" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="18" pos:column="50"/></decl_stmt>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name><name pos:line="19" pos:column="21">obj<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">-&gt;<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="26">type<pos:position pos:line="19" pos:column="30"/></name></name> <operator pos:line="19" pos:column="31">==<pos:position pos:line="19" pos:column="33"/></operator> <name pos:line="19" pos:column="34">OBJ_TAG<pos:position pos:line="19" pos:column="41"/></name></expr>)<pos:position pos:line="19" pos:column="42"/></condition><then pos:line="19" pos:column="42"> <block pos:line="19" pos:column="43">{
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">process_tag<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><operator pos:line="20" pos:column="37">(<pos:position pos:line="20" pos:column="38"/></operator>struct <name pos:line="20" pos:column="45">tag<pos:position pos:line="20" pos:column="48"/></name> <operator pos:line="20" pos:column="49">*<pos:position pos:line="20" pos:column="50"/></operator><operator pos:line="20" pos:column="50">)<pos:position pos:line="20" pos:column="51"/></operator> <name pos:line="20" pos:column="52">obj<pos:position pos:line="20" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="57">&amp;<pos:position pos:line="20" pos:column="62"/></operator><name pos:line="20" pos:column="58">objects<pos:position pos:line="20" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="67">name<pos:position pos:line="20" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="73">cp<pos:position pos:line="20" pos:column="75"/></name></expr></argument>)<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="77"/></expr_stmt>
			<continue pos:line="21" pos:column="25">continue;<pos:position pos:line="21" pos:column="34"/></continue>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">obj<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">-&gt;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="26">type<pos:position pos:line="23" pos:column="30"/></name></name> <operator pos:line="23" pos:column="31">==<pos:position pos:line="23" pos:column="33"/></operator> <name pos:line="23" pos:column="34">OBJ_TREE<pos:position pos:line="23" pos:column="42"/></name></expr>)<pos:position pos:line="23" pos:column="43"/></condition><then pos:line="23" pos:column="43"> <block pos:line="23" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">process_tree<pos:position pos:line="24" pos:column="37"/></name><argument_list pos:line="24" pos:column="37">(<argument><expr><operator pos:line="24" pos:column="38">(<pos:position pos:line="24" pos:column="39"/></operator>struct <name pos:line="24" pos:column="46">tree<pos:position pos:line="24" pos:column="50"/></name> <operator pos:line="24" pos:column="51">*<pos:position pos:line="24" pos:column="52"/></operator><operator pos:line="24" pos:column="52">)<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="53">obj<pos:position pos:line="24" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="58">&amp;<pos:position pos:line="24" pos:column="63"/></operator><name pos:line="24" pos:column="59">objects<pos:position pos:line="24" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="68">NULL<pos:position pos:line="24" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="74">name<pos:position pos:line="24" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="80">cp<pos:position pos:line="24" pos:column="82"/></name></expr></argument>)<pos:position pos:line="24" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="84"/></expr_stmt>
			<continue pos:line="25" pos:column="25">continue;<pos:position pos:line="25" pos:column="34"/></continue>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name><name pos:line="27" pos:column="21">obj<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">-&gt;<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="26">type<pos:position pos:line="27" pos:column="30"/></name></name> <operator pos:line="27" pos:column="31">==<pos:position pos:line="27" pos:column="33"/></operator> <name pos:line="27" pos:column="34">OBJ_BLOB<pos:position pos:line="27" pos:column="42"/></name></expr>)<pos:position pos:line="27" pos:column="43"/></condition><then pos:line="27" pos:column="43"> <block pos:line="27" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">process_blob<pos:position pos:line="28" pos:column="37"/></name><argument_list pos:line="28" pos:column="37">(<argument><expr><operator pos:line="28" pos:column="38">(<pos:position pos:line="28" pos:column="39"/></operator>struct <name pos:line="28" pos:column="46">blob<pos:position pos:line="28" pos:column="50"/></name> <operator pos:line="28" pos:column="51">*<pos:position pos:line="28" pos:column="52"/></operator><operator pos:line="28" pos:column="52">)<pos:position pos:line="28" pos:column="53"/></operator><name pos:line="28" pos:column="53">obj<pos:position pos:line="28" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="58">&amp;<pos:position pos:line="28" pos:column="63"/></operator><name pos:line="28" pos:column="59">objects<pos:position pos:line="28" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="68">NULL<pos:position pos:line="28" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="74">name<pos:position pos:line="28" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="80">cp<pos:position pos:line="28" pos:column="82"/></name></expr></argument>)<pos:position pos:line="28" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="84"/></expr_stmt>
			<continue pos:line="29" pos:column="25">continue;<pos:position pos:line="29" pos:column="34"/></continue>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">die<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><literal type="string" pos:line="31" pos:column="21">"unknown pending object %s (%s)"<pos:position pos:line="31" pos:column="53"/></literal></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="55">sha1_to_hex<pos:position pos:line="31" pos:column="66"/></name><argument_list pos:line="31" pos:column="66">(<argument><expr><name><name pos:line="31" pos:column="67">obj<pos:position pos:line="31" pos:column="70"/></name><operator pos:line="31" pos:column="70">-&gt;<pos:position pos:line="31" pos:column="75"/></operator><name pos:line="31" pos:column="72">sha1<pos:position pos:line="31" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="77"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="31" pos:column="79">name<pos:position pos:line="31" pos:column="83"/></name></expr></argument>)<pos:position pos:line="31" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="85"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></for>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
