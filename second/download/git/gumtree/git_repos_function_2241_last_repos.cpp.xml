<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2241_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_sha1_header_extended<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">hdr<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="56">struct<pos:position pos:line="1" pos:column="62"/></name> <name pos:line="1" pos:column="63">object_info<pos:position pos:line="1" pos:column="74"/></name></name> <modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type><name pos:line="1" pos:column="76">oi<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
			       <parameter><decl><type><name pos:line="2" pos:column="32">unsigned<pos:position pos:line="2" pos:column="40"/></name> <name pos:line="2" pos:column="41">int<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">flags<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">type_buf<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name pos:line="4" pos:column="32">hdr<pos:position pos:line="4" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">size<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">type<pos:position pos:line="6" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="19">type_len<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><literal type="number" pos:line="6" pos:column="30">0<pos:position pos:line="6" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/*
	 * The type can be of any size but is followed by
	 * a space.
	 */</comment>
	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init pos:line="12" pos:column="14">;<pos:position pos:line="12" pos:column="15"/></init><condition pos:line="12" pos:column="15">;<pos:position pos:line="12" pos:column="16"/></condition><incr/>)<pos:position pos:line="12" pos:column="17"/></control> <block pos:line="12" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">char<pos:position pos:line="13" pos:column="21"/></name></type> <name pos:line="13" pos:column="22">c<pos:position pos:line="13" pos:column="23"/></name> <init pos:line="13" pos:column="24">= <expr><operator pos:line="13" pos:column="26">*<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">hdr<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">++<pos:position pos:line="13" pos:column="32"/></operator></expr></init></decl>;<pos:position pos:line="13" pos:column="33"/></decl_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><operator pos:line="14" pos:column="21">!<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">c<pos:position pos:line="14" pos:column="23"/></name></expr>)<pos:position pos:line="14" pos:column="24"/></condition><then pos:line="14" pos:column="24">
			<block type="pseudo"><return pos:line="15" pos:column="25">return <expr><operator pos:line="15" pos:column="32">-<pos:position pos:line="15" pos:column="33"/></operator><literal type="number" pos:line="15" pos:column="33">1<pos:position pos:line="15" pos:column="34"/></literal></expr>;<pos:position pos:line="15" pos:column="35"/></return></block></then></if>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">c<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">==<pos:position pos:line="16" pos:column="25"/></operator> <literal type="char" pos:line="16" pos:column="26">' '<pos:position pos:line="16" pos:column="29"/></literal></expr>)<pos:position pos:line="16" pos:column="30"/></condition><then pos:line="16" pos:column="30">
			<block type="pseudo"><break pos:line="17" pos:column="25">break;<pos:position pos:line="17" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="18" pos:column="17">type_len<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">++<pos:position pos:line="18" pos:column="27"/></operator></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></for>

	<expr_stmt><expr><name pos:line="21" pos:column="9">type<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">type_from_string_gently<pos:position pos:line="21" pos:column="39"/></name><argument_list pos:line="21" pos:column="39">(<argument><expr><name pos:line="21" pos:column="40">type_buf<pos:position pos:line="21" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">type_len<pos:position pos:line="21" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="60">1<pos:position pos:line="21" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name><name pos:line="22" pos:column="13">oi<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">-&gt;<pos:position pos:line="22" pos:column="20"/></operator></name><name><typename pos:line="22" pos:column="17">typename<pos:position pos:line="22" pos:column="25"/></typename></name></expr>)<pos:position pos:line="22" pos:column="26"/></condition><then pos:line="22" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">strbuf_add<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name><name pos:line="23" pos:column="28">oi<pos:position pos:line="23" pos:column="30"/></name><operator pos:line="23" pos:column="30">-&gt;<pos:position pos:line="23" pos:column="35"/></operator></name><name><typename pos:line="23" pos:column="32">typename<pos:position pos:line="23" pos:column="40"/></typename></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="42">type_buf<pos:position pos:line="23" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="52">type_len<pos:position pos:line="23" pos:column="60"/></name></expr></argument>)<pos:position pos:line="23" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="62"/></expr_stmt></block></then></if>
	<comment type="block" pos:line="24" pos:column="9">/*
	 * Set type to 0 if its an unknown object and
	 * we're obtaining the type using '--allow-unknown-type'
	 * option.
	 */</comment>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">(<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">flags<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">&amp;<pos:position pos:line="29" pos:column="25"/></operator> <name pos:line="29" pos:column="22">OBJECT_INFO_ALLOW_UNKNOWN_TYPE<pos:position pos:line="29" pos:column="52"/></name><operator pos:line="29" pos:column="52">)<pos:position pos:line="29" pos:column="53"/></operator> <operator pos:line="29" pos:column="54">&amp;&amp;<pos:position pos:line="29" pos:column="64"/></operator> <operator pos:line="29" pos:column="57">(<pos:position pos:line="29" pos:column="58"/></operator><name pos:line="29" pos:column="58">type<pos:position pos:line="29" pos:column="62"/></name> <operator pos:line="29" pos:column="63">&lt;<pos:position pos:line="29" pos:column="67"/></operator> <literal type="number" pos:line="29" pos:column="65">0<pos:position pos:line="29" pos:column="66"/></literal><operator pos:line="29" pos:column="66">)<pos:position pos:line="29" pos:column="67"/></operator></expr>)<pos:position pos:line="29" pos:column="68"/></condition><then pos:line="29" pos:column="68">
		<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="17">type<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">=<pos:position pos:line="30" pos:column="23"/></operator> <literal type="number" pos:line="30" pos:column="24">0<pos:position pos:line="30" pos:column="25"/></literal></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt></block></then>
	<elseif pos:line="31" pos:column="9">else <if pos:line="31" pos:column="14">if <condition pos:line="31" pos:column="17">(<expr><name pos:line="31" pos:column="18">type<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">&lt;<pos:position pos:line="31" pos:column="27"/></operator> <literal type="number" pos:line="31" pos:column="25">0<pos:position pos:line="31" pos:column="26"/></literal></expr>)<pos:position pos:line="31" pos:column="27"/></condition><then pos:line="31" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="17">die<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><literal type="string" pos:line="32" pos:column="21">"invalid object type"<pos:position pos:line="32" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt></block></then></if></elseif></if>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name><name pos:line="33" pos:column="13">oi<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">-&gt;<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="17">typep<pos:position pos:line="33" pos:column="22"/></name></name></expr>)<pos:position pos:line="33" pos:column="23"/></condition><then pos:line="33" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="34" pos:column="17">*<pos:position pos:line="34" pos:column="18"/></operator><name><name pos:line="34" pos:column="18">oi<pos:position pos:line="34" pos:column="20"/></name><operator pos:line="34" pos:column="20">-&gt;<pos:position pos:line="34" pos:column="25"/></operator><name pos:line="34" pos:column="22">typep<pos:position pos:line="34" pos:column="27"/></name></name> <operator pos:line="34" pos:column="28">=<pos:position pos:line="34" pos:column="29"/></operator> <name pos:line="34" pos:column="30">type<pos:position pos:line="34" pos:column="34"/></name></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="36" pos:column="9">/*
	 * The length must follow immediately, and be in canonical
	 * decimal format (ie "010" is not valid).
	 */</comment>
	<expr_stmt><expr><name pos:line="40" pos:column="9">size<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <operator pos:line="40" pos:column="16">*<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="17">hdr<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">++<pos:position pos:line="40" pos:column="22"/></operator> <operator pos:line="40" pos:column="23">-<pos:position pos:line="40" pos:column="24"/></operator> <literal type="char" pos:line="40" pos:column="25">'0'<pos:position pos:line="40" pos:column="28"/></literal></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt>
	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">size<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">&gt;<pos:position pos:line="41" pos:column="22"/></operator> <literal type="number" pos:line="41" pos:column="20">9<pos:position pos:line="41" pos:column="21"/></literal></expr>)<pos:position pos:line="41" pos:column="22"/></condition><then pos:line="41" pos:column="22">
		<block type="pseudo"><return pos:line="42" pos:column="17">return <expr><operator pos:line="42" pos:column="24">-<pos:position pos:line="42" pos:column="25"/></operator><literal type="number" pos:line="42" pos:column="25">1<pos:position pos:line="42" pos:column="26"/></literal></expr>;<pos:position pos:line="42" pos:column="27"/></return></block></then></if>
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">size<pos:position pos:line="43" pos:column="17"/></name></expr>)<pos:position pos:line="43" pos:column="18"/></condition><then pos:line="43" pos:column="18"> <block pos:line="43" pos:column="19">{
		<for pos:line="44" pos:column="17">for <control pos:line="44" pos:column="21">(<init pos:line="44" pos:column="22">;<pos:position pos:line="44" pos:column="23"/></init><condition pos:line="44" pos:column="23">;<pos:position pos:line="44" pos:column="24"/></condition><incr/>)<pos:position pos:line="44" pos:column="25"/></control> <block pos:line="44" pos:column="26">{
			<decl_stmt><decl><type><name pos:line="45" pos:column="25">unsigned<pos:position pos:line="45" pos:column="33"/></name> <name pos:line="45" pos:column="34">long<pos:position pos:line="45" pos:column="38"/></name></type> <name pos:line="45" pos:column="39">c<pos:position pos:line="45" pos:column="40"/></name> <init pos:line="45" pos:column="41">= <expr><operator pos:line="45" pos:column="43">*<pos:position pos:line="45" pos:column="44"/></operator><name pos:line="45" pos:column="44">hdr<pos:position pos:line="45" pos:column="47"/></name> <operator pos:line="45" pos:column="48">-<pos:position pos:line="45" pos:column="49"/></operator> <literal type="char" pos:line="45" pos:column="50">'0'<pos:position pos:line="45" pos:column="53"/></literal></expr></init></decl>;<pos:position pos:line="45" pos:column="54"/></decl_stmt>
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><name pos:line="46" pos:column="29">c<pos:position pos:line="46" pos:column="30"/></name> <operator pos:line="46" pos:column="31">&gt;<pos:position pos:line="46" pos:column="35"/></operator> <literal type="number" pos:line="46" pos:column="33">9<pos:position pos:line="46" pos:column="34"/></literal></expr>)<pos:position pos:line="46" pos:column="35"/></condition><then pos:line="46" pos:column="35">
				<block type="pseudo"><break pos:line="47" pos:column="33">break;<pos:position pos:line="47" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="48" pos:column="25">hdr<pos:position pos:line="48" pos:column="28"/></name><operator pos:line="48" pos:column="28">++<pos:position pos:line="48" pos:column="30"/></operator></expr>;<pos:position pos:line="48" pos:column="31"/></expr_stmt>
			<expr_stmt><expr><name pos:line="49" pos:column="25">size<pos:position pos:line="49" pos:column="29"/></name> <operator pos:line="49" pos:column="30">=<pos:position pos:line="49" pos:column="31"/></operator> <name pos:line="49" pos:column="32">size<pos:position pos:line="49" pos:column="36"/></name> <operator pos:line="49" pos:column="37">*<pos:position pos:line="49" pos:column="38"/></operator> <literal type="number" pos:line="49" pos:column="39">10<pos:position pos:line="49" pos:column="41"/></literal> <operator pos:line="49" pos:column="42">+<pos:position pos:line="49" pos:column="43"/></operator> <name pos:line="49" pos:column="44">c<pos:position pos:line="49" pos:column="45"/></name></expr>;<pos:position pos:line="49" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="50" pos:column="18"/></block></for>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>

	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name><name pos:line="53" pos:column="13">oi<pos:position pos:line="53" pos:column="15"/></name><operator pos:line="53" pos:column="15">-&gt;<pos:position pos:line="53" pos:column="20"/></operator><name pos:line="53" pos:column="17">sizep<pos:position pos:line="53" pos:column="22"/></name></name></expr>)<pos:position pos:line="53" pos:column="23"/></condition><then pos:line="53" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="54" pos:column="17">*<pos:position pos:line="54" pos:column="18"/></operator><name><name pos:line="54" pos:column="18">oi<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">-&gt;<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="22">sizep<pos:position pos:line="54" pos:column="27"/></name></name> <operator pos:line="54" pos:column="28">=<pos:position pos:line="54" pos:column="29"/></operator> <name pos:line="54" pos:column="30">size<pos:position pos:line="54" pos:column="34"/></name></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="56" pos:column="9">/*
	 * The length must be followed by a zero byte
	 */</comment>
	<return pos:line="59" pos:column="9">return <expr><ternary><condition><expr><operator pos:line="59" pos:column="16">*<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="17">hdr<pos:position pos:line="59" pos:column="20"/></name></expr> ?<pos:position pos:line="59" pos:column="22"/></condition><then pos:line="59" pos:column="22"> <expr><operator pos:line="59" pos:column="23">-<pos:position pos:line="59" pos:column="24"/></operator><literal type="number" pos:line="59" pos:column="24">1<pos:position pos:line="59" pos:column="25"/></literal></expr> <pos:position pos:line="59" pos:column="26"/></then><else pos:line="59" pos:column="26">: <expr><name pos:line="59" pos:column="28">type<pos:position pos:line="59" pos:column="32"/></name></expr></else></ternary></expr>;<pos:position pos:line="59" pos:column="33"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
