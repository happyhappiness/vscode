<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5243_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">output_exclude<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">path<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="46">struct<pos:position pos:line="1" pos:column="52"/></name> <name pos:line="1" pos:column="53">exclude<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">exclude<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">bang<pos:position pos:line="3" pos:column="19"/></name>  <init pos:line="3" pos:column="21">= <expr><ternary><condition><expr><operator pos:line="3" pos:column="23">(<pos:position pos:line="3" pos:column="24"/></operator><name pos:line="3" pos:column="24">exclude<pos:position pos:line="3" pos:column="31"/></name> <operator pos:line="3" pos:column="32">&amp;&amp;<pos:position pos:line="3" pos:column="42"/></operator> <name><name pos:line="3" pos:column="35">exclude<pos:position pos:line="3" pos:column="42"/></name><operator pos:line="3" pos:column="42">-&gt;<pos:position pos:line="3" pos:column="47"/></operator><name pos:line="3" pos:column="44">flags<pos:position pos:line="3" pos:column="49"/></name></name> <operator pos:line="3" pos:column="50">&amp;<pos:position pos:line="3" pos:column="55"/></operator> <name pos:line="3" pos:column="52">EXC_FLAG_NEGATIVE<pos:position pos:line="3" pos:column="69"/></name><operator pos:line="3" pos:column="69">)<pos:position pos:line="3" pos:column="70"/></operator></expr>  ?<pos:position pos:line="3" pos:column="73"/></condition><then pos:line="3" pos:column="73"> <expr><literal type="string" pos:line="3" pos:column="74">"!"<pos:position pos:line="3" pos:column="77"/></literal></expr> <pos:position pos:line="3" pos:column="78"/></then><else pos:line="3" pos:column="78">: <expr><literal type="string" pos:line="3" pos:column="80">""<pos:position pos:line="3" pos:column="82"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="3" pos:column="83"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">slash<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><ternary><condition><expr><operator pos:line="4" pos:column="23">(<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">exclude<pos:position pos:line="4" pos:column="31"/></name> <operator pos:line="4" pos:column="32">&amp;&amp;<pos:position pos:line="4" pos:column="42"/></operator> <name><name pos:line="4" pos:column="35">exclude<pos:position pos:line="4" pos:column="42"/></name><operator pos:line="4" pos:column="42">-&gt;<pos:position pos:line="4" pos:column="47"/></operator><name pos:line="4" pos:column="44">flags<pos:position pos:line="4" pos:column="49"/></name></name> <operator pos:line="4" pos:column="50">&amp;<pos:position pos:line="4" pos:column="55"/></operator> <name pos:line="4" pos:column="52">EXC_FLAG_MUSTBEDIR<pos:position pos:line="4" pos:column="70"/></name><operator pos:line="4" pos:column="70">)<pos:position pos:line="4" pos:column="71"/></operator></expr> ?<pos:position pos:line="4" pos:column="73"/></condition><then pos:line="4" pos:column="73"> <expr><literal type="string" pos:line="4" pos:column="74">"/"<pos:position pos:line="4" pos:column="77"/></literal></expr> <pos:position pos:line="4" pos:column="78"/></then><else pos:line="4" pos:column="78">: <expr><literal type="string" pos:line="4" pos:column="80">""<pos:position pos:line="4" pos:column="82"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="4" pos:column="83"/></decl_stmt>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">nul_term_line<pos:position pos:line="5" pos:column="27"/></name></expr>)<pos:position pos:line="5" pos:column="28"/></condition><then pos:line="5" pos:column="28"> <block pos:line="5" pos:column="29">{
		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><operator pos:line="6" pos:column="21">!<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">verbose<pos:position pos:line="6" pos:column="29"/></name></expr>)<pos:position pos:line="6" pos:column="30"/></condition><then pos:line="6" pos:column="30"> <block pos:line="6" pos:column="31">{
			<expr_stmt><expr><call><name pos:line="7" pos:column="25">write_name_quoted<pos:position pos:line="7" pos:column="42"/></name><argument_list pos:line="7" pos:column="42">(<argument><expr><name pos:line="7" pos:column="43">path<pos:position pos:line="7" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="49">stdout<pos:position pos:line="7" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="57">'\n'<pos:position pos:line="7" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="63"/></expr_stmt>
		}<pos:position pos:line="8" pos:column="18"/></block></then> <else pos:line="8" pos:column="19">else <block pos:line="8" pos:column="24">{
			<if pos:line="9" pos:column="25">if <condition pos:line="9" pos:column="28">(<expr><name pos:line="9" pos:column="29">exclude<pos:position pos:line="9" pos:column="36"/></name></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37"> <block pos:line="9" pos:column="38">{
				<expr_stmt><expr><call><name pos:line="10" pos:column="33">quote_c_style<pos:position pos:line="10" pos:column="46"/></name><argument_list pos:line="10" pos:column="46">(<argument><expr><name><name pos:line="10" pos:column="47">exclude<pos:position pos:line="10" pos:column="54"/></name><operator pos:line="10" pos:column="54">-&gt;<pos:position pos:line="10" pos:column="59"/></operator><name pos:line="10" pos:column="56">el<pos:position pos:line="10" pos:column="58"/></name><operator pos:line="10" pos:column="58">-&gt;<pos:position pos:line="10" pos:column="63"/></operator><name pos:line="10" pos:column="60">src<pos:position pos:line="10" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="65">NULL<pos:position pos:line="10" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="71">stdout<pos:position pos:line="10" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="79">0<pos:position pos:line="10" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="82"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="11" pos:column="33">printf<pos:position pos:line="11" pos:column="39"/></name><argument_list pos:line="11" pos:column="39">(<argument><expr><literal type="string" pos:line="11" pos:column="40">":%d:%s%s%s\t"<pos:position pos:line="11" pos:column="54"/></literal></expr></argument>,
				       <argument><expr><name><name pos:line="12" pos:column="40">exclude<pos:position pos:line="12" pos:column="47"/></name><operator pos:line="12" pos:column="47">-&gt;<pos:position pos:line="12" pos:column="52"/></operator><name pos:line="12" pos:column="49">srcpos<pos:position pos:line="12" pos:column="55"/></name></name></expr></argument>,
				       <argument><expr><name pos:line="13" pos:column="40">bang<pos:position pos:line="13" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="46">exclude<pos:position pos:line="13" pos:column="53"/></name><operator pos:line="13" pos:column="53">-&gt;<pos:position pos:line="13" pos:column="58"/></operator><name pos:line="13" pos:column="55">pattern<pos:position pos:line="13" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="64">slash<pos:position pos:line="13" pos:column="69"/></name></expr></argument>)<pos:position pos:line="13" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="71"/></expr_stmt>
			}<pos:position pos:line="14" pos:column="26"/></block></then>
			<else pos:line="15" pos:column="25">else <block pos:line="15" pos:column="30">{
				<expr_stmt><expr><call><name pos:line="16" pos:column="33">printf<pos:position pos:line="16" pos:column="39"/></name><argument_list pos:line="16" pos:column="39">(<argument><expr><literal type="string" pos:line="16" pos:column="40">"::\t"<pos:position pos:line="16" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt>
			}<pos:position pos:line="17" pos:column="26"/></block></else></if>
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">quote_c_style<pos:position pos:line="18" pos:column="38"/></name><argument_list pos:line="18" pos:column="38">(<argument><expr><name pos:line="18" pos:column="39">path<pos:position pos:line="18" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="45">NULL<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">stdout<pos:position pos:line="18" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="59">0<pos:position pos:line="18" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">fputc<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><literal type="char" pos:line="19" pos:column="31">'\n'<pos:position pos:line="19" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="37">stdout<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="20" pos:column="18"/></block></else></if>
	}<pos:position pos:line="21" pos:column="10"/></block></then> <else pos:line="21" pos:column="11">else <block pos:line="21" pos:column="16">{
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">verbose<pos:position pos:line="22" pos:column="29"/></name></expr>)<pos:position pos:line="22" pos:column="30"/></condition><then pos:line="22" pos:column="30"> <block pos:line="22" pos:column="31">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">printf<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><literal type="string" pos:line="23" pos:column="32">"%s%c"<pos:position pos:line="23" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="40">path<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="46">'\0'<pos:position pos:line="23" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="24" pos:column="18"/></block></then> <else pos:line="24" pos:column="19">else <block pos:line="24" pos:column="24">{
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><name pos:line="25" pos:column="29">exclude<pos:position pos:line="25" pos:column="36"/></name></expr>)<pos:position pos:line="25" pos:column="37"/></condition><then pos:line="25" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="33">printf<pos:position pos:line="26" pos:column="39"/></name><argument_list pos:line="26" pos:column="39">(<argument><expr><literal type="string" pos:line="26" pos:column="40">"%s%c%d%c%s%s%s%c%s%c"<pos:position pos:line="26" pos:column="62"/></literal></expr></argument>,
				       <argument><expr><name><name pos:line="27" pos:column="40">exclude<pos:position pos:line="27" pos:column="47"/></name><operator pos:line="27" pos:column="47">-&gt;<pos:position pos:line="27" pos:column="52"/></operator><name pos:line="27" pos:column="49">el<pos:position pos:line="27" pos:column="51"/></name><operator pos:line="27" pos:column="51">-&gt;<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="53">src<pos:position pos:line="27" pos:column="56"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="27" pos:column="58">'\0'<pos:position pos:line="27" pos:column="62"/></literal></expr></argument>,
				       <argument><expr><name><name pos:line="28" pos:column="40">exclude<pos:position pos:line="28" pos:column="47"/></name><operator pos:line="28" pos:column="47">-&gt;<pos:position pos:line="28" pos:column="52"/></operator><name pos:line="28" pos:column="49">srcpos<pos:position pos:line="28" pos:column="55"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="28" pos:column="57">'\0'<pos:position pos:line="28" pos:column="61"/></literal></expr></argument>,
				       <argument><expr><name pos:line="29" pos:column="40">bang<pos:position pos:line="29" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="46">exclude<pos:position pos:line="29" pos:column="53"/></name><operator pos:line="29" pos:column="53">-&gt;<pos:position pos:line="29" pos:column="58"/></operator><name pos:line="29" pos:column="55">pattern<pos:position pos:line="29" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="64">slash<pos:position pos:line="29" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="71">'\0'<pos:position pos:line="29" pos:column="75"/></literal></expr></argument>,
				       <argument><expr><name pos:line="30" pos:column="40">path<pos:position pos:line="30" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="46">'\0'<pos:position pos:line="30" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt></block></then>
			<else pos:line="31" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="33">printf<pos:position pos:line="32" pos:column="39"/></name><argument_list pos:line="32" pos:column="39">(<argument><expr><literal type="string" pos:line="32" pos:column="40">"%c%c%c%s%c"<pos:position pos:line="32" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="32" pos:column="54">'\0'<pos:position pos:line="32" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="32" pos:column="60">'\0'<pos:position pos:line="32" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="32" pos:column="66">'\0'<pos:position pos:line="32" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="72">path<pos:position pos:line="32" pos:column="76"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="32" pos:column="78">'\0'<pos:position pos:line="32" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="84"/></expr_stmt></block></else></if>
		}<pos:position pos:line="33" pos:column="18"/></block></else></if>
	}<pos:position pos:line="34" pos:column="10"/></block></else></if>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
