<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_665_git-2.10.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_write_blocked<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">void<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">data<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">unsigned<pos:position pos:line="1" pos:column="56"/></name> <name pos:line="1" pos:column="57">long<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">size<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">buf<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><name pos:line="3" pos:column="27">data<pos:position pos:line="3" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">offset<pos:position pos:line="5" pos:column="19"/></name></expr>)<pos:position pos:line="5" pos:column="20"/></condition><then pos:line="5" pos:column="20"> <block pos:line="5" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">unsigned<pos:position pos:line="6" pos:column="25"/></name> <name pos:line="6" pos:column="26">long<pos:position pos:line="6" pos:column="30"/></name></type> <name pos:line="6" pos:column="31">chunk<pos:position pos:line="6" pos:column="36"/></name> <init pos:line="6" pos:column="37">= <expr><name pos:line="6" pos:column="39">BLOCKSIZE<pos:position pos:line="6" pos:column="48"/></name> <operator pos:line="6" pos:column="49">-<pos:position pos:line="6" pos:column="50"/></operator> <name pos:line="6" pos:column="51">offset<pos:position pos:line="6" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="58"/></decl_stmt>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">size<pos:position pos:line="7" pos:column="25"/></name> <operator pos:line="7" pos:column="26">&lt;<pos:position pos:line="7" pos:column="30"/></operator> <name pos:line="7" pos:column="28">chunk<pos:position pos:line="7" pos:column="33"/></name></expr>)<pos:position pos:line="7" pos:column="34"/></condition><then pos:line="7" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="25">chunk<pos:position pos:line="8" pos:column="30"/></name> <operator pos:line="8" pos:column="31">=<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="33">size<pos:position pos:line="8" pos:column="37"/></name></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">memcpy<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name pos:line="9" pos:column="24">block<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">+<pos:position pos:line="9" pos:column="31"/></operator> <name pos:line="9" pos:column="32">offset<pos:position pos:line="9" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="40">buf<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="45">chunk<pos:position pos:line="9" pos:column="50"/></name></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><name pos:line="10" pos:column="17">size<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">-=<pos:position pos:line="10" pos:column="24"/></operator> <name pos:line="10" pos:column="25">chunk<pos:position pos:line="10" pos:column="30"/></name></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="11" pos:column="17">offset<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">+=<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">chunk<pos:position pos:line="11" pos:column="32"/></name></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="12" pos:column="17">buf<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">+=<pos:position pos:line="12" pos:column="23"/></operator> <name pos:line="12" pos:column="24">chunk<pos:position pos:line="12" pos:column="29"/></name></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">write_if_needed<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">()<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>
	<while pos:line="15" pos:column="9">while <condition pos:line="15" pos:column="15">(<expr><name pos:line="15" pos:column="16">size<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">&gt;=<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="24">BLOCKSIZE<pos:position pos:line="15" pos:column="33"/></name></expr>)<pos:position pos:line="15" pos:column="34"/></condition> <block pos:line="15" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">write_or_die<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><literal type="number" pos:line="16" pos:column="30">1<pos:position pos:line="16" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="33">buf<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="38">BLOCKSIZE<pos:position pos:line="16" pos:column="47"/></name></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="17" pos:column="17">size<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">-=<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">BLOCKSIZE<pos:position pos:line="17" pos:column="34"/></name></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="18" pos:column="17">buf<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">+=<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">BLOCKSIZE<pos:position pos:line="18" pos:column="33"/></name></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></while>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">size<pos:position pos:line="20" pos:column="17"/></name></expr>)<pos:position pos:line="20" pos:column="18"/></condition><then pos:line="20" pos:column="18"> <block pos:line="20" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">memcpy<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">block<pos:position pos:line="21" pos:column="29"/></name> <operator pos:line="21" pos:column="30">+<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="32">offset<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">buf<pos:position pos:line="21" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="45">size<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">offset<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">+=<pos:position pos:line="22" pos:column="26"/></operator> <name pos:line="22" pos:column="27">size<pos:position pos:line="22" pos:column="31"/></name></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
