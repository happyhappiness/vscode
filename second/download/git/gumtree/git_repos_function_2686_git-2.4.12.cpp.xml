<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2686_git-2.4.12.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">parse_hide_refs_config<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">var<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">value<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="64">const<pos:position pos:line="1" pos:column="69"/></specifier> <name pos:line="1" pos:column="70">char<pos:position pos:line="1" pos:column="74"/></name> <modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type><name pos:line="1" pos:column="76">section<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="84"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><call><name pos:line="3" pos:column="14">strcmp<pos:position pos:line="3" pos:column="20"/></name><argument_list pos:line="3" pos:column="20">(<argument><expr><literal type="string" pos:line="3" pos:column="21">"transfer.hiderefs"<pos:position pos:line="3" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="42">var<pos:position pos:line="3" pos:column="45"/></name></expr></argument>)<pos:position pos:line="3" pos:column="46"/></argument_list></call> <operator pos:line="3" pos:column="47">||<pos:position pos:line="3" pos:column="49"/></operator>
	    <comment type="block" pos:line="4" pos:column="13">/* NEEDSWORK: use parse_config_key() once both are merged */</comment>
	    <operator pos:line="5" pos:column="13">(<pos:position pos:line="5" pos:column="14"/></operator><call><name pos:line="5" pos:column="14">starts_with<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">var<pos:position pos:line="5" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="31">section<pos:position pos:line="5" pos:column="38"/></name></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></call> <operator pos:line="5" pos:column="40">&amp;&amp;<pos:position pos:line="5" pos:column="50"/></operator> <name><name pos:line="5" pos:column="43">var<pos:position pos:line="5" pos:column="46"/></name><index pos:line="5" pos:column="46">[<expr><call><name pos:line="5" pos:column="47">strlen<pos:position pos:line="5" pos:column="53"/></name><argument_list pos:line="5" pos:column="53">(<argument><expr><name pos:line="5" pos:column="54">section<pos:position pos:line="5" pos:column="61"/></name></expr></argument>)<pos:position pos:line="5" pos:column="62"/></argument_list></call></expr>]<pos:position pos:line="5" pos:column="63"/></index></name> <operator pos:line="5" pos:column="64">==<pos:position pos:line="5" pos:column="66"/></operator> <literal type="char" pos:line="5" pos:column="67">'.'<pos:position pos:line="5" pos:column="70"/></literal> <operator pos:line="5" pos:column="71">&amp;&amp;<pos:position pos:line="5" pos:column="81"/></operator>
	     <operator pos:line="6" pos:column="14">!<pos:position pos:line="6" pos:column="15"/></operator><call><name pos:line="6" pos:column="15">strcmp<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">var<pos:position pos:line="6" pos:column="25"/></name> <operator pos:line="6" pos:column="26">+<pos:position pos:line="6" pos:column="27"/></operator> <call><name pos:line="6" pos:column="28">strlen<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">(<argument><expr><name pos:line="6" pos:column="35">section<pos:position pos:line="6" pos:column="42"/></name></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="45">".hiderefs"<pos:position pos:line="6" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="57"/></argument_list></call><operator pos:line="6" pos:column="57">)<pos:position pos:line="6" pos:column="58"/></operator></expr>)<pos:position pos:line="6" pos:column="59"/></condition><then pos:line="6" pos:column="59"> <block pos:line="6" pos:column="60">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">char<pos:position pos:line="7" pos:column="21"/></name> <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier></type><name pos:line="7" pos:column="23">ref<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">len<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>

		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">value<pos:position pos:line="10" pos:column="27"/></name></expr>)<pos:position pos:line="10" pos:column="28"/></condition><then pos:line="10" pos:column="28">
			<block type="pseudo"><return pos:line="11" pos:column="25">return <expr><call><name pos:line="11" pos:column="32">config_error_nonbool<pos:position pos:line="11" pos:column="52"/></name><argument_list pos:line="11" pos:column="52">(<argument><expr><name pos:line="11" pos:column="53">var<pos:position pos:line="11" pos:column="56"/></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="58"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="12" pos:column="17">ref<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <call><name pos:line="12" pos:column="23">xstrdup<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><name pos:line="12" pos:column="31">value<pos:position pos:line="12" pos:column="36"/></name></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">len<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <call><name pos:line="13" pos:column="23">strlen<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">ref<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
		<while pos:line="14" pos:column="17">while <condition pos:line="14" pos:column="23">(<expr><name pos:line="14" pos:column="24">len<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">&amp;&amp;<pos:position pos:line="14" pos:column="38"/></operator> <name><name pos:line="14" pos:column="31">ref<pos:position pos:line="14" pos:column="34"/></name><index pos:line="14" pos:column="34">[<expr><name pos:line="14" pos:column="35">len<pos:position pos:line="14" pos:column="38"/></name> <operator pos:line="14" pos:column="39">-<pos:position pos:line="14" pos:column="40"/></operator> <literal type="number" pos:line="14" pos:column="41">1<pos:position pos:line="14" pos:column="42"/></literal></expr>]<pos:position pos:line="14" pos:column="43"/></index></name> <operator pos:line="14" pos:column="44">==<pos:position pos:line="14" pos:column="46"/></operator> <literal type="char" pos:line="14" pos:column="47">'/'<pos:position pos:line="14" pos:column="50"/></literal></expr>)<pos:position pos:line="14" pos:column="51"/></condition>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="25">ref<pos:position pos:line="15" pos:column="28"/></name><index pos:line="15" pos:column="28">[<expr><operator pos:line="15" pos:column="29">--<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="31">len<pos:position pos:line="15" pos:column="34"/></name></expr>]<pos:position pos:line="15" pos:column="35"/></index></name> <operator pos:line="15" pos:column="36">=<pos:position pos:line="15" pos:column="37"/></operator> <literal type="char" pos:line="15" pos:column="38">'\0'<pos:position pos:line="15" pos:column="42"/></literal></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt></block></while>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">hide_refs<pos:position pos:line="16" pos:column="31"/></name></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32"> <block pos:line="16" pos:column="33">{
			<expr_stmt><expr><name pos:line="17" pos:column="25">hide_refs<pos:position pos:line="17" pos:column="34"/></name> <operator pos:line="17" pos:column="35">=<pos:position pos:line="17" pos:column="36"/></operator> <call><name pos:line="17" pos:column="37">xcalloc<pos:position pos:line="17" pos:column="44"/></name><argument_list pos:line="17" pos:column="44">(<argument><expr><literal type="number" pos:line="17" pos:column="45">1<pos:position pos:line="17" pos:column="46"/></literal></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="48">sizeof<argument_list pos:line="17" pos:column="54">(<argument><expr><operator pos:line="17" pos:column="55">*<pos:position pos:line="17" pos:column="56"/></operator><name pos:line="17" pos:column="56">hide_refs<pos:position pos:line="17" pos:column="65"/></name></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="18" pos:column="25">hide_refs<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">-&gt;<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="36">strdup_strings<pos:position pos:line="18" pos:column="50"/></name></name> <operator pos:line="18" pos:column="51">=<pos:position pos:line="18" pos:column="52"/></operator> <literal type="number" pos:line="18" pos:column="53">1<pos:position pos:line="18" pos:column="54"/></literal></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">string_list_append<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><name pos:line="20" pos:column="36">hide_refs<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">ref<pos:position pos:line="20" pos:column="50"/></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>
	<return pos:line="22" pos:column="9">return <expr><literal type="number" pos:line="22" pos:column="16">0<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
