<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5870_git-2.3.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">link_nfa_nodes<pos:position pos:line="2" pos:column="15"/></name> <parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">void<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">extra<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">bin_tree_t<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">node<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">re_dfa_t<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">dfa<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><operator pos:line="4" pos:column="19">(<pos:position pos:line="4" pos:column="20"/></operator><name pos:line="4" pos:column="20">re_dfa_t<pos:position pos:line="4" pos:column="28"/></name> <operator pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></operator><operator pos:line="4" pos:column="30">)<pos:position pos:line="4" pos:column="31"/></operator> <name pos:line="4" pos:column="32">extra<pos:position pos:line="4" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">idx<pos:position pos:line="5" pos:column="10"/></name> <init pos:line="5" pos:column="11">= <expr><name><name pos:line="5" pos:column="13">node<pos:position pos:line="5" pos:column="17"/></name><operator pos:line="5" pos:column="17">-&gt;<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="19">node_idx<pos:position pos:line="5" pos:column="27"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">reg_errcode_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">err<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">REG_NOERROR<pos:position pos:line="6" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>

  <switch pos:line="8" pos:column="3">switch <condition pos:line="8" pos:column="10">(<expr><name><name pos:line="8" pos:column="11">node<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">-&gt;<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="17">token<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">.<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="23">type<pos:position pos:line="8" pos:column="27"/></name></name></expr>)<pos:position pos:line="8" pos:column="28"/></condition>
    <block pos:line="9" pos:column="5">{
    <case pos:line="10" pos:column="5">case <expr><name pos:line="10" pos:column="10">CONCAT<pos:position pos:line="10" pos:column="16"/></name></expr>:<pos:position pos:line="10" pos:column="17"/></case>
      <break pos:line="11" pos:column="7">break;<pos:position pos:line="11" pos:column="13"/></break>

    <case pos:line="13" pos:column="5">case <expr><name pos:line="13" pos:column="10">END_OF_RE<pos:position pos:line="13" pos:column="19"/></name></expr>:<pos:position pos:line="13" pos:column="20"/></case>
      <expr_stmt><expr><call><name pos:line="14" pos:column="7">assert<pos:position pos:line="14" pos:column="13"/></name> <argument_list pos:line="14" pos:column="14">(<argument><expr><name><name pos:line="14" pos:column="15">node<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">-&gt;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="21">next<pos:position pos:line="14" pos:column="25"/></name></name> <operator pos:line="14" pos:column="26">==<pos:position pos:line="14" pos:column="28"/></operator> <name pos:line="14" pos:column="29">NULL<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
      <break pos:line="15" pos:column="7">break;<pos:position pos:line="15" pos:column="13"/></break>

    <case pos:line="17" pos:column="5">case <expr><name pos:line="17" pos:column="10">OP_DUP_ASTERISK<pos:position pos:line="17" pos:column="25"/></name></expr>:<pos:position pos:line="17" pos:column="26"/></case>
    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">OP_ALT<pos:position pos:line="18" pos:column="16"/></name></expr>:<pos:position pos:line="18" pos:column="17"/></case>
      <block pos:line="19" pos:column="7">{
	<decl_stmt><decl><type><name pos:line="20" pos:column="9">int<pos:position pos:line="20" pos:column="12"/></name></type> <name pos:line="20" pos:column="13">left<pos:position pos:line="20" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="20" pos:column="19">right<pos:position pos:line="20" pos:column="24"/></name></decl>;<pos:position pos:line="20" pos:column="25"/></decl_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">dfa<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">has_plural_match<pos:position pos:line="21" pos:column="30"/></name></name> <operator pos:line="21" pos:column="31">=<pos:position pos:line="21" pos:column="32"/></operator> <literal type="number" pos:line="21" pos:column="33">1<pos:position pos:line="21" pos:column="34"/></literal></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name><name pos:line="22" pos:column="13">node<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">-&gt;<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="19">left<pos:position pos:line="22" pos:column="23"/></name></name> <operator pos:line="22" pos:column="24">!=<pos:position pos:line="22" pos:column="26"/></operator> <name pos:line="22" pos:column="27">NULL<pos:position pos:line="22" pos:column="31"/></name></expr>)<pos:position pos:line="22" pos:column="32"/></condition><then pos:line="22" pos:column="32">
	  <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="11">left<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <name><name pos:line="23" pos:column="18">node<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">-&gt;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="24">left<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">-&gt;<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="30">first<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">-&gt;<pos:position pos:line="23" pos:column="40"/></operator><name pos:line="23" pos:column="37">node_idx<pos:position pos:line="23" pos:column="45"/></name></name></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt></block></then>
	<else pos:line="24" pos:column="9">else
	  <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="11">left<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <name><name pos:line="25" pos:column="18">node<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">-&gt;<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="24">next<pos:position pos:line="25" pos:column="28"/></name><operator pos:line="25" pos:column="28">-&gt;<pos:position pos:line="25" pos:column="33"/></operator><name pos:line="25" pos:column="30">node_idx<pos:position pos:line="25" pos:column="38"/></name></name></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt></block></else></if>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">node<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">right<pos:position pos:line="26" pos:column="24"/></name></name> <operator pos:line="26" pos:column="25">!=<pos:position pos:line="26" pos:column="27"/></operator> <name pos:line="26" pos:column="28">NULL<pos:position pos:line="26" pos:column="32"/></name></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33">
	  <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="11">right<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <name><name pos:line="27" pos:column="19">node<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">-&gt;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="25">right<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">-&gt;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="32">first<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">-&gt;<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="39">node_idx<pos:position pos:line="27" pos:column="47"/></name></name></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt></block></then>
	<else pos:line="28" pos:column="9">else
	  <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="11">right<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <name><name pos:line="29" pos:column="19">node<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">-&gt;<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="25">next<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">-&gt;<pos:position pos:line="29" pos:column="34"/></operator><name pos:line="29" pos:column="31">node_idx<pos:position pos:line="29" pos:column="39"/></name></name></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">assert<pos:position pos:line="30" pos:column="15"/></name> <argument_list pos:line="30" pos:column="16">(<argument><expr><name pos:line="30" pos:column="17">left<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">&gt;<pos:position pos:line="30" pos:column="26"/></operator> <operator pos:line="30" pos:column="24">-<pos:position pos:line="30" pos:column="25"/></operator><literal type="number" pos:line="30" pos:column="25">1<pos:position pos:line="30" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">assert<pos:position pos:line="31" pos:column="15"/></name> <argument_list pos:line="31" pos:column="16">(<argument><expr><name pos:line="31" pos:column="17">right<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">&gt;<pos:position pos:line="31" pos:column="27"/></operator> <operator pos:line="31" pos:column="25">-<pos:position pos:line="31" pos:column="26"/></operator><literal type="number" pos:line="31" pos:column="26">1<pos:position pos:line="31" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name pos:line="32" pos:column="9">err<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <call><name pos:line="32" pos:column="15">re_node_set_init_2<pos:position pos:line="32" pos:column="33"/></name> <argument_list pos:line="32" pos:column="34">(<argument><expr><name><name pos:line="32" pos:column="35">dfa<pos:position pos:line="32" pos:column="38"/></name><operator pos:line="32" pos:column="38">-&gt;<pos:position pos:line="32" pos:column="43"/></operator><name pos:line="32" pos:column="40">edests<pos:position pos:line="32" pos:column="46"/></name></name> <operator pos:line="32" pos:column="47">+<pos:position pos:line="32" pos:column="48"/></operator> <name pos:line="32" pos:column="49">idx<pos:position pos:line="32" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="54">left<pos:position pos:line="32" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="60">right<pos:position pos:line="32" pos:column="65"/></name></expr></argument>)<pos:position pos:line="32" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="67"/></expr_stmt>
      }<pos:position pos:line="33" pos:column="8"/></block>
      <break pos:line="34" pos:column="7">break;<pos:position pos:line="34" pos:column="13"/></break>

    <case pos:line="36" pos:column="5">case <expr><name pos:line="36" pos:column="10">ANCHOR<pos:position pos:line="36" pos:column="16"/></name></expr>:<pos:position pos:line="36" pos:column="17"/></case>
    <case pos:line="37" pos:column="5">case <expr><name pos:line="37" pos:column="10">OP_OPEN_SUBEXP<pos:position pos:line="37" pos:column="24"/></name></expr>:<pos:position pos:line="37" pos:column="25"/></case>
    <case pos:line="38" pos:column="5">case <expr><name pos:line="38" pos:column="10">OP_CLOSE_SUBEXP<pos:position pos:line="38" pos:column="25"/></name></expr>:<pos:position pos:line="38" pos:column="26"/></case>
      <expr_stmt><expr><name pos:line="39" pos:column="7">err<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">=<pos:position pos:line="39" pos:column="12"/></operator> <call><name pos:line="39" pos:column="13">re_node_set_init_1<pos:position pos:line="39" pos:column="31"/></name> <argument_list pos:line="39" pos:column="32">(<argument><expr><name><name pos:line="39" pos:column="33">dfa<pos:position pos:line="39" pos:column="36"/></name><operator pos:line="39" pos:column="36">-&gt;<pos:position pos:line="39" pos:column="41"/></operator><name pos:line="39" pos:column="38">edests<pos:position pos:line="39" pos:column="44"/></name></name> <operator pos:line="39" pos:column="45">+<pos:position pos:line="39" pos:column="46"/></operator> <name pos:line="39" pos:column="47">idx<pos:position pos:line="39" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="52">node<pos:position pos:line="39" pos:column="56"/></name><operator pos:line="39" pos:column="56">-&gt;<pos:position pos:line="39" pos:column="61"/></operator><name pos:line="39" pos:column="58">next<pos:position pos:line="39" pos:column="62"/></name><operator pos:line="39" pos:column="62">-&gt;<pos:position pos:line="39" pos:column="67"/></operator><name pos:line="39" pos:column="64">node_idx<pos:position pos:line="39" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="74"/></expr_stmt>
      <break pos:line="40" pos:column="7">break;<pos:position pos:line="40" pos:column="13"/></break>

    <case pos:line="42" pos:column="5">case <expr><name pos:line="42" pos:column="10">OP_BACK_REF<pos:position pos:line="42" pos:column="21"/></name></expr>:<pos:position pos:line="42" pos:column="22"/></case>
      <expr_stmt><expr><name><name pos:line="43" pos:column="7">dfa<pos:position pos:line="43" pos:column="10"/></name><operator pos:line="43" pos:column="10">-&gt;<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="12">nexts<pos:position pos:line="43" pos:column="17"/></name><index pos:line="43" pos:column="17">[<expr><name pos:line="43" pos:column="18">idx<pos:position pos:line="43" pos:column="21"/></name></expr>]<pos:position pos:line="43" pos:column="22"/></index></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <name><name pos:line="43" pos:column="25">node<pos:position pos:line="43" pos:column="29"/></name><operator pos:line="43" pos:column="29">-&gt;<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="31">next<pos:position pos:line="43" pos:column="35"/></name><operator pos:line="43" pos:column="35">-&gt;<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="37">node_idx<pos:position pos:line="43" pos:column="45"/></name></name></expr>;<pos:position pos:line="43" pos:column="46"/></expr_stmt>
      <if pos:line="44" pos:column="7">if <condition pos:line="44" pos:column="10">(<expr><name><name pos:line="44" pos:column="11">node<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">token<pos:position pos:line="44" pos:column="22"/></name><operator pos:line="44" pos:column="22">.<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="23">type<pos:position pos:line="44" pos:column="27"/></name></name> <operator pos:line="44" pos:column="28">==<pos:position pos:line="44" pos:column="30"/></operator> <name pos:line="44" pos:column="31">OP_BACK_REF<pos:position pos:line="44" pos:column="42"/></name></expr>)<pos:position pos:line="44" pos:column="43"/></condition><then pos:line="44" pos:column="43">
	<block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="9">err<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <call><name pos:line="45" pos:column="15">re_node_set_init_1<pos:position pos:line="45" pos:column="33"/></name> <argument_list pos:line="45" pos:column="34">(<argument><expr><name><name pos:line="45" pos:column="35">dfa<pos:position pos:line="45" pos:column="38"/></name><operator pos:line="45" pos:column="38">-&gt;<pos:position pos:line="45" pos:column="43"/></operator><name pos:line="45" pos:column="40">edests<pos:position pos:line="45" pos:column="46"/></name></name> <operator pos:line="45" pos:column="47">+<pos:position pos:line="45" pos:column="48"/></operator> <name pos:line="45" pos:column="49">idx<pos:position pos:line="45" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="54">dfa<pos:position pos:line="45" pos:column="57"/></name><operator pos:line="45" pos:column="57">-&gt;<pos:position pos:line="45" pos:column="62"/></operator><name pos:line="45" pos:column="59">nexts<pos:position pos:line="45" pos:column="64"/></name><index pos:line="45" pos:column="64">[<expr><name pos:line="45" pos:column="65">idx<pos:position pos:line="45" pos:column="68"/></name></expr>]<pos:position pos:line="45" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="45" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="71"/></expr_stmt></block></then></if>
      <break pos:line="46" pos:column="7">break;<pos:position pos:line="46" pos:column="13"/></break>

    <default pos:line="48" pos:column="5">default:<pos:position pos:line="48" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">assert<pos:position pos:line="49" pos:column="13"/></name> <argument_list pos:line="49" pos:column="14">(<argument><expr><operator pos:line="49" pos:column="15">!<pos:position pos:line="49" pos:column="16"/></operator><call><name pos:line="49" pos:column="16">IS_EPSILON_NODE<pos:position pos:line="49" pos:column="31"/></name> <argument_list pos:line="49" pos:column="32">(<argument><expr><name><name pos:line="49" pos:column="33">node<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">-&gt;<pos:position pos:line="49" pos:column="42"/></operator><name pos:line="49" pos:column="39">token<pos:position pos:line="49" pos:column="44"/></name><operator pos:line="49" pos:column="44">.<pos:position pos:line="49" pos:column="45"/></operator><name pos:line="49" pos:column="45">type<pos:position pos:line="49" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="50" pos:column="7">dfa<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">-&gt;<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="12">nexts<pos:position pos:line="50" pos:column="17"/></name><index pos:line="50" pos:column="17">[<expr><name pos:line="50" pos:column="18">idx<pos:position pos:line="50" pos:column="21"/></name></expr>]<pos:position pos:line="50" pos:column="22"/></index></name> <operator pos:line="50" pos:column="23">=<pos:position pos:line="50" pos:column="24"/></operator> <name><name pos:line="50" pos:column="25">node<pos:position pos:line="50" pos:column="29"/></name><operator pos:line="50" pos:column="29">-&gt;<pos:position pos:line="50" pos:column="34"/></operator><name pos:line="50" pos:column="31">next<pos:position pos:line="50" pos:column="35"/></name><operator pos:line="50" pos:column="35">-&gt;<pos:position pos:line="50" pos:column="40"/></operator><name pos:line="50" pos:column="37">node_idx<pos:position pos:line="50" pos:column="45"/></name></name></expr>;<pos:position pos:line="50" pos:column="46"/></expr_stmt>
      <break pos:line="51" pos:column="7">break;<pos:position pos:line="51" pos:column="13"/></break>
    }<pos:position pos:line="52" pos:column="6"/></block></switch>

  <return pos:line="54" pos:column="3">return <expr><name pos:line="54" pos:column="10">err<pos:position pos:line="54" pos:column="13"/></name></expr>;<pos:position pos:line="54" pos:column="14"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
