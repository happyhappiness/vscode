<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4441_git-2.2.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">copy_templates_1<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">path<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">baselen<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier><specifier pos:line="2" pos:column="36">template<pos:position pos:line="2" pos:column="44"/></specifier></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">int<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">template_baselen<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="3" pos:column="30">DIR<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">dir<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="39"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">dirent<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">de<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* Note: if ".git/hooks" file exists in the repository being
	 * re-initialized, /etc/core-git/templates/hooks/update would
	 * cause "git init" to fail here.  I think this is sane but
	 * it means that the set of templates we ship by default, along
	 * with the way the namespace under .git/ is organized, should
	 * be really carefully chosen.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">safe_create_dir<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">path<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="31">1<pos:position pos:line="14" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
	<while pos:line="15" pos:column="9">while <condition pos:line="15" pos:column="15">(<expr><operator pos:line="15" pos:column="16">(<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">de<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">=<pos:position pos:line="15" pos:column="21"/></operator> <call><name pos:line="15" pos:column="22">readdir<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">dir<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call><operator pos:line="15" pos:column="34">)<pos:position pos:line="15" pos:column="35"/></operator> <operator pos:line="15" pos:column="36">!=<pos:position pos:line="15" pos:column="38"/></operator> <name pos:line="15" pos:column="39">NULL<pos:position pos:line="15" pos:column="43"/></name></expr>)<pos:position pos:line="15" pos:column="44"/></condition> <block pos:line="15" pos:column="45">{
		<decl_stmt><decl><type><name><name pos:line="16" pos:column="17">struct<pos:position pos:line="16" pos:column="23"/></name> <name pos:line="16" pos:column="24">stat<pos:position pos:line="16" pos:column="28"/></name></name></type> <name pos:line="16" pos:column="29">st_git<pos:position pos:line="16" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="16" pos:column="37">st_template<pos:position pos:line="16" pos:column="48"/></name></decl>;<pos:position pos:line="16" pos:column="49"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">int<pos:position pos:line="17" pos:column="20"/></name></type> <name pos:line="17" pos:column="21">namelen<pos:position pos:line="17" pos:column="28"/></name></decl>;<pos:position pos:line="17" pos:column="29"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">int<pos:position pos:line="18" pos:column="20"/></name></type> <name pos:line="18" pos:column="21">exists<pos:position pos:line="18" pos:column="27"/></name> <init pos:line="18" pos:column="28">= <expr><literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="32"/></decl_stmt>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name><name pos:line="20" pos:column="21">de<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">-&gt;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="25">d_name<pos:position pos:line="20" pos:column="31"/></name><index pos:line="20" pos:column="31">[<expr><literal type="number" pos:line="20" pos:column="32">0<pos:position pos:line="20" pos:column="33"/></literal></expr>]<pos:position pos:line="20" pos:column="34"/></index></name> <operator pos:line="20" pos:column="35">==<pos:position pos:line="20" pos:column="37"/></operator> <literal type="char" pos:line="20" pos:column="38">'.'<pos:position pos:line="20" pos:column="41"/></literal></expr>)<pos:position pos:line="20" pos:column="42"/></condition><then pos:line="20" pos:column="42">
			<block type="pseudo"><continue pos:line="21" pos:column="25">continue;<pos:position pos:line="21" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="22" pos:column="17">namelen<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <call><name pos:line="22" pos:column="27">strlen<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name><name pos:line="22" pos:column="34">de<pos:position pos:line="22" pos:column="36"/></name><operator pos:line="22" pos:column="36">-&gt;<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="38">d_name<pos:position pos:line="22" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="46"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">(<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">PATH_MAX<pos:position pos:line="23" pos:column="30"/></name> <operator pos:line="23" pos:column="31">&lt;=<pos:position pos:line="23" pos:column="36"/></operator> <name pos:line="23" pos:column="34">baselen<pos:position pos:line="23" pos:column="41"/></name> <operator pos:line="23" pos:column="42">+<pos:position pos:line="23" pos:column="43"/></operator> <name pos:line="23" pos:column="44">namelen<pos:position pos:line="23" pos:column="51"/></name><operator pos:line="23" pos:column="51">)<pos:position pos:line="23" pos:column="52"/></operator> <operator pos:line="23" pos:column="53">||<pos:position pos:line="23" pos:column="55"/></operator>
		    <operator pos:line="24" pos:column="21">(<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">PATH_MAX<pos:position pos:line="24" pos:column="30"/></name> <operator pos:line="24" pos:column="31">&lt;=<pos:position pos:line="24" pos:column="36"/></operator> <name pos:line="24" pos:column="34">template_baselen<pos:position pos:line="24" pos:column="50"/></name> <operator pos:line="24" pos:column="51">+<pos:position pos:line="24" pos:column="52"/></operator> <name pos:line="24" pos:column="53">namelen<pos:position pos:line="24" pos:column="60"/></name><operator pos:line="24" pos:column="60">)<pos:position pos:line="24" pos:column="61"/></operator></expr>)<pos:position pos:line="24" pos:column="62"/></condition><then pos:line="24" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">die<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><call><name pos:line="25" pos:column="29">_<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><literal type="string" pos:line="25" pos:column="31">"insanely long template name %s"<pos:position pos:line="25" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="66">de<pos:position pos:line="25" pos:column="68"/></name><operator pos:line="25" pos:column="68">-&gt;<pos:position pos:line="25" pos:column="73"/></operator><name pos:line="25" pos:column="70">d_name<pos:position pos:line="25" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="78"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">memcpy<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name pos:line="26" pos:column="24">path<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">+<pos:position pos:line="26" pos:column="30"/></operator> <name pos:line="26" pos:column="31">baselen<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="40">de<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">-&gt;<pos:position pos:line="26" pos:column="47"/></operator><name pos:line="26" pos:column="44">d_name<pos:position pos:line="26" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="52">namelen<pos:position pos:line="26" pos:column="59"/></name><operator pos:line="26" pos:column="59">+<pos:position pos:line="26" pos:column="60"/></operator><literal type="number" pos:line="26" pos:column="60">1<pos:position pos:line="26" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="63"/></expr_stmt>
		<macro><name pos:line="27" pos:column="17">memcpy<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument pos:line="27" pos:column="24">template + template_baselen<pos:position pos:line="27" pos:column="51"/></argument>, <argument pos:line="27" pos:column="53">de-&gt;d_name<pos:position pos:line="27" pos:column="63"/></argument>, <argument pos:line="27" pos:column="65">namelen+<literal type="number" pos:line="27" pos:column="73">1<pos:position pos:line="27" pos:column="74"/></literal></argument>)<pos:position pos:line="27" pos:column="75"/></argument_list></macro><empty_stmt pos:line="27" pos:column="75">;<pos:position pos:line="27" pos:column="76"/></empty_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><call><name pos:line="28" pos:column="21">lstat<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">(<argument><expr><name pos:line="28" pos:column="27">path<pos:position pos:line="28" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="33">&amp;<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="34">st_git<pos:position pos:line="28" pos:column="40"/></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42"> <block pos:line="28" pos:column="43">{
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><name pos:line="29" pos:column="29">errno<pos:position pos:line="29" pos:column="34"/></name> <operator pos:line="29" pos:column="35">!=<pos:position pos:line="29" pos:column="37"/></operator> <name pos:line="29" pos:column="38">ENOENT<pos:position pos:line="29" pos:column="44"/></name></expr>)<pos:position pos:line="29" pos:column="45"/></condition><then pos:line="29" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="33">die_errno<pos:position pos:line="30" pos:column="42"/></name><argument_list pos:line="30" pos:column="42">(<argument><expr><call><name pos:line="30" pos:column="43">_<pos:position pos:line="30" pos:column="44"/></name><argument_list pos:line="30" pos:column="44">(<argument><expr><literal type="string" pos:line="30" pos:column="45">"cannot stat '%s'"<pos:position pos:line="30" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="30" pos:column="66">path<pos:position pos:line="30" pos:column="70"/></name></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="72"/></expr_stmt></block></then></if>
		}<pos:position pos:line="31" pos:column="18"/></block></then>
		<else pos:line="32" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="25">exists<pos:position pos:line="33" pos:column="31"/></name> <operator pos:line="33" pos:column="32">=<pos:position pos:line="33" pos:column="33"/></operator> <literal type="number" pos:line="33" pos:column="34">1<pos:position pos:line="33" pos:column="35"/></literal></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt></block></else></if>

		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<macro><name pos:line="35" pos:column="21">lstat<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument pos:line="35" pos:column="27">template<pos:position pos:line="35" pos:column="35"/></argument>, <argument pos:line="35" pos:column="37">&amp;st_template<pos:position pos:line="35" pos:column="49"/></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></macro>)<pos:position pos:line="35" pos:column="51"/></condition><then pos:line="35" pos:column="51">
			<block type="pseudo"><macro><name pos:line="36" pos:column="25">die_errno<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument pos:line="36" pos:column="35">_(<literal type="string" pos:line="36" pos:column="37">"cannot stat template '%s'"<pos:position pos:line="36" pos:column="64"/></literal>)<pos:position pos:line="36" pos:column="65"/></argument>, <argument pos:line="36" pos:column="67">template<pos:position pos:line="36" pos:column="75"/></argument>)<pos:position pos:line="36" pos:column="76"/></argument_list></macro><empty_stmt pos:line="36" pos:column="76">;<pos:position pos:line="36" pos:column="77"/></empty_stmt></block></then></if>

		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><call><name pos:line="38" pos:column="21">S_ISDIR<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">(<argument><expr><name><name pos:line="38" pos:column="29">st_template<pos:position pos:line="38" pos:column="40"/></name><operator pos:line="38" pos:column="40">.<pos:position pos:line="38" pos:column="41"/></operator><name pos:line="38" pos:column="41">st_mode<pos:position pos:line="38" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="50"/></condition><then pos:line="38" pos:column="50"> <block pos:line="38" pos:column="51">{
			<decl_stmt><decl><type><name pos:line="39" pos:column="25">DIR<pos:position pos:line="39" pos:column="28"/></name> <modifier pos:line="39" pos:column="29">*<pos:position pos:line="39" pos:column="30"/></modifier></type><name pos:line="39" pos:column="30">subdir<pos:position pos:line="39" pos:column="36"/></name> <init pos:line="39" pos:column="37">= <macro><name pos:line="39" pos:column="39">opendir<pos:position pos:line="39" pos:column="46"/></name><argument_list pos:line="39" pos:column="46">(<argument pos:line="39" pos:column="47">template<pos:position pos:line="39" pos:column="55"/></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></macro></init></decl>;<pos:position pos:line="39" pos:column="57"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="40" pos:column="25">int<pos:position pos:line="40" pos:column="28"/></name></type> <name pos:line="40" pos:column="29">baselen_sub<pos:position pos:line="40" pos:column="40"/></name> <init pos:line="40" pos:column="41">= <expr><name pos:line="40" pos:column="43">baselen<pos:position pos:line="40" pos:column="50"/></name> <operator pos:line="40" pos:column="51">+<pos:position pos:line="40" pos:column="52"/></operator> <name pos:line="40" pos:column="53">namelen<pos:position pos:line="40" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="40" pos:column="61"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="41" pos:column="25">int<pos:position pos:line="41" pos:column="28"/></name></type> <name pos:line="41" pos:column="29">template_baselen_sub<pos:position pos:line="41" pos:column="49"/></name> <init pos:line="41" pos:column="50">= <expr><name pos:line="41" pos:column="52">template_baselen<pos:position pos:line="41" pos:column="68"/></name> <operator pos:line="41" pos:column="69">+<pos:position pos:line="41" pos:column="70"/></operator> <name pos:line="41" pos:column="71">namelen<pos:position pos:line="41" pos:column="78"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="79"/></decl_stmt>
			<if pos:line="42" pos:column="25">if <condition pos:line="42" pos:column="28">(<expr><operator pos:line="42" pos:column="29">!<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="30">subdir<pos:position pos:line="42" pos:column="36"/></name></expr>)<pos:position pos:line="42" pos:column="37"/></condition><then pos:line="42" pos:column="37">
				<block type="pseudo"><macro><name pos:line="43" pos:column="33">die_errno<pos:position pos:line="43" pos:column="42"/></name><argument_list pos:line="43" pos:column="42">(<argument pos:line="43" pos:column="43">_(<literal type="string" pos:line="43" pos:column="45">"cannot opendir '%s'"<pos:position pos:line="43" pos:column="66"/></literal>)<pos:position pos:line="43" pos:column="67"/></argument>, <argument pos:line="43" pos:column="69">template<pos:position pos:line="43" pos:column="77"/></argument>)<pos:position pos:line="43" pos:column="78"/></argument_list></macro><empty_stmt pos:line="43" pos:column="78">;<pos:position pos:line="43" pos:column="79"/></empty_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="44" pos:column="25">path<pos:position pos:line="44" pos:column="29"/></name><index pos:line="44" pos:column="29">[<expr><name pos:line="44" pos:column="30">baselen_sub<pos:position pos:line="44" pos:column="41"/></name><operator pos:line="44" pos:column="41">++<pos:position pos:line="44" pos:column="43"/></operator></expr>]<pos:position pos:line="44" pos:column="44"/></index></name> <operator pos:line="44" pos:column="45">=<pos:position pos:line="44" pos:column="46"/></operator></expr></expr_stmt>
				<template pos:line="45" pos:column="33">template<parameter><type><pos:position pos:line="45" pos:column="41"/></type>[template_baselen_sub++] = '/'<pos:position pos:line="45" pos:column="71"/></parameter><empty_stmt pos:line="45" pos:column="71">;<pos:position pos:line="45" pos:column="72"/></empty_stmt></template>
			<expr_stmt><expr><name><name pos:line="46" pos:column="25">path<pos:position pos:line="46" pos:column="29"/></name><index pos:line="46" pos:column="29">[<expr><name pos:line="46" pos:column="30">baselen_sub<pos:position pos:line="46" pos:column="41"/></name></expr>]<pos:position pos:line="46" pos:column="42"/></index></name> <operator pos:line="46" pos:column="43">=<pos:position pos:line="46" pos:column="44"/></operator></expr></expr_stmt>
				<template pos:line="47" pos:column="33">template<parameter><type><pos:position pos:line="47" pos:column="41"/></type>[template_baselen_sub] = 0<pos:position pos:line="47" pos:column="67"/></parameter><empty_stmt pos:line="47" pos:column="67">;<pos:position pos:line="47" pos:column="68"/></empty_stmt></template>
			<macro><name pos:line="48" pos:column="25">copy_templates_1<pos:position pos:line="48" pos:column="41"/></name><argument_list pos:line="48" pos:column="41">(<argument pos:line="48" pos:column="42">path<pos:position pos:line="48" pos:column="46"/></argument>, <argument pos:line="48" pos:column="48">baselen_sub<pos:position pos:line="48" pos:column="59"/></argument>,
					 <argument pos:line="49" pos:column="42">template<pos:position pos:line="49" pos:column="50"/></argument>, <argument pos:line="49" pos:column="52">template_baselen_sub<pos:position pos:line="49" pos:column="72"/></argument>,
					 <argument pos:line="50" pos:column="42">subdir<pos:position pos:line="50" pos:column="48"/></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></macro><empty_stmt pos:line="50" pos:column="49">;<pos:position pos:line="50" pos:column="50"/></empty_stmt>
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">closedir<pos:position pos:line="51" pos:column="33"/></name><argument_list pos:line="51" pos:column="33">(<argument><expr><name pos:line="51" pos:column="34">subdir<pos:position pos:line="51" pos:column="40"/></name></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="52" pos:column="18"/></block></then>
		<elseif pos:line="53" pos:column="17">else <if pos:line="53" pos:column="22">if <condition pos:line="53" pos:column="25">(<expr><name pos:line="53" pos:column="26">exists<pos:position pos:line="53" pos:column="32"/></name></expr>)<pos:position pos:line="53" pos:column="33"/></condition><then pos:line="53" pos:column="33">
			<block type="pseudo"><continue pos:line="54" pos:column="25">continue;<pos:position pos:line="54" pos:column="34"/></continue></block></then></if></elseif>
		<elseif pos:line="55" pos:column="17">else <if pos:line="55" pos:column="22">if <condition pos:line="55" pos:column="25">(<expr><call><name pos:line="55" pos:column="26">S_ISLNK<pos:position pos:line="55" pos:column="33"/></name><argument_list pos:line="55" pos:column="33">(<argument><expr><name><name pos:line="55" pos:column="34">st_template<pos:position pos:line="55" pos:column="45"/></name><operator pos:line="55" pos:column="45">.<pos:position pos:line="55" pos:column="46"/></operator><name pos:line="55" pos:column="46">st_mode<pos:position pos:line="55" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="55"/></condition><then pos:line="55" pos:column="55"> <block pos:line="55" pos:column="56">{
			<decl_stmt><decl><type><name pos:line="56" pos:column="25">char<pos:position pos:line="56" pos:column="29"/></name></type> <name><name pos:line="56" pos:column="30">lnk<pos:position pos:line="56" pos:column="33"/></name><index pos:line="56" pos:column="33">[<expr><literal type="number" pos:line="56" pos:column="34">256<pos:position pos:line="56" pos:column="37"/></literal></expr>]<pos:position pos:line="56" pos:column="38"/></index></name></decl>;<pos:position pos:line="56" pos:column="39"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="57" pos:column="25">int<pos:position pos:line="57" pos:column="28"/></name></type> <name pos:line="57" pos:column="29">len<pos:position pos:line="57" pos:column="32"/></name></decl>;<pos:position pos:line="57" pos:column="33"/></decl_stmt>
			<expr_stmt><expr><name pos:line="58" pos:column="25">len<pos:position pos:line="58" pos:column="28"/></name> <operator pos:line="58" pos:column="29">=<pos:position pos:line="58" pos:column="30"/></operator> <macro><name pos:line="58" pos:column="31">readlink<pos:position pos:line="58" pos:column="39"/></name><argument_list pos:line="58" pos:column="39">(<argument pos:line="58" pos:column="40">template<pos:position pos:line="58" pos:column="48"/></argument>, <argument pos:line="58" pos:column="50">lnk<pos:position pos:line="58" pos:column="53"/></argument>, <argument pos:line="58" pos:column="55">sizeof(lnk)<pos:position pos:line="58" pos:column="66"/></argument>)<pos:position pos:line="58" pos:column="67"/></argument_list></macro></expr>;<pos:position pos:line="58" pos:column="68"/></expr_stmt>
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name pos:line="59" pos:column="29">len<pos:position pos:line="59" pos:column="32"/></name> <operator pos:line="59" pos:column="33">&lt;<pos:position pos:line="59" pos:column="37"/></operator> <literal type="number" pos:line="59" pos:column="35">0<pos:position pos:line="59" pos:column="36"/></literal></expr>)<pos:position pos:line="59" pos:column="37"/></condition><then pos:line="59" pos:column="37">
				<block type="pseudo"><macro><name pos:line="60" pos:column="33">die_errno<pos:position pos:line="60" pos:column="42"/></name><argument_list pos:line="60" pos:column="42">(<argument pos:line="60" pos:column="43">_(<literal type="string" pos:line="60" pos:column="45">"cannot readlink '%s'"<pos:position pos:line="60" pos:column="67"/></literal>)<pos:position pos:line="60" pos:column="68"/></argument>, <argument pos:line="60" pos:column="70">template<pos:position pos:line="60" pos:column="78"/></argument>)<pos:position pos:line="60" pos:column="79"/></argument_list></macro><empty_stmt pos:line="60" pos:column="79">;<pos:position pos:line="60" pos:column="80"/></empty_stmt></block></then></if>
			<if pos:line="61" pos:column="25">if <condition pos:line="61" pos:column="28">(<expr><sizeof pos:line="61" pos:column="29">sizeof<argument_list pos:line="61" pos:column="35">(<argument><expr><name pos:line="61" pos:column="36">lnk<pos:position pos:line="61" pos:column="39"/></name></expr></argument>)<pos:position pos:line="61" pos:column="40"/></argument_list></sizeof> <operator pos:line="61" pos:column="41">&lt;=<pos:position pos:line="61" pos:column="46"/></operator> <name pos:line="61" pos:column="44">len<pos:position pos:line="61" pos:column="47"/></name></expr>)<pos:position pos:line="61" pos:column="48"/></condition><then pos:line="61" pos:column="48">
				<block type="pseudo"><macro><name pos:line="62" pos:column="33">die<pos:position pos:line="62" pos:column="36"/></name><argument_list pos:line="62" pos:column="36">(<argument pos:line="62" pos:column="37">_(<literal type="string" pos:line="62" pos:column="39">"insanely long symlink %s"<pos:position pos:line="62" pos:column="65"/></literal>)<pos:position pos:line="62" pos:column="66"/></argument>, <argument pos:line="62" pos:column="68">template<pos:position pos:line="62" pos:column="76"/></argument>)<pos:position pos:line="62" pos:column="77"/></argument_list></macro><empty_stmt pos:line="62" pos:column="77">;<pos:position pos:line="62" pos:column="78"/></empty_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="63" pos:column="25">lnk<pos:position pos:line="63" pos:column="28"/></name><index pos:line="63" pos:column="28">[<expr><name pos:line="63" pos:column="29">len<pos:position pos:line="63" pos:column="32"/></name></expr>]<pos:position pos:line="63" pos:column="33"/></index></name> <operator pos:line="63" pos:column="34">=<pos:position pos:line="63" pos:column="35"/></operator> <literal type="number" pos:line="63" pos:column="36">0<pos:position pos:line="63" pos:column="37"/></literal></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><call><name pos:line="64" pos:column="29">symlink<pos:position pos:line="64" pos:column="36"/></name><argument_list pos:line="64" pos:column="36">(<argument><expr><name pos:line="64" pos:column="37">lnk<pos:position pos:line="64" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="42">path<pos:position pos:line="64" pos:column="46"/></name></expr></argument>)<pos:position pos:line="64" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="48"/></condition><then pos:line="64" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="33">die_errno<pos:position pos:line="65" pos:column="42"/></name><argument_list pos:line="65" pos:column="42">(<argument><expr><call><name pos:line="65" pos:column="43">_<pos:position pos:line="65" pos:column="44"/></name><argument_list pos:line="65" pos:column="44">(<argument><expr><literal type="string" pos:line="65" pos:column="45">"cannot symlink '%s' '%s'"<pos:position pos:line="65" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="65" pos:column="74">lnk<pos:position pos:line="65" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="79">path<pos:position pos:line="65" pos:column="83"/></name></expr></argument>)<pos:position pos:line="65" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="85"/></expr_stmt></block></then></if>
		}<pos:position pos:line="66" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="67" pos:column="17">else <if pos:line="67" pos:column="22">if <condition pos:line="67" pos:column="25">(<expr><call><name pos:line="67" pos:column="26">S_ISREG<pos:position pos:line="67" pos:column="33"/></name><argument_list pos:line="67" pos:column="33">(<argument><expr><name><name pos:line="67" pos:column="34">st_template<pos:position pos:line="67" pos:column="45"/></name><operator pos:line="67" pos:column="45">.<pos:position pos:line="67" pos:column="46"/></operator><name pos:line="67" pos:column="46">st_mode<pos:position pos:line="67" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="55"/></condition><then pos:line="67" pos:column="55"> <block pos:line="67" pos:column="56">{
			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<macro><name pos:line="68" pos:column="29">copy_file<pos:position pos:line="68" pos:column="38"/></name><argument_list pos:line="68" pos:column="38">(<argument pos:line="68" pos:column="39">path<pos:position pos:line="68" pos:column="43"/></argument>, <argument pos:line="68" pos:column="45">template<pos:position pos:line="68" pos:column="53"/></argument>, <argument pos:line="68" pos:column="55">st_template.st_mode<pos:position pos:line="68" pos:column="74"/></argument>)<pos:position pos:line="68" pos:column="75"/></argument_list></macro>)<pos:position pos:line="68" pos:column="76"/></condition><then pos:line="68" pos:column="76">
				<block type="pseudo"><macro><name pos:line="69" pos:column="33">die_errno<pos:position pos:line="69" pos:column="42"/></name><argument_list pos:line="69" pos:column="42">(<argument pos:line="69" pos:column="43">_(<literal type="string" pos:line="69" pos:column="45">"cannot copy '%s' to '%s'"<pos:position pos:line="69" pos:column="71"/></literal>)<pos:position pos:line="69" pos:column="72"/></argument>, <argument pos:line="69" pos:column="74">template<pos:position pos:line="69" pos:column="82"/></argument>,
					  <argument pos:line="70" pos:column="43">path<pos:position pos:line="70" pos:column="47"/></argument>)<pos:position pos:line="70" pos:column="48"/></argument_list></macro><empty_stmt pos:line="70" pos:column="48">;<pos:position pos:line="70" pos:column="49"/></empty_stmt></block></then></if>
		}<pos:position pos:line="71" pos:column="18"/></block></then></if></elseif>
		<else pos:line="72" pos:column="17">else
			<block type="pseudo"><macro><name pos:line="73" pos:column="25">error<pos:position pos:line="73" pos:column="30"/></name><argument_list pos:line="73" pos:column="30">(<argument pos:line="73" pos:column="31">_(<literal type="string" pos:line="73" pos:column="33">"ignoring template %s"<pos:position pos:line="73" pos:column="55"/></literal>)<pos:position pos:line="73" pos:column="56"/></argument>, <argument pos:line="73" pos:column="58">template<pos:position pos:line="73" pos:column="66"/></argument>)<pos:position pos:line="73" pos:column="67"/></argument_list></macro><empty_stmt pos:line="73" pos:column="67">;<pos:position pos:line="73" pos:column="68"/></empty_stmt></block></else></if>
	}<pos:position pos:line="74" pos:column="10"/></block></while>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
