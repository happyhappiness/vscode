<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_325_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ie_match_stat<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">index_state<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">istate<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
		  <parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name><name pos:line="2" pos:column="25">struct<pos:position pos:line="2" pos:column="31"/></name> <name pos:line="2" pos:column="32">cache_entry<pos:position pos:line="2" pos:column="43"/></name></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">ce<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="49">struct<pos:position pos:line="2" pos:column="55"/></name> <name pos:line="2" pos:column="56">stat<pos:position pos:line="2" pos:column="60"/></name></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">st<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
		  <parameter><decl><type><name pos:line="3" pos:column="19">unsigned<pos:position pos:line="3" pos:column="27"/></name> <name pos:line="3" pos:column="28">int<pos:position pos:line="3" pos:column="31"/></name></type> <name pos:line="3" pos:column="32">options<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="40"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">int<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">changed<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">ignore_valid<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name pos:line="6" pos:column="28">options<pos:position pos:line="6" pos:column="35"/></name> <operator pos:line="6" pos:column="36">&amp;<pos:position pos:line="6" pos:column="41"/></operator> <name pos:line="6" pos:column="38">CE_MATCH_IGNORE_VALID<pos:position pos:line="6" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">ignore_skip_worktree<pos:position pos:line="7" pos:column="33"/></name> <init pos:line="7" pos:column="34">= <expr><name pos:line="7" pos:column="36">options<pos:position pos:line="7" pos:column="43"/></name> <operator pos:line="7" pos:column="44">&amp;<pos:position pos:line="7" pos:column="49"/></operator> <name pos:line="7" pos:column="46">CE_MATCH_IGNORE_SKIP_WORKTREE<pos:position pos:line="7" pos:column="75"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="76"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">assume_racy_is_modified<pos:position pos:line="8" pos:column="36"/></name> <init pos:line="8" pos:column="37">= <expr><name pos:line="8" pos:column="39">options<pos:position pos:line="8" pos:column="46"/></name> <operator pos:line="8" pos:column="47">&amp;<pos:position pos:line="8" pos:column="52"/></operator> <name pos:line="8" pos:column="49">CE_MATCH_RACY_IS_DIRTY<pos:position pos:line="8" pos:column="71"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="72"/></decl_stmt>

	<comment type="block" pos:line="10" pos:column="9">/*
	 * If it's marked as always valid in the index, it's
	 * valid whatever the checked-out copy says.
	 *
	 * skip-worktree has the same effect with higher precedence
	 */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">ignore_skip_worktree<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">&amp;&amp;<pos:position pos:line="16" pos:column="45"/></operator> <call><name pos:line="16" pos:column="38">ce_skip_worktree<pos:position pos:line="16" pos:column="54"/></name><argument_list pos:line="16" pos:column="54">(<argument><expr><name pos:line="16" pos:column="55">ce<pos:position pos:line="16" pos:column="57"/></name></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="59"/></condition><then pos:line="16" pos:column="59">
		<block type="pseudo"><return pos:line="17" pos:column="17">return <expr><literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></return></block></then></if>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">ignore_valid<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">&amp;&amp;<pos:position pos:line="18" pos:column="37"/></operator> <operator pos:line="18" pos:column="30">(<pos:position pos:line="18" pos:column="31"/></operator><name><name pos:line="18" pos:column="31">ce<pos:position pos:line="18" pos:column="33"/></name><operator pos:line="18" pos:column="33">-&gt;<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="35">ce_flags<pos:position pos:line="18" pos:column="43"/></name></name> <operator pos:line="18" pos:column="44">&amp;<pos:position pos:line="18" pos:column="49"/></operator> <name pos:line="18" pos:column="46">CE_VALID<pos:position pos:line="18" pos:column="54"/></name><operator pos:line="18" pos:column="54">)<pos:position pos:line="18" pos:column="55"/></operator></expr>)<pos:position pos:line="18" pos:column="56"/></condition><then pos:line="18" pos:column="56">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="21" pos:column="9">/*
	 * Intent-to-add entries have not been added, so the index entry
	 * by definition never matches what is in the work tree until it
	 * actually gets added.
	 */</comment>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name pos:line="26" pos:column="13">ce_intent_to_add<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">ce<pos:position pos:line="26" pos:column="32"/></name></expr></argument>)<pos:position pos:line="26" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="34"/></condition><then pos:line="26" pos:column="34">
		<block type="pseudo"><return pos:line="27" pos:column="17">return <expr><name pos:line="27" pos:column="24">DATA_CHANGED<pos:position pos:line="27" pos:column="36"/></name> <operator pos:line="27" pos:column="37">|<pos:position pos:line="27" pos:column="38"/></operator> <name pos:line="27" pos:column="39">TYPE_CHANGED<pos:position pos:line="27" pos:column="51"/></name> <operator pos:line="27" pos:column="52">|<pos:position pos:line="27" pos:column="53"/></operator> <name pos:line="27" pos:column="54">MODE_CHANGED<pos:position pos:line="27" pos:column="66"/></name></expr>;<pos:position pos:line="27" pos:column="67"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="29" pos:column="9">changed<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <call><name pos:line="29" pos:column="19">ce_match_stat_basic<pos:position pos:line="29" pos:column="38"/></name><argument_list pos:line="29" pos:column="38">(<argument><expr><name pos:line="29" pos:column="39">ce<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="43">st<pos:position pos:line="29" pos:column="45"/></name></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="47"/></expr_stmt>

	<comment type="block" pos:line="31" pos:column="9">/*
	 * Within 1 second of this sequence:
	 * 	echo xyzzy &gt;file &amp;&amp; git-update-index --add file
	 * running this command:
	 * 	echo frotz &gt;file
	 * would give a falsely clean cache entry.  The mtime and
	 * length match the cache, and other stat fields do not change.
	 *
	 * We could detect this at update-index time (the cache entry
	 * being registered/updated records the same time as "now")
	 * and delay the return from git-update-index, but that would
	 * effectively mean we can make at most one commit per second,
	 * which is not acceptable.  Instead, we check cache entries
	 * whose mtime are the same as the index file timestamp more
	 * carefully than others.
	 */</comment>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">!<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="14">changed<pos:position pos:line="47" pos:column="21"/></name> <operator pos:line="47" pos:column="22">&amp;&amp;<pos:position pos:line="47" pos:column="32"/></operator> <call><name pos:line="47" pos:column="25">is_racy_timestamp<pos:position pos:line="47" pos:column="42"/></name><argument_list pos:line="47" pos:column="42">(<argument><expr><name pos:line="47" pos:column="43">istate<pos:position pos:line="47" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="51">ce<pos:position pos:line="47" pos:column="53"/></name></expr></argument>)<pos:position pos:line="47" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="55"/></condition><then pos:line="47" pos:column="55"> <block pos:line="47" pos:column="56">{
		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><name pos:line="48" pos:column="21">assume_racy_is_modified<pos:position pos:line="48" pos:column="44"/></name></expr>)<pos:position pos:line="48" pos:column="45"/></condition><then pos:line="48" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="25">changed<pos:position pos:line="49" pos:column="32"/></name> <operator pos:line="49" pos:column="33">|=<pos:position pos:line="49" pos:column="35"/></operator> <name pos:line="49" pos:column="36">DATA_CHANGED<pos:position pos:line="49" pos:column="48"/></name></expr>;<pos:position pos:line="49" pos:column="49"/></expr_stmt></block></then>
		<else pos:line="50" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="25">changed<pos:position pos:line="51" pos:column="32"/></name> <operator pos:line="51" pos:column="33">|=<pos:position pos:line="51" pos:column="35"/></operator> <call><name pos:line="51" pos:column="36">ce_modified_check_fs<pos:position pos:line="51" pos:column="56"/></name><argument_list pos:line="51" pos:column="56">(<argument><expr><name pos:line="51" pos:column="57">ce<pos:position pos:line="51" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="61">st<pos:position pos:line="51" pos:column="63"/></name></expr></argument>)<pos:position pos:line="51" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="65"/></expr_stmt></block></else></if>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<return pos:line="54" pos:column="9">return <expr><name pos:line="54" pos:column="16">changed<pos:position pos:line="54" pos:column="23"/></name></expr>;<pos:position pos:line="54" pos:column="24"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
