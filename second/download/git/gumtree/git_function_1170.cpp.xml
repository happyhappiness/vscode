<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1170.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <specifier pos:line="1" pos:column="8">inline<pos:position pos:line="1" pos:column="14"/></specifier> <type><name pos:line="1" pos:column="15">void<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">dup_devnull<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">to<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><call><name pos:line="3" pos:column="18">open<pos:position pos:line="3" pos:column="22"/></name><argument_list pos:line="3" pos:column="22">(<argument><expr><literal type="string" pos:line="3" pos:column="23">"/dev/null"<pos:position pos:line="3" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="36">O_RDWR<pos:position pos:line="3" pos:column="42"/></name></expr></argument>)<pos:position pos:line="3" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="44"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name pos:line="4" pos:column="13">fd<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">&lt;<pos:position pos:line="4" pos:column="20"/></operator> <literal type="number" pos:line="4" pos:column="18">0<pos:position pos:line="4" pos:column="19"/></literal></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then pos:line="4" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="5" pos:column="17">die_errno<pos:position pos:line="5" pos:column="26"/></name><argument_list pos:line="5" pos:column="26">(<argument><expr><call><name pos:line="5" pos:column="27">_<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><literal type="string" pos:line="5" pos:column="29">"open /dev/null failed"<pos:position pos:line="5" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="55"/></expr_stmt></block></then></if>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">dup2<pos:position pos:line="6" pos:column="17"/></name><argument_list pos:line="6" pos:column="17">(<argument><expr><name pos:line="6" pos:column="18">fd<pos:position pos:line="6" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="22">to<pos:position pos:line="6" pos:column="24"/></name></expr></argument>)<pos:position pos:line="6" pos:column="25"/></argument_list></call> <operator pos:line="6" pos:column="26">&lt;<pos:position pos:line="6" pos:column="30"/></operator> <literal type="number" pos:line="6" pos:column="28">0<pos:position pos:line="6" pos:column="29"/></literal></expr>)<pos:position pos:line="6" pos:column="30"/></condition><then pos:line="6" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">die_errno<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><call><name pos:line="7" pos:column="27">_<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><literal type="string" pos:line="7" pos:column="29">"dup2(%d,%d) failed"<pos:position pos:line="7" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="7" pos:column="52">fd<pos:position pos:line="7" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="56">to<pos:position pos:line="7" pos:column="58"/></name></expr></argument>)<pos:position pos:line="7" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="60"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">close<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">fd<pos:position pos:line="8" pos:column="17"/></name></expr></argument>)<pos:position pos:line="8" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="19"/></expr_stmt>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
