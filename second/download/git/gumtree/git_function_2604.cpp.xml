<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2604.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">write_loose_object<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">unsigned<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">sha1<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">hdr<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="69">int<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">hdrlen<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">void<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">buf<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">unsigned<pos:position pos:line="2" pos:column="56"/></name> <name pos:line="2" pos:column="57">long<pos:position pos:line="2" pos:column="61"/></name></type> <name pos:line="2" pos:column="62">len<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">time_t<pos:position pos:line="2" pos:column="73"/></name></type> <name pos:line="2" pos:column="74">mtime<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="80"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">fd<pos:position pos:line="4" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="17">ret<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name><name pos:line="5" pos:column="23">compressed<pos:position pos:line="5" pos:column="33"/></name><index pos:line="5" pos:column="33">[<expr><literal type="number" pos:line="5" pos:column="34">4096<pos:position pos:line="5" pos:column="38"/></literal></expr>]<pos:position pos:line="5" pos:column="39"/></index></name></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">git_zstream<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">stream<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">git_SHA_CTX<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">c<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name> <name pos:line="8" pos:column="18">char<pos:position pos:line="8" pos:column="22"/></name></type> <name><name pos:line="8" pos:column="23">parano_sha1<pos:position pos:line="8" pos:column="34"/></name><index pos:line="8" pos:column="34">[<expr><literal type="number" pos:line="8" pos:column="35">20<pos:position pos:line="8" pos:column="37"/></literal></expr>]<pos:position pos:line="8" pos:column="38"/></index></name></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="9" pos:column="9">static<pos:position pos:line="9" pos:column="15"/></specifier> <type><name pos:line="9" pos:column="16">char<pos:position pos:line="9" pos:column="20"/></name></type> <name><name pos:line="9" pos:column="21">tmp_file<pos:position pos:line="9" pos:column="29"/></name><index pos:line="9" pos:column="29">[<expr><name pos:line="9" pos:column="30">PATH_MAX<pos:position pos:line="9" pos:column="38"/></name></expr>]<pos:position pos:line="9" pos:column="39"/></index></name></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">filename<pos:position pos:line="10" pos:column="29"/></name> <init pos:line="10" pos:column="30">= <expr><call><name pos:line="10" pos:column="32">sha1_file_name<pos:position pos:line="10" pos:column="46"/></name><argument_list pos:line="10" pos:column="46">(<argument><expr><name pos:line="10" pos:column="47">sha1<pos:position pos:line="10" pos:column="51"/></name></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="53"/></decl_stmt>

	<expr_stmt><expr><name pos:line="12" pos:column="9">fd<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">create_tmpfile<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><name pos:line="12" pos:column="29">tmp_file<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="39">sizeof<argument_list pos:line="12" pos:column="45">(<argument><expr><name pos:line="12" pos:column="46">tmp_file<pos:position pos:line="12" pos:column="54"/></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="12" pos:column="57">filename<pos:position pos:line="12" pos:column="65"/></name></expr></argument>)<pos:position pos:line="12" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="67"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">fd<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">&lt;<pos:position pos:line="13" pos:column="20"/></operator> <literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20"> <block pos:line="13" pos:column="21">{
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">errno<pos:position pos:line="14" pos:column="26"/></name> <operator pos:line="14" pos:column="27">==<pos:position pos:line="14" pos:column="29"/></operator> <name pos:line="14" pos:column="30">EACCES<pos:position pos:line="14" pos:column="36"/></name></expr>)<pos:position pos:line="14" pos:column="37"/></condition><then pos:line="14" pos:column="37">
			<block type="pseudo"><return pos:line="15" pos:column="25">return <expr><call><name pos:line="15" pos:column="32">error<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><literal type="string" pos:line="15" pos:column="38">"insufficient permission for adding an object to repository database %s"<pos:position pos:line="15" pos:column="110"/></literal></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="112">get_object_directory<pos:position pos:line="15" pos:column="132"/></name><argument_list pos:line="15" pos:column="132">()<pos:position pos:line="15" pos:column="134"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="135"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="136"/></return></block></then>
		<else pos:line="16" pos:column="17">else
			<block type="pseudo"><return pos:line="17" pos:column="25">return <expr><call><name pos:line="17" pos:column="32">error<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><literal type="string" pos:line="17" pos:column="38">"unable to create temporary file: %s"<pos:position pos:line="17" pos:column="75"/></literal></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="77">strerror<pos:position pos:line="17" pos:column="85"/></name><argument_list pos:line="17" pos:column="85">(<argument><expr><name pos:line="17" pos:column="86">errno<pos:position pos:line="17" pos:column="91"/></name></expr></argument>)<pos:position pos:line="17" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="94"/></return></block></else></if>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="20" pos:column="9">/* Set it up */</comment>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">git_deflate_init<pos:position pos:line="21" pos:column="25"/></name><argument_list pos:line="21" pos:column="25">(<argument><expr><operator pos:line="21" pos:column="26">&amp;<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="27">stream<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="35">zlib_compression_level<pos:position pos:line="21" pos:column="57"/></name></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">stream<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">.<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">next_out<pos:position pos:line="22" pos:column="24"/></name></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <name pos:line="22" pos:column="27">compressed<pos:position pos:line="22" pos:column="37"/></name></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">stream<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">.<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="16">avail_out<pos:position pos:line="23" pos:column="25"/></name></name> <operator pos:line="23" pos:column="26">=<pos:position pos:line="23" pos:column="27"/></operator> <sizeof pos:line="23" pos:column="28">sizeof<argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">compressed<pos:position pos:line="23" pos:column="45"/></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></sizeof></expr>;<pos:position pos:line="23" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">git_SHA1_Init<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><operator pos:line="24" pos:column="23">&amp;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="24">c<pos:position pos:line="24" pos:column="25"/></name></expr></argument>)<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>

	<comment type="block" pos:line="26" pos:column="9">/* First header.. */</comment>
	<expr_stmt><expr><name><name pos:line="27" pos:column="9">stream<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">.<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="16">next_in<pos:position pos:line="27" pos:column="23"/></name></name> <operator pos:line="27" pos:column="24">=<pos:position pos:line="27" pos:column="25"/></operator> <operator pos:line="27" pos:column="26">(<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="27">unsigned<pos:position pos:line="27" pos:column="35"/></name> <name pos:line="27" pos:column="36">char<pos:position pos:line="27" pos:column="40"/></name> <operator pos:line="27" pos:column="41">*<pos:position pos:line="27" pos:column="42"/></operator><operator pos:line="27" pos:column="42">)<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="43">hdr<pos:position pos:line="27" pos:column="46"/></name></expr>;<pos:position pos:line="27" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="28" pos:column="9">stream<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">.<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">avail_in<pos:position pos:line="28" pos:column="24"/></name></name> <operator pos:line="28" pos:column="25">=<pos:position pos:line="28" pos:column="26"/></operator> <name pos:line="28" pos:column="27">hdrlen<pos:position pos:line="28" pos:column="33"/></name></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
	<while pos:line="29" pos:column="9">while <condition pos:line="29" pos:column="15">(<expr><call><name pos:line="29" pos:column="16">git_deflate<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><operator pos:line="29" pos:column="28">&amp;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="29">stream<pos:position pos:line="29" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="37">0<pos:position pos:line="29" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call> <operator pos:line="29" pos:column="40">==<pos:position pos:line="29" pos:column="42"/></operator> <name pos:line="29" pos:column="43">Z_OK<pos:position pos:line="29" pos:column="47"/></name></expr>)<pos:position pos:line="29" pos:column="48"/></condition>
		<block type="pseudo"><empty_stmt pos:line="30" pos:column="17">;<pos:position pos:line="30" pos:column="18"/></empty_stmt></block></while> <comment type="block" pos:line="30" pos:column="19">/* nothing */</comment>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">git_SHA1_Update<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><operator pos:line="31" pos:column="25">&amp;<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="26">c<pos:position pos:line="31" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="29">hdr<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="34">hdrlen<pos:position pos:line="31" pos:column="40"/></name></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>

	<comment type="block" pos:line="33" pos:column="9">/* Then the data itself.. */</comment>
	<expr_stmt><expr><name><name pos:line="34" pos:column="9">stream<pos:position pos:line="34" pos:column="15"/></name><operator pos:line="34" pos:column="15">.<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="16">next_in<pos:position pos:line="34" pos:column="23"/></name></name> <operator pos:line="34" pos:column="24">=<pos:position pos:line="34" pos:column="25"/></operator> <operator pos:line="34" pos:column="26">(<pos:position pos:line="34" pos:column="27"/></operator><name pos:line="34" pos:column="27">void<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">*<pos:position pos:line="34" pos:column="33"/></operator><operator pos:line="34" pos:column="33">)<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="34">buf<pos:position pos:line="34" pos:column="37"/></name></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="35" pos:column="9">stream<pos:position pos:line="35" pos:column="15"/></name><operator pos:line="35" pos:column="15">.<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="16">avail_in<pos:position pos:line="35" pos:column="24"/></name></name> <operator pos:line="35" pos:column="25">=<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="27">len<pos:position pos:line="35" pos:column="30"/></name></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
	<do pos:line="36" pos:column="9">do <block pos:line="36" pos:column="12">{
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">unsigned<pos:position pos:line="37" pos:column="25"/></name> <name pos:line="37" pos:column="26">char<pos:position pos:line="37" pos:column="30"/></name> <modifier pos:line="37" pos:column="31">*<pos:position pos:line="37" pos:column="32"/></modifier></type><name pos:line="37" pos:column="32">in0<pos:position pos:line="37" pos:column="35"/></name> <init pos:line="37" pos:column="36">= <expr><name><name pos:line="37" pos:column="38">stream<pos:position pos:line="37" pos:column="44"/></name><operator pos:line="37" pos:column="44">.<pos:position pos:line="37" pos:column="45"/></operator><name pos:line="37" pos:column="45">next_in<pos:position pos:line="37" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="37" pos:column="53"/></decl_stmt>
		<expr_stmt><expr><name pos:line="38" pos:column="17">ret<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">=<pos:position pos:line="38" pos:column="22"/></operator> <call><name pos:line="38" pos:column="23">git_deflate<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><operator pos:line="38" pos:column="35">&amp;<pos:position pos:line="38" pos:column="40"/></operator><name pos:line="38" pos:column="36">stream<pos:position pos:line="38" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="44">Z_FINISH<pos:position pos:line="38" pos:column="52"/></name></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">git_SHA1_Update<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><operator pos:line="39" pos:column="33">&amp;<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="34">c<pos:position pos:line="39" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="37">in0<pos:position pos:line="39" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="42">stream<pos:position pos:line="39" pos:column="48"/></name><operator pos:line="39" pos:column="48">.<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="49">next_in<pos:position pos:line="39" pos:column="56"/></name></name> <operator pos:line="39" pos:column="57">-<pos:position pos:line="39" pos:column="58"/></operator> <name pos:line="39" pos:column="59">in0<pos:position pos:line="39" pos:column="62"/></name></expr></argument>)<pos:position pos:line="39" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="64"/></expr_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><call><name pos:line="40" pos:column="21">write_buffer<pos:position pos:line="40" pos:column="33"/></name><argument_list pos:line="40" pos:column="33">(<argument><expr><name pos:line="40" pos:column="34">fd<pos:position pos:line="40" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="38">compressed<pos:position pos:line="40" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="50">stream<pos:position pos:line="40" pos:column="56"/></name><operator pos:line="40" pos:column="56">.<pos:position pos:line="40" pos:column="57"/></operator><name pos:line="40" pos:column="57">next_out<pos:position pos:line="40" pos:column="65"/></name></name> <operator pos:line="40" pos:column="66">-<pos:position pos:line="40" pos:column="67"/></operator> <name pos:line="40" pos:column="68">compressed<pos:position pos:line="40" pos:column="78"/></name></expr></argument>)<pos:position pos:line="40" pos:column="79"/></argument_list></call> <operator pos:line="40" pos:column="80">&lt;<pos:position pos:line="40" pos:column="84"/></operator> <literal type="number" pos:line="40" pos:column="82">0<pos:position pos:line="40" pos:column="83"/></literal></expr>)<pos:position pos:line="40" pos:column="84"/></condition><then pos:line="40" pos:column="84">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="25">die<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">(<argument><expr><literal type="string" pos:line="41" pos:column="29">"unable to write sha1 file"<pos:position pos:line="41" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="58"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="42" pos:column="17">stream<pos:position pos:line="42" pos:column="23"/></name><operator pos:line="42" pos:column="23">.<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="24">next_out<pos:position pos:line="42" pos:column="32"/></name></name> <operator pos:line="42" pos:column="33">=<pos:position pos:line="42" pos:column="34"/></operator> <name pos:line="42" pos:column="35">compressed<pos:position pos:line="42" pos:column="45"/></name></expr>;<pos:position pos:line="42" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">stream<pos:position pos:line="43" pos:column="23"/></name><operator pos:line="43" pos:column="23">.<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="24">avail_out<pos:position pos:line="43" pos:column="33"/></name></name> <operator pos:line="43" pos:column="34">=<pos:position pos:line="43" pos:column="35"/></operator> <sizeof pos:line="43" pos:column="36">sizeof<argument_list pos:line="43" pos:column="42">(<argument><expr><name pos:line="43" pos:column="43">compressed<pos:position pos:line="43" pos:column="53"/></name></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></sizeof></expr>;<pos:position pos:line="43" pos:column="55"/></expr_stmt>
	}<pos:position pos:line="44" pos:column="10"/></block> while <condition pos:line="44" pos:column="17">(<expr><name pos:line="44" pos:column="18">ret<pos:position pos:line="44" pos:column="21"/></name> <operator pos:line="44" pos:column="22">==<pos:position pos:line="44" pos:column="24"/></operator> <name pos:line="44" pos:column="25">Z_OK<pos:position pos:line="44" pos:column="29"/></name></expr>)<pos:position pos:line="44" pos:column="30"/></condition>;<pos:position pos:line="44" pos:column="31"/></do>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">ret<pos:position pos:line="46" pos:column="16"/></name> <operator pos:line="46" pos:column="17">!=<pos:position pos:line="46" pos:column="19"/></operator> <name pos:line="46" pos:column="20">Z_STREAM_END<pos:position pos:line="46" pos:column="32"/></name></expr>)<pos:position pos:line="46" pos:column="33"/></condition><then pos:line="46" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="17">die<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><literal type="string" pos:line="47" pos:column="21">"unable to deflate new object %s (%d)"<pos:position pos:line="47" pos:column="59"/></literal></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="61">sha1_to_hex<pos:position pos:line="47" pos:column="72"/></name><argument_list pos:line="47" pos:column="72">(<argument><expr><name pos:line="47" pos:column="73">sha1<pos:position pos:line="47" pos:column="77"/></name></expr></argument>)<pos:position pos:line="47" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="47" pos:column="80">ret<pos:position pos:line="47" pos:column="83"/></name></expr></argument>)<pos:position pos:line="47" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="85"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="48" pos:column="9">ret<pos:position pos:line="48" pos:column="12"/></name> <operator pos:line="48" pos:column="13">=<pos:position pos:line="48" pos:column="14"/></operator> <call><name pos:line="48" pos:column="15">git_deflate_end_gently<pos:position pos:line="48" pos:column="37"/></name><argument_list pos:line="48" pos:column="37">(<argument><expr><operator pos:line="48" pos:column="38">&amp;<pos:position pos:line="48" pos:column="43"/></operator><name pos:line="48" pos:column="39">stream<pos:position pos:line="48" pos:column="45"/></name></expr></argument>)<pos:position pos:line="48" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">ret<pos:position pos:line="49" pos:column="16"/></name> <operator pos:line="49" pos:column="17">!=<pos:position pos:line="49" pos:column="19"/></operator> <name pos:line="49" pos:column="20">Z_OK<pos:position pos:line="49" pos:column="24"/></name></expr>)<pos:position pos:line="49" pos:column="25"/></condition><then pos:line="49" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="17">die<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><literal type="string" pos:line="50" pos:column="21">"deflateEnd on object %s failed (%d)"<pos:position pos:line="50" pos:column="58"/></literal></expr></argument>, <argument><expr><call><name pos:line="50" pos:column="60">sha1_to_hex<pos:position pos:line="50" pos:column="71"/></name><argument_list pos:line="50" pos:column="71">(<argument><expr><name pos:line="50" pos:column="72">sha1<pos:position pos:line="50" pos:column="76"/></name></expr></argument>)<pos:position pos:line="50" pos:column="77"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="50" pos:column="79">ret<pos:position pos:line="50" pos:column="82"/></name></expr></argument>)<pos:position pos:line="50" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="84"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="51" pos:column="9">git_SHA1_Final<pos:position pos:line="51" pos:column="23"/></name><argument_list pos:line="51" pos:column="23">(<argument><expr><name pos:line="51" pos:column="24">parano_sha1<pos:position pos:line="51" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="37">&amp;<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="38">c<pos:position pos:line="51" pos:column="39"/></name></expr></argument>)<pos:position pos:line="51" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name pos:line="52" pos:column="13">hashcmp<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name pos:line="52" pos:column="21">sha1<pos:position pos:line="52" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="27">parano_sha1<pos:position pos:line="52" pos:column="38"/></name></expr></argument>)<pos:position pos:line="52" pos:column="39"/></argument_list></call> <operator pos:line="52" pos:column="40">!=<pos:position pos:line="52" pos:column="42"/></operator> <literal type="number" pos:line="52" pos:column="43">0<pos:position pos:line="52" pos:column="44"/></literal></expr>)<pos:position pos:line="52" pos:column="45"/></condition><then pos:line="52" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="17">die<pos:position pos:line="53" pos:column="20"/></name><argument_list pos:line="53" pos:column="20">(<argument><expr><literal type="string" pos:line="53" pos:column="21">"confused by unstable object source data for %s"<pos:position pos:line="53" pos:column="69"/></literal></expr></argument>, <argument><expr><call><name pos:line="53" pos:column="71">sha1_to_hex<pos:position pos:line="53" pos:column="82"/></name><argument_list pos:line="53" pos:column="82">(<argument><expr><name pos:line="53" pos:column="83">sha1<pos:position pos:line="53" pos:column="87"/></name></expr></argument>)<pos:position pos:line="53" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="53" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="90"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="55" pos:column="9">close_sha1_file<pos:position pos:line="55" pos:column="24"/></name><argument_list pos:line="55" pos:column="24">(<argument><expr><name pos:line="55" pos:column="25">fd<pos:position pos:line="55" pos:column="27"/></name></expr></argument>)<pos:position pos:line="55" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="29"/></expr_stmt>

	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">mtime<pos:position pos:line="57" pos:column="18"/></name></expr>)<pos:position pos:line="57" pos:column="19"/></condition><then pos:line="57" pos:column="19"> <block pos:line="57" pos:column="20">{
		<decl_stmt><decl><type><name><name pos:line="58" pos:column="17">struct<pos:position pos:line="58" pos:column="23"/></name> <name pos:line="58" pos:column="24">utimbuf<pos:position pos:line="58" pos:column="31"/></name></name></type> <name pos:line="58" pos:column="32">utb<pos:position pos:line="58" pos:column="35"/></name></decl>;<pos:position pos:line="58" pos:column="36"/></decl_stmt>
		<expr_stmt><expr><name><name pos:line="59" pos:column="17">utb<pos:position pos:line="59" pos:column="20"/></name><operator pos:line="59" pos:column="20">.<pos:position pos:line="59" pos:column="21"/></operator><name pos:line="59" pos:column="21">actime<pos:position pos:line="59" pos:column="27"/></name></name> <operator pos:line="59" pos:column="28">=<pos:position pos:line="59" pos:column="29"/></operator> <name pos:line="59" pos:column="30">mtime<pos:position pos:line="59" pos:column="35"/></name></expr>;<pos:position pos:line="59" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="60" pos:column="17">utb<pos:position pos:line="60" pos:column="20"/></name><operator pos:line="60" pos:column="20">.<pos:position pos:line="60" pos:column="21"/></operator><name pos:line="60" pos:column="21">modtime<pos:position pos:line="60" pos:column="28"/></name></name> <operator pos:line="60" pos:column="29">=<pos:position pos:line="60" pos:column="30"/></operator> <name pos:line="60" pos:column="31">mtime<pos:position pos:line="60" pos:column="36"/></name></expr>;<pos:position pos:line="60" pos:column="37"/></expr_stmt>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><call><name pos:line="61" pos:column="21">utime<pos:position pos:line="61" pos:column="26"/></name><argument_list pos:line="61" pos:column="26">(<argument><expr><name pos:line="61" pos:column="27">tmp_file<pos:position pos:line="61" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="37">&amp;<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="38">utb<pos:position pos:line="61" pos:column="41"/></name></expr></argument>)<pos:position pos:line="61" pos:column="42"/></argument_list></call> <operator pos:line="61" pos:column="43">&lt;<pos:position pos:line="61" pos:column="47"/></operator> <literal type="number" pos:line="61" pos:column="45">0<pos:position pos:line="61" pos:column="46"/></literal></expr>)<pos:position pos:line="61" pos:column="47"/></condition><then pos:line="61" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="25">warning<pos:position pos:line="62" pos:column="32"/></name><argument_list pos:line="62" pos:column="32">(<argument><expr><literal type="string" pos:line="62" pos:column="33">"failed utime() on %s: %s"<pos:position pos:line="62" pos:column="59"/></literal></expr></argument>,
				<argument><expr><name pos:line="63" pos:column="33">tmp_file<pos:position pos:line="63" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="63" pos:column="43">strerror<pos:position pos:line="63" pos:column="51"/></name><argument_list pos:line="63" pos:column="51">(<argument><expr><name pos:line="63" pos:column="52">errno<pos:position pos:line="63" pos:column="57"/></name></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="60"/></expr_stmt></block></then></if>
	}<pos:position pos:line="64" pos:column="10"/></block></then></if>

	<return pos:line="66" pos:column="9">return <expr><call><name pos:line="66" pos:column="16">finalize_object_file<pos:position pos:line="66" pos:column="36"/></name><argument_list pos:line="66" pos:column="36">(<argument><expr><name pos:line="66" pos:column="37">tmp_file<pos:position pos:line="66" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="47">filename<pos:position pos:line="66" pos:column="55"/></name></expr></argument>)<pos:position pos:line="66" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="57"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
