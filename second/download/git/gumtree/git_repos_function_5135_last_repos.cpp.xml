<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5135_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">count_loose<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">object_id<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">oid<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">path<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">void<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">data<pos:position pos:line="1" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="82"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">stat<pos:position pos:line="3" pos:column="20"/></name></name></type> <name pos:line="3" pos:column="21">st<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">lstat<pos:position pos:line="5" pos:column="18"/></name><argument_list pos:line="5" pos:column="18">(<argument><expr><name pos:line="5" pos:column="19">path<pos:position pos:line="5" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="25">&amp;<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="26">st<pos:position pos:line="5" pos:column="28"/></name></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call> <operator pos:line="5" pos:column="30">||<pos:position pos:line="5" pos:column="32"/></operator> <operator pos:line="5" pos:column="33">!<pos:position pos:line="5" pos:column="34"/></operator><call><name pos:line="5" pos:column="34">S_ISREG<pos:position pos:line="5" pos:column="41"/></name><argument_list pos:line="5" pos:column="41">(<argument><expr><name><name pos:line="5" pos:column="42">st<pos:position pos:line="5" pos:column="44"/></name><operator pos:line="5" pos:column="44">.<pos:position pos:line="5" pos:column="45"/></operator><name pos:line="5" pos:column="45">st_mode<pos:position pos:line="5" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="54"/></condition><then pos:line="5" pos:column="54">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="17">loose_garbage<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">path<pos:position pos:line="6" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="37"/></expr_stmt></block></then>
	<else pos:line="7" pos:column="9">else <block pos:line="7" pos:column="14">{
		<expr_stmt><expr><name pos:line="8" pos:column="17">loose_size<pos:position pos:line="8" pos:column="27"/></name> <operator pos:line="8" pos:column="28">+=<pos:position pos:line="8" pos:column="30"/></operator> <call><name pos:line="8" pos:column="31">on_disk_bytes<pos:position pos:line="8" pos:column="44"/></name><argument_list pos:line="8" pos:column="44">(<argument><expr><name pos:line="8" pos:column="45">st<pos:position pos:line="8" pos:column="47"/></name></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="9" pos:column="17">loose<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">++<pos:position pos:line="9" pos:column="24"/></operator></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name pos:line="10" pos:column="21">verbose<pos:position pos:line="10" pos:column="28"/></name> <operator pos:line="10" pos:column="29">&amp;&amp;<pos:position pos:line="10" pos:column="39"/></operator> <call><name pos:line="10" pos:column="32">has_sha1_pack<pos:position pos:line="10" pos:column="45"/></name><argument_list pos:line="10" pos:column="45">(<argument><expr><name><name pos:line="10" pos:column="46">oid<pos:position pos:line="10" pos:column="49"/></name><operator pos:line="10" pos:column="49">-&gt;<pos:position pos:line="10" pos:column="54"/></operator><name pos:line="10" pos:column="51">hash<pos:position pos:line="10" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="57"/></condition><then pos:line="10" pos:column="57">
			<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="25">packed_loose<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">++<pos:position pos:line="11" pos:column="39"/></operator></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt></block></then></if>
	}<pos:position pos:line="12" pos:column="10"/></block></else></if>
	<return pos:line="13" pos:column="9">return <expr><literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
