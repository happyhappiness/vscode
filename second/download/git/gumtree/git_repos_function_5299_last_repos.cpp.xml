<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5299_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parseopt_dump<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">option<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">o<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">arg<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">int<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">unset<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">parsed<pos:position pos:line="3" pos:column="30"/></name> <init pos:line="3" pos:column="31">= <expr><name><name pos:line="3" pos:column="33">o<pos:position pos:line="3" pos:column="34"/></name><operator pos:line="3" pos:column="34">-&gt;<pos:position pos:line="3" pos:column="39"/></operator><name pos:line="3" pos:column="36">value<pos:position pos:line="3" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name pos:line="4" pos:column="13">unset<pos:position pos:line="4" pos:column="18"/></name></expr>)<pos:position pos:line="4" pos:column="19"/></condition><then pos:line="4" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="5" pos:column="17">strbuf_addf<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">parsed<pos:position pos:line="5" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="37">" --no-%s"<pos:position pos:line="5" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="5" pos:column="49">o<pos:position pos:line="5" pos:column="50"/></name><operator pos:line="5" pos:column="50">-&gt;<pos:position pos:line="5" pos:column="55"/></operator><name pos:line="5" pos:column="52">long_name<pos:position pos:line="5" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="63"/></expr_stmt></block></then>
	<elseif pos:line="6" pos:column="9">else <if pos:line="6" pos:column="14">if <condition pos:line="6" pos:column="17">(<expr><name><name pos:line="6" pos:column="18">o<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">-&gt;<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="21">short_name<pos:position pos:line="6" pos:column="31"/></name></name> <operator pos:line="6" pos:column="32">&amp;&amp;<pos:position pos:line="6" pos:column="42"/></operator> <operator pos:line="6" pos:column="35">(<pos:position pos:line="6" pos:column="36"/></operator><name><name pos:line="6" pos:column="36">o<pos:position pos:line="6" pos:column="37"/></name><operator pos:line="6" pos:column="37">-&gt;<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="39">long_name<pos:position pos:line="6" pos:column="48"/></name></name> <operator pos:line="6" pos:column="49">==<pos:position pos:line="6" pos:column="51"/></operator> <name pos:line="6" pos:column="52">NULL<pos:position pos:line="6" pos:column="56"/></name> <operator pos:line="6" pos:column="57">||<pos:position pos:line="6" pos:column="59"/></operator> <operator pos:line="6" pos:column="60">!<pos:position pos:line="6" pos:column="61"/></operator><name pos:line="6" pos:column="61">stuck_long<pos:position pos:line="6" pos:column="71"/></name><operator pos:line="6" pos:column="71">)<pos:position pos:line="6" pos:column="72"/></operator></expr>)<pos:position pos:line="6" pos:column="73"/></condition><then pos:line="6" pos:column="73">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">strbuf_addf<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">parsed<pos:position pos:line="7" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="37">" -%c"<pos:position pos:line="7" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="45">o<pos:position pos:line="7" pos:column="46"/></name><operator pos:line="7" pos:column="46">-&gt;<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="48">short_name<pos:position pos:line="7" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="60"/></expr_stmt></block></then></if></elseif>
	<else pos:line="8" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">strbuf_addf<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><name pos:line="9" pos:column="29">parsed<pos:position pos:line="9" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="37">" --%s"<pos:position pos:line="9" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="46">o<pos:position pos:line="9" pos:column="47"/></name><operator pos:line="9" pos:column="47">-&gt;<pos:position pos:line="9" pos:column="52"/></operator><name pos:line="9" pos:column="49">long_name<pos:position pos:line="9" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt></block></else></if>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">arg<pos:position pos:line="10" pos:column="16"/></name></expr>)<pos:position pos:line="10" pos:column="17"/></condition><then pos:line="10" pos:column="17"> <block pos:line="10" pos:column="18">{
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">stuck_long<pos:position pos:line="11" pos:column="32"/></name></expr>)<pos:position pos:line="11" pos:column="33"/></condition><then pos:line="11" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">strbuf_addch<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">(<argument><expr><name pos:line="12" pos:column="38">parsed<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="46">' '<pos:position pos:line="12" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt></block></then>
		<elseif pos:line="13" pos:column="17">else <if pos:line="13" pos:column="22">if <condition pos:line="13" pos:column="25">(<expr><name><name pos:line="13" pos:column="26">o<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">-&gt;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="29">long_name<pos:position pos:line="13" pos:column="38"/></name></name></expr>)<pos:position pos:line="13" pos:column="39"/></condition><then pos:line="13" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="25">strbuf_addch<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><name pos:line="14" pos:column="38">parsed<pos:position pos:line="14" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="14" pos:column="46">'='<pos:position pos:line="14" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt></block></then></if></elseif></if>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">sq_quote_buf<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">parsed<pos:position pos:line="15" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="38">arg<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>
	<return pos:line="17" pos:column="9">return <expr><literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr>;<pos:position pos:line="17" pos:column="18"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
