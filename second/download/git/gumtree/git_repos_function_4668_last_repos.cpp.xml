<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4668_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_main<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name pos:line="1" pos:column="14">int<pos:position pos:line="1" pos:column="17"/></name></type> <name pos:line="1" pos:column="18">argc<pos:position pos:line="1" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier><modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">argv<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">cmd<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">done_help<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><literal type="number" pos:line="4" pos:column="25">0<pos:position pos:line="4" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">cmd<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">=<pos:position pos:line="6" pos:column="14"/></operator> <name><name pos:line="6" pos:column="15">argv<pos:position pos:line="6" pos:column="19"/></name><index pos:line="6" pos:column="19">[<expr><literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr>]<pos:position pos:line="6" pos:column="22"/></index></name></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">cmd<pos:position pos:line="7" pos:column="17"/></name></expr>)<pos:position pos:line="7" pos:column="18"/></condition><then pos:line="7" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="17">cmd<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">=<pos:position pos:line="8" pos:column="22"/></operator> <literal type="string" pos:line="8" pos:column="23">"git-help"<pos:position pos:line="8" pos:column="33"/></literal></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt></block></then>
	<else pos:line="9" pos:column="9">else <block pos:line="9" pos:column="14">{
		<decl_stmt><decl><type><specifier pos:line="10" pos:column="17">const<pos:position pos:line="10" pos:column="22"/></specifier> <name pos:line="10" pos:column="23">char<pos:position pos:line="10" pos:column="27"/></name> <modifier pos:line="10" pos:column="28">*<pos:position pos:line="10" pos:column="29"/></modifier></type><name pos:line="10" pos:column="29">slash<pos:position pos:line="10" pos:column="34"/></name> <init pos:line="10" pos:column="35">= <expr><call><name pos:line="10" pos:column="37">find_last_dir_sep<pos:position pos:line="10" pos:column="54"/></name><argument_list pos:line="10" pos:column="54">(<argument><expr><name pos:line="10" pos:column="55">cmd<pos:position pos:line="10" pos:column="58"/></name></expr></argument>)<pos:position pos:line="10" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="60"/></decl_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">slash<pos:position pos:line="11" pos:column="26"/></name></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="25">cmd<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">=<pos:position pos:line="12" pos:column="30"/></operator> <name pos:line="12" pos:column="31">slash<pos:position pos:line="12" pos:column="36"/></name> <operator pos:line="12" pos:column="37">+<pos:position pos:line="12" pos:column="38"/></operator> <literal type="number" pos:line="12" pos:column="39">1<pos:position pos:line="12" pos:column="40"/></literal></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt></block></then></if>
	}<pos:position pos:line="13" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">trace_command_performance<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><name pos:line="15" pos:column="35">argv<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>

	<comment type="block" pos:line="17" pos:column="9">/*
	 * "git-xxxx" is the same as "git xxxx", but we obviously:
	 *
	 *  - cannot take flags in between the "git" and the "xxxx".
	 *  - cannot execute it externally (since it would just do
	 *    the same thing over again)
	 *
	 * So we just directly call the builtin handler, and die if
	 * that one cannot handle it.
	 */</comment>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><call><name pos:line="27" pos:column="13">skip_prefix<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">cmd<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="30">"git-"<pos:position pos:line="27" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="27" pos:column="38">&amp;<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="39">cmd<pos:position pos:line="27" pos:column="42"/></name></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="44"/></condition><then pos:line="27" pos:column="44"> <block pos:line="27" pos:column="45">{
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">argv<pos:position pos:line="28" pos:column="21"/></name><index pos:line="28" pos:column="21">[<expr><literal type="number" pos:line="28" pos:column="22">0<pos:position pos:line="28" pos:column="23"/></literal></expr>]<pos:position pos:line="28" pos:column="24"/></index></name> <operator pos:line="28" pos:column="25">=<pos:position pos:line="28" pos:column="26"/></operator> <name pos:line="28" pos:column="27">cmd<pos:position pos:line="28" pos:column="30"/></name></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">handle_builtin<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">argc<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="38">argv<pos:position pos:line="29" pos:column="42"/></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">die<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><literal type="string" pos:line="30" pos:column="21">"cannot handle %s as a builtin"<pos:position pos:line="30" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="54">cmd<pos:position pos:line="30" pos:column="57"/></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="33" pos:column="9">/* Look for flags.. */</comment>
	<expr_stmt><expr><name pos:line="34" pos:column="9">argv<pos:position pos:line="34" pos:column="13"/></name><operator pos:line="34" pos:column="13">++<pos:position pos:line="34" pos:column="15"/></operator></expr>;<pos:position pos:line="34" pos:column="16"/></expr_stmt>
	<expr_stmt><expr><name pos:line="35" pos:column="9">argc<pos:position pos:line="35" pos:column="13"/></name><operator pos:line="35" pos:column="13">--<pos:position pos:line="35" pos:column="15"/></operator></expr>;<pos:position pos:line="35" pos:column="16"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">handle_options<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><operator pos:line="36" pos:column="24">&amp;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="25">argv<pos:position pos:line="36" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="31">&amp;<pos:position pos:line="36" pos:column="36"/></operator><name pos:line="36" pos:column="32">argc<pos:position pos:line="36" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="38">NULL<pos:position pos:line="36" pos:column="42"/></name></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="44"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">argc<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">&gt;<pos:position pos:line="37" pos:column="22"/></operator> <literal type="number" pos:line="37" pos:column="20">0<pos:position pos:line="37" pos:column="21"/></literal></expr>)<pos:position pos:line="37" pos:column="22"/></condition><then pos:line="37" pos:column="22"> <block pos:line="37" pos:column="23">{
		<comment type="block" pos:line="38" pos:column="17">/* translate --help and --version into commands */</comment>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">skip_prefix<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><name><name pos:line="39" pos:column="29">argv<pos:position pos:line="39" pos:column="33"/></name><index pos:line="39" pos:column="33">[<expr><literal type="number" pos:line="39" pos:column="34">0<pos:position pos:line="39" pos:column="35"/></literal></expr>]<pos:position pos:line="39" pos:column="36"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="38">"--"<pos:position pos:line="39" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="39" pos:column="44">&amp;<pos:position pos:line="39" pos:column="49"/></operator><name><name pos:line="39" pos:column="45">argv<pos:position pos:line="39" pos:column="49"/></name><index pos:line="39" pos:column="49">[<expr><literal type="number" pos:line="39" pos:column="50">0<pos:position pos:line="39" pos:column="51"/></literal></expr>]<pos:position pos:line="39" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then> <else pos:line="40" pos:column="11">else <block pos:line="40" pos:column="16">{
		<comment type="block" pos:line="41" pos:column="17">/* The user didn't specify a command; give them help */</comment>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">commit_pager_choice<pos:position pos:line="42" pos:column="36"/></name><argument_list pos:line="42" pos:column="36">()<pos:position pos:line="42" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">printf<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><literal type="string" pos:line="43" pos:column="24">"usage: %s\n\n"<pos:position pos:line="43" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="41">git_usage_string<pos:position pos:line="43" pos:column="57"/></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">list_common_cmds_help<pos:position pos:line="44" pos:column="38"/></name><argument_list pos:line="44" pos:column="38">()<pos:position pos:line="44" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">printf<pos:position pos:line="45" pos:column="23"/></name><argument_list pos:line="45" pos:column="23">(<argument><expr><literal type="string" pos:line="45" pos:column="24">"\n%s\n"<pos:position pos:line="45" pos:column="32"/></literal></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="34">_<pos:position pos:line="45" pos:column="35"/></name><argument_list pos:line="45" pos:column="35">(<argument><expr><name pos:line="45" pos:column="36">git_more_info_string<pos:position pos:line="45" pos:column="56"/></name></expr></argument>)<pos:position pos:line="45" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">exit<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><literal type="number" pos:line="46" pos:column="22">1<pos:position pos:line="46" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></else></if>
	<expr_stmt><expr><name pos:line="48" pos:column="9">cmd<pos:position pos:line="48" pos:column="12"/></name> <operator pos:line="48" pos:column="13">=<pos:position pos:line="48" pos:column="14"/></operator> <name><name pos:line="48" pos:column="15">argv<pos:position pos:line="48" pos:column="19"/></name><index pos:line="48" pos:column="19">[<expr><literal type="number" pos:line="48" pos:column="20">0<pos:position pos:line="48" pos:column="21"/></literal></expr>]<pos:position pos:line="48" pos:column="22"/></index></name></expr>;<pos:position pos:line="48" pos:column="23"/></expr_stmt>

	<comment type="block" pos:line="50" pos:column="9">/*
	 * We use PATH to find git commands, but we prepend some higher
	 * precedence paths: the "--exec-path" option, the GIT_EXEC_PATH
	 * environment, and the $(gitexecdir) from the Makefile at build
	 * time.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="56" pos:column="9">setup_path<pos:position pos:line="56" pos:column="19"/></name><argument_list pos:line="56" pos:column="19">()<pos:position pos:line="56" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="22"/></expr_stmt>

	<while pos:line="58" pos:column="9">while <condition pos:line="58" pos:column="15">(<expr><literal type="number" pos:line="58" pos:column="16">1<pos:position pos:line="58" pos:column="17"/></literal></expr>)<pos:position pos:line="58" pos:column="18"/></condition> <block pos:line="58" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">int<pos:position pos:line="59" pos:column="20"/></name></type> <name pos:line="59" pos:column="21">was_alias<pos:position pos:line="59" pos:column="30"/></name> <init pos:line="59" pos:column="31">= <expr><call><name pos:line="59" pos:column="33">run_argv<pos:position pos:line="59" pos:column="41"/></name><argument_list pos:line="59" pos:column="41">(<argument><expr><operator pos:line="59" pos:column="42">&amp;<pos:position pos:line="59" pos:column="47"/></operator><name pos:line="59" pos:column="43">argc<pos:position pos:line="59" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="49">&amp;<pos:position pos:line="59" pos:column="54"/></operator><name pos:line="59" pos:column="50">argv<pos:position pos:line="59" pos:column="54"/></name></expr></argument>)<pos:position pos:line="59" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="59" pos:column="56"/></decl_stmt>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">errno<pos:position pos:line="60" pos:column="26"/></name> <operator pos:line="60" pos:column="27">!=<pos:position pos:line="60" pos:column="29"/></operator> <name pos:line="60" pos:column="30">ENOENT<pos:position pos:line="60" pos:column="36"/></name></expr>)<pos:position pos:line="60" pos:column="37"/></condition><then pos:line="60" pos:column="37">
			<block type="pseudo"><break pos:line="61" pos:column="25">break;<pos:position pos:line="61" pos:column="31"/></break></block></then></if>
		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name pos:line="62" pos:column="21">was_alias<pos:position pos:line="62" pos:column="30"/></name></expr>)<pos:position pos:line="62" pos:column="31"/></condition><then pos:line="62" pos:column="31"> <block pos:line="62" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">fprintf<pos:position pos:line="63" pos:column="32"/></name><argument_list pos:line="63" pos:column="32">(<argument><expr><name pos:line="63" pos:column="33">stderr<pos:position pos:line="63" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="41">"Expansion of alias '%s' failed; "<pos:position pos:line="63" pos:column="75"/></literal>
				<literal type="string" pos:line="64" pos:column="33">"'%s' is not a git command\n"<pos:position pos:line="64" pos:column="62"/></literal></expr></argument>,
				<argument><expr><name pos:line="65" pos:column="33">cmd<pos:position pos:line="65" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="38">argv<pos:position pos:line="65" pos:column="42"/></name><index pos:line="65" pos:column="42">[<expr><literal type="number" pos:line="65" pos:column="43">0<pos:position pos:line="65" pos:column="44"/></literal></expr>]<pos:position pos:line="65" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="65" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">exit<pos:position pos:line="66" pos:column="29"/></name><argument_list pos:line="66" pos:column="29">(<argument><expr><literal type="number" pos:line="66" pos:column="30">1<pos:position pos:line="66" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="67" pos:column="18"/></block></then></if>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><operator pos:line="68" pos:column="21">!<pos:position pos:line="68" pos:column="22"/></operator><name pos:line="68" pos:column="22">done_help<pos:position pos:line="68" pos:column="31"/></name></expr>)<pos:position pos:line="68" pos:column="32"/></condition><then pos:line="68" pos:column="32"> <block pos:line="68" pos:column="33">{
			<expr_stmt><expr><name pos:line="69" pos:column="25">cmd<pos:position pos:line="69" pos:column="28"/></name> <operator pos:line="69" pos:column="29">=<pos:position pos:line="69" pos:column="30"/></operator> <name><name pos:line="69" pos:column="31">argv<pos:position pos:line="69" pos:column="35"/></name><index pos:line="69" pos:column="35">[<expr><literal type="number" pos:line="69" pos:column="36">0<pos:position pos:line="69" pos:column="37"/></literal></expr>]<pos:position pos:line="69" pos:column="38"/></index></name> <operator pos:line="69" pos:column="39">=<pos:position pos:line="69" pos:column="40"/></operator> <call><name pos:line="69" pos:column="41">help_unknown_cmd<pos:position pos:line="69" pos:column="57"/></name><argument_list pos:line="69" pos:column="57">(<argument><expr><name pos:line="69" pos:column="58">cmd<pos:position pos:line="69" pos:column="61"/></name></expr></argument>)<pos:position pos:line="69" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><name pos:line="70" pos:column="25">done_help<pos:position pos:line="70" pos:column="34"/></name> <operator pos:line="70" pos:column="35">=<pos:position pos:line="70" pos:column="36"/></operator> <literal type="number" pos:line="70" pos:column="37">1<pos:position pos:line="70" pos:column="38"/></literal></expr>;<pos:position pos:line="70" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="71" pos:column="18"/></block></then> <else pos:line="71" pos:column="19">else
			<block type="pseudo"><break pos:line="72" pos:column="25">break;<pos:position pos:line="72" pos:column="31"/></break></block></else></if>
	}<pos:position pos:line="73" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="75" pos:column="9">fprintf<pos:position pos:line="75" pos:column="16"/></name><argument_list pos:line="75" pos:column="16">(<argument><expr><name pos:line="75" pos:column="17">stderr<pos:position pos:line="75" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="25">"Failed to run command '%s': %s\n"<pos:position pos:line="75" pos:column="59"/></literal></expr></argument>,
		<argument><expr><name pos:line="76" pos:column="17">cmd<pos:position pos:line="76" pos:column="20"/></name></expr></argument>, <argument><expr><call><name pos:line="76" pos:column="22">strerror<pos:position pos:line="76" pos:column="30"/></name><argument_list pos:line="76" pos:column="30">(<argument><expr><name pos:line="76" pos:column="31">errno<pos:position pos:line="76" pos:column="36"/></name></expr></argument>)<pos:position pos:line="76" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="76" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="39"/></expr_stmt>

	<return pos:line="78" pos:column="9">return <expr><literal type="number" pos:line="78" pos:column="16">1<pos:position pos:line="78" pos:column="17"/></literal></expr>;<pos:position pos:line="78" pos:column="18"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
