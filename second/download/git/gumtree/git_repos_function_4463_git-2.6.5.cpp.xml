<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4463_git-2.6.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">exclude_existing<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">match<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">string_list<pos:position pos:line="3" pos:column="34"/></name></name></type> <name pos:line="3" pos:column="35">existing_refs<pos:position pos:line="3" pos:column="48"/></name> <init pos:line="3" pos:column="49">= <expr><name pos:line="3" pos:column="51">STRING_LIST_INIT_DUP<pos:position pos:line="3" pos:column="71"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="72"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">buf<pos:position pos:line="4" pos:column="17"/></name><index pos:line="4" pos:column="17">[<expr><literal type="number" pos:line="4" pos:column="18">1024<pos:position pos:line="4" pos:column="22"/></literal></expr>]<pos:position pos:line="4" pos:column="23"/></index></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">matchlen<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><ternary><condition><expr><name pos:line="5" pos:column="24">match<pos:position pos:line="5" pos:column="29"/></name></expr> ?<pos:position pos:line="5" pos:column="31"/></condition><then pos:line="5" pos:column="31"> <expr><call><name pos:line="5" pos:column="32">strlen<pos:position pos:line="5" pos:column="38"/></name><argument_list pos:line="5" pos:column="38">(<argument><expr><name pos:line="5" pos:column="39">match<pos:position pos:line="5" pos:column="44"/></name></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></call></expr> <pos:position pos:line="5" pos:column="46"/></then><else pos:line="5" pos:column="46">: <expr><literal type="number" pos:line="5" pos:column="48">0<pos:position pos:line="5" pos:column="49"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">for_each_ref<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">(<argument><expr><name pos:line="7" pos:column="22">add_existing<pos:position pos:line="7" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="36">&amp;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="37">existing_refs<pos:position pos:line="7" pos:column="50"/></name></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="52"/></expr_stmt>
	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><call><name pos:line="8" pos:column="16">fgets<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">buf<pos:position pos:line="8" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="27">sizeof<argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">buf<pos:position pos:line="8" pos:column="37"/></name></expr></argument>)<pos:position pos:line="8" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">stdin<pos:position pos:line="8" pos:column="45"/></name></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="47"/></condition> <block pos:line="8" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">char<pos:position pos:line="9" pos:column="21"/></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">ref<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">len<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><call><name pos:line="10" pos:column="27">strlen<pos:position pos:line="10" pos:column="33"/></name><argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">buf<pos:position pos:line="10" pos:column="37"/></name></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="39"/></decl_stmt>

		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">len<pos:position pos:line="12" pos:column="24"/></name> <operator pos:line="12" pos:column="25">&gt;<pos:position pos:line="12" pos:column="29"/></operator> <literal type="number" pos:line="12" pos:column="27">0<pos:position pos:line="12" pos:column="28"/></literal> <operator pos:line="12" pos:column="29">&amp;&amp;<pos:position pos:line="12" pos:column="39"/></operator> <name><name pos:line="12" pos:column="32">buf<pos:position pos:line="12" pos:column="35"/></name><index pos:line="12" pos:column="35">[<expr><name pos:line="12" pos:column="36">len<pos:position pos:line="12" pos:column="39"/></name> <operator pos:line="12" pos:column="40">-<pos:position pos:line="12" pos:column="41"/></operator> <literal type="number" pos:line="12" pos:column="42">1<pos:position pos:line="12" pos:column="43"/></literal></expr>]<pos:position pos:line="12" pos:column="44"/></index></name> <operator pos:line="12" pos:column="45">==<pos:position pos:line="12" pos:column="47"/></operator> <literal type="char" pos:line="12" pos:column="48">'\n'<pos:position pos:line="12" pos:column="52"/></literal></expr>)<pos:position pos:line="12" pos:column="53"/></condition><then pos:line="12" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="13" pos:column="25">buf<pos:position pos:line="13" pos:column="28"/></name><index pos:line="13" pos:column="28">[<expr><operator pos:line="13" pos:column="29">--<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">len<pos:position pos:line="13" pos:column="34"/></name></expr>]<pos:position pos:line="13" pos:column="35"/></index></name> <operator pos:line="13" pos:column="36">=<pos:position pos:line="13" pos:column="37"/></operator> <literal type="char" pos:line="13" pos:column="38">'\0'<pos:position pos:line="13" pos:column="42"/></literal></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt></block></then></if>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><literal type="number" pos:line="14" pos:column="21">3<pos:position pos:line="14" pos:column="22"/></literal> <operator pos:line="14" pos:column="23">&lt;=<pos:position pos:line="14" pos:column="28"/></operator> <name pos:line="14" pos:column="26">len<pos:position pos:line="14" pos:column="29"/></name> <operator pos:line="14" pos:column="30">&amp;&amp;<pos:position pos:line="14" pos:column="40"/></operator> <operator pos:line="14" pos:column="33">!<pos:position pos:line="14" pos:column="34"/></operator><call><name pos:line="14" pos:column="34">strcmp<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">buf<pos:position pos:line="14" pos:column="44"/></name> <operator pos:line="14" pos:column="45">+<pos:position pos:line="14" pos:column="46"/></operator> <name pos:line="14" pos:column="47">len<pos:position pos:line="14" pos:column="50"/></name> <operator pos:line="14" pos:column="51">-<pos:position pos:line="14" pos:column="52"/></operator> <literal type="number" pos:line="14" pos:column="53">3<pos:position pos:line="14" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="56">"^{}"<pos:position pos:line="14" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="63"/></condition><then pos:line="14" pos:column="63"> <block pos:line="14" pos:column="64">{
			<expr_stmt><expr><name pos:line="15" pos:column="25">len<pos:position pos:line="15" pos:column="28"/></name> <operator pos:line="15" pos:column="29">-=<pos:position pos:line="15" pos:column="31"/></operator> <literal type="number" pos:line="15" pos:column="32">3<pos:position pos:line="15" pos:column="33"/></literal></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="16" pos:column="25">buf<pos:position pos:line="16" pos:column="28"/></name><index pos:line="16" pos:column="28">[<expr><name pos:line="16" pos:column="29">len<pos:position pos:line="16" pos:column="32"/></name></expr>]<pos:position pos:line="16" pos:column="33"/></index></name> <operator pos:line="16" pos:column="34">=<pos:position pos:line="16" pos:column="35"/></operator> <literal type="char" pos:line="16" pos:column="36">'\0'<pos:position pos:line="16" pos:column="40"/></literal></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if>
		<for pos:line="18" pos:column="17">for <control pos:line="18" pos:column="21">(<init><expr><name pos:line="18" pos:column="22">ref<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <name pos:line="18" pos:column="28">buf<pos:position pos:line="18" pos:column="31"/></name> <operator pos:line="18" pos:column="32">+<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">len<pos:position pos:line="18" pos:column="37"/></name></expr>;<pos:position pos:line="18" pos:column="38"/></init> <condition><expr><name pos:line="18" pos:column="39">buf<pos:position pos:line="18" pos:column="42"/></name> <operator pos:line="18" pos:column="43">&lt;<pos:position pos:line="18" pos:column="47"/></operator> <name pos:line="18" pos:column="45">ref<pos:position pos:line="18" pos:column="48"/></name></expr>;<pos:position pos:line="18" pos:column="49"/></condition> <incr><expr><name pos:line="18" pos:column="50">ref<pos:position pos:line="18" pos:column="53"/></name><operator pos:line="18" pos:column="53">--<pos:position pos:line="18" pos:column="55"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="56"/></control>
			<block type="pseudo"><if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><call><name pos:line="19" pos:column="29">isspace<pos:position pos:line="19" pos:column="36"/></name><argument_list pos:line="19" pos:column="36">(<argument><expr><name><name pos:line="19" pos:column="37">ref<pos:position pos:line="19" pos:column="40"/></name><index pos:line="19" pos:column="40">[<expr><operator pos:line="19" pos:column="41">-<pos:position pos:line="19" pos:column="42"/></operator><literal type="number" pos:line="19" pos:column="42">1<pos:position pos:line="19" pos:column="43"/></literal></expr>]<pos:position pos:line="19" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="46"/></condition><then pos:line="19" pos:column="46">
				<block type="pseudo"><break pos:line="20" pos:column="33">break;<pos:position pos:line="20" pos:column="39"/></break></block></then></if></block></for>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">match<pos:position pos:line="21" pos:column="26"/></name></expr>)<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27"> <block pos:line="21" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="22" pos:column="25">int<pos:position pos:line="22" pos:column="28"/></name></type> <name pos:line="22" pos:column="29">reflen<pos:position pos:line="22" pos:column="35"/></name> <init pos:line="22" pos:column="36">= <expr><name pos:line="22" pos:column="38">buf<pos:position pos:line="22" pos:column="41"/></name> <operator pos:line="22" pos:column="42">+<pos:position pos:line="22" pos:column="43"/></operator> <name pos:line="22" pos:column="44">len<pos:position pos:line="22" pos:column="47"/></name> <operator pos:line="22" pos:column="48">-<pos:position pos:line="22" pos:column="49"/></operator> <name pos:line="22" pos:column="50">ref<pos:position pos:line="22" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="54"/></decl_stmt>
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><name pos:line="23" pos:column="29">reflen<pos:position pos:line="23" pos:column="35"/></name> <operator pos:line="23" pos:column="36">&lt;<pos:position pos:line="23" pos:column="40"/></operator> <name pos:line="23" pos:column="38">matchlen<pos:position pos:line="23" pos:column="46"/></name></expr>)<pos:position pos:line="23" pos:column="47"/></condition><then pos:line="23" pos:column="47">
				<block type="pseudo"><continue pos:line="24" pos:column="33">continue;<pos:position pos:line="24" pos:column="42"/></continue></block></then></if>
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><call><name pos:line="25" pos:column="29">strncmp<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">ref<pos:position pos:line="25" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="42">match<pos:position pos:line="25" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="49">matchlen<pos:position pos:line="25" pos:column="57"/></name></expr></argument>)<pos:position pos:line="25" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="59"/></condition><then pos:line="25" pos:column="59">
				<block type="pseudo"><continue pos:line="26" pos:column="33">continue;<pos:position pos:line="26" pos:column="42"/></continue></block></then></if>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><call><name pos:line="28" pos:column="21">check_refname_format<pos:position pos:line="28" pos:column="41"/></name><argument_list pos:line="28" pos:column="41">(<argument><expr><name pos:line="28" pos:column="42">ref<pos:position pos:line="28" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="47">0<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="50"/></condition><then pos:line="28" pos:column="50"> <block pos:line="28" pos:column="51">{
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">warning<pos:position pos:line="29" pos:column="32"/></name><argument_list pos:line="29" pos:column="32">(<argument><expr><literal type="string" pos:line="29" pos:column="33">"ref '%s' ignored"<pos:position pos:line="29" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="53">ref<pos:position pos:line="29" pos:column="56"/></name></expr></argument>)<pos:position pos:line="29" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="58"/></expr_stmt>
			<continue pos:line="30" pos:column="25">continue;<pos:position pos:line="30" pos:column="34"/></continue>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><operator pos:line="32" pos:column="21">!<pos:position pos:line="32" pos:column="22"/></operator><call><name pos:line="32" pos:column="22">string_list_has_string<pos:position pos:line="32" pos:column="44"/></name><argument_list pos:line="32" pos:column="44">(<argument><expr><operator pos:line="32" pos:column="45">&amp;<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="46">existing_refs<pos:position pos:line="32" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="61">ref<pos:position pos:line="32" pos:column="64"/></name></expr></argument>)<pos:position pos:line="32" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="66"/></condition><then pos:line="32" pos:column="66"> <block pos:line="32" pos:column="67">{
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">printf<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><literal type="string" pos:line="33" pos:column="32">"%s\n"<pos:position pos:line="33" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="40">buf<pos:position pos:line="33" pos:column="43"/></name></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
	}<pos:position pos:line="35" pos:column="10"/></block></while>
	<return pos:line="36" pos:column="9">return <expr><literal type="number" pos:line="36" pos:column="16">0<pos:position pos:line="36" pos:column="17"/></literal></expr>;<pos:position pos:line="36" pos:column="18"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
