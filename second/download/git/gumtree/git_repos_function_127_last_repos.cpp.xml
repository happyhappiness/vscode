<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_127_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">is_mboxrd_from<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">line<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">len<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * a line matching /^From $/ here would only have len == 4
	 * at this point because is_empty_line would've trimmed all
	 * trailing space
	 */</comment>
	<return pos:line="8" pos:column="9">return <expr><name pos:line="8" pos:column="16">len<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">&gt;<pos:position pos:line="8" pos:column="24"/></operator> <literal type="number" pos:line="8" pos:column="22">4<pos:position pos:line="8" pos:column="23"/></literal> <operator pos:line="8" pos:column="24">&amp;&amp;<pos:position pos:line="8" pos:column="34"/></operator> <call><name pos:line="8" pos:column="27">starts_with<pos:position pos:line="8" pos:column="38"/></name><argument_list pos:line="8" pos:column="38">(<argument><expr><name pos:line="8" pos:column="39">line<pos:position pos:line="8" pos:column="43"/></name> <operator pos:line="8" pos:column="44">+<pos:position pos:line="8" pos:column="45"/></operator> <call><name pos:line="8" pos:column="46">strspn<pos:position pos:line="8" pos:column="52"/></name><argument_list pos:line="8" pos:column="52">(<argument><expr><name pos:line="8" pos:column="53">line<pos:position pos:line="8" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="59">"&gt;"<pos:position pos:line="8" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="65">"From "<pos:position pos:line="8" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="74"/></return>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
