<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3738_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">show_submodule_inline_diff<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">FILE<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">f<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">path<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">line_prefix<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="3" pos:column="17">struct<pos:position pos:line="3" pos:column="23"/></name> <name pos:line="3" pos:column="24">object_id<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">one<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="3" pos:column="40">struct<pos:position pos:line="3" pos:column="46"/></name> <name pos:line="3" pos:column="47">object_id<pos:position pos:line="3" pos:column="56"/></name></name> <modifier pos:line="3" pos:column="57">*<pos:position pos:line="3" pos:column="58"/></modifier></type><name pos:line="3" pos:column="58">two<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="4" pos:column="17">unsigned<pos:position pos:line="4" pos:column="25"/></name></type> <name pos:line="4" pos:column="26">dirty_submodule<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="4" pos:column="43">const<pos:position pos:line="4" pos:column="48"/></specifier> <name pos:line="4" pos:column="49">char<pos:position pos:line="4" pos:column="53"/></name> <modifier pos:line="4" pos:column="54">*<pos:position pos:line="4" pos:column="55"/></modifier></type><name pos:line="4" pos:column="55">meta<pos:position pos:line="4" pos:column="59"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="5" pos:column="17">const<pos:position pos:line="5" pos:column="22"/></specifier> <name pos:line="5" pos:column="23">char<pos:position pos:line="5" pos:column="27"/></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">del<pos:position pos:line="5" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="5" pos:column="34">const<pos:position pos:line="5" pos:column="39"/></specifier> <name pos:line="5" pos:column="40">char<pos:position pos:line="5" pos:column="44"/></name> <modifier pos:line="5" pos:column="45">*<pos:position pos:line="5" pos:column="46"/></modifier></type><name pos:line="5" pos:column="46">add<pos:position pos:line="5" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="5" pos:column="51">const<pos:position pos:line="5" pos:column="56"/></specifier> <name pos:line="5" pos:column="57">char<pos:position pos:line="5" pos:column="61"/></name> <modifier pos:line="5" pos:column="62">*<pos:position pos:line="5" pos:column="63"/></modifier></type><name pos:line="5" pos:column="63">reset<pos:position pos:line="5" pos:column="68"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="6" pos:column="17">const<pos:position pos:line="6" pos:column="22"/></specifier> <name><name pos:line="6" pos:column="23">struct<pos:position pos:line="6" pos:column="29"/></name> <name pos:line="6" pos:column="30">diff_options<pos:position pos:line="6" pos:column="42"/></name></name> <modifier pos:line="6" pos:column="43">*<pos:position pos:line="6" pos:column="44"/></modifier></type><name pos:line="6" pos:column="44">o<pos:position pos:line="6" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="46"/></parameter_list>
<block pos:line="7" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name><name pos:line="8" pos:column="15">struct<pos:position pos:line="8" pos:column="21"/></name> <name pos:line="8" pos:column="22">object_id<pos:position pos:line="8" pos:column="31"/></name></name> <modifier pos:line="8" pos:column="32">*<pos:position pos:line="8" pos:column="33"/></modifier></type><name pos:line="8" pos:column="33">old<pos:position pos:line="8" pos:column="36"/></name> <init pos:line="8" pos:column="37">= <expr><operator pos:line="8" pos:column="39">&amp;<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="40">empty_tree_oid<pos:position pos:line="8" pos:column="54"/></name></expr></init></decl>, <modifier pos:line="8" pos:column="56">*<pos:position pos:line="8" pos:column="57"/></modifier>new <init pos:line="8" pos:column="61">= <expr><operator pos:line="8" pos:column="63">&amp;<pos:position pos:line="8" pos:column="68"/></operator><name pos:line="8" pos:column="64">empty_tree_oid<pos:position pos:line="8" pos:column="78"/></name></expr></init>;<pos:position pos:line="8" pos:column="79"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">commit<pos:position pos:line="9" pos:column="22"/></name></name> <modifier pos:line="9" pos:column="23">*<pos:position pos:line="9" pos:column="24"/></modifier></type><name pos:line="9" pos:column="24">left<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><name pos:line="9" pos:column="31">NULL<pos:position pos:line="9" pos:column="35"/></name></expr></init></decl>, <modifier pos:line="9" pos:column="37">*<pos:position pos:line="9" pos:column="38"/></modifier><decl><type ref="prev"/><name pos:line="9" pos:column="38">right<pos:position pos:line="9" pos:column="43"/></name> <init pos:line="9" pos:column="44">= <expr><name pos:line="9" pos:column="46">NULL<pos:position pos:line="9" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">commit_list<pos:position pos:line="10" pos:column="27"/></name></name> <modifier pos:line="10" pos:column="28">*<pos:position pos:line="10" pos:column="29"/></modifier></type><name pos:line="10" pos:column="29">merge_bases<pos:position pos:line="10" pos:column="40"/></name> <init pos:line="10" pos:column="41">= <expr><name pos:line="10" pos:column="43">NULL<pos:position pos:line="10" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">strbuf<pos:position pos:line="11" pos:column="22"/></name></name></type> <name pos:line="11" pos:column="23">submodule_dir<pos:position pos:line="11" pos:column="36"/></name> <init pos:line="11" pos:column="37">= <expr><name pos:line="11" pos:column="39">STRBUF_INIT<pos:position pos:line="11" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">child_process<pos:position pos:line="12" pos:column="29"/></name></name></type> <name pos:line="12" pos:column="30">cp<pos:position pos:line="12" pos:column="32"/></name> <init pos:line="12" pos:column="33">= <expr><name pos:line="12" pos:column="35">CHILD_PROCESS_INIT<pos:position pos:line="12" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="54"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">show_submodule_header<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">f<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="34">path<pos:position pos:line="14" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="40">line_prefix<pos:position pos:line="14" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="53">one<pos:position pos:line="14" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="58">two<pos:position pos:line="14" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="63">dirty_submodule<pos:position pos:line="14" pos:column="78"/></name></expr></argument>,
			      <argument><expr><name pos:line="15" pos:column="31">meta<pos:position pos:line="15" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="37">reset<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="44">&amp;<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="45">left<pos:position pos:line="15" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="51">&amp;<pos:position pos:line="15" pos:column="56"/></operator><name pos:line="15" pos:column="52">right<pos:position pos:line="15" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="59">&amp;<pos:position pos:line="15" pos:column="64"/></operator><name pos:line="15" pos:column="60">merge_bases<pos:position pos:line="15" pos:column="71"/></name></expr></argument>)<pos:position pos:line="15" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="73"/></expr_stmt>

	<comment type="block" pos:line="17" pos:column="9">/* We need a valid left and right commit to display a difference */</comment>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">left<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">||<pos:position pos:line="18" pos:column="22"/></operator> <call><name pos:line="18" pos:column="23">is_null_oid<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">one<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call><operator pos:line="18" pos:column="39">)<pos:position pos:line="18" pos:column="40"/></operator> <operator pos:line="18" pos:column="41">||<pos:position pos:line="18" pos:column="43"/></operator>
	    <operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><operator pos:line="19" pos:column="14">(<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">right<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">||<pos:position pos:line="19" pos:column="23"/></operator> <call><name pos:line="19" pos:column="24">is_null_oid<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><name pos:line="19" pos:column="36">two<pos:position pos:line="19" pos:column="39"/></name></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call><operator pos:line="19" pos:column="40">)<pos:position pos:line="19" pos:column="41"/></operator></expr>)<pos:position pos:line="19" pos:column="42"/></condition><then pos:line="19" pos:column="42">
		<block type="pseudo"><goto pos:line="20" pos:column="17">goto <name pos:line="20" pos:column="22">done<pos:position pos:line="20" pos:column="26"/></name>;<pos:position pos:line="20" pos:column="27"/></goto></block></then></if>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">left<pos:position pos:line="22" pos:column="17"/></name></expr>)<pos:position pos:line="22" pos:column="18"/></condition><then pos:line="22" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">old<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="23">one<pos:position pos:line="23" pos:column="26"/></name></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt></block></then></if>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">right<pos:position pos:line="24" pos:column="18"/></name></expr>)<pos:position pos:line="24" pos:column="19"/></condition><then pos:line="24" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="25" pos:column="17">new<pos:position pos:line="25" pos:column="20"/></operator> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <name pos:line="25" pos:column="23">two<pos:position pos:line="25" pos:column="26"/></name></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">fflush<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name pos:line="27" pos:column="16">f<pos:position pos:line="27" pos:column="17"/></name></expr></argument>)<pos:position pos:line="27" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="28" pos:column="9">cp<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">.<pos:position pos:line="28" pos:column="12"/></operator><name pos:line="28" pos:column="12">git_cmd<pos:position pos:line="28" pos:column="19"/></name></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <literal type="number" pos:line="28" pos:column="22">1<pos:position pos:line="28" pos:column="23"/></literal></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="29" pos:column="9">cp<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">.<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="12">dir<pos:position pos:line="29" pos:column="15"/></name></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <name pos:line="29" pos:column="18">path<pos:position pos:line="29" pos:column="22"/></name></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="30" pos:column="9">cp<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">.<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="12">out<pos:position pos:line="30" pos:column="15"/></name></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <call><name pos:line="30" pos:column="18">dup<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><call><name pos:line="30" pos:column="22">fileno<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><name pos:line="30" pos:column="29">f<pos:position pos:line="30" pos:column="30"/></name></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="31" pos:column="9">cp<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">.<pos:position pos:line="31" pos:column="12"/></operator><name pos:line="31" pos:column="12">no_stdin<pos:position pos:line="31" pos:column="20"/></name></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <literal type="number" pos:line="31" pos:column="23">1<pos:position pos:line="31" pos:column="24"/></literal></expr>;<pos:position pos:line="31" pos:column="25"/></expr_stmt>

	<comment type="block" pos:line="33" pos:column="9">/* TODO: other options may need to be passed here. */</comment>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">argv_array_pushl<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><operator pos:line="34" pos:column="26">&amp;<pos:position pos:line="34" pos:column="31"/></operator><name><name pos:line="34" pos:column="27">cp<pos:position pos:line="34" pos:column="29"/></name><operator pos:line="34" pos:column="29">.<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="30">args<pos:position pos:line="34" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="36">"diff"<pos:position pos:line="34" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="44">"--submodule=diff"<pos:position pos:line="34" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="64">NULL<pos:position pos:line="34" pos:column="68"/></name></expr></argument>)<pos:position pos:line="34" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="70"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="36" pos:column="9">argv_array_pushf<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">(<argument><expr><operator pos:line="36" pos:column="26">&amp;<pos:position pos:line="36" pos:column="31"/></operator><name><name pos:line="36" pos:column="27">cp<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">.<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="30">args<pos:position pos:line="36" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="36">"--line-prefix=%s"<pos:position pos:line="36" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="56">line_prefix<pos:position pos:line="36" pos:column="67"/></name></expr></argument>)<pos:position pos:line="36" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="69"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">DIFF_OPT_TST<pos:position pos:line="37" pos:column="25"/></name><argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">o<pos:position pos:line="37" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="29">REVERSE_DIFF<pos:position pos:line="37" pos:column="41"/></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="43"/></condition><then pos:line="37" pos:column="43"> <block pos:line="37" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">argv_array_pushf<pos:position pos:line="38" pos:column="33"/></name><argument_list pos:line="38" pos:column="33">(<argument><expr><operator pos:line="38" pos:column="34">&amp;<pos:position pos:line="38" pos:column="39"/></operator><name><name pos:line="38" pos:column="35">cp<pos:position pos:line="38" pos:column="37"/></name><operator pos:line="38" pos:column="37">.<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="38">args<pos:position pos:line="38" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="44">"--src-prefix=%s%s/"<pos:position pos:line="38" pos:column="64"/></literal></expr></argument>,
				 <argument><expr><name><name pos:line="39" pos:column="34">o<pos:position pos:line="39" pos:column="35"/></name><operator pos:line="39" pos:column="35">-&gt;<pos:position pos:line="39" pos:column="40"/></operator><name pos:line="39" pos:column="37">b_prefix<pos:position pos:line="39" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="47">path<pos:position pos:line="39" pos:column="51"/></name></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">argv_array_pushf<pos:position pos:line="40" pos:column="33"/></name><argument_list pos:line="40" pos:column="33">(<argument><expr><operator pos:line="40" pos:column="34">&amp;<pos:position pos:line="40" pos:column="39"/></operator><name><name pos:line="40" pos:column="35">cp<pos:position pos:line="40" pos:column="37"/></name><operator pos:line="40" pos:column="37">.<pos:position pos:line="40" pos:column="38"/></operator><name pos:line="40" pos:column="38">args<pos:position pos:line="40" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="44">"--dst-prefix=%s%s/"<pos:position pos:line="40" pos:column="64"/></literal></expr></argument>,
				 <argument><expr><name><name pos:line="41" pos:column="34">o<pos:position pos:line="41" pos:column="35"/></name><operator pos:line="41" pos:column="35">-&gt;<pos:position pos:line="41" pos:column="40"/></operator><name pos:line="41" pos:column="37">a_prefix<pos:position pos:line="41" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="47">path<pos:position pos:line="41" pos:column="51"/></name></expr></argument>)<pos:position pos:line="41" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="53"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></then> <else pos:line="42" pos:column="11">else <block pos:line="42" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">argv_array_pushf<pos:position pos:line="43" pos:column="33"/></name><argument_list pos:line="43" pos:column="33">(<argument><expr><operator pos:line="43" pos:column="34">&amp;<pos:position pos:line="43" pos:column="39"/></operator><name><name pos:line="43" pos:column="35">cp<pos:position pos:line="43" pos:column="37"/></name><operator pos:line="43" pos:column="37">.<pos:position pos:line="43" pos:column="38"/></operator><name pos:line="43" pos:column="38">args<pos:position pos:line="43" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="44">"--src-prefix=%s%s/"<pos:position pos:line="43" pos:column="64"/></literal></expr></argument>,
				 <argument><expr><name><name pos:line="44" pos:column="34">o<pos:position pos:line="44" pos:column="35"/></name><operator pos:line="44" pos:column="35">-&gt;<pos:position pos:line="44" pos:column="40"/></operator><name pos:line="44" pos:column="37">a_prefix<pos:position pos:line="44" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="47">path<pos:position pos:line="44" pos:column="51"/></name></expr></argument>)<pos:position pos:line="44" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">argv_array_pushf<pos:position pos:line="45" pos:column="33"/></name><argument_list pos:line="45" pos:column="33">(<argument><expr><operator pos:line="45" pos:column="34">&amp;<pos:position pos:line="45" pos:column="39"/></operator><name><name pos:line="45" pos:column="35">cp<pos:position pos:line="45" pos:column="37"/></name><operator pos:line="45" pos:column="37">.<pos:position pos:line="45" pos:column="38"/></operator><name pos:line="45" pos:column="38">args<pos:position pos:line="45" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="44">"--dst-prefix=%s%s/"<pos:position pos:line="45" pos:column="64"/></literal></expr></argument>,
				 <argument><expr><name><name pos:line="46" pos:column="34">o<pos:position pos:line="46" pos:column="35"/></name><operator pos:line="46" pos:column="35">-&gt;<pos:position pos:line="46" pos:column="40"/></operator><name pos:line="46" pos:column="37">b_prefix<pos:position pos:line="46" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">path<pos:position pos:line="46" pos:column="51"/></name></expr></argument>)<pos:position pos:line="46" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="53"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">argv_array_push<pos:position pos:line="48" pos:column="24"/></name><argument_list pos:line="48" pos:column="24">(<argument><expr><operator pos:line="48" pos:column="25">&amp;<pos:position pos:line="48" pos:column="30"/></operator><name><name pos:line="48" pos:column="26">cp<pos:position pos:line="48" pos:column="28"/></name><operator pos:line="48" pos:column="28">.<pos:position pos:line="48" pos:column="29"/></operator><name pos:line="48" pos:column="29">args<pos:position pos:line="48" pos:column="33"/></name></name></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="35">oid_to_hex<pos:position pos:line="48" pos:column="45"/></name><argument_list pos:line="48" pos:column="45">(<argument><expr><name pos:line="48" pos:column="46">old<pos:position pos:line="48" pos:column="49"/></name></expr></argument>)<pos:position pos:line="48" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="52"/></expr_stmt>
	<comment type="block" pos:line="49" pos:column="9">/*
	 * If the submodule has modified content, we will diff against the
	 * work tree, under the assumption that the user has asked for the
	 * diff format and wishes to actually see all differences even if they
	 * haven't yet been committed to the submodule yet.
	 */</comment>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><operator pos:line="55" pos:column="14">(<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="15">dirty_submodule<pos:position pos:line="55" pos:column="30"/></name> <operator pos:line="55" pos:column="31">&amp;<pos:position pos:line="55" pos:column="36"/></operator> <name pos:line="55" pos:column="33">DIRTY_SUBMODULE_MODIFIED<pos:position pos:line="55" pos:column="57"/></name><operator pos:line="55" pos:column="57">)<pos:position pos:line="55" pos:column="58"/></operator></expr>)<pos:position pos:line="55" pos:column="59"/></condition><then pos:line="55" pos:column="59">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="17">argv_array_push<pos:position pos:line="56" pos:column="32"/></name><argument_list pos:line="56" pos:column="32">(<argument><expr><operator pos:line="56" pos:column="33">&amp;<pos:position pos:line="56" pos:column="38"/></operator><name><name pos:line="56" pos:column="34">cp<pos:position pos:line="56" pos:column="36"/></name><operator pos:line="56" pos:column="36">.<pos:position pos:line="56" pos:column="37"/></operator><name pos:line="56" pos:column="37">args<pos:position pos:line="56" pos:column="41"/></name></name></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="43">oid_to_hex<pos:position pos:line="56" pos:column="53"/></name><argument_list pos:line="56" pos:column="53">(<argument><expr><operator pos:line="56" pos:column="54">new<pos:position pos:line="56" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="56" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="60"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="58" pos:column="9">prepare_submodule_repo_env<pos:position pos:line="58" pos:column="35"/></name><argument_list pos:line="58" pos:column="35">(<argument><expr><operator pos:line="58" pos:column="36">&amp;<pos:position pos:line="58" pos:column="41"/></operator><name><name pos:line="58" pos:column="37">cp<pos:position pos:line="58" pos:column="39"/></name><operator pos:line="58" pos:column="39">.<pos:position pos:line="58" pos:column="40"/></operator><name pos:line="58" pos:column="40">env_array<pos:position pos:line="58" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="51"/></expr_stmt>
	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><call><name pos:line="59" pos:column="13">run_command<pos:position pos:line="59" pos:column="24"/></name><argument_list pos:line="59" pos:column="24">(<argument><expr><operator pos:line="59" pos:column="25">&amp;<pos:position pos:line="59" pos:column="30"/></operator><name pos:line="59" pos:column="26">cp<pos:position pos:line="59" pos:column="28"/></name></expr></argument>)<pos:position pos:line="59" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="30"/></condition><then pos:line="59" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="17">fprintf<pos:position pos:line="60" pos:column="24"/></name><argument_list pos:line="60" pos:column="24">(<argument><expr><name pos:line="60" pos:column="25">f<pos:position pos:line="60" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="28">"(diff failed)\n"<pos:position pos:line="60" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="47"/></expr_stmt></block></then></if>

<label><name pos:line="62" pos:column="1">done<pos:position pos:line="62" pos:column="5"/></name>:<pos:position pos:line="62" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="63" pos:column="9">strbuf_release<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">(<argument><expr><operator pos:line="63" pos:column="24">&amp;<pos:position pos:line="63" pos:column="29"/></operator><name pos:line="63" pos:column="25">submodule_dir<pos:position pos:line="63" pos:column="38"/></name></expr></argument>)<pos:position pos:line="63" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="40"/></expr_stmt>
	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name pos:line="64" pos:column="13">merge_bases<pos:position pos:line="64" pos:column="24"/></name></expr>)<pos:position pos:line="64" pos:column="25"/></condition><then pos:line="64" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="17">free_commit_list<pos:position pos:line="65" pos:column="33"/></name><argument_list pos:line="65" pos:column="33">(<argument><expr><name pos:line="65" pos:column="34">merge_bases<pos:position pos:line="65" pos:column="45"/></name></expr></argument>)<pos:position pos:line="65" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="47"/></expr_stmt></block></then></if>
	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name pos:line="66" pos:column="13">left<pos:position pos:line="66" pos:column="17"/></name></expr>)<pos:position pos:line="66" pos:column="18"/></condition><then pos:line="66" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="17">clear_commit_marks<pos:position pos:line="67" pos:column="35"/></name><argument_list pos:line="67" pos:column="35">(<argument><expr><name pos:line="67" pos:column="36">left<pos:position pos:line="67" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="42">~<pos:position pos:line="67" pos:column="43"/></operator><literal type="number" pos:line="67" pos:column="43">0<pos:position pos:line="67" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="46"/></expr_stmt></block></then></if>
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">right<pos:position pos:line="68" pos:column="18"/></name></expr>)<pos:position pos:line="68" pos:column="19"/></condition><then pos:line="68" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="17">clear_commit_marks<pos:position pos:line="69" pos:column="35"/></name><argument_list pos:line="69" pos:column="35">(<argument><expr><name pos:line="69" pos:column="36">right<pos:position pos:line="69" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="43">~<pos:position pos:line="69" pos:column="44"/></operator><literal type="number" pos:line="69" pos:column="44">0<pos:position pos:line="69" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="47"/></expr_stmt></block></then></if>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
