<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2747.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">fetch_populated_submodules<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">argv_array<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">options<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
			       <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">prefix<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">int<pos:position pos:line="2" pos:column="55"/></name></type> <name pos:line="2" pos:column="56">command_line_option<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>,
			       <parameter><decl><type><name pos:line="3" pos:column="32">int<pos:position pos:line="3" pos:column="35"/></name></type> <name pos:line="3" pos:column="36">quiet<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="42"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="16">result<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><literal type="number" pos:line="5" pos:column="25">0<pos:position pos:line="5" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">child_process<pos:position pos:line="6" pos:column="29"/></name></name></type> <name pos:line="6" pos:column="30">cp<pos:position pos:line="6" pos:column="32"/></name> <init pos:line="6" pos:column="33">= <expr><name pos:line="6" pos:column="35">CHILD_PROCESS_INIT<pos:position pos:line="6" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">argv_array<pos:position pos:line="7" pos:column="26"/></name></name></type> <name pos:line="7" pos:column="27">argv<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">= <expr><name pos:line="7" pos:column="34">ARGV_ARRAY_INIT<pos:position pos:line="7" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">work_tree<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><call><name pos:line="8" pos:column="33">get_git_work_tree<pos:position pos:line="8" pos:column="50"/></name><argument_list pos:line="8" pos:column="50">()<pos:position pos:line="8" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="53"/></decl_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">work_tree<pos:position pos:line="9" pos:column="23"/></name></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24">
		<block type="pseudo"><goto pos:line="10" pos:column="17">goto <name pos:line="10" pos:column="22">out<pos:position pos:line="10" pos:column="25"/></name>;<pos:position pos:line="10" pos:column="26"/></goto></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">read_cache<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">()<pos:position pos:line="12" pos:column="25"/></argument_list></call> <operator pos:line="12" pos:column="26">&lt;<pos:position pos:line="12" pos:column="30"/></operator> <literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">die<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><literal type="string" pos:line="13" pos:column="21">"index file corrupt"<pos:position pos:line="13" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">argv_array_push<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><operator pos:line="15" pos:column="25">&amp;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="26">argv<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="32">"fetch"<pos:position pos:line="15" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
	<for pos:line="16" pos:column="9">for <control pos:line="16" pos:column="13">(<init><expr><name pos:line="16" pos:column="14">i<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <literal type="number" pos:line="16" pos:column="18">0<pos:position pos:line="16" pos:column="19"/></literal></expr>;<pos:position pos:line="16" pos:column="20"/></init> <condition><expr><name pos:line="16" pos:column="21">i<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">&lt;<pos:position pos:line="16" pos:column="27"/></operator> <name><name pos:line="16" pos:column="25">options<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">-&gt;<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="34">argc<pos:position pos:line="16" pos:column="38"/></name></name></expr>;<pos:position pos:line="16" pos:column="39"/></condition> <incr><expr><name pos:line="16" pos:column="40">i<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">++<pos:position pos:line="16" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="16" pos:column="44"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">argv_array_push<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><operator pos:line="17" pos:column="33">&amp;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="34">argv<pos:position pos:line="17" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="40">options<pos:position pos:line="17" pos:column="47"/></name><operator pos:line="17" pos:column="47">-&gt;<pos:position pos:line="17" pos:column="52"/></operator><name pos:line="17" pos:column="49">argv<pos:position pos:line="17" pos:column="53"/></name><index pos:line="17" pos:column="53">[<expr><name pos:line="17" pos:column="54">i<pos:position pos:line="17" pos:column="55"/></name></expr>]<pos:position pos:line="17" pos:column="56"/></index></name></expr></argument>)<pos:position pos:line="17" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="58"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">argv_array_push<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><operator pos:line="18" pos:column="25">&amp;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="26">argv<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="32">"--recurse-submodules-default"<pos:position pos:line="18" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="64"/></expr_stmt>
	<comment type="block" pos:line="19" pos:column="9">/* default value, "--submodule-prefix" and its value are added later */</comment>

	<expr_stmt><expr><name><name pos:line="21" pos:column="9">cp<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">.<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="12">env<pos:position pos:line="21" pos:column="15"/></name></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <name pos:line="21" pos:column="18">local_repo_env<pos:position pos:line="21" pos:column="32"/></name></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">cp<pos:position pos:line="22" pos:column="11"/></name><operator pos:line="22" pos:column="11">.<pos:position pos:line="22" pos:column="12"/></operator><name pos:line="22" pos:column="12">git_cmd<pos:position pos:line="22" pos:column="19"/></name></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <literal type="number" pos:line="22" pos:column="22">1<pos:position pos:line="22" pos:column="23"/></literal></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">cp<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">.<pos:position pos:line="23" pos:column="12"/></operator><name pos:line="23" pos:column="12">no_stdin<pos:position pos:line="23" pos:column="20"/></name></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <literal type="number" pos:line="23" pos:column="23">1<pos:position pos:line="23" pos:column="24"/></literal></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="25" pos:column="9">calculate_changed_submodule_paths<pos:position pos:line="25" pos:column="42"/></name><argument_list pos:line="25" pos:column="42">()<pos:position pos:line="25" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="45"/></expr_stmt>

	<for pos:line="27" pos:column="9">for <control pos:line="27" pos:column="13">(<init><expr><name pos:line="27" pos:column="14">i<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <literal type="number" pos:line="27" pos:column="18">0<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></init> <condition><expr><name pos:line="27" pos:column="21">i<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="25">active_nr<pos:position pos:line="27" pos:column="34"/></name></expr>;<pos:position pos:line="27" pos:column="35"/></condition> <incr><expr><name pos:line="27" pos:column="36">i<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">++<pos:position pos:line="27" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="27" pos:column="40"/></control> <block pos:line="27" pos:column="41">{
		<decl_stmt><decl><type><name><name pos:line="28" pos:column="17">struct<pos:position pos:line="28" pos:column="23"/></name> <name pos:line="28" pos:column="24">strbuf<pos:position pos:line="28" pos:column="30"/></name></name></type> <name pos:line="28" pos:column="31">submodule_path<pos:position pos:line="28" pos:column="45"/></name> <init pos:line="28" pos:column="46">= <expr><name pos:line="28" pos:column="48">STRBUF_INIT<pos:position pos:line="28" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="60"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="29" pos:column="17">struct<pos:position pos:line="29" pos:column="23"/></name> <name pos:line="29" pos:column="24">strbuf<pos:position pos:line="29" pos:column="30"/></name></name></type> <name pos:line="29" pos:column="31">submodule_git_dir<pos:position pos:line="29" pos:column="48"/></name> <init pos:line="29" pos:column="49">= <expr><name pos:line="29" pos:column="51">STRBUF_INIT<pos:position pos:line="29" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="29" pos:column="63"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="30" pos:column="17">struct<pos:position pos:line="30" pos:column="23"/></name> <name pos:line="30" pos:column="24">strbuf<pos:position pos:line="30" pos:column="30"/></name></name></type> <name pos:line="30" pos:column="31">submodule_prefix<pos:position pos:line="30" pos:column="47"/></name> <init pos:line="30" pos:column="48">= <expr><name pos:line="30" pos:column="50">STRBUF_INIT<pos:position pos:line="30" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="30" pos:column="62"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="31" pos:column="17">const<pos:position pos:line="31" pos:column="22"/></specifier> <name><name pos:line="31" pos:column="23">struct<pos:position pos:line="31" pos:column="29"/></name> <name pos:line="31" pos:column="30">cache_entry<pos:position pos:line="31" pos:column="41"/></name></name> <modifier pos:line="31" pos:column="42">*<pos:position pos:line="31" pos:column="43"/></modifier></type><name pos:line="31" pos:column="43">ce<pos:position pos:line="31" pos:column="45"/></name> <init pos:line="31" pos:column="46">= <expr><name><name pos:line="31" pos:column="48">active_cache<pos:position pos:line="31" pos:column="60"/></name><index pos:line="31" pos:column="60">[<expr><name pos:line="31" pos:column="61">i<pos:position pos:line="31" pos:column="62"/></name></expr>]<pos:position pos:line="31" pos:column="63"/></index></name></expr></init></decl>;<pos:position pos:line="31" pos:column="64"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="32" pos:column="17">const<pos:position pos:line="32" pos:column="22"/></specifier> <name pos:line="32" pos:column="23">char<pos:position pos:line="32" pos:column="27"/></name> <modifier pos:line="32" pos:column="28">*<pos:position pos:line="32" pos:column="29"/></modifier></type><name pos:line="32" pos:column="29">git_dir<pos:position pos:line="32" pos:column="36"/></name></decl>, <modifier pos:line="32" pos:column="38">*<pos:position pos:line="32" pos:column="39"/></modifier><decl><type ref="prev"/><name pos:line="32" pos:column="39">default_argv<pos:position pos:line="32" pos:column="51"/></name></decl>;<pos:position pos:line="32" pos:column="52"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="33" pos:column="17">const<pos:position pos:line="33" pos:column="22"/></specifier> <name><name pos:line="33" pos:column="23">struct<pos:position pos:line="33" pos:column="29"/></name> <name pos:line="33" pos:column="30">submodule<pos:position pos:line="33" pos:column="39"/></name></name> <modifier pos:line="33" pos:column="40">*<pos:position pos:line="33" pos:column="41"/></modifier></type><name pos:line="33" pos:column="41">submodule<pos:position pos:line="33" pos:column="50"/></name></decl>;<pos:position pos:line="33" pos:column="51"/></decl_stmt>

		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><operator pos:line="35" pos:column="21">!<pos:position pos:line="35" pos:column="22"/></operator><call><name pos:line="35" pos:column="22">S_ISGITLINK<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">(<argument><expr><name><name pos:line="35" pos:column="34">ce<pos:position pos:line="35" pos:column="36"/></name><operator pos:line="35" pos:column="36">-&gt;<pos:position pos:line="35" pos:column="41"/></operator><name pos:line="35" pos:column="38">ce_mode<pos:position pos:line="35" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="47"/></condition><then pos:line="35" pos:column="47">
			<block type="pseudo"><continue pos:line="36" pos:column="25">continue;<pos:position pos:line="36" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="38" pos:column="17">submodule<pos:position pos:line="38" pos:column="26"/></name> <operator pos:line="38" pos:column="27">=<pos:position pos:line="38" pos:column="28"/></operator> <call><name pos:line="38" pos:column="29">submodule_from_path<pos:position pos:line="38" pos:column="48"/></name><argument_list pos:line="38" pos:column="48">(<argument><expr><name pos:line="38" pos:column="49">null_sha1<pos:position pos:line="38" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="60">ce<pos:position pos:line="38" pos:column="62"/></name><operator pos:line="38" pos:column="62">-&gt;<pos:position pos:line="38" pos:column="67"/></operator><name pos:line="38" pos:column="64">name<pos:position pos:line="38" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="70"/></expr_stmt>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">!<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">submodule<pos:position pos:line="39" pos:column="31"/></name></expr>)<pos:position pos:line="39" pos:column="32"/></condition><then pos:line="39" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="25">submodule<pos:position pos:line="40" pos:column="34"/></name> <operator pos:line="40" pos:column="35">=<pos:position pos:line="40" pos:column="36"/></operator> <call><name pos:line="40" pos:column="37">submodule_from_name<pos:position pos:line="40" pos:column="56"/></name><argument_list pos:line="40" pos:column="56">(<argument><expr><name pos:line="40" pos:column="57">null_sha1<pos:position pos:line="40" pos:column="66"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="68">ce<pos:position pos:line="40" pos:column="70"/></name><operator pos:line="40" pos:column="70">-&gt;<pos:position pos:line="40" pos:column="75"/></operator><name pos:line="40" pos:column="72">name<pos:position pos:line="40" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="78"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="42" pos:column="17">default_argv<pos:position pos:line="42" pos:column="29"/></name> <operator pos:line="42" pos:column="30">=<pos:position pos:line="42" pos:column="31"/></operator> <literal type="string" pos:line="42" pos:column="32">"yes"<pos:position pos:line="42" pos:column="37"/></literal></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">command_line_option<pos:position pos:line="43" pos:column="40"/></name> <operator pos:line="43" pos:column="41">==<pos:position pos:line="43" pos:column="43"/></operator> <name pos:line="43" pos:column="44">RECURSE_SUBMODULES_DEFAULT<pos:position pos:line="43" pos:column="70"/></name></expr>)<pos:position pos:line="43" pos:column="71"/></condition><then pos:line="43" pos:column="71"> <block pos:line="43" pos:column="72">{
			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><name pos:line="44" pos:column="29">submodule<pos:position pos:line="44" pos:column="38"/></name> <operator pos:line="44" pos:column="39">&amp;&amp;<pos:position pos:line="44" pos:column="49"/></operator>
			    <name><name pos:line="45" pos:column="29">submodule<pos:position pos:line="45" pos:column="38"/></name><operator pos:line="45" pos:column="38">-&gt;<pos:position pos:line="45" pos:column="43"/></operator><name pos:line="45" pos:column="40">fetch_recurse<pos:position pos:line="45" pos:column="53"/></name></name> <operator pos:line="45" pos:column="54">!=<pos:position pos:line="45" pos:column="56"/></operator>
						<name pos:line="46" pos:column="49">RECURSE_SUBMODULES_NONE<pos:position pos:line="46" pos:column="72"/></name></expr>)<pos:position pos:line="46" pos:column="73"/></condition><then pos:line="46" pos:column="73"> <block pos:line="46" pos:column="74">{
				<if pos:line="47" pos:column="33">if <condition pos:line="47" pos:column="36">(<expr><name><name pos:line="47" pos:column="37">submodule<pos:position pos:line="47" pos:column="46"/></name><operator pos:line="47" pos:column="46">-&gt;<pos:position pos:line="47" pos:column="51"/></operator><name pos:line="47" pos:column="48">fetch_recurse<pos:position pos:line="47" pos:column="61"/></name></name> <operator pos:line="47" pos:column="62">==<pos:position pos:line="47" pos:column="64"/></operator>
						<name pos:line="48" pos:column="49">RECURSE_SUBMODULES_OFF<pos:position pos:line="48" pos:column="71"/></name></expr>)<pos:position pos:line="48" pos:column="72"/></condition><then pos:line="48" pos:column="72">
					<block type="pseudo"><continue pos:line="49" pos:column="41">continue;<pos:position pos:line="49" pos:column="50"/></continue></block></then></if>
				<if pos:line="50" pos:column="33">if <condition pos:line="50" pos:column="36">(<expr><name><name pos:line="50" pos:column="37">submodule<pos:position pos:line="50" pos:column="46"/></name><operator pos:line="50" pos:column="46">-&gt;<pos:position pos:line="50" pos:column="51"/></operator><name pos:line="50" pos:column="48">fetch_recurse<pos:position pos:line="50" pos:column="61"/></name></name> <operator pos:line="50" pos:column="62">==<pos:position pos:line="50" pos:column="64"/></operator>
						<name pos:line="51" pos:column="49">RECURSE_SUBMODULES_ON_DEMAND<pos:position pos:line="51" pos:column="77"/></name></expr>)<pos:position pos:line="51" pos:column="78"/></condition><then pos:line="51" pos:column="78"> <block pos:line="51" pos:column="79">{
					<if pos:line="52" pos:column="41">if <condition pos:line="52" pos:column="44">(<expr><operator pos:line="52" pos:column="45">!<pos:position pos:line="52" pos:column="46"/></operator><call><name pos:line="52" pos:column="46">unsorted_string_list_lookup<pos:position pos:line="52" pos:column="73"/></name><argument_list pos:line="52" pos:column="73">(<argument><expr><operator pos:line="52" pos:column="74">&amp;<pos:position pos:line="52" pos:column="79"/></operator><name pos:line="52" pos:column="75">changed_submodule_paths<pos:position pos:line="52" pos:column="98"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="100">ce<pos:position pos:line="52" pos:column="102"/></name><operator pos:line="52" pos:column="102">-&gt;<pos:position pos:line="52" pos:column="107"/></operator><name pos:line="52" pos:column="104">name<pos:position pos:line="52" pos:column="108"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="109"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="110"/></condition><then pos:line="52" pos:column="110">
						<block type="pseudo"><continue pos:line="53" pos:column="49">continue;<pos:position pos:line="53" pos:column="58"/></continue></block></then></if>
					<expr_stmt><expr><name pos:line="54" pos:column="41">default_argv<pos:position pos:line="54" pos:column="53"/></name> <operator pos:line="54" pos:column="54">=<pos:position pos:line="54" pos:column="55"/></operator> <literal type="string" pos:line="54" pos:column="56">"on-demand"<pos:position pos:line="54" pos:column="67"/></literal></expr>;<pos:position pos:line="54" pos:column="68"/></expr_stmt>
				}<pos:position pos:line="55" pos:column="34"/></block></then></if>
			}<pos:position pos:line="56" pos:column="26"/></block></then> <else pos:line="56" pos:column="27">else <block pos:line="56" pos:column="32">{
				<if pos:line="57" pos:column="33">if <condition pos:line="57" pos:column="36">(<expr><operator pos:line="57" pos:column="37">(<pos:position pos:line="57" pos:column="38"/></operator><name pos:line="57" pos:column="38">config_fetch_recurse_submodules<pos:position pos:line="57" pos:column="69"/></name> <operator pos:line="57" pos:column="70">==<pos:position pos:line="57" pos:column="72"/></operator> <name pos:line="57" pos:column="73">RECURSE_SUBMODULES_OFF<pos:position pos:line="57" pos:column="95"/></name><operator pos:line="57" pos:column="95">)<pos:position pos:line="57" pos:column="96"/></operator> <operator pos:line="57" pos:column="97">||<pos:position pos:line="57" pos:column="99"/></operator>
				    <name pos:line="58" pos:column="37">gitmodules_is_unmerged<pos:position pos:line="58" pos:column="59"/></name></expr>)<pos:position pos:line="58" pos:column="60"/></condition><then pos:line="58" pos:column="60">
					<block type="pseudo"><continue pos:line="59" pos:column="41">continue;<pos:position pos:line="59" pos:column="50"/></continue></block></then></if>
				<if pos:line="60" pos:column="33">if <condition pos:line="60" pos:column="36">(<expr><name pos:line="60" pos:column="37">config_fetch_recurse_submodules<pos:position pos:line="60" pos:column="68"/></name> <operator pos:line="60" pos:column="69">==<pos:position pos:line="60" pos:column="71"/></operator> <name pos:line="60" pos:column="72">RECURSE_SUBMODULES_ON_DEMAND<pos:position pos:line="60" pos:column="100"/></name></expr>)<pos:position pos:line="60" pos:column="101"/></condition><then pos:line="60" pos:column="101"> <block pos:line="60" pos:column="102">{
					<if pos:line="61" pos:column="41">if <condition pos:line="61" pos:column="44">(<expr><operator pos:line="61" pos:column="45">!<pos:position pos:line="61" pos:column="46"/></operator><call><name pos:line="61" pos:column="46">unsorted_string_list_lookup<pos:position pos:line="61" pos:column="73"/></name><argument_list pos:line="61" pos:column="73">(<argument><expr><operator pos:line="61" pos:column="74">&amp;<pos:position pos:line="61" pos:column="79"/></operator><name pos:line="61" pos:column="75">changed_submodule_paths<pos:position pos:line="61" pos:column="98"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="100">ce<pos:position pos:line="61" pos:column="102"/></name><operator pos:line="61" pos:column="102">-&gt;<pos:position pos:line="61" pos:column="107"/></operator><name pos:line="61" pos:column="104">name<pos:position pos:line="61" pos:column="108"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="109"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="110"/></condition><then pos:line="61" pos:column="110">
						<block type="pseudo"><continue pos:line="62" pos:column="49">continue;<pos:position pos:line="62" pos:column="58"/></continue></block></then></if>
					<expr_stmt><expr><name pos:line="63" pos:column="41">default_argv<pos:position pos:line="63" pos:column="53"/></name> <operator pos:line="63" pos:column="54">=<pos:position pos:line="63" pos:column="55"/></operator> <literal type="string" pos:line="63" pos:column="56">"on-demand"<pos:position pos:line="63" pos:column="67"/></literal></expr>;<pos:position pos:line="63" pos:column="68"/></expr_stmt>
				}<pos:position pos:line="64" pos:column="34"/></block></then></if>
			}<pos:position pos:line="65" pos:column="26"/></block></else></if>
		}<pos:position pos:line="66" pos:column="18"/></block></then> <elseif pos:line="66" pos:column="19">else <if pos:line="66" pos:column="24">if <condition pos:line="66" pos:column="27">(<expr><name pos:line="66" pos:column="28">command_line_option<pos:position pos:line="66" pos:column="47"/></name> <operator pos:line="66" pos:column="48">==<pos:position pos:line="66" pos:column="50"/></operator> <name pos:line="66" pos:column="51">RECURSE_SUBMODULES_ON_DEMAND<pos:position pos:line="66" pos:column="79"/></name></expr>)<pos:position pos:line="66" pos:column="80"/></condition><then pos:line="66" pos:column="80"> <block pos:line="66" pos:column="81">{
			<if pos:line="67" pos:column="25">if <condition pos:line="67" pos:column="28">(<expr><operator pos:line="67" pos:column="29">!<pos:position pos:line="67" pos:column="30"/></operator><call><name pos:line="67" pos:column="30">unsorted_string_list_lookup<pos:position pos:line="67" pos:column="57"/></name><argument_list pos:line="67" pos:column="57">(<argument><expr><operator pos:line="67" pos:column="58">&amp;<pos:position pos:line="67" pos:column="63"/></operator><name pos:line="67" pos:column="59">changed_submodule_paths<pos:position pos:line="67" pos:column="82"/></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="84">ce<pos:position pos:line="67" pos:column="86"/></name><operator pos:line="67" pos:column="86">-&gt;<pos:position pos:line="67" pos:column="91"/></operator><name pos:line="67" pos:column="88">name<pos:position pos:line="67" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="93"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="94"/></condition><then pos:line="67" pos:column="94">
				<block type="pseudo"><continue pos:line="68" pos:column="33">continue;<pos:position pos:line="68" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="69" pos:column="25">default_argv<pos:position pos:line="69" pos:column="37"/></name> <operator pos:line="69" pos:column="38">=<pos:position pos:line="69" pos:column="39"/></operator> <literal type="string" pos:line="69" pos:column="40">"on-demand"<pos:position pos:line="69" pos:column="51"/></literal></expr>;<pos:position pos:line="69" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="70" pos:column="18"/></block></then></if></elseif></if>

		<expr_stmt><expr><call><name pos:line="72" pos:column="17">strbuf_addf<pos:position pos:line="72" pos:column="28"/></name><argument_list pos:line="72" pos:column="28">(<argument><expr><operator pos:line="72" pos:column="29">&amp;<pos:position pos:line="72" pos:column="34"/></operator><name pos:line="72" pos:column="30">submodule_path<pos:position pos:line="72" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="46">"%s/%s"<pos:position pos:line="72" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="55">work_tree<pos:position pos:line="72" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="66">ce<pos:position pos:line="72" pos:column="68"/></name><operator pos:line="72" pos:column="68">-&gt;<pos:position pos:line="72" pos:column="73"/></operator><name pos:line="72" pos:column="70">name<pos:position pos:line="72" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">strbuf_addf<pos:position pos:line="73" pos:column="28"/></name><argument_list pos:line="73" pos:column="28">(<argument><expr><operator pos:line="73" pos:column="29">&amp;<pos:position pos:line="73" pos:column="34"/></operator><name pos:line="73" pos:column="30">submodule_git_dir<pos:position pos:line="73" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="49">"%s/.git"<pos:position pos:line="73" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="60">submodule_path<pos:position pos:line="73" pos:column="74"/></name><operator pos:line="73" pos:column="74">.<pos:position pos:line="73" pos:column="75"/></operator><name pos:line="73" pos:column="75">buf<pos:position pos:line="73" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="80"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">strbuf_addf<pos:position pos:line="74" pos:column="28"/></name><argument_list pos:line="74" pos:column="28">(<argument><expr><operator pos:line="74" pos:column="29">&amp;<pos:position pos:line="74" pos:column="34"/></operator><name pos:line="74" pos:column="30">submodule_prefix<pos:position pos:line="74" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="48">"%s%s/"<pos:position pos:line="74" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="57">prefix<pos:position pos:line="74" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="65">ce<pos:position pos:line="74" pos:column="67"/></name><operator pos:line="74" pos:column="67">-&gt;<pos:position pos:line="74" pos:column="72"/></operator><name pos:line="74" pos:column="69">name<pos:position pos:line="74" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><name pos:line="75" pos:column="17">git_dir<pos:position pos:line="75" pos:column="24"/></name> <operator pos:line="75" pos:column="25">=<pos:position pos:line="75" pos:column="26"/></operator> <call><name pos:line="75" pos:column="27">read_gitfile<pos:position pos:line="75" pos:column="39"/></name><argument_list pos:line="75" pos:column="39">(<argument><expr><name><name pos:line="75" pos:column="40">submodule_git_dir<pos:position pos:line="75" pos:column="57"/></name><operator pos:line="75" pos:column="57">.<pos:position pos:line="75" pos:column="58"/></operator><name pos:line="75" pos:column="58">buf<pos:position pos:line="75" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="63"/></expr_stmt>
		<if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><operator pos:line="76" pos:column="21">!<pos:position pos:line="76" pos:column="22"/></operator><name pos:line="76" pos:column="22">git_dir<pos:position pos:line="76" pos:column="29"/></name></expr>)<pos:position pos:line="76" pos:column="30"/></condition><then pos:line="76" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><name pos:line="77" pos:column="25">git_dir<pos:position pos:line="77" pos:column="32"/></name> <operator pos:line="77" pos:column="33">=<pos:position pos:line="77" pos:column="34"/></operator> <name><name pos:line="77" pos:column="35">submodule_git_dir<pos:position pos:line="77" pos:column="52"/></name><operator pos:line="77" pos:column="52">.<pos:position pos:line="77" pos:column="53"/></operator><name pos:line="77" pos:column="53">buf<pos:position pos:line="77" pos:column="56"/></name></name></expr>;<pos:position pos:line="77" pos:column="57"/></expr_stmt></block></then></if>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><call><name pos:line="78" pos:column="21">is_directory<pos:position pos:line="78" pos:column="33"/></name><argument_list pos:line="78" pos:column="33">(<argument><expr><name pos:line="78" pos:column="34">git_dir<pos:position pos:line="78" pos:column="41"/></name></expr></argument>)<pos:position pos:line="78" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="43"/></condition><then pos:line="78" pos:column="43"> <block pos:line="78" pos:column="44">{
			<if pos:line="79" pos:column="25">if <condition pos:line="79" pos:column="28">(<expr><operator pos:line="79" pos:column="29">!<pos:position pos:line="79" pos:column="30"/></operator><name pos:line="79" pos:column="30">quiet<pos:position pos:line="79" pos:column="35"/></name></expr>)<pos:position pos:line="79" pos:column="36"/></condition><then pos:line="79" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="80" pos:column="33">printf<pos:position pos:line="80" pos:column="39"/></name><argument_list pos:line="80" pos:column="39">(<argument><expr><literal type="string" pos:line="80" pos:column="40">"Fetching submodule %s%s\n"<pos:position pos:line="80" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="69">prefix<pos:position pos:line="80" pos:column="75"/></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="77">ce<pos:position pos:line="80" pos:column="79"/></name><operator pos:line="80" pos:column="79">-&gt;<pos:position pos:line="80" pos:column="84"/></operator><name pos:line="80" pos:column="81">name<pos:position pos:line="80" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="87"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="81" pos:column="25">cp<pos:position pos:line="81" pos:column="27"/></name><operator pos:line="81" pos:column="27">.<pos:position pos:line="81" pos:column="28"/></operator><name pos:line="81" pos:column="28">dir<pos:position pos:line="81" pos:column="31"/></name></name> <operator pos:line="81" pos:column="32">=<pos:position pos:line="81" pos:column="33"/></operator> <name><name pos:line="81" pos:column="34">submodule_path<pos:position pos:line="81" pos:column="48"/></name><operator pos:line="81" pos:column="48">.<pos:position pos:line="81" pos:column="49"/></operator><name pos:line="81" pos:column="49">buf<pos:position pos:line="81" pos:column="52"/></name></name></expr>;<pos:position pos:line="81" pos:column="53"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="82" pos:column="25">argv_array_push<pos:position pos:line="82" pos:column="40"/></name><argument_list pos:line="82" pos:column="40">(<argument><expr><operator pos:line="82" pos:column="41">&amp;<pos:position pos:line="82" pos:column="46"/></operator><name pos:line="82" pos:column="42">argv<pos:position pos:line="82" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="48">default_argv<pos:position pos:line="82" pos:column="60"/></name></expr></argument>)<pos:position pos:line="82" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="83" pos:column="25">argv_array_push<pos:position pos:line="83" pos:column="40"/></name><argument_list pos:line="83" pos:column="40">(<argument><expr><operator pos:line="83" pos:column="41">&amp;<pos:position pos:line="83" pos:column="46"/></operator><name pos:line="83" pos:column="42">argv<pos:position pos:line="83" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="48">"--submodule-prefix"<pos:position pos:line="83" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="70"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="84" pos:column="25">argv_array_push<pos:position pos:line="84" pos:column="40"/></name><argument_list pos:line="84" pos:column="40">(<argument><expr><operator pos:line="84" pos:column="41">&amp;<pos:position pos:line="84" pos:column="46"/></operator><name pos:line="84" pos:column="42">argv<pos:position pos:line="84" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="48">submodule_prefix<pos:position pos:line="84" pos:column="64"/></name><operator pos:line="84" pos:column="64">.<pos:position pos:line="84" pos:column="65"/></operator><name pos:line="84" pos:column="65">buf<pos:position pos:line="84" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="70"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="85" pos:column="25">cp<pos:position pos:line="85" pos:column="27"/></name><operator pos:line="85" pos:column="27">.<pos:position pos:line="85" pos:column="28"/></operator><name pos:line="85" pos:column="28">argv<pos:position pos:line="85" pos:column="32"/></name></name> <operator pos:line="85" pos:column="33">=<pos:position pos:line="85" pos:column="34"/></operator> <name><name pos:line="85" pos:column="35">argv<pos:position pos:line="85" pos:column="39"/></name><operator pos:line="85" pos:column="39">.<pos:position pos:line="85" pos:column="40"/></operator><name pos:line="85" pos:column="40">argv<pos:position pos:line="85" pos:column="44"/></name></name></expr>;<pos:position pos:line="85" pos:column="45"/></expr_stmt>
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><call><name pos:line="86" pos:column="29">run_command<pos:position pos:line="86" pos:column="40"/></name><argument_list pos:line="86" pos:column="40">(<argument><expr><operator pos:line="86" pos:column="41">&amp;<pos:position pos:line="86" pos:column="46"/></operator><name pos:line="86" pos:column="42">cp<pos:position pos:line="86" pos:column="44"/></name></expr></argument>)<pos:position pos:line="86" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="46"/></condition><then pos:line="86" pos:column="46">
				<block type="pseudo"><expr_stmt><expr><name pos:line="87" pos:column="33">result<pos:position pos:line="87" pos:column="39"/></name> <operator pos:line="87" pos:column="40">=<pos:position pos:line="87" pos:column="41"/></operator> <literal type="number" pos:line="87" pos:column="42">1<pos:position pos:line="87" pos:column="43"/></literal></expr>;<pos:position pos:line="87" pos:column="44"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="88" pos:column="25">argv_array_pop<pos:position pos:line="88" pos:column="39"/></name><argument_list pos:line="88" pos:column="39">(<argument><expr><operator pos:line="88" pos:column="40">&amp;<pos:position pos:line="88" pos:column="45"/></operator><name pos:line="88" pos:column="41">argv<pos:position pos:line="88" pos:column="45"/></name></expr></argument>)<pos:position pos:line="88" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="89" pos:column="25">argv_array_pop<pos:position pos:line="89" pos:column="39"/></name><argument_list pos:line="89" pos:column="39">(<argument><expr><operator pos:line="89" pos:column="40">&amp;<pos:position pos:line="89" pos:column="45"/></operator><name pos:line="89" pos:column="41">argv<pos:position pos:line="89" pos:column="45"/></name></expr></argument>)<pos:position pos:line="89" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="90" pos:column="25">argv_array_pop<pos:position pos:line="90" pos:column="39"/></name><argument_list pos:line="90" pos:column="39">(<argument><expr><operator pos:line="90" pos:column="40">&amp;<pos:position pos:line="90" pos:column="45"/></operator><name pos:line="90" pos:column="41">argv<pos:position pos:line="90" pos:column="45"/></name></expr></argument>)<pos:position pos:line="90" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="91" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="92" pos:column="17">strbuf_release<pos:position pos:line="92" pos:column="31"/></name><argument_list pos:line="92" pos:column="31">(<argument><expr><operator pos:line="92" pos:column="32">&amp;<pos:position pos:line="92" pos:column="37"/></operator><name pos:line="92" pos:column="33">submodule_path<pos:position pos:line="92" pos:column="47"/></name></expr></argument>)<pos:position pos:line="92" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">strbuf_release<pos:position pos:line="93" pos:column="31"/></name><argument_list pos:line="93" pos:column="31">(<argument><expr><operator pos:line="93" pos:column="32">&amp;<pos:position pos:line="93" pos:column="37"/></operator><name pos:line="93" pos:column="33">submodule_git_dir<pos:position pos:line="93" pos:column="50"/></name></expr></argument>)<pos:position pos:line="93" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="94" pos:column="17">strbuf_release<pos:position pos:line="94" pos:column="31"/></name><argument_list pos:line="94" pos:column="31">(<argument><expr><operator pos:line="94" pos:column="32">&amp;<pos:position pos:line="94" pos:column="37"/></operator><name pos:line="94" pos:column="33">submodule_prefix<pos:position pos:line="94" pos:column="49"/></name></expr></argument>)<pos:position pos:line="94" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="95" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="96" pos:column="9">argv_array_clear<pos:position pos:line="96" pos:column="25"/></name><argument_list pos:line="96" pos:column="25">(<argument><expr><operator pos:line="96" pos:column="26">&amp;<pos:position pos:line="96" pos:column="31"/></operator><name pos:line="96" pos:column="27">argv<pos:position pos:line="96" pos:column="31"/></name></expr></argument>)<pos:position pos:line="96" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="33"/></expr_stmt>
<label><name pos:line="97" pos:column="1">out<pos:position pos:line="97" pos:column="4"/></name>:<pos:position pos:line="97" pos:column="5"/></label>
	<expr_stmt><expr><call><name pos:line="98" pos:column="9">string_list_clear<pos:position pos:line="98" pos:column="26"/></name><argument_list pos:line="98" pos:column="26">(<argument><expr><operator pos:line="98" pos:column="27">&amp;<pos:position pos:line="98" pos:column="32"/></operator><name pos:line="98" pos:column="28">changed_submodule_paths<pos:position pos:line="98" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="98" pos:column="53">1<pos:position pos:line="98" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="56"/></expr_stmt>
	<return pos:line="99" pos:column="9">return <expr><name pos:line="99" pos:column="16">result<pos:position pos:line="99" pos:column="22"/></name></expr>;<pos:position pos:line="99" pos:column="23"/></return>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
