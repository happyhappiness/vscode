<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3938_git-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">contains_result<pos:position pos:line="1" pos:column="28"/></name></name></type> <name pos:line="1" pos:column="29">contains<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">commit<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">candidate<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name><name pos:line="2" pos:column="23">struct<pos:position pos:line="2" pos:column="29"/></name> <name pos:line="2" pos:column="30">commit_list<pos:position pos:line="2" pos:column="41"/></name></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">want<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">stack<pos:position pos:line="4" pos:column="21"/></name></name></type> <name pos:line="4" pos:column="22">stack<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><block pos:line="4" pos:column="30">{ <expr><literal type="number" pos:line="4" pos:column="32">0<pos:position pos:line="4" pos:column="33"/></literal></expr>, <expr><literal type="number" pos:line="4" pos:column="35">0<pos:position pos:line="4" pos:column="36"/></literal></expr>, <expr><name pos:line="4" pos:column="38">NULL<pos:position pos:line="4" pos:column="42"/></name></expr> }<pos:position pos:line="4" pos:column="44"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">result<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><call><name pos:line="5" pos:column="22">contains_test<pos:position pos:line="5" pos:column="35"/></name><argument_list pos:line="5" pos:column="35">(<argument><expr><name pos:line="5" pos:column="36">candidate<pos:position pos:line="5" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="47">want<pos:position pos:line="5" pos:column="51"/></name></expr></argument>)<pos:position pos:line="5" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="53"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">result<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">!=<pos:position pos:line="7" pos:column="22"/></operator> <name pos:line="7" pos:column="23">CONTAINS_UNKNOWN<pos:position pos:line="7" pos:column="39"/></name></expr>)<pos:position pos:line="7" pos:column="40"/></condition><then pos:line="7" pos:column="40">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><name pos:line="8" pos:column="24">result<pos:position pos:line="8" pos:column="30"/></name></expr>;<pos:position pos:line="8" pos:column="31"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">push_to_stack<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">candidate<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="34">&amp;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="35">stack<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt>
	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><name><name pos:line="11" pos:column="16">stack<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">.<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">nr<pos:position pos:line="11" pos:column="24"/></name></name></expr>)<pos:position pos:line="11" pos:column="25"/></condition> <block pos:line="11" pos:column="26">{
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">struct<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">stack_entry<pos:position pos:line="12" pos:column="35"/></name></name> <modifier pos:line="12" pos:column="36">*<pos:position pos:line="12" pos:column="37"/></modifier></type><name pos:line="12" pos:column="37">entry<pos:position pos:line="12" pos:column="42"/></name> <init pos:line="12" pos:column="43">= <expr><operator pos:line="12" pos:column="45">&amp;<pos:position pos:line="12" pos:column="50"/></operator><name><name pos:line="12" pos:column="46">stack<pos:position pos:line="12" pos:column="51"/></name><operator pos:line="12" pos:column="51">.<pos:position pos:line="12" pos:column="52"/></operator><name pos:line="12" pos:column="52">stack<pos:position pos:line="12" pos:column="57"/></name><index pos:line="12" pos:column="57">[<expr><name><name pos:line="12" pos:column="58">stack<pos:position pos:line="12" pos:column="63"/></name><operator pos:line="12" pos:column="63">.<pos:position pos:line="12" pos:column="64"/></operator><name pos:line="12" pos:column="64">nr<pos:position pos:line="12" pos:column="66"/></name></name> <operator pos:line="12" pos:column="67">-<pos:position pos:line="12" pos:column="68"/></operator> <literal type="number" pos:line="12" pos:column="69">1<pos:position pos:line="12" pos:column="70"/></literal></expr>]<pos:position pos:line="12" pos:column="71"/></index></name></expr></init></decl>;<pos:position pos:line="12" pos:column="72"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">commit<pos:position pos:line="13" pos:column="30"/></name></name> <modifier pos:line="13" pos:column="31">*<pos:position pos:line="13" pos:column="32"/></modifier></type><name pos:line="13" pos:column="32">commit<pos:position pos:line="13" pos:column="38"/></name> <init pos:line="13" pos:column="39">= <expr><name><name pos:line="13" pos:column="41">entry<pos:position pos:line="13" pos:column="46"/></name><operator pos:line="13" pos:column="46">-&gt;<pos:position pos:line="13" pos:column="51"/></operator><name pos:line="13" pos:column="48">commit<pos:position pos:line="13" pos:column="54"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="55"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="14" pos:column="17">struct<pos:position pos:line="14" pos:column="23"/></name> <name pos:line="14" pos:column="24">commit_list<pos:position pos:line="14" pos:column="35"/></name></name> <modifier pos:line="14" pos:column="36">*<pos:position pos:line="14" pos:column="37"/></modifier></type><name pos:line="14" pos:column="37">parents<pos:position pos:line="14" pos:column="44"/></name> <init pos:line="14" pos:column="45">= <expr><name><name pos:line="14" pos:column="47">entry<pos:position pos:line="14" pos:column="52"/></name><operator pos:line="14" pos:column="52">-&gt;<pos:position pos:line="14" pos:column="57"/></operator><name pos:line="14" pos:column="54">parents<pos:position pos:line="14" pos:column="61"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="62"/></decl_stmt>

		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">parents<pos:position pos:line="16" pos:column="29"/></name></expr>)<pos:position pos:line="16" pos:column="30"/></condition><then pos:line="16" pos:column="30"> <block pos:line="16" pos:column="31">{
			<expr_stmt><expr><name><name pos:line="17" pos:column="25">commit<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="33">object<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">.<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="40">flags<pos:position pos:line="17" pos:column="45"/></name></name> <operator pos:line="17" pos:column="46">|=<pos:position pos:line="17" pos:column="48"/></operator> <name pos:line="17" pos:column="49">UNINTERESTING<pos:position pos:line="17" pos:column="62"/></name></expr>;<pos:position pos:line="17" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="18" pos:column="25">stack<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">.<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">nr<pos:position pos:line="18" pos:column="33"/></name></name><operator pos:line="18" pos:column="33">--<pos:position pos:line="18" pos:column="35"/></operator></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="19" pos:column="18"/></block></then>
		<comment type="block" pos:line="20" pos:column="17">/*
		 * If we just popped the stack, parents-&gt;item has been marked,
		 * therefore contains_test will return a meaningful 0 or 1.
		 */</comment>
		<else pos:line="24" pos:column="17">else <block type="pseudo"><switch pos:line="24" pos:column="22">switch <condition pos:line="24" pos:column="29">(<expr><call><name pos:line="24" pos:column="30">contains_test<pos:position pos:line="24" pos:column="43"/></name><argument_list pos:line="24" pos:column="43">(<argument><expr><name><name pos:line="24" pos:column="44">parents<pos:position pos:line="24" pos:column="51"/></name><operator pos:line="24" pos:column="51">-&gt;<pos:position pos:line="24" pos:column="56"/></operator><name pos:line="24" pos:column="53">item<pos:position pos:line="24" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="59">want<pos:position pos:line="24" pos:column="63"/></name></expr></argument>)<pos:position pos:line="24" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="65"/></condition> <block pos:line="24" pos:column="66">{
		<case pos:line="25" pos:column="17">case <expr><name pos:line="25" pos:column="22">CONTAINS_YES<pos:position pos:line="25" pos:column="34"/></name></expr>:<pos:position pos:line="25" pos:column="35"/></case>
			<expr_stmt><expr><name><name pos:line="26" pos:column="25">commit<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">-&gt;<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="33">object<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">.<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="40">flags<pos:position pos:line="26" pos:column="45"/></name></name> <operator pos:line="26" pos:column="46">|=<pos:position pos:line="26" pos:column="48"/></operator> <name pos:line="26" pos:column="49">TMP_MARK<pos:position pos:line="26" pos:column="57"/></name></expr>;<pos:position pos:line="26" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="27" pos:column="25">stack<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">.<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="31">nr<pos:position pos:line="27" pos:column="33"/></name></name><operator pos:line="27" pos:column="33">--<pos:position pos:line="27" pos:column="35"/></operator></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
			<break pos:line="28" pos:column="25">break;<pos:position pos:line="28" pos:column="31"/></break>
		<case pos:line="29" pos:column="17">case <expr><name pos:line="29" pos:column="22">CONTAINS_NO<pos:position pos:line="29" pos:column="33"/></name></expr>:<pos:position pos:line="29" pos:column="34"/></case>
			<expr_stmt><expr><name><name pos:line="30" pos:column="25">entry<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">-&gt;<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="32">parents<pos:position pos:line="30" pos:column="39"/></name></name> <operator pos:line="30" pos:column="40">=<pos:position pos:line="30" pos:column="41"/></operator> <name><name pos:line="30" pos:column="42">parents<pos:position pos:line="30" pos:column="49"/></name><operator pos:line="30" pos:column="49">-&gt;<pos:position pos:line="30" pos:column="54"/></operator><name pos:line="30" pos:column="51">next<pos:position pos:line="30" pos:column="55"/></name></name></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt>
			<break pos:line="31" pos:column="25">break;<pos:position pos:line="31" pos:column="31"/></break>
		<case pos:line="32" pos:column="17">case <expr><name pos:line="32" pos:column="22">CONTAINS_UNKNOWN<pos:position pos:line="32" pos:column="38"/></name></expr>:<pos:position pos:line="32" pos:column="39"/></case>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">push_to_stack<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name><name pos:line="33" pos:column="39">parents<pos:position pos:line="33" pos:column="46"/></name><operator pos:line="33" pos:column="46">-&gt;<pos:position pos:line="33" pos:column="51"/></operator><name pos:line="33" pos:column="48">item<pos:position pos:line="33" pos:column="52"/></name></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="54">&amp;<pos:position pos:line="33" pos:column="59"/></operator><name pos:line="33" pos:column="55">stack<pos:position pos:line="33" pos:column="60"/></name></expr></argument>)<pos:position pos:line="33" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="62"/></expr_stmt>
			<break pos:line="34" pos:column="25">break;<pos:position pos:line="34" pos:column="31"/></break>
		}<pos:position pos:line="35" pos:column="18"/></block></switch></block></else></if>
	}<pos:position pos:line="36" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">free<pos:position pos:line="37" pos:column="13"/></name><argument_list pos:line="37" pos:column="13">(<argument><expr><name><name pos:line="37" pos:column="14">stack<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">.<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="20">stack<pos:position pos:line="37" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="27"/></expr_stmt>
	<return pos:line="38" pos:column="9">return <expr><call><name pos:line="38" pos:column="16">contains_test<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><name pos:line="38" pos:column="30">candidate<pos:position pos:line="38" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="41">want<pos:position pos:line="38" pos:column="45"/></name></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="47"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
