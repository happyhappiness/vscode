<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1507.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">hash_fd<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">fd<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">type<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">int<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">write_object<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="65">const<pos:position pos:line="1" pos:column="70"/></specifier> <name pos:line="1" pos:column="71">char<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">path<pos:position pos:line="1" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="82"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">stat<pos:position pos:line="3" pos:column="20"/></name></name></type> <name pos:line="3" pos:column="21">st<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">sha1<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">20<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">flags<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><operator pos:line="5" pos:column="26">(<pos:position pos:line="5" pos:column="27"/></operator><name pos:line="5" pos:column="27">HASH_FORMAT_CHECK<pos:position pos:line="5" pos:column="44"/></name> <operator pos:line="5" pos:column="45">|<pos:position pos:line="5" pos:column="46"/></operator>
			  <operator pos:line="6" pos:column="27">(<pos:position pos:line="6" pos:column="28"/></operator><ternary><condition><expr><name pos:line="6" pos:column="28">write_object<pos:position pos:line="6" pos:column="40"/></name></expr> ?<pos:position pos:line="6" pos:column="42"/></condition><then pos:line="6" pos:column="42"> <expr><name pos:line="6" pos:column="43">HASH_WRITE_OBJECT<pos:position pos:line="6" pos:column="60"/></name></expr> <pos:position pos:line="6" pos:column="61"/></then><else pos:line="6" pos:column="61">: <expr><literal type="number" pos:line="6" pos:column="63">0<pos:position pos:line="6" pos:column="64"/></literal></expr></else></ternary><operator pos:line="6" pos:column="64">)<pos:position pos:line="6" pos:column="65"/></operator><operator pos:line="6" pos:column="65">)<pos:position pos:line="6" pos:column="66"/></operator></expr></init></decl>;<pos:position pos:line="6" pos:column="67"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">fstat<pos:position pos:line="8" pos:column="18"/></name><argument_list pos:line="8" pos:column="18">(<argument><expr><name pos:line="8" pos:column="19">fd<pos:position pos:line="8" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="23">&amp;<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="24">st<pos:position pos:line="8" pos:column="26"/></name></expr></argument>)<pos:position pos:line="8" pos:column="27"/></argument_list></call> <operator pos:line="8" pos:column="28">&lt;<pos:position pos:line="8" pos:column="32"/></operator> <literal type="number" pos:line="8" pos:column="30">0<pos:position pos:line="8" pos:column="31"/></literal> <operator pos:line="8" pos:column="32">||<pos:position pos:line="8" pos:column="34"/></operator>
	    <call><name pos:line="9" pos:column="13">index_fd<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">sha1<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="28">fd<pos:position pos:line="9" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="32">&amp;<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="33">st<pos:position pos:line="9" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="37">type_from_string<pos:position pos:line="9" pos:column="53"/></name><argument_list pos:line="9" pos:column="53">(<argument><expr><name pos:line="9" pos:column="54">type<pos:position pos:line="9" pos:column="58"/></name></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="9" pos:column="61">path<pos:position pos:line="9" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="67">flags<pos:position pos:line="9" pos:column="72"/></name></expr></argument>)<pos:position pos:line="9" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="74"/></condition><then pos:line="9" pos:column="74">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">die<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><ternary><condition><expr><name pos:line="10" pos:column="21">write_object<pos:position pos:line="10" pos:column="33"/></name></expr>
		    ?<pos:position pos:line="11" pos:column="22"/></condition><then pos:line="11" pos:column="22"> <expr><literal type="string" pos:line="11" pos:column="23">"Unable to add %s to database"<pos:position pos:line="11" pos:column="53"/></literal></expr>
		    <pos:position pos:line="12" pos:column="7"/></then><else pos:line="12" pos:column="21">: <expr><literal type="string" pos:line="12" pos:column="23">"Unable to hash %s"<pos:position pos:line="12" pos:column="42"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="12" pos:column="44">path<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="50"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">printf<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="string" pos:line="13" pos:column="16">"%s\n"<pos:position pos:line="13" pos:column="22"/></literal></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="24">sha1_to_hex<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><name pos:line="13" pos:column="36">sha1<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">maybe_flush_or_die<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">stdout<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="36">"hash to stdout"<pos:position pos:line="14" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
