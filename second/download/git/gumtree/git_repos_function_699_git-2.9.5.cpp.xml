<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_699_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">stream_to_pack<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">bulk_checkin_state<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">state<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="2" pos:column="27">git_SHA_CTX<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">ctx<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">off_t<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">already_hashed_to<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="3" pos:column="27">int<pos:position pos:line="3" pos:column="30"/></name></type> <name pos:line="3" pos:column="31">fd<pos:position pos:line="3" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="35">size_t<pos:position pos:line="3" pos:column="41"/></name></type> <name pos:line="3" pos:column="42">size<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="3" pos:column="48">enum<pos:position pos:line="3" pos:column="52"/></name> <name pos:line="3" pos:column="53">object_type<pos:position pos:line="3" pos:column="64"/></name></name></type> <name pos:line="3" pos:column="65">type<pos:position pos:line="3" pos:column="69"/></name></decl></parameter>,
			  <parameter><decl><type><specifier pos:line="4" pos:column="27">const<pos:position pos:line="4" pos:column="32"/></specifier> <name pos:line="4" pos:column="33">char<pos:position pos:line="4" pos:column="37"/></name> <modifier pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></modifier></type><name pos:line="4" pos:column="39">path<pos:position pos:line="4" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="45">unsigned<pos:position pos:line="4" pos:column="53"/></name></type> <name pos:line="4" pos:column="54">flags<pos:position pos:line="4" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="60"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">git_zstream<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">s<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">char<pos:position pos:line="7" pos:column="22"/></name></type> <name><name pos:line="7" pos:column="23">obuf<pos:position pos:line="7" pos:column="27"/></name><index pos:line="7" pos:column="27">[<expr><literal type="number" pos:line="7" pos:column="28">16384<pos:position pos:line="7" pos:column="33"/></literal></expr>]<pos:position pos:line="7" pos:column="34"/></index></name></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">hdrlen<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">status<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><name pos:line="9" pos:column="22">Z_OK<pos:position pos:line="9" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">write_object<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><operator pos:line="10" pos:column="28">(<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">flags<pos:position pos:line="10" pos:column="34"/></name> <operator pos:line="10" pos:column="35">&amp;<pos:position pos:line="10" pos:column="40"/></operator> <name pos:line="10" pos:column="37">HASH_WRITE_OBJECT<pos:position pos:line="10" pos:column="54"/></name><operator pos:line="10" pos:column="54">)<pos:position pos:line="10" pos:column="55"/></operator></expr></init></decl>;<pos:position pos:line="10" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">off_t<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">offset<pos:position pos:line="11" pos:column="21"/></name> <init pos:line="11" pos:column="22">= <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">git_deflate_init<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><operator pos:line="13" pos:column="26">&amp;<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="27">s<pos:position pos:line="13" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="30">pack_compression_level<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>

	<expr_stmt><expr><name pos:line="15" pos:column="9">hdrlen<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <call><name pos:line="15" pos:column="18">encode_in_pack_object_header<pos:position pos:line="15" pos:column="46"/></name><argument_list pos:line="15" pos:column="46">(<argument><expr><name pos:line="15" pos:column="47">type<pos:position pos:line="15" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">size<pos:position pos:line="15" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="59">obuf<pos:position pos:line="15" pos:column="63"/></name></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">s<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">.<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">next_out<pos:position pos:line="16" pos:column="19"/></name></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">obuf<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">+<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="29">hdrlen<pos:position pos:line="16" pos:column="35"/></name></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">s<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">.<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">avail_out<pos:position pos:line="17" pos:column="20"/></name></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <sizeof pos:line="17" pos:column="23">sizeof<argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">obuf<pos:position pos:line="17" pos:column="34"/></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></sizeof> <operator pos:line="17" pos:column="36">-<pos:position pos:line="17" pos:column="37"/></operator> <name pos:line="17" pos:column="38">hdrlen<pos:position pos:line="17" pos:column="44"/></name></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt>

	<while pos:line="19" pos:column="9">while <condition pos:line="19" pos:column="15">(<expr><name pos:line="19" pos:column="16">status<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">!=<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="26">Z_STREAM_END<pos:position pos:line="19" pos:column="38"/></name></expr>)<pos:position pos:line="19" pos:column="39"/></condition> <block pos:line="19" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">unsigned<pos:position pos:line="20" pos:column="25"/></name> <name pos:line="20" pos:column="26">char<pos:position pos:line="20" pos:column="30"/></name></type> <name><name pos:line="20" pos:column="31">ibuf<pos:position pos:line="20" pos:column="35"/></name><index pos:line="20" pos:column="35">[<expr><literal type="number" pos:line="20" pos:column="36">16384<pos:position pos:line="20" pos:column="41"/></literal></expr>]<pos:position pos:line="20" pos:column="42"/></index></name></decl>;<pos:position pos:line="20" pos:column="43"/></decl_stmt>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">size<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">&amp;&amp;<pos:position pos:line="22" pos:column="36"/></operator> <operator pos:line="22" pos:column="29">!<pos:position pos:line="22" pos:column="30"/></operator><name><name pos:line="22" pos:column="30">s<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">.<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="32">avail_in<pos:position pos:line="22" pos:column="40"/></name></name></expr>)<pos:position pos:line="22" pos:column="41"/></condition><then pos:line="22" pos:column="41"> <block pos:line="22" pos:column="42">{
			<decl_stmt><decl><type><name pos:line="23" pos:column="25">ssize_t<pos:position pos:line="23" pos:column="32"/></name></type> <name pos:line="23" pos:column="33">rsize<pos:position pos:line="23" pos:column="38"/></name> <init pos:line="23" pos:column="39">= <expr><ternary><condition><expr><name pos:line="23" pos:column="41">size<pos:position pos:line="23" pos:column="45"/></name> <operator pos:line="23" pos:column="46">&lt;<pos:position pos:line="23" pos:column="50"/></operator> <sizeof pos:line="23" pos:column="48">sizeof<argument_list pos:line="23" pos:column="54">(<argument><expr><name pos:line="23" pos:column="55">ibuf<pos:position pos:line="23" pos:column="59"/></name></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></sizeof></expr> ?<pos:position pos:line="23" pos:column="62"/></condition><then pos:line="23" pos:column="62"> <expr><name pos:line="23" pos:column="63">size<pos:position pos:line="23" pos:column="67"/></name></expr> <pos:position pos:line="23" pos:column="68"/></then><else pos:line="23" pos:column="68">: <expr><sizeof pos:line="23" pos:column="70">sizeof<argument_list pos:line="23" pos:column="76">(<argument><expr><name pos:line="23" pos:column="77">ibuf<pos:position pos:line="23" pos:column="81"/></name></expr></argument>)<pos:position pos:line="23" pos:column="82"/></argument_list></sizeof></expr></else></ternary></expr></init></decl>;<pos:position pos:line="23" pos:column="83"/></decl_stmt>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><call><name pos:line="24" pos:column="29">read_in_full<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">(<argument><expr><name pos:line="24" pos:column="42">fd<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="46">ibuf<pos:position pos:line="24" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="52">rsize<pos:position pos:line="24" pos:column="57"/></name></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call> <operator pos:line="24" pos:column="59">!=<pos:position pos:line="24" pos:column="61"/></operator> <name pos:line="24" pos:column="62">rsize<pos:position pos:line="24" pos:column="67"/></name></expr>)<pos:position pos:line="24" pos:column="68"/></condition><then pos:line="24" pos:column="68">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="33">die<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><literal type="string" pos:line="25" pos:column="37">"failed to read %d bytes from '%s'"<pos:position pos:line="25" pos:column="72"/></literal></expr></argument>,
				    <argument><expr><operator pos:line="26" pos:column="37">(<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="38">int<pos:position pos:line="26" pos:column="41"/></name><operator pos:line="26" pos:column="41">)<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="42">rsize<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">path<pos:position pos:line="26" pos:column="53"/></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="27" pos:column="25">offset<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">+=<pos:position pos:line="27" pos:column="34"/></operator> <name pos:line="27" pos:column="35">rsize<pos:position pos:line="27" pos:column="40"/></name></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt>
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><operator pos:line="28" pos:column="29">*<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="30">already_hashed_to<pos:position pos:line="28" pos:column="47"/></name> <operator pos:line="28" pos:column="48">&lt;<pos:position pos:line="28" pos:column="52"/></operator> <name pos:line="28" pos:column="50">offset<pos:position pos:line="28" pos:column="56"/></name></expr>)<pos:position pos:line="28" pos:column="57"/></condition><then pos:line="28" pos:column="57"> <block pos:line="28" pos:column="58">{
				<decl_stmt><decl><type><name pos:line="29" pos:column="33">size_t<pos:position pos:line="29" pos:column="39"/></name></type> <name pos:line="29" pos:column="40">hsize<pos:position pos:line="29" pos:column="45"/></name> <init pos:line="29" pos:column="46">= <expr><name pos:line="29" pos:column="48">offset<pos:position pos:line="29" pos:column="54"/></name> <operator pos:line="29" pos:column="55">-<pos:position pos:line="29" pos:column="56"/></operator> <operator pos:line="29" pos:column="57">*<pos:position pos:line="29" pos:column="58"/></operator><name pos:line="29" pos:column="58">already_hashed_to<pos:position pos:line="29" pos:column="75"/></name></expr></init></decl>;<pos:position pos:line="29" pos:column="76"/></decl_stmt>
				<if pos:line="30" pos:column="33">if <condition pos:line="30" pos:column="36">(<expr><name pos:line="30" pos:column="37">rsize<pos:position pos:line="30" pos:column="42"/></name> <operator pos:line="30" pos:column="43">&lt;<pos:position pos:line="30" pos:column="47"/></operator> <name pos:line="30" pos:column="45">hsize<pos:position pos:line="30" pos:column="50"/></name></expr>)<pos:position pos:line="30" pos:column="51"/></condition><then pos:line="30" pos:column="51">
					<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="41">hsize<pos:position pos:line="31" pos:column="46"/></name> <operator pos:line="31" pos:column="47">=<pos:position pos:line="31" pos:column="48"/></operator> <name pos:line="31" pos:column="49">rsize<pos:position pos:line="31" pos:column="54"/></name></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt></block></then></if>
				<if pos:line="32" pos:column="33">if <condition pos:line="32" pos:column="36">(<expr><name pos:line="32" pos:column="37">hsize<pos:position pos:line="32" pos:column="42"/></name></expr>)<pos:position pos:line="32" pos:column="43"/></condition><then pos:line="32" pos:column="43">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="41">git_SHA1_Update<pos:position pos:line="33" pos:column="56"/></name><argument_list pos:line="33" pos:column="56">(<argument><expr><name pos:line="33" pos:column="57">ctx<pos:position pos:line="33" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="62">ibuf<pos:position pos:line="33" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="68">hsize<pos:position pos:line="33" pos:column="73"/></name></expr></argument>)<pos:position pos:line="33" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="75"/></expr_stmt></block></then></if>
				<expr_stmt><expr><operator pos:line="34" pos:column="33">*<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="34">already_hashed_to<pos:position pos:line="34" pos:column="51"/></name> <operator pos:line="34" pos:column="52">=<pos:position pos:line="34" pos:column="53"/></operator> <name pos:line="34" pos:column="54">offset<pos:position pos:line="34" pos:column="60"/></name></expr>;<pos:position pos:line="34" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="35" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="36" pos:column="25">s<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">.<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="27">next_in<pos:position pos:line="36" pos:column="34"/></name></name> <operator pos:line="36" pos:column="35">=<pos:position pos:line="36" pos:column="36"/></operator> <name pos:line="36" pos:column="37">ibuf<pos:position pos:line="36" pos:column="41"/></name></expr>;<pos:position pos:line="36" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="37" pos:column="25">s<pos:position pos:line="37" pos:column="26"/></name><operator pos:line="37" pos:column="26">.<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="27">avail_in<pos:position pos:line="37" pos:column="35"/></name></name> <operator pos:line="37" pos:column="36">=<pos:position pos:line="37" pos:column="37"/></operator> <name pos:line="37" pos:column="38">rsize<pos:position pos:line="37" pos:column="43"/></name></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="38" pos:column="25">size<pos:position pos:line="38" pos:column="29"/></name> <operator pos:line="38" pos:column="30">-=<pos:position pos:line="38" pos:column="32"/></operator> <name pos:line="38" pos:column="33">rsize<pos:position pos:line="38" pos:column="38"/></name></expr>;<pos:position pos:line="38" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="41" pos:column="17">status<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">=<pos:position pos:line="41" pos:column="25"/></operator> <call><name pos:line="41" pos:column="26">git_deflate<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">(<argument><expr><operator pos:line="41" pos:column="38">&amp;<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="39">s<pos:position pos:line="41" pos:column="40"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="41" pos:column="42">size<pos:position pos:line="41" pos:column="46"/></name></expr> ?<pos:position pos:line="41" pos:column="48"/></condition><then pos:line="41" pos:column="48"> <expr><literal type="number" pos:line="41" pos:column="49">0<pos:position pos:line="41" pos:column="50"/></literal></expr> <pos:position pos:line="41" pos:column="51"/></then><else pos:line="41" pos:column="51">: <expr><name pos:line="41" pos:column="53">Z_FINISH<pos:position pos:line="41" pos:column="61"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="41" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="63"/></expr_stmt>

		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><operator pos:line="43" pos:column="21">!<pos:position pos:line="43" pos:column="22"/></operator><name><name pos:line="43" pos:column="22">s<pos:position pos:line="43" pos:column="23"/></name><operator pos:line="43" pos:column="23">.<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="24">avail_out<pos:position pos:line="43" pos:column="33"/></name></name> <operator pos:line="43" pos:column="34">||<pos:position pos:line="43" pos:column="36"/></operator> <name pos:line="43" pos:column="37">status<pos:position pos:line="43" pos:column="43"/></name> <operator pos:line="43" pos:column="44">==<pos:position pos:line="43" pos:column="46"/></operator> <name pos:line="43" pos:column="47">Z_STREAM_END<pos:position pos:line="43" pos:column="59"/></name></expr>)<pos:position pos:line="43" pos:column="60"/></condition><then pos:line="43" pos:column="60"> <block pos:line="43" pos:column="61">{
			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><name pos:line="44" pos:column="29">write_object<pos:position pos:line="44" pos:column="41"/></name></expr>)<pos:position pos:line="44" pos:column="42"/></condition><then pos:line="44" pos:column="42"> <block pos:line="44" pos:column="43">{
				<decl_stmt><decl><type><name pos:line="45" pos:column="33">size_t<pos:position pos:line="45" pos:column="39"/></name></type> <name pos:line="45" pos:column="40">written<pos:position pos:line="45" pos:column="47"/></name> <init pos:line="45" pos:column="48">= <expr><name><name pos:line="45" pos:column="50">s<pos:position pos:line="45" pos:column="51"/></name><operator pos:line="45" pos:column="51">.<pos:position pos:line="45" pos:column="52"/></operator><name pos:line="45" pos:column="52">next_out<pos:position pos:line="45" pos:column="60"/></name></name> <operator pos:line="45" pos:column="61">-<pos:position pos:line="45" pos:column="62"/></operator> <name pos:line="45" pos:column="63">obuf<pos:position pos:line="45" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="45" pos:column="68"/></decl_stmt>

				<comment type="block" pos:line="47" pos:column="33">/* would we bust the size limit? */</comment>
				<if pos:line="48" pos:column="33">if <condition pos:line="48" pos:column="36">(<expr><name><name pos:line="48" pos:column="37">state<pos:position pos:line="48" pos:column="42"/></name><operator pos:line="48" pos:column="42">-&gt;<pos:position pos:line="48" pos:column="47"/></operator><name pos:line="48" pos:column="44">nr_written<pos:position pos:line="48" pos:column="54"/></name></name> <operator pos:line="48" pos:column="55">&amp;&amp;<pos:position pos:line="48" pos:column="65"/></operator>
				    <name pos:line="49" pos:column="37">pack_size_limit_cfg<pos:position pos:line="49" pos:column="56"/></name> <operator pos:line="49" pos:column="57">&amp;&amp;<pos:position pos:line="49" pos:column="67"/></operator>
				    <name pos:line="50" pos:column="37">pack_size_limit_cfg<pos:position pos:line="50" pos:column="56"/></name> <operator pos:line="50" pos:column="57">&lt;<pos:position pos:line="50" pos:column="61"/></operator> <name><name pos:line="50" pos:column="59">state<pos:position pos:line="50" pos:column="64"/></name><operator pos:line="50" pos:column="64">-&gt;<pos:position pos:line="50" pos:column="69"/></operator><name pos:line="50" pos:column="66">offset<pos:position pos:line="50" pos:column="72"/></name></name> <operator pos:line="50" pos:column="73">+<pos:position pos:line="50" pos:column="74"/></operator> <name pos:line="50" pos:column="75">written<pos:position pos:line="50" pos:column="82"/></name></expr>)<pos:position pos:line="50" pos:column="83"/></condition><then pos:line="50" pos:column="83"> <block pos:line="50" pos:column="84">{
					<expr_stmt><expr><call><name pos:line="51" pos:column="41">git_deflate_abort<pos:position pos:line="51" pos:column="58"/></name><argument_list pos:line="51" pos:column="58">(<argument><expr><operator pos:line="51" pos:column="59">&amp;<pos:position pos:line="51" pos:column="64"/></operator><name pos:line="51" pos:column="60">s<pos:position pos:line="51" pos:column="61"/></name></expr></argument>)<pos:position pos:line="51" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="63"/></expr_stmt>
					<return pos:line="52" pos:column="41">return <expr><operator pos:line="52" pos:column="48">-<pos:position pos:line="52" pos:column="49"/></operator><literal type="number" pos:line="52" pos:column="49">1<pos:position pos:line="52" pos:column="50"/></literal></expr>;<pos:position pos:line="52" pos:column="51"/></return>
				}<pos:position pos:line="53" pos:column="34"/></block></then></if>

				<expr_stmt><expr><call><name pos:line="55" pos:column="33">sha1write<pos:position pos:line="55" pos:column="42"/></name><argument_list pos:line="55" pos:column="42">(<argument><expr><name><name pos:line="55" pos:column="43">state<pos:position pos:line="55" pos:column="48"/></name><operator pos:line="55" pos:column="48">-&gt;<pos:position pos:line="55" pos:column="53"/></operator><name pos:line="55" pos:column="50">f<pos:position pos:line="55" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="53">obuf<pos:position pos:line="55" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="59">written<pos:position pos:line="55" pos:column="66"/></name></expr></argument>)<pos:position pos:line="55" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="68"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="56" pos:column="33">state<pos:position pos:line="56" pos:column="38"/></name><operator pos:line="56" pos:column="38">-&gt;<pos:position pos:line="56" pos:column="43"/></operator><name pos:line="56" pos:column="40">offset<pos:position pos:line="56" pos:column="46"/></name></name> <operator pos:line="56" pos:column="47">+=<pos:position pos:line="56" pos:column="49"/></operator> <name pos:line="56" pos:column="50">written<pos:position pos:line="56" pos:column="57"/></name></expr>;<pos:position pos:line="56" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="57" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="58" pos:column="25">s<pos:position pos:line="58" pos:column="26"/></name><operator pos:line="58" pos:column="26">.<pos:position pos:line="58" pos:column="27"/></operator><name pos:line="58" pos:column="27">next_out<pos:position pos:line="58" pos:column="35"/></name></name> <operator pos:line="58" pos:column="36">=<pos:position pos:line="58" pos:column="37"/></operator> <name pos:line="58" pos:column="38">obuf<pos:position pos:line="58" pos:column="42"/></name></expr>;<pos:position pos:line="58" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="59" pos:column="25">s<pos:position pos:line="59" pos:column="26"/></name><operator pos:line="59" pos:column="26">.<pos:position pos:line="59" pos:column="27"/></operator><name pos:line="59" pos:column="27">avail_out<pos:position pos:line="59" pos:column="36"/></name></name> <operator pos:line="59" pos:column="37">=<pos:position pos:line="59" pos:column="38"/></operator> <sizeof pos:line="59" pos:column="39">sizeof<argument_list pos:line="59" pos:column="45">(<argument><expr><name pos:line="59" pos:column="46">obuf<pos:position pos:line="59" pos:column="50"/></name></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></sizeof></expr>;<pos:position pos:line="59" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="60" pos:column="18"/></block></then></if>

		<switch pos:line="62" pos:column="17">switch <condition pos:line="62" pos:column="24">(<expr><name pos:line="62" pos:column="25">status<pos:position pos:line="62" pos:column="31"/></name></expr>)<pos:position pos:line="62" pos:column="32"/></condition> <block pos:line="62" pos:column="33">{
		<case pos:line="63" pos:column="17">case <expr><name pos:line="63" pos:column="22">Z_OK<pos:position pos:line="63" pos:column="26"/></name></expr>:<pos:position pos:line="63" pos:column="27"/></case>
		<case pos:line="64" pos:column="17">case <expr><name pos:line="64" pos:column="22">Z_BUF_ERROR<pos:position pos:line="64" pos:column="33"/></name></expr>:<pos:position pos:line="64" pos:column="34"/></case>
		<case pos:line="65" pos:column="17">case <expr><name pos:line="65" pos:column="22">Z_STREAM_END<pos:position pos:line="65" pos:column="34"/></name></expr>:<pos:position pos:line="65" pos:column="35"/></case>
			<continue pos:line="66" pos:column="25">continue;<pos:position pos:line="66" pos:column="34"/></continue>
		<default pos:line="67" pos:column="17">default:<pos:position pos:line="67" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="68" pos:column="25">die<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><literal type="string" pos:line="68" pos:column="29">"unexpected deflate failure: %d"<pos:position pos:line="68" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="63">status<pos:position pos:line="68" pos:column="69"/></name></expr></argument>)<pos:position pos:line="68" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="71"/></expr_stmt>
		}<pos:position pos:line="69" pos:column="18"/></block></switch>
	}<pos:position pos:line="70" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">git_deflate_end<pos:position pos:line="71" pos:column="24"/></name><argument_list pos:line="71" pos:column="24">(<argument><expr><operator pos:line="71" pos:column="25">&amp;<pos:position pos:line="71" pos:column="30"/></operator><name pos:line="71" pos:column="26">s<pos:position pos:line="71" pos:column="27"/></name></expr></argument>)<pos:position pos:line="71" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="29"/></expr_stmt>
	<return pos:line="72" pos:column="9">return <expr><literal type="number" pos:line="72" pos:column="16">0<pos:position pos:line="72" pos:column="17"/></literal></expr>;<pos:position pos:line="72" pos:column="18"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
