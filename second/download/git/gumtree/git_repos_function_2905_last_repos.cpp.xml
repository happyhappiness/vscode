<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2905_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">maybe_flush_or_die<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">FILE<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">f<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">desc<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">int<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">skip_stdout_flush<pos:position pos:line="3" pos:column="37"/></name> <init pos:line="3" pos:column="38">= <expr><operator pos:line="3" pos:column="40">-<pos:position pos:line="3" pos:column="41"/></operator><literal type="number" pos:line="3" pos:column="41">1<pos:position pos:line="3" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">stat<pos:position pos:line="4" pos:column="20"/></name></name></type> <name pos:line="4" pos:column="21">st<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">cp<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">f<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">==<pos:position pos:line="7" pos:column="17"/></operator> <name pos:line="7" pos:column="18">stdout<pos:position pos:line="7" pos:column="24"/></name></expr>)<pos:position pos:line="7" pos:column="25"/></condition><then pos:line="7" pos:column="25"> <block pos:line="7" pos:column="26">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">skip_stdout_flush<pos:position pos:line="8" pos:column="38"/></name> <operator pos:line="8" pos:column="39">&lt;<pos:position pos:line="8" pos:column="43"/></operator> <literal type="number" pos:line="8" pos:column="41">0<pos:position pos:line="8" pos:column="42"/></literal></expr>)<pos:position pos:line="8" pos:column="43"/></condition><then pos:line="8" pos:column="43"> <block pos:line="8" pos:column="44">{
			<expr_stmt><expr><name pos:line="9" pos:column="25">cp<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">=<pos:position pos:line="9" pos:column="29"/></operator> <call><name pos:line="9" pos:column="30">getenv<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><literal type="string" pos:line="9" pos:column="37">"GIT_FLUSH"<pos:position pos:line="9" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="50"/></expr_stmt>
			<if pos:line="10" pos:column="25">if <condition pos:line="10" pos:column="28">(<expr><name pos:line="10" pos:column="29">cp<pos:position pos:line="10" pos:column="31"/></name></expr>)<pos:position pos:line="10" pos:column="32"/></condition><then pos:line="10" pos:column="32">
				<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="33">skip_stdout_flush<pos:position pos:line="11" pos:column="50"/></name> <operator pos:line="11" pos:column="51">=<pos:position pos:line="11" pos:column="52"/></operator> <operator pos:line="11" pos:column="53">(<pos:position pos:line="11" pos:column="54"/></operator><call><name pos:line="11" pos:column="54">atoi<pos:position pos:line="11" pos:column="58"/></name><argument_list pos:line="11" pos:column="58">(<argument><expr><name pos:line="11" pos:column="59">cp<pos:position pos:line="11" pos:column="61"/></name></expr></argument>)<pos:position pos:line="11" pos:column="62"/></argument_list></call> <operator pos:line="11" pos:column="63">==<pos:position pos:line="11" pos:column="65"/></operator> <literal type="number" pos:line="11" pos:column="66">0<pos:position pos:line="11" pos:column="67"/></literal><operator pos:line="11" pos:column="67">)<pos:position pos:line="11" pos:column="68"/></operator></expr>;<pos:position pos:line="11" pos:column="69"/></expr_stmt></block></then>
			<elseif pos:line="12" pos:column="25">else <if pos:line="12" pos:column="30">if <condition pos:line="12" pos:column="33">(<expr><operator pos:line="12" pos:column="34">(<pos:position pos:line="12" pos:column="35"/></operator><call><name pos:line="12" pos:column="35">fstat<pos:position pos:line="12" pos:column="40"/></name><argument_list pos:line="12" pos:column="40">(<argument><expr><call><name pos:line="12" pos:column="41">fileno<pos:position pos:line="12" pos:column="47"/></name><argument_list pos:line="12" pos:column="47">(<argument><expr><name pos:line="12" pos:column="48">stdout<pos:position pos:line="12" pos:column="54"/></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="12" pos:column="57">&amp;<pos:position pos:line="12" pos:column="62"/></operator><name pos:line="12" pos:column="58">st<pos:position pos:line="12" pos:column="60"/></name></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call> <operator pos:line="12" pos:column="62">==<pos:position pos:line="12" pos:column="64"/></operator> <literal type="number" pos:line="12" pos:column="65">0<pos:position pos:line="12" pos:column="66"/></literal><operator pos:line="12" pos:column="66">)<pos:position pos:line="12" pos:column="67"/></operator> <operator pos:line="12" pos:column="68">&amp;&amp;<pos:position pos:line="12" pos:column="78"/></operator>
				 <call><name pos:line="13" pos:column="34">S_ISREG<pos:position pos:line="13" pos:column="41"/></name><argument_list pos:line="13" pos:column="41">(<argument><expr><name><name pos:line="13" pos:column="42">st<pos:position pos:line="13" pos:column="44"/></name><operator pos:line="13" pos:column="44">.<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="45">st_mode<pos:position pos:line="13" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="54"/></condition><then pos:line="13" pos:column="54">
				<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="33">skip_stdout_flush<pos:position pos:line="14" pos:column="50"/></name> <operator pos:line="14" pos:column="51">=<pos:position pos:line="14" pos:column="52"/></operator> <literal type="number" pos:line="14" pos:column="53">1<pos:position pos:line="14" pos:column="54"/></literal></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt></block></then></if></elseif>
			<else pos:line="15" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="33">skip_stdout_flush<pos:position pos:line="16" pos:column="50"/></name> <operator pos:line="16" pos:column="51">=<pos:position pos:line="16" pos:column="52"/></operator> <literal type="number" pos:line="16" pos:column="53">0<pos:position pos:line="16" pos:column="54"/></literal></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt></block></else></if>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">skip_stdout_flush<pos:position pos:line="18" pos:column="38"/></name> <operator pos:line="18" pos:column="39">&amp;&amp;<pos:position pos:line="18" pos:column="49"/></operator> <operator pos:line="18" pos:column="42">!<pos:position pos:line="18" pos:column="43"/></operator><call><name pos:line="18" pos:column="43">ferror<pos:position pos:line="18" pos:column="49"/></name><argument_list pos:line="18" pos:column="49">(<argument><expr><name pos:line="18" pos:column="50">f<pos:position pos:line="18" pos:column="51"/></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="53"/></condition><then pos:line="18" pos:column="53">
			<block type="pseudo"><return pos:line="19" pos:column="25">return;<pos:position pos:line="19" pos:column="32"/></return></block></then></if>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">fflush<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">f<pos:position pos:line="21" pos:column="21"/></name></expr></argument>)<pos:position pos:line="21" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="23"/></condition><then pos:line="21" pos:column="23"> <block pos:line="21" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">check_pipe<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">errno<pos:position pos:line="22" pos:column="33"/></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">die_errno<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">(<argument><expr><literal type="string" pos:line="23" pos:column="27">"write failure on '%s'"<pos:position pos:line="23" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="52">desc<pos:position pos:line="23" pos:column="56"/></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
