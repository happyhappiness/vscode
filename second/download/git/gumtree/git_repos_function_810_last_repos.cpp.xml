<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_810_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">write_tar_entry<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">archiver_args<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">args<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
			   <parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">unsigned<pos:position pos:line="2" pos:column="42"/></name> <name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">sha1<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>,
			   <parameter><decl><type><specifier pos:line="3" pos:column="28">const<pos:position pos:line="3" pos:column="33"/></specifier> <name pos:line="3" pos:column="34">char<pos:position pos:line="3" pos:column="38"/></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">path<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="46">size_t<pos:position pos:line="3" pos:column="52"/></name></type> <name pos:line="3" pos:column="53">pathlen<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="4" pos:column="28">unsigned<pos:position pos:line="4" pos:column="36"/></name> <name pos:line="4" pos:column="37">int<pos:position pos:line="4" pos:column="40"/></name></type> <name pos:line="4" pos:column="41">mode<pos:position pos:line="4" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="46"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">ustar_header<pos:position pos:line="6" pos:column="28"/></name></name></type> <name pos:line="6" pos:column="29">header<pos:position pos:line="6" pos:column="35"/></name></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">ext_header<pos:position pos:line="7" pos:column="33"/></name> <init pos:line="7" pos:column="34">= <expr><name pos:line="7" pos:column="36">STRBUF_INIT<pos:position pos:line="7" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name> <name pos:line="8" pos:column="18">int<pos:position pos:line="8" pos:column="21"/></name></type> <name pos:line="8" pos:column="22">old_mode<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><name pos:line="8" pos:column="33">mode<pos:position pos:line="8" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name> <name pos:line="9" pos:column="18">long<pos:position pos:line="9" pos:column="22"/></name></type> <name pos:line="9" pos:column="23">size<pos:position pos:line="9" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="29">size_in_header<pos:position pos:line="9" pos:column="43"/></name></decl>;<pos:position pos:line="9" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">void<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">buffer<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">err<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><literal type="number" pos:line="11" pos:column="19">0<pos:position pos:line="11" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">memset<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><operator pos:line="13" pos:column="16">&amp;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="17">header<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="25">0<pos:position pos:line="13" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="28">sizeof<argument_list pos:line="13" pos:column="34">(<argument><expr><name pos:line="13" pos:column="35">header<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">S_ISDIR<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">mode<pos:position pos:line="15" pos:column="25"/></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call> <operator pos:line="15" pos:column="27">||<pos:position pos:line="15" pos:column="29"/></operator> <call><name pos:line="15" pos:column="30">S_ISGITLINK<pos:position pos:line="15" pos:column="41"/></name><argument_list pos:line="15" pos:column="41">(<argument><expr><name pos:line="15" pos:column="42">mode<pos:position pos:line="15" pos:column="46"/></name></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48"> <block pos:line="15" pos:column="49">{
		<expr_stmt><expr><operator pos:line="16" pos:column="17">*<pos:position pos:line="16" pos:column="18"/></operator><name><name pos:line="16" pos:column="18">header<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">.<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">typeflag<pos:position pos:line="16" pos:column="33"/></name></name> <operator pos:line="16" pos:column="34">=<pos:position pos:line="16" pos:column="35"/></operator> <name pos:line="16" pos:column="36">TYPEFLAG_DIR<pos:position pos:line="16" pos:column="48"/></name></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="17" pos:column="17">mode<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <operator pos:line="17" pos:column="24">(<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="25">mode<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">|<pos:position pos:line="17" pos:column="31"/></operator> <literal type="number" pos:line="17" pos:column="32">0777<pos:position pos:line="17" pos:column="36"/></literal><operator pos:line="17" pos:column="36">)<pos:position pos:line="17" pos:column="37"/></operator> <operator pos:line="17" pos:column="38">&amp;<pos:position pos:line="17" pos:column="43"/></operator> <operator pos:line="17" pos:column="40">~<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="41">tar_umask<pos:position pos:line="17" pos:column="50"/></name></expr>;<pos:position pos:line="17" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then> <elseif pos:line="18" pos:column="11">else <if pos:line="18" pos:column="16">if <condition pos:line="18" pos:column="19">(<expr><call><name pos:line="18" pos:column="20">S_ISLNK<pos:position pos:line="18" pos:column="27"/></name><argument_list pos:line="18" pos:column="27">(<argument><expr><name pos:line="18" pos:column="28">mode<pos:position pos:line="18" pos:column="32"/></name></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="34"/></condition><then pos:line="18" pos:column="34"> <block pos:line="18" pos:column="35">{
		<expr_stmt><expr><operator pos:line="19" pos:column="17">*<pos:position pos:line="19" pos:column="18"/></operator><name><name pos:line="19" pos:column="18">header<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">.<pos:position pos:line="19" pos:column="25"/></operator><name pos:line="19" pos:column="25">typeflag<pos:position pos:line="19" pos:column="33"/></name></name> <operator pos:line="19" pos:column="34">=<pos:position pos:line="19" pos:column="35"/></operator> <name pos:line="19" pos:column="36">TYPEFLAG_LNK<pos:position pos:line="19" pos:column="48"/></name></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">mode<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">|=<pos:position pos:line="20" pos:column="24"/></operator> <literal type="number" pos:line="20" pos:column="25">0777<pos:position pos:line="20" pos:column="29"/></literal></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if></elseif> <elseif pos:line="21" pos:column="11">else <if pos:line="21" pos:column="16">if <condition pos:line="21" pos:column="19">(<expr><call><name pos:line="21" pos:column="20">S_ISREG<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">mode<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34"> <block pos:line="21" pos:column="35">{
		<expr_stmt><expr><operator pos:line="22" pos:column="17">*<pos:position pos:line="22" pos:column="18"/></operator><name><name pos:line="22" pos:column="18">header<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">.<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="25">typeflag<pos:position pos:line="22" pos:column="33"/></name></name> <operator pos:line="22" pos:column="34">=<pos:position pos:line="22" pos:column="35"/></operator> <name pos:line="22" pos:column="36">TYPEFLAG_REG<pos:position pos:line="22" pos:column="48"/></name></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">mode<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">=<pos:position pos:line="23" pos:column="23"/></operator> <operator pos:line="23" pos:column="24">(<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="25">mode<pos:position pos:line="23" pos:column="29"/></name> <operator pos:line="23" pos:column="30">|<pos:position pos:line="23" pos:column="31"/></operator> <operator pos:line="23" pos:column="32">(<pos:position pos:line="23" pos:column="33"/></operator><ternary><condition><expr><operator pos:line="23" pos:column="33">(<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="34">mode<pos:position pos:line="23" pos:column="38"/></name> <operator pos:line="23" pos:column="39">&amp;<pos:position pos:line="23" pos:column="44"/></operator> <literal type="number" pos:line="23" pos:column="41">0100<pos:position pos:line="23" pos:column="45"/></literal><operator pos:line="23" pos:column="45">)<pos:position pos:line="23" pos:column="46"/></operator></expr> ?<pos:position pos:line="23" pos:column="48"/></condition><then pos:line="23" pos:column="48"> <expr><literal type="number" pos:line="23" pos:column="49">0777<pos:position pos:line="23" pos:column="53"/></literal></expr> <pos:position pos:line="23" pos:column="54"/></then><else pos:line="23" pos:column="54">: <expr><literal type="number" pos:line="23" pos:column="56">0666<pos:position pos:line="23" pos:column="60"/></literal></expr></else></ternary><operator pos:line="23" pos:column="60">)<pos:position pos:line="23" pos:column="61"/></operator><operator pos:line="23" pos:column="61">)<pos:position pos:line="23" pos:column="62"/></operator> <operator pos:line="23" pos:column="63">&amp;<pos:position pos:line="23" pos:column="68"/></operator> <operator pos:line="23" pos:column="65">~<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="66">tar_umask<pos:position pos:line="23" pos:column="75"/></name></expr>;<pos:position pos:line="23" pos:column="76"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if></elseif> <else pos:line="24" pos:column="11">else <block pos:line="24" pos:column="16">{
		<return pos:line="25" pos:column="17">return <expr><call><name pos:line="25" pos:column="24">error<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><literal type="string" pos:line="25" pos:column="30">"unsupported file mode: 0%o (SHA1: %s)"<pos:position pos:line="25" pos:column="69"/></literal></expr></argument>,
			     <argument><expr><name pos:line="26" pos:column="30">mode<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="36">sha1_to_hex<pos:position pos:line="26" pos:column="47"/></name><argument_list pos:line="26" pos:column="47">(<argument><expr><name pos:line="26" pos:column="48">sha1<pos:position pos:line="26" pos:column="52"/></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="55"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block></else></if>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">pathlen<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">&gt;<pos:position pos:line="28" pos:column="25"/></operator> <sizeof pos:line="28" pos:column="23">sizeof<argument_list pos:line="28" pos:column="29">(<argument><expr><name><name pos:line="28" pos:column="30">header<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">.<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="37">name<pos:position pos:line="28" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></sizeof></expr>)<pos:position pos:line="28" pos:column="43"/></condition><then pos:line="28" pos:column="43"> <block pos:line="28" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="29" pos:column="17">size_t<pos:position pos:line="29" pos:column="23"/></name></type> <name pos:line="29" pos:column="24">plen<pos:position pos:line="29" pos:column="28"/></name> <init pos:line="29" pos:column="29">= <expr><call><name pos:line="29" pos:column="31">get_path_prefix<pos:position pos:line="29" pos:column="46"/></name><argument_list pos:line="29" pos:column="46">(<argument><expr><name pos:line="29" pos:column="47">path<pos:position pos:line="29" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="53">pathlen<pos:position pos:line="29" pos:column="60"/></name></expr></argument>,
					      <argument><expr><sizeof pos:line="30" pos:column="47">sizeof<argument_list pos:line="30" pos:column="53">(<argument><expr><name><name pos:line="30" pos:column="54">header<pos:position pos:line="30" pos:column="60"/></name><operator pos:line="30" pos:column="60">.<pos:position pos:line="30" pos:column="61"/></operator><name pos:line="30" pos:column="61">prefix<pos:position pos:line="30" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="70"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="31" pos:column="17">size_t<pos:position pos:line="31" pos:column="23"/></name></type> <name pos:line="31" pos:column="24">rest<pos:position pos:line="31" pos:column="28"/></name> <init pos:line="31" pos:column="29">= <expr><name pos:line="31" pos:column="31">pathlen<pos:position pos:line="31" pos:column="38"/></name> <operator pos:line="31" pos:column="39">-<pos:position pos:line="31" pos:column="40"/></operator> <name pos:line="31" pos:column="41">plen<pos:position pos:line="31" pos:column="45"/></name> <operator pos:line="31" pos:column="46">-<pos:position pos:line="31" pos:column="47"/></operator> <literal type="number" pos:line="31" pos:column="48">1<pos:position pos:line="31" pos:column="49"/></literal></expr></init></decl>;<pos:position pos:line="31" pos:column="50"/></decl_stmt>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">plen<pos:position pos:line="32" pos:column="25"/></name> <operator pos:line="32" pos:column="26">&gt;<pos:position pos:line="32" pos:column="30"/></operator> <literal type="number" pos:line="32" pos:column="28">0<pos:position pos:line="32" pos:column="29"/></literal> <operator pos:line="32" pos:column="30">&amp;&amp;<pos:position pos:line="32" pos:column="40"/></operator> <name pos:line="32" pos:column="33">rest<pos:position pos:line="32" pos:column="37"/></name> <operator pos:line="32" pos:column="38">&lt;=<pos:position pos:line="32" pos:column="43"/></operator> <sizeof pos:line="32" pos:column="41">sizeof<argument_list pos:line="32" pos:column="47">(<argument><expr><name><name pos:line="32" pos:column="48">header<pos:position pos:line="32" pos:column="54"/></name><operator pos:line="32" pos:column="54">.<pos:position pos:line="32" pos:column="55"/></operator><name pos:line="32" pos:column="55">name<pos:position pos:line="32" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></sizeof></expr>)<pos:position pos:line="32" pos:column="61"/></condition><then pos:line="32" pos:column="61"> <block pos:line="32" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">memcpy<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><name><name pos:line="33" pos:column="32">header<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">.<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="39">prefix<pos:position pos:line="33" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="47">path<pos:position pos:line="33" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="53">plen<pos:position pos:line="33" pos:column="57"/></name></expr></argument>)<pos:position pos:line="33" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">memcpy<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><name><name pos:line="34" pos:column="32">header<pos:position pos:line="34" pos:column="38"/></name><operator pos:line="34" pos:column="38">.<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="39">name<pos:position pos:line="34" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="45">path<pos:position pos:line="34" pos:column="49"/></name> <operator pos:line="34" pos:column="50">+<pos:position pos:line="34" pos:column="51"/></operator> <name pos:line="34" pos:column="52">plen<pos:position pos:line="34" pos:column="56"/></name> <operator pos:line="34" pos:column="57">+<pos:position pos:line="34" pos:column="58"/></operator> <literal type="number" pos:line="34" pos:column="59">1<pos:position pos:line="34" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="62">rest<pos:position pos:line="34" pos:column="66"/></name></expr></argument>)<pos:position pos:line="34" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></then> <else pos:line="35" pos:column="19">else <block pos:line="35" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">xsnprintf<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><name><name pos:line="36" pos:column="35">header<pos:position pos:line="36" pos:column="41"/></name><operator pos:line="36" pos:column="41">.<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="42">name<pos:position pos:line="36" pos:column="46"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="48">sizeof<argument_list pos:line="36" pos:column="54">(<argument><expr><name><name pos:line="36" pos:column="55">header<pos:position pos:line="36" pos:column="61"/></name><operator pos:line="36" pos:column="61">.<pos:position pos:line="36" pos:column="62"/></operator><name pos:line="36" pos:column="62">name<pos:position pos:line="36" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="67"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="69">"%s.data"<pos:position pos:line="36" pos:column="78"/></literal></expr></argument>,
				  <argument><expr><call><name pos:line="37" pos:column="35">sha1_to_hex<pos:position pos:line="37" pos:column="46"/></name><argument_list pos:line="37" pos:column="46">(<argument><expr><name pos:line="37" pos:column="47">sha1<pos:position pos:line="37" pos:column="51"/></name></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">strbuf_append_ext_header<pos:position pos:line="38" pos:column="49"/></name><argument_list pos:line="38" pos:column="49">(<argument><expr><operator pos:line="38" pos:column="50">&amp;<pos:position pos:line="38" pos:column="55"/></operator><name pos:line="38" pos:column="51">ext_header<pos:position pos:line="38" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="63">"path"<pos:position pos:line="38" pos:column="69"/></literal></expr></argument>,
						 <argument><expr><name pos:line="39" pos:column="50">path<pos:position pos:line="39" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="56">pathlen<pos:position pos:line="39" pos:column="63"/></name></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="65"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></else></if>
	}<pos:position pos:line="41" pos:column="10"/></block></then> <else pos:line="41" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="17">memcpy<pos:position pos:line="42" pos:column="23"/></name><argument_list pos:line="42" pos:column="23">(<argument><expr><name><name pos:line="42" pos:column="24">header<pos:position pos:line="42" pos:column="30"/></name><operator pos:line="42" pos:column="30">.<pos:position pos:line="42" pos:column="31"/></operator><name pos:line="42" pos:column="31">name<pos:position pos:line="42" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="37">path<pos:position pos:line="42" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="43">pathlen<pos:position pos:line="42" pos:column="50"/></name></expr></argument>)<pos:position pos:line="42" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="52"/></expr_stmt></block></else></if>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name pos:line="44" pos:column="13">S_ISREG<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><name pos:line="44" pos:column="21">mode<pos:position pos:line="44" pos:column="25"/></name></expr></argument>)<pos:position pos:line="44" pos:column="26"/></argument_list></call> <operator pos:line="44" pos:column="27">&amp;&amp;<pos:position pos:line="44" pos:column="37"/></operator> <operator pos:line="44" pos:column="30">!<pos:position pos:line="44" pos:column="31"/></operator><name><name pos:line="44" pos:column="31">args<pos:position pos:line="44" pos:column="35"/></name><operator pos:line="44" pos:column="35">-&gt;<pos:position pos:line="44" pos:column="40"/></operator><name pos:line="44" pos:column="37">convert<pos:position pos:line="44" pos:column="44"/></name></name> <operator pos:line="44" pos:column="45">&amp;&amp;<pos:position pos:line="44" pos:column="55"/></operator>
	    <call><name pos:line="45" pos:column="13">sha1_object_info<pos:position pos:line="45" pos:column="29"/></name><argument_list pos:line="45" pos:column="29">(<argument><expr><name pos:line="45" pos:column="30">sha1<pos:position pos:line="45" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="36">&amp;<pos:position pos:line="45" pos:column="41"/></operator><name pos:line="45" pos:column="37">size<pos:position pos:line="45" pos:column="41"/></name></expr></argument>)<pos:position pos:line="45" pos:column="42"/></argument_list></call> <operator pos:line="45" pos:column="43">==<pos:position pos:line="45" pos:column="45"/></operator> <name pos:line="45" pos:column="46">OBJ_BLOB<pos:position pos:line="45" pos:column="54"/></name> <operator pos:line="45" pos:column="55">&amp;&amp;<pos:position pos:line="45" pos:column="65"/></operator>
	    <name pos:line="46" pos:column="13">size<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">&gt;<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="20">big_file_threshold<pos:position pos:line="46" pos:column="38"/></name></expr>)<pos:position pos:line="46" pos:column="39"/></condition><then pos:line="46" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="17">buffer<pos:position pos:line="47" pos:column="23"/></name> <operator pos:line="47" pos:column="24">=<pos:position pos:line="47" pos:column="25"/></operator> <name pos:line="47" pos:column="26">NULL<pos:position pos:line="47" pos:column="30"/></name></expr>;<pos:position pos:line="47" pos:column="31"/></expr_stmt></block></then>
	<elseif pos:line="48" pos:column="9">else <if pos:line="48" pos:column="14">if <condition pos:line="48" pos:column="17">(<expr><call><name pos:line="48" pos:column="18">S_ISLNK<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">mode<pos:position pos:line="48" pos:column="30"/></name></expr></argument>)<pos:position pos:line="48" pos:column="31"/></argument_list></call> <operator pos:line="48" pos:column="32">||<pos:position pos:line="48" pos:column="34"/></operator> <call><name pos:line="48" pos:column="35">S_ISREG<pos:position pos:line="48" pos:column="42"/></name><argument_list pos:line="48" pos:column="42">(<argument><expr><name pos:line="48" pos:column="43">mode<pos:position pos:line="48" pos:column="47"/></name></expr></argument>)<pos:position pos:line="48" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="49"/></condition><then pos:line="48" pos:column="49"> <block pos:line="48" pos:column="50">{
		<decl_stmt><decl><type><name><name pos:line="49" pos:column="17">enum<pos:position pos:line="49" pos:column="21"/></name> <name pos:line="49" pos:column="22">object_type<pos:position pos:line="49" pos:column="33"/></name></name></type> <name pos:line="49" pos:column="34">type<pos:position pos:line="49" pos:column="38"/></name></decl>;<pos:position pos:line="49" pos:column="39"/></decl_stmt>
		<expr_stmt><expr><name pos:line="50" pos:column="17">buffer<pos:position pos:line="50" pos:column="23"/></name> <operator pos:line="50" pos:column="24">=<pos:position pos:line="50" pos:column="25"/></operator> <call><name pos:line="50" pos:column="26">sha1_file_to_archive<pos:position pos:line="50" pos:column="46"/></name><argument_list pos:line="50" pos:column="46">(<argument><expr><name pos:line="50" pos:column="47">args<pos:position pos:line="50" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="53">path<pos:position pos:line="50" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="59">sha1<pos:position pos:line="50" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="65">old_mode<pos:position pos:line="50" pos:column="73"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="75">&amp;<pos:position pos:line="50" pos:column="80"/></operator><name pos:line="50" pos:column="76">type<pos:position pos:line="50" pos:column="80"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="82">&amp;<pos:position pos:line="50" pos:column="87"/></operator><name pos:line="50" pos:column="83">size<pos:position pos:line="50" pos:column="87"/></name></expr></argument>)<pos:position pos:line="50" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="89"/></expr_stmt>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><operator pos:line="51" pos:column="21">!<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">buffer<pos:position pos:line="51" pos:column="28"/></name></expr>)<pos:position pos:line="51" pos:column="29"/></condition><then pos:line="51" pos:column="29">
			<block type="pseudo"><return pos:line="52" pos:column="25">return <expr><call><name pos:line="52" pos:column="32">error<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><literal type="string" pos:line="52" pos:column="38">"cannot read %s"<pos:position pos:line="52" pos:column="54"/></literal></expr></argument>, <argument><expr><call><name pos:line="52" pos:column="56">sha1_to_hex<pos:position pos:line="52" pos:column="67"/></name><argument_list pos:line="52" pos:column="67">(<argument><expr><name pos:line="52" pos:column="68">sha1<pos:position pos:line="52" pos:column="72"/></name></expr></argument>)<pos:position pos:line="52" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="75"/></return></block></then></if>
	}<pos:position pos:line="53" pos:column="10"/></block></then></if></elseif> <else pos:line="53" pos:column="11">else <block pos:line="53" pos:column="16">{
		<expr_stmt><expr><name pos:line="54" pos:column="17">buffer<pos:position pos:line="54" pos:column="23"/></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <name pos:line="54" pos:column="26">NULL<pos:position pos:line="54" pos:column="30"/></name></expr>;<pos:position pos:line="54" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="55" pos:column="17">size<pos:position pos:line="55" pos:column="21"/></name> <operator pos:line="55" pos:column="22">=<pos:position pos:line="55" pos:column="23"/></operator> <literal type="number" pos:line="55" pos:column="24">0<pos:position pos:line="55" pos:column="25"/></literal></expr>;<pos:position pos:line="55" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="56" pos:column="10"/></block></else></if>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><call><name pos:line="58" pos:column="13">S_ISLNK<pos:position pos:line="58" pos:column="20"/></name><argument_list pos:line="58" pos:column="20">(<argument><expr><name pos:line="58" pos:column="21">mode<pos:position pos:line="58" pos:column="25"/></name></expr></argument>)<pos:position pos:line="58" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="27"/></condition><then pos:line="58" pos:column="27"> <block pos:line="58" pos:column="28">{
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name pos:line="59" pos:column="21">size<pos:position pos:line="59" pos:column="25"/></name> <operator pos:line="59" pos:column="26">&gt;<pos:position pos:line="59" pos:column="30"/></operator> <sizeof pos:line="59" pos:column="28">sizeof<argument_list pos:line="59" pos:column="34">(<argument><expr><name><name pos:line="59" pos:column="35">header<pos:position pos:line="59" pos:column="41"/></name><operator pos:line="59" pos:column="41">.<pos:position pos:line="59" pos:column="42"/></operator><name pos:line="59" pos:column="42">linkname<pos:position pos:line="59" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></sizeof></expr>)<pos:position pos:line="59" pos:column="52"/></condition><then pos:line="59" pos:column="52"> <block pos:line="59" pos:column="53">{
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">xsnprintf<pos:position pos:line="60" pos:column="34"/></name><argument_list pos:line="60" pos:column="34">(<argument><expr><name><name pos:line="60" pos:column="35">header<pos:position pos:line="60" pos:column="41"/></name><operator pos:line="60" pos:column="41">.<pos:position pos:line="60" pos:column="42"/></operator><name pos:line="60" pos:column="42">linkname<pos:position pos:line="60" pos:column="50"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="52">sizeof<argument_list pos:line="60" pos:column="58">(<argument><expr><name><name pos:line="60" pos:column="59">header<pos:position pos:line="60" pos:column="65"/></name><operator pos:line="60" pos:column="65">.<pos:position pos:line="60" pos:column="66"/></operator><name pos:line="60" pos:column="66">linkname<pos:position pos:line="60" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="75"/></argument_list></sizeof></expr></argument>,
				  <argument><expr><literal type="string" pos:line="61" pos:column="35">"see %s.paxheader"<pos:position pos:line="61" pos:column="53"/></literal></expr></argument>, <argument><expr><call><name pos:line="61" pos:column="55">sha1_to_hex<pos:position pos:line="61" pos:column="66"/></name><argument_list pos:line="61" pos:column="66">(<argument><expr><name pos:line="61" pos:column="67">sha1<pos:position pos:line="61" pos:column="71"/></name></expr></argument>)<pos:position pos:line="61" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="74"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">strbuf_append_ext_header<pos:position pos:line="62" pos:column="49"/></name><argument_list pos:line="62" pos:column="49">(<argument><expr><operator pos:line="62" pos:column="50">&amp;<pos:position pos:line="62" pos:column="55"/></operator><name pos:line="62" pos:column="51">ext_header<pos:position pos:line="62" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="63">"linkpath"<pos:position pos:line="62" pos:column="73"/></literal></expr></argument>,
			                         <argument><expr><name pos:line="63" pos:column="50">buffer<pos:position pos:line="63" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="58">size<pos:position pos:line="63" pos:column="62"/></name></expr></argument>)<pos:position pos:line="63" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="64"/></expr_stmt>
		}<pos:position pos:line="64" pos:column="18"/></block></then> <else pos:line="64" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="25">memcpy<pos:position pos:line="65" pos:column="31"/></name><argument_list pos:line="65" pos:column="31">(<argument><expr><name><name pos:line="65" pos:column="32">header<pos:position pos:line="65" pos:column="38"/></name><operator pos:line="65" pos:column="38">.<pos:position pos:line="65" pos:column="39"/></operator><name pos:line="65" pos:column="39">linkname<pos:position pos:line="65" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="49">buffer<pos:position pos:line="65" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="57">size<pos:position pos:line="65" pos:column="61"/></name></expr></argument>)<pos:position pos:line="65" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="63"/></expr_stmt></block></else></if>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="68" pos:column="9">size_in_header<pos:position pos:line="68" pos:column="23"/></name> <operator pos:line="68" pos:column="24">=<pos:position pos:line="68" pos:column="25"/></operator> <name pos:line="68" pos:column="26">size<pos:position pos:line="68" pos:column="30"/></name></expr>;<pos:position pos:line="68" pos:column="31"/></expr_stmt>
	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><call><name pos:line="69" pos:column="13">S_ISREG<pos:position pos:line="69" pos:column="20"/></name><argument_list pos:line="69" pos:column="20">(<argument><expr><name pos:line="69" pos:column="21">mode<pos:position pos:line="69" pos:column="25"/></name></expr></argument>)<pos:position pos:line="69" pos:column="26"/></argument_list></call> <operator pos:line="69" pos:column="27">&amp;&amp;<pos:position pos:line="69" pos:column="37"/></operator> <name pos:line="69" pos:column="30">size<pos:position pos:line="69" pos:column="34"/></name> <operator pos:line="69" pos:column="35">&gt;<pos:position pos:line="69" pos:column="39"/></operator> <name pos:line="69" pos:column="37">USTAR_MAX_SIZE<pos:position pos:line="69" pos:column="51"/></name></expr>)<pos:position pos:line="69" pos:column="52"/></condition><then pos:line="69" pos:column="52"> <block pos:line="69" pos:column="53">{
		<expr_stmt><expr><name pos:line="70" pos:column="17">size_in_header<pos:position pos:line="70" pos:column="31"/></name> <operator pos:line="70" pos:column="32">=<pos:position pos:line="70" pos:column="33"/></operator> <literal type="number" pos:line="70" pos:column="34">0<pos:position pos:line="70" pos:column="35"/></literal></expr>;<pos:position pos:line="70" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">strbuf_append_ext_header_uint<pos:position pos:line="71" pos:column="46"/></name><argument_list pos:line="71" pos:column="46">(<argument><expr><operator pos:line="71" pos:column="47">&amp;<pos:position pos:line="71" pos:column="52"/></operator><name pos:line="71" pos:column="48">ext_header<pos:position pos:line="71" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="60">"size"<pos:position pos:line="71" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="68">size<pos:position pos:line="71" pos:column="72"/></name></expr></argument>)<pos:position pos:line="71" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="74"/></expr_stmt>
	}<pos:position pos:line="72" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="74" pos:column="9">prepare_header<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><name pos:line="74" pos:column="24">args<pos:position pos:line="74" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="30">&amp;<pos:position pos:line="74" pos:column="35"/></operator><name pos:line="74" pos:column="31">header<pos:position pos:line="74" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="39">mode<pos:position pos:line="74" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="45">size_in_header<pos:position pos:line="74" pos:column="59"/></name></expr></argument>)<pos:position pos:line="74" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="61"/></expr_stmt>

	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><name><name pos:line="76" pos:column="13">ext_header<pos:position pos:line="76" pos:column="23"/></name><operator pos:line="76" pos:column="23">.<pos:position pos:line="76" pos:column="24"/></operator><name pos:line="76" pos:column="24">len<pos:position pos:line="76" pos:column="27"/></name></name> <operator pos:line="76" pos:column="28">&gt;<pos:position pos:line="76" pos:column="32"/></operator> <literal type="number" pos:line="76" pos:column="30">0<pos:position pos:line="76" pos:column="31"/></literal></expr>)<pos:position pos:line="76" pos:column="32"/></condition><then pos:line="76" pos:column="32"> <block pos:line="76" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="77" pos:column="17">write_extended_header<pos:position pos:line="77" pos:column="38"/></name><argument_list pos:line="77" pos:column="38">(<argument><expr><name pos:line="77" pos:column="39">args<pos:position pos:line="77" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="45">sha1<pos:position pos:line="77" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="51">ext_header<pos:position pos:line="77" pos:column="61"/></name><operator pos:line="77" pos:column="61">.<pos:position pos:line="77" pos:column="62"/></operator><name pos:line="77" pos:column="62">buf<pos:position pos:line="77" pos:column="65"/></name></name></expr></argument>,
				      <argument><expr><name><name pos:line="78" pos:column="39">ext_header<pos:position pos:line="78" pos:column="49"/></name><operator pos:line="78" pos:column="49">.<pos:position pos:line="78" pos:column="50"/></operator><name pos:line="78" pos:column="50">len<pos:position pos:line="78" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="55"/></expr_stmt>
	}<pos:position pos:line="79" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="80" pos:column="9">strbuf_release<pos:position pos:line="80" pos:column="23"/></name><argument_list pos:line="80" pos:column="23">(<argument><expr><operator pos:line="80" pos:column="24">&amp;<pos:position pos:line="80" pos:column="29"/></operator><name pos:line="80" pos:column="25">ext_header<pos:position pos:line="80" pos:column="35"/></name></expr></argument>)<pos:position pos:line="80" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="81" pos:column="9">write_blocked<pos:position pos:line="81" pos:column="22"/></name><argument_list pos:line="81" pos:column="22">(<argument><expr><operator pos:line="81" pos:column="23">&amp;<pos:position pos:line="81" pos:column="28"/></operator><name pos:line="81" pos:column="24">header<pos:position pos:line="81" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="81" pos:column="32">sizeof<argument_list pos:line="81" pos:column="38">(<argument><expr><name pos:line="81" pos:column="39">header<pos:position pos:line="81" pos:column="45"/></name></expr></argument>)<pos:position pos:line="81" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="81" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="48"/></expr_stmt>
	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><call><name pos:line="82" pos:column="13">S_ISREG<pos:position pos:line="82" pos:column="20"/></name><argument_list pos:line="82" pos:column="20">(<argument><expr><name pos:line="82" pos:column="21">mode<pos:position pos:line="82" pos:column="25"/></name></expr></argument>)<pos:position pos:line="82" pos:column="26"/></argument_list></call> <operator pos:line="82" pos:column="27">&amp;&amp;<pos:position pos:line="82" pos:column="37"/></operator> <name pos:line="82" pos:column="30">size<pos:position pos:line="82" pos:column="34"/></name> <operator pos:line="82" pos:column="35">&gt;<pos:position pos:line="82" pos:column="39"/></operator> <literal type="number" pos:line="82" pos:column="37">0<pos:position pos:line="82" pos:column="38"/></literal></expr>)<pos:position pos:line="82" pos:column="39"/></condition><then pos:line="82" pos:column="39"> <block pos:line="82" pos:column="40">{
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name pos:line="83" pos:column="21">buffer<pos:position pos:line="83" pos:column="27"/></name></expr>)<pos:position pos:line="83" pos:column="28"/></condition><then pos:line="83" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="84" pos:column="25">write_blocked<pos:position pos:line="84" pos:column="38"/></name><argument_list pos:line="84" pos:column="38">(<argument><expr><name pos:line="84" pos:column="39">buffer<pos:position pos:line="84" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="47">size<pos:position pos:line="84" pos:column="51"/></name></expr></argument>)<pos:position pos:line="84" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="53"/></expr_stmt></block></then>
		<else pos:line="85" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="86" pos:column="25">err<pos:position pos:line="86" pos:column="28"/></name> <operator pos:line="86" pos:column="29">=<pos:position pos:line="86" pos:column="30"/></operator> <call><name pos:line="86" pos:column="31">stream_blocked<pos:position pos:line="86" pos:column="45"/></name><argument_list pos:line="86" pos:column="45">(<argument><expr><name pos:line="86" pos:column="46">sha1<pos:position pos:line="86" pos:column="50"/></name></expr></argument>)<pos:position pos:line="86" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="52"/></expr_stmt></block></else></if>
	}<pos:position pos:line="87" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="88" pos:column="9">free<pos:position pos:line="88" pos:column="13"/></name><argument_list pos:line="88" pos:column="13">(<argument><expr><name pos:line="88" pos:column="14">buffer<pos:position pos:line="88" pos:column="20"/></name></expr></argument>)<pos:position pos:line="88" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="22"/></expr_stmt>
	<return pos:line="89" pos:column="9">return <expr><name pos:line="89" pos:column="16">err<pos:position pos:line="89" pos:column="19"/></name></expr>;<pos:position pos:line="89" pos:column="20"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
