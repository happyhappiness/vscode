<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2090_git-2.8.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">combine_diff_path<pos:position pos:line="1" pos:column="32"/></name></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">emit_path<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name><name pos:line="1" pos:column="44">struct<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">combine_diff_path<pos:position pos:line="1" pos:column="68"/></name></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">p<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
	<parameter><decl><type><name><name pos:line="2" pos:column="9">struct<pos:position pos:line="2" pos:column="15"/></name> <name pos:line="2" pos:column="16">strbuf<pos:position pos:line="2" pos:column="22"/></name></name> <modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier></type><name pos:line="2" pos:column="24">base<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">diff_options<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">opt<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">int<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">nparent<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>,
	<parameter><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">tree_desc<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">t<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="3" pos:column="30">struct<pos:position pos:line="3" pos:column="36"/></name> <name pos:line="3" pos:column="37">tree_desc<pos:position pos:line="3" pos:column="46"/></name></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type><name pos:line="3" pos:column="48">tp<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>,
	<parameter><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">imin<pos:position pos:line="4" pos:column="17"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="18"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">mode<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">path<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">unsigned<pos:position pos:line="8" pos:column="23"/></name> <name pos:line="8" pos:column="24">char<pos:position pos:line="8" pos:column="28"/></name> <modifier pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></modifier></type><name pos:line="8" pos:column="30">sha1<pos:position pos:line="8" pos:column="34"/></name></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">pathlen<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">old_baselen<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><name><name pos:line="10" pos:column="27">base<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">len<pos:position pos:line="10" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">i<pos:position pos:line="11" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="16">isdir<pos:position pos:line="11" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="23">recurse<pos:position pos:line="11" pos:column="30"/></name> <init pos:line="11" pos:column="31">= <expr><literal type="number" pos:line="11" pos:column="33">0<pos:position pos:line="11" pos:column="34"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="36">emitthis<pos:position pos:line="11" pos:column="44"/></name> <init pos:line="11" pos:column="45">= <expr><literal type="number" pos:line="11" pos:column="47">1<pos:position pos:line="11" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="49"/></decl_stmt>

	<comment type="block" pos:line="13" pos:column="9">/* at least something has to be valid */</comment>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">assert<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">t<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">||<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">tp<pos:position pos:line="14" pos:column="23"/></name></expr></argument>)<pos:position pos:line="14" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">t<pos:position pos:line="16" pos:column="14"/></name></expr>)<pos:position pos:line="16" pos:column="15"/></condition><then pos:line="16" pos:column="15"> <block pos:line="16" pos:column="16">{
		<comment type="block" pos:line="17" pos:column="17">/* path present in resulting tree */</comment>
		<expr_stmt><expr><name pos:line="18" pos:column="17">sha1<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <call><name pos:line="18" pos:column="24">tree_entry_extract<pos:position pos:line="18" pos:column="42"/></name><argument_list pos:line="18" pos:column="42">(<argument><expr><name pos:line="18" pos:column="43">t<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="46">&amp;<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="47">path<pos:position pos:line="18" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="53">&amp;<pos:position pos:line="18" pos:column="58"/></operator><name pos:line="18" pos:column="54">mode<pos:position pos:line="18" pos:column="58"/></name></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">pathlen<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">=<pos:position pos:line="19" pos:column="26"/></operator> <call><name pos:line="19" pos:column="27">tree_entry_len<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><operator pos:line="19" pos:column="42">&amp;<pos:position pos:line="19" pos:column="47"/></operator><name><name pos:line="19" pos:column="43">t<pos:position pos:line="19" pos:column="44"/></name><operator pos:line="19" pos:column="44">-&gt;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="46">entry<pos:position pos:line="19" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">isdir<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <call><name pos:line="20" pos:column="25">S_ISDIR<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">mode<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then> <else pos:line="21" pos:column="11">else <block pos:line="21" pos:column="16">{
		<comment type="block" pos:line="22" pos:column="17">/*
		 * a path was removed - take path from imin parent. Also take
		 * mode from that parent, to decide on recursion(1).
		 *
		 * 1) all modes for tp[i]=tp[imin] should be the same wrt
		 *    S_ISDIR, thanks to base_name_compare().
		 */</comment>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">tree_entry_extract<pos:position pos:line="29" pos:column="35"/></name><argument_list pos:line="29" pos:column="35">(<argument><expr><operator pos:line="29" pos:column="36">&amp;<pos:position pos:line="29" pos:column="41"/></operator><name><name pos:line="29" pos:column="37">tp<pos:position pos:line="29" pos:column="39"/></name><index pos:line="29" pos:column="39">[<expr><name pos:line="29" pos:column="40">imin<pos:position pos:line="29" pos:column="44"/></name></expr>]<pos:position pos:line="29" pos:column="45"/></index></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="47">&amp;<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="48">path<pos:position pos:line="29" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="54">&amp;<pos:position pos:line="29" pos:column="59"/></operator><name pos:line="29" pos:column="55">mode<pos:position pos:line="29" pos:column="59"/></name></expr></argument>)<pos:position pos:line="29" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">pathlen<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">=<pos:position pos:line="30" pos:column="26"/></operator> <call><name pos:line="30" pos:column="27">tree_entry_len<pos:position pos:line="30" pos:column="41"/></name><argument_list pos:line="30" pos:column="41">(<argument><expr><operator pos:line="30" pos:column="42">&amp;<pos:position pos:line="30" pos:column="47"/></operator><name><name pos:line="30" pos:column="43">tp<pos:position pos:line="30" pos:column="45"/></name><index pos:line="30" pos:column="45">[<expr><name pos:line="30" pos:column="46">imin<pos:position pos:line="30" pos:column="50"/></name></expr>]<pos:position pos:line="30" pos:column="51"/></index></name><operator pos:line="30" pos:column="51">.<pos:position pos:line="30" pos:column="52"/></operator><name pos:line="30" pos:column="52">entry<pos:position pos:line="30" pos:column="57"/></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>

		<expr_stmt><expr><name pos:line="32" pos:column="17">isdir<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <call><name pos:line="32" pos:column="25">S_ISDIR<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">mode<pos:position pos:line="32" pos:column="37"/></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">sha1<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">=<pos:position pos:line="33" pos:column="23"/></operator> <name pos:line="33" pos:column="24">NULL<pos:position pos:line="33" pos:column="28"/></name></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">mode<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">=<pos:position pos:line="34" pos:column="23"/></operator> <literal type="number" pos:line="34" pos:column="24">0<pos:position pos:line="34" pos:column="25"/></literal></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></else></if>

	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">DIFF_OPT_TST<pos:position pos:line="37" pos:column="25"/></name><argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">opt<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="31">RECURSIVE<pos:position pos:line="37" pos:column="40"/></name></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call> <operator pos:line="37" pos:column="42">&amp;&amp;<pos:position pos:line="37" pos:column="52"/></operator> <name pos:line="37" pos:column="45">isdir<pos:position pos:line="37" pos:column="50"/></name></expr>)<pos:position pos:line="37" pos:column="51"/></condition><then pos:line="37" pos:column="51"> <block pos:line="37" pos:column="52">{
		<expr_stmt><expr><name pos:line="38" pos:column="17">recurse<pos:position pos:line="38" pos:column="24"/></name> <operator pos:line="38" pos:column="25">=<pos:position pos:line="38" pos:column="26"/></operator> <literal type="number" pos:line="38" pos:column="27">1<pos:position pos:line="38" pos:column="28"/></literal></expr>;<pos:position pos:line="38" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="39" pos:column="17">emitthis<pos:position pos:line="39" pos:column="25"/></name> <operator pos:line="39" pos:column="26">=<pos:position pos:line="39" pos:column="27"/></operator> <call><name pos:line="39" pos:column="28">DIFF_OPT_TST<pos:position pos:line="39" pos:column="40"/></name><argument_list pos:line="39" pos:column="40">(<argument><expr><name pos:line="39" pos:column="41">opt<pos:position pos:line="39" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="46">TREE_IN_RECURSIVE<pos:position pos:line="39" pos:column="63"/></name></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="65"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">emitthis<pos:position pos:line="42" pos:column="21"/></name></expr>)<pos:position pos:line="42" pos:column="22"/></condition><then pos:line="42" pos:column="22"> <block pos:line="42" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">int<pos:position pos:line="43" pos:column="20"/></name></type> <name pos:line="43" pos:column="21">keep<pos:position pos:line="43" pos:column="25"/></name></decl>;<pos:position pos:line="43" pos:column="26"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="44" pos:column="17">struct<pos:position pos:line="44" pos:column="23"/></name> <name pos:line="44" pos:column="24">combine_diff_path<pos:position pos:line="44" pos:column="41"/></name></name> <modifier pos:line="44" pos:column="42">*<pos:position pos:line="44" pos:column="43"/></modifier></type><name pos:line="44" pos:column="43">pprev<pos:position pos:line="44" pos:column="48"/></name> <init pos:line="44" pos:column="49">= <expr><name pos:line="44" pos:column="51">p<pos:position pos:line="44" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="44" pos:column="53"/></decl_stmt>
		<expr_stmt><expr><name pos:line="45" pos:column="17">p<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator> <call><name pos:line="45" pos:column="21">path_appendnew<pos:position pos:line="45" pos:column="35"/></name><argument_list pos:line="45" pos:column="35">(<argument><expr><name pos:line="45" pos:column="36">p<pos:position pos:line="45" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="39">nparent<pos:position pos:line="45" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="48">base<pos:position pos:line="45" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="54">path<pos:position pos:line="45" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="60">pathlen<pos:position pos:line="45" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="69">mode<pos:position pos:line="45" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="75">sha1<pos:position pos:line="45" pos:column="79"/></name></expr></argument>)<pos:position pos:line="45" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="81"/></expr_stmt>

		<for pos:line="47" pos:column="17">for <control pos:line="47" pos:column="21">(<init><expr><name pos:line="47" pos:column="22">i<pos:position pos:line="47" pos:column="23"/></name> <operator pos:line="47" pos:column="24">=<pos:position pos:line="47" pos:column="25"/></operator> <literal type="number" pos:line="47" pos:column="26">0<pos:position pos:line="47" pos:column="27"/></literal></expr>;<pos:position pos:line="47" pos:column="28"/></init> <condition><expr><name pos:line="47" pos:column="29">i<pos:position pos:line="47" pos:column="30"/></name> <operator pos:line="47" pos:column="31">&lt;<pos:position pos:line="47" pos:column="35"/></operator> <name pos:line="47" pos:column="33">nparent<pos:position pos:line="47" pos:column="40"/></name></expr>;<pos:position pos:line="47" pos:column="41"/></condition> <incr><expr><operator pos:line="47" pos:column="42">++<pos:position pos:line="47" pos:column="44"/></operator><name pos:line="47" pos:column="44">i<pos:position pos:line="47" pos:column="45"/></name></expr></incr>)<pos:position pos:line="47" pos:column="46"/></control> <block pos:line="47" pos:column="47">{
			<comment type="block" pos:line="48" pos:column="25">/*
			 * tp[i] is valid, if present and if tp[i]==tp[imin] -
			 * otherwise, we should ignore it.
			 */</comment>
			<decl_stmt><decl><type><name pos:line="52" pos:column="25">int<pos:position pos:line="52" pos:column="28"/></name></type> <name pos:line="52" pos:column="29">tpi_valid<pos:position pos:line="52" pos:column="38"/></name> <init pos:line="52" pos:column="39">= <expr><name pos:line="52" pos:column="41">tp<pos:position pos:line="52" pos:column="43"/></name> <operator pos:line="52" pos:column="44">&amp;&amp;<pos:position pos:line="52" pos:column="54"/></operator> <operator pos:line="52" pos:column="47">!<pos:position pos:line="52" pos:column="48"/></operator><operator pos:line="52" pos:column="48">(<pos:position pos:line="52" pos:column="49"/></operator><name><name pos:line="52" pos:column="49">tp<pos:position pos:line="52" pos:column="51"/></name><index pos:line="52" pos:column="51">[<expr><name pos:line="52" pos:column="52">i<pos:position pos:line="52" pos:column="53"/></name></expr>]<pos:position pos:line="52" pos:column="54"/></index></name><operator pos:line="52" pos:column="54">.<pos:position pos:line="52" pos:column="55"/></operator><name><name pos:line="52" pos:column="55">entry<pos:position pos:line="52" pos:column="60"/></name><operator pos:line="52" pos:column="60">.<pos:position pos:line="52" pos:column="61"/></operator><name pos:line="52" pos:column="61">mode<pos:position pos:line="52" pos:column="65"/></name></name> <operator pos:line="52" pos:column="66">&amp;<pos:position pos:line="52" pos:column="71"/></operator> <name pos:line="52" pos:column="68">S_IFXMIN_NEQ<pos:position pos:line="52" pos:column="80"/></name><operator pos:line="52" pos:column="80">)<pos:position pos:line="52" pos:column="81"/></operator></expr></init></decl>;<pos:position pos:line="52" pos:column="82"/></decl_stmt>

			<decl_stmt><decl><type><specifier pos:line="54" pos:column="25">const<pos:position pos:line="54" pos:column="30"/></specifier> <name pos:line="54" pos:column="31">unsigned<pos:position pos:line="54" pos:column="39"/></name> <name pos:line="54" pos:column="40">char<pos:position pos:line="54" pos:column="44"/></name> <modifier pos:line="54" pos:column="45">*<pos:position pos:line="54" pos:column="46"/></modifier></type><name pos:line="54" pos:column="46">sha1_i<pos:position pos:line="54" pos:column="52"/></name></decl>;<pos:position pos:line="54" pos:column="53"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="55" pos:column="25">unsigned<pos:position pos:line="55" pos:column="33"/></name></type> <name pos:line="55" pos:column="34">mode_i<pos:position pos:line="55" pos:column="40"/></name></decl>;<pos:position pos:line="55" pos:column="41"/></decl_stmt>

			<expr_stmt><expr><name><name pos:line="57" pos:column="25">p<pos:position pos:line="57" pos:column="26"/></name><operator pos:line="57" pos:column="26">-&gt;<pos:position pos:line="57" pos:column="31"/></operator><name pos:line="57" pos:column="28">parent<pos:position pos:line="57" pos:column="34"/></name><index pos:line="57" pos:column="34">[<expr><name pos:line="57" pos:column="35">i<pos:position pos:line="57" pos:column="36"/></name></expr>]<pos:position pos:line="57" pos:column="37"/></index></name><operator pos:line="57" pos:column="37">.<pos:position pos:line="57" pos:column="38"/></operator><name pos:line="57" pos:column="38">status<pos:position pos:line="57" pos:column="44"/></name> <operator pos:line="57" pos:column="45">=<pos:position pos:line="57" pos:column="46"/></operator>
				<ternary><condition><expr><operator pos:line="58" pos:column="33">!<pos:position pos:line="58" pos:column="34"/></operator><name pos:line="58" pos:column="34">t<pos:position pos:line="58" pos:column="35"/></name></expr> ?<pos:position pos:line="58" pos:column="37"/></condition><then pos:line="58" pos:column="37"> <expr><name pos:line="58" pos:column="38">DIFF_STATUS_DELETED<pos:position pos:line="58" pos:column="57"/></name></expr> <pos:position pos:line="58" pos:column="58"/></then><else pos:line="58" pos:column="58">:
					<expr><ternary><condition><expr><name pos:line="59" pos:column="41">tpi_valid<pos:position pos:line="59" pos:column="50"/></name></expr> ?<pos:position pos:line="59" pos:column="52"/></condition><then pos:line="59" pos:column="52">
						<expr><name pos:line="60" pos:column="49">DIFF_STATUS_MODIFIED<pos:position pos:line="60" pos:column="69"/></name></expr> <pos:position pos:line="60" pos:column="70"/></then><else pos:line="60" pos:column="70">:
						<expr><name pos:line="61" pos:column="49">DIFF_STATUS_ADDED<pos:position pos:line="61" pos:column="66"/></name></expr></else></ternary></expr></else></ternary></expr>;<pos:position pos:line="61" pos:column="67"/></expr_stmt>

			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><name pos:line="63" pos:column="29">tpi_valid<pos:position pos:line="63" pos:column="38"/></name></expr>)<pos:position pos:line="63" pos:column="39"/></condition><then pos:line="63" pos:column="39"> <block pos:line="63" pos:column="40">{
				<expr_stmt><expr><name pos:line="64" pos:column="33">sha1_i<pos:position pos:line="64" pos:column="39"/></name> <operator pos:line="64" pos:column="40">=<pos:position pos:line="64" pos:column="41"/></operator> <name><name pos:line="64" pos:column="42">tp<pos:position pos:line="64" pos:column="44"/></name><index pos:line="64" pos:column="44">[<expr><name pos:line="64" pos:column="45">i<pos:position pos:line="64" pos:column="46"/></name></expr>]<pos:position pos:line="64" pos:column="47"/></index></name><operator pos:line="64" pos:column="47">.<pos:position pos:line="64" pos:column="48"/></operator><name><name pos:line="64" pos:column="48">entry<pos:position pos:line="64" pos:column="53"/></name><operator pos:line="64" pos:column="53">.<pos:position pos:line="64" pos:column="54"/></operator><name pos:line="64" pos:column="54">sha1<pos:position pos:line="64" pos:column="58"/></name></name></expr>;<pos:position pos:line="64" pos:column="59"/></expr_stmt>
				<expr_stmt><expr><name pos:line="65" pos:column="33">mode_i<pos:position pos:line="65" pos:column="39"/></name> <operator pos:line="65" pos:column="40">=<pos:position pos:line="65" pos:column="41"/></operator> <name><name pos:line="65" pos:column="42">tp<pos:position pos:line="65" pos:column="44"/></name><index pos:line="65" pos:column="44">[<expr><name pos:line="65" pos:column="45">i<pos:position pos:line="65" pos:column="46"/></name></expr>]<pos:position pos:line="65" pos:column="47"/></index></name><operator pos:line="65" pos:column="47">.<pos:position pos:line="65" pos:column="48"/></operator><name><name pos:line="65" pos:column="48">entry<pos:position pos:line="65" pos:column="53"/></name><operator pos:line="65" pos:column="53">.<pos:position pos:line="65" pos:column="54"/></operator><name pos:line="65" pos:column="54">mode<pos:position pos:line="65" pos:column="58"/></name></name></expr>;<pos:position pos:line="65" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="66" pos:column="26"/></block></then>
			<else pos:line="67" pos:column="25">else <block pos:line="67" pos:column="30">{
				<expr_stmt><expr><name pos:line="68" pos:column="33">sha1_i<pos:position pos:line="68" pos:column="39"/></name> <operator pos:line="68" pos:column="40">=<pos:position pos:line="68" pos:column="41"/></operator> <name pos:line="68" pos:column="42">NULL<pos:position pos:line="68" pos:column="46"/></name></expr>;<pos:position pos:line="68" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><name pos:line="69" pos:column="33">mode_i<pos:position pos:line="69" pos:column="39"/></name> <operator pos:line="69" pos:column="40">=<pos:position pos:line="69" pos:column="41"/></operator> <literal type="number" pos:line="69" pos:column="42">0<pos:position pos:line="69" pos:column="43"/></literal></expr>;<pos:position pos:line="69" pos:column="44"/></expr_stmt>
			}<pos:position pos:line="70" pos:column="26"/></block></else></if>

			<expr_stmt><expr><name><name pos:line="72" pos:column="25">p<pos:position pos:line="72" pos:column="26"/></name><operator pos:line="72" pos:column="26">-&gt;<pos:position pos:line="72" pos:column="31"/></operator><name pos:line="72" pos:column="28">parent<pos:position pos:line="72" pos:column="34"/></name><index pos:line="72" pos:column="34">[<expr><name pos:line="72" pos:column="35">i<pos:position pos:line="72" pos:column="36"/></name></expr>]<pos:position pos:line="72" pos:column="37"/></index></name><operator pos:line="72" pos:column="37">.<pos:position pos:line="72" pos:column="38"/></operator><name pos:line="72" pos:column="38">mode<pos:position pos:line="72" pos:column="42"/></name> <operator pos:line="72" pos:column="43">=<pos:position pos:line="72" pos:column="44"/></operator> <name pos:line="72" pos:column="45">mode_i<pos:position pos:line="72" pos:column="51"/></name></expr>;<pos:position pos:line="72" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="73" pos:column="25">hashcpy<pos:position pos:line="73" pos:column="32"/></name><argument_list pos:line="73" pos:column="32">(<argument><expr><name><name pos:line="73" pos:column="33">p<pos:position pos:line="73" pos:column="34"/></name><operator pos:line="73" pos:column="34">-&gt;<pos:position pos:line="73" pos:column="39"/></operator><name pos:line="73" pos:column="36">parent<pos:position pos:line="73" pos:column="42"/></name><index pos:line="73" pos:column="42">[<expr><name pos:line="73" pos:column="43">i<pos:position pos:line="73" pos:column="44"/></name></expr>]<pos:position pos:line="73" pos:column="45"/></index></name><operator pos:line="73" pos:column="45">.<pos:position pos:line="73" pos:column="46"/></operator><name><name pos:line="73" pos:column="46">oid<pos:position pos:line="73" pos:column="49"/></name><operator pos:line="73" pos:column="49">.<pos:position pos:line="73" pos:column="50"/></operator><name pos:line="73" pos:column="50">hash<pos:position pos:line="73" pos:column="54"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="73" pos:column="56">sha1_i<pos:position pos:line="73" pos:column="62"/></name></expr> ?<pos:position pos:line="73" pos:column="64"/></condition><then pos:line="73" pos:column="64"> <expr><name pos:line="73" pos:column="65">sha1_i<pos:position pos:line="73" pos:column="71"/></name></expr> <pos:position pos:line="73" pos:column="72"/></then><else pos:line="73" pos:column="72">: <expr><name pos:line="73" pos:column="74">null_sha1<pos:position pos:line="73" pos:column="83"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="73" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="85"/></expr_stmt>
		}<pos:position pos:line="74" pos:column="18"/></block></for>

		<expr_stmt><expr><name pos:line="76" pos:column="17">keep<pos:position pos:line="76" pos:column="21"/></name> <operator pos:line="76" pos:column="22">=<pos:position pos:line="76" pos:column="23"/></operator> <literal type="number" pos:line="76" pos:column="24">1<pos:position pos:line="76" pos:column="25"/></literal></expr>;<pos:position pos:line="76" pos:column="26"/></expr_stmt>
		<if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><name><name pos:line="77" pos:column="21">opt<pos:position pos:line="77" pos:column="24"/></name><operator pos:line="77" pos:column="24">-&gt;<pos:position pos:line="77" pos:column="29"/></operator><name pos:line="77" pos:column="26">pathchange<pos:position pos:line="77" pos:column="36"/></name></name></expr>)<pos:position pos:line="77" pos:column="37"/></condition><then pos:line="77" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="25">keep<pos:position pos:line="78" pos:column="29"/></name> <operator pos:line="78" pos:column="30">=<pos:position pos:line="78" pos:column="31"/></operator> <call><name><name pos:line="78" pos:column="32">opt<pos:position pos:line="78" pos:column="35"/></name><operator pos:line="78" pos:column="35">-&gt;<pos:position pos:line="78" pos:column="40"/></operator><name pos:line="78" pos:column="37">pathchange<pos:position pos:line="78" pos:column="47"/></name></name><argument_list pos:line="78" pos:column="47">(<argument><expr><name pos:line="78" pos:column="48">opt<pos:position pos:line="78" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="53">p<pos:position pos:line="78" pos:column="54"/></name></expr></argument>)<pos:position pos:line="78" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="56"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="80" pos:column="17">/*
		 * If a path was filtered or consumed - we don't need to add it
		 * to the list and can reuse its memory, leaving it as
		 * pre-allocated element on the tail.
		 *
		 * On the other hand, if path needs to be kept, we need to
		 * correct its .next to NULL, as it was pre-initialized to how
		 * much memory was allocated.
		 *
		 * see path_appendnew() for details.
		 */</comment>
		<if pos:line="91" pos:column="17">if <condition pos:line="91" pos:column="20">(<expr><operator pos:line="91" pos:column="21">!<pos:position pos:line="91" pos:column="22"/></operator><name pos:line="91" pos:column="22">keep<pos:position pos:line="91" pos:column="26"/></name></expr>)<pos:position pos:line="91" pos:column="27"/></condition><then pos:line="91" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><name pos:line="92" pos:column="25">p<pos:position pos:line="92" pos:column="26"/></name> <operator pos:line="92" pos:column="27">=<pos:position pos:line="92" pos:column="28"/></operator> <name pos:line="92" pos:column="29">pprev<pos:position pos:line="92" pos:column="34"/></name></expr>;<pos:position pos:line="92" pos:column="35"/></expr_stmt></block></then>
		<else pos:line="93" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="94" pos:column="25">p<pos:position pos:line="94" pos:column="26"/></name><operator pos:line="94" pos:column="26">-&gt;<pos:position pos:line="94" pos:column="31"/></operator><name pos:line="94" pos:column="28">next<pos:position pos:line="94" pos:column="32"/></name></name> <operator pos:line="94" pos:column="33">=<pos:position pos:line="94" pos:column="34"/></operator> <name pos:line="94" pos:column="35">NULL<pos:position pos:line="94" pos:column="39"/></name></expr>;<pos:position pos:line="94" pos:column="40"/></expr_stmt></block></else></if>
	}<pos:position pos:line="95" pos:column="10"/></block></then></if>

	<if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name pos:line="97" pos:column="13">recurse<pos:position pos:line="97" pos:column="20"/></name></expr>)<pos:position pos:line="97" pos:column="21"/></condition><then pos:line="97" pos:column="21"> <block pos:line="97" pos:column="22">{
		<decl_stmt><decl><type><specifier pos:line="98" pos:column="17">const<pos:position pos:line="98" pos:column="22"/></specifier> <name pos:line="98" pos:column="23">unsigned<pos:position pos:line="98" pos:column="31"/></name> <name pos:line="98" pos:column="32">char<pos:position pos:line="98" pos:column="36"/></name> <modifier pos:line="98" pos:column="37">*<pos:position pos:line="98" pos:column="38"/></modifier><modifier pos:line="98" pos:column="38">*<pos:position pos:line="98" pos:column="39"/></modifier></type><name pos:line="98" pos:column="39">parents_sha1<pos:position pos:line="98" pos:column="51"/></name></decl>;<pos:position pos:line="98" pos:column="52"/></decl_stmt>

		<expr_stmt><expr><name pos:line="100" pos:column="17">parents_sha1<pos:position pos:line="100" pos:column="29"/></name> <operator pos:line="100" pos:column="30">=<pos:position pos:line="100" pos:column="31"/></operator> <call><name pos:line="100" pos:column="32">xalloca<pos:position pos:line="100" pos:column="39"/></name><argument_list pos:line="100" pos:column="39">(<argument><expr><name pos:line="100" pos:column="40">nparent<pos:position pos:line="100" pos:column="47"/></name> <operator pos:line="100" pos:column="48">*<pos:position pos:line="100" pos:column="49"/></operator> <sizeof pos:line="100" pos:column="50">sizeof<argument_list pos:line="100" pos:column="56">(<argument><expr><name><name pos:line="100" pos:column="57">parents_sha1<pos:position pos:line="100" pos:column="69"/></name><index pos:line="100" pos:column="69">[<expr><literal type="number" pos:line="100" pos:column="70">0<pos:position pos:line="100" pos:column="71"/></literal></expr>]<pos:position pos:line="100" pos:column="72"/></index></name></expr></argument>)<pos:position pos:line="100" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="100" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="75"/></expr_stmt>
		<for pos:line="101" pos:column="17">for <control pos:line="101" pos:column="21">(<init><expr><name pos:line="101" pos:column="22">i<pos:position pos:line="101" pos:column="23"/></name> <operator pos:line="101" pos:column="24">=<pos:position pos:line="101" pos:column="25"/></operator> <literal type="number" pos:line="101" pos:column="26">0<pos:position pos:line="101" pos:column="27"/></literal></expr>;<pos:position pos:line="101" pos:column="28"/></init> <condition><expr><name pos:line="101" pos:column="29">i<pos:position pos:line="101" pos:column="30"/></name> <operator pos:line="101" pos:column="31">&lt;<pos:position pos:line="101" pos:column="35"/></operator> <name pos:line="101" pos:column="33">nparent<pos:position pos:line="101" pos:column="40"/></name></expr>;<pos:position pos:line="101" pos:column="41"/></condition> <incr><expr><operator pos:line="101" pos:column="42">++<pos:position pos:line="101" pos:column="44"/></operator><name pos:line="101" pos:column="44">i<pos:position pos:line="101" pos:column="45"/></name></expr></incr>)<pos:position pos:line="101" pos:column="46"/></control> <block pos:line="101" pos:column="47">{
			<comment type="block" pos:line="102" pos:column="25">/* same rule as in emitthis */</comment>
			<decl_stmt><decl><type><name pos:line="103" pos:column="25">int<pos:position pos:line="103" pos:column="28"/></name></type> <name pos:line="103" pos:column="29">tpi_valid<pos:position pos:line="103" pos:column="38"/></name> <init pos:line="103" pos:column="39">= <expr><name pos:line="103" pos:column="41">tp<pos:position pos:line="103" pos:column="43"/></name> <operator pos:line="103" pos:column="44">&amp;&amp;<pos:position pos:line="103" pos:column="54"/></operator> <operator pos:line="103" pos:column="47">!<pos:position pos:line="103" pos:column="48"/></operator><operator pos:line="103" pos:column="48">(<pos:position pos:line="103" pos:column="49"/></operator><name><name pos:line="103" pos:column="49">tp<pos:position pos:line="103" pos:column="51"/></name><index pos:line="103" pos:column="51">[<expr><name pos:line="103" pos:column="52">i<pos:position pos:line="103" pos:column="53"/></name></expr>]<pos:position pos:line="103" pos:column="54"/></index></name><operator pos:line="103" pos:column="54">.<pos:position pos:line="103" pos:column="55"/></operator><name><name pos:line="103" pos:column="55">entry<pos:position pos:line="103" pos:column="60"/></name><operator pos:line="103" pos:column="60">.<pos:position pos:line="103" pos:column="61"/></operator><name pos:line="103" pos:column="61">mode<pos:position pos:line="103" pos:column="65"/></name></name> <operator pos:line="103" pos:column="66">&amp;<pos:position pos:line="103" pos:column="71"/></operator> <name pos:line="103" pos:column="68">S_IFXMIN_NEQ<pos:position pos:line="103" pos:column="80"/></name><operator pos:line="103" pos:column="80">)<pos:position pos:line="103" pos:column="81"/></operator></expr></init></decl>;<pos:position pos:line="103" pos:column="82"/></decl_stmt>

			<expr_stmt><expr><name><name pos:line="105" pos:column="25">parents_sha1<pos:position pos:line="105" pos:column="37"/></name><index pos:line="105" pos:column="37">[<expr><name pos:line="105" pos:column="38">i<pos:position pos:line="105" pos:column="39"/></name></expr>]<pos:position pos:line="105" pos:column="40"/></index></name> <operator pos:line="105" pos:column="41">=<pos:position pos:line="105" pos:column="42"/></operator> <ternary><condition><expr><name pos:line="105" pos:column="43">tpi_valid<pos:position pos:line="105" pos:column="52"/></name></expr> ?<pos:position pos:line="105" pos:column="54"/></condition><then pos:line="105" pos:column="54"> <expr><name><name pos:line="105" pos:column="55">tp<pos:position pos:line="105" pos:column="57"/></name><index pos:line="105" pos:column="57">[<expr><name pos:line="105" pos:column="58">i<pos:position pos:line="105" pos:column="59"/></name></expr>]<pos:position pos:line="105" pos:column="60"/></index></name><operator pos:line="105" pos:column="60">.<pos:position pos:line="105" pos:column="61"/></operator><name><name pos:line="105" pos:column="61">entry<pos:position pos:line="105" pos:column="66"/></name><operator pos:line="105" pos:column="66">.<pos:position pos:line="105" pos:column="67"/></operator><name pos:line="105" pos:column="67">sha1<pos:position pos:line="105" pos:column="71"/></name></name></expr>
						    <pos:position pos:line="106" pos:column="11"/></then><else pos:line="106" pos:column="53">: <expr><name pos:line="106" pos:column="55">NULL<pos:position pos:line="106" pos:column="59"/></name></expr></else></ternary></expr>;<pos:position pos:line="106" pos:column="60"/></expr_stmt>
		}<pos:position pos:line="107" pos:column="18"/></block></for>

		<expr_stmt><expr><call><name pos:line="109" pos:column="17">strbuf_add<pos:position pos:line="109" pos:column="27"/></name><argument_list pos:line="109" pos:column="27">(<argument><expr><name pos:line="109" pos:column="28">base<pos:position pos:line="109" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="34">path<pos:position pos:line="109" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="40">pathlen<pos:position pos:line="109" pos:column="47"/></name></expr></argument>)<pos:position pos:line="109" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="110" pos:column="17">strbuf_addch<pos:position pos:line="110" pos:column="29"/></name><argument_list pos:line="110" pos:column="29">(<argument><expr><name pos:line="110" pos:column="30">base<pos:position pos:line="110" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="110" pos:column="36">'/'<pos:position pos:line="110" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="111" pos:column="17">p<pos:position pos:line="111" pos:column="18"/></name> <operator pos:line="111" pos:column="19">=<pos:position pos:line="111" pos:column="20"/></operator> <call><name pos:line="111" pos:column="21">ll_diff_tree_paths<pos:position pos:line="111" pos:column="39"/></name><argument_list pos:line="111" pos:column="39">(<argument><expr><name pos:line="111" pos:column="40">p<pos:position pos:line="111" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="43">sha1<pos:position pos:line="111" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="49">parents_sha1<pos:position pos:line="111" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="63">nparent<pos:position pos:line="111" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="72">base<pos:position pos:line="111" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="78">opt<pos:position pos:line="111" pos:column="81"/></name></expr></argument>)<pos:position pos:line="111" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="83"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="112" pos:column="17">xalloca_free<pos:position pos:line="112" pos:column="29"/></name><argument_list pos:line="112" pos:column="29">(<argument><expr><name pos:line="112" pos:column="30">parents_sha1<pos:position pos:line="112" pos:column="42"/></name></expr></argument>)<pos:position pos:line="112" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="113" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="115" pos:column="9">strbuf_setlen<pos:position pos:line="115" pos:column="22"/></name><argument_list pos:line="115" pos:column="22">(<argument><expr><name pos:line="115" pos:column="23">base<pos:position pos:line="115" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="29">old_baselen<pos:position pos:line="115" pos:column="40"/></name></expr></argument>)<pos:position pos:line="115" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="42"/></expr_stmt>
	<return pos:line="116" pos:column="9">return <expr><name pos:line="116" pos:column="16">p<pos:position pos:line="116" pos:column="17"/></name></expr>;<pos:position pos:line="116" pos:column="18"/></return>
}<pos:position pos:line="117" pos:column="2"/></block></function></unit>
