<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_368_git-2.13.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ce_write<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">git_SHA_CTX<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">context<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">int<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">fd<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">void<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">data<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">unsigned<pos:position pos:line="1" pos:column="71"/></name> <name pos:line="1" pos:column="72">int<pos:position pos:line="1" pos:column="75"/></name></type> <name pos:line="1" pos:column="76">len<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<while pos:line="3" pos:column="9">while <condition pos:line="3" pos:column="15">(<expr><name pos:line="3" pos:column="16">len<pos:position pos:line="3" pos:column="19"/></name></expr>)<pos:position pos:line="3" pos:column="20"/></condition> <block pos:line="3" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="4" pos:column="17">unsigned<pos:position pos:line="4" pos:column="25"/></name> <name pos:line="4" pos:column="26">int<pos:position pos:line="4" pos:column="29"/></name></type> <name pos:line="4" pos:column="30">buffered<pos:position pos:line="4" pos:column="38"/></name> <init pos:line="4" pos:column="39">= <expr><name pos:line="4" pos:column="41">write_buffer_len<pos:position pos:line="4" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="58"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">unsigned<pos:position pos:line="5" pos:column="25"/></name> <name pos:line="5" pos:column="26">int<pos:position pos:line="5" pos:column="29"/></name></type> <name pos:line="5" pos:column="30">partial<pos:position pos:line="5" pos:column="37"/></name> <init pos:line="5" pos:column="38">= <expr><name pos:line="5" pos:column="40">WRITE_BUFFER_SIZE<pos:position pos:line="5" pos:column="57"/></name> <operator pos:line="5" pos:column="58">-<pos:position pos:line="5" pos:column="59"/></operator> <name pos:line="5" pos:column="60">buffered<pos:position pos:line="5" pos:column="68"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="69"/></decl_stmt>
		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><name pos:line="6" pos:column="21">partial<pos:position pos:line="6" pos:column="28"/></name> <operator pos:line="6" pos:column="29">&gt;<pos:position pos:line="6" pos:column="33"/></operator> <name pos:line="6" pos:column="31">len<pos:position pos:line="6" pos:column="34"/></name></expr>)<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="25">partial<pos:position pos:line="7" pos:column="32"/></name> <operator pos:line="7" pos:column="33">=<pos:position pos:line="7" pos:column="34"/></operator> <name pos:line="7" pos:column="35">len<pos:position pos:line="7" pos:column="38"/></name></expr>;<pos:position pos:line="7" pos:column="39"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">memcpy<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><name pos:line="8" pos:column="24">write_buffer<pos:position pos:line="8" pos:column="36"/></name> <operator pos:line="8" pos:column="37">+<pos:position pos:line="8" pos:column="38"/></operator> <name pos:line="8" pos:column="39">buffered<pos:position pos:line="8" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="49">data<pos:position pos:line="8" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="55">partial<pos:position pos:line="8" pos:column="62"/></name></expr></argument>)<pos:position pos:line="8" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><name pos:line="9" pos:column="17">buffered<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">+=<pos:position pos:line="9" pos:column="28"/></operator> <name pos:line="9" pos:column="29">partial<pos:position pos:line="9" pos:column="36"/></name></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name pos:line="10" pos:column="21">buffered<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">==<pos:position pos:line="10" pos:column="32"/></operator> <name pos:line="10" pos:column="33">WRITE_BUFFER_SIZE<pos:position pos:line="10" pos:column="50"/></name></expr>)<pos:position pos:line="10" pos:column="51"/></condition><then pos:line="10" pos:column="51"> <block pos:line="10" pos:column="52">{
			<expr_stmt><expr><name pos:line="11" pos:column="25">write_buffer_len<pos:position pos:line="11" pos:column="41"/></name> <operator pos:line="11" pos:column="42">=<pos:position pos:line="11" pos:column="43"/></operator> <name pos:line="11" pos:column="44">buffered<pos:position pos:line="11" pos:column="52"/></name></expr>;<pos:position pos:line="11" pos:column="53"/></expr_stmt>
			<if pos:line="12" pos:column="25">if <condition pos:line="12" pos:column="28">(<expr><call><name pos:line="12" pos:column="29">ce_write_flush<pos:position pos:line="12" pos:column="43"/></name><argument_list pos:line="12" pos:column="43">(<argument><expr><name pos:line="12" pos:column="44">context<pos:position pos:line="12" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="53">fd<pos:position pos:line="12" pos:column="55"/></name></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="57"/></condition><then pos:line="12" pos:column="57">
				<block type="pseudo"><return pos:line="13" pos:column="33">return <expr><operator pos:line="13" pos:column="40">-<pos:position pos:line="13" pos:column="41"/></operator><literal type="number" pos:line="13" pos:column="41">1<pos:position pos:line="13" pos:column="42"/></literal></expr>;<pos:position pos:line="13" pos:column="43"/></return></block></then></if>
			<expr_stmt><expr><name pos:line="14" pos:column="25">buffered<pos:position pos:line="14" pos:column="33"/></name> <operator pos:line="14" pos:column="34">=<pos:position pos:line="14" pos:column="35"/></operator> <literal type="number" pos:line="14" pos:column="36">0<pos:position pos:line="14" pos:column="37"/></literal></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="16" pos:column="17">write_buffer_len<pos:position pos:line="16" pos:column="33"/></name> <operator pos:line="16" pos:column="34">=<pos:position pos:line="16" pos:column="35"/></operator> <name pos:line="16" pos:column="36">buffered<pos:position pos:line="16" pos:column="44"/></name></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="17" pos:column="17">len<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">-=<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="24">partial<pos:position pos:line="17" pos:column="31"/></name></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="18" pos:column="17">data<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <operator pos:line="18" pos:column="24">(<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="25">char<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">*<pos:position pos:line="18" pos:column="31"/></operator><operator pos:line="18" pos:column="31">)<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="33">data<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">+<pos:position pos:line="18" pos:column="39"/></operator> <name pos:line="18" pos:column="40">partial<pos:position pos:line="18" pos:column="47"/></name></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></while>
	<return pos:line="20" pos:column="9">return <expr><literal type="number" pos:line="20" pos:column="16">0<pos:position pos:line="20" pos:column="17"/></literal></expr>;<pos:position pos:line="20" pos:column="18"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
