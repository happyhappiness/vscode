<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_298_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">report_missing<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">object<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">obj<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">fprintf<pos:position pos:line="3" pos:column="16"/></name><argument_list pos:line="3" pos:column="16">(<argument><expr><name pos:line="3" pos:column="17">stderr<pos:position pos:line="3" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="25">"Cannot obtain needed %s %s\n"<pos:position pos:line="3" pos:column="55"/></literal></expr></argument>,
		<argument><expr><ternary><condition><expr><name><name pos:line="4" pos:column="17">obj<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">-&gt;<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="22">type<pos:position pos:line="4" pos:column="26"/></name></name></expr> ?<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28"> <expr><name><typename pos:line="4" pos:column="29">typename<pos:position pos:line="4" pos:column="37"/></typename></name><operator pos:line="4" pos:column="37">(<pos:position pos:line="4" pos:column="38"/></operator><name><name pos:line="4" pos:column="38">obj<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">-&gt;<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="43">type<pos:position pos:line="4" pos:column="47"/></name></name><operator pos:line="4" pos:column="47">)<pos:position pos:line="4" pos:column="48"/></operator></expr></then><else pos:line="4" pos:column="48">: <expr><literal type="string" pos:line="4" pos:column="50">"object"<pos:position pos:line="4" pos:column="58"/></literal></expr></else></ternary></expr></argument>,
		<argument><expr><call><name pos:line="5" pos:column="17">oid_to_hex<pos:position pos:line="5" pos:column="27"/></name><argument_list pos:line="5" pos:column="27">(<argument><expr><operator pos:line="5" pos:column="28">&amp;<pos:position pos:line="5" pos:column="33"/></operator><name><name pos:line="5" pos:column="29">obj<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">oid<pos:position pos:line="5" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="40"/></expr_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">is_null_sha1<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><name pos:line="6" pos:column="27">current_commit_sha1<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="48"/></condition><then pos:line="6" pos:column="48">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">fprintf<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">stderr<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="33">"while processing commit %s.\n"<pos:position pos:line="7" pos:column="64"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="8" pos:column="25">sha1_to_hex<pos:position pos:line="8" pos:column="36"/></name><argument_list pos:line="8" pos:column="36">(<argument><expr><name pos:line="8" pos:column="37">current_commit_sha1<pos:position pos:line="8" pos:column="56"/></name></expr></argument>)<pos:position pos:line="8" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="59"/></expr_stmt></block></then></if>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
