<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3990_git-2.8.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">write_each_note_helper<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name><name pos:line="1" pos:column="35">struct<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">tree_write_stack<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">tws<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">path<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="35">unsigned<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">int<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">mode<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">unsigned<pos:position pos:line="3" pos:column="31"/></name> <name pos:line="3" pos:column="32">char<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">sha1<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="43"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">path_len<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><call><name pos:line="5" pos:column="27">strlen<pos:position pos:line="5" pos:column="33"/></name><argument_list pos:line="5" pos:column="33">(<argument><expr><name pos:line="5" pos:column="34">path<pos:position pos:line="5" pos:column="38"/></name></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">int<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">n<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><literal type="number" pos:line="6" pos:column="26">0<pos:position pos:line="6" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">ret<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* Determine common part of tree write stack */</comment>
	<while pos:line="10" pos:column="9">while <condition pos:line="10" pos:column="15">(<expr><name pos:line="10" pos:column="16">tws<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">&amp;&amp;<pos:position pos:line="10" pos:column="30"/></operator> <literal type="number" pos:line="10" pos:column="23">3<pos:position pos:line="10" pos:column="24"/></literal> <operator pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="27">n<pos:position pos:line="10" pos:column="28"/></name> <operator pos:line="10" pos:column="29">&lt;<pos:position pos:line="10" pos:column="33"/></operator> <name pos:line="10" pos:column="31">path_len<pos:position pos:line="10" pos:column="39"/></name> <operator pos:line="10" pos:column="40">&amp;&amp;<pos:position pos:line="10" pos:column="50"/></operator>
	       <call><name pos:line="11" pos:column="16">matches_tree_write_stack<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">tws<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="46">path<pos:position pos:line="11" pos:column="50"/></name> <operator pos:line="11" pos:column="51">+<pos:position pos:line="11" pos:column="52"/></operator> <literal type="number" pos:line="11" pos:column="53">3<pos:position pos:line="11" pos:column="54"/></literal> <operator pos:line="11" pos:column="55">*<pos:position pos:line="11" pos:column="56"/></operator> <name pos:line="11" pos:column="57">n<pos:position pos:line="11" pos:column="58"/></name></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="60"/></condition> <block pos:line="11" pos:column="61">{
		<expr_stmt><expr><name pos:line="12" pos:column="17">n<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">++<pos:position pos:line="12" pos:column="20"/></operator></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">tws<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <name><name pos:line="13" pos:column="23">tws<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">-&gt;<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="28">next<pos:position pos:line="13" pos:column="32"/></name></name></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></while>

	<comment type="block" pos:line="16" pos:column="9">/* tws point to last matching tree_write_stack entry */</comment>
	<expr_stmt><expr><name pos:line="17" pos:column="9">ret<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">tree_write_stack_finish_subtree<pos:position pos:line="17" pos:column="46"/></name><argument_list pos:line="17" pos:column="46">(<argument><expr><name pos:line="17" pos:column="47">tws<pos:position pos:line="17" pos:column="50"/></name></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">ret<pos:position pos:line="18" pos:column="16"/></name></expr>)<pos:position pos:line="18" pos:column="17"/></condition><then pos:line="18" pos:column="17">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">ret<pos:position pos:line="19" pos:column="27"/></name></expr>;<pos:position pos:line="19" pos:column="28"/></return></block></then></if>

	<comment type="block" pos:line="21" pos:column="9">/* Start subtrees needed to satisfy path */</comment>
	<while pos:line="22" pos:column="9">while <condition pos:line="22" pos:column="15">(<expr><literal type="number" pos:line="22" pos:column="16">3<pos:position pos:line="22" pos:column="17"/></literal> <operator pos:line="22" pos:column="18">*<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">n<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">+<pos:position pos:line="22" pos:column="23"/></operator> <literal type="number" pos:line="22" pos:column="24">2<pos:position pos:line="22" pos:column="25"/></literal> <operator pos:line="22" pos:column="26">&lt;<pos:position pos:line="22" pos:column="30"/></operator> <name pos:line="22" pos:column="28">path_len<pos:position pos:line="22" pos:column="36"/></name> <operator pos:line="22" pos:column="37">&amp;&amp;<pos:position pos:line="22" pos:column="47"/></operator> <name><name pos:line="22" pos:column="40">path<pos:position pos:line="22" pos:column="44"/></name><index pos:line="22" pos:column="44">[<expr><literal type="number" pos:line="22" pos:column="45">3<pos:position pos:line="22" pos:column="46"/></literal> <operator pos:line="22" pos:column="47">*<pos:position pos:line="22" pos:column="48"/></operator> <name pos:line="22" pos:column="49">n<pos:position pos:line="22" pos:column="50"/></name> <operator pos:line="22" pos:column="51">+<pos:position pos:line="22" pos:column="52"/></operator> <literal type="number" pos:line="22" pos:column="53">2<pos:position pos:line="22" pos:column="54"/></literal></expr>]<pos:position pos:line="22" pos:column="55"/></index></name> <operator pos:line="22" pos:column="56">==<pos:position pos:line="22" pos:column="58"/></operator> <literal type="char" pos:line="22" pos:column="59">'/'<pos:position pos:line="22" pos:column="62"/></literal></expr>)<pos:position pos:line="22" pos:column="63"/></condition> <block pos:line="22" pos:column="64">{
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">tree_write_stack_init_subtree<pos:position pos:line="23" pos:column="46"/></name><argument_list pos:line="23" pos:column="46">(<argument><expr><name pos:line="23" pos:column="47">tws<pos:position pos:line="23" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="52">path<pos:position pos:line="23" pos:column="56"/></name> <operator pos:line="23" pos:column="57">+<pos:position pos:line="23" pos:column="58"/></operator> <literal type="number" pos:line="23" pos:column="59">3<pos:position pos:line="23" pos:column="60"/></literal> <operator pos:line="23" pos:column="61">*<pos:position pos:line="23" pos:column="62"/></operator> <name pos:line="23" pos:column="63">n<pos:position pos:line="23" pos:column="64"/></name></expr></argument>)<pos:position pos:line="23" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><name pos:line="24" pos:column="17">n<pos:position pos:line="24" pos:column="18"/></name><operator pos:line="24" pos:column="18">++<pos:position pos:line="24" pos:column="20"/></operator></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>
		<expr_stmt><expr><name pos:line="25" pos:column="17">tws<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <name><name pos:line="25" pos:column="23">tws<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">-&gt;<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="28">next<pos:position pos:line="25" pos:column="32"/></name></name></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></while>

	<comment type="block" pos:line="28" pos:column="9">/* There should be no more directory components in the given path */</comment>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">assert<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><call><name pos:line="29" pos:column="16">memchr<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">path<pos:position pos:line="29" pos:column="27"/></name> <operator pos:line="29" pos:column="28">+<pos:position pos:line="29" pos:column="29"/></operator> <literal type="number" pos:line="29" pos:column="30">3<pos:position pos:line="29" pos:column="31"/></literal> <operator pos:line="29" pos:column="32">*<pos:position pos:line="29" pos:column="33"/></operator> <name pos:line="29" pos:column="34">n<pos:position pos:line="29" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="37">'/'<pos:position pos:line="29" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="42">path_len<pos:position pos:line="29" pos:column="50"/></name> <operator pos:line="29" pos:column="51">-<pos:position pos:line="29" pos:column="52"/></operator> <operator pos:line="29" pos:column="53">(<pos:position pos:line="29" pos:column="54"/></operator><literal type="number" pos:line="29" pos:column="54">3<pos:position pos:line="29" pos:column="55"/></literal> <operator pos:line="29" pos:column="56">*<pos:position pos:line="29" pos:column="57"/></operator> <name pos:line="29" pos:column="58">n<pos:position pos:line="29" pos:column="59"/></name><operator pos:line="29" pos:column="59">)<pos:position pos:line="29" pos:column="60"/></operator></expr></argument>)<pos:position pos:line="29" pos:column="61"/></argument_list></call> <operator pos:line="29" pos:column="62">==<pos:position pos:line="29" pos:column="64"/></operator> <name pos:line="29" pos:column="65">NULL<pos:position pos:line="29" pos:column="69"/></name></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="71"/></expr_stmt>

	<comment type="block" pos:line="31" pos:column="9">/* Finally add given entry to the current tree object */</comment>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">write_tree_entry<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><operator pos:line="32" pos:column="26">&amp;<pos:position pos:line="32" pos:column="31"/></operator><name><name pos:line="32" pos:column="27">tws<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">-&gt;<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="32">buf<pos:position pos:line="32" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="37">mode<pos:position pos:line="32" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="43">path<pos:position pos:line="32" pos:column="47"/></name> <operator pos:line="32" pos:column="48">+<pos:position pos:line="32" pos:column="49"/></operator> <literal type="number" pos:line="32" pos:column="50">3<pos:position pos:line="32" pos:column="51"/></literal> <operator pos:line="32" pos:column="52">*<pos:position pos:line="32" pos:column="53"/></operator> <name pos:line="32" pos:column="54">n<pos:position pos:line="32" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="57">path_len<pos:position pos:line="32" pos:column="65"/></name> <operator pos:line="32" pos:column="66">-<pos:position pos:line="32" pos:column="67"/></operator> <operator pos:line="32" pos:column="68">(<pos:position pos:line="32" pos:column="69"/></operator><literal type="number" pos:line="32" pos:column="69">3<pos:position pos:line="32" pos:column="70"/></literal> <operator pos:line="32" pos:column="71">*<pos:position pos:line="32" pos:column="72"/></operator> <name pos:line="32" pos:column="73">n<pos:position pos:line="32" pos:column="74"/></name><operator pos:line="32" pos:column="74">)<pos:position pos:line="32" pos:column="75"/></operator></expr></argument>,
			 <argument><expr><name pos:line="33" pos:column="26">sha1<pos:position pos:line="33" pos:column="30"/></name></expr></argument>)<pos:position pos:line="33" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>

	<return pos:line="35" pos:column="9">return <expr><literal type="number" pos:line="35" pos:column="16">0<pos:position pos:line="35" pos:column="17"/></literal></expr>;<pos:position pos:line="35" pos:column="18"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
