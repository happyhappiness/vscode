<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3033_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">timestamp_t<pos:position pos:line="1" pos:column="19"/></name></type> <name pos:line="1" pos:column="20">check_expirations<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">void<pos:position pos:line="1" pos:column="42"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">timestamp_t<pos:position pos:line="3" pos:column="27"/></name></type> <name pos:line="3" pos:column="28">wait_for_entry_until<pos:position pos:line="3" pos:column="48"/></name></decl>;<pos:position pos:line="3" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><literal type="number" pos:line="4" pos:column="17">0<pos:position pos:line="4" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">timestamp_t<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">now<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><call><name pos:line="5" pos:column="27">time<pos:position pos:line="5" pos:column="31"/></name><argument_list pos:line="5" pos:column="31">(<argument><expr><name pos:line="5" pos:column="32">NULL<pos:position pos:line="5" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">timestamp_t<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">next<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name pos:line="6" pos:column="28">TIME_MAX<pos:position pos:line="6" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/*
	 * Initially give the client 30 seconds to actually contact us
	 * and store a credential before we decide there's no point in
	 * keeping the daemon around.
	 */</comment>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">wait_for_entry_until<pos:position pos:line="13" pos:column="34"/></name></expr>)<pos:position pos:line="13" pos:column="35"/></condition><then pos:line="13" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="17">wait_for_entry_until<pos:position pos:line="14" pos:column="37"/></name> <operator pos:line="14" pos:column="38">=<pos:position pos:line="14" pos:column="39"/></operator> <name pos:line="14" pos:column="40">now<pos:position pos:line="14" pos:column="43"/></name> <operator pos:line="14" pos:column="44">+<pos:position pos:line="14" pos:column="45"/></operator> <literal type="number" pos:line="14" pos:column="46">30<pos:position pos:line="14" pos:column="48"/></literal></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt></block></then></if>

	<while pos:line="16" pos:column="9">while <condition pos:line="16" pos:column="15">(<expr><name pos:line="16" pos:column="16">i<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">&lt;<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="20">entries_nr<pos:position pos:line="16" pos:column="30"/></name></expr>)<pos:position pos:line="16" pos:column="31"/></condition> <block pos:line="16" pos:column="32">{
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name><name pos:line="17" pos:column="21">entries<pos:position pos:line="17" pos:column="28"/></name><index pos:line="17" pos:column="28">[<expr><name pos:line="17" pos:column="29">i<pos:position pos:line="17" pos:column="30"/></name></expr>]<pos:position pos:line="17" pos:column="31"/></index></name><operator pos:line="17" pos:column="31">.<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="32">expiration<pos:position pos:line="17" pos:column="42"/></name> <operator pos:line="17" pos:column="43">&lt;=<pos:position pos:line="17" pos:column="48"/></operator> <name pos:line="17" pos:column="46">now<pos:position pos:line="17" pos:column="49"/></name></expr>)<pos:position pos:line="17" pos:column="50"/></condition><then pos:line="17" pos:column="50"> <block pos:line="17" pos:column="51">{
			<expr_stmt><expr><name pos:line="18" pos:column="25">entries_nr<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">--<pos:position pos:line="18" pos:column="37"/></operator></expr>;<pos:position pos:line="18" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">credential_clear<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><operator pos:line="19" pos:column="42">&amp;<pos:position pos:line="19" pos:column="47"/></operator><name><name pos:line="19" pos:column="43">entries<pos:position pos:line="19" pos:column="50"/></name><index pos:line="19" pos:column="50">[<expr><name pos:line="19" pos:column="51">i<pos:position pos:line="19" pos:column="52"/></name></expr>]<pos:position pos:line="19" pos:column="53"/></index></name><operator pos:line="19" pos:column="53">.<pos:position pos:line="19" pos:column="54"/></operator><name pos:line="19" pos:column="54">item<pos:position pos:line="19" pos:column="58"/></name></expr></argument>)<pos:position pos:line="19" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="60"/></expr_stmt>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><name pos:line="20" pos:column="29">i<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">!=<pos:position pos:line="20" pos:column="33"/></operator> <name pos:line="20" pos:column="34">entries_nr<pos:position pos:line="20" pos:column="44"/></name></expr>)<pos:position pos:line="20" pos:column="45"/></condition><then pos:line="20" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="33">memcpy<pos:position pos:line="21" pos:column="39"/></name><argument_list pos:line="21" pos:column="39">(<argument><expr><operator pos:line="21" pos:column="40">&amp;<pos:position pos:line="21" pos:column="45"/></operator><name><name pos:line="21" pos:column="41">entries<pos:position pos:line="21" pos:column="48"/></name><index pos:line="21" pos:column="48">[<expr><name pos:line="21" pos:column="49">i<pos:position pos:line="21" pos:column="50"/></name></expr>]<pos:position pos:line="21" pos:column="51"/></index></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="53">&amp;<pos:position pos:line="21" pos:column="58"/></operator><name><name pos:line="21" pos:column="54">entries<pos:position pos:line="21" pos:column="61"/></name><index pos:line="21" pos:column="61">[<expr><name pos:line="21" pos:column="62">entries_nr<pos:position pos:line="21" pos:column="72"/></name></expr>]<pos:position pos:line="21" pos:column="73"/></index></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="75">sizeof<argument_list pos:line="21" pos:column="81">(<argument><expr><operator pos:line="21" pos:column="82">*<pos:position pos:line="21" pos:column="83"/></operator><name pos:line="21" pos:column="83">entries<pos:position pos:line="21" pos:column="90"/></name></expr></argument>)<pos:position pos:line="21" pos:column="91"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="93"/></expr_stmt></block></then></if>
			<comment type="block" pos:line="22" pos:column="25">/*
			 * Stick around 30 seconds in case a new credential
			 * shows up (e.g., because we just removed a failed
			 * one, and we will soon get the correct one).
			 */</comment>
			<expr_stmt><expr><name pos:line="27" pos:column="25">wait_for_entry_until<pos:position pos:line="27" pos:column="45"/></name> <operator pos:line="27" pos:column="46">=<pos:position pos:line="27" pos:column="47"/></operator> <name pos:line="27" pos:column="48">now<pos:position pos:line="27" pos:column="51"/></name> <operator pos:line="27" pos:column="52">+<pos:position pos:line="27" pos:column="53"/></operator> <literal type="number" pos:line="27" pos:column="54">30<pos:position pos:line="27" pos:column="56"/></literal></expr>;<pos:position pos:line="27" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="28" pos:column="18"/></block></then>
		<else pos:line="29" pos:column="17">else <block pos:line="29" pos:column="22">{
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name><name pos:line="30" pos:column="29">entries<pos:position pos:line="30" pos:column="36"/></name><index pos:line="30" pos:column="36">[<expr><name pos:line="30" pos:column="37">i<pos:position pos:line="30" pos:column="38"/></name></expr>]<pos:position pos:line="30" pos:column="39"/></index></name><operator pos:line="30" pos:column="39">.<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="40">expiration<pos:position pos:line="30" pos:column="50"/></name> <operator pos:line="30" pos:column="51">&lt;<pos:position pos:line="30" pos:column="55"/></operator> <name pos:line="30" pos:column="53">next<pos:position pos:line="30" pos:column="57"/></name></expr>)<pos:position pos:line="30" pos:column="58"/></condition><then pos:line="30" pos:column="58">
				<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="33">next<pos:position pos:line="31" pos:column="37"/></name> <operator pos:line="31" pos:column="38">=<pos:position pos:line="31" pos:column="39"/></operator> <name><name pos:line="31" pos:column="40">entries<pos:position pos:line="31" pos:column="47"/></name><index pos:line="31" pos:column="47">[<expr><name pos:line="31" pos:column="48">i<pos:position pos:line="31" pos:column="49"/></name></expr>]<pos:position pos:line="31" pos:column="50"/></index></name><operator pos:line="31" pos:column="50">.<pos:position pos:line="31" pos:column="51"/></operator><name pos:line="31" pos:column="51">expiration<pos:position pos:line="31" pos:column="61"/></name></expr>;<pos:position pos:line="31" pos:column="62"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="32" pos:column="25">i<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">++<pos:position pos:line="32" pos:column="28"/></operator></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></else></if>
	}<pos:position pos:line="34" pos:column="10"/></block></while>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><operator pos:line="36" pos:column="13">!<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">entries_nr<pos:position pos:line="36" pos:column="24"/></name></expr>)<pos:position pos:line="36" pos:column="25"/></condition><then pos:line="36" pos:column="25"> <block pos:line="36" pos:column="26">{
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">wait_for_entry_until<pos:position pos:line="37" pos:column="41"/></name> <operator pos:line="37" pos:column="42">&lt;=<pos:position pos:line="37" pos:column="47"/></operator> <name pos:line="37" pos:column="45">now<pos:position pos:line="37" pos:column="48"/></name></expr>)<pos:position pos:line="37" pos:column="49"/></condition><then pos:line="37" pos:column="49">
			<block type="pseudo"><return pos:line="38" pos:column="25">return <expr><literal type="number" pos:line="38" pos:column="32">0<pos:position pos:line="38" pos:column="33"/></literal></expr>;<pos:position pos:line="38" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="39" pos:column="17">next<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">=<pos:position pos:line="39" pos:column="23"/></operator> <name pos:line="39" pos:column="24">wait_for_entry_until<pos:position pos:line="39" pos:column="44"/></name></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>

	<return pos:line="42" pos:column="9">return <expr><name pos:line="42" pos:column="16">next<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">-<pos:position pos:line="42" pos:column="22"/></operator> <name pos:line="42" pos:column="23">now<pos:position pos:line="42" pos:column="26"/></name></expr>;<pos:position pos:line="42" pos:column="27"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
