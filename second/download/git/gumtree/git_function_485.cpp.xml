<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_485.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">commit_tree_extended<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">msg<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">size_t<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">msg_len<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
			 <parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">unsigned<pos:position pos:line="2" pos:column="40"/></name> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">tree<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>,
			 <parameter><decl><type><name><name pos:line="3" pos:column="26">struct<pos:position pos:line="3" pos:column="32"/></name> <name pos:line="3" pos:column="33">commit_list<pos:position pos:line="3" pos:column="44"/></name></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="46">parents<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="55">unsigned<pos:position pos:line="3" pos:column="63"/></name> <name pos:line="3" pos:column="64">char<pos:position pos:line="3" pos:column="68"/></name> <modifier pos:line="3" pos:column="69">*<pos:position pos:line="3" pos:column="70"/></modifier></type><name pos:line="3" pos:column="70">ret<pos:position pos:line="3" pos:column="73"/></name></decl></parameter>,
			 <parameter><decl><type><specifier pos:line="4" pos:column="26">const<pos:position pos:line="4" pos:column="31"/></specifier> <name pos:line="4" pos:column="32">char<pos:position pos:line="4" pos:column="36"/></name> <modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">author<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="4" pos:column="46">const<pos:position pos:line="4" pos:column="51"/></specifier> <name pos:line="4" pos:column="52">char<pos:position pos:line="4" pos:column="56"/></name> <modifier pos:line="4" pos:column="57">*<pos:position pos:line="4" pos:column="58"/></modifier></type><name pos:line="4" pos:column="58">sign_commit<pos:position pos:line="4" pos:column="69"/></name></decl></parameter>,
			 <parameter><decl><type><name><name pos:line="5" pos:column="26">struct<pos:position pos:line="5" pos:column="32"/></name> <name pos:line="5" pos:column="33">commit_extra_header<pos:position pos:line="5" pos:column="52"/></name></name> <modifier pos:line="5" pos:column="53">*<pos:position pos:line="5" pos:column="54"/></modifier></type><name pos:line="5" pos:column="54">extra<pos:position pos:line="5" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="60"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">result<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">encoding_is_utf8<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">strbuf<pos:position pos:line="9" pos:column="22"/></name></name></type> <name pos:line="9" pos:column="23">buffer<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">assert_sha1_type<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">tree<pos:position pos:line="11" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="32">OBJ_TREE<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">memchr<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">msg<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="25">'\0'<pos:position pos:line="13" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="31">msg_len<pos:position pos:line="13" pos:column="38"/></name></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="40"/></condition><then pos:line="13" pos:column="40">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><call><name pos:line="14" pos:column="24">error<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><literal type="string" pos:line="14" pos:column="30">"a NUL byte in commit log message not allowed."<pos:position pos:line="14" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="79"/></return></block></then></if>

	<comment type="block" pos:line="16" pos:column="9">/* Not having i18n.commitencoding is the same as having utf-8 */</comment>
	<expr_stmt><expr><name pos:line="17" pos:column="9">encoding_is_utf8<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">=<pos:position pos:line="17" pos:column="27"/></operator> <call><name pos:line="17" pos:column="28">is_encoding_utf8<pos:position pos:line="17" pos:column="44"/></name><argument_list pos:line="17" pos:column="44">(<argument><expr><name pos:line="17" pos:column="45">git_commit_encoding<pos:position pos:line="17" pos:column="64"/></name></expr></argument>)<pos:position pos:line="17" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="66"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="19" pos:column="9">strbuf_init<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><operator pos:line="19" pos:column="21">&amp;<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="22">buffer<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="30">8192<pos:position pos:line="19" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt> <comment type="block" pos:line="19" pos:column="37">/* should avoid reallocs for the headers */</comment>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">strbuf_addf<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><operator pos:line="20" pos:column="21">&amp;<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="22">buffer<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="30">"tree %s\n"<pos:position pos:line="20" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="43">sha1_to_hex<pos:position pos:line="20" pos:column="54"/></name><argument_list pos:line="20" pos:column="54">(<argument><expr><name pos:line="20" pos:column="55">tree<pos:position pos:line="20" pos:column="59"/></name></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="62"/></expr_stmt>

	<comment type="block" pos:line="22" pos:column="9">/*
	 * NOTE! This ordering means that the same exact tree merged with a
	 * different order of parents will be a _different_ changeset even
	 * if everything else stays the same.
	 */</comment>
	<while pos:line="27" pos:column="9">while <condition pos:line="27" pos:column="15">(<expr><name pos:line="27" pos:column="16">parents<pos:position pos:line="27" pos:column="23"/></name></expr>)<pos:position pos:line="27" pos:column="24"/></condition> <block pos:line="27" pos:column="25">{
		<decl_stmt><decl><type><name><name pos:line="28" pos:column="17">struct<pos:position pos:line="28" pos:column="23"/></name> <name pos:line="28" pos:column="24">commit<pos:position pos:line="28" pos:column="30"/></name></name> <modifier pos:line="28" pos:column="31">*<pos:position pos:line="28" pos:column="32"/></modifier></type><name pos:line="28" pos:column="32">parent<pos:position pos:line="28" pos:column="38"/></name> <init pos:line="28" pos:column="39">= <expr><call><name pos:line="28" pos:column="41">pop_commit<pos:position pos:line="28" pos:column="51"/></name><argument_list pos:line="28" pos:column="51">(<argument><expr><operator pos:line="28" pos:column="52">&amp;<pos:position pos:line="28" pos:column="57"/></operator><name pos:line="28" pos:column="53">parents<pos:position pos:line="28" pos:column="60"/></name></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="62"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">strbuf_addf<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><operator pos:line="29" pos:column="29">&amp;<pos:position pos:line="29" pos:column="34"/></operator><name pos:line="29" pos:column="30">buffer<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="38">"parent %s\n"<pos:position pos:line="29" pos:column="51"/></literal></expr></argument>,
			    <argument><expr><call><name pos:line="30" pos:column="29">oid_to_hex<pos:position pos:line="30" pos:column="39"/></name><argument_list pos:line="30" pos:column="39">(<argument><expr><operator pos:line="30" pos:column="40">&amp;<pos:position pos:line="30" pos:column="45"/></operator><name><name pos:line="30" pos:column="41">parent<pos:position pos:line="30" pos:column="47"/></name><operator pos:line="30" pos:column="47">-&gt;<pos:position pos:line="30" pos:column="52"/></operator><name pos:line="30" pos:column="49">object<pos:position pos:line="30" pos:column="55"/></name><operator pos:line="30" pos:column="55">.<pos:position pos:line="30" pos:column="56"/></operator><name pos:line="30" pos:column="56">oid<pos:position pos:line="30" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="62"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></while>

	<comment type="block" pos:line="33" pos:column="9">/* Person/date information */</comment>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">author<pos:position pos:line="34" pos:column="20"/></name></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="17">author<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">=<pos:position pos:line="35" pos:column="25"/></operator> <call><name pos:line="35" pos:column="26">git_author_info<pos:position pos:line="35" pos:column="41"/></name><argument_list pos:line="35" pos:column="41">(<argument><expr><name pos:line="35" pos:column="42">IDENT_STRICT<pos:position pos:line="35" pos:column="54"/></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="56"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">strbuf_addf<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><operator pos:line="36" pos:column="21">&amp;<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="22">buffer<pos:position pos:line="36" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="30">"author %s\n"<pos:position pos:line="36" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="45">author<pos:position pos:line="36" pos:column="51"/></name></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">strbuf_addf<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><operator pos:line="37" pos:column="21">&amp;<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="22">buffer<pos:position pos:line="37" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="30">"committer %s\n"<pos:position pos:line="37" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="37" pos:column="48">git_committer_info<pos:position pos:line="37" pos:column="66"/></name><argument_list pos:line="37" pos:column="66">(<argument><expr><name pos:line="37" pos:column="67">IDENT_STRICT<pos:position pos:line="37" pos:column="79"/></name></expr></argument>)<pos:position pos:line="37" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="82"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">encoding_is_utf8<pos:position pos:line="38" pos:column="30"/></name></expr>)<pos:position pos:line="38" pos:column="31"/></condition><then pos:line="38" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="17">strbuf_addf<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><operator pos:line="39" pos:column="29">&amp;<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="30">buffer<pos:position pos:line="39" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="38">"encoding %s\n"<pos:position pos:line="39" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="55">git_commit_encoding<pos:position pos:line="39" pos:column="74"/></name></expr></argument>)<pos:position pos:line="39" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="76"/></expr_stmt></block></then></if>

	<while pos:line="41" pos:column="9">while <condition pos:line="41" pos:column="15">(<expr><name pos:line="41" pos:column="16">extra<pos:position pos:line="41" pos:column="21"/></name></expr>)<pos:position pos:line="41" pos:column="22"/></condition> <block pos:line="41" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">add_extra_header<pos:position pos:line="42" pos:column="33"/></name><argument_list pos:line="42" pos:column="33">(<argument><expr><operator pos:line="42" pos:column="34">&amp;<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="35">buffer<pos:position pos:line="42" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="43">extra<pos:position pos:line="42" pos:column="48"/></name></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name pos:line="43" pos:column="17">extra<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <name><name pos:line="43" pos:column="25">extra<pos:position pos:line="43" pos:column="30"/></name><operator pos:line="43" pos:column="30">-&gt;<pos:position pos:line="43" pos:column="35"/></operator><name pos:line="43" pos:column="32">next<pos:position pos:line="43" pos:column="36"/></name></name></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="44" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">strbuf_addch<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><operator pos:line="45" pos:column="22">&amp;<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="23">buffer<pos:position pos:line="45" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="45" pos:column="31">'\n'<pos:position pos:line="45" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="37"/></expr_stmt>

	<comment type="block" pos:line="47" pos:column="9">/* And add the comment */</comment>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">strbuf_add<pos:position pos:line="48" pos:column="19"/></name><argument_list pos:line="48" pos:column="19">(<argument><expr><operator pos:line="48" pos:column="20">&amp;<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="21">buffer<pos:position pos:line="48" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="29">msg<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="34">msg_len<pos:position pos:line="48" pos:column="41"/></name></expr></argument>)<pos:position pos:line="48" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="43"/></expr_stmt>

	<comment type="block" pos:line="50" pos:column="9">/* And check the encoding */</comment>
	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">encoding_is_utf8<pos:position pos:line="51" pos:column="29"/></name> <operator pos:line="51" pos:column="30">&amp;&amp;<pos:position pos:line="51" pos:column="40"/></operator> <operator pos:line="51" pos:column="33">!<pos:position pos:line="51" pos:column="34"/></operator><call><name pos:line="51" pos:column="34">verify_utf8<pos:position pos:line="51" pos:column="45"/></name><argument_list pos:line="51" pos:column="45">(<argument><expr><operator pos:line="51" pos:column="46">&amp;<pos:position pos:line="51" pos:column="51"/></operator><name pos:line="51" pos:column="47">buffer<pos:position pos:line="51" pos:column="53"/></name></expr></argument>)<pos:position pos:line="51" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="55"/></condition><then pos:line="51" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="17">fprintf<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">stderr<pos:position pos:line="52" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="33">commit_utf8_warn<pos:position pos:line="52" pos:column="49"/></name></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="51"/></expr_stmt></block></then></if>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">sign_commit<pos:position pos:line="54" pos:column="24"/></name> <operator pos:line="54" pos:column="25">&amp;&amp;<pos:position pos:line="54" pos:column="35"/></operator> <call><name pos:line="54" pos:column="28">do_sign_commit<pos:position pos:line="54" pos:column="42"/></name><argument_list pos:line="54" pos:column="42">(<argument><expr><operator pos:line="54" pos:column="43">&amp;<pos:position pos:line="54" pos:column="48"/></operator><name pos:line="54" pos:column="44">buffer<pos:position pos:line="54" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="52">sign_commit<pos:position pos:line="54" pos:column="63"/></name></expr></argument>)<pos:position pos:line="54" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="65"/></condition><then pos:line="54" pos:column="65">
		<block type="pseudo"><return pos:line="55" pos:column="17">return <expr><operator pos:line="55" pos:column="24">-<pos:position pos:line="55" pos:column="25"/></operator><literal type="number" pos:line="55" pos:column="25">1<pos:position pos:line="55" pos:column="26"/></literal></expr>;<pos:position pos:line="55" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="57" pos:column="9">result<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">=<pos:position pos:line="57" pos:column="17"/></operator> <call><name pos:line="57" pos:column="18">write_sha1_file<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">(<argument><expr><name><name pos:line="57" pos:column="34">buffer<pos:position pos:line="57" pos:column="40"/></name><operator pos:line="57" pos:column="40">.<pos:position pos:line="57" pos:column="41"/></operator><name pos:line="57" pos:column="41">buf<pos:position pos:line="57" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="46">buffer<pos:position pos:line="57" pos:column="52"/></name><operator pos:line="57" pos:column="52">.<pos:position pos:line="57" pos:column="53"/></operator><name pos:line="57" pos:column="53">len<pos:position pos:line="57" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="58">commit_type<pos:position pos:line="57" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="71">ret<pos:position pos:line="57" pos:column="74"/></name></expr></argument>)<pos:position pos:line="57" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="76"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">strbuf_release<pos:position pos:line="58" pos:column="23"/></name><argument_list pos:line="58" pos:column="23">(<argument><expr><operator pos:line="58" pos:column="24">&amp;<pos:position pos:line="58" pos:column="29"/></operator><name pos:line="58" pos:column="25">buffer<pos:position pos:line="58" pos:column="31"/></name></expr></argument>)<pos:position pos:line="58" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="33"/></expr_stmt>
	<return pos:line="59" pos:column="9">return <expr><name pos:line="59" pos:column="16">result<pos:position pos:line="59" pos:column="22"/></name></expr>;<pos:position pos:line="59" pos:column="23"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
