<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3005_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">make_patch<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">commit<pos:position pos:line="1" pos:column="36"/></name></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">commit<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="46">struct<pos:position pos:line="1" pos:column="52"/></name> <name pos:line="1" pos:column="53">replay_opts<pos:position pos:line="1" pos:column="64"/></name></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">opts<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">buf<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">STRBUF_INIT<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">rev_info<pos:position pos:line="4" pos:column="24"/></name></name></type> <name pos:line="4" pos:column="25">log_tree_opt<pos:position pos:line="4" pos:column="37"/></name></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">subject<pos:position pos:line="5" pos:column="28"/></name></decl>, <modifier pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="31">p<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">res<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><literal type="number" pos:line="6" pos:column="19">0<pos:position pos:line="6" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">p<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <call><name pos:line="8" pos:column="13">short_commit_name<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">commit<pos:position pos:line="8" pos:column="37"/></name></expr></argument>)<pos:position pos:line="8" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="39"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">write_message<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">p<pos:position pos:line="9" pos:column="28"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="30">strlen<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><name pos:line="9" pos:column="37">p<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="41">rebase_path_stopped_sha<pos:position pos:line="9" pos:column="64"/></name><argument_list pos:line="9" pos:column="64">()<pos:position pos:line="9" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="68">1<pos:position pos:line="9" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call> <operator pos:line="9" pos:column="71">&lt;<pos:position pos:line="9" pos:column="75"/></operator> <literal type="number" pos:line="9" pos:column="73">0<pos:position pos:line="9" pos:column="74"/></literal></expr>)<pos:position pos:line="9" pos:column="75"/></condition><then pos:line="9" pos:column="75">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><operator pos:line="10" pos:column="24">-<pos:position pos:line="10" pos:column="25"/></operator><literal type="number" pos:line="10" pos:column="25">1<pos:position pos:line="10" pos:column="26"/></literal></expr>;<pos:position pos:line="10" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">strbuf_addf<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><operator pos:line="12" pos:column="21">&amp;<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="22">buf<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="27">"%s/patch"<pos:position pos:line="12" pos:column="37"/></literal></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="39">get_dir<pos:position pos:line="12" pos:column="46"/></name><argument_list pos:line="12" pos:column="46">(<argument><expr><name pos:line="12" pos:column="47">opts<pos:position pos:line="12" pos:column="51"/></name></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">memset<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><operator pos:line="13" pos:column="16">&amp;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="17">log_tree_opt<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="31">0<pos:position pos:line="13" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="34">sizeof<argument_list pos:line="13" pos:column="40">(<argument><expr><name pos:line="13" pos:column="41">log_tree_opt<pos:position pos:line="13" pos:column="53"/></name></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">init_revisions<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><operator pos:line="14" pos:column="24">&amp;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="25">log_tree_opt<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="39">NULL<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">log_tree_opt<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">.<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">abbrev<pos:position pos:line="15" pos:column="28"/></name></name> <operator pos:line="15" pos:column="29">=<pos:position pos:line="15" pos:column="30"/></operator> <literal type="number" pos:line="15" pos:column="31">0<pos:position pos:line="15" pos:column="32"/></literal></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">log_tree_opt<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">.<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">diff<pos:position pos:line="16" pos:column="26"/></name></name> <operator pos:line="16" pos:column="27">=<pos:position pos:line="16" pos:column="28"/></operator> <literal type="number" pos:line="16" pos:column="29">1<pos:position pos:line="16" pos:column="30"/></literal></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">log_tree_opt<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">.<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">diffopt<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">.<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">output_format<pos:position pos:line="17" pos:column="43"/></name></name> <operator pos:line="17" pos:column="44">=<pos:position pos:line="17" pos:column="45"/></operator> <name pos:line="17" pos:column="46">DIFF_FORMAT_PATCH<pos:position pos:line="17" pos:column="63"/></name></expr>;<pos:position pos:line="17" pos:column="64"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">log_tree_opt<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">.<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">disable_stdin<pos:position pos:line="18" pos:column="35"/></name></name> <operator pos:line="18" pos:column="36">=<pos:position pos:line="18" pos:column="37"/></operator> <literal type="number" pos:line="18" pos:column="38">1<pos:position pos:line="18" pos:column="39"/></literal></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">log_tree_opt<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">no_commit_id<pos:position pos:line="19" pos:column="34"/></name></name> <operator pos:line="19" pos:column="35">=<pos:position pos:line="19" pos:column="36"/></operator> <literal type="number" pos:line="19" pos:column="37">1<pos:position pos:line="19" pos:column="38"/></literal></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">log_tree_opt<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">.<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">diffopt<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">.<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">file<pos:position pos:line="20" pos:column="34"/></name></name> <operator pos:line="20" pos:column="35">=<pos:position pos:line="20" pos:column="36"/></operator> <call><name pos:line="20" pos:column="37">fopen<pos:position pos:line="20" pos:column="42"/></name><argument_list pos:line="20" pos:column="42">(<argument><expr><name><name pos:line="20" pos:column="43">buf<pos:position pos:line="20" pos:column="46"/></name><operator pos:line="20" pos:column="46">.<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="47">buf<pos:position pos:line="20" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="52">"w"<pos:position pos:line="20" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">log_tree_opt<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">.<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">diffopt<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">.<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="30">use_color<pos:position pos:line="21" pos:column="39"/></name></name> <operator pos:line="21" pos:column="40">=<pos:position pos:line="21" pos:column="41"/></operator> <name pos:line="21" pos:column="42">GIT_COLOR_NEVER<pos:position pos:line="21" pos:column="57"/></name></expr>;<pos:position pos:line="21" pos:column="58"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name><name pos:line="22" pos:column="14">log_tree_opt<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">.<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="27">diffopt<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">.<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="35">file<pos:position pos:line="22" pos:column="39"/></name></name></expr>)<pos:position pos:line="22" pos:column="40"/></condition><then pos:line="22" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">res<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">|=<pos:position pos:line="23" pos:column="23"/></operator> <call><name pos:line="23" pos:column="24">error_errno<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><call><name pos:line="23" pos:column="36">_<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><literal type="string" pos:line="23" pos:column="38">"could not open '%s'"<pos:position pos:line="23" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="62">buf<pos:position pos:line="23" pos:column="65"/></name><operator pos:line="23" pos:column="65">.<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="66">buf<pos:position pos:line="23" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="71"/></expr_stmt></block></then>
	<else pos:line="24" pos:column="9">else <block pos:line="24" pos:column="14">{
		<expr_stmt><expr><name pos:line="25" pos:column="17">res<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">|=<pos:position pos:line="25" pos:column="23"/></operator> <call><name pos:line="25" pos:column="24">log_tree_commit<pos:position pos:line="25" pos:column="39"/></name><argument_list pos:line="25" pos:column="39">(<argument><expr><operator pos:line="25" pos:column="40">&amp;<pos:position pos:line="25" pos:column="45"/></operator><name pos:line="25" pos:column="41">log_tree_opt<pos:position pos:line="25" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="55">commit<pos:position pos:line="25" pos:column="61"/></name></expr></argument>)<pos:position pos:line="25" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">fclose<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name><name pos:line="26" pos:column="24">log_tree_opt<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">.<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="37">diffopt<pos:position pos:line="26" pos:column="44"/></name><operator pos:line="26" pos:column="44">.<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="45">file<pos:position pos:line="26" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">strbuf_reset<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><operator pos:line="28" pos:column="22">&amp;<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="23">buf<pos:position pos:line="28" pos:column="26"/></name></expr></argument>)<pos:position pos:line="28" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="30" pos:column="9">strbuf_addf<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><operator pos:line="30" pos:column="21">&amp;<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="22">buf<pos:position pos:line="30" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="27">"%s/message"<pos:position pos:line="30" pos:column="39"/></literal></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="41">get_dir<pos:position pos:line="30" pos:column="48"/></name><argument_list pos:line="30" pos:column="48">(<argument><expr><name pos:line="30" pos:column="49">opts<pos:position pos:line="30" pos:column="53"/></name></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><call><name pos:line="31" pos:column="14">file_exists<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name><name pos:line="31" pos:column="26">buf<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">.<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="30">buf<pos:position pos:line="31" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35"> <block pos:line="31" pos:column="36">{
		<decl_stmt><decl><type><specifier pos:line="32" pos:column="17">const<pos:position pos:line="32" pos:column="22"/></specifier> <name pos:line="32" pos:column="23">char<pos:position pos:line="32" pos:column="27"/></name> <modifier pos:line="32" pos:column="28">*<pos:position pos:line="32" pos:column="29"/></modifier></type><name pos:line="32" pos:column="29">commit_buffer<pos:position pos:line="32" pos:column="42"/></name> <init pos:line="32" pos:column="43">= <expr><call><name pos:line="32" pos:column="45">get_commit_buffer<pos:position pos:line="32" pos:column="62"/></name><argument_list pos:line="32" pos:column="62">(<argument><expr><name pos:line="32" pos:column="63">commit<pos:position pos:line="32" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="71">NULL<pos:position pos:line="32" pos:column="75"/></name></expr></argument>)<pos:position pos:line="32" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="77"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">find_commit_subject<pos:position pos:line="33" pos:column="36"/></name><argument_list pos:line="33" pos:column="36">(<argument><expr><name pos:line="33" pos:column="37">commit_buffer<pos:position pos:line="33" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="52">&amp;<pos:position pos:line="33" pos:column="57"/></operator><name pos:line="33" pos:column="53">subject<pos:position pos:line="33" pos:column="60"/></name></expr></argument>)<pos:position pos:line="33" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">res<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">|=<pos:position pos:line="34" pos:column="23"/></operator> <call><name pos:line="34" pos:column="24">write_message<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">subject<pos:position pos:line="34" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="47">strlen<pos:position pos:line="34" pos:column="53"/></name><argument_list pos:line="34" pos:column="53">(<argument><expr><name pos:line="34" pos:column="54">subject<pos:position pos:line="34" pos:column="61"/></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="64">buf<pos:position pos:line="34" pos:column="67"/></name><operator pos:line="34" pos:column="67">.<pos:position pos:line="34" pos:column="68"/></operator><name pos:line="34" pos:column="68">buf<pos:position pos:line="34" pos:column="71"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="73">1<pos:position pos:line="34" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">unuse_commit_buffer<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><name pos:line="35" pos:column="37">commit<pos:position pos:line="35" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="45">commit_buffer<pos:position pos:line="35" pos:column="58"/></name></expr></argument>)<pos:position pos:line="35" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">strbuf_release<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><operator pos:line="37" pos:column="24">&amp;<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="25">buf<pos:position pos:line="37" pos:column="28"/></name></expr></argument>)<pos:position pos:line="37" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt>

	<return pos:line="39" pos:column="9">return <expr><name pos:line="39" pos:column="16">res<pos:position pos:line="39" pos:column="19"/></name></expr>;<pos:position pos:line="39" pos:column="20"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
