<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4106_git-2.10.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">init_notes<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name><name pos:line="1" pos:column="17">struct<pos:position pos:line="1" pos:column="23"/></name> <name pos:line="1" pos:column="24">notes_tree<pos:position pos:line="1" pos:column="34"/></name></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">t<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">notes_ref<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">combine_notes_fn<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">combine_notes<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">int<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">flags<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">sha1<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">20<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="4" pos:column="33">object_sha1<pos:position pos:line="4" pos:column="44"/></name><index pos:line="4" pos:column="44">[<expr><literal type="number" pos:line="4" pos:column="45">20<pos:position pos:line="4" pos:column="47"/></literal></expr>]<pos:position pos:line="4" pos:column="48"/></index></name></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">mode<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">leaf_node<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">root_tree<pos:position pos:line="6" pos:column="35"/></name></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">t<pos:position pos:line="8" pos:column="15"/></name></expr>)<pos:position pos:line="8" pos:column="16"/></condition><then pos:line="8" pos:column="16">
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">t<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <operator pos:line="9" pos:column="21">&amp;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="22">default_notes_tree<pos:position pos:line="9" pos:column="40"/></name></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><operator pos:line="10" pos:column="16">!<pos:position pos:line="10" pos:column="17"/></operator><name><name pos:line="10" pos:column="17">t<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">-&gt;<pos:position pos:line="10" pos:column="23"/></operator><name pos:line="10" pos:column="20">initialized<pos:position pos:line="10" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">notes_ref<pos:position pos:line="12" pos:column="23"/></name></expr>)<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="17">notes_ref<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <call><name pos:line="13" pos:column="29">default_notes_ref<pos:position pos:line="13" pos:column="46"/></name><argument_list pos:line="13" pos:column="46">()<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">combine_notes<pos:position pos:line="15" pos:column="27"/></name></expr>)<pos:position pos:line="15" pos:column="28"/></condition><then pos:line="15" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="17">combine_notes<pos:position pos:line="16" pos:column="30"/></name> <operator pos:line="16" pos:column="31">=<pos:position pos:line="16" pos:column="32"/></operator> <name pos:line="16" pos:column="33">combine_notes_concatenate<pos:position pos:line="16" pos:column="58"/></name></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="18" pos:column="9">t<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">-&gt;<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="12">root<pos:position pos:line="18" pos:column="16"/></name></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <operator pos:line="18" pos:column="19">(<pos:position pos:line="18" pos:column="20"/></operator>struct <name pos:line="18" pos:column="27">int_node<pos:position pos:line="18" pos:column="35"/></name> <operator pos:line="18" pos:column="36">*<pos:position pos:line="18" pos:column="37"/></operator><operator pos:line="18" pos:column="37">)<pos:position pos:line="18" pos:column="38"/></operator> <call><name pos:line="18" pos:column="39">xcalloc<pos:position pos:line="18" pos:column="46"/></name><argument_list pos:line="18" pos:column="46">(<argument><expr><literal type="number" pos:line="18" pos:column="47">1<pos:position pos:line="18" pos:column="48"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="50">sizeof<argument_list pos:line="18" pos:column="56">(<argument><expr pos:line="18" pos:column="57">struct <name pos:line="18" pos:column="64">int_node<pos:position pos:line="18" pos:column="72"/></name></expr></argument>)<pos:position pos:line="18" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="75"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">t<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">-&gt;<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="12">first_non_note<pos:position pos:line="19" pos:column="26"/></name></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <name pos:line="19" pos:column="29">NULL<pos:position pos:line="19" pos:column="33"/></name></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">t<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">prev_non_note<pos:position pos:line="20" pos:column="25"/></name></name> <operator pos:line="20" pos:column="26">=<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="28">NULL<pos:position pos:line="20" pos:column="32"/></name></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">t<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">-&gt;<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="12">ref<pos:position pos:line="21" pos:column="15"/></name></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <call><name pos:line="21" pos:column="18">xstrdup_or_null<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">notes_ref<pos:position pos:line="21" pos:column="43"/></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">t<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">-&gt;<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="12">update_ref<pos:position pos:line="22" pos:column="22"/></name></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <ternary><condition><expr><operator pos:line="22" pos:column="25">(<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">flags<pos:position pos:line="22" pos:column="31"/></name> <operator pos:line="22" pos:column="32">&amp;<pos:position pos:line="22" pos:column="37"/></operator> <name pos:line="22" pos:column="34">NOTES_INIT_WRITABLE<pos:position pos:line="22" pos:column="53"/></name><operator pos:line="22" pos:column="53">)<pos:position pos:line="22" pos:column="54"/></operator></expr> ?<pos:position pos:line="22" pos:column="56"/></condition><then pos:line="22" pos:column="56"> <expr><name><name pos:line="22" pos:column="57">t<pos:position pos:line="22" pos:column="58"/></name><operator pos:line="22" pos:column="58">-&gt;<pos:position pos:line="22" pos:column="63"/></operator><name pos:line="22" pos:column="60">ref<pos:position pos:line="22" pos:column="63"/></name></name></expr> <pos:position pos:line="22" pos:column="64"/></then><else pos:line="22" pos:column="64">: <expr><name pos:line="22" pos:column="66">NULL<pos:position pos:line="22" pos:column="70"/></name></expr></else></ternary></expr>;<pos:position pos:line="22" pos:column="71"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">t<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">-&gt;<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="12">combine_notes<pos:position pos:line="23" pos:column="25"/></name></name> <operator pos:line="23" pos:column="26">=<pos:position pos:line="23" pos:column="27"/></operator> <name pos:line="23" pos:column="28">combine_notes<pos:position pos:line="23" pos:column="41"/></name></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">t<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">initialized<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <literal type="number" pos:line="24" pos:column="26">1<pos:position pos:line="24" pos:column="27"/></literal></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="25" pos:column="9">t<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">dirty<pos:position pos:line="25" pos:column="17"/></name></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <literal type="number" pos:line="25" pos:column="20">0<pos:position pos:line="25" pos:column="21"/></literal></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">flags<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">&amp;<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="21">NOTES_INIT_EMPTY<pos:position pos:line="27" pos:column="37"/></name> <operator pos:line="27" pos:column="38">||<pos:position pos:line="27" pos:column="40"/></operator> <operator pos:line="27" pos:column="41">!<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="42">notes_ref<pos:position pos:line="27" pos:column="51"/></name> <operator pos:line="27" pos:column="52">||<pos:position pos:line="27" pos:column="54"/></operator>
	    <call><name pos:line="28" pos:column="13">get_sha1_treeish<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">notes_ref<pos:position pos:line="28" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">object_sha1<pos:position pos:line="28" pos:column="52"/></name></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="54"/></condition><then pos:line="28" pos:column="54">
		<block type="pseudo"><return pos:line="29" pos:column="17">return;<pos:position pos:line="29" pos:column="24"/></return></block></then></if>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">flags<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">&amp;<pos:position pos:line="30" pos:column="24"/></operator> <name pos:line="30" pos:column="21">NOTES_INIT_WRITABLE<pos:position pos:line="30" pos:column="40"/></name> <operator pos:line="30" pos:column="41">&amp;&amp;<pos:position pos:line="30" pos:column="51"/></operator> <call><name pos:line="30" pos:column="44">read_ref<pos:position pos:line="30" pos:column="52"/></name><argument_list pos:line="30" pos:column="52">(<argument><expr><name pos:line="30" pos:column="53">notes_ref<pos:position pos:line="30" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="64">object_sha1<pos:position pos:line="30" pos:column="75"/></name></expr></argument>)<pos:position pos:line="30" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="77"/></condition><then pos:line="30" pos:column="77">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="17">die<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><literal type="string" pos:line="31" pos:column="21">"Cannot use notes ref %s"<pos:position pos:line="31" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="48">notes_ref<pos:position pos:line="31" pos:column="57"/></name></expr></argument>)<pos:position pos:line="31" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="59"/></expr_stmt></block></then></if>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">get_tree_entry<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">(<argument><expr><name pos:line="32" pos:column="28">object_sha1<pos:position pos:line="32" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="41">""<pos:position pos:line="32" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="45">sha1<pos:position pos:line="32" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="51">&amp;<pos:position pos:line="32" pos:column="56"/></operator><name pos:line="32" pos:column="52">mode<pos:position pos:line="32" pos:column="56"/></name></expr></argument>)<pos:position pos:line="32" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="58"/></condition><then pos:line="32" pos:column="58">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="17">die<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><literal type="string" pos:line="33" pos:column="21">"Failed to read notes tree referenced by %s (%s)"<pos:position pos:line="33" pos:column="70"/></literal></expr></argument>,
		    <argument><expr><name pos:line="34" pos:column="21">notes_ref<pos:position pos:line="34" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="32">sha1_to_hex<pos:position pos:line="34" pos:column="43"/></name><argument_list pos:line="34" pos:column="43">(<argument><expr><name pos:line="34" pos:column="44">object_sha1<pos:position pos:line="34" pos:column="55"/></name></expr></argument>)<pos:position pos:line="34" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="58"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="36" pos:column="9">hashclr<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">(<argument><expr><name><name pos:line="36" pos:column="17">root_tree<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">.<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="27">key_sha1<pos:position pos:line="36" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">hashcpy<pos:position pos:line="37" pos:column="16"/></name><argument_list pos:line="37" pos:column="16">(<argument><expr><name><name pos:line="37" pos:column="17">root_tree<pos:position pos:line="37" pos:column="26"/></name><operator pos:line="37" pos:column="26">.<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="27">val_sha1<pos:position pos:line="37" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="37">sha1<pos:position pos:line="37" pos:column="41"/></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">load_subtree<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">t<pos:position pos:line="38" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="25">&amp;<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="26">root_tree<pos:position pos:line="38" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="37">t<pos:position pos:line="38" pos:column="38"/></name><operator pos:line="38" pos:column="38">-&gt;<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="40">root<pos:position pos:line="38" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="46">0<pos:position pos:line="38" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="49"/></expr_stmt>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
