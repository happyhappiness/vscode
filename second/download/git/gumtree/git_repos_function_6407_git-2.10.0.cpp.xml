<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6407_git-2.10.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">check_matching<pos:position pos:line="3" pos:column="15"/></name> <parameter_list pos:line="3" pos:column="16">(<parameter><decl><type><name pos:line="3" pos:column="17">re_match_context_t<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">mctx<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="43">int<pos:position pos:line="3" pos:column="46"/></name></type> <name pos:line="3" pos:column="47">fl_longest_match<pos:position pos:line="3" pos:column="63"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="4" pos:column="17">int<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">p_match_first<pos:position pos:line="4" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="36"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">re_dfa_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier><specifier pos:line="6" pos:column="19">const<pos:position pos:line="6" pos:column="24"/></specifier></type> <name pos:line="6" pos:column="25">dfa<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name><name pos:line="6" pos:column="31">mctx<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">dfa<pos:position pos:line="6" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">reg_errcode_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">err<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">match<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><literal type="number" pos:line="8" pos:column="15">0<pos:position pos:line="8" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">match_last<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><operator pos:line="9" pos:column="20">-<pos:position pos:line="9" pos:column="21"/></operator><literal type="number" pos:line="9" pos:column="21">1<pos:position pos:line="9" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">cur_str_idx<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><call><name pos:line="10" pos:column="21">re_string_cur_idx<pos:position pos:line="10" pos:column="38"/></name> <argument_list pos:line="10" pos:column="39">(<argument><expr><operator pos:line="10" pos:column="40">&amp;<pos:position pos:line="10" pos:column="45"/></operator><name><name pos:line="10" pos:column="41">mctx<pos:position pos:line="10" pos:column="45"/></name><operator pos:line="10" pos:column="45">-&gt;<pos:position pos:line="10" pos:column="50"/></operator><name pos:line="10" pos:column="47">input<pos:position pos:line="10" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="54"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">re_dfastate_t<pos:position pos:line="11" pos:column="16"/></name> <modifier pos:line="11" pos:column="17">*<pos:position pos:line="11" pos:column="18"/></modifier></type><name pos:line="11" pos:column="18">cur_state<pos:position pos:line="11" pos:column="27"/></name></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">at_init_state<pos:position pos:line="12" pos:column="20"/></name> <init pos:line="12" pos:column="21">= <expr><name pos:line="12" pos:column="23">p_match_first<pos:position pos:line="12" pos:column="36"/></name> <operator pos:line="12" pos:column="37">!=<pos:position pos:line="12" pos:column="39"/></operator> <name pos:line="12" pos:column="40">NULL<pos:position pos:line="12" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">next_start_idx<pos:position pos:line="13" pos:column="21"/></name> <init pos:line="13" pos:column="22">= <expr><name pos:line="13" pos:column="24">cur_str_idx<pos:position pos:line="13" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="36"/></decl_stmt>

  <expr_stmt><expr><name pos:line="15" pos:column="3">err<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <name pos:line="15" pos:column="9">REG_NOERROR<pos:position pos:line="15" pos:column="20"/></name></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="16" pos:column="3">cur_state<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">acquire_init_state_context<pos:position pos:line="16" pos:column="41"/></name> <argument_list pos:line="16" pos:column="42">(<argument><expr><operator pos:line="16" pos:column="43">&amp;<pos:position pos:line="16" pos:column="48"/></operator><name pos:line="16" pos:column="44">err<pos:position pos:line="16" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="49">mctx<pos:position pos:line="16" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="55">cur_str_idx<pos:position pos:line="16" pos:column="66"/></name></expr></argument>)<pos:position pos:line="16" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="68"/></expr_stmt>
  <comment type="block" pos:line="17" pos:column="3">/* An initial state must not be NULL (invalid).  */</comment>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><call><name pos:line="18" pos:column="7">BE<pos:position pos:line="18" pos:column="9"/></name> <argument_list pos:line="18" pos:column="10">(<argument><expr><name pos:line="18" pos:column="11">cur_state<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">==<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">NULL<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="33"/></condition><then pos:line="18" pos:column="33">
    <block pos:line="19" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">assert<pos:position pos:line="20" pos:column="13"/></name> <argument_list pos:line="20" pos:column="14">(<argument><expr><name pos:line="20" pos:column="15">err<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">==<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">REG_ESPACE<pos:position pos:line="20" pos:column="32"/></name></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
      <return pos:line="21" pos:column="7">return <expr><operator pos:line="21" pos:column="14">-<pos:position pos:line="21" pos:column="15"/></operator><literal type="number" pos:line="21" pos:column="15">2<pos:position pos:line="21" pos:column="16"/></literal></expr>;<pos:position pos:line="21" pos:column="17"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name><name pos:line="24" pos:column="7">mctx<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">-&gt;<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="13">state_log<pos:position pos:line="24" pos:column="22"/></name></name> <operator pos:line="24" pos:column="23">!=<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="26">NULL<pos:position pos:line="24" pos:column="30"/></name></expr>)<pos:position pos:line="24" pos:column="31"/></condition><then pos:line="24" pos:column="31">
    <block pos:line="25" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="26" pos:column="7">mctx<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">-&gt;<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="13">state_log<pos:position pos:line="26" pos:column="22"/></name><index pos:line="26" pos:column="22">[<expr><name pos:line="26" pos:column="23">cur_str_idx<pos:position pos:line="26" pos:column="34"/></name></expr>]<pos:position pos:line="26" pos:column="35"/></index></name> <operator pos:line="26" pos:column="36">=<pos:position pos:line="26" pos:column="37"/></operator> <name pos:line="26" pos:column="38">cur_state<pos:position pos:line="26" pos:column="47"/></name></expr>;<pos:position pos:line="26" pos:column="48"/></expr_stmt>

      <comment type="block" pos:line="28" pos:column="7">/* Check OP_OPEN_SUBEXP in the initial state in case that we use them
	 later.  E.g. Processing back references.  */</comment>
      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><call><name pos:line="30" pos:column="11">BE<pos:position pos:line="30" pos:column="13"/></name> <argument_list pos:line="30" pos:column="14">(<argument><expr><name><name pos:line="30" pos:column="15">dfa<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">-&gt;<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="20">nbackref<pos:position pos:line="30" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="30">0<pos:position pos:line="30" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="33"/></condition><then pos:line="30" pos:column="33">
	<block pos:line="31" pos:column="9">{
	  <expr_stmt><expr><name pos:line="32" pos:column="11">at_init_state<pos:position pos:line="32" pos:column="24"/></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator> <literal type="number" pos:line="32" pos:column="27">0<pos:position pos:line="32" pos:column="28"/></literal></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="33" pos:column="11">err<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <call><name pos:line="33" pos:column="17">check_subexp_matching_top<pos:position pos:line="33" pos:column="42"/></name> <argument_list pos:line="33" pos:column="43">(<argument><expr><name pos:line="33" pos:column="44">mctx<pos:position pos:line="33" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="50">&amp;<pos:position pos:line="33" pos:column="55"/></operator><name><name pos:line="33" pos:column="51">cur_state<pos:position pos:line="33" pos:column="60"/></name><operator pos:line="33" pos:column="60">-&gt;<pos:position pos:line="33" pos:column="65"/></operator><name pos:line="33" pos:column="62">nodes<pos:position pos:line="33" pos:column="67"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="69">0<pos:position pos:line="33" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="72"/></expr_stmt>
	  <if pos:line="34" pos:column="11">if <condition pos:line="34" pos:column="14">(<expr><call><name pos:line="34" pos:column="15">BE<pos:position pos:line="34" pos:column="17"/></name> <argument_list pos:line="34" pos:column="18">(<argument><expr><name pos:line="34" pos:column="19">err<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">!=<pos:position pos:line="34" pos:column="25"/></operator> <name pos:line="34" pos:column="26">REG_NOERROR<pos:position pos:line="34" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="39">0<pos:position pos:line="34" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="42"/></condition><then pos:line="34" pos:column="42">
	    <block type="pseudo"><return pos:line="35" pos:column="13">return <expr><name pos:line="35" pos:column="20">err<pos:position pos:line="35" pos:column="23"/></name></expr>;<pos:position pos:line="35" pos:column="24"/></return></block></then></if>

	  <if pos:line="37" pos:column="11">if <condition pos:line="37" pos:column="14">(<expr><name><name pos:line="37" pos:column="15">cur_state<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">-&gt;<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="26">has_backref<pos:position pos:line="37" pos:column="37"/></name></name></expr>)<pos:position pos:line="37" pos:column="38"/></condition><then pos:line="37" pos:column="38">
	    <block pos:line="38" pos:column="13">{
	      <expr_stmt><expr><name pos:line="39" pos:column="15">err<pos:position pos:line="39" pos:column="18"/></name> <operator pos:line="39" pos:column="19">=<pos:position pos:line="39" pos:column="20"/></operator> <call><name pos:line="39" pos:column="21">transit_state_bkref<pos:position pos:line="39" pos:column="40"/></name> <argument_list pos:line="39" pos:column="41">(<argument><expr><name pos:line="39" pos:column="42">mctx<pos:position pos:line="39" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="48">&amp;<pos:position pos:line="39" pos:column="53"/></operator><name><name pos:line="39" pos:column="49">cur_state<pos:position pos:line="39" pos:column="58"/></name><operator pos:line="39" pos:column="58">-&gt;<pos:position pos:line="39" pos:column="63"/></operator><name pos:line="39" pos:column="60">nodes<pos:position pos:line="39" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="67"/></expr_stmt>
	      <if pos:line="40" pos:column="15">if <condition pos:line="40" pos:column="18">(<expr><call><name pos:line="40" pos:column="19">BE<pos:position pos:line="40" pos:column="21"/></name> <argument_list pos:line="40" pos:column="22">(<argument><expr><name pos:line="40" pos:column="23">err<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">!=<pos:position pos:line="40" pos:column="29"/></operator> <name pos:line="40" pos:column="30">REG_NOERROR<pos:position pos:line="40" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="43">0<pos:position pos:line="40" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="46"/></condition><then pos:line="40" pos:column="46">
		<block type="pseudo"><return pos:line="41" pos:column="17">return <expr><name pos:line="41" pos:column="24">err<pos:position pos:line="41" pos:column="27"/></name></expr>;<pos:position pos:line="41" pos:column="28"/></return></block></then></if>
	    }<pos:position pos:line="42" pos:column="14"/></block></then></if>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="46" pos:column="3">/* If the RE accepts NULL string.  */</comment>
  <if pos:line="47" pos:column="3">if <condition pos:line="47" pos:column="6">(<expr><call><name pos:line="47" pos:column="7">BE<pos:position pos:line="47" pos:column="9"/></name> <argument_list pos:line="47" pos:column="10">(<argument><expr><name><name pos:line="47" pos:column="11">cur_state<pos:position pos:line="47" pos:column="20"/></name><operator pos:line="47" pos:column="20">-&gt;<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="22">halt<pos:position pos:line="47" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="28">0<pos:position pos:line="47" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="31"/></condition><then pos:line="47" pos:column="31">
    <block pos:line="48" pos:column="5">{
      <if pos:line="49" pos:column="7">if <condition pos:line="49" pos:column="10">(<expr><operator pos:line="49" pos:column="11">!<pos:position pos:line="49" pos:column="12"/></operator><name><name pos:line="49" pos:column="12">cur_state<pos:position pos:line="49" pos:column="21"/></name><operator pos:line="49" pos:column="21">-&gt;<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="23">has_constraint<pos:position pos:line="49" pos:column="37"/></name></name>
	  <operator pos:line="50" pos:column="11">||<pos:position pos:line="50" pos:column="13"/></operator> <call><name pos:line="50" pos:column="14">check_halt_state_context<pos:position pos:line="50" pos:column="38"/></name> <argument_list pos:line="50" pos:column="39">(<argument><expr><name pos:line="50" pos:column="40">mctx<pos:position pos:line="50" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="46">cur_state<pos:position pos:line="50" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="57">cur_str_idx<pos:position pos:line="50" pos:column="68"/></name></expr></argument>)<pos:position pos:line="50" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="70"/></condition><then pos:line="50" pos:column="70">
	<block pos:line="51" pos:column="9">{
	  <if pos:line="52" pos:column="11">if <condition pos:line="52" pos:column="14">(<expr><operator pos:line="52" pos:column="15">!<pos:position pos:line="52" pos:column="16"/></operator><name pos:line="52" pos:column="16">fl_longest_match<pos:position pos:line="52" pos:column="32"/></name></expr>)<pos:position pos:line="52" pos:column="33"/></condition><then pos:line="52" pos:column="33">
	    <block type="pseudo"><return pos:line="53" pos:column="13">return <expr><name pos:line="53" pos:column="20">cur_str_idx<pos:position pos:line="53" pos:column="31"/></name></expr>;<pos:position pos:line="53" pos:column="32"/></return></block></then>
	  <else pos:line="54" pos:column="11">else
	    <block pos:line="55" pos:column="13">{
	      <expr_stmt><expr><name pos:line="56" pos:column="15">match_last<pos:position pos:line="56" pos:column="25"/></name> <operator pos:line="56" pos:column="26">=<pos:position pos:line="56" pos:column="27"/></operator> <name pos:line="56" pos:column="28">cur_str_idx<pos:position pos:line="56" pos:column="39"/></name></expr>;<pos:position pos:line="56" pos:column="40"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="57" pos:column="15">match<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <literal type="number" pos:line="57" pos:column="23">1<pos:position pos:line="57" pos:column="24"/></literal></expr>;<pos:position pos:line="57" pos:column="25"/></expr_stmt>
	    }<pos:position pos:line="58" pos:column="14"/></block></else></if>
	}<pos:position pos:line="59" pos:column="10"/></block></then></if>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

  <while pos:line="62" pos:column="3">while <condition pos:line="62" pos:column="9">(<expr><operator pos:line="62" pos:column="10">!<pos:position pos:line="62" pos:column="11"/></operator><call><name pos:line="62" pos:column="11">re_string_eoi<pos:position pos:line="62" pos:column="24"/></name> <argument_list pos:line="62" pos:column="25">(<argument><expr><operator pos:line="62" pos:column="26">&amp;<pos:position pos:line="62" pos:column="31"/></operator><name><name pos:line="62" pos:column="27">mctx<pos:position pos:line="62" pos:column="31"/></name><operator pos:line="62" pos:column="31">-&gt;<pos:position pos:line="62" pos:column="36"/></operator><name pos:line="62" pos:column="33">input<pos:position pos:line="62" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="40"/></condition>
    <block pos:line="63" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="64" pos:column="7">re_dfastate_t<pos:position pos:line="64" pos:column="20"/></name> <modifier pos:line="64" pos:column="21">*<pos:position pos:line="64" pos:column="22"/></modifier></type><name pos:line="64" pos:column="22">old_state<pos:position pos:line="64" pos:column="31"/></name> <init pos:line="64" pos:column="32">= <expr><name pos:line="64" pos:column="34">cur_state<pos:position pos:line="64" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="64" pos:column="44"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="65" pos:column="7">int<pos:position pos:line="65" pos:column="10"/></name></type> <name pos:line="65" pos:column="11">next_char_idx<pos:position pos:line="65" pos:column="24"/></name> <init pos:line="65" pos:column="25">= <expr><call><name pos:line="65" pos:column="27">re_string_cur_idx<pos:position pos:line="65" pos:column="44"/></name> <argument_list pos:line="65" pos:column="45">(<argument><expr><operator pos:line="65" pos:column="46">&amp;<pos:position pos:line="65" pos:column="51"/></operator><name><name pos:line="65" pos:column="47">mctx<pos:position pos:line="65" pos:column="51"/></name><operator pos:line="65" pos:column="51">-&gt;<pos:position pos:line="65" pos:column="56"/></operator><name pos:line="65" pos:column="53">input<pos:position pos:line="65" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="59"/></argument_list></call> <operator pos:line="65" pos:column="60">+<pos:position pos:line="65" pos:column="61"/></operator> <literal type="number" pos:line="65" pos:column="62">1<pos:position pos:line="65" pos:column="63"/></literal></expr></init></decl>;<pos:position pos:line="65" pos:column="64"/></decl_stmt>

      <if pos:line="67" pos:column="7">if <condition pos:line="67" pos:column="10">(<expr><call><name pos:line="67" pos:column="11">BE<pos:position pos:line="67" pos:column="13"/></name> <argument_list pos:line="67" pos:column="14">(<argument><expr><name pos:line="67" pos:column="15">next_char_idx<pos:position pos:line="67" pos:column="28"/></name> <operator pos:line="67" pos:column="29">&gt;=<pos:position pos:line="67" pos:column="34"/></operator> <name><name pos:line="67" pos:column="32">mctx<pos:position pos:line="67" pos:column="36"/></name><operator pos:line="67" pos:column="36">-&gt;<pos:position pos:line="67" pos:column="41"/></operator><name pos:line="67" pos:column="38">input<pos:position pos:line="67" pos:column="43"/></name><operator pos:line="67" pos:column="43">.<pos:position pos:line="67" pos:column="44"/></operator><name pos:line="67" pos:column="44">bufs_len<pos:position pos:line="67" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="54">0<pos:position pos:line="67" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="56"/></argument_list></call>
	  <operator pos:line="68" pos:column="11">||<pos:position pos:line="68" pos:column="13"/></operator> <operator pos:line="68" pos:column="14">(<pos:position pos:line="68" pos:column="15"/></operator><call><name pos:line="68" pos:column="15">BE<pos:position pos:line="68" pos:column="17"/></name> <argument_list pos:line="68" pos:column="18">(<argument><expr><name pos:line="68" pos:column="19">next_char_idx<pos:position pos:line="68" pos:column="32"/></name> <operator pos:line="68" pos:column="33">&gt;=<pos:position pos:line="68" pos:column="38"/></operator> <name><name pos:line="68" pos:column="36">mctx<pos:position pos:line="68" pos:column="40"/></name><operator pos:line="68" pos:column="40">-&gt;<pos:position pos:line="68" pos:column="45"/></operator><name pos:line="68" pos:column="42">input<pos:position pos:line="68" pos:column="47"/></name><operator pos:line="68" pos:column="47">.<pos:position pos:line="68" pos:column="48"/></operator><name pos:line="68" pos:column="48">valid_len<pos:position pos:line="68" pos:column="57"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="59">0<pos:position pos:line="68" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="61"/></argument_list></call>
	      <operator pos:line="69" pos:column="15">&amp;&amp;<pos:position pos:line="69" pos:column="25"/></operator> <name><name pos:line="69" pos:column="18">mctx<pos:position pos:line="69" pos:column="22"/></name><operator pos:line="69" pos:column="22">-&gt;<pos:position pos:line="69" pos:column="27"/></operator><name pos:line="69" pos:column="24">input<pos:position pos:line="69" pos:column="29"/></name><operator pos:line="69" pos:column="29">.<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="30">valid_len<pos:position pos:line="69" pos:column="39"/></name></name> <operator pos:line="69" pos:column="40">&lt;<pos:position pos:line="69" pos:column="44"/></operator> <name><name pos:line="69" pos:column="42">mctx<pos:position pos:line="69" pos:column="46"/></name><operator pos:line="69" pos:column="46">-&gt;<pos:position pos:line="69" pos:column="51"/></operator><name pos:line="69" pos:column="48">input<pos:position pos:line="69" pos:column="53"/></name><operator pos:line="69" pos:column="53">.<pos:position pos:line="69" pos:column="54"/></operator><name pos:line="69" pos:column="54">len<pos:position pos:line="69" pos:column="57"/></name></name><operator pos:line="69" pos:column="57">)<pos:position pos:line="69" pos:column="58"/></operator></expr>)<pos:position pos:line="69" pos:column="59"/></condition><then pos:line="69" pos:column="59">
	<block pos:line="70" pos:column="9">{
	  <expr_stmt><expr><name pos:line="71" pos:column="11">err<pos:position pos:line="71" pos:column="14"/></name> <operator pos:line="71" pos:column="15">=<pos:position pos:line="71" pos:column="16"/></operator> <call><name pos:line="71" pos:column="17">extend_buffers<pos:position pos:line="71" pos:column="31"/></name> <argument_list pos:line="71" pos:column="32">(<argument><expr><name pos:line="71" pos:column="33">mctx<pos:position pos:line="71" pos:column="37"/></name></expr></argument>)<pos:position pos:line="71" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="39"/></expr_stmt>
	  <if pos:line="72" pos:column="11">if <condition pos:line="72" pos:column="14">(<expr><call><name pos:line="72" pos:column="15">BE<pos:position pos:line="72" pos:column="17"/></name> <argument_list pos:line="72" pos:column="18">(<argument><expr><name pos:line="72" pos:column="19">err<pos:position pos:line="72" pos:column="22"/></name> <operator pos:line="72" pos:column="23">!=<pos:position pos:line="72" pos:column="25"/></operator> <name pos:line="72" pos:column="26">REG_NOERROR<pos:position pos:line="72" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="39">0<pos:position pos:line="72" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="42"/></condition><then pos:line="72" pos:column="42">
	    <block pos:line="73" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="74" pos:column="15">assert<pos:position pos:line="74" pos:column="21"/></name> <argument_list pos:line="74" pos:column="22">(<argument><expr><name pos:line="74" pos:column="23">err<pos:position pos:line="74" pos:column="26"/></name> <operator pos:line="74" pos:column="27">==<pos:position pos:line="74" pos:column="29"/></operator> <name pos:line="74" pos:column="30">REG_ESPACE<pos:position pos:line="74" pos:column="40"/></name></expr></argument>)<pos:position pos:line="74" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="42"/></expr_stmt>
	      <return pos:line="75" pos:column="15">return <expr><operator pos:line="75" pos:column="22">-<pos:position pos:line="75" pos:column="23"/></operator><literal type="number" pos:line="75" pos:column="23">2<pos:position pos:line="75" pos:column="24"/></literal></expr>;<pos:position pos:line="75" pos:column="25"/></return>
	    }<pos:position pos:line="76" pos:column="14"/></block></then></if>
	}<pos:position pos:line="77" pos:column="10"/></block></then></if>

      <expr_stmt><expr><name pos:line="79" pos:column="7">cur_state<pos:position pos:line="79" pos:column="16"/></name> <operator pos:line="79" pos:column="17">=<pos:position pos:line="79" pos:column="18"/></operator> <call><name pos:line="79" pos:column="19">transit_state<pos:position pos:line="79" pos:column="32"/></name> <argument_list pos:line="79" pos:column="33">(<argument><expr><operator pos:line="79" pos:column="34">&amp;<pos:position pos:line="79" pos:column="39"/></operator><name pos:line="79" pos:column="35">err<pos:position pos:line="79" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="40">mctx<pos:position pos:line="79" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="46">cur_state<pos:position pos:line="79" pos:column="55"/></name></expr></argument>)<pos:position pos:line="79" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="57"/></expr_stmt>
      <if pos:line="80" pos:column="7">if <condition pos:line="80" pos:column="10">(<expr><name><name pos:line="80" pos:column="11">mctx<pos:position pos:line="80" pos:column="15"/></name><operator pos:line="80" pos:column="15">-&gt;<pos:position pos:line="80" pos:column="20"/></operator><name pos:line="80" pos:column="17">state_log<pos:position pos:line="80" pos:column="26"/></name></name> <operator pos:line="80" pos:column="27">!=<pos:position pos:line="80" pos:column="29"/></operator> <name pos:line="80" pos:column="30">NULL<pos:position pos:line="80" pos:column="34"/></name></expr>)<pos:position pos:line="80" pos:column="35"/></condition><then pos:line="80" pos:column="35">
	<block type="pseudo"><expr_stmt><expr><name pos:line="81" pos:column="9">cur_state<pos:position pos:line="81" pos:column="18"/></name> <operator pos:line="81" pos:column="19">=<pos:position pos:line="81" pos:column="20"/></operator> <call><name pos:line="81" pos:column="21">merge_state_with_log<pos:position pos:line="81" pos:column="41"/></name> <argument_list pos:line="81" pos:column="42">(<argument><expr><operator pos:line="81" pos:column="43">&amp;<pos:position pos:line="81" pos:column="48"/></operator><name pos:line="81" pos:column="44">err<pos:position pos:line="81" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="49">mctx<pos:position pos:line="81" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="55">cur_state<pos:position pos:line="81" pos:column="64"/></name></expr></argument>)<pos:position pos:line="81" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="66"/></expr_stmt></block></then></if>

      <if pos:line="83" pos:column="7">if <condition pos:line="83" pos:column="10">(<expr><name pos:line="83" pos:column="11">cur_state<pos:position pos:line="83" pos:column="20"/></name> <operator pos:line="83" pos:column="21">==<pos:position pos:line="83" pos:column="23"/></operator> <name pos:line="83" pos:column="24">NULL<pos:position pos:line="83" pos:column="28"/></name></expr>)<pos:position pos:line="83" pos:column="29"/></condition><then pos:line="83" pos:column="29">
	<block pos:line="84" pos:column="9">{
	  <comment type="block" pos:line="85" pos:column="11">/* Reached the invalid state or an error.  Try to recover a valid
	     state using the state log, if available and if we have not
	     already found a valid (even if not the longest) match.  */</comment>
	  <if pos:line="88" pos:column="11">if <condition pos:line="88" pos:column="14">(<expr><call><name pos:line="88" pos:column="15">BE<pos:position pos:line="88" pos:column="17"/></name> <argument_list pos:line="88" pos:column="18">(<argument><expr><name pos:line="88" pos:column="19">err<pos:position pos:line="88" pos:column="22"/></name> <operator pos:line="88" pos:column="23">!=<pos:position pos:line="88" pos:column="25"/></operator> <name pos:line="88" pos:column="26">REG_NOERROR<pos:position pos:line="88" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="39">0<pos:position pos:line="88" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="42"/></condition><then pos:line="88" pos:column="42">
	    <block type="pseudo"><return pos:line="89" pos:column="13">return <expr><operator pos:line="89" pos:column="20">-<pos:position pos:line="89" pos:column="21"/></operator><literal type="number" pos:line="89" pos:column="21">2<pos:position pos:line="89" pos:column="22"/></literal></expr>;<pos:position pos:line="89" pos:column="23"/></return></block></then></if>

	  <if pos:line="91" pos:column="11">if <condition pos:line="91" pos:column="14">(<expr><name><name pos:line="91" pos:column="15">mctx<pos:position pos:line="91" pos:column="19"/></name><operator pos:line="91" pos:column="19">-&gt;<pos:position pos:line="91" pos:column="24"/></operator><name pos:line="91" pos:column="21">state_log<pos:position pos:line="91" pos:column="30"/></name></name> <operator pos:line="91" pos:column="31">==<pos:position pos:line="91" pos:column="33"/></operator> <name pos:line="91" pos:column="34">NULL<pos:position pos:line="91" pos:column="38"/></name>
	      <operator pos:line="92" pos:column="15">||<pos:position pos:line="92" pos:column="17"/></operator> <operator pos:line="92" pos:column="18">(<pos:position pos:line="92" pos:column="19"/></operator><name pos:line="92" pos:column="19">match<pos:position pos:line="92" pos:column="24"/></name> <operator pos:line="92" pos:column="25">&amp;&amp;<pos:position pos:line="92" pos:column="35"/></operator> <operator pos:line="92" pos:column="28">!<pos:position pos:line="92" pos:column="29"/></operator><name pos:line="92" pos:column="29">fl_longest_match<pos:position pos:line="92" pos:column="45"/></name><operator pos:line="92" pos:column="45">)<pos:position pos:line="92" pos:column="46"/></operator>
	      <operator pos:line="93" pos:column="15">||<pos:position pos:line="93" pos:column="17"/></operator> <operator pos:line="93" pos:column="18">(<pos:position pos:line="93" pos:column="19"/></operator><name pos:line="93" pos:column="19">cur_state<pos:position pos:line="93" pos:column="28"/></name> <operator pos:line="93" pos:column="29">=<pos:position pos:line="93" pos:column="30"/></operator> <call><name pos:line="93" pos:column="31">find_recover_state<pos:position pos:line="93" pos:column="49"/></name> <argument_list pos:line="93" pos:column="50">(<argument><expr><operator pos:line="93" pos:column="51">&amp;<pos:position pos:line="93" pos:column="56"/></operator><name pos:line="93" pos:column="52">err<pos:position pos:line="93" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="57">mctx<pos:position pos:line="93" pos:column="61"/></name></expr></argument>)<pos:position pos:line="93" pos:column="62"/></argument_list></call><operator pos:line="93" pos:column="62">)<pos:position pos:line="93" pos:column="63"/></operator> <operator pos:line="93" pos:column="64">==<pos:position pos:line="93" pos:column="66"/></operator> <name pos:line="93" pos:column="67">NULL<pos:position pos:line="93" pos:column="71"/></name></expr>)<pos:position pos:line="93" pos:column="72"/></condition><then pos:line="93" pos:column="72">
	    <block type="pseudo"><break pos:line="94" pos:column="13">break;<pos:position pos:line="94" pos:column="19"/></break></block></then></if>
	}<pos:position pos:line="95" pos:column="10"/></block></then></if>

      <if pos:line="97" pos:column="7">if <condition pos:line="97" pos:column="10">(<expr><call><name pos:line="97" pos:column="11">BE<pos:position pos:line="97" pos:column="13"/></name> <argument_list pos:line="97" pos:column="14">(<argument><expr><name pos:line="97" pos:column="15">at_init_state<pos:position pos:line="97" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="97" pos:column="30">0<pos:position pos:line="97" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="97" pos:column="33"/></condition><then pos:line="97" pos:column="33">
	<block pos:line="98" pos:column="9">{
	  <if pos:line="99" pos:column="11">if <condition pos:line="99" pos:column="14">(<expr><name pos:line="99" pos:column="15">old_state<pos:position pos:line="99" pos:column="24"/></name> <operator pos:line="99" pos:column="25">==<pos:position pos:line="99" pos:column="27"/></operator> <name pos:line="99" pos:column="28">cur_state<pos:position pos:line="99" pos:column="37"/></name></expr>)<pos:position pos:line="99" pos:column="38"/></condition><then pos:line="99" pos:column="38">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="100" pos:column="13">next_start_idx<pos:position pos:line="100" pos:column="27"/></name> <operator pos:line="100" pos:column="28">=<pos:position pos:line="100" pos:column="29"/></operator> <name pos:line="100" pos:column="30">next_char_idx<pos:position pos:line="100" pos:column="43"/></name></expr>;<pos:position pos:line="100" pos:column="44"/></expr_stmt></block></then>
	  <else pos:line="101" pos:column="11">else
	    <block type="pseudo"><expr_stmt><expr><name pos:line="102" pos:column="13">at_init_state<pos:position pos:line="102" pos:column="26"/></name> <operator pos:line="102" pos:column="27">=<pos:position pos:line="102" pos:column="28"/></operator> <literal type="number" pos:line="102" pos:column="29">0<pos:position pos:line="102" pos:column="30"/></literal></expr>;<pos:position pos:line="102" pos:column="31"/></expr_stmt></block></else></if>
	}<pos:position pos:line="103" pos:column="10"/></block></then></if>

      <if pos:line="105" pos:column="7">if <condition pos:line="105" pos:column="10">(<expr><name><name pos:line="105" pos:column="11">cur_state<pos:position pos:line="105" pos:column="20"/></name><operator pos:line="105" pos:column="20">-&gt;<pos:position pos:line="105" pos:column="25"/></operator><name pos:line="105" pos:column="22">halt<pos:position pos:line="105" pos:column="26"/></name></name></expr>)<pos:position pos:line="105" pos:column="27"/></condition><then pos:line="105" pos:column="27">
	<block pos:line="106" pos:column="9">{
	  <comment type="block" pos:line="107" pos:column="11">/* Reached a halt state.
	     Check the halt state can satisfy the current context.  */</comment>
	  <if pos:line="109" pos:column="11">if <condition pos:line="109" pos:column="14">(<expr><operator pos:line="109" pos:column="15">!<pos:position pos:line="109" pos:column="16"/></operator><name><name pos:line="109" pos:column="16">cur_state<pos:position pos:line="109" pos:column="25"/></name><operator pos:line="109" pos:column="25">-&gt;<pos:position pos:line="109" pos:column="30"/></operator><name pos:line="109" pos:column="27">has_constraint<pos:position pos:line="109" pos:column="41"/></name></name>
	      <operator pos:line="110" pos:column="15">||<pos:position pos:line="110" pos:column="17"/></operator> <call><name pos:line="110" pos:column="18">check_halt_state_context<pos:position pos:line="110" pos:column="42"/></name> <argument_list pos:line="110" pos:column="43">(<argument><expr><name pos:line="110" pos:column="44">mctx<pos:position pos:line="110" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="50">cur_state<pos:position pos:line="110" pos:column="59"/></name></expr></argument>,
					   <argument><expr><call><name pos:line="111" pos:column="44">re_string_cur_idx<pos:position pos:line="111" pos:column="61"/></name> <argument_list pos:line="111" pos:column="62">(<argument><expr><operator pos:line="111" pos:column="63">&amp;<pos:position pos:line="111" pos:column="68"/></operator><name><name pos:line="111" pos:column="64">mctx<pos:position pos:line="111" pos:column="68"/></name><operator pos:line="111" pos:column="68">-&gt;<pos:position pos:line="111" pos:column="73"/></operator><name pos:line="111" pos:column="70">input<pos:position pos:line="111" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="111" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="111" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="111" pos:column="78"/></condition><then pos:line="111" pos:column="78">
	    <block pos:line="112" pos:column="13">{
	      <comment type="block" pos:line="113" pos:column="15">/* We found an appropriate halt state.  */</comment>
	      <expr_stmt><expr><name pos:line="114" pos:column="15">match_last<pos:position pos:line="114" pos:column="25"/></name> <operator pos:line="114" pos:column="26">=<pos:position pos:line="114" pos:column="27"/></operator> <call><name pos:line="114" pos:column="28">re_string_cur_idx<pos:position pos:line="114" pos:column="45"/></name> <argument_list pos:line="114" pos:column="46">(<argument><expr><operator pos:line="114" pos:column="47">&amp;<pos:position pos:line="114" pos:column="52"/></operator><name><name pos:line="114" pos:column="48">mctx<pos:position pos:line="114" pos:column="52"/></name><operator pos:line="114" pos:column="52">-&gt;<pos:position pos:line="114" pos:column="57"/></operator><name pos:line="114" pos:column="54">input<pos:position pos:line="114" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="114" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="61"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="115" pos:column="15">match<pos:position pos:line="115" pos:column="20"/></name> <operator pos:line="115" pos:column="21">=<pos:position pos:line="115" pos:column="22"/></operator> <literal type="number" pos:line="115" pos:column="23">1<pos:position pos:line="115" pos:column="24"/></literal></expr>;<pos:position pos:line="115" pos:column="25"/></expr_stmt>

	      <comment type="block" pos:line="117" pos:column="15">/* We found a match, do not modify match_first below.  */</comment>
	      <expr_stmt><expr><name pos:line="118" pos:column="15">p_match_first<pos:position pos:line="118" pos:column="28"/></name> <operator pos:line="118" pos:column="29">=<pos:position pos:line="118" pos:column="30"/></operator> <name pos:line="118" pos:column="31">NULL<pos:position pos:line="118" pos:column="35"/></name></expr>;<pos:position pos:line="118" pos:column="36"/></expr_stmt>
	      <if pos:line="119" pos:column="15">if <condition pos:line="119" pos:column="18">(<expr><operator pos:line="119" pos:column="19">!<pos:position pos:line="119" pos:column="20"/></operator><name pos:line="119" pos:column="20">fl_longest_match<pos:position pos:line="119" pos:column="36"/></name></expr>)<pos:position pos:line="119" pos:column="37"/></condition><then pos:line="119" pos:column="37">
		<block type="pseudo"><break pos:line="120" pos:column="17">break;<pos:position pos:line="120" pos:column="23"/></break></block></then></if>
	    }<pos:position pos:line="121" pos:column="14"/></block></then></if>
	}<pos:position pos:line="122" pos:column="10"/></block></then></if>
    }<pos:position pos:line="123" pos:column="6"/></block></while>

  <if pos:line="125" pos:column="3">if <condition pos:line="125" pos:column="6">(<expr><name pos:line="125" pos:column="7">p_match_first<pos:position pos:line="125" pos:column="20"/></name></expr>)<pos:position pos:line="125" pos:column="21"/></condition><then pos:line="125" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="126" pos:column="5">*<pos:position pos:line="126" pos:column="6"/></operator><name pos:line="126" pos:column="6">p_match_first<pos:position pos:line="126" pos:column="19"/></name> <operator pos:line="126" pos:column="20">+=<pos:position pos:line="126" pos:column="22"/></operator> <name pos:line="126" pos:column="23">next_start_idx<pos:position pos:line="126" pos:column="37"/></name></expr>;<pos:position pos:line="126" pos:column="38"/></expr_stmt></block></then></if>

  <return pos:line="128" pos:column="3">return <expr><name pos:line="128" pos:column="10">match_last<pos:position pos:line="128" pos:column="20"/></name></expr>;<pos:position pos:line="128" pos:column="21"/></return>
}<pos:position pos:line="129" pos:column="2"/></block></function></unit>
