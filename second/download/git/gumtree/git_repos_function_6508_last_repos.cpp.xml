<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6508_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">prime_ref_dir<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">ref_dir<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">dir<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">prefix<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * The hard work of loading loose refs is done by get_ref_dir(), so we
	 * just need to recurse through all of the sub-directories. We do not
	 * even need to care about sorting, as traversal order does not matter
	 * to us.
	 */</comment>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">i<pos:position pos:line="9" pos:column="14"/></name></decl>;<pos:position pos:line="9" pos:column="15"/></decl_stmt>
	<for pos:line="10" pos:column="9">for <control pos:line="10" pos:column="13">(<init><expr><name pos:line="10" pos:column="14">i<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <literal type="number" pos:line="10" pos:column="18">0<pos:position pos:line="10" pos:column="19"/></literal></expr>;<pos:position pos:line="10" pos:column="20"/></init> <condition><expr><name pos:line="10" pos:column="21">i<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">&lt;<pos:position pos:line="10" pos:column="27"/></operator> <name><name pos:line="10" pos:column="25">dir<pos:position pos:line="10" pos:column="28"/></name><operator pos:line="10" pos:column="28">-&gt;<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="30">nr<pos:position pos:line="10" pos:column="32"/></name></name></expr>;<pos:position pos:line="10" pos:column="33"/></condition> <incr><expr><name pos:line="10" pos:column="34">i<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">++<pos:position pos:line="10" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="10" pos:column="38"/></control> <block pos:line="10" pos:column="39">{
		<decl_stmt><decl><type><name><name pos:line="11" pos:column="17">struct<pos:position pos:line="11" pos:column="23"/></name> <name pos:line="11" pos:column="24">ref_entry<pos:position pos:line="11" pos:column="33"/></name></name> <modifier pos:line="11" pos:column="34">*<pos:position pos:line="11" pos:column="35"/></modifier></type><name pos:line="11" pos:column="35">entry<pos:position pos:line="11" pos:column="40"/></name> <init pos:line="11" pos:column="41">= <expr><name><name pos:line="11" pos:column="43">dir<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">-&gt;<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="48">entries<pos:position pos:line="11" pos:column="55"/></name><index pos:line="11" pos:column="55">[<expr><name pos:line="11" pos:column="56">i<pos:position pos:line="11" pos:column="57"/></name></expr>]<pos:position pos:line="11" pos:column="58"/></index></name></expr></init></decl>;<pos:position pos:line="11" pos:column="59"/></decl_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><operator pos:line="12" pos:column="22">(<pos:position pos:line="12" pos:column="23"/></operator><name><name pos:line="12" pos:column="23">entry<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">flag<pos:position pos:line="12" pos:column="34"/></name></name> <operator pos:line="12" pos:column="35">&amp;<pos:position pos:line="12" pos:column="40"/></operator> <name pos:line="12" pos:column="37">REF_DIR<pos:position pos:line="12" pos:column="44"/></name><operator pos:line="12" pos:column="44">)<pos:position pos:line="12" pos:column="45"/></operator></expr>)<pos:position pos:line="12" pos:column="46"/></condition><then pos:line="12" pos:column="46"> <block pos:line="12" pos:column="47">{
			<comment type="block" pos:line="13" pos:column="25">/* Not a directory; no need to recurse. */</comment>
		}<pos:position pos:line="14" pos:column="18"/></block></then> <elseif pos:line="14" pos:column="19">else <if pos:line="14" pos:column="24">if <condition pos:line="14" pos:column="27">(<expr><operator pos:line="14" pos:column="28">!<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="29">prefix<pos:position pos:line="14" pos:column="35"/></name></expr>)<pos:position pos:line="14" pos:column="36"/></condition><then pos:line="14" pos:column="36"> <block pos:line="14" pos:column="37">{
			<comment type="block" pos:line="15" pos:column="25">/* Recurse in any case: */</comment>
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">prime_ref_dir<pos:position pos:line="16" pos:column="38"/></name><argument_list pos:line="16" pos:column="38">(<argument><expr><call><name pos:line="16" pos:column="39">get_ref_dir<pos:position pos:line="16" pos:column="50"/></name><argument_list pos:line="16" pos:column="50">(<argument><expr><name pos:line="16" pos:column="51">entry<pos:position pos:line="16" pos:column="56"/></name></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="16" pos:column="59">NULL<pos:position pos:line="16" pos:column="63"/></name></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="65"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if></elseif> <else pos:line="17" pos:column="19">else <block pos:line="17" pos:column="24">{
			<switch pos:line="18" pos:column="25">switch <condition pos:line="18" pos:column="32">(<expr><call><name pos:line="18" pos:column="33">overlaps_prefix<pos:position pos:line="18" pos:column="48"/></name><argument_list pos:line="18" pos:column="48">(<argument><expr><name><name pos:line="18" pos:column="49">entry<pos:position pos:line="18" pos:column="54"/></name><operator pos:line="18" pos:column="54">-&gt;<pos:position pos:line="18" pos:column="59"/></operator><name pos:line="18" pos:column="56">name<pos:position pos:line="18" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="62">prefix<pos:position pos:line="18" pos:column="68"/></name></expr></argument>)<pos:position pos:line="18" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="70"/></condition> <block pos:line="18" pos:column="71">{
			<case pos:line="19" pos:column="25">case <expr><name pos:line="19" pos:column="30">PREFIX_CONTAINS_DIR<pos:position pos:line="19" pos:column="49"/></name></expr>:<pos:position pos:line="19" pos:column="50"/></case>
				<comment type="block" pos:line="20" pos:column="33">/*
				 * Recurse, and from here down we
				 * don't have to check the prefix
				 * anymore:
				 */</comment>
				<expr_stmt><expr><call><name pos:line="25" pos:column="33">prime_ref_dir<pos:position pos:line="25" pos:column="46"/></name><argument_list pos:line="25" pos:column="46">(<argument><expr><call><name pos:line="25" pos:column="47">get_ref_dir<pos:position pos:line="25" pos:column="58"/></name><argument_list pos:line="25" pos:column="58">(<argument><expr><name pos:line="25" pos:column="59">entry<pos:position pos:line="25" pos:column="64"/></name></expr></argument>)<pos:position pos:line="25" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="25" pos:column="67">NULL<pos:position pos:line="25" pos:column="71"/></name></expr></argument>)<pos:position pos:line="25" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="73"/></expr_stmt>
				<break pos:line="26" pos:column="33">break;<pos:position pos:line="26" pos:column="39"/></break>
			<case pos:line="27" pos:column="25">case <expr><name pos:line="27" pos:column="30">PREFIX_WITHIN_DIR<pos:position pos:line="27" pos:column="47"/></name></expr>:<pos:position pos:line="27" pos:column="48"/></case>
				<expr_stmt><expr><call><name pos:line="28" pos:column="33">prime_ref_dir<pos:position pos:line="28" pos:column="46"/></name><argument_list pos:line="28" pos:column="46">(<argument><expr><call><name pos:line="28" pos:column="47">get_ref_dir<pos:position pos:line="28" pos:column="58"/></name><argument_list pos:line="28" pos:column="58">(<argument><expr><name pos:line="28" pos:column="59">entry<pos:position pos:line="28" pos:column="64"/></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="67">prefix<pos:position pos:line="28" pos:column="73"/></name></expr></argument>)<pos:position pos:line="28" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="75"/></expr_stmt>
				<break pos:line="29" pos:column="33">break;<pos:position pos:line="29" pos:column="39"/></break>
			<case pos:line="30" pos:column="25">case <expr><name pos:line="30" pos:column="30">PREFIX_EXCLUDES_DIR<pos:position pos:line="30" pos:column="49"/></name></expr>:<pos:position pos:line="30" pos:column="50"/></case>
				<comment type="block" pos:line="31" pos:column="33">/* No need to prime this directory. */</comment>
				<break pos:line="32" pos:column="33">break;<pos:position pos:line="32" pos:column="39"/></break>
			}<pos:position pos:line="33" pos:column="26"/></block></switch>
		}<pos:position pos:line="34" pos:column="18"/></block></else></if>
	}<pos:position pos:line="35" pos:column="10"/></block></for>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
