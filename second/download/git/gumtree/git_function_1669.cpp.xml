<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1669.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">send_pack<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name><name pos:line="1" pos:column="15">struct<pos:position pos:line="1" pos:column="21"/></name> <name pos:line="1" pos:column="22">send_pack_args<pos:position pos:line="1" pos:column="36"/></name></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">args<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>,
	      <parameter><decl><type><name pos:line="2" pos:column="15">int<pos:position pos:line="2" pos:column="18"/></name></type> <name><name pos:line="2" pos:column="19">fd<pos:position pos:line="2" pos:column="21"/></name><index pos:line="2" pos:column="21">[]<pos:position pos:line="2" pos:column="23"/></index></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="25">struct<pos:position pos:line="2" pos:column="31"/></name> <name pos:line="2" pos:column="32">child_process<pos:position pos:line="2" pos:column="45"/></name></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">conn<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>,
	      <parameter><decl><type><name><name pos:line="3" pos:column="15">struct<pos:position pos:line="3" pos:column="21"/></name> <name pos:line="3" pos:column="22">ref<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">remote_refs<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>,
	      <parameter><decl><type><name><name pos:line="4" pos:column="15">struct<pos:position pos:line="4" pos:column="21"/></name> <name pos:line="4" pos:column="22">sha1_array<pos:position pos:line="4" pos:column="32"/></name></name> <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">extra_have<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="45"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">in<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><name><name pos:line="6" pos:column="18">fd<pos:position pos:line="6" pos:column="20"/></name><index pos:line="6" pos:column="20">[<expr><literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr>]<pos:position pos:line="6" pos:column="23"/></index></name></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">out<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><name><name pos:line="7" pos:column="19">fd<pos:position pos:line="7" pos:column="21"/></name><index pos:line="7" pos:column="21">[<expr><literal type="number" pos:line="7" pos:column="22">1<pos:position pos:line="7" pos:column="23"/></literal></expr>]<pos:position pos:line="7" pos:column="24"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">req_buf<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><name pos:line="8" pos:column="33">STRBUF_INIT<pos:position pos:line="8" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">ref<pos:position pos:line="9" pos:column="19"/></name></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">ref<pos:position pos:line="9" pos:column="24"/></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">new_refs<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">allow_deleting_refs<pos:position pos:line="11" pos:column="32"/></name> <init pos:line="11" pos:column="33">= <expr><literal type="number" pos:line="11" pos:column="35">0<pos:position pos:line="11" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">status_report<pos:position pos:line="12" pos:column="26"/></name> <init pos:line="12" pos:column="27">= <expr><literal type="number" pos:line="12" pos:column="29">0<pos:position pos:line="12" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">use_sideband<pos:position pos:line="13" pos:column="25"/></name> <init pos:line="13" pos:column="26">= <expr><literal type="number" pos:line="13" pos:column="28">0<pos:position pos:line="13" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">quiet_supported<pos:position pos:line="14" pos:column="28"/></name> <init pos:line="14" pos:column="29">= <expr><literal type="number" pos:line="14" pos:column="31">0<pos:position pos:line="14" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">agent_supported<pos:position pos:line="15" pos:column="28"/></name> <init pos:line="15" pos:column="29">= <expr><literal type="number" pos:line="15" pos:column="31">0<pos:position pos:line="15" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">unsigned<pos:position pos:line="16" pos:column="17"/></name></type> <name pos:line="16" pos:column="18">cmds_sent<pos:position pos:line="16" pos:column="27"/></name> <init pos:line="16" pos:column="28">= <expr><literal type="number" pos:line="16" pos:column="30">0<pos:position pos:line="16" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">int<pos:position pos:line="17" pos:column="12"/></name></type> <name pos:line="17" pos:column="13">ret<pos:position pos:line="17" pos:column="16"/></name></decl>;<pos:position pos:line="17" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="18" pos:column="9">struct<pos:position pos:line="18" pos:column="15"/></name> <name pos:line="18" pos:column="16">async<pos:position pos:line="18" pos:column="21"/></name></name></type> <name pos:line="18" pos:column="22">demux<pos:position pos:line="18" pos:column="27"/></name></decl>;<pos:position pos:line="18" pos:column="28"/></decl_stmt>

	<comment type="block" pos:line="20" pos:column="9">/* Does the other end support the reporting? */</comment>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">server_supports<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><literal type="string" pos:line="21" pos:column="29">"report-status"<pos:position pos:line="21" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="46"/></condition><then pos:line="21" pos:column="46">
		<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="17">status_report<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">=<pos:position pos:line="22" pos:column="32"/></operator> <literal type="number" pos:line="22" pos:column="33">1<pos:position pos:line="22" pos:column="34"/></literal></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt></block></then></if>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">server_supports<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><literal type="string" pos:line="23" pos:column="29">"delete-refs"<pos:position pos:line="23" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="44"/></condition><then pos:line="23" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="17">allow_deleting_refs<pos:position pos:line="24" pos:column="36"/></name> <operator pos:line="24" pos:column="37">=<pos:position pos:line="24" pos:column="38"/></operator> <literal type="number" pos:line="24" pos:column="39">1<pos:position pos:line="24" pos:column="40"/></literal></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt></block></then></if>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">server_supports<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><literal type="string" pos:line="25" pos:column="29">"ofs-delta"<pos:position pos:line="25" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="42"/></condition><then pos:line="25" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="17">args<pos:position pos:line="26" pos:column="21"/></name><operator pos:line="26" pos:column="21">-&gt;<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="23">use_ofs_delta<pos:position pos:line="26" pos:column="36"/></name></name> <operator pos:line="26" pos:column="37">=<pos:position pos:line="26" pos:column="38"/></operator> <literal type="number" pos:line="26" pos:column="39">1<pos:position pos:line="26" pos:column="40"/></literal></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt></block></then></if>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><call><name pos:line="27" pos:column="13">server_supports<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><literal type="string" pos:line="27" pos:column="29">"side-band-64k"<pos:position pos:line="27" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="46"/></condition><then pos:line="27" pos:column="46">
		<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="17">use_sideband<pos:position pos:line="28" pos:column="29"/></name> <operator pos:line="28" pos:column="30">=<pos:position pos:line="28" pos:column="31"/></operator> <literal type="number" pos:line="28" pos:column="32">1<pos:position pos:line="28" pos:column="33"/></literal></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt></block></then></if>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name pos:line="29" pos:column="13">server_supports<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><literal type="string" pos:line="29" pos:column="29">"quiet"<pos:position pos:line="29" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="38"/></condition><then pos:line="29" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="17">quiet_supported<pos:position pos:line="30" pos:column="32"/></name> <operator pos:line="30" pos:column="33">=<pos:position pos:line="30" pos:column="34"/></operator> <literal type="number" pos:line="30" pos:column="35">1<pos:position pos:line="30" pos:column="36"/></literal></expr>;<pos:position pos:line="30" pos:column="37"/></expr_stmt></block></then></if>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name pos:line="31" pos:column="13">server_supports<pos:position pos:line="31" pos:column="28"/></name><argument_list pos:line="31" pos:column="28">(<argument><expr><literal type="string" pos:line="31" pos:column="29">"agent"<pos:position pos:line="31" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="17">agent_supported<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">=<pos:position pos:line="32" pos:column="34"/></operator> <literal type="number" pos:line="32" pos:column="35">1<pos:position pos:line="32" pos:column="36"/></literal></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt></block></then></if>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">server_supports<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><literal type="string" pos:line="33" pos:column="29">"no-thin"<pos:position pos:line="33" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="40"/></condition><then pos:line="33" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="17">args<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">-&gt;<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="23">use_thin_pack<pos:position pos:line="34" pos:column="36"/></name></name> <operator pos:line="34" pos:column="37">=<pos:position pos:line="34" pos:column="38"/></operator> <literal type="number" pos:line="34" pos:column="39">0<pos:position pos:line="34" pos:column="40"/></literal></expr>;<pos:position pos:line="34" pos:column="41"/></expr_stmt></block></then></if>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><operator pos:line="36" pos:column="13">!<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">remote_refs<pos:position pos:line="36" pos:column="25"/></name></expr>)<pos:position pos:line="36" pos:column="26"/></condition><then pos:line="36" pos:column="26"> <block pos:line="36" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">fprintf<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">stderr<pos:position pos:line="37" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="33">"No refs in common and none specified; doing nothing.\n"<pos:position pos:line="37" pos:column="89"/></literal>
			<literal type="string" pos:line="38" pos:column="25">"Perhaps you should specify a branch such as 'master'.\n"<pos:position pos:line="38" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="84"/></expr_stmt>
		<return pos:line="39" pos:column="17">return <expr><literal type="number" pos:line="39" pos:column="24">0<pos:position pos:line="39" pos:column="25"/></literal></expr>;<pos:position pos:line="39" pos:column="26"/></return>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>

	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">!<pos:position pos:line="42" pos:column="14"/></operator><name><name pos:line="42" pos:column="14">args<pos:position pos:line="42" pos:column="18"/></name><operator pos:line="42" pos:column="18">-&gt;<pos:position pos:line="42" pos:column="23"/></operator><name pos:line="42" pos:column="20">dry_run<pos:position pos:line="42" pos:column="27"/></name></name></expr>)<pos:position pos:line="42" pos:column="28"/></condition><then pos:line="42" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="17">advertise_shallow_grafts_buf<pos:position pos:line="43" pos:column="45"/></name><argument_list pos:line="43" pos:column="45">(<argument><expr><operator pos:line="43" pos:column="46">&amp;<pos:position pos:line="43" pos:column="51"/></operator><name pos:line="43" pos:column="47">req_buf<pos:position pos:line="43" pos:column="54"/></name></expr></argument>)<pos:position pos:line="43" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="56"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="45" pos:column="9">/*
	 * Finally, tell the other end!
	 */</comment>
	<expr_stmt><expr><name pos:line="48" pos:column="9">new_refs<pos:position pos:line="48" pos:column="17"/></name> <operator pos:line="48" pos:column="18">=<pos:position pos:line="48" pos:column="19"/></operator> <literal type="number" pos:line="48" pos:column="20">0<pos:position pos:line="48" pos:column="21"/></literal></expr>;<pos:position pos:line="48" pos:column="22"/></expr_stmt>
	<for pos:line="49" pos:column="9">for <control pos:line="49" pos:column="13">(<init><expr><name pos:line="49" pos:column="14">ref<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <name pos:line="49" pos:column="20">remote_refs<pos:position pos:line="49" pos:column="31"/></name></expr>;<pos:position pos:line="49" pos:column="32"/></init> <condition><expr><name pos:line="49" pos:column="33">ref<pos:position pos:line="49" pos:column="36"/></name></expr>;<pos:position pos:line="49" pos:column="37"/></condition> <incr><expr><name pos:line="49" pos:column="38">ref<pos:position pos:line="49" pos:column="41"/></name> <operator pos:line="49" pos:column="42">=<pos:position pos:line="49" pos:column="43"/></operator> <name><name pos:line="49" pos:column="44">ref<pos:position pos:line="49" pos:column="47"/></name><operator pos:line="49" pos:column="47">-&gt;<pos:position pos:line="49" pos:column="52"/></operator><name pos:line="49" pos:column="49">next<pos:position pos:line="49" pos:column="53"/></name></name></expr></incr>)<pos:position pos:line="49" pos:column="54"/></control> <block pos:line="49" pos:column="55">{
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><operator pos:line="50" pos:column="21">!<pos:position pos:line="50" pos:column="22"/></operator><name><name pos:line="50" pos:column="22">ref<pos:position pos:line="50" pos:column="25"/></name><operator pos:line="50" pos:column="25">-&gt;<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="27">peer_ref<pos:position pos:line="50" pos:column="35"/></name></name> <operator pos:line="50" pos:column="36">&amp;&amp;<pos:position pos:line="50" pos:column="46"/></operator> <operator pos:line="50" pos:column="39">!<pos:position pos:line="50" pos:column="40"/></operator><name><name pos:line="50" pos:column="40">args<pos:position pos:line="50" pos:column="44"/></name><operator pos:line="50" pos:column="44">-&gt;<pos:position pos:line="50" pos:column="49"/></operator><name pos:line="50" pos:column="46">send_mirror<pos:position pos:line="50" pos:column="57"/></name></name></expr>)<pos:position pos:line="50" pos:column="58"/></condition><then pos:line="50" pos:column="58">
			<block type="pseudo"><continue pos:line="51" pos:column="25">continue;<pos:position pos:line="51" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="53" pos:column="17">/* Check for statuses set by set_ref_status_for_push() */</comment>
		<switch pos:line="54" pos:column="17">switch <condition pos:line="54" pos:column="24">(<expr><name><name pos:line="54" pos:column="25">ref<pos:position pos:line="54" pos:column="28"/></name><operator pos:line="54" pos:column="28">-&gt;<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="30">status<pos:position pos:line="54" pos:column="36"/></name></name></expr>)<pos:position pos:line="54" pos:column="37"/></condition> <block pos:line="54" pos:column="38">{
		<case pos:line="55" pos:column="17">case <expr><name pos:line="55" pos:column="22">REF_STATUS_REJECT_NONFASTFORWARD<pos:position pos:line="55" pos:column="54"/></name></expr>:<pos:position pos:line="55" pos:column="55"/></case>
		<case pos:line="56" pos:column="17">case <expr><name pos:line="56" pos:column="22">REF_STATUS_REJECT_ALREADY_EXISTS<pos:position pos:line="56" pos:column="54"/></name></expr>:<pos:position pos:line="56" pos:column="55"/></case>
		<case pos:line="57" pos:column="17">case <expr><name pos:line="57" pos:column="22">REF_STATUS_REJECT_FETCH_FIRST<pos:position pos:line="57" pos:column="51"/></name></expr>:<pos:position pos:line="57" pos:column="52"/></case>
		<case pos:line="58" pos:column="17">case <expr><name pos:line="58" pos:column="22">REF_STATUS_REJECT_NEEDS_FORCE<pos:position pos:line="58" pos:column="51"/></name></expr>:<pos:position pos:line="58" pos:column="52"/></case>
		<case pos:line="59" pos:column="17">case <expr><name pos:line="59" pos:column="22">REF_STATUS_REJECT_STALE<pos:position pos:line="59" pos:column="45"/></name></expr>:<pos:position pos:line="59" pos:column="46"/></case>
		<case pos:line="60" pos:column="17">case <expr><name pos:line="60" pos:column="22">REF_STATUS_UPTODATE<pos:position pos:line="60" pos:column="41"/></name></expr>:<pos:position pos:line="60" pos:column="42"/></case>
			<continue pos:line="61" pos:column="25">continue;<pos:position pos:line="61" pos:column="34"/></continue>
		<default pos:line="62" pos:column="17">default:<pos:position pos:line="62" pos:column="25"/></default>
			<empty_stmt pos:line="63" pos:column="25">;<pos:position pos:line="63" pos:column="26"/></empty_stmt> <comment type="block" pos:line="63" pos:column="27">/* do nothing */</comment>
		}<pos:position pos:line="64" pos:column="18"/></block></switch>

		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name><name pos:line="66" pos:column="21">ref<pos:position pos:line="66" pos:column="24"/></name><operator pos:line="66" pos:column="24">-&gt;<pos:position pos:line="66" pos:column="29"/></operator><name pos:line="66" pos:column="26">deletion<pos:position pos:line="66" pos:column="34"/></name></name> <operator pos:line="66" pos:column="35">&amp;&amp;<pos:position pos:line="66" pos:column="45"/></operator> <operator pos:line="66" pos:column="38">!<pos:position pos:line="66" pos:column="39"/></operator><name pos:line="66" pos:column="39">allow_deleting_refs<pos:position pos:line="66" pos:column="58"/></name></expr>)<pos:position pos:line="66" pos:column="59"/></condition><then pos:line="66" pos:column="59"> <block pos:line="66" pos:column="60">{
			<expr_stmt><expr><name><name pos:line="67" pos:column="25">ref<pos:position pos:line="67" pos:column="28"/></name><operator pos:line="67" pos:column="28">-&gt;<pos:position pos:line="67" pos:column="33"/></operator><name pos:line="67" pos:column="30">status<pos:position pos:line="67" pos:column="36"/></name></name> <operator pos:line="67" pos:column="37">=<pos:position pos:line="67" pos:column="38"/></operator> <name pos:line="67" pos:column="39">REF_STATUS_REJECT_NODELETE<pos:position pos:line="67" pos:column="65"/></name></expr>;<pos:position pos:line="67" pos:column="66"/></expr_stmt>
			<continue pos:line="68" pos:column="25">continue;<pos:position pos:line="68" pos:column="34"/></continue>
		}<pos:position pos:line="69" pos:column="18"/></block></then></if>

		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><operator pos:line="71" pos:column="21">!<pos:position pos:line="71" pos:column="22"/></operator><name><name pos:line="71" pos:column="22">ref<pos:position pos:line="71" pos:column="25"/></name><operator pos:line="71" pos:column="25">-&gt;<pos:position pos:line="71" pos:column="30"/></operator><name pos:line="71" pos:column="27">deletion<pos:position pos:line="71" pos:column="35"/></name></name></expr>)<pos:position pos:line="71" pos:column="36"/></condition><then pos:line="71" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="25">new_refs<pos:position pos:line="72" pos:column="33"/></name><operator pos:line="72" pos:column="33">++<pos:position pos:line="72" pos:column="35"/></operator></expr>;<pos:position pos:line="72" pos:column="36"/></expr_stmt></block></then></if>

		<if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><name><name pos:line="74" pos:column="21">args<pos:position pos:line="74" pos:column="25"/></name><operator pos:line="74" pos:column="25">-&gt;<pos:position pos:line="74" pos:column="30"/></operator><name pos:line="74" pos:column="27">dry_run<pos:position pos:line="74" pos:column="34"/></name></name></expr>)<pos:position pos:line="74" pos:column="35"/></condition><then pos:line="74" pos:column="35"> <block pos:line="74" pos:column="36">{
			<expr_stmt><expr><name><name pos:line="75" pos:column="25">ref<pos:position pos:line="75" pos:column="28"/></name><operator pos:line="75" pos:column="28">-&gt;<pos:position pos:line="75" pos:column="33"/></operator><name pos:line="75" pos:column="30">status<pos:position pos:line="75" pos:column="36"/></name></name> <operator pos:line="75" pos:column="37">=<pos:position pos:line="75" pos:column="38"/></operator> <name pos:line="75" pos:column="39">REF_STATUS_OK<pos:position pos:line="75" pos:column="52"/></name></expr>;<pos:position pos:line="75" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="76" pos:column="18"/></block></then> <else pos:line="76" pos:column="19">else <block pos:line="76" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="77" pos:column="25">char<pos:position pos:line="77" pos:column="29"/></name> <modifier pos:line="77" pos:column="30">*<pos:position pos:line="77" pos:column="31"/></modifier></type><name pos:line="77" pos:column="31">old_hex<pos:position pos:line="77" pos:column="38"/></name> <init pos:line="77" pos:column="39">= <expr><call><name pos:line="77" pos:column="41">sha1_to_hex<pos:position pos:line="77" pos:column="52"/></name><argument_list pos:line="77" pos:column="52">(<argument><expr><name><name pos:line="77" pos:column="53">ref<pos:position pos:line="77" pos:column="56"/></name><operator pos:line="77" pos:column="56">-&gt;<pos:position pos:line="77" pos:column="61"/></operator><name pos:line="77" pos:column="58">old_sha1<pos:position pos:line="77" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="77" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="77" pos:column="68"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="78" pos:column="25">char<pos:position pos:line="78" pos:column="29"/></name> <modifier pos:line="78" pos:column="30">*<pos:position pos:line="78" pos:column="31"/></modifier></type><name pos:line="78" pos:column="31">new_hex<pos:position pos:line="78" pos:column="38"/></name> <init pos:line="78" pos:column="39">= <expr><call><name pos:line="78" pos:column="41">sha1_to_hex<pos:position pos:line="78" pos:column="52"/></name><argument_list pos:line="78" pos:column="52">(<argument><expr><name><name pos:line="78" pos:column="53">ref<pos:position pos:line="78" pos:column="56"/></name><operator pos:line="78" pos:column="56">-&gt;<pos:position pos:line="78" pos:column="61"/></operator><name pos:line="78" pos:column="58">new_sha1<pos:position pos:line="78" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="78" pos:column="68"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="79" pos:column="25">int<pos:position pos:line="79" pos:column="28"/></name></type> <name pos:line="79" pos:column="29">quiet<pos:position pos:line="79" pos:column="34"/></name> <init pos:line="79" pos:column="35">= <expr><name pos:line="79" pos:column="37">quiet_supported<pos:position pos:line="79" pos:column="52"/></name> <operator pos:line="79" pos:column="53">&amp;&amp;<pos:position pos:line="79" pos:column="63"/></operator> <operator pos:line="79" pos:column="56">(<pos:position pos:line="79" pos:column="57"/></operator><name><name pos:line="79" pos:column="57">args<pos:position pos:line="79" pos:column="61"/></name><operator pos:line="79" pos:column="61">-&gt;<pos:position pos:line="79" pos:column="66"/></operator><name pos:line="79" pos:column="63">quiet<pos:position pos:line="79" pos:column="68"/></name></name> <operator pos:line="79" pos:column="69">||<pos:position pos:line="79" pos:column="71"/></operator> <operator pos:line="79" pos:column="72">!<pos:position pos:line="79" pos:column="73"/></operator><name><name pos:line="79" pos:column="73">args<pos:position pos:line="79" pos:column="77"/></name><operator pos:line="79" pos:column="77">-&gt;<pos:position pos:line="79" pos:column="82"/></operator><name pos:line="79" pos:column="79">progress<pos:position pos:line="79" pos:column="87"/></name></name><operator pos:line="79" pos:column="87">)<pos:position pos:line="79" pos:column="88"/></operator></expr></init></decl>;<pos:position pos:line="79" pos:column="89"/></decl_stmt>

			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><operator pos:line="81" pos:column="29">!<pos:position pos:line="81" pos:column="30"/></operator><name pos:line="81" pos:column="30">cmds_sent<pos:position pos:line="81" pos:column="39"/></name> <operator pos:line="81" pos:column="40">&amp;&amp;<pos:position pos:line="81" pos:column="50"/></operator> <operator pos:line="81" pos:column="43">(<pos:position pos:line="81" pos:column="44"/></operator><name pos:line="81" pos:column="44">status_report<pos:position pos:line="81" pos:column="57"/></name> <operator pos:line="81" pos:column="58">||<pos:position pos:line="81" pos:column="60"/></operator> <name pos:line="81" pos:column="61">use_sideband<pos:position pos:line="81" pos:column="73"/></name> <operator pos:line="81" pos:column="74">||<pos:position pos:line="81" pos:column="76"/></operator>
					   <name pos:line="82" pos:column="44">quiet<pos:position pos:line="82" pos:column="49"/></name> <operator pos:line="82" pos:column="50">||<pos:position pos:line="82" pos:column="52"/></operator> <name pos:line="82" pos:column="53">agent_supported<pos:position pos:line="82" pos:column="68"/></name><operator pos:line="82" pos:column="68">)<pos:position pos:line="82" pos:column="69"/></operator></expr>)<pos:position pos:line="82" pos:column="70"/></condition><then pos:line="82" pos:column="70"> <block pos:line="82" pos:column="71">{
				<expr_stmt><expr><call><name pos:line="83" pos:column="33">packet_buf_write<pos:position pos:line="83" pos:column="49"/></name><argument_list pos:line="83" pos:column="49">(<argument><expr><operator pos:line="83" pos:column="50">&amp;<pos:position pos:line="83" pos:column="55"/></operator><name pos:line="83" pos:column="51">req_buf<pos:position pos:line="83" pos:column="58"/></name></expr></argument>,
						 <argument><expr><literal type="string" pos:line="84" pos:column="50">"%s %s %s%c%s%s%s%s%s"<pos:position pos:line="84" pos:column="72"/></literal></expr></argument>,
						 <argument><expr><name pos:line="85" pos:column="50">old_hex<pos:position pos:line="85" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="59">new_hex<pos:position pos:line="85" pos:column="66"/></name></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="68">ref<pos:position pos:line="85" pos:column="71"/></name><operator pos:line="85" pos:column="71">-&gt;<pos:position pos:line="85" pos:column="76"/></operator><name pos:line="85" pos:column="73">name<pos:position pos:line="85" pos:column="77"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="79">0<pos:position pos:line="85" pos:column="80"/></literal></expr></argument>,
						 <argument><expr><ternary><condition><expr><name pos:line="86" pos:column="50">status_report<pos:position pos:line="86" pos:column="63"/></name></expr> ?<pos:position pos:line="86" pos:column="65"/></condition><then pos:line="86" pos:column="65"> <expr><literal type="string" pos:line="86" pos:column="66">" report-status"<pos:position pos:line="86" pos:column="82"/></literal></expr> <pos:position pos:line="86" pos:column="83"/></then><else pos:line="86" pos:column="83">: <expr><literal type="string" pos:line="86" pos:column="85">""<pos:position pos:line="86" pos:column="87"/></literal></expr></else></ternary></expr></argument>,
						 <argument><expr><ternary><condition><expr><name pos:line="87" pos:column="50">use_sideband<pos:position pos:line="87" pos:column="62"/></name></expr> ?<pos:position pos:line="87" pos:column="64"/></condition><then pos:line="87" pos:column="64"> <expr><literal type="string" pos:line="87" pos:column="65">" side-band-64k"<pos:position pos:line="87" pos:column="81"/></literal></expr> <pos:position pos:line="87" pos:column="82"/></then><else pos:line="87" pos:column="82">: <expr><literal type="string" pos:line="87" pos:column="84">""<pos:position pos:line="87" pos:column="86"/></literal></expr></else></ternary></expr></argument>,
						 <argument><expr><ternary><condition><expr><name pos:line="88" pos:column="50">quiet<pos:position pos:line="88" pos:column="55"/></name></expr> ?<pos:position pos:line="88" pos:column="57"/></condition><then pos:line="88" pos:column="57"> <expr><literal type="string" pos:line="88" pos:column="58">" quiet"<pos:position pos:line="88" pos:column="66"/></literal></expr> <pos:position pos:line="88" pos:column="67"/></then><else pos:line="88" pos:column="67">: <expr><literal type="string" pos:line="88" pos:column="69">""<pos:position pos:line="88" pos:column="71"/></literal></expr></else></ternary></expr></argument>,
						 <argument><expr><ternary><condition><expr><name pos:line="89" pos:column="50">agent_supported<pos:position pos:line="89" pos:column="65"/></name></expr> ?<pos:position pos:line="89" pos:column="67"/></condition><then pos:line="89" pos:column="67"> <expr><literal type="string" pos:line="89" pos:column="68">" agent="<pos:position pos:line="89" pos:column="77"/></literal></expr> <pos:position pos:line="89" pos:column="78"/></then><else pos:line="89" pos:column="78">: <expr><literal type="string" pos:line="89" pos:column="80">""<pos:position pos:line="89" pos:column="82"/></literal></expr></else></ternary></expr></argument>,
						 <argument><expr><ternary><condition><expr><name pos:line="90" pos:column="50">agent_supported<pos:position pos:line="90" pos:column="65"/></name></expr> ?<pos:position pos:line="90" pos:column="67"/></condition><then pos:line="90" pos:column="67"> <expr><call><name pos:line="90" pos:column="68">git_user_agent_sanitized<pos:position pos:line="90" pos:column="92"/></name><argument_list pos:line="90" pos:column="92">()<pos:position pos:line="90" pos:column="94"/></argument_list></call></expr> <pos:position pos:line="90" pos:column="95"/></then><else pos:line="90" pos:column="95">: <expr><literal type="string" pos:line="90" pos:column="97">""<pos:position pos:line="90" pos:column="99"/></literal></expr></else></ternary></expr></argument>
						)<pos:position pos:line="91" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="51"/></expr_stmt>
			}<pos:position pos:line="92" pos:column="26"/></block></then>
			<else pos:line="93" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="94" pos:column="33">packet_buf_write<pos:position pos:line="94" pos:column="49"/></name><argument_list pos:line="94" pos:column="49">(<argument><expr><operator pos:line="94" pos:column="50">&amp;<pos:position pos:line="94" pos:column="55"/></operator><name pos:line="94" pos:column="51">req_buf<pos:position pos:line="94" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="60">"%s %s %s"<pos:position pos:line="94" pos:column="70"/></literal></expr></argument>,
						 <argument><expr><name pos:line="95" pos:column="50">old_hex<pos:position pos:line="95" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="59">new_hex<pos:position pos:line="95" pos:column="66"/></name></expr></argument>, <argument><expr><name><name pos:line="95" pos:column="68">ref<pos:position pos:line="95" pos:column="71"/></name><operator pos:line="95" pos:column="71">-&gt;<pos:position pos:line="95" pos:column="76"/></operator><name pos:line="95" pos:column="73">name<pos:position pos:line="95" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="79"/></expr_stmt></block></else></if>
			<expr_stmt><expr><name><name pos:line="96" pos:column="25">ref<pos:position pos:line="96" pos:column="28"/></name><operator pos:line="96" pos:column="28">-&gt;<pos:position pos:line="96" pos:column="33"/></operator><name pos:line="96" pos:column="30">status<pos:position pos:line="96" pos:column="36"/></name></name> <operator pos:line="96" pos:column="37">=<pos:position pos:line="96" pos:column="38"/></operator> <ternary><condition><expr><name pos:line="96" pos:column="39">status_report<pos:position pos:line="96" pos:column="52"/></name></expr> ?<pos:position pos:line="96" pos:column="54"/></condition><then pos:line="96" pos:column="54">
				<expr><name pos:line="97" pos:column="33">REF_STATUS_EXPECTING_REPORT<pos:position pos:line="97" pos:column="60"/></name></expr> <pos:position pos:line="97" pos:column="61"/></then><else pos:line="97" pos:column="61">:
				<expr><name pos:line="98" pos:column="33">REF_STATUS_OK<pos:position pos:line="98" pos:column="46"/></name></expr></else></ternary></expr>;<pos:position pos:line="98" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="99" pos:column="25">cmds_sent<pos:position pos:line="99" pos:column="34"/></name><operator pos:line="99" pos:column="34">++<pos:position pos:line="99" pos:column="36"/></operator></expr>;<pos:position pos:line="99" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="100" pos:column="18"/></block></else></if>
	}<pos:position pos:line="101" pos:column="10"/></block></for>

	<if pos:line="103" pos:column="9">if <condition pos:line="103" pos:column="12">(<expr><name><name pos:line="103" pos:column="13">args<pos:position pos:line="103" pos:column="17"/></name><operator pos:line="103" pos:column="17">-&gt;<pos:position pos:line="103" pos:column="22"/></operator><name pos:line="103" pos:column="19">stateless_rpc<pos:position pos:line="103" pos:column="32"/></name></name></expr>)<pos:position pos:line="103" pos:column="33"/></condition><then pos:line="103" pos:column="33"> <block pos:line="103" pos:column="34">{
		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><operator pos:line="104" pos:column="21">!<pos:position pos:line="104" pos:column="22"/></operator><name><name pos:line="104" pos:column="22">args<pos:position pos:line="104" pos:column="26"/></name><operator pos:line="104" pos:column="26">-&gt;<pos:position pos:line="104" pos:column="31"/></operator><name pos:line="104" pos:column="28">dry_run<pos:position pos:line="104" pos:column="35"/></name></name> <operator pos:line="104" pos:column="36">&amp;&amp;<pos:position pos:line="104" pos:column="46"/></operator> <operator pos:line="104" pos:column="39">(<pos:position pos:line="104" pos:column="40"/></operator><name pos:line="104" pos:column="40">cmds_sent<pos:position pos:line="104" pos:column="49"/></name> <operator pos:line="104" pos:column="50">||<pos:position pos:line="104" pos:column="52"/></operator> <call><name pos:line="104" pos:column="53">is_repository_shallow<pos:position pos:line="104" pos:column="74"/></name><argument_list pos:line="104" pos:column="74">()<pos:position pos:line="104" pos:column="76"/></argument_list></call><operator pos:line="104" pos:column="76">)<pos:position pos:line="104" pos:column="77"/></operator></expr>)<pos:position pos:line="104" pos:column="78"/></condition><then pos:line="104" pos:column="78"> <block pos:line="104" pos:column="79">{
			<expr_stmt><expr><call><name pos:line="105" pos:column="25">packet_buf_flush<pos:position pos:line="105" pos:column="41"/></name><argument_list pos:line="105" pos:column="41">(<argument><expr><operator pos:line="105" pos:column="42">&amp;<pos:position pos:line="105" pos:column="47"/></operator><name pos:line="105" pos:column="43">req_buf<pos:position pos:line="105" pos:column="50"/></name></expr></argument>)<pos:position pos:line="105" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="106" pos:column="25">send_sideband<pos:position pos:line="106" pos:column="38"/></name><argument_list pos:line="106" pos:column="38">(<argument><expr><name pos:line="106" pos:column="39">out<pos:position pos:line="106" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="44">-<pos:position pos:line="106" pos:column="45"/></operator><literal type="number" pos:line="106" pos:column="45">1<pos:position pos:line="106" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="48">req_buf<pos:position pos:line="106" pos:column="55"/></name><operator pos:line="106" pos:column="55">.<pos:position pos:line="106" pos:column="56"/></operator><name pos:line="106" pos:column="56">buf<pos:position pos:line="106" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="61">req_buf<pos:position pos:line="106" pos:column="68"/></name><operator pos:line="106" pos:column="68">.<pos:position pos:line="106" pos:column="69"/></operator><name pos:line="106" pos:column="69">len<pos:position pos:line="106" pos:column="72"/></name></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="74">LARGE_PACKET_MAX<pos:position pos:line="106" pos:column="90"/></name></expr></argument>)<pos:position pos:line="106" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="92"/></expr_stmt>
		}<pos:position pos:line="107" pos:column="18"/></block></then></if>
	}<pos:position pos:line="108" pos:column="10"/></block></then> <else pos:line="108" pos:column="11">else <block pos:line="108" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="109" pos:column="17">write_or_die<pos:position pos:line="109" pos:column="29"/></name><argument_list pos:line="109" pos:column="29">(<argument><expr><name pos:line="109" pos:column="30">out<pos:position pos:line="109" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="109" pos:column="35">req_buf<pos:position pos:line="109" pos:column="42"/></name><operator pos:line="109" pos:column="42">.<pos:position pos:line="109" pos:column="43"/></operator><name pos:line="109" pos:column="43">buf<pos:position pos:line="109" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="109" pos:column="48">req_buf<pos:position pos:line="109" pos:column="55"/></name><operator pos:line="109" pos:column="55">.<pos:position pos:line="109" pos:column="56"/></operator><name pos:line="109" pos:column="56">len<pos:position pos:line="109" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="109" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="110" pos:column="17">packet_flush<pos:position pos:line="110" pos:column="29"/></name><argument_list pos:line="110" pos:column="29">(<argument><expr><name pos:line="110" pos:column="30">out<pos:position pos:line="110" pos:column="33"/></name></expr></argument>)<pos:position pos:line="110" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="111" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="112" pos:column="9">strbuf_release<pos:position pos:line="112" pos:column="23"/></name><argument_list pos:line="112" pos:column="23">(<argument><expr><operator pos:line="112" pos:column="24">&amp;<pos:position pos:line="112" pos:column="29"/></operator><name pos:line="112" pos:column="25">req_buf<pos:position pos:line="112" pos:column="32"/></name></expr></argument>)<pos:position pos:line="112" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="34"/></expr_stmt>

	<if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><name pos:line="114" pos:column="13">use_sideband<pos:position pos:line="114" pos:column="25"/></name> <operator pos:line="114" pos:column="26">&amp;&amp;<pos:position pos:line="114" pos:column="36"/></operator> <name pos:line="114" pos:column="29">cmds_sent<pos:position pos:line="114" pos:column="38"/></name></expr>)<pos:position pos:line="114" pos:column="39"/></condition><then pos:line="114" pos:column="39"> <block pos:line="114" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="115" pos:column="17">memset<pos:position pos:line="115" pos:column="23"/></name><argument_list pos:line="115" pos:column="23">(<argument><expr><operator pos:line="115" pos:column="24">&amp;<pos:position pos:line="115" pos:column="29"/></operator><name pos:line="115" pos:column="25">demux<pos:position pos:line="115" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="115" pos:column="32">0<pos:position pos:line="115" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="115" pos:column="35">sizeof<argument_list pos:line="115" pos:column="41">(<argument><expr><name pos:line="115" pos:column="42">demux<pos:position pos:line="115" pos:column="47"/></name></expr></argument>)<pos:position pos:line="115" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="115" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="116" pos:column="17">demux<pos:position pos:line="116" pos:column="22"/></name><operator pos:line="116" pos:column="22">.<pos:position pos:line="116" pos:column="23"/></operator><name pos:line="116" pos:column="23">proc<pos:position pos:line="116" pos:column="27"/></name></name> <operator pos:line="116" pos:column="28">=<pos:position pos:line="116" pos:column="29"/></operator> <name pos:line="116" pos:column="30">sideband_demux<pos:position pos:line="116" pos:column="44"/></name></expr>;<pos:position pos:line="116" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="117" pos:column="17">demux<pos:position pos:line="117" pos:column="22"/></name><operator pos:line="117" pos:column="22">.<pos:position pos:line="117" pos:column="23"/></operator><name pos:line="117" pos:column="23">data<pos:position pos:line="117" pos:column="27"/></name></name> <operator pos:line="117" pos:column="28">=<pos:position pos:line="117" pos:column="29"/></operator> <name pos:line="117" pos:column="30">fd<pos:position pos:line="117" pos:column="32"/></name></expr>;<pos:position pos:line="117" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="118" pos:column="17">demux<pos:position pos:line="118" pos:column="22"/></name><operator pos:line="118" pos:column="22">.<pos:position pos:line="118" pos:column="23"/></operator><name pos:line="118" pos:column="23">out<pos:position pos:line="118" pos:column="26"/></name></name> <operator pos:line="118" pos:column="27">=<pos:position pos:line="118" pos:column="28"/></operator> <operator pos:line="118" pos:column="29">-<pos:position pos:line="118" pos:column="30"/></operator><literal type="number" pos:line="118" pos:column="30">1<pos:position pos:line="118" pos:column="31"/></literal></expr>;<pos:position pos:line="118" pos:column="32"/></expr_stmt>
		<if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><call><name pos:line="119" pos:column="21">start_async<pos:position pos:line="119" pos:column="32"/></name><argument_list pos:line="119" pos:column="32">(<argument><expr><operator pos:line="119" pos:column="33">&amp;<pos:position pos:line="119" pos:column="38"/></operator><name pos:line="119" pos:column="34">demux<pos:position pos:line="119" pos:column="39"/></name></expr></argument>)<pos:position pos:line="119" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="119" pos:column="41"/></condition><then pos:line="119" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="25">die<pos:position pos:line="120" pos:column="28"/></name><argument_list pos:line="120" pos:column="28">(<argument><expr><literal type="string" pos:line="120" pos:column="29">"send-pack: unable to fork off sideband demultiplexer"<pos:position pos:line="120" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="85"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="121" pos:column="17">in<pos:position pos:line="121" pos:column="19"/></name> <operator pos:line="121" pos:column="20">=<pos:position pos:line="121" pos:column="21"/></operator> <name><name pos:line="121" pos:column="22">demux<pos:position pos:line="121" pos:column="27"/></name><operator pos:line="121" pos:column="27">.<pos:position pos:line="121" pos:column="28"/></operator><name pos:line="121" pos:column="28">out<pos:position pos:line="121" pos:column="31"/></name></name></expr>;<pos:position pos:line="121" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="122" pos:column="10"/></block></then></if>

	<if pos:line="124" pos:column="9">if <condition pos:line="124" pos:column="12">(<expr><name pos:line="124" pos:column="13">new_refs<pos:position pos:line="124" pos:column="21"/></name> <operator pos:line="124" pos:column="22">&amp;&amp;<pos:position pos:line="124" pos:column="32"/></operator> <name pos:line="124" pos:column="25">cmds_sent<pos:position pos:line="124" pos:column="34"/></name></expr>)<pos:position pos:line="124" pos:column="35"/></condition><then pos:line="124" pos:column="35"> <block pos:line="124" pos:column="36">{
		<if pos:line="125" pos:column="17">if <condition pos:line="125" pos:column="20">(<expr><call><name pos:line="125" pos:column="21">pack_objects<pos:position pos:line="125" pos:column="33"/></name><argument_list pos:line="125" pos:column="33">(<argument><expr><name pos:line="125" pos:column="34">out<pos:position pos:line="125" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="39">remote_refs<pos:position pos:line="125" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="52">extra_have<pos:position pos:line="125" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="64">args<pos:position pos:line="125" pos:column="68"/></name></expr></argument>)<pos:position pos:line="125" pos:column="69"/></argument_list></call> <operator pos:line="125" pos:column="70">&lt;<pos:position pos:line="125" pos:column="74"/></operator> <literal type="number" pos:line="125" pos:column="72">0<pos:position pos:line="125" pos:column="73"/></literal></expr>)<pos:position pos:line="125" pos:column="74"/></condition><then pos:line="125" pos:column="74"> <block pos:line="125" pos:column="75">{
			<for pos:line="126" pos:column="25">for <control pos:line="126" pos:column="29">(<init><expr><name pos:line="126" pos:column="30">ref<pos:position pos:line="126" pos:column="33"/></name> <operator pos:line="126" pos:column="34">=<pos:position pos:line="126" pos:column="35"/></operator> <name pos:line="126" pos:column="36">remote_refs<pos:position pos:line="126" pos:column="47"/></name></expr>;<pos:position pos:line="126" pos:column="48"/></init> <condition><expr><name pos:line="126" pos:column="49">ref<pos:position pos:line="126" pos:column="52"/></name></expr>;<pos:position pos:line="126" pos:column="53"/></condition> <incr><expr><name pos:line="126" pos:column="54">ref<pos:position pos:line="126" pos:column="57"/></name> <operator pos:line="126" pos:column="58">=<pos:position pos:line="126" pos:column="59"/></operator> <name><name pos:line="126" pos:column="60">ref<pos:position pos:line="126" pos:column="63"/></name><operator pos:line="126" pos:column="63">-&gt;<pos:position pos:line="126" pos:column="68"/></operator><name pos:line="126" pos:column="65">next<pos:position pos:line="126" pos:column="69"/></name></name></expr></incr>)<pos:position pos:line="126" pos:column="70"/></control>
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="127" pos:column="33">ref<pos:position pos:line="127" pos:column="36"/></name><operator pos:line="127" pos:column="36">-&gt;<pos:position pos:line="127" pos:column="41"/></operator><name pos:line="127" pos:column="38">status<pos:position pos:line="127" pos:column="44"/></name></name> <operator pos:line="127" pos:column="45">=<pos:position pos:line="127" pos:column="46"/></operator> <name pos:line="127" pos:column="47">REF_STATUS_NONE<pos:position pos:line="127" pos:column="62"/></name></expr>;<pos:position pos:line="127" pos:column="63"/></expr_stmt></block></for>
			<if pos:line="128" pos:column="25">if <condition pos:line="128" pos:column="28">(<expr><name><name pos:line="128" pos:column="29">args<pos:position pos:line="128" pos:column="33"/></name><operator pos:line="128" pos:column="33">-&gt;<pos:position pos:line="128" pos:column="38"/></operator><name pos:line="128" pos:column="35">stateless_rpc<pos:position pos:line="128" pos:column="48"/></name></name></expr>)<pos:position pos:line="128" pos:column="49"/></condition><then pos:line="128" pos:column="49">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="129" pos:column="33">close<pos:position pos:line="129" pos:column="38"/></name><argument_list pos:line="129" pos:column="38">(<argument><expr><name pos:line="129" pos:column="39">out<pos:position pos:line="129" pos:column="42"/></name></expr></argument>)<pos:position pos:line="129" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="44"/></expr_stmt></block></then></if>
			<if pos:line="130" pos:column="25">if <condition pos:line="130" pos:column="28">(<expr><call><name pos:line="130" pos:column="29">git_connection_is_socket<pos:position pos:line="130" pos:column="53"/></name><argument_list pos:line="130" pos:column="53">(<argument><expr><name pos:line="130" pos:column="54">conn<pos:position pos:line="130" pos:column="58"/></name></expr></argument>)<pos:position pos:line="130" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="130" pos:column="60"/></condition><then pos:line="130" pos:column="60">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="131" pos:column="33">shutdown<pos:position pos:line="131" pos:column="41"/></name><argument_list pos:line="131" pos:column="41">(<argument><expr><name><name pos:line="131" pos:column="42">fd<pos:position pos:line="131" pos:column="44"/></name><index pos:line="131" pos:column="44">[<expr><literal type="number" pos:line="131" pos:column="45">0<pos:position pos:line="131" pos:column="46"/></literal></expr>]<pos:position pos:line="131" pos:column="47"/></index></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="49">SHUT_WR<pos:position pos:line="131" pos:column="56"/></name></expr></argument>)<pos:position pos:line="131" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="58"/></expr_stmt></block></then></if>
			<if pos:line="132" pos:column="25">if <condition pos:line="132" pos:column="28">(<expr><name pos:line="132" pos:column="29">use_sideband<pos:position pos:line="132" pos:column="41"/></name></expr>)<pos:position pos:line="132" pos:column="42"/></condition><then pos:line="132" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="133" pos:column="33">finish_async<pos:position pos:line="133" pos:column="45"/></name><argument_list pos:line="133" pos:column="45">(<argument><expr><operator pos:line="133" pos:column="46">&amp;<pos:position pos:line="133" pos:column="51"/></operator><name pos:line="133" pos:column="47">demux<pos:position pos:line="133" pos:column="52"/></name></expr></argument>)<pos:position pos:line="133" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="54"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="134" pos:column="25">fd<pos:position pos:line="134" pos:column="27"/></name><index pos:line="134" pos:column="27">[<expr><literal type="number" pos:line="134" pos:column="28">1<pos:position pos:line="134" pos:column="29"/></literal></expr>]<pos:position pos:line="134" pos:column="30"/></index></name> <operator pos:line="134" pos:column="31">=<pos:position pos:line="134" pos:column="32"/></operator> <operator pos:line="134" pos:column="33">-<pos:position pos:line="134" pos:column="34"/></operator><literal type="number" pos:line="134" pos:column="34">1<pos:position pos:line="134" pos:column="35"/></literal></expr>;<pos:position pos:line="134" pos:column="36"/></expr_stmt>
			<return pos:line="135" pos:column="25">return <expr><operator pos:line="135" pos:column="32">-<pos:position pos:line="135" pos:column="33"/></operator><literal type="number" pos:line="135" pos:column="33">1<pos:position pos:line="135" pos:column="34"/></literal></expr>;<pos:position pos:line="135" pos:column="35"/></return>
		}<pos:position pos:line="136" pos:column="18"/></block></then></if>
		<if pos:line="137" pos:column="17">if <condition pos:line="137" pos:column="20">(<expr><operator pos:line="137" pos:column="21">!<pos:position pos:line="137" pos:column="22"/></operator><name><name pos:line="137" pos:column="22">args<pos:position pos:line="137" pos:column="26"/></name><operator pos:line="137" pos:column="26">-&gt;<pos:position pos:line="137" pos:column="31"/></operator><name pos:line="137" pos:column="28">stateless_rpc<pos:position pos:line="137" pos:column="41"/></name></name></expr>)<pos:position pos:line="137" pos:column="42"/></condition><then pos:line="137" pos:column="42">
			<comment type="block" pos:line="138" pos:column="25">/* Closed by pack_objects() via start_command() */</comment>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="139" pos:column="25">fd<pos:position pos:line="139" pos:column="27"/></name><index pos:line="139" pos:column="27">[<expr><literal type="number" pos:line="139" pos:column="28">1<pos:position pos:line="139" pos:column="29"/></literal></expr>]<pos:position pos:line="139" pos:column="30"/></index></name> <operator pos:line="139" pos:column="31">=<pos:position pos:line="139" pos:column="32"/></operator> <operator pos:line="139" pos:column="33">-<pos:position pos:line="139" pos:column="34"/></operator><literal type="number" pos:line="139" pos:column="34">1<pos:position pos:line="139" pos:column="35"/></literal></expr>;<pos:position pos:line="139" pos:column="36"/></expr_stmt></block></then></if>
	}<pos:position pos:line="140" pos:column="10"/></block></then></if>
	<if pos:line="141" pos:column="9">if <condition pos:line="141" pos:column="12">(<expr><name><name pos:line="141" pos:column="13">args<pos:position pos:line="141" pos:column="17"/></name><operator pos:line="141" pos:column="17">-&gt;<pos:position pos:line="141" pos:column="22"/></operator><name pos:line="141" pos:column="19">stateless_rpc<pos:position pos:line="141" pos:column="32"/></name></name> <operator pos:line="141" pos:column="33">&amp;&amp;<pos:position pos:line="141" pos:column="43"/></operator> <name pos:line="141" pos:column="36">cmds_sent<pos:position pos:line="141" pos:column="45"/></name></expr>)<pos:position pos:line="141" pos:column="46"/></condition><then pos:line="141" pos:column="46">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="142" pos:column="17">packet_flush<pos:position pos:line="142" pos:column="29"/></name><argument_list pos:line="142" pos:column="29">(<argument><expr><name pos:line="142" pos:column="30">out<pos:position pos:line="142" pos:column="33"/></name></expr></argument>)<pos:position pos:line="142" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="35"/></expr_stmt></block></then></if>

	<if pos:line="144" pos:column="9">if <condition pos:line="144" pos:column="12">(<expr><name pos:line="144" pos:column="13">status_report<pos:position pos:line="144" pos:column="26"/></name> <operator pos:line="144" pos:column="27">&amp;&amp;<pos:position pos:line="144" pos:column="37"/></operator> <name pos:line="144" pos:column="30">cmds_sent<pos:position pos:line="144" pos:column="39"/></name></expr>)<pos:position pos:line="144" pos:column="40"/></condition><then pos:line="144" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name pos:line="145" pos:column="17">ret<pos:position pos:line="145" pos:column="20"/></name> <operator pos:line="145" pos:column="21">=<pos:position pos:line="145" pos:column="22"/></operator> <call><name pos:line="145" pos:column="23">receive_status<pos:position pos:line="145" pos:column="37"/></name><argument_list pos:line="145" pos:column="37">(<argument><expr><name pos:line="145" pos:column="38">in<pos:position pos:line="145" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="42">remote_refs<pos:position pos:line="145" pos:column="53"/></name></expr></argument>)<pos:position pos:line="145" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="55"/></expr_stmt></block></then>
	<else pos:line="146" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="147" pos:column="17">ret<pos:position pos:line="147" pos:column="20"/></name> <operator pos:line="147" pos:column="21">=<pos:position pos:line="147" pos:column="22"/></operator> <literal type="number" pos:line="147" pos:column="23">0<pos:position pos:line="147" pos:column="24"/></literal></expr>;<pos:position pos:line="147" pos:column="25"/></expr_stmt></block></else></if>
	<if pos:line="148" pos:column="9">if <condition pos:line="148" pos:column="12">(<expr><name><name pos:line="148" pos:column="13">args<pos:position pos:line="148" pos:column="17"/></name><operator pos:line="148" pos:column="17">-&gt;<pos:position pos:line="148" pos:column="22"/></operator><name pos:line="148" pos:column="19">stateless_rpc<pos:position pos:line="148" pos:column="32"/></name></name></expr>)<pos:position pos:line="148" pos:column="33"/></condition><then pos:line="148" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="149" pos:column="17">packet_flush<pos:position pos:line="149" pos:column="29"/></name><argument_list pos:line="149" pos:column="29">(<argument><expr><name pos:line="149" pos:column="30">out<pos:position pos:line="149" pos:column="33"/></name></expr></argument>)<pos:position pos:line="149" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="35"/></expr_stmt></block></then></if>

	<if pos:line="151" pos:column="9">if <condition pos:line="151" pos:column="12">(<expr><name pos:line="151" pos:column="13">use_sideband<pos:position pos:line="151" pos:column="25"/></name> <operator pos:line="151" pos:column="26">&amp;&amp;<pos:position pos:line="151" pos:column="36"/></operator> <name pos:line="151" pos:column="29">cmds_sent<pos:position pos:line="151" pos:column="38"/></name></expr>)<pos:position pos:line="151" pos:column="39"/></condition><then pos:line="151" pos:column="39"> <block pos:line="151" pos:column="40">{
		<if pos:line="152" pos:column="17">if <condition pos:line="152" pos:column="20">(<expr><call><name pos:line="152" pos:column="21">finish_async<pos:position pos:line="152" pos:column="33"/></name><argument_list pos:line="152" pos:column="33">(<argument><expr><operator pos:line="152" pos:column="34">&amp;<pos:position pos:line="152" pos:column="39"/></operator><name pos:line="152" pos:column="35">demux<pos:position pos:line="152" pos:column="40"/></name></expr></argument>)<pos:position pos:line="152" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="152" pos:column="42"/></condition><then pos:line="152" pos:column="42"> <block pos:line="152" pos:column="43">{
			<expr_stmt><expr><call><name pos:line="153" pos:column="25">error<pos:position pos:line="153" pos:column="30"/></name><argument_list pos:line="153" pos:column="30">(<argument><expr><literal type="string" pos:line="153" pos:column="31">"error in sideband demultiplexer"<pos:position pos:line="153" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="153" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><name pos:line="154" pos:column="25">ret<pos:position pos:line="154" pos:column="28"/></name> <operator pos:line="154" pos:column="29">=<pos:position pos:line="154" pos:column="30"/></operator> <operator pos:line="154" pos:column="31">-<pos:position pos:line="154" pos:column="32"/></operator><literal type="number" pos:line="154" pos:column="32">1<pos:position pos:line="154" pos:column="33"/></literal></expr>;<pos:position pos:line="154" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="155" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="156" pos:column="17">close<pos:position pos:line="156" pos:column="22"/></name><argument_list pos:line="156" pos:column="22">(<argument><expr><name><name pos:line="156" pos:column="23">demux<pos:position pos:line="156" pos:column="28"/></name><operator pos:line="156" pos:column="28">.<pos:position pos:line="156" pos:column="29"/></operator><name pos:line="156" pos:column="29">out<pos:position pos:line="156" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="156" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="157" pos:column="10"/></block></then></if>

	<if pos:line="159" pos:column="9">if <condition pos:line="159" pos:column="12">(<expr><name pos:line="159" pos:column="13">ret<pos:position pos:line="159" pos:column="16"/></name> <operator pos:line="159" pos:column="17">&lt;<pos:position pos:line="159" pos:column="21"/></operator> <literal type="number" pos:line="159" pos:column="19">0<pos:position pos:line="159" pos:column="20"/></literal></expr>)<pos:position pos:line="159" pos:column="21"/></condition><then pos:line="159" pos:column="21">
		<block type="pseudo"><return pos:line="160" pos:column="17">return <expr><name pos:line="160" pos:column="24">ret<pos:position pos:line="160" pos:column="27"/></name></expr>;<pos:position pos:line="160" pos:column="28"/></return></block></then></if>

	<if pos:line="162" pos:column="9">if <condition pos:line="162" pos:column="12">(<expr><name><name pos:line="162" pos:column="13">args<pos:position pos:line="162" pos:column="17"/></name><operator pos:line="162" pos:column="17">-&gt;<pos:position pos:line="162" pos:column="22"/></operator><name pos:line="162" pos:column="19">porcelain<pos:position pos:line="162" pos:column="28"/></name></name></expr>)<pos:position pos:line="162" pos:column="29"/></condition><then pos:line="162" pos:column="29">
		<block type="pseudo"><return pos:line="163" pos:column="17">return <expr><literal type="number" pos:line="163" pos:column="24">0<pos:position pos:line="163" pos:column="25"/></literal></expr>;<pos:position pos:line="163" pos:column="26"/></return></block></then></if>

	<for pos:line="165" pos:column="9">for <control pos:line="165" pos:column="13">(<init><expr><name pos:line="165" pos:column="14">ref<pos:position pos:line="165" pos:column="17"/></name> <operator pos:line="165" pos:column="18">=<pos:position pos:line="165" pos:column="19"/></operator> <name pos:line="165" pos:column="20">remote_refs<pos:position pos:line="165" pos:column="31"/></name></expr>;<pos:position pos:line="165" pos:column="32"/></init> <condition><expr><name pos:line="165" pos:column="33">ref<pos:position pos:line="165" pos:column="36"/></name></expr>;<pos:position pos:line="165" pos:column="37"/></condition> <incr><expr><name pos:line="165" pos:column="38">ref<pos:position pos:line="165" pos:column="41"/></name> <operator pos:line="165" pos:column="42">=<pos:position pos:line="165" pos:column="43"/></operator> <name><name pos:line="165" pos:column="44">ref<pos:position pos:line="165" pos:column="47"/></name><operator pos:line="165" pos:column="47">-&gt;<pos:position pos:line="165" pos:column="52"/></operator><name pos:line="165" pos:column="49">next<pos:position pos:line="165" pos:column="53"/></name></name></expr></incr>)<pos:position pos:line="165" pos:column="54"/></control> <block pos:line="165" pos:column="55">{
		<switch pos:line="166" pos:column="17">switch <condition pos:line="166" pos:column="24">(<expr><name><name pos:line="166" pos:column="25">ref<pos:position pos:line="166" pos:column="28"/></name><operator pos:line="166" pos:column="28">-&gt;<pos:position pos:line="166" pos:column="33"/></operator><name pos:line="166" pos:column="30">status<pos:position pos:line="166" pos:column="36"/></name></name></expr>)<pos:position pos:line="166" pos:column="37"/></condition> <block pos:line="166" pos:column="38">{
		<case pos:line="167" pos:column="17">case <expr><name pos:line="167" pos:column="22">REF_STATUS_NONE<pos:position pos:line="167" pos:column="37"/></name></expr>:<pos:position pos:line="167" pos:column="38"/></case>
		<case pos:line="168" pos:column="17">case <expr><name pos:line="168" pos:column="22">REF_STATUS_UPTODATE<pos:position pos:line="168" pos:column="41"/></name></expr>:<pos:position pos:line="168" pos:column="42"/></case>
		<case pos:line="169" pos:column="17">case <expr><name pos:line="169" pos:column="22">REF_STATUS_OK<pos:position pos:line="169" pos:column="35"/></name></expr>:<pos:position pos:line="169" pos:column="36"/></case>
			<break pos:line="170" pos:column="25">break;<pos:position pos:line="170" pos:column="31"/></break>
		<default pos:line="171" pos:column="17">default:<pos:position pos:line="171" pos:column="25"/></default>
			<return pos:line="172" pos:column="25">return <expr><operator pos:line="172" pos:column="32">-<pos:position pos:line="172" pos:column="33"/></operator><literal type="number" pos:line="172" pos:column="33">1<pos:position pos:line="172" pos:column="34"/></literal></expr>;<pos:position pos:line="172" pos:column="35"/></return>
		}<pos:position pos:line="173" pos:column="18"/></block></switch>
	}<pos:position pos:line="174" pos:column="10"/></block></for>
	<return pos:line="175" pos:column="9">return <expr><literal type="number" pos:line="175" pos:column="16">0<pos:position pos:line="175" pos:column="17"/></literal></expr>;<pos:position pos:line="175" pos:column="18"/></return>
}<pos:position pos:line="176" pos:column="2"/></block></function></unit>
