<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2289_git-2.8.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">usage_with_options_internal<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">parse_opt_ctx_t<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">ctx<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
				       <parameter><decl><type><specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier> <name pos:line="2" pos:column="46">char<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier> <specifier pos:line="2" pos:column="53">const<pos:position pos:line="2" pos:column="58"/></specifier> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">usagestr<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>,
				       <parameter><decl><type><specifier pos:line="3" pos:column="40">const<pos:position pos:line="3" pos:column="45"/></specifier> <name><name pos:line="3" pos:column="46">struct<pos:position pos:line="3" pos:column="52"/></name> <name pos:line="3" pos:column="53">option<pos:position pos:line="3" pos:column="59"/></name></name> <modifier pos:line="3" pos:column="60">*<pos:position pos:line="3" pos:column="61"/></modifier></type><name pos:line="3" pos:column="61">opts<pos:position pos:line="3" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="67">int<pos:position pos:line="3" pos:column="70"/></name></type> <name pos:line="3" pos:column="71">full<pos:position pos:line="3" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="77">int<pos:position pos:line="3" pos:column="80"/></name></type> <name pos:line="3" pos:column="81">err<pos:position pos:line="3" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="85"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">FILE<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">outfile<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><ternary><condition><expr><name pos:line="5" pos:column="25">err<pos:position pos:line="5" pos:column="28"/></name></expr> ?<pos:position pos:line="5" pos:column="30"/></condition><then pos:line="5" pos:column="30"> <expr><name pos:line="5" pos:column="31">stderr<pos:position pos:line="5" pos:column="37"/></name></expr> <pos:position pos:line="5" pos:column="38"/></then><else pos:line="5" pos:column="38">: <expr><name pos:line="5" pos:column="40">stdout<pos:position pos:line="5" pos:column="46"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="5" pos:column="47"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">usagestr<pos:position pos:line="7" pos:column="22"/></name></expr>)<pos:position pos:line="7" pos:column="23"/></condition><then pos:line="7" pos:column="23">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><name pos:line="8" pos:column="24">PARSE_OPT_HELP<pos:position pos:line="8" pos:column="38"/></name></expr>;<pos:position pos:line="8" pos:column="39"/></return></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">err<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">&amp;&amp;<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="21">ctx<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">&amp;&amp;<pos:position pos:line="10" pos:column="35"/></operator> <name><name pos:line="10" pos:column="28">ctx<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">flags<pos:position pos:line="10" pos:column="38"/></name></name> <operator pos:line="10" pos:column="39">&amp;<pos:position pos:line="10" pos:column="44"/></operator> <name pos:line="10" pos:column="41">PARSE_OPT_SHELL_EVAL<pos:position pos:line="10" pos:column="61"/></name></expr>)<pos:position pos:line="10" pos:column="62"/></condition><then pos:line="10" pos:column="62">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">fprintf<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">outfile<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="34">"cat &lt;&lt;\\EOF\n"<pos:position pos:line="11" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">fprintf_ln<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">outfile<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="29">_<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><literal type="string" pos:line="13" pos:column="31">"usage: %s"<pos:position pos:line="13" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="45">_<pos:position pos:line="13" pos:column="46"/></name><argument_list pos:line="13" pos:column="46">(<argument><expr><operator pos:line="13" pos:column="47">*<pos:position pos:line="13" pos:column="48"/></operator><name pos:line="13" pos:column="48">usagestr<pos:position pos:line="13" pos:column="56"/></name><operator pos:line="13" pos:column="56">++<pos:position pos:line="13" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt>
	<while pos:line="14" pos:column="9">while <condition pos:line="14" pos:column="15">(<expr><operator pos:line="14" pos:column="16">*<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">usagestr<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">&amp;&amp;<pos:position pos:line="14" pos:column="36"/></operator> <operator pos:line="14" pos:column="29">*<pos:position pos:line="14" pos:column="30"/></operator><operator pos:line="14" pos:column="30">*<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="31">usagestr<pos:position pos:line="14" pos:column="39"/></name></expr>)<pos:position pos:line="14" pos:column="40"/></condition>
		<comment type="block" pos:line="15" pos:column="17">/* TRANSLATORS: the colon here should align with the
		   one in "usage: %s" translation */</comment>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">fprintf_ln<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><name pos:line="17" pos:column="28">outfile<pos:position pos:line="17" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="37">_<pos:position pos:line="17" pos:column="38"/></name><argument_list pos:line="17" pos:column="38">(<argument><expr><literal type="string" pos:line="17" pos:column="39">"   or: %s"<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="53">_<pos:position pos:line="17" pos:column="54"/></name><argument_list pos:line="17" pos:column="54">(<argument><expr><operator pos:line="17" pos:column="55">*<pos:position pos:line="17" pos:column="56"/></operator><name pos:line="17" pos:column="56">usagestr<pos:position pos:line="17" pos:column="64"/></name><operator pos:line="17" pos:column="64">++<pos:position pos:line="17" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="17" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="69"/></expr_stmt></block></while>
	<while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><operator pos:line="18" pos:column="16">*<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">usagestr<pos:position pos:line="18" pos:column="25"/></name></expr>)<pos:position pos:line="18" pos:column="26"/></condition> <block pos:line="18" pos:column="27">{
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><operator pos:line="19" pos:column="21">*<pos:position pos:line="19" pos:column="22"/></operator><operator pos:line="19" pos:column="22">*<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">usagestr<pos:position pos:line="19" pos:column="31"/></name></expr>)<pos:position pos:line="19" pos:column="32"/></condition><then pos:line="19" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="25">fprintf_ln<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><name pos:line="20" pos:column="36">outfile<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="45">_<pos:position pos:line="20" pos:column="46"/></name><argument_list pos:line="20" pos:column="46">(<argument><expr><literal type="string" pos:line="20" pos:column="47">"    %s"<pos:position pos:line="20" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="58">_<pos:position pos:line="20" pos:column="59"/></name><argument_list pos:line="20" pos:column="59">(<argument><expr><operator pos:line="20" pos:column="60">*<pos:position pos:line="20" pos:column="61"/></operator><name pos:line="20" pos:column="61">usagestr<pos:position pos:line="20" pos:column="69"/></name></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="72"/></expr_stmt></block></then>
		<else pos:line="21" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="25">putchar<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><literal type="char" pos:line="22" pos:column="33">'\n'<pos:position pos:line="22" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name pos:line="23" pos:column="17">usagestr<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">++<pos:position pos:line="23" pos:column="27"/></operator></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></while>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">opts<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">type<pos:position pos:line="26" pos:column="23"/></name></name> <operator pos:line="26" pos:column="24">!=<pos:position pos:line="26" pos:column="26"/></operator> <name pos:line="26" pos:column="27">OPTION_GROUP<pos:position pos:line="26" pos:column="39"/></name></expr>)<pos:position pos:line="26" pos:column="40"/></condition><then pos:line="26" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="17">fputc<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><literal type="char" pos:line="27" pos:column="23">'\n'<pos:position pos:line="27" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="29">outfile<pos:position pos:line="27" pos:column="36"/></name></expr></argument>)<pos:position pos:line="27" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt></block></then></if>

	<for pos:line="29" pos:column="9">for <control pos:line="29" pos:column="13">(<init pos:line="29" pos:column="14">;<pos:position pos:line="29" pos:column="15"/></init> <condition><expr><name><name pos:line="29" pos:column="16">opts<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">-&gt;<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="22">type<pos:position pos:line="29" pos:column="26"/></name></name> <operator pos:line="29" pos:column="27">!=<pos:position pos:line="29" pos:column="29"/></operator> <name pos:line="29" pos:column="30">OPTION_END<pos:position pos:line="29" pos:column="40"/></name></expr>;<pos:position pos:line="29" pos:column="41"/></condition> <incr><expr><name pos:line="29" pos:column="42">opts<pos:position pos:line="29" pos:column="46"/></name><operator pos:line="29" pos:column="46">++<pos:position pos:line="29" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="29" pos:column="49"/></control> <block pos:line="29" pos:column="50">{
		<decl_stmt><decl><type><name pos:line="30" pos:column="17">size_t<pos:position pos:line="30" pos:column="23"/></name></type> <name pos:line="30" pos:column="24">pos<pos:position pos:line="30" pos:column="27"/></name></decl>;<pos:position pos:line="30" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="31" pos:column="17">int<pos:position pos:line="31" pos:column="20"/></name></type> <name pos:line="31" pos:column="21">pad<pos:position pos:line="31" pos:column="24"/></name></decl>;<pos:position pos:line="31" pos:column="25"/></decl_stmt>

		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name><name pos:line="33" pos:column="21">opts<pos:position pos:line="33" pos:column="25"/></name><operator pos:line="33" pos:column="25">-&gt;<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="27">type<pos:position pos:line="33" pos:column="31"/></name></name> <operator pos:line="33" pos:column="32">==<pos:position pos:line="33" pos:column="34"/></operator> <name pos:line="33" pos:column="35">OPTION_GROUP<pos:position pos:line="33" pos:column="47"/></name></expr>)<pos:position pos:line="33" pos:column="48"/></condition><then pos:line="33" pos:column="48"> <block pos:line="33" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">fputc<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><literal type="char" pos:line="34" pos:column="31">'\n'<pos:position pos:line="34" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="37">outfile<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt>
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><operator pos:line="35" pos:column="29">*<pos:position pos:line="35" pos:column="30"/></operator><name><name pos:line="35" pos:column="30">opts<pos:position pos:line="35" pos:column="34"/></name><operator pos:line="35" pos:column="34">-&gt;<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="36">help<pos:position pos:line="35" pos:column="40"/></name></name></expr>)<pos:position pos:line="35" pos:column="41"/></condition><then pos:line="35" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="33">fprintf<pos:position pos:line="36" pos:column="40"/></name><argument_list pos:line="36" pos:column="40">(<argument><expr><name pos:line="36" pos:column="41">outfile<pos:position pos:line="36" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="50">"%s\n"<pos:position pos:line="36" pos:column="56"/></literal></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="58">_<pos:position pos:line="36" pos:column="59"/></name><argument_list pos:line="36" pos:column="59">(<argument><expr><name><name pos:line="36" pos:column="60">opts<pos:position pos:line="36" pos:column="64"/></name><operator pos:line="36" pos:column="64">-&gt;<pos:position pos:line="36" pos:column="69"/></operator><name pos:line="36" pos:column="66">help<pos:position pos:line="36" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="73"/></expr_stmt></block></then></if>
			<continue pos:line="37" pos:column="25">continue;<pos:position pos:line="37" pos:column="34"/></continue>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">!<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">full<pos:position pos:line="39" pos:column="26"/></name> <operator pos:line="39" pos:column="27">&amp;&amp;<pos:position pos:line="39" pos:column="37"/></operator> <operator pos:line="39" pos:column="30">(<pos:position pos:line="39" pos:column="31"/></operator><name><name pos:line="39" pos:column="31">opts<pos:position pos:line="39" pos:column="35"/></name><operator pos:line="39" pos:column="35">-&gt;<pos:position pos:line="39" pos:column="40"/></operator><name pos:line="39" pos:column="37">flags<pos:position pos:line="39" pos:column="42"/></name></name> <operator pos:line="39" pos:column="43">&amp;<pos:position pos:line="39" pos:column="48"/></operator> <name pos:line="39" pos:column="45">PARSE_OPT_HIDDEN<pos:position pos:line="39" pos:column="61"/></name><operator pos:line="39" pos:column="61">)<pos:position pos:line="39" pos:column="62"/></operator></expr>)<pos:position pos:line="39" pos:column="63"/></condition><then pos:line="39" pos:column="63">
			<block type="pseudo"><continue pos:line="40" pos:column="25">continue;<pos:position pos:line="40" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="42" pos:column="17">pos<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <call><name pos:line="42" pos:column="23">fprintf<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><name pos:line="42" pos:column="31">outfile<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="40">"    "<pos:position pos:line="42" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="48"/></expr_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name><name pos:line="43" pos:column="21">opts<pos:position pos:line="43" pos:column="25"/></name><operator pos:line="43" pos:column="25">-&gt;<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="27">short_name<pos:position pos:line="43" pos:column="37"/></name></name></expr>)<pos:position pos:line="43" pos:column="38"/></condition><then pos:line="43" pos:column="38"> <block pos:line="43" pos:column="39">{
			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><name><name pos:line="44" pos:column="29">opts<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">-&gt;<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="35">flags<pos:position pos:line="44" pos:column="40"/></name></name> <operator pos:line="44" pos:column="41">&amp;<pos:position pos:line="44" pos:column="46"/></operator> <name pos:line="44" pos:column="43">PARSE_OPT_NODASH<pos:position pos:line="44" pos:column="59"/></name></expr>)<pos:position pos:line="44" pos:column="60"/></condition><then pos:line="44" pos:column="60">
				<block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="33">pos<pos:position pos:line="45" pos:column="36"/></name> <operator pos:line="45" pos:column="37">+=<pos:position pos:line="45" pos:column="39"/></operator> <call><name pos:line="45" pos:column="40">fprintf<pos:position pos:line="45" pos:column="47"/></name><argument_list pos:line="45" pos:column="47">(<argument><expr><name pos:line="45" pos:column="48">outfile<pos:position pos:line="45" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="57">"%c"<pos:position pos:line="45" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="63">opts<pos:position pos:line="45" pos:column="67"/></name><operator pos:line="45" pos:column="67">-&gt;<pos:position pos:line="45" pos:column="72"/></operator><name pos:line="45" pos:column="69">short_name<pos:position pos:line="45" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="81"/></expr_stmt></block></then>
			<else pos:line="46" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="33">pos<pos:position pos:line="47" pos:column="36"/></name> <operator pos:line="47" pos:column="37">+=<pos:position pos:line="47" pos:column="39"/></operator> <call><name pos:line="47" pos:column="40">fprintf<pos:position pos:line="47" pos:column="47"/></name><argument_list pos:line="47" pos:column="47">(<argument><expr><name pos:line="47" pos:column="48">outfile<pos:position pos:line="47" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="57">"-%c"<pos:position pos:line="47" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="64">opts<pos:position pos:line="47" pos:column="68"/></name><operator pos:line="47" pos:column="68">-&gt;<pos:position pos:line="47" pos:column="73"/></operator><name pos:line="47" pos:column="70">short_name<pos:position pos:line="47" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="82"/></expr_stmt></block></else></if>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name><name pos:line="49" pos:column="21">opts<pos:position pos:line="49" pos:column="25"/></name><operator pos:line="49" pos:column="25">-&gt;<pos:position pos:line="49" pos:column="30"/></operator><name pos:line="49" pos:column="27">long_name<pos:position pos:line="49" pos:column="36"/></name></name> <operator pos:line="49" pos:column="37">&amp;&amp;<pos:position pos:line="49" pos:column="47"/></operator> <name><name pos:line="49" pos:column="40">opts<pos:position pos:line="49" pos:column="44"/></name><operator pos:line="49" pos:column="44">-&gt;<pos:position pos:line="49" pos:column="49"/></operator><name pos:line="49" pos:column="46">short_name<pos:position pos:line="49" pos:column="56"/></name></name></expr>)<pos:position pos:line="49" pos:column="57"/></condition><then pos:line="49" pos:column="57">
			<block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="25">pos<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">+=<pos:position pos:line="50" pos:column="31"/></operator> <call><name pos:line="50" pos:column="32">fprintf<pos:position pos:line="50" pos:column="39"/></name><argument_list pos:line="50" pos:column="39">(<argument><expr><name pos:line="50" pos:column="40">outfile<pos:position pos:line="50" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="49">", "<pos:position pos:line="50" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="55"/></expr_stmt></block></then></if>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><name><name pos:line="51" pos:column="21">opts<pos:position pos:line="51" pos:column="25"/></name><operator pos:line="51" pos:column="25">-&gt;<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="27">long_name<pos:position pos:line="51" pos:column="36"/></name></name></expr>)<pos:position pos:line="51" pos:column="37"/></condition><then pos:line="51" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="25">pos<pos:position pos:line="52" pos:column="28"/></name> <operator pos:line="52" pos:column="29">+=<pos:position pos:line="52" pos:column="31"/></operator> <call><name pos:line="52" pos:column="32">fprintf<pos:position pos:line="52" pos:column="39"/></name><argument_list pos:line="52" pos:column="39">(<argument><expr><name pos:line="52" pos:column="40">outfile<pos:position pos:line="52" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="49">"--%s"<pos:position pos:line="52" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="57">opts<pos:position pos:line="52" pos:column="61"/></name><operator pos:line="52" pos:column="61">-&gt;<pos:position pos:line="52" pos:column="66"/></operator><name pos:line="52" pos:column="63">long_name<pos:position pos:line="52" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="74"/></expr_stmt></block></then></if>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name><name pos:line="53" pos:column="21">opts<pos:position pos:line="53" pos:column="25"/></name><operator pos:line="53" pos:column="25">-&gt;<pos:position pos:line="53" pos:column="30"/></operator><name pos:line="53" pos:column="27">type<pos:position pos:line="53" pos:column="31"/></name></name> <operator pos:line="53" pos:column="32">==<pos:position pos:line="53" pos:column="34"/></operator> <name pos:line="53" pos:column="35">OPTION_NUMBER<pos:position pos:line="53" pos:column="48"/></name></expr>)<pos:position pos:line="53" pos:column="49"/></condition><then pos:line="53" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="25">pos<pos:position pos:line="54" pos:column="28"/></name> <operator pos:line="54" pos:column="29">+=<pos:position pos:line="54" pos:column="31"/></operator> <call><name pos:line="54" pos:column="32">utf8_fprintf<pos:position pos:line="54" pos:column="44"/></name><argument_list pos:line="54" pos:column="44">(<argument><expr><name pos:line="54" pos:column="45">outfile<pos:position pos:line="54" pos:column="52"/></name></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="54">_<pos:position pos:line="54" pos:column="55"/></name><argument_list pos:line="54" pos:column="55">(<argument><expr><literal type="string" pos:line="54" pos:column="56">"-NUM"<pos:position pos:line="54" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="65"/></expr_stmt></block></then></if>

		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><operator pos:line="56" pos:column="21">(<pos:position pos:line="56" pos:column="22"/></operator><name><name pos:line="56" pos:column="22">opts<pos:position pos:line="56" pos:column="26"/></name><operator pos:line="56" pos:column="26">-&gt;<pos:position pos:line="56" pos:column="31"/></operator><name pos:line="56" pos:column="28">flags<pos:position pos:line="56" pos:column="33"/></name></name> <operator pos:line="56" pos:column="34">&amp;<pos:position pos:line="56" pos:column="39"/></operator> <name pos:line="56" pos:column="36">PARSE_OPT_LITERAL_ARGHELP<pos:position pos:line="56" pos:column="61"/></name><operator pos:line="56" pos:column="61">)<pos:position pos:line="56" pos:column="62"/></operator> <operator pos:line="56" pos:column="63">||<pos:position pos:line="56" pos:column="65"/></operator>
		    <operator pos:line="57" pos:column="21">!<pos:position pos:line="57" pos:column="22"/></operator><operator pos:line="57" pos:column="22">(<pos:position pos:line="57" pos:column="23"/></operator><name><name pos:line="57" pos:column="23">opts<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">-&gt;<pos:position pos:line="57" pos:column="32"/></operator><name pos:line="57" pos:column="29">flags<pos:position pos:line="57" pos:column="34"/></name></name> <operator pos:line="57" pos:column="35">&amp;<pos:position pos:line="57" pos:column="40"/></operator> <name pos:line="57" pos:column="37">PARSE_OPT_NOARG<pos:position pos:line="57" pos:column="52"/></name><operator pos:line="57" pos:column="52">)<pos:position pos:line="57" pos:column="53"/></operator></expr>)<pos:position pos:line="57" pos:column="54"/></condition><then pos:line="57" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="25">pos<pos:position pos:line="58" pos:column="28"/></name> <operator pos:line="58" pos:column="29">+=<pos:position pos:line="58" pos:column="31"/></operator> <call><name pos:line="58" pos:column="32">usage_argh<pos:position pos:line="58" pos:column="42"/></name><argument_list pos:line="58" pos:column="42">(<argument><expr><name pos:line="58" pos:column="43">opts<pos:position pos:line="58" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="49">outfile<pos:position pos:line="58" pos:column="56"/></name></expr></argument>)<pos:position pos:line="58" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="58"/></expr_stmt></block></then></if>

		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">pos<pos:position pos:line="60" pos:column="24"/></name> <operator pos:line="60" pos:column="25">&lt;=<pos:position pos:line="60" pos:column="30"/></operator> <name pos:line="60" pos:column="28">USAGE_OPTS_WIDTH<pos:position pos:line="60" pos:column="44"/></name></expr>)<pos:position pos:line="60" pos:column="45"/></condition><then pos:line="60" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="25">pad<pos:position pos:line="61" pos:column="28"/></name> <operator pos:line="61" pos:column="29">=<pos:position pos:line="61" pos:column="30"/></operator> <name pos:line="61" pos:column="31">USAGE_OPTS_WIDTH<pos:position pos:line="61" pos:column="47"/></name> <operator pos:line="61" pos:column="48">-<pos:position pos:line="61" pos:column="49"/></operator> <name pos:line="61" pos:column="50">pos<pos:position pos:line="61" pos:column="53"/></name></expr>;<pos:position pos:line="61" pos:column="54"/></expr_stmt></block></then>
		<else pos:line="62" pos:column="17">else <block pos:line="62" pos:column="22">{
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">fputc<pos:position pos:line="63" pos:column="30"/></name><argument_list pos:line="63" pos:column="30">(<argument><expr><literal type="char" pos:line="63" pos:column="31">'\n'<pos:position pos:line="63" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="37">outfile<pos:position pos:line="63" pos:column="44"/></name></expr></argument>)<pos:position pos:line="63" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="64" pos:column="25">pad<pos:position pos:line="64" pos:column="28"/></name> <operator pos:line="64" pos:column="29">=<pos:position pos:line="64" pos:column="30"/></operator> <name pos:line="64" pos:column="31">USAGE_OPTS_WIDTH<pos:position pos:line="64" pos:column="47"/></name></expr>;<pos:position pos:line="64" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="65" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">fprintf<pos:position pos:line="66" pos:column="24"/></name><argument_list pos:line="66" pos:column="24">(<argument><expr><name pos:line="66" pos:column="25">outfile<pos:position pos:line="66" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="34">"%*s%s\n"<pos:position pos:line="66" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="45">pad<pos:position pos:line="66" pos:column="48"/></name> <operator pos:line="66" pos:column="49">+<pos:position pos:line="66" pos:column="50"/></operator> <name pos:line="66" pos:column="51">USAGE_GAP<pos:position pos:line="66" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="62">""<pos:position pos:line="66" pos:column="64"/></literal></expr></argument>, <argument><expr><call><name pos:line="66" pos:column="66">_<pos:position pos:line="66" pos:column="67"/></name><argument_list pos:line="66" pos:column="67">(<argument><expr><name><name pos:line="66" pos:column="68">opts<pos:position pos:line="66" pos:column="72"/></name><operator pos:line="66" pos:column="72">-&gt;<pos:position pos:line="66" pos:column="77"/></operator><name pos:line="66" pos:column="74">help<pos:position pos:line="66" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="81"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="68" pos:column="9">fputc<pos:position pos:line="68" pos:column="14"/></name><argument_list pos:line="68" pos:column="14">(<argument><expr><literal type="char" pos:line="68" pos:column="15">'\n'<pos:position pos:line="68" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="21">outfile<pos:position pos:line="68" pos:column="28"/></name></expr></argument>)<pos:position pos:line="68" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="30"/></expr_stmt>

	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><operator pos:line="70" pos:column="13">!<pos:position pos:line="70" pos:column="14"/></operator><name pos:line="70" pos:column="14">err<pos:position pos:line="70" pos:column="17"/></name> <operator pos:line="70" pos:column="18">&amp;&amp;<pos:position pos:line="70" pos:column="28"/></operator> <name pos:line="70" pos:column="21">ctx<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">&amp;&amp;<pos:position pos:line="70" pos:column="35"/></operator> <name><name pos:line="70" pos:column="28">ctx<pos:position pos:line="70" pos:column="31"/></name><operator pos:line="70" pos:column="31">-&gt;<pos:position pos:line="70" pos:column="36"/></operator><name pos:line="70" pos:column="33">flags<pos:position pos:line="70" pos:column="38"/></name></name> <operator pos:line="70" pos:column="39">&amp;<pos:position pos:line="70" pos:column="44"/></operator> <name pos:line="70" pos:column="41">PARSE_OPT_SHELL_EVAL<pos:position pos:line="70" pos:column="61"/></name></expr>)<pos:position pos:line="70" pos:column="62"/></condition><then pos:line="70" pos:column="62">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="17">fputs<pos:position pos:line="71" pos:column="22"/></name><argument_list pos:line="71" pos:column="22">(<argument><expr><literal type="string" pos:line="71" pos:column="23">"EOF\n"<pos:position pos:line="71" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="32">outfile<pos:position pos:line="71" pos:column="39"/></name></expr></argument>)<pos:position pos:line="71" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="41"/></expr_stmt></block></then></if>

	<return pos:line="73" pos:column="9">return <expr><name pos:line="73" pos:column="16">PARSE_OPT_HELP<pos:position pos:line="73" pos:column="30"/></name></expr>;<pos:position pos:line="73" pos:column="31"/></return>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
