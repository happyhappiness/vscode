<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1646.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">commit_packed_refs<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">packed_ref_cache<pos:position pos:line="3" pos:column="32"/></name></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">packed_ref_cache<pos:position pos:line="3" pos:column="50"/></name> <init pos:line="3" pos:column="51">=
		<expr><call><name pos:line="4" pos:column="17">get_packed_ref_cache<pos:position pos:line="4" pos:column="37"/></name><argument_list pos:line="4" pos:column="37">(<argument><expr><operator pos:line="4" pos:column="38">&amp;<pos:position pos:line="4" pos:column="43"/></operator><name pos:line="4" pos:column="39">ref_cache<pos:position pos:line="4" pos:column="48"/></name></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">error<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><literal type="number" pos:line="5" pos:column="21">0<pos:position pos:line="5" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">save_errno<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><literal type="number" pos:line="6" pos:column="26">0<pos:position pos:line="6" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">FILE<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">out<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name><name pos:line="9" pos:column="14">packed_ref_cache<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">-&gt;<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="32">lock<pos:position pos:line="9" pos:column="36"/></name></name></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">die<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><literal type="string" pos:line="10" pos:column="21">"internal error: packed-refs not locked"<pos:position pos:line="10" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="63"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="12" pos:column="9">out<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <call><name pos:line="12" pos:column="15">fdopen_lock_file<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><name><name pos:line="12" pos:column="32">packed_ref_cache<pos:position pos:line="12" pos:column="48"/></name><operator pos:line="12" pos:column="48">-&gt;<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="50">lock<pos:position pos:line="12" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="56">"w"<pos:position pos:line="12" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="61"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">out<pos:position pos:line="13" pos:column="17"/></name></expr>)<pos:position pos:line="13" pos:column="18"/></condition><then pos:line="13" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">die_errno<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><literal type="string" pos:line="14" pos:column="27">"unable to fdopen packed-refs descriptor"<pos:position pos:line="14" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="70"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">fprintf_or_die<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">out<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="29">"%s"<pos:position pos:line="16" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="35">PACKED_REFS_HEADER<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">do_for_each_entry_in_dir<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><call><name pos:line="17" pos:column="34">get_packed_ref_dir<pos:position pos:line="17" pos:column="52"/></name><argument_list pos:line="17" pos:column="52">(<argument><expr><name pos:line="17" pos:column="53">packed_ref_cache<pos:position pos:line="17" pos:column="69"/></name></expr></argument>)<pos:position pos:line="17" pos:column="70"/></argument_list></call></expr></argument>,
				 <argument><expr><literal type="number" pos:line="18" pos:column="34">0<pos:position pos:line="18" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="37">write_packed_entry_fn<pos:position pos:line="18" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="60">out<pos:position pos:line="18" pos:column="63"/></name></expr></argument>)<pos:position pos:line="18" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="65"/></expr_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">commit_lock_file<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name><name pos:line="20" pos:column="30">packed_ref_cache<pos:position pos:line="20" pos:column="46"/></name><operator pos:line="20" pos:column="46">-&gt;<pos:position pos:line="20" pos:column="51"/></operator><name pos:line="20" pos:column="48">lock<pos:position pos:line="20" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="54"/></condition><then pos:line="20" pos:column="54"> <block pos:line="20" pos:column="55">{
		<expr_stmt><expr><name pos:line="21" pos:column="17">save_errno<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">=<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="30">errno<pos:position pos:line="21" pos:column="35"/></name></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">error<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <operator pos:line="22" pos:column="25">-<pos:position pos:line="22" pos:column="26"/></operator><literal type="number" pos:line="22" pos:column="26">1<pos:position pos:line="22" pos:column="27"/></literal></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">packed_ref_cache<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">-&gt;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="27">lock<pos:position pos:line="24" pos:column="31"/></name></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="34">NULL<pos:position pos:line="24" pos:column="38"/></name></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">release_packed_ref_cache<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">packed_ref_cache<pos:position pos:line="25" pos:column="50"/></name></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">errno<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <name pos:line="26" pos:column="17">save_errno<pos:position pos:line="26" pos:column="27"/></name></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>
	<return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">error<pos:position pos:line="27" pos:column="21"/></name></expr>;<pos:position pos:line="27" pos:column="22"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
