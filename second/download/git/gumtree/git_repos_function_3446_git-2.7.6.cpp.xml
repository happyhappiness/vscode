<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3446_git-2.7.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">cram<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">challenge_64<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">user<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="63">const<pos:position pos:line="1" pos:column="68"/></specifier> <name pos:line="1" pos:column="69">char<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">pass<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">resp_len<pos:position pos:line="3" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="26">encoded_len<pos:position pos:line="3" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="39">decoded_len<pos:position pos:line="3" pos:column="50"/></name></decl>;<pos:position pos:line="3" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">HMAC_CTX<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">hmac<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name><name pos:line="5" pos:column="23">hash<pos:position pos:line="5" pos:column="27"/></name><index pos:line="5" pos:column="27">[<expr><literal type="number" pos:line="5" pos:column="28">16<pos:position pos:line="5" pos:column="30"/></literal></expr>]<pos:position pos:line="5" pos:column="31"/></index></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">hex<pos:position pos:line="6" pos:column="17"/></name><index pos:line="6" pos:column="17">[<expr><literal type="number" pos:line="6" pos:column="18">33<pos:position pos:line="6" pos:column="20"/></literal></expr>]<pos:position pos:line="6" pos:column="21"/></index></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">response<pos:position pos:line="7" pos:column="23"/></name></decl>, <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="26">response_64<pos:position pos:line="7" pos:column="37"/></name></decl>, <modifier pos:line="7" pos:column="39">*<pos:position pos:line="7" pos:column="40"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="40">challenge<pos:position pos:line="7" pos:column="49"/></name></decl>;<pos:position pos:line="7" pos:column="50"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * length of challenge_64 (i.e. base-64 encoded string) is a good
	 * enough upper bound for challenge (decoded result).
	 */</comment>
	<expr_stmt><expr><name pos:line="13" pos:column="9">encoded_len<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <call><name pos:line="13" pos:column="23">strlen<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">challenge_64<pos:position pos:line="13" pos:column="42"/></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name pos:line="14" pos:column="9">challenge<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <call><name pos:line="14" pos:column="21">xmalloc<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">encoded_len<pos:position pos:line="14" pos:column="40"/></name></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">decoded_len<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <call><name pos:line="15" pos:column="23">EVP_DecodeBlock<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><operator pos:line="15" pos:column="39">(<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="40">unsigned<pos:position pos:line="15" pos:column="48"/></name> <name pos:line="15" pos:column="49">char<pos:position pos:line="15" pos:column="53"/></name> <operator pos:line="15" pos:column="54">*<pos:position pos:line="15" pos:column="55"/></operator><operator pos:line="15" pos:column="55">)<pos:position pos:line="15" pos:column="56"/></operator><name pos:line="15" pos:column="56">challenge<pos:position pos:line="15" pos:column="65"/></name></expr></argument>,
				      <argument><expr><operator pos:line="16" pos:column="39">(<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="40">unsigned<pos:position pos:line="16" pos:column="48"/></name> <name pos:line="16" pos:column="49">char<pos:position pos:line="16" pos:column="53"/></name> <operator pos:line="16" pos:column="54">*<pos:position pos:line="16" pos:column="55"/></operator><operator pos:line="16" pos:column="55">)<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="56">challenge_64<pos:position pos:line="16" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="70">encoded_len<pos:position pos:line="16" pos:column="81"/></name></expr></argument>)<pos:position pos:line="16" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="83"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">decoded_len<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">&lt;<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="27">0<pos:position pos:line="17" pos:column="28"/></literal></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">die<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><literal type="string" pos:line="18" pos:column="21">"invalid challenge %s"<pos:position pos:line="18" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="45">challenge_64<pos:position pos:line="18" pos:column="57"/></name></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="59"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">HMAC_Init<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><operator pos:line="19" pos:column="19">&amp;<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="20">hmac<pos:position pos:line="19" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="26">(<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">unsigned<pos:position pos:line="19" pos:column="35"/></name> <name pos:line="19" pos:column="36">char<pos:position pos:line="19" pos:column="40"/></name> <operator pos:line="19" pos:column="41">*<pos:position pos:line="19" pos:column="42"/></operator><operator pos:line="19" pos:column="42">)<pos:position pos:line="19" pos:column="43"/></operator><name pos:line="19" pos:column="43">pass<pos:position pos:line="19" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="49">strlen<pos:position pos:line="19" pos:column="55"/></name><argument_list pos:line="19" pos:column="55">(<argument><expr><name pos:line="19" pos:column="56">pass<pos:position pos:line="19" pos:column="60"/></name></expr></argument>)<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="63">EVP_md5<pos:position pos:line="19" pos:column="70"/></name><argument_list pos:line="19" pos:column="70">()<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="74"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">HMAC_Update<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><operator pos:line="20" pos:column="21">&amp;<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="22">hmac<pos:position pos:line="20" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="28">(<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="29">unsigned<pos:position pos:line="20" pos:column="37"/></name> <name pos:line="20" pos:column="38">char<pos:position pos:line="20" pos:column="42"/></name> <operator pos:line="20" pos:column="43">*<pos:position pos:line="20" pos:column="44"/></operator><operator pos:line="20" pos:column="44">)<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="45">challenge<pos:position pos:line="20" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="56">decoded_len<pos:position pos:line="20" pos:column="67"/></name></expr></argument>)<pos:position pos:line="20" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="69"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">HMAC_Final<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><operator pos:line="21" pos:column="20">&amp;<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="21">hmac<pos:position pos:line="21" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="27">hash<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="33">NULL<pos:position pos:line="21" pos:column="37"/></name></expr></argument>)<pos:position pos:line="21" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">HMAC_CTX_cleanup<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><operator pos:line="22" pos:column="26">&amp;<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="27">hmac<pos:position pos:line="22" pos:column="31"/></name></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="24" pos:column="9">hex<pos:position pos:line="24" pos:column="12"/></name><index pos:line="24" pos:column="12">[<expr><literal type="number" pos:line="24" pos:column="13">32<pos:position pos:line="24" pos:column="15"/></literal></expr>]<pos:position pos:line="24" pos:column="16"/></index></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <literal type="number" pos:line="24" pos:column="19">0<pos:position pos:line="24" pos:column="20"/></literal></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>
	<for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">i<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <literal type="number" pos:line="25" pos:column="18">0<pos:position pos:line="25" pos:column="19"/></literal></expr>;<pos:position pos:line="25" pos:column="20"/></init> <condition><expr><name pos:line="25" pos:column="21">i<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">&lt;<pos:position pos:line="25" pos:column="27"/></operator> <literal type="number" pos:line="25" pos:column="25">16<pos:position pos:line="25" pos:column="27"/></literal></expr>;<pos:position pos:line="25" pos:column="28"/></condition> <incr><expr><name pos:line="25" pos:column="29">i<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">++<pos:position pos:line="25" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="33"/></control> <block pos:line="25" pos:column="34">{
		<expr_stmt><expr><name><name pos:line="26" pos:column="17">hex<pos:position pos:line="26" pos:column="20"/></name><index pos:line="26" pos:column="20">[<expr><literal type="number" pos:line="26" pos:column="21">2<pos:position pos:line="26" pos:column="22"/></literal> <operator pos:line="26" pos:column="23">*<pos:position pos:line="26" pos:column="24"/></operator> <name pos:line="26" pos:column="25">i<pos:position pos:line="26" pos:column="26"/></name></expr>]<pos:position pos:line="26" pos:column="27"/></index></name> <operator pos:line="26" pos:column="28">=<pos:position pos:line="26" pos:column="29"/></operator> <call><name pos:line="26" pos:column="30">hexchar<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><operator pos:line="26" pos:column="38">(<pos:position pos:line="26" pos:column="39"/></operator><name><name pos:line="26" pos:column="39">hash<pos:position pos:line="26" pos:column="43"/></name><index pos:line="26" pos:column="43">[<expr><name pos:line="26" pos:column="44">i<pos:position pos:line="26" pos:column="45"/></name></expr>]<pos:position pos:line="26" pos:column="46"/></index></name> <operator pos:line="26" pos:column="47">&gt;&gt;<pos:position pos:line="26" pos:column="52"/></operator> <literal type="number" pos:line="26" pos:column="50">4<pos:position pos:line="26" pos:column="51"/></literal><operator pos:line="26" pos:column="51">)<pos:position pos:line="26" pos:column="52"/></operator> <operator pos:line="26" pos:column="53">&amp;<pos:position pos:line="26" pos:column="58"/></operator> <literal type="number" pos:line="26" pos:column="55">0xf<pos:position pos:line="26" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="27" pos:column="17">hex<pos:position pos:line="27" pos:column="20"/></name><index pos:line="27" pos:column="20">[<expr><literal type="number" pos:line="27" pos:column="21">2<pos:position pos:line="27" pos:column="22"/></literal> <operator pos:line="27" pos:column="23">*<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">i<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">+<pos:position pos:line="27" pos:column="28"/></operator> <literal type="number" pos:line="27" pos:column="29">1<pos:position pos:line="27" pos:column="30"/></literal></expr>]<pos:position pos:line="27" pos:column="31"/></index></name> <operator pos:line="27" pos:column="32">=<pos:position pos:line="27" pos:column="33"/></operator> <call><name pos:line="27" pos:column="34">hexchar<pos:position pos:line="27" pos:column="41"/></name><argument_list pos:line="27" pos:column="41">(<argument><expr><name><name pos:line="27" pos:column="42">hash<pos:position pos:line="27" pos:column="46"/></name><index pos:line="27" pos:column="46">[<expr><name pos:line="27" pos:column="47">i<pos:position pos:line="27" pos:column="48"/></name></expr>]<pos:position pos:line="27" pos:column="49"/></index></name> <operator pos:line="27" pos:column="50">&amp;<pos:position pos:line="27" pos:column="55"/></operator> <literal type="number" pos:line="27" pos:column="52">0xf<pos:position pos:line="27" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></for>

	<comment type="block" pos:line="30" pos:column="9">/* response: "&lt;user&gt; &lt;digest in hex&gt;" */</comment>
	<expr_stmt><expr><name pos:line="31" pos:column="9">response<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <call><name pos:line="31" pos:column="20">xstrfmt<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><literal type="string" pos:line="31" pos:column="28">"%s %s"<pos:position pos:line="31" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="37">user<pos:position pos:line="31" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="43">hex<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name pos:line="32" pos:column="9">resp_len<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">=<pos:position pos:line="32" pos:column="19"/></operator> <call><name pos:line="32" pos:column="20">strlen<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">(<argument><expr><name pos:line="32" pos:column="27">response<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call> <operator pos:line="32" pos:column="37">+<pos:position pos:line="32" pos:column="38"/></operator> <literal type="number" pos:line="32" pos:column="39">1<pos:position pos:line="32" pos:column="40"/></literal></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><name pos:line="34" pos:column="9">response_64<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <call><name pos:line="34" pos:column="23">xmallocz<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><call><name pos:line="34" pos:column="32">ENCODED_SIZE<pos:position pos:line="34" pos:column="44"/></name><argument_list pos:line="34" pos:column="44">(<argument><expr><name pos:line="34" pos:column="45">resp_len<pos:position pos:line="34" pos:column="53"/></name></expr></argument>)<pos:position pos:line="34" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><name pos:line="35" pos:column="9">encoded_len<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <call><name pos:line="35" pos:column="23">EVP_EncodeBlock<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">(<argument><expr><operator pos:line="35" pos:column="39">(<pos:position pos:line="35" pos:column="40"/></operator><name pos:line="35" pos:column="40">unsigned<pos:position pos:line="35" pos:column="48"/></name> <name pos:line="35" pos:column="49">char<pos:position pos:line="35" pos:column="53"/></name> <operator pos:line="35" pos:column="54">*<pos:position pos:line="35" pos:column="55"/></operator><operator pos:line="35" pos:column="55">)<pos:position pos:line="35" pos:column="56"/></operator><name pos:line="35" pos:column="56">response_64<pos:position pos:line="35" pos:column="67"/></name></expr></argument>,
				      <argument><expr><operator pos:line="36" pos:column="39">(<pos:position pos:line="36" pos:column="40"/></operator><name pos:line="36" pos:column="40">unsigned<pos:position pos:line="36" pos:column="48"/></name> <name pos:line="36" pos:column="49">char<pos:position pos:line="36" pos:column="53"/></name> <operator pos:line="36" pos:column="54">*<pos:position pos:line="36" pos:column="55"/></operator><operator pos:line="36" pos:column="55">)<pos:position pos:line="36" pos:column="56"/></operator><name pos:line="36" pos:column="56">response<pos:position pos:line="36" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="66">resp_len<pos:position pos:line="36" pos:column="74"/></name></expr></argument>)<pos:position pos:line="36" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="76"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">encoded_len<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">&lt;<pos:position pos:line="37" pos:column="29"/></operator> <literal type="number" pos:line="37" pos:column="27">0<pos:position pos:line="37" pos:column="28"/></literal></expr>)<pos:position pos:line="37" pos:column="29"/></condition><then pos:line="37" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="17">die<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><literal type="string" pos:line="38" pos:column="21">"EVP_EncodeBlock error"<pos:position pos:line="38" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="46"/></expr_stmt></block></then></if>
	<return pos:line="39" pos:column="9">return <expr><operator pos:line="39" pos:column="16">(<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="17">char<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">*<pos:position pos:line="39" pos:column="23"/></operator><operator pos:line="39" pos:column="23">)<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="24">response_64<pos:position pos:line="39" pos:column="35"/></name></expr>;<pos:position pos:line="39" pos:column="36"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
