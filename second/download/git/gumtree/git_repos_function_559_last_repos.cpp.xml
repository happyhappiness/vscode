<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_559_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">verify_ref_format<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">ref_format<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">format<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">cp<pos:position pos:line="3" pos:column="23"/></name></decl>, <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="26">sp<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="5" pos:column="9">format<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">-&gt;<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="17">need_color_reset_at_eol<pos:position pos:line="5" pos:column="40"/></name></name> <operator pos:line="5" pos:column="41">=<pos:position pos:line="5" pos:column="42"/></operator> <literal type="number" pos:line="5" pos:column="43">0<pos:position pos:line="5" pos:column="44"/></literal></expr>;<pos:position pos:line="5" pos:column="45"/></expr_stmt>
	<for pos:line="6" pos:column="9">for <control pos:line="6" pos:column="13">(<init><expr><name pos:line="6" pos:column="14">cp<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">=<pos:position pos:line="6" pos:column="18"/></operator> <name><name pos:line="6" pos:column="19">format<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">-&gt;<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="27">format<pos:position pos:line="6" pos:column="33"/></name></name></expr>;<pos:position pos:line="6" pos:column="34"/></init> <condition><expr><operator pos:line="6" pos:column="35">*<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="36">cp<pos:position pos:line="6" pos:column="38"/></name> <operator pos:line="6" pos:column="39">&amp;&amp;<pos:position pos:line="6" pos:column="49"/></operator> <operator pos:line="6" pos:column="42">(<pos:position pos:line="6" pos:column="43"/></operator><name pos:line="6" pos:column="43">sp<pos:position pos:line="6" pos:column="45"/></name> <operator pos:line="6" pos:column="46">=<pos:position pos:line="6" pos:column="47"/></operator> <call><name pos:line="6" pos:column="48">find_next<pos:position pos:line="6" pos:column="57"/></name><argument_list pos:line="6" pos:column="57">(<argument><expr><name pos:line="6" pos:column="58">cp<pos:position pos:line="6" pos:column="60"/></name></expr></argument>)<pos:position pos:line="6" pos:column="61"/></argument_list></call><operator pos:line="6" pos:column="61">)<pos:position pos:line="6" pos:column="62"/></operator></expr>;<pos:position pos:line="6" pos:column="63"/></condition> <incr/>)<pos:position pos:line="6" pos:column="65"/></control> <block pos:line="6" pos:column="66">{
		<decl_stmt><decl><type><specifier pos:line="7" pos:column="17">const<pos:position pos:line="7" pos:column="22"/></specifier> <name pos:line="7" pos:column="23">char<pos:position pos:line="7" pos:column="27"/></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">color<pos:position pos:line="7" pos:column="34"/></name></decl>, <modifier pos:line="7" pos:column="36">*<pos:position pos:line="7" pos:column="37"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="37">ep<pos:position pos:line="7" pos:column="39"/></name> <init pos:line="7" pos:column="40">= <expr><call><name pos:line="7" pos:column="42">strchr<pos:position pos:line="7" pos:column="48"/></name><argument_list pos:line="7" pos:column="48">(<argument><expr><name pos:line="7" pos:column="49">sp<pos:position pos:line="7" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="53">')'<pos:position pos:line="7" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="58"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">at<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>

		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">ep<pos:position pos:line="10" pos:column="24"/></name></expr>)<pos:position pos:line="10" pos:column="25"/></condition><then pos:line="10" pos:column="25">
			<block type="pseudo"><return pos:line="11" pos:column="25">return <expr><call><name pos:line="11" pos:column="32">error<pos:position pos:line="11" pos:column="37"/></name><argument_list pos:line="11" pos:column="37">(<argument><expr><call><name pos:line="11" pos:column="38">_<pos:position pos:line="11" pos:column="39"/></name><argument_list pos:line="11" pos:column="39">(<argument><expr><literal type="string" pos:line="11" pos:column="40">"malformed format string %s"<pos:position pos:line="11" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="11" pos:column="71">sp<pos:position pos:line="11" pos:column="73"/></name></expr></argument>)<pos:position pos:line="11" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="75"/></return></block></then></if>
		<comment type="block" pos:line="12" pos:column="17">/* sp points at "%(" and ep points at the closing ")" */</comment>
		<expr_stmt><expr><name pos:line="13" pos:column="17">at<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <call><name pos:line="13" pos:column="22">parse_ref_filter_atom<pos:position pos:line="13" pos:column="43"/></name><argument_list pos:line="13" pos:column="43">(<argument><expr><name pos:line="13" pos:column="44">format<pos:position pos:line="13" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="52">sp<pos:position pos:line="13" pos:column="54"/></name> <operator pos:line="13" pos:column="55">+<pos:position pos:line="13" pos:column="56"/></operator> <literal type="number" pos:line="13" pos:column="57">2<pos:position pos:line="13" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="60">ep<pos:position pos:line="13" pos:column="62"/></name></expr></argument>)<pos:position pos:line="13" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">cp<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">ep<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">+<pos:position pos:line="14" pos:column="26"/></operator> <literal type="number" pos:line="14" pos:column="27">1<pos:position pos:line="14" pos:column="28"/></literal></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>

		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">skip_prefix<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name><name pos:line="16" pos:column="33">used_atom<pos:position pos:line="16" pos:column="42"/></name><index pos:line="16" pos:column="42">[<expr><name pos:line="16" pos:column="43">at<pos:position pos:line="16" pos:column="45"/></name></expr>]<pos:position pos:line="16" pos:column="46"/></index></name><operator pos:line="16" pos:column="46">.<pos:position pos:line="16" pos:column="47"/></operator><name pos:line="16" pos:column="47">name<pos:position pos:line="16" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="53">"color:"<pos:position pos:line="16" pos:column="61"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="63">&amp;<pos:position pos:line="16" pos:column="68"/></operator><name pos:line="16" pos:column="64">color<pos:position pos:line="16" pos:column="69"/></name></expr></argument>)<pos:position pos:line="16" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="71"/></condition><then pos:line="16" pos:column="71">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="17" pos:column="25">format<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="33">need_color_reset_at_eol<pos:position pos:line="17" pos:column="56"/></name></name> <operator pos:line="17" pos:column="57">=<pos:position pos:line="17" pos:column="58"/></operator> <operator pos:line="17" pos:column="59">!<pos:position pos:line="17" pos:column="60"/></operator><operator pos:line="17" pos:column="60">!<pos:position pos:line="17" pos:column="61"/></operator><call><name pos:line="17" pos:column="61">strcmp<pos:position pos:line="17" pos:column="67"/></name><argument_list pos:line="17" pos:column="67">(<argument><expr><name pos:line="17" pos:column="68">color<pos:position pos:line="17" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="75">"reset"<pos:position pos:line="17" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="84"/></expr_stmt></block></then></if>
	}<pos:position pos:line="18" pos:column="10"/></block></for>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name><name pos:line="19" pos:column="13">format<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">-&gt;<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="21">need_color_reset_at_eol<pos:position pos:line="19" pos:column="44"/></name></name> <operator pos:line="19" pos:column="45">&amp;&amp;<pos:position pos:line="19" pos:column="55"/></operator> <operator pos:line="19" pos:column="48">!<pos:position pos:line="19" pos:column="49"/></operator><call><name pos:line="19" pos:column="49">want_color<pos:position pos:line="19" pos:column="59"/></name><argument_list pos:line="19" pos:column="59">(<argument><expr><name><name pos:line="19" pos:column="60">format<pos:position pos:line="19" pos:column="66"/></name><operator pos:line="19" pos:column="66">-&gt;<pos:position pos:line="19" pos:column="71"/></operator><name pos:line="19" pos:column="68">use_color<pos:position pos:line="19" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="79"/></condition><then pos:line="19" pos:column="79">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="20" pos:column="17">format<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">-&gt;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="25">need_color_reset_at_eol<pos:position pos:line="20" pos:column="48"/></name></name> <operator pos:line="20" pos:column="49">=<pos:position pos:line="20" pos:column="50"/></operator> <literal type="number" pos:line="20" pos:column="51">0<pos:position pos:line="20" pos:column="52"/></literal></expr>;<pos:position pos:line="20" pos:column="53"/></expr_stmt></block></then></if>
	<return pos:line="21" pos:column="9">return <expr><literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
