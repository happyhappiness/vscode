<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6434_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">log_ref_setup<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">files_ref_store<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">refs<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
			 <parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">refname<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">int<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">force_create<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="3" pos:column="26">int<pos:position pos:line="3" pos:column="29"/></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="31">logfd<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="3" pos:column="38">struct<pos:position pos:line="3" pos:column="44"/></name> <name pos:line="3" pos:column="45">strbuf<pos:position pos:line="3" pos:column="51"/></name></name> <modifier pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></modifier></type><name pos:line="3" pos:column="53">err<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="57"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">logfile_sb<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><name pos:line="5" pos:column="36">STRBUF_INIT<pos:position pos:line="5" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">logfile<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">files_reflog_path<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">refs<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="33">&amp;<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="34">logfile_sb<pos:position pos:line="8" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="46">refname<pos:position pos:line="8" pos:column="53"/></name></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><name pos:line="9" pos:column="9">logfile<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <call><name pos:line="9" pos:column="19">strbuf_detach<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><operator pos:line="9" pos:column="33">&amp;<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="34">logfile_sb<pos:position pos:line="9" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="46">NULL<pos:position pos:line="9" pos:column="50"/></name></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="52"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">force_create<pos:position pos:line="11" pos:column="25"/></name> <operator pos:line="11" pos:column="26">||<pos:position pos:line="11" pos:column="28"/></operator> <call><name pos:line="11" pos:column="29">should_autocreate_reflog<pos:position pos:line="11" pos:column="53"/></name><argument_list pos:line="11" pos:column="53">(<argument><expr><name pos:line="11" pos:column="54">refname<pos:position pos:line="11" pos:column="61"/></name></expr></argument>)<pos:position pos:line="11" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="63"/></condition><then pos:line="11" pos:column="63"> <block pos:line="11" pos:column="64">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">raceproof_create_file<pos:position pos:line="12" pos:column="42"/></name><argument_list pos:line="12" pos:column="42">(<argument><expr><name pos:line="12" pos:column="43">logfile<pos:position pos:line="12" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="52">open_or_create_logfile<pos:position pos:line="12" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="76">logfd<pos:position pos:line="12" pos:column="81"/></name></expr></argument>)<pos:position pos:line="12" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="83"/></condition><then pos:line="12" pos:column="83"> <block pos:line="12" pos:column="84">{
			<if pos:line="13" pos:column="25">if <condition pos:line="13" pos:column="28">(<expr><name pos:line="13" pos:column="29">errno<pos:position pos:line="13" pos:column="34"/></name> <operator pos:line="13" pos:column="35">==<pos:position pos:line="13" pos:column="37"/></operator> <name pos:line="13" pos:column="38">ENOENT<pos:position pos:line="13" pos:column="44"/></name></expr>)<pos:position pos:line="13" pos:column="45"/></condition><then pos:line="13" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="33">strbuf_addf<pos:position pos:line="14" pos:column="44"/></name><argument_list pos:line="14" pos:column="44">(<argument><expr><name pos:line="14" pos:column="45">err<pos:position pos:line="14" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="50">"unable to create directory for '%s': "<pos:position pos:line="14" pos:column="89"/></literal>
					    <literal type="string" pos:line="15" pos:column="45">"%s"<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="51">logfile<pos:position pos:line="15" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="60">strerror<pos:position pos:line="15" pos:column="68"/></name><argument_list pos:line="15" pos:column="68">(<argument><expr><name pos:line="15" pos:column="69">errno<pos:position pos:line="15" pos:column="74"/></name></expr></argument>)<pos:position pos:line="15" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="77"/></expr_stmt></block></then>
			<elseif pos:line="16" pos:column="25">else <if pos:line="16" pos:column="30">if <condition pos:line="16" pos:column="33">(<expr><name pos:line="16" pos:column="34">errno<pos:position pos:line="16" pos:column="39"/></name> <operator pos:line="16" pos:column="40">==<pos:position pos:line="16" pos:column="42"/></operator> <name pos:line="16" pos:column="43">EISDIR<pos:position pos:line="16" pos:column="49"/></name></expr>)<pos:position pos:line="16" pos:column="50"/></condition><then pos:line="16" pos:column="50">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="33">strbuf_addf<pos:position pos:line="17" pos:column="44"/></name><argument_list pos:line="17" pos:column="44">(<argument><expr><name pos:line="17" pos:column="45">err<pos:position pos:line="17" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="50">"there are still logs under '%s'"<pos:position pos:line="17" pos:column="83"/></literal></expr></argument>,
					    <argument><expr><name pos:line="18" pos:column="45">logfile<pos:position pos:line="18" pos:column="52"/></name></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="54"/></expr_stmt></block></then></if></elseif>
			<else pos:line="19" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="33">strbuf_addf<pos:position pos:line="20" pos:column="44"/></name><argument_list pos:line="20" pos:column="44">(<argument><expr><name pos:line="20" pos:column="45">err<pos:position pos:line="20" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="50">"unable to append to '%s': %s"<pos:position pos:line="20" pos:column="80"/></literal></expr></argument>,
					    <argument><expr><name pos:line="21" pos:column="45">logfile<pos:position pos:line="21" pos:column="52"/></name></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="54">strerror<pos:position pos:line="21" pos:column="62"/></name><argument_list pos:line="21" pos:column="62">(<argument><expr><name pos:line="21" pos:column="63">errno<pos:position pos:line="21" pos:column="68"/></name></expr></argument>)<pos:position pos:line="21" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="71"/></expr_stmt></block></else></if>

			<goto pos:line="23" pos:column="25">goto <name pos:line="23" pos:column="30">error<pos:position pos:line="23" pos:column="35"/></name>;<pos:position pos:line="23" pos:column="36"/></goto>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block></then> <else pos:line="25" pos:column="11">else <block pos:line="25" pos:column="16">{
		<expr_stmt><expr><operator pos:line="26" pos:column="17">*<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="18">logfd<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">=<pos:position pos:line="26" pos:column="25"/></operator> <call><name pos:line="26" pos:column="26">open<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><name pos:line="26" pos:column="31">logfile<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="40">O_APPEND<pos:position pos:line="26" pos:column="48"/></name> <operator pos:line="26" pos:column="49">|<pos:position pos:line="26" pos:column="50"/></operator> <name pos:line="26" pos:column="51">O_WRONLY<pos:position pos:line="26" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="61">0666<pos:position pos:line="26" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="67"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">*<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="22">logfd<pos:position pos:line="27" pos:column="27"/></name> <operator pos:line="27" pos:column="28">&lt;<pos:position pos:line="27" pos:column="32"/></operator> <literal type="number" pos:line="27" pos:column="30">0<pos:position pos:line="27" pos:column="31"/></literal></expr>)<pos:position pos:line="27" pos:column="32"/></condition><then pos:line="27" pos:column="32"> <block pos:line="27" pos:column="33">{
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><name pos:line="28" pos:column="29">errno<pos:position pos:line="28" pos:column="34"/></name> <operator pos:line="28" pos:column="35">==<pos:position pos:line="28" pos:column="37"/></operator> <name pos:line="28" pos:column="38">ENOENT<pos:position pos:line="28" pos:column="44"/></name> <operator pos:line="28" pos:column="45">||<pos:position pos:line="28" pos:column="47"/></operator> <name pos:line="28" pos:column="48">errno<pos:position pos:line="28" pos:column="53"/></name> <operator pos:line="28" pos:column="54">==<pos:position pos:line="28" pos:column="56"/></operator> <name pos:line="28" pos:column="57">EISDIR<pos:position pos:line="28" pos:column="63"/></name></expr>)<pos:position pos:line="28" pos:column="64"/></condition><then pos:line="28" pos:column="64"> <block pos:line="28" pos:column="65">{
				<comment type="block" pos:line="29" pos:column="33">/*
				 * The logfile doesn't already exist,
				 * but that is not an error; it only
				 * means that we won't write log
				 * entries to it.
				 */</comment>
				<empty_stmt pos:line="35" pos:column="33">;<pos:position pos:line="35" pos:column="34"/></empty_stmt>
			}<pos:position pos:line="36" pos:column="26"/></block></then> <else pos:line="36" pos:column="27">else <block pos:line="36" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="37" pos:column="33">strbuf_addf<pos:position pos:line="37" pos:column="44"/></name><argument_list pos:line="37" pos:column="44">(<argument><expr><name pos:line="37" pos:column="45">err<pos:position pos:line="37" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="50">"unable to append to '%s': %s"<pos:position pos:line="37" pos:column="80"/></literal></expr></argument>,
					    <argument><expr><name pos:line="38" pos:column="45">logfile<pos:position pos:line="38" pos:column="52"/></name></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="54">strerror<pos:position pos:line="38" pos:column="62"/></name><argument_list pos:line="38" pos:column="62">(<argument><expr><name pos:line="38" pos:column="63">errno<pos:position pos:line="38" pos:column="68"/></name></expr></argument>)<pos:position pos:line="38" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="71"/></expr_stmt>
				<goto pos:line="39" pos:column="33">goto <name pos:line="39" pos:column="38">error<pos:position pos:line="39" pos:column="43"/></name>;<pos:position pos:line="39" pos:column="44"/></goto>
			}<pos:position pos:line="40" pos:column="26"/></block></else></if>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>
	}<pos:position pos:line="42" pos:column="10"/></block></else></if>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">*<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">logfd<pos:position pos:line="44" pos:column="19"/></name> <operator pos:line="44" pos:column="20">&gt;=<pos:position pos:line="44" pos:column="25"/></operator> <literal type="number" pos:line="44" pos:column="23">0<pos:position pos:line="44" pos:column="24"/></literal></expr>)<pos:position pos:line="44" pos:column="25"/></condition><then pos:line="44" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="17">adjust_shared_perm<pos:position pos:line="45" pos:column="35"/></name><argument_list pos:line="45" pos:column="35">(<argument><expr><name pos:line="45" pos:column="36">logfile<pos:position pos:line="45" pos:column="43"/></name></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="45"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="47" pos:column="9">free<pos:position pos:line="47" pos:column="13"/></name><argument_list pos:line="47" pos:column="13">(<argument><expr><name pos:line="47" pos:column="14">logfile<pos:position pos:line="47" pos:column="21"/></name></expr></argument>)<pos:position pos:line="47" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="23"/></expr_stmt>
	<return pos:line="48" pos:column="9">return <expr><literal type="number" pos:line="48" pos:column="16">0<pos:position pos:line="48" pos:column="17"/></literal></expr>;<pos:position pos:line="48" pos:column="18"/></return>

<label><name pos:line="50" pos:column="1">error<pos:position pos:line="50" pos:column="6"/></name>:<pos:position pos:line="50" pos:column="7"/></label>
	<expr_stmt><expr><call><name pos:line="51" pos:column="9">free<pos:position pos:line="51" pos:column="13"/></name><argument_list pos:line="51" pos:column="13">(<argument><expr><name pos:line="51" pos:column="14">logfile<pos:position pos:line="51" pos:column="21"/></name></expr></argument>)<pos:position pos:line="51" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="23"/></expr_stmt>
	<return pos:line="52" pos:column="9">return <expr><operator pos:line="52" pos:column="16">-<pos:position pos:line="52" pos:column="17"/></operator><literal type="number" pos:line="52" pos:column="17">1<pos:position pos:line="52" pos:column="18"/></literal></expr>;<pos:position pos:line="52" pos:column="19"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
