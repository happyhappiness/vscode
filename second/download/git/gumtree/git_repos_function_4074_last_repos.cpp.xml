<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4074_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fetch_with_fetch<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">transport<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">transport<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
			    <parameter><decl><type><name pos:line="2" pos:column="29">int<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">nr_heads<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="43">struct<pos:position pos:line="2" pos:column="49"/></name> <name pos:line="2" pos:column="50">ref<pos:position pos:line="2" pos:column="53"/></name></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier><modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">to_fetch<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">helper_data<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">data<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><name><name pos:line="4" pos:column="36">transport<pos:position pos:line="4" pos:column="45"/></name><operator pos:line="4" pos:column="45">-&gt;<pos:position pos:line="4" pos:column="50"/></operator><name pos:line="4" pos:column="47">data<pos:position pos:line="4" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">buf<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><name pos:line="6" pos:column="29">STRBUF_INIT<pos:position pos:line="6" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>

	<for pos:line="8" pos:column="9">for <control pos:line="8" pos:column="13">(<init><expr><name pos:line="8" pos:column="14">i<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr>;<pos:position pos:line="8" pos:column="20"/></init> <condition><expr><name pos:line="8" pos:column="21">i<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">&lt;<pos:position pos:line="8" pos:column="27"/></operator> <name pos:line="8" pos:column="25">nr_heads<pos:position pos:line="8" pos:column="33"/></name></expr>;<pos:position pos:line="8" pos:column="34"/></condition> <incr><expr><name pos:line="8" pos:column="35">i<pos:position pos:line="8" pos:column="36"/></name><operator pos:line="8" pos:column="36">++<pos:position pos:line="8" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="8" pos:column="39"/></control> <block pos:line="8" pos:column="40">{
		<decl_stmt><decl><type><specifier pos:line="9" pos:column="17">const<pos:position pos:line="9" pos:column="22"/></specifier> <name><name pos:line="9" pos:column="23">struct<pos:position pos:line="9" pos:column="29"/></name> <name pos:line="9" pos:column="30">ref<pos:position pos:line="9" pos:column="33"/></name></name> <modifier pos:line="9" pos:column="34">*<pos:position pos:line="9" pos:column="35"/></modifier></type><name pos:line="9" pos:column="35">posn<pos:position pos:line="9" pos:column="39"/></name> <init pos:line="9" pos:column="40">= <expr><name><name pos:line="9" pos:column="42">to_fetch<pos:position pos:line="9" pos:column="50"/></name><index pos:line="9" pos:column="50">[<expr><name pos:line="9" pos:column="51">i<pos:position pos:line="9" pos:column="52"/></name></expr>]<pos:position pos:line="9" pos:column="53"/></index></name></expr></init></decl>;<pos:position pos:line="9" pos:column="54"/></decl_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name><name pos:line="10" pos:column="21">posn<pos:position pos:line="10" pos:column="25"/></name><operator pos:line="10" pos:column="25">-&gt;<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="27">status<pos:position pos:line="10" pos:column="33"/></name></name> <operator pos:line="10" pos:column="34">&amp;<pos:position pos:line="10" pos:column="39"/></operator> <name pos:line="10" pos:column="36">REF_STATUS_UPTODATE<pos:position pos:line="10" pos:column="55"/></name></expr>)<pos:position pos:line="10" pos:column="56"/></condition><then pos:line="10" pos:column="56">
			<block type="pseudo"><continue pos:line="11" pos:column="25">continue;<pos:position pos:line="11" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="13" pos:column="17">strbuf_addf<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><operator pos:line="13" pos:column="29">&amp;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="30">buf<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="35">"fetch %s %s\n"<pos:position pos:line="13" pos:column="50"/></literal></expr></argument>,
			    <argument><expr><call><name pos:line="14" pos:column="29">oid_to_hex<pos:position pos:line="14" pos:column="39"/></name><argument_list pos:line="14" pos:column="39">(<argument><expr><operator pos:line="14" pos:column="40">&amp;<pos:position pos:line="14" pos:column="45"/></operator><name><name pos:line="14" pos:column="41">posn<pos:position pos:line="14" pos:column="45"/></name><operator pos:line="14" pos:column="45">-&gt;<pos:position pos:line="14" pos:column="50"/></operator><name pos:line="14" pos:column="47">old_oid<pos:position pos:line="14" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr></argument>,
			    <argument><expr><ternary><condition><expr><name><name pos:line="15" pos:column="29">posn<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">-&gt;<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="35">symref<pos:position pos:line="15" pos:column="41"/></name></name></expr> ?<pos:position pos:line="15" pos:column="43"/></condition><then pos:line="15" pos:column="43"> <expr><name><name pos:line="15" pos:column="44">posn<pos:position pos:line="15" pos:column="48"/></name><operator pos:line="15" pos:column="48">-&gt;<pos:position pos:line="15" pos:column="53"/></operator><name pos:line="15" pos:column="50">symref<pos:position pos:line="15" pos:column="56"/></name></name></expr> <pos:position pos:line="15" pos:column="57"/></then><else pos:line="15" pos:column="57">: <expr><name><name pos:line="15" pos:column="59">posn<pos:position pos:line="15" pos:column="63"/></name><operator pos:line="15" pos:column="63">-&gt;<pos:position pos:line="15" pos:column="68"/></operator><name pos:line="15" pos:column="65">name<pos:position pos:line="15" pos:column="69"/></name></name></expr></else></ternary></expr></argument>)<pos:position pos:line="15" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="71"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">strbuf_addch<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><operator pos:line="18" pos:column="22">&amp;<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="23">buf<pos:position pos:line="18" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="28">'\n'<pos:position pos:line="18" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">sendline<pos:position pos:line="19" pos:column="17"/></name><argument_list pos:line="19" pos:column="17">(<argument><expr><name pos:line="19" pos:column="18">data<pos:position pos:line="19" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="24">&amp;<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="25">buf<pos:position pos:line="19" pos:column="28"/></name></expr></argument>)<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>

	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><literal type="number" pos:line="21" pos:column="16">1<pos:position pos:line="21" pos:column="17"/></literal></expr>)<pos:position pos:line="21" pos:column="18"/></condition> <block pos:line="21" pos:column="19">{
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><call><name pos:line="22" pos:column="21">recvline<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">data<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="36">&amp;<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="37">buf<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">exit<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><literal type="number" pos:line="23" pos:column="30">128<pos:position pos:line="23" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="35"/></expr_stmt></block></then></if>

		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">starts_with<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name><name pos:line="25" pos:column="33">buf<pos:position pos:line="25" pos:column="36"/></name><operator pos:line="25" pos:column="36">.<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="37">buf<pos:position pos:line="25" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="42">"lock "<pos:position pos:line="25" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="51"/></condition><then pos:line="25" pos:column="51"> <block pos:line="25" pos:column="52">{
			<decl_stmt><decl><type><specifier pos:line="26" pos:column="25">const<pos:position pos:line="26" pos:column="30"/></specifier> <name pos:line="26" pos:column="31">char<pos:position pos:line="26" pos:column="35"/></name> <modifier pos:line="26" pos:column="36">*<pos:position pos:line="26" pos:column="37"/></modifier></type><name pos:line="26" pos:column="37">name<pos:position pos:line="26" pos:column="41"/></name> <init pos:line="26" pos:column="42">= <expr><name><name pos:line="26" pos:column="44">buf<pos:position pos:line="26" pos:column="47"/></name><operator pos:line="26" pos:column="47">.<pos:position pos:line="26" pos:column="48"/></operator><name pos:line="26" pos:column="48">buf<pos:position pos:line="26" pos:column="51"/></name></name> <operator pos:line="26" pos:column="52">+<pos:position pos:line="26" pos:column="53"/></operator> <literal type="number" pos:line="26" pos:column="54">5<pos:position pos:line="26" pos:column="55"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="56"/></decl_stmt>
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><name><name pos:line="27" pos:column="29">transport<pos:position pos:line="27" pos:column="38"/></name><operator pos:line="27" pos:column="38">-&gt;<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="40">pack_lockfile<pos:position pos:line="27" pos:column="53"/></name></name></expr>)<pos:position pos:line="27" pos:column="54"/></condition><then pos:line="27" pos:column="54">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="33">warning<pos:position pos:line="28" pos:column="40"/></name><argument_list pos:line="28" pos:column="40">(<argument><expr><literal type="string" pos:line="28" pos:column="41">"%s also locked %s"<pos:position pos:line="28" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="62">data<pos:position pos:line="28" pos:column="66"/></name><operator pos:line="28" pos:column="66">-&gt;<pos:position pos:line="28" pos:column="71"/></operator><name pos:line="28" pos:column="68">name<pos:position pos:line="28" pos:column="72"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="74">name<pos:position pos:line="28" pos:column="78"/></name></expr></argument>)<pos:position pos:line="28" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="80"/></expr_stmt></block></then>
			<else pos:line="29" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="30" pos:column="33">transport<pos:position pos:line="30" pos:column="42"/></name><operator pos:line="30" pos:column="42">-&gt;<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="44">pack_lockfile<pos:position pos:line="30" pos:column="57"/></name></name> <operator pos:line="30" pos:column="58">=<pos:position pos:line="30" pos:column="59"/></operator> <call><name pos:line="30" pos:column="60">xstrdup<pos:position pos:line="30" pos:column="67"/></name><argument_list pos:line="30" pos:column="67">(<argument><expr><name pos:line="30" pos:column="68">name<pos:position pos:line="30" pos:column="72"/></name></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt></block></else></if>
		}<pos:position pos:line="31" pos:column="18"/></block></then>
		<elseif pos:line="32" pos:column="17">else <if pos:line="32" pos:column="22">if <condition pos:line="32" pos:column="25">(<expr><name><name pos:line="32" pos:column="26">data<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">-&gt;<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="32">check_connectivity<pos:position pos:line="32" pos:column="50"/></name></name> <operator pos:line="32" pos:column="51">&amp;&amp;<pos:position pos:line="32" pos:column="61"/></operator>
			 <name><name pos:line="33" pos:column="26">data<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">-&gt;<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="32">transport_options<pos:position pos:line="33" pos:column="49"/></name><operator pos:line="33" pos:column="49">.<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="50">check_self_contained_and_connected<pos:position pos:line="33" pos:column="84"/></name></name> <operator pos:line="33" pos:column="85">&amp;&amp;<pos:position pos:line="33" pos:column="95"/></operator>
			 <operator pos:line="34" pos:column="26">!<pos:position pos:line="34" pos:column="27"/></operator><call><name pos:line="34" pos:column="27">strcmp<pos:position pos:line="34" pos:column="33"/></name><argument_list pos:line="34" pos:column="33">(<argument><expr><name><name pos:line="34" pos:column="34">buf<pos:position pos:line="34" pos:column="37"/></name><operator pos:line="34" pos:column="37">.<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="38">buf<pos:position pos:line="34" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="43">"connectivity-ok"<pos:position pos:line="34" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="62"/></condition><then pos:line="34" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="25">data<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">-&gt;<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="31">transport_options<pos:position pos:line="35" pos:column="48"/></name><operator pos:line="35" pos:column="48">.<pos:position pos:line="35" pos:column="49"/></operator><name pos:line="35" pos:column="49">self_contained_and_connected<pos:position pos:line="35" pos:column="77"/></name></name> <operator pos:line="35" pos:column="78">=<pos:position pos:line="35" pos:column="79"/></operator> <literal type="number" pos:line="35" pos:column="80">1<pos:position pos:line="35" pos:column="81"/></literal></expr>;<pos:position pos:line="35" pos:column="82"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="36" pos:column="17">else <if pos:line="36" pos:column="22">if <condition pos:line="36" pos:column="25">(<expr><operator pos:line="36" pos:column="26">!<pos:position pos:line="36" pos:column="27"/></operator><name><name pos:line="36" pos:column="27">buf<pos:position pos:line="36" pos:column="30"/></name><operator pos:line="36" pos:column="30">.<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="31">len<pos:position pos:line="36" pos:column="34"/></name></name></expr>)<pos:position pos:line="36" pos:column="35"/></condition><then pos:line="36" pos:column="35">
			<block type="pseudo"><break pos:line="37" pos:column="25">break;<pos:position pos:line="37" pos:column="31"/></break></block></then></if></elseif>
		<else pos:line="38" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="25">warning<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><literal type="string" pos:line="39" pos:column="33">"%s unexpectedly said: '%s'"<pos:position pos:line="39" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="63">data<pos:position pos:line="39" pos:column="67"/></name><operator pos:line="39" pos:column="67">-&gt;<pos:position pos:line="39" pos:column="72"/></operator><name pos:line="39" pos:column="69">name<pos:position pos:line="39" pos:column="73"/></name></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="75">buf<pos:position pos:line="39" pos:column="78"/></name><operator pos:line="39" pos:column="78">.<pos:position pos:line="39" pos:column="79"/></operator><name pos:line="39" pos:column="79">buf<pos:position pos:line="39" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="84"/></expr_stmt></block></else></if>
	}<pos:position pos:line="40" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">strbuf_release<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><operator pos:line="41" pos:column="24">&amp;<pos:position pos:line="41" pos:column="29"/></operator><name pos:line="41" pos:column="25">buf<pos:position pos:line="41" pos:column="28"/></name></expr></argument>)<pos:position pos:line="41" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="30"/></expr_stmt>
	<return pos:line="42" pos:column="9">return <expr><literal type="number" pos:line="42" pos:column="16">0<pos:position pos:line="42" pos:column="17"/></literal></expr>;<pos:position pos:line="42" pos:column="18"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
