<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7002_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier>
<cpp:ifdef pos:line="2" pos:column="1"># <cpp:directive pos:line="2" pos:column="3">ifdef<pos:position pos:line="2" pos:column="8"/></cpp:directive> <name pos:line="2" pos:column="9">_LIBC<pos:position pos:line="2" pos:column="14"/></name></cpp:ifdef>
<comment type="block" pos:line="3" pos:column="1">/* Make these definitions weak in libc, so POSIX programs can redefine
   these names if they don't use our functions, and still use
   regcomp/regexec above without link errors.  */</comment>
<name pos:line="6" pos:column="1">weak_function<pos:position pos:line="6" pos:column="14"/></name></type>
<cpp:endif pos:line="7" pos:column="1"># <cpp:directive pos:line="7" pos:column="3">endif<pos:position pos:line="7" pos:column="8"/></cpp:directive></cpp:endif>
<name pos:line="8" pos:column="1">re_comp<pos:position pos:line="8" pos:column="8"/></name> <argument_list pos:line="8" pos:column="9">(<argument><expr><name pos:line="8" pos:column="10">s<pos:position pos:line="8" pos:column="11"/></name></expr></argument>)<pos:position pos:line="8" pos:column="12"/></argument_list>
     const <name pos:line="9" pos:column="12">char<pos:position pos:line="9" pos:column="16"/></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier><name pos:line="9" pos:column="18">s<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
<block pos:line="10" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">reg_errcode_t<pos:position pos:line="11" pos:column="16"/></name></type> <name pos:line="11" pos:column="17">ret<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name> <modifier pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></modifier></type><name pos:line="12" pos:column="9">fastmap<pos:position pos:line="12" pos:column="16"/></name></decl>;<pos:position pos:line="12" pos:column="17"/></decl_stmt>

  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><operator pos:line="14" pos:column="7">!<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">s<pos:position pos:line="14" pos:column="9"/></name></expr>)<pos:position pos:line="14" pos:column="10"/></condition><then pos:line="14" pos:column="10">
    <block pos:line="15" pos:column="5">{
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><operator pos:line="16" pos:column="11">!<pos:position pos:line="16" pos:column="12"/></operator><name><name pos:line="16" pos:column="12">re_comp_buf<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">.<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">buffer<pos:position pos:line="16" pos:column="30"/></name></name></expr>)<pos:position pos:line="16" pos:column="31"/></condition><then pos:line="16" pos:column="31">
	<block type="pseudo"><return pos:line="17" pos:column="9">return <expr><call><name pos:line="17" pos:column="16">gettext<pos:position pos:line="17" pos:column="23"/></name> <argument_list pos:line="17" pos:column="24">(<argument><expr><literal type="string" pos:line="17" pos:column="25">"No previous regular expression"<pos:position pos:line="17" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="59"/></return></block></then></if>
      <return pos:line="18" pos:column="7">return <expr><literal type="number" pos:line="18" pos:column="14">0<pos:position pos:line="18" pos:column="15"/></literal></expr>;<pos:position pos:line="18" pos:column="16"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name><name pos:line="21" pos:column="7">re_comp_buf<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">.<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">buffer<pos:position pos:line="21" pos:column="25"/></name></name></expr>)<pos:position pos:line="21" pos:column="26"/></condition><then pos:line="21" pos:column="26">
    <block pos:line="22" pos:column="5">{
      <expr_stmt><expr><name pos:line="23" pos:column="7">fastmap<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <name><name pos:line="23" pos:column="17">re_comp_buf<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">.<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="29">fastmap<pos:position pos:line="23" pos:column="36"/></name></name></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="24" pos:column="7">re_comp_buf<pos:position pos:line="24" pos:column="18"/></name><operator pos:line="24" pos:column="18">.<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="19">fastmap<pos:position pos:line="24" pos:column="26"/></name></name> <operator pos:line="24" pos:column="27">=<pos:position pos:line="24" pos:column="28"/></operator> <name pos:line="24" pos:column="29">NULL<pos:position pos:line="24" pos:column="33"/></name></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">__regfree<pos:position pos:line="25" pos:column="16"/></name> <argument_list pos:line="25" pos:column="17">(<argument><expr><operator pos:line="25" pos:column="18">&amp;<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="19">re_comp_buf<pos:position pos:line="25" pos:column="30"/></name></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">memset<pos:position pos:line="26" pos:column="13"/></name> <argument_list pos:line="26" pos:column="14">(<argument><expr><operator pos:line="26" pos:column="15">&amp;<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="16">re_comp_buf<pos:position pos:line="26" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="26" pos:column="29">'\0'<pos:position pos:line="26" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="35">sizeof <argument_list pos:line="26" pos:column="42">(<argument><expr><name pos:line="26" pos:column="43">re_comp_buf<pos:position pos:line="26" pos:column="54"/></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="27" pos:column="7">re_comp_buf<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">.<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">fastmap<pos:position pos:line="27" pos:column="26"/></name></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="29">fastmap<pos:position pos:line="27" pos:column="36"/></name></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name><name pos:line="30" pos:column="7">re_comp_buf<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">.<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">fastmap<pos:position pos:line="30" pos:column="26"/></name></name> <operator pos:line="30" pos:column="27">==<pos:position pos:line="30" pos:column="29"/></operator> <name pos:line="30" pos:column="30">NULL<pos:position pos:line="30" pos:column="34"/></name></expr>)<pos:position pos:line="30" pos:column="35"/></condition><then pos:line="30" pos:column="35">
    <block pos:line="31" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="32" pos:column="7">re_comp_buf<pos:position pos:line="32" pos:column="18"/></name><operator pos:line="32" pos:column="18">.<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="19">fastmap<pos:position pos:line="32" pos:column="26"/></name></name> <operator pos:line="32" pos:column="27">=<pos:position pos:line="32" pos:column="28"/></operator> <operator pos:line="32" pos:column="29">(<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="30">char<pos:position pos:line="32" pos:column="34"/></name> <operator pos:line="32" pos:column="35">*<pos:position pos:line="32" pos:column="36"/></operator><operator pos:line="32" pos:column="36">)<pos:position pos:line="32" pos:column="37"/></operator> <call><name pos:line="32" pos:column="38">malloc<pos:position pos:line="32" pos:column="44"/></name> <argument_list pos:line="32" pos:column="45">(<argument><expr><name pos:line="32" pos:column="46">SBC_MAX<pos:position pos:line="32" pos:column="53"/></name></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt>
      <if pos:line="33" pos:column="7">if <condition pos:line="33" pos:column="10">(<expr><name><name pos:line="33" pos:column="11">re_comp_buf<pos:position pos:line="33" pos:column="22"/></name><operator pos:line="33" pos:column="22">.<pos:position pos:line="33" pos:column="23"/></operator><name pos:line="33" pos:column="23">fastmap<pos:position pos:line="33" pos:column="30"/></name></name> <operator pos:line="33" pos:column="31">==<pos:position pos:line="33" pos:column="33"/></operator> <name pos:line="33" pos:column="34">NULL<pos:position pos:line="33" pos:column="38"/></name></expr>)<pos:position pos:line="33" pos:column="39"/></condition><then pos:line="33" pos:column="39">
	<block type="pseudo"><return pos:line="34" pos:column="9">return <expr><operator pos:line="34" pos:column="16">(<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">char<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">*<pos:position pos:line="34" pos:column="23"/></operator><operator pos:line="34" pos:column="23">)<pos:position pos:line="34" pos:column="24"/></operator> <call><name pos:line="34" pos:column="25">gettext<pos:position pos:line="34" pos:column="32"/></name> <argument_list pos:line="34" pos:column="33">(<argument><expr><name pos:line="34" pos:column="34">__re_error_msgid<pos:position pos:line="34" pos:column="50"/></name>
				 <operator pos:line="35" pos:column="34">+<pos:position pos:line="35" pos:column="35"/></operator> <name><name pos:line="35" pos:column="36">__re_error_msgid_idx<pos:position pos:line="35" pos:column="56"/></name><index pos:line="35" pos:column="56">[<expr><operator pos:line="35" pos:column="57">(<pos:position pos:line="35" pos:column="58"/></operator><name pos:line="35" pos:column="58">int<pos:position pos:line="35" pos:column="61"/></name><operator pos:line="35" pos:column="61">)<pos:position pos:line="35" pos:column="62"/></operator> <name pos:line="35" pos:column="63">REG_ESPACE<pos:position pos:line="35" pos:column="73"/></name></expr>]<pos:position pos:line="35" pos:column="74"/></index></name></expr></argument>)<pos:position pos:line="35" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="76"/></return></block></then></if>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="38" pos:column="3">/* Since `re_exec' always passes NULL for the `regs' argument, we
     don't need to initialize the pattern buffer fields which affect it.  */</comment>

  <comment type="block" pos:line="41" pos:column="3">/* Match anchors at newlines.  */</comment>
  <expr_stmt><expr><name><name pos:line="42" pos:column="3">re_comp_buf<pos:position pos:line="42" pos:column="14"/></name><operator pos:line="42" pos:column="14">.<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="15">newline_anchor<pos:position pos:line="42" pos:column="29"/></name></name> <operator pos:line="42" pos:column="30">=<pos:position pos:line="42" pos:column="31"/></operator> <literal type="number" pos:line="42" pos:column="32">1<pos:position pos:line="42" pos:column="33"/></literal></expr>;<pos:position pos:line="42" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name pos:line="44" pos:column="3">ret<pos:position pos:line="44" pos:column="6"/></name> <operator pos:line="44" pos:column="7">=<pos:position pos:line="44" pos:column="8"/></operator> <call><name pos:line="44" pos:column="9">re_compile_internal<pos:position pos:line="44" pos:column="28"/></name> <argument_list pos:line="44" pos:column="29">(<argument><expr><operator pos:line="44" pos:column="30">&amp;<pos:position pos:line="44" pos:column="35"/></operator><name pos:line="44" pos:column="31">re_comp_buf<pos:position pos:line="44" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="44">s<pos:position pos:line="44" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="47">strlen<pos:position pos:line="44" pos:column="53"/></name> <argument_list pos:line="44" pos:column="54">(<argument><expr><name pos:line="44" pos:column="55">s<pos:position pos:line="44" pos:column="56"/></name></expr></argument>)<pos:position pos:line="44" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="44" pos:column="59">re_syntax_options<pos:position pos:line="44" pos:column="76"/></name></expr></argument>)<pos:position pos:line="44" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="78"/></expr_stmt>

  <if pos:line="46" pos:column="3">if <condition pos:line="46" pos:column="6">(<expr><operator pos:line="46" pos:column="7">!<pos:position pos:line="46" pos:column="8"/></operator><name pos:line="46" pos:column="8">ret<pos:position pos:line="46" pos:column="11"/></name></expr>)<pos:position pos:line="46" pos:column="12"/></condition><then pos:line="46" pos:column="12">
    <block type="pseudo"><return pos:line="47" pos:column="5">return <expr><name pos:line="47" pos:column="12">NULL<pos:position pos:line="47" pos:column="16"/></name></expr>;<pos:position pos:line="47" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="49" pos:column="3">/* Yes, we're discarding `const' here if !HAVE_LIBINTL.  */</comment>
  <return pos:line="50" pos:column="3">return <expr><operator pos:line="50" pos:column="10">(<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">char<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">*<pos:position pos:line="50" pos:column="17"/></operator><operator pos:line="50" pos:column="17">)<pos:position pos:line="50" pos:column="18"/></operator> <call><name pos:line="50" pos:column="19">gettext<pos:position pos:line="50" pos:column="26"/></name> <argument_list pos:line="50" pos:column="27">(<argument><expr><name pos:line="50" pos:column="28">__re_error_msgid<pos:position pos:line="50" pos:column="44"/></name> <operator pos:line="50" pos:column="45">+<pos:position pos:line="50" pos:column="46"/></operator> <name><name pos:line="50" pos:column="47">__re_error_msgid_idx<pos:position pos:line="50" pos:column="67"/></name><index pos:line="50" pos:column="67">[<expr><operator pos:line="50" pos:column="68">(<pos:position pos:line="50" pos:column="69"/></operator><name pos:line="50" pos:column="69">int<pos:position pos:line="50" pos:column="72"/></name><operator pos:line="50" pos:column="72">)<pos:position pos:line="50" pos:column="73"/></operator> <name pos:line="50" pos:column="74">ret<pos:position pos:line="50" pos:column="77"/></name></expr>]<pos:position pos:line="50" pos:column="78"/></index></name></expr></argument>)<pos:position pos:line="50" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="80"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></unit>
