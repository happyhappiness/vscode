<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6196_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">files_for_each_reflog_ent_reverse<pos:position pos:line="1" pos:column="45"/></name><parameter_list pos:line="1" pos:column="45">(<parameter><decl><type><name><name pos:line="1" pos:column="46">struct<pos:position pos:line="1" pos:column="52"/></name> <name pos:line="1" pos:column="53">ref_store<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">ref_store<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
					     <parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">refname<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>,
					     <parameter><decl><type><name pos:line="3" pos:column="46">each_reflog_ent_fn<pos:position pos:line="3" pos:column="64"/></name></type> <name pos:line="3" pos:column="65">fn<pos:position pos:line="3" pos:column="67"/></name></decl></parameter>,
					     <parameter><decl><type><name pos:line="4" pos:column="46">void<pos:position pos:line="4" pos:column="50"/></name> <modifier pos:line="4" pos:column="51">*<pos:position pos:line="4" pos:column="52"/></modifier></type><name pos:line="4" pos:column="52">cb_data<pos:position pos:line="4" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="60"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">sb<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name pos:line="6" pos:column="28">STRBUF_INIT<pos:position pos:line="6" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">FILE<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">logfp<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">long<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">pos<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">ret<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="22">at_tail<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><literal type="number" pos:line="9" pos:column="32">1<pos:position pos:line="9" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>

	<comment type="block" pos:line="11" pos:column="9">/* Check validity (but we don't need the result): */</comment>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">files_downcast<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">ref_store<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="35">0<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="38">"for_each_reflog_ent_reverse"<pos:position pos:line="12" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="69"/></expr_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">logfp<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <call><name pos:line="14" pos:column="17">fopen<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><call><name pos:line="14" pos:column="23">git_path<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><literal type="string" pos:line="14" pos:column="32">"logs/%s"<pos:position pos:line="14" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="43">refname<pos:position pos:line="14" pos:column="50"/></name></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="53">"r"<pos:position pos:line="14" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="58"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">logfp<pos:position pos:line="15" pos:column="19"/></name></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">-<pos:position pos:line="16" pos:column="25"/></operator><literal type="number" pos:line="16" pos:column="25">1<pos:position pos:line="16" pos:column="26"/></literal></expr>;<pos:position pos:line="16" pos:column="27"/></return></block></then></if>

	<comment type="block" pos:line="18" pos:column="9">/* Jump to the end */</comment>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">fseek<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">logfp<pos:position pos:line="19" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="26">0<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="29">SEEK_END<pos:position pos:line="19" pos:column="37"/></name></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call> <operator pos:line="19" pos:column="39">&lt;<pos:position pos:line="19" pos:column="43"/></operator> <literal type="number" pos:line="19" pos:column="41">0<pos:position pos:line="19" pos:column="42"/></literal></expr>)<pos:position pos:line="19" pos:column="43"/></condition><then pos:line="19" pos:column="43">
		<block type="pseudo"><return pos:line="20" pos:column="17">return <expr><call><name pos:line="20" pos:column="24">error<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><literal type="string" pos:line="20" pos:column="30">"cannot seek back reflog for %s: %s"<pos:position pos:line="20" pos:column="66"/></literal></expr></argument>,
			     <argument><expr><name pos:line="21" pos:column="30">refname<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="39">strerror<pos:position pos:line="21" pos:column="47"/></name><argument_list pos:line="21" pos:column="47">(<argument><expr><name pos:line="21" pos:column="48">errno<pos:position pos:line="21" pos:column="53"/></name></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="56"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="22" pos:column="9">pos<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">ftell<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">logfp<pos:position pos:line="22" pos:column="26"/></name></expr></argument>)<pos:position pos:line="22" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>
	<while pos:line="23" pos:column="9">while <condition pos:line="23" pos:column="15">(<expr><operator pos:line="23" pos:column="16">!<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">ret<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">&amp;&amp;<pos:position pos:line="23" pos:column="31"/></operator> <literal type="number" pos:line="23" pos:column="24">0<pos:position pos:line="23" pos:column="25"/></literal> <operator pos:line="23" pos:column="26">&lt;<pos:position pos:line="23" pos:column="30"/></operator> <name pos:line="23" pos:column="28">pos<pos:position pos:line="23" pos:column="31"/></name></expr>)<pos:position pos:line="23" pos:column="32"/></condition> <block pos:line="23" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">int<pos:position pos:line="24" pos:column="20"/></name></type> <name pos:line="24" pos:column="21">cnt<pos:position pos:line="24" pos:column="24"/></name></decl>;<pos:position pos:line="24" pos:column="25"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">size_t<pos:position pos:line="25" pos:column="23"/></name></type> <name pos:line="25" pos:column="24">nread<pos:position pos:line="25" pos:column="29"/></name></decl>;<pos:position pos:line="25" pos:column="30"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">char<pos:position pos:line="26" pos:column="21"/></name></type> <name><name pos:line="26" pos:column="22">buf<pos:position pos:line="26" pos:column="25"/></name><index pos:line="26" pos:column="25">[<expr><name pos:line="26" pos:column="26">BUFSIZ<pos:position pos:line="26" pos:column="32"/></name></expr>]<pos:position pos:line="26" pos:column="33"/></index></name></decl>;<pos:position pos:line="26" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">char<pos:position pos:line="27" pos:column="21"/></name> <modifier pos:line="27" pos:column="22">*<pos:position pos:line="27" pos:column="23"/></modifier></type><name pos:line="27" pos:column="23">endp<pos:position pos:line="27" pos:column="27"/></name></decl>, <modifier pos:line="27" pos:column="29">*<pos:position pos:line="27" pos:column="30"/></modifier><decl><type ref="prev"/><name pos:line="27" pos:column="30">scanp<pos:position pos:line="27" pos:column="35"/></name></decl>;<pos:position pos:line="27" pos:column="36"/></decl_stmt>

		<comment type="block" pos:line="29" pos:column="17">/* Fill next block from the end */</comment>
		<expr_stmt><expr><name pos:line="30" pos:column="17">cnt<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <ternary><condition><expr><operator pos:line="30" pos:column="23">(<pos:position pos:line="30" pos:column="24"/></operator><sizeof pos:line="30" pos:column="24">sizeof<argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">buf<pos:position pos:line="30" pos:column="34"/></name></expr></argument>)<pos:position pos:line="30" pos:column="35"/></argument_list></sizeof> <operator pos:line="30" pos:column="36">&lt;<pos:position pos:line="30" pos:column="40"/></operator> <name pos:line="30" pos:column="38">pos<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">)<pos:position pos:line="30" pos:column="42"/></operator></expr> ?<pos:position pos:line="30" pos:column="44"/></condition><then pos:line="30" pos:column="44"> <expr><sizeof pos:line="30" pos:column="45">sizeof<argument_list pos:line="30" pos:column="51">(<argument><expr><name pos:line="30" pos:column="52">buf<pos:position pos:line="30" pos:column="55"/></name></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></sizeof></expr> <pos:position pos:line="30" pos:column="57"/></then><else pos:line="30" pos:column="57">: <expr><name pos:line="30" pos:column="59">pos<pos:position pos:line="30" pos:column="62"/></name></expr></else></ternary></expr>;<pos:position pos:line="30" pos:column="63"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><call><name pos:line="31" pos:column="21">fseek<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><name pos:line="31" pos:column="27">logfp<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="34">pos<pos:position pos:line="31" pos:column="37"/></name> <operator pos:line="31" pos:column="38">-<pos:position pos:line="31" pos:column="39"/></operator> <name pos:line="31" pos:column="40">cnt<pos:position pos:line="31" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="45">SEEK_SET<pos:position pos:line="31" pos:column="53"/></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="55"/></condition><then pos:line="31" pos:column="55">
			<block type="pseudo"><return pos:line="32" pos:column="25">return <expr><call><name pos:line="32" pos:column="32">error<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">(<argument><expr><literal type="string" pos:line="32" pos:column="38">"cannot seek back reflog for %s: %s"<pos:position pos:line="32" pos:column="74"/></literal></expr></argument>,
				     <argument><expr><name pos:line="33" pos:column="38">refname<pos:position pos:line="33" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="47">strerror<pos:position pos:line="33" pos:column="55"/></name><argument_list pos:line="33" pos:column="55">(<argument><expr><name pos:line="33" pos:column="56">errno<pos:position pos:line="33" pos:column="61"/></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="64"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="34" pos:column="17">nread<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">=<pos:position pos:line="34" pos:column="24"/></operator> <call><name pos:line="34" pos:column="25">fread<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><name pos:line="34" pos:column="31">buf<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="36">cnt<pos:position pos:line="34" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="41">1<pos:position pos:line="34" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="44">logfp<pos:position pos:line="34" pos:column="49"/></name></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="51"/></expr_stmt>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">nread<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">!=<pos:position pos:line="35" pos:column="29"/></operator> <literal type="number" pos:line="35" pos:column="30">1<pos:position pos:line="35" pos:column="31"/></literal></expr>)<pos:position pos:line="35" pos:column="32"/></condition><then pos:line="35" pos:column="32">
			<block type="pseudo"><return pos:line="36" pos:column="25">return <expr><call><name pos:line="36" pos:column="32">error<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><literal type="string" pos:line="36" pos:column="38">"cannot read %d bytes from reflog for %s: %s"<pos:position pos:line="36" pos:column="83"/></literal></expr></argument>,
				     <argument><expr><name pos:line="37" pos:column="38">cnt<pos:position pos:line="37" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="43">refname<pos:position pos:line="37" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="37" pos:column="52">strerror<pos:position pos:line="37" pos:column="60"/></name><argument_list pos:line="37" pos:column="60">(<argument><expr><name pos:line="37" pos:column="61">errno<pos:position pos:line="37" pos:column="66"/></name></expr></argument>)<pos:position pos:line="37" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="69"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="38" pos:column="17">pos<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">-=<pos:position pos:line="38" pos:column="23"/></operator> <name pos:line="38" pos:column="24">cnt<pos:position pos:line="38" pos:column="27"/></name></expr>;<pos:position pos:line="38" pos:column="28"/></expr_stmt>

		<expr_stmt><expr><name pos:line="40" pos:column="17">scanp<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">=<pos:position pos:line="40" pos:column="24"/></operator> <name pos:line="40" pos:column="25">endp<pos:position pos:line="40" pos:column="29"/></name> <operator pos:line="40" pos:column="30">=<pos:position pos:line="40" pos:column="31"/></operator> <name pos:line="40" pos:column="32">buf<pos:position pos:line="40" pos:column="35"/></name> <operator pos:line="40" pos:column="36">+<pos:position pos:line="40" pos:column="37"/></operator> <name pos:line="40" pos:column="38">cnt<pos:position pos:line="40" pos:column="41"/></name></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">at_tail<pos:position pos:line="41" pos:column="28"/></name> <operator pos:line="41" pos:column="29">&amp;&amp;<pos:position pos:line="41" pos:column="39"/></operator> <name><name pos:line="41" pos:column="32">scanp<pos:position pos:line="41" pos:column="37"/></name><index pos:line="41" pos:column="37">[<expr><operator pos:line="41" pos:column="38">-<pos:position pos:line="41" pos:column="39"/></operator><literal type="number" pos:line="41" pos:column="39">1<pos:position pos:line="41" pos:column="40"/></literal></expr>]<pos:position pos:line="41" pos:column="41"/></index></name> <operator pos:line="41" pos:column="42">==<pos:position pos:line="41" pos:column="44"/></operator> <literal type="char" pos:line="41" pos:column="45">'\n'<pos:position pos:line="41" pos:column="49"/></literal></expr>)<pos:position pos:line="41" pos:column="50"/></condition><then pos:line="41" pos:column="50">
			<comment type="block" pos:line="42" pos:column="25">/* Looking at the final LF at the end of the file */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="25">scanp<pos:position pos:line="43" pos:column="30"/></name><operator pos:line="43" pos:column="30">--<pos:position pos:line="43" pos:column="32"/></operator></expr>;<pos:position pos:line="43" pos:column="33"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="44" pos:column="17">at_tail<pos:position pos:line="44" pos:column="24"/></name> <operator pos:line="44" pos:column="25">=<pos:position pos:line="44" pos:column="26"/></operator> <literal type="number" pos:line="44" pos:column="27">0<pos:position pos:line="44" pos:column="28"/></literal></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt>

		<while pos:line="46" pos:column="17">while <condition pos:line="46" pos:column="23">(<expr><name pos:line="46" pos:column="24">buf<pos:position pos:line="46" pos:column="27"/></name> <operator pos:line="46" pos:column="28">&lt;<pos:position pos:line="46" pos:column="32"/></operator> <name pos:line="46" pos:column="30">scanp<pos:position pos:line="46" pos:column="35"/></name></expr>)<pos:position pos:line="46" pos:column="36"/></condition> <block pos:line="46" pos:column="37">{
			<comment type="block" pos:line="47" pos:column="25">/*
			 * terminating LF of the previous line, or the beginning
			 * of the buffer.
			 */</comment>
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">char<pos:position pos:line="51" pos:column="29"/></name> <modifier pos:line="51" pos:column="30">*<pos:position pos:line="51" pos:column="31"/></modifier></type><name pos:line="51" pos:column="31">bp<pos:position pos:line="51" pos:column="33"/></name></decl>;<pos:position pos:line="51" pos:column="34"/></decl_stmt>

			<expr_stmt><expr><name pos:line="53" pos:column="25">bp<pos:position pos:line="53" pos:column="27"/></name> <operator pos:line="53" pos:column="28">=<pos:position pos:line="53" pos:column="29"/></operator> <call><name pos:line="53" pos:column="30">find_beginning_of_line<pos:position pos:line="53" pos:column="52"/></name><argument_list pos:line="53" pos:column="52">(<argument><expr><name pos:line="53" pos:column="53">buf<pos:position pos:line="53" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="58">scanp<pos:position pos:line="53" pos:column="63"/></name></expr></argument>)<pos:position pos:line="53" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="65"/></expr_stmt>

			<if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><operator pos:line="55" pos:column="29">*<pos:position pos:line="55" pos:column="30"/></operator><name pos:line="55" pos:column="30">bp<pos:position pos:line="55" pos:column="32"/></name> <operator pos:line="55" pos:column="33">==<pos:position pos:line="55" pos:column="35"/></operator> <literal type="char" pos:line="55" pos:column="36">'\n'<pos:position pos:line="55" pos:column="40"/></literal></expr>)<pos:position pos:line="55" pos:column="41"/></condition><then pos:line="55" pos:column="41"> <block pos:line="55" pos:column="42">{
				<comment type="block" pos:line="56" pos:column="33">/*
				 * The newline is the end of the previous line,
				 * so we know we have complete line starting
				 * at (bp + 1). Prefix it onto any prior data
				 * we collected for the line and process it.
				 */</comment>
				<expr_stmt><expr><call><name pos:line="62" pos:column="33">strbuf_splice<pos:position pos:line="62" pos:column="46"/></name><argument_list pos:line="62" pos:column="46">(<argument><expr><operator pos:line="62" pos:column="47">&amp;<pos:position pos:line="62" pos:column="52"/></operator><name pos:line="62" pos:column="48">sb<pos:position pos:line="62" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="52">0<pos:position pos:line="62" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="55">0<pos:position pos:line="62" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="58">bp<pos:position pos:line="62" pos:column="60"/></name> <operator pos:line="62" pos:column="61">+<pos:position pos:line="62" pos:column="62"/></operator> <literal type="number" pos:line="62" pos:column="63">1<pos:position pos:line="62" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="66">endp<pos:position pos:line="62" pos:column="70"/></name> <operator pos:line="62" pos:column="71">-<pos:position pos:line="62" pos:column="72"/></operator> <operator pos:line="62" pos:column="73">(<pos:position pos:line="62" pos:column="74"/></operator><name pos:line="62" pos:column="74">bp<pos:position pos:line="62" pos:column="76"/></name> <operator pos:line="62" pos:column="77">+<pos:position pos:line="62" pos:column="78"/></operator> <literal type="number" pos:line="62" pos:column="79">1<pos:position pos:line="62" pos:column="80"/></literal><operator pos:line="62" pos:column="80">)<pos:position pos:line="62" pos:column="81"/></operator></expr></argument>)<pos:position pos:line="62" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="83"/></expr_stmt>
				<expr_stmt><expr><name pos:line="63" pos:column="33">scanp<pos:position pos:line="63" pos:column="38"/></name> <operator pos:line="63" pos:column="39">=<pos:position pos:line="63" pos:column="40"/></operator> <name pos:line="63" pos:column="41">bp<pos:position pos:line="63" pos:column="43"/></name></expr>;<pos:position pos:line="63" pos:column="44"/></expr_stmt>
				<expr_stmt><expr><name pos:line="64" pos:column="33">endp<pos:position pos:line="64" pos:column="37"/></name> <operator pos:line="64" pos:column="38">=<pos:position pos:line="64" pos:column="39"/></operator> <name pos:line="64" pos:column="40">bp<pos:position pos:line="64" pos:column="42"/></name> <operator pos:line="64" pos:column="43">+<pos:position pos:line="64" pos:column="44"/></operator> <literal type="number" pos:line="64" pos:column="45">1<pos:position pos:line="64" pos:column="46"/></literal></expr>;<pos:position pos:line="64" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><name pos:line="65" pos:column="33">ret<pos:position pos:line="65" pos:column="36"/></name> <operator pos:line="65" pos:column="37">=<pos:position pos:line="65" pos:column="38"/></operator> <call><name pos:line="65" pos:column="39">show_one_reflog_ent<pos:position pos:line="65" pos:column="58"/></name><argument_list pos:line="65" pos:column="58">(<argument><expr><operator pos:line="65" pos:column="59">&amp;<pos:position pos:line="65" pos:column="64"/></operator><name pos:line="65" pos:column="60">sb<pos:position pos:line="65" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="64">fn<pos:position pos:line="65" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="68">cb_data<pos:position pos:line="65" pos:column="75"/></name></expr></argument>)<pos:position pos:line="65" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="77"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="66" pos:column="33">strbuf_reset<pos:position pos:line="66" pos:column="45"/></name><argument_list pos:line="66" pos:column="45">(<argument><expr><operator pos:line="66" pos:column="46">&amp;<pos:position pos:line="66" pos:column="51"/></operator><name pos:line="66" pos:column="47">sb<pos:position pos:line="66" pos:column="49"/></name></expr></argument>)<pos:position pos:line="66" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="51"/></expr_stmt>
				<if pos:line="67" pos:column="33">if <condition pos:line="67" pos:column="36">(<expr><name pos:line="67" pos:column="37">ret<pos:position pos:line="67" pos:column="40"/></name></expr>)<pos:position pos:line="67" pos:column="41"/></condition><then pos:line="67" pos:column="41">
					<block type="pseudo"><break pos:line="68" pos:column="41">break;<pos:position pos:line="68" pos:column="47"/></break></block></then></if>
			}<pos:position pos:line="69" pos:column="26"/></block></then> <elseif pos:line="69" pos:column="27">else <if pos:line="69" pos:column="32">if <condition pos:line="69" pos:column="35">(<expr><operator pos:line="69" pos:column="36">!<pos:position pos:line="69" pos:column="37"/></operator><name pos:line="69" pos:column="37">pos<pos:position pos:line="69" pos:column="40"/></name></expr>)<pos:position pos:line="69" pos:column="41"/></condition><then pos:line="69" pos:column="41"> <block pos:line="69" pos:column="42">{
				<comment type="block" pos:line="70" pos:column="33">/*
				 * We are at the start of the buffer, and the
				 * start of the file; there is no previous
				 * line, and we have everything for this one.
				 * Process it, and we can end the loop.
				 */</comment>
				<expr_stmt><expr><call><name pos:line="76" pos:column="33">strbuf_splice<pos:position pos:line="76" pos:column="46"/></name><argument_list pos:line="76" pos:column="46">(<argument><expr><operator pos:line="76" pos:column="47">&amp;<pos:position pos:line="76" pos:column="52"/></operator><name pos:line="76" pos:column="48">sb<pos:position pos:line="76" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="52">0<pos:position pos:line="76" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="55">0<pos:position pos:line="76" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="58">buf<pos:position pos:line="76" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="63">endp<pos:position pos:line="76" pos:column="67"/></name> <operator pos:line="76" pos:column="68">-<pos:position pos:line="76" pos:column="69"/></operator> <name pos:line="76" pos:column="70">buf<pos:position pos:line="76" pos:column="73"/></name></expr></argument>)<pos:position pos:line="76" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><name pos:line="77" pos:column="33">ret<pos:position pos:line="77" pos:column="36"/></name> <operator pos:line="77" pos:column="37">=<pos:position pos:line="77" pos:column="38"/></operator> <call><name pos:line="77" pos:column="39">show_one_reflog_ent<pos:position pos:line="77" pos:column="58"/></name><argument_list pos:line="77" pos:column="58">(<argument><expr><operator pos:line="77" pos:column="59">&amp;<pos:position pos:line="77" pos:column="64"/></operator><name pos:line="77" pos:column="60">sb<pos:position pos:line="77" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="64">fn<pos:position pos:line="77" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="68">cb_data<pos:position pos:line="77" pos:column="75"/></name></expr></argument>)<pos:position pos:line="77" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="77"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="78" pos:column="33">strbuf_reset<pos:position pos:line="78" pos:column="45"/></name><argument_list pos:line="78" pos:column="45">(<argument><expr><operator pos:line="78" pos:column="46">&amp;<pos:position pos:line="78" pos:column="51"/></operator><name pos:line="78" pos:column="47">sb<pos:position pos:line="78" pos:column="49"/></name></expr></argument>)<pos:position pos:line="78" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="51"/></expr_stmt>
				<break pos:line="79" pos:column="33">break;<pos:position pos:line="79" pos:column="39"/></break>
			}<pos:position pos:line="80" pos:column="26"/></block></then></if></elseif></if>

			<if pos:line="82" pos:column="25">if <condition pos:line="82" pos:column="28">(<expr><name pos:line="82" pos:column="29">bp<pos:position pos:line="82" pos:column="31"/></name> <operator pos:line="82" pos:column="32">==<pos:position pos:line="82" pos:column="34"/></operator> <name pos:line="82" pos:column="35">buf<pos:position pos:line="82" pos:column="38"/></name></expr>)<pos:position pos:line="82" pos:column="39"/></condition><then pos:line="82" pos:column="39"> <block pos:line="82" pos:column="40">{
				<comment type="block" pos:line="83" pos:column="33">/*
				 * We are at the start of the buffer, and there
				 * is more file to read backwards. Which means
				 * we are in the middle of a line. Note that we
				 * may get here even if *bp was a newline; that
				 * just means we are at the exact end of the
				 * previous line, rather than some spot in the
				 * middle.
				 *
				 * Save away what we have to be combined with
				 * the data from the next read.
				 */</comment>
				<expr_stmt><expr><call><name pos:line="95" pos:column="33">strbuf_splice<pos:position pos:line="95" pos:column="46"/></name><argument_list pos:line="95" pos:column="46">(<argument><expr><operator pos:line="95" pos:column="47">&amp;<pos:position pos:line="95" pos:column="52"/></operator><name pos:line="95" pos:column="48">sb<pos:position pos:line="95" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="52">0<pos:position pos:line="95" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="55">0<pos:position pos:line="95" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="58">buf<pos:position pos:line="95" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="63">endp<pos:position pos:line="95" pos:column="67"/></name> <operator pos:line="95" pos:column="68">-<pos:position pos:line="95" pos:column="69"/></operator> <name pos:line="95" pos:column="70">buf<pos:position pos:line="95" pos:column="73"/></name></expr></argument>)<pos:position pos:line="95" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="75"/></expr_stmt>
				<break pos:line="96" pos:column="33">break;<pos:position pos:line="96" pos:column="39"/></break>
			}<pos:position pos:line="97" pos:column="26"/></block></then></if>
		}<pos:position pos:line="98" pos:column="18"/></block></while>

	}<pos:position pos:line="100" pos:column="10"/></block></while>
	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><operator pos:line="101" pos:column="13">!<pos:position pos:line="101" pos:column="14"/></operator><name pos:line="101" pos:column="14">ret<pos:position pos:line="101" pos:column="17"/></name> <operator pos:line="101" pos:column="18">&amp;&amp;<pos:position pos:line="101" pos:column="28"/></operator> <name><name pos:line="101" pos:column="21">sb<pos:position pos:line="101" pos:column="23"/></name><operator pos:line="101" pos:column="23">.<pos:position pos:line="101" pos:column="24"/></operator><name pos:line="101" pos:column="24">len<pos:position pos:line="101" pos:column="27"/></name></name></expr>)<pos:position pos:line="101" pos:column="28"/></condition><then pos:line="101" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="102" pos:column="17">die<pos:position pos:line="102" pos:column="20"/></name><argument_list pos:line="102" pos:column="20">(<argument><expr><literal type="string" pos:line="102" pos:column="21">"BUG: reverse reflog parser had leftover data"<pos:position pos:line="102" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="69"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="104" pos:column="9">fclose<pos:position pos:line="104" pos:column="15"/></name><argument_list pos:line="104" pos:column="15">(<argument><expr><name pos:line="104" pos:column="16">logfp<pos:position pos:line="104" pos:column="21"/></name></expr></argument>)<pos:position pos:line="104" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="105" pos:column="9">strbuf_release<pos:position pos:line="105" pos:column="23"/></name><argument_list pos:line="105" pos:column="23">(<argument><expr><operator pos:line="105" pos:column="24">&amp;<pos:position pos:line="105" pos:column="29"/></operator><name pos:line="105" pos:column="25">sb<pos:position pos:line="105" pos:column="27"/></name></expr></argument>)<pos:position pos:line="105" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="29"/></expr_stmt>
	<return pos:line="106" pos:column="9">return <expr><name pos:line="106" pos:column="16">ret<pos:position pos:line="106" pos:column="19"/></name></expr>;<pos:position pos:line="106" pos:column="20"/></return>
}<pos:position pos:line="107" pos:column="2"/></block></function></unit>
