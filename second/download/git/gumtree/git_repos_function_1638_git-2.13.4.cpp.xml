<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1638_git-2.13.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">NORETURN<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">void<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">die_nicely<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">err<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">va_list<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">params<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">int<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">zombie<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">message<pos:position pos:line="4" pos:column="21"/></name><index pos:line="4" pos:column="21">[<expr><literal type="number" pos:line="4" pos:column="22">2<pos:position pos:line="4" pos:column="23"/></literal> <operator pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></operator> <name pos:line="4" pos:column="26">PATH_MAX<pos:position pos:line="4" pos:column="34"/></name></expr>]<pos:position pos:line="4" pos:column="35"/></index></name></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">vsnprintf<pos:position pos:line="6" pos:column="18"/></name><argument_list pos:line="6" pos:column="18">(<argument><expr><name pos:line="6" pos:column="19">message<pos:position pos:line="6" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="28">sizeof<argument_list pos:line="6" pos:column="34">(<argument><expr><name pos:line="6" pos:column="35">message<pos:position pos:line="6" pos:column="42"/></name></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="6" pos:column="45">err<pos:position pos:line="6" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="50">params<pos:position pos:line="6" pos:column="56"/></name></expr></argument>)<pos:position pos:line="6" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">fputs<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><literal type="string" pos:line="7" pos:column="15">"fatal: "<pos:position pos:line="7" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="26">stderr<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">fputs<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">message<pos:position pos:line="8" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="24">stderr<pos:position pos:line="8" pos:column="30"/></name></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">fputc<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><literal type="char" pos:line="9" pos:column="15">'\n'<pos:position pos:line="9" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="21">stderr<pos:position pos:line="9" pos:column="27"/></name></expr></argument>)<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="29"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">zombie<pos:position pos:line="11" pos:column="20"/></name></expr>)<pos:position pos:line="11" pos:column="21"/></condition><then pos:line="11" pos:column="21"> <block pos:line="11" pos:column="22">{
		<expr_stmt><expr><name pos:line="12" pos:column="17">zombie<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <literal type="number" pos:line="12" pos:column="26">1<pos:position pos:line="12" pos:column="27"/></literal></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">write_crash_report<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><name pos:line="13" pos:column="36">message<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">end_packfile<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">()<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">unkeep_all_packs<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">()<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">dump_marks<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">()<pos:position pos:line="16" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">exit<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><literal type="number" pos:line="18" pos:column="14">128<pos:position pos:line="18" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="19"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
