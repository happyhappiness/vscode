<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1315_git-2.1.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">buffer_is_binary<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">ptr<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">unsigned<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">long<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">size<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">FIRST_FEW_BYTES<pos:position pos:line="3" pos:column="28"/></name> <operator pos:line="3" pos:column="29">&lt;<pos:position pos:line="3" pos:column="33"/></operator> <name pos:line="3" pos:column="31">size<pos:position pos:line="3" pos:column="35"/></name></expr>)<pos:position pos:line="3" pos:column="36"/></condition><then pos:line="3" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><name pos:line="4" pos:column="17">size<pos:position pos:line="4" pos:column="21"/></name> <operator pos:line="4" pos:column="22">=<pos:position pos:line="4" pos:column="23"/></operator> <name pos:line="4" pos:column="24">FIRST_FEW_BYTES<pos:position pos:line="4" pos:column="39"/></name></expr>;<pos:position pos:line="4" pos:column="40"/></expr_stmt></block></then></if>
	<return pos:line="5" pos:column="9">return <expr><operator pos:line="5" pos:column="16">!<pos:position pos:line="5" pos:column="17"/></operator><operator pos:line="5" pos:column="17">!<pos:position pos:line="5" pos:column="18"/></operator><call><name pos:line="5" pos:column="18">memchr<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><name pos:line="5" pos:column="25">ptr<pos:position pos:line="5" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="30">0<pos:position pos:line="5" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="33">size<pos:position pos:line="5" pos:column="37"/></name></expr></argument>)<pos:position pos:line="5" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="39"/></return>
}<pos:position pos:line="6" pos:column="2"/></block></function></unit>
