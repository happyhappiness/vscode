<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5180_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">merge_working_tree<pos:position pos:line="1" pos:column="30"/></name><argument_list pos:line="1" pos:column="30">(<argument><expr><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> struct <name pos:line="1" pos:column="44">checkout_opts<pos:position pos:line="1" pos:column="57"/></name> <operator pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></operator><name pos:line="1" pos:column="59">opts<pos:position pos:line="1" pos:column="63"/></name></expr></argument>,
			      <argument><expr pos:line="2" pos:column="31">struct <name pos:line="2" pos:column="38">branch_info<pos:position pos:line="2" pos:column="49"/></name> <operator pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></operator><name pos:line="2" pos:column="51">old<pos:position pos:line="2" pos:column="54"/></name></expr></argument>,
			      <argument><expr pos:line="3" pos:column="31">struct <name pos:line="3" pos:column="38">branch_info<pos:position pos:line="3" pos:column="49"/></name> <operator pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></operator><operator pos:line="3" pos:column="51">new<pos:position pos:line="3" pos:column="54"/></operator></expr></argument>,
			      <argument><expr><name pos:line="4" pos:column="31">int<pos:position pos:line="4" pos:column="34"/></name> <operator pos:line="4" pos:column="35">*<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="36">writeout_error<pos:position pos:line="4" pos:column="50"/></name></expr></argument>)<pos:position pos:line="4" pos:column="51"/></argument_list>
<argument_list pos:line="5" pos:column="1">{
	<argument><expr><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name> <name pos:line="6" pos:column="13">ret<pos:position pos:line="6" pos:column="16"/></name></expr></argument>;
	<argument><expr pos:line="7" pos:column="9">struct <name pos:line="7" pos:column="16">lock_file<pos:position pos:line="7" pos:column="25"/></name> <operator pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">lock_file<pos:position pos:line="7" pos:column="36"/></name> <operator pos:line="7" pos:column="37">=<pos:position pos:line="7" pos:column="38"/></operator> <call><name pos:line="7" pos:column="39">xcalloc<pos:position pos:line="7" pos:column="46"/></name><argument_list pos:line="7" pos:column="46">(<argument><expr><literal type="number" pos:line="7" pos:column="47">1<pos:position pos:line="7" pos:column="48"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="50">sizeof<argument_list pos:line="7" pos:column="56">(<argument><expr pos:line="7" pos:column="57">struct <name pos:line="7" pos:column="64">lock_file<pos:position pos:line="7" pos:column="73"/></name></expr></argument>)<pos:position pos:line="7" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="75"/></argument_list></call></expr></argument>;

	<argument><expr><call><name pos:line="9" pos:column="9">hold_locked_index<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">lock_file<pos:position pos:line="9" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="38">LOCK_DIE_ON_ERROR<pos:position pos:line="9" pos:column="55"/></name></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr></argument>;
	if <argument><expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><call><name pos:line="10" pos:column="13">read_cache_preload<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><name pos:line="10" pos:column="32">NULL<pos:position pos:line="10" pos:column="36"/></name></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call> <operator pos:line="10" pos:column="38">&lt;<pos:position pos:line="10" pos:column="42"/></operator> <literal type="number" pos:line="10" pos:column="40">0<pos:position pos:line="10" pos:column="41"/></literal><operator pos:line="10" pos:column="41">)<pos:position pos:line="10" pos:column="42"/></operator></expr></argument>
		<return pos:line="11" pos:column="17">return <expr><call><name pos:line="11" pos:column="24">error<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><call><name pos:line="11" pos:column="30">_<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><literal type="string" pos:line="11" pos:column="32">"index file corrupt"<pos:position pos:line="11" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="55"/></return></argument_list></decl></decl_stmt>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">resolve_undo_clear<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">()<pos:position pos:line="13" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name><name pos:line="14" pos:column="13">opts<pos:position pos:line="14" pos:column="17"/></name><operator pos:line="14" pos:column="17">-&gt;<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="19">force<pos:position pos:line="14" pos:column="24"/></name></name></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25"> <block pos:line="14" pos:column="26">{
		<expr_stmt><expr><name pos:line="15" pos:column="17">ret<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <call><name pos:line="15" pos:column="23">reset_tree<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">(<argument><expr><operator pos:line="15" pos:column="34">new<pos:position pos:line="15" pos:column="37"/></operator><operator pos:line="15" pos:column="37">-&gt;<pos:position pos:line="15" pos:column="42"/></operator><name><name pos:line="15" pos:column="39">commit<pos:position pos:line="15" pos:column="45"/></name><operator pos:line="15" pos:column="45">-&gt;<pos:position pos:line="15" pos:column="50"/></operator><name pos:line="15" pos:column="47">tree<pos:position pos:line="15" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">opts<pos:position pos:line="15" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="59">1<pos:position pos:line="15" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="62">writeout_error<pos:position pos:line="15" pos:column="76"/></name></expr></argument>)<pos:position pos:line="15" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="78"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">ret<pos:position pos:line="16" pos:column="24"/></name></expr>)<pos:position pos:line="16" pos:column="25"/></condition><then pos:line="16" pos:column="25">
			<block type="pseudo"><return pos:line="17" pos:column="25">return <expr><name pos:line="17" pos:column="32">ret<pos:position pos:line="17" pos:column="35"/></name></expr>;<pos:position pos:line="17" pos:column="36"/></return></block></then></if>
	}<pos:position pos:line="18" pos:column="10"/></block></then> <else pos:line="18" pos:column="11">else <block pos:line="18" pos:column="16">{
		<decl_stmt><decl><type><name><name pos:line="19" pos:column="17">struct<pos:position pos:line="19" pos:column="23"/></name> <name pos:line="19" pos:column="24">tree_desc<pos:position pos:line="19" pos:column="33"/></name></name></type> <name><name pos:line="19" pos:column="34">trees<pos:position pos:line="19" pos:column="39"/></name><index pos:line="19" pos:column="39">[<expr><literal type="number" pos:line="19" pos:column="40">2<pos:position pos:line="19" pos:column="41"/></literal></expr>]<pos:position pos:line="19" pos:column="42"/></index></name></decl>;<pos:position pos:line="19" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="20" pos:column="17">struct<pos:position pos:line="20" pos:column="23"/></name> <name pos:line="20" pos:column="24">tree<pos:position pos:line="20" pos:column="28"/></name></name> <modifier pos:line="20" pos:column="29">*<pos:position pos:line="20" pos:column="30"/></modifier></type><name pos:line="20" pos:column="30">tree<pos:position pos:line="20" pos:column="34"/></name></decl>;<pos:position pos:line="20" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="21" pos:column="17">struct<pos:position pos:line="21" pos:column="23"/></name> <name pos:line="21" pos:column="24">unpack_trees_options<pos:position pos:line="21" pos:column="44"/></name></name></type> <name pos:line="21" pos:column="45">topts<pos:position pos:line="21" pos:column="50"/></name></decl>;<pos:position pos:line="21" pos:column="51"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="23" pos:column="17">memset<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><operator pos:line="23" pos:column="24">&amp;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="25">topts<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="32">0<pos:position pos:line="23" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="35">sizeof<argument_list pos:line="23" pos:column="41">(<argument><expr><name pos:line="23" pos:column="42">topts<pos:position pos:line="23" pos:column="47"/></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="24" pos:column="17">topts<pos:position pos:line="24" pos:column="22"/></name><operator pos:line="24" pos:column="22">.<pos:position pos:line="24" pos:column="23"/></operator><name pos:line="24" pos:column="23">head_idx<pos:position pos:line="24" pos:column="31"/></name></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <operator pos:line="24" pos:column="34">-<pos:position pos:line="24" pos:column="35"/></operator><literal type="number" pos:line="24" pos:column="35">1<pos:position pos:line="24" pos:column="36"/></literal></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="25" pos:column="17">topts<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">.<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="23">src_index<pos:position pos:line="25" pos:column="32"/></name></name> <operator pos:line="25" pos:column="33">=<pos:position pos:line="25" pos:column="34"/></operator> <operator pos:line="25" pos:column="35">&amp;<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="36">the_index<pos:position pos:line="25" pos:column="45"/></name></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="26" pos:column="17">topts<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">.<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="23">dst_index<pos:position pos:line="26" pos:column="32"/></name></name> <operator pos:line="26" pos:column="33">=<pos:position pos:line="26" pos:column="34"/></operator> <operator pos:line="26" pos:column="35">&amp;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="36">the_index<pos:position pos:line="26" pos:column="45"/></name></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="28" pos:column="17">setup_unpack_trees_porcelain<pos:position pos:line="28" pos:column="45"/></name><argument_list pos:line="28" pos:column="45">(<argument><expr><operator pos:line="28" pos:column="46">&amp;<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="47">topts<pos:position pos:line="28" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="54">"checkout"<pos:position pos:line="28" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="30" pos:column="17">refresh_cache<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">REFRESH_QUIET<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>

		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><call><name pos:line="32" pos:column="21">unmerged_cache<pos:position pos:line="32" pos:column="35"/></name><argument_list pos:line="32" pos:column="35">()<pos:position pos:line="32" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="38"/></condition><then pos:line="32" pos:column="38"> <block pos:line="32" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">error<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><call><name pos:line="33" pos:column="31">_<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><literal type="string" pos:line="33" pos:column="33">"you need to resolve your current index first"<pos:position pos:line="33" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="82"/></expr_stmt>
			<return pos:line="34" pos:column="25">return <expr><literal type="number" pos:line="34" pos:column="32">1<pos:position pos:line="34" pos:column="33"/></literal></expr>;<pos:position pos:line="34" pos:column="34"/></return>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="37" pos:column="17">/* 2-way merge to the new branch */</comment>
		<expr_stmt><expr><name><name pos:line="38" pos:column="17">topts<pos:position pos:line="38" pos:column="22"/></name><operator pos:line="38" pos:column="22">.<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">initial_checkout<pos:position pos:line="38" pos:column="39"/></name></name> <operator pos:line="38" pos:column="40">=<pos:position pos:line="38" pos:column="41"/></operator> <call><name pos:line="38" pos:column="42">is_cache_unborn<pos:position pos:line="38" pos:column="57"/></name><argument_list pos:line="38" pos:column="57">()<pos:position pos:line="38" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="39" pos:column="17">topts<pos:position pos:line="39" pos:column="22"/></name><operator pos:line="39" pos:column="22">.<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="23">update<pos:position pos:line="39" pos:column="29"/></name></name> <operator pos:line="39" pos:column="30">=<pos:position pos:line="39" pos:column="31"/></operator> <literal type="number" pos:line="39" pos:column="32">1<pos:position pos:line="39" pos:column="33"/></literal></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="40" pos:column="17">topts<pos:position pos:line="40" pos:column="22"/></name><operator pos:line="40" pos:column="22">.<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="23">merge<pos:position pos:line="40" pos:column="28"/></name></name> <operator pos:line="40" pos:column="29">=<pos:position pos:line="40" pos:column="30"/></operator> <literal type="number" pos:line="40" pos:column="31">1<pos:position pos:line="40" pos:column="32"/></literal></expr>;<pos:position pos:line="40" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="41" pos:column="17">topts<pos:position pos:line="41" pos:column="22"/></name><operator pos:line="41" pos:column="22">.<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">gently<pos:position pos:line="41" pos:column="29"/></name></name> <operator pos:line="41" pos:column="30">=<pos:position pos:line="41" pos:column="31"/></operator> <name><name pos:line="41" pos:column="32">opts<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">-&gt;<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="38">merge<pos:position pos:line="41" pos:column="43"/></name></name> <operator pos:line="41" pos:column="44">&amp;&amp;<pos:position pos:line="41" pos:column="54"/></operator> <name><name pos:line="41" pos:column="47">old<pos:position pos:line="41" pos:column="50"/></name><operator pos:line="41" pos:column="50">-&gt;<pos:position pos:line="41" pos:column="55"/></operator><name pos:line="41" pos:column="52">commit<pos:position pos:line="41" pos:column="58"/></name></name></expr>;<pos:position pos:line="41" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="42" pos:column="17">topts<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">.<pos:position pos:line="42" pos:column="23"/></operator><name pos:line="42" pos:column="23">verbose_update<pos:position pos:line="42" pos:column="37"/></name></name> <operator pos:line="42" pos:column="38">=<pos:position pos:line="42" pos:column="39"/></operator> <name><name pos:line="42" pos:column="40">opts<pos:position pos:line="42" pos:column="44"/></name><operator pos:line="42" pos:column="44">-&gt;<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="46">show_progress<pos:position pos:line="42" pos:column="59"/></name></name></expr>;<pos:position pos:line="42" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">topts<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">.<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">fn<pos:position pos:line="43" pos:column="25"/></name></name> <operator pos:line="43" pos:column="26">=<pos:position pos:line="43" pos:column="27"/></operator> <name pos:line="43" pos:column="28">twoway_merge<pos:position pos:line="43" pos:column="40"/></name></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name><name pos:line="44" pos:column="21">opts<pos:position pos:line="44" pos:column="25"/></name><operator pos:line="44" pos:column="25">-&gt;<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="27">overwrite_ignore<pos:position pos:line="44" pos:column="43"/></name></name></expr>)<pos:position pos:line="44" pos:column="44"/></condition><then pos:line="44" pos:column="44"> <block pos:line="44" pos:column="45">{
			<expr_stmt><expr><name><name pos:line="45" pos:column="25">topts<pos:position pos:line="45" pos:column="30"/></name><operator pos:line="45" pos:column="30">.<pos:position pos:line="45" pos:column="31"/></operator><name pos:line="45" pos:column="31">dir<pos:position pos:line="45" pos:column="34"/></name></name> <operator pos:line="45" pos:column="35">=<pos:position pos:line="45" pos:column="36"/></operator> <call><name pos:line="45" pos:column="37">xcalloc<pos:position pos:line="45" pos:column="44"/></name><argument_list pos:line="45" pos:column="44">(<argument><expr><literal type="number" pos:line="45" pos:column="45">1<pos:position pos:line="45" pos:column="46"/></literal></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="48">sizeof<argument_list pos:line="45" pos:column="54">(<argument><expr><operator pos:line="45" pos:column="55">*<pos:position pos:line="45" pos:column="56"/></operator><name><name pos:line="45" pos:column="56">topts<pos:position pos:line="45" pos:column="61"/></name><operator pos:line="45" pos:column="61">.<pos:position pos:line="45" pos:column="62"/></operator><name pos:line="45" pos:column="62">dir<pos:position pos:line="45" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="45" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="46" pos:column="25">topts<pos:position pos:line="46" pos:column="30"/></name><operator pos:line="46" pos:column="30">.<pos:position pos:line="46" pos:column="31"/></operator><name pos:line="46" pos:column="31">dir<pos:position pos:line="46" pos:column="34"/></name><operator pos:line="46" pos:column="34">-&gt;<pos:position pos:line="46" pos:column="39"/></operator><name pos:line="46" pos:column="36">flags<pos:position pos:line="46" pos:column="41"/></name></name> <operator pos:line="46" pos:column="42">|=<pos:position pos:line="46" pos:column="44"/></operator> <name pos:line="46" pos:column="45">DIR_SHOW_IGNORED<pos:position pos:line="46" pos:column="61"/></name></expr>;<pos:position pos:line="46" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">setup_standard_excludes<pos:position pos:line="47" pos:column="48"/></name><argument_list pos:line="47" pos:column="48">(<argument><expr><name><name pos:line="47" pos:column="49">topts<pos:position pos:line="47" pos:column="54"/></name><operator pos:line="47" pos:column="54">.<pos:position pos:line="47" pos:column="55"/></operator><name pos:line="47" pos:column="55">dir<pos:position pos:line="47" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="60"/></expr_stmt>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="49" pos:column="17">tree<pos:position pos:line="49" pos:column="21"/></name> <operator pos:line="49" pos:column="22">=<pos:position pos:line="49" pos:column="23"/></operator> <call><name pos:line="49" pos:column="24">parse_tree_indirect<pos:position pos:line="49" pos:column="43"/></name><argument_list pos:line="49" pos:column="43">(<argument><expr><ternary><condition><expr><name><name pos:line="49" pos:column="44">old<pos:position pos:line="49" pos:column="47"/></name><operator pos:line="49" pos:column="47">-&gt;<pos:position pos:line="49" pos:column="52"/></operator><name pos:line="49" pos:column="49">commit<pos:position pos:line="49" pos:column="55"/></name></name></expr> ?<pos:position pos:line="49" pos:column="57"/></condition><then pos:line="49" pos:column="57">
					   <expr><operator pos:line="50" pos:column="44">&amp;<pos:position pos:line="50" pos:column="49"/></operator><name><name pos:line="50" pos:column="45">old<pos:position pos:line="50" pos:column="48"/></name><operator pos:line="50" pos:column="48">-&gt;<pos:position pos:line="50" pos:column="53"/></operator><name pos:line="50" pos:column="50">commit<pos:position pos:line="50" pos:column="56"/></name><operator pos:line="50" pos:column="56">-&gt;<pos:position pos:line="50" pos:column="61"/></operator><name pos:line="50" pos:column="58">object<pos:position pos:line="50" pos:column="64"/></name><operator pos:line="50" pos:column="64">.<pos:position pos:line="50" pos:column="65"/></operator><name pos:line="50" pos:column="65">oid<pos:position pos:line="50" pos:column="68"/></name></name></expr> <pos:position pos:line="50" pos:column="69"/></then><else pos:line="50" pos:column="69">:
					   <expr><operator pos:line="51" pos:column="44">&amp;<pos:position pos:line="51" pos:column="49"/></operator><name pos:line="51" pos:column="45">empty_tree_oid<pos:position pos:line="51" pos:column="59"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="51" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">init_tree_desc<pos:position pos:line="52" pos:column="31"/></name><argument_list pos:line="52" pos:column="31">(<argument><expr><operator pos:line="52" pos:column="32">&amp;<pos:position pos:line="52" pos:column="37"/></operator><name><name pos:line="52" pos:column="33">trees<pos:position pos:line="52" pos:column="38"/></name><index pos:line="52" pos:column="38">[<expr><literal type="number" pos:line="52" pos:column="39">0<pos:position pos:line="52" pos:column="40"/></literal></expr>]<pos:position pos:line="52" pos:column="41"/></index></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="43">tree<pos:position pos:line="52" pos:column="47"/></name><operator pos:line="52" pos:column="47">-&gt;<pos:position pos:line="52" pos:column="52"/></operator><name pos:line="52" pos:column="49">buffer<pos:position pos:line="52" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="57">tree<pos:position pos:line="52" pos:column="61"/></name><operator pos:line="52" pos:column="61">-&gt;<pos:position pos:line="52" pos:column="66"/></operator><name pos:line="52" pos:column="63">size<pos:position pos:line="52" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><name pos:line="53" pos:column="17">tree<pos:position pos:line="53" pos:column="21"/></name> <operator pos:line="53" pos:column="22">=<pos:position pos:line="53" pos:column="23"/></operator> <call><name pos:line="53" pos:column="24">parse_tree_indirect<pos:position pos:line="53" pos:column="43"/></name><argument_list pos:line="53" pos:column="43">(<argument><expr><operator pos:line="53" pos:column="44">&amp;<pos:position pos:line="53" pos:column="49"/></operator><operator pos:line="53" pos:column="45">new<pos:position pos:line="53" pos:column="48"/></operator><operator pos:line="53" pos:column="48">-&gt;<pos:position pos:line="53" pos:column="53"/></operator><name><name pos:line="53" pos:column="50">commit<pos:position pos:line="53" pos:column="56"/></name><operator pos:line="53" pos:column="56">-&gt;<pos:position pos:line="53" pos:column="61"/></operator><name pos:line="53" pos:column="58">object<pos:position pos:line="53" pos:column="64"/></name><operator pos:line="53" pos:column="64">.<pos:position pos:line="53" pos:column="65"/></operator><name pos:line="53" pos:column="65">oid<pos:position pos:line="53" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">init_tree_desc<pos:position pos:line="54" pos:column="31"/></name><argument_list pos:line="54" pos:column="31">(<argument><expr><operator pos:line="54" pos:column="32">&amp;<pos:position pos:line="54" pos:column="37"/></operator><name><name pos:line="54" pos:column="33">trees<pos:position pos:line="54" pos:column="38"/></name><index pos:line="54" pos:column="38">[<expr><literal type="number" pos:line="54" pos:column="39">1<pos:position pos:line="54" pos:column="40"/></literal></expr>]<pos:position pos:line="54" pos:column="41"/></index></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="43">tree<pos:position pos:line="54" pos:column="47"/></name><operator pos:line="54" pos:column="47">-&gt;<pos:position pos:line="54" pos:column="52"/></operator><name pos:line="54" pos:column="49">buffer<pos:position pos:line="54" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="57">tree<pos:position pos:line="54" pos:column="61"/></name><operator pos:line="54" pos:column="61">-&gt;<pos:position pos:line="54" pos:column="66"/></operator><name pos:line="54" pos:column="63">size<pos:position pos:line="54" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="69"/></expr_stmt>

		<expr_stmt><expr><name pos:line="56" pos:column="17">ret<pos:position pos:line="56" pos:column="20"/></name> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <call><name pos:line="56" pos:column="23">unpack_trees<pos:position pos:line="56" pos:column="35"/></name><argument_list pos:line="56" pos:column="35">(<argument><expr><literal type="number" pos:line="56" pos:column="36">2<pos:position pos:line="56" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="39">trees<pos:position pos:line="56" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="46">&amp;<pos:position pos:line="56" pos:column="51"/></operator><name pos:line="56" pos:column="47">topts<pos:position pos:line="56" pos:column="52"/></name></expr></argument>)<pos:position pos:line="56" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="54"/></expr_stmt>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><name pos:line="57" pos:column="21">ret<pos:position pos:line="57" pos:column="24"/></name> <operator pos:line="57" pos:column="25">==<pos:position pos:line="57" pos:column="27"/></operator> <operator pos:line="57" pos:column="28">-<pos:position pos:line="57" pos:column="29"/></operator><literal type="number" pos:line="57" pos:column="29">1<pos:position pos:line="57" pos:column="30"/></literal></expr>)<pos:position pos:line="57" pos:column="31"/></condition><then pos:line="57" pos:column="31"> <block pos:line="57" pos:column="32">{
			<comment type="block" pos:line="58" pos:column="25">/*
			 * Unpack couldn't do a trivial merge; either
			 * give up or do a real merge, depending on
			 * whether the merge flag was used.
			 */</comment>
			<decl_stmt><decl><type><name><name pos:line="63" pos:column="25">struct<pos:position pos:line="63" pos:column="31"/></name> <name pos:line="63" pos:column="32">tree<pos:position pos:line="63" pos:column="36"/></name></name> <modifier pos:line="63" pos:column="37">*<pos:position pos:line="63" pos:column="38"/></modifier></type><name pos:line="63" pos:column="38">result<pos:position pos:line="63" pos:column="44"/></name></decl>;<pos:position pos:line="63" pos:column="45"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="64" pos:column="25">struct<pos:position pos:line="64" pos:column="31"/></name> <name pos:line="64" pos:column="32">tree<pos:position pos:line="64" pos:column="36"/></name></name> <modifier pos:line="64" pos:column="37">*<pos:position pos:line="64" pos:column="38"/></modifier></type><name pos:line="64" pos:column="38">work<pos:position pos:line="64" pos:column="42"/></name></decl>;<pos:position pos:line="64" pos:column="43"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="65" pos:column="25">struct<pos:position pos:line="65" pos:column="31"/></name> <name pos:line="65" pos:column="32">merge_options<pos:position pos:line="65" pos:column="45"/></name></name></type> <name pos:line="65" pos:column="46">o<pos:position pos:line="65" pos:column="47"/></name></decl>;<pos:position pos:line="65" pos:column="48"/></decl_stmt>
			<if pos:line="66" pos:column="25">if <condition pos:line="66" pos:column="28">(<expr><operator pos:line="66" pos:column="29">!<pos:position pos:line="66" pos:column="30"/></operator><name><name pos:line="66" pos:column="30">opts<pos:position pos:line="66" pos:column="34"/></name><operator pos:line="66" pos:column="34">-&gt;<pos:position pos:line="66" pos:column="39"/></operator><name pos:line="66" pos:column="36">merge<pos:position pos:line="66" pos:column="41"/></name></name></expr>)<pos:position pos:line="66" pos:column="42"/></condition><then pos:line="66" pos:column="42">
				<block type="pseudo"><return pos:line="67" pos:column="33">return <expr><literal type="number" pos:line="67" pos:column="40">1<pos:position pos:line="67" pos:column="41"/></literal></expr>;<pos:position pos:line="67" pos:column="42"/></return></block></then></if>

			<comment type="block" pos:line="69" pos:column="25">/*
			 * Without old-&gt;commit, the below is the same as
			 * the two-tree unpack we already tried and failed.
			 */</comment>
			<if pos:line="73" pos:column="25">if <condition pos:line="73" pos:column="28">(<expr><operator pos:line="73" pos:column="29">!<pos:position pos:line="73" pos:column="30"/></operator><name><name pos:line="73" pos:column="30">old<pos:position pos:line="73" pos:column="33"/></name><operator pos:line="73" pos:column="33">-&gt;<pos:position pos:line="73" pos:column="38"/></operator><name pos:line="73" pos:column="35">commit<pos:position pos:line="73" pos:column="41"/></name></name></expr>)<pos:position pos:line="73" pos:column="42"/></condition><then pos:line="73" pos:column="42">
				<block type="pseudo"><return pos:line="74" pos:column="33">return <expr><literal type="number" pos:line="74" pos:column="40">1<pos:position pos:line="74" pos:column="41"/></literal></expr>;<pos:position pos:line="74" pos:column="42"/></return></block></then></if>

			<comment type="block" pos:line="76" pos:column="25">/* Do more real merge */</comment>

			<comment type="block" pos:line="78" pos:column="25">/*
			 * We update the index fully, then write the
			 * tree from the index, then merge the new
			 * branch with the current tree, with the old
			 * branch as the base. Then we reset the index
			 * (but not the working tree) to the new
			 * branch, leaving the working tree as the
			 * merged version, but skipping unmerged
			 * entries in the index.
			 */</comment>

			<expr_stmt><expr><call><name pos:line="89" pos:column="25">add_files_to_cache<pos:position pos:line="89" pos:column="43"/></name><argument_list pos:line="89" pos:column="43">(<argument><expr><name pos:line="89" pos:column="44">NULL<pos:position pos:line="89" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="50">NULL<pos:position pos:line="89" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="89" pos:column="56">0<pos:position pos:line="89" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="59"/></expr_stmt>
			<comment type="block" pos:line="90" pos:column="25">/*
			 * NEEDSWORK: carrying over local changes
			 * when branches have different end-of-line
			 * normalization (or clean+smudge rules) is
			 * a pain; plumb in an option to set
			 * o.renormalize?
			 */</comment>
			<expr_stmt><expr><call><name pos:line="97" pos:column="25">init_merge_options<pos:position pos:line="97" pos:column="43"/></name><argument_list pos:line="97" pos:column="43">(<argument><expr><operator pos:line="97" pos:column="44">&amp;<pos:position pos:line="97" pos:column="49"/></operator><name pos:line="97" pos:column="45">o<pos:position pos:line="97" pos:column="46"/></name></expr></argument>)<pos:position pos:line="97" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="98" pos:column="25">o<pos:position pos:line="98" pos:column="26"/></name><operator pos:line="98" pos:column="26">.<pos:position pos:line="98" pos:column="27"/></operator><name pos:line="98" pos:column="27">verbosity<pos:position pos:line="98" pos:column="36"/></name></name> <operator pos:line="98" pos:column="37">=<pos:position pos:line="98" pos:column="38"/></operator> <literal type="number" pos:line="98" pos:column="39">0<pos:position pos:line="98" pos:column="40"/></literal></expr>;<pos:position pos:line="98" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="99" pos:column="25">work<pos:position pos:line="99" pos:column="29"/></name> <operator pos:line="99" pos:column="30">=<pos:position pos:line="99" pos:column="31"/></operator> <call><name pos:line="99" pos:column="32">write_tree_from_memory<pos:position pos:line="99" pos:column="54"/></name><argument_list pos:line="99" pos:column="54">(<argument><expr><operator pos:line="99" pos:column="55">&amp;<pos:position pos:line="99" pos:column="60"/></operator><name pos:line="99" pos:column="56">o<pos:position pos:line="99" pos:column="57"/></name></expr></argument>)<pos:position pos:line="99" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="59"/></expr_stmt>

			<expr_stmt><expr><name pos:line="101" pos:column="25">ret<pos:position pos:line="101" pos:column="28"/></name> <operator pos:line="101" pos:column="29">=<pos:position pos:line="101" pos:column="30"/></operator> <call><name pos:line="101" pos:column="31">reset_tree<pos:position pos:line="101" pos:column="41"/></name><argument_list pos:line="101" pos:column="41">(<argument><expr><operator pos:line="101" pos:column="42">new<pos:position pos:line="101" pos:column="45"/></operator><operator pos:line="101" pos:column="45">-&gt;<pos:position pos:line="101" pos:column="50"/></operator><name><name pos:line="101" pos:column="47">commit<pos:position pos:line="101" pos:column="53"/></name><operator pos:line="101" pos:column="53">-&gt;<pos:position pos:line="101" pos:column="58"/></operator><name pos:line="101" pos:column="55">tree<pos:position pos:line="101" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="61">opts<pos:position pos:line="101" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="101" pos:column="67">1<pos:position pos:line="101" pos:column="68"/></literal></expr></argument>,
					 <argument><expr><name pos:line="102" pos:column="42">writeout_error<pos:position pos:line="102" pos:column="56"/></name></expr></argument>)<pos:position pos:line="102" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="58"/></expr_stmt>
			<if pos:line="103" pos:column="25">if <condition pos:line="103" pos:column="28">(<expr><name pos:line="103" pos:column="29">ret<pos:position pos:line="103" pos:column="32"/></name></expr>)<pos:position pos:line="103" pos:column="33"/></condition><then pos:line="103" pos:column="33">
				<block type="pseudo"><return pos:line="104" pos:column="33">return <expr><name pos:line="104" pos:column="40">ret<pos:position pos:line="104" pos:column="43"/></name></expr>;<pos:position pos:line="104" pos:column="44"/></return></block></then></if>
			<expr_stmt><expr><name><name pos:line="105" pos:column="25">o<pos:position pos:line="105" pos:column="26"/></name><operator pos:line="105" pos:column="26">.<pos:position pos:line="105" pos:column="27"/></operator><name pos:line="105" pos:column="27">ancestor<pos:position pos:line="105" pos:column="35"/></name></name> <operator pos:line="105" pos:column="36">=<pos:position pos:line="105" pos:column="37"/></operator> <name><name pos:line="105" pos:column="38">old<pos:position pos:line="105" pos:column="41"/></name><operator pos:line="105" pos:column="41">-&gt;<pos:position pos:line="105" pos:column="46"/></operator><name pos:line="105" pos:column="43">name<pos:position pos:line="105" pos:column="47"/></name></name></expr>;<pos:position pos:line="105" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="106" pos:column="25">o<pos:position pos:line="106" pos:column="26"/></name><operator pos:line="106" pos:column="26">.<pos:position pos:line="106" pos:column="27"/></operator><name pos:line="106" pos:column="27">branch1<pos:position pos:line="106" pos:column="34"/></name></name> <operator pos:line="106" pos:column="35">=<pos:position pos:line="106" pos:column="36"/></operator> <operator pos:line="106" pos:column="37">new<pos:position pos:line="106" pos:column="40"/></operator><operator pos:line="106" pos:column="40">-&gt;<pos:position pos:line="106" pos:column="45"/></operator><name pos:line="106" pos:column="42">name<pos:position pos:line="106" pos:column="46"/></name></expr>;<pos:position pos:line="106" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="107" pos:column="25">o<pos:position pos:line="107" pos:column="26"/></name><operator pos:line="107" pos:column="26">.<pos:position pos:line="107" pos:column="27"/></operator><name pos:line="107" pos:column="27">branch2<pos:position pos:line="107" pos:column="34"/></name></name> <operator pos:line="107" pos:column="35">=<pos:position pos:line="107" pos:column="36"/></operator> <literal type="string" pos:line="107" pos:column="37">"local"<pos:position pos:line="107" pos:column="44"/></literal></expr>;<pos:position pos:line="107" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="108" pos:column="25">ret<pos:position pos:line="108" pos:column="28"/></name> <operator pos:line="108" pos:column="29">=<pos:position pos:line="108" pos:column="30"/></operator> <call><name pos:line="108" pos:column="31">merge_trees<pos:position pos:line="108" pos:column="42"/></name><argument_list pos:line="108" pos:column="42">(<argument><expr><operator pos:line="108" pos:column="43">&amp;<pos:position pos:line="108" pos:column="48"/></operator><name pos:line="108" pos:column="44">o<pos:position pos:line="108" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="47">new<pos:position pos:line="108" pos:column="50"/></operator><operator pos:line="108" pos:column="50">-&gt;<pos:position pos:line="108" pos:column="55"/></operator><name><name pos:line="108" pos:column="52">commit<pos:position pos:line="108" pos:column="58"/></name><operator pos:line="108" pos:column="58">-&gt;<pos:position pos:line="108" pos:column="63"/></operator><name pos:line="108" pos:column="60">tree<pos:position pos:line="108" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="66">work<pos:position pos:line="108" pos:column="70"/></name></expr></argument>,
				<argument><expr><name><name pos:line="109" pos:column="33">old<pos:position pos:line="109" pos:column="36"/></name><operator pos:line="109" pos:column="36">-&gt;<pos:position pos:line="109" pos:column="41"/></operator><name pos:line="109" pos:column="38">commit<pos:position pos:line="109" pos:column="44"/></name><operator pos:line="109" pos:column="44">-&gt;<pos:position pos:line="109" pos:column="49"/></operator><name pos:line="109" pos:column="46">tree<pos:position pos:line="109" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="52">&amp;<pos:position pos:line="109" pos:column="57"/></operator><name pos:line="109" pos:column="53">result<pos:position pos:line="109" pos:column="59"/></name></expr></argument>)<pos:position pos:line="109" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="61"/></expr_stmt>
			<if pos:line="110" pos:column="25">if <condition pos:line="110" pos:column="28">(<expr><name pos:line="110" pos:column="29">ret<pos:position pos:line="110" pos:column="32"/></name> <operator pos:line="110" pos:column="33">&lt;<pos:position pos:line="110" pos:column="37"/></operator> <literal type="number" pos:line="110" pos:column="35">0<pos:position pos:line="110" pos:column="36"/></literal></expr>)<pos:position pos:line="110" pos:column="37"/></condition><then pos:line="110" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="33">exit<pos:position pos:line="111" pos:column="37"/></name><argument_list pos:line="111" pos:column="37">(<argument><expr><literal type="number" pos:line="111" pos:column="38">128<pos:position pos:line="111" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="43"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="112" pos:column="25">ret<pos:position pos:line="112" pos:column="28"/></name> <operator pos:line="112" pos:column="29">=<pos:position pos:line="112" pos:column="30"/></operator> <call><name pos:line="112" pos:column="31">reset_tree<pos:position pos:line="112" pos:column="41"/></name><argument_list pos:line="112" pos:column="41">(<argument><expr><operator pos:line="112" pos:column="42">new<pos:position pos:line="112" pos:column="45"/></operator><operator pos:line="112" pos:column="45">-&gt;<pos:position pos:line="112" pos:column="50"/></operator><name><name pos:line="112" pos:column="47">commit<pos:position pos:line="112" pos:column="53"/></name><operator pos:line="112" pos:column="53">-&gt;<pos:position pos:line="112" pos:column="58"/></operator><name pos:line="112" pos:column="55">tree<pos:position pos:line="112" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="61">opts<pos:position pos:line="112" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="112" pos:column="67">0<pos:position pos:line="112" pos:column="68"/></literal></expr></argument>,
					 <argument><expr><name pos:line="113" pos:column="42">writeout_error<pos:position pos:line="113" pos:column="56"/></name></expr></argument>)<pos:position pos:line="113" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="114" pos:column="25">strbuf_release<pos:position pos:line="114" pos:column="39"/></name><argument_list pos:line="114" pos:column="39">(<argument><expr><operator pos:line="114" pos:column="40">&amp;<pos:position pos:line="114" pos:column="45"/></operator><name><name pos:line="114" pos:column="41">o<pos:position pos:line="114" pos:column="42"/></name><operator pos:line="114" pos:column="42">.<pos:position pos:line="114" pos:column="43"/></operator><name pos:line="114" pos:column="43">obuf<pos:position pos:line="114" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="114" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="49"/></expr_stmt>
			<if pos:line="115" pos:column="25">if <condition pos:line="115" pos:column="28">(<expr><name pos:line="115" pos:column="29">ret<pos:position pos:line="115" pos:column="32"/></name></expr>)<pos:position pos:line="115" pos:column="33"/></condition><then pos:line="115" pos:column="33">
				<block type="pseudo"><return pos:line="116" pos:column="33">return <expr><name pos:line="116" pos:column="40">ret<pos:position pos:line="116" pos:column="43"/></name></expr>;<pos:position pos:line="116" pos:column="44"/></return></block></then></if>
		}<pos:position pos:line="117" pos:column="18"/></block></then></if>
	}<pos:position pos:line="118" pos:column="10"/></block></else></if>

	<if pos:line="120" pos:column="9">if <condition pos:line="120" pos:column="12">(<expr><operator pos:line="120" pos:column="13">!<pos:position pos:line="120" pos:column="14"/></operator><name pos:line="120" pos:column="14">active_cache_tree<pos:position pos:line="120" pos:column="31"/></name></expr>)<pos:position pos:line="120" pos:column="32"/></condition><then pos:line="120" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="121" pos:column="17">active_cache_tree<pos:position pos:line="121" pos:column="34"/></name> <operator pos:line="121" pos:column="35">=<pos:position pos:line="121" pos:column="36"/></operator> <call><name pos:line="121" pos:column="37">cache_tree<pos:position pos:line="121" pos:column="47"/></name><argument_list pos:line="121" pos:column="47">()<pos:position pos:line="121" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="50"/></expr_stmt></block></then></if>

	<if pos:line="123" pos:column="9">if <condition pos:line="123" pos:column="12">(<expr><operator pos:line="123" pos:column="13">!<pos:position pos:line="123" pos:column="14"/></operator><call><name pos:line="123" pos:column="14">cache_tree_fully_valid<pos:position pos:line="123" pos:column="36"/></name><argument_list pos:line="123" pos:column="36">(<argument><expr><name pos:line="123" pos:column="37">active_cache_tree<pos:position pos:line="123" pos:column="54"/></name></expr></argument>)<pos:position pos:line="123" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="123" pos:column="56"/></condition><then pos:line="123" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="124" pos:column="17">cache_tree_update<pos:position pos:line="124" pos:column="34"/></name><argument_list pos:line="124" pos:column="34">(<argument><expr><operator pos:line="124" pos:column="35">&amp;<pos:position pos:line="124" pos:column="40"/></operator><name pos:line="124" pos:column="36">the_index<pos:position pos:line="124" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="47">WRITE_TREE_SILENT<pos:position pos:line="124" pos:column="64"/></name> <operator pos:line="124" pos:column="65">|<pos:position pos:line="124" pos:column="66"/></operator> <name pos:line="124" pos:column="67">WRITE_TREE_REPAIR<pos:position pos:line="124" pos:column="84"/></name></expr></argument>)<pos:position pos:line="124" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="86"/></expr_stmt></block></then></if>

	<if pos:line="126" pos:column="9">if <condition pos:line="126" pos:column="12">(<expr><call><name pos:line="126" pos:column="13">write_locked_index<pos:position pos:line="126" pos:column="31"/></name><argument_list pos:line="126" pos:column="31">(<argument><expr><operator pos:line="126" pos:column="32">&amp;<pos:position pos:line="126" pos:column="37"/></operator><name pos:line="126" pos:column="33">the_index<pos:position pos:line="126" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="44">lock_file<pos:position pos:line="126" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="55">COMMIT_LOCK<pos:position pos:line="126" pos:column="66"/></name></expr></argument>)<pos:position pos:line="126" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="68"/></condition><then pos:line="126" pos:column="68">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="127" pos:column="17">die<pos:position pos:line="127" pos:column="20"/></name><argument_list pos:line="127" pos:column="20">(<argument><expr><call><name pos:line="127" pos:column="21">_<pos:position pos:line="127" pos:column="22"/></name><argument_list pos:line="127" pos:column="22">(<argument><expr><literal type="string" pos:line="127" pos:column="23">"unable to write new index file"<pos:position pos:line="127" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="127" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="58"/></expr_stmt></block></then></if>

	<if pos:line="129" pos:column="9">if <condition pos:line="129" pos:column="12">(<expr><operator pos:line="129" pos:column="13">!<pos:position pos:line="129" pos:column="14"/></operator><name><name pos:line="129" pos:column="14">opts<pos:position pos:line="129" pos:column="18"/></name><operator pos:line="129" pos:column="18">-&gt;<pos:position pos:line="129" pos:column="23"/></operator><name pos:line="129" pos:column="20">force<pos:position pos:line="129" pos:column="25"/></name></name> <operator pos:line="129" pos:column="26">&amp;&amp;<pos:position pos:line="129" pos:column="36"/></operator> <operator pos:line="129" pos:column="29">!<pos:position pos:line="129" pos:column="30"/></operator><name><name pos:line="129" pos:column="30">opts<pos:position pos:line="129" pos:column="34"/></name><operator pos:line="129" pos:column="34">-&gt;<pos:position pos:line="129" pos:column="39"/></operator><name pos:line="129" pos:column="36">quiet<pos:position pos:line="129" pos:column="41"/></name></name></expr>)<pos:position pos:line="129" pos:column="42"/></condition><then pos:line="129" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="130" pos:column="17">show_local_changes<pos:position pos:line="130" pos:column="35"/></name><argument_list pos:line="130" pos:column="35">(<argument><expr><operator pos:line="130" pos:column="36">&amp;<pos:position pos:line="130" pos:column="41"/></operator><operator pos:line="130" pos:column="37">new<pos:position pos:line="130" pos:column="40"/></operator><operator pos:line="130" pos:column="40">-&gt;<pos:position pos:line="130" pos:column="45"/></operator><name><name pos:line="130" pos:column="42">commit<pos:position pos:line="130" pos:column="48"/></name><operator pos:line="130" pos:column="48">-&gt;<pos:position pos:line="130" pos:column="53"/></operator><name pos:line="130" pos:column="50">object<pos:position pos:line="130" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="130" pos:column="58">&amp;<pos:position pos:line="130" pos:column="63"/></operator><name><name pos:line="130" pos:column="59">opts<pos:position pos:line="130" pos:column="63"/></name><operator pos:line="130" pos:column="63">-&gt;<pos:position pos:line="130" pos:column="68"/></operator><name pos:line="130" pos:column="65">diff_options<pos:position pos:line="130" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="130" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="79"/></expr_stmt></block></then></if>

	<return pos:line="132" pos:column="9">return <expr><literal type="number" pos:line="132" pos:column="16">0<pos:position pos:line="132" pos:column="17"/></literal></expr>;<pos:position pos:line="132" pos:column="18"/></return>
}</unit>
