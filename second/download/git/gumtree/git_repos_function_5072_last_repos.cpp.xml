<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5072_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">map_refspec<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">ref<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>,
			       <parameter><decl><type><name><name pos:line="2" pos:column="32">struct<pos:position pos:line="2" pos:column="38"/></name> <name pos:line="2" pos:column="39">remote<pos:position pos:line="2" pos:column="45"/></name></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">remote<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="55">struct<pos:position pos:line="2" pos:column="61"/></name> <name pos:line="2" pos:column="62">ref<pos:position pos:line="2" pos:column="65"/></name></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="67">local_refs<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ref<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">matched<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><name pos:line="4" pos:column="31">NULL<pos:position pos:line="4" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* Does "ref" uniquely name our ref? */</comment>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name pos:line="7" pos:column="13">count_refspec_match<pos:position pos:line="7" pos:column="32"/></name><argument_list pos:line="7" pos:column="32">(<argument><expr><name pos:line="7" pos:column="33">ref<pos:position pos:line="7" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="38">local_refs<pos:position pos:line="7" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="50">&amp;<pos:position pos:line="7" pos:column="55"/></operator><name pos:line="7" pos:column="51">matched<pos:position pos:line="7" pos:column="58"/></name></expr></argument>)<pos:position pos:line="7" pos:column="59"/></argument_list></call> <operator pos:line="7" pos:column="60">!=<pos:position pos:line="7" pos:column="62"/></operator> <literal type="number" pos:line="7" pos:column="63">1<pos:position pos:line="7" pos:column="64"/></literal></expr>)<pos:position pos:line="7" pos:column="65"/></condition><then pos:line="7" pos:column="65">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><name pos:line="8" pos:column="24">ref<pos:position pos:line="8" pos:column="27"/></name></expr>;<pos:position pos:line="8" pos:column="28"/></return></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">remote<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">-&gt;<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="21">push<pos:position pos:line="10" pos:column="25"/></name></name></expr>)<pos:position pos:line="10" pos:column="26"/></condition><then pos:line="10" pos:column="26"> <block pos:line="10" pos:column="27">{
		<decl_stmt><decl><type><name><name pos:line="11" pos:column="17">struct<pos:position pos:line="11" pos:column="23"/></name> <name pos:line="11" pos:column="24">refspec<pos:position pos:line="11" pos:column="31"/></name></name></type> <name pos:line="11" pos:column="32">query<pos:position pos:line="11" pos:column="37"/></name></decl>;<pos:position pos:line="11" pos:column="38"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">memset<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><operator pos:line="12" pos:column="24">&amp;<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="25">query<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="32">0<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="35">sizeof<argument_list pos:line="12" pos:column="41">(<argument><expr pos:line="12" pos:column="42">struct <name pos:line="12" pos:column="49">refspec<pos:position pos:line="12" pos:column="56"/></name></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="13" pos:column="17">query<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">.<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">src<pos:position pos:line="13" pos:column="26"/></name></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <name><name pos:line="13" pos:column="29">matched<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">-&gt;<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="38">name<pos:position pos:line="13" pos:column="42"/></name></name></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><operator pos:line="14" pos:column="21">!<pos:position pos:line="14" pos:column="22"/></operator><call><name pos:line="14" pos:column="22">query_refspecs<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><name><name pos:line="14" pos:column="37">remote<pos:position pos:line="14" pos:column="43"/></name><operator pos:line="14" pos:column="43">-&gt;<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="45">push<pos:position pos:line="14" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="51">remote<pos:position pos:line="14" pos:column="57"/></name><operator pos:line="14" pos:column="57">-&gt;<pos:position pos:line="14" pos:column="62"/></operator><name pos:line="14" pos:column="59">push_refspec_nr<pos:position pos:line="14" pos:column="74"/></name></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="76">&amp;<pos:position pos:line="14" pos:column="81"/></operator><name pos:line="14" pos:column="77">query<pos:position pos:line="14" pos:column="82"/></name></expr></argument>)<pos:position pos:line="14" pos:column="83"/></argument_list></call> <operator pos:line="14" pos:column="84">&amp;&amp;<pos:position pos:line="14" pos:column="94"/></operator>
		    <name><name pos:line="15" pos:column="21">query<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">.<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="27">dst<pos:position pos:line="15" pos:column="30"/></name></name></expr>)<pos:position pos:line="15" pos:column="31"/></condition><then pos:line="15" pos:column="31"> <block pos:line="15" pos:column="32">{
			<decl_stmt><decl><type><name><name pos:line="16" pos:column="25">struct<pos:position pos:line="16" pos:column="31"/></name> <name pos:line="16" pos:column="32">strbuf<pos:position pos:line="16" pos:column="38"/></name></name></type> <name pos:line="16" pos:column="39">buf<pos:position pos:line="16" pos:column="42"/></name> <init pos:line="16" pos:column="43">= <expr><name pos:line="16" pos:column="45">STRBUF_INIT<pos:position pos:line="16" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="57"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">strbuf_addf<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><operator pos:line="17" pos:column="37">&amp;<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="38">buf<pos:position pos:line="17" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="43">"%s%s:%s"<pos:position pos:line="17" pos:column="52"/></literal></expr></argument>,
				    <argument><expr><ternary><condition><expr><name><name pos:line="18" pos:column="37">query<pos:position pos:line="18" pos:column="42"/></name><operator pos:line="18" pos:column="42">.<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="43">force<pos:position pos:line="18" pos:column="48"/></name></name></expr> ?<pos:position pos:line="18" pos:column="50"/></condition><then pos:line="18" pos:column="50"> <expr><literal type="string" pos:line="18" pos:column="51">"+"<pos:position pos:line="18" pos:column="54"/></literal></expr> <pos:position pos:line="18" pos:column="55"/></then><else pos:line="18" pos:column="55">: <expr><literal type="string" pos:line="18" pos:column="57">""<pos:position pos:line="18" pos:column="59"/></literal></expr></else></ternary></expr></argument>,
				    <argument><expr><name><name pos:line="19" pos:column="37">query<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">.<pos:position pos:line="19" pos:column="43"/></operator><name pos:line="19" pos:column="43">src<pos:position pos:line="19" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="48">query<pos:position pos:line="19" pos:column="53"/></name><operator pos:line="19" pos:column="53">.<pos:position pos:line="19" pos:column="54"/></operator><name pos:line="19" pos:column="54">dst<pos:position pos:line="19" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="59"/></expr_stmt>
			<return pos:line="20" pos:column="25">return <expr><call><name pos:line="20" pos:column="32">strbuf_detach<pos:position pos:line="20" pos:column="45"/></name><argument_list pos:line="20" pos:column="45">(<argument><expr><operator pos:line="20" pos:column="46">&amp;<pos:position pos:line="20" pos:column="51"/></operator><name pos:line="20" pos:column="47">buf<pos:position pos:line="20" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="52">NULL<pos:position pos:line="20" pos:column="56"/></name></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="58"/></return>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">push_default<pos:position pos:line="24" pos:column="25"/></name> <operator pos:line="24" pos:column="26">==<pos:position pos:line="24" pos:column="28"/></operator> <name pos:line="24" pos:column="29">PUSH_DEFAULT_UPSTREAM<pos:position pos:line="24" pos:column="50"/></name> <operator pos:line="24" pos:column="51">&amp;&amp;<pos:position pos:line="24" pos:column="61"/></operator>
	    <call><name pos:line="25" pos:column="13">starts_with<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><name><name pos:line="25" pos:column="25">matched<pos:position pos:line="25" pos:column="32"/></name><operator pos:line="25" pos:column="32">-&gt;<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="34">name<pos:position pos:line="25" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="40">"refs/heads/"<pos:position pos:line="25" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="55"/></condition><then pos:line="25" pos:column="55"> <block pos:line="25" pos:column="56">{
		<decl_stmt><decl><type><name><name pos:line="26" pos:column="17">struct<pos:position pos:line="26" pos:column="23"/></name> <name pos:line="26" pos:column="24">branch<pos:position pos:line="26" pos:column="30"/></name></name> <modifier pos:line="26" pos:column="31">*<pos:position pos:line="26" pos:column="32"/></modifier></type><name pos:line="26" pos:column="32">branch<pos:position pos:line="26" pos:column="38"/></name> <init pos:line="26" pos:column="39">= <expr><call><name pos:line="26" pos:column="41">branch_get<pos:position pos:line="26" pos:column="51"/></name><argument_list pos:line="26" pos:column="51">(<argument><expr><name><name pos:line="26" pos:column="52">matched<pos:position pos:line="26" pos:column="59"/></name><operator pos:line="26" pos:column="59">-&gt;<pos:position pos:line="26" pos:column="64"/></operator><name pos:line="26" pos:column="61">name<pos:position pos:line="26" pos:column="65"/></name></name> <operator pos:line="26" pos:column="66">+<pos:position pos:line="26" pos:column="67"/></operator> <literal type="number" pos:line="26" pos:column="68">11<pos:position pos:line="26" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="72"/></decl_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name><name pos:line="27" pos:column="21">branch<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">-&gt;<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="29">merge_nr<pos:position pos:line="27" pos:column="37"/></name></name> <operator pos:line="27" pos:column="38">==<pos:position pos:line="27" pos:column="40"/></operator> <literal type="number" pos:line="27" pos:column="41">1<pos:position pos:line="27" pos:column="42"/></literal> <operator pos:line="27" pos:column="43">&amp;&amp;<pos:position pos:line="27" pos:column="53"/></operator> <name><name pos:line="27" pos:column="46">branch<pos:position pos:line="27" pos:column="52"/></name><operator pos:line="27" pos:column="52">-&gt;<pos:position pos:line="27" pos:column="57"/></operator><name pos:line="27" pos:column="54">merge<pos:position pos:line="27" pos:column="59"/></name><index pos:line="27" pos:column="59">[<expr><literal type="number" pos:line="27" pos:column="60">0<pos:position pos:line="27" pos:column="61"/></literal></expr>]<pos:position pos:line="27" pos:column="62"/></index></name><operator pos:line="27" pos:column="62">-&gt;<pos:position pos:line="27" pos:column="67"/></operator><name pos:line="27" pos:column="64">src<pos:position pos:line="27" pos:column="67"/></name></expr>)<pos:position pos:line="27" pos:column="68"/></condition><then pos:line="27" pos:column="68"> <block pos:line="27" pos:column="69">{
			<decl_stmt><decl><type><name><name pos:line="28" pos:column="25">struct<pos:position pos:line="28" pos:column="31"/></name> <name pos:line="28" pos:column="32">strbuf<pos:position pos:line="28" pos:column="38"/></name></name></type> <name pos:line="28" pos:column="39">buf<pos:position pos:line="28" pos:column="42"/></name> <init pos:line="28" pos:column="43">= <expr><name pos:line="28" pos:column="45">STRBUF_INIT<pos:position pos:line="28" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="57"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">strbuf_addf<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">(<argument><expr><operator pos:line="29" pos:column="37">&amp;<pos:position pos:line="29" pos:column="42"/></operator><name pos:line="29" pos:column="38">buf<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="43">"%s:%s"<pos:position pos:line="29" pos:column="50"/></literal></expr></argument>,
				    <argument><expr><name pos:line="30" pos:column="37">ref<pos:position pos:line="30" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="42">branch<pos:position pos:line="30" pos:column="48"/></name><operator pos:line="30" pos:column="48">-&gt;<pos:position pos:line="30" pos:column="53"/></operator><name pos:line="30" pos:column="50">merge<pos:position pos:line="30" pos:column="55"/></name><index pos:line="30" pos:column="55">[<expr><literal type="number" pos:line="30" pos:column="56">0<pos:position pos:line="30" pos:column="57"/></literal></expr>]<pos:position pos:line="30" pos:column="58"/></index></name><operator pos:line="30" pos:column="58">-&gt;<pos:position pos:line="30" pos:column="63"/></operator><name pos:line="30" pos:column="60">src<pos:position pos:line="30" pos:column="63"/></name></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="65"/></expr_stmt>
			<return pos:line="31" pos:column="25">return <expr><call><name pos:line="31" pos:column="32">strbuf_detach<pos:position pos:line="31" pos:column="45"/></name><argument_list pos:line="31" pos:column="45">(<argument><expr><operator pos:line="31" pos:column="46">&amp;<pos:position pos:line="31" pos:column="51"/></operator><name pos:line="31" pos:column="47">buf<pos:position pos:line="31" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="52">NULL<pos:position pos:line="31" pos:column="56"/></name></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="58"/></return>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>

	<return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">ref<pos:position pos:line="35" pos:column="19"/></name></expr>;<pos:position pos:line="35" pos:column="20"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
