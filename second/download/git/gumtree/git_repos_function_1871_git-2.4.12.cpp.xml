<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1871_git-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">parse_loc<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">spec<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">nth_line_fn_t<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">nth_line<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="2" pos:column="30">void<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">data<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">long<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">lines<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">long<pos:position pos:line="2" pos:column="58"/></name></type> <name pos:line="2" pos:column="59">begin<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="66">long<pos:position pos:line="2" pos:column="70"/></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="72">ret<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">term<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">line<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">long<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">num<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">reg_error<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">regex_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">regexp<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">regmatch_t<pos:position pos:line="9" pos:column="19"/></name></type> <name><name pos:line="9" pos:column="20">match<pos:position pos:line="9" pos:column="25"/></name><index pos:line="9" pos:column="25">[<expr><literal type="number" pos:line="9" pos:column="26">1<pos:position pos:line="9" pos:column="27"/></literal></expr>]<pos:position pos:line="9" pos:column="28"/></index></name></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>

	<comment type="block" pos:line="11" pos:column="9">/* Allow "-L &lt;something&gt;,+20" to mean starting at &lt;something&gt;
	 * for 20 lines, or "-L &lt;something&gt;,-5" for 5 lines ending at
	 * &lt;something&gt;.
	 */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal> <operator pos:line="15" pos:column="15">&lt;=<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="18">begin<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">&amp;&amp;<pos:position pos:line="15" pos:column="34"/></operator> <operator pos:line="15" pos:column="27">(<pos:position pos:line="15" pos:column="28"/></operator><name><name pos:line="15" pos:column="28">spec<pos:position pos:line="15" pos:column="32"/></name><index pos:line="15" pos:column="32">[<expr><literal type="number" pos:line="15" pos:column="33">0<pos:position pos:line="15" pos:column="34"/></literal></expr>]<pos:position pos:line="15" pos:column="35"/></index></name> <operator pos:line="15" pos:column="36">==<pos:position pos:line="15" pos:column="38"/></operator> <literal type="char" pos:line="15" pos:column="39">'+'<pos:position pos:line="15" pos:column="42"/></literal> <operator pos:line="15" pos:column="43">||<pos:position pos:line="15" pos:column="45"/></operator> <name><name pos:line="15" pos:column="46">spec<pos:position pos:line="15" pos:column="50"/></name><index pos:line="15" pos:column="50">[<expr><literal type="number" pos:line="15" pos:column="51">0<pos:position pos:line="15" pos:column="52"/></literal></expr>]<pos:position pos:line="15" pos:column="53"/></index></name> <operator pos:line="15" pos:column="54">==<pos:position pos:line="15" pos:column="56"/></operator> <literal type="char" pos:line="15" pos:column="57">'-'<pos:position pos:line="15" pos:column="60"/></literal><operator pos:line="15" pos:column="60">)<pos:position pos:line="15" pos:column="61"/></operator></expr>)<pos:position pos:line="15" pos:column="62"/></condition><then pos:line="15" pos:column="62"> <block pos:line="15" pos:column="63">{
		<expr_stmt><expr><name pos:line="16" pos:column="17">num<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <call><name pos:line="16" pos:column="23">strtol<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">spec<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">+<pos:position pos:line="16" pos:column="36"/></operator> <literal type="number" pos:line="16" pos:column="37">1<pos:position pos:line="16" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="40">&amp;<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="41">term<pos:position pos:line="16" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="47">10<pos:position pos:line="16" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="51"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">term<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">!=<pos:position pos:line="17" pos:column="28"/></operator> <name pos:line="17" pos:column="29">spec<pos:position pos:line="17" pos:column="33"/></name> <operator pos:line="17" pos:column="34">+<pos:position pos:line="17" pos:column="35"/></operator> <literal type="number" pos:line="17" pos:column="36">1<pos:position pos:line="17" pos:column="37"/></literal></expr>)<pos:position pos:line="17" pos:column="38"/></condition><then pos:line="17" pos:column="38"> <block pos:line="17" pos:column="39">{
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><operator pos:line="18" pos:column="29">!<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="30">ret<pos:position pos:line="18" pos:column="33"/></name></expr>)<pos:position pos:line="18" pos:column="34"/></condition><then pos:line="18" pos:column="34">
				<block type="pseudo"><return pos:line="19" pos:column="33">return <expr><name pos:line="19" pos:column="40">term<pos:position pos:line="19" pos:column="44"/></name></expr>;<pos:position pos:line="19" pos:column="45"/></return></block></then></if>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><name pos:line="20" pos:column="29">num<pos:position pos:line="20" pos:column="32"/></name> <operator pos:line="20" pos:column="33">==<pos:position pos:line="20" pos:column="35"/></operator> <literal type="number" pos:line="20" pos:column="36">0<pos:position pos:line="20" pos:column="37"/></literal></expr>)<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="33">die<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><literal type="string" pos:line="21" pos:column="37">"-L invalid empty range"<pos:position pos:line="21" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt></block></then></if>
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name><name pos:line="22" pos:column="29">spec<pos:position pos:line="22" pos:column="33"/></name><index pos:line="22" pos:column="33">[<expr><literal type="number" pos:line="22" pos:column="34">0<pos:position pos:line="22" pos:column="35"/></literal></expr>]<pos:position pos:line="22" pos:column="36"/></index></name> <operator pos:line="22" pos:column="37">==<pos:position pos:line="22" pos:column="39"/></operator> <literal type="char" pos:line="22" pos:column="40">'-'<pos:position pos:line="22" pos:column="43"/></literal></expr>)<pos:position pos:line="22" pos:column="44"/></condition><then pos:line="22" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="33">num<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">=<pos:position pos:line="23" pos:column="38"/></operator> <literal type="number" pos:line="23" pos:column="39">0<pos:position pos:line="23" pos:column="40"/></literal> <operator pos:line="23" pos:column="41">-<pos:position pos:line="23" pos:column="42"/></operator> <name pos:line="23" pos:column="43">num<pos:position pos:line="23" pos:column="46"/></name></expr>;<pos:position pos:line="23" pos:column="47"/></expr_stmt></block></then></if>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><literal type="number" pos:line="24" pos:column="29">0<pos:position pos:line="24" pos:column="30"/></literal> <operator pos:line="24" pos:column="31">&lt;<pos:position pos:line="24" pos:column="35"/></operator> <name pos:line="24" pos:column="33">num<pos:position pos:line="24" pos:column="36"/></name></expr>)<pos:position pos:line="24" pos:column="37"/></condition><then pos:line="24" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="25" pos:column="33">*<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="34">ret<pos:position pos:line="25" pos:column="37"/></name> <operator pos:line="25" pos:column="38">=<pos:position pos:line="25" pos:column="39"/></operator> <name pos:line="25" pos:column="40">begin<pos:position pos:line="25" pos:column="45"/></name> <operator pos:line="25" pos:column="46">+<pos:position pos:line="25" pos:column="47"/></operator> <name pos:line="25" pos:column="48">num<pos:position pos:line="25" pos:column="51"/></name> <operator pos:line="25" pos:column="52">-<pos:position pos:line="25" pos:column="53"/></operator> <literal type="number" pos:line="25" pos:column="54">2<pos:position pos:line="25" pos:column="55"/></literal></expr>;<pos:position pos:line="25" pos:column="56"/></expr_stmt></block></then>
			<elseif pos:line="26" pos:column="25">else <if pos:line="26" pos:column="30">if <condition pos:line="26" pos:column="33">(<expr><operator pos:line="26" pos:column="34">!<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="35">num<pos:position pos:line="26" pos:column="38"/></name></expr>)<pos:position pos:line="26" pos:column="39"/></condition><then pos:line="26" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="27" pos:column="33">*<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">ret<pos:position pos:line="27" pos:column="37"/></name> <operator pos:line="27" pos:column="38">=<pos:position pos:line="27" pos:column="39"/></operator> <name pos:line="27" pos:column="40">begin<pos:position pos:line="27" pos:column="45"/></name></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt></block></then></if></elseif>
			<else pos:line="28" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><operator pos:line="29" pos:column="33">*<pos:position pos:line="29" pos:column="34"/></operator><name pos:line="29" pos:column="34">ret<pos:position pos:line="29" pos:column="37"/></name> <operator pos:line="29" pos:column="38">=<pos:position pos:line="29" pos:column="39"/></operator> <name pos:line="29" pos:column="40">begin<pos:position pos:line="29" pos:column="45"/></name> <operator pos:line="29" pos:column="46">+<pos:position pos:line="29" pos:column="47"/></operator> <name pos:line="29" pos:column="48">num<pos:position pos:line="29" pos:column="51"/></name></expr>;<pos:position pos:line="29" pos:column="52"/></expr_stmt></block></else></if>
			<return pos:line="30" pos:column="25">return <expr><name pos:line="30" pos:column="32">term<pos:position pos:line="30" pos:column="36"/></name></expr>;<pos:position pos:line="30" pos:column="37"/></return>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if>
		<return pos:line="32" pos:column="17">return <expr><name pos:line="32" pos:column="24">spec<pos:position pos:line="32" pos:column="28"/></name></expr>;<pos:position pos:line="32" pos:column="29"/></return>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="34" pos:column="9">num<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <call><name pos:line="34" pos:column="15">strtol<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">(<argument><expr><name pos:line="34" pos:column="22">spec<pos:position pos:line="34" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="28">&amp;<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="29">term<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="35">10<pos:position pos:line="34" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">term<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">!=<pos:position pos:line="35" pos:column="20"/></operator> <name pos:line="35" pos:column="21">spec<pos:position pos:line="35" pos:column="25"/></name></expr>)<pos:position pos:line="35" pos:column="26"/></condition><then pos:line="35" pos:column="26"> <block pos:line="35" pos:column="27">{
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">ret<pos:position pos:line="36" pos:column="24"/></name></expr>)<pos:position pos:line="36" pos:column="25"/></condition><then pos:line="36" pos:column="25"> <block pos:line="36" pos:column="26">{
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><name pos:line="37" pos:column="29">num<pos:position pos:line="37" pos:column="32"/></name> <operator pos:line="37" pos:column="33">&lt;=<pos:position pos:line="37" pos:column="38"/></operator> <literal type="number" pos:line="37" pos:column="36">0<pos:position pos:line="37" pos:column="37"/></literal></expr>)<pos:position pos:line="37" pos:column="38"/></condition><then pos:line="37" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="33">die<pos:position pos:line="38" pos:column="36"/></name><argument_list pos:line="38" pos:column="36">(<argument><expr><literal type="string" pos:line="38" pos:column="37">"-L invalid line number: %ld"<pos:position pos:line="38" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="68">num<pos:position pos:line="38" pos:column="71"/></name></expr></argument>)<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="73"/></expr_stmt></block></then></if>
			<expr_stmt><expr><operator pos:line="39" pos:column="25">*<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="26">ret<pos:position pos:line="39" pos:column="29"/></name> <operator pos:line="39" pos:column="30">=<pos:position pos:line="39" pos:column="31"/></operator> <name pos:line="39" pos:column="32">num<pos:position pos:line="39" pos:column="35"/></name></expr>;<pos:position pos:line="39" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>
		<return pos:line="41" pos:column="17">return <expr><name pos:line="41" pos:column="24">term<pos:position pos:line="41" pos:column="28"/></name></expr>;<pos:position pos:line="41" pos:column="29"/></return>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">begin<pos:position pos:line="44" pos:column="18"/></name> <operator pos:line="44" pos:column="19">&lt;<pos:position pos:line="44" pos:column="23"/></operator> <literal type="number" pos:line="44" pos:column="21">0<pos:position pos:line="44" pos:column="22"/></literal></expr>)<pos:position pos:line="44" pos:column="23"/></condition><then pos:line="44" pos:column="23"> <block pos:line="44" pos:column="24">{
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name><name pos:line="45" pos:column="21">spec<pos:position pos:line="45" pos:column="25"/></name><index pos:line="45" pos:column="25">[<expr><literal type="number" pos:line="45" pos:column="26">0<pos:position pos:line="45" pos:column="27"/></literal></expr>]<pos:position pos:line="45" pos:column="28"/></index></name> <operator pos:line="45" pos:column="29">!=<pos:position pos:line="45" pos:column="31"/></operator> <literal type="char" pos:line="45" pos:column="32">'^'<pos:position pos:line="45" pos:column="35"/></literal></expr>)<pos:position pos:line="45" pos:column="36"/></condition><then pos:line="45" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="25">begin<pos:position pos:line="46" pos:column="30"/></name> <operator pos:line="46" pos:column="31">=<pos:position pos:line="46" pos:column="32"/></operator> <operator pos:line="46" pos:column="33">-<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="34">begin<pos:position pos:line="46" pos:column="39"/></name></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt></block></then>
		<else pos:line="47" pos:column="17">else <block pos:line="47" pos:column="22">{
			<expr_stmt><expr><name pos:line="48" pos:column="25">begin<pos:position pos:line="48" pos:column="30"/></name> <operator pos:line="48" pos:column="31">=<pos:position pos:line="48" pos:column="32"/></operator> <literal type="number" pos:line="48" pos:column="33">1<pos:position pos:line="48" pos:column="34"/></literal></expr>;<pos:position pos:line="48" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="49" pos:column="25">spec<pos:position pos:line="49" pos:column="29"/></name><operator pos:line="49" pos:column="29">++<pos:position pos:line="49" pos:column="31"/></operator></expr>;<pos:position pos:line="49" pos:column="32"/></expr_stmt>
		}<pos:position pos:line="50" pos:column="18"/></block></else></if>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>

	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name><name pos:line="53" pos:column="13">spec<pos:position pos:line="53" pos:column="17"/></name><index pos:line="53" pos:column="17">[<expr><literal type="number" pos:line="53" pos:column="18">0<pos:position pos:line="53" pos:column="19"/></literal></expr>]<pos:position pos:line="53" pos:column="20"/></index></name> <operator pos:line="53" pos:column="21">!=<pos:position pos:line="53" pos:column="23"/></operator> <literal type="char" pos:line="53" pos:column="24">'/'<pos:position pos:line="53" pos:column="27"/></literal></expr>)<pos:position pos:line="53" pos:column="28"/></condition><then pos:line="53" pos:column="28">
		<block type="pseudo"><return pos:line="54" pos:column="17">return <expr><name pos:line="54" pos:column="24">spec<pos:position pos:line="54" pos:column="28"/></name></expr>;<pos:position pos:line="54" pos:column="29"/></return></block></then></if>

	<comment type="block" pos:line="56" pos:column="9">/* it could be a regexp of form /.../ */</comment>
	<for pos:line="57" pos:column="9">for <control pos:line="57" pos:column="13">(<init><expr><name pos:line="57" pos:column="14">term<pos:position pos:line="57" pos:column="18"/></name> <operator pos:line="57" pos:column="19">=<pos:position pos:line="57" pos:column="20"/></operator> <operator pos:line="57" pos:column="21">(<pos:position pos:line="57" pos:column="22"/></operator><name pos:line="57" pos:column="22">char<pos:position pos:line="57" pos:column="26"/></name> <operator pos:line="57" pos:column="27">*<pos:position pos:line="57" pos:column="28"/></operator><operator pos:line="57" pos:column="28">)<pos:position pos:line="57" pos:column="29"/></operator> <name pos:line="57" pos:column="30">spec<pos:position pos:line="57" pos:column="34"/></name> <operator pos:line="57" pos:column="35">+<pos:position pos:line="57" pos:column="36"/></operator> <literal type="number" pos:line="57" pos:column="37">1<pos:position pos:line="57" pos:column="38"/></literal></expr>;<pos:position pos:line="57" pos:column="39"/></init> <condition><expr><operator pos:line="57" pos:column="40">*<pos:position pos:line="57" pos:column="41"/></operator><name pos:line="57" pos:column="41">term<pos:position pos:line="57" pos:column="45"/></name> <operator pos:line="57" pos:column="46">&amp;&amp;<pos:position pos:line="57" pos:column="56"/></operator> <operator pos:line="57" pos:column="49">*<pos:position pos:line="57" pos:column="50"/></operator><name pos:line="57" pos:column="50">term<pos:position pos:line="57" pos:column="54"/></name> <operator pos:line="57" pos:column="55">!=<pos:position pos:line="57" pos:column="57"/></operator> <literal type="char" pos:line="57" pos:column="58">'/'<pos:position pos:line="57" pos:column="61"/></literal></expr>;<pos:position pos:line="57" pos:column="62"/></condition> <incr><expr><name pos:line="57" pos:column="63">term<pos:position pos:line="57" pos:column="67"/></name><operator pos:line="57" pos:column="67">++<pos:position pos:line="57" pos:column="69"/></operator></expr></incr>)<pos:position pos:line="57" pos:column="70"/></control> <block pos:line="57" pos:column="71">{
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><operator pos:line="58" pos:column="21">*<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="22">term<pos:position pos:line="58" pos:column="26"/></name> <operator pos:line="58" pos:column="27">==<pos:position pos:line="58" pos:column="29"/></operator> <literal type="char" pos:line="58" pos:column="30">'\\'<pos:position pos:line="58" pos:column="34"/></literal></expr>)<pos:position pos:line="58" pos:column="35"/></condition><then pos:line="58" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="25">term<pos:position pos:line="59" pos:column="29"/></name><operator pos:line="59" pos:column="29">++<pos:position pos:line="59" pos:column="31"/></operator></expr>;<pos:position pos:line="59" pos:column="32"/></expr_stmt></block></then></if>
	}<pos:position pos:line="60" pos:column="10"/></block></for>
	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><operator pos:line="61" pos:column="13">*<pos:position pos:line="61" pos:column="14"/></operator><name pos:line="61" pos:column="14">term<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">!=<pos:position pos:line="61" pos:column="21"/></operator> <literal type="char" pos:line="61" pos:column="22">'/'<pos:position pos:line="61" pos:column="25"/></literal></expr>)<pos:position pos:line="61" pos:column="26"/></condition><then pos:line="61" pos:column="26">
		<block type="pseudo"><return pos:line="62" pos:column="17">return <expr><name pos:line="62" pos:column="24">spec<pos:position pos:line="62" pos:column="28"/></name></expr>;<pos:position pos:line="62" pos:column="29"/></return></block></then></if>

	<comment type="block" pos:line="64" pos:column="9">/* in the scan-only case we are not interested in the regex */</comment>
	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><operator pos:line="65" pos:column="13">!<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="14">ret<pos:position pos:line="65" pos:column="17"/></name></expr>)<pos:position pos:line="65" pos:column="18"/></condition><then pos:line="65" pos:column="18">
		<block type="pseudo"><return pos:line="66" pos:column="17">return <expr><name pos:line="66" pos:column="24">term<pos:position pos:line="66" pos:column="28"/></name><operator pos:line="66" pos:column="28">+<pos:position pos:line="66" pos:column="29"/></operator><literal type="number" pos:line="66" pos:column="29">1<pos:position pos:line="66" pos:column="30"/></literal></expr>;<pos:position pos:line="66" pos:column="31"/></return></block></then></if>

	<comment type="block" pos:line="68" pos:column="9">/* try [spec+1 .. term-1] as regexp */</comment>
	<expr_stmt><expr><operator pos:line="69" pos:column="9">*<pos:position pos:line="69" pos:column="10"/></operator><name pos:line="69" pos:column="10">term<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">=<pos:position pos:line="69" pos:column="16"/></operator> <literal type="number" pos:line="69" pos:column="17">0<pos:position pos:line="69" pos:column="18"/></literal></expr>;<pos:position pos:line="69" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="70" pos:column="9">begin<pos:position pos:line="70" pos:column="14"/></name><operator pos:line="70" pos:column="14">--<pos:position pos:line="70" pos:column="16"/></operator></expr>;<pos:position pos:line="70" pos:column="17"/></expr_stmt> <comment type="block" pos:line="70" pos:column="18">/* input is in human terms */</comment>
	<expr_stmt><expr><name pos:line="71" pos:column="9">line<pos:position pos:line="71" pos:column="13"/></name> <operator pos:line="71" pos:column="14">=<pos:position pos:line="71" pos:column="15"/></operator> <call><name pos:line="71" pos:column="16">nth_line<pos:position pos:line="71" pos:column="24"/></name><argument_list pos:line="71" pos:column="24">(<argument><expr><name pos:line="71" pos:column="25">data<pos:position pos:line="71" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="31">begin<pos:position pos:line="71" pos:column="36"/></name></expr></argument>)<pos:position pos:line="71" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="38"/></expr_stmt>

	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><operator pos:line="73" pos:column="13">!<pos:position pos:line="73" pos:column="14"/></operator><operator pos:line="73" pos:column="14">(<pos:position pos:line="73" pos:column="15"/></operator><name pos:line="73" pos:column="15">reg_error<pos:position pos:line="73" pos:column="24"/></name> <operator pos:line="73" pos:column="25">=<pos:position pos:line="73" pos:column="26"/></operator> <call><name pos:line="73" pos:column="27">regcomp<pos:position pos:line="73" pos:column="34"/></name><argument_list pos:line="73" pos:column="34">(<argument><expr><operator pos:line="73" pos:column="35">&amp;<pos:position pos:line="73" pos:column="40"/></operator><name pos:line="73" pos:column="36">regexp<pos:position pos:line="73" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="44">spec<pos:position pos:line="73" pos:column="48"/></name> <operator pos:line="73" pos:column="49">+<pos:position pos:line="73" pos:column="50"/></operator> <literal type="number" pos:line="73" pos:column="51">1<pos:position pos:line="73" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="54">REG_NEWLINE<pos:position pos:line="73" pos:column="65"/></name></expr></argument>)<pos:position pos:line="73" pos:column="66"/></argument_list></call><operator pos:line="73" pos:column="66">)<pos:position pos:line="73" pos:column="67"/></operator> <operator pos:line="73" pos:column="68">&amp;&amp;<pos:position pos:line="73" pos:column="78"/></operator>
	    <operator pos:line="74" pos:column="13">!<pos:position pos:line="74" pos:column="14"/></operator><operator pos:line="74" pos:column="14">(<pos:position pos:line="74" pos:column="15"/></operator><name pos:line="74" pos:column="15">reg_error<pos:position pos:line="74" pos:column="24"/></name> <operator pos:line="74" pos:column="25">=<pos:position pos:line="74" pos:column="26"/></operator> <call><name pos:line="74" pos:column="27">regexec<pos:position pos:line="74" pos:column="34"/></name><argument_list pos:line="74" pos:column="34">(<argument><expr><operator pos:line="74" pos:column="35">&amp;<pos:position pos:line="74" pos:column="40"/></operator><name pos:line="74" pos:column="36">regexp<pos:position pos:line="74" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="44">line<pos:position pos:line="74" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="50">1<pos:position pos:line="74" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="53">match<pos:position pos:line="74" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="60">0<pos:position pos:line="74" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="62"/></argument_list></call><operator pos:line="74" pos:column="62">)<pos:position pos:line="74" pos:column="63"/></operator></expr>)<pos:position pos:line="74" pos:column="64"/></condition><then pos:line="74" pos:column="64"> <block pos:line="74" pos:column="65">{
		<decl_stmt><decl><type><specifier pos:line="75" pos:column="17">const<pos:position pos:line="75" pos:column="22"/></specifier> <name pos:line="75" pos:column="23">char<pos:position pos:line="75" pos:column="27"/></name> <modifier pos:line="75" pos:column="28">*<pos:position pos:line="75" pos:column="29"/></modifier></type><name pos:line="75" pos:column="29">cp<pos:position pos:line="75" pos:column="31"/></name> <init pos:line="75" pos:column="32">= <expr><name pos:line="75" pos:column="34">line<pos:position pos:line="75" pos:column="38"/></name> <operator pos:line="75" pos:column="39">+<pos:position pos:line="75" pos:column="40"/></operator> <name><name pos:line="75" pos:column="41">match<pos:position pos:line="75" pos:column="46"/></name><index pos:line="75" pos:column="46">[<expr><literal type="number" pos:line="75" pos:column="47">0<pos:position pos:line="75" pos:column="48"/></literal></expr>]<pos:position pos:line="75" pos:column="49"/></index></name><operator pos:line="75" pos:column="49">.<pos:position pos:line="75" pos:column="50"/></operator><name pos:line="75" pos:column="50">rm_so<pos:position pos:line="75" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="75" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="76" pos:column="17">const<pos:position pos:line="76" pos:column="22"/></specifier> <name pos:line="76" pos:column="23">char<pos:position pos:line="76" pos:column="27"/></name> <modifier pos:line="76" pos:column="28">*<pos:position pos:line="76" pos:column="29"/></modifier></type><name pos:line="76" pos:column="29">nline<pos:position pos:line="76" pos:column="34"/></name></decl>;<pos:position pos:line="76" pos:column="35"/></decl_stmt>

		<while pos:line="78" pos:column="17">while <condition pos:line="78" pos:column="23">(<expr><name pos:line="78" pos:column="24">begin<pos:position pos:line="78" pos:column="29"/></name><operator pos:line="78" pos:column="29">++<pos:position pos:line="78" pos:column="31"/></operator> <operator pos:line="78" pos:column="32">&lt;<pos:position pos:line="78" pos:column="36"/></operator> <name pos:line="78" pos:column="34">lines<pos:position pos:line="78" pos:column="39"/></name></expr>)<pos:position pos:line="78" pos:column="40"/></condition> <block pos:line="78" pos:column="41">{
			<expr_stmt><expr><name pos:line="79" pos:column="25">nline<pos:position pos:line="79" pos:column="30"/></name> <operator pos:line="79" pos:column="31">=<pos:position pos:line="79" pos:column="32"/></operator> <call><name pos:line="79" pos:column="33">nth_line<pos:position pos:line="79" pos:column="41"/></name><argument_list pos:line="79" pos:column="41">(<argument><expr><name pos:line="79" pos:column="42">data<pos:position pos:line="79" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="48">begin<pos:position pos:line="79" pos:column="53"/></name></expr></argument>)<pos:position pos:line="79" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="55"/></expr_stmt>
			<if pos:line="80" pos:column="25">if <condition pos:line="80" pos:column="28">(<expr><name pos:line="80" pos:column="29">line<pos:position pos:line="80" pos:column="33"/></name> <operator pos:line="80" pos:column="34">&lt;=<pos:position pos:line="80" pos:column="39"/></operator> <name pos:line="80" pos:column="37">cp<pos:position pos:line="80" pos:column="39"/></name> <operator pos:line="80" pos:column="40">&amp;&amp;<pos:position pos:line="80" pos:column="50"/></operator> <name pos:line="80" pos:column="43">cp<pos:position pos:line="80" pos:column="45"/></name> <operator pos:line="80" pos:column="46">&lt;<pos:position pos:line="80" pos:column="50"/></operator> <name pos:line="80" pos:column="48">nline<pos:position pos:line="80" pos:column="53"/></name></expr>)<pos:position pos:line="80" pos:column="54"/></condition><then pos:line="80" pos:column="54">
				<block type="pseudo"><break pos:line="81" pos:column="33">break;<pos:position pos:line="81" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="82" pos:column="25">line<pos:position pos:line="82" pos:column="29"/></name> <operator pos:line="82" pos:column="30">=<pos:position pos:line="82" pos:column="31"/></operator> <name pos:line="82" pos:column="32">nline<pos:position pos:line="82" pos:column="37"/></name></expr>;<pos:position pos:line="82" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="83" pos:column="18"/></block></while>
		<expr_stmt><expr><operator pos:line="84" pos:column="17">*<pos:position pos:line="84" pos:column="18"/></operator><name pos:line="84" pos:column="18">ret<pos:position pos:line="84" pos:column="21"/></name> <operator pos:line="84" pos:column="22">=<pos:position pos:line="84" pos:column="23"/></operator> <name pos:line="84" pos:column="24">begin<pos:position pos:line="84" pos:column="29"/></name></expr>;<pos:position pos:line="84" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">regfree<pos:position pos:line="85" pos:column="24"/></name><argument_list pos:line="85" pos:column="24">(<argument><expr><operator pos:line="85" pos:column="25">&amp;<pos:position pos:line="85" pos:column="30"/></operator><name pos:line="85" pos:column="26">regexp<pos:position pos:line="85" pos:column="32"/></name></expr></argument>)<pos:position pos:line="85" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="86" pos:column="17">*<pos:position pos:line="86" pos:column="18"/></operator><name pos:line="86" pos:column="18">term<pos:position pos:line="86" pos:column="22"/></name><operator pos:line="86" pos:column="22">++<pos:position pos:line="86" pos:column="24"/></operator> <operator pos:line="86" pos:column="25">=<pos:position pos:line="86" pos:column="26"/></operator> <literal type="char" pos:line="86" pos:column="27">'/'<pos:position pos:line="86" pos:column="30"/></literal></expr>;<pos:position pos:line="86" pos:column="31"/></expr_stmt>
		<return pos:line="87" pos:column="17">return <expr><name pos:line="87" pos:column="24">term<pos:position pos:line="87" pos:column="28"/></name></expr>;<pos:position pos:line="87" pos:column="29"/></return>
	}<pos:position pos:line="88" pos:column="10"/></block></then>
	<else pos:line="89" pos:column="9">else <block pos:line="89" pos:column="14">{
		<decl_stmt><decl><type><name pos:line="90" pos:column="17">char<pos:position pos:line="90" pos:column="21"/></name></type> <name><name pos:line="90" pos:column="22">errbuf<pos:position pos:line="90" pos:column="28"/></name><index pos:line="90" pos:column="28">[<expr><literal type="number" pos:line="90" pos:column="29">1024<pos:position pos:line="90" pos:column="33"/></literal></expr>]<pos:position pos:line="90" pos:column="34"/></index></name></decl>;<pos:position pos:line="90" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="91" pos:column="17">regerror<pos:position pos:line="91" pos:column="25"/></name><argument_list pos:line="91" pos:column="25">(<argument><expr><name pos:line="91" pos:column="26">reg_error<pos:position pos:line="91" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="91" pos:column="37">&amp;<pos:position pos:line="91" pos:column="42"/></operator><name pos:line="91" pos:column="38">regexp<pos:position pos:line="91" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="46">errbuf<pos:position pos:line="91" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="91" pos:column="54">1024<pos:position pos:line="91" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="92" pos:column="17">die<pos:position pos:line="92" pos:column="20"/></name><argument_list pos:line="92" pos:column="20">(<argument><expr><literal type="string" pos:line="92" pos:column="21">"-L parameter '%s' starting at line %ld: %s"<pos:position pos:line="92" pos:column="65"/></literal></expr></argument>,
		    <argument><expr><name pos:line="93" pos:column="21">spec<pos:position pos:line="93" pos:column="25"/></name> <operator pos:line="93" pos:column="26">+<pos:position pos:line="93" pos:column="27"/></operator> <literal type="number" pos:line="93" pos:column="28">1<pos:position pos:line="93" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="31">begin<pos:position pos:line="93" pos:column="36"/></name> <operator pos:line="93" pos:column="37">+<pos:position pos:line="93" pos:column="38"/></operator> <literal type="number" pos:line="93" pos:column="39">1<pos:position pos:line="93" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="42">errbuf<pos:position pos:line="93" pos:column="48"/></name></expr></argument>)<pos:position pos:line="93" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="94" pos:column="10"/></block></else></if>
}<pos:position pos:line="95" pos:column="2"/></block></function></unit>
