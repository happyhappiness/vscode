<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5843_git-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">check_dst_limits_calc_pos_1<pos:position pos:line="3" pos:column="28"/></name> <parameter_list pos:line="3" pos:column="29">(<parameter><decl><type><specifier pos:line="3" pos:column="30">const<pos:position pos:line="3" pos:column="35"/></specifier> <name pos:line="3" pos:column="36">re_match_context_t<pos:position pos:line="3" pos:column="54"/></name> <modifier pos:line="3" pos:column="55">*<pos:position pos:line="3" pos:column="56"/></modifier></type><name pos:line="3" pos:column="56">mctx<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="62">int<pos:position pos:line="3" pos:column="65"/></name></type> <name pos:line="3" pos:column="66">boundaries<pos:position pos:line="3" pos:column="76"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="4" pos:column="30">int<pos:position pos:line="4" pos:column="33"/></name></type> <name pos:line="4" pos:column="34">subexp_idx<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="46">int<pos:position pos:line="4" pos:column="49"/></name></type> <name pos:line="4" pos:column="50">from_node<pos:position pos:line="4" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="61">int<pos:position pos:line="4" pos:column="64"/></name></type> <name pos:line="4" pos:column="65">bkref_idx<pos:position pos:line="4" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="75"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">re_dfa_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier><specifier pos:line="6" pos:column="19">const<pos:position pos:line="6" pos:column="24"/></specifier></type> <name pos:line="6" pos:column="25">dfa<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name><name pos:line="6" pos:column="31">mctx<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">dfa<pos:position pos:line="6" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">re_node_set<pos:position pos:line="7" pos:column="20"/></name> <modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier></type><name pos:line="7" pos:column="22">eclosures<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">= <expr><name><name pos:line="7" pos:column="34">dfa<pos:position pos:line="7" pos:column="37"/></name><operator pos:line="7" pos:column="37">-&gt;<pos:position pos:line="7" pos:column="42"/></operator><name pos:line="7" pos:column="39">eclosures<pos:position pos:line="7" pos:column="48"/></name></name> <operator pos:line="7" pos:column="49">+<pos:position pos:line="7" pos:column="50"/></operator> <name pos:line="7" pos:column="51">from_node<pos:position pos:line="7" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="61"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">node_idx<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* Else, we are on the boundary: examine the nodes on the epsilon
     closure.  */</comment>
  <for pos:line="12" pos:column="3">for <control pos:line="12" pos:column="7">(<init><expr><name pos:line="12" pos:column="8">node_idx<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <literal type="number" pos:line="12" pos:column="19">0<pos:position pos:line="12" pos:column="20"/></literal></expr>;<pos:position pos:line="12" pos:column="21"/></init> <condition><expr><name pos:line="12" pos:column="22">node_idx<pos:position pos:line="12" pos:column="30"/></name> <operator pos:line="12" pos:column="31">&lt;<pos:position pos:line="12" pos:column="35"/></operator> <name><name pos:line="12" pos:column="33">eclosures<pos:position pos:line="12" pos:column="42"/></name><operator pos:line="12" pos:column="42">-&gt;<pos:position pos:line="12" pos:column="47"/></operator><name pos:line="12" pos:column="44">nelem<pos:position pos:line="12" pos:column="49"/></name></name></expr>;<pos:position pos:line="12" pos:column="50"/></condition> <incr><expr><operator pos:line="12" pos:column="51">++<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="53">node_idx<pos:position pos:line="12" pos:column="61"/></name></expr></incr>)<pos:position pos:line="12" pos:column="62"/></control>
    <block pos:line="13" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="14" pos:column="7">int<pos:position pos:line="14" pos:column="10"/></name></type> <name pos:line="14" pos:column="11">node<pos:position pos:line="14" pos:column="15"/></name> <init pos:line="14" pos:column="16">= <expr><name><name pos:line="14" pos:column="18">eclosures<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">-&gt;<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="29">elems<pos:position pos:line="14" pos:column="34"/></name><index pos:line="14" pos:column="34">[<expr><name pos:line="14" pos:column="35">node_idx<pos:position pos:line="14" pos:column="43"/></name></expr>]<pos:position pos:line="14" pos:column="44"/></index></name></expr></init></decl>;<pos:position pos:line="14" pos:column="45"/></decl_stmt>
      <switch pos:line="15" pos:column="7">switch <condition pos:line="15" pos:column="14">(<expr><name><name pos:line="15" pos:column="15">dfa<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">-&gt;<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="20">nodes<pos:position pos:line="15" pos:column="25"/></name><index pos:line="15" pos:column="25">[<expr><name pos:line="15" pos:column="26">node<pos:position pos:line="15" pos:column="30"/></name></expr>]<pos:position pos:line="15" pos:column="31"/></index></name><operator pos:line="15" pos:column="31">.<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="32">type<pos:position pos:line="15" pos:column="36"/></name></expr>)<pos:position pos:line="15" pos:column="37"/></condition>
	<block pos:line="16" pos:column="9">{
	<case pos:line="17" pos:column="9">case <expr><name pos:line="17" pos:column="14">OP_BACK_REF<pos:position pos:line="17" pos:column="25"/></name></expr>:<pos:position pos:line="17" pos:column="26"/></case>
	  <if pos:line="18" pos:column="11">if <condition pos:line="18" pos:column="14">(<expr><name pos:line="18" pos:column="15">bkref_idx<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">!=<pos:position pos:line="18" pos:column="27"/></operator> <operator pos:line="18" pos:column="28">-<pos:position pos:line="18" pos:column="29"/></operator><literal type="number" pos:line="18" pos:column="29">1<pos:position pos:line="18" pos:column="30"/></literal></expr>)<pos:position pos:line="18" pos:column="31"/></condition><then pos:line="18" pos:column="31">
	    <block pos:line="19" pos:column="13">{
	      <decl_stmt><decl><type><name><name pos:line="20" pos:column="15">struct<pos:position pos:line="20" pos:column="21"/></name> <name pos:line="20" pos:column="22">re_backref_cache_entry<pos:position pos:line="20" pos:column="44"/></name></name> <modifier pos:line="20" pos:column="45">*<pos:position pos:line="20" pos:column="46"/></modifier></type><name pos:line="20" pos:column="46">ent<pos:position pos:line="20" pos:column="49"/></name> <init pos:line="20" pos:column="50">= <expr><name><name pos:line="20" pos:column="52">mctx<pos:position pos:line="20" pos:column="56"/></name><operator pos:line="20" pos:column="56">-&gt;<pos:position pos:line="20" pos:column="61"/></operator><name pos:line="20" pos:column="58">bkref_ents<pos:position pos:line="20" pos:column="68"/></name></name> <operator pos:line="20" pos:column="69">+<pos:position pos:line="20" pos:column="70"/></operator> <name pos:line="20" pos:column="71">bkref_idx<pos:position pos:line="20" pos:column="80"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="81"/></decl_stmt>
	      <do pos:line="21" pos:column="15">do
		<block pos:line="22" pos:column="17">{
		  <decl_stmt><decl><type><name pos:line="23" pos:column="19">int<pos:position pos:line="23" pos:column="22"/></name></type> <name pos:line="23" pos:column="23">dst<pos:position pos:line="23" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="23" pos:column="28">cpos<pos:position pos:line="23" pos:column="32"/></name></decl>;<pos:position pos:line="23" pos:column="33"/></decl_stmt>

		  <if pos:line="25" pos:column="19">if <condition pos:line="25" pos:column="22">(<expr><name><name pos:line="25" pos:column="23">ent<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">-&gt;<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="28">node<pos:position pos:line="25" pos:column="32"/></name></name> <operator pos:line="25" pos:column="33">!=<pos:position pos:line="25" pos:column="35"/></operator> <name pos:line="25" pos:column="36">node<pos:position pos:line="25" pos:column="40"/></name></expr>)<pos:position pos:line="25" pos:column="41"/></condition><then pos:line="25" pos:column="41">
		    <block type="pseudo"><continue pos:line="26" pos:column="21">continue;<pos:position pos:line="26" pos:column="30"/></continue></block></then></if>

		  <if pos:line="28" pos:column="19">if <condition pos:line="28" pos:column="22">(<expr><name pos:line="28" pos:column="23">subexp_idx<pos:position pos:line="28" pos:column="33"/></name> <operator pos:line="28" pos:column="34">&lt;<pos:position pos:line="28" pos:column="38"/></operator> <name pos:line="28" pos:column="36">BITSET_WORD_BITS<pos:position pos:line="28" pos:column="52"/></name>
		      <operator pos:line="29" pos:column="23">&amp;&amp;<pos:position pos:line="29" pos:column="33"/></operator> <operator pos:line="29" pos:column="26">!<pos:position pos:line="29" pos:column="27"/></operator><operator pos:line="29" pos:column="27">(<pos:position pos:line="29" pos:column="28"/></operator><name><name pos:line="29" pos:column="28">ent<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">-&gt;<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="33">eps_reachable_subexps_map<pos:position pos:line="29" pos:column="58"/></name></name>
			   <operator pos:line="30" pos:column="28">&amp;<pos:position pos:line="30" pos:column="33"/></operator> <operator pos:line="30" pos:column="30">(<pos:position pos:line="30" pos:column="31"/></operator><operator pos:line="30" pos:column="31">(<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="32">bitset_word_t<pos:position pos:line="30" pos:column="45"/></name><operator pos:line="30" pos:column="45">)<pos:position pos:line="30" pos:column="46"/></operator> <literal type="number" pos:line="30" pos:column="47">1<pos:position pos:line="30" pos:column="48"/></literal> <operator pos:line="30" pos:column="49">&lt;&lt;<pos:position pos:line="30" pos:column="57"/></operator> <name pos:line="30" pos:column="52">subexp_idx<pos:position pos:line="30" pos:column="62"/></name><operator pos:line="30" pos:column="62">)<pos:position pos:line="30" pos:column="63"/></operator><operator pos:line="30" pos:column="63">)<pos:position pos:line="30" pos:column="64"/></operator></expr>)<pos:position pos:line="30" pos:column="65"/></condition><then pos:line="30" pos:column="65">
		    <block type="pseudo"><continue pos:line="31" pos:column="21">continue;<pos:position pos:line="31" pos:column="30"/></continue></block></then></if>

		  <comment type="block" pos:line="33" pos:column="19">/* Recurse trying to reach the OP_OPEN_SUBEXP and
		     OP_CLOSE_SUBEXP cases below.  But, if the
		     destination node is the same node as the source
		     node, don't recurse because it would cause an
		     infinite loop: a regex that exhibits this behavior
		     is ()\1*\1*  */</comment>
		  <expr_stmt><expr><name pos:line="39" pos:column="19">dst<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <name><name pos:line="39" pos:column="25">dfa<pos:position pos:line="39" pos:column="28"/></name><operator pos:line="39" pos:column="28">-&gt;<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="30">edests<pos:position pos:line="39" pos:column="36"/></name><index pos:line="39" pos:column="36">[<expr><name pos:line="39" pos:column="37">node<pos:position pos:line="39" pos:column="41"/></name></expr>]<pos:position pos:line="39" pos:column="42"/></index></name><operator pos:line="39" pos:column="42">.<pos:position pos:line="39" pos:column="43"/></operator><name><name pos:line="39" pos:column="43">elems<pos:position pos:line="39" pos:column="48"/></name><index pos:line="39" pos:column="48">[<expr><literal type="number" pos:line="39" pos:column="49">0<pos:position pos:line="39" pos:column="50"/></literal></expr>]<pos:position pos:line="39" pos:column="51"/></index></name></expr>;<pos:position pos:line="39" pos:column="52"/></expr_stmt>
		  <if pos:line="40" pos:column="19">if <condition pos:line="40" pos:column="22">(<expr><name pos:line="40" pos:column="23">dst<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">==<pos:position pos:line="40" pos:column="29"/></operator> <name pos:line="40" pos:column="30">from_node<pos:position pos:line="40" pos:column="39"/></name></expr>)<pos:position pos:line="40" pos:column="40"/></condition><then pos:line="40" pos:column="40">
		    <block pos:line="41" pos:column="21">{
		      <if pos:line="42" pos:column="23">if <condition pos:line="42" pos:column="26">(<expr><name pos:line="42" pos:column="27">boundaries<pos:position pos:line="42" pos:column="37"/></name> <operator pos:line="42" pos:column="38">&amp;<pos:position pos:line="42" pos:column="43"/></operator> <literal type="number" pos:line="42" pos:column="40">1<pos:position pos:line="42" pos:column="41"/></literal></expr>)<pos:position pos:line="42" pos:column="42"/></condition><then pos:line="42" pos:column="42">
			<block type="pseudo"><return pos:line="43" pos:column="25">return <expr><operator pos:line="43" pos:column="32">-<pos:position pos:line="43" pos:column="33"/></operator><literal type="number" pos:line="43" pos:column="33">1<pos:position pos:line="43" pos:column="34"/></literal></expr>;<pos:position pos:line="43" pos:column="35"/></return></block></then>
		      <else pos:line="44" pos:column="23">else <comment type="block" pos:line="44" pos:column="28">/* if (boundaries &amp; 2) */</comment>
			<block type="pseudo"><return pos:line="45" pos:column="25">return <expr><literal type="number" pos:line="45" pos:column="32">0<pos:position pos:line="45" pos:column="33"/></literal></expr>;<pos:position pos:line="45" pos:column="34"/></return></block></else></if>
		    }<pos:position pos:line="46" pos:column="22"/></block></then></if>

		  <expr_stmt><expr><name pos:line="48" pos:column="19">cpos<pos:position pos:line="48" pos:column="23"/></name> <operator pos:line="48" pos:column="24">=<pos:position pos:line="48" pos:column="25"/></operator>
		    <call><name pos:line="49" pos:column="21">check_dst_limits_calc_pos_1<pos:position pos:line="49" pos:column="48"/></name> <argument_list pos:line="49" pos:column="49">(<argument><expr><name pos:line="49" pos:column="50">mctx<pos:position pos:line="49" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="56">boundaries<pos:position pos:line="49" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="68">subexp_idx<pos:position pos:line="49" pos:column="78"/></name></expr></argument>,
						 <argument><expr><name pos:line="50" pos:column="50">dst<pos:position pos:line="50" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="55">bkref_idx<pos:position pos:line="50" pos:column="64"/></name></expr></argument>)<pos:position pos:line="50" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="66"/></expr_stmt>
		  <if pos:line="51" pos:column="19">if <condition pos:line="51" pos:column="22">(<expr><name pos:line="51" pos:column="23">cpos<pos:position pos:line="51" pos:column="27"/></name> <operator pos:line="51" pos:column="28">==<pos:position pos:line="51" pos:column="30"/></operator> <operator pos:line="51" pos:column="31">-<pos:position pos:line="51" pos:column="32"/></operator><literal type="number" pos:line="51" pos:column="32">1<pos:position pos:line="51" pos:column="33"/></literal></expr> <comment type="block" pos:line="51" pos:column="34">/* &amp;&amp; (boundaries &amp; 1) */</comment>)<pos:position pos:line="51" pos:column="60"/></condition><then pos:line="51" pos:column="60">
		    <block type="pseudo"><return pos:line="52" pos:column="21">return <expr><operator pos:line="52" pos:column="28">-<pos:position pos:line="52" pos:column="29"/></operator><literal type="number" pos:line="52" pos:column="29">1<pos:position pos:line="52" pos:column="30"/></literal></expr>;<pos:position pos:line="52" pos:column="31"/></return></block></then></if>
		  <if pos:line="53" pos:column="19">if <condition pos:line="53" pos:column="22">(<expr><name pos:line="53" pos:column="23">cpos<pos:position pos:line="53" pos:column="27"/></name> <operator pos:line="53" pos:column="28">==<pos:position pos:line="53" pos:column="30"/></operator> <literal type="number" pos:line="53" pos:column="31">0<pos:position pos:line="53" pos:column="32"/></literal> <operator pos:line="53" pos:column="33">&amp;&amp;<pos:position pos:line="53" pos:column="43"/></operator> <operator pos:line="53" pos:column="36">(<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="37">boundaries<pos:position pos:line="53" pos:column="47"/></name> <operator pos:line="53" pos:column="48">&amp;<pos:position pos:line="53" pos:column="53"/></operator> <literal type="number" pos:line="53" pos:column="50">2<pos:position pos:line="53" pos:column="51"/></literal><operator pos:line="53" pos:column="51">)<pos:position pos:line="53" pos:column="52"/></operator></expr>)<pos:position pos:line="53" pos:column="53"/></condition><then pos:line="53" pos:column="53">
		    <block type="pseudo"><return pos:line="54" pos:column="21">return <expr><literal type="number" pos:line="54" pos:column="28">0<pos:position pos:line="54" pos:column="29"/></literal></expr>;<pos:position pos:line="54" pos:column="30"/></return></block></then></if>

		  <if pos:line="56" pos:column="19">if <condition pos:line="56" pos:column="22">(<expr><name pos:line="56" pos:column="23">subexp_idx<pos:position pos:line="56" pos:column="33"/></name> <operator pos:line="56" pos:column="34">&lt;<pos:position pos:line="56" pos:column="38"/></operator> <name pos:line="56" pos:column="36">BITSET_WORD_BITS<pos:position pos:line="56" pos:column="52"/></name></expr>)<pos:position pos:line="56" pos:column="53"/></condition><then pos:line="56" pos:column="53">
		    <block type="pseudo"><expr_stmt><expr><name><name pos:line="57" pos:column="21">ent<pos:position pos:line="57" pos:column="24"/></name><operator pos:line="57" pos:column="24">-&gt;<pos:position pos:line="57" pos:column="29"/></operator><name pos:line="57" pos:column="26">eps_reachable_subexps_map<pos:position pos:line="57" pos:column="51"/></name></name>
		      <operator pos:line="58" pos:column="23">&amp;=<pos:position pos:line="58" pos:column="29"/></operator> <operator pos:line="58" pos:column="26">~<pos:position pos:line="58" pos:column="27"/></operator><operator pos:line="58" pos:column="27">(<pos:position pos:line="58" pos:column="28"/></operator><operator pos:line="58" pos:column="28">(<pos:position pos:line="58" pos:column="29"/></operator><name pos:line="58" pos:column="29">bitset_word_t<pos:position pos:line="58" pos:column="42"/></name><operator pos:line="58" pos:column="42">)<pos:position pos:line="58" pos:column="43"/></operator> <literal type="number" pos:line="58" pos:column="44">1<pos:position pos:line="58" pos:column="45"/></literal> <operator pos:line="58" pos:column="46">&lt;&lt;<pos:position pos:line="58" pos:column="54"/></operator> <name pos:line="58" pos:column="49">subexp_idx<pos:position pos:line="58" pos:column="59"/></name><operator pos:line="58" pos:column="59">)<pos:position pos:line="58" pos:column="60"/></operator></expr>;<pos:position pos:line="58" pos:column="61"/></expr_stmt></block></then></if>
		}<pos:position pos:line="59" pos:column="18"/></block>
	      while <condition pos:line="60" pos:column="21">(<expr><name pos:line="60" pos:column="22">ent<pos:position pos:line="60" pos:column="25"/></name><operator pos:line="60" pos:column="25">++<pos:position pos:line="60" pos:column="27"/></operator><operator pos:line="60" pos:column="27">-&gt;<pos:position pos:line="60" pos:column="32"/></operator><name pos:line="60" pos:column="29">more<pos:position pos:line="60" pos:column="33"/></name></expr>)<pos:position pos:line="60" pos:column="34"/></condition>;<pos:position pos:line="60" pos:column="35"/></do>
	    }<pos:position pos:line="61" pos:column="14"/></block></then></if>
	  <break pos:line="62" pos:column="11">break;<pos:position pos:line="62" pos:column="17"/></break>

	<case pos:line="64" pos:column="9">case <expr><name pos:line="64" pos:column="14">OP_OPEN_SUBEXP<pos:position pos:line="64" pos:column="28"/></name></expr>:<pos:position pos:line="64" pos:column="29"/></case>
	  <if pos:line="65" pos:column="11">if <condition pos:line="65" pos:column="14">(<expr><operator pos:line="65" pos:column="15">(<pos:position pos:line="65" pos:column="16"/></operator><name pos:line="65" pos:column="16">boundaries<pos:position pos:line="65" pos:column="26"/></name> <operator pos:line="65" pos:column="27">&amp;<pos:position pos:line="65" pos:column="32"/></operator> <literal type="number" pos:line="65" pos:column="29">1<pos:position pos:line="65" pos:column="30"/></literal><operator pos:line="65" pos:column="30">)<pos:position pos:line="65" pos:column="31"/></operator> <operator pos:line="65" pos:column="32">&amp;&amp;<pos:position pos:line="65" pos:column="42"/></operator> <name pos:line="65" pos:column="35">subexp_idx<pos:position pos:line="65" pos:column="45"/></name> <operator pos:line="65" pos:column="46">==<pos:position pos:line="65" pos:column="48"/></operator> <name><name pos:line="65" pos:column="49">dfa<pos:position pos:line="65" pos:column="52"/></name><operator pos:line="65" pos:column="52">-&gt;<pos:position pos:line="65" pos:column="57"/></operator><name pos:line="65" pos:column="54">nodes<pos:position pos:line="65" pos:column="59"/></name><index pos:line="65" pos:column="59">[<expr><name pos:line="65" pos:column="60">node<pos:position pos:line="65" pos:column="64"/></name></expr>]<pos:position pos:line="65" pos:column="65"/></index></name><operator pos:line="65" pos:column="65">.<pos:position pos:line="65" pos:column="66"/></operator><name><name pos:line="65" pos:column="66">opr<pos:position pos:line="65" pos:column="69"/></name><operator pos:line="65" pos:column="69">.<pos:position pos:line="65" pos:column="70"/></operator><name pos:line="65" pos:column="70">idx<pos:position pos:line="65" pos:column="73"/></name></name></expr>)<pos:position pos:line="65" pos:column="74"/></condition><then pos:line="65" pos:column="74">
	    <block type="pseudo"><return pos:line="66" pos:column="13">return <expr><operator pos:line="66" pos:column="20">-<pos:position pos:line="66" pos:column="21"/></operator><literal type="number" pos:line="66" pos:column="21">1<pos:position pos:line="66" pos:column="22"/></literal></expr>;<pos:position pos:line="66" pos:column="23"/></return></block></then></if>
	  <break pos:line="67" pos:column="11">break;<pos:position pos:line="67" pos:column="17"/></break>

	<case pos:line="69" pos:column="9">case <expr><name pos:line="69" pos:column="14">OP_CLOSE_SUBEXP<pos:position pos:line="69" pos:column="29"/></name></expr>:<pos:position pos:line="69" pos:column="30"/></case>
	  <if pos:line="70" pos:column="11">if <condition pos:line="70" pos:column="14">(<expr><operator pos:line="70" pos:column="15">(<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="16">boundaries<pos:position pos:line="70" pos:column="26"/></name> <operator pos:line="70" pos:column="27">&amp;<pos:position pos:line="70" pos:column="32"/></operator> <literal type="number" pos:line="70" pos:column="29">2<pos:position pos:line="70" pos:column="30"/></literal><operator pos:line="70" pos:column="30">)<pos:position pos:line="70" pos:column="31"/></operator> <operator pos:line="70" pos:column="32">&amp;&amp;<pos:position pos:line="70" pos:column="42"/></operator> <name pos:line="70" pos:column="35">subexp_idx<pos:position pos:line="70" pos:column="45"/></name> <operator pos:line="70" pos:column="46">==<pos:position pos:line="70" pos:column="48"/></operator> <name><name pos:line="70" pos:column="49">dfa<pos:position pos:line="70" pos:column="52"/></name><operator pos:line="70" pos:column="52">-&gt;<pos:position pos:line="70" pos:column="57"/></operator><name pos:line="70" pos:column="54">nodes<pos:position pos:line="70" pos:column="59"/></name><index pos:line="70" pos:column="59">[<expr><name pos:line="70" pos:column="60">node<pos:position pos:line="70" pos:column="64"/></name></expr>]<pos:position pos:line="70" pos:column="65"/></index></name><operator pos:line="70" pos:column="65">.<pos:position pos:line="70" pos:column="66"/></operator><name><name pos:line="70" pos:column="66">opr<pos:position pos:line="70" pos:column="69"/></name><operator pos:line="70" pos:column="69">.<pos:position pos:line="70" pos:column="70"/></operator><name pos:line="70" pos:column="70">idx<pos:position pos:line="70" pos:column="73"/></name></name></expr>)<pos:position pos:line="70" pos:column="74"/></condition><then pos:line="70" pos:column="74">
	    <block type="pseudo"><return pos:line="71" pos:column="13">return <expr><literal type="number" pos:line="71" pos:column="20">0<pos:position pos:line="71" pos:column="21"/></literal></expr>;<pos:position pos:line="71" pos:column="22"/></return></block></then></if>
	  <break pos:line="72" pos:column="11">break;<pos:position pos:line="72" pos:column="17"/></break>

	<default pos:line="74" pos:column="9">default:<pos:position pos:line="74" pos:column="17"/></default>
	    <break pos:line="75" pos:column="13">break;<pos:position pos:line="75" pos:column="19"/></break>
	}<pos:position pos:line="76" pos:column="10"/></block></switch>
    }<pos:position pos:line="77" pos:column="6"/></block></for>

  <return pos:line="79" pos:column="3">return <expr><ternary><condition><expr><operator pos:line="79" pos:column="10">(<pos:position pos:line="79" pos:column="11"/></operator><name pos:line="79" pos:column="11">boundaries<pos:position pos:line="79" pos:column="21"/></name> <operator pos:line="79" pos:column="22">&amp;<pos:position pos:line="79" pos:column="27"/></operator> <literal type="number" pos:line="79" pos:column="24">2<pos:position pos:line="79" pos:column="25"/></literal><operator pos:line="79" pos:column="25">)<pos:position pos:line="79" pos:column="26"/></operator></expr> ?<pos:position pos:line="79" pos:column="28"/></condition><then pos:line="79" pos:column="28"> <expr><literal type="number" pos:line="79" pos:column="29">1<pos:position pos:line="79" pos:column="30"/></literal></expr> <pos:position pos:line="79" pos:column="31"/></then><else pos:line="79" pos:column="31">: <expr><literal type="number" pos:line="79" pos:column="33">0<pos:position pos:line="79" pos:column="34"/></literal></expr></else></ternary></expr>;<pos:position pos:line="79" pos:column="35"/></return>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
