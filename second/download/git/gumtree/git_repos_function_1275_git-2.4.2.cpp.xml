<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1275_git-2.4.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">object_entry<pos:position pos:line="1" pos:column="27"/></name></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">dereference<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">object_entry<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">oe<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
					<parameter><decl><type><name pos:line="2" pos:column="41">unsigned<pos:position pos:line="2" pos:column="49"/></name> <name pos:line="2" pos:column="50">char<pos:position pos:line="2" pos:column="54"/></name></type> <name><name pos:line="2" pos:column="55">sha1<pos:position pos:line="2" pos:column="59"/></name><index pos:line="2" pos:column="59">[<expr><literal type="number" pos:line="2" pos:column="60">20<pos:position pos:line="2" pos:column="62"/></literal></expr>]<pos:position pos:line="2" pos:column="63"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">long<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">size<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">buf<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">NULL<pos:position pos:line="5" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">oe<pos:position pos:line="6" pos:column="16"/></name></expr>)<pos:position pos:line="6" pos:column="17"/></condition><then pos:line="6" pos:column="17"> <block pos:line="6" pos:column="18">{
		<decl_stmt><decl><type><name><name pos:line="7" pos:column="17">enum<pos:position pos:line="7" pos:column="21"/></name> <name pos:line="7" pos:column="22">object_type<pos:position pos:line="7" pos:column="33"/></name></name></type> <name pos:line="7" pos:column="34">type<pos:position pos:line="7" pos:column="38"/></name> <init pos:line="7" pos:column="39">= <expr><call><name pos:line="7" pos:column="41">sha1_object_info<pos:position pos:line="7" pos:column="57"/></name><argument_list pos:line="7" pos:column="57">(<argument><expr><name pos:line="7" pos:column="58">sha1<pos:position pos:line="7" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="64">NULL<pos:position pos:line="7" pos:column="68"/></name></expr></argument>)<pos:position pos:line="7" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="70"/></decl_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">type<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">&lt;<pos:position pos:line="8" pos:column="30"/></operator> <literal type="number" pos:line="8" pos:column="28">0<pos:position pos:line="8" pos:column="29"/></literal></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="25">die<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><literal type="string" pos:line="9" pos:column="29">"object not found: %s"<pos:position pos:line="9" pos:column="51"/></literal></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="53">sha1_to_hex<pos:position pos:line="9" pos:column="64"/></name><argument_list pos:line="9" pos:column="64">(<argument><expr><name pos:line="9" pos:column="65">sha1<pos:position pos:line="9" pos:column="69"/></name></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="72"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="10" pos:column="17">/* cache it! */</comment>
		<expr_stmt><expr><name pos:line="11" pos:column="17">oe<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">=<pos:position pos:line="11" pos:column="21"/></operator> <call><name pos:line="11" pos:column="22">insert_object<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><name pos:line="11" pos:column="36">sha1<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="12" pos:column="17">oe<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">-&gt;<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="21">type<pos:position pos:line="12" pos:column="25"/></name></name> <operator pos:line="12" pos:column="26">=<pos:position pos:line="12" pos:column="27"/></operator> <name pos:line="12" pos:column="28">type<pos:position pos:line="12" pos:column="32"/></name></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="13" pos:column="17">oe<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">-&gt;<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="21">pack_id<pos:position pos:line="13" pos:column="28"/></name></name> <operator pos:line="13" pos:column="29">=<pos:position pos:line="13" pos:column="30"/></operator> <name pos:line="13" pos:column="31">MAX_PACK_ID<pos:position pos:line="13" pos:column="42"/></name></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="14" pos:column="17">oe<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">-&gt;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="21">idx<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">.<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">offset<pos:position pos:line="14" pos:column="31"/></name></name> <operator pos:line="14" pos:column="32">=<pos:position pos:line="14" pos:column="33"/></operator> <literal type="number" pos:line="14" pos:column="34">1<pos:position pos:line="14" pos:column="35"/></literal></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
	<switch pos:line="16" pos:column="9">switch <condition pos:line="16" pos:column="16">(<expr><name><name pos:line="16" pos:column="17">oe<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">type<pos:position pos:line="16" pos:column="25"/></name></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition> <block pos:line="16" pos:column="27">{
	<case pos:line="17" pos:column="9">case <expr><name pos:line="17" pos:column="14">OBJ_TREE<pos:position pos:line="17" pos:column="22"/></name></expr>:<pos:position pos:line="17" pos:column="23"/></case>	<comment type="block" pos:line="17" pos:column="25">/* easy case. */</comment>
		<return pos:line="18" pos:column="17">return <expr><name pos:line="18" pos:column="24">oe<pos:position pos:line="18" pos:column="26"/></name></expr>;<pos:position pos:line="18" pos:column="27"/></return>
	<case pos:line="19" pos:column="9">case <expr><name pos:line="19" pos:column="14">OBJ_COMMIT<pos:position pos:line="19" pos:column="24"/></name></expr>:<pos:position pos:line="19" pos:column="25"/></case>
	<case pos:line="20" pos:column="9">case <expr><name pos:line="20" pos:column="14">OBJ_TAG<pos:position pos:line="20" pos:column="21"/></name></expr>:<pos:position pos:line="20" pos:column="22"/></case>
		<break pos:line="21" pos:column="17">break;<pos:position pos:line="21" pos:column="23"/></break>
	<default pos:line="22" pos:column="9">default:<pos:position pos:line="22" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">die<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><literal type="string" pos:line="23" pos:column="21">"Not a tree-ish: %s"<pos:position pos:line="23" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="43">command_buf<pos:position pos:line="23" pos:column="54"/></name><operator pos:line="23" pos:column="54">.<pos:position pos:line="23" pos:column="55"/></operator><name pos:line="23" pos:column="55">buf<pos:position pos:line="23" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></switch>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">oe<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">-&gt;<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="17">pack_id<pos:position pos:line="26" pos:column="24"/></name></name> <operator pos:line="26" pos:column="25">!=<pos:position pos:line="26" pos:column="27"/></operator> <name pos:line="26" pos:column="28">MAX_PACK_ID<pos:position pos:line="26" pos:column="39"/></name></expr>)<pos:position pos:line="26" pos:column="40"/></condition><then pos:line="26" pos:column="40"> <block pos:line="26" pos:column="41">{	<comment type="block" pos:line="26" pos:column="49">/* in a pack being written */</comment>
		<expr_stmt><expr><name pos:line="27" pos:column="17">buf<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <call><name pos:line="27" pos:column="23">gfi_unpack_entry<pos:position pos:line="27" pos:column="39"/></name><argument_list pos:line="27" pos:column="39">(<argument><expr><name pos:line="27" pos:column="40">oe<pos:position pos:line="27" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="44">&amp;<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="45">size<pos:position pos:line="27" pos:column="49"/></name></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then> <else pos:line="28" pos:column="11">else <block pos:line="28" pos:column="16">{
		<decl_stmt><decl><type><name><name pos:line="29" pos:column="17">enum<pos:position pos:line="29" pos:column="21"/></name> <name pos:line="29" pos:column="22">object_type<pos:position pos:line="29" pos:column="33"/></name></name></type> <name pos:line="29" pos:column="34">unused<pos:position pos:line="29" pos:column="40"/></name></decl>;<pos:position pos:line="29" pos:column="41"/></decl_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">buf<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <call><name pos:line="30" pos:column="23">read_sha1_file<pos:position pos:line="30" pos:column="37"/></name><argument_list pos:line="30" pos:column="37">(<argument><expr><name pos:line="30" pos:column="38">sha1<pos:position pos:line="30" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="44">&amp;<pos:position pos:line="30" pos:column="49"/></operator><name pos:line="30" pos:column="45">unused<pos:position pos:line="30" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="53">&amp;<pos:position pos:line="30" pos:column="58"/></operator><name pos:line="30" pos:column="54">size<pos:position pos:line="30" pos:column="58"/></name></expr></argument>)<pos:position pos:line="30" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></else></if>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">buf<pos:position pos:line="32" pos:column="17"/></name></expr>)<pos:position pos:line="32" pos:column="18"/></condition><then pos:line="32" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="17">die<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><literal type="string" pos:line="33" pos:column="21">"Can't load object %s"<pos:position pos:line="33" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="45">sha1_to_hex<pos:position pos:line="33" pos:column="56"/></name><argument_list pos:line="33" pos:column="56">(<argument><expr><name pos:line="33" pos:column="57">sha1<pos:position pos:line="33" pos:column="61"/></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="64"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="35" pos:column="9">/* Peel one layer. */</comment>
	<switch pos:line="36" pos:column="9">switch <condition pos:line="36" pos:column="16">(<expr><name><name pos:line="36" pos:column="17">oe<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">-&gt;<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="21">type<pos:position pos:line="36" pos:column="25"/></name></name></expr>)<pos:position pos:line="36" pos:column="26"/></condition> <block pos:line="36" pos:column="27">{
	<case pos:line="37" pos:column="9">case <expr><name pos:line="37" pos:column="14">OBJ_TAG<pos:position pos:line="37" pos:column="21"/></name></expr>:<pos:position pos:line="37" pos:column="22"/></case>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">size<pos:position pos:line="38" pos:column="25"/></name> <operator pos:line="38" pos:column="26">&lt;<pos:position pos:line="38" pos:column="30"/></operator> <literal type="number" pos:line="38" pos:column="28">40<pos:position pos:line="38" pos:column="30"/></literal> <operator pos:line="38" pos:column="31">+<pos:position pos:line="38" pos:column="32"/></operator> <call><name pos:line="38" pos:column="33">strlen<pos:position pos:line="38" pos:column="39"/></name><argument_list pos:line="38" pos:column="39">(<argument><expr><literal type="string" pos:line="38" pos:column="40">"object "<pos:position pos:line="38" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="50"/></argument_list></call> <operator pos:line="38" pos:column="51">||<pos:position pos:line="38" pos:column="53"/></operator>
		    <call><name pos:line="39" pos:column="21">get_sha1_hex<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><name pos:line="39" pos:column="34">buf<pos:position pos:line="39" pos:column="37"/></name> <operator pos:line="39" pos:column="38">+<pos:position pos:line="39" pos:column="39"/></operator> <call><name pos:line="39" pos:column="40">strlen<pos:position pos:line="39" pos:column="46"/></name><argument_list pos:line="39" pos:column="46">(<argument><expr><literal type="string" pos:line="39" pos:column="47">"object "<pos:position pos:line="39" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="39" pos:column="59">sha1<pos:position pos:line="39" pos:column="63"/></name></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="65"/></condition><then pos:line="39" pos:column="65">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="25">die<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><literal type="string" pos:line="40" pos:column="29">"Invalid SHA1 in tag: %s"<pos:position pos:line="40" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="56">command_buf<pos:position pos:line="40" pos:column="67"/></name><operator pos:line="40" pos:column="67">.<pos:position pos:line="40" pos:column="68"/></operator><name pos:line="40" pos:column="68">buf<pos:position pos:line="40" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="73"/></expr_stmt></block></then></if>
		<break pos:line="41" pos:column="17">break;<pos:position pos:line="41" pos:column="23"/></break>
	<case pos:line="42" pos:column="9">case <expr><name pos:line="42" pos:column="14">OBJ_COMMIT<pos:position pos:line="42" pos:column="24"/></name></expr>:<pos:position pos:line="42" pos:column="25"/></case>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">size<pos:position pos:line="43" pos:column="25"/></name> <operator pos:line="43" pos:column="26">&lt;<pos:position pos:line="43" pos:column="30"/></operator> <literal type="number" pos:line="43" pos:column="28">40<pos:position pos:line="43" pos:column="30"/></literal> <operator pos:line="43" pos:column="31">+<pos:position pos:line="43" pos:column="32"/></operator> <call><name pos:line="43" pos:column="33">strlen<pos:position pos:line="43" pos:column="39"/></name><argument_list pos:line="43" pos:column="39">(<argument><expr><literal type="string" pos:line="43" pos:column="40">"tree "<pos:position pos:line="43" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call> <operator pos:line="43" pos:column="49">||<pos:position pos:line="43" pos:column="51"/></operator>
		    <call><name pos:line="44" pos:column="21">get_sha1_hex<pos:position pos:line="44" pos:column="33"/></name><argument_list pos:line="44" pos:column="33">(<argument><expr><name pos:line="44" pos:column="34">buf<pos:position pos:line="44" pos:column="37"/></name> <operator pos:line="44" pos:column="38">+<pos:position pos:line="44" pos:column="39"/></operator> <call><name pos:line="44" pos:column="40">strlen<pos:position pos:line="44" pos:column="46"/></name><argument_list pos:line="44" pos:column="46">(<argument><expr><literal type="string" pos:line="44" pos:column="47">"tree "<pos:position pos:line="44" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="44" pos:column="57">sha1<pos:position pos:line="44" pos:column="61"/></name></expr></argument>)<pos:position pos:line="44" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="63"/></condition><then pos:line="44" pos:column="63">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="25">die<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><literal type="string" pos:line="45" pos:column="29">"Invalid SHA1 in commit: %s"<pos:position pos:line="45" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="59">command_buf<pos:position pos:line="45" pos:column="70"/></name><operator pos:line="45" pos:column="70">.<pos:position pos:line="45" pos:column="71"/></operator><name pos:line="45" pos:column="71">buf<pos:position pos:line="45" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="76"/></expr_stmt></block></then></if>
	}<pos:position pos:line="46" pos:column="10"/></block></switch>

	<expr_stmt><expr><call><name pos:line="48" pos:column="9">free<pos:position pos:line="48" pos:column="13"/></name><argument_list pos:line="48" pos:column="13">(<argument><expr><name pos:line="48" pos:column="14">buf<pos:position pos:line="48" pos:column="17"/></name></expr></argument>)<pos:position pos:line="48" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="19"/></expr_stmt>
	<return pos:line="49" pos:column="9">return <expr><call><name pos:line="49" pos:column="16">find_object<pos:position pos:line="49" pos:column="27"/></name><argument_list pos:line="49" pos:column="27">(<argument><expr><name pos:line="49" pos:column="28">sha1<pos:position pos:line="49" pos:column="32"/></name></expr></argument>)<pos:position pos:line="49" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="34"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
