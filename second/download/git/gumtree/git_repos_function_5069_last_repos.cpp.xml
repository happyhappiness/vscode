<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5069_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">verify_tag<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">buffer<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">unsigned<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">long<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">size<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">typelen<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">type<pos:position pos:line="4" pos:column="18"/></name><index pos:line="4" pos:column="18">[<expr><literal type="number" pos:line="4" pos:column="19">20<pos:position pos:line="4" pos:column="21"/></literal></expr>]<pos:position pos:line="4" pos:column="22"/></index></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name><name pos:line="5" pos:column="23">sha1<pos:position pos:line="5" pos:column="27"/></name><index pos:line="5" pos:column="27">[<expr><literal type="number" pos:line="5" pos:column="28">20<pos:position pos:line="5" pos:column="30"/></literal></expr>]<pos:position pos:line="5" pos:column="31"/></index></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">object<pos:position pos:line="6" pos:column="27"/></name></decl>, <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="30">type_line<pos:position pos:line="6" pos:column="39"/></name></decl>, <modifier pos:line="6" pos:column="41">*<pos:position pos:line="6" pos:column="42"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="42">tag_line<pos:position pos:line="6" pos:column="50"/></name></decl>, <modifier pos:line="6" pos:column="52">*<pos:position pos:line="6" pos:column="53"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="53">tagger_line<pos:position pos:line="6" pos:column="64"/></name></decl>, <modifier pos:line="6" pos:column="66">*<pos:position pos:line="6" pos:column="67"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="67">lb<pos:position pos:line="6" pos:column="69"/></name></decl>, <modifier pos:line="6" pos:column="71">*<pos:position pos:line="6" pos:column="72"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="72">rb<pos:position pos:line="6" pos:column="74"/></name></decl>;<pos:position pos:line="6" pos:column="75"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">len<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">size<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">&lt;<pos:position pos:line="9" pos:column="22"/></operator> <literal type="number" pos:line="9" pos:column="20">84<pos:position pos:line="9" pos:column="22"/></literal></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><call><name pos:line="10" pos:column="24">error<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><literal type="string" pos:line="10" pos:column="30">"wanna fool me ? you obviously got the size wrong !"<pos:position pos:line="10" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="84"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="12" pos:column="9">buffer<pos:position pos:line="12" pos:column="15"/></name><index pos:line="12" pos:column="15">[<expr><name pos:line="12" pos:column="16">size<pos:position pos:line="12" pos:column="20"/></name></expr>]<pos:position pos:line="12" pos:column="21"/></index></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <literal type="number" pos:line="12" pos:column="24">0<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>

	<comment type="block" pos:line="14" pos:column="9">/* Verify object line */</comment>
	<expr_stmt><expr><name pos:line="15" pos:column="9">object<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="18">buffer<pos:position pos:line="15" pos:column="24"/></name></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">memcmp<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">object<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="28">"object "<pos:position pos:line="16" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="39">7<pos:position pos:line="16" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="42"/></condition><then pos:line="16" pos:column="42">
		<block type="pseudo"><return pos:line="17" pos:column="17">return <expr><call><name pos:line="17" pos:column="24">error<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><literal type="string" pos:line="17" pos:column="30">"char%d: does not start with \"object \""<pos:position pos:line="17" pos:column="71"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="73">0<pos:position pos:line="17" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="76"/></return></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">get_sha1_hex<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">object<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">+<pos:position pos:line="19" pos:column="34"/></operator> <literal type="number" pos:line="19" pos:column="35">7<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="38">sha1<pos:position pos:line="19" pos:column="42"/></name></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="44"/></condition><then pos:line="19" pos:column="44">
		<block type="pseudo"><return pos:line="20" pos:column="17">return <expr><call><name pos:line="20" pos:column="24">error<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><literal type="string" pos:line="20" pos:column="30">"char%d: could not get SHA1 hash"<pos:position pos:line="20" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="65">7<pos:position pos:line="20" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="68"/></return></block></then></if>

	<comment type="block" pos:line="22" pos:column="9">/* Verify type line */</comment>
	<expr_stmt><expr><name pos:line="23" pos:column="9">type_line<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="21">object<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">+<pos:position pos:line="23" pos:column="29"/></operator> <literal type="number" pos:line="23" pos:column="30">48<pos:position pos:line="23" pos:column="32"/></literal></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">memcmp<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><name pos:line="24" pos:column="20">type_line<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">-<pos:position pos:line="24" pos:column="31"/></operator> <literal type="number" pos:line="24" pos:column="32">1<pos:position pos:line="24" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="35">"\ntype "<pos:position pos:line="24" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="46">6<pos:position pos:line="24" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="49"/></condition><then pos:line="24" pos:column="49">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><call><name pos:line="25" pos:column="24">error<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><literal type="string" pos:line="25" pos:column="30">"char%d: could not find \"\\ntype \""<pos:position pos:line="25" pos:column="67"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="69">47<pos:position pos:line="25" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="73"/></return></block></then></if>

	<comment type="block" pos:line="27" pos:column="9">/* Verify tag-line */</comment>
	<expr_stmt><expr><name pos:line="28" pos:column="9">tag_line<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <call><name pos:line="28" pos:column="20">strchr<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">(<argument><expr><name pos:line="28" pos:column="27">type_line<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="28" pos:column="38">'\n'<pos:position pos:line="28" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">tag_line<pos:position pos:line="29" pos:column="22"/></name></expr>)<pos:position pos:line="29" pos:column="23"/></condition><then pos:line="29" pos:column="23">
		<block type="pseudo"><return pos:line="30" pos:column="17">return <expr><call><name pos:line="30" pos:column="24">error<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><literal type="string" pos:line="30" pos:column="30">"char%"<pos:position pos:line="30" pos:column="37"/></literal><name pos:line="30" pos:column="37">PRIuMAX<pos:position pos:line="30" pos:column="44"/></name><literal type="string" pos:line="30" pos:column="44">": could not find next \"\\n\""<pos:position pos:line="30" pos:column="75"/></literal></expr></argument>,
				<argument><expr><call pos:line="31" pos:column="33">(<name pos:line="31" pos:column="34">uintmax_t<pos:position pos:line="31" pos:column="43"/></name>) <argument_list pos:line="31" pos:column="45">(<argument><expr><name pos:line="31" pos:column="46">type_line<pos:position pos:line="31" pos:column="55"/></name> <operator pos:line="31" pos:column="56">-<pos:position pos:line="31" pos:column="57"/></operator> <name pos:line="31" pos:column="58">buffer<pos:position pos:line="31" pos:column="64"/></name></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="67"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="32" pos:column="9">tag_line<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">++<pos:position pos:line="32" pos:column="19"/></operator></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">memcmp<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><name pos:line="33" pos:column="20">tag_line<pos:position pos:line="33" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="30">"tag "<pos:position pos:line="33" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="38">4<pos:position pos:line="33" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call> <operator pos:line="33" pos:column="41">||<pos:position pos:line="33" pos:column="43"/></operator> <name><name pos:line="33" pos:column="44">tag_line<pos:position pos:line="33" pos:column="52"/></name><index pos:line="33" pos:column="52">[<expr><literal type="number" pos:line="33" pos:column="53">4<pos:position pos:line="33" pos:column="54"/></literal></expr>]<pos:position pos:line="33" pos:column="55"/></index></name> <operator pos:line="33" pos:column="56">==<pos:position pos:line="33" pos:column="58"/></operator> <literal type="char" pos:line="33" pos:column="59">'\n'<pos:position pos:line="33" pos:column="63"/></literal></expr>)<pos:position pos:line="33" pos:column="64"/></condition><then pos:line="33" pos:column="64">
		<block type="pseudo"><return pos:line="34" pos:column="17">return <expr><call><name pos:line="34" pos:column="24">error<pos:position pos:line="34" pos:column="29"/></name><argument_list pos:line="34" pos:column="29">(<argument><expr><literal type="string" pos:line="34" pos:column="30">"char%"<pos:position pos:line="34" pos:column="37"/></literal><name pos:line="34" pos:column="37">PRIuMAX<pos:position pos:line="34" pos:column="44"/></name><literal type="string" pos:line="34" pos:column="44">": no \"tag \" found"<pos:position pos:line="34" pos:column="65"/></literal></expr></argument>,
				<argument><expr><call pos:line="35" pos:column="33">(<name pos:line="35" pos:column="34">uintmax_t<pos:position pos:line="35" pos:column="43"/></name>) <argument_list pos:line="35" pos:column="45">(<argument><expr><name pos:line="35" pos:column="46">tag_line<pos:position pos:line="35" pos:column="54"/></name> <operator pos:line="35" pos:column="55">-<pos:position pos:line="35" pos:column="56"/></operator> <name pos:line="35" pos:column="57">buffer<pos:position pos:line="35" pos:column="63"/></name></expr></argument>)<pos:position pos:line="35" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="66"/></return></block></then></if>

	<comment type="block" pos:line="37" pos:column="9">/* Get the actual type */</comment>
	<expr_stmt><expr><name pos:line="38" pos:column="9">typelen<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">=<pos:position pos:line="38" pos:column="18"/></operator> <name pos:line="38" pos:column="19">tag_line<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">-<pos:position pos:line="38" pos:column="29"/></operator> <name pos:line="38" pos:column="30">type_line<pos:position pos:line="38" pos:column="39"/></name> <operator pos:line="38" pos:column="40">-<pos:position pos:line="38" pos:column="41"/></operator> <call><name pos:line="38" pos:column="42">strlen<pos:position pos:line="38" pos:column="48"/></name><argument_list pos:line="38" pos:column="48">(<argument><expr><literal type="string" pos:line="38" pos:column="49">"type \n"<pos:position pos:line="38" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="60"/></expr_stmt>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">typelen<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">&gt;=<pos:position pos:line="39" pos:column="26"/></operator> <sizeof pos:line="39" pos:column="24">sizeof<argument_list pos:line="39" pos:column="30">(<argument><expr><name pos:line="39" pos:column="31">type<pos:position pos:line="39" pos:column="35"/></name></expr></argument>)<pos:position pos:line="39" pos:column="36"/></argument_list></sizeof></expr>)<pos:position pos:line="39" pos:column="37"/></condition><then pos:line="39" pos:column="37">
		<block type="pseudo"><return pos:line="40" pos:column="17">return <expr><call><name pos:line="40" pos:column="24">error<pos:position pos:line="40" pos:column="29"/></name><argument_list pos:line="40" pos:column="29">(<argument><expr><literal type="string" pos:line="40" pos:column="30">"char%"<pos:position pos:line="40" pos:column="37"/></literal><name pos:line="40" pos:column="37">PRIuMAX<pos:position pos:line="40" pos:column="44"/></name><literal type="string" pos:line="40" pos:column="44">": type too long"<pos:position pos:line="40" pos:column="61"/></literal></expr></argument>,
				<argument><expr><call pos:line="41" pos:column="33">(<name pos:line="41" pos:column="34">uintmax_t<pos:position pos:line="41" pos:column="43"/></name>) <argument_list pos:line="41" pos:column="45">(<argument><expr><name pos:line="41" pos:column="46">type_line<pos:position pos:line="41" pos:column="55"/></name><operator pos:line="41" pos:column="55">+<pos:position pos:line="41" pos:column="56"/></operator><literal type="number" pos:line="41" pos:column="56">5<pos:position pos:line="41" pos:column="57"/></literal> <operator pos:line="41" pos:column="58">-<pos:position pos:line="41" pos:column="59"/></operator> <name pos:line="41" pos:column="60">buffer<pos:position pos:line="41" pos:column="66"/></name></expr></argument>)<pos:position pos:line="41" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="69"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="43" pos:column="9">memcpy<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><name pos:line="43" pos:column="16">type<pos:position pos:line="43" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="22">type_line<pos:position pos:line="43" pos:column="31"/></name><operator pos:line="43" pos:column="31">+<pos:position pos:line="43" pos:column="32"/></operator><literal type="number" pos:line="43" pos:column="32">5<pos:position pos:line="43" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="35">typelen<pos:position pos:line="43" pos:column="42"/></name></expr></argument>)<pos:position pos:line="43" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="44" pos:column="9">type<pos:position pos:line="44" pos:column="13"/></name><index pos:line="44" pos:column="13">[<expr><name pos:line="44" pos:column="14">typelen<pos:position pos:line="44" pos:column="21"/></name></expr>]<pos:position pos:line="44" pos:column="22"/></index></name> <operator pos:line="44" pos:column="23">=<pos:position pos:line="44" pos:column="24"/></operator> <literal type="number" pos:line="44" pos:column="25">0<pos:position pos:line="44" pos:column="26"/></literal></expr>;<pos:position pos:line="44" pos:column="27"/></expr_stmt>

	<comment type="block" pos:line="46" pos:column="9">/* Verify that the object matches */</comment>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><call><name pos:line="47" pos:column="13">verify_object<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><name pos:line="47" pos:column="27">sha1<pos:position pos:line="47" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="33">type<pos:position pos:line="47" pos:column="37"/></name></expr></argument>)<pos:position pos:line="47" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="39"/></condition><then pos:line="47" pos:column="39">
		<block type="pseudo"><return pos:line="48" pos:column="17">return <expr><call><name pos:line="48" pos:column="24">error<pos:position pos:line="48" pos:column="29"/></name><argument_list pos:line="48" pos:column="29">(<argument><expr><literal type="string" pos:line="48" pos:column="30">"char%d: could not verify object %s"<pos:position pos:line="48" pos:column="66"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="68">7<pos:position pos:line="48" pos:column="69"/></literal></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="71">sha1_to_hex<pos:position pos:line="48" pos:column="82"/></name><argument_list pos:line="48" pos:column="82">(<argument><expr><name pos:line="48" pos:column="83">sha1<pos:position pos:line="48" pos:column="87"/></name></expr></argument>)<pos:position pos:line="48" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="90"/></return></block></then></if>

	<comment type="block" pos:line="50" pos:column="9">/* Verify the tag-name: we don't allow control characters or spaces in it */</comment>
	<expr_stmt><expr><name pos:line="51" pos:column="9">tag_line<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">+=<pos:position pos:line="51" pos:column="20"/></operator> <literal type="number" pos:line="51" pos:column="21">4<pos:position pos:line="51" pos:column="22"/></literal></expr>;<pos:position pos:line="51" pos:column="23"/></expr_stmt>
	<for pos:line="52" pos:column="9">for <control pos:line="52" pos:column="13">(<init pos:line="52" pos:column="14">;<pos:position pos:line="52" pos:column="15"/></init><condition pos:line="52" pos:column="15">;<pos:position pos:line="52" pos:column="16"/></condition><incr/>)<pos:position pos:line="52" pos:column="17"/></control> <block pos:line="52" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="53" pos:column="17">unsigned<pos:position pos:line="53" pos:column="25"/></name> <name pos:line="53" pos:column="26">char<pos:position pos:line="53" pos:column="30"/></name></type> <name pos:line="53" pos:column="31">c<pos:position pos:line="53" pos:column="32"/></name> <init pos:line="53" pos:column="33">= <expr><operator pos:line="53" pos:column="35">*<pos:position pos:line="53" pos:column="36"/></operator><name pos:line="53" pos:column="36">tag_line<pos:position pos:line="53" pos:column="44"/></name><operator pos:line="53" pos:column="44">++<pos:position pos:line="53" pos:column="46"/></operator></expr></init></decl>;<pos:position pos:line="53" pos:column="47"/></decl_stmt>
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name pos:line="54" pos:column="21">c<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">==<pos:position pos:line="54" pos:column="25"/></operator> <literal type="char" pos:line="54" pos:column="26">'\n'<pos:position pos:line="54" pos:column="30"/></literal></expr>)<pos:position pos:line="54" pos:column="31"/></condition><then pos:line="54" pos:column="31">
			<block type="pseudo"><break pos:line="55" pos:column="25">break;<pos:position pos:line="55" pos:column="31"/></break></block></then></if>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">c<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">&gt;<pos:position pos:line="56" pos:column="27"/></operator> <literal type="char" pos:line="56" pos:column="25">' '<pos:position pos:line="56" pos:column="28"/></literal></expr>)<pos:position pos:line="56" pos:column="29"/></condition><then pos:line="56" pos:column="29">
			<block type="pseudo"><continue pos:line="57" pos:column="25">continue;<pos:position pos:line="57" pos:column="34"/></continue></block></then></if>
		<return pos:line="58" pos:column="17">return <expr><call><name pos:line="58" pos:column="24">error<pos:position pos:line="58" pos:column="29"/></name><argument_list pos:line="58" pos:column="29">(<argument><expr><literal type="string" pos:line="58" pos:column="30">"char%"<pos:position pos:line="58" pos:column="37"/></literal><name pos:line="58" pos:column="37">PRIuMAX<pos:position pos:line="58" pos:column="44"/></name><literal type="string" pos:line="58" pos:column="44">": could not verify tag name"<pos:position pos:line="58" pos:column="73"/></literal></expr></argument>,
				<argument><expr><call pos:line="59" pos:column="33">(<name pos:line="59" pos:column="34">uintmax_t<pos:position pos:line="59" pos:column="43"/></name>) <argument_list pos:line="59" pos:column="45">(<argument><expr><name pos:line="59" pos:column="46">tag_line<pos:position pos:line="59" pos:column="54"/></name> <operator pos:line="59" pos:column="55">-<pos:position pos:line="59" pos:column="56"/></operator> <name pos:line="59" pos:column="57">buffer<pos:position pos:line="59" pos:column="63"/></name></expr></argument>)<pos:position pos:line="59" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="66"/></return>
	}<pos:position pos:line="60" pos:column="10"/></block></for>

	<comment type="block" pos:line="62" pos:column="9">/* Verify the tagger line */</comment>
	<expr_stmt><expr><name pos:line="63" pos:column="9">tagger_line<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">=<pos:position pos:line="63" pos:column="22"/></operator> <name pos:line="63" pos:column="23">tag_line<pos:position pos:line="63" pos:column="31"/></name></expr>;<pos:position pos:line="63" pos:column="32"/></expr_stmt>

	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><call><name pos:line="65" pos:column="13">memcmp<pos:position pos:line="65" pos:column="19"/></name><argument_list pos:line="65" pos:column="19">(<argument><expr><name pos:line="65" pos:column="20">tagger_line<pos:position pos:line="65" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="33">"tagger "<pos:position pos:line="65" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="44">7<pos:position pos:line="65" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="47"/></condition><then pos:line="65" pos:column="47">
		<block type="pseudo"><return pos:line="66" pos:column="17">return <expr><call><name pos:line="66" pos:column="24">error<pos:position pos:line="66" pos:column="29"/></name><argument_list pos:line="66" pos:column="29">(<argument><expr><literal type="string" pos:line="66" pos:column="30">"char%"<pos:position pos:line="66" pos:column="37"/></literal><name pos:line="66" pos:column="37">PRIuMAX<pos:position pos:line="66" pos:column="44"/></name><literal type="string" pos:line="66" pos:column="44">": could not find \"tagger \""<pos:position pos:line="66" pos:column="74"/></literal></expr></argument>,
			<argument><expr><call pos:line="67" pos:column="25">(<name pos:line="67" pos:column="26">uintmax_t<pos:position pos:line="67" pos:column="35"/></name>) <argument_list pos:line="67" pos:column="37">(<argument><expr><name pos:line="67" pos:column="38">tagger_line<pos:position pos:line="67" pos:column="49"/></name> <operator pos:line="67" pos:column="50">-<pos:position pos:line="67" pos:column="51"/></operator> <name pos:line="67" pos:column="52">buffer<pos:position pos:line="67" pos:column="58"/></name></expr></argument>)<pos:position pos:line="67" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="67" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="61"/></return></block></then></if>

	<comment type="block" pos:line="69" pos:column="9">/*
	 * Check for correct form for name and email
	 * i.e. " &lt;" followed by "&gt; " on _this_ line
	 * No angle brackets within the name or email address fields.
	 * No spaces within the email address field.
	 */</comment>
	<expr_stmt><expr><name pos:line="75" pos:column="9">tagger_line<pos:position pos:line="75" pos:column="20"/></name> <operator pos:line="75" pos:column="21">+=<pos:position pos:line="75" pos:column="23"/></operator> <literal type="number" pos:line="75" pos:column="24">7<pos:position pos:line="75" pos:column="25"/></literal></expr>;<pos:position pos:line="75" pos:column="26"/></expr_stmt>
	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><operator pos:line="76" pos:column="13">!<pos:position pos:line="76" pos:column="14"/></operator><operator pos:line="76" pos:column="14">(<pos:position pos:line="76" pos:column="15"/></operator><name pos:line="76" pos:column="15">lb<pos:position pos:line="76" pos:column="17"/></name> <operator pos:line="76" pos:column="18">=<pos:position pos:line="76" pos:column="19"/></operator> <call><name pos:line="76" pos:column="20">strstr<pos:position pos:line="76" pos:column="26"/></name><argument_list pos:line="76" pos:column="26">(<argument><expr><name pos:line="76" pos:column="27">tagger_line<pos:position pos:line="76" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="40">" &lt;"<pos:position pos:line="76" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="45"/></argument_list></call><operator pos:line="76" pos:column="45">)<pos:position pos:line="76" pos:column="46"/></operator> <operator pos:line="76" pos:column="47">||<pos:position pos:line="76" pos:column="49"/></operator> <operator pos:line="76" pos:column="50">!<pos:position pos:line="76" pos:column="51"/></operator><operator pos:line="76" pos:column="51">(<pos:position pos:line="76" pos:column="52"/></operator><name pos:line="76" pos:column="52">rb<pos:position pos:line="76" pos:column="54"/></name> <operator pos:line="76" pos:column="55">=<pos:position pos:line="76" pos:column="56"/></operator> <call><name pos:line="76" pos:column="57">strstr<pos:position pos:line="76" pos:column="63"/></name><argument_list pos:line="76" pos:column="63">(<argument><expr><name pos:line="76" pos:column="64">lb<pos:position pos:line="76" pos:column="66"/></name><operator pos:line="76" pos:column="66">+<pos:position pos:line="76" pos:column="67"/></operator><literal type="number" pos:line="76" pos:column="67">2<pos:position pos:line="76" pos:column="68"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="70">"&gt; "<pos:position pos:line="76" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="75"/></argument_list></call><operator pos:line="76" pos:column="75">)<pos:position pos:line="76" pos:column="76"/></operator> <operator pos:line="76" pos:column="77">||<pos:position pos:line="76" pos:column="79"/></operator>
		<call><name pos:line="77" pos:column="17">strpbrk<pos:position pos:line="77" pos:column="24"/></name><argument_list pos:line="77" pos:column="24">(<argument><expr><name pos:line="77" pos:column="25">tagger_line<pos:position pos:line="77" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="38">"&lt;&gt;\n"<pos:position pos:line="77" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="45"/></argument_list></call> <operator pos:line="77" pos:column="46">!=<pos:position pos:line="77" pos:column="48"/></operator> <name pos:line="77" pos:column="49">lb<pos:position pos:line="77" pos:column="51"/></name><operator pos:line="77" pos:column="51">+<pos:position pos:line="77" pos:column="52"/></operator><literal type="number" pos:line="77" pos:column="52">1<pos:position pos:line="77" pos:column="53"/></literal> <operator pos:line="77" pos:column="54">||<pos:position pos:line="77" pos:column="56"/></operator>
		<call><name pos:line="78" pos:column="17">strpbrk<pos:position pos:line="78" pos:column="24"/></name><argument_list pos:line="78" pos:column="24">(<argument><expr><name pos:line="78" pos:column="25">lb<pos:position pos:line="78" pos:column="27"/></name><operator pos:line="78" pos:column="27">+<pos:position pos:line="78" pos:column="28"/></operator><literal type="number" pos:line="78" pos:column="28">2<pos:position pos:line="78" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="31">"&gt;&lt;\n "<pos:position pos:line="78" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="39"/></argument_list></call> <operator pos:line="78" pos:column="40">!=<pos:position pos:line="78" pos:column="42"/></operator> <name pos:line="78" pos:column="43">rb<pos:position pos:line="78" pos:column="45"/></name></expr>)<pos:position pos:line="78" pos:column="46"/></condition><then pos:line="78" pos:column="46">
		<block type="pseudo"><return pos:line="79" pos:column="17">return <expr><call><name pos:line="79" pos:column="24">error<pos:position pos:line="79" pos:column="29"/></name><argument_list pos:line="79" pos:column="29">(<argument><expr><literal type="string" pos:line="79" pos:column="30">"char%"<pos:position pos:line="79" pos:column="37"/></literal><name pos:line="79" pos:column="37">PRIuMAX<pos:position pos:line="79" pos:column="44"/></name><literal type="string" pos:line="79" pos:column="44">": malformed tagger field"<pos:position pos:line="79" pos:column="70"/></literal></expr></argument>,
			<argument><expr><call pos:line="80" pos:column="25">(<name pos:line="80" pos:column="26">uintmax_t<pos:position pos:line="80" pos:column="35"/></name>) <argument_list pos:line="80" pos:column="37">(<argument><expr><name pos:line="80" pos:column="38">tagger_line<pos:position pos:line="80" pos:column="49"/></name> <operator pos:line="80" pos:column="50">-<pos:position pos:line="80" pos:column="51"/></operator> <name pos:line="80" pos:column="52">buffer<pos:position pos:line="80" pos:column="58"/></name></expr></argument>)<pos:position pos:line="80" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="80" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="61"/></return></block></then></if>

	<comment type="block" pos:line="82" pos:column="9">/* Check for author name, at least one character, space is acceptable */</comment>
	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><name pos:line="83" pos:column="13">lb<pos:position pos:line="83" pos:column="15"/></name> <operator pos:line="83" pos:column="16">==<pos:position pos:line="83" pos:column="18"/></operator> <name pos:line="83" pos:column="19">tagger_line<pos:position pos:line="83" pos:column="30"/></name></expr>)<pos:position pos:line="83" pos:column="31"/></condition><then pos:line="83" pos:column="31">
		<block type="pseudo"><return pos:line="84" pos:column="17">return <expr><call><name pos:line="84" pos:column="24">error<pos:position pos:line="84" pos:column="29"/></name><argument_list pos:line="84" pos:column="29">(<argument><expr><literal type="string" pos:line="84" pos:column="30">"char%"<pos:position pos:line="84" pos:column="37"/></literal><name pos:line="84" pos:column="37">PRIuMAX<pos:position pos:line="84" pos:column="44"/></name><literal type="string" pos:line="84" pos:column="44">": missing tagger name"<pos:position pos:line="84" pos:column="67"/></literal></expr></argument>,
			<argument><expr><call pos:line="85" pos:column="25">(<name pos:line="85" pos:column="26">uintmax_t<pos:position pos:line="85" pos:column="35"/></name>) <argument_list pos:line="85" pos:column="37">(<argument><expr><name pos:line="85" pos:column="38">tagger_line<pos:position pos:line="85" pos:column="49"/></name> <operator pos:line="85" pos:column="50">-<pos:position pos:line="85" pos:column="51"/></operator> <name pos:line="85" pos:column="52">buffer<pos:position pos:line="85" pos:column="58"/></name></expr></argument>)<pos:position pos:line="85" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="85" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="61"/></return></block></then></if>

	<comment type="block" pos:line="87" pos:column="9">/* timestamp, 1 or more digits followed by space */</comment>
	<expr_stmt><expr><name pos:line="88" pos:column="9">tagger_line<pos:position pos:line="88" pos:column="20"/></name> <operator pos:line="88" pos:column="21">=<pos:position pos:line="88" pos:column="22"/></operator> <name pos:line="88" pos:column="23">rb<pos:position pos:line="88" pos:column="25"/></name> <operator pos:line="88" pos:column="26">+<pos:position pos:line="88" pos:column="27"/></operator> <literal type="number" pos:line="88" pos:column="28">2<pos:position pos:line="88" pos:column="29"/></literal></expr>;<pos:position pos:line="88" pos:column="30"/></expr_stmt>
	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><operator pos:line="89" pos:column="13">!<pos:position pos:line="89" pos:column="14"/></operator><operator pos:line="89" pos:column="14">(<pos:position pos:line="89" pos:column="15"/></operator><name pos:line="89" pos:column="15">len<pos:position pos:line="89" pos:column="18"/></name> <operator pos:line="89" pos:column="19">=<pos:position pos:line="89" pos:column="20"/></operator> <call><name pos:line="89" pos:column="21">strspn<pos:position pos:line="89" pos:column="27"/></name><argument_list pos:line="89" pos:column="27">(<argument><expr><name pos:line="89" pos:column="28">tagger_line<pos:position pos:line="89" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="41">"0123456789"<pos:position pos:line="89" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="54"/></argument_list></call><operator pos:line="89" pos:column="54">)<pos:position pos:line="89" pos:column="55"/></operator></expr>)<pos:position pos:line="89" pos:column="56"/></condition><then pos:line="89" pos:column="56">
		<block type="pseudo"><return pos:line="90" pos:column="17">return <expr><call><name pos:line="90" pos:column="24">error<pos:position pos:line="90" pos:column="29"/></name><argument_list pos:line="90" pos:column="29">(<argument><expr><literal type="string" pos:line="90" pos:column="30">"char%"<pos:position pos:line="90" pos:column="37"/></literal><name pos:line="90" pos:column="37">PRIuMAX<pos:position pos:line="90" pos:column="44"/></name><literal type="string" pos:line="90" pos:column="44">": missing tag timestamp"<pos:position pos:line="90" pos:column="69"/></literal></expr></argument>,
			<argument><expr><call pos:line="91" pos:column="25">(<name pos:line="91" pos:column="26">uintmax_t<pos:position pos:line="91" pos:column="35"/></name>) <argument_list pos:line="91" pos:column="37">(<argument><expr><name pos:line="91" pos:column="38">tagger_line<pos:position pos:line="91" pos:column="49"/></name> <operator pos:line="91" pos:column="50">-<pos:position pos:line="91" pos:column="51"/></operator> <name pos:line="91" pos:column="52">buffer<pos:position pos:line="91" pos:column="58"/></name></expr></argument>)<pos:position pos:line="91" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="91" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="61"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="92" pos:column="9">tagger_line<pos:position pos:line="92" pos:column="20"/></name> <operator pos:line="92" pos:column="21">+=<pos:position pos:line="92" pos:column="23"/></operator> <name pos:line="92" pos:column="24">len<pos:position pos:line="92" pos:column="27"/></name></expr>;<pos:position pos:line="92" pos:column="28"/></expr_stmt>
	<if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><operator pos:line="93" pos:column="13">*<pos:position pos:line="93" pos:column="14"/></operator><name pos:line="93" pos:column="14">tagger_line<pos:position pos:line="93" pos:column="25"/></name> <operator pos:line="93" pos:column="26">!=<pos:position pos:line="93" pos:column="28"/></operator> <literal type="char" pos:line="93" pos:column="29">' '<pos:position pos:line="93" pos:column="32"/></literal></expr>)<pos:position pos:line="93" pos:column="33"/></condition><then pos:line="93" pos:column="33">
		<block type="pseudo"><return pos:line="94" pos:column="17">return <expr><call><name pos:line="94" pos:column="24">error<pos:position pos:line="94" pos:column="29"/></name><argument_list pos:line="94" pos:column="29">(<argument><expr><literal type="string" pos:line="94" pos:column="30">"char%"<pos:position pos:line="94" pos:column="37"/></literal><name pos:line="94" pos:column="37">PRIuMAX<pos:position pos:line="94" pos:column="44"/></name><literal type="string" pos:line="94" pos:column="44">": malformed tag timestamp"<pos:position pos:line="94" pos:column="71"/></literal></expr></argument>,
			<argument><expr><call pos:line="95" pos:column="25">(<name pos:line="95" pos:column="26">uintmax_t<pos:position pos:line="95" pos:column="35"/></name>) <argument_list pos:line="95" pos:column="37">(<argument><expr><name pos:line="95" pos:column="38">tagger_line<pos:position pos:line="95" pos:column="49"/></name> <operator pos:line="95" pos:column="50">-<pos:position pos:line="95" pos:column="51"/></operator> <name pos:line="95" pos:column="52">buffer<pos:position pos:line="95" pos:column="58"/></name></expr></argument>)<pos:position pos:line="95" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="95" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="61"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="96" pos:column="9">tagger_line<pos:position pos:line="96" pos:column="20"/></name><operator pos:line="96" pos:column="20">++<pos:position pos:line="96" pos:column="22"/></operator></expr>;<pos:position pos:line="96" pos:column="23"/></expr_stmt>

	<comment type="block" pos:line="98" pos:column="9">/* timezone, 5 digits [+-]hhmm, max. 1400 */</comment>
	<if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><operator pos:line="99" pos:column="13">!<pos:position pos:line="99" pos:column="14"/></operator><operator pos:line="99" pos:column="14">(<pos:position pos:line="99" pos:column="15"/></operator><operator pos:line="99" pos:column="15">(<pos:position pos:line="99" pos:column="16"/></operator><name><name pos:line="99" pos:column="16">tagger_line<pos:position pos:line="99" pos:column="27"/></name><index pos:line="99" pos:column="27">[<expr><literal type="number" pos:line="99" pos:column="28">0<pos:position pos:line="99" pos:column="29"/></literal></expr>]<pos:position pos:line="99" pos:column="30"/></index></name> <operator pos:line="99" pos:column="31">==<pos:position pos:line="99" pos:column="33"/></operator> <literal type="char" pos:line="99" pos:column="34">'+'<pos:position pos:line="99" pos:column="37"/></literal> <operator pos:line="99" pos:column="38">||<pos:position pos:line="99" pos:column="40"/></operator> <name><name pos:line="99" pos:column="41">tagger_line<pos:position pos:line="99" pos:column="52"/></name><index pos:line="99" pos:column="52">[<expr><literal type="number" pos:line="99" pos:column="53">0<pos:position pos:line="99" pos:column="54"/></literal></expr>]<pos:position pos:line="99" pos:column="55"/></index></name> <operator pos:line="99" pos:column="56">==<pos:position pos:line="99" pos:column="58"/></operator> <literal type="char" pos:line="99" pos:column="59">'-'<pos:position pos:line="99" pos:column="62"/></literal><operator pos:line="99" pos:column="62">)<pos:position pos:line="99" pos:column="63"/></operator> <operator pos:line="99" pos:column="64">&amp;&amp;<pos:position pos:line="99" pos:column="74"/></operator>
	      <call><name pos:line="100" pos:column="15">strspn<pos:position pos:line="100" pos:column="21"/></name><argument_list pos:line="100" pos:column="21">(<argument><expr><name pos:line="100" pos:column="22">tagger_line<pos:position pos:line="100" pos:column="33"/></name><operator pos:line="100" pos:column="33">+<pos:position pos:line="100" pos:column="34"/></operator><literal type="number" pos:line="100" pos:column="34">1<pos:position pos:line="100" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="37">"0123456789"<pos:position pos:line="100" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="50"/></argument_list></call> <operator pos:line="100" pos:column="51">==<pos:position pos:line="100" pos:column="53"/></operator> <literal type="number" pos:line="100" pos:column="54">4<pos:position pos:line="100" pos:column="55"/></literal> <operator pos:line="100" pos:column="56">&amp;&amp;<pos:position pos:line="100" pos:column="66"/></operator>
	      <name><name pos:line="101" pos:column="15">tagger_line<pos:position pos:line="101" pos:column="26"/></name><index pos:line="101" pos:column="26">[<expr><literal type="number" pos:line="101" pos:column="27">5<pos:position pos:line="101" pos:column="28"/></literal></expr>]<pos:position pos:line="101" pos:column="29"/></index></name> <operator pos:line="101" pos:column="30">==<pos:position pos:line="101" pos:column="32"/></operator> <literal type="char" pos:line="101" pos:column="33">'\n'<pos:position pos:line="101" pos:column="37"/></literal> <operator pos:line="101" pos:column="38">&amp;&amp;<pos:position pos:line="101" pos:column="48"/></operator> <call><name pos:line="101" pos:column="41">atoi<pos:position pos:line="101" pos:column="45"/></name><argument_list pos:line="101" pos:column="45">(<argument><expr><name pos:line="101" pos:column="46">tagger_line<pos:position pos:line="101" pos:column="57"/></name><operator pos:line="101" pos:column="57">+<pos:position pos:line="101" pos:column="58"/></operator><literal type="number" pos:line="101" pos:column="58">1<pos:position pos:line="101" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="60"/></argument_list></call> <operator pos:line="101" pos:column="61">&lt;=<pos:position pos:line="101" pos:column="66"/></operator> <literal type="number" pos:line="101" pos:column="64">1400<pos:position pos:line="101" pos:column="68"/></literal><operator pos:line="101" pos:column="68">)<pos:position pos:line="101" pos:column="69"/></operator></expr>)<pos:position pos:line="101" pos:column="70"/></condition><then pos:line="101" pos:column="70">
		<block type="pseudo"><return pos:line="102" pos:column="17">return <expr><call><name pos:line="102" pos:column="24">error<pos:position pos:line="102" pos:column="29"/></name><argument_list pos:line="102" pos:column="29">(<argument><expr><literal type="string" pos:line="102" pos:column="30">"char%"<pos:position pos:line="102" pos:column="37"/></literal><name pos:line="102" pos:column="37">PRIuMAX<pos:position pos:line="102" pos:column="44"/></name><literal type="string" pos:line="102" pos:column="44">": malformed tag timezone"<pos:position pos:line="102" pos:column="70"/></literal></expr></argument>,
			<argument><expr><call pos:line="103" pos:column="25">(<name pos:line="103" pos:column="26">uintmax_t<pos:position pos:line="103" pos:column="35"/></name>) <argument_list pos:line="103" pos:column="37">(<argument><expr><name pos:line="103" pos:column="38">tagger_line<pos:position pos:line="103" pos:column="49"/></name> <operator pos:line="103" pos:column="50">-<pos:position pos:line="103" pos:column="51"/></operator> <name pos:line="103" pos:column="52">buffer<pos:position pos:line="103" pos:column="58"/></name></expr></argument>)<pos:position pos:line="103" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="103" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="61"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="104" pos:column="9">tagger_line<pos:position pos:line="104" pos:column="20"/></name> <operator pos:line="104" pos:column="21">+=<pos:position pos:line="104" pos:column="23"/></operator> <literal type="number" pos:line="104" pos:column="24">6<pos:position pos:line="104" pos:column="25"/></literal></expr>;<pos:position pos:line="104" pos:column="26"/></expr_stmt>

	<comment type="block" pos:line="106" pos:column="9">/* Verify the blank line separating the header from the body */</comment>
	<if pos:line="107" pos:column="9">if <condition pos:line="107" pos:column="12">(<expr><operator pos:line="107" pos:column="13">*<pos:position pos:line="107" pos:column="14"/></operator><name pos:line="107" pos:column="14">tagger_line<pos:position pos:line="107" pos:column="25"/></name> <operator pos:line="107" pos:column="26">!=<pos:position pos:line="107" pos:column="28"/></operator> <literal type="char" pos:line="107" pos:column="29">'\n'<pos:position pos:line="107" pos:column="33"/></literal></expr>)<pos:position pos:line="107" pos:column="34"/></condition><then pos:line="107" pos:column="34">
		<block type="pseudo"><return pos:line="108" pos:column="17">return <expr><call><name pos:line="108" pos:column="24">error<pos:position pos:line="108" pos:column="29"/></name><argument_list pos:line="108" pos:column="29">(<argument><expr><literal type="string" pos:line="108" pos:column="30">"char%"<pos:position pos:line="108" pos:column="37"/></literal><name pos:line="108" pos:column="37">PRIuMAX<pos:position pos:line="108" pos:column="44"/></name><literal type="string" pos:line="108" pos:column="44">": trailing garbage in tag header"<pos:position pos:line="108" pos:column="78"/></literal></expr></argument>,
			<argument><expr><call pos:line="109" pos:column="25">(<name pos:line="109" pos:column="26">uintmax_t<pos:position pos:line="109" pos:column="35"/></name>) <argument_list pos:line="109" pos:column="37">(<argument><expr><name pos:line="109" pos:column="38">tagger_line<pos:position pos:line="109" pos:column="49"/></name> <operator pos:line="109" pos:column="50">-<pos:position pos:line="109" pos:column="51"/></operator> <name pos:line="109" pos:column="52">buffer<pos:position pos:line="109" pos:column="58"/></name></expr></argument>)<pos:position pos:line="109" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="109" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="61"/></return></block></then></if>

	<comment type="block" pos:line="111" pos:column="9">/* The actual stuff afterwards we don't care about.. */</comment>
	<return pos:line="112" pos:column="9">return <expr><literal type="number" pos:line="112" pos:column="16">0<pos:position pos:line="112" pos:column="17"/></literal></expr>;<pos:position pos:line="112" pos:column="18"/></return>
}<pos:position pos:line="113" pos:column="2"/></block></function></unit>
