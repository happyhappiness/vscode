<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5797_git-2.8.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">log_ref_write_fd<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">fd<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">unsigned<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">old_sha1<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">unsigned<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">new_sha1<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="3" pos:column="29">const<pos:position pos:line="3" pos:column="34"/></specifier> <name pos:line="3" pos:column="35">char<pos:position pos:line="3" pos:column="39"/></name> <modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier></type><name pos:line="3" pos:column="41">committer<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="52">const<pos:position pos:line="3" pos:column="57"/></specifier> <name pos:line="3" pos:column="58">char<pos:position pos:line="3" pos:column="62"/></name> <modifier pos:line="3" pos:column="63">*<pos:position pos:line="3" pos:column="64"/></modifier></type><name pos:line="3" pos:column="64">msg<pos:position pos:line="3" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="68"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">msglen<pos:position pos:line="5" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="21">written<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">maxlen<pos:position pos:line="6" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="26">len<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">logrec<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">msglen<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <ternary><condition><expr><name pos:line="9" pos:column="18">msg<pos:position pos:line="9" pos:column="21"/></name></expr> ?<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23"> <expr><call><name pos:line="9" pos:column="24">strlen<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">(<argument><expr><name pos:line="9" pos:column="31">msg<pos:position pos:line="9" pos:column="34"/></name></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr> <pos:position pos:line="9" pos:column="36"/></then><else pos:line="9" pos:column="36">: <expr><literal type="number" pos:line="9" pos:column="38">0<pos:position pos:line="9" pos:column="39"/></literal></expr></else></ternary></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name pos:line="10" pos:column="9">maxlen<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <call><name pos:line="10" pos:column="18">strlen<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">committer<pos:position pos:line="10" pos:column="34"/></name></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call> <operator pos:line="10" pos:column="36">+<pos:position pos:line="10" pos:column="37"/></operator> <name pos:line="10" pos:column="38">msglen<pos:position pos:line="10" pos:column="44"/></name> <operator pos:line="10" pos:column="45">+<pos:position pos:line="10" pos:column="46"/></operator> <literal type="number" pos:line="10" pos:column="47">100<pos:position pos:line="10" pos:column="50"/></literal></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name pos:line="11" pos:column="9">logrec<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <call><name pos:line="11" pos:column="18">xmalloc<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">maxlen<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="12" pos:column="9">len<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <call><name pos:line="12" pos:column="15">xsnprintf<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">logrec<pos:position pos:line="12" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="33">maxlen<pos:position pos:line="12" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="41">"%s %s %s\n"<pos:position pos:line="12" pos:column="53"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="13" pos:column="25">sha1_to_hex<pos:position pos:line="13" pos:column="36"/></name><argument_list pos:line="13" pos:column="36">(<argument><expr><name pos:line="13" pos:column="37">old_sha1<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="14" pos:column="25">sha1_to_hex<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><name pos:line="14" pos:column="37">new_sha1<pos:position pos:line="14" pos:column="45"/></name></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="15" pos:column="25">committer<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">msglen<pos:position pos:line="16" pos:column="19"/></name></expr>)<pos:position pos:line="16" pos:column="20"/></condition><then pos:line="16" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">len<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">+=<pos:position pos:line="17" pos:column="23"/></operator> <call><name pos:line="17" pos:column="24">copy_reflog_msg<pos:position pos:line="17" pos:column="39"/></name><argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">logrec<pos:position pos:line="17" pos:column="46"/></name> <operator pos:line="17" pos:column="47">+<pos:position pos:line="17" pos:column="48"/></operator> <name pos:line="17" pos:column="49">len<pos:position pos:line="17" pos:column="52"/></name> <operator pos:line="17" pos:column="53">-<pos:position pos:line="17" pos:column="54"/></operator> <literal type="number" pos:line="17" pos:column="55">1<pos:position pos:line="17" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="58">msg<pos:position pos:line="17" pos:column="61"/></name></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></call> <operator pos:line="17" pos:column="63">-<pos:position pos:line="17" pos:column="64"/></operator> <literal type="number" pos:line="17" pos:column="65">1<pos:position pos:line="17" pos:column="66"/></literal></expr>;<pos:position pos:line="17" pos:column="67"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">written<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <ternary><condition><expr><name pos:line="19" pos:column="19">len<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">&lt;=<pos:position pos:line="19" pos:column="28"/></operator> <name pos:line="19" pos:column="26">maxlen<pos:position pos:line="19" pos:column="32"/></name></expr> ?<pos:position pos:line="19" pos:column="34"/></condition><then pos:line="19" pos:column="34"> <expr><call><name pos:line="19" pos:column="35">write_in_full<pos:position pos:line="19" pos:column="48"/></name><argument_list pos:line="19" pos:column="48">(<argument><expr><name pos:line="19" pos:column="49">fd<pos:position pos:line="19" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="53">logrec<pos:position pos:line="19" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="61">len<pos:position pos:line="19" pos:column="64"/></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr> <pos:position pos:line="19" pos:column="66"/></then><else pos:line="19" pos:column="66">: <expr><operator pos:line="19" pos:column="68">-<pos:position pos:line="19" pos:column="69"/></operator><literal type="number" pos:line="19" pos:column="69">1<pos:position pos:line="19" pos:column="70"/></literal></expr></else></ternary></expr>;<pos:position pos:line="19" pos:column="71"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">free<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name pos:line="20" pos:column="14">logrec<pos:position pos:line="20" pos:column="20"/></name></expr></argument>)<pos:position pos:line="20" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="22"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">written<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">!=<pos:position pos:line="21" pos:column="23"/></operator> <name pos:line="21" pos:column="24">len<pos:position pos:line="21" pos:column="27"/></name></expr>)<pos:position pos:line="21" pos:column="28"/></condition><then pos:line="21" pos:column="28">
		<block type="pseudo"><return pos:line="22" pos:column="17">return <expr><operator pos:line="22" pos:column="24">-<pos:position pos:line="22" pos:column="25"/></operator><literal type="number" pos:line="22" pos:column="25">1<pos:position pos:line="22" pos:column="26"/></literal></expr>;<pos:position pos:line="22" pos:column="27"/></return></block></then></if>

	<return pos:line="24" pos:column="9">return <expr><literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
