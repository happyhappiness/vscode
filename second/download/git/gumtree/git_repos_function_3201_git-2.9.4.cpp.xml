<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3201_git-2.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">update_file_flags<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">merge_options<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">o<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">unsigned<pos:position pos:line="2" pos:column="45"/></name> <name pos:line="2" pos:column="46">char<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">sha<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="3" pos:column="31">unsigned<pos:position pos:line="3" pos:column="39"/></name></type> <name pos:line="3" pos:column="40">mode<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="4" pos:column="31">const<pos:position pos:line="4" pos:column="36"/></specifier> <name pos:line="4" pos:column="37">char<pos:position pos:line="4" pos:column="41"/></name> <modifier pos:line="4" pos:column="42">*<pos:position pos:line="4" pos:column="43"/></modifier></type><name pos:line="4" pos:column="43">path<pos:position pos:line="4" pos:column="47"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="5" pos:column="31">int<pos:position pos:line="5" pos:column="34"/></name></type> <name pos:line="5" pos:column="35">update_cache<pos:position pos:line="5" pos:column="47"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="6" pos:column="31">int<pos:position pos:line="6" pos:column="34"/></name></type> <name pos:line="6" pos:column="35">update_wd<pos:position pos:line="6" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="45"/></parameter_list>
<block pos:line="7" pos:column="1">{
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">o<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">-&gt;<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="16">call_depth<pos:position pos:line="8" pos:column="26"/></name></name></expr>)<pos:position pos:line="8" pos:column="27"/></condition><then pos:line="8" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">update_wd<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">=<pos:position pos:line="9" pos:column="28"/></operator> <literal type="number" pos:line="9" pos:column="29">0<pos:position pos:line="9" pos:column="30"/></literal></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">update_wd<pos:position pos:line="11" pos:column="22"/></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23"> <block pos:line="11" pos:column="24">{
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">enum<pos:position pos:line="12" pos:column="21"/></name> <name pos:line="12" pos:column="22">object_type<pos:position pos:line="12" pos:column="33"/></name></name></type> <name pos:line="12" pos:column="34">type<pos:position pos:line="12" pos:column="38"/></name></decl>;<pos:position pos:line="12" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">void<pos:position pos:line="13" pos:column="21"/></name> <modifier pos:line="13" pos:column="22">*<pos:position pos:line="13" pos:column="23"/></modifier></type><name pos:line="13" pos:column="23">buf<pos:position pos:line="13" pos:column="26"/></name></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">unsigned<pos:position pos:line="14" pos:column="25"/></name> <name pos:line="14" pos:column="26">long<pos:position pos:line="14" pos:column="30"/></name></type> <name pos:line="14" pos:column="31">size<pos:position pos:line="14" pos:column="35"/></name></decl>;<pos:position pos:line="14" pos:column="36"/></decl_stmt>

		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">S_ISGITLINK<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">mode<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="39"/></condition><then pos:line="16" pos:column="39"> <block pos:line="16" pos:column="40">{
			<comment type="block" pos:line="17" pos:column="25">/*
			 * We may later decide to recursively descend into
			 * the submodule directory and update its index
			 * and/or work tree, but we do not do that now.
			 */</comment>
			<expr_stmt><expr><name pos:line="22" pos:column="25">update_wd<pos:position pos:line="22" pos:column="34"/></name> <operator pos:line="22" pos:column="35">=<pos:position pos:line="22" pos:column="36"/></operator> <literal type="number" pos:line="22" pos:column="37">0<pos:position pos:line="22" pos:column="38"/></literal></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>
			<goto pos:line="23" pos:column="25">goto <name pos:line="23" pos:column="30">update_index<pos:position pos:line="23" pos:column="42"/></name>;<pos:position pos:line="23" pos:column="43"/></goto>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="26" pos:column="17">buf<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <call><name pos:line="26" pos:column="23">read_sha1_file<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><name pos:line="26" pos:column="38">sha<pos:position pos:line="26" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="43">&amp;<pos:position pos:line="26" pos:column="48"/></operator><name pos:line="26" pos:column="44">type<pos:position pos:line="26" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="50">&amp;<pos:position pos:line="26" pos:column="55"/></operator><name pos:line="26" pos:column="51">size<pos:position pos:line="26" pos:column="55"/></name></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="57"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="22">buf<pos:position pos:line="27" pos:column="25"/></name></expr>)<pos:position pos:line="27" pos:column="26"/></condition><then pos:line="27" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">die<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><call><name pos:line="28" pos:column="29">_<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><literal type="string" pos:line="28" pos:column="31">"cannot read object %s '%s'"<pos:position pos:line="28" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="62">sha1_to_hex<pos:position pos:line="28" pos:column="73"/></name><argument_list pos:line="28" pos:column="73">(<argument><expr><name pos:line="28" pos:column="74">sha<pos:position pos:line="28" pos:column="77"/></name></expr></argument>)<pos:position pos:line="28" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="80">path<pos:position pos:line="28" pos:column="84"/></name></expr></argument>)<pos:position pos:line="28" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="86"/></expr_stmt></block></then></if>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">type<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">!=<pos:position pos:line="29" pos:column="28"/></operator> <name pos:line="29" pos:column="29">OBJ_BLOB<pos:position pos:line="29" pos:column="37"/></name></expr>)<pos:position pos:line="29" pos:column="38"/></condition><then pos:line="29" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="25">die<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><call><name pos:line="30" pos:column="29">_<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><literal type="string" pos:line="30" pos:column="31">"blob expected for %s '%s'"<pos:position pos:line="30" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="61">sha1_to_hex<pos:position pos:line="30" pos:column="72"/></name><argument_list pos:line="30" pos:column="72">(<argument><expr><name pos:line="30" pos:column="73">sha<pos:position pos:line="30" pos:column="76"/></name></expr></argument>)<pos:position pos:line="30" pos:column="77"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="30" pos:column="79">path<pos:position pos:line="30" pos:column="83"/></name></expr></argument>)<pos:position pos:line="30" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="85"/></expr_stmt></block></then></if>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><call><name pos:line="31" pos:column="21">S_ISREG<pos:position pos:line="31" pos:column="28"/></name><argument_list pos:line="31" pos:column="28">(<argument><expr><name pos:line="31" pos:column="29">mode<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35"> <block pos:line="31" pos:column="36">{
			<decl_stmt><decl><type><name><name pos:line="32" pos:column="25">struct<pos:position pos:line="32" pos:column="31"/></name> <name pos:line="32" pos:column="32">strbuf<pos:position pos:line="32" pos:column="38"/></name></name></type> <name pos:line="32" pos:column="39">strbuf<pos:position pos:line="32" pos:column="45"/></name> <init pos:line="32" pos:column="46">= <expr><name pos:line="32" pos:column="48">STRBUF_INIT<pos:position pos:line="32" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="60"/></decl_stmt>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><call><name pos:line="33" pos:column="29">convert_to_working_tree<pos:position pos:line="33" pos:column="52"/></name><argument_list pos:line="33" pos:column="52">(<argument><expr><name pos:line="33" pos:column="53">path<pos:position pos:line="33" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="59">buf<pos:position pos:line="33" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="64">size<pos:position pos:line="33" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="70">&amp;<pos:position pos:line="33" pos:column="75"/></operator><name pos:line="33" pos:column="71">strbuf<pos:position pos:line="33" pos:column="77"/></name></expr></argument>)<pos:position pos:line="33" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="79"/></condition><then pos:line="33" pos:column="79"> <block pos:line="33" pos:column="80">{
				<expr_stmt><expr><call><name pos:line="34" pos:column="33">free<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">buf<pos:position pos:line="34" pos:column="41"/></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
				<expr_stmt><expr><name pos:line="35" pos:column="33">size<pos:position pos:line="35" pos:column="37"/></name> <operator pos:line="35" pos:column="38">=<pos:position pos:line="35" pos:column="39"/></operator> <name><name pos:line="35" pos:column="40">strbuf<pos:position pos:line="35" pos:column="46"/></name><operator pos:line="35" pos:column="46">.<pos:position pos:line="35" pos:column="47"/></operator><name pos:line="35" pos:column="47">len<pos:position pos:line="35" pos:column="50"/></name></name></expr>;<pos:position pos:line="35" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><name pos:line="36" pos:column="33">buf<pos:position pos:line="36" pos:column="36"/></name> <operator pos:line="36" pos:column="37">=<pos:position pos:line="36" pos:column="38"/></operator> <call><name pos:line="36" pos:column="39">strbuf_detach<pos:position pos:line="36" pos:column="52"/></name><argument_list pos:line="36" pos:column="52">(<argument><expr><operator pos:line="36" pos:column="53">&amp;<pos:position pos:line="36" pos:column="58"/></operator><name pos:line="36" pos:column="54">strbuf<pos:position pos:line="36" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="62">NULL<pos:position pos:line="36" pos:column="66"/></name></expr></argument>)<pos:position pos:line="36" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="68"/></expr_stmt>
			}<pos:position pos:line="37" pos:column="26"/></block></then></if>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>

		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><call><name pos:line="40" pos:column="21">make_room_for_path<pos:position pos:line="40" pos:column="39"/></name><argument_list pos:line="40" pos:column="39">(<argument><expr><name pos:line="40" pos:column="40">o<pos:position pos:line="40" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="43">path<pos:position pos:line="40" pos:column="47"/></name></expr></argument>)<pos:position pos:line="40" pos:column="48"/></argument_list></call> <operator pos:line="40" pos:column="49">&lt;<pos:position pos:line="40" pos:column="53"/></operator> <literal type="number" pos:line="40" pos:column="51">0<pos:position pos:line="40" pos:column="52"/></literal></expr>)<pos:position pos:line="40" pos:column="53"/></condition><then pos:line="40" pos:column="53"> <block pos:line="40" pos:column="54">{
			<expr_stmt><expr><name pos:line="41" pos:column="25">update_wd<pos:position pos:line="41" pos:column="34"/></name> <operator pos:line="41" pos:column="35">=<pos:position pos:line="41" pos:column="36"/></operator> <literal type="number" pos:line="41" pos:column="37">0<pos:position pos:line="41" pos:column="38"/></literal></expr>;<pos:position pos:line="41" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">free<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">buf<pos:position pos:line="42" pos:column="33"/></name></expr></argument>)<pos:position pos:line="42" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt>
			<goto pos:line="43" pos:column="25">goto <name pos:line="43" pos:column="30">update_index<pos:position pos:line="43" pos:column="42"/></name>;<pos:position pos:line="43" pos:column="43"/></goto>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><call><name pos:line="45" pos:column="21">S_ISREG<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><name pos:line="45" pos:column="29">mode<pos:position pos:line="45" pos:column="33"/></name></expr></argument>)<pos:position pos:line="45" pos:column="34"/></argument_list></call> <operator pos:line="45" pos:column="35">||<pos:position pos:line="45" pos:column="37"/></operator> <operator pos:line="45" pos:column="38">(<pos:position pos:line="45" pos:column="39"/></operator><operator pos:line="45" pos:column="39">!<pos:position pos:line="45" pos:column="40"/></operator><name pos:line="45" pos:column="40">has_symlinks<pos:position pos:line="45" pos:column="52"/></name> <operator pos:line="45" pos:column="53">&amp;&amp;<pos:position pos:line="45" pos:column="63"/></operator> <call><name pos:line="45" pos:column="56">S_ISLNK<pos:position pos:line="45" pos:column="63"/></name><argument_list pos:line="45" pos:column="63">(<argument><expr><name pos:line="45" pos:column="64">mode<pos:position pos:line="45" pos:column="68"/></name></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call><operator pos:line="45" pos:column="69">)<pos:position pos:line="45" pos:column="70"/></operator></expr>)<pos:position pos:line="45" pos:column="71"/></condition><then pos:line="45" pos:column="71"> <block pos:line="45" pos:column="72">{
			<decl_stmt><decl><type><name pos:line="46" pos:column="25">int<pos:position pos:line="46" pos:column="28"/></name></type> <name pos:line="46" pos:column="29">fd<pos:position pos:line="46" pos:column="31"/></name></decl>;<pos:position pos:line="46" pos:column="32"/></decl_stmt>
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><name pos:line="47" pos:column="29">mode<pos:position pos:line="47" pos:column="33"/></name> <operator pos:line="47" pos:column="34">&amp;<pos:position pos:line="47" pos:column="39"/></operator> <literal type="number" pos:line="47" pos:column="36">0100<pos:position pos:line="47" pos:column="40"/></literal></expr>)<pos:position pos:line="47" pos:column="41"/></condition><then pos:line="47" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="33">mode<pos:position pos:line="48" pos:column="37"/></name> <operator pos:line="48" pos:column="38">=<pos:position pos:line="48" pos:column="39"/></operator> <literal type="number" pos:line="48" pos:column="40">0777<pos:position pos:line="48" pos:column="44"/></literal></expr>;<pos:position pos:line="48" pos:column="45"/></expr_stmt></block></then>
			<else pos:line="49" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="33">mode<pos:position pos:line="50" pos:column="37"/></name> <operator pos:line="50" pos:column="38">=<pos:position pos:line="50" pos:column="39"/></operator> <literal type="number" pos:line="50" pos:column="40">0666<pos:position pos:line="50" pos:column="44"/></literal></expr>;<pos:position pos:line="50" pos:column="45"/></expr_stmt></block></else></if>
			<expr_stmt><expr><name pos:line="51" pos:column="25">fd<pos:position pos:line="51" pos:column="27"/></name> <operator pos:line="51" pos:column="28">=<pos:position pos:line="51" pos:column="29"/></operator> <call><name pos:line="51" pos:column="30">open<pos:position pos:line="51" pos:column="34"/></name><argument_list pos:line="51" pos:column="34">(<argument><expr><name pos:line="51" pos:column="35">path<pos:position pos:line="51" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="41">O_WRONLY<pos:position pos:line="51" pos:column="49"/></name> <operator pos:line="51" pos:column="50">|<pos:position pos:line="51" pos:column="51"/></operator> <name pos:line="51" pos:column="52">O_TRUNC<pos:position pos:line="51" pos:column="59"/></name> <operator pos:line="51" pos:column="60">|<pos:position pos:line="51" pos:column="61"/></operator> <name pos:line="51" pos:column="62">O_CREAT<pos:position pos:line="51" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="71">mode<pos:position pos:line="51" pos:column="75"/></name></expr></argument>)<pos:position pos:line="51" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="77"/></expr_stmt>
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><name pos:line="52" pos:column="29">fd<pos:position pos:line="52" pos:column="31"/></name> <operator pos:line="52" pos:column="32">&lt;<pos:position pos:line="52" pos:column="36"/></operator> <literal type="number" pos:line="52" pos:column="34">0<pos:position pos:line="52" pos:column="35"/></literal></expr>)<pos:position pos:line="52" pos:column="36"/></condition><then pos:line="52" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="33">die_errno<pos:position pos:line="53" pos:column="42"/></name><argument_list pos:line="53" pos:column="42">(<argument><expr><call><name pos:line="53" pos:column="43">_<pos:position pos:line="53" pos:column="44"/></name><argument_list pos:line="53" pos:column="44">(<argument><expr><literal type="string" pos:line="53" pos:column="45">"failed to open '%s'"<pos:position pos:line="53" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="53" pos:column="69">path<pos:position pos:line="53" pos:column="73"/></name></expr></argument>)<pos:position pos:line="53" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="75"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="54" pos:column="25">write_in_full<pos:position pos:line="54" pos:column="38"/></name><argument_list pos:line="54" pos:column="38">(<argument><expr><name pos:line="54" pos:column="39">fd<pos:position pos:line="54" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="43">buf<pos:position pos:line="54" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="48">size<pos:position pos:line="54" pos:column="52"/></name></expr></argument>)<pos:position pos:line="54" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">close<pos:position pos:line="55" pos:column="30"/></name><argument_list pos:line="55" pos:column="30">(<argument><expr><name pos:line="55" pos:column="31">fd<pos:position pos:line="55" pos:column="33"/></name></expr></argument>)<pos:position pos:line="55" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="56" pos:column="18"/></block></then> <elseif pos:line="56" pos:column="19">else <if pos:line="56" pos:column="24">if <condition pos:line="56" pos:column="27">(<expr><call><name pos:line="56" pos:column="28">S_ISLNK<pos:position pos:line="56" pos:column="35"/></name><argument_list pos:line="56" pos:column="35">(<argument><expr><name pos:line="56" pos:column="36">mode<pos:position pos:line="56" pos:column="40"/></name></expr></argument>)<pos:position pos:line="56" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="42"/></condition><then pos:line="56" pos:column="42"> <block pos:line="56" pos:column="43">{
			<decl_stmt><decl><type><name pos:line="57" pos:column="25">char<pos:position pos:line="57" pos:column="29"/></name> <modifier pos:line="57" pos:column="30">*<pos:position pos:line="57" pos:column="31"/></modifier></type><name pos:line="57" pos:column="31">lnk<pos:position pos:line="57" pos:column="34"/></name> <init pos:line="57" pos:column="35">= <expr><call><name pos:line="57" pos:column="37">xmemdupz<pos:position pos:line="57" pos:column="45"/></name><argument_list pos:line="57" pos:column="45">(<argument><expr><name pos:line="57" pos:column="46">buf<pos:position pos:line="57" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="51">size<pos:position pos:line="57" pos:column="55"/></name></expr></argument>)<pos:position pos:line="57" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="57" pos:column="57"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">safe_create_leading_directories_const<pos:position pos:line="58" pos:column="62"/></name><argument_list pos:line="58" pos:column="62">(<argument><expr><name pos:line="58" pos:column="63">path<pos:position pos:line="58" pos:column="67"/></name></expr></argument>)<pos:position pos:line="58" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">unlink<pos:position pos:line="59" pos:column="31"/></name><argument_list pos:line="59" pos:column="31">(<argument><expr><name pos:line="59" pos:column="32">path<pos:position pos:line="59" pos:column="36"/></name></expr></argument>)<pos:position pos:line="59" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><call><name pos:line="60" pos:column="29">symlink<pos:position pos:line="60" pos:column="36"/></name><argument_list pos:line="60" pos:column="36">(<argument><expr><name pos:line="60" pos:column="37">lnk<pos:position pos:line="60" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="42">path<pos:position pos:line="60" pos:column="46"/></name></expr></argument>)<pos:position pos:line="60" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="48"/></condition><then pos:line="60" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="33">die_errno<pos:position pos:line="61" pos:column="42"/></name><argument_list pos:line="61" pos:column="42">(<argument><expr><call><name pos:line="61" pos:column="43">_<pos:position pos:line="61" pos:column="44"/></name><argument_list pos:line="61" pos:column="44">(<argument><expr><literal type="string" pos:line="61" pos:column="45">"failed to symlink '%s'"<pos:position pos:line="61" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="61" pos:column="72">path<pos:position pos:line="61" pos:column="76"/></name></expr></argument>)<pos:position pos:line="61" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="78"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">free<pos:position pos:line="62" pos:column="29"/></name><argument_list pos:line="62" pos:column="29">(<argument><expr><name pos:line="62" pos:column="30">lnk<pos:position pos:line="62" pos:column="33"/></name></expr></argument>)<pos:position pos:line="62" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="63" pos:column="18"/></block></then></if></elseif> <else pos:line="63" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="25">die<pos:position pos:line="64" pos:column="28"/></name><argument_list pos:line="64" pos:column="28">(<argument><expr><call><name pos:line="64" pos:column="29">_<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><literal type="string" pos:line="64" pos:column="31">"do not know what to do with %06o %s '%s'"<pos:position pos:line="64" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="74"/></argument_list></call></expr></argument>,
			    <argument><expr><name pos:line="65" pos:column="29">mode<pos:position pos:line="65" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="65" pos:column="35">sha1_to_hex<pos:position pos:line="65" pos:column="46"/></name><argument_list pos:line="65" pos:column="46">(<argument><expr><name pos:line="65" pos:column="47">sha<pos:position pos:line="65" pos:column="50"/></name></expr></argument>)<pos:position pos:line="65" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="65" pos:column="53">path<pos:position pos:line="65" pos:column="57"/></name></expr></argument>)<pos:position pos:line="65" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="59"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">free<pos:position pos:line="66" pos:column="21"/></name><argument_list pos:line="66" pos:column="21">(<argument><expr><name pos:line="66" pos:column="22">buf<pos:position pos:line="66" pos:column="25"/></name></expr></argument>)<pos:position pos:line="66" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></then></if>
 <label><name pos:line="68" pos:column="2">update_index<pos:position pos:line="68" pos:column="14"/></name>:<pos:position pos:line="68" pos:column="15"/></label>
	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">update_cache<pos:position pos:line="69" pos:column="25"/></name></expr>)<pos:position pos:line="69" pos:column="26"/></condition><then pos:line="69" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="17">add_cacheinfo<pos:position pos:line="70" pos:column="30"/></name><argument_list pos:line="70" pos:column="30">(<argument><expr><name pos:line="70" pos:column="31">mode<pos:position pos:line="70" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="37">sha<pos:position pos:line="70" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="42">path<pos:position pos:line="70" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="48">0<pos:position pos:line="70" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="51">update_wd<pos:position pos:line="70" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="62">ADD_CACHE_OK_TO_ADD<pos:position pos:line="70" pos:column="81"/></name></expr></argument>)<pos:position pos:line="70" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="83"/></expr_stmt></block></then></if>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
