<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3016_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">commit_staged_changes<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">replay_opts<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">opts<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">flags<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><name pos:line="3" pos:column="30">ALLOW_EMPTY<pos:position pos:line="3" pos:column="41"/></name> <operator pos:line="3" pos:column="42">|<pos:position pos:line="3" pos:column="43"/></operator> <name pos:line="3" pos:column="44">EDIT_MSG<pos:position pos:line="3" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="53"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">has_unstaged_changes<pos:position pos:line="5" pos:column="33"/></name><argument_list pos:line="5" pos:column="33">(<argument><expr><literal type="number" pos:line="5" pos:column="34">1<pos:position pos:line="5" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="37"/></condition><then pos:line="5" pos:column="37">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><call><name pos:line="6" pos:column="24">error<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><call><name pos:line="6" pos:column="30">_<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><literal type="string" pos:line="6" pos:column="32">"cannot rebase: You have unstaged changes."<pos:position pos:line="6" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="78"/></return></block></then></if>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><call><name pos:line="7" pos:column="14">has_uncommitted_changes<pos:position pos:line="7" pos:column="37"/></name><argument_list pos:line="7" pos:column="37">(<argument><expr><literal type="number" pos:line="7" pos:column="38">0<pos:position pos:line="7" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="41"/></condition><then pos:line="7" pos:column="41"> <block pos:line="7" pos:column="42">{
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name pos:line="8" pos:column="23">char<pos:position pos:line="8" pos:column="27"/></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">cherry_pick_head<pos:position pos:line="8" pos:column="45"/></name> <init pos:line="8" pos:column="46">= <expr><call><name pos:line="8" pos:column="48">git_path_cherry_pick_head<pos:position pos:line="8" pos:column="73"/></name><argument_list pos:line="8" pos:column="73">()<pos:position pos:line="8" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="76"/></decl_stmt>

		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">file_exists<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name pos:line="10" pos:column="33">cherry_pick_head<pos:position pos:line="10" pos:column="49"/></name></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call> <operator pos:line="10" pos:column="51">&amp;&amp;<pos:position pos:line="10" pos:column="61"/></operator> <call><name pos:line="10" pos:column="54">unlink<pos:position pos:line="10" pos:column="60"/></name><argument_list pos:line="10" pos:column="60">(<argument><expr><name pos:line="10" pos:column="61">cherry_pick_head<pos:position pos:line="10" pos:column="77"/></name></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="79"/></condition><then pos:line="10" pos:column="79">
			<block type="pseudo"><return pos:line="11" pos:column="25">return <expr><call><name pos:line="11" pos:column="32">error<pos:position pos:line="11" pos:column="37"/></name><argument_list pos:line="11" pos:column="37">(<argument><expr><call><name pos:line="11" pos:column="38">_<pos:position pos:line="11" pos:column="39"/></name><argument_list pos:line="11" pos:column="39">(<argument><expr><literal type="string" pos:line="11" pos:column="40">"could not remove CHERRY_PICK_HEAD"<pos:position pos:line="11" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="78"/></return></block></then></if>
		<return pos:line="12" pos:column="17">return <expr><literal type="number" pos:line="12" pos:column="24">0<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">file_exists<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><call><name pos:line="15" pos:column="25">rebase_path_amend<pos:position pos:line="15" pos:column="42"/></name><argument_list pos:line="15" pos:column="42">()<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="46"/></condition><then pos:line="15" pos:column="46"> <block pos:line="15" pos:column="47">{
		<decl_stmt><decl><type><name><name pos:line="16" pos:column="17">struct<pos:position pos:line="16" pos:column="23"/></name> <name pos:line="16" pos:column="24">strbuf<pos:position pos:line="16" pos:column="30"/></name></name></type> <name pos:line="16" pos:column="31">rev<pos:position pos:line="16" pos:column="34"/></name> <init pos:line="16" pos:column="35">= <expr><name pos:line="16" pos:column="37">STRBUF_INIT<pos:position pos:line="16" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="49"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">unsigned<pos:position pos:line="17" pos:column="25"/></name> <name pos:line="17" pos:column="26">char<pos:position pos:line="17" pos:column="30"/></name></type> <name><name pos:line="17" pos:column="31">head<pos:position pos:line="17" pos:column="35"/></name><index pos:line="17" pos:column="35">[<expr><literal type="number" pos:line="17" pos:column="36">20<pos:position pos:line="17" pos:column="38"/></literal></expr>]<pos:position pos:line="17" pos:column="39"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="17" pos:column="41">to_amend<pos:position pos:line="17" pos:column="49"/></name><index pos:line="17" pos:column="49">[<expr><literal type="number" pos:line="17" pos:column="50">20<pos:position pos:line="17" pos:column="52"/></literal></expr>]<pos:position pos:line="17" pos:column="53"/></index></name></decl>;<pos:position pos:line="17" pos:column="54"/></decl_stmt>

		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><call><name pos:line="19" pos:column="21">get_sha1<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><literal type="string" pos:line="19" pos:column="30">"HEAD"<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="38">head<pos:position pos:line="19" pos:column="42"/></name></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="44"/></condition><then pos:line="19" pos:column="44">
			<block type="pseudo"><return pos:line="20" pos:column="25">return <expr><call><name pos:line="20" pos:column="32">error<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">(<argument><expr><call><name pos:line="20" pos:column="38">_<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><literal type="string" pos:line="20" pos:column="40">"cannot amend non-existing commit"<pos:position pos:line="20" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="77"/></return></block></then></if>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><call><name pos:line="21" pos:column="22">read_oneliner<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><operator pos:line="21" pos:column="36">&amp;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="37">rev<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="42">rebase_path_amend<pos:position pos:line="21" pos:column="59"/></name><argument_list pos:line="21" pos:column="59">()<pos:position pos:line="21" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="63">0<pos:position pos:line="21" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="66"/></condition><then pos:line="21" pos:column="66">
			<block type="pseudo"><return pos:line="22" pos:column="25">return <expr><call><name pos:line="22" pos:column="32">error<pos:position pos:line="22" pos:column="37"/></name><argument_list pos:line="22" pos:column="37">(<argument><expr><call><name pos:line="22" pos:column="38">_<pos:position pos:line="22" pos:column="39"/></name><argument_list pos:line="22" pos:column="39">(<argument><expr><literal type="string" pos:line="22" pos:column="40">"invalid file: '%s'"<pos:position pos:line="22" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="63">rebase_path_amend<pos:position pos:line="22" pos:column="80"/></name><argument_list pos:line="22" pos:column="80">()<pos:position pos:line="22" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="84"/></return></block></then></if>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><call><name pos:line="23" pos:column="21">get_sha1_hex<pos:position pos:line="23" pos:column="33"/></name><argument_list pos:line="23" pos:column="33">(<argument><expr><name><name pos:line="23" pos:column="34">rev<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">.<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="38">buf<pos:position pos:line="23" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="43">to_amend<pos:position pos:line="23" pos:column="51"/></name></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="53"/></condition><then pos:line="23" pos:column="53">
			<block type="pseudo"><return pos:line="24" pos:column="25">return <expr><call><name pos:line="24" pos:column="32">error<pos:position pos:line="24" pos:column="37"/></name><argument_list pos:line="24" pos:column="37">(<argument><expr><call><name pos:line="24" pos:column="38">_<pos:position pos:line="24" pos:column="39"/></name><argument_list pos:line="24" pos:column="39">(<argument><expr><literal type="string" pos:line="24" pos:column="40">"invalid contents: '%s'"<pos:position pos:line="24" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="65"/></argument_list></call></expr></argument>,
				<argument><expr><call><name pos:line="25" pos:column="33">rebase_path_amend<pos:position pos:line="25" pos:column="50"/></name><argument_list pos:line="25" pos:column="50">()<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="54"/></return></block></then></if>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><call><name pos:line="26" pos:column="21">hashcmp<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">head<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="35">to_amend<pos:position pos:line="26" pos:column="43"/></name></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="45"/></condition><then pos:line="26" pos:column="45">
			<block type="pseudo"><return pos:line="27" pos:column="25">return <expr><call><name pos:line="27" pos:column="32">error<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><call><name pos:line="27" pos:column="38">_<pos:position pos:line="27" pos:column="39"/></name><argument_list pos:line="27" pos:column="39">(<argument><expr><literal type="string" pos:line="27" pos:column="40">"\nYou have uncommitted changes in your "<pos:position pos:line="27" pos:column="81"/></literal>
				       <literal type="string" pos:line="28" pos:column="40">"working tree. Please, commit them\n"<pos:position pos:line="28" pos:column="77"/></literal>
				       <literal type="string" pos:line="29" pos:column="40">"first and then run 'git rebase "<pos:position pos:line="29" pos:column="73"/></literal>
				       <literal type="string" pos:line="30" pos:column="40">"--continue' again."<pos:position pos:line="30" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="63"/></return></block></then></if>

		<expr_stmt><expr><call><name pos:line="32" pos:column="17">strbuf_release<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><operator pos:line="32" pos:column="32">&amp;<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="33">rev<pos:position pos:line="32" pos:column="36"/></name></expr></argument>)<pos:position pos:line="32" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">flags<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">|=<pos:position pos:line="33" pos:column="25"/></operator> <name pos:line="33" pos:column="26">AMEND_MSG<pos:position pos:line="33" pos:column="35"/></name></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><call><name pos:line="36" pos:column="13">run_git_commit<pos:position pos:line="36" pos:column="27"/></name><argument_list pos:line="36" pos:column="27">(<argument><expr><call><name pos:line="36" pos:column="28">rebase_path_message<pos:position pos:line="36" pos:column="47"/></name><argument_list pos:line="36" pos:column="47">()<pos:position pos:line="36" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="36" pos:column="51">opts<pos:position pos:line="36" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="57">flags<pos:position pos:line="36" pos:column="62"/></name></expr></argument>)<pos:position pos:line="36" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="64"/></condition><then pos:line="36" pos:column="64">
		<block type="pseudo"><return pos:line="37" pos:column="17">return <expr><call><name pos:line="37" pos:column="24">error<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><call><name pos:line="37" pos:column="30">_<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><literal type="string" pos:line="37" pos:column="32">"could not commit staged changes."<pos:position pos:line="37" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="69"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">unlink<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><call><name pos:line="38" pos:column="16">rebase_path_amend<pos:position pos:line="38" pos:column="33"/></name><argument_list pos:line="38" pos:column="33">()<pos:position pos:line="38" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="37"/></expr_stmt>
	<return pos:line="39" pos:column="9">return <expr><literal type="number" pos:line="39" pos:column="16">0<pos:position pos:line="39" pos:column="17"/></literal></expr>;<pos:position pos:line="39" pos:column="18"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
