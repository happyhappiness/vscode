<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2884_git-2.8.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">shorten_unambiguous_ref<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">refname<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">strict<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier><modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">scanf_fmts<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">static<pos:position pos:line="5" pos:column="15"/></specifier> <type><name pos:line="5" pos:column="16">int<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">nr_rules<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">short_name<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">nr_rules<pos:position pos:line="8" pos:column="22"/></name></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23"> <block pos:line="8" pos:column="24">{
		<comment type="block" pos:line="9" pos:column="17">/*
		 * Pre-generate scanf formats from ref_rev_parse_rules[].
		 * Generate a format suitable for scanf from a
		 * ref_rev_parse_rules rule by interpolating "%s" at the
		 * location of the "%.*s".
		 */</comment>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">size_t<pos:position pos:line="15" pos:column="23"/></name></type> <name pos:line="15" pos:column="24">total_len<pos:position pos:line="15" pos:column="33"/></name> <init pos:line="15" pos:column="34">= <expr><literal type="number" pos:line="15" pos:column="36">0<pos:position pos:line="15" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">size_t<pos:position pos:line="16" pos:column="23"/></name></type> <name pos:line="16" pos:column="24">offset<pos:position pos:line="16" pos:column="30"/></name> <init pos:line="16" pos:column="31">= <expr><literal type="number" pos:line="16" pos:column="33">0<pos:position pos:line="16" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="35"/></decl_stmt>

		<comment type="block" pos:line="18" pos:column="17">/* the rule list is NULL terminated, count them first */</comment>
		<for pos:line="19" pos:column="17">for <control pos:line="19" pos:column="21">(<init><expr><name pos:line="19" pos:column="22">nr_rules<pos:position pos:line="19" pos:column="30"/></name> <operator pos:line="19" pos:column="31">=<pos:position pos:line="19" pos:column="32"/></operator> <literal type="number" pos:line="19" pos:column="33">0<pos:position pos:line="19" pos:column="34"/></literal></expr>;<pos:position pos:line="19" pos:column="35"/></init> <condition><expr><name><name pos:line="19" pos:column="36">ref_rev_parse_rules<pos:position pos:line="19" pos:column="55"/></name><index pos:line="19" pos:column="55">[<expr><name pos:line="19" pos:column="56">nr_rules<pos:position pos:line="19" pos:column="64"/></name></expr>]<pos:position pos:line="19" pos:column="65"/></index></name></expr>;<pos:position pos:line="19" pos:column="66"/></condition> <incr><expr><name pos:line="19" pos:column="67">nr_rules<pos:position pos:line="19" pos:column="75"/></name><operator pos:line="19" pos:column="75">++<pos:position pos:line="19" pos:column="77"/></operator></expr></incr>)<pos:position pos:line="19" pos:column="78"/></control>
			<comment type="block" pos:line="20" pos:column="25">/* -2 for strlen("%.*s") - strlen("%s"); +1 for NUL */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="25">total_len<pos:position pos:line="21" pos:column="34"/></name> <operator pos:line="21" pos:column="35">+=<pos:position pos:line="21" pos:column="37"/></operator> <call><name pos:line="21" pos:column="38">strlen<pos:position pos:line="21" pos:column="44"/></name><argument_list pos:line="21" pos:column="44">(<argument><expr><name><name pos:line="21" pos:column="45">ref_rev_parse_rules<pos:position pos:line="21" pos:column="64"/></name><index pos:line="21" pos:column="64">[<expr><name pos:line="21" pos:column="65">nr_rules<pos:position pos:line="21" pos:column="73"/></name></expr>]<pos:position pos:line="21" pos:column="74"/></index></name></expr></argument>)<pos:position pos:line="21" pos:column="75"/></argument_list></call> <operator pos:line="21" pos:column="76">-<pos:position pos:line="21" pos:column="77"/></operator> <literal type="number" pos:line="21" pos:column="78">2<pos:position pos:line="21" pos:column="79"/></literal> <operator pos:line="21" pos:column="80">+<pos:position pos:line="21" pos:column="81"/></operator> <literal type="number" pos:line="21" pos:column="82">1<pos:position pos:line="21" pos:column="83"/></literal></expr>;<pos:position pos:line="21" pos:column="84"/></expr_stmt></block></for>

		<expr_stmt><expr><name pos:line="23" pos:column="17">scanf_fmts<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">=<pos:position pos:line="23" pos:column="29"/></operator> <call><name pos:line="23" pos:column="30">xmalloc<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><call><name pos:line="23" pos:column="38">st_add<pos:position pos:line="23" pos:column="44"/></name><argument_list pos:line="23" pos:column="44">(<argument><expr><call><name pos:line="23" pos:column="45">st_mult<pos:position pos:line="23" pos:column="52"/></name><argument_list pos:line="23" pos:column="52">(<argument><expr><name pos:line="23" pos:column="53">nr_rules<pos:position pos:line="23" pos:column="61"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="63">sizeof<argument_list pos:line="23" pos:column="69">(<argument><expr><name pos:line="23" pos:column="70">char<pos:position pos:line="23" pos:column="74"/></name> <operator pos:line="23" pos:column="75">*<pos:position pos:line="23" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="23" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="80">total_len<pos:position pos:line="23" pos:column="89"/></name></expr></argument>)<pos:position pos:line="23" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="92"/></expr_stmt>

		<expr_stmt><expr><name pos:line="25" pos:column="17">offset<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">=<pos:position pos:line="25" pos:column="25"/></operator> <literal type="number" pos:line="25" pos:column="26">0<pos:position pos:line="25" pos:column="27"/></literal></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
		<for pos:line="26" pos:column="17">for <control pos:line="26" pos:column="21">(<init><expr><name pos:line="26" pos:column="22">i<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">=<pos:position pos:line="26" pos:column="25"/></operator> <literal type="number" pos:line="26" pos:column="26">0<pos:position pos:line="26" pos:column="27"/></literal></expr>;<pos:position pos:line="26" pos:column="28"/></init> <condition><expr><name pos:line="26" pos:column="29">i<pos:position pos:line="26" pos:column="30"/></name> <operator pos:line="26" pos:column="31">&lt;<pos:position pos:line="26" pos:column="35"/></operator> <name pos:line="26" pos:column="33">nr_rules<pos:position pos:line="26" pos:column="41"/></name></expr>;<pos:position pos:line="26" pos:column="42"/></condition> <incr><expr><name pos:line="26" pos:column="43">i<pos:position pos:line="26" pos:column="44"/></name><operator pos:line="26" pos:column="44">++<pos:position pos:line="26" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="47"/></control> <block pos:line="26" pos:column="48">{
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">assert<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">offset<pos:position pos:line="27" pos:column="38"/></name> <operator pos:line="27" pos:column="39">&lt;<pos:position pos:line="27" pos:column="43"/></operator> <name pos:line="27" pos:column="41">total_len<pos:position pos:line="27" pos:column="50"/></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="28" pos:column="25">scanf_fmts<pos:position pos:line="28" pos:column="35"/></name><index pos:line="28" pos:column="35">[<expr><name pos:line="28" pos:column="36">i<pos:position pos:line="28" pos:column="37"/></name></expr>]<pos:position pos:line="28" pos:column="38"/></index></name> <operator pos:line="28" pos:column="39">=<pos:position pos:line="28" pos:column="40"/></operator> <operator pos:line="28" pos:column="41">(<pos:position pos:line="28" pos:column="42"/></operator><name pos:line="28" pos:column="42">char<pos:position pos:line="28" pos:column="46"/></name> <operator pos:line="28" pos:column="47">*<pos:position pos:line="28" pos:column="48"/></operator><operator pos:line="28" pos:column="48">)<pos:position pos:line="28" pos:column="49"/></operator><operator pos:line="28" pos:column="49">&amp;<pos:position pos:line="28" pos:column="54"/></operator><name><name pos:line="28" pos:column="50">scanf_fmts<pos:position pos:line="28" pos:column="60"/></name><index pos:line="28" pos:column="60">[<expr><name pos:line="28" pos:column="61">nr_rules<pos:position pos:line="28" pos:column="69"/></name></expr>]<pos:position pos:line="28" pos:column="70"/></index></name> <operator pos:line="28" pos:column="71">+<pos:position pos:line="28" pos:column="72"/></operator> <name pos:line="28" pos:column="73">offset<pos:position pos:line="28" pos:column="79"/></name></expr>;<pos:position pos:line="28" pos:column="80"/></expr_stmt>
			<expr_stmt><expr><name pos:line="29" pos:column="25">offset<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">+=<pos:position pos:line="29" pos:column="34"/></operator> <call><name pos:line="29" pos:column="35">snprintf<pos:position pos:line="29" pos:column="43"/></name><argument_list pos:line="29" pos:column="43">(<argument><expr><name><name pos:line="29" pos:column="44">scanf_fmts<pos:position pos:line="29" pos:column="54"/></name><index pos:line="29" pos:column="54">[<expr><name pos:line="29" pos:column="55">i<pos:position pos:line="29" pos:column="56"/></name></expr>]<pos:position pos:line="29" pos:column="57"/></index></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="59">total_len<pos:position pos:line="29" pos:column="68"/></name> <operator pos:line="29" pos:column="69">-<pos:position pos:line="29" pos:column="70"/></operator> <name pos:line="29" pos:column="71">offset<pos:position pos:line="29" pos:column="77"/></name></expr></argument>,
					   <argument><expr><name><name pos:line="30" pos:column="44">ref_rev_parse_rules<pos:position pos:line="30" pos:column="63"/></name><index pos:line="30" pos:column="63">[<expr><name pos:line="30" pos:column="64">i<pos:position pos:line="30" pos:column="65"/></name></expr>]<pos:position pos:line="30" pos:column="66"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="68">2<pos:position pos:line="30" pos:column="69"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="71">"%s"<pos:position pos:line="30" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="76"/></argument_list></call> <operator pos:line="30" pos:column="77">+<pos:position pos:line="30" pos:column="78"/></operator> <literal type="number" pos:line="30" pos:column="79">1<pos:position pos:line="30" pos:column="80"/></literal></expr>;<pos:position pos:line="30" pos:column="81"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></for>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="34" pos:column="9">/* bail out if there are no rules */</comment>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">!<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">nr_rules<pos:position pos:line="35" pos:column="22"/></name></expr>)<pos:position pos:line="35" pos:column="23"/></condition><then pos:line="35" pos:column="23">
		<block type="pseudo"><return pos:line="36" pos:column="17">return <expr><call><name pos:line="36" pos:column="24">xstrdup<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">(<argument><expr><name pos:line="36" pos:column="32">refname<pos:position pos:line="36" pos:column="39"/></name></expr></argument>)<pos:position pos:line="36" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="41"/></return></block></then></if>

	<comment type="block" pos:line="38" pos:column="9">/* buffer for scanf result, at most refname must fit */</comment>
	<expr_stmt><expr><name pos:line="39" pos:column="9">short_name<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <call><name pos:line="39" pos:column="22">xstrdup<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">refname<pos:position pos:line="39" pos:column="37"/></name></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt>

	<comment type="block" pos:line="41" pos:column="9">/* skip first rule, it will always match */</comment>
	<for pos:line="42" pos:column="9">for <control pos:line="42" pos:column="13">(<init><expr><name pos:line="42" pos:column="14">i<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">=<pos:position pos:line="42" pos:column="17"/></operator> <name pos:line="42" pos:column="18">nr_rules<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">-<pos:position pos:line="42" pos:column="28"/></operator> <literal type="number" pos:line="42" pos:column="29">1<pos:position pos:line="42" pos:column="30"/></literal></expr>;<pos:position pos:line="42" pos:column="31"/></init> <condition><expr><name pos:line="42" pos:column="32">i<pos:position pos:line="42" pos:column="33"/></name> <operator pos:line="42" pos:column="34">&gt;<pos:position pos:line="42" pos:column="38"/></operator> <literal type="number" pos:line="42" pos:column="36">0<pos:position pos:line="42" pos:column="37"/></literal></expr> ;<pos:position pos:line="42" pos:column="39"/></condition> <incr><expr><operator pos:line="42" pos:column="40">--<pos:position pos:line="42" pos:column="42"/></operator><name pos:line="42" pos:column="42">i<pos:position pos:line="42" pos:column="43"/></name></expr></incr>)<pos:position pos:line="42" pos:column="44"/></control> <block pos:line="42" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">int<pos:position pos:line="43" pos:column="20"/></name></type> <name pos:line="43" pos:column="21">j<pos:position pos:line="43" pos:column="22"/></name></decl>;<pos:position pos:line="43" pos:column="23"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="44" pos:column="17">int<pos:position pos:line="44" pos:column="20"/></name></type> <name pos:line="44" pos:column="21">rules_to_fail<pos:position pos:line="44" pos:column="34"/></name> <init pos:line="44" pos:column="35">= <expr><name pos:line="44" pos:column="37">i<pos:position pos:line="44" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="44" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">int<pos:position pos:line="45" pos:column="20"/></name></type> <name pos:line="45" pos:column="21">short_name_len<pos:position pos:line="45" pos:column="35"/></name></decl>;<pos:position pos:line="45" pos:column="36"/></decl_stmt>

		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><literal type="number" pos:line="47" pos:column="21">1<pos:position pos:line="47" pos:column="22"/></literal> <operator pos:line="47" pos:column="23">!=<pos:position pos:line="47" pos:column="25"/></operator> <call><name pos:line="47" pos:column="26">sscanf<pos:position pos:line="47" pos:column="32"/></name><argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">refname<pos:position pos:line="47" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="42">scanf_fmts<pos:position pos:line="47" pos:column="52"/></name><index pos:line="47" pos:column="52">[<expr><name pos:line="47" pos:column="53">i<pos:position pos:line="47" pos:column="54"/></name></expr>]<pos:position pos:line="47" pos:column="55"/></index></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="57">short_name<pos:position pos:line="47" pos:column="67"/></name></expr></argument>)<pos:position pos:line="47" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="69"/></condition><then pos:line="47" pos:column="69">
			<block type="pseudo"><continue pos:line="48" pos:column="25">continue;<pos:position pos:line="48" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="50" pos:column="17">short_name_len<pos:position pos:line="50" pos:column="31"/></name> <operator pos:line="50" pos:column="32">=<pos:position pos:line="50" pos:column="33"/></operator> <call><name pos:line="50" pos:column="34">strlen<pos:position pos:line="50" pos:column="40"/></name><argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">short_name<pos:position pos:line="50" pos:column="51"/></name></expr></argument>)<pos:position pos:line="50" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="53"/></expr_stmt>

		<comment type="block" pos:line="52" pos:column="17">/*
		 * in strict mode, all (except the matched one) rules
		 * must fail to resolve to a valid non-ambiguous ref
		 */</comment>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">strict<pos:position pos:line="56" pos:column="27"/></name></expr>)<pos:position pos:line="56" pos:column="28"/></condition><then pos:line="56" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><name pos:line="57" pos:column="25">rules_to_fail<pos:position pos:line="57" pos:column="38"/></name> <operator pos:line="57" pos:column="39">=<pos:position pos:line="57" pos:column="40"/></operator> <name pos:line="57" pos:column="41">nr_rules<pos:position pos:line="57" pos:column="49"/></name></expr>;<pos:position pos:line="57" pos:column="50"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="59" pos:column="17">/*
		 * check if the short name resolves to a valid ref,
		 * but use only rules prior to the matched one
		 */</comment>
		<for pos:line="63" pos:column="17">for <control pos:line="63" pos:column="21">(<init><expr><name pos:line="63" pos:column="22">j<pos:position pos:line="63" pos:column="23"/></name> <operator pos:line="63" pos:column="24">=<pos:position pos:line="63" pos:column="25"/></operator> <literal type="number" pos:line="63" pos:column="26">0<pos:position pos:line="63" pos:column="27"/></literal></expr>;<pos:position pos:line="63" pos:column="28"/></init> <condition><expr><name pos:line="63" pos:column="29">j<pos:position pos:line="63" pos:column="30"/></name> <operator pos:line="63" pos:column="31">&lt;<pos:position pos:line="63" pos:column="35"/></operator> <name pos:line="63" pos:column="33">rules_to_fail<pos:position pos:line="63" pos:column="46"/></name></expr>;<pos:position pos:line="63" pos:column="47"/></condition> <incr><expr><name pos:line="63" pos:column="48">j<pos:position pos:line="63" pos:column="49"/></name><operator pos:line="63" pos:column="49">++<pos:position pos:line="63" pos:column="51"/></operator></expr></incr>)<pos:position pos:line="63" pos:column="52"/></control> <block pos:line="63" pos:column="53">{
			<decl_stmt><decl><type><specifier pos:line="64" pos:column="25">const<pos:position pos:line="64" pos:column="30"/></specifier> <name pos:line="64" pos:column="31">char<pos:position pos:line="64" pos:column="35"/></name> <modifier pos:line="64" pos:column="36">*<pos:position pos:line="64" pos:column="37"/></modifier></type><name pos:line="64" pos:column="37">rule<pos:position pos:line="64" pos:column="41"/></name> <init pos:line="64" pos:column="42">= <expr><name><name pos:line="64" pos:column="44">ref_rev_parse_rules<pos:position pos:line="64" pos:column="63"/></name><index pos:line="64" pos:column="63">[<expr><name pos:line="64" pos:column="64">j<pos:position pos:line="64" pos:column="65"/></name></expr>]<pos:position pos:line="64" pos:column="66"/></index></name></expr></init></decl>;<pos:position pos:line="64" pos:column="67"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="65" pos:column="25">char<pos:position pos:line="65" pos:column="29"/></name></type> <name><name pos:line="65" pos:column="30">refname<pos:position pos:line="65" pos:column="37"/></name><index pos:line="65" pos:column="37">[<expr><name pos:line="65" pos:column="38">PATH_MAX<pos:position pos:line="65" pos:column="46"/></name></expr>]<pos:position pos:line="65" pos:column="47"/></index></name></decl>;<pos:position pos:line="65" pos:column="48"/></decl_stmt>

			<comment type="block" pos:line="67" pos:column="25">/* skip matched rule */</comment>
			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<expr><name pos:line="68" pos:column="29">i<pos:position pos:line="68" pos:column="30"/></name> <operator pos:line="68" pos:column="31">==<pos:position pos:line="68" pos:column="33"/></operator> <name pos:line="68" pos:column="34">j<pos:position pos:line="68" pos:column="35"/></name></expr>)<pos:position pos:line="68" pos:column="36"/></condition><then pos:line="68" pos:column="36">
				<block type="pseudo"><continue pos:line="69" pos:column="33">continue;<pos:position pos:line="69" pos:column="42"/></continue></block></then></if>

			<comment type="block" pos:line="71" pos:column="25">/*
			 * the short name is ambiguous, if it resolves
			 * (with this previous rule) to a valid ref
			 * read_ref() returns 0 on success
			 */</comment>
			<expr_stmt><expr><call><name pos:line="76" pos:column="25">mksnpath<pos:position pos:line="76" pos:column="33"/></name><argument_list pos:line="76" pos:column="33">(<argument><expr><name pos:line="76" pos:column="34">refname<pos:position pos:line="76" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="76" pos:column="43">sizeof<argument_list pos:line="76" pos:column="49">(<argument><expr><name pos:line="76" pos:column="50">refname<pos:position pos:line="76" pos:column="57"/></name></expr></argument>)<pos:position pos:line="76" pos:column="58"/></argument_list></sizeof></expr></argument>,
				 <argument><expr><name pos:line="77" pos:column="34">rule<pos:position pos:line="77" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="40">short_name_len<pos:position pos:line="77" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="56">short_name<pos:position pos:line="77" pos:column="66"/></name></expr></argument>)<pos:position pos:line="77" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="68"/></expr_stmt>
			<if pos:line="78" pos:column="25">if <condition pos:line="78" pos:column="28">(<expr><call><name pos:line="78" pos:column="29">ref_exists<pos:position pos:line="78" pos:column="39"/></name><argument_list pos:line="78" pos:column="39">(<argument><expr><name pos:line="78" pos:column="40">refname<pos:position pos:line="78" pos:column="47"/></name></expr></argument>)<pos:position pos:line="78" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="49"/></condition><then pos:line="78" pos:column="49">
				<block type="pseudo"><break pos:line="79" pos:column="33">break;<pos:position pos:line="79" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="80" pos:column="18"/></block></for>

		<comment type="block" pos:line="82" pos:column="17">/*
		 * short name is non-ambiguous if all previous rules
		 * haven't resolved to a valid ref
		 */</comment>
		<if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><name pos:line="86" pos:column="21">j<pos:position pos:line="86" pos:column="22"/></name> <operator pos:line="86" pos:column="23">==<pos:position pos:line="86" pos:column="25"/></operator> <name pos:line="86" pos:column="26">rules_to_fail<pos:position pos:line="86" pos:column="39"/></name></expr>)<pos:position pos:line="86" pos:column="40"/></condition><then pos:line="86" pos:column="40">
			<block type="pseudo"><return pos:line="87" pos:column="25">return <expr><name pos:line="87" pos:column="32">short_name<pos:position pos:line="87" pos:column="42"/></name></expr>;<pos:position pos:line="87" pos:column="43"/></return></block></then></if>
	}<pos:position pos:line="88" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="90" pos:column="9">free<pos:position pos:line="90" pos:column="13"/></name><argument_list pos:line="90" pos:column="13">(<argument><expr><name pos:line="90" pos:column="14">short_name<pos:position pos:line="90" pos:column="24"/></name></expr></argument>)<pos:position pos:line="90" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="26"/></expr_stmt>
	<return pos:line="91" pos:column="9">return <expr><call><name pos:line="91" pos:column="16">xstrdup<pos:position pos:line="91" pos:column="23"/></name><argument_list pos:line="91" pos:column="23">(<argument><expr><name pos:line="91" pos:column="24">refname<pos:position pos:line="91" pos:column="31"/></name></expr></argument>)<pos:position pos:line="91" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="33"/></return>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
