<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_186.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">push_refs_with_export<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">transport<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">transport<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">ref<pos:position pos:line="2" pos:column="27"/></name></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">remote_refs<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">int<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">flags<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ref<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">ref<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">child_process<pos:position pos:line="5" pos:column="29"/></name></name> <modifier pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></modifier></type><name pos:line="5" pos:column="31">helper<pos:position pos:line="5" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="39">exporter<pos:position pos:line="5" pos:column="47"/></name></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">helper_data<pos:position pos:line="6" pos:column="27"/></name></name> <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">data<pos:position pos:line="6" pos:column="33"/></name> <init pos:line="6" pos:column="34">= <expr><name><name pos:line="6" pos:column="36">transport<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">-&gt;<pos:position pos:line="6" pos:column="50"/></operator><name pos:line="6" pos:column="47">data<pos:position pos:line="6" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">string_list<pos:position pos:line="7" pos:column="27"/></name></name></type> <name pos:line="7" pos:column="28">revlist_args<pos:position pos:line="7" pos:column="40"/></name> <init pos:line="7" pos:column="41">= <expr><name pos:line="7" pos:column="43">STRING_LIST_INIT_NODUP<pos:position pos:line="7" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="66"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">buf<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name pos:line="8" pos:column="29">STRBUF_INIT<pos:position pos:line="8" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name><name pos:line="10" pos:column="14">data<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">-&gt;<pos:position pos:line="10" pos:column="23"/></operator><name pos:line="10" pos:column="20">refspecs<pos:position pos:line="10" pos:column="28"/></name></name></expr>)<pos:position pos:line="10" pos:column="29"/></condition><then pos:line="10" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">die<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><literal type="string" pos:line="11" pos:column="21">"remote-helper doesn't support push; refspec needed"<pos:position pos:line="11" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="75"/></expr_stmt></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">flags<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&amp;<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="21">TRANSPORT_PUSH_DRY_RUN<pos:position pos:line="13" pos:column="43"/></name></expr>)<pos:position pos:line="13" pos:column="44"/></condition><then pos:line="13" pos:column="44"> <block pos:line="13" pos:column="45">{
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><call><name pos:line="14" pos:column="21">set_helper_option<pos:position pos:line="14" pos:column="38"/></name><argument_list pos:line="14" pos:column="38">(<argument><expr><name pos:line="14" pos:column="39">transport<pos:position pos:line="14" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="50">"dry-run"<pos:position pos:line="14" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="61">"true"<pos:position pos:line="14" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call> <operator pos:line="14" pos:column="69">!=<pos:position pos:line="14" pos:column="71"/></operator> <literal type="number" pos:line="14" pos:column="72">0<pos:position pos:line="14" pos:column="73"/></literal></expr>)<pos:position pos:line="14" pos:column="74"/></condition><then pos:line="14" pos:column="74">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="25">die<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><literal type="string" pos:line="15" pos:column="29">"helper %s does not support dry-run"<pos:position pos:line="15" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="67">data<pos:position pos:line="15" pos:column="71"/></name><operator pos:line="15" pos:column="71">-&gt;<pos:position pos:line="15" pos:column="76"/></operator><name pos:line="15" pos:column="73">name<pos:position pos:line="15" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="79"/></expr_stmt></block></then></if>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">flags<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&amp;<pos:position pos:line="18" pos:column="24"/></operator> <name pos:line="18" pos:column="21">TRANSPORT_PUSH_FORCE<pos:position pos:line="18" pos:column="41"/></name></expr>)<pos:position pos:line="18" pos:column="42"/></condition><then pos:line="18" pos:column="42"> <block pos:line="18" pos:column="43">{
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><call><name pos:line="19" pos:column="21">set_helper_option<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(<argument><expr><name pos:line="19" pos:column="39">transport<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="50">"force"<pos:position pos:line="19" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="59">"true"<pos:position pos:line="19" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="66"/></argument_list></call> <operator pos:line="19" pos:column="67">!=<pos:position pos:line="19" pos:column="69"/></operator> <literal type="number" pos:line="19" pos:column="70">0<pos:position pos:line="19" pos:column="71"/></literal></expr>)<pos:position pos:line="19" pos:column="72"/></condition><then pos:line="19" pos:column="72">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="25">warning<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><literal type="string" pos:line="20" pos:column="33">"helper %s does not support 'force'"<pos:position pos:line="20" pos:column="69"/></literal></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="71">data<pos:position pos:line="20" pos:column="75"/></name><operator pos:line="20" pos:column="75">-&gt;<pos:position pos:line="20" pos:column="80"/></operator><name pos:line="20" pos:column="77">name<pos:position pos:line="20" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="83"/></expr_stmt></block></then></if>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="23" pos:column="9">helper<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <call><name pos:line="23" pos:column="18">get_helper<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">transport<pos:position pos:line="23" pos:column="38"/></name></expr></argument>)<pos:position pos:line="23" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="25" pos:column="9">write_constant<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name><name pos:line="25" pos:column="24">helper<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">-&gt;<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="32">in<pos:position pos:line="25" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="36">"export\n"<pos:position pos:line="25" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">strbuf_reset<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><operator pos:line="27" pos:column="22">&amp;<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="23">buf<pos:position pos:line="27" pos:column="26"/></name></expr></argument>)<pos:position pos:line="27" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt>

	<for pos:line="29" pos:column="9">for <control pos:line="29" pos:column="13">(<init><expr><name pos:line="29" pos:column="14">ref<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">=<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="20">remote_refs<pos:position pos:line="29" pos:column="31"/></name></expr>;<pos:position pos:line="29" pos:column="32"/></init> <condition><expr><name pos:line="29" pos:column="33">ref<pos:position pos:line="29" pos:column="36"/></name></expr>;<pos:position pos:line="29" pos:column="37"/></condition> <incr><expr><name pos:line="29" pos:column="38">ref<pos:position pos:line="29" pos:column="41"/></name> <operator pos:line="29" pos:column="42">=<pos:position pos:line="29" pos:column="43"/></operator> <name><name pos:line="29" pos:column="44">ref<pos:position pos:line="29" pos:column="47"/></name><operator pos:line="29" pos:column="47">-&gt;<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="49">next<pos:position pos:line="29" pos:column="53"/></name></name></expr></incr>)<pos:position pos:line="29" pos:column="54"/></control> <block pos:line="29" pos:column="55">{
		<macro><name pos:line="30" pos:column="17">char<pos:position pos:line="30" pos:column="21"/></name></macro> <expr_stmt><expr><operator pos:line="30" pos:column="22">*<pos:position pos:line="30" pos:column="23"/></operator><specifier pos:line="30" pos:column="23">private<pos:position pos:line="30" pos:column="30"/></specifier></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>
		<decl_stmt><decl><type><name pos:line="31" pos:column="17">unsigned<pos:position pos:line="31" pos:column="25"/></name> <name pos:line="31" pos:column="26">char<pos:position pos:line="31" pos:column="30"/></name></type> <name><name pos:line="31" pos:column="31">sha1<pos:position pos:line="31" pos:column="35"/></name><index pos:line="31" pos:column="35">[<expr><literal type="number" pos:line="31" pos:column="36">20<pos:position pos:line="31" pos:column="38"/></literal></expr>]<pos:position pos:line="31" pos:column="39"/></index></name></decl>;<pos:position pos:line="31" pos:column="40"/></decl_stmt>

		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name><name pos:line="33" pos:column="21">ref<pos:position pos:line="33" pos:column="24"/></name><operator pos:line="33" pos:column="24">-&gt;<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="26">deletion<pos:position pos:line="33" pos:column="34"/></name></name></expr>)<pos:position pos:line="33" pos:column="35"/></condition><then pos:line="33" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">die<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><literal type="string" pos:line="34" pos:column="29">"remote-helpers do not support ref deletion"<pos:position pos:line="34" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="75"/></expr_stmt></block></then></if>

		<expr_stmt><expr><specifier pos:line="36" pos:column="17">private<pos:position pos:line="36" pos:column="24"/></specifier> <operator pos:line="36" pos:column="25">=<pos:position pos:line="36" pos:column="26"/></operator> <call><name pos:line="36" pos:column="27">apply_refspecs<pos:position pos:line="36" pos:column="41"/></name><argument_list pos:line="36" pos:column="41">(<argument><expr><name><name pos:line="36" pos:column="42">data<pos:position pos:line="36" pos:column="46"/></name><operator pos:line="36" pos:column="46">-&gt;<pos:position pos:line="36" pos:column="51"/></operator><name pos:line="36" pos:column="48">refspecs<pos:position pos:line="36" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="58">data<pos:position pos:line="36" pos:column="62"/></name><operator pos:line="36" pos:column="62">-&gt;<pos:position pos:line="36" pos:column="67"/></operator><name pos:line="36" pos:column="64">refspec_nr<pos:position pos:line="36" pos:column="74"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="76">ref<pos:position pos:line="36" pos:column="79"/></name><operator pos:line="36" pos:column="79">-&gt;<pos:position pos:line="36" pos:column="84"/></operator><name pos:line="36" pos:column="81">name<pos:position pos:line="36" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="87"/></expr_stmt>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><specifier pos:line="37" pos:column="21">private<pos:position pos:line="37" pos:column="28"/></specifier> <operator pos:line="37" pos:column="29">&amp;&amp;<pos:position pos:line="37" pos:column="39"/></operator> <operator pos:line="37" pos:column="32">!<pos:position pos:line="37" pos:column="33"/></operator><call><name pos:line="37" pos:column="33">get_sha1<pos:position pos:line="37" pos:column="41"/></name><argument_list pos:line="37" pos:column="41">(<argument><expr><specifier pos:line="37" pos:column="42">private<pos:position pos:line="37" pos:column="49"/></specifier></expr></argument>, <argument><expr><name pos:line="37" pos:column="51">sha1<pos:position pos:line="37" pos:column="55"/></name></expr></argument>)<pos:position pos:line="37" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="57"/></condition><then pos:line="37" pos:column="57"> <block pos:line="37" pos:column="58">{
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">strbuf_addf<pos:position pos:line="38" pos:column="36"/></name><argument_list pos:line="38" pos:column="36">(<argument><expr><operator pos:line="38" pos:column="37">&amp;<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="38">buf<pos:position pos:line="38" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="43">"^%s"<pos:position pos:line="38" pos:column="48"/></literal></expr></argument>, <argument><expr><specifier pos:line="38" pos:column="50">private<pos:position pos:line="38" pos:column="57"/></specifier></expr></argument>)<pos:position pos:line="38" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">string_list_append<pos:position pos:line="39" pos:column="43"/></name><argument_list pos:line="39" pos:column="43">(<argument><expr><operator pos:line="39" pos:column="44">&amp;<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="45">revlist_args<pos:position pos:line="39" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="59">strbuf_detach<pos:position pos:line="39" pos:column="72"/></name><argument_list pos:line="39" pos:column="72">(<argument><expr><operator pos:line="39" pos:column="73">&amp;<pos:position pos:line="39" pos:column="78"/></operator><name pos:line="39" pos:column="74">buf<pos:position pos:line="39" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="79">NULL<pos:position pos:line="39" pos:column="83"/></name></expr></argument>)<pos:position pos:line="39" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="86"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">hashcpy<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name><name pos:line="40" pos:column="33">ref<pos:position pos:line="40" pos:column="36"/></name><operator pos:line="40" pos:column="36">-&gt;<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="38">old_sha1<pos:position pos:line="40" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="48">sha1<pos:position pos:line="40" pos:column="52"/></name></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">free<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(<argument><expr><specifier pos:line="42" pos:column="22">private<pos:position pos:line="42" pos:column="29"/></specifier></expr></argument>)<pos:position pos:line="42" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="31"/></expr_stmt>

		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name><name pos:line="44" pos:column="21">ref<pos:position pos:line="44" pos:column="24"/></name><operator pos:line="44" pos:column="24">-&gt;<pos:position pos:line="44" pos:column="29"/></operator><name pos:line="44" pos:column="26">peer_ref<pos:position pos:line="44" pos:column="34"/></name></name></expr>)<pos:position pos:line="44" pos:column="35"/></condition><then pos:line="44" pos:column="35"> <block pos:line="44" pos:column="36">{
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><call><name pos:line="45" pos:column="29">strcmp<pos:position pos:line="45" pos:column="35"/></name><argument_list pos:line="45" pos:column="35">(<argument><expr><name><name pos:line="45" pos:column="36">ref<pos:position pos:line="45" pos:column="39"/></name><operator pos:line="45" pos:column="39">-&gt;<pos:position pos:line="45" pos:column="44"/></operator><name pos:line="45" pos:column="41">peer_ref<pos:position pos:line="45" pos:column="49"/></name><operator pos:line="45" pos:column="49">-&gt;<pos:position pos:line="45" pos:column="54"/></operator><name pos:line="45" pos:column="51">name<pos:position pos:line="45" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="57">ref<pos:position pos:line="45" pos:column="60"/></name><operator pos:line="45" pos:column="60">-&gt;<pos:position pos:line="45" pos:column="65"/></operator><name pos:line="45" pos:column="62">name<pos:position pos:line="45" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="68"/></condition><then pos:line="45" pos:column="68">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="33">die<pos:position pos:line="46" pos:column="36"/></name><argument_list pos:line="46" pos:column="36">(<argument><expr><literal type="string" pos:line="46" pos:column="37">"remote-helpers do not support old:new syntax"<pos:position pos:line="46" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="85"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">string_list_append<pos:position pos:line="47" pos:column="43"/></name><argument_list pos:line="47" pos:column="43">(<argument><expr><operator pos:line="47" pos:column="44">&amp;<pos:position pos:line="47" pos:column="49"/></operator><name pos:line="47" pos:column="45">revlist_args<pos:position pos:line="47" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="59">ref<pos:position pos:line="47" pos:column="62"/></name><operator pos:line="47" pos:column="62">-&gt;<pos:position pos:line="47" pos:column="67"/></operator><name pos:line="47" pos:column="64">peer_ref<pos:position pos:line="47" pos:column="72"/></name><operator pos:line="47" pos:column="72">-&gt;<pos:position pos:line="47" pos:column="77"/></operator><name pos:line="47" pos:column="74">name<pos:position pos:line="47" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="80"/></expr_stmt>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>
	}<pos:position pos:line="49" pos:column="10"/></block></for>

	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><call><name pos:line="51" pos:column="13">get_exporter<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">(<argument><expr><name pos:line="51" pos:column="26">transport<pos:position pos:line="51" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="37">&amp;<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="38">exporter<pos:position pos:line="51" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="48">&amp;<pos:position pos:line="51" pos:column="53"/></operator><name pos:line="51" pos:column="49">revlist_args<pos:position pos:line="51" pos:column="61"/></name></expr></argument>)<pos:position pos:line="51" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="63"/></condition><then pos:line="51" pos:column="63">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="17">die<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><literal type="string" pos:line="52" pos:column="21">"Couldn't run fast-export"<pos:position pos:line="52" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="49"/></expr_stmt></block></then></if>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><call><name pos:line="54" pos:column="13">finish_command<pos:position pos:line="54" pos:column="27"/></name><argument_list pos:line="54" pos:column="27">(<argument><expr><operator pos:line="54" pos:column="28">&amp;<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="29">exporter<pos:position pos:line="54" pos:column="37"/></name></expr></argument>)<pos:position pos:line="54" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="39"/></condition><then pos:line="54" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="17">die<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">(<argument><expr><literal type="string" pos:line="55" pos:column="21">"Error while running fast-export"<pos:position pos:line="55" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="56"/></expr_stmt></block></then></if>
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><call><name pos:line="56" pos:column="13">push_update_refs_status<pos:position pos:line="56" pos:column="36"/></name><argument_list pos:line="56" pos:column="36">(<argument><expr><name pos:line="56" pos:column="37">data<pos:position pos:line="56" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="43">remote_refs<pos:position pos:line="56" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="56">flags<pos:position pos:line="56" pos:column="61"/></name></expr></argument>)<pos:position pos:line="56" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="63"/></condition><then pos:line="56" pos:column="63">
		<block type="pseudo"><return pos:line="57" pos:column="17">return <expr><literal type="number" pos:line="57" pos:column="24">1<pos:position pos:line="57" pos:column="25"/></literal></expr>;<pos:position pos:line="57" pos:column="26"/></return></block></then></if>

	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name><name pos:line="59" pos:column="13">data<pos:position pos:line="59" pos:column="17"/></name><operator pos:line="59" pos:column="17">-&gt;<pos:position pos:line="59" pos:column="22"/></operator><name pos:line="59" pos:column="19">export_marks<pos:position pos:line="59" pos:column="31"/></name></name></expr>)<pos:position pos:line="59" pos:column="32"/></condition><then pos:line="59" pos:column="32"> <block pos:line="59" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">strbuf_addf<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">(<argument><expr><operator pos:line="60" pos:column="29">&amp;<pos:position pos:line="60" pos:column="34"/></operator><name pos:line="60" pos:column="30">buf<pos:position pos:line="60" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="35">"%s.tmp"<pos:position pos:line="60" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="45">data<pos:position pos:line="60" pos:column="49"/></name><operator pos:line="60" pos:column="49">-&gt;<pos:position pos:line="60" pos:column="54"/></operator><name pos:line="60" pos:column="51">export_marks<pos:position pos:line="60" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="61" pos:column="17">rename<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><name><name pos:line="61" pos:column="24">buf<pos:position pos:line="61" pos:column="27"/></name><operator pos:line="61" pos:column="27">.<pos:position pos:line="61" pos:column="28"/></operator><name pos:line="61" pos:column="28">buf<pos:position pos:line="61" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="33">data<pos:position pos:line="61" pos:column="37"/></name><operator pos:line="61" pos:column="37">-&gt;<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="39">export_marks<pos:position pos:line="61" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">strbuf_release<pos:position pos:line="62" pos:column="31"/></name><argument_list pos:line="62" pos:column="31">(<argument><expr><operator pos:line="62" pos:column="32">&amp;<pos:position pos:line="62" pos:column="37"/></operator><name pos:line="62" pos:column="33">buf<pos:position pos:line="62" pos:column="36"/></name></expr></argument>)<pos:position pos:line="62" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="63" pos:column="10"/></block></then></if>

	<return pos:line="65" pos:column="9">return <expr><literal type="number" pos:line="65" pos:column="16">0<pos:position pos:line="65" pos:column="17"/></literal></expr>;<pos:position pos:line="65" pos:column="18"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
