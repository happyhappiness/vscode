<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6342_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">transit_state_bkref<pos:position pos:line="3" pos:column="20"/></name> <parameter_list pos:line="3" pos:column="21">(<parameter><decl><type><name pos:line="3" pos:column="22">re_match_context_t<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">mctx<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="48">const<pos:position pos:line="3" pos:column="53"/></specifier> <name pos:line="3" pos:column="54">re_node_set<pos:position pos:line="3" pos:column="65"/></name> <modifier pos:line="3" pos:column="66">*<pos:position pos:line="3" pos:column="67"/></modifier></type><name pos:line="3" pos:column="67">nodes<pos:position pos:line="3" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="73"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">re_dfa_t<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier><specifier pos:line="5" pos:column="19">const<pos:position pos:line="5" pos:column="24"/></specifier></type> <name pos:line="5" pos:column="25">dfa<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><name><name pos:line="5" pos:column="31">mctx<pos:position pos:line="5" pos:column="35"/></name><operator pos:line="5" pos:column="35">-&gt;<pos:position pos:line="5" pos:column="40"/></operator><name pos:line="5" pos:column="37">dfa<pos:position pos:line="5" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">reg_errcode_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">err<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">cur_str_idx<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><call><name pos:line="8" pos:column="21">re_string_cur_idx<pos:position pos:line="8" pos:column="38"/></name> <argument_list pos:line="8" pos:column="39">(<argument><expr><operator pos:line="8" pos:column="40">&amp;<pos:position pos:line="8" pos:column="45"/></operator><name><name pos:line="8" pos:column="41">mctx<pos:position pos:line="8" pos:column="45"/></name><operator pos:line="8" pos:column="45">-&gt;<pos:position pos:line="8" pos:column="50"/></operator><name pos:line="8" pos:column="47">input<pos:position pos:line="8" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="54"/></decl_stmt>

  <for pos:line="10" pos:column="3">for <control pos:line="10" pos:column="7">(<init><expr><name pos:line="10" pos:column="8">i<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <literal type="number" pos:line="10" pos:column="12">0<pos:position pos:line="10" pos:column="13"/></literal></expr>;<pos:position pos:line="10" pos:column="14"/></init> <condition><expr><name pos:line="10" pos:column="15">i<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">&lt;<pos:position pos:line="10" pos:column="21"/></operator> <name><name pos:line="10" pos:column="19">nodes<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">-&gt;<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="26">nelem<pos:position pos:line="10" pos:column="31"/></name></name></expr>;<pos:position pos:line="10" pos:column="32"/></condition> <incr><expr><operator pos:line="10" pos:column="33">++<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">i<pos:position pos:line="10" pos:column="36"/></name></expr></incr>)<pos:position pos:line="10" pos:column="37"/></control>
    <block pos:line="11" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="12" pos:column="7">int<pos:position pos:line="12" pos:column="10"/></name></type> <name pos:line="12" pos:column="11">dest_str_idx<pos:position pos:line="12" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="25">prev_nelem<pos:position pos:line="12" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="37">bkc_idx<pos:position pos:line="12" pos:column="44"/></name></decl>;<pos:position pos:line="12" pos:column="45"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="13" pos:column="7">int<pos:position pos:line="13" pos:column="10"/></name></type> <name pos:line="13" pos:column="11">node_idx<pos:position pos:line="13" pos:column="19"/></name> <init pos:line="13" pos:column="20">= <expr><name><name pos:line="13" pos:column="22">nodes<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">-&gt;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="29">elems<pos:position pos:line="13" pos:column="34"/></name><index pos:line="13" pos:column="34">[<expr><name pos:line="13" pos:column="35">i<pos:position pos:line="13" pos:column="36"/></name></expr>]<pos:position pos:line="13" pos:column="37"/></index></name></expr></init></decl>;<pos:position pos:line="13" pos:column="38"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="14" pos:column="7">unsigned<pos:position pos:line="14" pos:column="15"/></name> <name pos:line="14" pos:column="16">int<pos:position pos:line="14" pos:column="19"/></name></type> <name pos:line="14" pos:column="20">context<pos:position pos:line="14" pos:column="27"/></name></decl>;<pos:position pos:line="14" pos:column="28"/></decl_stmt>
      <decl_stmt><decl><type><specifier pos:line="15" pos:column="7">const<pos:position pos:line="15" pos:column="12"/></specifier> <name pos:line="15" pos:column="13">re_token_t<pos:position pos:line="15" pos:column="23"/></name> <modifier pos:line="15" pos:column="24">*<pos:position pos:line="15" pos:column="25"/></modifier></type><name pos:line="15" pos:column="25">node<pos:position pos:line="15" pos:column="29"/></name> <init pos:line="15" pos:column="30">= <expr><name><name pos:line="15" pos:column="32">dfa<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">-&gt;<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="37">nodes<pos:position pos:line="15" pos:column="42"/></name></name> <operator pos:line="15" pos:column="43">+<pos:position pos:line="15" pos:column="44"/></operator> <name pos:line="15" pos:column="45">node_idx<pos:position pos:line="15" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="54"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="16" pos:column="7">re_node_set<pos:position pos:line="16" pos:column="18"/></name> <modifier pos:line="16" pos:column="19">*<pos:position pos:line="16" pos:column="20"/></modifier></type><name pos:line="16" pos:column="20">new_dest_nodes<pos:position pos:line="16" pos:column="34"/></name></decl>;<pos:position pos:line="16" pos:column="35"/></decl_stmt>

      <comment type="block" pos:line="18" pos:column="7">/* Check whether `node' is a backreference or not.  */</comment>
      <if pos:line="19" pos:column="7">if <condition pos:line="19" pos:column="10">(<expr><name><name pos:line="19" pos:column="11">node<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">-&gt;<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="17">type<pos:position pos:line="19" pos:column="21"/></name></name> <operator pos:line="19" pos:column="22">!=<pos:position pos:line="19" pos:column="24"/></operator> <name pos:line="19" pos:column="25">OP_BACK_REF<pos:position pos:line="19" pos:column="36"/></name></expr>)<pos:position pos:line="19" pos:column="37"/></condition><then pos:line="19" pos:column="37">
	<block type="pseudo"><continue pos:line="20" pos:column="9">continue;<pos:position pos:line="20" pos:column="18"/></continue></block></then></if>

      <if pos:line="22" pos:column="7">if <condition pos:line="22" pos:column="10">(<expr><name><name pos:line="22" pos:column="11">node<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">-&gt;<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="17">constraint<pos:position pos:line="22" pos:column="27"/></name></name></expr>)<pos:position pos:line="22" pos:column="28"/></condition><then pos:line="22" pos:column="28">
	<block pos:line="23" pos:column="9">{
	  <expr_stmt><expr><name pos:line="24" pos:column="11">context<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">=<pos:position pos:line="24" pos:column="20"/></operator> <call><name pos:line="24" pos:column="21">re_string_context_at<pos:position pos:line="24" pos:column="41"/></name> <argument_list pos:line="24" pos:column="42">(<argument><expr><operator pos:line="24" pos:column="43">&amp;<pos:position pos:line="24" pos:column="48"/></operator><name><name pos:line="24" pos:column="44">mctx<pos:position pos:line="24" pos:column="48"/></name><operator pos:line="24" pos:column="48">-&gt;<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="50">input<pos:position pos:line="24" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="57">cur_str_idx<pos:position pos:line="24" pos:column="68"/></name></expr></argument>,
					  <argument><expr><name><name pos:line="25" pos:column="43">mctx<pos:position pos:line="25" pos:column="47"/></name><operator pos:line="25" pos:column="47">-&gt;<pos:position pos:line="25" pos:column="52"/></operator><name pos:line="25" pos:column="49">eflags<pos:position pos:line="25" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="57"/></expr_stmt>
	  <if pos:line="26" pos:column="11">if <condition pos:line="26" pos:column="14">(<expr><call><name pos:line="26" pos:column="15">NOT_SATISFY_NEXT_CONSTRAINT<pos:position pos:line="26" pos:column="42"/></name> <argument_list pos:line="26" pos:column="43">(<argument><expr><name><name pos:line="26" pos:column="44">node<pos:position pos:line="26" pos:column="48"/></name><operator pos:line="26" pos:column="48">-&gt;<pos:position pos:line="26" pos:column="53"/></operator><name pos:line="26" pos:column="50">constraint<pos:position pos:line="26" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="62">context<pos:position pos:line="26" pos:column="69"/></name></expr></argument>)<pos:position pos:line="26" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="71"/></condition><then pos:line="26" pos:column="71">
	    <block type="pseudo"><continue pos:line="27" pos:column="13">continue;<pos:position pos:line="27" pos:column="22"/></continue></block></then></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="30" pos:column="7">/* `node' is a backreference.
	 Check the substring which the substring matched.  */</comment>
      <expr_stmt><expr><name pos:line="32" pos:column="7">bkc_idx<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">=<pos:position pos:line="32" pos:column="16"/></operator> <name><name pos:line="32" pos:column="17">mctx<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">-&gt;<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="23">nbkref_ents<pos:position pos:line="32" pos:column="34"/></name></name></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name pos:line="33" pos:column="7">err<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <call><name pos:line="33" pos:column="13">get_subexp<pos:position pos:line="33" pos:column="23"/></name> <argument_list pos:line="33" pos:column="24">(<argument><expr><name pos:line="33" pos:column="25">mctx<pos:position pos:line="33" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="31">node_idx<pos:position pos:line="33" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="41">cur_str_idx<pos:position pos:line="33" pos:column="52"/></name></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
      <if pos:line="34" pos:column="7">if <condition pos:line="34" pos:column="10">(<expr><call><name pos:line="34" pos:column="11">BE<pos:position pos:line="34" pos:column="13"/></name> <argument_list pos:line="34" pos:column="14">(<argument><expr><name pos:line="34" pos:column="15">err<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">!=<pos:position pos:line="34" pos:column="21"/></operator> <name pos:line="34" pos:column="22">REG_NOERROR<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="35">0<pos:position pos:line="34" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="38"/></condition><then pos:line="34" pos:column="38">
	<block type="pseudo"><goto pos:line="35" pos:column="9">goto <name pos:line="35" pos:column="14">free_return<pos:position pos:line="35" pos:column="25"/></name>;<pos:position pos:line="35" pos:column="26"/></goto></block></then></if>

      <comment type="block" pos:line="37" pos:column="7">/* And add the epsilon closures (which is `new_dest_nodes') of
	 the backreference to appropriate state_log.  */</comment>
<cpp:ifdef pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">ifdef<pos:position pos:line="39" pos:column="7"/></cpp:directive> <name pos:line="39" pos:column="8">DEBUG<pos:position pos:line="39" pos:column="13"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">assert<pos:position pos:line="40" pos:column="13"/></name> <argument_list pos:line="40" pos:column="14">(<argument><expr><name><name pos:line="40" pos:column="15">dfa<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">-&gt;<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="20">nexts<pos:position pos:line="40" pos:column="25"/></name><index pos:line="40" pos:column="25">[<expr><name pos:line="40" pos:column="26">node_idx<pos:position pos:line="40" pos:column="34"/></name></expr>]<pos:position pos:line="40" pos:column="35"/></index></name> <operator pos:line="40" pos:column="36">!=<pos:position pos:line="40" pos:column="38"/></operator> <operator pos:line="40" pos:column="39">-<pos:position pos:line="40" pos:column="40"/></operator><literal type="number" pos:line="40" pos:column="40">1<pos:position pos:line="40" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="43"/></expr_stmt>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
      <for pos:line="42" pos:column="7">for <control pos:line="42" pos:column="11">(<init pos:line="42" pos:column="12">;<pos:position pos:line="42" pos:column="13"/></init> <condition><expr><name pos:line="42" pos:column="14">bkc_idx<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">&lt;<pos:position pos:line="42" pos:column="26"/></operator> <name><name pos:line="42" pos:column="24">mctx<pos:position pos:line="42" pos:column="28"/></name><operator pos:line="42" pos:column="28">-&gt;<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="30">nbkref_ents<pos:position pos:line="42" pos:column="41"/></name></name></expr>;<pos:position pos:line="42" pos:column="42"/></condition> <incr><expr><operator pos:line="42" pos:column="43">++<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="45">bkc_idx<pos:position pos:line="42" pos:column="52"/></name></expr></incr>)<pos:position pos:line="42" pos:column="53"/></control>
	<block pos:line="43" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="44" pos:column="11">int<pos:position pos:line="44" pos:column="14"/></name></type> <name pos:line="44" pos:column="15">subexp_len<pos:position pos:line="44" pos:column="25"/></name></decl>;<pos:position pos:line="44" pos:column="26"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="45" pos:column="11">re_dfastate_t<pos:position pos:line="45" pos:column="24"/></name> <modifier pos:line="45" pos:column="25">*<pos:position pos:line="45" pos:column="26"/></modifier></type><name pos:line="45" pos:column="26">dest_state<pos:position pos:line="45" pos:column="36"/></name></decl>;<pos:position pos:line="45" pos:column="37"/></decl_stmt>
	  <decl_stmt><decl><type><name><name pos:line="46" pos:column="11">struct<pos:position pos:line="46" pos:column="17"/></name> <name pos:line="46" pos:column="18">re_backref_cache_entry<pos:position pos:line="46" pos:column="40"/></name></name> <modifier pos:line="46" pos:column="41">*<pos:position pos:line="46" pos:column="42"/></modifier></type><name pos:line="46" pos:column="42">bkref_ent<pos:position pos:line="46" pos:column="51"/></name></decl>;<pos:position pos:line="46" pos:column="52"/></decl_stmt>
	  <expr_stmt><expr><name pos:line="47" pos:column="11">bkref_ent<pos:position pos:line="47" pos:column="20"/></name> <operator pos:line="47" pos:column="21">=<pos:position pos:line="47" pos:column="22"/></operator> <name><name pos:line="47" pos:column="23">mctx<pos:position pos:line="47" pos:column="27"/></name><operator pos:line="47" pos:column="27">-&gt;<pos:position pos:line="47" pos:column="32"/></operator><name pos:line="47" pos:column="29">bkref_ents<pos:position pos:line="47" pos:column="39"/></name></name> <operator pos:line="47" pos:column="40">+<pos:position pos:line="47" pos:column="41"/></operator> <name pos:line="47" pos:column="42">bkc_idx<pos:position pos:line="47" pos:column="49"/></name></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt>
	  <if pos:line="48" pos:column="11">if <condition pos:line="48" pos:column="14">(<expr><name><name pos:line="48" pos:column="15">bkref_ent<pos:position pos:line="48" pos:column="24"/></name><operator pos:line="48" pos:column="24">-&gt;<pos:position pos:line="48" pos:column="29"/></operator><name pos:line="48" pos:column="26">node<pos:position pos:line="48" pos:column="30"/></name></name> <operator pos:line="48" pos:column="31">!=<pos:position pos:line="48" pos:column="33"/></operator> <name pos:line="48" pos:column="34">node_idx<pos:position pos:line="48" pos:column="42"/></name> <operator pos:line="48" pos:column="43">||<pos:position pos:line="48" pos:column="45"/></operator> <name><name pos:line="48" pos:column="46">bkref_ent<pos:position pos:line="48" pos:column="55"/></name><operator pos:line="48" pos:column="55">-&gt;<pos:position pos:line="48" pos:column="60"/></operator><name pos:line="48" pos:column="57">str_idx<pos:position pos:line="48" pos:column="64"/></name></name> <operator pos:line="48" pos:column="65">!=<pos:position pos:line="48" pos:column="67"/></operator> <name pos:line="48" pos:column="68">cur_str_idx<pos:position pos:line="48" pos:column="79"/></name></expr>)<pos:position pos:line="48" pos:column="80"/></condition><then pos:line="48" pos:column="80">
	    <block type="pseudo"><continue pos:line="49" pos:column="13">continue;<pos:position pos:line="49" pos:column="22"/></continue></block></then></if>
	  <expr_stmt><expr><name pos:line="50" pos:column="11">subexp_len<pos:position pos:line="50" pos:column="21"/></name> <operator pos:line="50" pos:column="22">=<pos:position pos:line="50" pos:column="23"/></operator> <name><name pos:line="50" pos:column="24">bkref_ent<pos:position pos:line="50" pos:column="33"/></name><operator pos:line="50" pos:column="33">-&gt;<pos:position pos:line="50" pos:column="38"/></operator><name pos:line="50" pos:column="35">subexp_to<pos:position pos:line="50" pos:column="44"/></name></name> <operator pos:line="50" pos:column="45">-<pos:position pos:line="50" pos:column="46"/></operator> <name><name pos:line="50" pos:column="47">bkref_ent<pos:position pos:line="50" pos:column="56"/></name><operator pos:line="50" pos:column="56">-&gt;<pos:position pos:line="50" pos:column="61"/></operator><name pos:line="50" pos:column="58">subexp_from<pos:position pos:line="50" pos:column="69"/></name></name></expr>;<pos:position pos:line="50" pos:column="70"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="51" pos:column="11">new_dest_nodes<pos:position pos:line="51" pos:column="25"/></name> <operator pos:line="51" pos:column="26">=<pos:position pos:line="51" pos:column="27"/></operator> <operator pos:line="51" pos:column="28">(<pos:position pos:line="51" pos:column="29"/></operator><ternary><condition><expr><name pos:line="51" pos:column="29">subexp_len<pos:position pos:line="51" pos:column="39"/></name> <operator pos:line="51" pos:column="40">==<pos:position pos:line="51" pos:column="42"/></operator> <literal type="number" pos:line="51" pos:column="43">0<pos:position pos:line="51" pos:column="44"/></literal></expr>
			    ?<pos:position pos:line="52" pos:column="30"/></condition><then pos:line="52" pos:column="30"> <expr><name><name pos:line="52" pos:column="31">dfa<pos:position pos:line="52" pos:column="34"/></name><operator pos:line="52" pos:column="34">-&gt;<pos:position pos:line="52" pos:column="39"/></operator><name pos:line="52" pos:column="36">eclosures<pos:position pos:line="52" pos:column="45"/></name></name> <operator pos:line="52" pos:column="46">+<pos:position pos:line="52" pos:column="47"/></operator> <name><name pos:line="52" pos:column="48">dfa<pos:position pos:line="52" pos:column="51"/></name><operator pos:line="52" pos:column="51">-&gt;<pos:position pos:line="52" pos:column="56"/></operator><name pos:line="52" pos:column="53">edests<pos:position pos:line="52" pos:column="59"/></name><index pos:line="52" pos:column="59">[<expr><name pos:line="52" pos:column="60">node_idx<pos:position pos:line="52" pos:column="68"/></name></expr>]<pos:position pos:line="52" pos:column="69"/></index></name><operator pos:line="52" pos:column="69">.<pos:position pos:line="52" pos:column="70"/></operator><name><name pos:line="52" pos:column="70">elems<pos:position pos:line="52" pos:column="75"/></name><index pos:line="52" pos:column="75">[<expr><literal type="number" pos:line="52" pos:column="76">0<pos:position pos:line="52" pos:column="77"/></literal></expr>]<pos:position pos:line="52" pos:column="78"/></index></name></expr>
			    <pos:position pos:line="53" pos:column="8"/></then><else pos:line="53" pos:column="29">: <expr><name><name pos:line="53" pos:column="31">dfa<pos:position pos:line="53" pos:column="34"/></name><operator pos:line="53" pos:column="34">-&gt;<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="36">eclosures<pos:position pos:line="53" pos:column="45"/></name></name> <operator pos:line="53" pos:column="46">+<pos:position pos:line="53" pos:column="47"/></operator> <name><name pos:line="53" pos:column="48">dfa<pos:position pos:line="53" pos:column="51"/></name><operator pos:line="53" pos:column="51">-&gt;<pos:position pos:line="53" pos:column="56"/></operator><name pos:line="53" pos:column="53">nexts<pos:position pos:line="53" pos:column="58"/></name><index pos:line="53" pos:column="58">[<expr><name pos:line="53" pos:column="59">node_idx<pos:position pos:line="53" pos:column="67"/></name></expr>]<pos:position pos:line="53" pos:column="68"/></index></name></expr></else></ternary><operator pos:line="53" pos:column="68">)<pos:position pos:line="53" pos:column="69"/></operator></expr>;<pos:position pos:line="53" pos:column="70"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="54" pos:column="11">dest_str_idx<pos:position pos:line="54" pos:column="23"/></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <operator pos:line="54" pos:column="26">(<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="27">cur_str_idx<pos:position pos:line="54" pos:column="38"/></name> <operator pos:line="54" pos:column="39">+<pos:position pos:line="54" pos:column="40"/></operator> <name><name pos:line="54" pos:column="41">bkref_ent<pos:position pos:line="54" pos:column="50"/></name><operator pos:line="54" pos:column="50">-&gt;<pos:position pos:line="54" pos:column="55"/></operator><name pos:line="54" pos:column="52">subexp_to<pos:position pos:line="54" pos:column="61"/></name></name>
			  <operator pos:line="55" pos:column="27">-<pos:position pos:line="55" pos:column="28"/></operator> <name><name pos:line="55" pos:column="29">bkref_ent<pos:position pos:line="55" pos:column="38"/></name><operator pos:line="55" pos:column="38">-&gt;<pos:position pos:line="55" pos:column="43"/></operator><name pos:line="55" pos:column="40">subexp_from<pos:position pos:line="55" pos:column="51"/></name></name><operator pos:line="55" pos:column="51">)<pos:position pos:line="55" pos:column="52"/></operator></expr>;<pos:position pos:line="55" pos:column="53"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="56" pos:column="11">context<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <call><name pos:line="56" pos:column="21">re_string_context_at<pos:position pos:line="56" pos:column="41"/></name> <argument_list pos:line="56" pos:column="42">(<argument><expr><operator pos:line="56" pos:column="43">&amp;<pos:position pos:line="56" pos:column="48"/></operator><name><name pos:line="56" pos:column="44">mctx<pos:position pos:line="56" pos:column="48"/></name><operator pos:line="56" pos:column="48">-&gt;<pos:position pos:line="56" pos:column="53"/></operator><name pos:line="56" pos:column="50">input<pos:position pos:line="56" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="57">dest_str_idx<pos:position pos:line="56" pos:column="69"/></name> <operator pos:line="56" pos:column="70">-<pos:position pos:line="56" pos:column="71"/></operator> <literal type="number" pos:line="56" pos:column="72">1<pos:position pos:line="56" pos:column="73"/></literal></expr></argument>,
					  <argument><expr><name><name pos:line="57" pos:column="43">mctx<pos:position pos:line="57" pos:column="47"/></name><operator pos:line="57" pos:column="47">-&gt;<pos:position pos:line="57" pos:column="52"/></operator><name pos:line="57" pos:column="49">eflags<pos:position pos:line="57" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="57"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="58" pos:column="11">dest_state<pos:position pos:line="58" pos:column="21"/></name> <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <name><name pos:line="58" pos:column="24">mctx<pos:position pos:line="58" pos:column="28"/></name><operator pos:line="58" pos:column="28">-&gt;<pos:position pos:line="58" pos:column="33"/></operator><name pos:line="58" pos:column="30">state_log<pos:position pos:line="58" pos:column="39"/></name><index pos:line="58" pos:column="39">[<expr><name pos:line="58" pos:column="40">dest_str_idx<pos:position pos:line="58" pos:column="52"/></name></expr>]<pos:position pos:line="58" pos:column="53"/></index></name></expr>;<pos:position pos:line="58" pos:column="54"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="59" pos:column="11">prev_nelem<pos:position pos:line="59" pos:column="21"/></name> <operator pos:line="59" pos:column="22">=<pos:position pos:line="59" pos:column="23"/></operator> <operator pos:line="59" pos:column="24">(<pos:position pos:line="59" pos:column="25"/></operator><ternary><condition><expr><operator pos:line="59" pos:column="25">(<pos:position pos:line="59" pos:column="26"/></operator><name><name pos:line="59" pos:column="26">mctx<pos:position pos:line="59" pos:column="30"/></name><operator pos:line="59" pos:column="30">-&gt;<pos:position pos:line="59" pos:column="35"/></operator><name pos:line="59" pos:column="32">state_log<pos:position pos:line="59" pos:column="41"/></name><index pos:line="59" pos:column="41">[<expr><name pos:line="59" pos:column="42">cur_str_idx<pos:position pos:line="59" pos:column="53"/></name></expr>]<pos:position pos:line="59" pos:column="54"/></index></name> <operator pos:line="59" pos:column="55">==<pos:position pos:line="59" pos:column="57"/></operator> <name pos:line="59" pos:column="58">NULL<pos:position pos:line="59" pos:column="62"/></name><operator pos:line="59" pos:column="62">)<pos:position pos:line="59" pos:column="63"/></operator></expr> ?<pos:position pos:line="59" pos:column="65"/></condition><then pos:line="59" pos:column="65"> <expr><literal type="number" pos:line="59" pos:column="66">0<pos:position pos:line="59" pos:column="67"/></literal></expr>
			<pos:position pos:line="60" pos:column="4"/></then><else pos:line="60" pos:column="25">: <expr><name><name pos:line="60" pos:column="27">mctx<pos:position pos:line="60" pos:column="31"/></name><operator pos:line="60" pos:column="31">-&gt;<pos:position pos:line="60" pos:column="36"/></operator><name pos:line="60" pos:column="33">state_log<pos:position pos:line="60" pos:column="42"/></name><index pos:line="60" pos:column="42">[<expr><name pos:line="60" pos:column="43">cur_str_idx<pos:position pos:line="60" pos:column="54"/></name></expr>]<pos:position pos:line="60" pos:column="55"/></index></name><operator pos:line="60" pos:column="55">-&gt;<pos:position pos:line="60" pos:column="60"/></operator><name><name pos:line="60" pos:column="57">nodes<pos:position pos:line="60" pos:column="62"/></name><operator pos:line="60" pos:column="62">.<pos:position pos:line="60" pos:column="63"/></operator><name pos:line="60" pos:column="63">nelem<pos:position pos:line="60" pos:column="68"/></name></name></expr></else></ternary><operator pos:line="60" pos:column="68">)<pos:position pos:line="60" pos:column="69"/></operator></expr>;<pos:position pos:line="60" pos:column="70"/></expr_stmt>
	  <comment type="block" pos:line="61" pos:column="11">/* Add `new_dest_node' to state_log.  */</comment>
	  <if pos:line="62" pos:column="11">if <condition pos:line="62" pos:column="14">(<expr><name pos:line="62" pos:column="15">dest_state<pos:position pos:line="62" pos:column="25"/></name> <operator pos:line="62" pos:column="26">==<pos:position pos:line="62" pos:column="28"/></operator> <name pos:line="62" pos:column="29">NULL<pos:position pos:line="62" pos:column="33"/></name></expr>)<pos:position pos:line="62" pos:column="34"/></condition><then pos:line="62" pos:column="34">
	    <block pos:line="63" pos:column="13">{
	      <expr_stmt><expr><name><name pos:line="64" pos:column="15">mctx<pos:position pos:line="64" pos:column="19"/></name><operator pos:line="64" pos:column="19">-&gt;<pos:position pos:line="64" pos:column="24"/></operator><name pos:line="64" pos:column="21">state_log<pos:position pos:line="64" pos:column="30"/></name><index pos:line="64" pos:column="30">[<expr><name pos:line="64" pos:column="31">dest_str_idx<pos:position pos:line="64" pos:column="43"/></name></expr>]<pos:position pos:line="64" pos:column="44"/></index></name>
		<operator pos:line="65" pos:column="17">=<pos:position pos:line="65" pos:column="18"/></operator> <call><name pos:line="65" pos:column="19">re_acquire_state_context<pos:position pos:line="65" pos:column="43"/></name> <argument_list pos:line="65" pos:column="44">(<argument><expr><operator pos:line="65" pos:column="45">&amp;<pos:position pos:line="65" pos:column="50"/></operator><name pos:line="65" pos:column="46">err<pos:position pos:line="65" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="51">dfa<pos:position pos:line="65" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="56">new_dest_nodes<pos:position pos:line="65" pos:column="70"/></name></expr></argument>,
					    <argument><expr><name pos:line="66" pos:column="45">context<pos:position pos:line="66" pos:column="52"/></name></expr></argument>)<pos:position pos:line="66" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="54"/></expr_stmt>
	      <if pos:line="67" pos:column="15">if <condition pos:line="67" pos:column="18">(<expr><call><name pos:line="67" pos:column="19">BE<pos:position pos:line="67" pos:column="21"/></name> <argument_list pos:line="67" pos:column="22">(<argument><expr><name><name pos:line="67" pos:column="23">mctx<pos:position pos:line="67" pos:column="27"/></name><operator pos:line="67" pos:column="27">-&gt;<pos:position pos:line="67" pos:column="32"/></operator><name pos:line="67" pos:column="29">state_log<pos:position pos:line="67" pos:column="38"/></name><index pos:line="67" pos:column="38">[<expr><name pos:line="67" pos:column="39">dest_str_idx<pos:position pos:line="67" pos:column="51"/></name></expr>]<pos:position pos:line="67" pos:column="52"/></index></name> <operator pos:line="67" pos:column="53">==<pos:position pos:line="67" pos:column="55"/></operator> <name pos:line="67" pos:column="56">NULL<pos:position pos:line="67" pos:column="60"/></name>
		      <operator pos:line="68" pos:column="23">&amp;&amp;<pos:position pos:line="68" pos:column="33"/></operator> <name pos:line="68" pos:column="26">err<pos:position pos:line="68" pos:column="29"/></name> <operator pos:line="68" pos:column="30">!=<pos:position pos:line="68" pos:column="32"/></operator> <name pos:line="68" pos:column="33">REG_NOERROR<pos:position pos:line="68" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="46">0<pos:position pos:line="68" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="49"/></condition><then pos:line="68" pos:column="49">
		<block type="pseudo"><goto pos:line="69" pos:column="17">goto <name pos:line="69" pos:column="22">free_return<pos:position pos:line="69" pos:column="33"/></name>;<pos:position pos:line="69" pos:column="34"/></goto></block></then></if>
	    }<pos:position pos:line="70" pos:column="14"/></block></then>
	  <else pos:line="71" pos:column="11">else
	    <block pos:line="72" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="73" pos:column="15">re_node_set<pos:position pos:line="73" pos:column="26"/></name></type> <name pos:line="73" pos:column="27">dest_nodes<pos:position pos:line="73" pos:column="37"/></name></decl>;<pos:position pos:line="73" pos:column="38"/></decl_stmt>
	      <expr_stmt><expr><name pos:line="74" pos:column="15">err<pos:position pos:line="74" pos:column="18"/></name> <operator pos:line="74" pos:column="19">=<pos:position pos:line="74" pos:column="20"/></operator> <call><name pos:line="74" pos:column="21">re_node_set_init_union<pos:position pos:line="74" pos:column="43"/></name> <argument_list pos:line="74" pos:column="44">(<argument><expr><operator pos:line="74" pos:column="45">&amp;<pos:position pos:line="74" pos:column="50"/></operator><name pos:line="74" pos:column="46">dest_nodes<pos:position pos:line="74" pos:column="56"/></name></expr></argument>,
					    <argument><expr><name><name pos:line="75" pos:column="45">dest_state<pos:position pos:line="75" pos:column="55"/></name><operator pos:line="75" pos:column="55">-&gt;<pos:position pos:line="75" pos:column="60"/></operator><name pos:line="75" pos:column="57">entrance_nodes<pos:position pos:line="75" pos:column="71"/></name></name></expr></argument>,
					    <argument><expr><name pos:line="76" pos:column="45">new_dest_nodes<pos:position pos:line="76" pos:column="59"/></name></expr></argument>)<pos:position pos:line="76" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="61"/></expr_stmt>
	      <if pos:line="77" pos:column="15">if <condition pos:line="77" pos:column="18">(<expr><call><name pos:line="77" pos:column="19">BE<pos:position pos:line="77" pos:column="21"/></name> <argument_list pos:line="77" pos:column="22">(<argument><expr><name pos:line="77" pos:column="23">err<pos:position pos:line="77" pos:column="26"/></name> <operator pos:line="77" pos:column="27">!=<pos:position pos:line="77" pos:column="29"/></operator> <name pos:line="77" pos:column="30">REG_NOERROR<pos:position pos:line="77" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="43">0<pos:position pos:line="77" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="46"/></condition><then pos:line="77" pos:column="46">
		<block pos:line="78" pos:column="17">{
		  <expr_stmt><expr><call><name pos:line="79" pos:column="19">re_node_set_free<pos:position pos:line="79" pos:column="35"/></name> <argument_list pos:line="79" pos:column="36">(<argument><expr><operator pos:line="79" pos:column="37">&amp;<pos:position pos:line="79" pos:column="42"/></operator><name pos:line="79" pos:column="38">dest_nodes<pos:position pos:line="79" pos:column="48"/></name></expr></argument>)<pos:position pos:line="79" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="50"/></expr_stmt>
		  <goto pos:line="80" pos:column="19">goto <name pos:line="80" pos:column="24">free_return<pos:position pos:line="80" pos:column="35"/></name>;<pos:position pos:line="80" pos:column="36"/></goto>
		}<pos:position pos:line="81" pos:column="18"/></block></then></if>
	      <expr_stmt><expr><name><name pos:line="82" pos:column="15">mctx<pos:position pos:line="82" pos:column="19"/></name><operator pos:line="82" pos:column="19">-&gt;<pos:position pos:line="82" pos:column="24"/></operator><name pos:line="82" pos:column="21">state_log<pos:position pos:line="82" pos:column="30"/></name><index pos:line="82" pos:column="30">[<expr><name pos:line="82" pos:column="31">dest_str_idx<pos:position pos:line="82" pos:column="43"/></name></expr>]<pos:position pos:line="82" pos:column="44"/></index></name>
		<operator pos:line="83" pos:column="17">=<pos:position pos:line="83" pos:column="18"/></operator> <call><name pos:line="83" pos:column="19">re_acquire_state_context<pos:position pos:line="83" pos:column="43"/></name> <argument_list pos:line="83" pos:column="44">(<argument><expr><operator pos:line="83" pos:column="45">&amp;<pos:position pos:line="83" pos:column="50"/></operator><name pos:line="83" pos:column="46">err<pos:position pos:line="83" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="51">dfa<pos:position pos:line="83" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="56">&amp;<pos:position pos:line="83" pos:column="61"/></operator><name pos:line="83" pos:column="57">dest_nodes<pos:position pos:line="83" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="69">context<pos:position pos:line="83" pos:column="76"/></name></expr></argument>)<pos:position pos:line="83" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="78"/></expr_stmt>
	      <expr_stmt><expr><call><name pos:line="84" pos:column="15">re_node_set_free<pos:position pos:line="84" pos:column="31"/></name> <argument_list pos:line="84" pos:column="32">(<argument><expr><operator pos:line="84" pos:column="33">&amp;<pos:position pos:line="84" pos:column="38"/></operator><name pos:line="84" pos:column="34">dest_nodes<pos:position pos:line="84" pos:column="44"/></name></expr></argument>)<pos:position pos:line="84" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="46"/></expr_stmt>
	      <if pos:line="85" pos:column="15">if <condition pos:line="85" pos:column="18">(<expr><call><name pos:line="85" pos:column="19">BE<pos:position pos:line="85" pos:column="21"/></name> <argument_list pos:line="85" pos:column="22">(<argument><expr><name><name pos:line="85" pos:column="23">mctx<pos:position pos:line="85" pos:column="27"/></name><operator pos:line="85" pos:column="27">-&gt;<pos:position pos:line="85" pos:column="32"/></operator><name pos:line="85" pos:column="29">state_log<pos:position pos:line="85" pos:column="38"/></name><index pos:line="85" pos:column="38">[<expr><name pos:line="85" pos:column="39">dest_str_idx<pos:position pos:line="85" pos:column="51"/></name></expr>]<pos:position pos:line="85" pos:column="52"/></index></name> <operator pos:line="85" pos:column="53">==<pos:position pos:line="85" pos:column="55"/></operator> <name pos:line="85" pos:column="56">NULL<pos:position pos:line="85" pos:column="60"/></name>
		      <operator pos:line="86" pos:column="23">&amp;&amp;<pos:position pos:line="86" pos:column="33"/></operator> <name pos:line="86" pos:column="26">err<pos:position pos:line="86" pos:column="29"/></name> <operator pos:line="86" pos:column="30">!=<pos:position pos:line="86" pos:column="32"/></operator> <name pos:line="86" pos:column="33">REG_NOERROR<pos:position pos:line="86" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="46">0<pos:position pos:line="86" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="49"/></condition><then pos:line="86" pos:column="49">
		<block type="pseudo"><goto pos:line="87" pos:column="17">goto <name pos:line="87" pos:column="22">free_return<pos:position pos:line="87" pos:column="33"/></name>;<pos:position pos:line="87" pos:column="34"/></goto></block></then></if>
	    }<pos:position pos:line="88" pos:column="14"/></block></else></if>
	  <comment type="block" pos:line="89" pos:column="11">/* We need to check recursively if the backreference can epsilon
	     transit.  */</comment>
	  <if pos:line="91" pos:column="11">if <condition pos:line="91" pos:column="14">(<expr><name pos:line="91" pos:column="15">subexp_len<pos:position pos:line="91" pos:column="25"/></name> <operator pos:line="91" pos:column="26">==<pos:position pos:line="91" pos:column="28"/></operator> <literal type="number" pos:line="91" pos:column="29">0<pos:position pos:line="91" pos:column="30"/></literal>
	      <operator pos:line="92" pos:column="15">&amp;&amp;<pos:position pos:line="92" pos:column="25"/></operator> <name><name pos:line="92" pos:column="18">mctx<pos:position pos:line="92" pos:column="22"/></name><operator pos:line="92" pos:column="22">-&gt;<pos:position pos:line="92" pos:column="27"/></operator><name pos:line="92" pos:column="24">state_log<pos:position pos:line="92" pos:column="33"/></name><index pos:line="92" pos:column="33">[<expr><name pos:line="92" pos:column="34">cur_str_idx<pos:position pos:line="92" pos:column="45"/></name></expr>]<pos:position pos:line="92" pos:column="46"/></index></name><operator pos:line="92" pos:column="46">-&gt;<pos:position pos:line="92" pos:column="51"/></operator><name><name pos:line="92" pos:column="48">nodes<pos:position pos:line="92" pos:column="53"/></name><operator pos:line="92" pos:column="53">.<pos:position pos:line="92" pos:column="54"/></operator><name pos:line="92" pos:column="54">nelem<pos:position pos:line="92" pos:column="59"/></name></name> <operator pos:line="92" pos:column="60">&gt;<pos:position pos:line="92" pos:column="64"/></operator> <name pos:line="92" pos:column="62">prev_nelem<pos:position pos:line="92" pos:column="72"/></name></expr>)<pos:position pos:line="92" pos:column="73"/></condition><then pos:line="92" pos:column="73">
	    <block pos:line="93" pos:column="13">{
	      <expr_stmt><expr><name pos:line="94" pos:column="15">err<pos:position pos:line="94" pos:column="18"/></name> <operator pos:line="94" pos:column="19">=<pos:position pos:line="94" pos:column="20"/></operator> <call><name pos:line="94" pos:column="21">check_subexp_matching_top<pos:position pos:line="94" pos:column="46"/></name> <argument_list pos:line="94" pos:column="47">(<argument><expr><name pos:line="94" pos:column="48">mctx<pos:position pos:line="94" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="54">new_dest_nodes<pos:position pos:line="94" pos:column="68"/></name></expr></argument>,
					       <argument><expr><name pos:line="95" pos:column="48">cur_str_idx<pos:position pos:line="95" pos:column="59"/></name></expr></argument>)<pos:position pos:line="95" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="61"/></expr_stmt>
	      <if pos:line="96" pos:column="15">if <condition pos:line="96" pos:column="18">(<expr><call><name pos:line="96" pos:column="19">BE<pos:position pos:line="96" pos:column="21"/></name> <argument_list pos:line="96" pos:column="22">(<argument><expr><name pos:line="96" pos:column="23">err<pos:position pos:line="96" pos:column="26"/></name> <operator pos:line="96" pos:column="27">!=<pos:position pos:line="96" pos:column="29"/></operator> <name pos:line="96" pos:column="30">REG_NOERROR<pos:position pos:line="96" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="96" pos:column="43">0<pos:position pos:line="96" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="46"/></condition><then pos:line="96" pos:column="46">
		<block type="pseudo"><goto pos:line="97" pos:column="17">goto <name pos:line="97" pos:column="22">free_return<pos:position pos:line="97" pos:column="33"/></name>;<pos:position pos:line="97" pos:column="34"/></goto></block></then></if>
	      <expr_stmt><expr><name pos:line="98" pos:column="15">err<pos:position pos:line="98" pos:column="18"/></name> <operator pos:line="98" pos:column="19">=<pos:position pos:line="98" pos:column="20"/></operator> <call><name pos:line="98" pos:column="21">transit_state_bkref<pos:position pos:line="98" pos:column="40"/></name> <argument_list pos:line="98" pos:column="41">(<argument><expr><name pos:line="98" pos:column="42">mctx<pos:position pos:line="98" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="48">new_dest_nodes<pos:position pos:line="98" pos:column="62"/></name></expr></argument>)<pos:position pos:line="98" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="64"/></expr_stmt>
	      <if pos:line="99" pos:column="15">if <condition pos:line="99" pos:column="18">(<expr><call><name pos:line="99" pos:column="19">BE<pos:position pos:line="99" pos:column="21"/></name> <argument_list pos:line="99" pos:column="22">(<argument><expr><name pos:line="99" pos:column="23">err<pos:position pos:line="99" pos:column="26"/></name> <operator pos:line="99" pos:column="27">!=<pos:position pos:line="99" pos:column="29"/></operator> <name pos:line="99" pos:column="30">REG_NOERROR<pos:position pos:line="99" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="99" pos:column="43">0<pos:position pos:line="99" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="46"/></condition><then pos:line="99" pos:column="46">
		<block type="pseudo"><goto pos:line="100" pos:column="17">goto <name pos:line="100" pos:column="22">free_return<pos:position pos:line="100" pos:column="33"/></name>;<pos:position pos:line="100" pos:column="34"/></goto></block></then></if>
	    }<pos:position pos:line="101" pos:column="14"/></block></then></if>
	}<pos:position pos:line="102" pos:column="10"/></block></for>
    }<pos:position pos:line="103" pos:column="6"/></block></for>
  <expr_stmt><expr><name pos:line="104" pos:column="3">err<pos:position pos:line="104" pos:column="6"/></name> <operator pos:line="104" pos:column="7">=<pos:position pos:line="104" pos:column="8"/></operator> <name pos:line="104" pos:column="9">REG_NOERROR<pos:position pos:line="104" pos:column="20"/></name></expr>;<pos:position pos:line="104" pos:column="21"/></expr_stmt>
 <label><name pos:line="105" pos:column="2">free_return<pos:position pos:line="105" pos:column="13"/></name>:<pos:position pos:line="105" pos:column="14"/></label>
  <return pos:line="106" pos:column="3">return <expr><name pos:line="106" pos:column="10">err<pos:position pos:line="106" pos:column="13"/></name></expr>;<pos:position pos:line="106" pos:column="14"/></return>
}<pos:position pos:line="107" pos:column="2"/></block></function></unit>
