<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6869_git-2.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name><modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier><modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type> <name pos:line="1" pos:column="15">ialloc<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">mstate<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">m<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="2" pos:column="22">size_t<pos:position pos:line="2" pos:column="28"/></name></type> <name pos:line="2" pos:column="29">n_elements<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="3" pos:column="22">size_t<pos:position pos:line="3" pos:column="28"/></name><modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type> <name pos:line="3" pos:column="30">sizes<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="4" pos:column="22">int<pos:position pos:line="4" pos:column="25"/></name></type> <name pos:line="4" pos:column="26">opts<pos:position pos:line="4" pos:column="30"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="5" pos:column="22">void<pos:position pos:line="5" pos:column="26"/></name><modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type> <name><name pos:line="5" pos:column="28">chunks<pos:position pos:line="5" pos:column="34"/></name><index pos:line="5" pos:column="34">[]<pos:position pos:line="5" pos:column="36"/></index></name></decl></parameter>)<pos:position pos:line="5" pos:column="37"/></parameter_list> <block pos:line="5" pos:column="38">{
  <comment type="block" pos:line="6" pos:column="3">/*
    This provides common support for independent_X routines, handling
    all of the combinations that can result.

    The opts arg has:
    bit 0 set if all elements are same size (using sizes[0])
    bit 1 set if elements should be zeroed
  */</comment>

  <decl_stmt><decl><type><name pos:line="15" pos:column="3">size_t<pos:position pos:line="15" pos:column="9"/></name></type>    <name pos:line="15" pos:column="13">element_size<pos:position pos:line="15" pos:column="25"/></name></decl>;<pos:position pos:line="15" pos:column="26"/></decl_stmt>   <comment type="block" pos:line="15" pos:column="29">/* chunksize of each element, if all same */</comment>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">size_t<pos:position pos:line="16" pos:column="9"/></name></type>    <name pos:line="16" pos:column="13">contents_size<pos:position pos:line="16" pos:column="26"/></name></decl>;<pos:position pos:line="16" pos:column="27"/></decl_stmt>  <comment type="block" pos:line="16" pos:column="29">/* total size of elements */</comment>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">size_t<pos:position pos:line="17" pos:column="9"/></name></type>    <name pos:line="17" pos:column="13">array_size<pos:position pos:line="17" pos:column="23"/></name></decl>;<pos:position pos:line="17" pos:column="24"/></decl_stmt>     <comment type="block" pos:line="17" pos:column="29">/* request size of pointer array */</comment>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">void<pos:position pos:line="18" pos:column="7"/></name><modifier pos:line="18" pos:column="7">*<pos:position pos:line="18" pos:column="8"/></modifier></type>     <name pos:line="18" pos:column="13">mem<pos:position pos:line="18" pos:column="16"/></name></decl>;<pos:position pos:line="18" pos:column="17"/></decl_stmt>            <comment type="block" pos:line="18" pos:column="29">/* malloced aggregate space */</comment>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">mchunkptr<pos:position pos:line="19" pos:column="12"/></name></type> <name pos:line="19" pos:column="13">p<pos:position pos:line="19" pos:column="14"/></name></decl>;<pos:position pos:line="19" pos:column="15"/></decl_stmt>              <comment type="block" pos:line="19" pos:column="29">/* corresponding chunk */</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">size_t<pos:position pos:line="20" pos:column="9"/></name></type>    <name pos:line="20" pos:column="13">remainder_size<pos:position pos:line="20" pos:column="27"/></name></decl>;<pos:position pos:line="20" pos:column="28"/></decl_stmt> <comment type="block" pos:line="20" pos:column="29">/* remaining bytes while splitting */</comment>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">void<pos:position pos:line="21" pos:column="7"/></name><modifier pos:line="21" pos:column="7">*<pos:position pos:line="21" pos:column="8"/></modifier><modifier pos:line="21" pos:column="8">*<pos:position pos:line="21" pos:column="9"/></modifier></type>    <name pos:line="21" pos:column="13">marray<pos:position pos:line="21" pos:column="19"/></name></decl>;<pos:position pos:line="21" pos:column="20"/></decl_stmt>         <comment type="block" pos:line="21" pos:column="29">/* either "chunks" or malloced ptr array */</comment>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">mchunkptr<pos:position pos:line="22" pos:column="12"/></name></type> <name pos:line="22" pos:column="13">array_chunk<pos:position pos:line="22" pos:column="24"/></name></decl>;<pos:position pos:line="22" pos:column="25"/></decl_stmt>    <comment type="block" pos:line="22" pos:column="29">/* chunk for malloced ptr array */</comment>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">flag_t<pos:position pos:line="23" pos:column="9"/></name></type>    <name pos:line="23" pos:column="13">was_enabled<pos:position pos:line="23" pos:column="24"/></name></decl>;<pos:position pos:line="23" pos:column="25"/></decl_stmt>    <comment type="block" pos:line="23" pos:column="29">/* to disable mmap */</comment>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">size_t<pos:position pos:line="24" pos:column="9"/></name></type>    <name pos:line="24" pos:column="13">size<pos:position pos:line="24" pos:column="17"/></name></decl>;<pos:position pos:line="24" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">size_t<pos:position pos:line="25" pos:column="9"/></name></type>    <name pos:line="25" pos:column="13">i<pos:position pos:line="25" pos:column="14"/></name></decl>;<pos:position pos:line="25" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="27" pos:column="3">ensure_initialization<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">()<pos:position pos:line="27" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
  <comment type="block" pos:line="28" pos:column="3">/* compute array length, if needed */</comment>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">chunks<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">!=<pos:position pos:line="29" pos:column="16"/></operator> <literal type="number" pos:line="29" pos:column="17">0<pos:position pos:line="29" pos:column="18"/></literal></expr>)<pos:position pos:line="29" pos:column="19"/></condition><then pos:line="29" pos:column="19"> <block pos:line="29" pos:column="20">{
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">n_elements<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">==<pos:position pos:line="30" pos:column="22"/></operator> <literal type="number" pos:line="30" pos:column="23">0<pos:position pos:line="30" pos:column="24"/></literal></expr>)<pos:position pos:line="30" pos:column="25"/></condition><then pos:line="30" pos:column="25">
      <block type="pseudo"><return pos:line="31" pos:column="7">return <expr><name pos:line="31" pos:column="14">chunks<pos:position pos:line="31" pos:column="20"/></name></expr>;<pos:position pos:line="31" pos:column="21"/></return></block></then></if> <comment type="block" pos:line="31" pos:column="22">/* nothing to do */</comment>
    <expr_stmt><expr><name pos:line="32" pos:column="5">marray<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <name pos:line="32" pos:column="14">chunks<pos:position pos:line="32" pos:column="20"/></name></expr>;<pos:position pos:line="32" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="33" pos:column="5">array_size<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <literal type="number" pos:line="33" pos:column="18">0<pos:position pos:line="33" pos:column="19"/></literal></expr>;<pos:position pos:line="33" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></then>
  <else pos:line="35" pos:column="3">else <block pos:line="35" pos:column="8">{
    <comment type="block" pos:line="36" pos:column="5">/* if empty req, must still return chunk representing empty array */</comment>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">n_elements<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">==<pos:position pos:line="37" pos:column="22"/></operator> <literal type="number" pos:line="37" pos:column="23">0<pos:position pos:line="37" pos:column="24"/></literal></expr>)<pos:position pos:line="37" pos:column="25"/></condition><then pos:line="37" pos:column="25">
      <block type="pseudo"><return pos:line="38" pos:column="7">return <expr><operator pos:line="38" pos:column="14">(<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="15">void<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">*<pos:position pos:line="38" pos:column="20"/></operator><operator pos:line="38" pos:column="20">*<pos:position pos:line="38" pos:column="21"/></operator><operator pos:line="38" pos:column="21">)<pos:position pos:line="38" pos:column="22"/></operator><call><name pos:line="38" pos:column="22">internal_malloc<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">(<argument><expr><name pos:line="38" pos:column="38">m<pos:position pos:line="38" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="41">0<pos:position pos:line="38" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="44"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="39" pos:column="5">marray<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <literal type="number" pos:line="39" pos:column="14">0<pos:position pos:line="39" pos:column="15"/></literal></expr>;<pos:position pos:line="39" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="40" pos:column="5">array_size<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <call><name pos:line="40" pos:column="18">request2size<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">n_elements<pos:position pos:line="40" pos:column="41"/></name> <operator pos:line="40" pos:column="42">*<pos:position pos:line="40" pos:column="43"/></operator> <operator pos:line="40" pos:column="44">(<pos:position pos:line="40" pos:column="45"/></operator><sizeof pos:line="40" pos:column="45">sizeof<argument_list pos:line="40" pos:column="51">(<argument><expr><name pos:line="40" pos:column="52">void<pos:position pos:line="40" pos:column="56"/></name><operator pos:line="40" pos:column="56">*<pos:position pos:line="40" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="40" pos:column="58"/></argument_list></sizeof><operator pos:line="40" pos:column="58">)<pos:position pos:line="40" pos:column="59"/></operator></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="61"/></expr_stmt>
  }<pos:position pos:line="41" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="43" pos:column="3">/* compute total element size */</comment>
  <if pos:line="44" pos:column="3">if <condition pos:line="44" pos:column="6">(<expr><name pos:line="44" pos:column="7">opts<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">&amp;<pos:position pos:line="44" pos:column="17"/></operator> <literal type="number" pos:line="44" pos:column="14">0x1<pos:position pos:line="44" pos:column="17"/></literal></expr>)<pos:position pos:line="44" pos:column="18"/></condition><then pos:line="44" pos:column="18"> <block pos:line="44" pos:column="19">{ <comment type="block" pos:line="44" pos:column="21">/* all-same-size */</comment>
    <expr_stmt><expr><name pos:line="45" pos:column="5">element_size<pos:position pos:line="45" pos:column="17"/></name> <operator pos:line="45" pos:column="18">=<pos:position pos:line="45" pos:column="19"/></operator> <call><name pos:line="45" pos:column="20">request2size<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><operator pos:line="45" pos:column="33">*<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="34">sizes<pos:position pos:line="45" pos:column="39"/></name></expr></argument>)<pos:position pos:line="45" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="46" pos:column="5">contents_size<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">=<pos:position pos:line="46" pos:column="20"/></operator> <name pos:line="46" pos:column="21">n_elements<pos:position pos:line="46" pos:column="31"/></name> <operator pos:line="46" pos:column="32">*<pos:position pos:line="46" pos:column="33"/></operator> <name pos:line="46" pos:column="34">element_size<pos:position pos:line="46" pos:column="46"/></name></expr>;<pos:position pos:line="46" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block></then>
  <else pos:line="48" pos:column="3">else <block pos:line="48" pos:column="8">{ <comment type="block" pos:line="48" pos:column="10">/* add up all the sizes */</comment>
    <expr_stmt><expr><name pos:line="49" pos:column="5">element_size<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <literal type="number" pos:line="49" pos:column="20">0<pos:position pos:line="49" pos:column="21"/></literal></expr>;<pos:position pos:line="49" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="50" pos:column="5">contents_size<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <literal type="number" pos:line="50" pos:column="21">0<pos:position pos:line="50" pos:column="22"/></literal></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt>
    <for pos:line="51" pos:column="5">for <control pos:line="51" pos:column="9">(<init><expr><name pos:line="51" pos:column="10">i<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">=<pos:position pos:line="51" pos:column="13"/></operator> <literal type="number" pos:line="51" pos:column="14">0<pos:position pos:line="51" pos:column="15"/></literal></expr>;<pos:position pos:line="51" pos:column="16"/></init> <condition><expr><name pos:line="51" pos:column="17">i<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">!=<pos:position pos:line="51" pos:column="21"/></operator> <name pos:line="51" pos:column="22">n_elements<pos:position pos:line="51" pos:column="32"/></name></expr>;<pos:position pos:line="51" pos:column="33"/></condition> <incr><expr><operator pos:line="51" pos:column="34">++<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="36">i<pos:position pos:line="51" pos:column="37"/></name></expr></incr>)<pos:position pos:line="51" pos:column="38"/></control>
      <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="7">contents_size<pos:position pos:line="52" pos:column="20"/></name> <operator pos:line="52" pos:column="21">+=<pos:position pos:line="52" pos:column="23"/></operator> <call><name pos:line="52" pos:column="24">request2size<pos:position pos:line="52" pos:column="36"/></name><argument_list pos:line="52" pos:column="36">(<argument><expr><name><name pos:line="52" pos:column="37">sizes<pos:position pos:line="52" pos:column="42"/></name><index pos:line="52" pos:column="42">[<expr><name pos:line="52" pos:column="43">i<pos:position pos:line="52" pos:column="44"/></name></expr>]<pos:position pos:line="52" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="52" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="47"/></expr_stmt></block></for>
  }<pos:position pos:line="53" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name pos:line="55" pos:column="3">size<pos:position pos:line="55" pos:column="7"/></name> <operator pos:line="55" pos:column="8">=<pos:position pos:line="55" pos:column="9"/></operator> <name pos:line="55" pos:column="10">contents_size<pos:position pos:line="55" pos:column="23"/></name> <operator pos:line="55" pos:column="24">+<pos:position pos:line="55" pos:column="25"/></operator> <name pos:line="55" pos:column="26">array_size<pos:position pos:line="55" pos:column="36"/></name></expr>;<pos:position pos:line="55" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="57" pos:column="3">/*
     Allocate the aggregate chunk.  First disable direct-mmapping so
     malloc won't use it, since we would not be able to later
     free/realloc space internal to a segregated mmap region.
  */</comment>
  <expr_stmt><expr><name pos:line="62" pos:column="3">was_enabled<pos:position pos:line="62" pos:column="14"/></name> <operator pos:line="62" pos:column="15">=<pos:position pos:line="62" pos:column="16"/></operator> <call><name pos:line="62" pos:column="17">use_mmap<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">m<pos:position pos:line="62" pos:column="27"/></name></expr></argument>)<pos:position pos:line="62" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="63" pos:column="3">disable_mmap<pos:position pos:line="63" pos:column="15"/></name><argument_list pos:line="63" pos:column="15">(<argument><expr><name pos:line="63" pos:column="16">m<pos:position pos:line="63" pos:column="17"/></name></expr></argument>)<pos:position pos:line="63" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="64" pos:column="3">mem<pos:position pos:line="64" pos:column="6"/></name> <operator pos:line="64" pos:column="7">=<pos:position pos:line="64" pos:column="8"/></operator> <call><name pos:line="64" pos:column="9">internal_malloc<pos:position pos:line="64" pos:column="24"/></name><argument_list pos:line="64" pos:column="24">(<argument><expr><name pos:line="64" pos:column="25">m<pos:position pos:line="64" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="28">size<pos:position pos:line="64" pos:column="32"/></name> <operator pos:line="64" pos:column="33">-<pos:position pos:line="64" pos:column="34"/></operator> <name pos:line="64" pos:column="35">CHUNK_OVERHEAD<pos:position pos:line="64" pos:column="49"/></name></expr></argument>)<pos:position pos:line="64" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="51"/></expr_stmt>
  <if pos:line="65" pos:column="3">if <condition pos:line="65" pos:column="6">(<expr><name pos:line="65" pos:column="7">was_enabled<pos:position pos:line="65" pos:column="18"/></name></expr>)<pos:position pos:line="65" pos:column="19"/></condition><then pos:line="65" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="5">enable_mmap<pos:position pos:line="66" pos:column="16"/></name><argument_list pos:line="66" pos:column="16">(<argument><expr><name pos:line="66" pos:column="17">m<pos:position pos:line="66" pos:column="18"/></name></expr></argument>)<pos:position pos:line="66" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="20"/></expr_stmt></block></then></if>
  <if pos:line="67" pos:column="3">if <condition pos:line="67" pos:column="6">(<expr><name pos:line="67" pos:column="7">mem<pos:position pos:line="67" pos:column="10"/></name> <operator pos:line="67" pos:column="11">==<pos:position pos:line="67" pos:column="13"/></operator> <literal type="number" pos:line="67" pos:column="14">0<pos:position pos:line="67" pos:column="15"/></literal></expr>)<pos:position pos:line="67" pos:column="16"/></condition><then pos:line="67" pos:column="16">
    <block type="pseudo"><return pos:line="68" pos:column="5">return <expr><literal type="number" pos:line="68" pos:column="12">0<pos:position pos:line="68" pos:column="13"/></literal></expr>;<pos:position pos:line="68" pos:column="14"/></return></block></then></if>

  <if pos:line="70" pos:column="3">if <condition pos:line="70" pos:column="6">(<expr><call><name pos:line="70" pos:column="7">PREACTION<pos:position pos:line="70" pos:column="16"/></name><argument_list pos:line="70" pos:column="16">(<argument><expr><name pos:line="70" pos:column="17">m<pos:position pos:line="70" pos:column="18"/></name></expr></argument>)<pos:position pos:line="70" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="20"/></condition><then pos:line="70" pos:column="20"> <block type="pseudo"><return pos:line="70" pos:column="21">return <expr><literal type="number" pos:line="70" pos:column="28">0<pos:position pos:line="70" pos:column="29"/></literal></expr>;<pos:position pos:line="70" pos:column="30"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="71" pos:column="3">p<pos:position pos:line="71" pos:column="4"/></name> <operator pos:line="71" pos:column="5">=<pos:position pos:line="71" pos:column="6"/></operator> <call><name pos:line="71" pos:column="7">mem2chunk<pos:position pos:line="71" pos:column="16"/></name><argument_list pos:line="71" pos:column="16">(<argument><expr><name pos:line="71" pos:column="17">mem<pos:position pos:line="71" pos:column="20"/></name></expr></argument>)<pos:position pos:line="71" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="72" pos:column="3">remainder_size<pos:position pos:line="72" pos:column="17"/></name> <operator pos:line="72" pos:column="18">=<pos:position pos:line="72" pos:column="19"/></operator> <call><name pos:line="72" pos:column="20">chunksize<pos:position pos:line="72" pos:column="29"/></name><argument_list pos:line="72" pos:column="29">(<argument><expr><name pos:line="72" pos:column="30">p<pos:position pos:line="72" pos:column="31"/></name></expr></argument>)<pos:position pos:line="72" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="74" pos:column="3">assert<pos:position pos:line="74" pos:column="9"/></name><argument_list pos:line="74" pos:column="9">(<argument><expr><operator pos:line="74" pos:column="10">!<pos:position pos:line="74" pos:column="11"/></operator><call><name pos:line="74" pos:column="11">is_mmapped<pos:position pos:line="74" pos:column="21"/></name><argument_list pos:line="74" pos:column="21">(<argument><expr><name pos:line="74" pos:column="22">p<pos:position pos:line="74" pos:column="23"/></name></expr></argument>)<pos:position pos:line="74" pos:column="24"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="26"/></expr_stmt>

  <if pos:line="76" pos:column="3">if <condition pos:line="76" pos:column="6">(<expr><name pos:line="76" pos:column="7">opts<pos:position pos:line="76" pos:column="11"/></name> <operator pos:line="76" pos:column="12">&amp;<pos:position pos:line="76" pos:column="17"/></operator> <literal type="number" pos:line="76" pos:column="14">0x2<pos:position pos:line="76" pos:column="17"/></literal></expr>)<pos:position pos:line="76" pos:column="18"/></condition><then pos:line="76" pos:column="18"> <block pos:line="76" pos:column="19">{       <comment type="block" pos:line="76" pos:column="27">/* optionally clear the elements */</comment>
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">memset<pos:position pos:line="77" pos:column="11"/></name><argument_list pos:line="77" pos:column="11">(<argument><expr><operator pos:line="77" pos:column="12">(<pos:position pos:line="77" pos:column="13"/></operator><name pos:line="77" pos:column="13">size_t<pos:position pos:line="77" pos:column="19"/></name><operator pos:line="77" pos:column="19">*<pos:position pos:line="77" pos:column="20"/></operator><operator pos:line="77" pos:column="20">)<pos:position pos:line="77" pos:column="21"/></operator><name pos:line="77" pos:column="21">mem<pos:position pos:line="77" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="26">0<pos:position pos:line="77" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="29">remainder_size<pos:position pos:line="77" pos:column="43"/></name> <operator pos:line="77" pos:column="44">-<pos:position pos:line="77" pos:column="45"/></operator> <name pos:line="77" pos:column="46">SIZE_T_SIZE<pos:position pos:line="77" pos:column="57"/></name> <operator pos:line="77" pos:column="58">-<pos:position pos:line="77" pos:column="59"/></operator> <name pos:line="77" pos:column="60">array_size<pos:position pos:line="77" pos:column="70"/></name></expr></argument>)<pos:position pos:line="77" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="72"/></expr_stmt>
  }<pos:position pos:line="78" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="80" pos:column="3">/* If not provided, allocate the pointer array as final part of chunk */</comment>
  <if pos:line="81" pos:column="3">if <condition pos:line="81" pos:column="6">(<expr><name pos:line="81" pos:column="7">marray<pos:position pos:line="81" pos:column="13"/></name> <operator pos:line="81" pos:column="14">==<pos:position pos:line="81" pos:column="16"/></operator> <literal type="number" pos:line="81" pos:column="17">0<pos:position pos:line="81" pos:column="18"/></literal></expr>)<pos:position pos:line="81" pos:column="19"/></condition><then pos:line="81" pos:column="19"> <block pos:line="81" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="82" pos:column="5">size_t<pos:position pos:line="82" pos:column="11"/></name></type>  <name pos:line="82" pos:column="13">array_chunk_size<pos:position pos:line="82" pos:column="29"/></name></decl>;<pos:position pos:line="82" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><name pos:line="83" pos:column="5">array_chunk<pos:position pos:line="83" pos:column="16"/></name> <operator pos:line="83" pos:column="17">=<pos:position pos:line="83" pos:column="18"/></operator> <call><name pos:line="83" pos:column="19">chunk_plus_offset<pos:position pos:line="83" pos:column="36"/></name><argument_list pos:line="83" pos:column="36">(<argument><expr><name pos:line="83" pos:column="37">p<pos:position pos:line="83" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="40">contents_size<pos:position pos:line="83" pos:column="53"/></name></expr></argument>)<pos:position pos:line="83" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name pos:line="84" pos:column="5">array_chunk_size<pos:position pos:line="84" pos:column="21"/></name> <operator pos:line="84" pos:column="22">=<pos:position pos:line="84" pos:column="23"/></operator> <name pos:line="84" pos:column="24">remainder_size<pos:position pos:line="84" pos:column="38"/></name> <operator pos:line="84" pos:column="39">-<pos:position pos:line="84" pos:column="40"/></operator> <name pos:line="84" pos:column="41">contents_size<pos:position pos:line="84" pos:column="54"/></name></expr>;<pos:position pos:line="84" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name pos:line="85" pos:column="5">marray<pos:position pos:line="85" pos:column="11"/></name> <operator pos:line="85" pos:column="12">=<pos:position pos:line="85" pos:column="13"/></operator> <operator pos:line="85" pos:column="14">(<pos:position pos:line="85" pos:column="15"/></operator><name pos:line="85" pos:column="15">void<pos:position pos:line="85" pos:column="19"/></name><operator pos:line="85" pos:column="19">*<pos:position pos:line="85" pos:column="20"/></operator><operator pos:line="85" pos:column="20">*<pos:position pos:line="85" pos:column="21"/></operator><operator pos:line="85" pos:column="21">)<pos:position pos:line="85" pos:column="22"/></operator> <operator pos:line="85" pos:column="23">(<pos:position pos:line="85" pos:column="24"/></operator><call><name pos:line="85" pos:column="24">chunk2mem<pos:position pos:line="85" pos:column="33"/></name><argument_list pos:line="85" pos:column="33">(<argument><expr><name pos:line="85" pos:column="34">array_chunk<pos:position pos:line="85" pos:column="45"/></name></expr></argument>)<pos:position pos:line="85" pos:column="46"/></argument_list></call><operator pos:line="85" pos:column="46">)<pos:position pos:line="85" pos:column="47"/></operator></expr>;<pos:position pos:line="85" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">set_size_and_pinuse_of_inuse_chunk<pos:position pos:line="86" pos:column="39"/></name><argument_list pos:line="86" pos:column="39">(<argument><expr><name pos:line="86" pos:column="40">m<pos:position pos:line="86" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="43">array_chunk<pos:position pos:line="86" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="56">array_chunk_size<pos:position pos:line="86" pos:column="72"/></name></expr></argument>)<pos:position pos:line="86" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><name pos:line="87" pos:column="5">remainder_size<pos:position pos:line="87" pos:column="19"/></name> <operator pos:line="87" pos:column="20">=<pos:position pos:line="87" pos:column="21"/></operator> <name pos:line="87" pos:column="22">contents_size<pos:position pos:line="87" pos:column="35"/></name></expr>;<pos:position pos:line="87" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="88" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="90" pos:column="3">/* split out elements */</comment>
  <for pos:line="91" pos:column="3">for <control pos:line="91" pos:column="7">(<init><expr><name pos:line="91" pos:column="8">i<pos:position pos:line="91" pos:column="9"/></name> <operator pos:line="91" pos:column="10">=<pos:position pos:line="91" pos:column="11"/></operator> <literal type="number" pos:line="91" pos:column="12">0<pos:position pos:line="91" pos:column="13"/></literal></expr>;<pos:position pos:line="91" pos:column="14"/></init> <condition pos:line="91" pos:column="15">;<pos:position pos:line="91" pos:column="16"/></condition> <incr><expr><operator pos:line="91" pos:column="17">++<pos:position pos:line="91" pos:column="19"/></operator><name pos:line="91" pos:column="19">i<pos:position pos:line="91" pos:column="20"/></name></expr></incr>)<pos:position pos:line="91" pos:column="21"/></control> <block pos:line="91" pos:column="22">{
    <expr_stmt><expr><name><name pos:line="92" pos:column="5">marray<pos:position pos:line="92" pos:column="11"/></name><index pos:line="92" pos:column="11">[<expr><name pos:line="92" pos:column="12">i<pos:position pos:line="92" pos:column="13"/></name></expr>]<pos:position pos:line="92" pos:column="14"/></index></name> <operator pos:line="92" pos:column="15">=<pos:position pos:line="92" pos:column="16"/></operator> <call><name pos:line="92" pos:column="17">chunk2mem<pos:position pos:line="92" pos:column="26"/></name><argument_list pos:line="92" pos:column="26">(<argument><expr><name pos:line="92" pos:column="27">p<pos:position pos:line="92" pos:column="28"/></name></expr></argument>)<pos:position pos:line="92" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="30"/></expr_stmt>
    <if pos:line="93" pos:column="5">if <condition pos:line="93" pos:column="8">(<expr><name pos:line="93" pos:column="9">i<pos:position pos:line="93" pos:column="10"/></name> <operator pos:line="93" pos:column="11">!=<pos:position pos:line="93" pos:column="13"/></operator> <name pos:line="93" pos:column="14">n_elements<pos:position pos:line="93" pos:column="24"/></name><operator pos:line="93" pos:column="24">-<pos:position pos:line="93" pos:column="25"/></operator><literal type="number" pos:line="93" pos:column="25">1<pos:position pos:line="93" pos:column="26"/></literal></expr>)<pos:position pos:line="93" pos:column="27"/></condition><then pos:line="93" pos:column="27"> <block pos:line="93" pos:column="28">{
      <if pos:line="94" pos:column="7">if <condition pos:line="94" pos:column="10">(<expr><name pos:line="94" pos:column="11">element_size<pos:position pos:line="94" pos:column="23"/></name> <operator pos:line="94" pos:column="24">!=<pos:position pos:line="94" pos:column="26"/></operator> <literal type="number" pos:line="94" pos:column="27">0<pos:position pos:line="94" pos:column="28"/></literal></expr>)<pos:position pos:line="94" pos:column="29"/></condition><then pos:line="94" pos:column="29">
	<block type="pseudo"><expr_stmt><expr><name pos:line="95" pos:column="9">size<pos:position pos:line="95" pos:column="13"/></name> <operator pos:line="95" pos:column="14">=<pos:position pos:line="95" pos:column="15"/></operator> <name pos:line="95" pos:column="16">element_size<pos:position pos:line="95" pos:column="28"/></name></expr>;<pos:position pos:line="95" pos:column="29"/></expr_stmt></block></then>
      <else pos:line="96" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="97" pos:column="9">size<pos:position pos:line="97" pos:column="13"/></name> <operator pos:line="97" pos:column="14">=<pos:position pos:line="97" pos:column="15"/></operator> <call><name pos:line="97" pos:column="16">request2size<pos:position pos:line="97" pos:column="28"/></name><argument_list pos:line="97" pos:column="28">(<argument><expr><name><name pos:line="97" pos:column="29">sizes<pos:position pos:line="97" pos:column="34"/></name><index pos:line="97" pos:column="34">[<expr><name pos:line="97" pos:column="35">i<pos:position pos:line="97" pos:column="36"/></name></expr>]<pos:position pos:line="97" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="97" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="39"/></expr_stmt></block></else></if>
      <expr_stmt><expr><name pos:line="98" pos:column="7">remainder_size<pos:position pos:line="98" pos:column="21"/></name> <operator pos:line="98" pos:column="22">-=<pos:position pos:line="98" pos:column="24"/></operator> <name pos:line="98" pos:column="25">size<pos:position pos:line="98" pos:column="29"/></name></expr>;<pos:position pos:line="98" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="99" pos:column="7">set_size_and_pinuse_of_inuse_chunk<pos:position pos:line="99" pos:column="41"/></name><argument_list pos:line="99" pos:column="41">(<argument><expr><name pos:line="99" pos:column="42">m<pos:position pos:line="99" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="45">p<pos:position pos:line="99" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="48">size<pos:position pos:line="99" pos:column="52"/></name></expr></argument>)<pos:position pos:line="99" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="54"/></expr_stmt>
      <expr_stmt><expr><name pos:line="100" pos:column="7">p<pos:position pos:line="100" pos:column="8"/></name> <operator pos:line="100" pos:column="9">=<pos:position pos:line="100" pos:column="10"/></operator> <call><name pos:line="100" pos:column="11">chunk_plus_offset<pos:position pos:line="100" pos:column="28"/></name><argument_list pos:line="100" pos:column="28">(<argument><expr><name pos:line="100" pos:column="29">p<pos:position pos:line="100" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="32">size<pos:position pos:line="100" pos:column="36"/></name></expr></argument>)<pos:position pos:line="100" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="101" pos:column="6"/></block></then>
    <else pos:line="102" pos:column="5">else <block pos:line="102" pos:column="10">{ <comment type="block" pos:line="102" pos:column="12">/* the final element absorbs any overallocation slop */</comment>
      <expr_stmt><expr><call><name pos:line="103" pos:column="7">set_size_and_pinuse_of_inuse_chunk<pos:position pos:line="103" pos:column="41"/></name><argument_list pos:line="103" pos:column="41">(<argument><expr><name pos:line="103" pos:column="42">m<pos:position pos:line="103" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="45">p<pos:position pos:line="103" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="48">remainder_size<pos:position pos:line="103" pos:column="62"/></name></expr></argument>)<pos:position pos:line="103" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="64"/></expr_stmt>
      <break pos:line="104" pos:column="7">break;<pos:position pos:line="104" pos:column="13"/></break>
    }<pos:position pos:line="105" pos:column="6"/></block></else></if>
  }<pos:position pos:line="106" pos:column="4"/></block></for>

<cpp:if pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">if<pos:position pos:line="108" pos:column="4"/></cpp:directive> <expr><name pos:line="108" pos:column="5">DEBUG<pos:position pos:line="108" pos:column="10"/></name></expr></cpp:if>
  <if pos:line="109" pos:column="3">if <condition pos:line="109" pos:column="6">(<expr><name pos:line="109" pos:column="7">marray<pos:position pos:line="109" pos:column="13"/></name> <operator pos:line="109" pos:column="14">!=<pos:position pos:line="109" pos:column="16"/></operator> <name pos:line="109" pos:column="17">chunks<pos:position pos:line="109" pos:column="23"/></name></expr>)<pos:position pos:line="109" pos:column="24"/></condition><then pos:line="109" pos:column="24"> <block pos:line="109" pos:column="25">{
    <comment type="block" pos:line="110" pos:column="5">/* final element must have exactly exhausted chunk */</comment>
    <if pos:line="111" pos:column="5">if <condition pos:line="111" pos:column="8">(<expr><name pos:line="111" pos:column="9">element_size<pos:position pos:line="111" pos:column="21"/></name> <operator pos:line="111" pos:column="22">!=<pos:position pos:line="111" pos:column="24"/></operator> <literal type="number" pos:line="111" pos:column="25">0<pos:position pos:line="111" pos:column="26"/></literal></expr>)<pos:position pos:line="111" pos:column="27"/></condition><then pos:line="111" pos:column="27"> <block pos:line="111" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="112" pos:column="7">assert<pos:position pos:line="112" pos:column="13"/></name><argument_list pos:line="112" pos:column="13">(<argument><expr><name pos:line="112" pos:column="14">remainder_size<pos:position pos:line="112" pos:column="28"/></name> <operator pos:line="112" pos:column="29">==<pos:position pos:line="112" pos:column="31"/></operator> <name pos:line="112" pos:column="32">element_size<pos:position pos:line="112" pos:column="44"/></name></expr></argument>)<pos:position pos:line="112" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="113" pos:column="6"/></block></then>
    <else pos:line="114" pos:column="5">else <block pos:line="114" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="115" pos:column="7">assert<pos:position pos:line="115" pos:column="13"/></name><argument_list pos:line="115" pos:column="13">(<argument><expr><name pos:line="115" pos:column="14">remainder_size<pos:position pos:line="115" pos:column="28"/></name> <operator pos:line="115" pos:column="29">==<pos:position pos:line="115" pos:column="31"/></operator> <call><name pos:line="115" pos:column="32">request2size<pos:position pos:line="115" pos:column="44"/></name><argument_list pos:line="115" pos:column="44">(<argument><expr><name><name pos:line="115" pos:column="45">sizes<pos:position pos:line="115" pos:column="50"/></name><index pos:line="115" pos:column="50">[<expr><name pos:line="115" pos:column="51">i<pos:position pos:line="115" pos:column="52"/></name></expr>]<pos:position pos:line="115" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="115" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="115" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="116" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="117" pos:column="5">check_inuse_chunk<pos:position pos:line="117" pos:column="22"/></name><argument_list pos:line="117" pos:column="22">(<argument><expr><name pos:line="117" pos:column="23">m<pos:position pos:line="117" pos:column="24"/></name></expr></argument>, <argument><expr><call><name pos:line="117" pos:column="26">mem2chunk<pos:position pos:line="117" pos:column="35"/></name><argument_list pos:line="117" pos:column="35">(<argument><expr><name pos:line="117" pos:column="36">marray<pos:position pos:line="117" pos:column="42"/></name></expr></argument>)<pos:position pos:line="117" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="117" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="118" pos:column="4"/></block></then></if>
  <for pos:line="119" pos:column="3">for <control pos:line="119" pos:column="7">(<init><expr><name pos:line="119" pos:column="8">i<pos:position pos:line="119" pos:column="9"/></name> <operator pos:line="119" pos:column="10">=<pos:position pos:line="119" pos:column="11"/></operator> <literal type="number" pos:line="119" pos:column="12">0<pos:position pos:line="119" pos:column="13"/></literal></expr>;<pos:position pos:line="119" pos:column="14"/></init> <condition><expr><name pos:line="119" pos:column="15">i<pos:position pos:line="119" pos:column="16"/></name> <operator pos:line="119" pos:column="17">!=<pos:position pos:line="119" pos:column="19"/></operator> <name pos:line="119" pos:column="20">n_elements<pos:position pos:line="119" pos:column="30"/></name></expr>;<pos:position pos:line="119" pos:column="31"/></condition> <incr><expr><operator pos:line="119" pos:column="32">++<pos:position pos:line="119" pos:column="34"/></operator><name pos:line="119" pos:column="34">i<pos:position pos:line="119" pos:column="35"/></name></expr></incr>)<pos:position pos:line="119" pos:column="36"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="5">check_inuse_chunk<pos:position pos:line="120" pos:column="22"/></name><argument_list pos:line="120" pos:column="22">(<argument><expr><name pos:line="120" pos:column="23">m<pos:position pos:line="120" pos:column="24"/></name></expr></argument>, <argument><expr><call><name pos:line="120" pos:column="26">mem2chunk<pos:position pos:line="120" pos:column="35"/></name><argument_list pos:line="120" pos:column="35">(<argument><expr><name><name pos:line="120" pos:column="36">marray<pos:position pos:line="120" pos:column="42"/></name><index pos:line="120" pos:column="42">[<expr><name pos:line="120" pos:column="43">i<pos:position pos:line="120" pos:column="44"/></name></expr>]<pos:position pos:line="120" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="120" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="120" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="48"/></expr_stmt></block></for>

<cpp:endif pos:line="122" pos:column="1">#<cpp:directive pos:line="122" pos:column="2">endif<pos:position pos:line="122" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="122" pos:column="8">/* DEBUG */</comment>

  <expr_stmt><expr><call><name pos:line="124" pos:column="3">POSTACTION<pos:position pos:line="124" pos:column="13"/></name><argument_list pos:line="124" pos:column="13">(<argument><expr><name pos:line="124" pos:column="14">m<pos:position pos:line="124" pos:column="15"/></name></expr></argument>)<pos:position pos:line="124" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="17"/></expr_stmt>
  <return pos:line="125" pos:column="3">return <expr><name pos:line="125" pos:column="10">marray<pos:position pos:line="125" pos:column="16"/></name></expr>;<pos:position pos:line="125" pos:column="17"/></return>
}<pos:position pos:line="126" pos:column="2"/></block></function></unit>
