<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6185_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">update<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">argc<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier><modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">argv<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">prune<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><operator pos:line="3" pos:column="24">-<pos:position pos:line="3" pos:column="25"/></operator><literal type="number" pos:line="3" pos:column="25">1<pos:position pos:line="3" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">option<pos:position pos:line="4" pos:column="22"/></name></name></type> <name><name pos:line="4" pos:column="23">options<pos:position pos:line="4" pos:column="30"/></name><index pos:line="4" pos:column="30">[]<pos:position pos:line="4" pos:column="32"/></index></name> <init pos:line="4" pos:column="33">= <expr><block pos:line="4" pos:column="35">{
		<expr><call><name pos:line="5" pos:column="17">OPT_BOOL<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><literal type="char" pos:line="5" pos:column="26">'p'<pos:position pos:line="5" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="31">"prune"<pos:position pos:line="5" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="5" pos:column="40">&amp;<pos:position pos:line="5" pos:column="45"/></operator><name pos:line="5" pos:column="41">prune<pos:position pos:line="5" pos:column="46"/></name></expr></argument>,
			 <argument><expr><call><name pos:line="6" pos:column="26">N_<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><literal type="string" pos:line="6" pos:column="29">"prune remotes after fetching"<pos:position pos:line="6" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="61"/></argument_list></call></expr>,
		<macro><name pos:line="7" pos:column="17">OPT_END<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">()<pos:position pos:line="7" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="8" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">argv_array<pos:position pos:line="9" pos:column="26"/></name></name></type> <name pos:line="9" pos:column="27">fetch_argv<pos:position pos:line="9" pos:column="37"/></name> <init pos:line="9" pos:column="38">= <expr><name pos:line="9" pos:column="40">ARGV_ARRAY_INIT<pos:position pos:line="9" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">default_defined<pos:position pos:line="10" pos:column="28"/></name> <init pos:line="10" pos:column="29">= <expr><literal type="number" pos:line="10" pos:column="31">0<pos:position pos:line="10" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">retval<pos:position pos:line="11" pos:column="19"/></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><name pos:line="13" pos:column="9">argc<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <call><name pos:line="13" pos:column="16">parse_options<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">argc<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="36">argv<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="42">NULL<pos:position pos:line="13" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="48">options<pos:position pos:line="13" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="57">builtin_remote_update_usage<pos:position pos:line="13" pos:column="84"/></name></expr></argument>,
			     <argument><expr><name pos:line="14" pos:column="30">PARSE_OPT_KEEP_ARGV0<pos:position pos:line="14" pos:column="50"/></name></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="52"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">argv_array_push<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><operator pos:line="16" pos:column="25">&amp;<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="26">fetch_argv<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="38">"fetch"<pos:position pos:line="16" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">prune<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">!=<pos:position pos:line="18" pos:column="21"/></operator> <operator pos:line="18" pos:column="22">-<pos:position pos:line="18" pos:column="23"/></operator><literal type="number" pos:line="18" pos:column="23">1<pos:position pos:line="18" pos:column="24"/></literal></expr>)<pos:position pos:line="18" pos:column="25"/></condition><then pos:line="18" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="17">argv_array_push<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><operator pos:line="19" pos:column="33">&amp;<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="34">fetch_argv<pos:position pos:line="19" pos:column="44"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="19" pos:column="46">prune<pos:position pos:line="19" pos:column="51"/></name></expr> ?<pos:position pos:line="19" pos:column="53"/></condition><then pos:line="19" pos:column="53"> <expr><literal type="string" pos:line="19" pos:column="54">"--prune"<pos:position pos:line="19" pos:column="63"/></literal></expr> <pos:position pos:line="19" pos:column="64"/></then><else pos:line="19" pos:column="64">: <expr><literal type="string" pos:line="19" pos:column="66">"--no-prune"<pos:position pos:line="19" pos:column="78"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="19" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="80"/></expr_stmt></block></then></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">verbose<pos:position pos:line="20" pos:column="20"/></name></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="17">argv_array_push<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><operator pos:line="21" pos:column="33">&amp;<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="34">fetch_argv<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="46">"-v"<pos:position pos:line="21" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">argv_array_push<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><operator pos:line="22" pos:column="25">&amp;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="26">fetch_argv<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="38">"--multiple"<pos:position pos:line="22" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="52"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">argc<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">&lt;<pos:position pos:line="23" pos:column="22"/></operator> <literal type="number" pos:line="23" pos:column="20">2<pos:position pos:line="23" pos:column="21"/></literal></expr>)<pos:position pos:line="23" pos:column="22"/></condition><then pos:line="23" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="17">argv_array_push<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><operator pos:line="24" pos:column="33">&amp;<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="34">fetch_argv<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="46">"default"<pos:position pos:line="24" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="57"/></expr_stmt></block></then></if>
	<for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">i<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <literal type="number" pos:line="25" pos:column="18">1<pos:position pos:line="25" pos:column="19"/></literal></expr>;<pos:position pos:line="25" pos:column="20"/></init> <condition><expr><name pos:line="25" pos:column="21">i<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">&lt;<pos:position pos:line="25" pos:column="27"/></operator> <name pos:line="25" pos:column="25">argc<pos:position pos:line="25" pos:column="29"/></name></expr>;<pos:position pos:line="25" pos:column="30"/></condition> <incr><expr><name pos:line="25" pos:column="31">i<pos:position pos:line="25" pos:column="32"/></name><operator pos:line="25" pos:column="32">++<pos:position pos:line="25" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="35"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">argv_array_push<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><operator pos:line="26" pos:column="33">&amp;<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="34">fetch_argv<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="46">argv<pos:position pos:line="26" pos:column="50"/></name><index pos:line="26" pos:column="50">[<expr><name pos:line="26" pos:column="51">i<pos:position pos:line="26" pos:column="52"/></name></expr>]<pos:position pos:line="26" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt></block></for>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name pos:line="28" pos:column="13">strcmp<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name><name pos:line="28" pos:column="20">fetch_argv<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">.<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="31">argv<pos:position pos:line="28" pos:column="35"/></name><index pos:line="28" pos:column="35">[<expr><name><name pos:line="28" pos:column="36">fetch_argv<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">.<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="47">argc<pos:position pos:line="28" pos:column="51"/></name></name><operator pos:line="28" pos:column="51">-<pos:position pos:line="28" pos:column="52"/></operator><literal type="number" pos:line="28" pos:column="52">1<pos:position pos:line="28" pos:column="53"/></literal></expr>]<pos:position pos:line="28" pos:column="54"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="56">"default"<pos:position pos:line="28" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="66"/></argument_list></call> <operator pos:line="28" pos:column="67">==<pos:position pos:line="28" pos:column="69"/></operator> <literal type="number" pos:line="28" pos:column="70">0<pos:position pos:line="28" pos:column="71"/></literal></expr>)<pos:position pos:line="28" pos:column="72"/></condition><then pos:line="28" pos:column="72"> <block pos:line="28" pos:column="73">{
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">git_config<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">get_remote_default<pos:position pos:line="29" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="48">&amp;<pos:position pos:line="29" pos:column="53"/></operator><name pos:line="29" pos:column="49">default_defined<pos:position pos:line="29" pos:column="64"/></name></expr></argument>)<pos:position pos:line="29" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="66"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">!<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">default_defined<pos:position pos:line="30" pos:column="37"/></name></expr>)<pos:position pos:line="30" pos:column="38"/></condition><then pos:line="30" pos:column="38"> <block pos:line="30" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">argv_array_pop<pos:position pos:line="31" pos:column="39"/></name><argument_list pos:line="31" pos:column="39">(<argument><expr><operator pos:line="31" pos:column="40">&amp;<pos:position pos:line="31" pos:column="45"/></operator><name pos:line="31" pos:column="41">fetch_argv<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">argv_array_push<pos:position pos:line="32" pos:column="40"/></name><argument_list pos:line="32" pos:column="40">(<argument><expr><operator pos:line="32" pos:column="41">&amp;<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="42">fetch_argv<pos:position pos:line="32" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="54">"--all"<pos:position pos:line="32" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="63"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="36" pos:column="9">retval<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <call><name pos:line="36" pos:column="18">run_command_v_opt<pos:position pos:line="36" pos:column="35"/></name><argument_list pos:line="36" pos:column="35">(<argument><expr><name><name pos:line="36" pos:column="36">fetch_argv<pos:position pos:line="36" pos:column="46"/></name><operator pos:line="36" pos:column="46">.<pos:position pos:line="36" pos:column="47"/></operator><name pos:line="36" pos:column="47">argv<pos:position pos:line="36" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="53">RUN_GIT_CMD<pos:position pos:line="36" pos:column="64"/></name></expr></argument>)<pos:position pos:line="36" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="66"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">argv_array_clear<pos:position pos:line="37" pos:column="25"/></name><argument_list pos:line="37" pos:column="25">(<argument><expr><operator pos:line="37" pos:column="26">&amp;<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="27">fetch_argv<pos:position pos:line="37" pos:column="37"/></name></expr></argument>)<pos:position pos:line="37" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="39"/></expr_stmt>
	<return pos:line="38" pos:column="9">return <expr><name pos:line="38" pos:column="16">retval<pos:position pos:line="38" pos:column="22"/></name></expr>;<pos:position pos:line="38" pos:column="23"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
