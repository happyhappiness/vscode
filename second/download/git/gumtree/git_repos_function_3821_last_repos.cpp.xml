<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3821_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">read_oid_strbuf<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">merge_options<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">o<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
	<parameter><decl><type><specifier pos:line="2" pos:column="9">const<pos:position pos:line="2" pos:column="14"/></specifier> <name><name pos:line="2" pos:column="15">struct<pos:position pos:line="2" pos:column="21"/></name> <name pos:line="2" pos:column="22">object_id<pos:position pos:line="2" pos:column="31"/></name></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">oid<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="38">struct<pos:position pos:line="2" pos:column="44"/></name> <name pos:line="2" pos:column="45">strbuf<pos:position pos:line="2" pos:column="51"/></name></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">dst<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">void<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">buf<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">enum<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">object_type<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">type<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">long<pos:position pos:line="6" pos:column="22"/></name></type> <name pos:line="6" pos:column="23">size<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<expr_stmt><expr><name pos:line="7" pos:column="9">buf<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <call><name pos:line="7" pos:column="15">read_sha1_file<pos:position pos:line="7" pos:column="29"/></name><argument_list pos:line="7" pos:column="29">(<argument><expr><name><name pos:line="7" pos:column="30">oid<pos:position pos:line="7" pos:column="33"/></name><operator pos:line="7" pos:column="33">-&gt;<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="35">hash<pos:position pos:line="7" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="41">&amp;<pos:position pos:line="7" pos:column="46"/></operator><name pos:line="7" pos:column="42">type<pos:position pos:line="7" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="48">&amp;<pos:position pos:line="7" pos:column="53"/></operator><name pos:line="7" pos:column="49">size<pos:position pos:line="7" pos:column="53"/></name></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="55"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">buf<pos:position pos:line="8" pos:column="17"/></name></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><call><name pos:line="9" pos:column="24">err<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><name pos:line="9" pos:column="28">o<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="31">_<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><literal type="string" pos:line="9" pos:column="33">"cannot read object %s"<pos:position pos:line="9" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="59">oid_to_hex<pos:position pos:line="9" pos:column="69"/></name><argument_list pos:line="9" pos:column="69">(<argument><expr><name pos:line="9" pos:column="70">oid<pos:position pos:line="9" pos:column="73"/></name></expr></argument>)<pos:position pos:line="9" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="76"/></return></block></then></if>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">type<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">!=<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">OBJ_BLOB<pos:position pos:line="10" pos:column="29"/></name></expr>)<pos:position pos:line="10" pos:column="30"/></condition><then pos:line="10" pos:column="30"> <block pos:line="10" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">free<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">buf<pos:position pos:line="11" pos:column="25"/></name></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><call><name pos:line="12" pos:column="24">err<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">o<pos:position pos:line="12" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="31">_<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><literal type="string" pos:line="12" pos:column="33">"object %s is not a blob"<pos:position pos:line="12" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="61">oid_to_hex<pos:position pos:line="12" pos:column="71"/></name><argument_list pos:line="12" pos:column="71">(<argument><expr><name pos:line="12" pos:column="72">oid<pos:position pos:line="12" pos:column="75"/></name></expr></argument>)<pos:position pos:line="12" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="78"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">strbuf_attach<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">dst<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="28">buf<pos:position pos:line="14" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="33">size<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="39">size<pos:position pos:line="14" pos:column="43"/></name> <operator pos:line="14" pos:column="44">+<pos:position pos:line="14" pos:column="45"/></operator> <literal type="number" pos:line="14" pos:column="46">1<pos:position pos:line="14" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>
	<return pos:line="15" pos:column="9">return <expr><literal type="number" pos:line="15" pos:column="16">0<pos:position pos:line="15" pos:column="17"/></literal></expr>;<pos:position pos:line="15" pos:column="18"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
