<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_398.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">use<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">int<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">bytes<pos:position pos:line="1" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">bytes<pos:position pos:line="3" pos:column="18"/></name> <operator pos:line="3" pos:column="19">&gt;<pos:position pos:line="3" pos:column="23"/></operator> <name pos:line="3" pos:column="21">input_len<pos:position pos:line="3" pos:column="30"/></name></expr>)<pos:position pos:line="3" pos:column="31"/></condition><then pos:line="3" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="4" pos:column="17">die<pos:position pos:line="4" pos:column="20"/></name><argument_list pos:line="4" pos:column="20">(<argument><expr><call><name pos:line="4" pos:column="21">_<pos:position pos:line="4" pos:column="22"/></name><argument_list pos:line="4" pos:column="22">(<argument><expr><literal type="string" pos:line="4" pos:column="23">"used more bytes than were available"<pos:position pos:line="4" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="63"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="5" pos:column="9">input_crc32<pos:position pos:line="5" pos:column="20"/></name> <operator pos:line="5" pos:column="21">=<pos:position pos:line="5" pos:column="22"/></operator> <call><name pos:line="5" pos:column="23">crc32<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">input_crc32<pos:position pos:line="5" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="42">input_buffer<pos:position pos:line="5" pos:column="54"/></name> <operator pos:line="5" pos:column="55">+<pos:position pos:line="5" pos:column="56"/></operator> <name pos:line="5" pos:column="57">input_offset<pos:position pos:line="5" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="71">bytes<pos:position pos:line="5" pos:column="76"/></name></expr></argument>)<pos:position pos:line="5" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="78"/></expr_stmt>
	<expr_stmt><expr><name pos:line="6" pos:column="9">input_len<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">-=<pos:position pos:line="6" pos:column="21"/></operator> <name pos:line="6" pos:column="22">bytes<pos:position pos:line="6" pos:column="27"/></name></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="7" pos:column="9">input_offset<pos:position pos:line="7" pos:column="21"/></name> <operator pos:line="7" pos:column="22">+=<pos:position pos:line="7" pos:column="24"/></operator> <name pos:line="7" pos:column="25">bytes<pos:position pos:line="7" pos:column="30"/></name></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* make sure off_t is sufficiently large not to wrap */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">signed_add_overflows<pos:position pos:line="10" pos:column="33"/></name><argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">consumed_bytes<pos:position pos:line="10" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="50">bytes<pos:position pos:line="10" pos:column="55"/></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="57"/></condition><then pos:line="10" pos:column="57">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">die<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><call><name pos:line="11" pos:column="21">_<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><literal type="string" pos:line="11" pos:column="23">"pack too large for current definition of off_t"<pos:position pos:line="11" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="74"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="12" pos:column="9">consumed_bytes<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">+=<pos:position pos:line="12" pos:column="26"/></operator> <name pos:line="12" pos:column="27">bytes<pos:position pos:line="12" pos:column="32"/></name></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">max_input_size<pos:position pos:line="13" pos:column="27"/></name> <operator pos:line="13" pos:column="28">&amp;&amp;<pos:position pos:line="13" pos:column="38"/></operator> <name pos:line="13" pos:column="31">consumed_bytes<pos:position pos:line="13" pos:column="45"/></name> <operator pos:line="13" pos:column="46">&gt;<pos:position pos:line="13" pos:column="50"/></operator> <name pos:line="13" pos:column="48">max_input_size<pos:position pos:line="13" pos:column="62"/></name></expr>)<pos:position pos:line="13" pos:column="63"/></condition><then pos:line="13" pos:column="63">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">die<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><call><name pos:line="14" pos:column="21">_<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><literal type="string" pos:line="14" pos:column="23">"pack exceeds maximum allowed size"<pos:position pos:line="14" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="61"/></expr_stmt></block></then></if>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
