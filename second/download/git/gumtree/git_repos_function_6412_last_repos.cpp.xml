<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6412_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">ref_iterator<pos:position pos:line="1" pos:column="27"/></name></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">files_ref_iterator_begin<pos:position pos:line="1" pos:column="53"/></name><parameter_list pos:line="1" pos:column="53">(
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">ref_store<pos:position pos:line="2" pos:column="33"/></name></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">ref_store<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">char<pos:position pos:line="3" pos:column="27"/></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">prefix<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="37">unsigned<pos:position pos:line="3" pos:column="45"/></name> <name pos:line="3" pos:column="46">int<pos:position pos:line="3" pos:column="49"/></name></type> <name pos:line="3" pos:column="50">flags<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="56"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">files_ref_store<pos:position pos:line="5" pos:column="31"/></name></name> <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier></type><name pos:line="5" pos:column="33">refs<pos:position pos:line="5" pos:column="37"/></name></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">ref_iterator<pos:position pos:line="6" pos:column="28"/></name></name> <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier></type><name pos:line="6" pos:column="30">loose_iter<pos:position pos:line="6" pos:column="40"/></name></decl>, <modifier pos:line="6" pos:column="42">*<pos:position pos:line="6" pos:column="43"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="43">packed_iter<pos:position pos:line="6" pos:column="54"/></name></decl>;<pos:position pos:line="6" pos:column="55"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">files_ref_iterator<pos:position pos:line="7" pos:column="34"/></name></name> <modifier pos:line="7" pos:column="35">*<pos:position pos:line="7" pos:column="36"/></modifier></type><name pos:line="7" pos:column="36">iter<pos:position pos:line="7" pos:column="40"/></name></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">ref_iterator<pos:position pos:line="8" pos:column="28"/></name></name> <modifier pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></modifier></type><name pos:line="8" pos:column="30">ref_iterator<pos:position pos:line="8" pos:column="42"/></name></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name> <name pos:line="9" pos:column="18">int<pos:position pos:line="9" pos:column="21"/></name></type> <name pos:line="9" pos:column="22">required_flags<pos:position pos:line="9" pos:column="36"/></name> <init pos:line="9" pos:column="37">= <expr><name pos:line="9" pos:column="39">REF_STORE_READ<pos:position pos:line="9" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="54"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><operator pos:line="11" pos:column="14">(<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">flags<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">&amp;<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="23">DO_FOR_EACH_INCLUDE_BROKEN<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">)<pos:position pos:line="11" pos:column="50"/></operator></expr>)<pos:position pos:line="11" pos:column="51"/></condition><then pos:line="11" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">required_flags<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">|=<pos:position pos:line="12" pos:column="34"/></operator> <name pos:line="12" pos:column="35">REF_STORE_ODB<pos:position pos:line="12" pos:column="48"/></name></expr>;<pos:position pos:line="12" pos:column="49"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="14" pos:column="9">refs<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <call><name pos:line="14" pos:column="16">files_downcast<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">ref_store<pos:position pos:line="14" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="42">required_flags<pos:position pos:line="14" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="58">"ref_iterator_begin"<pos:position pos:line="14" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="80"/></expr_stmt>

	<expr_stmt><expr><name pos:line="16" pos:column="9">iter<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">xcalloc<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><literal type="number" pos:line="16" pos:column="24">1<pos:position pos:line="16" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="27">sizeof<argument_list pos:line="16" pos:column="33">(<argument><expr><operator pos:line="16" pos:column="34">*<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="35">iter<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">ref_iterator<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <operator pos:line="17" pos:column="24">&amp;<pos:position pos:line="17" pos:column="29"/></operator><name><name pos:line="17" pos:column="25">iter<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">-&gt;<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="31">base<pos:position pos:line="17" pos:column="35"/></name></name></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">base_ref_iterator_init<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">ref_iterator<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="46">&amp;<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="47">files_ref_iterator_vtable<pos:position pos:line="18" pos:column="72"/></name></expr></argument>)<pos:position pos:line="18" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="74"/></expr_stmt>

	<comment type="block" pos:line="20" pos:column="9">/*
	 * We must make sure that all loose refs are read before
	 * accessing the packed-refs file; this avoids a race
	 * condition if loose refs are migrated to the packed-refs
	 * file by a simultaneous process, but our in-memory view is
	 * from before the migration. We ensure this as follows:
	 * First, we call start the loose refs iteration with its
	 * `prime_ref` argument set to true. This causes the loose
	 * references in the subtree to be pre-read into the cache.
	 * (If they've already been read, that's OK; we only need to
	 * guarantee that they're read before the packed refs, not
	 * *how much* before.) After that, we call
	 * get_packed_ref_cache(), which internally checks whether the
	 * packed-ref cache is up to date with what is on disk, and
	 * re-reads it if not.
	 */</comment>

	<expr_stmt><expr><name pos:line="37" pos:column="9">loose_iter<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">=<pos:position pos:line="37" pos:column="21"/></operator> <call><name pos:line="37" pos:column="22">cache_ref_iterator_begin<pos:position pos:line="37" pos:column="46"/></name><argument_list pos:line="37" pos:column="46">(<argument><expr><call><name pos:line="37" pos:column="47">get_loose_ref_cache<pos:position pos:line="37" pos:column="66"/></name><argument_list pos:line="37" pos:column="66">(<argument><expr><name pos:line="37" pos:column="67">refs<pos:position pos:line="37" pos:column="71"/></name></expr></argument>)<pos:position pos:line="37" pos:column="72"/></argument_list></call></expr></argument>,
					      <argument><expr><name pos:line="38" pos:column="47">prefix<pos:position pos:line="38" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="55">1<pos:position pos:line="38" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="58"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="40" pos:column="9">iter<pos:position pos:line="40" pos:column="13"/></name><operator pos:line="40" pos:column="13">-&gt;<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="15">packed_ref_cache<pos:position pos:line="40" pos:column="31"/></name></name> <operator pos:line="40" pos:column="32">=<pos:position pos:line="40" pos:column="33"/></operator> <call><name pos:line="40" pos:column="34">get_packed_ref_cache<pos:position pos:line="40" pos:column="54"/></name><argument_list pos:line="40" pos:column="54">(<argument><expr><name pos:line="40" pos:column="55">refs<pos:position pos:line="40" pos:column="59"/></name></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">acquire_packed_ref_cache<pos:position pos:line="41" pos:column="33"/></name><argument_list pos:line="41" pos:column="33">(<argument><expr><name><name pos:line="41" pos:column="34">iter<pos:position pos:line="41" pos:column="38"/></name><operator pos:line="41" pos:column="38">-&gt;<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="40">packed_ref_cache<pos:position pos:line="41" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="42" pos:column="9">packed_iter<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <call><name pos:line="42" pos:column="23">cache_ref_iterator_begin<pos:position pos:line="42" pos:column="47"/></name><argument_list pos:line="42" pos:column="47">(<argument><expr><name><name pos:line="42" pos:column="48">iter<pos:position pos:line="42" pos:column="52"/></name><operator pos:line="42" pos:column="52">-&gt;<pos:position pos:line="42" pos:column="57"/></operator><name pos:line="42" pos:column="54">packed_ref_cache<pos:position pos:line="42" pos:column="70"/></name><operator pos:line="42" pos:column="70">-&gt;<pos:position pos:line="42" pos:column="75"/></operator><name pos:line="42" pos:column="72">cache<pos:position pos:line="42" pos:column="77"/></name></name></expr></argument>,
					       <argument><expr><name pos:line="43" pos:column="48">prefix<pos:position pos:line="43" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="56">0<pos:position pos:line="43" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="59"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="45" pos:column="9">iter<pos:position pos:line="45" pos:column="13"/></name><operator pos:line="45" pos:column="13">-&gt;<pos:position pos:line="45" pos:column="18"/></operator><name pos:line="45" pos:column="15">iter0<pos:position pos:line="45" pos:column="20"/></name></name> <operator pos:line="45" pos:column="21">=<pos:position pos:line="45" pos:column="22"/></operator> <call><name pos:line="45" pos:column="23">overlay_ref_iterator_begin<pos:position pos:line="45" pos:column="49"/></name><argument_list pos:line="45" pos:column="49">(<argument><expr><name pos:line="45" pos:column="50">loose_iter<pos:position pos:line="45" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="62">packed_iter<pos:position pos:line="45" pos:column="73"/></name></expr></argument>)<pos:position pos:line="45" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="75"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="46" pos:column="9">iter<pos:position pos:line="46" pos:column="13"/></name><operator pos:line="46" pos:column="13">-&gt;<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="15">flags<pos:position pos:line="46" pos:column="20"/></name></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">flags<pos:position pos:line="46" pos:column="28"/></name></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>

	<return pos:line="48" pos:column="9">return <expr><name pos:line="48" pos:column="16">ref_iterator<pos:position pos:line="48" pos:column="28"/></name></expr>;<pos:position pos:line="48" pos:column="29"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
