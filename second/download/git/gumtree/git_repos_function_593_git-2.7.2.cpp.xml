<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_593_git-2.7.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">git_config_parse_key_1<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">key<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier><modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">store_key<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="70">int<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">baselen_<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="85">int<pos:position pos:line="1" pos:column="88"/></name></type> <name pos:line="1" pos:column="89">quiet<pos:position pos:line="1" pos:column="94"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="95"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">dot<pos:position pos:line="3" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="21">baselen<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">last_dot<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><call><name pos:line="4" pos:column="32">strrchr<pos:position pos:line="4" pos:column="39"/></name><argument_list pos:line="4" pos:column="39">(<argument><expr><name pos:line="4" pos:column="40">key<pos:position pos:line="4" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="4" pos:column="45">'.'<pos:position pos:line="4" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * Since "key" actually contains the section name and the real
	 * key name separated by a dot, we have to know where the dot is.
	 */</comment>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">last_dot<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">==<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">NULL<pos:position pos:line="11" pos:column="29"/></name> <operator pos:line="11" pos:column="30">||<pos:position pos:line="11" pos:column="32"/></operator> <name pos:line="11" pos:column="33">last_dot<pos:position pos:line="11" pos:column="41"/></name> <operator pos:line="11" pos:column="42">==<pos:position pos:line="11" pos:column="44"/></operator> <name pos:line="11" pos:column="45">key<pos:position pos:line="11" pos:column="48"/></name></expr>)<pos:position pos:line="11" pos:column="49"/></condition><then pos:line="11" pos:column="49"> <block pos:line="11" pos:column="50">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">quiet<pos:position pos:line="12" pos:column="27"/></name></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">error<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><literal type="string" pos:line="13" pos:column="31">"key does not contain a section: %s"<pos:position pos:line="13" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="69">key<pos:position pos:line="13" pos:column="72"/></name></expr></argument>)<pos:position pos:line="13" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="74"/></expr_stmt></block></then></if>
		<return pos:line="14" pos:column="17">return <expr><operator pos:line="14" pos:column="24">-<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">CONFIG_NO_SECTION_OR_NAME<pos:position pos:line="14" pos:column="50"/></name></expr>;<pos:position pos:line="14" pos:column="51"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><name><name pos:line="17" pos:column="14">last_dot<pos:position pos:line="17" pos:column="22"/></name><index pos:line="17" pos:column="22">[<expr><literal type="number" pos:line="17" pos:column="23">1<pos:position pos:line="17" pos:column="24"/></literal></expr>]<pos:position pos:line="17" pos:column="25"/></index></name></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26"> <block pos:line="17" pos:column="27">{
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">quiet<pos:position pos:line="18" pos:column="27"/></name></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="25">error<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><literal type="string" pos:line="19" pos:column="31">"key does not contain variable name: %s"<pos:position pos:line="19" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="73">key<pos:position pos:line="19" pos:column="76"/></name></expr></argument>)<pos:position pos:line="19" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="78"/></expr_stmt></block></then></if>
		<return pos:line="20" pos:column="17">return <expr><operator pos:line="20" pos:column="24">-<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">CONFIG_NO_SECTION_OR_NAME<pos:position pos:line="20" pos:column="50"/></name></expr>;<pos:position pos:line="20" pos:column="51"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="23" pos:column="9">baselen<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">last_dot<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">-<pos:position pos:line="23" pos:column="29"/></operator> <name pos:line="23" pos:column="30">key<pos:position pos:line="23" pos:column="33"/></name></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">baselen_<pos:position pos:line="24" pos:column="21"/></name></expr>)<pos:position pos:line="24" pos:column="22"/></condition><then pos:line="24" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="25" pos:column="17">*<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">baselen_<pos:position pos:line="25" pos:column="26"/></name> <operator pos:line="25" pos:column="27">=<pos:position pos:line="25" pos:column="28"/></operator> <name pos:line="25" pos:column="29">baselen<pos:position pos:line="25" pos:column="36"/></name></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="27" pos:column="9">/*
	 * Validate the key and while at it, lower case it for matching.
	 */</comment>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">store_key<pos:position pos:line="30" pos:column="22"/></name></expr>)<pos:position pos:line="30" pos:column="23"/></condition><then pos:line="30" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="31" pos:column="17">*<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">store_key<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">=<pos:position pos:line="31" pos:column="29"/></operator> <call><name pos:line="31" pos:column="30">xmalloc<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><call><name pos:line="31" pos:column="38">strlen<pos:position pos:line="31" pos:column="44"/></name><argument_list pos:line="31" pos:column="44">(<argument><expr><name pos:line="31" pos:column="45">key<pos:position pos:line="31" pos:column="48"/></name></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></call> <operator pos:line="31" pos:column="50">+<pos:position pos:line="31" pos:column="51"/></operator> <literal type="number" pos:line="31" pos:column="52">1<pos:position pos:line="31" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="33" pos:column="9">dot<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <literal type="number" pos:line="33" pos:column="15">0<pos:position pos:line="33" pos:column="16"/></literal></expr>;<pos:position pos:line="33" pos:column="17"/></expr_stmt>
	<for pos:line="34" pos:column="9">for <control pos:line="34" pos:column="13">(<init><expr><name pos:line="34" pos:column="14">i<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <literal type="number" pos:line="34" pos:column="18">0<pos:position pos:line="34" pos:column="19"/></literal></expr>;<pos:position pos:line="34" pos:column="20"/></init> <condition><expr><name><name pos:line="34" pos:column="21">key<pos:position pos:line="34" pos:column="24"/></name><index pos:line="34" pos:column="24">[<expr><name pos:line="34" pos:column="25">i<pos:position pos:line="34" pos:column="26"/></name></expr>]<pos:position pos:line="34" pos:column="27"/></index></name></expr>;<pos:position pos:line="34" pos:column="28"/></condition> <incr><expr><name pos:line="34" pos:column="29">i<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">++<pos:position pos:line="34" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="34" pos:column="33"/></control> <block pos:line="34" pos:column="34">{
		<decl_stmt><decl><type><name pos:line="35" pos:column="17">unsigned<pos:position pos:line="35" pos:column="25"/></name> <name pos:line="35" pos:column="26">char<pos:position pos:line="35" pos:column="30"/></name></type> <name pos:line="35" pos:column="31">c<pos:position pos:line="35" pos:column="32"/></name> <init pos:line="35" pos:column="33">= <expr><name><name pos:line="35" pos:column="35">key<pos:position pos:line="35" pos:column="38"/></name><index pos:line="35" pos:column="38">[<expr><name pos:line="35" pos:column="39">i<pos:position pos:line="35" pos:column="40"/></name></expr>]<pos:position pos:line="35" pos:column="41"/></index></name></expr></init></decl>;<pos:position pos:line="35" pos:column="42"/></decl_stmt>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">c<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">==<pos:position pos:line="36" pos:column="25"/></operator> <literal type="char" pos:line="36" pos:column="26">'.'<pos:position pos:line="36" pos:column="29"/></literal></expr>)<pos:position pos:line="36" pos:column="30"/></condition><then pos:line="36" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="25">dot<pos:position pos:line="37" pos:column="28"/></name> <operator pos:line="37" pos:column="29">=<pos:position pos:line="37" pos:column="30"/></operator> <literal type="number" pos:line="37" pos:column="31">1<pos:position pos:line="37" pos:column="32"/></literal></expr>;<pos:position pos:line="37" pos:column="33"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="38" pos:column="17">/* Leave the extended basename untouched.. */</comment>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">!<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">dot<pos:position pos:line="39" pos:column="25"/></name> <operator pos:line="39" pos:column="26">||<pos:position pos:line="39" pos:column="28"/></operator> <name pos:line="39" pos:column="29">i<pos:position pos:line="39" pos:column="30"/></name> <operator pos:line="39" pos:column="31">&gt;<pos:position pos:line="39" pos:column="35"/></operator> <name pos:line="39" pos:column="33">baselen<pos:position pos:line="39" pos:column="40"/></name></expr>)<pos:position pos:line="39" pos:column="41"/></condition><then pos:line="39" pos:column="41"> <block pos:line="39" pos:column="42">{
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><operator pos:line="40" pos:column="29">!<pos:position pos:line="40" pos:column="30"/></operator><call><name pos:line="40" pos:column="30">iskeychar<pos:position pos:line="40" pos:column="39"/></name><argument_list pos:line="40" pos:column="39">(<argument><expr><name pos:line="40" pos:column="40">c<pos:position pos:line="40" pos:column="41"/></name></expr></argument>)<pos:position pos:line="40" pos:column="42"/></argument_list></call> <operator pos:line="40" pos:column="43">||<pos:position pos:line="40" pos:column="45"/></operator>
			    <operator pos:line="41" pos:column="29">(<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="30">i<pos:position pos:line="41" pos:column="31"/></name> <operator pos:line="41" pos:column="32">==<pos:position pos:line="41" pos:column="34"/></operator> <name pos:line="41" pos:column="35">baselen<pos:position pos:line="41" pos:column="42"/></name> <operator pos:line="41" pos:column="43">+<pos:position pos:line="41" pos:column="44"/></operator> <literal type="number" pos:line="41" pos:column="45">1<pos:position pos:line="41" pos:column="46"/></literal> <operator pos:line="41" pos:column="47">&amp;&amp;<pos:position pos:line="41" pos:column="57"/></operator> <operator pos:line="41" pos:column="50">!<pos:position pos:line="41" pos:column="51"/></operator><call><name pos:line="41" pos:column="51">isalpha<pos:position pos:line="41" pos:column="58"/></name><argument_list pos:line="41" pos:column="58">(<argument><expr><name pos:line="41" pos:column="59">c<pos:position pos:line="41" pos:column="60"/></name></expr></argument>)<pos:position pos:line="41" pos:column="61"/></argument_list></call><operator pos:line="41" pos:column="61">)<pos:position pos:line="41" pos:column="62"/></operator></expr>)<pos:position pos:line="41" pos:column="63"/></condition><then pos:line="41" pos:column="63"> <block pos:line="41" pos:column="64">{
				<if pos:line="42" pos:column="33">if <condition pos:line="42" pos:column="36">(<expr><operator pos:line="42" pos:column="37">!<pos:position pos:line="42" pos:column="38"/></operator><name pos:line="42" pos:column="38">quiet<pos:position pos:line="42" pos:column="43"/></name></expr>)<pos:position pos:line="42" pos:column="44"/></condition><then pos:line="42" pos:column="44">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="41">error<pos:position pos:line="43" pos:column="46"/></name><argument_list pos:line="43" pos:column="46">(<argument><expr><literal type="string" pos:line="43" pos:column="47">"invalid key: %s"<pos:position pos:line="43" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="66">key<pos:position pos:line="43" pos:column="69"/></name></expr></argument>)<pos:position pos:line="43" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="71"/></expr_stmt></block></then></if>
				<goto pos:line="44" pos:column="33">goto <name pos:line="44" pos:column="38">out_free_ret_1<pos:position pos:line="44" pos:column="52"/></name>;<pos:position pos:line="44" pos:column="53"/></goto>
			}<pos:position pos:line="45" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="46" pos:column="25">c<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">=<pos:position pos:line="46" pos:column="28"/></operator> <call><name pos:line="46" pos:column="29">tolower<pos:position pos:line="46" pos:column="36"/></name><argument_list pos:line="46" pos:column="36">(<argument><expr><name pos:line="46" pos:column="37">c<pos:position pos:line="46" pos:column="38"/></name></expr></argument>)<pos:position pos:line="46" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="47" pos:column="18"/></block></then> <elseif pos:line="47" pos:column="19">else <if pos:line="47" pos:column="24">if <condition pos:line="47" pos:column="27">(<expr><name pos:line="47" pos:column="28">c<pos:position pos:line="47" pos:column="29"/></name> <operator pos:line="47" pos:column="30">==<pos:position pos:line="47" pos:column="32"/></operator> <literal type="char" pos:line="47" pos:column="33">'\n'<pos:position pos:line="47" pos:column="37"/></literal></expr>)<pos:position pos:line="47" pos:column="38"/></condition><then pos:line="47" pos:column="38"> <block pos:line="47" pos:column="39">{
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><operator pos:line="48" pos:column="29">!<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="30">quiet<pos:position pos:line="48" pos:column="35"/></name></expr>)<pos:position pos:line="48" pos:column="36"/></condition><then pos:line="48" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="33">error<pos:position pos:line="49" pos:column="38"/></name><argument_list pos:line="49" pos:column="38">(<argument><expr><literal type="string" pos:line="49" pos:column="39">"invalid key (newline): %s"<pos:position pos:line="49" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="68">key<pos:position pos:line="49" pos:column="71"/></name></expr></argument>)<pos:position pos:line="49" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="73"/></expr_stmt></block></then></if>
			<goto pos:line="50" pos:column="25">goto <name pos:line="50" pos:column="30">out_free_ret_1<pos:position pos:line="50" pos:column="44"/></name>;<pos:position pos:line="50" pos:column="45"/></goto>
		}<pos:position pos:line="51" pos:column="18"/></block></then></if></elseif></if>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">store_key<pos:position pos:line="52" pos:column="30"/></name></expr>)<pos:position pos:line="52" pos:column="31"/></condition><then pos:line="52" pos:column="31">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="53" pos:column="25">(<pos:position pos:line="53" pos:column="26"/></operator><operator pos:line="53" pos:column="26">*<pos:position pos:line="53" pos:column="27"/></operator><name pos:line="53" pos:column="27">store_key<pos:position pos:line="53" pos:column="36"/></name><operator pos:line="53" pos:column="36">)<pos:position pos:line="53" pos:column="37"/></operator><index pos:line="53" pos:column="37">[<expr><name pos:line="53" pos:column="38">i<pos:position pos:line="53" pos:column="39"/></name></expr>]<pos:position pos:line="53" pos:column="40"/></index> <operator pos:line="53" pos:column="41">=<pos:position pos:line="53" pos:column="42"/></operator> <name pos:line="53" pos:column="43">c<pos:position pos:line="53" pos:column="44"/></name></expr>;<pos:position pos:line="53" pos:column="45"/></expr_stmt></block></then></if>
	}<pos:position pos:line="54" pos:column="10"/></block></for>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name pos:line="55" pos:column="13">store_key<pos:position pos:line="55" pos:column="22"/></name></expr>)<pos:position pos:line="55" pos:column="23"/></condition><then pos:line="55" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="56" pos:column="17">(<pos:position pos:line="56" pos:column="18"/></operator><operator pos:line="56" pos:column="18">*<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="19">store_key<pos:position pos:line="56" pos:column="28"/></name><operator pos:line="56" pos:column="28">)<pos:position pos:line="56" pos:column="29"/></operator><index pos:line="56" pos:column="29">[<expr><name pos:line="56" pos:column="30">i<pos:position pos:line="56" pos:column="31"/></name></expr>]<pos:position pos:line="56" pos:column="32"/></index> <operator pos:line="56" pos:column="33">=<pos:position pos:line="56" pos:column="34"/></operator> <literal type="number" pos:line="56" pos:column="35">0<pos:position pos:line="56" pos:column="36"/></literal></expr>;<pos:position pos:line="56" pos:column="37"/></expr_stmt></block></then></if>

	<return pos:line="58" pos:column="9">return <expr><literal type="number" pos:line="58" pos:column="16">0<pos:position pos:line="58" pos:column="17"/></literal></expr>;<pos:position pos:line="58" pos:column="18"/></return>

<label><name pos:line="60" pos:column="1">out_free_ret_1<pos:position pos:line="60" pos:column="15"/></name>:<pos:position pos:line="60" pos:column="16"/></label>
	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">store_key<pos:position pos:line="61" pos:column="22"/></name></expr>)<pos:position pos:line="61" pos:column="23"/></condition><then pos:line="61" pos:column="23"> <block pos:line="61" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">free<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">(<argument><expr><operator pos:line="62" pos:column="22">*<pos:position pos:line="62" pos:column="23"/></operator><name pos:line="62" pos:column="23">store_key<pos:position pos:line="62" pos:column="32"/></name></expr></argument>)<pos:position pos:line="62" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="63" pos:column="17">*<pos:position pos:line="63" pos:column="18"/></operator><name pos:line="63" pos:column="18">store_key<pos:position pos:line="63" pos:column="27"/></name> <operator pos:line="63" pos:column="28">=<pos:position pos:line="63" pos:column="29"/></operator> <name pos:line="63" pos:column="30">NULL<pos:position pos:line="63" pos:column="34"/></name></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="64" pos:column="10"/></block></then></if>
	<return pos:line="65" pos:column="9">return <expr><operator pos:line="65" pos:column="16">-<pos:position pos:line="65" pos:column="17"/></operator><name pos:line="65" pos:column="17">CONFIG_INVALID_KEY<pos:position pos:line="65" pos:column="35"/></name></expr>;<pos:position pos:line="65" pos:column="36"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
