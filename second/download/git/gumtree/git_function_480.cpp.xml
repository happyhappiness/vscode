<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_480.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_upload_archive<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">argc<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">argv<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">prefix<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">child_process<pos:position pos:line="3" pos:column="29"/></name></name></type> <name pos:line="3" pos:column="30">writer<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><block pos:line="3" pos:column="39">{ <expr><name pos:line="3" pos:column="41">argv<pos:position pos:line="3" pos:column="45"/></name></expr> }<pos:position pos:line="3" pos:column="47"/></block></expr></init></decl>;<pos:position pos:line="3" pos:column="48"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/*
	 * Set up sideband subprocess.
	 *
	 * We (parent) monitor and read from child, sending its fd#1 and fd#2
	 * multiplexed out to our fd#1.  If the child dies, we tell the other
	 * end over channel #3.
	 */</comment>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">argv<pos:position pos:line="12" pos:column="13"/></name><index pos:line="12" pos:column="13">[<expr><literal type="number" pos:line="12" pos:column="14">0<pos:position pos:line="12" pos:column="15"/></literal></expr>]<pos:position pos:line="12" pos:column="16"/></index></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <literal type="string" pos:line="12" pos:column="19">"upload-archive--writer"<pos:position pos:line="12" pos:column="43"/></literal></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">writer<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">out<pos:position pos:line="13" pos:column="19"/></name></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <name><name pos:line="13" pos:column="22">writer<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">.<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="29">err<pos:position pos:line="13" pos:column="32"/></name></name> <operator pos:line="13" pos:column="33">=<pos:position pos:line="13" pos:column="34"/></operator> <operator pos:line="13" pos:column="35">-<pos:position pos:line="13" pos:column="36"/></operator><literal type="number" pos:line="13" pos:column="36">1<pos:position pos:line="13" pos:column="37"/></literal></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">writer<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">.<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">git_cmd<pos:position pos:line="14" pos:column="23"/></name></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <literal type="number" pos:line="14" pos:column="26">1<pos:position pos:line="14" pos:column="27"/></literal></expr>;<pos:position pos:line="14" pos:column="28"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">start_command<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><operator pos:line="15" pos:column="27">&amp;<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="28">writer<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36"> <block pos:line="15" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">int<pos:position pos:line="16" pos:column="20"/></name></type> <name pos:line="16" pos:column="21">err<pos:position pos:line="16" pos:column="24"/></name> <init pos:line="16" pos:column="25">= <expr><name pos:line="16" pos:column="27">errno<pos:position pos:line="16" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="33"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">packet_write<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><literal type="number" pos:line="17" pos:column="30">1<pos:position pos:line="17" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="33">"NACK unable to spawn subprocess\n"<pos:position pos:line="17" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">die<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><literal type="string" pos:line="18" pos:column="21">"upload-archive: %s"<pos:position pos:line="18" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="43">strerror<pos:position pos:line="18" pos:column="51"/></name><argument_list pos:line="18" pos:column="51">(<argument><expr><name pos:line="18" pos:column="52">err<pos:position pos:line="18" pos:column="55"/></name></expr></argument>)<pos:position pos:line="18" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="21" pos:column="9">packet_write<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><literal type="number" pos:line="21" pos:column="22">1<pos:position pos:line="21" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="25">"ACK\n"<pos:position pos:line="21" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">packet_flush<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><literal type="number" pos:line="22" pos:column="22">1<pos:position pos:line="22" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>

	<while pos:line="24" pos:column="9">while <condition pos:line="24" pos:column="15">(<expr><literal type="number" pos:line="24" pos:column="16">1<pos:position pos:line="24" pos:column="17"/></literal></expr>)<pos:position pos:line="24" pos:column="18"/></condition> <block pos:line="24" pos:column="19">{
		<decl_stmt><decl><type><name><name pos:line="25" pos:column="17">struct<pos:position pos:line="25" pos:column="23"/></name> <name pos:line="25" pos:column="24">pollfd<pos:position pos:line="25" pos:column="30"/></name></name></type> <name><name pos:line="25" pos:column="31">pfd<pos:position pos:line="25" pos:column="34"/></name><index pos:line="25" pos:column="34">[<expr><literal type="number" pos:line="25" pos:column="35">2<pos:position pos:line="25" pos:column="36"/></literal></expr>]<pos:position pos:line="25" pos:column="37"/></index></name></decl>;<pos:position pos:line="25" pos:column="38"/></decl_stmt>

		<expr_stmt><expr><name><name pos:line="27" pos:column="17">pfd<pos:position pos:line="27" pos:column="20"/></name><index pos:line="27" pos:column="20">[<expr><literal type="number" pos:line="27" pos:column="21">0<pos:position pos:line="27" pos:column="22"/></literal></expr>]<pos:position pos:line="27" pos:column="23"/></index></name><operator pos:line="27" pos:column="23">.<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="24">fd<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <name><name pos:line="27" pos:column="29">writer<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">.<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="36">out<pos:position pos:line="27" pos:column="39"/></name></name></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">pfd<pos:position pos:line="28" pos:column="20"/></name><index pos:line="28" pos:column="20">[<expr><literal type="number" pos:line="28" pos:column="21">0<pos:position pos:line="28" pos:column="22"/></literal></expr>]<pos:position pos:line="28" pos:column="23"/></index></name><operator pos:line="28" pos:column="23">.<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="24">events<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">=<pos:position pos:line="28" pos:column="32"/></operator> <name pos:line="28" pos:column="33">POLLIN<pos:position pos:line="28" pos:column="39"/></name></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="29" pos:column="17">pfd<pos:position pos:line="29" pos:column="20"/></name><index pos:line="29" pos:column="20">[<expr><literal type="number" pos:line="29" pos:column="21">1<pos:position pos:line="29" pos:column="22"/></literal></expr>]<pos:position pos:line="29" pos:column="23"/></index></name><operator pos:line="29" pos:column="23">.<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="24">fd<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">=<pos:position pos:line="29" pos:column="28"/></operator> <name><name pos:line="29" pos:column="29">writer<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">.<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="36">err<pos:position pos:line="29" pos:column="39"/></name></name></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">pfd<pos:position pos:line="30" pos:column="20"/></name><index pos:line="30" pos:column="20">[<expr><literal type="number" pos:line="30" pos:column="21">1<pos:position pos:line="30" pos:column="22"/></literal></expr>]<pos:position pos:line="30" pos:column="23"/></index></name><operator pos:line="30" pos:column="23">.<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="24">events<pos:position pos:line="30" pos:column="30"/></name> <operator pos:line="30" pos:column="31">=<pos:position pos:line="30" pos:column="32"/></operator> <name pos:line="30" pos:column="33">POLLIN<pos:position pos:line="30" pos:column="39"/></name></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><call><name pos:line="31" pos:column="21">poll<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">pfd<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="31">2<pos:position pos:line="31" pos:column="32"/></literal></expr></argument>, <argument><expr><operator pos:line="31" pos:column="34">-<pos:position pos:line="31" pos:column="35"/></operator><literal type="number" pos:line="31" pos:column="35">1<pos:position pos:line="31" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call> <operator pos:line="31" pos:column="38">&lt;<pos:position pos:line="31" pos:column="42"/></operator> <literal type="number" pos:line="31" pos:column="40">0<pos:position pos:line="31" pos:column="41"/></literal></expr>)<pos:position pos:line="31" pos:column="42"/></condition><then pos:line="31" pos:column="42"> <block pos:line="31" pos:column="43">{
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><name pos:line="32" pos:column="29">errno<pos:position pos:line="32" pos:column="34"/></name> <operator pos:line="32" pos:column="35">!=<pos:position pos:line="32" pos:column="37"/></operator> <name pos:line="32" pos:column="38">EINTR<pos:position pos:line="32" pos:column="43"/></name></expr>)<pos:position pos:line="32" pos:column="44"/></condition><then pos:line="32" pos:column="44"> <block pos:line="32" pos:column="45">{
				<expr_stmt><expr><call><name pos:line="33" pos:column="33">error_errno<pos:position pos:line="33" pos:column="44"/></name><argument_list pos:line="33" pos:column="44">(<argument><expr><literal type="string" pos:line="33" pos:column="45">"poll failed resuming"<pos:position pos:line="33" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="69"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="34" pos:column="33">sleep<pos:position pos:line="34" pos:column="38"/></name><argument_list pos:line="34" pos:column="38">(<argument><expr><literal type="number" pos:line="34" pos:column="39">1<pos:position pos:line="34" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>
			}<pos:position pos:line="35" pos:column="26"/></block></then></if>
			<continue pos:line="36" pos:column="25">continue;<pos:position pos:line="36" pos:column="34"/></continue>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name><name pos:line="38" pos:column="21">pfd<pos:position pos:line="38" pos:column="24"/></name><index pos:line="38" pos:column="24">[<expr><literal type="number" pos:line="38" pos:column="25">1<pos:position pos:line="38" pos:column="26"/></literal></expr>]<pos:position pos:line="38" pos:column="27"/></index></name><operator pos:line="38" pos:column="27">.<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="28">revents<pos:position pos:line="38" pos:column="35"/></name> <operator pos:line="38" pos:column="36">&amp;<pos:position pos:line="38" pos:column="41"/></operator> <name pos:line="38" pos:column="38">POLLIN<pos:position pos:line="38" pos:column="44"/></name></expr>)<pos:position pos:line="38" pos:column="45"/></condition><then pos:line="38" pos:column="45">
			<comment type="block" pos:line="39" pos:column="25">/* Status stream ready */</comment>
			<block type="pseudo"><if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><call><name pos:line="40" pos:column="29">process_input<pos:position pos:line="40" pos:column="42"/></name><argument_list pos:line="40" pos:column="42">(<argument><expr><name><name pos:line="40" pos:column="43">pfd<pos:position pos:line="40" pos:column="46"/></name><index pos:line="40" pos:column="46">[<expr><literal type="number" pos:line="40" pos:column="47">1<pos:position pos:line="40" pos:column="48"/></literal></expr>]<pos:position pos:line="40" pos:column="49"/></index></name><operator pos:line="40" pos:column="49">.<pos:position pos:line="40" pos:column="50"/></operator><name pos:line="40" pos:column="50">fd<pos:position pos:line="40" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="54">2<pos:position pos:line="40" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="57"/></condition><then pos:line="40" pos:column="57">
				<block type="pseudo"><continue pos:line="41" pos:column="33">continue;<pos:position pos:line="41" pos:column="42"/></continue></block></then></if></block></then></if>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name><name pos:line="42" pos:column="21">pfd<pos:position pos:line="42" pos:column="24"/></name><index pos:line="42" pos:column="24">[<expr><literal type="number" pos:line="42" pos:column="25">0<pos:position pos:line="42" pos:column="26"/></literal></expr>]<pos:position pos:line="42" pos:column="27"/></index></name><operator pos:line="42" pos:column="27">.<pos:position pos:line="42" pos:column="28"/></operator><name pos:line="42" pos:column="28">revents<pos:position pos:line="42" pos:column="35"/></name> <operator pos:line="42" pos:column="36">&amp;<pos:position pos:line="42" pos:column="41"/></operator> <name pos:line="42" pos:column="38">POLLIN<pos:position pos:line="42" pos:column="44"/></name></expr>)<pos:position pos:line="42" pos:column="45"/></condition><then pos:line="42" pos:column="45">
			<comment type="block" pos:line="43" pos:column="25">/* Data stream ready */</comment>
			<block type="pseudo"><if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><call><name pos:line="44" pos:column="29">process_input<pos:position pos:line="44" pos:column="42"/></name><argument_list pos:line="44" pos:column="42">(<argument><expr><name><name pos:line="44" pos:column="43">pfd<pos:position pos:line="44" pos:column="46"/></name><index pos:line="44" pos:column="46">[<expr><literal type="number" pos:line="44" pos:column="47">0<pos:position pos:line="44" pos:column="48"/></literal></expr>]<pos:position pos:line="44" pos:column="49"/></index></name><operator pos:line="44" pos:column="49">.<pos:position pos:line="44" pos:column="50"/></operator><name pos:line="44" pos:column="50">fd<pos:position pos:line="44" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="54">1<pos:position pos:line="44" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="57"/></condition><then pos:line="44" pos:column="57">
				<block type="pseudo"><continue pos:line="45" pos:column="33">continue;<pos:position pos:line="45" pos:column="42"/></continue></block></then></if></block></then></if>

		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><call><name pos:line="47" pos:column="21">finish_command<pos:position pos:line="47" pos:column="35"/></name><argument_list pos:line="47" pos:column="35">(<argument><expr><operator pos:line="47" pos:column="36">&amp;<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="37">writer<pos:position pos:line="47" pos:column="43"/></name></expr></argument>)<pos:position pos:line="47" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="45"/></condition><then pos:line="47" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="25">error_clnt<pos:position pos:line="48" pos:column="35"/></name><argument_list pos:line="48" pos:column="35">(<argument><expr><literal type="string" pos:line="48" pos:column="36">"%s"<pos:position pos:line="48" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="42">deadchild<pos:position pos:line="48" pos:column="51"/></name></expr></argument>)<pos:position pos:line="48" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="53"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">packet_flush<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><literal type="number" pos:line="49" pos:column="30">1<pos:position pos:line="49" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
		<break pos:line="50" pos:column="17">break;<pos:position pos:line="50" pos:column="23"/></break>
	}<pos:position pos:line="51" pos:column="10"/></block></while>
	<return pos:line="52" pos:column="9">return <expr><literal type="number" pos:line="52" pos:column="16">0<pos:position pos:line="52" pos:column="17"/></literal></expr>;<pos:position pos:line="52" pos:column="18"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
