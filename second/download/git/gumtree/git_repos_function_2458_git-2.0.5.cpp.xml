<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2458_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">curate_packed_ref_fn<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">ref_entry<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">entry<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">void<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">cb_data<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">string_list<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">refs_to_delete<pos:position pos:line="3" pos:column="43"/></name> <init pos:line="3" pos:column="44">= <expr><name pos:line="3" pos:column="46">cb_data<pos:position pos:line="3" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="54"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name><name pos:line="5" pos:column="13">entry<pos:position pos:line="5" pos:column="18"/></name><operator pos:line="5" pos:column="18">-&gt;<pos:position pos:line="5" pos:column="23"/></operator><name pos:line="5" pos:column="20">flag<pos:position pos:line="5" pos:column="24"/></name></name> <operator pos:line="5" pos:column="25">&amp;<pos:position pos:line="5" pos:column="30"/></operator> <name pos:line="5" pos:column="27">REF_ISBROKEN<pos:position pos:line="5" pos:column="39"/></name></expr>)<pos:position pos:line="5" pos:column="40"/></condition><then pos:line="5" pos:column="40"> <block pos:line="5" pos:column="41">{
		<comment type="block" pos:line="6" pos:column="17">/* This shouldn't happen to packed refs. */</comment>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">error<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><literal type="string" pos:line="7" pos:column="23">"%s is broken!"<pos:position pos:line="7" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="40">entry<pos:position pos:line="7" pos:column="45"/></name><operator pos:line="7" pos:column="45">-&gt;<pos:position pos:line="7" pos:column="50"/></operator><name pos:line="7" pos:column="47">name<pos:position pos:line="7" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">string_list_append<pos:position pos:line="8" pos:column="35"/></name><argument_list pos:line="8" pos:column="35">(<argument><expr><name pos:line="8" pos:column="36">refs_to_delete<pos:position pos:line="8" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="52">entry<pos:position pos:line="8" pos:column="57"/></name><operator pos:line="8" pos:column="57">-&gt;<pos:position pos:line="8" pos:column="62"/></operator><name pos:line="8" pos:column="59">name<pos:position pos:line="8" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt>
		<return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><call><name pos:line="11" pos:column="14">has_sha1_file<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name><name pos:line="11" pos:column="28">entry<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">-&gt;<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="35">u<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">.<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">value<pos:position pos:line="11" pos:column="42"/></name><operator pos:line="11" pos:column="42">.<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="43">sha1<pos:position pos:line="11" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="49"/></condition><then pos:line="11" pos:column="49"> <block pos:line="11" pos:column="50">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">unsigned<pos:position pos:line="12" pos:column="25"/></name> <name pos:line="12" pos:column="26">char<pos:position pos:line="12" pos:column="30"/></name></type> <name><name pos:line="12" pos:column="31">sha1<pos:position pos:line="12" pos:column="35"/></name><index pos:line="12" pos:column="35">[<expr><literal type="number" pos:line="12" pos:column="36">20<pos:position pos:line="12" pos:column="38"/></literal></expr>]<pos:position pos:line="12" pos:column="39"/></index></name></decl>;<pos:position pos:line="12" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">flags<pos:position pos:line="13" pos:column="26"/></name></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">read_ref_full<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><name><name pos:line="15" pos:column="35">entry<pos:position pos:line="15" pos:column="40"/></name><operator pos:line="15" pos:column="40">-&gt;<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="42">name<pos:position pos:line="15" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="48">sha1<pos:position pos:line="15" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="54">0<pos:position pos:line="15" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="57">&amp;<pos:position pos:line="15" pos:column="62"/></operator><name pos:line="15" pos:column="58">flags<pos:position pos:line="15" pos:column="63"/></name></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="65"/></condition><then pos:line="15" pos:column="65">
			<comment type="block" pos:line="16" pos:column="25">/* We should at least have found the packed ref. */</comment>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="25">die<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><literal type="string" pos:line="17" pos:column="29">"Internal error"<pos:position pos:line="17" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="47"/></expr_stmt></block></then></if>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">(<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">flags<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">&amp;<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="30">REF_ISSYMREF<pos:position pos:line="18" pos:column="42"/></name><operator pos:line="18" pos:column="42">)<pos:position pos:line="18" pos:column="43"/></operator> <operator pos:line="18" pos:column="44">||<pos:position pos:line="18" pos:column="46"/></operator> <operator pos:line="18" pos:column="47">!<pos:position pos:line="18" pos:column="48"/></operator><operator pos:line="18" pos:column="48">(<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="49">flags<pos:position pos:line="18" pos:column="54"/></name> <operator pos:line="18" pos:column="55">&amp;<pos:position pos:line="18" pos:column="60"/></operator> <name pos:line="18" pos:column="57">REF_ISPACKED<pos:position pos:line="18" pos:column="69"/></name><operator pos:line="18" pos:column="69">)<pos:position pos:line="18" pos:column="70"/></operator></expr>)<pos:position pos:line="18" pos:column="71"/></condition><then pos:line="18" pos:column="71"> <block pos:line="18" pos:column="72">{
			<comment type="block" pos:line="19" pos:column="25">/*
			 * This packed reference is overridden by a
			 * loose reference, so it is OK that its value
			 * is no longer valid; for example, it might
			 * refer to an object that has been garbage
			 * collected.  For this purpose we don't even
			 * care whether the loose reference itself is
			 * invalid, broken, symbolic, etc.  Silently
			 * remove the packed reference.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">string_list_append<pos:position pos:line="29" pos:column="43"/></name><argument_list pos:line="29" pos:column="43">(<argument><expr><name pos:line="29" pos:column="44">refs_to_delete<pos:position pos:line="29" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="60">entry<pos:position pos:line="29" pos:column="65"/></name><operator pos:line="29" pos:column="65">-&gt;<pos:position pos:line="29" pos:column="70"/></operator><name pos:line="29" pos:column="67">name<pos:position pos:line="29" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="73"/></expr_stmt>
			<return pos:line="30" pos:column="25">return <expr><literal type="number" pos:line="30" pos:column="32">0<pos:position pos:line="30" pos:column="33"/></literal></expr>;<pos:position pos:line="30" pos:column="34"/></return>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="32" pos:column="17">/*
		 * There is no overriding loose reference, so the fact
		 * that this reference doesn't refer to a valid object
		 * indicates some kind of repository corruption.
		 * Report the problem, then omit the reference from
		 * the output.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">error<pos:position pos:line="39" pos:column="22"/></name><argument_list pos:line="39" pos:column="22">(<argument><expr><literal type="string" pos:line="39" pos:column="23">"%s does not point to a valid object!"<pos:position pos:line="39" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="63">entry<pos:position pos:line="39" pos:column="68"/></name><operator pos:line="39" pos:column="68">-&gt;<pos:position pos:line="39" pos:column="73"/></operator><name pos:line="39" pos:column="70">name<pos:position pos:line="39" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">string_list_append<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><name pos:line="40" pos:column="36">refs_to_delete<pos:position pos:line="40" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="52">entry<pos:position pos:line="40" pos:column="57"/></name><operator pos:line="40" pos:column="57">-&gt;<pos:position pos:line="40" pos:column="62"/></operator><name pos:line="40" pos:column="59">name<pos:position pos:line="40" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="65"/></expr_stmt>
		<return pos:line="41" pos:column="17">return <expr><literal type="number" pos:line="41" pos:column="24">0<pos:position pos:line="41" pos:column="25"/></literal></expr>;<pos:position pos:line="41" pos:column="26"/></return>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

	<return pos:line="44" pos:column="9">return <expr><literal type="number" pos:line="44" pos:column="16">0<pos:position pos:line="44" pos:column="17"/></literal></expr>;<pos:position pos:line="44" pos:column="18"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
