<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4436_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">ref<pos:position pos:line="1" pos:column="11"/></name></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">ref_remove_duplicates<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name><name pos:line="1" pos:column="35">struct<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">ref<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">ref_map<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">string_list<pos:position pos:line="3" pos:column="27"/></name></name></type> <name pos:line="3" pos:column="28">refs<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><name pos:line="3" pos:column="35">STRING_LIST_INIT_NODUP<pos:position pos:line="3" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ref<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">retval<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name pos:line="4" pos:column="30">NULL<pos:position pos:line="4" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">ref<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier><modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">p<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><operator pos:line="5" pos:column="26">&amp;<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="27">retval<pos:position pos:line="5" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><name pos:line="7" pos:column="16">ref_map<pos:position pos:line="7" pos:column="23"/></name></expr>)<pos:position pos:line="7" pos:column="24"/></condition> <block pos:line="7" pos:column="25">{
		<decl_stmt><decl><type><name><name pos:line="8" pos:column="17">struct<pos:position pos:line="8" pos:column="23"/></name> <name pos:line="8" pos:column="24">ref<pos:position pos:line="8" pos:column="27"/></name></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">ref<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><name pos:line="8" pos:column="35">ref_map<pos:position pos:line="8" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>

		<expr_stmt><expr><name pos:line="10" pos:column="17">ref_map<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">=<pos:position pos:line="10" pos:column="26"/></operator> <name><name pos:line="10" pos:column="27">ref_map<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">-&gt;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="36">next<pos:position pos:line="10" pos:column="40"/></name></name></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="11" pos:column="17">ref<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">-&gt;<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="22">next<pos:position pos:line="11" pos:column="26"/></name></name> <operator pos:line="11" pos:column="27">=<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="29">NULL<pos:position pos:line="11" pos:column="33"/></name></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>

		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><name><name pos:line="13" pos:column="22">ref<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">-&gt;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="27">peer_ref<pos:position pos:line="13" pos:column="35"/></name></name></expr>)<pos:position pos:line="13" pos:column="36"/></condition><then pos:line="13" pos:column="36"> <block pos:line="13" pos:column="37">{
			<expr_stmt><expr><operator pos:line="14" pos:column="25">*<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="26">p<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">=<pos:position pos:line="14" pos:column="29"/></operator> <name pos:line="14" pos:column="30">ref<pos:position pos:line="14" pos:column="33"/></name></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="15" pos:column="25">p<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">=<pos:position pos:line="15" pos:column="28"/></operator> <operator pos:line="15" pos:column="29">&amp;<pos:position pos:line="15" pos:column="34"/></operator><name><name pos:line="15" pos:column="30">ref<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">-&gt;<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="35">next<pos:position pos:line="15" pos:column="39"/></name></name></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="16" pos:column="18"/></block></then> <else pos:line="16" pos:column="19">else <block pos:line="16" pos:column="24">{
			<decl_stmt><decl><type><name><name pos:line="17" pos:column="25">struct<pos:position pos:line="17" pos:column="31"/></name> <name pos:line="17" pos:column="32">string_list_item<pos:position pos:line="17" pos:column="48"/></name></name> <modifier pos:line="17" pos:column="49">*<pos:position pos:line="17" pos:column="50"/></modifier></type><name pos:line="17" pos:column="50">item<pos:position pos:line="17" pos:column="54"/></name> <init pos:line="17" pos:column="55">=
				<expr><call><name pos:line="18" pos:column="33">string_list_insert<pos:position pos:line="18" pos:column="51"/></name><argument_list pos:line="18" pos:column="51">(<argument><expr><operator pos:line="18" pos:column="52">&amp;<pos:position pos:line="18" pos:column="57"/></operator><name pos:line="18" pos:column="53">refs<pos:position pos:line="18" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="59">ref<pos:position pos:line="18" pos:column="62"/></name><operator pos:line="18" pos:column="62">-&gt;<pos:position pos:line="18" pos:column="67"/></operator><name pos:line="18" pos:column="64">peer_ref<pos:position pos:line="18" pos:column="72"/></name><operator pos:line="18" pos:column="72">-&gt;<pos:position pos:line="18" pos:column="77"/></operator><name pos:line="18" pos:column="74">name<pos:position pos:line="18" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="80"/></decl_stmt>

			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><name><name pos:line="20" pos:column="29">item<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">-&gt;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="35">util<pos:position pos:line="20" pos:column="39"/></name></name></expr>)<pos:position pos:line="20" pos:column="40"/></condition><then pos:line="20" pos:column="40"> <block pos:line="20" pos:column="41">{
				<comment type="block" pos:line="21" pos:column="33">/* Entry already existed */</comment>
				<expr_stmt><expr><call><name pos:line="22" pos:column="33">handle_duplicate<pos:position pos:line="22" pos:column="49"/></name><argument_list pos:line="22" pos:column="49">(<argument><expr><operator pos:line="22" pos:column="50">(<pos:position pos:line="22" pos:column="51"/></operator>struct <name pos:line="22" pos:column="58">ref<pos:position pos:line="22" pos:column="61"/></name> <operator pos:line="22" pos:column="62">*<pos:position pos:line="22" pos:column="63"/></operator><operator pos:line="22" pos:column="63">)<pos:position pos:line="22" pos:column="64"/></operator><name><name pos:line="22" pos:column="64">item<pos:position pos:line="22" pos:column="68"/></name><operator pos:line="22" pos:column="68">-&gt;<pos:position pos:line="22" pos:column="73"/></operator><name pos:line="22" pos:column="70">util<pos:position pos:line="22" pos:column="74"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="76">ref<pos:position pos:line="22" pos:column="79"/></name></expr></argument>)<pos:position pos:line="22" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="81"/></expr_stmt>
			}<pos:position pos:line="23" pos:column="26"/></block></then> <else pos:line="23" pos:column="27">else <block pos:line="23" pos:column="32">{
				<expr_stmt><expr><operator pos:line="24" pos:column="33">*<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="34">p<pos:position pos:line="24" pos:column="35"/></name> <operator pos:line="24" pos:column="36">=<pos:position pos:line="24" pos:column="37"/></operator> <name pos:line="24" pos:column="38">ref<pos:position pos:line="24" pos:column="41"/></name></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
				<expr_stmt><expr><name pos:line="25" pos:column="33">p<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">=<pos:position pos:line="25" pos:column="36"/></operator> <operator pos:line="25" pos:column="37">&amp;<pos:position pos:line="25" pos:column="42"/></operator><name><name pos:line="25" pos:column="38">ref<pos:position pos:line="25" pos:column="41"/></name><operator pos:line="25" pos:column="41">-&gt;<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="43">next<pos:position pos:line="25" pos:column="47"/></name></name></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="26" pos:column="33">item<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">-&gt;<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="39">util<pos:position pos:line="26" pos:column="43"/></name></name> <operator pos:line="26" pos:column="44">=<pos:position pos:line="26" pos:column="45"/></operator> <name pos:line="26" pos:column="46">ref<pos:position pos:line="26" pos:column="49"/></name></expr>;<pos:position pos:line="26" pos:column="50"/></expr_stmt>
			}<pos:position pos:line="27" pos:column="26"/></block></else></if>
		}<pos:position pos:line="28" pos:column="18"/></block></else></if>
	}<pos:position pos:line="29" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="31" pos:column="9">string_list_clear<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><operator pos:line="31" pos:column="27">&amp;<pos:position pos:line="31" pos:column="32"/></operator><name pos:line="31" pos:column="28">refs<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="34">0<pos:position pos:line="31" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
	<return pos:line="32" pos:column="9">return <expr><name pos:line="32" pos:column="16">retval<pos:position pos:line="32" pos:column="22"/></name></expr>;<pos:position pos:line="32" pos:column="23"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
