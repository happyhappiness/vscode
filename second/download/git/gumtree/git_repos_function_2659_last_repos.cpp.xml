<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2659_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">protocol_allow_config<pos:position pos:line="1" pos:column="34"/></name></name></type> <name pos:line="1" pos:column="35">get_protocol_config<pos:position pos:line="1" pos:column="54"/></name><parameter_list pos:line="1" pos:column="54">(<parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">type<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">key<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><call><name pos:line="3" pos:column="21">xstrfmt<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><literal type="string" pos:line="3" pos:column="29">"protocol.%s.allow"<pos:position pos:line="3" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="50">type<pos:position pos:line="3" pos:column="54"/></name></expr></argument>)<pos:position pos:line="3" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">value<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* first check the per-protocol config */</comment>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><call><name pos:line="7" pos:column="14">git_config_get_string<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><name pos:line="7" pos:column="36">key<pos:position pos:line="7" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="41">&amp;<pos:position pos:line="7" pos:column="46"/></operator><name pos:line="7" pos:column="42">value<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="49"/></condition><then pos:line="7" pos:column="49"> <block pos:line="7" pos:column="50">{
		<decl_stmt><decl><type><name><name pos:line="8" pos:column="17">enum<pos:position pos:line="8" pos:column="21"/></name> <name pos:line="8" pos:column="22">protocol_allow_config<pos:position pos:line="8" pos:column="43"/></name></name></type> <name pos:line="8" pos:column="44">ret<pos:position pos:line="8" pos:column="47"/></name> <init pos:line="8" pos:column="48">=
			<expr><call><name pos:line="9" pos:column="25">parse_protocol_config<pos:position pos:line="9" pos:column="46"/></name><argument_list pos:line="9" pos:column="46">(<argument><expr><name pos:line="9" pos:column="47">key<pos:position pos:line="9" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="52">value<pos:position pos:line="9" pos:column="57"/></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="59"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">free<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><name pos:line="10" pos:column="22">key<pos:position pos:line="10" pos:column="25"/></name></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">free<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">value<pos:position pos:line="11" pos:column="27"/></name></expr></argument>)<pos:position pos:line="11" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><name pos:line="12" pos:column="24">ret<pos:position pos:line="12" pos:column="27"/></name></expr>;<pos:position pos:line="12" pos:column="28"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">free<pos:position pos:line="14" pos:column="13"/></name><argument_list pos:line="14" pos:column="13">(<argument><expr><name pos:line="14" pos:column="14">key<pos:position pos:line="14" pos:column="17"/></name></expr></argument>)<pos:position pos:line="14" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>

	<comment type="block" pos:line="16" pos:column="9">/* if defined, fallback to user-defined default for unknown protocols */</comment>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><call><name pos:line="17" pos:column="14">git_config_get_string<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><literal type="string" pos:line="17" pos:column="36">"protocol.allow"<pos:position pos:line="17" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="54">&amp;<pos:position pos:line="17" pos:column="59"/></operator><name pos:line="17" pos:column="55">value<pos:position pos:line="17" pos:column="60"/></name></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="62"/></condition><then pos:line="17" pos:column="62"> <block pos:line="17" pos:column="63">{
		<decl_stmt><decl><type><name><name pos:line="18" pos:column="17">enum<pos:position pos:line="18" pos:column="21"/></name> <name pos:line="18" pos:column="22">protocol_allow_config<pos:position pos:line="18" pos:column="43"/></name></name></type> <name pos:line="18" pos:column="44">ret<pos:position pos:line="18" pos:column="47"/></name> <init pos:line="18" pos:column="48">=
			<expr><call><name pos:line="19" pos:column="25">parse_protocol_config<pos:position pos:line="19" pos:column="46"/></name><argument_list pos:line="19" pos:column="46">(<argument><expr><literal type="string" pos:line="19" pos:column="47">"protocol.allow"<pos:position pos:line="19" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="65">value<pos:position pos:line="19" pos:column="70"/></name></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="72"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">free<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">value<pos:position pos:line="20" pos:column="27"/></name></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
		<return pos:line="21" pos:column="17">return <expr><name pos:line="21" pos:column="24">ret<pos:position pos:line="21" pos:column="27"/></name></expr>;<pos:position pos:line="21" pos:column="28"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="24" pos:column="9">/* fallback to built-in defaults */</comment>
	<comment type="block" pos:line="25" pos:column="9">/* known safe */</comment>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator><call><name pos:line="26" pos:column="14">strcmp<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">type<pos:position pos:line="26" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="27">"http"<pos:position pos:line="26" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="34"/></argument_list></call> <operator pos:line="26" pos:column="35">||<pos:position pos:line="26" pos:column="37"/></operator>
	    <operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><call><name pos:line="27" pos:column="14">strcmp<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">type<pos:position pos:line="27" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="27">"https"<pos:position pos:line="27" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call> <operator pos:line="27" pos:column="36">||<pos:position pos:line="27" pos:column="38"/></operator>
	    <operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><call><name pos:line="28" pos:column="14">strcmp<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">type<pos:position pos:line="28" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="27">"git"<pos:position pos:line="28" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call> <operator pos:line="28" pos:column="34">||<pos:position pos:line="28" pos:column="36"/></operator>
	    <operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><call><name pos:line="29" pos:column="14">strcmp<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name pos:line="29" pos:column="21">type<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="27">"ssh"<pos:position pos:line="29" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="33"/></argument_list></call> <operator pos:line="29" pos:column="34">||<pos:position pos:line="29" pos:column="36"/></operator>
	    <operator pos:line="30" pos:column="13">!<pos:position pos:line="30" pos:column="14"/></operator><call><name pos:line="30" pos:column="14">strcmp<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">type<pos:position pos:line="30" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="27">"file"<pos:position pos:line="30" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="35"/></condition><then pos:line="30" pos:column="35">
		<block type="pseudo"><return pos:line="31" pos:column="17">return <expr><name pos:line="31" pos:column="24">PROTOCOL_ALLOW_ALWAYS<pos:position pos:line="31" pos:column="45"/></name></expr>;<pos:position pos:line="31" pos:column="46"/></return></block></then></if>

	<comment type="block" pos:line="33" pos:column="9">/* known scary; err on the side of caution */</comment>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><call><name pos:line="34" pos:column="14">strcmp<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><name pos:line="34" pos:column="21">type<pos:position pos:line="34" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="27">"ext"<pos:position pos:line="34" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="34"/></condition><then pos:line="34" pos:column="34">
		<block type="pseudo"><return pos:line="35" pos:column="17">return <expr><name pos:line="35" pos:column="24">PROTOCOL_ALLOW_NEVER<pos:position pos:line="35" pos:column="44"/></name></expr>;<pos:position pos:line="35" pos:column="45"/></return></block></then></if>

	<comment type="block" pos:line="37" pos:column="9">/* unknown; by default let them be used only directly by the user */</comment>
	<return pos:line="38" pos:column="9">return <expr><name pos:line="38" pos:column="16">PROTOCOL_ALLOW_USER_ONLY<pos:position pos:line="38" pos:column="40"/></name></expr>;<pos:position pos:line="38" pos:column="41"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
