<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6094_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_commit_tree<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">argc<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier><modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">argv<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">prefix<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">got_tree<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><literal type="number" pos:line="3" pos:column="27">0<pos:position pos:line="3" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">commit_list<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">parents<pos:position pos:line="4" pos:column="36"/></name> <init pos:line="4" pos:column="37">= <expr><name pos:line="4" pos:column="39">NULL<pos:position pos:line="4" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">object_id<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">tree_oid<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">object_id<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">commit_oid<pos:position pos:line="6" pos:column="36"/></name></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">buffer<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><name pos:line="7" pos:column="32">STRBUF_INIT<pos:position pos:line="7" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="44"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">git_config<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name pos:line="9" pos:column="20">commit_tree_config<pos:position pos:line="9" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="40">NULL<pos:position pos:line="9" pos:column="44"/></name></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="46"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">argc<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">&lt;<pos:position pos:line="11" pos:column="22"/></operator> <literal type="number" pos:line="11" pos:column="20">2<pos:position pos:line="11" pos:column="21"/></literal> <operator pos:line="11" pos:column="22">||<pos:position pos:line="11" pos:column="24"/></operator> <operator pos:line="11" pos:column="25">!<pos:position pos:line="11" pos:column="26"/></operator><call><name pos:line="11" pos:column="26">strcmp<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><name><name pos:line="11" pos:column="33">argv<pos:position pos:line="11" pos:column="37"/></name><index pos:line="11" pos:column="37">[<expr><literal type="number" pos:line="11" pos:column="38">1<pos:position pos:line="11" pos:column="39"/></literal></expr>]<pos:position pos:line="11" pos:column="40"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="42">"-h"<pos:position pos:line="11" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="48"/></condition><then pos:line="11" pos:column="48">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">usage<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">commit_tree_usage<pos:position pos:line="12" pos:column="40"/></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt></block></then></if>

	<for pos:line="14" pos:column="9">for <control pos:line="14" pos:column="13">(<init><expr><name pos:line="14" pos:column="14">i<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <literal type="number" pos:line="14" pos:column="18">1<pos:position pos:line="14" pos:column="19"/></literal></expr>;<pos:position pos:line="14" pos:column="20"/></init> <condition><expr><name pos:line="14" pos:column="21">i<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">&lt;<pos:position pos:line="14" pos:column="27"/></operator> <name pos:line="14" pos:column="25">argc<pos:position pos:line="14" pos:column="29"/></name></expr>;<pos:position pos:line="14" pos:column="30"/></condition> <incr><expr><name pos:line="14" pos:column="31">i<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">++<pos:position pos:line="14" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="35"/></control> <block pos:line="14" pos:column="36">{
		<decl_stmt><decl><type><specifier pos:line="15" pos:column="17">const<pos:position pos:line="15" pos:column="22"/></specifier> <name pos:line="15" pos:column="23">char<pos:position pos:line="15" pos:column="27"/></name> <modifier pos:line="15" pos:column="28">*<pos:position pos:line="15" pos:column="29"/></modifier></type><name pos:line="15" pos:column="29">arg<pos:position pos:line="15" pos:column="32"/></name> <init pos:line="15" pos:column="33">= <expr><name><name pos:line="15" pos:column="35">argv<pos:position pos:line="15" pos:column="39"/></name><index pos:line="15" pos:column="39">[<expr><name pos:line="15" pos:column="40">i<pos:position pos:line="15" pos:column="41"/></name></expr>]<pos:position pos:line="15" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="15" pos:column="43"/></decl_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><call><name pos:line="16" pos:column="22">strcmp<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">arg<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="34">"-p"<pos:position pos:line="16" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="40"/></condition><then pos:line="16" pos:column="40"> <block pos:line="16" pos:column="41">{
			<decl_stmt><decl><type><name><name pos:line="17" pos:column="25">struct<pos:position pos:line="17" pos:column="31"/></name> <name pos:line="17" pos:column="32">object_id<pos:position pos:line="17" pos:column="41"/></name></name></type> <name pos:line="17" pos:column="42">oid<pos:position pos:line="17" pos:column="45"/></name></decl>;<pos:position pos:line="17" pos:column="46"/></decl_stmt>
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><name pos:line="18" pos:column="29">argc<pos:position pos:line="18" pos:column="33"/></name> <operator pos:line="18" pos:column="34">&lt;=<pos:position pos:line="18" pos:column="39"/></operator> <operator pos:line="18" pos:column="37">++<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="39">i<pos:position pos:line="18" pos:column="40"/></name></expr>)<pos:position pos:line="18" pos:column="41"/></condition><then pos:line="18" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="33">usage<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(<argument><expr><name pos:line="19" pos:column="39">commit_tree_usage<pos:position pos:line="19" pos:column="56"/></name></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt></block></then></if>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><call><name pos:line="20" pos:column="29">get_sha1_commit<pos:position pos:line="20" pos:column="44"/></name><argument_list pos:line="20" pos:column="44">(<argument><expr><name><name pos:line="20" pos:column="45">argv<pos:position pos:line="20" pos:column="49"/></name><index pos:line="20" pos:column="49">[<expr><name pos:line="20" pos:column="50">i<pos:position pos:line="20" pos:column="51"/></name></expr>]<pos:position pos:line="20" pos:column="52"/></index></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="54">oid<pos:position pos:line="20" pos:column="57"/></name><operator pos:line="20" pos:column="57">.<pos:position pos:line="20" pos:column="58"/></operator><name pos:line="20" pos:column="58">hash<pos:position pos:line="20" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="64"/></condition><then pos:line="20" pos:column="64">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="33">die<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><literal type="string" pos:line="21" pos:column="37">"Not a valid object name %s"<pos:position pos:line="21" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="67">argv<pos:position pos:line="21" pos:column="71"/></name><index pos:line="21" pos:column="71">[<expr><name pos:line="21" pos:column="72">i<pos:position pos:line="21" pos:column="73"/></name></expr>]<pos:position pos:line="21" pos:column="74"/></index></name></expr></argument>)<pos:position pos:line="21" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="76"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">assert_sha1_type<pos:position pos:line="22" pos:column="41"/></name><argument_list pos:line="22" pos:column="41">(<argument><expr><name><name pos:line="22" pos:column="42">oid<pos:position pos:line="22" pos:column="45"/></name><operator pos:line="22" pos:column="45">.<pos:position pos:line="22" pos:column="46"/></operator><name pos:line="22" pos:column="46">hash<pos:position pos:line="22" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="52">OBJ_COMMIT<pos:position pos:line="22" pos:column="62"/></name></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">new_parent<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><call><name pos:line="23" pos:column="36">lookup_commit<pos:position pos:line="23" pos:column="49"/></name><argument_list pos:line="23" pos:column="49">(<argument><expr><operator pos:line="23" pos:column="50">&amp;<pos:position pos:line="23" pos:column="55"/></operator><name pos:line="23" pos:column="51">oid<pos:position pos:line="23" pos:column="54"/></name></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="23" pos:column="57">&amp;<pos:position pos:line="23" pos:column="62"/></operator><name pos:line="23" pos:column="58">parents<pos:position pos:line="23" pos:column="65"/></name></expr></argument>)<pos:position pos:line="23" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="67"/></expr_stmt>
			<continue pos:line="24" pos:column="25">continue;<pos:position pos:line="24" pos:column="34"/></continue>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>

		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">skip_prefix<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">(<argument><expr><name pos:line="27" pos:column="33">arg<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="38">"-S"<pos:position pos:line="27" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="27" pos:column="44">&amp;<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="45">sign_commit<pos:position pos:line="27" pos:column="56"/></name></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="58"/></condition><then pos:line="27" pos:column="58">
			<block type="pseudo"><continue pos:line="28" pos:column="25">continue;<pos:position pos:line="28" pos:column="34"/></continue></block></then></if>

		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">!<pos:position pos:line="30" pos:column="22"/></operator><call><name pos:line="30" pos:column="22">strcmp<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><name pos:line="30" pos:column="29">arg<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="34">"--no-gpg-sign"<pos:position pos:line="30" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="51"/></condition><then pos:line="30" pos:column="51"> <block pos:line="30" pos:column="52">{
			<expr_stmt><expr><name pos:line="31" pos:column="25">sign_commit<pos:position pos:line="31" pos:column="36"/></name> <operator pos:line="31" pos:column="37">=<pos:position pos:line="31" pos:column="38"/></operator> <name pos:line="31" pos:column="39">NULL<pos:position pos:line="31" pos:column="43"/></name></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>
			<continue pos:line="32" pos:column="25">continue;<pos:position pos:line="32" pos:column="34"/></continue>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>

		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><operator pos:line="35" pos:column="21">!<pos:position pos:line="35" pos:column="22"/></operator><call><name pos:line="35" pos:column="22">strcmp<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><name pos:line="35" pos:column="29">arg<pos:position pos:line="35" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="34">"-m"<pos:position pos:line="35" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="40"/></condition><then pos:line="35" pos:column="40"> <block pos:line="35" pos:column="41">{
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name pos:line="36" pos:column="29">argc<pos:position pos:line="36" pos:column="33"/></name> <operator pos:line="36" pos:column="34">&lt;=<pos:position pos:line="36" pos:column="39"/></operator> <operator pos:line="36" pos:column="37">++<pos:position pos:line="36" pos:column="39"/></operator><name pos:line="36" pos:column="39">i<pos:position pos:line="36" pos:column="40"/></name></expr>)<pos:position pos:line="36" pos:column="41"/></condition><then pos:line="36" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="33">usage<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name pos:line="37" pos:column="39">commit_tree_usage<pos:position pos:line="37" pos:column="56"/></name></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="58"/></expr_stmt></block></then></if>
			<if pos:line="38" pos:column="25">if <condition pos:line="38" pos:column="28">(<expr><name><name pos:line="38" pos:column="29">buffer<pos:position pos:line="38" pos:column="35"/></name><operator pos:line="38" pos:column="35">.<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="36">len<pos:position pos:line="38" pos:column="39"/></name></name></expr>)<pos:position pos:line="38" pos:column="40"/></condition><then pos:line="38" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="33">strbuf_addch<pos:position pos:line="39" pos:column="45"/></name><argument_list pos:line="39" pos:column="45">(<argument><expr><operator pos:line="39" pos:column="46">&amp;<pos:position pos:line="39" pos:column="51"/></operator><name pos:line="39" pos:column="47">buffer<pos:position pos:line="39" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="39" pos:column="55">'\n'<pos:position pos:line="39" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="61"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">strbuf_addstr<pos:position pos:line="40" pos:column="38"/></name><argument_list pos:line="40" pos:column="38">(<argument><expr><operator pos:line="40" pos:column="39">&amp;<pos:position pos:line="40" pos:column="44"/></operator><name pos:line="40" pos:column="40">buffer<pos:position pos:line="40" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="48">argv<pos:position pos:line="40" pos:column="52"/></name><index pos:line="40" pos:column="52">[<expr><name pos:line="40" pos:column="53">i<pos:position pos:line="40" pos:column="54"/></name></expr>]<pos:position pos:line="40" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">strbuf_complete_line<pos:position pos:line="41" pos:column="45"/></name><argument_list pos:line="41" pos:column="45">(<argument><expr><operator pos:line="41" pos:column="46">&amp;<pos:position pos:line="41" pos:column="51"/></operator><name pos:line="41" pos:column="47">buffer<pos:position pos:line="41" pos:column="53"/></name></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="55"/></expr_stmt>
			<continue pos:line="42" pos:column="25">continue;<pos:position pos:line="42" pos:column="34"/></continue>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>

		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><operator pos:line="45" pos:column="21">!<pos:position pos:line="45" pos:column="22"/></operator><call><name pos:line="45" pos:column="22">strcmp<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><name pos:line="45" pos:column="29">arg<pos:position pos:line="45" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="34">"-F"<pos:position pos:line="45" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="40"/></condition><then pos:line="45" pos:column="40"> <block pos:line="45" pos:column="41">{
			<decl_stmt><decl><type><name pos:line="46" pos:column="25">int<pos:position pos:line="46" pos:column="28"/></name></type> <name pos:line="46" pos:column="29">fd<pos:position pos:line="46" pos:column="31"/></name></decl>;<pos:position pos:line="46" pos:column="32"/></decl_stmt>

			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><name pos:line="48" pos:column="29">argc<pos:position pos:line="48" pos:column="33"/></name> <operator pos:line="48" pos:column="34">&lt;=<pos:position pos:line="48" pos:column="39"/></operator> <operator pos:line="48" pos:column="37">++<pos:position pos:line="48" pos:column="39"/></operator><name pos:line="48" pos:column="39">i<pos:position pos:line="48" pos:column="40"/></name></expr>)<pos:position pos:line="48" pos:column="41"/></condition><then pos:line="48" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="33">usage<pos:position pos:line="49" pos:column="38"/></name><argument_list pos:line="49" pos:column="38">(<argument><expr><name pos:line="49" pos:column="39">commit_tree_usage<pos:position pos:line="49" pos:column="56"/></name></expr></argument>)<pos:position pos:line="49" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="58"/></expr_stmt></block></then></if>
			<if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<expr><name><name pos:line="50" pos:column="29">buffer<pos:position pos:line="50" pos:column="35"/></name><operator pos:line="50" pos:column="35">.<pos:position pos:line="50" pos:column="36"/></operator><name pos:line="50" pos:column="36">len<pos:position pos:line="50" pos:column="39"/></name></name></expr>)<pos:position pos:line="50" pos:column="40"/></condition><then pos:line="50" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="33">strbuf_addch<pos:position pos:line="51" pos:column="45"/></name><argument_list pos:line="51" pos:column="45">(<argument><expr><operator pos:line="51" pos:column="46">&amp;<pos:position pos:line="51" pos:column="51"/></operator><name pos:line="51" pos:column="47">buffer<pos:position pos:line="51" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="51" pos:column="55">'\n'<pos:position pos:line="51" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="61"/></expr_stmt></block></then></if>
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><operator pos:line="52" pos:column="29">!<pos:position pos:line="52" pos:column="30"/></operator><call><name pos:line="52" pos:column="30">strcmp<pos:position pos:line="52" pos:column="36"/></name><argument_list pos:line="52" pos:column="36">(<argument><expr><name><name pos:line="52" pos:column="37">argv<pos:position pos:line="52" pos:column="41"/></name><index pos:line="52" pos:column="41">[<expr><name pos:line="52" pos:column="42">i<pos:position pos:line="52" pos:column="43"/></name></expr>]<pos:position pos:line="52" pos:column="44"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="46">"-"<pos:position pos:line="52" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="51"/></condition><then pos:line="52" pos:column="51">
				<block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="33">fd<pos:position pos:line="53" pos:column="35"/></name> <operator pos:line="53" pos:column="36">=<pos:position pos:line="53" pos:column="37"/></operator> <literal type="number" pos:line="53" pos:column="38">0<pos:position pos:line="53" pos:column="39"/></literal></expr>;<pos:position pos:line="53" pos:column="40"/></expr_stmt></block></then>
			<else pos:line="54" pos:column="25">else <block pos:line="54" pos:column="30">{
				<expr_stmt><expr><name pos:line="55" pos:column="33">fd<pos:position pos:line="55" pos:column="35"/></name> <operator pos:line="55" pos:column="36">=<pos:position pos:line="55" pos:column="37"/></operator> <call><name pos:line="55" pos:column="38">open<pos:position pos:line="55" pos:column="42"/></name><argument_list pos:line="55" pos:column="42">(<argument><expr><name><name pos:line="55" pos:column="43">argv<pos:position pos:line="55" pos:column="47"/></name><index pos:line="55" pos:column="47">[<expr><name pos:line="55" pos:column="48">i<pos:position pos:line="55" pos:column="49"/></name></expr>]<pos:position pos:line="55" pos:column="50"/></index></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="52">O_RDONLY<pos:position pos:line="55" pos:column="60"/></name></expr></argument>)<pos:position pos:line="55" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="62"/></expr_stmt>
				<if pos:line="56" pos:column="33">if <condition pos:line="56" pos:column="36">(<expr><name pos:line="56" pos:column="37">fd<pos:position pos:line="56" pos:column="39"/></name> <operator pos:line="56" pos:column="40">&lt;<pos:position pos:line="56" pos:column="44"/></operator> <literal type="number" pos:line="56" pos:column="42">0<pos:position pos:line="56" pos:column="43"/></literal></expr>)<pos:position pos:line="56" pos:column="44"/></condition><then pos:line="56" pos:column="44">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="41">die_errno<pos:position pos:line="57" pos:column="50"/></name><argument_list pos:line="57" pos:column="50">(<argument><expr><literal type="string" pos:line="57" pos:column="51">"git commit-tree: failed to open '%s'"<pos:position pos:line="57" pos:column="89"/></literal></expr></argument>,
						  <argument><expr><name><name pos:line="58" pos:column="51">argv<pos:position pos:line="58" pos:column="55"/></name><index pos:line="58" pos:column="55">[<expr><name pos:line="58" pos:column="56">i<pos:position pos:line="58" pos:column="57"/></name></expr>]<pos:position pos:line="58" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="58" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="60"/></expr_stmt></block></then></if>
			}<pos:position pos:line="59" pos:column="26"/></block></else></if>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><call><name pos:line="60" pos:column="29">strbuf_read<pos:position pos:line="60" pos:column="40"/></name><argument_list pos:line="60" pos:column="40">(<argument><expr><operator pos:line="60" pos:column="41">&amp;<pos:position pos:line="60" pos:column="46"/></operator><name pos:line="60" pos:column="42">buffer<pos:position pos:line="60" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="50">fd<pos:position pos:line="60" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="54">0<pos:position pos:line="60" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="56"/></argument_list></call> <operator pos:line="60" pos:column="57">&lt;<pos:position pos:line="60" pos:column="61"/></operator> <literal type="number" pos:line="60" pos:column="59">0<pos:position pos:line="60" pos:column="60"/></literal></expr>)<pos:position pos:line="60" pos:column="61"/></condition><then pos:line="60" pos:column="61">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="33">die_errno<pos:position pos:line="61" pos:column="42"/></name><argument_list pos:line="61" pos:column="42">(<argument><expr><literal type="string" pos:line="61" pos:column="43">"git commit-tree: failed to read '%s'"<pos:position pos:line="61" pos:column="81"/></literal></expr></argument>,
					  <argument><expr><name><name pos:line="62" pos:column="43">argv<pos:position pos:line="62" pos:column="47"/></name><index pos:line="62" pos:column="47">[<expr><name pos:line="62" pos:column="48">i<pos:position pos:line="62" pos:column="49"/></name></expr>]<pos:position pos:line="62" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="62" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="52"/></expr_stmt></block></then></if>
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><name pos:line="63" pos:column="29">fd<pos:position pos:line="63" pos:column="31"/></name> <operator pos:line="63" pos:column="32">&amp;&amp;<pos:position pos:line="63" pos:column="42"/></operator> <call><name pos:line="63" pos:column="35">close<pos:position pos:line="63" pos:column="40"/></name><argument_list pos:line="63" pos:column="40">(<argument><expr><name pos:line="63" pos:column="41">fd<pos:position pos:line="63" pos:column="43"/></name></expr></argument>)<pos:position pos:line="63" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="45"/></condition><then pos:line="63" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="33">die_errno<pos:position pos:line="64" pos:column="42"/></name><argument_list pos:line="64" pos:column="42">(<argument><expr><literal type="string" pos:line="64" pos:column="43">"git commit-tree: failed to close '%s'"<pos:position pos:line="64" pos:column="82"/></literal></expr></argument>,
					  <argument><expr><name><name pos:line="65" pos:column="43">argv<pos:position pos:line="65" pos:column="47"/></name><index pos:line="65" pos:column="47">[<expr><name pos:line="65" pos:column="48">i<pos:position pos:line="65" pos:column="49"/></name></expr>]<pos:position pos:line="65" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="65" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="52"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">strbuf_complete_line<pos:position pos:line="66" pos:column="45"/></name><argument_list pos:line="66" pos:column="45">(<argument><expr><operator pos:line="66" pos:column="46">&amp;<pos:position pos:line="66" pos:column="51"/></operator><name pos:line="66" pos:column="47">buffer<pos:position pos:line="66" pos:column="53"/></name></expr></argument>)<pos:position pos:line="66" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="55"/></expr_stmt>
			<continue pos:line="67" pos:column="25">continue;<pos:position pos:line="67" pos:column="34"/></continue>
		}<pos:position pos:line="68" pos:column="18"/></block></then></if>

		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><call><name pos:line="70" pos:column="21">get_sha1_tree<pos:position pos:line="70" pos:column="34"/></name><argument_list pos:line="70" pos:column="34">(<argument><expr><name pos:line="70" pos:column="35">arg<pos:position pos:line="70" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="40">tree_oid<pos:position pos:line="70" pos:column="48"/></name><operator pos:line="70" pos:column="48">.<pos:position pos:line="70" pos:column="49"/></operator><name pos:line="70" pos:column="49">hash<pos:position pos:line="70" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="55"/></condition><then pos:line="70" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="25">die<pos:position pos:line="71" pos:column="28"/></name><argument_list pos:line="71" pos:column="28">(<argument><expr><literal type="string" pos:line="71" pos:column="29">"Not a valid object name %s"<pos:position pos:line="71" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="59">arg<pos:position pos:line="71" pos:column="62"/></name></expr></argument>)<pos:position pos:line="71" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="64"/></expr_stmt></block></then></if>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><name pos:line="72" pos:column="21">got_tree<pos:position pos:line="72" pos:column="29"/></name></expr>)<pos:position pos:line="72" pos:column="30"/></condition><then pos:line="72" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="25">die<pos:position pos:line="73" pos:column="28"/></name><argument_list pos:line="73" pos:column="28">(<argument><expr><literal type="string" pos:line="73" pos:column="29">"Cannot give more than one trees"<pos:position pos:line="73" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="64"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="74" pos:column="17">got_tree<pos:position pos:line="74" pos:column="25"/></name> <operator pos:line="74" pos:column="26">=<pos:position pos:line="74" pos:column="27"/></operator> <literal type="number" pos:line="74" pos:column="28">1<pos:position pos:line="74" pos:column="29"/></literal></expr>;<pos:position pos:line="74" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="75" pos:column="10"/></block></for>

	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><operator pos:line="77" pos:column="13">!<pos:position pos:line="77" pos:column="14"/></operator><name><name pos:line="77" pos:column="14">buffer<pos:position pos:line="77" pos:column="20"/></name><operator pos:line="77" pos:column="20">.<pos:position pos:line="77" pos:column="21"/></operator><name pos:line="77" pos:column="21">len<pos:position pos:line="77" pos:column="24"/></name></name></expr>)<pos:position pos:line="77" pos:column="25"/></condition><then pos:line="77" pos:column="25"> <block pos:line="77" pos:column="26">{
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><call><name pos:line="78" pos:column="21">strbuf_read<pos:position pos:line="78" pos:column="32"/></name><argument_list pos:line="78" pos:column="32">(<argument><expr><operator pos:line="78" pos:column="33">&amp;<pos:position pos:line="78" pos:column="38"/></operator><name pos:line="78" pos:column="34">buffer<pos:position pos:line="78" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="78" pos:column="42">0<pos:position pos:line="78" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="78" pos:column="45">0<pos:position pos:line="78" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="47"/></argument_list></call> <operator pos:line="78" pos:column="48">&lt;<pos:position pos:line="78" pos:column="52"/></operator> <literal type="number" pos:line="78" pos:column="50">0<pos:position pos:line="78" pos:column="51"/></literal></expr>)<pos:position pos:line="78" pos:column="52"/></condition><then pos:line="78" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="25">die_errno<pos:position pos:line="79" pos:column="34"/></name><argument_list pos:line="79" pos:column="34">(<argument><expr><literal type="string" pos:line="79" pos:column="35">"git commit-tree: failed to read"<pos:position pos:line="79" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="70"/></expr_stmt></block></then></if>
	}<pos:position pos:line="80" pos:column="10"/></block></then></if>

	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><call><name pos:line="82" pos:column="13">commit_tree<pos:position pos:line="82" pos:column="24"/></name><argument_list pos:line="82" pos:column="24">(<argument><expr><name><name pos:line="82" pos:column="25">buffer<pos:position pos:line="82" pos:column="31"/></name><operator pos:line="82" pos:column="31">.<pos:position pos:line="82" pos:column="32"/></operator><name pos:line="82" pos:column="32">buf<pos:position pos:line="82" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="37">buffer<pos:position pos:line="82" pos:column="43"/></name><operator pos:line="82" pos:column="43">.<pos:position pos:line="82" pos:column="44"/></operator><name pos:line="82" pos:column="44">len<pos:position pos:line="82" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="49">tree_oid<pos:position pos:line="82" pos:column="57"/></name><operator pos:line="82" pos:column="57">.<pos:position pos:line="82" pos:column="58"/></operator><name pos:line="82" pos:column="58">hash<pos:position pos:line="82" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="64">parents<pos:position pos:line="82" pos:column="71"/></name></expr></argument>,
			<argument><expr><name><name pos:line="83" pos:column="25">commit_oid<pos:position pos:line="83" pos:column="35"/></name><operator pos:line="83" pos:column="35">.<pos:position pos:line="83" pos:column="36"/></operator><name pos:line="83" pos:column="36">hash<pos:position pos:line="83" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="42">NULL<pos:position pos:line="83" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="48">sign_commit<pos:position pos:line="83" pos:column="59"/></name></expr></argument>)<pos:position pos:line="83" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="61"/></condition><then pos:line="83" pos:column="61"> <block pos:line="83" pos:column="62">{
		<expr_stmt><expr><call><name pos:line="84" pos:column="17">strbuf_release<pos:position pos:line="84" pos:column="31"/></name><argument_list pos:line="84" pos:column="31">(<argument><expr><operator pos:line="84" pos:column="32">&amp;<pos:position pos:line="84" pos:column="37"/></operator><name pos:line="84" pos:column="33">buffer<pos:position pos:line="84" pos:column="39"/></name></expr></argument>)<pos:position pos:line="84" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="41"/></expr_stmt>
		<return pos:line="85" pos:column="17">return <expr><literal type="number" pos:line="85" pos:column="24">1<pos:position pos:line="85" pos:column="25"/></literal></expr>;<pos:position pos:line="85" pos:column="26"/></return>
	}<pos:position pos:line="86" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="88" pos:column="9">printf<pos:position pos:line="88" pos:column="15"/></name><argument_list pos:line="88" pos:column="15">(<argument><expr><literal type="string" pos:line="88" pos:column="16">"%s\n"<pos:position pos:line="88" pos:column="22"/></literal></expr></argument>, <argument><expr><call><name pos:line="88" pos:column="24">oid_to_hex<pos:position pos:line="88" pos:column="34"/></name><argument_list pos:line="88" pos:column="34">(<argument><expr><operator pos:line="88" pos:column="35">&amp;<pos:position pos:line="88" pos:column="40"/></operator><name pos:line="88" pos:column="36">commit_oid<pos:position pos:line="88" pos:column="46"/></name></expr></argument>)<pos:position pos:line="88" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="88" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="89" pos:column="9">strbuf_release<pos:position pos:line="89" pos:column="23"/></name><argument_list pos:line="89" pos:column="23">(<argument><expr><operator pos:line="89" pos:column="24">&amp;<pos:position pos:line="89" pos:column="29"/></operator><name pos:line="89" pos:column="25">buffer<pos:position pos:line="89" pos:column="31"/></name></expr></argument>)<pos:position pos:line="89" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="33"/></expr_stmt>
	<return pos:line="90" pos:column="9">return <expr><literal type="number" pos:line="90" pos:column="16">0<pos:position pos:line="90" pos:column="17"/></literal></expr>;<pos:position pos:line="90" pos:column="18"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
