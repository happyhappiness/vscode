<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_468_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">packet_trace<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">buf<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">unsigned<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">len<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">write<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">out<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">trace_want<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">trace_key<pos:position pos:line="6" pos:column="34"/></name></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="36"/></condition><then pos:line="6" pos:column="36">
		<block type="pseudo"><return pos:line="7" pos:column="17">return;<pos:position pos:line="7" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="9" pos:column="9">/* +32 is just a guess for header + quoting */</comment>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">strbuf_init<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><operator pos:line="10" pos:column="21">&amp;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="22">out<pos:position pos:line="10" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="27">len<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">+<pos:position pos:line="10" pos:column="31"/></operator><literal type="number" pos:line="10" pos:column="31">32<pos:position pos:line="10" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">strbuf_addf<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><operator pos:line="12" pos:column="21">&amp;<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="22">out<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="27">"packet: %12s%c "<pos:position pos:line="12" pos:column="44"/></literal></expr></argument>,
		    <argument><expr><name pos:line="13" pos:column="21">packet_trace_prefix<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="13" pos:column="42">write<pos:position pos:line="13" pos:column="47"/></name></expr> ?<pos:position pos:line="13" pos:column="49"/></condition><then pos:line="13" pos:column="49"> <expr><literal type="char" pos:line="13" pos:column="50">'&gt;'<pos:position pos:line="13" pos:column="56"/></literal></expr> <pos:position pos:line="13" pos:column="54"/></then><else pos:line="13" pos:column="54">: <expr><literal type="char" pos:line="13" pos:column="56">'&lt;'<pos:position pos:line="13" pos:column="62"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">(<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">len<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">&gt;=<pos:position pos:line="15" pos:column="23"/></operator> <literal type="number" pos:line="15" pos:column="21">4<pos:position pos:line="15" pos:column="22"/></literal> <operator pos:line="15" pos:column="23">&amp;&amp;<pos:position pos:line="15" pos:column="33"/></operator> <call><name pos:line="15" pos:column="26">starts_with<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">buf<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="43">"PACK"<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call><operator pos:line="15" pos:column="50">)<pos:position pos:line="15" pos:column="51"/></operator> <operator pos:line="15" pos:column="52">||<pos:position pos:line="15" pos:column="54"/></operator>
	    <operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">len<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">&gt;=<pos:position pos:line="16" pos:column="23"/></operator> <literal type="number" pos:line="16" pos:column="21">5<pos:position pos:line="16" pos:column="22"/></literal> <operator pos:line="16" pos:column="23">&amp;&amp;<pos:position pos:line="16" pos:column="33"/></operator> <call><name pos:line="16" pos:column="26">starts_with<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">buf<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">+<pos:position pos:line="16" pos:column="42"/></operator><literal type="number" pos:line="16" pos:column="42">1<pos:position pos:line="16" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="45">"PACK"<pos:position pos:line="16" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call><operator pos:line="16" pos:column="52">)<pos:position pos:line="16" pos:column="53"/></operator></expr>)<pos:position pos:line="16" pos:column="54"/></condition><then pos:line="16" pos:column="54"> <block pos:line="16" pos:column="55">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">strbuf_addstr<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><operator pos:line="17" pos:column="31">&amp;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="32">out<pos:position pos:line="17" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="37">"PACK ..."<pos:position pos:line="17" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">unsetenv<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><name pos:line="18" pos:column="26">trace_key<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then>
	<else pos:line="20" pos:column="9">else <block pos:line="20" pos:column="14">{
		<comment type="block" pos:line="21" pos:column="17">/* XXX we should really handle printable utf8 */</comment>
		<for pos:line="22" pos:column="17">for <control pos:line="22" pos:column="21">(<init><expr><name pos:line="22" pos:column="22">i<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <literal type="number" pos:line="22" pos:column="26">0<pos:position pos:line="22" pos:column="27"/></literal></expr>;<pos:position pos:line="22" pos:column="28"/></init> <condition><expr><name pos:line="22" pos:column="29">i<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">&lt;<pos:position pos:line="22" pos:column="35"/></operator> <name pos:line="22" pos:column="33">len<pos:position pos:line="22" pos:column="36"/></name></expr>;<pos:position pos:line="22" pos:column="37"/></condition> <incr><expr><name pos:line="22" pos:column="38">i<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">++<pos:position pos:line="22" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="22" pos:column="42"/></control> <block pos:line="22" pos:column="43">{
			<comment type="block" pos:line="23" pos:column="25">/* suppress newlines */</comment>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name><name pos:line="24" pos:column="29">buf<pos:position pos:line="24" pos:column="32"/></name><index pos:line="24" pos:column="32">[<expr><name pos:line="24" pos:column="33">i<pos:position pos:line="24" pos:column="34"/></name></expr>]<pos:position pos:line="24" pos:column="35"/></index></name> <operator pos:line="24" pos:column="36">==<pos:position pos:line="24" pos:column="38"/></operator> <literal type="char" pos:line="24" pos:column="39">'\n'<pos:position pos:line="24" pos:column="43"/></literal></expr>)<pos:position pos:line="24" pos:column="44"/></condition><then pos:line="24" pos:column="44">
				<block type="pseudo"><continue pos:line="25" pos:column="33">continue;<pos:position pos:line="25" pos:column="42"/></continue></block></then></if>
			<if pos:line="26" pos:column="25">if <condition pos:line="26" pos:column="28">(<expr><name><name pos:line="26" pos:column="29">buf<pos:position pos:line="26" pos:column="32"/></name><index pos:line="26" pos:column="32">[<expr><name pos:line="26" pos:column="33">i<pos:position pos:line="26" pos:column="34"/></name></expr>]<pos:position pos:line="26" pos:column="35"/></index></name> <operator pos:line="26" pos:column="36">&gt;=<pos:position pos:line="26" pos:column="41"/></operator> <literal type="number" pos:line="26" pos:column="39">0x20<pos:position pos:line="26" pos:column="43"/></literal> <operator pos:line="26" pos:column="44">&amp;&amp;<pos:position pos:line="26" pos:column="54"/></operator> <name><name pos:line="26" pos:column="47">buf<pos:position pos:line="26" pos:column="50"/></name><index pos:line="26" pos:column="50">[<expr><name pos:line="26" pos:column="51">i<pos:position pos:line="26" pos:column="52"/></name></expr>]<pos:position pos:line="26" pos:column="53"/></index></name> <operator pos:line="26" pos:column="54">&lt;=<pos:position pos:line="26" pos:column="59"/></operator> <literal type="number" pos:line="26" pos:column="57">0x7e<pos:position pos:line="26" pos:column="61"/></literal></expr>)<pos:position pos:line="26" pos:column="62"/></condition><then pos:line="26" pos:column="62">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="33">strbuf_addch<pos:position pos:line="27" pos:column="45"/></name><argument_list pos:line="27" pos:column="45">(<argument><expr><operator pos:line="27" pos:column="46">&amp;<pos:position pos:line="27" pos:column="51"/></operator><name pos:line="27" pos:column="47">out<pos:position pos:line="27" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="52">buf<pos:position pos:line="27" pos:column="55"/></name><index pos:line="27" pos:column="55">[<expr><name pos:line="27" pos:column="56">i<pos:position pos:line="27" pos:column="57"/></name></expr>]<pos:position pos:line="27" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="60"/></expr_stmt></block></then>
			<else pos:line="28" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="33">strbuf_addf<pos:position pos:line="29" pos:column="44"/></name><argument_list pos:line="29" pos:column="44">(<argument><expr><operator pos:line="29" pos:column="45">&amp;<pos:position pos:line="29" pos:column="50"/></operator><name pos:line="29" pos:column="46">out<pos:position pos:line="29" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="51">"\\%o"<pos:position pos:line="29" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="59">buf<pos:position pos:line="29" pos:column="62"/></name><index pos:line="29" pos:column="62">[<expr><name pos:line="29" pos:column="63">i<pos:position pos:line="29" pos:column="64"/></name></expr>]<pos:position pos:line="29" pos:column="65"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="67"/></expr_stmt></block></else></if>
		}<pos:position pos:line="30" pos:column="18"/></block></for>
	}<pos:position pos:line="31" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">strbuf_addch<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><operator pos:line="33" pos:column="22">&amp;<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="23">out<pos:position pos:line="33" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="33" pos:column="28">'\n'<pos:position pos:line="33" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">trace_strbuf<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">(<argument><expr><name pos:line="34" pos:column="22">trace_key<pos:position pos:line="34" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="33">&amp;<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="34">out<pos:position pos:line="34" pos:column="37"/></name></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">strbuf_release<pos:position pos:line="35" pos:column="23"/></name><argument_list pos:line="35" pos:column="23">(<argument><expr><operator pos:line="35" pos:column="24">&amp;<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="25">out<pos:position pos:line="35" pos:column="28"/></name></expr></argument>)<pos:position pos:line="35" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
