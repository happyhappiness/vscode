<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1713.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">suggest_conflicts<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">renormalizing<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">filename<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">FILE<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">fp<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">pos<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">filename<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <call><name pos:line="7" pos:column="20">git_path<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><literal type="string" pos:line="7" pos:column="29">"MERGE_MSG"<pos:position pos:line="7" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">fp<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">fopen<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">filename<pos:position pos:line="8" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="30">"a"<pos:position pos:line="8" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">fp<pos:position pos:line="9" pos:column="16"/></name></expr>)<pos:position pos:line="9" pos:column="17"/></condition><then pos:line="9" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">die_errno<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><call><name pos:line="10" pos:column="27">_<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><literal type="string" pos:line="10" pos:column="29">"Could not open '%s' for writing"<pos:position pos:line="10" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="10" pos:column="65">filename<pos:position pos:line="10" pos:column="73"/></name></expr></argument>)<pos:position pos:line="10" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="75"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">fprintf<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">fp<pos:position pos:line="11" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="21">"\nConflicts:\n"<pos:position pos:line="11" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt>
	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init><expr><name pos:line="12" pos:column="14">pos<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <literal type="number" pos:line="12" pos:column="20">0<pos:position pos:line="12" pos:column="21"/></literal></expr>;<pos:position pos:line="12" pos:column="22"/></init> <condition><expr><name pos:line="12" pos:column="23">pos<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">&lt;<pos:position pos:line="12" pos:column="31"/></operator> <name pos:line="12" pos:column="29">active_nr<pos:position pos:line="12" pos:column="38"/></name></expr>;<pos:position pos:line="12" pos:column="39"/></condition> <incr><expr><name pos:line="12" pos:column="40">pos<pos:position pos:line="12" pos:column="43"/></name><operator pos:line="12" pos:column="43">++<pos:position pos:line="12" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="46"/></control> <block pos:line="12" pos:column="47">{
		<decl_stmt><decl><type><specifier pos:line="13" pos:column="17">const<pos:position pos:line="13" pos:column="22"/></specifier> <name><name pos:line="13" pos:column="23">struct<pos:position pos:line="13" pos:column="29"/></name> <name pos:line="13" pos:column="30">cache_entry<pos:position pos:line="13" pos:column="41"/></name></name> <modifier pos:line="13" pos:column="42">*<pos:position pos:line="13" pos:column="43"/></modifier></type><name pos:line="13" pos:column="43">ce<pos:position pos:line="13" pos:column="45"/></name> <init pos:line="13" pos:column="46">= <expr><name><name pos:line="13" pos:column="48">active_cache<pos:position pos:line="13" pos:column="60"/></name><index pos:line="13" pos:column="60">[<expr><name pos:line="13" pos:column="61">pos<pos:position pos:line="13" pos:column="64"/></name></expr>]<pos:position pos:line="13" pos:column="65"/></index></name></expr></init></decl>;<pos:position pos:line="13" pos:column="66"/></decl_stmt>

		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">ce_stage<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">ce<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34"> <block pos:line="15" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">fprintf<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">fp<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="37">"\t%s\n"<pos:position pos:line="16" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="47">ce<pos:position pos:line="16" pos:column="49"/></name><operator pos:line="16" pos:column="49">-&gt;<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="51">name<pos:position pos:line="16" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt>
			<while pos:line="17" pos:column="25">while <condition pos:line="17" pos:column="31">(<expr><name pos:line="17" pos:column="32">pos<pos:position pos:line="17" pos:column="35"/></name> <operator pos:line="17" pos:column="36">+<pos:position pos:line="17" pos:column="37"/></operator> <literal type="number" pos:line="17" pos:column="38">1<pos:position pos:line="17" pos:column="39"/></literal> <operator pos:line="17" pos:column="40">&lt;<pos:position pos:line="17" pos:column="44"/></operator> <name pos:line="17" pos:column="42">active_nr<pos:position pos:line="17" pos:column="51"/></name> <operator pos:line="17" pos:column="52">&amp;&amp;<pos:position pos:line="17" pos:column="62"/></operator>
					<operator pos:line="18" pos:column="41">!<pos:position pos:line="18" pos:column="42"/></operator><call><name pos:line="18" pos:column="42">strcmp<pos:position pos:line="18" pos:column="48"/></name><argument_list pos:line="18" pos:column="48">(<argument><expr><name><name pos:line="18" pos:column="49">ce<pos:position pos:line="18" pos:column="51"/></name><operator pos:line="18" pos:column="51">-&gt;<pos:position pos:line="18" pos:column="56"/></operator><name pos:line="18" pos:column="53">name<pos:position pos:line="18" pos:column="57"/></name></name></expr></argument>,
						<argument><expr><name><name pos:line="19" pos:column="49">active_cache<pos:position pos:line="19" pos:column="61"/></name><index pos:line="19" pos:column="61">[<expr><name pos:line="19" pos:column="62">pos<pos:position pos:line="19" pos:column="65"/></name> <operator pos:line="19" pos:column="66">+<pos:position pos:line="19" pos:column="67"/></operator> <literal type="number" pos:line="19" pos:column="68">1<pos:position pos:line="19" pos:column="69"/></literal></expr>]<pos:position pos:line="19" pos:column="70"/></index></name><operator pos:line="19" pos:column="70">-&gt;<pos:position pos:line="19" pos:column="75"/></operator><name pos:line="19" pos:column="72">name<pos:position pos:line="19" pos:column="76"/></name></expr></argument>)<pos:position pos:line="19" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="78"/></condition>
				<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="33">pos<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">++<pos:position pos:line="20" pos:column="38"/></operator></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt></block></while>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>
	}<pos:position pos:line="22" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">fclose<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name pos:line="23" pos:column="16">fp<pos:position pos:line="23" pos:column="18"/></name></expr></argument>)<pos:position pos:line="23" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">rerere<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">allow_rerere_auto<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">printf<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><call><name pos:line="25" pos:column="16">_<pos:position pos:line="25" pos:column="17"/></name><argument_list pos:line="25" pos:column="17">(<argument><expr><literal type="string" pos:line="25" pos:column="18">"Automatic merge failed; "<pos:position pos:line="25" pos:column="44"/></literal>
			<literal type="string" pos:line="26" pos:column="25">"fix conflicts and then commit the result.\n"<pos:position pos:line="26" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="73"/></expr_stmt>
	<return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">1<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
