<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2572.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">reflog_expire<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">refname<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">unsigned<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">sha1<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
		 <parameter><decl><type><name pos:line="2" pos:column="18">unsigned<pos:position pos:line="2" pos:column="26"/></name> <name pos:line="2" pos:column="27">int<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">flags<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>,
		 <parameter><decl><type><name pos:line="3" pos:column="18">reflog_expiry_prepare_fn<pos:position pos:line="3" pos:column="42"/></name></type> <name pos:line="3" pos:column="43">prepare_fn<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>,
		 <parameter><decl><type><name pos:line="4" pos:column="18">reflog_expiry_should_prune_fn<pos:position pos:line="4" pos:column="47"/></name></type> <name pos:line="4" pos:column="48">should_prune_fn<pos:position pos:line="4" pos:column="63"/></name></decl></parameter>,
		 <parameter><decl><type><name pos:line="5" pos:column="18">reflog_expiry_cleanup_fn<pos:position pos:line="5" pos:column="42"/></name></type> <name pos:line="5" pos:column="43">cleanup_fn<pos:position pos:line="5" pos:column="53"/></name></decl></parameter>,
		 <parameter><decl><type><name pos:line="6" pos:column="18">void<pos:position pos:line="6" pos:column="22"/></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">policy_cb_data<pos:position pos:line="6" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="39"/></parameter_list>
<block pos:line="7" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="8" pos:column="9">static<pos:position pos:line="8" pos:column="15"/></specifier> <type><name><name pos:line="8" pos:column="16">struct<pos:position pos:line="8" pos:column="22"/></name> <name pos:line="8" pos:column="23">lock_file<pos:position pos:line="8" pos:column="32"/></name></name></type> <name pos:line="8" pos:column="33">reflog_lock<pos:position pos:line="8" pos:column="44"/></name></decl>;<pos:position pos:line="8" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">expire_reflog_cb<pos:position pos:line="9" pos:column="32"/></name></name></type> <name pos:line="9" pos:column="33">cb<pos:position pos:line="9" pos:column="35"/></name></decl>;<pos:position pos:line="9" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">ref_lock<pos:position pos:line="10" pos:column="24"/></name></name> <modifier pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></modifier></type><name pos:line="10" pos:column="26">lock<pos:position pos:line="10" pos:column="30"/></name></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">log_file<pos:position pos:line="11" pos:column="23"/></name></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">status<pos:position pos:line="12" pos:column="19"/></name> <init pos:line="12" pos:column="20">= <expr><literal type="number" pos:line="12" pos:column="22">0<pos:position pos:line="12" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">type<pos:position pos:line="13" pos:column="17"/></name></decl>;<pos:position pos:line="13" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="14" pos:column="9">struct<pos:position pos:line="14" pos:column="15"/></name> <name pos:line="14" pos:column="16">strbuf<pos:position pos:line="14" pos:column="22"/></name></name></type> <name pos:line="14" pos:column="23">err<pos:position pos:line="14" pos:column="26"/></name> <init pos:line="14" pos:column="27">= <expr><name pos:line="14" pos:column="29">STRBUF_INIT<pos:position pos:line="14" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="41"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">memset<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><operator pos:line="16" pos:column="16">&amp;<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="17">cb<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="21">0<pos:position pos:line="16" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="24">sizeof<argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">cb<pos:position pos:line="16" pos:column="33"/></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">cb<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">.<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="12">flags<pos:position pos:line="17" pos:column="17"/></name></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="20">flags<pos:position pos:line="17" pos:column="25"/></name></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">cb<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">.<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">policy_cb<pos:position pos:line="18" pos:column="21"/></name></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">policy_cb_data<pos:position pos:line="18" pos:column="38"/></name></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">cb<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">.<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">should_prune_fn<pos:position pos:line="19" pos:column="27"/></name></name> <operator pos:line="19" pos:column="28">=<pos:position pos:line="19" pos:column="29"/></operator> <name pos:line="19" pos:column="30">should_prune_fn<pos:position pos:line="19" pos:column="45"/></name></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt>

	<comment type="block" pos:line="21" pos:column="9">/*
	 * The reflog file is locked by holding the lock on the
	 * reference itself, plus we might need to update the
	 * reference if --updateref was specified:
	 */</comment>
	<expr_stmt><expr><name pos:line="26" pos:column="9">lock<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <call><name pos:line="26" pos:column="16">lock_ref_sha1_basic<pos:position pos:line="26" pos:column="35"/></name><argument_list pos:line="26" pos:column="35">(<argument><expr><name pos:line="26" pos:column="36">refname<pos:position pos:line="26" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="45">sha1<pos:position pos:line="26" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="51">NULL<pos:position pos:line="26" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="57">NULL<pos:position pos:line="26" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="63">0<pos:position pos:line="26" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="26" pos:column="66">&amp;<pos:position pos:line="26" pos:column="71"/></operator><name pos:line="26" pos:column="67">type<pos:position pos:line="26" pos:column="71"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="73">&amp;<pos:position pos:line="26" pos:column="78"/></operator><name pos:line="26" pos:column="74">err<pos:position pos:line="26" pos:column="77"/></name></expr></argument>)<pos:position pos:line="26" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="79"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">lock<pos:position pos:line="27" pos:column="18"/></name></expr>)<pos:position pos:line="27" pos:column="19"/></condition><then pos:line="27" pos:column="19"> <block pos:line="27" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">error<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><literal type="string" pos:line="28" pos:column="23">"cannot lock ref '%s': %s"<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="51">refname<pos:position pos:line="28" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="60">err<pos:position pos:line="28" pos:column="63"/></name><operator pos:line="28" pos:column="63">.<pos:position pos:line="28" pos:column="64"/></operator><name pos:line="28" pos:column="64">buf<pos:position pos:line="28" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">strbuf_release<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><operator pos:line="29" pos:column="32">&amp;<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="33">err<pos:position pos:line="29" pos:column="36"/></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
		<return pos:line="30" pos:column="17">return <expr><operator pos:line="30" pos:column="24">-<pos:position pos:line="30" pos:column="25"/></operator><literal type="number" pos:line="30" pos:column="25">1<pos:position pos:line="30" pos:column="26"/></literal></expr>;<pos:position pos:line="30" pos:column="27"/></return>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><call><name pos:line="32" pos:column="14">reflog_exists<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">(<argument><expr><name pos:line="32" pos:column="28">refname<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="37"/></condition><then pos:line="32" pos:column="37"> <block pos:line="32" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">unlock_ref<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name pos:line="33" pos:column="28">lock<pos:position pos:line="33" pos:column="32"/></name></expr></argument>)<pos:position pos:line="33" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="34"/></expr_stmt>
		<return pos:line="34" pos:column="17">return <expr><literal type="number" pos:line="34" pos:column="24">0<pos:position pos:line="34" pos:column="25"/></literal></expr>;<pos:position pos:line="34" pos:column="26"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="37" pos:column="9">log_file<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <call><name pos:line="37" pos:column="20">git_pathdup<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><literal type="string" pos:line="37" pos:column="32">"logs/%s"<pos:position pos:line="37" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="43">refname<pos:position pos:line="37" pos:column="50"/></name></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="52"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><operator pos:line="38" pos:column="14">(<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="15">flags<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">&amp;<pos:position pos:line="38" pos:column="26"/></operator> <name pos:line="38" pos:column="23">EXPIRE_REFLOGS_DRY_RUN<pos:position pos:line="38" pos:column="45"/></name><operator pos:line="38" pos:column="45">)<pos:position pos:line="38" pos:column="46"/></operator></expr>)<pos:position pos:line="38" pos:column="47"/></condition><then pos:line="38" pos:column="47"> <block pos:line="38" pos:column="48">{
		<comment type="block" pos:line="39" pos:column="17">/*
		 * Even though holding $GIT_DIR/logs/$reflog.lock has
		 * no locking implications, we use the lock_file
		 * machinery here anyway because it does a lot of the
		 * work we need, including cleaning up if the program
		 * exits unexpectedly.
		 */</comment>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><call><name pos:line="46" pos:column="21">hold_lock_file_for_update<pos:position pos:line="46" pos:column="46"/></name><argument_list pos:line="46" pos:column="46">(<argument><expr><operator pos:line="46" pos:column="47">&amp;<pos:position pos:line="46" pos:column="52"/></operator><name pos:line="46" pos:column="48">reflog_lock<pos:position pos:line="46" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="61">log_file<pos:position pos:line="46" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="71">0<pos:position pos:line="46" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="73"/></argument_list></call> <operator pos:line="46" pos:column="74">&lt;<pos:position pos:line="46" pos:column="78"/></operator> <literal type="number" pos:line="46" pos:column="76">0<pos:position pos:line="46" pos:column="77"/></literal></expr>)<pos:position pos:line="46" pos:column="78"/></condition><then pos:line="46" pos:column="78"> <block pos:line="46" pos:column="79">{
			<decl_stmt><decl><type><name><name pos:line="47" pos:column="25">struct<pos:position pos:line="47" pos:column="31"/></name> <name pos:line="47" pos:column="32">strbuf<pos:position pos:line="47" pos:column="38"/></name></name></type> <name pos:line="47" pos:column="39">err<pos:position pos:line="47" pos:column="42"/></name> <init pos:line="47" pos:column="43">= <expr><name pos:line="47" pos:column="45">STRBUF_INIT<pos:position pos:line="47" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="47" pos:column="57"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">unable_to_lock_message<pos:position pos:line="48" pos:column="47"/></name><argument_list pos:line="48" pos:column="47">(<argument><expr><name pos:line="48" pos:column="48">log_file<pos:position pos:line="48" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="58">errno<pos:position pos:line="48" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="65">&amp;<pos:position pos:line="48" pos:column="70"/></operator><name pos:line="48" pos:column="66">err<pos:position pos:line="48" pos:column="69"/></name></expr></argument>)<pos:position pos:line="48" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="71"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="49" pos:column="25">error<pos:position pos:line="49" pos:column="30"/></name><argument_list pos:line="49" pos:column="30">(<argument><expr><literal type="string" pos:line="49" pos:column="31">"%s"<pos:position pos:line="49" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="37">err<pos:position pos:line="49" pos:column="40"/></name><operator pos:line="49" pos:column="40">.<pos:position pos:line="49" pos:column="41"/></operator><name pos:line="49" pos:column="41">buf<pos:position pos:line="49" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="50" pos:column="25">strbuf_release<pos:position pos:line="50" pos:column="39"/></name><argument_list pos:line="50" pos:column="39">(<argument><expr><operator pos:line="50" pos:column="40">&amp;<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="41">err<pos:position pos:line="50" pos:column="44"/></name></expr></argument>)<pos:position pos:line="50" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="46"/></expr_stmt>
			<goto pos:line="51" pos:column="25">goto <name pos:line="51" pos:column="30">failure<pos:position pos:line="51" pos:column="37"/></name>;<pos:position pos:line="51" pos:column="38"/></goto>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="53" pos:column="17">cb<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">.<pos:position pos:line="53" pos:column="20"/></operator><name pos:line="53" pos:column="20">newlog<pos:position pos:line="53" pos:column="26"/></name></name> <operator pos:line="53" pos:column="27">=<pos:position pos:line="53" pos:column="28"/></operator> <call><name pos:line="53" pos:column="29">fdopen_lock_file<pos:position pos:line="53" pos:column="45"/></name><argument_list pos:line="53" pos:column="45">(<argument><expr><operator pos:line="53" pos:column="46">&amp;<pos:position pos:line="53" pos:column="51"/></operator><name pos:line="53" pos:column="47">reflog_lock<pos:position pos:line="53" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="60">"w"<pos:position pos:line="53" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="65"/></expr_stmt>
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><operator pos:line="54" pos:column="21">!<pos:position pos:line="54" pos:column="22"/></operator><name><name pos:line="54" pos:column="22">cb<pos:position pos:line="54" pos:column="24"/></name><operator pos:line="54" pos:column="24">.<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="25">newlog<pos:position pos:line="54" pos:column="31"/></name></name></expr>)<pos:position pos:line="54" pos:column="32"/></condition><then pos:line="54" pos:column="32"> <block pos:line="54" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">error<pos:position pos:line="55" pos:column="30"/></name><argument_list pos:line="55" pos:column="30">(<argument><expr><literal type="string" pos:line="55" pos:column="31">"cannot fdopen %s (%s)"<pos:position pos:line="55" pos:column="54"/></literal></expr></argument>,
			      <argument><expr><call><name pos:line="56" pos:column="31">get_lock_file_path<pos:position pos:line="56" pos:column="49"/></name><argument_list pos:line="56" pos:column="49">(<argument><expr><operator pos:line="56" pos:column="50">&amp;<pos:position pos:line="56" pos:column="55"/></operator><name pos:line="56" pos:column="51">reflog_lock<pos:position pos:line="56" pos:column="62"/></name></expr></argument>)<pos:position pos:line="56" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="65">strerror<pos:position pos:line="56" pos:column="73"/></name><argument_list pos:line="56" pos:column="73">(<argument><expr><name pos:line="56" pos:column="74">errno<pos:position pos:line="56" pos:column="79"/></name></expr></argument>)<pos:position pos:line="56" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="82"/></expr_stmt>
			<goto pos:line="57" pos:column="25">goto <name pos:line="57" pos:column="30">failure<pos:position pos:line="57" pos:column="37"/></name>;<pos:position pos:line="57" pos:column="38"/></goto>
		}<pos:position pos:line="58" pos:column="18"/></block></then></if>
	}<pos:position pos:line="59" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call pos:line="61" pos:column="9">(<modifier pos:line="61" pos:column="10">*<pos:position pos:line="61" pos:column="11"/></modifier><name pos:line="61" pos:column="11">prepare_fn<pos:position pos:line="61" pos:column="21"/></name>)<argument_list pos:line="61" pos:column="22">(<argument><expr><name pos:line="61" pos:column="23">refname<pos:position pos:line="61" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="32">sha1<pos:position pos:line="61" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="38">cb<pos:position pos:line="61" pos:column="40"/></name><operator pos:line="61" pos:column="40">.<pos:position pos:line="61" pos:column="41"/></operator><name pos:line="61" pos:column="41">policy_cb<pos:position pos:line="61" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">for_each_reflog_ent<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><name pos:line="62" pos:column="29">refname<pos:position pos:line="62" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="38">expire_reflog_ent<pos:position pos:line="62" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="57">&amp;<pos:position pos:line="62" pos:column="62"/></operator><name pos:line="62" pos:column="58">cb<pos:position pos:line="62" pos:column="60"/></name></expr></argument>)<pos:position pos:line="62" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><call pos:line="63" pos:column="9">(<modifier pos:line="63" pos:column="10">*<pos:position pos:line="63" pos:column="11"/></modifier><name pos:line="63" pos:column="11">cleanup_fn<pos:position pos:line="63" pos:column="21"/></name>)<argument_list pos:line="63" pos:column="22">(<argument><expr><name><name pos:line="63" pos:column="23">cb<pos:position pos:line="63" pos:column="25"/></name><operator pos:line="63" pos:column="25">.<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="26">policy_cb<pos:position pos:line="63" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="37"/></expr_stmt>

	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><operator pos:line="65" pos:column="13">!<pos:position pos:line="65" pos:column="14"/></operator><operator pos:line="65" pos:column="14">(<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="15">flags<pos:position pos:line="65" pos:column="20"/></name> <operator pos:line="65" pos:column="21">&amp;<pos:position pos:line="65" pos:column="26"/></operator> <name pos:line="65" pos:column="23">EXPIRE_REFLOGS_DRY_RUN<pos:position pos:line="65" pos:column="45"/></name><operator pos:line="65" pos:column="45">)<pos:position pos:line="65" pos:column="46"/></operator></expr>)<pos:position pos:line="65" pos:column="47"/></condition><then pos:line="65" pos:column="47"> <block pos:line="65" pos:column="48">{
		<comment type="block" pos:line="66" pos:column="17">/*
		 * It doesn't make sense to adjust a reference pointed
		 * to by a symbolic ref based on expiring entries in
		 * the symbolic reference's reflog. Nor can we update
		 * a reference if there are no remaining reflog
		 * entries.
		 */</comment>
		<decl_stmt><decl><type><name pos:line="73" pos:column="17">int<pos:position pos:line="73" pos:column="20"/></name></type> <name pos:line="73" pos:column="21">update<pos:position pos:line="73" pos:column="27"/></name> <init pos:line="73" pos:column="28">= <expr><operator pos:line="73" pos:column="30">(<pos:position pos:line="73" pos:column="31"/></operator><name pos:line="73" pos:column="31">flags<pos:position pos:line="73" pos:column="36"/></name> <operator pos:line="73" pos:column="37">&amp;<pos:position pos:line="73" pos:column="42"/></operator> <name pos:line="73" pos:column="39">EXPIRE_REFLOGS_UPDATE_REF<pos:position pos:line="73" pos:column="64"/></name><operator pos:line="73" pos:column="64">)<pos:position pos:line="73" pos:column="65"/></operator> <operator pos:line="73" pos:column="66">&amp;&amp;<pos:position pos:line="73" pos:column="76"/></operator>
			<operator pos:line="74" pos:column="25">!<pos:position pos:line="74" pos:column="26"/></operator><operator pos:line="74" pos:column="26">(<pos:position pos:line="74" pos:column="27"/></operator><name pos:line="74" pos:column="27">type<pos:position pos:line="74" pos:column="31"/></name> <operator pos:line="74" pos:column="32">&amp;<pos:position pos:line="74" pos:column="37"/></operator> <name pos:line="74" pos:column="34">REF_ISSYMREF<pos:position pos:line="74" pos:column="46"/></name><operator pos:line="74" pos:column="46">)<pos:position pos:line="74" pos:column="47"/></operator> <operator pos:line="74" pos:column="48">&amp;&amp;<pos:position pos:line="74" pos:column="58"/></operator>
			<operator pos:line="75" pos:column="25">!<pos:position pos:line="75" pos:column="26"/></operator><call><name pos:line="75" pos:column="26">is_null_sha1<pos:position pos:line="75" pos:column="38"/></name><argument_list pos:line="75" pos:column="38">(<argument><expr><name><name pos:line="75" pos:column="39">cb<pos:position pos:line="75" pos:column="41"/></name><operator pos:line="75" pos:column="41">.<pos:position pos:line="75" pos:column="42"/></operator><name pos:line="75" pos:column="42">last_kept_sha1<pos:position pos:line="75" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="75" pos:column="58"/></decl_stmt>

		<if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><call><name pos:line="77" pos:column="21">close_lock_file<pos:position pos:line="77" pos:column="36"/></name><argument_list pos:line="77" pos:column="36">(<argument><expr><operator pos:line="77" pos:column="37">&amp;<pos:position pos:line="77" pos:column="42"/></operator><name pos:line="77" pos:column="38">reflog_lock<pos:position pos:line="77" pos:column="49"/></name></expr></argument>)<pos:position pos:line="77" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="51"/></condition><then pos:line="77" pos:column="51"> <block pos:line="77" pos:column="52">{
			<expr_stmt><expr><name pos:line="78" pos:column="25">status<pos:position pos:line="78" pos:column="31"/></name> <operator pos:line="78" pos:column="32">|=<pos:position pos:line="78" pos:column="34"/></operator> <call><name pos:line="78" pos:column="35">error<pos:position pos:line="78" pos:column="40"/></name><argument_list pos:line="78" pos:column="40">(<argument><expr><literal type="string" pos:line="78" pos:column="41">"couldn't write %s: %s"<pos:position pos:line="78" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="66">log_file<pos:position pos:line="78" pos:column="74"/></name></expr></argument>,
					<argument><expr><call><name pos:line="79" pos:column="41">strerror<pos:position pos:line="79" pos:column="49"/></name><argument_list pos:line="79" pos:column="49">(<argument><expr><name pos:line="79" pos:column="50">errno<pos:position pos:line="79" pos:column="55"/></name></expr></argument>)<pos:position pos:line="79" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="79" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="58"/></expr_stmt>
		}<pos:position pos:line="80" pos:column="18"/></block></then> <elseif pos:line="80" pos:column="19">else <if pos:line="80" pos:column="24">if <condition pos:line="80" pos:column="27">(<expr><name pos:line="80" pos:column="28">update<pos:position pos:line="80" pos:column="34"/></name> <operator pos:line="80" pos:column="35">&amp;&amp;<pos:position pos:line="80" pos:column="45"/></operator>
			   <operator pos:line="81" pos:column="28">(<pos:position pos:line="81" pos:column="29"/></operator><call><name pos:line="81" pos:column="29">write_in_full<pos:position pos:line="81" pos:column="42"/></name><argument_list pos:line="81" pos:column="42">(<argument><expr><call><name pos:line="81" pos:column="43">get_lock_file_fd<pos:position pos:line="81" pos:column="59"/></name><argument_list pos:line="81" pos:column="59">(<argument><expr><name><name pos:line="81" pos:column="60">lock<pos:position pos:line="81" pos:column="64"/></name><operator pos:line="81" pos:column="64">-&gt;<pos:position pos:line="81" pos:column="69"/></operator><name pos:line="81" pos:column="66">lk<pos:position pos:line="81" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="69"/></argument_list></call></expr></argument>,
				<argument><expr><call><name pos:line="82" pos:column="33">sha1_to_hex<pos:position pos:line="82" pos:column="44"/></name><argument_list pos:line="82" pos:column="44">(<argument><expr><name><name pos:line="82" pos:column="45">cb<pos:position pos:line="82" pos:column="47"/></name><operator pos:line="82" pos:column="47">.<pos:position pos:line="82" pos:column="48"/></operator><name pos:line="82" pos:column="48">last_kept_sha1<pos:position pos:line="82" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="82" pos:column="65">40<pos:position pos:line="82" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="68"/></argument_list></call> <operator pos:line="82" pos:column="69">!=<pos:position pos:line="82" pos:column="71"/></operator> <literal type="number" pos:line="82" pos:column="72">40<pos:position pos:line="82" pos:column="74"/></literal> <operator pos:line="82" pos:column="75">||<pos:position pos:line="82" pos:column="77"/></operator>
			    <call><name pos:line="83" pos:column="29">write_str_in_full<pos:position pos:line="83" pos:column="46"/></name><argument_list pos:line="83" pos:column="46">(<argument><expr><call><name pos:line="83" pos:column="47">get_lock_file_fd<pos:position pos:line="83" pos:column="63"/></name><argument_list pos:line="83" pos:column="63">(<argument><expr><name><name pos:line="83" pos:column="64">lock<pos:position pos:line="83" pos:column="68"/></name><operator pos:line="83" pos:column="68">-&gt;<pos:position pos:line="83" pos:column="73"/></operator><name pos:line="83" pos:column="70">lk<pos:position pos:line="83" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="75">"\n"<pos:position pos:line="83" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="80"/></argument_list></call> <operator pos:line="83" pos:column="81">!=<pos:position pos:line="83" pos:column="83"/></operator> <literal type="number" pos:line="83" pos:column="84">1<pos:position pos:line="83" pos:column="85"/></literal> <operator pos:line="83" pos:column="86">||<pos:position pos:line="83" pos:column="88"/></operator>
			    <call><name pos:line="84" pos:column="29">close_ref<pos:position pos:line="84" pos:column="38"/></name><argument_list pos:line="84" pos:column="38">(<argument><expr><name pos:line="84" pos:column="39">lock<pos:position pos:line="84" pos:column="43"/></name></expr></argument>)<pos:position pos:line="84" pos:column="44"/></argument_list></call> <operator pos:line="84" pos:column="45">&lt;<pos:position pos:line="84" pos:column="49"/></operator> <literal type="number" pos:line="84" pos:column="47">0<pos:position pos:line="84" pos:column="48"/></literal><operator pos:line="84" pos:column="48">)<pos:position pos:line="84" pos:column="49"/></operator></expr>)<pos:position pos:line="84" pos:column="50"/></condition><then pos:line="84" pos:column="50"> <block pos:line="84" pos:column="51">{
			<expr_stmt><expr><name pos:line="85" pos:column="25">status<pos:position pos:line="85" pos:column="31"/></name> <operator pos:line="85" pos:column="32">|=<pos:position pos:line="85" pos:column="34"/></operator> <call><name pos:line="85" pos:column="35">error<pos:position pos:line="85" pos:column="40"/></name><argument_list pos:line="85" pos:column="40">(<argument><expr><literal type="string" pos:line="85" pos:column="41">"couldn't write %s"<pos:position pos:line="85" pos:column="60"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="86" pos:column="41">get_lock_file_path<pos:position pos:line="86" pos:column="59"/></name><argument_list pos:line="86" pos:column="59">(<argument><expr><name><name pos:line="86" pos:column="60">lock<pos:position pos:line="86" pos:column="64"/></name><operator pos:line="86" pos:column="64">-&gt;<pos:position pos:line="86" pos:column="69"/></operator><name pos:line="86" pos:column="66">lk<pos:position pos:line="86" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="86" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="71"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="87" pos:column="25">rollback_lock_file<pos:position pos:line="87" pos:column="43"/></name><argument_list pos:line="87" pos:column="43">(<argument><expr><operator pos:line="87" pos:column="44">&amp;<pos:position pos:line="87" pos:column="49"/></operator><name pos:line="87" pos:column="45">reflog_lock<pos:position pos:line="87" pos:column="56"/></name></expr></argument>)<pos:position pos:line="87" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="58"/></expr_stmt>
		}<pos:position pos:line="88" pos:column="18"/></block></then></if></elseif> <elseif pos:line="88" pos:column="19">else <if pos:line="88" pos:column="24">if <condition pos:line="88" pos:column="27">(<expr><call><name pos:line="88" pos:column="28">commit_lock_file<pos:position pos:line="88" pos:column="44"/></name><argument_list pos:line="88" pos:column="44">(<argument><expr><operator pos:line="88" pos:column="45">&amp;<pos:position pos:line="88" pos:column="50"/></operator><name pos:line="88" pos:column="46">reflog_lock<pos:position pos:line="88" pos:column="57"/></name></expr></argument>)<pos:position pos:line="88" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="59"/></condition><then pos:line="88" pos:column="59"> <block pos:line="88" pos:column="60">{
			<expr_stmt><expr><name pos:line="89" pos:column="25">status<pos:position pos:line="89" pos:column="31"/></name> <operator pos:line="89" pos:column="32">|=<pos:position pos:line="89" pos:column="34"/></operator> <call><name pos:line="89" pos:column="35">error<pos:position pos:line="89" pos:column="40"/></name><argument_list pos:line="89" pos:column="40">(<argument><expr><literal type="string" pos:line="89" pos:column="41">"unable to write reflog %s: %s"<pos:position pos:line="89" pos:column="72"/></literal></expr></argument>,
					<argument><expr><name pos:line="90" pos:column="41">log_file<pos:position pos:line="90" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="90" pos:column="51">strerror<pos:position pos:line="90" pos:column="59"/></name><argument_list pos:line="90" pos:column="59">(<argument><expr><name pos:line="90" pos:column="60">errno<pos:position pos:line="90" pos:column="65"/></name></expr></argument>)<pos:position pos:line="90" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="90" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="91" pos:column="18"/></block></then></if></elseif> <elseif pos:line="91" pos:column="19">else <if pos:line="91" pos:column="24">if <condition pos:line="91" pos:column="27">(<expr><name pos:line="91" pos:column="28">update<pos:position pos:line="91" pos:column="34"/></name> <operator pos:line="91" pos:column="35">&amp;&amp;<pos:position pos:line="91" pos:column="45"/></operator> <call><name pos:line="91" pos:column="38">commit_ref<pos:position pos:line="91" pos:column="48"/></name><argument_list pos:line="91" pos:column="48">(<argument><expr><name pos:line="91" pos:column="49">lock<pos:position pos:line="91" pos:column="53"/></name></expr></argument>)<pos:position pos:line="91" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="55"/></condition><then pos:line="91" pos:column="55"> <block pos:line="91" pos:column="56">{
			<expr_stmt><expr><name pos:line="92" pos:column="25">status<pos:position pos:line="92" pos:column="31"/></name> <operator pos:line="92" pos:column="32">|=<pos:position pos:line="92" pos:column="34"/></operator> <call><name pos:line="92" pos:column="35">error<pos:position pos:line="92" pos:column="40"/></name><argument_list pos:line="92" pos:column="40">(<argument><expr><literal type="string" pos:line="92" pos:column="41">"couldn't set %s"<pos:position pos:line="92" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="60">lock<pos:position pos:line="92" pos:column="64"/></name><operator pos:line="92" pos:column="64">-&gt;<pos:position pos:line="92" pos:column="69"/></operator><name pos:line="92" pos:column="66">ref_name<pos:position pos:line="92" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="76"/></expr_stmt>
		}<pos:position pos:line="93" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="94" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="95" pos:column="9">free<pos:position pos:line="95" pos:column="13"/></name><argument_list pos:line="95" pos:column="13">(<argument><expr><name pos:line="95" pos:column="14">log_file<pos:position pos:line="95" pos:column="22"/></name></expr></argument>)<pos:position pos:line="95" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="96" pos:column="9">unlock_ref<pos:position pos:line="96" pos:column="19"/></name><argument_list pos:line="96" pos:column="19">(<argument><expr><name pos:line="96" pos:column="20">lock<pos:position pos:line="96" pos:column="24"/></name></expr></argument>)<pos:position pos:line="96" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="26"/></expr_stmt>
	<return pos:line="97" pos:column="9">return <expr><name pos:line="97" pos:column="16">status<pos:position pos:line="97" pos:column="22"/></name></expr>;<pos:position pos:line="97" pos:column="23"/></return>

 <label><name pos:line="99" pos:column="2">failure<pos:position pos:line="99" pos:column="9"/></name>:<pos:position pos:line="99" pos:column="10"/></label>
	<expr_stmt><expr><call><name pos:line="100" pos:column="9">rollback_lock_file<pos:position pos:line="100" pos:column="27"/></name><argument_list pos:line="100" pos:column="27">(<argument><expr><operator pos:line="100" pos:column="28">&amp;<pos:position pos:line="100" pos:column="33"/></operator><name pos:line="100" pos:column="29">reflog_lock<pos:position pos:line="100" pos:column="40"/></name></expr></argument>)<pos:position pos:line="100" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="101" pos:column="9">free<pos:position pos:line="101" pos:column="13"/></name><argument_list pos:line="101" pos:column="13">(<argument><expr><name pos:line="101" pos:column="14">log_file<pos:position pos:line="101" pos:column="22"/></name></expr></argument>)<pos:position pos:line="101" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="102" pos:column="9">unlock_ref<pos:position pos:line="102" pos:column="19"/></name><argument_list pos:line="102" pos:column="19">(<argument><expr><name pos:line="102" pos:column="20">lock<pos:position pos:line="102" pos:column="24"/></name></expr></argument>)<pos:position pos:line="102" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="26"/></expr_stmt>
	<return pos:line="103" pos:column="9">return <expr><operator pos:line="103" pos:column="16">-<pos:position pos:line="103" pos:column="17"/></operator><literal type="number" pos:line="103" pos:column="17">1<pos:position pos:line="103" pos:column="18"/></literal></expr>;<pos:position pos:line="103" pos:column="19"/></return>
}<pos:position pos:line="104" pos:column="2"/></block></function></unit>
