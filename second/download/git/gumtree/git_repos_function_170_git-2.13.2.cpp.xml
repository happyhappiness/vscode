<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_170_git-2.13.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">recv_sideband<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">me<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">in_stream<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">out<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">term<pos:position pos:line="3" pos:column="25"/></name></decl>, <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="28">suffix<pos:position pos:line="3" pos:column="34"/></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">buf<pos:position pos:line="4" pos:column="17"/></name><index pos:line="4" pos:column="17">[<expr><name pos:line="4" pos:column="18">LARGE_PACKET_MAX<pos:position pos:line="4" pos:column="34"/></name> <operator pos:line="4" pos:column="35">+<pos:position pos:line="4" pos:column="36"/></operator> <literal type="number" pos:line="4" pos:column="37">1<pos:position pos:line="4" pos:column="38"/></literal></expr>]<pos:position pos:line="4" pos:column="39"/></index></name></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">outbuf<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name pos:line="5" pos:column="32">STRBUF_INIT<pos:position pos:line="5" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">retval<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">term<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <call><name pos:line="8" pos:column="16">getenv<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><literal type="string" pos:line="8" pos:column="23">"TERM"<pos:position pos:line="8" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="31"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">isatty<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><literal type="number" pos:line="9" pos:column="20">2<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="22"/></argument_list></call> <operator pos:line="9" pos:column="23">&amp;&amp;<pos:position pos:line="9" pos:column="33"/></operator> <name pos:line="9" pos:column="26">term<pos:position pos:line="9" pos:column="30"/></name> <operator pos:line="9" pos:column="31">&amp;&amp;<pos:position pos:line="9" pos:column="41"/></operator> <call><name pos:line="9" pos:column="34">strcmp<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">(<argument><expr><name pos:line="9" pos:column="41">term<pos:position pos:line="9" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="47">"dumb"<pos:position pos:line="9" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="55"/></condition><then pos:line="9" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="17">suffix<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">=<pos:position pos:line="10" pos:column="25"/></operator> <name pos:line="10" pos:column="26">ANSI_SUFFIX<pos:position pos:line="10" pos:column="37"/></name></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt></block></then>
	<else pos:line="11" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">suffix<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <name pos:line="12" pos:column="26">DUMB_SUFFIX<pos:position pos:line="12" pos:column="37"/></name></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt></block></else></if>

	<while pos:line="14" pos:column="9">while <condition pos:line="14" pos:column="15">(<expr><operator pos:line="14" pos:column="16">!<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">retval<pos:position pos:line="14" pos:column="23"/></name></expr>)<pos:position pos:line="14" pos:column="24"/></condition> <block pos:line="14" pos:column="25">{
		<decl_stmt><decl><type><specifier pos:line="15" pos:column="17">const<pos:position pos:line="15" pos:column="22"/></specifier> <name pos:line="15" pos:column="23">char<pos:position pos:line="15" pos:column="27"/></name> <modifier pos:line="15" pos:column="28">*<pos:position pos:line="15" pos:column="29"/></modifier></type><name pos:line="15" pos:column="29">b<pos:position pos:line="15" pos:column="30"/></name></decl>, <modifier pos:line="15" pos:column="32">*<pos:position pos:line="15" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="15" pos:column="33">brk<pos:position pos:line="15" pos:column="36"/></name></decl>;<pos:position pos:line="15" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">int<pos:position pos:line="16" pos:column="20"/></name></type> <name pos:line="16" pos:column="21">band<pos:position pos:line="16" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="16" pos:column="27">len<pos:position pos:line="16" pos:column="30"/></name></decl>;<pos:position pos:line="16" pos:column="31"/></decl_stmt>
		<expr_stmt><expr><name pos:line="17" pos:column="17">len<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <call><name pos:line="17" pos:column="23">packet_read<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><name pos:line="17" pos:column="35">in_stream<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="46">NULL<pos:position pos:line="17" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="52">NULL<pos:position pos:line="17" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="58">buf<pos:position pos:line="17" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="63">LARGE_PACKET_MAX<pos:position pos:line="17" pos:column="79"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="81">0<pos:position pos:line="17" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="84"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">len<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">==<pos:position pos:line="18" pos:column="27"/></operator> <literal type="number" pos:line="18" pos:column="28">0<pos:position pos:line="18" pos:column="29"/></literal></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30">
			<block type="pseudo"><break pos:line="19" pos:column="25">break;<pos:position pos:line="19" pos:column="31"/></break></block></then></if>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">len<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">&lt;<pos:position pos:line="20" pos:column="29"/></operator> <literal type="number" pos:line="20" pos:column="27">1<pos:position pos:line="20" pos:column="28"/></literal></expr>)<pos:position pos:line="20" pos:column="29"/></condition><then pos:line="20" pos:column="29"> <block pos:line="20" pos:column="30">{
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">strbuf_addf<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><operator pos:line="21" pos:column="37">&amp;<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="38">outbuf<pos:position pos:line="21" pos:column="44"/></name></expr></argument>,
				    <argument><expr><literal type="string" pos:line="22" pos:column="37">"%s%s: protocol error: no band designator"<pos:position pos:line="22" pos:column="79"/></literal></expr></argument>,
				    <argument><expr><ternary><condition><expr><name><name pos:line="23" pos:column="37">outbuf<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">.<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="44">len<pos:position pos:line="23" pos:column="47"/></name></name></expr> ?<pos:position pos:line="23" pos:column="49"/></condition><then pos:line="23" pos:column="49"> <expr><literal type="string" pos:line="23" pos:column="50">"\n"<pos:position pos:line="23" pos:column="54"/></literal></expr> <pos:position pos:line="23" pos:column="55"/></then><else pos:line="23" pos:column="55">: <expr><literal type="string" pos:line="23" pos:column="57">""<pos:position pos:line="23" pos:column="59"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="23" pos:column="61">me<pos:position pos:line="23" pos:column="63"/></name></expr></argument>)<pos:position pos:line="23" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name pos:line="24" pos:column="25">retval<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="34">SIDEBAND_PROTOCOL_ERROR<pos:position pos:line="24" pos:column="57"/></name></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
			<break pos:line="25" pos:column="25">break;<pos:position pos:line="25" pos:column="31"/></break>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="27" pos:column="17">band<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <name><name pos:line="27" pos:column="24">buf<pos:position pos:line="27" pos:column="27"/></name><index pos:line="27" pos:column="27">[<expr><literal type="number" pos:line="27" pos:column="28">0<pos:position pos:line="27" pos:column="29"/></literal></expr>]<pos:position pos:line="27" pos:column="30"/></index></name> <operator pos:line="27" pos:column="31">&amp;<pos:position pos:line="27" pos:column="36"/></operator> <literal type="number" pos:line="27" pos:column="33">0xff<pos:position pos:line="27" pos:column="37"/></literal></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">buf<pos:position pos:line="28" pos:column="20"/></name><index pos:line="28" pos:column="20">[<expr><name pos:line="28" pos:column="21">len<pos:position pos:line="28" pos:column="24"/></name></expr>]<pos:position pos:line="28" pos:column="25"/></index></name> <operator pos:line="28" pos:column="26">=<pos:position pos:line="28" pos:column="27"/></operator> <literal type="char" pos:line="28" pos:column="28">'\0'<pos:position pos:line="28" pos:column="32"/></literal></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="29" pos:column="17">len<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">--<pos:position pos:line="29" pos:column="22"/></operator></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt>
		<switch pos:line="30" pos:column="17">switch <condition pos:line="30" pos:column="24">(<expr><name pos:line="30" pos:column="25">band<pos:position pos:line="30" pos:column="29"/></name></expr>)<pos:position pos:line="30" pos:column="30"/></condition> <block pos:line="30" pos:column="31">{
		<case pos:line="31" pos:column="17">case <expr><literal type="number" pos:line="31" pos:column="22">3<pos:position pos:line="31" pos:column="23"/></literal></expr>:<pos:position pos:line="31" pos:column="24"/></case>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">strbuf_addf<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">(<argument><expr><operator pos:line="32" pos:column="37">&amp;<pos:position pos:line="32" pos:column="42"/></operator><name pos:line="32" pos:column="38">outbuf<pos:position pos:line="32" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="46">"%s%s%s"<pos:position pos:line="32" pos:column="54"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="32" pos:column="56">outbuf<pos:position pos:line="32" pos:column="62"/></name><operator pos:line="32" pos:column="62">.<pos:position pos:line="32" pos:column="63"/></operator><name pos:line="32" pos:column="63">len<pos:position pos:line="32" pos:column="66"/></name></name></expr> ?<pos:position pos:line="32" pos:column="68"/></condition><then pos:line="32" pos:column="68"> <expr><literal type="string" pos:line="32" pos:column="69">"\n"<pos:position pos:line="32" pos:column="73"/></literal></expr> <pos:position pos:line="32" pos:column="74"/></then><else pos:line="32" pos:column="74">: <expr><literal type="string" pos:line="32" pos:column="76">""<pos:position pos:line="32" pos:column="78"/></literal></expr></else></ternary></expr></argument>,
				    <argument><expr><name pos:line="33" pos:column="37">PREFIX<pos:position pos:line="33" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="45">buf<pos:position pos:line="33" pos:column="48"/></name> <operator pos:line="33" pos:column="49">+<pos:position pos:line="33" pos:column="50"/></operator> <literal type="number" pos:line="33" pos:column="51">1<pos:position pos:line="33" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><name pos:line="34" pos:column="25">retval<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">=<pos:position pos:line="34" pos:column="33"/></operator> <name pos:line="34" pos:column="34">SIDEBAND_REMOTE_ERROR<pos:position pos:line="34" pos:column="55"/></name></expr>;<pos:position pos:line="34" pos:column="56"/></expr_stmt>
			<break pos:line="35" pos:column="25">break;<pos:position pos:line="35" pos:column="31"/></break>
		<case pos:line="36" pos:column="17">case <expr><literal type="number" pos:line="36" pos:column="22">2<pos:position pos:line="36" pos:column="23"/></literal></expr>:<pos:position pos:line="36" pos:column="24"/></case>
			<expr_stmt><expr><name pos:line="37" pos:column="25">b<pos:position pos:line="37" pos:column="26"/></name> <operator pos:line="37" pos:column="27">=<pos:position pos:line="37" pos:column="28"/></operator> <name pos:line="37" pos:column="29">buf<pos:position pos:line="37" pos:column="32"/></name> <operator pos:line="37" pos:column="33">+<pos:position pos:line="37" pos:column="34"/></operator> <literal type="number" pos:line="37" pos:column="35">1<pos:position pos:line="37" pos:column="36"/></literal></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>

			<comment type="block" pos:line="39" pos:column="25">/*
			 * Append a suffix to each nonempty line to clear the
			 * end of the screen line.
			 *
			 * The output is accumulated in a buffer and
			 * each line is printed to stderr using
			 * write(2) to ensure inter-process atomicity.
			 */</comment>
			<while pos:line="47" pos:column="25">while <condition pos:line="47" pos:column="31">(<expr><operator pos:line="47" pos:column="32">(<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="33">brk<pos:position pos:line="47" pos:column="36"/></name> <operator pos:line="47" pos:column="37">=<pos:position pos:line="47" pos:column="38"/></operator> <call><name pos:line="47" pos:column="39">strpbrk<pos:position pos:line="47" pos:column="46"/></name><argument_list pos:line="47" pos:column="46">(<argument><expr><name pos:line="47" pos:column="47">b<pos:position pos:line="47" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="50">"\n\r"<pos:position pos:line="47" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="57"/></argument_list></call><operator pos:line="47" pos:column="57">)<pos:position pos:line="47" pos:column="58"/></operator></expr>)<pos:position pos:line="47" pos:column="59"/></condition> <block pos:line="47" pos:column="60">{
				<decl_stmt><decl><type><name pos:line="48" pos:column="33">int<pos:position pos:line="48" pos:column="36"/></name></type> <name pos:line="48" pos:column="37">linelen<pos:position pos:line="48" pos:column="44"/></name> <init pos:line="48" pos:column="45">= <expr><name pos:line="48" pos:column="47">brk<pos:position pos:line="48" pos:column="50"/></name> <operator pos:line="48" pos:column="51">-<pos:position pos:line="48" pos:column="52"/></operator> <name pos:line="48" pos:column="53">b<pos:position pos:line="48" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="48" pos:column="55"/></decl_stmt>

				<if pos:line="50" pos:column="33">if <condition pos:line="50" pos:column="36">(<expr><operator pos:line="50" pos:column="37">!<pos:position pos:line="50" pos:column="38"/></operator><name><name pos:line="50" pos:column="38">outbuf<pos:position pos:line="50" pos:column="44"/></name><operator pos:line="50" pos:column="44">.<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="45">len<pos:position pos:line="50" pos:column="48"/></name></name></expr>)<pos:position pos:line="50" pos:column="49"/></condition><then pos:line="50" pos:column="49">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="41">strbuf_addstr<pos:position pos:line="51" pos:column="54"/></name><argument_list pos:line="51" pos:column="54">(<argument><expr><operator pos:line="51" pos:column="55">&amp;<pos:position pos:line="51" pos:column="60"/></operator><name pos:line="51" pos:column="56">outbuf<pos:position pos:line="51" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="64">PREFIX<pos:position pos:line="51" pos:column="70"/></name></expr></argument>)<pos:position pos:line="51" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="72"/></expr_stmt></block></then></if>
				<if pos:line="52" pos:column="33">if <condition pos:line="52" pos:column="36">(<expr><name pos:line="52" pos:column="37">linelen<pos:position pos:line="52" pos:column="44"/></name> <operator pos:line="52" pos:column="45">&gt;<pos:position pos:line="52" pos:column="49"/></operator> <literal type="number" pos:line="52" pos:column="47">0<pos:position pos:line="52" pos:column="48"/></literal></expr>)<pos:position pos:line="52" pos:column="49"/></condition><then pos:line="52" pos:column="49"> <block pos:line="52" pos:column="50">{
					<expr_stmt><expr><call><name pos:line="53" pos:column="41">strbuf_addf<pos:position pos:line="53" pos:column="52"/></name><argument_list pos:line="53" pos:column="52">(<argument><expr><operator pos:line="53" pos:column="53">&amp;<pos:position pos:line="53" pos:column="58"/></operator><name pos:line="53" pos:column="54">outbuf<pos:position pos:line="53" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="62">"%.*s%s%c"<pos:position pos:line="53" pos:column="72"/></literal></expr></argument>,
						    <argument><expr><name pos:line="54" pos:column="53">linelen<pos:position pos:line="54" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="62">b<pos:position pos:line="54" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="65">suffix<pos:position pos:line="54" pos:column="71"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="73">*<pos:position pos:line="54" pos:column="74"/></operator><name pos:line="54" pos:column="74">brk<pos:position pos:line="54" pos:column="77"/></name></expr></argument>)<pos:position pos:line="54" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="79"/></expr_stmt>
				}<pos:position pos:line="55" pos:column="34"/></block></then> <else pos:line="55" pos:column="35">else <block pos:line="55" pos:column="40">{
					<expr_stmt><expr><call><name pos:line="56" pos:column="41">strbuf_addch<pos:position pos:line="56" pos:column="53"/></name><argument_list pos:line="56" pos:column="53">(<argument><expr><operator pos:line="56" pos:column="54">&amp;<pos:position pos:line="56" pos:column="59"/></operator><name pos:line="56" pos:column="55">outbuf<pos:position pos:line="56" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="63">*<pos:position pos:line="56" pos:column="64"/></operator><name pos:line="56" pos:column="64">brk<pos:position pos:line="56" pos:column="67"/></name></expr></argument>)<pos:position pos:line="56" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="69"/></expr_stmt>
				}<pos:position pos:line="57" pos:column="34"/></block></else></if>
				<expr_stmt><expr><call><name pos:line="58" pos:column="33">xwrite<pos:position pos:line="58" pos:column="39"/></name><argument_list pos:line="58" pos:column="39">(<argument><expr><literal type="number" pos:line="58" pos:column="40">2<pos:position pos:line="58" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="43">outbuf<pos:position pos:line="58" pos:column="49"/></name><operator pos:line="58" pos:column="49">.<pos:position pos:line="58" pos:column="50"/></operator><name pos:line="58" pos:column="50">buf<pos:position pos:line="58" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="55">outbuf<pos:position pos:line="58" pos:column="61"/></name><operator pos:line="58" pos:column="61">.<pos:position pos:line="58" pos:column="62"/></operator><name pos:line="58" pos:column="62">len<pos:position pos:line="58" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="59" pos:column="33">strbuf_reset<pos:position pos:line="59" pos:column="45"/></name><argument_list pos:line="59" pos:column="45">(<argument><expr><operator pos:line="59" pos:column="46">&amp;<pos:position pos:line="59" pos:column="51"/></operator><name pos:line="59" pos:column="47">outbuf<pos:position pos:line="59" pos:column="53"/></name></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt>

				<expr_stmt><expr><name pos:line="61" pos:column="33">b<pos:position pos:line="61" pos:column="34"/></name> <operator pos:line="61" pos:column="35">=<pos:position pos:line="61" pos:column="36"/></operator> <name pos:line="61" pos:column="37">brk<pos:position pos:line="61" pos:column="40"/></name> <operator pos:line="61" pos:column="41">+<pos:position pos:line="61" pos:column="42"/></operator> <literal type="number" pos:line="61" pos:column="43">1<pos:position pos:line="61" pos:column="44"/></literal></expr>;<pos:position pos:line="61" pos:column="45"/></expr_stmt>
			}<pos:position pos:line="62" pos:column="26"/></block></while>

			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><operator pos:line="64" pos:column="29">*<pos:position pos:line="64" pos:column="30"/></operator><name pos:line="64" pos:column="30">b<pos:position pos:line="64" pos:column="31"/></name></expr>)<pos:position pos:line="64" pos:column="32"/></condition><then pos:line="64" pos:column="32">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="33">strbuf_addf<pos:position pos:line="65" pos:column="44"/></name><argument_list pos:line="65" pos:column="44">(<argument><expr><operator pos:line="65" pos:column="45">&amp;<pos:position pos:line="65" pos:column="50"/></operator><name pos:line="65" pos:column="46">outbuf<pos:position pos:line="65" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="54">"%s%s"<pos:position pos:line="65" pos:column="60"/></literal></expr></argument>,
					    <argument><expr><ternary><condition><expr><name><name pos:line="66" pos:column="45">outbuf<pos:position pos:line="66" pos:column="51"/></name><operator pos:line="66" pos:column="51">.<pos:position pos:line="66" pos:column="52"/></operator><name pos:line="66" pos:column="52">len<pos:position pos:line="66" pos:column="55"/></name></name></expr> ?<pos:position pos:line="66" pos:column="57"/></condition><then pos:line="66" pos:column="57"> <expr><literal type="string" pos:line="66" pos:column="58">""<pos:position pos:line="66" pos:column="60"/></literal></expr> <pos:position pos:line="66" pos:column="61"/></then><else pos:line="66" pos:column="61">: <expr><name pos:line="66" pos:column="63">PREFIX<pos:position pos:line="66" pos:column="69"/></name></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="66" pos:column="71">b<pos:position pos:line="66" pos:column="72"/></name></expr></argument>)<pos:position pos:line="66" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="74"/></expr_stmt></block></then></if>
			<break pos:line="67" pos:column="25">break;<pos:position pos:line="67" pos:column="31"/></break>
		<case pos:line="68" pos:column="17">case <expr><literal type="number" pos:line="68" pos:column="22">1<pos:position pos:line="68" pos:column="23"/></literal></expr>:<pos:position pos:line="68" pos:column="24"/></case>
			<expr_stmt><expr><call><name pos:line="69" pos:column="25">write_or_die<pos:position pos:line="69" pos:column="37"/></name><argument_list pos:line="69" pos:column="37">(<argument><expr><name pos:line="69" pos:column="38">out<pos:position pos:line="69" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="43">buf<pos:position pos:line="69" pos:column="46"/></name> <operator pos:line="69" pos:column="47">+<pos:position pos:line="69" pos:column="48"/></operator> <literal type="number" pos:line="69" pos:column="49">1<pos:position pos:line="69" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="52">len<pos:position pos:line="69" pos:column="55"/></name></expr></argument>)<pos:position pos:line="69" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="57"/></expr_stmt>
			<break pos:line="70" pos:column="25">break;<pos:position pos:line="70" pos:column="31"/></break>
		<default pos:line="71" pos:column="17">default:<pos:position pos:line="71" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="72" pos:column="25">strbuf_addf<pos:position pos:line="72" pos:column="36"/></name><argument_list pos:line="72" pos:column="36">(<argument><expr><operator pos:line="72" pos:column="37">&amp;<pos:position pos:line="72" pos:column="42"/></operator><name pos:line="72" pos:column="38">outbuf<pos:position pos:line="72" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="46">"%s%s: protocol error: bad band #%d"<pos:position pos:line="72" pos:column="82"/></literal></expr></argument>,
				    <argument><expr><ternary><condition><expr><name><name pos:line="73" pos:column="37">outbuf<pos:position pos:line="73" pos:column="43"/></name><operator pos:line="73" pos:column="43">.<pos:position pos:line="73" pos:column="44"/></operator><name pos:line="73" pos:column="44">len<pos:position pos:line="73" pos:column="47"/></name></name></expr> ?<pos:position pos:line="73" pos:column="49"/></condition><then pos:line="73" pos:column="49"> <expr><literal type="string" pos:line="73" pos:column="50">"\n"<pos:position pos:line="73" pos:column="54"/></literal></expr> <pos:position pos:line="73" pos:column="55"/></then><else pos:line="73" pos:column="55">: <expr><literal type="string" pos:line="73" pos:column="57">""<pos:position pos:line="73" pos:column="59"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="73" pos:column="61">me<pos:position pos:line="73" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="65">band<pos:position pos:line="73" pos:column="69"/></name></expr></argument>)<pos:position pos:line="73" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="71"/></expr_stmt>
			<expr_stmt><expr><name pos:line="74" pos:column="25">retval<pos:position pos:line="74" pos:column="31"/></name> <operator pos:line="74" pos:column="32">=<pos:position pos:line="74" pos:column="33"/></operator> <name pos:line="74" pos:column="34">SIDEBAND_PROTOCOL_ERROR<pos:position pos:line="74" pos:column="57"/></name></expr>;<pos:position pos:line="74" pos:column="58"/></expr_stmt>
			<break pos:line="75" pos:column="25">break;<pos:position pos:line="75" pos:column="31"/></break>
		}<pos:position pos:line="76" pos:column="18"/></block></switch>
	}<pos:position pos:line="77" pos:column="10"/></block></while>

	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><name><name pos:line="79" pos:column="13">outbuf<pos:position pos:line="79" pos:column="19"/></name><operator pos:line="79" pos:column="19">.<pos:position pos:line="79" pos:column="20"/></operator><name pos:line="79" pos:column="20">len<pos:position pos:line="79" pos:column="23"/></name></name></expr>)<pos:position pos:line="79" pos:column="24"/></condition><then pos:line="79" pos:column="24"> <block pos:line="79" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="80" pos:column="17">strbuf_addch<pos:position pos:line="80" pos:column="29"/></name><argument_list pos:line="80" pos:column="29">(<argument><expr><operator pos:line="80" pos:column="30">&amp;<pos:position pos:line="80" pos:column="35"/></operator><name pos:line="80" pos:column="31">outbuf<pos:position pos:line="80" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="80" pos:column="39">'\n'<pos:position pos:line="80" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="81" pos:column="17">xwrite<pos:position pos:line="81" pos:column="23"/></name><argument_list pos:line="81" pos:column="23">(<argument><expr><literal type="number" pos:line="81" pos:column="24">2<pos:position pos:line="81" pos:column="25"/></literal></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="27">outbuf<pos:position pos:line="81" pos:column="33"/></name><operator pos:line="81" pos:column="33">.<pos:position pos:line="81" pos:column="34"/></operator><name pos:line="81" pos:column="34">buf<pos:position pos:line="81" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="39">outbuf<pos:position pos:line="81" pos:column="45"/></name><operator pos:line="81" pos:column="45">.<pos:position pos:line="81" pos:column="46"/></operator><name pos:line="81" pos:column="46">len<pos:position pos:line="81" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="82" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="83" pos:column="9">strbuf_release<pos:position pos:line="83" pos:column="23"/></name><argument_list pos:line="83" pos:column="23">(<argument><expr><operator pos:line="83" pos:column="24">&amp;<pos:position pos:line="83" pos:column="29"/></operator><name pos:line="83" pos:column="25">outbuf<pos:position pos:line="83" pos:column="31"/></name></expr></argument>)<pos:position pos:line="83" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="33"/></expr_stmt>
	<return pos:line="84" pos:column="9">return <expr><name pos:line="84" pos:column="16">retval<pos:position pos:line="84" pos:column="22"/></name></expr>;<pos:position pos:line="84" pos:column="23"/></return>
}<pos:position pos:line="85" pos:column="2"/></block></function></unit>
