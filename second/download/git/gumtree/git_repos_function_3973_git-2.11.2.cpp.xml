<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3973_git-2.11.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">resolve_relative_path<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">rel<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><call><name pos:line="3" pos:column="14">starts_with<pos:position pos:line="3" pos:column="25"/></name><argument_list pos:line="3" pos:column="25">(<argument><expr><name pos:line="3" pos:column="26">rel<pos:position pos:line="3" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="31">"./"<pos:position pos:line="3" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="36"/></argument_list></call> <operator pos:line="3" pos:column="37">&amp;&amp;<pos:position pos:line="3" pos:column="47"/></operator> <operator pos:line="3" pos:column="40">!<pos:position pos:line="3" pos:column="41"/></operator><call><name pos:line="3" pos:column="41">starts_with<pos:position pos:line="3" pos:column="52"/></name><argument_list pos:line="3" pos:column="52">(<argument><expr><name pos:line="3" pos:column="53">rel<pos:position pos:line="3" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="58">"../"<pos:position pos:line="3" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="65"/></condition><then pos:line="3" pos:column="65">
		<block type="pseudo"><return pos:line="4" pos:column="17">return <expr><name pos:line="4" pos:column="24">NULL<pos:position pos:line="4" pos:column="28"/></name></expr>;<pos:position pos:line="4" pos:column="29"/></return></block></then></if>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">is_inside_work_tree<pos:position pos:line="6" pos:column="33"/></name><argument_list pos:line="6" pos:column="33">()<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="36"/></condition><then pos:line="6" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">die<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><literal type="string" pos:line="7" pos:column="21">"relative path syntax can't be used outside working tree."<pos:position pos:line="7" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="81"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="9" pos:column="9">/* die() inside prefix_path() if resolved path is outside worktree */</comment>
	<return pos:line="10" pos:column="9">return <expr><call><name pos:line="10" pos:column="16">prefix_path<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name><name pos:line="10" pos:column="28">startup_info<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">-&gt;<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="42">prefix<pos:position pos:line="10" pos:column="48"/></name></name></expr></argument>,
			   <argument><expr><ternary><condition><expr><name><name pos:line="11" pos:column="28">startup_info<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">-&gt;<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="42">prefix<pos:position pos:line="11" pos:column="48"/></name></name></expr> ?<pos:position pos:line="11" pos:column="50"/></condition><then pos:line="11" pos:column="50"> <expr><call><name pos:line="11" pos:column="51">strlen<pos:position pos:line="11" pos:column="57"/></name><argument_list pos:line="11" pos:column="57">(<argument><expr><name><name pos:line="11" pos:column="58">startup_info<pos:position pos:line="11" pos:column="70"/></name><operator pos:line="11" pos:column="70">-&gt;<pos:position pos:line="11" pos:column="75"/></operator><name pos:line="11" pos:column="72">prefix<pos:position pos:line="11" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="79"/></argument_list></call></expr> <pos:position pos:line="11" pos:column="80"/></then><else pos:line="11" pos:column="80">: <expr><literal type="number" pos:line="11" pos:column="82">0<pos:position pos:line="11" pos:column="83"/></literal></expr></else></ternary></expr></argument>,
			   <argument><expr><name pos:line="12" pos:column="28">rel<pos:position pos:line="12" pos:column="31"/></name></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
