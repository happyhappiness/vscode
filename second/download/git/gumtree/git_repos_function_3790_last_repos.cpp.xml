<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3790_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">tree<pos:position pos:line="1" pos:column="12"/></name></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">write_tree_from_memory<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">merge_options<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">o<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">tree<pos:position pos:line="3" pos:column="20"/></name></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">result<pos:position pos:line="3" pos:column="28"/></name> <init pos:line="3" pos:column="29">= <expr><name pos:line="3" pos:column="31">NULL<pos:position pos:line="3" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">unmerged_cache<pos:position pos:line="5" pos:column="27"/></name><argument_list pos:line="5" pos:column="27">()<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="30"/></condition><then pos:line="5" pos:column="30"> <block pos:line="5" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">int<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">i<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">fprintf<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">stderr<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="33">"BUG: There are unmerged index entries:\n"<pos:position pos:line="7" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="77"/></expr_stmt>
		<for pos:line="8" pos:column="17">for <control pos:line="8" pos:column="21">(<init><expr><name pos:line="8" pos:column="22">i<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">=<pos:position pos:line="8" pos:column="25"/></operator> <literal type="number" pos:line="8" pos:column="26">0<pos:position pos:line="8" pos:column="27"/></literal></expr>;<pos:position pos:line="8" pos:column="28"/></init> <condition><expr><name pos:line="8" pos:column="29">i<pos:position pos:line="8" pos:column="30"/></name> <operator pos:line="8" pos:column="31">&lt;<pos:position pos:line="8" pos:column="35"/></operator> <name pos:line="8" pos:column="33">active_nr<pos:position pos:line="8" pos:column="42"/></name></expr>;<pos:position pos:line="8" pos:column="43"/></condition> <incr><expr><name pos:line="8" pos:column="44">i<pos:position pos:line="8" pos:column="45"/></name><operator pos:line="8" pos:column="45">++<pos:position pos:line="8" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="8" pos:column="48"/></control> <block pos:line="8" pos:column="49">{
			<decl_stmt><decl><type><specifier pos:line="9" pos:column="25">const<pos:position pos:line="9" pos:column="30"/></specifier> <name><name pos:line="9" pos:column="31">struct<pos:position pos:line="9" pos:column="37"/></name> <name pos:line="9" pos:column="38">cache_entry<pos:position pos:line="9" pos:column="49"/></name></name> <modifier pos:line="9" pos:column="50">*<pos:position pos:line="9" pos:column="51"/></modifier></type><name pos:line="9" pos:column="51">ce<pos:position pos:line="9" pos:column="53"/></name> <init pos:line="9" pos:column="54">= <expr><name><name pos:line="9" pos:column="56">active_cache<pos:position pos:line="9" pos:column="68"/></name><index pos:line="9" pos:column="68">[<expr><name pos:line="9" pos:column="69">i<pos:position pos:line="9" pos:column="70"/></name></expr>]<pos:position pos:line="9" pos:column="71"/></index></name></expr></init></decl>;<pos:position pos:line="9" pos:column="72"/></decl_stmt>
			<if pos:line="10" pos:column="25">if <condition pos:line="10" pos:column="28">(<expr><call><name pos:line="10" pos:column="29">ce_stage<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><name pos:line="10" pos:column="38">ce<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="42"/></condition><then pos:line="10" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="33">fprintf<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">stderr<pos:position pos:line="11" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="49">"BUG: %d %.*s\n"<pos:position pos:line="11" pos:column="65"/></literal></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="67">ce_stage<pos:position pos:line="11" pos:column="75"/></name><argument_list pos:line="11" pos:column="75">(<argument><expr><name pos:line="11" pos:column="76">ce<pos:position pos:line="11" pos:column="78"/></name></expr></argument>)<pos:position pos:line="11" pos:column="79"/></argument_list></call></expr></argument>,
					<argument><expr><operator pos:line="12" pos:column="41">(<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="42">int<pos:position pos:line="12" pos:column="45"/></name><operator pos:line="12" pos:column="45">)<pos:position pos:line="12" pos:column="46"/></operator><call><name pos:line="12" pos:column="46">ce_namelen<pos:position pos:line="12" pos:column="56"/></name><argument_list pos:line="12" pos:column="56">(<argument><expr><name pos:line="12" pos:column="57">ce<pos:position pos:line="12" pos:column="59"/></name></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="62">ce<pos:position pos:line="12" pos:column="64"/></name><operator pos:line="12" pos:column="64">-&gt;<pos:position pos:line="12" pos:column="69"/></operator><name pos:line="12" pos:column="66">name<pos:position pos:line="12" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="72"/></expr_stmt></block></then></if>
		}<pos:position pos:line="13" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">die<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><literal type="string" pos:line="14" pos:column="21">"BUG: unmerged index entries in merge-recursive.c"<pos:position pos:line="14" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="73"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">active_cache_tree<pos:position pos:line="17" pos:column="31"/></name></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="17">active_cache_tree<pos:position pos:line="18" pos:column="34"/></name> <operator pos:line="18" pos:column="35">=<pos:position pos:line="18" pos:column="36"/></operator> <call><name pos:line="18" pos:column="37">cache_tree<pos:position pos:line="18" pos:column="47"/></name><argument_list pos:line="18" pos:column="47">()<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><call><name pos:line="20" pos:column="14">cache_tree_fully_valid<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><name pos:line="20" pos:column="37">active_cache_tree<pos:position pos:line="20" pos:column="54"/></name></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></call> <operator pos:line="20" pos:column="56">&amp;&amp;<pos:position pos:line="20" pos:column="66"/></operator>
	    <call><name pos:line="21" pos:column="13">cache_tree_update<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><operator pos:line="21" pos:column="31">&amp;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="32">the_index<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="43">0<pos:position pos:line="21" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call> <operator pos:line="21" pos:column="46">&lt;<pos:position pos:line="21" pos:column="50"/></operator> <literal type="number" pos:line="21" pos:column="48">0<pos:position pos:line="21" pos:column="49"/></literal></expr>)<pos:position pos:line="21" pos:column="50"/></condition><then pos:line="21" pos:column="50"> <block pos:line="21" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">err<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">o<pos:position pos:line="22" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="24">_<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><literal type="string" pos:line="22" pos:column="26">"error building trees"<pos:position pos:line="22" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt>
		<return pos:line="23" pos:column="17">return <expr><name pos:line="23" pos:column="24">NULL<pos:position pos:line="23" pos:column="28"/></name></expr>;<pos:position pos:line="23" pos:column="29"/></return>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="26" pos:column="9">result<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <call><name pos:line="26" pos:column="18">lookup_tree<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><operator pos:line="26" pos:column="30">&amp;<pos:position pos:line="26" pos:column="35"/></operator><name><name pos:line="26" pos:column="31">active_cache_tree<pos:position pos:line="26" pos:column="48"/></name><operator pos:line="26" pos:column="48">-&gt;<pos:position pos:line="26" pos:column="53"/></operator><name pos:line="26" pos:column="50">oid<pos:position pos:line="26" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt>

	<return pos:line="28" pos:column="9">return <expr><name pos:line="28" pos:column="16">result<pos:position pos:line="28" pos:column="22"/></name></expr>;<pos:position pos:line="28" pos:column="23"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
