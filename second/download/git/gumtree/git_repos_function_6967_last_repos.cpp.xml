<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6967_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">re_dfastate_t<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">find_recover_state<pos:position pos:line="3" pos:column="19"/></name> <parameter_list pos:line="3" pos:column="20">(<parameter><decl><type><name pos:line="3" pos:column="21">reg_errcode_t<pos:position pos:line="3" pos:column="34"/></name> <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier></type><name pos:line="3" pos:column="36">err<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="41">re_match_context_t<pos:position pos:line="3" pos:column="59"/></name> <modifier pos:line="3" pos:column="60">*<pos:position pos:line="3" pos:column="61"/></modifier></type><name pos:line="3" pos:column="61">mctx<pos:position pos:line="3" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="66"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">re_dfastate_t<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">cur_state<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <do pos:line="6" pos:column="3">do
    <block pos:line="7" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="8" pos:column="7">int<pos:position pos:line="8" pos:column="10"/></name></type> <name pos:line="8" pos:column="11">max<pos:position pos:line="8" pos:column="14"/></name> <init pos:line="8" pos:column="15">= <expr><name><name pos:line="8" pos:column="17">mctx<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">-&gt;<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="23">state_log_top<pos:position pos:line="8" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="9" pos:column="7">int<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">cur_str_idx<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><call><name pos:line="9" pos:column="25">re_string_cur_idx<pos:position pos:line="9" pos:column="42"/></name> <argument_list pos:line="9" pos:column="43">(<argument><expr><operator pos:line="9" pos:column="44">&amp;<pos:position pos:line="9" pos:column="49"/></operator><name><name pos:line="9" pos:column="45">mctx<pos:position pos:line="9" pos:column="49"/></name><operator pos:line="9" pos:column="49">-&gt;<pos:position pos:line="9" pos:column="54"/></operator><name pos:line="9" pos:column="51">input<pos:position pos:line="9" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="58"/></decl_stmt>

      <do pos:line="11" pos:column="7">do
	<block pos:line="12" pos:column="9">{
	  <if pos:line="13" pos:column="11">if <condition pos:line="13" pos:column="14">(<expr><operator pos:line="13" pos:column="15">++<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">cur_str_idx<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">&gt;<pos:position pos:line="13" pos:column="33"/></operator> <name pos:line="13" pos:column="31">max<pos:position pos:line="13" pos:column="34"/></name></expr>)<pos:position pos:line="13" pos:column="35"/></condition><then pos:line="13" pos:column="35">
	    <block type="pseudo"><return pos:line="14" pos:column="13">return <expr><name pos:line="14" pos:column="20">NULL<pos:position pos:line="14" pos:column="24"/></name></expr>;<pos:position pos:line="14" pos:column="25"/></return></block></then></if>
	  <expr_stmt><expr><call><name pos:line="15" pos:column="11">re_string_skip_bytes<pos:position pos:line="15" pos:column="31"/></name> <argument_list pos:line="15" pos:column="32">(<argument><expr><operator pos:line="15" pos:column="33">&amp;<pos:position pos:line="15" pos:column="38"/></operator><name><name pos:line="15" pos:column="34">mctx<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">-&gt;<pos:position pos:line="15" pos:column="43"/></operator><name pos:line="15" pos:column="40">input<pos:position pos:line="15" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="47">1<pos:position pos:line="15" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block>
      while <condition pos:line="17" pos:column="13">(<expr><name><name pos:line="17" pos:column="14">mctx<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">state_log<pos:position pos:line="17" pos:column="29"/></name><index pos:line="17" pos:column="29">[<expr><name pos:line="17" pos:column="30">cur_str_idx<pos:position pos:line="17" pos:column="41"/></name></expr>]<pos:position pos:line="17" pos:column="42"/></index></name> <operator pos:line="17" pos:column="43">==<pos:position pos:line="17" pos:column="45"/></operator> <name pos:line="17" pos:column="46">NULL<pos:position pos:line="17" pos:column="50"/></name></expr>)<pos:position pos:line="17" pos:column="51"/></condition>;<pos:position pos:line="17" pos:column="52"/></do>

      <expr_stmt><expr><name pos:line="19" pos:column="7">cur_state<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <call><name pos:line="19" pos:column="19">merge_state_with_log<pos:position pos:line="19" pos:column="39"/></name> <argument_list pos:line="19" pos:column="40">(<argument><expr><name pos:line="19" pos:column="41">err<pos:position pos:line="19" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="46">mctx<pos:position pos:line="19" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="52">NULL<pos:position pos:line="19" pos:column="56"/></name></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block>
  while <condition pos:line="21" pos:column="9">(<expr><operator pos:line="21" pos:column="10">*<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="11">err<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">==<pos:position pos:line="21" pos:column="17"/></operator> <name pos:line="21" pos:column="18">REG_NOERROR<pos:position pos:line="21" pos:column="29"/></name> <operator pos:line="21" pos:column="30">&amp;&amp;<pos:position pos:line="21" pos:column="40"/></operator> <name pos:line="21" pos:column="33">cur_state<pos:position pos:line="21" pos:column="42"/></name> <operator pos:line="21" pos:column="43">==<pos:position pos:line="21" pos:column="45"/></operator> <name pos:line="21" pos:column="46">NULL<pos:position pos:line="21" pos:column="50"/></name></expr>)<pos:position pos:line="21" pos:column="51"/></condition>;<pos:position pos:line="21" pos:column="52"/></do>
  <return pos:line="22" pos:column="3">return <expr><name pos:line="22" pos:column="10">cur_state<pos:position pos:line="22" pos:column="19"/></name></expr>;<pos:position pos:line="22" pos:column="20"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
