<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3552_git-2.7.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">diagnose_invalid_sha1_path<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">prefix<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
				       <parameter><decl><type><specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier> <name pos:line="2" pos:column="46">char<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">filename<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>,
				       <parameter><decl><type><specifier pos:line="3" pos:column="40">const<pos:position pos:line="3" pos:column="45"/></specifier> <name pos:line="3" pos:column="46">unsigned<pos:position pos:line="3" pos:column="54"/></name> <name pos:line="3" pos:column="55">char<pos:position pos:line="3" pos:column="59"/></name> <modifier pos:line="3" pos:column="60">*<pos:position pos:line="3" pos:column="61"/></modifier></type><name pos:line="3" pos:column="61">tree_sha1<pos:position pos:line="3" pos:column="70"/></name></decl></parameter>,
				       <parameter><decl><type><specifier pos:line="4" pos:column="40">const<pos:position pos:line="4" pos:column="45"/></specifier> <name pos:line="4" pos:column="46">char<pos:position pos:line="4" pos:column="50"/></name> <modifier pos:line="4" pos:column="51">*<pos:position pos:line="4" pos:column="52"/></modifier></type><name pos:line="4" pos:column="52">object_name<pos:position pos:line="4" pos:column="63"/></name></decl></parameter>,
				       <parameter><decl><type><name pos:line="5" pos:column="40">int<pos:position pos:line="5" pos:column="43"/></name></type> <name pos:line="5" pos:column="44">object_name_len<pos:position pos:line="5" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="60"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">char<pos:position pos:line="7" pos:column="22"/></name></type> <name><name pos:line="7" pos:column="23">sha1<pos:position pos:line="7" pos:column="27"/></name><index pos:line="7" pos:column="27">[<expr><literal type="number" pos:line="7" pos:column="28">20<pos:position pos:line="7" pos:column="30"/></literal></expr>]<pos:position pos:line="7" pos:column="31"/></index></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">mode<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">prefix<pos:position pos:line="10" pos:column="20"/></name></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">prefix<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">=<pos:position pos:line="11" pos:column="25"/></operator> <literal type="string" pos:line="11" pos:column="26">""<pos:position pos:line="11" pos:column="28"/></literal></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">file_exists<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">filename<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="35"/></condition><then pos:line="13" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">die<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><literal type="string" pos:line="14" pos:column="21">"Path '%s' exists on disk, but not in '%.*s'."<pos:position pos:line="14" pos:column="67"/></literal></expr></argument>,
		    <argument><expr><name pos:line="15" pos:column="21">filename<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="31">object_name_len<pos:position pos:line="15" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="48">object_name<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="61"/></expr_stmt></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">errno<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">==<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">ENOENT<pos:position pos:line="16" pos:column="28"/></name> <operator pos:line="16" pos:column="29">||<pos:position pos:line="16" pos:column="31"/></operator> <name pos:line="16" pos:column="32">errno<pos:position pos:line="16" pos:column="37"/></name> <operator pos:line="16" pos:column="38">==<pos:position pos:line="16" pos:column="40"/></operator> <name pos:line="16" pos:column="41">ENOTDIR<pos:position pos:line="16" pos:column="48"/></name></expr>)<pos:position pos:line="16" pos:column="49"/></condition><then pos:line="16" pos:column="49"> <block pos:line="16" pos:column="50">{
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">char<pos:position pos:line="17" pos:column="21"/></name> <modifier pos:line="17" pos:column="22">*<pos:position pos:line="17" pos:column="23"/></modifier></type><name pos:line="17" pos:column="23">fullname<pos:position pos:line="17" pos:column="31"/></name> <init pos:line="17" pos:column="32">= <expr><call><name pos:line="17" pos:column="34">xstrfmt<pos:position pos:line="17" pos:column="41"/></name><argument_list pos:line="17" pos:column="41">(<argument><expr><literal type="string" pos:line="17" pos:column="42">"%s%s"<pos:position pos:line="17" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="50">prefix<pos:position pos:line="17" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="58">filename<pos:position pos:line="17" pos:column="66"/></name></expr></argument>)<pos:position pos:line="17" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="68"/></decl_stmt>

		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><operator pos:line="19" pos:column="21">!<pos:position pos:line="19" pos:column="22"/></operator><call><name pos:line="19" pos:column="22">get_tree_entry<pos:position pos:line="19" pos:column="36"/></name><argument_list pos:line="19" pos:column="36">(<argument><expr><name pos:line="19" pos:column="37">tree_sha1<pos:position pos:line="19" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="48">fullname<pos:position pos:line="19" pos:column="56"/></name></expr></argument>,
				    <argument><expr><name pos:line="20" pos:column="37">sha1<pos:position pos:line="20" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="43">&amp;<pos:position pos:line="20" pos:column="48"/></operator><name pos:line="20" pos:column="44">mode<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50"> <block pos:line="20" pos:column="51">{
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">die<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><literal type="string" pos:line="21" pos:column="29">"Path '%s' exists, but not '%s'.\n"<pos:position pos:line="21" pos:column="64"/></literal>
			    <literal type="string" pos:line="22" pos:column="29">"Did you mean '%.*s:%s' aka '%.*s:./%s'?"<pos:position pos:line="22" pos:column="70"/></literal></expr></argument>,
			    <argument><expr><name pos:line="23" pos:column="29">fullname<pos:position pos:line="23" pos:column="37"/></name></expr></argument>,
			    <argument><expr><name pos:line="24" pos:column="29">filename<pos:position pos:line="24" pos:column="37"/></name></expr></argument>,
			    <argument><expr><name pos:line="25" pos:column="29">object_name_len<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">object_name<pos:position pos:line="25" pos:column="57"/></name></expr></argument>,
			    <argument><expr><name pos:line="26" pos:column="29">fullname<pos:position pos:line="26" pos:column="37"/></name></expr></argument>,
			    <argument><expr><name pos:line="27" pos:column="29">object_name_len<pos:position pos:line="27" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="46">object_name<pos:position pos:line="27" pos:column="57"/></name></expr></argument>,
			    <argument><expr><name pos:line="28" pos:column="29">filename<pos:position pos:line="28" pos:column="37"/></name></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">die<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><literal type="string" pos:line="30" pos:column="21">"Path '%s' does not exist in '%.*s'"<pos:position pos:line="30" pos:column="57"/></literal></expr></argument>,
		    <argument><expr><name pos:line="31" pos:column="21">filename<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="31">object_name_len<pos:position pos:line="31" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="48">object_name<pos:position pos:line="31" pos:column="59"/></name></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
