<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3177_git-2.14.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">spanhash_top<pos:position pos:line="1" pos:column="27"/></name></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">spanhash_rehash<pos:position pos:line="1" pos:column="44"/></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">spanhash_top<pos:position pos:line="1" pos:column="64"/></name></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">orig<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	struct <expr_stmt><expr><name pos:line="3" pos:column="16">spanhash_top<pos:position pos:line="3" pos:column="28"/></name> <operator pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></operator><operator pos:line="3" pos:column="30">new<pos:position pos:line="3" pos:column="33"/></operator></expr>;<pos:position pos:line="3" pos:column="34"/></expr_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">osz<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">1<pos:position pos:line="5" pos:column="20"/></literal> <operator pos:line="5" pos:column="21">&lt;&lt;<pos:position pos:line="5" pos:column="29"/></operator> <name><name pos:line="5" pos:column="24">orig<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">-&gt;<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="30">alloc_log2<pos:position pos:line="5" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">sz<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><name pos:line="6" pos:column="18">osz<pos:position pos:line="6" pos:column="21"/></name> <operator pos:line="6" pos:column="22">&lt;&lt;<pos:position pos:line="6" pos:column="30"/></operator> <literal type="number" pos:line="6" pos:column="25">1<pos:position pos:line="6" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><operator pos:line="8" pos:column="9">new<pos:position pos:line="8" pos:column="12"/></operator> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <call><name pos:line="8" pos:column="15">xmalloc<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><call><name pos:line="8" pos:column="23">st_add<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><sizeof pos:line="8" pos:column="30">sizeof<argument_list pos:line="8" pos:column="36">(<argument><expr><operator pos:line="8" pos:column="37">*<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="38">orig<pos:position pos:line="8" pos:column="42"/></name></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></sizeof></expr></argument>,
			     <argument><expr><call><name pos:line="9" pos:column="30">st_mult<pos:position pos:line="9" pos:column="37"/></name><argument_list pos:line="9" pos:column="37">(<argument><expr><sizeof pos:line="9" pos:column="38">sizeof<argument_list pos:line="9" pos:column="44">(<argument><expr pos:line="9" pos:column="45">struct <name pos:line="9" pos:column="52">spanhash<pos:position pos:line="9" pos:column="60"/></name></expr></argument>)<pos:position pos:line="9" pos:column="61"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="9" pos:column="63">sz<pos:position pos:line="9" pos:column="65"/></name></expr></argument>)<pos:position pos:line="9" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="69"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="10" pos:column="9">new<pos:position pos:line="10" pos:column="12"/></operator><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">alloc_log2<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">=<pos:position pos:line="10" pos:column="26"/></operator> <name><name pos:line="10" pos:column="27">orig<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">alloc_log2<pos:position pos:line="10" pos:column="43"/></name></name> <operator pos:line="10" pos:column="44">+<pos:position pos:line="10" pos:column="45"/></operator> <literal type="number" pos:line="10" pos:column="46">1<pos:position pos:line="10" pos:column="47"/></literal></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="11" pos:column="9">new<pos:position pos:line="11" pos:column="12"/></operator><operator pos:line="11" pos:column="12">-&gt;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="14">free<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <call><name pos:line="11" pos:column="21">INITIAL_FREE<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><operator pos:line="11" pos:column="34">new<pos:position pos:line="11" pos:column="37"/></operator><operator pos:line="11" pos:column="37">-&gt;<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="39">alloc_log2<pos:position pos:line="11" pos:column="49"/></name></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">memset<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><operator pos:line="12" pos:column="16">new<pos:position pos:line="12" pos:column="19"/></operator><operator pos:line="12" pos:column="19">-&gt;<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="21">data<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="27">0<pos:position pos:line="12" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="30">sizeof<argument_list pos:line="12" pos:column="36">(<argument><expr pos:line="12" pos:column="37">struct <name pos:line="12" pos:column="44">spanhash<pos:position pos:line="12" pos:column="52"/></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></sizeof> <operator pos:line="12" pos:column="54">*<pos:position pos:line="12" pos:column="55"/></operator> <name pos:line="12" pos:column="56">sz<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="60"/></expr_stmt>
	<for pos:line="13" pos:column="9">for <control pos:line="13" pos:column="13">(<init><expr><name pos:line="13" pos:column="14">i<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr>;<pos:position pos:line="13" pos:column="20"/></init> <condition><expr><name pos:line="13" pos:column="21">i<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">&lt;<pos:position pos:line="13" pos:column="27"/></operator> <name pos:line="13" pos:column="25">osz<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></condition> <incr><expr><name pos:line="13" pos:column="30">i<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">++<pos:position pos:line="13" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="34"/></control> <block pos:line="13" pos:column="35">{
		<decl_stmt><decl><type><name><name pos:line="14" pos:column="17">struct<pos:position pos:line="14" pos:column="23"/></name> <name pos:line="14" pos:column="24">spanhash<pos:position pos:line="14" pos:column="32"/></name></name> <modifier pos:line="14" pos:column="33">*<pos:position pos:line="14" pos:column="34"/></modifier></type><name pos:line="14" pos:column="34">o<pos:position pos:line="14" pos:column="35"/></name> <init pos:line="14" pos:column="36">= <expr><operator pos:line="14" pos:column="38">&amp;<pos:position pos:line="14" pos:column="43"/></operator><operator pos:line="14" pos:column="39">(<pos:position pos:line="14" pos:column="40"/></operator><name><name pos:line="14" pos:column="40">orig<pos:position pos:line="14" pos:column="44"/></name><operator pos:line="14" pos:column="44">-&gt;<pos:position pos:line="14" pos:column="49"/></operator><name pos:line="14" pos:column="46">data<pos:position pos:line="14" pos:column="50"/></name><index pos:line="14" pos:column="50">[<expr><name pos:line="14" pos:column="51">i<pos:position pos:line="14" pos:column="52"/></name></expr>]<pos:position pos:line="14" pos:column="53"/></index></name><operator pos:line="14" pos:column="53">)<pos:position pos:line="14" pos:column="54"/></operator></expr></init></decl>;<pos:position pos:line="14" pos:column="55"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">int<pos:position pos:line="15" pos:column="20"/></name></type> <name pos:line="15" pos:column="21">bucket<pos:position pos:line="15" pos:column="27"/></name></decl>;<pos:position pos:line="15" pos:column="28"/></decl_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><name><name pos:line="16" pos:column="22">o<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">-&gt;<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="25">cnt<pos:position pos:line="16" pos:column="28"/></name></name></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29">
			<block type="pseudo"><continue pos:line="17" pos:column="25">continue;<pos:position pos:line="17" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="18" pos:column="17">bucket<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <name><name pos:line="18" pos:column="26">o<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">-&gt;<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="29">hashval<pos:position pos:line="18" pos:column="36"/></name></name> <operator pos:line="18" pos:column="37">&amp;<pos:position pos:line="18" pos:column="42"/></operator> <operator pos:line="18" pos:column="39">(<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="40">sz<pos:position pos:line="18" pos:column="42"/></name> <operator pos:line="18" pos:column="43">-<pos:position pos:line="18" pos:column="44"/></operator> <literal type="number" pos:line="18" pos:column="45">1<pos:position pos:line="18" pos:column="46"/></literal><operator pos:line="18" pos:column="46">)<pos:position pos:line="18" pos:column="47"/></operator></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
		<while pos:line="19" pos:column="17">while <condition pos:line="19" pos:column="23">(<expr><literal type="number" pos:line="19" pos:column="24">1<pos:position pos:line="19" pos:column="25"/></literal></expr>)<pos:position pos:line="19" pos:column="26"/></condition> <block pos:line="19" pos:column="27">{
			<decl_stmt><decl><type><name><name pos:line="20" pos:column="25">struct<pos:position pos:line="20" pos:column="31"/></name> <name pos:line="20" pos:column="32">spanhash<pos:position pos:line="20" pos:column="40"/></name></name> <modifier pos:line="20" pos:column="41">*<pos:position pos:line="20" pos:column="42"/></modifier></type><name pos:line="20" pos:column="42">h<pos:position pos:line="20" pos:column="43"/></name> <init pos:line="20" pos:column="44">= <expr><operator pos:line="20" pos:column="46">&amp;<pos:position pos:line="20" pos:column="51"/></operator><operator pos:line="20" pos:column="47">(<pos:position pos:line="20" pos:column="48"/></operator><operator pos:line="20" pos:column="48">new<pos:position pos:line="20" pos:column="51"/></operator><operator pos:line="20" pos:column="51">-&gt;<pos:position pos:line="20" pos:column="56"/></operator><name><name pos:line="20" pos:column="53">data<pos:position pos:line="20" pos:column="57"/></name><index pos:line="20" pos:column="57">[<expr><name pos:line="20" pos:column="58">bucket<pos:position pos:line="20" pos:column="64"/></name><operator pos:line="20" pos:column="64">++<pos:position pos:line="20" pos:column="66"/></operator></expr>]<pos:position pos:line="20" pos:column="67"/></index></name><operator pos:line="20" pos:column="67">)<pos:position pos:line="20" pos:column="68"/></operator></expr></init></decl>;<pos:position pos:line="20" pos:column="69"/></decl_stmt>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><operator pos:line="21" pos:column="29">!<pos:position pos:line="21" pos:column="30"/></operator><name><name pos:line="21" pos:column="30">h<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">-&gt;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="33">cnt<pos:position pos:line="21" pos:column="36"/></name></name></expr>)<pos:position pos:line="21" pos:column="37"/></condition><then pos:line="21" pos:column="37"> <block pos:line="21" pos:column="38">{
				<expr_stmt><expr><name><name pos:line="22" pos:column="33">h<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">-&gt;<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="36">hashval<pos:position pos:line="22" pos:column="43"/></name></name> <operator pos:line="22" pos:column="44">=<pos:position pos:line="22" pos:column="45"/></operator> <name><name pos:line="22" pos:column="46">o<pos:position pos:line="22" pos:column="47"/></name><operator pos:line="22" pos:column="47">-&gt;<pos:position pos:line="22" pos:column="52"/></operator><name pos:line="22" pos:column="49">hashval<pos:position pos:line="22" pos:column="56"/></name></name></expr>;<pos:position pos:line="22" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="23" pos:column="33">h<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">-&gt;<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="36">cnt<pos:position pos:line="23" pos:column="39"/></name></name> <operator pos:line="23" pos:column="40">=<pos:position pos:line="23" pos:column="41"/></operator> <name><name pos:line="23" pos:column="42">o<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">-&gt;<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="45">cnt<pos:position pos:line="23" pos:column="48"/></name></name></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt>
				<expr_stmt><expr><operator pos:line="24" pos:column="33">new<pos:position pos:line="24" pos:column="36"/></operator><operator pos:line="24" pos:column="36">-&gt;<pos:position pos:line="24" pos:column="41"/></operator><name pos:line="24" pos:column="38">free<pos:position pos:line="24" pos:column="42"/></name><operator pos:line="24" pos:column="42">--<pos:position pos:line="24" pos:column="44"/></operator></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
				<break pos:line="25" pos:column="33">break;<pos:position pos:line="25" pos:column="39"/></break>
			}<pos:position pos:line="26" pos:column="26"/></block></then></if>
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><name pos:line="27" pos:column="29">sz<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">&lt;=<pos:position pos:line="27" pos:column="37"/></operator> <name pos:line="27" pos:column="35">bucket<pos:position pos:line="27" pos:column="41"/></name></expr>)<pos:position pos:line="27" pos:column="42"/></condition><then pos:line="27" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="33">bucket<pos:position pos:line="28" pos:column="39"/></name> <operator pos:line="28" pos:column="40">=<pos:position pos:line="28" pos:column="41"/></operator> <literal type="number" pos:line="28" pos:column="42">0<pos:position pos:line="28" pos:column="43"/></literal></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt></block></then></if>
		}<pos:position pos:line="29" pos:column="18"/></block></while>
	}<pos:position pos:line="30" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">free<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name pos:line="31" pos:column="14">orig<pos:position pos:line="31" pos:column="18"/></name></expr></argument>)<pos:position pos:line="31" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="20"/></expr_stmt>
	<return pos:line="32" pos:column="9">return <expr><operator pos:line="32" pos:column="16">new<pos:position pos:line="32" pos:column="19"/></operator></expr>;<pos:position pos:line="32" pos:column="20"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
