<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2179.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">log_ref_setup<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">refname<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">strbuf<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">sb_logfile<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">logfd<pos:position pos:line="3" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="20">oflags<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">O_APPEND<pos:position pos:line="3" pos:column="37"/></name> <operator pos:line="3" pos:column="38">|<pos:position pos:line="3" pos:column="39"/></operator> <name pos:line="3" pos:column="40">O_WRONLY<pos:position pos:line="3" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">logfile<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">strbuf_git_path<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">sb_logfile<pos:position pos:line="6" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="37">"logs/%s"<pos:position pos:line="6" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="48">refname<pos:position pos:line="6" pos:column="55"/></name></expr></argument>)<pos:position pos:line="6" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><name pos:line="7" pos:column="9">logfile<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">=<pos:position pos:line="7" pos:column="18"/></operator> <name><name pos:line="7" pos:column="19">sb_logfile<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">-&gt;<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="31">buf<pos:position pos:line="7" pos:column="34"/></name></name></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>
	<comment type="block" pos:line="8" pos:column="9">/* make sure the rest of the function can't change "logfile" */</comment>
	<expr_stmt><expr><name pos:line="9" pos:column="9">sb_logfile<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <name pos:line="9" pos:column="22">NULL<pos:position pos:line="9" pos:column="26"/></name></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">log_all_ref_updates<pos:position pos:line="10" pos:column="32"/></name> <operator pos:line="10" pos:column="33">&amp;&amp;<pos:position pos:line="10" pos:column="43"/></operator>
	    <operator pos:line="11" pos:column="13">(<pos:position pos:line="11" pos:column="14"/></operator><call><name pos:line="11" pos:column="14">starts_with<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">refname<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="35">"refs/heads/"<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call> <operator pos:line="11" pos:column="50">||<pos:position pos:line="11" pos:column="52"/></operator>
	     <call><name pos:line="12" pos:column="14">starts_with<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">refname<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="35">"refs/remotes/"<pos:position pos:line="12" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call> <operator pos:line="12" pos:column="52">||<pos:position pos:line="12" pos:column="54"/></operator>
	     <call><name pos:line="13" pos:column="14">starts_with<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">refname<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="35">"refs/notes/"<pos:position pos:line="13" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call> <operator pos:line="13" pos:column="50">||<pos:position pos:line="13" pos:column="52"/></operator>
	     <operator pos:line="14" pos:column="14">!<pos:position pos:line="14" pos:column="15"/></operator><call><name pos:line="14" pos:column="15">strcmp<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">refname<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="31">"HEAD"<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call><operator pos:line="14" pos:column="38">)<pos:position pos:line="14" pos:column="39"/></operator></expr>)<pos:position pos:line="14" pos:column="40"/></condition><then pos:line="14" pos:column="40"> <block pos:line="14" pos:column="41">{
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">safe_create_leading_directories<pos:position pos:line="15" pos:column="52"/></name><argument_list pos:line="15" pos:column="52">(<argument><expr><name pos:line="15" pos:column="53">logfile<pos:position pos:line="15" pos:column="60"/></name></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call> <operator pos:line="15" pos:column="62">&lt;<pos:position pos:line="15" pos:column="66"/></operator> <literal type="number" pos:line="15" pos:column="64">0<pos:position pos:line="15" pos:column="65"/></literal></expr>)<pos:position pos:line="15" pos:column="66"/></condition><then pos:line="15" pos:column="66"> <block pos:line="15" pos:column="67">{
			<decl_stmt><decl><type><name pos:line="16" pos:column="25">int<pos:position pos:line="16" pos:column="28"/></name></type> <name pos:line="16" pos:column="29">save_errno<pos:position pos:line="16" pos:column="39"/></name> <init pos:line="16" pos:column="40">= <expr><name pos:line="16" pos:column="42">errno<pos:position pos:line="16" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="48"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">error<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><literal type="string" pos:line="17" pos:column="31">"unable to create directory for %s"<pos:position pos:line="17" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="68">logfile<pos:position pos:line="17" pos:column="75"/></name></expr></argument>)<pos:position pos:line="17" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="77"/></expr_stmt>
			<expr_stmt><expr><name pos:line="18" pos:column="25">errno<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">=<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="33">save_errno<pos:position pos:line="18" pos:column="43"/></name></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
			<return pos:line="19" pos:column="25">return <expr><operator pos:line="19" pos:column="32">-<pos:position pos:line="19" pos:column="33"/></operator><literal type="number" pos:line="19" pos:column="33">1<pos:position pos:line="19" pos:column="34"/></literal></expr>;<pos:position pos:line="19" pos:column="35"/></return>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="21" pos:column="17">oflags<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">|=<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="27">O_CREAT<pos:position pos:line="21" pos:column="34"/></name></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="24" pos:column="9">logfd<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <call><name pos:line="24" pos:column="17">open<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">logfile<pos:position pos:line="24" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="31">oflags<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="39">0666<pos:position pos:line="24" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">logfd<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">&lt;<pos:position pos:line="25" pos:column="23"/></operator> <literal type="number" pos:line="25" pos:column="21">0<pos:position pos:line="25" pos:column="22"/></literal></expr>)<pos:position pos:line="25" pos:column="23"/></condition><then pos:line="25" pos:column="23"> <block pos:line="25" pos:column="24">{
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><operator pos:line="26" pos:column="21">!<pos:position pos:line="26" pos:column="22"/></operator><operator pos:line="26" pos:column="22">(<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="23">oflags<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">&amp;<pos:position pos:line="26" pos:column="35"/></operator> <name pos:line="26" pos:column="32">O_CREAT<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">)<pos:position pos:line="26" pos:column="40"/></operator> <operator pos:line="26" pos:column="41">&amp;&amp;<pos:position pos:line="26" pos:column="51"/></operator> <operator pos:line="26" pos:column="44">(<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="45">errno<pos:position pos:line="26" pos:column="50"/></name> <operator pos:line="26" pos:column="51">==<pos:position pos:line="26" pos:column="53"/></operator> <name pos:line="26" pos:column="54">ENOENT<pos:position pos:line="26" pos:column="60"/></name> <operator pos:line="26" pos:column="61">||<pos:position pos:line="26" pos:column="63"/></operator> <name pos:line="26" pos:column="64">errno<pos:position pos:line="26" pos:column="69"/></name> <operator pos:line="26" pos:column="70">==<pos:position pos:line="26" pos:column="72"/></operator> <name pos:line="26" pos:column="73">EISDIR<pos:position pos:line="26" pos:column="79"/></name><operator pos:line="26" pos:column="79">)<pos:position pos:line="26" pos:column="80"/></operator></expr>)<pos:position pos:line="26" pos:column="81"/></condition><then pos:line="26" pos:column="81">
			<block type="pseudo"><return pos:line="27" pos:column="25">return <expr><literal type="number" pos:line="27" pos:column="32">0<pos:position pos:line="27" pos:column="33"/></literal></expr>;<pos:position pos:line="27" pos:column="34"/></return></block></then></if>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">errno<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">==<pos:position pos:line="29" pos:column="29"/></operator> <name pos:line="29" pos:column="30">EISDIR<pos:position pos:line="29" pos:column="36"/></name></expr>)<pos:position pos:line="29" pos:column="37"/></condition><then pos:line="29" pos:column="37"> <block pos:line="29" pos:column="38">{
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><call><name pos:line="30" pos:column="29">remove_empty_directories<pos:position pos:line="30" pos:column="53"/></name><argument_list pos:line="30" pos:column="53">(<argument><expr><name pos:line="30" pos:column="54">logfile<pos:position pos:line="30" pos:column="61"/></name></expr></argument>)<pos:position pos:line="30" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="63"/></condition><then pos:line="30" pos:column="63"> <block pos:line="30" pos:column="64">{
				<decl_stmt><decl><type><name pos:line="31" pos:column="33">int<pos:position pos:line="31" pos:column="36"/></name></type> <name pos:line="31" pos:column="37">save_errno<pos:position pos:line="31" pos:column="47"/></name> <init pos:line="31" pos:column="48">= <expr><name pos:line="31" pos:column="50">errno<pos:position pos:line="31" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="56"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="32" pos:column="33">error<pos:position pos:line="32" pos:column="38"/></name><argument_list pos:line="32" pos:column="38">(<argument><expr><literal type="string" pos:line="32" pos:column="39">"There are still logs under '%s'"<pos:position pos:line="32" pos:column="72"/></literal></expr></argument>,
				      <argument><expr><name pos:line="33" pos:column="39">logfile<pos:position pos:line="33" pos:column="46"/></name></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><name pos:line="34" pos:column="33">errno<pos:position pos:line="34" pos:column="38"/></name> <operator pos:line="34" pos:column="39">=<pos:position pos:line="34" pos:column="40"/></operator> <name pos:line="34" pos:column="41">save_errno<pos:position pos:line="34" pos:column="51"/></name></expr>;<pos:position pos:line="34" pos:column="52"/></expr_stmt>
				<return pos:line="35" pos:column="33">return <expr><operator pos:line="35" pos:column="40">-<pos:position pos:line="35" pos:column="41"/></operator><literal type="number" pos:line="35" pos:column="41">1<pos:position pos:line="35" pos:column="42"/></literal></expr>;<pos:position pos:line="35" pos:column="43"/></return>
			}<pos:position pos:line="36" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="37" pos:column="25">logfd<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">=<pos:position pos:line="37" pos:column="32"/></operator> <call><name pos:line="37" pos:column="33">open<pos:position pos:line="37" pos:column="37"/></name><argument_list pos:line="37" pos:column="37">(<argument><expr><name pos:line="37" pos:column="38">logfile<pos:position pos:line="37" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">oflags<pos:position pos:line="37" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="55">0666<pos:position pos:line="37" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="61"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>

		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">logfd<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">&lt;<pos:position pos:line="40" pos:column="31"/></operator> <literal type="number" pos:line="40" pos:column="29">0<pos:position pos:line="40" pos:column="30"/></literal></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31"> <block pos:line="40" pos:column="32">{
			<decl_stmt><decl><type><name pos:line="41" pos:column="25">int<pos:position pos:line="41" pos:column="28"/></name></type> <name pos:line="41" pos:column="29">save_errno<pos:position pos:line="41" pos:column="39"/></name> <init pos:line="41" pos:column="40">= <expr><name pos:line="41" pos:column="42">errno<pos:position pos:line="41" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="48"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">error<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><literal type="string" pos:line="42" pos:column="31">"Unable to append to %s: %s"<pos:position pos:line="42" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="61">logfile<pos:position pos:line="42" pos:column="68"/></name></expr></argument>,
			      <argument><expr><call><name pos:line="43" pos:column="31">strerror<pos:position pos:line="43" pos:column="39"/></name><argument_list pos:line="43" pos:column="39">(<argument><expr><name pos:line="43" pos:column="40">errno<pos:position pos:line="43" pos:column="45"/></name></expr></argument>)<pos:position pos:line="43" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name pos:line="44" pos:column="25">errno<pos:position pos:line="44" pos:column="30"/></name> <operator pos:line="44" pos:column="31">=<pos:position pos:line="44" pos:column="32"/></operator> <name pos:line="44" pos:column="33">save_errno<pos:position pos:line="44" pos:column="43"/></name></expr>;<pos:position pos:line="44" pos:column="44"/></expr_stmt>
			<return pos:line="45" pos:column="25">return <expr><operator pos:line="45" pos:column="32">-<pos:position pos:line="45" pos:column="33"/></operator><literal type="number" pos:line="45" pos:column="33">1<pos:position pos:line="45" pos:column="34"/></literal></expr>;<pos:position pos:line="45" pos:column="35"/></return>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if>
	}<pos:position pos:line="47" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="49" pos:column="9">adjust_shared_perm<pos:position pos:line="49" pos:column="27"/></name><argument_list pos:line="49" pos:column="27">(<argument><expr><name pos:line="49" pos:column="28">logfile<pos:position pos:line="49" pos:column="35"/></name></expr></argument>)<pos:position pos:line="49" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">close<pos:position pos:line="50" pos:column="14"/></name><argument_list pos:line="50" pos:column="14">(<argument><expr><name pos:line="50" pos:column="15">logfd<pos:position pos:line="50" pos:column="20"/></name></expr></argument>)<pos:position pos:line="50" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="22"/></expr_stmt>
	<return pos:line="51" pos:column="9">return <expr><literal type="number" pos:line="51" pos:column="16">0<pos:position pos:line="51" pos:column="17"/></literal></expr>;<pos:position pos:line="51" pos:column="18"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
