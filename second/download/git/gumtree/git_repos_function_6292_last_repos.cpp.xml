<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6292_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_object_list_from_stdin<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">void<pos:position pos:line="1" pos:column="45"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">line<pos:position pos:line="3" pos:column="18"/></name><index pos:line="3" pos:column="18">[<expr><literal type="number" pos:line="3" pos:column="19">40<pos:position pos:line="3" pos:column="21"/></literal> <operator pos:line="3" pos:column="22">+<pos:position pos:line="3" pos:column="23"/></operator> <literal type="number" pos:line="3" pos:column="24">1<pos:position pos:line="3" pos:column="25"/></literal> <operator pos:line="3" pos:column="26">+<pos:position pos:line="3" pos:column="27"/></operator> <name pos:line="3" pos:column="28">PATH_MAX<pos:position pos:line="3" pos:column="36"/></name> <operator pos:line="3" pos:column="37">+<pos:position pos:line="3" pos:column="38"/></operator> <literal type="number" pos:line="3" pos:column="39">2<pos:position pos:line="3" pos:column="40"/></literal></expr>]<pos:position pos:line="3" pos:column="41"/></index></name></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">sha1<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">20<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

	<for pos:line="6" pos:column="9">for <control pos:line="6" pos:column="13">(<init pos:line="6" pos:column="14">;<pos:position pos:line="6" pos:column="15"/></init><condition pos:line="6" pos:column="15">;<pos:position pos:line="6" pos:column="16"/></condition><incr/>)<pos:position pos:line="6" pos:column="17"/></control> <block pos:line="6" pos:column="18">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><operator pos:line="7" pos:column="21">!<pos:position pos:line="7" pos:column="22"/></operator><call><name pos:line="7" pos:column="22">fgets<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">line<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="34">sizeof<argument_list pos:line="7" pos:column="40">(<argument><expr><name pos:line="7" pos:column="41">line<pos:position pos:line="7" pos:column="45"/></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="7" pos:column="48">stdin<pos:position pos:line="7" pos:column="53"/></name></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="55"/></condition><then pos:line="7" pos:column="55"> <block pos:line="7" pos:column="56">{
			<if pos:line="8" pos:column="25">if <condition pos:line="8" pos:column="28">(<expr><call><name pos:line="8" pos:column="29">feof<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">stdin<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="41"/></condition><then pos:line="8" pos:column="41">
				<block type="pseudo"><break pos:line="9" pos:column="33">break;<pos:position pos:line="9" pos:column="39"/></break></block></then></if>
			<if pos:line="10" pos:column="25">if <condition pos:line="10" pos:column="28">(<expr><operator pos:line="10" pos:column="29">!<pos:position pos:line="10" pos:column="30"/></operator><call><name pos:line="10" pos:column="30">ferror<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name pos:line="10" pos:column="37">stdin<pos:position pos:line="10" pos:column="42"/></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="44"/></condition><then pos:line="10" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="33">die<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">(<argument><expr><literal type="string" pos:line="11" pos:column="37">"fgets returned NULL, not EOF, not error!"<pos:position pos:line="11" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="81"/></expr_stmt></block></then></if>
			<if pos:line="12" pos:column="25">if <condition pos:line="12" pos:column="28">(<expr><name pos:line="12" pos:column="29">errno<pos:position pos:line="12" pos:column="34"/></name> <operator pos:line="12" pos:column="35">!=<pos:position pos:line="12" pos:column="37"/></operator> <name pos:line="12" pos:column="38">EINTR<pos:position pos:line="12" pos:column="43"/></name></expr>)<pos:position pos:line="12" pos:column="44"/></condition><then pos:line="12" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="33">die_errno<pos:position pos:line="13" pos:column="42"/></name><argument_list pos:line="13" pos:column="42">(<argument><expr><literal type="string" pos:line="13" pos:column="43">"fgets"<pos:position pos:line="13" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">clearerr<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">stdin<pos:position pos:line="14" pos:column="39"/></name></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
			<continue pos:line="15" pos:column="25">continue;<pos:position pos:line="15" pos:column="34"/></continue>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name><name pos:line="17" pos:column="21">line<pos:position pos:line="17" pos:column="25"/></name><index pos:line="17" pos:column="25">[<expr><literal type="number" pos:line="17" pos:column="26">0<pos:position pos:line="17" pos:column="27"/></literal></expr>]<pos:position pos:line="17" pos:column="28"/></index></name> <operator pos:line="17" pos:column="29">==<pos:position pos:line="17" pos:column="31"/></operator> <literal type="char" pos:line="17" pos:column="32">'-'<pos:position pos:line="17" pos:column="35"/></literal></expr>)<pos:position pos:line="17" pos:column="36"/></condition><then pos:line="17" pos:column="36"> <block pos:line="17" pos:column="37">{
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><call><name pos:line="18" pos:column="29">get_sha1_hex<pos:position pos:line="18" pos:column="41"/></name><argument_list pos:line="18" pos:column="41">(<argument><expr><name pos:line="18" pos:column="42">line<pos:position pos:line="18" pos:column="46"/></name><operator pos:line="18" pos:column="46">+<pos:position pos:line="18" pos:column="47"/></operator><literal type="number" pos:line="18" pos:column="47">1<pos:position pos:line="18" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="50">sha1<pos:position pos:line="18" pos:column="54"/></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="56"/></condition><then pos:line="18" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="33">die<pos:position pos:line="19" pos:column="36"/></name><argument_list pos:line="19" pos:column="36">(<argument><expr><literal type="string" pos:line="19" pos:column="37">"expected edge sha1, got garbage:\n %s"<pos:position pos:line="19" pos:column="76"/></literal></expr></argument>,
				    <argument><expr><name pos:line="20" pos:column="37">line<pos:position pos:line="20" pos:column="41"/></name></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">add_preferred_base<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">sha1<pos:position pos:line="21" pos:column="48"/></name></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt>
			<continue pos:line="22" pos:column="25">continue;<pos:position pos:line="22" pos:column="34"/></continue>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><call><name pos:line="24" pos:column="21">get_sha1_hex<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">(<argument><expr><name pos:line="24" pos:column="34">line<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="40">sha1<pos:position pos:line="24" pos:column="44"/></name></expr></argument>)<pos:position pos:line="24" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="46"/></condition><then pos:line="24" pos:column="46">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">die<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><literal type="string" pos:line="25" pos:column="29">"expected sha1, got garbage:\n %s"<pos:position pos:line="25" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="65">line<pos:position pos:line="25" pos:column="69"/></name></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="71"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="27" pos:column="17">add_preferred_base_object<pos:position pos:line="27" pos:column="42"/></name><argument_list pos:line="27" pos:column="42">(<argument><expr><name pos:line="27" pos:column="43">line<pos:position pos:line="27" pos:column="47"/></name><operator pos:line="27" pos:column="47">+<pos:position pos:line="27" pos:column="48"/></operator><literal type="number" pos:line="27" pos:column="48">41<pos:position pos:line="27" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">add_object_entry<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">sha1<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="40">0<pos:position pos:line="28" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="43">line<pos:position pos:line="28" pos:column="47"/></name><operator pos:line="28" pos:column="47">+<pos:position pos:line="28" pos:column="48"/></operator><literal type="number" pos:line="28" pos:column="48">41<pos:position pos:line="28" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="52">0<pos:position pos:line="28" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="55"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></for>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
