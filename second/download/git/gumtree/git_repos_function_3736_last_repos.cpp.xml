<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3736_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">show_submodule_header<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">FILE<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">f<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">path<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">line_prefix<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="3" pos:column="17">struct<pos:position pos:line="3" pos:column="23"/></name> <name pos:line="3" pos:column="24">object_id<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">one<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="3" pos:column="40">struct<pos:position pos:line="3" pos:column="46"/></name> <name pos:line="3" pos:column="47">object_id<pos:position pos:line="3" pos:column="56"/></name></name> <modifier pos:line="3" pos:column="57">*<pos:position pos:line="3" pos:column="58"/></modifier></type><name pos:line="3" pos:column="58">two<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="4" pos:column="17">unsigned<pos:position pos:line="4" pos:column="25"/></name></type> <name pos:line="4" pos:column="26">dirty_submodule<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="4" pos:column="43">const<pos:position pos:line="4" pos:column="48"/></specifier> <name pos:line="4" pos:column="49">char<pos:position pos:line="4" pos:column="53"/></name> <modifier pos:line="4" pos:column="54">*<pos:position pos:line="4" pos:column="55"/></modifier></type><name pos:line="4" pos:column="55">meta<pos:position pos:line="4" pos:column="59"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="5" pos:column="17">const<pos:position pos:line="5" pos:column="22"/></specifier> <name pos:line="5" pos:column="23">char<pos:position pos:line="5" pos:column="27"/></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">reset<pos:position pos:line="5" pos:column="34"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="6" pos:column="17">struct<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">commit<pos:position pos:line="6" pos:column="30"/></name></name> <modifier pos:line="6" pos:column="31">*<pos:position pos:line="6" pos:column="32"/></modifier><modifier pos:line="6" pos:column="32">*<pos:position pos:line="6" pos:column="33"/></modifier></type><name pos:line="6" pos:column="33">left<pos:position pos:line="6" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="6" pos:column="39">struct<pos:position pos:line="6" pos:column="45"/></name> <name pos:line="6" pos:column="46">commit<pos:position pos:line="6" pos:column="52"/></name></name> <modifier pos:line="6" pos:column="53">*<pos:position pos:line="6" pos:column="54"/></modifier><modifier pos:line="6" pos:column="54">*<pos:position pos:line="6" pos:column="55"/></modifier></type><name pos:line="6" pos:column="55">right<pos:position pos:line="6" pos:column="60"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="7" pos:column="17">struct<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">commit_list<pos:position pos:line="7" pos:column="35"/></name></name> <modifier pos:line="7" pos:column="36">*<pos:position pos:line="7" pos:column="37"/></modifier><modifier pos:line="7" pos:column="37">*<pos:position pos:line="7" pos:column="38"/></modifier></type><name pos:line="7" pos:column="38">merge_bases<pos:position pos:line="7" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="7" pos:column="50"/></parameter_list>
<block pos:line="8" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">message<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><name pos:line="9" pos:column="31">NULL<pos:position pos:line="9" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">strbuf<pos:position pos:line="10" pos:column="22"/></name></name></type> <name pos:line="10" pos:column="23">sb<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><name pos:line="10" pos:column="28">STRBUF_INIT<pos:position pos:line="10" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">fast_forward<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><literal type="number" pos:line="11" pos:column="28">0<pos:position pos:line="11" pos:column="29"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="31">fast_backward<pos:position pos:line="11" pos:column="44"/></name> <init pos:line="11" pos:column="45">= <expr><literal type="number" pos:line="11" pos:column="47">0<pos:position pos:line="11" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="49"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">dirty_submodule<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">&amp;<pos:position pos:line="13" pos:column="34"/></operator> <name pos:line="13" pos:column="31">DIRTY_SUBMODULE_UNTRACKED<pos:position pos:line="13" pos:column="56"/></name></expr>)<pos:position pos:line="13" pos:column="57"/></condition><then pos:line="13" pos:column="57">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">fprintf<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">f<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="28">"%sSubmodule %s contains untracked content\n"<pos:position pos:line="14" pos:column="73"/></literal></expr></argument>,
			<argument><expr><name pos:line="15" pos:column="25">line_prefix<pos:position pos:line="15" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="38">path<pos:position pos:line="15" pos:column="42"/></name></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">dirty_submodule<pos:position pos:line="16" pos:column="28"/></name> <operator pos:line="16" pos:column="29">&amp;<pos:position pos:line="16" pos:column="34"/></operator> <name pos:line="16" pos:column="31">DIRTY_SUBMODULE_MODIFIED<pos:position pos:line="16" pos:column="55"/></name></expr>)<pos:position pos:line="16" pos:column="56"/></condition><then pos:line="16" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">fprintf<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">f<pos:position pos:line="17" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="28">"%sSubmodule %s contains modified content\n"<pos:position pos:line="17" pos:column="72"/></literal></expr></argument>,
			<argument><expr><name pos:line="18" pos:column="25">line_prefix<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="38">path<pos:position pos:line="18" pos:column="42"/></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">is_null_oid<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">one<pos:position pos:line="20" pos:column="28"/></name></expr></argument>)<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="30"/></condition><then pos:line="20" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="17">message<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <literal type="string" pos:line="21" pos:column="27">"(new submodule)"<pos:position pos:line="21" pos:column="44"/></literal></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt></block></then>
	<elseif pos:line="22" pos:column="9">else <if pos:line="22" pos:column="14">if <condition pos:line="22" pos:column="17">(<expr><call><name pos:line="22" pos:column="18">is_null_oid<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">two<pos:position pos:line="22" pos:column="33"/></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="35"/></condition><then pos:line="22" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">message<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">=<pos:position pos:line="23" pos:column="26"/></operator> <literal type="string" pos:line="23" pos:column="27">"(submodule deleted)"<pos:position pos:line="23" pos:column="48"/></literal></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">add_submodule_odb<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><name pos:line="25" pos:column="31">path<pos:position pos:line="25" pos:column="35"/></name></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="37"/></condition><then pos:line="25" pos:column="37"> <block pos:line="25" pos:column="38">{
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><operator pos:line="26" pos:column="21">!<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="22">message<pos:position pos:line="26" pos:column="29"/></name></expr>)<pos:position pos:line="26" pos:column="30"/></condition><then pos:line="26" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="25">message<pos:position pos:line="27" pos:column="32"/></name> <operator pos:line="27" pos:column="33">=<pos:position pos:line="27" pos:column="34"/></operator> <literal type="string" pos:line="27" pos:column="35">"(not initialized)"<pos:position pos:line="27" pos:column="54"/></literal></expr>;<pos:position pos:line="27" pos:column="55"/></expr_stmt></block></then></if>
		<goto pos:line="28" pos:column="17">goto <name pos:line="28" pos:column="22">output_header<pos:position pos:line="28" pos:column="35"/></name>;<pos:position pos:line="28" pos:column="36"/></goto>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="31" pos:column="9">/*
	 * Attempt to lookup the commit references, and determine if this is
	 * a fast forward or fast backwards update.
	 */</comment>
	<expr_stmt><expr><operator pos:line="35" pos:column="9">*<pos:position pos:line="35" pos:column="10"/></operator><name pos:line="35" pos:column="10">left<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <call><name pos:line="35" pos:column="17">lookup_commit_reference<pos:position pos:line="35" pos:column="40"/></name><argument_list pos:line="35" pos:column="40">(<argument><expr><name pos:line="35" pos:column="41">one<pos:position pos:line="35" pos:column="44"/></name></expr></argument>)<pos:position pos:line="35" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="36" pos:column="9">*<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">right<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <call><name pos:line="36" pos:column="18">lookup_commit_reference<pos:position pos:line="36" pos:column="41"/></name><argument_list pos:line="36" pos:column="41">(<argument><expr><name pos:line="36" pos:column="42">two<pos:position pos:line="36" pos:column="45"/></name></expr></argument>)<pos:position pos:line="36" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt>

	<comment type="block" pos:line="38" pos:column="9">/*
	 * Warn about missing commits in the submodule project, but only if
	 * they aren't null.
	 */</comment>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">(<pos:position pos:line="42" pos:column="14"/></operator><operator pos:line="42" pos:column="14">!<pos:position pos:line="42" pos:column="15"/></operator><call><name pos:line="42" pos:column="15">is_null_oid<pos:position pos:line="42" pos:column="26"/></name><argument_list pos:line="42" pos:column="26">(<argument><expr><name pos:line="42" pos:column="27">one<pos:position pos:line="42" pos:column="30"/></name></expr></argument>)<pos:position pos:line="42" pos:column="31"/></argument_list></call> <operator pos:line="42" pos:column="32">&amp;&amp;<pos:position pos:line="42" pos:column="42"/></operator> <operator pos:line="42" pos:column="35">!<pos:position pos:line="42" pos:column="36"/></operator><operator pos:line="42" pos:column="36">*<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="37">left<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">)<pos:position pos:line="42" pos:column="42"/></operator> <operator pos:line="42" pos:column="43">||<pos:position pos:line="42" pos:column="45"/></operator>
	     <operator pos:line="43" pos:column="14">(<pos:position pos:line="43" pos:column="15"/></operator><operator pos:line="43" pos:column="15">!<pos:position pos:line="43" pos:column="16"/></operator><call><name pos:line="43" pos:column="16">is_null_oid<pos:position pos:line="43" pos:column="27"/></name><argument_list pos:line="43" pos:column="27">(<argument><expr><name pos:line="43" pos:column="28">two<pos:position pos:line="43" pos:column="31"/></name></expr></argument>)<pos:position pos:line="43" pos:column="32"/></argument_list></call> <operator pos:line="43" pos:column="33">&amp;&amp;<pos:position pos:line="43" pos:column="43"/></operator> <operator pos:line="43" pos:column="36">!<pos:position pos:line="43" pos:column="37"/></operator><operator pos:line="43" pos:column="37">*<pos:position pos:line="43" pos:column="38"/></operator><name pos:line="43" pos:column="38">right<pos:position pos:line="43" pos:column="43"/></name><operator pos:line="43" pos:column="43">)<pos:position pos:line="43" pos:column="44"/></operator></expr>)<pos:position pos:line="43" pos:column="45"/></condition><then pos:line="43" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="17">message<pos:position pos:line="44" pos:column="24"/></name> <operator pos:line="44" pos:column="25">=<pos:position pos:line="44" pos:column="26"/></operator> <literal type="string" pos:line="44" pos:column="27">"(commits not present)"<pos:position pos:line="44" pos:column="50"/></literal></expr>;<pos:position pos:line="44" pos:column="51"/></expr_stmt></block></then></if>

	<expr_stmt><expr><operator pos:line="46" pos:column="9">*<pos:position pos:line="46" pos:column="10"/></operator><name pos:line="46" pos:column="10">merge_bases<pos:position pos:line="46" pos:column="21"/></name> <operator pos:line="46" pos:column="22">=<pos:position pos:line="46" pos:column="23"/></operator> <call><name pos:line="46" pos:column="24">get_merge_bases<pos:position pos:line="46" pos:column="39"/></name><argument_list pos:line="46" pos:column="39">(<argument><expr><operator pos:line="46" pos:column="40">*<pos:position pos:line="46" pos:column="41"/></operator><name pos:line="46" pos:column="41">left<pos:position pos:line="46" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="47">*<pos:position pos:line="46" pos:column="48"/></operator><name pos:line="46" pos:column="48">right<pos:position pos:line="46" pos:column="53"/></name></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">*<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="14">merge_bases<pos:position pos:line="47" pos:column="25"/></name></expr>)<pos:position pos:line="47" pos:column="26"/></condition><then pos:line="47" pos:column="26"> <block pos:line="47" pos:column="27">{
		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><name><operator pos:line="48" pos:column="21">(<pos:position pos:line="48" pos:column="22"/></operator><operator pos:line="48" pos:column="22">*<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="23">merge_bases<pos:position pos:line="48" pos:column="34"/></name><operator pos:line="48" pos:column="34">)<pos:position pos:line="48" pos:column="35"/></operator><operator pos:line="48" pos:column="35">-&gt;<pos:position pos:line="48" pos:column="40"/></operator><name pos:line="48" pos:column="37">item<pos:position pos:line="48" pos:column="41"/></name></name> <operator pos:line="48" pos:column="42">==<pos:position pos:line="48" pos:column="44"/></operator> <operator pos:line="48" pos:column="45">*<pos:position pos:line="48" pos:column="46"/></operator><name pos:line="48" pos:column="46">left<pos:position pos:line="48" pos:column="50"/></name></expr>)<pos:position pos:line="48" pos:column="51"/></condition><then pos:line="48" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="25">fast_forward<pos:position pos:line="49" pos:column="37"/></name> <operator pos:line="49" pos:column="38">=<pos:position pos:line="49" pos:column="39"/></operator> <literal type="number" pos:line="49" pos:column="40">1<pos:position pos:line="49" pos:column="41"/></literal></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt></block></then>
		<elseif pos:line="50" pos:column="17">else <if pos:line="50" pos:column="22">if <condition pos:line="50" pos:column="25">(<expr><name><operator pos:line="50" pos:column="26">(<pos:position pos:line="50" pos:column="27"/></operator><operator pos:line="50" pos:column="27">*<pos:position pos:line="50" pos:column="28"/></operator><name pos:line="50" pos:column="28">merge_bases<pos:position pos:line="50" pos:column="39"/></name><operator pos:line="50" pos:column="39">)<pos:position pos:line="50" pos:column="40"/></operator><operator pos:line="50" pos:column="40">-&gt;<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="42">item<pos:position pos:line="50" pos:column="46"/></name></name> <operator pos:line="50" pos:column="47">==<pos:position pos:line="50" pos:column="49"/></operator> <operator pos:line="50" pos:column="50">*<pos:position pos:line="50" pos:column="51"/></operator><name pos:line="50" pos:column="51">right<pos:position pos:line="50" pos:column="56"/></name></expr>)<pos:position pos:line="50" pos:column="57"/></condition><then pos:line="50" pos:column="57">
			<block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="25">fast_backward<pos:position pos:line="51" pos:column="38"/></name> <operator pos:line="51" pos:column="39">=<pos:position pos:line="51" pos:column="40"/></operator> <literal type="number" pos:line="51" pos:column="41">1<pos:position pos:line="51" pos:column="42"/></literal></expr>;<pos:position pos:line="51" pos:column="43"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><operator pos:line="54" pos:column="13">!<pos:position pos:line="54" pos:column="14"/></operator><call><name pos:line="54" pos:column="14">oidcmp<pos:position pos:line="54" pos:column="20"/></name><argument_list pos:line="54" pos:column="20">(<argument><expr><name pos:line="54" pos:column="21">one<pos:position pos:line="54" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="26">two<pos:position pos:line="54" pos:column="29"/></name></expr></argument>)<pos:position pos:line="54" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="31"/></condition><then pos:line="54" pos:column="31"> <block pos:line="54" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">strbuf_release<pos:position pos:line="55" pos:column="31"/></name><argument_list pos:line="55" pos:column="31">(<argument><expr><operator pos:line="55" pos:column="32">&amp;<pos:position pos:line="55" pos:column="37"/></operator><name pos:line="55" pos:column="33">sb<pos:position pos:line="55" pos:column="35"/></name></expr></argument>)<pos:position pos:line="55" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="37"/></expr_stmt>
		<return pos:line="56" pos:column="17">return;<pos:position pos:line="56" pos:column="24"/></return>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>

<label><name pos:line="59" pos:column="1">output_header<pos:position pos:line="59" pos:column="14"/></name>:<pos:position pos:line="59" pos:column="15"/></label>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">strbuf_addf<pos:position pos:line="60" pos:column="20"/></name><argument_list pos:line="60" pos:column="20">(<argument><expr><operator pos:line="60" pos:column="21">&amp;<pos:position pos:line="60" pos:column="26"/></operator><name pos:line="60" pos:column="22">sb<pos:position pos:line="60" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="26">"%s%sSubmodule %s "<pos:position pos:line="60" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="47">line_prefix<pos:position pos:line="60" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="60">meta<pos:position pos:line="60" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="66">path<pos:position pos:line="60" pos:column="70"/></name></expr></argument>)<pos:position pos:line="60" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="72"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">strbuf_add_unique_abbrev<pos:position pos:line="61" pos:column="33"/></name><argument_list pos:line="61" pos:column="33">(<argument><expr><operator pos:line="61" pos:column="34">&amp;<pos:position pos:line="61" pos:column="39"/></operator><name pos:line="61" pos:column="35">sb<pos:position pos:line="61" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="39">one<pos:position pos:line="61" pos:column="42"/></name><operator pos:line="61" pos:column="42">-&gt;<pos:position pos:line="61" pos:column="47"/></operator><name pos:line="61" pos:column="44">hash<pos:position pos:line="61" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="50">DEFAULT_ABBREV<pos:position pos:line="61" pos:column="64"/></name></expr></argument>)<pos:position pos:line="61" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="66"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">strbuf_addstr<pos:position pos:line="62" pos:column="22"/></name><argument_list pos:line="62" pos:column="22">(<argument><expr><operator pos:line="62" pos:column="23">&amp;<pos:position pos:line="62" pos:column="28"/></operator><name pos:line="62" pos:column="24">sb<pos:position pos:line="62" pos:column="26"/></name></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="62" pos:column="28">(<pos:position pos:line="62" pos:column="29"/></operator><name pos:line="62" pos:column="29">fast_backward<pos:position pos:line="62" pos:column="42"/></name> <operator pos:line="62" pos:column="43">||<pos:position pos:line="62" pos:column="45"/></operator> <name pos:line="62" pos:column="46">fast_forward<pos:position pos:line="62" pos:column="58"/></name><operator pos:line="62" pos:column="58">)<pos:position pos:line="62" pos:column="59"/></operator></expr> ?<pos:position pos:line="62" pos:column="61"/></condition><then pos:line="62" pos:column="61"> <expr><literal type="string" pos:line="62" pos:column="62">".."<pos:position pos:line="62" pos:column="66"/></literal></expr> <pos:position pos:line="62" pos:column="67"/></then><else pos:line="62" pos:column="67">: <expr><literal type="string" pos:line="62" pos:column="69">"..."<pos:position pos:line="62" pos:column="74"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="62" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="76"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="63" pos:column="9">strbuf_add_unique_abbrev<pos:position pos:line="63" pos:column="33"/></name><argument_list pos:line="63" pos:column="33">(<argument><expr><operator pos:line="63" pos:column="34">&amp;<pos:position pos:line="63" pos:column="39"/></operator><name pos:line="63" pos:column="35">sb<pos:position pos:line="63" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="39">two<pos:position pos:line="63" pos:column="42"/></name><operator pos:line="63" pos:column="42">-&gt;<pos:position pos:line="63" pos:column="47"/></operator><name pos:line="63" pos:column="44">hash<pos:position pos:line="63" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="50">DEFAULT_ABBREV<pos:position pos:line="63" pos:column="64"/></name></expr></argument>)<pos:position pos:line="63" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="66"/></expr_stmt>
	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name pos:line="64" pos:column="13">message<pos:position pos:line="64" pos:column="20"/></name></expr>)<pos:position pos:line="64" pos:column="21"/></condition><then pos:line="64" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="17">strbuf_addf<pos:position pos:line="65" pos:column="28"/></name><argument_list pos:line="65" pos:column="28">(<argument><expr><operator pos:line="65" pos:column="29">&amp;<pos:position pos:line="65" pos:column="34"/></operator><name pos:line="65" pos:column="30">sb<pos:position pos:line="65" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="34">" %s%s\n"<pos:position pos:line="65" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="45">message<pos:position pos:line="65" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="54">reset<pos:position pos:line="65" pos:column="59"/></name></expr></argument>)<pos:position pos:line="65" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="61"/></expr_stmt></block></then>
	<else pos:line="66" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="17">strbuf_addf<pos:position pos:line="67" pos:column="28"/></name><argument_list pos:line="67" pos:column="28">(<argument><expr><operator pos:line="67" pos:column="29">&amp;<pos:position pos:line="67" pos:column="34"/></operator><name pos:line="67" pos:column="30">sb<pos:position pos:line="67" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="34">"%s:%s\n"<pos:position pos:line="67" pos:column="43"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="67" pos:column="45">fast_backward<pos:position pos:line="67" pos:column="58"/></name></expr> ?<pos:position pos:line="67" pos:column="60"/></condition><then pos:line="67" pos:column="60"> <expr><literal type="string" pos:line="67" pos:column="61">" (rewind)"<pos:position pos:line="67" pos:column="72"/></literal></expr> <pos:position pos:line="67" pos:column="73"/></then><else pos:line="67" pos:column="73">: <expr><literal type="string" pos:line="67" pos:column="75">""<pos:position pos:line="67" pos:column="77"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="67" pos:column="79">reset<pos:position pos:line="67" pos:column="84"/></name></expr></argument>)<pos:position pos:line="67" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="86"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="68" pos:column="9">fwrite<pos:position pos:line="68" pos:column="15"/></name><argument_list pos:line="68" pos:column="15">(<argument><expr><name><name pos:line="68" pos:column="16">sb<pos:position pos:line="68" pos:column="18"/></name><operator pos:line="68" pos:column="18">.<pos:position pos:line="68" pos:column="19"/></operator><name pos:line="68" pos:column="19">buf<pos:position pos:line="68" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="24">sb<pos:position pos:line="68" pos:column="26"/></name><operator pos:line="68" pos:column="26">.<pos:position pos:line="68" pos:column="27"/></operator><name pos:line="68" pos:column="27">len<pos:position pos:line="68" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="32">1<pos:position pos:line="68" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="35">f<pos:position pos:line="68" pos:column="36"/></name></expr></argument>)<pos:position pos:line="68" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="38"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="70" pos:column="9">strbuf_release<pos:position pos:line="70" pos:column="23"/></name><argument_list pos:line="70" pos:column="23">(<argument><expr><operator pos:line="70" pos:column="24">&amp;<pos:position pos:line="70" pos:column="29"/></operator><name pos:line="70" pos:column="25">sb<pos:position pos:line="70" pos:column="27"/></name></expr></argument>)<pos:position pos:line="70" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="29"/></expr_stmt>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
