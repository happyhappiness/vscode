<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1251.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">compare_objects<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">unsigned<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">buf<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">unsigned<pos:position pos:line="1" pos:column="62"/></name> <name pos:line="1" pos:column="63">long<pos:position pos:line="1" pos:column="67"/></name></type> <name pos:line="1" pos:column="68">size<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="2" pos:column="28">void<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">cb_data<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">compare_data<pos:position pos:line="4" pos:column="28"/></name></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">data<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><name pos:line="4" pos:column="37">cb_data<pos:position pos:line="4" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">data<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">buf_size<pos:position pos:line="6" pos:column="27"/></name></name> <operator pos:line="6" pos:column="28">&lt;<pos:position pos:line="6" pos:column="32"/></operator> <name pos:line="6" pos:column="30">size<pos:position pos:line="6" pos:column="34"/></name></expr>)<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35"> <block pos:line="6" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">free<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">(<argument><expr><name><name pos:line="7" pos:column="22">data<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-&gt;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="28">buf<pos:position pos:line="7" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="8" pos:column="17">data<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">-&gt;<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="23">buf<pos:position pos:line="8" pos:column="26"/></name></name> <operator pos:line="8" pos:column="27">=<pos:position pos:line="8" pos:column="28"/></operator> <call><name pos:line="8" pos:column="29">xmalloc<pos:position pos:line="8" pos:column="36"/></name><argument_list pos:line="8" pos:column="36">(<argument><expr><name pos:line="8" pos:column="37">size<pos:position pos:line="8" pos:column="41"/></name></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="9" pos:column="17">data<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">-&gt;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="23">buf_size<pos:position pos:line="9" pos:column="31"/></name></name> <operator pos:line="9" pos:column="32">=<pos:position pos:line="9" pos:column="33"/></operator> <name pos:line="9" pos:column="34">size<pos:position pos:line="9" pos:column="38"/></name></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><name pos:line="12" pos:column="16">size<pos:position pos:line="12" pos:column="20"/></name></expr>)<pos:position pos:line="12" pos:column="21"/></condition> <block pos:line="12" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">ssize_t<pos:position pos:line="13" pos:column="24"/></name></type> <name pos:line="13" pos:column="25">len<pos:position pos:line="13" pos:column="28"/></name> <init pos:line="13" pos:column="29">= <expr><call><name pos:line="13" pos:column="31">read_istream<pos:position pos:line="13" pos:column="43"/></name><argument_list pos:line="13" pos:column="43">(<argument><expr><name><name pos:line="13" pos:column="44">data<pos:position pos:line="13" pos:column="48"/></name><operator pos:line="13" pos:column="48">-&gt;<pos:position pos:line="13" pos:column="53"/></operator><name pos:line="13" pos:column="50">st<pos:position pos:line="13" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="54">data<pos:position pos:line="13" pos:column="58"/></name><operator pos:line="13" pos:column="58">-&gt;<pos:position pos:line="13" pos:column="63"/></operator><name pos:line="13" pos:column="60">buf<pos:position pos:line="13" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="65">size<pos:position pos:line="13" pos:column="69"/></name></expr></argument>)<pos:position pos:line="13" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="71"/></decl_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">len<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">==<pos:position pos:line="14" pos:column="27"/></operator> <literal type="number" pos:line="14" pos:column="28">0<pos:position pos:line="14" pos:column="29"/></literal></expr>)<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="25">die<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><call><name pos:line="15" pos:column="29">_<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><literal type="string" pos:line="15" pos:column="31">"SHA1 COLLISION FOUND WITH %s !"<pos:position pos:line="15" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></call></expr></argument>,
			    <argument><expr><call><name pos:line="16" pos:column="29">sha1_to_hex<pos:position pos:line="16" pos:column="40"/></name><argument_list pos:line="16" pos:column="40">(<argument><expr><name><name pos:line="16" pos:column="41">data<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">-&gt;<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="47">entry<pos:position pos:line="16" pos:column="52"/></name><operator pos:line="16" pos:column="52">-&gt;<pos:position pos:line="16" pos:column="57"/></operator><name pos:line="16" pos:column="54">idx<pos:position pos:line="16" pos:column="57"/></name><operator pos:line="16" pos:column="57">.<pos:position pos:line="16" pos:column="58"/></operator><name pos:line="16" pos:column="58">sha1<pos:position pos:line="16" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="65"/></expr_stmt></block></then></if>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">len<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">&lt;<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="27">0<pos:position pos:line="17" pos:column="28"/></literal></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="25">die<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><call><name pos:line="18" pos:column="29">_<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><literal type="string" pos:line="18" pos:column="31">"unable to read %s"<pos:position pos:line="18" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr></argument>,
			    <argument><expr><call><name pos:line="19" pos:column="29">sha1_to_hex<pos:position pos:line="19" pos:column="40"/></name><argument_list pos:line="19" pos:column="40">(<argument><expr><name><name pos:line="19" pos:column="41">data<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">-&gt;<pos:position pos:line="19" pos:column="50"/></operator><name pos:line="19" pos:column="47">entry<pos:position pos:line="19" pos:column="52"/></name><operator pos:line="19" pos:column="52">-&gt;<pos:position pos:line="19" pos:column="57"/></operator><name pos:line="19" pos:column="54">idx<pos:position pos:line="19" pos:column="57"/></name><operator pos:line="19" pos:column="57">.<pos:position pos:line="19" pos:column="58"/></operator><name pos:line="19" pos:column="58">sha1<pos:position pos:line="19" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="65"/></expr_stmt></block></then></if>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name pos:line="20" pos:column="21">memcmp<pos:position pos:line="20" pos:column="27"/></name><argument_list pos:line="20" pos:column="27">(<argument><expr><name pos:line="20" pos:column="28">buf<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="33">data<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">-&gt;<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="39">buf<pos:position pos:line="20" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="44">len<pos:position pos:line="20" pos:column="47"/></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="49"/></condition><then pos:line="20" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">die<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><call><name pos:line="21" pos:column="29">_<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><literal type="string" pos:line="21" pos:column="31">"SHA1 COLLISION FOUND WITH %s !"<pos:position pos:line="21" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr></argument>,
			    <argument><expr><call><name pos:line="22" pos:column="29">sha1_to_hex<pos:position pos:line="22" pos:column="40"/></name><argument_list pos:line="22" pos:column="40">(<argument><expr><name><name pos:line="22" pos:column="41">data<pos:position pos:line="22" pos:column="45"/></name><operator pos:line="22" pos:column="45">-&gt;<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="47">entry<pos:position pos:line="22" pos:column="52"/></name><operator pos:line="22" pos:column="52">-&gt;<pos:position pos:line="22" pos:column="57"/></operator><name pos:line="22" pos:column="54">idx<pos:position pos:line="22" pos:column="57"/></name><operator pos:line="22" pos:column="57">.<pos:position pos:line="22" pos:column="58"/></operator><name pos:line="22" pos:column="58">sha1<pos:position pos:line="22" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="65"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="23" pos:column="17">size<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">-=<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="25">len<pos:position pos:line="23" pos:column="28"/></name></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="24" pos:column="17">buf<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">+=<pos:position pos:line="24" pos:column="23"/></operator> <name pos:line="24" pos:column="24">len<pos:position pos:line="24" pos:column="27"/></name></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></while>
	<return pos:line="26" pos:column="9">return <expr><literal type="number" pos:line="26" pos:column="16">0<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
