<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3309_git-2.11.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">whitespace_error_string<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">unsigned<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">ws<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">err<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">STRBUF_INIT<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">(<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">ws<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">&amp;<pos:position pos:line="4" pos:column="22"/></operator> <name pos:line="4" pos:column="19">WS_TRAILING_SPACE<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">)<pos:position pos:line="4" pos:column="37"/></operator> <operator pos:line="4" pos:column="38">==<pos:position pos:line="4" pos:column="40"/></operator> <name pos:line="4" pos:column="41">WS_TRAILING_SPACE<pos:position pos:line="4" pos:column="58"/></name></expr>)<pos:position pos:line="4" pos:column="59"/></condition><then pos:line="4" pos:column="59">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="5" pos:column="17">strbuf_addstr<pos:position pos:line="5" pos:column="30"/></name><argument_list pos:line="5" pos:column="30">(<argument><expr><operator pos:line="5" pos:column="31">&amp;<pos:position pos:line="5" pos:column="36"/></operator><name pos:line="5" pos:column="32">err<pos:position pos:line="5" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="37">"trailing whitespace"<pos:position pos:line="5" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="60"/></expr_stmt></block></then>
	<else pos:line="6" pos:column="9">else <block pos:line="6" pos:column="14">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">ws<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">&amp;<pos:position pos:line="7" pos:column="29"/></operator> <name pos:line="7" pos:column="26">WS_BLANK_AT_EOL<pos:position pos:line="7" pos:column="41"/></name></expr>)<pos:position pos:line="7" pos:column="42"/></condition><then pos:line="7" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="25">strbuf_addstr<pos:position pos:line="8" pos:column="38"/></name><argument_list pos:line="8" pos:column="38">(<argument><expr><operator pos:line="8" pos:column="39">&amp;<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="40">err<pos:position pos:line="8" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="45">"trailing whitespace"<pos:position pos:line="8" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="68"/></expr_stmt></block></then></if>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">ws<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">&amp;<pos:position pos:line="9" pos:column="29"/></operator> <name pos:line="9" pos:column="26">WS_BLANK_AT_EOF<pos:position pos:line="9" pos:column="41"/></name></expr>)<pos:position pos:line="9" pos:column="42"/></condition><then pos:line="9" pos:column="42"> <block pos:line="9" pos:column="43">{
			<if pos:line="10" pos:column="25">if <condition pos:line="10" pos:column="28">(<expr><name><name pos:line="10" pos:column="29">err<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">.<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="33">len<pos:position pos:line="10" pos:column="36"/></name></name></expr>)<pos:position pos:line="10" pos:column="37"/></condition><then pos:line="10" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="33">strbuf_addstr<pos:position pos:line="11" pos:column="46"/></name><argument_list pos:line="11" pos:column="46">(<argument><expr><operator pos:line="11" pos:column="47">&amp;<pos:position pos:line="11" pos:column="52"/></operator><name pos:line="11" pos:column="48">err<pos:position pos:line="11" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="53">", "<pos:position pos:line="11" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="59"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">strbuf_addstr<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(<argument><expr><operator pos:line="12" pos:column="39">&amp;<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="40">err<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="45">"new blank line at EOF"<pos:position pos:line="12" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="70"/></expr_stmt>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>
	}<pos:position pos:line="14" pos:column="10"/></block></else></if>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">ws<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">&amp;<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="18">WS_SPACE_BEFORE_TAB<pos:position pos:line="15" pos:column="37"/></name></expr>)<pos:position pos:line="15" pos:column="38"/></condition><then pos:line="15" pos:column="38"> <block pos:line="15" pos:column="39">{
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name><name pos:line="16" pos:column="21">err<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">.<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">len<pos:position pos:line="16" pos:column="28"/></name></name></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="25">strbuf_addstr<pos:position pos:line="17" pos:column="38"/></name><argument_list pos:line="17" pos:column="38">(<argument><expr><operator pos:line="17" pos:column="39">&amp;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="40">err<pos:position pos:line="17" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="45">", "<pos:position pos:line="17" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="51"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">strbuf_addstr<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><operator pos:line="18" pos:column="31">&amp;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="32">err<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="37">"space before tab in indent"<pos:position pos:line="18" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="67"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">ws<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">&amp;<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="18">WS_INDENT_WITH_NON_TAB<pos:position pos:line="20" pos:column="40"/></name></expr>)<pos:position pos:line="20" pos:column="41"/></condition><then pos:line="20" pos:column="41"> <block pos:line="20" pos:column="42">{
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name><name pos:line="21" pos:column="21">err<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">.<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">len<pos:position pos:line="21" pos:column="28"/></name></name></expr>)<pos:position pos:line="21" pos:column="29"/></condition><then pos:line="21" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="25">strbuf_addstr<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><operator pos:line="22" pos:column="39">&amp;<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="40">err<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="45">", "<pos:position pos:line="22" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">strbuf_addstr<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><operator pos:line="23" pos:column="31">&amp;<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="32">err<pos:position pos:line="23" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="37">"indent with spaces"<pos:position pos:line="23" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">ws<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">&amp;<pos:position pos:line="25" pos:column="21"/></operator> <name pos:line="25" pos:column="18">WS_TAB_IN_INDENT<pos:position pos:line="25" pos:column="34"/></name></expr>)<pos:position pos:line="25" pos:column="35"/></condition><then pos:line="25" pos:column="35"> <block pos:line="25" pos:column="36">{
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name><name pos:line="26" pos:column="21">err<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">.<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">len<pos:position pos:line="26" pos:column="28"/></name></name></expr>)<pos:position pos:line="26" pos:column="29"/></condition><then pos:line="26" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">strbuf_addstr<pos:position pos:line="27" pos:column="38"/></name><argument_list pos:line="27" pos:column="38">(<argument><expr><operator pos:line="27" pos:column="39">&amp;<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="40">err<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="45">", "<pos:position pos:line="27" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">strbuf_addstr<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><operator pos:line="28" pos:column="31">&amp;<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="32">err<pos:position pos:line="28" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="37">"tab in indent"<pos:position pos:line="28" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>
	<return pos:line="30" pos:column="9">return <expr><call><name pos:line="30" pos:column="16">strbuf_detach<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><operator pos:line="30" pos:column="30">&amp;<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="31">err<pos:position pos:line="30" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="36">NULL<pos:position pos:line="30" pos:column="40"/></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
