<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4848_git-2.10.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">create_default_files<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">template_path<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">stat<pos:position pos:line="3" pos:column="20"/></name></name></type> <name pos:line="3" pos:column="21">st1<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">buf<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">STRBUF_INIT<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">path<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">repo_version_string<pos:position pos:line="6" pos:column="33"/></name><index pos:line="6" pos:column="33">[<expr><literal type="number" pos:line="6" pos:column="34">10<pos:position pos:line="6" pos:column="36"/></literal></expr>]<pos:position pos:line="6" pos:column="37"/></index></name></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">junk<pos:position pos:line="7" pos:column="18"/></name><index pos:line="7" pos:column="18">[<expr><literal type="number" pos:line="7" pos:column="19">2<pos:position pos:line="7" pos:column="20"/></literal></expr>]<pos:position pos:line="7" pos:column="21"/></index></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">reinit<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">filemode<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>

	<comment type="block" pos:line="11" pos:column="9">/*
	 * Create .git/refs/{heads,tags}
	 */</comment>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">safe_create_dir<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><call><name pos:line="14" pos:column="25">git_path_buf<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><operator pos:line="14" pos:column="38">&amp;<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="39">buf<pos:position pos:line="14" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="44">"refs"<pos:position pos:line="14" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="53">1<pos:position pos:line="14" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">safe_create_dir<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><call><name pos:line="15" pos:column="25">git_path_buf<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><operator pos:line="15" pos:column="38">&amp;<pos:position pos:line="15" pos:column="43"/></operator><name pos:line="15" pos:column="39">buf<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="44">"refs/heads"<pos:position pos:line="15" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="59">1<pos:position pos:line="15" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">safe_create_dir<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><call><name pos:line="16" pos:column="25">git_path_buf<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><operator pos:line="16" pos:column="38">&amp;<pos:position pos:line="16" pos:column="43"/></operator><name pos:line="16" pos:column="39">buf<pos:position pos:line="16" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="44">"refs/tags"<pos:position pos:line="16" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="58">1<pos:position pos:line="16" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="61"/></expr_stmt>

	<comment type="block" pos:line="18" pos:column="9">/* Just look for `init.templatedir` */</comment>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">git_config<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">git_init_db_config<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="40">NULL<pos:position pos:line="19" pos:column="44"/></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt>

	<comment type="block" pos:line="21" pos:column="9">/* First copy the templates -- we might have the default
	 * config file there, in which case we would want to read
	 * from it after installing.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">copy_templates<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">template_path<pos:position pos:line="25" pos:column="37"/></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">git_config<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><name pos:line="27" pos:column="20">git_default_config<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="40">NULL<pos:position pos:line="27" pos:column="44"/></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">is_bare_repository_cfg<pos:position pos:line="28" pos:column="31"/></name> <operator pos:line="28" pos:column="32">=<pos:position pos:line="28" pos:column="33"/></operator> <name pos:line="28" pos:column="34">init_is_bare_repository<pos:position pos:line="28" pos:column="57"/></name></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>

	<comment type="block" pos:line="30" pos:column="9">/* reading existing config may have overwrote it */</comment>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">init_shared_repository<pos:position pos:line="31" pos:column="35"/></name> <operator pos:line="31" pos:column="36">!=<pos:position pos:line="31" pos:column="38"/></operator> <operator pos:line="31" pos:column="39">-<pos:position pos:line="31" pos:column="40"/></operator><literal type="number" pos:line="31" pos:column="40">1<pos:position pos:line="31" pos:column="41"/></literal></expr>)<pos:position pos:line="31" pos:column="42"/></condition><then pos:line="31" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="17">set_shared_repository<pos:position pos:line="32" pos:column="38"/></name><argument_list pos:line="32" pos:column="38">(<argument><expr><name pos:line="32" pos:column="39">init_shared_repository<pos:position pos:line="32" pos:column="61"/></name></expr></argument>)<pos:position pos:line="32" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="63"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="34" pos:column="9">/*
	 * We would have created the above under user's umask -- under
	 * shared-repository settings, we would need to fix them up.
	 */</comment>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">get_shared_repository<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">()<pos:position pos:line="38" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="37"/></condition><then pos:line="38" pos:column="37"> <block pos:line="38" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">adjust_shared_perm<pos:position pos:line="39" pos:column="35"/></name><argument_list pos:line="39" pos:column="35">(<argument><expr><call><name pos:line="39" pos:column="36">get_git_dir<pos:position pos:line="39" pos:column="47"/></name><argument_list pos:line="39" pos:column="47">()<pos:position pos:line="39" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">adjust_shared_perm<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><call><name pos:line="40" pos:column="36">git_path_buf<pos:position pos:line="40" pos:column="48"/></name><argument_list pos:line="40" pos:column="48">(<argument><expr><operator pos:line="40" pos:column="49">&amp;<pos:position pos:line="40" pos:column="54"/></operator><name pos:line="40" pos:column="50">buf<pos:position pos:line="40" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="55">"refs"<pos:position pos:line="40" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">adjust_shared_perm<pos:position pos:line="41" pos:column="35"/></name><argument_list pos:line="41" pos:column="35">(<argument><expr><call><name pos:line="41" pos:column="36">git_path_buf<pos:position pos:line="41" pos:column="48"/></name><argument_list pos:line="41" pos:column="48">(<argument><expr><operator pos:line="41" pos:column="49">&amp;<pos:position pos:line="41" pos:column="54"/></operator><name pos:line="41" pos:column="50">buf<pos:position pos:line="41" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="55">"refs/heads"<pos:position pos:line="41" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">adjust_shared_perm<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">(<argument><expr><call><name pos:line="42" pos:column="36">git_path_buf<pos:position pos:line="42" pos:column="48"/></name><argument_list pos:line="42" pos:column="48">(<argument><expr><operator pos:line="42" pos:column="49">&amp;<pos:position pos:line="42" pos:column="54"/></operator><name pos:line="42" pos:column="50">buf<pos:position pos:line="42" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="55">"refs/tags"<pos:position pos:line="42" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="69"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="45" pos:column="9">/*
	 * Create the default symlink from ".git/HEAD" to the "master"
	 * branch, if it does not exist yet.
	 */</comment>
	<expr_stmt><expr><name pos:line="49" pos:column="9">path<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">=<pos:position pos:line="49" pos:column="15"/></operator> <call><name pos:line="49" pos:column="16">git_path_buf<pos:position pos:line="49" pos:column="28"/></name><argument_list pos:line="49" pos:column="28">(<argument><expr><operator pos:line="49" pos:column="29">&amp;<pos:position pos:line="49" pos:column="34"/></operator><name pos:line="49" pos:column="30">buf<pos:position pos:line="49" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="35">"HEAD"<pos:position pos:line="49" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name pos:line="50" pos:column="9">reinit<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">=<pos:position pos:line="50" pos:column="17"/></operator> <operator pos:line="50" pos:column="18">(<pos:position pos:line="50" pos:column="19"/></operator><operator pos:line="50" pos:column="19">!<pos:position pos:line="50" pos:column="20"/></operator><call><name pos:line="50" pos:column="20">access<pos:position pos:line="50" pos:column="26"/></name><argument_list pos:line="50" pos:column="26">(<argument><expr><name pos:line="50" pos:column="27">path<pos:position pos:line="50" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="33">R_OK<pos:position pos:line="50" pos:column="37"/></name></expr></argument>)<pos:position pos:line="50" pos:column="38"/></argument_list></call>
		  <operator pos:line="51" pos:column="19">||<pos:position pos:line="51" pos:column="21"/></operator> <call><name pos:line="51" pos:column="22">readlink<pos:position pos:line="51" pos:column="30"/></name><argument_list pos:line="51" pos:column="30">(<argument><expr><name pos:line="51" pos:column="31">path<pos:position pos:line="51" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="37">junk<pos:position pos:line="51" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="43">sizeof<argument_list pos:line="51" pos:column="49">(<argument><expr><name pos:line="51" pos:column="50">junk<pos:position pos:line="51" pos:column="54"/></name></expr></argument>)<pos:position pos:line="51" pos:column="55"/></argument_list></sizeof><operator pos:line="51" pos:column="55">-<pos:position pos:line="51" pos:column="56"/></operator><literal type="number" pos:line="51" pos:column="56">1<pos:position pos:line="51" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></call> <operator pos:line="51" pos:column="59">!=<pos:position pos:line="51" pos:column="61"/></operator> <operator pos:line="51" pos:column="62">-<pos:position pos:line="51" pos:column="63"/></operator><literal type="number" pos:line="51" pos:column="63">1<pos:position pos:line="51" pos:column="64"/></literal><operator pos:line="51" pos:column="64">)<pos:position pos:line="51" pos:column="65"/></operator></expr>;<pos:position pos:line="51" pos:column="66"/></expr_stmt>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><operator pos:line="52" pos:column="13">!<pos:position pos:line="52" pos:column="14"/></operator><name pos:line="52" pos:column="14">reinit<pos:position pos:line="52" pos:column="20"/></name></expr>)<pos:position pos:line="52" pos:column="21"/></condition><then pos:line="52" pos:column="21"> <block pos:line="52" pos:column="22">{
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><call><name pos:line="53" pos:column="21">create_symref<pos:position pos:line="53" pos:column="34"/></name><argument_list pos:line="53" pos:column="34">(<argument><expr><literal type="string" pos:line="53" pos:column="35">"HEAD"<pos:position pos:line="53" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="43">"refs/heads/master"<pos:position pos:line="53" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="64">NULL<pos:position pos:line="53" pos:column="68"/></name></expr></argument>)<pos:position pos:line="53" pos:column="69"/></argument_list></call> <operator pos:line="53" pos:column="70">&lt;<pos:position pos:line="53" pos:column="74"/></operator> <literal type="number" pos:line="53" pos:column="72">0<pos:position pos:line="53" pos:column="73"/></literal></expr>)<pos:position pos:line="53" pos:column="74"/></condition><then pos:line="53" pos:column="74">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="25">exit<pos:position pos:line="54" pos:column="29"/></name><argument_list pos:line="54" pos:column="29">(<argument><expr><literal type="number" pos:line="54" pos:column="30">1<pos:position pos:line="54" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="33"/></expr_stmt></block></then></if>
	}<pos:position pos:line="55" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="57" pos:column="9">/* This forces creation of new config file */</comment>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">xsnprintf<pos:position pos:line="58" pos:column="18"/></name><argument_list pos:line="58" pos:column="18">(<argument><expr><name pos:line="58" pos:column="19">repo_version_string<pos:position pos:line="58" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="40">sizeof<argument_list pos:line="58" pos:column="46">(<argument><expr><name pos:line="58" pos:column="47">repo_version_string<pos:position pos:line="58" pos:column="66"/></name></expr></argument>)<pos:position pos:line="58" pos:column="67"/></argument_list></sizeof></expr></argument>,
		  <argument><expr><literal type="string" pos:line="59" pos:column="19">"%d"<pos:position pos:line="59" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="25">GIT_REPO_VERSION<pos:position pos:line="59" pos:column="41"/></name></expr></argument>)<pos:position pos:line="59" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">git_config_set<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">(<argument><expr><literal type="string" pos:line="60" pos:column="24">"core.repositoryformatversion"<pos:position pos:line="60" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="56">repo_version_string<pos:position pos:line="60" pos:column="75"/></name></expr></argument>)<pos:position pos:line="60" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="77"/></expr_stmt>

	<comment type="block" pos:line="62" pos:column="9">/* Check filemode trustability */</comment>
	<expr_stmt><expr><name pos:line="63" pos:column="9">path<pos:position pos:line="63" pos:column="13"/></name> <operator pos:line="63" pos:column="14">=<pos:position pos:line="63" pos:column="15"/></operator> <call><name pos:line="63" pos:column="16">git_path_buf<pos:position pos:line="63" pos:column="28"/></name><argument_list pos:line="63" pos:column="28">(<argument><expr><operator pos:line="63" pos:column="29">&amp;<pos:position pos:line="63" pos:column="34"/></operator><name pos:line="63" pos:column="30">buf<pos:position pos:line="63" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="35">"config"<pos:position pos:line="63" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name pos:line="64" pos:column="9">filemode<pos:position pos:line="64" pos:column="17"/></name> <operator pos:line="64" pos:column="18">=<pos:position pos:line="64" pos:column="19"/></operator> <name pos:line="64" pos:column="20">TEST_FILEMODE<pos:position pos:line="64" pos:column="33"/></name></expr>;<pos:position pos:line="64" pos:column="34"/></expr_stmt>
	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name pos:line="65" pos:column="13">TEST_FILEMODE<pos:position pos:line="65" pos:column="26"/></name> <operator pos:line="65" pos:column="27">&amp;&amp;<pos:position pos:line="65" pos:column="37"/></operator> <operator pos:line="65" pos:column="30">!<pos:position pos:line="65" pos:column="31"/></operator><call><name pos:line="65" pos:column="31">lstat<pos:position pos:line="65" pos:column="36"/></name><argument_list pos:line="65" pos:column="36">(<argument><expr><name pos:line="65" pos:column="37">path<pos:position pos:line="65" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="43">&amp;<pos:position pos:line="65" pos:column="48"/></operator><name pos:line="65" pos:column="44">st1<pos:position pos:line="65" pos:column="47"/></name></expr></argument>)<pos:position pos:line="65" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="49"/></condition><then pos:line="65" pos:column="49"> <block pos:line="65" pos:column="50">{
		<decl_stmt><decl><type><name><name pos:line="66" pos:column="17">struct<pos:position pos:line="66" pos:column="23"/></name> <name pos:line="66" pos:column="24">stat<pos:position pos:line="66" pos:column="28"/></name></name></type> <name pos:line="66" pos:column="29">st2<pos:position pos:line="66" pos:column="32"/></name></decl>;<pos:position pos:line="66" pos:column="33"/></decl_stmt>
		<expr_stmt><expr><name pos:line="67" pos:column="17">filemode<pos:position pos:line="67" pos:column="25"/></name> <operator pos:line="67" pos:column="26">=<pos:position pos:line="67" pos:column="27"/></operator> <operator pos:line="67" pos:column="28">(<pos:position pos:line="67" pos:column="29"/></operator><operator pos:line="67" pos:column="29">!<pos:position pos:line="67" pos:column="30"/></operator><call><name pos:line="67" pos:column="30">chmod<pos:position pos:line="67" pos:column="35"/></name><argument_list pos:line="67" pos:column="35">(<argument><expr><name pos:line="67" pos:column="36">path<pos:position pos:line="67" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="42">st1<pos:position pos:line="67" pos:column="45"/></name><operator pos:line="67" pos:column="45">.<pos:position pos:line="67" pos:column="46"/></operator><name pos:line="67" pos:column="46">st_mode<pos:position pos:line="67" pos:column="53"/></name></name> <operator pos:line="67" pos:column="54">^<pos:position pos:line="67" pos:column="55"/></operator> <name pos:line="67" pos:column="56">S_IXUSR<pos:position pos:line="67" pos:column="63"/></name></expr></argument>)<pos:position pos:line="67" pos:column="64"/></argument_list></call> <operator pos:line="67" pos:column="65">&amp;&amp;<pos:position pos:line="67" pos:column="75"/></operator>
				<operator pos:line="68" pos:column="33">!<pos:position pos:line="68" pos:column="34"/></operator><call><name pos:line="68" pos:column="34">lstat<pos:position pos:line="68" pos:column="39"/></name><argument_list pos:line="68" pos:column="39">(<argument><expr><name pos:line="68" pos:column="40">path<pos:position pos:line="68" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="46">&amp;<pos:position pos:line="68" pos:column="51"/></operator><name pos:line="68" pos:column="47">st2<pos:position pos:line="68" pos:column="50"/></name></expr></argument>)<pos:position pos:line="68" pos:column="51"/></argument_list></call> <operator pos:line="68" pos:column="52">&amp;&amp;<pos:position pos:line="68" pos:column="62"/></operator>
				<name><name pos:line="69" pos:column="33">st1<pos:position pos:line="69" pos:column="36"/></name><operator pos:line="69" pos:column="36">.<pos:position pos:line="69" pos:column="37"/></operator><name pos:line="69" pos:column="37">st_mode<pos:position pos:line="69" pos:column="44"/></name></name> <operator pos:line="69" pos:column="45">!=<pos:position pos:line="69" pos:column="47"/></operator> <name><name pos:line="69" pos:column="48">st2<pos:position pos:line="69" pos:column="51"/></name><operator pos:line="69" pos:column="51">.<pos:position pos:line="69" pos:column="52"/></operator><name pos:line="69" pos:column="52">st_mode<pos:position pos:line="69" pos:column="59"/></name></name> <operator pos:line="69" pos:column="60">&amp;&amp;<pos:position pos:line="69" pos:column="70"/></operator>
				<operator pos:line="70" pos:column="33">!<pos:position pos:line="70" pos:column="34"/></operator><call><name pos:line="70" pos:column="34">chmod<pos:position pos:line="70" pos:column="39"/></name><argument_list pos:line="70" pos:column="39">(<argument><expr><name pos:line="70" pos:column="40">path<pos:position pos:line="70" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="46">st1<pos:position pos:line="70" pos:column="49"/></name><operator pos:line="70" pos:column="49">.<pos:position pos:line="70" pos:column="50"/></operator><name pos:line="70" pos:column="50">st_mode<pos:position pos:line="70" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="58"/></argument_list></call><operator pos:line="70" pos:column="58">)<pos:position pos:line="70" pos:column="59"/></operator></expr>;<pos:position pos:line="70" pos:column="60"/></expr_stmt>
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name pos:line="71" pos:column="21">filemode<pos:position pos:line="71" pos:column="29"/></name> <operator pos:line="71" pos:column="30">&amp;&amp;<pos:position pos:line="71" pos:column="40"/></operator> <operator pos:line="71" pos:column="33">!<pos:position pos:line="71" pos:column="34"/></operator><name pos:line="71" pos:column="34">reinit<pos:position pos:line="71" pos:column="40"/></name> <operator pos:line="71" pos:column="41">&amp;&amp;<pos:position pos:line="71" pos:column="51"/></operator> <operator pos:line="71" pos:column="44">(<pos:position pos:line="71" pos:column="45"/></operator><name><name pos:line="71" pos:column="45">st1<pos:position pos:line="71" pos:column="48"/></name><operator pos:line="71" pos:column="48">.<pos:position pos:line="71" pos:column="49"/></operator><name pos:line="71" pos:column="49">st_mode<pos:position pos:line="71" pos:column="56"/></name></name> <operator pos:line="71" pos:column="57">&amp;<pos:position pos:line="71" pos:column="62"/></operator> <name pos:line="71" pos:column="59">S_IXUSR<pos:position pos:line="71" pos:column="66"/></name><operator pos:line="71" pos:column="66">)<pos:position pos:line="71" pos:column="67"/></operator></expr>)<pos:position pos:line="71" pos:column="68"/></condition><then pos:line="71" pos:column="68">
			<block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="25">filemode<pos:position pos:line="72" pos:column="33"/></name> <operator pos:line="72" pos:column="34">=<pos:position pos:line="72" pos:column="35"/></operator> <literal type="number" pos:line="72" pos:column="36">0<pos:position pos:line="72" pos:column="37"/></literal></expr>;<pos:position pos:line="72" pos:column="38"/></expr_stmt></block></then></if>
	}<pos:position pos:line="73" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="74" pos:column="9">git_config_set<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><literal type="string" pos:line="74" pos:column="24">"core.filemode"<pos:position pos:line="74" pos:column="39"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="74" pos:column="41">filemode<pos:position pos:line="74" pos:column="49"/></name></expr> ?<pos:position pos:line="74" pos:column="51"/></condition><then pos:line="74" pos:column="51"> <expr><literal type="string" pos:line="74" pos:column="52">"true"<pos:position pos:line="74" pos:column="58"/></literal></expr> <pos:position pos:line="74" pos:column="59"/></then><else pos:line="74" pos:column="59">: <expr><literal type="string" pos:line="74" pos:column="61">"false"<pos:position pos:line="74" pos:column="68"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="74" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="70"/></expr_stmt>

	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><call><name pos:line="76" pos:column="13">is_bare_repository<pos:position pos:line="76" pos:column="31"/></name><argument_list pos:line="76" pos:column="31">()<pos:position pos:line="76" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="34"/></condition><then pos:line="76" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="17">git_config_set<pos:position pos:line="77" pos:column="31"/></name><argument_list pos:line="77" pos:column="31">(<argument><expr><literal type="string" pos:line="77" pos:column="32">"core.bare"<pos:position pos:line="77" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="45">"true"<pos:position pos:line="77" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="53"/></expr_stmt></block></then>
	<else pos:line="78" pos:column="9">else <block pos:line="78" pos:column="14">{
		<decl_stmt><decl><type><specifier pos:line="79" pos:column="17">const<pos:position pos:line="79" pos:column="22"/></specifier> <name pos:line="79" pos:column="23">char<pos:position pos:line="79" pos:column="27"/></name> <modifier pos:line="79" pos:column="28">*<pos:position pos:line="79" pos:column="29"/></modifier></type><name pos:line="79" pos:column="29">work_tree<pos:position pos:line="79" pos:column="38"/></name> <init pos:line="79" pos:column="39">= <expr><call><name pos:line="79" pos:column="41">get_git_work_tree<pos:position pos:line="79" pos:column="58"/></name><argument_list pos:line="79" pos:column="58">()<pos:position pos:line="79" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="79" pos:column="61"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="80" pos:column="17">git_config_set<pos:position pos:line="80" pos:column="31"/></name><argument_list pos:line="80" pos:column="31">(<argument><expr><literal type="string" pos:line="80" pos:column="32">"core.bare"<pos:position pos:line="80" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="45">"false"<pos:position pos:line="80" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="54"/></expr_stmt>
		<comment type="block" pos:line="81" pos:column="17">/* allow template config file to override the default */</comment>
		<if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><name pos:line="82" pos:column="21">log_all_ref_updates<pos:position pos:line="82" pos:column="40"/></name> <operator pos:line="82" pos:column="41">==<pos:position pos:line="82" pos:column="43"/></operator> <operator pos:line="82" pos:column="44">-<pos:position pos:line="82" pos:column="45"/></operator><literal type="number" pos:line="82" pos:column="45">1<pos:position pos:line="82" pos:column="46"/></literal></expr>)<pos:position pos:line="82" pos:column="47"/></condition><then pos:line="82" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="25">git_config_set<pos:position pos:line="83" pos:column="39"/></name><argument_list pos:line="83" pos:column="39">(<argument><expr><literal type="string" pos:line="83" pos:column="40">"core.logallrefupdates"<pos:position pos:line="83" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="65">"true"<pos:position pos:line="83" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="73"/></expr_stmt></block></then></if>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><call><name pos:line="84" pos:column="21">needs_work_tree_config<pos:position pos:line="84" pos:column="43"/></name><argument_list pos:line="84" pos:column="43">(<argument><expr><call><name pos:line="84" pos:column="44">get_git_dir<pos:position pos:line="84" pos:column="55"/></name><argument_list pos:line="84" pos:column="55">()<pos:position pos:line="84" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="84" pos:column="59">work_tree<pos:position pos:line="84" pos:column="68"/></name></expr></argument>)<pos:position pos:line="84" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="70"/></condition><then pos:line="84" pos:column="70">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="25">git_config_set<pos:position pos:line="85" pos:column="39"/></name><argument_list pos:line="85" pos:column="39">(<argument><expr><literal type="string" pos:line="85" pos:column="40">"core.worktree"<pos:position pos:line="85" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="57">work_tree<pos:position pos:line="85" pos:column="66"/></name></expr></argument>)<pos:position pos:line="85" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="68"/></expr_stmt></block></then></if>
	}<pos:position pos:line="86" pos:column="10"/></block></else></if>

	<if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><operator pos:line="88" pos:column="13">!<pos:position pos:line="88" pos:column="14"/></operator><name pos:line="88" pos:column="14">reinit<pos:position pos:line="88" pos:column="20"/></name></expr>)<pos:position pos:line="88" pos:column="21"/></condition><then pos:line="88" pos:column="21"> <block pos:line="88" pos:column="22">{
		<comment type="block" pos:line="89" pos:column="17">/* Check if symlink is supported in the work tree */</comment>
		<expr_stmt><expr><name pos:line="90" pos:column="17">path<pos:position pos:line="90" pos:column="21"/></name> <operator pos:line="90" pos:column="22">=<pos:position pos:line="90" pos:column="23"/></operator> <call><name pos:line="90" pos:column="24">git_path_buf<pos:position pos:line="90" pos:column="36"/></name><argument_list pos:line="90" pos:column="36">(<argument><expr><operator pos:line="90" pos:column="37">&amp;<pos:position pos:line="90" pos:column="42"/></operator><name pos:line="90" pos:column="38">buf<pos:position pos:line="90" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="43">"tXXXXXX"<pos:position pos:line="90" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="54"/></expr_stmt>
		<if pos:line="91" pos:column="17">if <condition pos:line="91" pos:column="20">(<expr><operator pos:line="91" pos:column="21">!<pos:position pos:line="91" pos:column="22"/></operator><call><name pos:line="91" pos:column="22">close<pos:position pos:line="91" pos:column="27"/></name><argument_list pos:line="91" pos:column="27">(<argument><expr><call><name pos:line="91" pos:column="28">xmkstemp<pos:position pos:line="91" pos:column="36"/></name><argument_list pos:line="91" pos:column="36">(<argument><expr><name pos:line="91" pos:column="37">path<pos:position pos:line="91" pos:column="41"/></name></expr></argument>)<pos:position pos:line="91" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="91" pos:column="43"/></argument_list></call> <operator pos:line="91" pos:column="44">&amp;&amp;<pos:position pos:line="91" pos:column="54"/></operator>
		    <operator pos:line="92" pos:column="21">!<pos:position pos:line="92" pos:column="22"/></operator><call><name pos:line="92" pos:column="22">unlink<pos:position pos:line="92" pos:column="28"/></name><argument_list pos:line="92" pos:column="28">(<argument><expr><name pos:line="92" pos:column="29">path<pos:position pos:line="92" pos:column="33"/></name></expr></argument>)<pos:position pos:line="92" pos:column="34"/></argument_list></call> <operator pos:line="92" pos:column="35">&amp;&amp;<pos:position pos:line="92" pos:column="45"/></operator>
		    <operator pos:line="93" pos:column="21">!<pos:position pos:line="93" pos:column="22"/></operator><call><name pos:line="93" pos:column="22">symlink<pos:position pos:line="93" pos:column="29"/></name><argument_list pos:line="93" pos:column="29">(<argument><expr><literal type="string" pos:line="93" pos:column="30">"testing"<pos:position pos:line="93" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="41">path<pos:position pos:line="93" pos:column="45"/></name></expr></argument>)<pos:position pos:line="93" pos:column="46"/></argument_list></call> <operator pos:line="93" pos:column="47">&amp;&amp;<pos:position pos:line="93" pos:column="57"/></operator>
		    <operator pos:line="94" pos:column="21">!<pos:position pos:line="94" pos:column="22"/></operator><call><name pos:line="94" pos:column="22">lstat<pos:position pos:line="94" pos:column="27"/></name><argument_list pos:line="94" pos:column="27">(<argument><expr><name pos:line="94" pos:column="28">path<pos:position pos:line="94" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="94" pos:column="34">&amp;<pos:position pos:line="94" pos:column="39"/></operator><name pos:line="94" pos:column="35">st1<pos:position pos:line="94" pos:column="38"/></name></expr></argument>)<pos:position pos:line="94" pos:column="39"/></argument_list></call> <operator pos:line="94" pos:column="40">&amp;&amp;<pos:position pos:line="94" pos:column="50"/></operator>
		    <call><name pos:line="95" pos:column="21">S_ISLNK<pos:position pos:line="95" pos:column="28"/></name><argument_list pos:line="95" pos:column="28">(<argument><expr><name><name pos:line="95" pos:column="29">st1<pos:position pos:line="95" pos:column="32"/></name><operator pos:line="95" pos:column="32">.<pos:position pos:line="95" pos:column="33"/></operator><name pos:line="95" pos:column="33">st_mode<pos:position pos:line="95" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="95" pos:column="42"/></condition><then pos:line="95" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="96" pos:column="25">unlink<pos:position pos:line="96" pos:column="31"/></name><argument_list pos:line="96" pos:column="31">(<argument><expr><name pos:line="96" pos:column="32">path<pos:position pos:line="96" pos:column="36"/></name></expr></argument>)<pos:position pos:line="96" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="38"/></expr_stmt></block></then> <comment type="block" pos:line="96" pos:column="39">/* good */</comment>
		<else pos:line="97" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="98" pos:column="25">git_config_set<pos:position pos:line="98" pos:column="39"/></name><argument_list pos:line="98" pos:column="39">(<argument><expr><literal type="string" pos:line="98" pos:column="40">"core.symlinks"<pos:position pos:line="98" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="57">"false"<pos:position pos:line="98" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="66"/></expr_stmt></block></else></if>

		<comment type="block" pos:line="100" pos:column="17">/* Check if the filesystem is case-insensitive */</comment>
		<expr_stmt><expr><name pos:line="101" pos:column="17">path<pos:position pos:line="101" pos:column="21"/></name> <operator pos:line="101" pos:column="22">=<pos:position pos:line="101" pos:column="23"/></operator> <call><name pos:line="101" pos:column="24">git_path_buf<pos:position pos:line="101" pos:column="36"/></name><argument_list pos:line="101" pos:column="36">(<argument><expr><operator pos:line="101" pos:column="37">&amp;<pos:position pos:line="101" pos:column="42"/></operator><name pos:line="101" pos:column="38">buf<pos:position pos:line="101" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="43">"CoNfIg"<pos:position pos:line="101" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="53"/></expr_stmt>
		<if pos:line="102" pos:column="17">if <condition pos:line="102" pos:column="20">(<expr><operator pos:line="102" pos:column="21">!<pos:position pos:line="102" pos:column="22"/></operator><call><name pos:line="102" pos:column="22">access<pos:position pos:line="102" pos:column="28"/></name><argument_list pos:line="102" pos:column="28">(<argument><expr><name pos:line="102" pos:column="29">path<pos:position pos:line="102" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="35">F_OK<pos:position pos:line="102" pos:column="39"/></name></expr></argument>)<pos:position pos:line="102" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="102" pos:column="41"/></condition><then pos:line="102" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="103" pos:column="25">git_config_set<pos:position pos:line="103" pos:column="39"/></name><argument_list pos:line="103" pos:column="39">(<argument><expr><literal type="string" pos:line="103" pos:column="40">"core.ignorecase"<pos:position pos:line="103" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="59">"true"<pos:position pos:line="103" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="67"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="104" pos:column="17">probe_utf8_pathname_composition<pos:position pos:line="104" pos:column="48"/></name><argument_list pos:line="104" pos:column="48">()<pos:position pos:line="104" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="105" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="107" pos:column="9">strbuf_release<pos:position pos:line="107" pos:column="23"/></name><argument_list pos:line="107" pos:column="23">(<argument><expr><operator pos:line="107" pos:column="24">&amp;<pos:position pos:line="107" pos:column="29"/></operator><name pos:line="107" pos:column="25">buf<pos:position pos:line="107" pos:column="28"/></name></expr></argument>)<pos:position pos:line="107" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="30"/></expr_stmt>
	<return pos:line="108" pos:column="9">return <expr><name pos:line="108" pos:column="16">reinit<pos:position pos:line="108" pos:column="22"/></name></expr>;<pos:position pos:line="108" pos:column="23"/></return>
}<pos:position pos:line="109" pos:column="2"/></block></function></unit>
