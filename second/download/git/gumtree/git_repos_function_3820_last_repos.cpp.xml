<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3820_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">object_id<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">stage_oid<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">object_id<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">oid<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">unsigned<pos:position pos:line="1" pos:column="73"/></name></type> <name pos:line="1" pos:column="74">mode<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<return pos:line="3" pos:column="9">return <expr><ternary><condition><expr><operator pos:line="3" pos:column="16">(<pos:position pos:line="3" pos:column="17"/></operator><call><name pos:line="3" pos:column="17">is_null_oid<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><name pos:line="3" pos:column="29">oid<pos:position pos:line="3" pos:column="32"/></name></expr></argument>)<pos:position pos:line="3" pos:column="33"/></argument_list></call> <operator pos:line="3" pos:column="34">||<pos:position pos:line="3" pos:column="36"/></operator> <name pos:line="3" pos:column="37">mode<pos:position pos:line="3" pos:column="41"/></name> <operator pos:line="3" pos:column="42">==<pos:position pos:line="3" pos:column="44"/></operator> <literal type="number" pos:line="3" pos:column="45">0<pos:position pos:line="3" pos:column="46"/></literal><operator pos:line="3" pos:column="46">)<pos:position pos:line="3" pos:column="47"/></operator></expr> ?<pos:position pos:line="3" pos:column="49"/></condition><then pos:line="3" pos:column="49"> <expr><name pos:line="3" pos:column="50">NULL<pos:position pos:line="3" pos:column="54"/></name></expr></then><else pos:line="3" pos:column="54">: <expr><operator pos:line="3" pos:column="56">(<pos:position pos:line="3" pos:column="57"/></operator>struct <name pos:line="3" pos:column="64">object_id<pos:position pos:line="3" pos:column="73"/></name> <operator pos:line="3" pos:column="74">*<pos:position pos:line="3" pos:column="75"/></operator><operator pos:line="3" pos:column="75">)<pos:position pos:line="3" pos:column="76"/></operator><name pos:line="3" pos:column="76">oid<pos:position pos:line="3" pos:column="79"/></name></expr></else></ternary></expr>;<pos:position pos:line="3" pos:column="80"/></return>
}<pos:position pos:line="4" pos:column="2"/></block></function></unit>
