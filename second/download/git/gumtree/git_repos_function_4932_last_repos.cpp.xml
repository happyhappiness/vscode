<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4932_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">add_empty_word<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">ewah_bitmap<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">self<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">v<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">no_literal<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><operator pos:line="3" pos:column="26">(<pos:position pos:line="3" pos:column="27"/></operator><call><name pos:line="3" pos:column="27">rlw_get_literal_words<pos:position pos:line="3" pos:column="48"/></name><argument_list pos:line="3" pos:column="48">(<argument><expr><name><name pos:line="3" pos:column="49">self<pos:position pos:line="3" pos:column="53"/></name><operator pos:line="3" pos:column="53">-&gt;<pos:position pos:line="3" pos:column="58"/></operator><name pos:line="3" pos:column="55">rlw<pos:position pos:line="3" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="3" pos:column="59"/></argument_list></call> <operator pos:line="3" pos:column="60">==<pos:position pos:line="3" pos:column="62"/></operator> <literal type="number" pos:line="3" pos:column="63">0<pos:position pos:line="3" pos:column="64"/></literal><operator pos:line="3" pos:column="64">)<pos:position pos:line="3" pos:column="65"/></operator></expr></init></decl>;<pos:position pos:line="3" pos:column="66"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">eword_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">run_len<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><call><name pos:line="4" pos:column="27">rlw_get_running_len<pos:position pos:line="4" pos:column="46"/></name><argument_list pos:line="4" pos:column="46">(<argument><expr><name><name pos:line="4" pos:column="47">self<pos:position pos:line="4" pos:column="51"/></name><operator pos:line="4" pos:column="51">-&gt;<pos:position pos:line="4" pos:column="56"/></operator><name pos:line="4" pos:column="53">rlw<pos:position pos:line="4" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="58"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">no_literal<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">&amp;&amp;<pos:position pos:line="6" pos:column="34"/></operator> <name pos:line="6" pos:column="27">run_len<pos:position pos:line="6" pos:column="34"/></name> <operator pos:line="6" pos:column="35">==<pos:position pos:line="6" pos:column="37"/></operator> <literal type="number" pos:line="6" pos:column="38">0<pos:position pos:line="6" pos:column="39"/></literal></expr>)<pos:position pos:line="6" pos:column="40"/></condition><then pos:line="6" pos:column="40"> <block pos:line="6" pos:column="41">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">rlw_set_run_bit<pos:position pos:line="7" pos:column="32"/></name><argument_list pos:line="7" pos:column="32">(<argument><expr><name><name pos:line="7" pos:column="33">self<pos:position pos:line="7" pos:column="37"/></name><operator pos:line="7" pos:column="37">-&gt;<pos:position pos:line="7" pos:column="42"/></operator><name pos:line="7" pos:column="39">rlw<pos:position pos:line="7" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="44">v<pos:position pos:line="7" pos:column="45"/></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">assert<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><call><name pos:line="8" pos:column="24">rlw_get_run_bit<pos:position pos:line="8" pos:column="39"/></name><argument_list pos:line="8" pos:column="39">(<argument><expr><name><name pos:line="8" pos:column="40">self<pos:position pos:line="8" pos:column="44"/></name><operator pos:line="8" pos:column="44">-&gt;<pos:position pos:line="8" pos:column="49"/></operator><name pos:line="8" pos:column="46">rlw<pos:position pos:line="8" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call> <operator pos:line="8" pos:column="51">==<pos:position pos:line="8" pos:column="53"/></operator> <name pos:line="8" pos:column="54">v<pos:position pos:line="8" pos:column="55"/></name></expr></argument>)<pos:position pos:line="8" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">no_literal<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">&amp;&amp;<pos:position pos:line="11" pos:column="34"/></operator> <call><name pos:line="11" pos:column="27">rlw_get_run_bit<pos:position pos:line="11" pos:column="42"/></name><argument_list pos:line="11" pos:column="42">(<argument><expr><name><name pos:line="11" pos:column="43">self<pos:position pos:line="11" pos:column="47"/></name><operator pos:line="11" pos:column="47">-&gt;<pos:position pos:line="11" pos:column="52"/></operator><name pos:line="11" pos:column="49">rlw<pos:position pos:line="11" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call> <operator pos:line="11" pos:column="54">==<pos:position pos:line="11" pos:column="56"/></operator> <name pos:line="11" pos:column="57">v<pos:position pos:line="11" pos:column="58"/></name> <operator pos:line="11" pos:column="59">&amp;&amp;<pos:position pos:line="11" pos:column="69"/></operator>
		<name pos:line="12" pos:column="17">run_len<pos:position pos:line="12" pos:column="24"/></name> <operator pos:line="12" pos:column="25">&lt;<pos:position pos:line="12" pos:column="29"/></operator> <name pos:line="12" pos:column="27">RLW_LARGEST_RUNNING_COUNT<pos:position pos:line="12" pos:column="52"/></name></expr>)<pos:position pos:line="12" pos:column="53"/></condition><then pos:line="12" pos:column="53"> <block pos:line="12" pos:column="54">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">rlw_set_running_len<pos:position pos:line="13" pos:column="36"/></name><argument_list pos:line="13" pos:column="36">(<argument><expr><name><name pos:line="13" pos:column="37">self<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">-&gt;<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="43">rlw<pos:position pos:line="13" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="48">run_len<pos:position pos:line="13" pos:column="55"/></name> <operator pos:line="13" pos:column="56">+<pos:position pos:line="13" pos:column="57"/></operator> <literal type="number" pos:line="13" pos:column="58">1<pos:position pos:line="13" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">assert<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><call><name pos:line="14" pos:column="24">rlw_get_running_len<pos:position pos:line="14" pos:column="43"/></name><argument_list pos:line="14" pos:column="43">(<argument><expr><name><name pos:line="14" pos:column="44">self<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">-&gt;<pos:position pos:line="14" pos:column="53"/></operator><name pos:line="14" pos:column="50">rlw<pos:position pos:line="14" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call> <operator pos:line="14" pos:column="55">==<pos:position pos:line="14" pos:column="57"/></operator> <name pos:line="14" pos:column="58">run_len<pos:position pos:line="14" pos:column="65"/></name> <operator pos:line="14" pos:column="66">+<pos:position pos:line="14" pos:column="67"/></operator> <literal type="number" pos:line="14" pos:column="68">1<pos:position pos:line="14" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="71"/></expr_stmt>
		<return pos:line="15" pos:column="17">return <expr><literal type="number" pos:line="15" pos:column="24">0<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></then> <else pos:line="16" pos:column="11">else <block pos:line="16" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">buffer_push_rlw<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">self<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="39">0<pos:position pos:line="17" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="19" pos:column="17">assert<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><call><name pos:line="19" pos:column="24">rlw_get_running_len<pos:position pos:line="19" pos:column="43"/></name><argument_list pos:line="19" pos:column="43">(<argument><expr><name><name pos:line="19" pos:column="44">self<pos:position pos:line="19" pos:column="48"/></name><operator pos:line="19" pos:column="48">-&gt;<pos:position pos:line="19" pos:column="53"/></operator><name pos:line="19" pos:column="50">rlw<pos:position pos:line="19" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call> <operator pos:line="19" pos:column="55">==<pos:position pos:line="19" pos:column="57"/></operator> <literal type="number" pos:line="19" pos:column="58">0<pos:position pos:line="19" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">assert<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><call><name pos:line="20" pos:column="24">rlw_get_run_bit<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name><name pos:line="20" pos:column="40">self<pos:position pos:line="20" pos:column="44"/></name><operator pos:line="20" pos:column="44">-&gt;<pos:position pos:line="20" pos:column="49"/></operator><name pos:line="20" pos:column="46">rlw<pos:position pos:line="20" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call> <operator pos:line="20" pos:column="51">==<pos:position pos:line="20" pos:column="53"/></operator> <literal type="number" pos:line="20" pos:column="54">0<pos:position pos:line="20" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">assert<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><call><name pos:line="21" pos:column="24">rlw_get_literal_words<pos:position pos:line="21" pos:column="45"/></name><argument_list pos:line="21" pos:column="45">(<argument><expr><name><name pos:line="21" pos:column="46">self<pos:position pos:line="21" pos:column="50"/></name><operator pos:line="21" pos:column="50">-&gt;<pos:position pos:line="21" pos:column="55"/></operator><name pos:line="21" pos:column="52">rlw<pos:position pos:line="21" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call> <operator pos:line="21" pos:column="57">==<pos:position pos:line="21" pos:column="59"/></operator> <literal type="number" pos:line="21" pos:column="60">0<pos:position pos:line="21" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="23" pos:column="17">rlw_set_run_bit<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name><name pos:line="23" pos:column="33">self<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">-&gt;<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="39">rlw<pos:position pos:line="23" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="44">v<pos:position pos:line="23" pos:column="45"/></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">assert<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><call><name pos:line="24" pos:column="24">rlw_get_run_bit<pos:position pos:line="24" pos:column="39"/></name><argument_list pos:line="24" pos:column="39">(<argument><expr><name><name pos:line="24" pos:column="40">self<pos:position pos:line="24" pos:column="44"/></name><operator pos:line="24" pos:column="44">-&gt;<pos:position pos:line="24" pos:column="49"/></operator><name pos:line="24" pos:column="46">rlw<pos:position pos:line="24" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="50"/></argument_list></call> <operator pos:line="24" pos:column="51">==<pos:position pos:line="24" pos:column="53"/></operator> <name pos:line="24" pos:column="54">v<pos:position pos:line="24" pos:column="55"/></name></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="57"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="26" pos:column="17">rlw_set_running_len<pos:position pos:line="26" pos:column="36"/></name><argument_list pos:line="26" pos:column="36">(<argument><expr><name><name pos:line="26" pos:column="37">self<pos:position pos:line="26" pos:column="41"/></name><operator pos:line="26" pos:column="41">-&gt;<pos:position pos:line="26" pos:column="46"/></operator><name pos:line="26" pos:column="43">rlw<pos:position pos:line="26" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="48">1<pos:position pos:line="26" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">assert<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><call><name pos:line="27" pos:column="24">rlw_get_running_len<pos:position pos:line="27" pos:column="43"/></name><argument_list pos:line="27" pos:column="43">(<argument><expr><name><name pos:line="27" pos:column="44">self<pos:position pos:line="27" pos:column="48"/></name><operator pos:line="27" pos:column="48">-&gt;<pos:position pos:line="27" pos:column="53"/></operator><name pos:line="27" pos:column="50">rlw<pos:position pos:line="27" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call> <operator pos:line="27" pos:column="55">==<pos:position pos:line="27" pos:column="57"/></operator> <literal type="number" pos:line="27" pos:column="58">1<pos:position pos:line="27" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">assert<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><call><name pos:line="28" pos:column="24">rlw_get_literal_words<pos:position pos:line="28" pos:column="45"/></name><argument_list pos:line="28" pos:column="45">(<argument><expr><name><name pos:line="28" pos:column="46">self<pos:position pos:line="28" pos:column="50"/></name><operator pos:line="28" pos:column="50">-&gt;<pos:position pos:line="28" pos:column="55"/></operator><name pos:line="28" pos:column="52">rlw<pos:position pos:line="28" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call> <operator pos:line="28" pos:column="57">==<pos:position pos:line="28" pos:column="59"/></operator> <literal type="number" pos:line="28" pos:column="60">0<pos:position pos:line="28" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="63"/></expr_stmt>
		<return pos:line="29" pos:column="17">return <expr><literal type="number" pos:line="29" pos:column="24">1<pos:position pos:line="29" pos:column="25"/></literal></expr>;<pos:position pos:line="29" pos:column="26"/></return>
	}<pos:position pos:line="30" pos:column="10"/></block></else></if>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
