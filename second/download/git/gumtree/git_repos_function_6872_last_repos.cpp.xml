<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6872_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_check_malloc_state<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">mstate<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">m<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list> <block pos:line="1" pos:column="45">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">bindex_t<pos:position pos:line="2" pos:column="11"/></name></type> <name pos:line="2" pos:column="12">i<pos:position pos:line="2" pos:column="13"/></name></decl>;<pos:position pos:line="2" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">total<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <comment type="block" pos:line="4" pos:column="3">/* check bins */</comment>
  <for pos:line="5" pos:column="3">for <control pos:line="5" pos:column="7">(<init><expr><name pos:line="5" pos:column="8">i<pos:position pos:line="5" pos:column="9"/></name> <operator pos:line="5" pos:column="10">=<pos:position pos:line="5" pos:column="11"/></operator> <literal type="number" pos:line="5" pos:column="12">0<pos:position pos:line="5" pos:column="13"/></literal></expr>;<pos:position pos:line="5" pos:column="14"/></init> <condition><expr><name pos:line="5" pos:column="15">i<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">&lt;<pos:position pos:line="5" pos:column="21"/></operator> <name pos:line="5" pos:column="19">NSMALLBINS<pos:position pos:line="5" pos:column="29"/></name></expr>;<pos:position pos:line="5" pos:column="30"/></condition> <incr><expr><operator pos:line="5" pos:column="31">++<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="33">i<pos:position pos:line="5" pos:column="34"/></name></expr></incr>)<pos:position pos:line="5" pos:column="35"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="5">do_check_smallbin<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><name pos:line="6" pos:column="23">m<pos:position pos:line="6" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="26">i<pos:position pos:line="6" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt></block></for>
  <for pos:line="7" pos:column="3">for <control pos:line="7" pos:column="7">(<init><expr><name pos:line="7" pos:column="8">i<pos:position pos:line="7" pos:column="9"/></name> <operator pos:line="7" pos:column="10">=<pos:position pos:line="7" pos:column="11"/></operator> <literal type="number" pos:line="7" pos:column="12">0<pos:position pos:line="7" pos:column="13"/></literal></expr>;<pos:position pos:line="7" pos:column="14"/></init> <condition><expr><name pos:line="7" pos:column="15">i<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">&lt;<pos:position pos:line="7" pos:column="21"/></operator> <name pos:line="7" pos:column="19">NTREEBINS<pos:position pos:line="7" pos:column="28"/></name></expr>;<pos:position pos:line="7" pos:column="29"/></condition> <incr><expr><operator pos:line="7" pos:column="30">++<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="32">i<pos:position pos:line="7" pos:column="33"/></name></expr></incr>)<pos:position pos:line="7" pos:column="34"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="5">do_check_treebin<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">m<pos:position pos:line="8" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="25">i<pos:position pos:line="8" pos:column="26"/></name></expr></argument>)<pos:position pos:line="8" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="28"/></expr_stmt></block></for>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name><name pos:line="10" pos:column="7">m<pos:position pos:line="10" pos:column="8"/></name><operator pos:line="10" pos:column="8">-&gt;<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="10">dvsize<pos:position pos:line="10" pos:column="16"/></name></name> <operator pos:line="10" pos:column="17">!=<pos:position pos:line="10" pos:column="19"/></operator> <literal type="number" pos:line="10" pos:column="20">0<pos:position pos:line="10" pos:column="21"/></literal></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22"> <block pos:line="10" pos:column="23">{ <comment type="block" pos:line="10" pos:column="25">/* check dv chunk */</comment>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">do_check_any_chunk<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">m<pos:position pos:line="11" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="27">m<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">-&gt;<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="30">dv<pos:position pos:line="11" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name><name pos:line="12" pos:column="12">m<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">dvsize<pos:position pos:line="12" pos:column="21"/></name></name> <operator pos:line="12" pos:column="22">==<pos:position pos:line="12" pos:column="24"/></operator> <call><name pos:line="12" pos:column="25">chunksize<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name><name pos:line="12" pos:column="35">m<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">dv<pos:position pos:line="12" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">assert<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name><name pos:line="13" pos:column="12">m<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">dvsize<pos:position pos:line="13" pos:column="21"/></name></name> <operator pos:line="13" pos:column="22">&gt;=<pos:position pos:line="13" pos:column="27"/></operator> <name pos:line="13" pos:column="25">MIN_CHUNK_SIZE<pos:position pos:line="13" pos:column="39"/></name></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">assert<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><call><name pos:line="14" pos:column="12">bin_find<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">m<pos:position pos:line="14" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="24">m<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">-&gt;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="27">dv<pos:position pos:line="14" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="30"/></argument_list></call> <operator pos:line="14" pos:column="31">==<pos:position pos:line="14" pos:column="33"/></operator> <literal type="number" pos:line="14" pos:column="34">0<pos:position pos:line="14" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name><name pos:line="17" pos:column="7">m<pos:position pos:line="17" pos:column="8"/></name><operator pos:line="17" pos:column="8">-&gt;<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="10">top<pos:position pos:line="17" pos:column="13"/></name></name> <operator pos:line="17" pos:column="14">!=<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="17">0<pos:position pos:line="17" pos:column="18"/></literal></expr>)<pos:position pos:line="17" pos:column="19"/></condition><then pos:line="17" pos:column="19"> <block pos:line="17" pos:column="20">{   <comment type="block" pos:line="17" pos:column="24">/* check top chunk */</comment>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">do_check_top_chunk<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">m<pos:position pos:line="18" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="27">m<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">-&gt;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="30">top<pos:position pos:line="18" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
    <comment type="block" pos:line="19" pos:column="5">/*assert(m-&gt;topsize == chunksize(m-&gt;top)); redundant */</comment>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">assert<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name><name pos:line="20" pos:column="12">m<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">-&gt;<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="15">topsize<pos:position pos:line="20" pos:column="22"/></name></name> <operator pos:line="20" pos:column="23">&gt;<pos:position pos:line="20" pos:column="27"/></operator> <literal type="number" pos:line="20" pos:column="25">0<pos:position pos:line="20" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">assert<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><call><name pos:line="21" pos:column="12">bin_find<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><name pos:line="21" pos:column="21">m<pos:position pos:line="21" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="24">m<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">-&gt;<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="27">top<pos:position pos:line="21" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call> <operator pos:line="21" pos:column="32">==<pos:position pos:line="21" pos:column="34"/></operator> <literal type="number" pos:line="21" pos:column="35">0<pos:position pos:line="21" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="24" pos:column="3">total<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <call><name pos:line="24" pos:column="11">traverse_and_check<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">m<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">assert<pos:position pos:line="25" pos:column="9"/></name><argument_list pos:line="25" pos:column="9">(<argument><expr><name pos:line="25" pos:column="10">total<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">&lt;=<pos:position pos:line="25" pos:column="21"/></operator> <name><name pos:line="25" pos:column="19">m<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">-&gt;<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="22">footprint<pos:position pos:line="25" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">assert<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">(<argument><expr><name><name pos:line="26" pos:column="10">m<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">-&gt;<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="13">footprint<pos:position pos:line="26" pos:column="22"/></name></name> <operator pos:line="26" pos:column="23">&lt;=<pos:position pos:line="26" pos:column="28"/></operator> <name><name pos:line="26" pos:column="26">m<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-&gt;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="29">max_footprint<pos:position pos:line="26" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
