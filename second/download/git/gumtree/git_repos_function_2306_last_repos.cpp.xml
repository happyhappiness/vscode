<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2306_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">index_fd<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name pos:line="1" pos:column="14">unsigned<pos:position pos:line="1" pos:column="22"/></name> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">sha1<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">fd<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="43">struct<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">stat<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">st<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
	     <parameter><decl><type><name><name pos:line="2" pos:column="14">enum<pos:position pos:line="2" pos:column="18"/></name> <name pos:line="2" pos:column="19">object_type<pos:position pos:line="2" pos:column="30"/></name></name></type> <name pos:line="2" pos:column="31">type<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">path<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">unsigned<pos:position pos:line="2" pos:column="63"/></name></type> <name pos:line="2" pos:column="64">flags<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * Call xsize_t() only when needed to avoid potentially unnecessary
	 * die() for large files.
	 */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">type<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">==<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">OBJ_BLOB<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">&amp;&amp;<pos:position pos:line="10" pos:column="40"/></operator> <name pos:line="10" pos:column="33">path<pos:position pos:line="10" pos:column="37"/></name> <operator pos:line="10" pos:column="38">&amp;&amp;<pos:position pos:line="10" pos:column="48"/></operator> <call><name pos:line="10" pos:column="41">would_convert_to_git_filter_fd<pos:position pos:line="10" pos:column="71"/></name><argument_list pos:line="10" pos:column="71">(<argument><expr><name pos:line="10" pos:column="72">path<pos:position pos:line="10" pos:column="76"/></name></expr></argument>)<pos:position pos:line="10" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="78"/></condition><then pos:line="10" pos:column="78">
		<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">ret<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <call><name pos:line="11" pos:column="23">index_stream_convert_blob<pos:position pos:line="11" pos:column="48"/></name><argument_list pos:line="11" pos:column="48">(<argument><expr><name pos:line="11" pos:column="49">sha1<pos:position pos:line="11" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="55">fd<pos:position pos:line="11" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="59">path<pos:position pos:line="11" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="65">flags<pos:position pos:line="11" pos:column="70"/></name></expr></argument>)<pos:position pos:line="11" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="72"/></expr_stmt></block></then>
	<elseif pos:line="12" pos:column="9">else <if pos:line="12" pos:column="14">if <condition pos:line="12" pos:column="17">(<expr><operator pos:line="12" pos:column="18">!<pos:position pos:line="12" pos:column="19"/></operator><call><name pos:line="12" pos:column="19">S_ISREG<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><name><name pos:line="12" pos:column="27">st<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="31">st_mode<pos:position pos:line="12" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="40"/></condition><then pos:line="12" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="17">ret<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <call><name pos:line="13" pos:column="23">index_pipe<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">sha1<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">fd<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="44">type<pos:position pos:line="13" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="50">path<pos:position pos:line="13" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="56">flags<pos:position pos:line="13" pos:column="61"/></name></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="63"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="14" pos:column="9">else <if pos:line="14" pos:column="14">if <condition pos:line="14" pos:column="17">(<expr><name><name pos:line="14" pos:column="18">st<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">-&gt;<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="22">st_size<pos:position pos:line="14" pos:column="29"/></name></name> <operator pos:line="14" pos:column="30">&lt;=<pos:position pos:line="14" pos:column="35"/></operator> <name pos:line="14" pos:column="33">big_file_threshold<pos:position pos:line="14" pos:column="51"/></name> <operator pos:line="14" pos:column="52">||<pos:position pos:line="14" pos:column="54"/></operator> <name pos:line="14" pos:column="55">type<pos:position pos:line="14" pos:column="59"/></name> <operator pos:line="14" pos:column="60">!=<pos:position pos:line="14" pos:column="62"/></operator> <name pos:line="14" pos:column="63">OBJ_BLOB<pos:position pos:line="14" pos:column="71"/></name> <operator pos:line="14" pos:column="72">||<pos:position pos:line="14" pos:column="74"/></operator>
		 <operator pos:line="15" pos:column="18">(<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="19">path<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">&amp;&amp;<pos:position pos:line="15" pos:column="34"/></operator> <call><name pos:line="15" pos:column="27">would_convert_to_git<pos:position pos:line="15" pos:column="47"/></name><argument_list pos:line="15" pos:column="47">(<argument><expr><operator pos:line="15" pos:column="48">&amp;<pos:position pos:line="15" pos:column="53"/></operator><name pos:line="15" pos:column="49">the_index<pos:position pos:line="15" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="60">path<pos:position pos:line="15" pos:column="64"/></name></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></call><operator pos:line="15" pos:column="65">)<pos:position pos:line="15" pos:column="66"/></operator></expr>)<pos:position pos:line="15" pos:column="67"/></condition><then pos:line="15" pos:column="67">
		<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="17">ret<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <call><name pos:line="16" pos:column="23">index_core<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">(<argument><expr><name pos:line="16" pos:column="34">sha1<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="40">fd<pos:position pos:line="16" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="44">xsize_t<pos:position pos:line="16" pos:column="51"/></name><argument_list pos:line="16" pos:column="51">(<argument><expr><name><name pos:line="16" pos:column="52">st<pos:position pos:line="16" pos:column="54"/></name><operator pos:line="16" pos:column="54">-&gt;<pos:position pos:line="16" pos:column="59"/></operator><name pos:line="16" pos:column="56">st_size<pos:position pos:line="16" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="16" pos:column="66">type<pos:position pos:line="16" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="72">path<pos:position pos:line="16" pos:column="76"/></name></expr></argument>,
				 <argument><expr><name pos:line="17" pos:column="34">flags<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt></block></then></if></elseif>
	<else pos:line="18" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="17">ret<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <call><name pos:line="19" pos:column="23">index_stream<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><name pos:line="19" pos:column="36">sha1<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="42">fd<pos:position pos:line="19" pos:column="44"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="46">xsize_t<pos:position pos:line="19" pos:column="53"/></name><argument_list pos:line="19" pos:column="53">(<argument><expr><name><name pos:line="19" pos:column="54">st<pos:position pos:line="19" pos:column="56"/></name><operator pos:line="19" pos:column="56">-&gt;<pos:position pos:line="19" pos:column="61"/></operator><name pos:line="19" pos:column="58">st_size<pos:position pos:line="19" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="19" pos:column="68">type<pos:position pos:line="19" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="74">path<pos:position pos:line="19" pos:column="78"/></name></expr></argument>,
				   <argument><expr><name pos:line="20" pos:column="36">flags<pos:position pos:line="20" pos:column="41"/></name></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">close<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><name pos:line="21" pos:column="15">fd<pos:position pos:line="21" pos:column="17"/></name></expr></argument>)<pos:position pos:line="21" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt>
	<return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">ret<pos:position pos:line="22" pos:column="19"/></name></expr>;<pos:position pos:line="22" pos:column="20"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
