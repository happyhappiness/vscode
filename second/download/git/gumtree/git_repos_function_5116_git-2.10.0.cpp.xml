<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5116_git-2.10.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">receive_pack_config<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">var<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">value<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">void<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">cb<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">status<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><call><name pos:line="3" pos:column="22">parse_hide_refs_config<pos:position pos:line="3" pos:column="44"/></name><argument_list pos:line="3" pos:column="44">(<argument><expr><name pos:line="3" pos:column="45">var<pos:position pos:line="3" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="50">value<pos:position pos:line="3" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="57">"receive"<pos:position pos:line="3" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="68"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></expr>)<pos:position pos:line="5" pos:column="20"/></condition><then pos:line="5" pos:column="20">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><name pos:line="6" pos:column="24">status<pos:position pos:line="6" pos:column="30"/></name></expr>;<pos:position pos:line="6" pos:column="31"/></return></block></then></if>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">strcmp<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">var<pos:position pos:line="8" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="25">"receive.denydeletes"<pos:position pos:line="8" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="47"/></argument_list></call> <operator pos:line="8" pos:column="48">==<pos:position pos:line="8" pos:column="50"/></operator> <literal type="number" pos:line="8" pos:column="51">0<pos:position pos:line="8" pos:column="52"/></literal></expr>)<pos:position pos:line="8" pos:column="53"/></condition><then pos:line="8" pos:column="53"> <block pos:line="8" pos:column="54">{
		<expr_stmt><expr><name pos:line="9" pos:column="17">deny_deletes<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">=<pos:position pos:line="9" pos:column="31"/></operator> <call><name pos:line="9" pos:column="32">git_config_bool<pos:position pos:line="9" pos:column="47"/></name><argument_list pos:line="9" pos:column="47">(<argument><expr><name pos:line="9" pos:column="48">var<pos:position pos:line="9" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="53">value<pos:position pos:line="9" pos:column="58"/></name></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt>
		<return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">strcmp<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">var<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="25">"receive.denynonfastforwards"<pos:position pos:line="13" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call> <operator pos:line="13" pos:column="56">==<pos:position pos:line="13" pos:column="58"/></operator> <literal type="number" pos:line="13" pos:column="59">0<pos:position pos:line="13" pos:column="60"/></literal></expr>)<pos:position pos:line="13" pos:column="61"/></condition><then pos:line="13" pos:column="61"> <block pos:line="13" pos:column="62">{
		<expr_stmt><expr><name pos:line="14" pos:column="17">deny_non_fast_forwards<pos:position pos:line="14" pos:column="39"/></name> <operator pos:line="14" pos:column="40">=<pos:position pos:line="14" pos:column="41"/></operator> <call><name pos:line="14" pos:column="42">git_config_bool<pos:position pos:line="14" pos:column="57"/></name><argument_list pos:line="14" pos:column="57">(<argument><expr><name pos:line="14" pos:column="58">var<pos:position pos:line="14" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="63">value<pos:position pos:line="14" pos:column="68"/></name></expr></argument>)<pos:position pos:line="14" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="70"/></expr_stmt>
		<return pos:line="15" pos:column="17">return <expr><literal type="number" pos:line="15" pos:column="24">0<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">strcmp<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">var<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="25">"receive.unpacklimit"<pos:position pos:line="18" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call> <operator pos:line="18" pos:column="48">==<pos:position pos:line="18" pos:column="50"/></operator> <literal type="number" pos:line="18" pos:column="51">0<pos:position pos:line="18" pos:column="52"/></literal></expr>)<pos:position pos:line="18" pos:column="53"/></condition><then pos:line="18" pos:column="53"> <block pos:line="18" pos:column="54">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">receive_unpack_limit<pos:position pos:line="19" pos:column="37"/></name> <operator pos:line="19" pos:column="38">=<pos:position pos:line="19" pos:column="39"/></operator> <call><name pos:line="19" pos:column="40">git_config_int<pos:position pos:line="19" pos:column="54"/></name><argument_list pos:line="19" pos:column="54">(<argument><expr><name pos:line="19" pos:column="55">var<pos:position pos:line="19" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="60">value<pos:position pos:line="19" pos:column="65"/></name></expr></argument>)<pos:position pos:line="19" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="67"/></expr_stmt>
		<return pos:line="20" pos:column="17">return <expr><literal type="number" pos:line="20" pos:column="24">0<pos:position pos:line="20" pos:column="25"/></literal></expr>;<pos:position pos:line="20" pos:column="26"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">strcmp<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">var<pos:position pos:line="23" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="25">"transfer.unpacklimit"<pos:position pos:line="23" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call> <operator pos:line="23" pos:column="49">==<pos:position pos:line="23" pos:column="51"/></operator> <literal type="number" pos:line="23" pos:column="52">0<pos:position pos:line="23" pos:column="53"/></literal></expr>)<pos:position pos:line="23" pos:column="54"/></condition><then pos:line="23" pos:column="54"> <block pos:line="23" pos:column="55">{
		<expr_stmt><expr><name pos:line="24" pos:column="17">transfer_unpack_limit<pos:position pos:line="24" pos:column="38"/></name> <operator pos:line="24" pos:column="39">=<pos:position pos:line="24" pos:column="40"/></operator> <call><name pos:line="24" pos:column="41">git_config_int<pos:position pos:line="24" pos:column="55"/></name><argument_list pos:line="24" pos:column="55">(<argument><expr><name pos:line="24" pos:column="56">var<pos:position pos:line="24" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="61">value<pos:position pos:line="24" pos:column="66"/></name></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="68"/></expr_stmt>
		<return pos:line="25" pos:column="17">return <expr><literal type="number" pos:line="25" pos:column="24">0<pos:position pos:line="25" pos:column="25"/></literal></expr>;<pos:position pos:line="25" pos:column="26"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name pos:line="28" pos:column="13">strcmp<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name pos:line="28" pos:column="20">var<pos:position pos:line="28" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="25">"receive.fsck.skiplist"<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call> <operator pos:line="28" pos:column="50">==<pos:position pos:line="28" pos:column="52"/></operator> <literal type="number" pos:line="28" pos:column="53">0<pos:position pos:line="28" pos:column="54"/></literal></expr>)<pos:position pos:line="28" pos:column="55"/></condition><then pos:line="28" pos:column="55"> <block pos:line="28" pos:column="56">{
		<decl_stmt><decl><type><specifier pos:line="29" pos:column="17">const<pos:position pos:line="29" pos:column="22"/></specifier> <name pos:line="29" pos:column="23">char<pos:position pos:line="29" pos:column="27"/></name> <modifier pos:line="29" pos:column="28">*<pos:position pos:line="29" pos:column="29"/></modifier></type><name pos:line="29" pos:column="29">path<pos:position pos:line="29" pos:column="33"/></name></decl>;<pos:position pos:line="29" pos:column="34"/></decl_stmt>

		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><call><name pos:line="31" pos:column="21">git_config_pathname<pos:position pos:line="31" pos:column="40"/></name><argument_list pos:line="31" pos:column="40">(<argument><expr><operator pos:line="31" pos:column="41">&amp;<pos:position pos:line="31" pos:column="46"/></operator><name pos:line="31" pos:column="42">path<pos:position pos:line="31" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="48">var<pos:position pos:line="31" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="53">value<pos:position pos:line="31" pos:column="58"/></name></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="60"/></condition><then pos:line="31" pos:column="60">
			<block type="pseudo"><return pos:line="32" pos:column="25">return <expr><literal type="number" pos:line="32" pos:column="32">1<pos:position pos:line="32" pos:column="33"/></literal></expr>;<pos:position pos:line="32" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">strbuf_addf<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><operator pos:line="33" pos:column="29">&amp;<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="30">fsck_msg_types<pos:position pos:line="33" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="46">"%cskiplist=%s"<pos:position pos:line="33" pos:column="61"/></literal></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name pos:line="34" pos:column="25">fsck_msg_types<pos:position pos:line="34" pos:column="39"/></name><operator pos:line="34" pos:column="39">.<pos:position pos:line="34" pos:column="40"/></operator><name pos:line="34" pos:column="40">len<pos:position pos:line="34" pos:column="43"/></name></name></expr> ?<pos:position pos:line="34" pos:column="45"/></condition><then pos:line="34" pos:column="45"> <expr><literal type="char" pos:line="34" pos:column="46">','<pos:position pos:line="34" pos:column="49"/></literal></expr> <pos:position pos:line="34" pos:column="50"/></then><else pos:line="34" pos:column="50">: <expr><literal type="char" pos:line="34" pos:column="52">'='<pos:position pos:line="34" pos:column="55"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="34" pos:column="57">path<pos:position pos:line="34" pos:column="61"/></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">free<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><operator pos:line="35" pos:column="22">(<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="23">char<pos:position pos:line="35" pos:column="27"/></name> <operator pos:line="35" pos:column="28">*<pos:position pos:line="35" pos:column="29"/></operator><operator pos:line="35" pos:column="29">)<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="30">path<pos:position pos:line="35" pos:column="34"/></name></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>
		<return pos:line="36" pos:column="17">return <expr><literal type="number" pos:line="36" pos:column="24">0<pos:position pos:line="36" pos:column="25"/></literal></expr>;<pos:position pos:line="36" pos:column="26"/></return>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><call><name pos:line="39" pos:column="13">skip_prefix<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">var<pos:position pos:line="39" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="30">"receive.fsck."<pos:position pos:line="39" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="39" pos:column="47">&amp;<pos:position pos:line="39" pos:column="52"/></operator><name pos:line="39" pos:column="48">var<pos:position pos:line="39" pos:column="51"/></name></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="53"/></condition><then pos:line="39" pos:column="53"> <block pos:line="39" pos:column="54">{
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><call><name pos:line="40" pos:column="21">is_valid_msg_type<pos:position pos:line="40" pos:column="38"/></name><argument_list pos:line="40" pos:column="38">(<argument><expr><name pos:line="40" pos:column="39">var<pos:position pos:line="40" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="44">value<pos:position pos:line="40" pos:column="49"/></name></expr></argument>)<pos:position pos:line="40" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="51"/></condition><then pos:line="40" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="25">strbuf_addf<pos:position pos:line="41" pos:column="36"/></name><argument_list pos:line="41" pos:column="36">(<argument><expr><operator pos:line="41" pos:column="37">&amp;<pos:position pos:line="41" pos:column="42"/></operator><name pos:line="41" pos:column="38">fsck_msg_types<pos:position pos:line="41" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="54">"%c%s=%s"<pos:position pos:line="41" pos:column="63"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><name><name pos:line="42" pos:column="33">fsck_msg_types<pos:position pos:line="42" pos:column="47"/></name><operator pos:line="42" pos:column="47">.<pos:position pos:line="42" pos:column="48"/></operator><name pos:line="42" pos:column="48">len<pos:position pos:line="42" pos:column="51"/></name></name></expr> ?<pos:position pos:line="42" pos:column="53"/></condition><then pos:line="42" pos:column="53"> <expr><literal type="char" pos:line="42" pos:column="54">','<pos:position pos:line="42" pos:column="57"/></literal></expr> <pos:position pos:line="42" pos:column="58"/></then><else pos:line="42" pos:column="58">: <expr><literal type="char" pos:line="42" pos:column="60">'='<pos:position pos:line="42" pos:column="63"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="42" pos:column="65">var<pos:position pos:line="42" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="70">value<pos:position pos:line="42" pos:column="75"/></name></expr></argument>)<pos:position pos:line="42" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="77"/></expr_stmt></block></then>
		<else pos:line="43" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="25">warning<pos:position pos:line="44" pos:column="32"/></name><argument_list pos:line="44" pos:column="32">(<argument><expr><literal type="string" pos:line="44" pos:column="33">"Skipping unknown msg id '%s'"<pos:position pos:line="44" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="65">var<pos:position pos:line="44" pos:column="68"/></name></expr></argument>)<pos:position pos:line="44" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="70"/></expr_stmt></block></else></if>
		<return pos:line="45" pos:column="17">return <expr><literal type="number" pos:line="45" pos:column="24">0<pos:position pos:line="45" pos:column="25"/></literal></expr>;<pos:position pos:line="45" pos:column="26"/></return>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>

	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><call><name pos:line="48" pos:column="13">strcmp<pos:position pos:line="48" pos:column="19"/></name><argument_list pos:line="48" pos:column="19">(<argument><expr><name pos:line="48" pos:column="20">var<pos:position pos:line="48" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="25">"receive.fsckobjects"<pos:position pos:line="48" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="47"/></argument_list></call> <operator pos:line="48" pos:column="48">==<pos:position pos:line="48" pos:column="50"/></operator> <literal type="number" pos:line="48" pos:column="51">0<pos:position pos:line="48" pos:column="52"/></literal></expr>)<pos:position pos:line="48" pos:column="53"/></condition><then pos:line="48" pos:column="53"> <block pos:line="48" pos:column="54">{
		<expr_stmt><expr><name pos:line="49" pos:column="17">receive_fsck_objects<pos:position pos:line="49" pos:column="37"/></name> <operator pos:line="49" pos:column="38">=<pos:position pos:line="49" pos:column="39"/></operator> <call><name pos:line="49" pos:column="40">git_config_bool<pos:position pos:line="49" pos:column="55"/></name><argument_list pos:line="49" pos:column="55">(<argument><expr><name pos:line="49" pos:column="56">var<pos:position pos:line="49" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="61">value<pos:position pos:line="49" pos:column="66"/></name></expr></argument>)<pos:position pos:line="49" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="68"/></expr_stmt>
		<return pos:line="50" pos:column="17">return <expr><literal type="number" pos:line="50" pos:column="24">0<pos:position pos:line="50" pos:column="25"/></literal></expr>;<pos:position pos:line="50" pos:column="26"/></return>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>

	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><call><name pos:line="53" pos:column="13">strcmp<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><name pos:line="53" pos:column="20">var<pos:position pos:line="53" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="25">"transfer.fsckobjects"<pos:position pos:line="53" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="48"/></argument_list></call> <operator pos:line="53" pos:column="49">==<pos:position pos:line="53" pos:column="51"/></operator> <literal type="number" pos:line="53" pos:column="52">0<pos:position pos:line="53" pos:column="53"/></literal></expr>)<pos:position pos:line="53" pos:column="54"/></condition><then pos:line="53" pos:column="54"> <block pos:line="53" pos:column="55">{
		<expr_stmt><expr><name pos:line="54" pos:column="17">transfer_fsck_objects<pos:position pos:line="54" pos:column="38"/></name> <operator pos:line="54" pos:column="39">=<pos:position pos:line="54" pos:column="40"/></operator> <call><name pos:line="54" pos:column="41">git_config_bool<pos:position pos:line="54" pos:column="56"/></name><argument_list pos:line="54" pos:column="56">(<argument><expr><name pos:line="54" pos:column="57">var<pos:position pos:line="54" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="62">value<pos:position pos:line="54" pos:column="67"/></name></expr></argument>)<pos:position pos:line="54" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="69"/></expr_stmt>
		<return pos:line="55" pos:column="17">return <expr><literal type="number" pos:line="55" pos:column="24">0<pos:position pos:line="55" pos:column="25"/></literal></expr>;<pos:position pos:line="55" pos:column="26"/></return>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><operator pos:line="58" pos:column="13">!<pos:position pos:line="58" pos:column="14"/></operator><call><name pos:line="58" pos:column="14">strcmp<pos:position pos:line="58" pos:column="20"/></name><argument_list pos:line="58" pos:column="20">(<argument><expr><name pos:line="58" pos:column="21">var<pos:position pos:line="58" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="26">"receive.denycurrentbranch"<pos:position pos:line="58" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="55"/></condition><then pos:line="58" pos:column="55"> <block pos:line="58" pos:column="56">{
		<expr_stmt><expr><name pos:line="59" pos:column="17">deny_current_branch<pos:position pos:line="59" pos:column="36"/></name> <operator pos:line="59" pos:column="37">=<pos:position pos:line="59" pos:column="38"/></operator> <call><name pos:line="59" pos:column="39">parse_deny_action<pos:position pos:line="59" pos:column="56"/></name><argument_list pos:line="59" pos:column="56">(<argument><expr><name pos:line="59" pos:column="57">var<pos:position pos:line="59" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="62">value<pos:position pos:line="59" pos:column="67"/></name></expr></argument>)<pos:position pos:line="59" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="69"/></expr_stmt>
		<return pos:line="60" pos:column="17">return <expr><literal type="number" pos:line="60" pos:column="24">0<pos:position pos:line="60" pos:column="25"/></literal></expr>;<pos:position pos:line="60" pos:column="26"/></return>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if>

	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><call><name pos:line="63" pos:column="13">strcmp<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">(<argument><expr><name pos:line="63" pos:column="20">var<pos:position pos:line="63" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="25">"receive.denydeletecurrent"<pos:position pos:line="63" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="53"/></argument_list></call> <operator pos:line="63" pos:column="54">==<pos:position pos:line="63" pos:column="56"/></operator> <literal type="number" pos:line="63" pos:column="57">0<pos:position pos:line="63" pos:column="58"/></literal></expr>)<pos:position pos:line="63" pos:column="59"/></condition><then pos:line="63" pos:column="59"> <block pos:line="63" pos:column="60">{
		<expr_stmt><expr><name pos:line="64" pos:column="17">deny_delete_current<pos:position pos:line="64" pos:column="36"/></name> <operator pos:line="64" pos:column="37">=<pos:position pos:line="64" pos:column="38"/></operator> <call><name pos:line="64" pos:column="39">parse_deny_action<pos:position pos:line="64" pos:column="56"/></name><argument_list pos:line="64" pos:column="56">(<argument><expr><name pos:line="64" pos:column="57">var<pos:position pos:line="64" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="62">value<pos:position pos:line="64" pos:column="67"/></name></expr></argument>)<pos:position pos:line="64" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="69"/></expr_stmt>
		<return pos:line="65" pos:column="17">return <expr><literal type="number" pos:line="65" pos:column="24">0<pos:position pos:line="65" pos:column="25"/></literal></expr>;<pos:position pos:line="65" pos:column="26"/></return>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if>

	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><call><name pos:line="68" pos:column="13">strcmp<pos:position pos:line="68" pos:column="19"/></name><argument_list pos:line="68" pos:column="19">(<argument><expr><name pos:line="68" pos:column="20">var<pos:position pos:line="68" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="25">"repack.usedeltabaseoffset"<pos:position pos:line="68" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="53"/></argument_list></call> <operator pos:line="68" pos:column="54">==<pos:position pos:line="68" pos:column="56"/></operator> <literal type="number" pos:line="68" pos:column="57">0<pos:position pos:line="68" pos:column="58"/></literal></expr>)<pos:position pos:line="68" pos:column="59"/></condition><then pos:line="68" pos:column="59"> <block pos:line="68" pos:column="60">{
		<expr_stmt><expr><name pos:line="69" pos:column="17">prefer_ofs_delta<pos:position pos:line="69" pos:column="33"/></name> <operator pos:line="69" pos:column="34">=<pos:position pos:line="69" pos:column="35"/></operator> <call><name pos:line="69" pos:column="36">git_config_bool<pos:position pos:line="69" pos:column="51"/></name><argument_list pos:line="69" pos:column="51">(<argument><expr><name pos:line="69" pos:column="52">var<pos:position pos:line="69" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="57">value<pos:position pos:line="69" pos:column="62"/></name></expr></argument>)<pos:position pos:line="69" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="64"/></expr_stmt>
		<return pos:line="70" pos:column="17">return <expr><literal type="number" pos:line="70" pos:column="24">0<pos:position pos:line="70" pos:column="25"/></literal></expr>;<pos:position pos:line="70" pos:column="26"/></return>
	}<pos:position pos:line="71" pos:column="10"/></block></then></if>

	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><call><name pos:line="73" pos:column="13">strcmp<pos:position pos:line="73" pos:column="19"/></name><argument_list pos:line="73" pos:column="19">(<argument><expr><name pos:line="73" pos:column="20">var<pos:position pos:line="73" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="25">"receive.updateserverinfo"<pos:position pos:line="73" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="52"/></argument_list></call> <operator pos:line="73" pos:column="53">==<pos:position pos:line="73" pos:column="55"/></operator> <literal type="number" pos:line="73" pos:column="56">0<pos:position pos:line="73" pos:column="57"/></literal></expr>)<pos:position pos:line="73" pos:column="58"/></condition><then pos:line="73" pos:column="58"> <block pos:line="73" pos:column="59">{
		<expr_stmt><expr><name pos:line="74" pos:column="17">auto_update_server_info<pos:position pos:line="74" pos:column="40"/></name> <operator pos:line="74" pos:column="41">=<pos:position pos:line="74" pos:column="42"/></operator> <call><name pos:line="74" pos:column="43">git_config_bool<pos:position pos:line="74" pos:column="58"/></name><argument_list pos:line="74" pos:column="58">(<argument><expr><name pos:line="74" pos:column="59">var<pos:position pos:line="74" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="64">value<pos:position pos:line="74" pos:column="69"/></name></expr></argument>)<pos:position pos:line="74" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="71"/></expr_stmt>
		<return pos:line="75" pos:column="17">return <expr><literal type="number" pos:line="75" pos:column="24">0<pos:position pos:line="75" pos:column="25"/></literal></expr>;<pos:position pos:line="75" pos:column="26"/></return>
	}<pos:position pos:line="76" pos:column="10"/></block></then></if>

	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><call><name pos:line="78" pos:column="13">strcmp<pos:position pos:line="78" pos:column="19"/></name><argument_list pos:line="78" pos:column="19">(<argument><expr><name pos:line="78" pos:column="20">var<pos:position pos:line="78" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="25">"receive.autogc"<pos:position pos:line="78" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="42"/></argument_list></call> <operator pos:line="78" pos:column="43">==<pos:position pos:line="78" pos:column="45"/></operator> <literal type="number" pos:line="78" pos:column="46">0<pos:position pos:line="78" pos:column="47"/></literal></expr>)<pos:position pos:line="78" pos:column="48"/></condition><then pos:line="78" pos:column="48"> <block pos:line="78" pos:column="49">{
		<expr_stmt><expr><name pos:line="79" pos:column="17">auto_gc<pos:position pos:line="79" pos:column="24"/></name> <operator pos:line="79" pos:column="25">=<pos:position pos:line="79" pos:column="26"/></operator> <call><name pos:line="79" pos:column="27">git_config_bool<pos:position pos:line="79" pos:column="42"/></name><argument_list pos:line="79" pos:column="42">(<argument><expr><name pos:line="79" pos:column="43">var<pos:position pos:line="79" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="48">value<pos:position pos:line="79" pos:column="53"/></name></expr></argument>)<pos:position pos:line="79" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="55"/></expr_stmt>
		<return pos:line="80" pos:column="17">return <expr><literal type="number" pos:line="80" pos:column="24">0<pos:position pos:line="80" pos:column="25"/></literal></expr>;<pos:position pos:line="80" pos:column="26"/></return>
	}<pos:position pos:line="81" pos:column="10"/></block></then></if>

	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><call><name pos:line="83" pos:column="13">strcmp<pos:position pos:line="83" pos:column="19"/></name><argument_list pos:line="83" pos:column="19">(<argument><expr><name pos:line="83" pos:column="20">var<pos:position pos:line="83" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="25">"receive.shallowupdate"<pos:position pos:line="83" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="49"/></argument_list></call> <operator pos:line="83" pos:column="50">==<pos:position pos:line="83" pos:column="52"/></operator> <literal type="number" pos:line="83" pos:column="53">0<pos:position pos:line="83" pos:column="54"/></literal></expr>)<pos:position pos:line="83" pos:column="55"/></condition><then pos:line="83" pos:column="55"> <block pos:line="83" pos:column="56">{
		<expr_stmt><expr><name pos:line="84" pos:column="17">shallow_update<pos:position pos:line="84" pos:column="31"/></name> <operator pos:line="84" pos:column="32">=<pos:position pos:line="84" pos:column="33"/></operator> <call><name pos:line="84" pos:column="34">git_config_bool<pos:position pos:line="84" pos:column="49"/></name><argument_list pos:line="84" pos:column="49">(<argument><expr><name pos:line="84" pos:column="50">var<pos:position pos:line="84" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="55">value<pos:position pos:line="84" pos:column="60"/></name></expr></argument>)<pos:position pos:line="84" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="62"/></expr_stmt>
		<return pos:line="85" pos:column="17">return <expr><literal type="number" pos:line="85" pos:column="24">0<pos:position pos:line="85" pos:column="25"/></literal></expr>;<pos:position pos:line="85" pos:column="26"/></return>
	}<pos:position pos:line="86" pos:column="10"/></block></then></if>

	<if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><call><name pos:line="88" pos:column="13">strcmp<pos:position pos:line="88" pos:column="19"/></name><argument_list pos:line="88" pos:column="19">(<argument><expr><name pos:line="88" pos:column="20">var<pos:position pos:line="88" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="25">"receive.certnonceseed"<pos:position pos:line="88" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="49"/></argument_list></call> <operator pos:line="88" pos:column="50">==<pos:position pos:line="88" pos:column="52"/></operator> <literal type="number" pos:line="88" pos:column="53">0<pos:position pos:line="88" pos:column="54"/></literal></expr>)<pos:position pos:line="88" pos:column="55"/></condition><then pos:line="88" pos:column="55">
		<block type="pseudo"><return pos:line="89" pos:column="17">return <expr><call><name pos:line="89" pos:column="24">git_config_string<pos:position pos:line="89" pos:column="41"/></name><argument_list pos:line="89" pos:column="41">(<argument><expr><operator pos:line="89" pos:column="42">&amp;<pos:position pos:line="89" pos:column="47"/></operator><name pos:line="89" pos:column="43">cert_nonce_seed<pos:position pos:line="89" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="60">var<pos:position pos:line="89" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="65">value<pos:position pos:line="89" pos:column="70"/></name></expr></argument>)<pos:position pos:line="89" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="72"/></return></block></then></if>

	<if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><call><name pos:line="91" pos:column="13">strcmp<pos:position pos:line="91" pos:column="19"/></name><argument_list pos:line="91" pos:column="19">(<argument><expr><name pos:line="91" pos:column="20">var<pos:position pos:line="91" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="25">"receive.certnonceslop"<pos:position pos:line="91" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="49"/></argument_list></call> <operator pos:line="91" pos:column="50">==<pos:position pos:line="91" pos:column="52"/></operator> <literal type="number" pos:line="91" pos:column="53">0<pos:position pos:line="91" pos:column="54"/></literal></expr>)<pos:position pos:line="91" pos:column="55"/></condition><then pos:line="91" pos:column="55"> <block pos:line="91" pos:column="56">{
		<expr_stmt><expr><name pos:line="92" pos:column="17">nonce_stamp_slop_limit<pos:position pos:line="92" pos:column="39"/></name> <operator pos:line="92" pos:column="40">=<pos:position pos:line="92" pos:column="41"/></operator> <call><name pos:line="92" pos:column="42">git_config_ulong<pos:position pos:line="92" pos:column="58"/></name><argument_list pos:line="92" pos:column="58">(<argument><expr><name pos:line="92" pos:column="59">var<pos:position pos:line="92" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="64">value<pos:position pos:line="92" pos:column="69"/></name></expr></argument>)<pos:position pos:line="92" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="71"/></expr_stmt>
		<return pos:line="93" pos:column="17">return <expr><literal type="number" pos:line="93" pos:column="24">0<pos:position pos:line="93" pos:column="25"/></literal></expr>;<pos:position pos:line="93" pos:column="26"/></return>
	}<pos:position pos:line="94" pos:column="10"/></block></then></if>

	<if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><call><name pos:line="96" pos:column="13">strcmp<pos:position pos:line="96" pos:column="19"/></name><argument_list pos:line="96" pos:column="19">(<argument><expr><name pos:line="96" pos:column="20">var<pos:position pos:line="96" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="25">"receive.advertiseatomic"<pos:position pos:line="96" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="51"/></argument_list></call> <operator pos:line="96" pos:column="52">==<pos:position pos:line="96" pos:column="54"/></operator> <literal type="number" pos:line="96" pos:column="55">0<pos:position pos:line="96" pos:column="56"/></literal></expr>)<pos:position pos:line="96" pos:column="57"/></condition><then pos:line="96" pos:column="57"> <block pos:line="96" pos:column="58">{
		<expr_stmt><expr><name pos:line="97" pos:column="17">advertise_atomic_push<pos:position pos:line="97" pos:column="38"/></name> <operator pos:line="97" pos:column="39">=<pos:position pos:line="97" pos:column="40"/></operator> <call><name pos:line="97" pos:column="41">git_config_bool<pos:position pos:line="97" pos:column="56"/></name><argument_list pos:line="97" pos:column="56">(<argument><expr><name pos:line="97" pos:column="57">var<pos:position pos:line="97" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="62">value<pos:position pos:line="97" pos:column="67"/></name></expr></argument>)<pos:position pos:line="97" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="69"/></expr_stmt>
		<return pos:line="98" pos:column="17">return <expr><literal type="number" pos:line="98" pos:column="24">0<pos:position pos:line="98" pos:column="25"/></literal></expr>;<pos:position pos:line="98" pos:column="26"/></return>
	}<pos:position pos:line="99" pos:column="10"/></block></then></if>

	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><call><name pos:line="101" pos:column="13">strcmp<pos:position pos:line="101" pos:column="19"/></name><argument_list pos:line="101" pos:column="19">(<argument><expr><name pos:line="101" pos:column="20">var<pos:position pos:line="101" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="25">"receive.advertisepushoptions"<pos:position pos:line="101" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="56"/></argument_list></call> <operator pos:line="101" pos:column="57">==<pos:position pos:line="101" pos:column="59"/></operator> <literal type="number" pos:line="101" pos:column="60">0<pos:position pos:line="101" pos:column="61"/></literal></expr>)<pos:position pos:line="101" pos:column="62"/></condition><then pos:line="101" pos:column="62"> <block pos:line="101" pos:column="63">{
		<expr_stmt><expr><name pos:line="102" pos:column="17">advertise_push_options<pos:position pos:line="102" pos:column="39"/></name> <operator pos:line="102" pos:column="40">=<pos:position pos:line="102" pos:column="41"/></operator> <call><name pos:line="102" pos:column="42">git_config_bool<pos:position pos:line="102" pos:column="57"/></name><argument_list pos:line="102" pos:column="57">(<argument><expr><name pos:line="102" pos:column="58">var<pos:position pos:line="102" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="63">value<pos:position pos:line="102" pos:column="68"/></name></expr></argument>)<pos:position pos:line="102" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="70"/></expr_stmt>
		<return pos:line="103" pos:column="17">return <expr><literal type="number" pos:line="103" pos:column="24">0<pos:position pos:line="103" pos:column="25"/></literal></expr>;<pos:position pos:line="103" pos:column="26"/></return>
	}<pos:position pos:line="104" pos:column="10"/></block></then></if>

	<if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><call><name pos:line="106" pos:column="13">strcmp<pos:position pos:line="106" pos:column="19"/></name><argument_list pos:line="106" pos:column="19">(<argument><expr><name pos:line="106" pos:column="20">var<pos:position pos:line="106" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="25">"receive.keepalive"<pos:position pos:line="106" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="45"/></argument_list></call> <operator pos:line="106" pos:column="46">==<pos:position pos:line="106" pos:column="48"/></operator> <literal type="number" pos:line="106" pos:column="49">0<pos:position pos:line="106" pos:column="50"/></literal></expr>)<pos:position pos:line="106" pos:column="51"/></condition><then pos:line="106" pos:column="51"> <block pos:line="106" pos:column="52">{
		<expr_stmt><expr><name pos:line="107" pos:column="17">keepalive_in_sec<pos:position pos:line="107" pos:column="33"/></name> <operator pos:line="107" pos:column="34">=<pos:position pos:line="107" pos:column="35"/></operator> <call><name pos:line="107" pos:column="36">git_config_int<pos:position pos:line="107" pos:column="50"/></name><argument_list pos:line="107" pos:column="50">(<argument><expr><name pos:line="107" pos:column="51">var<pos:position pos:line="107" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="56">value<pos:position pos:line="107" pos:column="61"/></name></expr></argument>)<pos:position pos:line="107" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="63"/></expr_stmt>
		<return pos:line="108" pos:column="17">return <expr><literal type="number" pos:line="108" pos:column="24">0<pos:position pos:line="108" pos:column="25"/></literal></expr>;<pos:position pos:line="108" pos:column="26"/></return>
	}<pos:position pos:line="109" pos:column="10"/></block></then></if>

	<return pos:line="111" pos:column="9">return <expr><call><name pos:line="111" pos:column="16">git_default_config<pos:position pos:line="111" pos:column="34"/></name><argument_list pos:line="111" pos:column="34">(<argument><expr><name pos:line="111" pos:column="35">var<pos:position pos:line="111" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="40">value<pos:position pos:line="111" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="47">cb<pos:position pos:line="111" pos:column="49"/></name></expr></argument>)<pos:position pos:line="111" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="51"/></return>
}<pos:position pos:line="112" pos:column="2"/></block></function></unit>
