<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_783.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mark_object<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">object<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">obj<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">type<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">void<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">data<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="66">struct<pos:position pos:line="1" pos:column="72"/></name> <name pos:line="1" pos:column="73">fsck_options<pos:position pos:line="1" pos:column="85"/></name></name> <modifier pos:line="1" pos:column="86">*<pos:position pos:line="1" pos:column="87"/></modifier></type><name pos:line="1" pos:column="87">options<pos:position pos:line="1" pos:column="94"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="95"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">parent<pos:position pos:line="3" pos:column="30"/></name> <init pos:line="3" pos:column="31">= <expr><name pos:line="3" pos:column="33">data<pos:position pos:line="3" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/*
	 * The only case data is NULL or type is OBJ_ANY is when
	 * mark_object_reachable() calls us.  All the callers of
	 * that function has non-NULL obj hence ...
	 */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">obj<pos:position pos:line="10" pos:column="17"/></name></expr>)<pos:position pos:line="10" pos:column="18"/></condition><then pos:line="10" pos:column="18"> <block pos:line="10" pos:column="19">{
		<comment type="block" pos:line="11" pos:column="17">/* ... these references to parent-&gt;fld are safe here */</comment>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">printf<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><literal type="string" pos:line="12" pos:column="24">"broken link from %7s %s\n"<pos:position pos:line="12" pos:column="51"/></literal></expr></argument>,
			   <argument><expr><name><typename pos:line="13" pos:column="28">typename<pos:position pos:line="13" pos:column="36"/></typename></name><operator pos:line="13" pos:column="36">(<pos:position pos:line="13" pos:column="37"/></operator><name><name pos:line="13" pos:column="37">parent<pos:position pos:line="13" pos:column="43"/></name><operator pos:line="13" pos:column="43">-&gt;<pos:position pos:line="13" pos:column="48"/></operator><name pos:line="13" pos:column="45">type<pos:position pos:line="13" pos:column="49"/></name></name><operator pos:line="13" pos:column="49">)<pos:position pos:line="13" pos:column="50"/></operator></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="52">describe_object<pos:position pos:line="13" pos:column="67"/></name><argument_list pos:line="13" pos:column="67">(<argument><expr><name pos:line="13" pos:column="68">parent<pos:position pos:line="13" pos:column="74"/></name></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">printf<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><literal type="string" pos:line="14" pos:column="24">"broken link from %7s %s\n"<pos:position pos:line="14" pos:column="51"/></literal></expr></argument>,
			   <argument><expr><operator pos:line="15" pos:column="28">(<pos:position pos:line="15" pos:column="29"/></operator><ternary><condition><expr><name pos:line="15" pos:column="29">type<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">==<pos:position pos:line="15" pos:column="36"/></operator> <name pos:line="15" pos:column="37">OBJ_ANY<pos:position pos:line="15" pos:column="44"/></name></expr> ?<pos:position pos:line="15" pos:column="46"/></condition><then pos:line="15" pos:column="46"> <expr><literal type="string" pos:line="15" pos:column="47">"unknown"<pos:position pos:line="15" pos:column="56"/></literal></expr> <pos:position pos:line="15" pos:column="57"/></then><else pos:line="15" pos:column="57">: <expr><name><typename pos:line="15" pos:column="59">typename<pos:position pos:line="15" pos:column="67"/></typename></name><operator pos:line="15" pos:column="67">(<pos:position pos:line="15" pos:column="68"/></operator><name pos:line="15" pos:column="68">type<pos:position pos:line="15" pos:column="72"/></name><operator pos:line="15" pos:column="72">)<pos:position pos:line="15" pos:column="73"/></operator></expr></else></ternary><operator pos:line="15" pos:column="73">)<pos:position pos:line="15" pos:column="74"/></operator></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="76">"unknown"<pos:position pos:line="15" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="87"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">errors_found<pos:position pos:line="16" pos:column="29"/></name> <operator pos:line="16" pos:column="30">|=<pos:position pos:line="16" pos:column="32"/></operator> <name pos:line="16" pos:column="33">ERROR_REACHABLE<pos:position pos:line="16" pos:column="48"/></name></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>
		<return pos:line="17" pos:column="17">return <expr><literal type="number" pos:line="17" pos:column="24">1<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">type<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">!=<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">OBJ_ANY<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">&amp;&amp;<pos:position pos:line="20" pos:column="39"/></operator> <name><name pos:line="20" pos:column="32">obj<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">-&gt;<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="37">type<pos:position pos:line="20" pos:column="41"/></name></name> <operator pos:line="20" pos:column="42">!=<pos:position pos:line="20" pos:column="44"/></operator> <name pos:line="20" pos:column="45">type<pos:position pos:line="20" pos:column="49"/></name></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50">
		<comment type="block" pos:line="21" pos:column="17">/* ... and the reference to parent is safe here */</comment>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="17">objerror<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">parent<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="34">"wrong object type in link"<pos:position pos:line="22" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="63"/></expr_stmt></block></then></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">obj<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">-&gt;<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="18">flags<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">&amp;<pos:position pos:line="24" pos:column="29"/></operator> <name pos:line="24" pos:column="26">REACHABLE<pos:position pos:line="24" pos:column="35"/></name></expr>)<pos:position pos:line="24" pos:column="36"/></condition><then pos:line="24" pos:column="36">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><literal type="number" pos:line="25" pos:column="24">0<pos:position pos:line="25" pos:column="25"/></literal></expr>;<pos:position pos:line="25" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name><name pos:line="26" pos:column="9">obj<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">flags<pos:position pos:line="26" pos:column="19"/></name></name> <operator pos:line="26" pos:column="20">|=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">REACHABLE<pos:position pos:line="26" pos:column="32"/></name></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><operator pos:line="27" pos:column="14">(<pos:position pos:line="27" pos:column="15"/></operator><name><name pos:line="27" pos:column="15">obj<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">-&gt;<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="20">flags<pos:position pos:line="27" pos:column="25"/></name></name> <operator pos:line="27" pos:column="26">&amp;<pos:position pos:line="27" pos:column="31"/></operator> <name pos:line="27" pos:column="28">HAS_OBJ<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">)<pos:position pos:line="27" pos:column="36"/></operator></expr>)<pos:position pos:line="27" pos:column="37"/></condition><then pos:line="27" pos:column="37"> <block pos:line="27" pos:column="38">{
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">parent<pos:position pos:line="28" pos:column="27"/></name> <operator pos:line="28" pos:column="28">&amp;&amp;<pos:position pos:line="28" pos:column="38"/></operator> <operator pos:line="28" pos:column="31">!<pos:position pos:line="28" pos:column="32"/></operator><call><name pos:line="28" pos:column="32">has_object_file<pos:position pos:line="28" pos:column="47"/></name><argument_list pos:line="28" pos:column="47">(<argument><expr><operator pos:line="28" pos:column="48">&amp;<pos:position pos:line="28" pos:column="53"/></operator><name><name pos:line="28" pos:column="49">obj<pos:position pos:line="28" pos:column="52"/></name><operator pos:line="28" pos:column="52">-&gt;<pos:position pos:line="28" pos:column="57"/></operator><name pos:line="28" pos:column="54">oid<pos:position pos:line="28" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="59"/></condition><then pos:line="28" pos:column="59"> <block pos:line="28" pos:column="60">{
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">printf<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><literal type="string" pos:line="29" pos:column="32">"broken link from %7s %s\n"<pos:position pos:line="29" pos:column="59"/></literal></expr></argument>,
				 <argument><expr><name><typename pos:line="30" pos:column="34">typename<pos:position pos:line="30" pos:column="42"/></typename></name><operator pos:line="30" pos:column="42">(<pos:position pos:line="30" pos:column="43"/></operator><name><name pos:line="30" pos:column="43">parent<pos:position pos:line="30" pos:column="49"/></name><operator pos:line="30" pos:column="49">-&gt;<pos:position pos:line="30" pos:column="54"/></operator><name pos:line="30" pos:column="51">type<pos:position pos:line="30" pos:column="55"/></name></name><operator pos:line="30" pos:column="55">)<pos:position pos:line="30" pos:column="56"/></operator></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="58">describe_object<pos:position pos:line="30" pos:column="73"/></name><argument_list pos:line="30" pos:column="73">(<argument><expr><name pos:line="30" pos:column="74">parent<pos:position pos:line="30" pos:column="80"/></name></expr></argument>)<pos:position pos:line="30" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="83"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">printf<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><literal type="string" pos:line="31" pos:column="32">"              to %7s %s\n"<pos:position pos:line="31" pos:column="59"/></literal></expr></argument>,
				 <argument><expr><name><typename pos:line="32" pos:column="34">typename<pos:position pos:line="32" pos:column="42"/></typename></name><operator pos:line="32" pos:column="42">(<pos:position pos:line="32" pos:column="43"/></operator><name><name pos:line="32" pos:column="43">obj<pos:position pos:line="32" pos:column="46"/></name><operator pos:line="32" pos:column="46">-&gt;<pos:position pos:line="32" pos:column="51"/></operator><name pos:line="32" pos:column="48">type<pos:position pos:line="32" pos:column="52"/></name></name><operator pos:line="32" pos:column="52">)<pos:position pos:line="32" pos:column="53"/></operator></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="55">describe_object<pos:position pos:line="32" pos:column="70"/></name><argument_list pos:line="32" pos:column="70">(<argument><expr><name pos:line="32" pos:column="71">obj<pos:position pos:line="32" pos:column="74"/></name></expr></argument>)<pos:position pos:line="32" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="77"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">errors_found<pos:position pos:line="33" pos:column="37"/></name> <operator pos:line="33" pos:column="38">|=<pos:position pos:line="33" pos:column="40"/></operator> <name pos:line="33" pos:column="41">ERROR_REACHABLE<pos:position pos:line="33" pos:column="56"/></name></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
		<return pos:line="35" pos:column="17">return <expr><literal type="number" pos:line="35" pos:column="24">1<pos:position pos:line="35" pos:column="25"/></literal></expr>;<pos:position pos:line="35" pos:column="26"/></return>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="38" pos:column="9">add_object_array<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><name pos:line="38" pos:column="26">obj<pos:position pos:line="38" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="31">NULL<pos:position pos:line="38" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="37">&amp;<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="38">pending<pos:position pos:line="38" pos:column="45"/></name></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="47"/></expr_stmt>
	<return pos:line="39" pos:column="9">return <expr><literal type="number" pos:line="39" pos:column="16">0<pos:position pos:line="39" pos:column="17"/></literal></expr>;<pos:position pos:line="39" pos:column="18"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
