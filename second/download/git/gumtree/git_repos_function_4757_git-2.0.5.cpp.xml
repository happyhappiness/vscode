<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4757_git-2.0.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_pack_redundant<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">argc<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">argv<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">prefix<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">pack_list<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">min<pos:position pos:line="4" pos:column="30"/></name></decl>, <modifier pos:line="4" pos:column="32">*<pos:position pos:line="4" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="33">red<pos:position pos:line="4" pos:column="36"/></name></decl>, <modifier pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="39">pl<pos:position pos:line="4" pos:column="41"/></name></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">llist<pos:position pos:line="5" pos:column="21"/></name></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">ignore<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">sha1<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">buf<pos:position pos:line="7" pos:column="17"/></name><index pos:line="7" pos:column="17">[<expr><literal type="number" pos:line="7" pos:column="18">42<pos:position pos:line="7" pos:column="20"/></literal></expr>]<pos:position pos:line="7" pos:column="21"/></index></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt> <comment type="block" pos:line="7" pos:column="23">/* 40 byte sha1 + \n + \0 */</comment>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">argc<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">==<pos:position pos:line="9" pos:column="20"/></operator> <literal type="number" pos:line="9" pos:column="21">2<pos:position pos:line="9" pos:column="22"/></literal> <operator pos:line="9" pos:column="23">&amp;&amp;<pos:position pos:line="9" pos:column="33"/></operator> <operator pos:line="9" pos:column="26">!<pos:position pos:line="9" pos:column="27"/></operator><call><name pos:line="9" pos:column="27">strcmp<pos:position pos:line="9" pos:column="33"/></name><argument_list pos:line="9" pos:column="33">(<argument><expr><name><name pos:line="9" pos:column="34">argv<pos:position pos:line="9" pos:column="38"/></name><index pos:line="9" pos:column="38">[<expr><literal type="number" pos:line="9" pos:column="39">1<pos:position pos:line="9" pos:column="40"/></literal></expr>]<pos:position pos:line="9" pos:column="41"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="43">"-h"<pos:position pos:line="9" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="49"/></condition><then pos:line="9" pos:column="49">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">usage<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">pack_redundant_usage<pos:position pos:line="10" pos:column="43"/></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt></block></then></if>

	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init><expr><name pos:line="12" pos:column="14">i<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="18">1<pos:position pos:line="12" pos:column="19"/></literal></expr>;<pos:position pos:line="12" pos:column="20"/></init> <condition><expr><name pos:line="12" pos:column="21">i<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">&lt;<pos:position pos:line="12" pos:column="27"/></operator> <name pos:line="12" pos:column="25">argc<pos:position pos:line="12" pos:column="29"/></name></expr>;<pos:position pos:line="12" pos:column="30"/></condition> <incr><expr><name pos:line="12" pos:column="31">i<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">++<pos:position pos:line="12" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="35"/></control> <block pos:line="12" pos:column="36">{
		<decl_stmt><decl><type><specifier pos:line="13" pos:column="17">const<pos:position pos:line="13" pos:column="22"/></specifier> <name pos:line="13" pos:column="23">char<pos:position pos:line="13" pos:column="27"/></name> <modifier pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></modifier></type><name pos:line="13" pos:column="29">arg<pos:position pos:line="13" pos:column="32"/></name> <init pos:line="13" pos:column="33">= <expr><name><name pos:line="13" pos:column="35">argv<pos:position pos:line="13" pos:column="39"/></name><index pos:line="13" pos:column="39">[<expr><name pos:line="13" pos:column="40">i<pos:position pos:line="13" pos:column="41"/></name></expr>]<pos:position pos:line="13" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="13" pos:column="43"/></decl_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><operator pos:line="14" pos:column="21">!<pos:position pos:line="14" pos:column="22"/></operator><call><name pos:line="14" pos:column="22">strcmp<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">arg<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="34">"--"<pos:position pos:line="14" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="40"/></condition><then pos:line="14" pos:column="40"> <block pos:line="14" pos:column="41">{
			<expr_stmt><expr><name pos:line="15" pos:column="25">i<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">++<pos:position pos:line="15" pos:column="28"/></operator></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>
			<break pos:line="16" pos:column="25">break;<pos:position pos:line="16" pos:column="31"/></break>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><call><name pos:line="18" pos:column="22">strcmp<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">arg<pos:position pos:line="18" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="34">"--all"<pos:position pos:line="18" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43"> <block pos:line="18" pos:column="44">{
			<expr_stmt><expr><name pos:line="19" pos:column="25">load_all_packs<pos:position pos:line="19" pos:column="39"/></name> <operator pos:line="19" pos:column="40">=<pos:position pos:line="19" pos:column="41"/></operator> <literal type="number" pos:line="19" pos:column="42">1<pos:position pos:line="19" pos:column="43"/></literal></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>
			<continue pos:line="20" pos:column="25">continue;<pos:position pos:line="20" pos:column="34"/></continue>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><call><name pos:line="22" pos:column="22">strcmp<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">arg<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="34">"--verbose"<pos:position pos:line="22" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="47"/></condition><then pos:line="22" pos:column="47"> <block pos:line="22" pos:column="48">{
			<expr_stmt><expr><name pos:line="23" pos:column="25">verbose<pos:position pos:line="23" pos:column="32"/></name> <operator pos:line="23" pos:column="33">=<pos:position pos:line="23" pos:column="34"/></operator> <literal type="number" pos:line="23" pos:column="35">1<pos:position pos:line="23" pos:column="36"/></literal></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
			<continue pos:line="24" pos:column="25">continue;<pos:position pos:line="24" pos:column="34"/></continue>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><operator pos:line="26" pos:column="21">!<pos:position pos:line="26" pos:column="22"/></operator><call><name pos:line="26" pos:column="22">strcmp<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">arg<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="34">"--alt-odb"<pos:position pos:line="26" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="47"/></condition><then pos:line="26" pos:column="47"> <block pos:line="26" pos:column="48">{
			<expr_stmt><expr><name pos:line="27" pos:column="25">alt_odb<pos:position pos:line="27" pos:column="32"/></name> <operator pos:line="27" pos:column="33">=<pos:position pos:line="27" pos:column="34"/></operator> <literal type="number" pos:line="27" pos:column="35">1<pos:position pos:line="27" pos:column="36"/></literal></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
			<continue pos:line="28" pos:column="25">continue;<pos:position pos:line="28" pos:column="34"/></continue>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">*<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">arg<pos:position pos:line="30" pos:column="25"/></name> <operator pos:line="30" pos:column="26">==<pos:position pos:line="30" pos:column="28"/></operator> <literal type="char" pos:line="30" pos:column="29">'-'<pos:position pos:line="30" pos:column="32"/></literal></expr>)<pos:position pos:line="30" pos:column="33"/></condition><then pos:line="30" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">usage<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">pack_redundant_usage<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt></block></then>
		<else pos:line="32" pos:column="17">else
			<block type="pseudo"><break pos:line="33" pos:column="25">break;<pos:position pos:line="33" pos:column="31"/></break></block></else></if>
	}<pos:position pos:line="34" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="36" pos:column="9">prepare_packed_git<pos:position pos:line="36" pos:column="27"/></name><argument_list pos:line="36" pos:column="27">()<pos:position pos:line="36" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">load_all_packs<pos:position pos:line="38" pos:column="27"/></name></expr>)<pos:position pos:line="38" pos:column="28"/></condition><then pos:line="38" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="17">load_all<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">()<pos:position pos:line="39" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt></block></then>
	<else pos:line="40" pos:column="9">else
		<block type="pseudo"><while pos:line="41" pos:column="17">while <condition pos:line="41" pos:column="23">(<expr><operator pos:line="41" pos:column="24">*<pos:position pos:line="41" pos:column="25"/></operator><operator pos:line="41" pos:column="25">(<pos:position pos:line="41" pos:column="26"/></operator><name pos:line="41" pos:column="26">argv<pos:position pos:line="41" pos:column="30"/></name> <operator pos:line="41" pos:column="31">+<pos:position pos:line="41" pos:column="32"/></operator> <name pos:line="41" pos:column="33">i<pos:position pos:line="41" pos:column="34"/></name><operator pos:line="41" pos:column="34">)<pos:position pos:line="41" pos:column="35"/></operator> <operator pos:line="41" pos:column="36">!=<pos:position pos:line="41" pos:column="38"/></operator> <name pos:line="41" pos:column="39">NULL<pos:position pos:line="41" pos:column="43"/></name></expr>)<pos:position pos:line="41" pos:column="44"/></condition>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="25">add_pack_file<pos:position pos:line="42" pos:column="38"/></name><argument_list pos:line="42" pos:column="38">(<argument><expr><operator pos:line="42" pos:column="39">*<pos:position pos:line="42" pos:column="40"/></operator><operator pos:line="42" pos:column="40">(<pos:position pos:line="42" pos:column="41"/></operator><name pos:line="42" pos:column="41">argv<pos:position pos:line="42" pos:column="45"/></name> <operator pos:line="42" pos:column="46">+<pos:position pos:line="42" pos:column="47"/></operator> <name pos:line="42" pos:column="48">i<pos:position pos:line="42" pos:column="49"/></name><operator pos:line="42" pos:column="49">++<pos:position pos:line="42" pos:column="51"/></operator><operator pos:line="42" pos:column="51">)<pos:position pos:line="42" pos:column="52"/></operator></expr></argument>)<pos:position pos:line="42" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="54"/></expr_stmt></block></while></block></else></if>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">local_packs<pos:position pos:line="44" pos:column="24"/></name> <operator pos:line="44" pos:column="25">==<pos:position pos:line="44" pos:column="27"/></operator> <name pos:line="44" pos:column="28">NULL<pos:position pos:line="44" pos:column="32"/></name></expr>)<pos:position pos:line="44" pos:column="33"/></condition><then pos:line="44" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="17">die<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><literal type="string" pos:line="45" pos:column="21">"Zero packs found!"<pos:position pos:line="45" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="42"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="47" pos:column="9">load_all_objects<pos:position pos:line="47" pos:column="25"/></name><argument_list pos:line="47" pos:column="25">()<pos:position pos:line="47" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="49" pos:column="9">cmp_local_packs<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">()<pos:position pos:line="49" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="27"/></expr_stmt>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">alt_odb<pos:position pos:line="50" pos:column="20"/></name></expr>)<pos:position pos:line="50" pos:column="21"/></condition><then pos:line="50" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="17">scan_alt_odb_packs<pos:position pos:line="51" pos:column="35"/></name><argument_list pos:line="51" pos:column="35">()<pos:position pos:line="51" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="38"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="53" pos:column="9">/* ignore objects given on stdin */</comment>
	<expr_stmt><expr><call><name pos:line="54" pos:column="9">llist_init<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><operator pos:line="54" pos:column="20">&amp;<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="21">ignore<pos:position pos:line="54" pos:column="27"/></name></expr></argument>)<pos:position pos:line="54" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="29"/></expr_stmt>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><call><name pos:line="55" pos:column="14">isatty<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">(<argument><expr><literal type="number" pos:line="55" pos:column="21">0<pos:position pos:line="55" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="24"/></condition><then pos:line="55" pos:column="24"> <block pos:line="55" pos:column="25">{
		<while pos:line="56" pos:column="17">while <condition pos:line="56" pos:column="23">(<expr><call><name pos:line="56" pos:column="24">fgets<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name pos:line="56" pos:column="30">buf<pos:position pos:line="56" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="35">sizeof<argument_list pos:line="56" pos:column="41">(<argument><expr><name pos:line="56" pos:column="42">buf<pos:position pos:line="56" pos:column="45"/></name></expr></argument>)<pos:position pos:line="56" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="56" pos:column="48">stdin<pos:position pos:line="56" pos:column="53"/></name></expr></argument>)<pos:position pos:line="56" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="55"/></condition> <block pos:line="56" pos:column="56">{
			<expr_stmt><expr><name pos:line="57" pos:column="25">sha1<pos:position pos:line="57" pos:column="29"/></name> <operator pos:line="57" pos:column="30">=<pos:position pos:line="57" pos:column="31"/></operator> <call><name pos:line="57" pos:column="32">xmalloc<pos:position pos:line="57" pos:column="39"/></name><argument_list pos:line="57" pos:column="39">(<argument><expr><literal type="number" pos:line="57" pos:column="40">20<pos:position pos:line="57" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="44"/></expr_stmt>
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><call><name pos:line="58" pos:column="29">get_sha1_hex<pos:position pos:line="58" pos:column="41"/></name><argument_list pos:line="58" pos:column="41">(<argument><expr><name pos:line="58" pos:column="42">buf<pos:position pos:line="58" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="47">sha1<pos:position pos:line="58" pos:column="51"/></name></expr></argument>)<pos:position pos:line="58" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="53"/></condition><then pos:line="58" pos:column="53">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="33">die<pos:position pos:line="59" pos:column="36"/></name><argument_list pos:line="59" pos:column="36">(<argument><expr><literal type="string" pos:line="59" pos:column="37">"Bad sha1 on stdin: %s"<pos:position pos:line="59" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="62">buf<pos:position pos:line="59" pos:column="65"/></name></expr></argument>)<pos:position pos:line="59" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="67"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">llist_insert_sorted_unique<pos:position pos:line="60" pos:column="51"/></name><argument_list pos:line="60" pos:column="51">(<argument><expr><name pos:line="60" pos:column="52">ignore<pos:position pos:line="60" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="60">sha1<pos:position pos:line="60" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="66">NULL<pos:position pos:line="60" pos:column="70"/></name></expr></argument>)<pos:position pos:line="60" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="72"/></expr_stmt>
		}<pos:position pos:line="61" pos:column="18"/></block></while>
	}<pos:position pos:line="62" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="63" pos:column="9">llist_sorted_difference_inplace<pos:position pos:line="63" pos:column="40"/></name><argument_list pos:line="63" pos:column="40">(<argument><expr><name pos:line="63" pos:column="41">all_objects<pos:position pos:line="63" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="54">ignore<pos:position pos:line="63" pos:column="60"/></name></expr></argument>)<pos:position pos:line="63" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><name pos:line="64" pos:column="9">pl<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">=<pos:position pos:line="64" pos:column="13"/></operator> <name pos:line="64" pos:column="14">local_packs<pos:position pos:line="64" pos:column="25"/></name></expr>;<pos:position pos:line="64" pos:column="26"/></expr_stmt>
	<while pos:line="65" pos:column="9">while <condition pos:line="65" pos:column="15">(<expr><name pos:line="65" pos:column="16">pl<pos:position pos:line="65" pos:column="18"/></name></expr>)<pos:position pos:line="65" pos:column="19"/></condition> <block pos:line="65" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">llist_sorted_difference_inplace<pos:position pos:line="66" pos:column="48"/></name><argument_list pos:line="66" pos:column="48">(<argument><expr><name><name pos:line="66" pos:column="49">pl<pos:position pos:line="66" pos:column="51"/></name><operator pos:line="66" pos:column="51">-&gt;<pos:position pos:line="66" pos:column="56"/></operator><name pos:line="66" pos:column="53">unique_objects<pos:position pos:line="66" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="69">ignore<pos:position pos:line="66" pos:column="75"/></name></expr></argument>)<pos:position pos:line="66" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><name pos:line="67" pos:column="17">pl<pos:position pos:line="67" pos:column="19"/></name> <operator pos:line="67" pos:column="20">=<pos:position pos:line="67" pos:column="21"/></operator> <name><name pos:line="67" pos:column="22">pl<pos:position pos:line="67" pos:column="24"/></name><operator pos:line="67" pos:column="24">-&gt;<pos:position pos:line="67" pos:column="29"/></operator><name pos:line="67" pos:column="26">next<pos:position pos:line="67" pos:column="30"/></name></name></expr>;<pos:position pos:line="67" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="68" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="70" pos:column="9">minimize<pos:position pos:line="70" pos:column="17"/></name><argument_list pos:line="70" pos:column="17">(<argument><expr><operator pos:line="70" pos:column="18">&amp;<pos:position pos:line="70" pos:column="23"/></operator><name pos:line="70" pos:column="19">min<pos:position pos:line="70" pos:column="22"/></name></expr></argument>)<pos:position pos:line="70" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="24"/></expr_stmt>

	<if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><name pos:line="72" pos:column="13">verbose<pos:position pos:line="72" pos:column="20"/></name></expr>)<pos:position pos:line="72" pos:column="21"/></condition><then pos:line="72" pos:column="21"> <block pos:line="72" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">fprintf<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><name pos:line="73" pos:column="25">stderr<pos:position pos:line="73" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="33">"There are %lu packs available in alt-odbs.\n"<pos:position pos:line="73" pos:column="79"/></literal></expr></argument>,
			<argument><expr><operator pos:line="74" pos:column="25">(<pos:position pos:line="74" pos:column="26"/></operator><name pos:line="74" pos:column="26">unsigned<pos:position pos:line="74" pos:column="34"/></name> <name pos:line="74" pos:column="35">long<pos:position pos:line="74" pos:column="39"/></name><operator pos:line="74" pos:column="39">)<pos:position pos:line="74" pos:column="40"/></operator><call><name pos:line="74" pos:column="40">pack_list_size<pos:position pos:line="74" pos:column="54"/></name><argument_list pos:line="74" pos:column="54">(<argument><expr><name pos:line="74" pos:column="55">altodb_packs<pos:position pos:line="74" pos:column="67"/></name></expr></argument>)<pos:position pos:line="74" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="75" pos:column="17">fprintf<pos:position pos:line="75" pos:column="24"/></name><argument_list pos:line="75" pos:column="24">(<argument><expr><name pos:line="75" pos:column="25">stderr<pos:position pos:line="75" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="33">"The smallest (bytewise) set of packs is:\n"<pos:position pos:line="75" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><name pos:line="76" pos:column="17">pl<pos:position pos:line="76" pos:column="19"/></name> <operator pos:line="76" pos:column="20">=<pos:position pos:line="76" pos:column="21"/></operator> <name pos:line="76" pos:column="22">min<pos:position pos:line="76" pos:column="25"/></name></expr>;<pos:position pos:line="76" pos:column="26"/></expr_stmt>
		<while pos:line="77" pos:column="17">while <condition pos:line="77" pos:column="23">(<expr><name pos:line="77" pos:column="24">pl<pos:position pos:line="77" pos:column="26"/></name></expr>)<pos:position pos:line="77" pos:column="27"/></condition> <block pos:line="77" pos:column="28">{
			<expr_stmt><expr><call><name pos:line="78" pos:column="25">fprintf<pos:position pos:line="78" pos:column="32"/></name><argument_list pos:line="78" pos:column="32">(<argument><expr><name pos:line="78" pos:column="33">stderr<pos:position pos:line="78" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="41">"\t%s\n"<pos:position pos:line="78" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="51">pl<pos:position pos:line="78" pos:column="53"/></name><operator pos:line="78" pos:column="53">-&gt;<pos:position pos:line="78" pos:column="58"/></operator><name pos:line="78" pos:column="55">pack<pos:position pos:line="78" pos:column="59"/></name><operator pos:line="78" pos:column="59">-&gt;<pos:position pos:line="78" pos:column="64"/></operator><name pos:line="78" pos:column="61">pack_name<pos:position pos:line="78" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><name pos:line="79" pos:column="25">pl<pos:position pos:line="79" pos:column="27"/></name> <operator pos:line="79" pos:column="28">=<pos:position pos:line="79" pos:column="29"/></operator> <name><name pos:line="79" pos:column="30">pl<pos:position pos:line="79" pos:column="32"/></name><operator pos:line="79" pos:column="32">-&gt;<pos:position pos:line="79" pos:column="37"/></operator><name pos:line="79" pos:column="34">next<pos:position pos:line="79" pos:column="38"/></name></name></expr>;<pos:position pos:line="79" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="80" pos:column="18"/></block></while>
		<expr_stmt><expr><call><name pos:line="81" pos:column="17">fprintf<pos:position pos:line="81" pos:column="24"/></name><argument_list pos:line="81" pos:column="24">(<argument><expr><name pos:line="81" pos:column="25">stderr<pos:position pos:line="81" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="33">"containing %lu duplicate objects "<pos:position pos:line="81" pos:column="68"/></literal>
				<literal type="string" pos:line="82" pos:column="33">"with a total size of %lukb.\n"<pos:position pos:line="82" pos:column="64"/></literal></expr></argument>,
			<argument><expr><operator pos:line="83" pos:column="25">(<pos:position pos:line="83" pos:column="26"/></operator><name pos:line="83" pos:column="26">unsigned<pos:position pos:line="83" pos:column="34"/></name> <name pos:line="83" pos:column="35">long<pos:position pos:line="83" pos:column="39"/></name><operator pos:line="83" pos:column="39">)<pos:position pos:line="83" pos:column="40"/></operator><call><name pos:line="83" pos:column="40">get_pack_redundancy<pos:position pos:line="83" pos:column="59"/></name><argument_list pos:line="83" pos:column="59">(<argument><expr><name pos:line="83" pos:column="60">min<pos:position pos:line="83" pos:column="63"/></name></expr></argument>)<pos:position pos:line="83" pos:column="64"/></argument_list></call></expr></argument>,
			<argument><expr><operator pos:line="84" pos:column="25">(<pos:position pos:line="84" pos:column="26"/></operator><name pos:line="84" pos:column="26">unsigned<pos:position pos:line="84" pos:column="34"/></name> <name pos:line="84" pos:column="35">long<pos:position pos:line="84" pos:column="39"/></name><operator pos:line="84" pos:column="39">)<pos:position pos:line="84" pos:column="40"/></operator><call><name pos:line="84" pos:column="40">pack_set_bytecount<pos:position pos:line="84" pos:column="58"/></name><argument_list pos:line="84" pos:column="58">(<argument><expr><name pos:line="84" pos:column="59">min<pos:position pos:line="84" pos:column="62"/></name></expr></argument>)<pos:position pos:line="84" pos:column="63"/></argument_list></call><operator pos:line="84" pos:column="63">/<pos:position pos:line="84" pos:column="64"/></operator><literal type="number" pos:line="84" pos:column="64">1024<pos:position pos:line="84" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="70"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">fprintf<pos:position pos:line="85" pos:column="24"/></name><argument_list pos:line="85" pos:column="24">(<argument><expr><name pos:line="85" pos:column="25">stderr<pos:position pos:line="85" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="33">"A total of %lu unique objects were considered.\n"<pos:position pos:line="85" pos:column="83"/></literal></expr></argument>,
			<argument><expr><operator pos:line="86" pos:column="25">(<pos:position pos:line="86" pos:column="26"/></operator><name pos:line="86" pos:column="26">unsigned<pos:position pos:line="86" pos:column="34"/></name> <name pos:line="86" pos:column="35">long<pos:position pos:line="86" pos:column="39"/></name><operator pos:line="86" pos:column="39">)<pos:position pos:line="86" pos:column="40"/></operator><name><name pos:line="86" pos:column="40">all_objects<pos:position pos:line="86" pos:column="51"/></name><operator pos:line="86" pos:column="51">-&gt;<pos:position pos:line="86" pos:column="56"/></operator><name pos:line="86" pos:column="53">size<pos:position pos:line="86" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="87" pos:column="17">fprintf<pos:position pos:line="87" pos:column="24"/></name><argument_list pos:line="87" pos:column="24">(<argument><expr><name pos:line="87" pos:column="25">stderr<pos:position pos:line="87" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="33">"Redundant packs (with indexes):\n"<pos:position pos:line="87" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="70"/></expr_stmt>
	}<pos:position pos:line="88" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="89" pos:column="9">pl<pos:position pos:line="89" pos:column="11"/></name> <operator pos:line="89" pos:column="12">=<pos:position pos:line="89" pos:column="13"/></operator> <name pos:line="89" pos:column="14">red<pos:position pos:line="89" pos:column="17"/></name> <operator pos:line="89" pos:column="18">=<pos:position pos:line="89" pos:column="19"/></operator> <call><name pos:line="89" pos:column="20">pack_list_difference<pos:position pos:line="89" pos:column="40"/></name><argument_list pos:line="89" pos:column="40">(<argument><expr><name pos:line="89" pos:column="41">local_packs<pos:position pos:line="89" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="54">min<pos:position pos:line="89" pos:column="57"/></name></expr></argument>)<pos:position pos:line="89" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="59"/></expr_stmt>
	<while pos:line="90" pos:column="9">while <condition pos:line="90" pos:column="15">(<expr><name pos:line="90" pos:column="16">pl<pos:position pos:line="90" pos:column="18"/></name></expr>)<pos:position pos:line="90" pos:column="19"/></condition> <block pos:line="90" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="91" pos:column="17">printf<pos:position pos:line="91" pos:column="23"/></name><argument_list pos:line="91" pos:column="23">(<argument><expr><literal type="string" pos:line="91" pos:column="24">"%s\n%s\n"<pos:position pos:line="91" pos:column="34"/></literal></expr></argument>,
		       <argument><expr><call><name pos:line="92" pos:column="24">sha1_pack_index_name<pos:position pos:line="92" pos:column="44"/></name><argument_list pos:line="92" pos:column="44">(<argument><expr><name><name pos:line="92" pos:column="45">pl<pos:position pos:line="92" pos:column="47"/></name><operator pos:line="92" pos:column="47">-&gt;<pos:position pos:line="92" pos:column="52"/></operator><name pos:line="92" pos:column="49">pack<pos:position pos:line="92" pos:column="53"/></name><operator pos:line="92" pos:column="53">-&gt;<pos:position pos:line="92" pos:column="58"/></operator><name pos:line="92" pos:column="55">sha1<pos:position pos:line="92" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="60"/></argument_list></call></expr></argument>,
		       <argument><expr><name><name pos:line="93" pos:column="24">pl<pos:position pos:line="93" pos:column="26"/></name><operator pos:line="93" pos:column="26">-&gt;<pos:position pos:line="93" pos:column="31"/></operator><name pos:line="93" pos:column="28">pack<pos:position pos:line="93" pos:column="32"/></name><operator pos:line="93" pos:column="32">-&gt;<pos:position pos:line="93" pos:column="37"/></operator><name pos:line="93" pos:column="34">pack_name<pos:position pos:line="93" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="94" pos:column="17">pl<pos:position pos:line="94" pos:column="19"/></name> <operator pos:line="94" pos:column="20">=<pos:position pos:line="94" pos:column="21"/></operator> <name><name pos:line="94" pos:column="22">pl<pos:position pos:line="94" pos:column="24"/></name><operator pos:line="94" pos:column="24">-&gt;<pos:position pos:line="94" pos:column="29"/></operator><name pos:line="94" pos:column="26">next<pos:position pos:line="94" pos:column="30"/></name></name></expr>;<pos:position pos:line="94" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="95" pos:column="10"/></block></while>
	<if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><name pos:line="96" pos:column="13">verbose<pos:position pos:line="96" pos:column="20"/></name></expr>)<pos:position pos:line="96" pos:column="21"/></condition><then pos:line="96" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="97" pos:column="17">fprintf<pos:position pos:line="97" pos:column="24"/></name><argument_list pos:line="97" pos:column="24">(<argument><expr><name pos:line="97" pos:column="25">stderr<pos:position pos:line="97" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="33">"%luMB of redundant packs in total.\n"<pos:position pos:line="97" pos:column="71"/></literal></expr></argument>,
			<argument><expr><operator pos:line="98" pos:column="25">(<pos:position pos:line="98" pos:column="26"/></operator><name pos:line="98" pos:column="26">unsigned<pos:position pos:line="98" pos:column="34"/></name> <name pos:line="98" pos:column="35">long<pos:position pos:line="98" pos:column="39"/></name><operator pos:line="98" pos:column="39">)<pos:position pos:line="98" pos:column="40"/></operator><call><name pos:line="98" pos:column="40">pack_set_bytecount<pos:position pos:line="98" pos:column="58"/></name><argument_list pos:line="98" pos:column="58">(<argument><expr><name pos:line="98" pos:column="59">red<pos:position pos:line="98" pos:column="62"/></name></expr></argument>)<pos:position pos:line="98" pos:column="63"/></argument_list></call><operator pos:line="98" pos:column="63">/<pos:position pos:line="98" pos:column="64"/></operator><operator pos:line="98" pos:column="64">(<pos:position pos:line="98" pos:column="65"/></operator><literal type="number" pos:line="98" pos:column="65">1024<pos:position pos:line="98" pos:column="69"/></literal><operator pos:line="98" pos:column="69">*<pos:position pos:line="98" pos:column="70"/></operator><literal type="number" pos:line="98" pos:column="70">1024<pos:position pos:line="98" pos:column="74"/></literal><operator pos:line="98" pos:column="74">)<pos:position pos:line="98" pos:column="75"/></operator></expr></argument>)<pos:position pos:line="98" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="77"/></expr_stmt></block></then></if>

	<return pos:line="100" pos:column="9">return <expr><literal type="number" pos:line="100" pos:column="16">0<pos:position pos:line="100" pos:column="17"/></literal></expr>;<pos:position pos:line="100" pos:column="18"/></return>
}<pos:position pos:line="101" pos:column="2"/></block></function></unit>
