<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2639.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier><modifier pos:line="1" pos:column="20">*<pos:position pos:line="1" pos:column="21"/></modifier></type><name pos:line="1" pos:column="21">parse_argv<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">arg<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">service<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">arguments<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><literal type="number" pos:line="3" pos:column="25">0<pos:position pos:line="3" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier><modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">ret<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name><name pos:line="6" pos:column="15">temparray<pos:position pos:line="6" pos:column="24"/></name><index pos:line="6" pos:column="24">[<expr><name pos:line="6" pos:column="25">MAXARGUMENTS<pos:position pos:line="6" pos:column="37"/></name> <operator pos:line="6" pos:column="38">+<pos:position pos:line="6" pos:column="39"/></operator> <literal type="number" pos:line="6" pos:column="40">1<pos:position pos:line="6" pos:column="41"/></literal></expr>]<pos:position pos:line="6" pos:column="42"/></index></name></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>

	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><operator pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">arg<pos:position pos:line="8" pos:column="20"/></name></expr>)<pos:position pos:line="8" pos:column="21"/></condition> <block pos:line="8" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">char<pos:position pos:line="9" pos:column="21"/></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">expanded<pos:position pos:line="9" pos:column="31"/></name></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name pos:line="10" pos:column="21">arguments<pos:position pos:line="10" pos:column="30"/></name> <operator pos:line="10" pos:column="31">==<pos:position pos:line="10" pos:column="33"/></operator> <name pos:line="10" pos:column="34">MAXARGUMENTS<pos:position pos:line="10" pos:column="46"/></name></expr>)<pos:position pos:line="10" pos:column="47"/></condition><then pos:line="10" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="25">die<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><literal type="string" pos:line="11" pos:column="29">"remote-ext command has too many arguments"<pos:position pos:line="11" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="74"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="12" pos:column="17">expanded<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">=<pos:position pos:line="12" pos:column="27"/></operator> <call><name pos:line="12" pos:column="28">strip_escapes<pos:position pos:line="12" pos:column="41"/></name><argument_list pos:line="12" pos:column="41">(<argument><expr><name pos:line="12" pos:column="42">arg<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="47">service<pos:position pos:line="12" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="56">&amp;<pos:position pos:line="12" pos:column="61"/></operator><name pos:line="12" pos:column="57">arg<pos:position pos:line="12" pos:column="60"/></name></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="62"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">expanded<pos:position pos:line="13" pos:column="29"/></name></expr>)<pos:position pos:line="13" pos:column="30"/></condition><then pos:line="13" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="14" pos:column="25">temparray<pos:position pos:line="14" pos:column="34"/></name><index pos:line="14" pos:column="34">[<expr><name pos:line="14" pos:column="35">arguments<pos:position pos:line="14" pos:column="44"/></name><operator pos:line="14" pos:column="44">++<pos:position pos:line="14" pos:column="46"/></operator></expr>]<pos:position pos:line="14" pos:column="47"/></index></name> <operator pos:line="14" pos:column="48">=<pos:position pos:line="14" pos:column="49"/></operator> <name pos:line="14" pos:column="50">expanded<pos:position pos:line="14" pos:column="58"/></name></expr>;<pos:position pos:line="14" pos:column="59"/></expr_stmt></block></then></if>
	}<pos:position pos:line="15" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="17" pos:column="9">ret<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">xmalloc<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><operator pos:line="17" pos:column="23">(<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">arguments<pos:position pos:line="17" pos:column="33"/></name> <operator pos:line="17" pos:column="34">+<pos:position pos:line="17" pos:column="35"/></operator> <literal type="number" pos:line="17" pos:column="36">1<pos:position pos:line="17" pos:column="37"/></literal><operator pos:line="17" pos:column="37">)<pos:position pos:line="17" pos:column="38"/></operator> <operator pos:line="17" pos:column="39">*<pos:position pos:line="17" pos:column="40"/></operator> <sizeof pos:line="17" pos:column="41">sizeof<argument_list pos:line="17" pos:column="47">(<argument><expr><name pos:line="17" pos:column="48">char<pos:position pos:line="17" pos:column="52"/></name> <operator pos:line="17" pos:column="53">*<pos:position pos:line="17" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
	<for pos:line="18" pos:column="9">for <control pos:line="18" pos:column="13">(<init><expr><name pos:line="18" pos:column="14">i<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <literal type="number" pos:line="18" pos:column="18">0<pos:position pos:line="18" pos:column="19"/></literal></expr>;<pos:position pos:line="18" pos:column="20"/></init> <condition><expr><name pos:line="18" pos:column="21">i<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">&lt;<pos:position pos:line="18" pos:column="27"/></operator> <name pos:line="18" pos:column="25">arguments<pos:position pos:line="18" pos:column="34"/></name></expr>;<pos:position pos:line="18" pos:column="35"/></condition> <incr><expr><name pos:line="18" pos:column="36">i<pos:position pos:line="18" pos:column="37"/></name><operator pos:line="18" pos:column="37">++<pos:position pos:line="18" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="40"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="19" pos:column="17">ret<pos:position pos:line="19" pos:column="20"/></name><index pos:line="19" pos:column="20">[<expr><name pos:line="19" pos:column="21">i<pos:position pos:line="19" pos:column="22"/></name></expr>]<pos:position pos:line="19" pos:column="23"/></index></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <name><name pos:line="19" pos:column="26">temparray<pos:position pos:line="19" pos:column="35"/></name><index pos:line="19" pos:column="35">[<expr><name pos:line="19" pos:column="36">i<pos:position pos:line="19" pos:column="37"/></name></expr>]<pos:position pos:line="19" pos:column="38"/></index></name></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt></block></for>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">ret<pos:position pos:line="20" pos:column="12"/></name><index pos:line="20" pos:column="12">[<expr><name pos:line="20" pos:column="13">arguments<pos:position pos:line="20" pos:column="22"/></name></expr>]<pos:position pos:line="20" pos:column="23"/></index></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <name pos:line="20" pos:column="26">NULL<pos:position pos:line="20" pos:column="30"/></name></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
	<return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">ret<pos:position pos:line="21" pos:column="19"/></name></expr>;<pos:position pos:line="21" pos:column="20"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
