<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_19.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">object_as_type<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">object<pos:position pos:line="1" pos:column="35"/></name></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">obj<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="42">enum<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">object_type<pos:position pos:line="1" pos:column="58"/></name></name></type> <name pos:line="1" pos:column="59">type<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">int<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">quiet<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name><name pos:line="3" pos:column="13">obj<pos:position pos:line="3" pos:column="16"/></name><operator pos:line="3" pos:column="16">-&gt;<pos:position pos:line="3" pos:column="21"/></operator><name pos:line="3" pos:column="18">type<pos:position pos:line="3" pos:column="22"/></name></name> <operator pos:line="3" pos:column="23">==<pos:position pos:line="3" pos:column="25"/></operator> <name pos:line="3" pos:column="26">type<pos:position pos:line="3" pos:column="30"/></name></expr>)<pos:position pos:line="3" pos:column="31"/></condition><then pos:line="3" pos:column="31">
		<block type="pseudo"><return pos:line="4" pos:column="17">return <expr><name pos:line="4" pos:column="24">obj<pos:position pos:line="4" pos:column="27"/></name></expr>;<pos:position pos:line="4" pos:column="28"/></return></block></then>
	<elseif pos:line="5" pos:column="9">else <if pos:line="5" pos:column="14">if <condition pos:line="5" pos:column="17">(<expr><name><name pos:line="5" pos:column="18">obj<pos:position pos:line="5" pos:column="21"/></name><operator pos:line="5" pos:column="21">-&gt;<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="23">type<pos:position pos:line="5" pos:column="27"/></name></name> <operator pos:line="5" pos:column="28">==<pos:position pos:line="5" pos:column="30"/></operator> <name pos:line="5" pos:column="31">OBJ_NONE<pos:position pos:line="5" pos:column="39"/></name></expr>)<pos:position pos:line="5" pos:column="40"/></condition><then pos:line="5" pos:column="40"> <block pos:line="5" pos:column="41">{
		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><name pos:line="6" pos:column="21">type<pos:position pos:line="6" pos:column="25"/></name> <operator pos:line="6" pos:column="26">==<pos:position pos:line="6" pos:column="28"/></operator> <name pos:line="6" pos:column="29">OBJ_COMMIT<pos:position pos:line="6" pos:column="39"/></name></expr>)<pos:position pos:line="6" pos:column="40"/></condition><then pos:line="6" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><operator pos:line="7" pos:column="25">(<pos:position pos:line="7" pos:column="26"/></operator><operator pos:line="7" pos:column="26">(<pos:position pos:line="7" pos:column="27"/></operator>struct <name pos:line="7" pos:column="34">commit<pos:position pos:line="7" pos:column="40"/></name> <operator pos:line="7" pos:column="41">*<pos:position pos:line="7" pos:column="42"/></operator><operator pos:line="7" pos:column="42">)<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="43">obj<pos:position pos:line="7" pos:column="46"/></name><operator pos:line="7" pos:column="46">)<pos:position pos:line="7" pos:column="47"/></operator><operator pos:line="7" pos:column="47">-&gt;<pos:position pos:line="7" pos:column="52"/></operator><name pos:line="7" pos:column="49">index<pos:position pos:line="7" pos:column="54"/></name> <operator pos:line="7" pos:column="55">=<pos:position pos:line="7" pos:column="56"/></operator> <call><name pos:line="7" pos:column="57">alloc_commit_index<pos:position pos:line="7" pos:column="75"/></name><argument_list pos:line="7" pos:column="75">()<pos:position pos:line="7" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="78"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="8" pos:column="17">obj<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">-&gt;<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="22">type<pos:position pos:line="8" pos:column="26"/></name></name> <operator pos:line="8" pos:column="27">=<pos:position pos:line="8" pos:column="28"/></operator> <name pos:line="8" pos:column="29">type<pos:position pos:line="8" pos:column="33"/></name></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>
		<return pos:line="9" pos:column="17">return <expr><name pos:line="9" pos:column="24">obj<pos:position pos:line="9" pos:column="27"/></name></expr>;<pos:position pos:line="9" pos:column="28"/></return>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if></elseif>
	<else pos:line="11" pos:column="9">else <block pos:line="11" pos:column="14">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">quiet<pos:position pos:line="12" pos:column="27"/></name></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">error<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><literal type="string" pos:line="13" pos:column="31">"object %s is a %s, not a %s"<pos:position pos:line="13" pos:column="60"/></literal></expr></argument>,
			      <argument><expr><call><name pos:line="14" pos:column="31">sha1_to_hex<pos:position pos:line="14" pos:column="42"/></name><argument_list pos:line="14" pos:column="42">(<argument><expr><name><name pos:line="14" pos:column="43">obj<pos:position pos:line="14" pos:column="46"/></name><operator pos:line="14" pos:column="46">-&gt;<pos:position pos:line="14" pos:column="51"/></operator><name pos:line="14" pos:column="48">sha1<pos:position pos:line="14" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr></argument>,
			      <argument><expr><name><typename pos:line="15" pos:column="31">typename<pos:position pos:line="15" pos:column="39"/></typename></name><operator pos:line="15" pos:column="39">(<pos:position pos:line="15" pos:column="40"/></operator><name><name pos:line="15" pos:column="40">obj<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">-&gt;<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="45">type<pos:position pos:line="15" pos:column="49"/></name></name><operator pos:line="15" pos:column="49">)<pos:position pos:line="15" pos:column="50"/></operator></expr></argument>, <argument><expr><name><typename pos:line="15" pos:column="52">typename<pos:position pos:line="15" pos:column="60"/></typename></name><operator pos:line="15" pos:column="60">(<pos:position pos:line="15" pos:column="61"/></operator><name pos:line="15" pos:column="61">type<pos:position pos:line="15" pos:column="65"/></name><operator pos:line="15" pos:column="65">)<pos:position pos:line="15" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="68"/></expr_stmt></block></then></if>
		<return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">NULL<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></else></if>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
