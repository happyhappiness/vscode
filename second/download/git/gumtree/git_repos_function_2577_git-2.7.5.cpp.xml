<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2577_git-2.7.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">parse_push<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">strbuf<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">buf<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier><modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type><name pos:line="3" pos:column="16">specs<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><name pos:line="3" pos:column="24">NULL<pos:position pos:line="3" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">alloc_spec<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><literal type="number" pos:line="4" pos:column="26">0<pos:position pos:line="4" pos:column="27"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="29">nr_spec<pos:position pos:line="4" pos:column="36"/></name> <init pos:line="4" pos:column="37">= <expr><literal type="number" pos:line="4" pos:column="39">0<pos:position pos:line="4" pos:column="40"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="42">i<pos:position pos:line="4" pos:column="43"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="45">ret<pos:position pos:line="4" pos:column="48"/></name></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>

	<do pos:line="6" pos:column="9">do <block pos:line="6" pos:column="12">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><call><name pos:line="7" pos:column="21">starts_with<pos:position pos:line="7" pos:column="32"/></name><argument_list pos:line="7" pos:column="32">(<argument><expr><name><name pos:line="7" pos:column="33">buf<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">-&gt;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="38">buf<pos:position pos:line="7" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="43">"push "<pos:position pos:line="7" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="52"/></condition><then pos:line="7" pos:column="52"> <block pos:line="7" pos:column="53">{
			<expr_stmt><expr><call><name pos:line="8" pos:column="25">ALLOC_GROW<pos:position pos:line="8" pos:column="35"/></name><argument_list pos:line="8" pos:column="35">(<argument><expr><name pos:line="8" pos:column="36">specs<pos:position pos:line="8" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="43">nr_spec<pos:position pos:line="8" pos:column="50"/></name> <operator pos:line="8" pos:column="51">+<pos:position pos:line="8" pos:column="52"/></operator> <literal type="number" pos:line="8" pos:column="53">1<pos:position pos:line="8" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="56">alloc_spec<pos:position pos:line="8" pos:column="66"/></name></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="9" pos:column="25">specs<pos:position pos:line="9" pos:column="30"/></name><index pos:line="9" pos:column="30">[<expr><name pos:line="9" pos:column="31">nr_spec<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">++<pos:position pos:line="9" pos:column="40"/></operator></expr>]<pos:position pos:line="9" pos:column="41"/></index></name> <operator pos:line="9" pos:column="42">=<pos:position pos:line="9" pos:column="43"/></operator> <call><name pos:line="9" pos:column="44">xstrdup<pos:position pos:line="9" pos:column="51"/></name><argument_list pos:line="9" pos:column="51">(<argument><expr><name><name pos:line="9" pos:column="52">buf<pos:position pos:line="9" pos:column="55"/></name><operator pos:line="9" pos:column="55">-&gt;<pos:position pos:line="9" pos:column="60"/></operator><name pos:line="9" pos:column="57">buf<pos:position pos:line="9" pos:column="60"/></name></name> <operator pos:line="9" pos:column="61">+<pos:position pos:line="9" pos:column="62"/></operator> <literal type="number" pos:line="9" pos:column="63">5<pos:position pos:line="9" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="66"/></expr_stmt>
		}<pos:position pos:line="10" pos:column="18"/></block></then>
		<else pos:line="11" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="25">die<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><literal type="string" pos:line="12" pos:column="29">"http transport does not support %s"<pos:position pos:line="12" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="67">buf<pos:position pos:line="12" pos:column="70"/></name><operator pos:line="12" pos:column="70">-&gt;<pos:position pos:line="12" pos:column="75"/></operator><name pos:line="12" pos:column="72">buf<pos:position pos:line="12" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="77"/></expr_stmt></block></else></if>

		<expr_stmt><expr><call><name pos:line="14" pos:column="17">strbuf_reset<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">buf<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">strbuf_getline<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">buf<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="41">stdin<pos:position pos:line="15" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="48">'\n'<pos:position pos:line="15" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call> <operator pos:line="15" pos:column="54">==<pos:position pos:line="15" pos:column="56"/></operator> <name pos:line="15" pos:column="57">EOF<pos:position pos:line="15" pos:column="60"/></name></expr>)<pos:position pos:line="15" pos:column="61"/></condition><then pos:line="15" pos:column="61">
			<block type="pseudo"><goto pos:line="16" pos:column="25">goto <name pos:line="16" pos:column="30">free_specs<pos:position pos:line="16" pos:column="40"/></name>;<pos:position pos:line="16" pos:column="41"/></goto></block></then></if>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><operator pos:line="17" pos:column="22">*<pos:position pos:line="17" pos:column="23"/></operator><name><name pos:line="17" pos:column="23">buf<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">-&gt;<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="28">buf<pos:position pos:line="17" pos:column="31"/></name></name></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32">
			<block type="pseudo"><break pos:line="18" pos:column="25">break;<pos:position pos:line="18" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="19" pos:column="10"/></block> while <condition pos:line="19" pos:column="17">(<expr><literal type="number" pos:line="19" pos:column="18">1<pos:position pos:line="19" pos:column="19"/></literal></expr>)<pos:position pos:line="19" pos:column="20"/></condition>;<pos:position pos:line="19" pos:column="21"/></do>

	<expr_stmt><expr><name pos:line="21" pos:column="9">ret<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <call><name pos:line="21" pos:column="15">push<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">nr_spec<pos:position pos:line="21" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="29">specs<pos:position pos:line="21" pos:column="34"/></name></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">printf<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><literal type="string" pos:line="22" pos:column="16">"\n"<pos:position pos:line="22" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">fflush<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name pos:line="23" pos:column="16">stdout<pos:position pos:line="23" pos:column="22"/></name></expr></argument>)<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">ret<pos:position pos:line="25" pos:column="16"/></name></expr>)<pos:position pos:line="25" pos:column="17"/></condition><then pos:line="25" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">exit<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><literal type="number" pos:line="26" pos:column="22">128<pos:position pos:line="26" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt></block></then></if> <comment type="block" pos:line="26" pos:column="28">/* error already reported */</comment>

 <label><name pos:line="28" pos:column="2">free_specs<pos:position pos:line="28" pos:column="12"/></name>:<pos:position pos:line="28" pos:column="13"/></label>
	<for pos:line="29" pos:column="9">for <control pos:line="29" pos:column="13">(<init><expr><name pos:line="29" pos:column="14">i<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <literal type="number" pos:line="29" pos:column="18">0<pos:position pos:line="29" pos:column="19"/></literal></expr>;<pos:position pos:line="29" pos:column="20"/></init> <condition><expr><name pos:line="29" pos:column="21">i<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">&lt;<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="25">nr_spec<pos:position pos:line="29" pos:column="32"/></name></expr>;<pos:position pos:line="29" pos:column="33"/></condition> <incr><expr><name pos:line="29" pos:column="34">i<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">++<pos:position pos:line="29" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="29" pos:column="38"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="17">free<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><name><name pos:line="30" pos:column="22">specs<pos:position pos:line="30" pos:column="27"/></name><index pos:line="30" pos:column="27">[<expr><name pos:line="30" pos:column="28">i<pos:position pos:line="30" pos:column="29"/></name></expr>]<pos:position pos:line="30" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">free<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name pos:line="31" pos:column="14">specs<pos:position pos:line="31" pos:column="19"/></name></expr></argument>)<pos:position pos:line="31" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="21"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
