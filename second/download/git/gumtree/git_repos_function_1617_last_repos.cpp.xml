<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1617_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">prep_temp_blob<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">path<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="46">struct<pos:position pos:line="1" pos:column="52"/></name> <name pos:line="1" pos:column="53">diff_tempfile<pos:position pos:line="1" pos:column="66"/></name></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">temp<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="2" pos:column="28">void<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">blob<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="3" pos:column="28">unsigned<pos:position pos:line="3" pos:column="36"/></name> <name pos:line="3" pos:column="37">long<pos:position pos:line="3" pos:column="41"/></name></type> <name pos:line="3" pos:column="42">size<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>,
			   <parameter><decl><type><specifier pos:line="4" pos:column="28">const<pos:position pos:line="4" pos:column="33"/></specifier> <name><name pos:line="4" pos:column="34">struct<pos:position pos:line="4" pos:column="40"/></name> <name pos:line="4" pos:column="41">object_id<pos:position pos:line="4" pos:column="50"/></name></name> <modifier pos:line="4" pos:column="51">*<pos:position pos:line="4" pos:column="52"/></modifier></type><name pos:line="4" pos:column="52">oid<pos:position pos:line="4" pos:column="55"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="5" pos:column="28">int<pos:position pos:line="5" pos:column="31"/></name></type> <name pos:line="5" pos:column="32">mode<pos:position pos:line="5" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="37"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">fd<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">buf<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name pos:line="8" pos:column="29">STRBUF_INIT<pos:position pos:line="8" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">strbuf<pos:position pos:line="9" pos:column="22"/></name></name></type> template <init pos:line="9" pos:column="32">= <expr><name pos:line="9" pos:column="34">STRBUF_INIT<pos:position pos:line="9" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">path_dup<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><call><name pos:line="10" pos:column="26">xstrdup<pos:position pos:line="10" pos:column="33"/></name><argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">path<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="11" pos:column="9">const<pos:position pos:line="11" pos:column="14"/></specifier> <name pos:line="11" pos:column="15">char<pos:position pos:line="11" pos:column="19"/></name> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">base<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><call><name pos:line="11" pos:column="28">basename<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">(<argument><expr><name pos:line="11" pos:column="37">path_dup<pos:position pos:line="11" pos:column="45"/></name></expr></argument>)<pos:position pos:line="11" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="47"/></decl_stmt>

	<comment type="block" pos:line="13" pos:column="9">/* Generate "XXXXXX_basename.ext" */</comment>
	<macro><name pos:line="14" pos:column="9">strbuf_addstr<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument pos:line="14" pos:column="23">&amp;template<pos:position pos:line="14" pos:column="32"/></argument>, <argument><literal type="string" pos:line="14" pos:column="34">"XXXXXX_"<pos:position pos:line="14" pos:column="43"/></literal></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></macro><empty_stmt pos:line="14" pos:column="44">;<pos:position pos:line="14" pos:column="45"/></empty_stmt>
	<macro><name pos:line="15" pos:column="9">strbuf_addstr<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument pos:line="15" pos:column="23">&amp;template<pos:position pos:line="15" pos:column="32"/></argument>, <argument pos:line="15" pos:column="34">base<pos:position pos:line="15" pos:column="38"/></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></macro><empty_stmt pos:line="15" pos:column="39">;<pos:position pos:line="15" pos:column="40"/></empty_stmt>

	<expr_stmt><expr><name pos:line="17" pos:column="9">fd<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <macro><name pos:line="17" pos:column="14">mks_tempfile_ts<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument pos:line="17" pos:column="30">&amp;temp-&gt;tempfile<pos:position pos:line="17" pos:column="45"/></argument>, <argument pos:line="17" pos:column="47">template.buf<pos:position pos:line="17" pos:column="59"/></argument>, <argument pos:line="17" pos:column="61">strlen(base) + <literal type="number" pos:line="17" pos:column="76">1<pos:position pos:line="17" pos:column="77"/></literal></argument>)<pos:position pos:line="17" pos:column="78"/></argument_list></macro></expr>;<pos:position pos:line="17" pos:column="79"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">fd<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">&lt;<pos:position pos:line="18" pos:column="20"/></operator> <literal type="number" pos:line="18" pos:column="18">0<pos:position pos:line="18" pos:column="19"/></literal></expr>)<pos:position pos:line="18" pos:column="20"/></condition><then pos:line="18" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="17">die_errno<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><literal type="string" pos:line="19" pos:column="27">"unable to create temp-file"<pos:position pos:line="19" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="57"/></expr_stmt></block></then></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">convert_to_working_tree<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><name pos:line="20" pos:column="37">path<pos:position pos:line="20" pos:column="41"/></name></expr></argument>,
			<argument><expr><operator pos:line="21" pos:column="25">(<pos:position pos:line="21" pos:column="26"/></operator><specifier pos:line="21" pos:column="26">const<pos:position pos:line="21" pos:column="31"/></specifier> <name pos:line="21" pos:column="32">char<pos:position pos:line="21" pos:column="36"/></name> <operator pos:line="21" pos:column="37">*<pos:position pos:line="21" pos:column="38"/></operator><operator pos:line="21" pos:column="38">)<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="39">blob<pos:position pos:line="21" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="45">(<pos:position pos:line="21" pos:column="46"/></operator><name pos:line="21" pos:column="46">size_t<pos:position pos:line="21" pos:column="52"/></name><operator pos:line="21" pos:column="52">)<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="53">size<pos:position pos:line="21" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="59">&amp;<pos:position pos:line="21" pos:column="64"/></operator><name pos:line="21" pos:column="60">buf<pos:position pos:line="21" pos:column="63"/></name></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="65"/></condition><then pos:line="21" pos:column="65"> <block pos:line="21" pos:column="66">{
		<expr_stmt><expr><name pos:line="22" pos:column="17">blob<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <name><name pos:line="22" pos:column="24">buf<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">.<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="28">buf<pos:position pos:line="22" pos:column="31"/></name></name></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">size<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">=<pos:position pos:line="23" pos:column="23"/></operator> <name><name pos:line="23" pos:column="24">buf<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">.<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="28">len<pos:position pos:line="23" pos:column="31"/></name></name></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">write_in_full<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">fd<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="31">blob<pos:position pos:line="25" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="37">size<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call> <operator pos:line="25" pos:column="43">!=<pos:position pos:line="25" pos:column="45"/></operator> <name pos:line="25" pos:column="46">size<pos:position pos:line="25" pos:column="50"/></name></expr>)<pos:position pos:line="25" pos:column="51"/></condition><then pos:line="25" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">die_errno<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">(<argument><expr><literal type="string" pos:line="26" pos:column="27">"unable to write temp-file"<pos:position pos:line="26" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="56"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">close_tempfile<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><operator pos:line="27" pos:column="24">&amp;<pos:position pos:line="27" pos:column="29"/></operator><name><name pos:line="27" pos:column="25">temp<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">-&gt;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="31">tempfile<pos:position pos:line="27" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="28" pos:column="9">temp<pos:position pos:line="28" pos:column="13"/></name><operator pos:line="28" pos:column="13">-&gt;<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="15">name<pos:position pos:line="28" pos:column="19"/></name></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <call><name pos:line="28" pos:column="22">get_tempfile_path<pos:position pos:line="28" pos:column="39"/></name><argument_list pos:line="28" pos:column="39">(<argument><expr><operator pos:line="28" pos:column="40">&amp;<pos:position pos:line="28" pos:column="45"/></operator><name><name pos:line="28" pos:column="41">temp<pos:position pos:line="28" pos:column="45"/></name><operator pos:line="28" pos:column="45">-&gt;<pos:position pos:line="28" pos:column="50"/></operator><name pos:line="28" pos:column="47">tempfile<pos:position pos:line="28" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">oid_to_hex_r<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name><name pos:line="29" pos:column="22">temp<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">-&gt;<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="28">hex<pos:position pos:line="29" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="33">oid<pos:position pos:line="29" pos:column="36"/></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">xsnprintf<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name><name pos:line="30" pos:column="19">temp<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">-&gt;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="25">mode<pos:position pos:line="30" pos:column="29"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="31">sizeof<argument_list pos:line="30" pos:column="37">(<argument><expr><name><name pos:line="30" pos:column="38">temp<pos:position pos:line="30" pos:column="42"/></name><operator pos:line="30" pos:column="42">-&gt;<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="44">mode<pos:position pos:line="30" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="51">"%06o"<pos:position pos:line="30" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="59">mode<pos:position pos:line="30" pos:column="63"/></name></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">strbuf_release<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><operator pos:line="31" pos:column="24">&amp;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="25">buf<pos:position pos:line="31" pos:column="28"/></name></expr></argument>)<pos:position pos:line="31" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="30"/></expr_stmt>
	<macro><name pos:line="32" pos:column="9">strbuf_release<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument pos:line="32" pos:column="24">&amp;template<pos:position pos:line="32" pos:column="33"/></argument>)<pos:position pos:line="32" pos:column="34"/></argument_list></macro><empty_stmt pos:line="32" pos:column="34">;<pos:position pos:line="32" pos:column="35"/></empty_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">free<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><name pos:line="33" pos:column="14">path_dup<pos:position pos:line="33" pos:column="22"/></name></expr></argument>)<pos:position pos:line="33" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
