<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_210.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">copy_alternates<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">strbuf<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">src<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="49">struct<pos:position pos:line="1" pos:column="55"/></name> <name pos:line="1" pos:column="56">strbuf<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">dst<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">src_repo<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<comment type="block" pos:line="4" pos:column="9">/*
	 * Read from the source objects/info/alternates file
	 * and copy the entries to corresponding file in the
	 * destination repository with add_to_alternates_file().
	 * Both src and dst have "$path/objects/info/alternates".
	 *
	 * Instead of copying bit-for-bit from the original,
	 * we need to append to existing one so that the already
	 * created entry via "clone -s" is not lost, and also
	 * to turn entries with paths relative to the original
	 * absolute, so that they can be used in the new repository.
	 */</comment>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">FILE<pos:position pos:line="16" pos:column="13"/></name> <modifier pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></modifier></type><name pos:line="16" pos:column="15">in<pos:position pos:line="16" pos:column="17"/></name> <init pos:line="16" pos:column="18">= <expr><call><name pos:line="16" pos:column="20">fopen<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name><name pos:line="16" pos:column="26">src<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">-&gt;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="31">buf<pos:position pos:line="16" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="36">"r"<pos:position pos:line="16" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="17" pos:column="9">struct<pos:position pos:line="17" pos:column="15"/></name> <name pos:line="17" pos:column="16">strbuf<pos:position pos:line="17" pos:column="22"/></name></name></type> <name pos:line="17" pos:column="23">line<pos:position pos:line="17" pos:column="27"/></name> <init pos:line="17" pos:column="28">= <expr><name pos:line="17" pos:column="30">STRBUF_INIT<pos:position pos:line="17" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="42"/></decl_stmt>

	<while pos:line="19" pos:column="9">while <condition pos:line="19" pos:column="15">(<expr><call><name pos:line="19" pos:column="16">strbuf_getline<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><operator pos:line="19" pos:column="31">&amp;<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="32">line<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="38">in<pos:position pos:line="19" pos:column="40"/></name></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call> <operator pos:line="19" pos:column="42">!=<pos:position pos:line="19" pos:column="44"/></operator> <name pos:line="19" pos:column="45">EOF<pos:position pos:line="19" pos:column="48"/></name></expr>)<pos:position pos:line="19" pos:column="49"/></condition> <block pos:line="19" pos:column="50">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">char<pos:position pos:line="20" pos:column="21"/></name> <modifier pos:line="20" pos:column="22">*<pos:position pos:line="20" pos:column="23"/></modifier></type><name pos:line="20" pos:column="23">abs_path<pos:position pos:line="20" pos:column="31"/></name></decl>;<pos:position pos:line="20" pos:column="32"/></decl_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><name><name pos:line="21" pos:column="22">line<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">.<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="27">len<pos:position pos:line="21" pos:column="30"/></name></name> <operator pos:line="21" pos:column="31">||<pos:position pos:line="21" pos:column="33"/></operator> <name><name pos:line="21" pos:column="34">line<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">.<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="39">buf<pos:position pos:line="21" pos:column="42"/></name><index pos:line="21" pos:column="42">[<expr><literal type="number" pos:line="21" pos:column="43">0<pos:position pos:line="21" pos:column="44"/></literal></expr>]<pos:position pos:line="21" pos:column="45"/></index></name> <operator pos:line="21" pos:column="46">==<pos:position pos:line="21" pos:column="48"/></operator> <literal type="char" pos:line="21" pos:column="49">'#'<pos:position pos:line="21" pos:column="52"/></literal></expr>)<pos:position pos:line="21" pos:column="53"/></condition><then pos:line="21" pos:column="53">
			<block type="pseudo"><continue pos:line="22" pos:column="25">continue;<pos:position pos:line="22" pos:column="34"/></continue></block></then></if>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><call><name pos:line="23" pos:column="21">is_absolute_path<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><name><name pos:line="23" pos:column="38">line<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">.<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="43">buf<pos:position pos:line="23" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="48"/></condition><then pos:line="23" pos:column="48"> <block pos:line="23" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">add_to_alternates_file<pos:position pos:line="24" pos:column="47"/></name><argument_list pos:line="24" pos:column="47">(<argument><expr><name><name pos:line="24" pos:column="48">line<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">.<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="53">buf<pos:position pos:line="24" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
			<continue pos:line="25" pos:column="25">continue;<pos:position pos:line="25" pos:column="34"/></continue>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="27" pos:column="17">abs_path<pos:position pos:line="27" pos:column="25"/></name> <operator pos:line="27" pos:column="26">=<pos:position pos:line="27" pos:column="27"/></operator> <call><name pos:line="27" pos:column="28">mkpathdup<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><literal type="string" pos:line="27" pos:column="38">"%s/objects/%s"<pos:position pos:line="27" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="55">src_repo<pos:position pos:line="27" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="65">line<pos:position pos:line="27" pos:column="69"/></name><operator pos:line="27" pos:column="69">.<pos:position pos:line="27" pos:column="70"/></operator><name pos:line="27" pos:column="70">buf<pos:position pos:line="27" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="75"/></expr_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><operator pos:line="28" pos:column="21">!<pos:position pos:line="28" pos:column="22"/></operator><call><name pos:line="28" pos:column="22">normalize_path_copy<pos:position pos:line="28" pos:column="41"/></name><argument_list pos:line="28" pos:column="41">(<argument><expr><name pos:line="28" pos:column="42">abs_path<pos:position pos:line="28" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="52">abs_path<pos:position pos:line="28" pos:column="60"/></name></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="62"/></condition><then pos:line="28" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">add_to_alternates_file<pos:position pos:line="29" pos:column="47"/></name><argument_list pos:line="29" pos:column="47">(<argument><expr><name pos:line="29" pos:column="48">abs_path<pos:position pos:line="29" pos:column="56"/></name></expr></argument>)<pos:position pos:line="29" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="58"/></expr_stmt></block></then>
		<else pos:line="30" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">warning<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><literal type="string" pos:line="31" pos:column="33">"skipping invalid relative alternate: %s/%s"<pos:position pos:line="31" pos:column="77"/></literal></expr></argument>,
				<argument><expr><name pos:line="32" pos:column="33">src_repo<pos:position pos:line="32" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="43">line<pos:position pos:line="32" pos:column="47"/></name><operator pos:line="32" pos:column="47">.<pos:position pos:line="32" pos:column="48"/></operator><name pos:line="32" pos:column="48">buf<pos:position pos:line="32" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="53"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">free<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">abs_path<pos:position pos:line="33" pos:column="30"/></name></expr></argument>)<pos:position pos:line="33" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">strbuf_release<pos:position pos:line="35" pos:column="23"/></name><argument_list pos:line="35" pos:column="23">(<argument><expr><operator pos:line="35" pos:column="24">&amp;<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="25">line<pos:position pos:line="35" pos:column="29"/></name></expr></argument>)<pos:position pos:line="35" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">fclose<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">in<pos:position pos:line="36" pos:column="18"/></name></expr></argument>)<pos:position pos:line="36" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
