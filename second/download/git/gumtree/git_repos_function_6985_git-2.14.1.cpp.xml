<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6985_git-2.14.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">init_dfa<pos:position pos:line="2" pos:column="9"/></name> <parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">re_dfa_t<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">dfa<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="26">size_t<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">pat_len<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">table_size<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
<cpp:ifndef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifndef<pos:position pos:line="5" pos:column="8"/></cpp:directive> <name pos:line="5" pos:column="9">_LIBC<pos:position pos:line="5" pos:column="14"/></name></cpp:ifndef>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">codeset_name<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">memset<pos:position pos:line="9" pos:column="9"/></name> <argument_list pos:line="9" pos:column="10">(<argument><expr><name pos:line="9" pos:column="11">dfa<pos:position pos:line="9" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="9" pos:column="16">'\0'<pos:position pos:line="9" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="22">sizeof <argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">re_dfa_t<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Force allocation of str_tree_storage the first time.  */</comment>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">dfa<pos:position pos:line="12" pos:column="6"/></name><operator pos:line="12" pos:column="6">-&gt;<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="8">str_tree_storage_idx<pos:position pos:line="12" pos:column="28"/></name></name> <operator pos:line="12" pos:column="29">=<pos:position pos:line="12" pos:column="30"/></operator> <name pos:line="12" pos:column="31">BIN_TREE_STORAGE_SIZE<pos:position pos:line="12" pos:column="52"/></name></expr>;<pos:position pos:line="12" pos:column="53"/></expr_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* Avoid overflows.  */</comment>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">pat_len<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">==<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="18">SIZE_MAX<pos:position pos:line="15" pos:column="26"/></name></expr>)<pos:position pos:line="15" pos:column="27"/></condition><then pos:line="15" pos:column="27">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">REG_ESPACE<pos:position pos:line="16" pos:column="22"/></name></expr>;<pos:position pos:line="16" pos:column="23"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="18" pos:column="3">dfa<pos:position pos:line="18" pos:column="6"/></name><operator pos:line="18" pos:column="6">-&gt;<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="8">nodes_alloc<pos:position pos:line="18" pos:column="19"/></name></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <name pos:line="18" pos:column="22">pat_len<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">+<pos:position pos:line="18" pos:column="31"/></operator> <literal type="number" pos:line="18" pos:column="32">1<pos:position pos:line="18" pos:column="33"/></literal></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="19" pos:column="3">dfa<pos:position pos:line="19" pos:column="6"/></name><operator pos:line="19" pos:column="6">-&gt;<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="8">nodes<pos:position pos:line="19" pos:column="13"/></name></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">re_malloc<pos:position pos:line="19" pos:column="25"/></name> <argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">re_token_t<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="39">dfa<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">-&gt;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="44">nodes_alloc<pos:position pos:line="19" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="57"/></expr_stmt>

  <comment type="block" pos:line="21" pos:column="3">/*  table_size = 2 ^ ceil(log pat_len) */</comment>
  <for pos:line="22" pos:column="3">for <control pos:line="22" pos:column="7">(<init><expr><name pos:line="22" pos:column="8">table_size<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <literal type="number" pos:line="22" pos:column="21">1<pos:position pos:line="22" pos:column="22"/></literal></expr>;<pos:position pos:line="22" pos:column="23"/></init> <condition pos:line="22" pos:column="24">;<pos:position pos:line="22" pos:column="25"/></condition> <incr><expr><name pos:line="22" pos:column="26">table_size<pos:position pos:line="22" pos:column="36"/></name> <operator pos:line="22" pos:column="37">&lt;&lt;=<pos:position pos:line="22" pos:column="46"/></operator> <literal type="number" pos:line="22" pos:column="41">1<pos:position pos:line="22" pos:column="42"/></literal></expr></incr>)<pos:position pos:line="22" pos:column="43"/></control>
    <block type="pseudo"><if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">table_size<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">&gt;<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="22">pat_len<pos:position pos:line="23" pos:column="29"/></name></expr>)<pos:position pos:line="23" pos:column="30"/></condition><then pos:line="23" pos:column="30">
      <block type="pseudo"><break pos:line="24" pos:column="7">break;<pos:position pos:line="24" pos:column="13"/></break></block></then></if></block></for>

  <expr_stmt><expr><name><name pos:line="26" pos:column="3">dfa<pos:position pos:line="26" pos:column="6"/></name><operator pos:line="26" pos:column="6">-&gt;<pos:position pos:line="26" pos:column="11"/></operator><name pos:line="26" pos:column="8">state_table<pos:position pos:line="26" pos:column="19"/></name></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <call><name pos:line="26" pos:column="22">calloc<pos:position pos:line="26" pos:column="28"/></name> <argument_list pos:line="26" pos:column="29">(<argument><expr><sizeof pos:line="26" pos:column="30">sizeof <argument_list pos:line="26" pos:column="37">(<argument><expr pos:line="26" pos:column="38">struct <name pos:line="26" pos:column="45">re_state_table_entry<pos:position pos:line="26" pos:column="65"/></name></expr></argument>)<pos:position pos:line="26" pos:column="66"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="26" pos:column="68">table_size<pos:position pos:line="26" pos:column="78"/></name></expr></argument>)<pos:position pos:line="26" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="80"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="27" pos:column="3">dfa<pos:position pos:line="27" pos:column="6"/></name><operator pos:line="27" pos:column="6">-&gt;<pos:position pos:line="27" pos:column="11"/></operator><name pos:line="27" pos:column="8">state_hash_mask<pos:position pos:line="27" pos:column="23"/></name></name> <operator pos:line="27" pos:column="24">=<pos:position pos:line="27" pos:column="25"/></operator> <name pos:line="27" pos:column="26">table_size<pos:position pos:line="27" pos:column="36"/></name> <operator pos:line="27" pos:column="37">-<pos:position pos:line="27" pos:column="38"/></operator> <literal type="number" pos:line="27" pos:column="39">1<pos:position pos:line="27" pos:column="40"/></literal></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="29" pos:column="3">dfa<pos:position pos:line="29" pos:column="6"/></name><operator pos:line="29" pos:column="6">-&gt;<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="8">mb_cur_max<pos:position pos:line="29" pos:column="18"/></name></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <name pos:line="29" pos:column="21">MB_CUR_MAX<pos:position pos:line="29" pos:column="31"/></name></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
<cpp:ifdef pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">ifdef<pos:position pos:line="30" pos:column="7"/></cpp:directive> <name pos:line="30" pos:column="8">_LIBC<pos:position pos:line="30" pos:column="13"/></name></cpp:ifdef>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name><name pos:line="31" pos:column="7">dfa<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">-&gt;<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="12">mb_cur_max<pos:position pos:line="31" pos:column="22"/></name></name> <operator pos:line="31" pos:column="23">==<pos:position pos:line="31" pos:column="25"/></operator> <literal type="number" pos:line="31" pos:column="26">6<pos:position pos:line="31" pos:column="27"/></literal>
      <operator pos:line="32" pos:column="7">&amp;&amp;<pos:position pos:line="32" pos:column="17"/></operator> <call><name pos:line="32" pos:column="10">strcmp<pos:position pos:line="32" pos:column="16"/></name> <argument_list pos:line="32" pos:column="17">(<argument><expr><call><name pos:line="32" pos:column="18">_NL_CURRENT<pos:position pos:line="32" pos:column="29"/></name> <argument_list pos:line="32" pos:column="30">(<argument><expr><name pos:line="32" pos:column="31">LC_CTYPE<pos:position pos:line="32" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="41">_NL_CTYPE_CODESET_NAME<pos:position pos:line="32" pos:column="63"/></name></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="66">"UTF-8"<pos:position pos:line="32" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="74"/></argument_list></call> <operator pos:line="32" pos:column="75">==<pos:position pos:line="32" pos:column="77"/></operator> <literal type="number" pos:line="32" pos:column="78">0<pos:position pos:line="32" pos:column="79"/></literal></expr>)<pos:position pos:line="32" pos:column="80"/></condition><then pos:line="32" pos:column="80">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="5">dfa<pos:position pos:line="33" pos:column="8"/></name><operator pos:line="33" pos:column="8">-&gt;<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="10">is_utf8<pos:position pos:line="33" pos:column="17"/></name></name> <operator pos:line="33" pos:column="18">=<pos:position pos:line="33" pos:column="19"/></operator> <literal type="number" pos:line="33" pos:column="20">1<pos:position pos:line="33" pos:column="21"/></literal></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name><name pos:line="34" pos:column="3">dfa<pos:position pos:line="34" pos:column="6"/></name><operator pos:line="34" pos:column="6">-&gt;<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="8">map_notascii<pos:position pos:line="34" pos:column="20"/></name></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <operator pos:line="34" pos:column="23">(<pos:position pos:line="34" pos:column="24"/></operator><call><name pos:line="34" pos:column="24">_NL_CURRENT_WORD<pos:position pos:line="34" pos:column="40"/></name> <argument_list pos:line="34" pos:column="41">(<argument><expr><name pos:line="34" pos:column="42">LC_CTYPE<pos:position pos:line="34" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="52">_NL_CTYPE_MAP_TO_NONASCII<pos:position pos:line="34" pos:column="77"/></name></expr></argument>)<pos:position pos:line="34" pos:column="78"/></argument_list></call>
		       <operator pos:line="35" pos:column="24">!=<pos:position pos:line="35" pos:column="26"/></operator> <literal type="number" pos:line="35" pos:column="27">0<pos:position pos:line="35" pos:column="28"/></literal><operator pos:line="35" pos:column="28">)<pos:position pos:line="35" pos:column="29"/></operator></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
<cpp:else pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">else<pos:position pos:line="36" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="37" pos:column="1"># <cpp:directive pos:line="37" pos:column="3">ifdef<pos:position pos:line="37" pos:column="8"/></cpp:directive> <name pos:line="37" pos:column="9">HAVE_LANGINFO_CODESET<pos:position pos:line="37" pos:column="30"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="38" pos:column="3">codeset_name<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <call><name pos:line="38" pos:column="18">nl_langinfo<pos:position pos:line="38" pos:column="29"/></name> <argument_list pos:line="38" pos:column="30">(<argument><expr><name pos:line="38" pos:column="31">CODESET<pos:position pos:line="38" pos:column="38"/></name></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>
<cpp:else pos:line="39" pos:column="1"># <cpp:directive pos:line="39" pos:column="3">else<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name pos:line="40" pos:column="3">codeset_name<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <call><name pos:line="40" pos:column="18">getenv<pos:position pos:line="40" pos:column="24"/></name> <argument_list pos:line="40" pos:column="25">(<argument><expr><literal type="string" pos:line="40" pos:column="26">"LC_ALL"<pos:position pos:line="40" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt>
  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><name pos:line="41" pos:column="7">codeset_name<pos:position pos:line="41" pos:column="19"/></name> <operator pos:line="41" pos:column="20">==<pos:position pos:line="41" pos:column="22"/></operator> <name pos:line="41" pos:column="23">NULL<pos:position pos:line="41" pos:column="27"/></name> <operator pos:line="41" pos:column="28">||<pos:position pos:line="41" pos:column="30"/></operator> <name><name pos:line="41" pos:column="31">codeset_name<pos:position pos:line="41" pos:column="43"/></name><index pos:line="41" pos:column="43">[<expr><literal type="number" pos:line="41" pos:column="44">0<pos:position pos:line="41" pos:column="45"/></literal></expr>]<pos:position pos:line="41" pos:column="46"/></index></name> <operator pos:line="41" pos:column="47">==<pos:position pos:line="41" pos:column="49"/></operator> <literal type="char" pos:line="41" pos:column="50">'\0'<pos:position pos:line="41" pos:column="54"/></literal></expr>)<pos:position pos:line="41" pos:column="55"/></condition><then pos:line="41" pos:column="55">
    <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="5">codeset_name<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">=<pos:position pos:line="42" pos:column="19"/></operator> <call><name pos:line="42" pos:column="20">getenv<pos:position pos:line="42" pos:column="26"/></name> <argument_list pos:line="42" pos:column="27">(<argument><expr><literal type="string" pos:line="42" pos:column="28">"LC_CTYPE"<pos:position pos:line="42" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="40"/></expr_stmt></block></then></if>
  <if pos:line="43" pos:column="3">if <condition pos:line="43" pos:column="6">(<expr><name pos:line="43" pos:column="7">codeset_name<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">==<pos:position pos:line="43" pos:column="22"/></operator> <name pos:line="43" pos:column="23">NULL<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">||<pos:position pos:line="43" pos:column="30"/></operator> <name><name pos:line="43" pos:column="31">codeset_name<pos:position pos:line="43" pos:column="43"/></name><index pos:line="43" pos:column="43">[<expr><literal type="number" pos:line="43" pos:column="44">0<pos:position pos:line="43" pos:column="45"/></literal></expr>]<pos:position pos:line="43" pos:column="46"/></index></name> <operator pos:line="43" pos:column="47">==<pos:position pos:line="43" pos:column="49"/></operator> <literal type="char" pos:line="43" pos:column="50">'\0'<pos:position pos:line="43" pos:column="54"/></literal></expr>)<pos:position pos:line="43" pos:column="55"/></condition><then pos:line="43" pos:column="55">
    <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="5">codeset_name<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <call><name pos:line="44" pos:column="20">getenv<pos:position pos:line="44" pos:column="26"/></name> <argument_list pos:line="44" pos:column="27">(<argument><expr><literal type="string" pos:line="44" pos:column="28">"LANG"<pos:position pos:line="44" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt></block></then></if>
  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><name pos:line="45" pos:column="7">codeset_name<pos:position pos:line="45" pos:column="19"/></name> <operator pos:line="45" pos:column="20">==<pos:position pos:line="45" pos:column="22"/></operator> <name pos:line="45" pos:column="23">NULL<pos:position pos:line="45" pos:column="27"/></name></expr>)<pos:position pos:line="45" pos:column="28"/></condition><then pos:line="45" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="5">codeset_name<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <literal type="string" pos:line="46" pos:column="20">""<pos:position pos:line="46" pos:column="22"/></literal></expr>;<pos:position pos:line="46" pos:column="23"/></expr_stmt></block></then>
  <elseif pos:line="47" pos:column="3">else <if pos:line="47" pos:column="8">if <condition pos:line="47" pos:column="11">(<expr><call><name pos:line="47" pos:column="12">strchr<pos:position pos:line="47" pos:column="18"/></name> <argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">codeset_name<pos:position pos:line="47" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="47" pos:column="34">'.'<pos:position pos:line="47" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="38"/></argument_list></call> <operator pos:line="47" pos:column="39">!=<pos:position pos:line="47" pos:column="41"/></operator>  <name pos:line="47" pos:column="43">NULL<pos:position pos:line="47" pos:column="47"/></name></expr>)<pos:position pos:line="47" pos:column="48"/></condition><then pos:line="47" pos:column="48">
    <block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="5">codeset_name<pos:position pos:line="48" pos:column="17"/></name> <operator pos:line="48" pos:column="18">=<pos:position pos:line="48" pos:column="19"/></operator> <call><name pos:line="48" pos:column="20">strchr<pos:position pos:line="48" pos:column="26"/></name> <argument_list pos:line="48" pos:column="27">(<argument><expr><name pos:line="48" pos:column="28">codeset_name<pos:position pos:line="48" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="48" pos:column="42">'.'<pos:position pos:line="48" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="46"/></argument_list></call> <operator pos:line="48" pos:column="47">+<pos:position pos:line="48" pos:column="48"/></operator> <literal type="number" pos:line="48" pos:column="49">1<pos:position pos:line="48" pos:column="50"/></literal></expr>;<pos:position pos:line="48" pos:column="51"/></expr_stmt></block></then></if></elseif></if>
<cpp:endif pos:line="49" pos:column="1"># <cpp:directive pos:line="49" pos:column="3">endif<pos:position pos:line="49" pos:column="8"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="51" pos:column="3">/* strcasecmp isn't a standard interface. brute force check */</comment>
<cpp:if pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">if<pos:position pos:line="52" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="52" pos:column="5">0<pos:position pos:line="52" pos:column="6"/></literal></expr></cpp:if>
  if (strcasecmp (codeset_name, "UTF-8") == 0
      || strcasecmp (codeset_name, "UTF8") == 0)
    dfa-&gt;is_utf8 = 1;
<cpp:else pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">else<pos:position pos:line="56" pos:column="6"/></cpp:directive></cpp:else>
  <if pos:line="57" pos:column="3">if <condition pos:line="57" pos:column="6">(   <expr><operator pos:line="57" pos:column="10">(<pos:position pos:line="57" pos:column="11"/></operator><name><name pos:line="57" pos:column="11">codeset_name<pos:position pos:line="57" pos:column="23"/></name><index pos:line="57" pos:column="23">[<expr><literal type="number" pos:line="57" pos:column="24">0<pos:position pos:line="57" pos:column="25"/></literal></expr>]<pos:position pos:line="57" pos:column="26"/></index></name> <operator pos:line="57" pos:column="27">==<pos:position pos:line="57" pos:column="29"/></operator> <literal type="char" pos:line="57" pos:column="30">'U'<pos:position pos:line="57" pos:column="33"/></literal> <operator pos:line="57" pos:column="34">||<pos:position pos:line="57" pos:column="36"/></operator> <name><name pos:line="57" pos:column="37">codeset_name<pos:position pos:line="57" pos:column="49"/></name><index pos:line="57" pos:column="49">[<expr><literal type="number" pos:line="57" pos:column="50">0<pos:position pos:line="57" pos:column="51"/></literal></expr>]<pos:position pos:line="57" pos:column="52"/></index></name> <operator pos:line="57" pos:column="53">==<pos:position pos:line="57" pos:column="55"/></operator> <literal type="char" pos:line="57" pos:column="56">'u'<pos:position pos:line="57" pos:column="59"/></literal><operator pos:line="57" pos:column="59">)<pos:position pos:line="57" pos:column="60"/></operator>
      <operator pos:line="58" pos:column="7">&amp;&amp;<pos:position pos:line="58" pos:column="17"/></operator> <operator pos:line="58" pos:column="10">(<pos:position pos:line="58" pos:column="11"/></operator><name><name pos:line="58" pos:column="11">codeset_name<pos:position pos:line="58" pos:column="23"/></name><index pos:line="58" pos:column="23">[<expr><literal type="number" pos:line="58" pos:column="24">1<pos:position pos:line="58" pos:column="25"/></literal></expr>]<pos:position pos:line="58" pos:column="26"/></index></name> <operator pos:line="58" pos:column="27">==<pos:position pos:line="58" pos:column="29"/></operator> <literal type="char" pos:line="58" pos:column="30">'T'<pos:position pos:line="58" pos:column="33"/></literal> <operator pos:line="58" pos:column="34">||<pos:position pos:line="58" pos:column="36"/></operator> <name><name pos:line="58" pos:column="37">codeset_name<pos:position pos:line="58" pos:column="49"/></name><index pos:line="58" pos:column="49">[<expr><literal type="number" pos:line="58" pos:column="50">1<pos:position pos:line="58" pos:column="51"/></literal></expr>]<pos:position pos:line="58" pos:column="52"/></index></name> <operator pos:line="58" pos:column="53">==<pos:position pos:line="58" pos:column="55"/></operator> <literal type="char" pos:line="58" pos:column="56">'t'<pos:position pos:line="58" pos:column="59"/></literal><operator pos:line="58" pos:column="59">)<pos:position pos:line="58" pos:column="60"/></operator>
      <operator pos:line="59" pos:column="7">&amp;&amp;<pos:position pos:line="59" pos:column="17"/></operator> <operator pos:line="59" pos:column="10">(<pos:position pos:line="59" pos:column="11"/></operator><name><name pos:line="59" pos:column="11">codeset_name<pos:position pos:line="59" pos:column="23"/></name><index pos:line="59" pos:column="23">[<expr><literal type="number" pos:line="59" pos:column="24">2<pos:position pos:line="59" pos:column="25"/></literal></expr>]<pos:position pos:line="59" pos:column="26"/></index></name> <operator pos:line="59" pos:column="27">==<pos:position pos:line="59" pos:column="29"/></operator> <literal type="char" pos:line="59" pos:column="30">'F'<pos:position pos:line="59" pos:column="33"/></literal> <operator pos:line="59" pos:column="34">||<pos:position pos:line="59" pos:column="36"/></operator> <name><name pos:line="59" pos:column="37">codeset_name<pos:position pos:line="59" pos:column="49"/></name><index pos:line="59" pos:column="49">[<expr><literal type="number" pos:line="59" pos:column="50">2<pos:position pos:line="59" pos:column="51"/></literal></expr>]<pos:position pos:line="59" pos:column="52"/></index></name> <operator pos:line="59" pos:column="53">==<pos:position pos:line="59" pos:column="55"/></operator> <literal type="char" pos:line="59" pos:column="56">'f'<pos:position pos:line="59" pos:column="59"/></literal><operator pos:line="59" pos:column="59">)<pos:position pos:line="59" pos:column="60"/></operator>
      <operator pos:line="60" pos:column="7">&amp;&amp;<pos:position pos:line="60" pos:column="17"/></operator> <operator pos:line="60" pos:column="10">(<pos:position pos:line="60" pos:column="11"/></operator><ternary><condition><expr><name><name pos:line="60" pos:column="11">codeset_name<pos:position pos:line="60" pos:column="23"/></name><index pos:line="60" pos:column="23">[<expr><literal type="number" pos:line="60" pos:column="24">3<pos:position pos:line="60" pos:column="25"/></literal></expr>]<pos:position pos:line="60" pos:column="26"/></index></name> <operator pos:line="60" pos:column="27">==<pos:position pos:line="60" pos:column="29"/></operator> <literal type="char" pos:line="60" pos:column="30">'-'<pos:position pos:line="60" pos:column="33"/></literal></expr>
          ?<pos:position pos:line="61" pos:column="12"/></condition><then pos:line="61" pos:column="12"> <expr><name><name pos:line="61" pos:column="13">codeset_name<pos:position pos:line="61" pos:column="25"/></name><index pos:line="61" pos:column="25">[<expr><literal type="number" pos:line="61" pos:column="26">4<pos:position pos:line="61" pos:column="27"/></literal></expr>]<pos:position pos:line="61" pos:column="28"/></index></name> <operator pos:line="61" pos:column="29">==<pos:position pos:line="61" pos:column="31"/></operator> <literal type="char" pos:line="61" pos:column="32">'8'<pos:position pos:line="61" pos:column="35"/></literal> <operator pos:line="61" pos:column="36">&amp;&amp;<pos:position pos:line="61" pos:column="46"/></operator> <name><name pos:line="61" pos:column="39">codeset_name<pos:position pos:line="61" pos:column="51"/></name><index pos:line="61" pos:column="51">[<expr><literal type="number" pos:line="61" pos:column="52">5<pos:position pos:line="61" pos:column="53"/></literal></expr>]<pos:position pos:line="61" pos:column="54"/></index></name> <operator pos:line="61" pos:column="55">==<pos:position pos:line="61" pos:column="57"/></operator> <literal type="char" pos:line="61" pos:column="58">'\0'<pos:position pos:line="61" pos:column="62"/></literal></expr>
          <pos:position pos:line="62" pos:column="11"/></then><else pos:line="62" pos:column="11">: <expr><name><name pos:line="62" pos:column="13">codeset_name<pos:position pos:line="62" pos:column="25"/></name><index pos:line="62" pos:column="25">[<expr><literal type="number" pos:line="62" pos:column="26">3<pos:position pos:line="62" pos:column="27"/></literal></expr>]<pos:position pos:line="62" pos:column="28"/></index></name> <operator pos:line="62" pos:column="29">==<pos:position pos:line="62" pos:column="31"/></operator> <literal type="char" pos:line="62" pos:column="32">'8'<pos:position pos:line="62" pos:column="35"/></literal> <operator pos:line="62" pos:column="36">&amp;&amp;<pos:position pos:line="62" pos:column="46"/></operator> <name><name pos:line="62" pos:column="39">codeset_name<pos:position pos:line="62" pos:column="51"/></name><index pos:line="62" pos:column="51">[<expr><literal type="number" pos:line="62" pos:column="52">4<pos:position pos:line="62" pos:column="53"/></literal></expr>]<pos:position pos:line="62" pos:column="54"/></index></name> <operator pos:line="62" pos:column="55">==<pos:position pos:line="62" pos:column="57"/></operator> <literal type="char" pos:line="62" pos:column="58">'\0'<pos:position pos:line="62" pos:column="62"/></literal></expr></else></ternary><operator pos:line="62" pos:column="62">)<pos:position pos:line="62" pos:column="63"/></operator></expr>)<pos:position pos:line="62" pos:column="64"/></condition><then pos:line="62" pos:column="64">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="63" pos:column="5">dfa<pos:position pos:line="63" pos:column="8"/></name><operator pos:line="63" pos:column="8">-&gt;<pos:position pos:line="63" pos:column="13"/></operator><name pos:line="63" pos:column="10">is_utf8<pos:position pos:line="63" pos:column="17"/></name></name> <operator pos:line="63" pos:column="18">=<pos:position pos:line="63" pos:column="19"/></operator> <literal type="number" pos:line="63" pos:column="20">1<pos:position pos:line="63" pos:column="21"/></literal></expr>;<pos:position pos:line="63" pos:column="22"/></expr_stmt></block></then></if>
<cpp:endif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">endif<pos:position pos:line="64" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="66" pos:column="3">/* We check exhaustively in the loop below if this charset is a
     superset of ASCII.  */</comment>
  <expr_stmt><expr><name><name pos:line="68" pos:column="3">dfa<pos:position pos:line="68" pos:column="6"/></name><operator pos:line="68" pos:column="6">-&gt;<pos:position pos:line="68" pos:column="11"/></operator><name pos:line="68" pos:column="8">map_notascii<pos:position pos:line="68" pos:column="20"/></name></name> <operator pos:line="68" pos:column="21">=<pos:position pos:line="68" pos:column="22"/></operator> <literal type="number" pos:line="68" pos:column="23">0<pos:position pos:line="68" pos:column="24"/></literal></expr>;<pos:position pos:line="68" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">endif<pos:position pos:line="69" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">ifdef<pos:position pos:line="71" pos:column="7"/></cpp:directive> <name pos:line="71" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="71" pos:column="22"/></name></cpp:ifdef>
  <if pos:line="72" pos:column="3">if <condition pos:line="72" pos:column="6">(<expr><name><name pos:line="72" pos:column="7">dfa<pos:position pos:line="72" pos:column="10"/></name><operator pos:line="72" pos:column="10">-&gt;<pos:position pos:line="72" pos:column="15"/></operator><name pos:line="72" pos:column="12">mb_cur_max<pos:position pos:line="72" pos:column="22"/></name></name> <operator pos:line="72" pos:column="23">&gt;<pos:position pos:line="72" pos:column="27"/></operator> <literal type="number" pos:line="72" pos:column="25">1<pos:position pos:line="72" pos:column="26"/></literal></expr>)<pos:position pos:line="72" pos:column="27"/></condition><then pos:line="72" pos:column="27">
    <block pos:line="73" pos:column="5">{
      <if pos:line="74" pos:column="7">if <condition pos:line="74" pos:column="10">(<expr><name><name pos:line="74" pos:column="11">dfa<pos:position pos:line="74" pos:column="14"/></name><operator pos:line="74" pos:column="14">-&gt;<pos:position pos:line="74" pos:column="19"/></operator><name pos:line="74" pos:column="16">is_utf8<pos:position pos:line="74" pos:column="23"/></name></name></expr>)<pos:position pos:line="74" pos:column="24"/></condition><then pos:line="74" pos:column="24">
        <block pos:line="75" pos:column="9">{
<cpp:if pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">if<pos:position pos:line="76" pos:column="4"/></cpp:directive> <expr><operator pos:line="76" pos:column="5">!<pos:position pos:line="76" pos:column="6"/></operator><call><name pos:line="76" pos:column="6">defined<pos:position pos:line="76" pos:column="13"/></name><argument_list pos:line="76" pos:column="13">(<argument><expr><name pos:line="76" pos:column="14">__GNUC__<pos:position pos:line="76" pos:column="22"/></name></expr></argument>)<pos:position pos:line="76" pos:column="23"/></argument_list></call> <operator pos:line="76" pos:column="24">||<pos:position pos:line="76" pos:column="26"/></operator> <name pos:line="76" pos:column="27">__GNUC__<pos:position pos:line="76" pos:column="35"/></name> <operator pos:line="76" pos:column="36">&lt;<pos:position pos:line="76" pos:column="40"/></operator> <literal type="number" pos:line="76" pos:column="38">3<pos:position pos:line="76" pos:column="39"/></literal></expr></cpp:if>
	  <decl_stmt><decl><specifier pos:line="77" pos:column="11">static<pos:position pos:line="77" pos:column="17"/></specifier> <type><name pos:line="77" pos:column="18">short<pos:position pos:line="77" pos:column="23"/></name></type> <name pos:line="77" pos:column="24">utf8_sb_map_inited<pos:position pos:line="77" pos:column="42"/></name> <init pos:line="77" pos:column="43">= <expr><literal type="number" pos:line="77" pos:column="45">0<pos:position pos:line="77" pos:column="46"/></literal></expr></init></decl>;<pos:position pos:line="77" pos:column="47"/></decl_stmt>

	  <if pos:line="79" pos:column="11">if <condition pos:line="79" pos:column="14">(<expr><operator pos:line="79" pos:column="15">!<pos:position pos:line="79" pos:column="16"/></operator> <name pos:line="79" pos:column="17">utf8_sb_map_inited<pos:position pos:line="79" pos:column="35"/></name></expr>)<pos:position pos:line="79" pos:column="36"/></condition><then pos:line="79" pos:column="36">
	    <block pos:line="80" pos:column="13">{
		<decl_stmt><decl><type><name pos:line="81" pos:column="17">int<pos:position pos:line="81" pos:column="20"/></name></type> <name pos:line="81" pos:column="21">i<pos:position pos:line="81" pos:column="22"/></name></decl>;<pos:position pos:line="81" pos:column="23"/></decl_stmt>

	  	<expr_stmt><expr><name pos:line="83" pos:column="17">utf8_sb_map_inited<pos:position pos:line="83" pos:column="35"/></name> <operator pos:line="83" pos:column="36">=<pos:position pos:line="83" pos:column="37"/></operator> <literal type="number" pos:line="83" pos:column="38">0<pos:position pos:line="83" pos:column="39"/></literal></expr>;<pos:position pos:line="83" pos:column="40"/></expr_stmt>
		<for pos:line="84" pos:column="17">for <control pos:line="84" pos:column="21">(<init><expr><name pos:line="84" pos:column="22">i<pos:position pos:line="84" pos:column="23"/></name> <operator pos:line="84" pos:column="24">=<pos:position pos:line="84" pos:column="25"/></operator> <literal type="number" pos:line="84" pos:column="26">0<pos:position pos:line="84" pos:column="27"/></literal></expr>;<pos:position pos:line="84" pos:column="28"/></init> <condition><expr><name pos:line="84" pos:column="29">i<pos:position pos:line="84" pos:column="30"/></name> <operator pos:line="84" pos:column="31">&lt;=<pos:position pos:line="84" pos:column="36"/></operator> <literal type="number" pos:line="84" pos:column="34">0x80<pos:position pos:line="84" pos:column="38"/></literal> <operator pos:line="84" pos:column="39">/<pos:position pos:line="84" pos:column="40"/></operator> <name pos:line="84" pos:column="41">BITSET_WORD_BITS<pos:position pos:line="84" pos:column="57"/></name> <operator pos:line="84" pos:column="58">-<pos:position pos:line="84" pos:column="59"/></operator> <literal type="number" pos:line="84" pos:column="60">1<pos:position pos:line="84" pos:column="61"/></literal></expr>;<pos:position pos:line="84" pos:column="62"/></condition> <incr><expr><name pos:line="84" pos:column="63">i<pos:position pos:line="84" pos:column="64"/></name><operator pos:line="84" pos:column="64">++<pos:position pos:line="84" pos:column="66"/></operator></expr></incr>)<pos:position pos:line="84" pos:column="67"/></control>
		  <block type="pseudo"><expr_stmt><expr><name><name pos:line="85" pos:column="19">utf8_sb_map<pos:position pos:line="85" pos:column="30"/></name><index pos:line="85" pos:column="30">[<expr><name pos:line="85" pos:column="31">i<pos:position pos:line="85" pos:column="32"/></name></expr>]<pos:position pos:line="85" pos:column="33"/></index></name> <operator pos:line="85" pos:column="34">=<pos:position pos:line="85" pos:column="35"/></operator> <name pos:line="85" pos:column="36">BITSET_WORD_MAX<pos:position pos:line="85" pos:column="51"/></name></expr>;<pos:position pos:line="85" pos:column="52"/></expr_stmt></block></for>
	    }<pos:position pos:line="86" pos:column="14"/></block></then></if>
<cpp:endif pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">endif<pos:position pos:line="87" pos:column="7"/></cpp:directive></cpp:endif>
	  <expr_stmt><expr><name><name pos:line="88" pos:column="11">dfa<pos:position pos:line="88" pos:column="14"/></name><operator pos:line="88" pos:column="14">-&gt;<pos:position pos:line="88" pos:column="19"/></operator><name pos:line="88" pos:column="16">sb_char<pos:position pos:line="88" pos:column="23"/></name></name> <operator pos:line="88" pos:column="24">=<pos:position pos:line="88" pos:column="25"/></operator> <operator pos:line="88" pos:column="26">(<pos:position pos:line="88" pos:column="27"/></operator><name pos:line="88" pos:column="27">re_bitset_ptr_t<pos:position pos:line="88" pos:column="42"/></name><operator pos:line="88" pos:column="42">)<pos:position pos:line="88" pos:column="43"/></operator> <name pos:line="88" pos:column="44">utf8_sb_map<pos:position pos:line="88" pos:column="55"/></name></expr>;<pos:position pos:line="88" pos:column="56"/></expr_stmt>
	}<pos:position pos:line="89" pos:column="10"/></block></then>
      <else pos:line="90" pos:column="7">else
	<block pos:line="91" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="92" pos:column="11">int<pos:position pos:line="92" pos:column="14"/></name></type> <name pos:line="92" pos:column="15">i<pos:position pos:line="92" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="92" pos:column="18">j<pos:position pos:line="92" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="92" pos:column="21">ch<pos:position pos:line="92" pos:column="23"/></name></decl>;<pos:position pos:line="92" pos:column="24"/></decl_stmt>

	  <expr_stmt><expr><name><name pos:line="94" pos:column="11">dfa<pos:position pos:line="94" pos:column="14"/></name><operator pos:line="94" pos:column="14">-&gt;<pos:position pos:line="94" pos:column="19"/></operator><name pos:line="94" pos:column="16">sb_char<pos:position pos:line="94" pos:column="23"/></name></name> <operator pos:line="94" pos:column="24">=<pos:position pos:line="94" pos:column="25"/></operator> <operator pos:line="94" pos:column="26">(<pos:position pos:line="94" pos:column="27"/></operator><name pos:line="94" pos:column="27">re_bitset_ptr_t<pos:position pos:line="94" pos:column="42"/></name><operator pos:line="94" pos:column="42">)<pos:position pos:line="94" pos:column="43"/></operator> <call><name pos:line="94" pos:column="44">calloc<pos:position pos:line="94" pos:column="50"/></name> <argument_list pos:line="94" pos:column="51">(<argument><expr><sizeof pos:line="94" pos:column="52">sizeof <argument_list pos:line="94" pos:column="59">(<argument><expr><name pos:line="94" pos:column="60">bitset_t<pos:position pos:line="94" pos:column="68"/></name></expr></argument>)<pos:position pos:line="94" pos:column="69"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="94" pos:column="71">1<pos:position pos:line="94" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="74"/></expr_stmt>
	  <if pos:line="95" pos:column="11">if <condition pos:line="95" pos:column="14">(<expr><call><name pos:line="95" pos:column="15">BE<pos:position pos:line="95" pos:column="17"/></name> <argument_list pos:line="95" pos:column="18">(<argument><expr><name><name pos:line="95" pos:column="19">dfa<pos:position pos:line="95" pos:column="22"/></name><operator pos:line="95" pos:column="22">-&gt;<pos:position pos:line="95" pos:column="27"/></operator><name pos:line="95" pos:column="24">sb_char<pos:position pos:line="95" pos:column="31"/></name></name> <operator pos:line="95" pos:column="32">==<pos:position pos:line="95" pos:column="34"/></operator> <name pos:line="95" pos:column="35">NULL<pos:position pos:line="95" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="41">0<pos:position pos:line="95" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="95" pos:column="44"/></condition><then pos:line="95" pos:column="44">
	    <block type="pseudo"><return pos:line="96" pos:column="13">return <expr><name pos:line="96" pos:column="20">REG_ESPACE<pos:position pos:line="96" pos:column="30"/></name></expr>;<pos:position pos:line="96" pos:column="31"/></return></block></then></if>

	  <comment type="block" pos:line="98" pos:column="11">/* Set the bits corresponding to single byte chars.  */</comment>
	  <for pos:line="99" pos:column="11">for <control pos:line="99" pos:column="15">(<init><expr><name pos:line="99" pos:column="16">i<pos:position pos:line="99" pos:column="17"/></name> <operator pos:line="99" pos:column="18">=<pos:position pos:line="99" pos:column="19"/></operator> <literal type="number" pos:line="99" pos:column="20">0<pos:position pos:line="99" pos:column="21"/></literal></expr><operator pos:line="99" pos:column="21">,<pos:position pos:line="99" pos:column="22"/></operator> <expr><name pos:line="99" pos:column="23">ch<pos:position pos:line="99" pos:column="25"/></name> <operator pos:line="99" pos:column="26">=<pos:position pos:line="99" pos:column="27"/></operator> <literal type="number" pos:line="99" pos:column="28">0<pos:position pos:line="99" pos:column="29"/></literal></expr>;<pos:position pos:line="99" pos:column="30"/></init> <condition><expr><name pos:line="99" pos:column="31">i<pos:position pos:line="99" pos:column="32"/></name> <operator pos:line="99" pos:column="33">&lt;<pos:position pos:line="99" pos:column="37"/></operator> <name pos:line="99" pos:column="35">BITSET_WORDS<pos:position pos:line="99" pos:column="47"/></name></expr>;<pos:position pos:line="99" pos:column="48"/></condition> <incr><expr><operator pos:line="99" pos:column="49">++<pos:position pos:line="99" pos:column="51"/></operator><name pos:line="99" pos:column="51">i<pos:position pos:line="99" pos:column="52"/></name></expr></incr>)<pos:position pos:line="99" pos:column="53"/></control>
	    <block type="pseudo"><for pos:line="100" pos:column="13">for <control pos:line="100" pos:column="17">(<init><expr><name pos:line="100" pos:column="18">j<pos:position pos:line="100" pos:column="19"/></name> <operator pos:line="100" pos:column="20">=<pos:position pos:line="100" pos:column="21"/></operator> <literal type="number" pos:line="100" pos:column="22">0<pos:position pos:line="100" pos:column="23"/></literal></expr>;<pos:position pos:line="100" pos:column="24"/></init> <condition><expr><name pos:line="100" pos:column="25">j<pos:position pos:line="100" pos:column="26"/></name> <operator pos:line="100" pos:column="27">&lt;<pos:position pos:line="100" pos:column="31"/></operator> <name pos:line="100" pos:column="29">BITSET_WORD_BITS<pos:position pos:line="100" pos:column="45"/></name></expr>;<pos:position pos:line="100" pos:column="46"/></condition> <incr><expr><operator pos:line="100" pos:column="47">++<pos:position pos:line="100" pos:column="49"/></operator><name pos:line="100" pos:column="49">j<pos:position pos:line="100" pos:column="50"/></name></expr><operator pos:line="100" pos:column="50">,<pos:position pos:line="100" pos:column="51"/></operator> <expr><operator pos:line="100" pos:column="52">++<pos:position pos:line="100" pos:column="54"/></operator><name pos:line="100" pos:column="54">ch<pos:position pos:line="100" pos:column="56"/></name></expr></incr>)<pos:position pos:line="100" pos:column="57"/></control>
	      <block pos:line="101" pos:column="15">{
		<decl_stmt><decl><type><name pos:line="102" pos:column="17">wint_t<pos:position pos:line="102" pos:column="23"/></name></type> <name pos:line="102" pos:column="24">wch<pos:position pos:line="102" pos:column="27"/></name> <init pos:line="102" pos:column="28">= <expr><call><name pos:line="102" pos:column="30">__btowc<pos:position pos:line="102" pos:column="37"/></name> <argument_list pos:line="102" pos:column="38">(<argument><expr><name pos:line="102" pos:column="39">ch<pos:position pos:line="102" pos:column="41"/></name></expr></argument>)<pos:position pos:line="102" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="102" pos:column="43"/></decl_stmt>
		<if pos:line="103" pos:column="17">if <condition pos:line="103" pos:column="20">(<expr><name pos:line="103" pos:column="21">wch<pos:position pos:line="103" pos:column="24"/></name> <operator pos:line="103" pos:column="25">!=<pos:position pos:line="103" pos:column="27"/></operator> <name pos:line="103" pos:column="28">WEOF<pos:position pos:line="103" pos:column="32"/></name></expr>)<pos:position pos:line="103" pos:column="33"/></condition><then pos:line="103" pos:column="33">
		  <block type="pseudo"><expr_stmt><expr><name><name pos:line="104" pos:column="19">dfa<pos:position pos:line="104" pos:column="22"/></name><operator pos:line="104" pos:column="22">-&gt;<pos:position pos:line="104" pos:column="27"/></operator><name pos:line="104" pos:column="24">sb_char<pos:position pos:line="104" pos:column="31"/></name><index pos:line="104" pos:column="31">[<expr><name pos:line="104" pos:column="32">i<pos:position pos:line="104" pos:column="33"/></name></expr>]<pos:position pos:line="104" pos:column="34"/></index></name> <operator pos:line="104" pos:column="35">|=<pos:position pos:line="104" pos:column="37"/></operator> <operator pos:line="104" pos:column="38">(<pos:position pos:line="104" pos:column="39"/></operator><name pos:line="104" pos:column="39">bitset_word_t<pos:position pos:line="104" pos:column="52"/></name><operator pos:line="104" pos:column="52">)<pos:position pos:line="104" pos:column="53"/></operator> <literal type="number" pos:line="104" pos:column="54">1<pos:position pos:line="104" pos:column="55"/></literal> <operator pos:line="104" pos:column="56">&lt;&lt;<pos:position pos:line="104" pos:column="64"/></operator> <name pos:line="104" pos:column="59">j<pos:position pos:line="104" pos:column="60"/></name></expr>;<pos:position pos:line="104" pos:column="61"/></expr_stmt></block></then></if>
<cpp:ifndef pos:line="105" pos:column="1"># <cpp:directive pos:line="105" pos:column="3">ifndef<pos:position pos:line="105" pos:column="9"/></cpp:directive> <name pos:line="105" pos:column="10">_LIBC<pos:position pos:line="105" pos:column="15"/></name></cpp:ifndef>
		<if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><call><name pos:line="106" pos:column="21">isascii<pos:position pos:line="106" pos:column="28"/></name> <argument_list pos:line="106" pos:column="29">(<argument><expr><name pos:line="106" pos:column="30">ch<pos:position pos:line="106" pos:column="32"/></name></expr></argument>)<pos:position pos:line="106" pos:column="33"/></argument_list></call> <operator pos:line="106" pos:column="34">&amp;&amp;<pos:position pos:line="106" pos:column="44"/></operator> <name pos:line="106" pos:column="37">wch<pos:position pos:line="106" pos:column="40"/></name> <operator pos:line="106" pos:column="41">!=<pos:position pos:line="106" pos:column="43"/></operator> <name pos:line="106" pos:column="44">ch<pos:position pos:line="106" pos:column="46"/></name></expr>)<pos:position pos:line="106" pos:column="47"/></condition><then pos:line="106" pos:column="47">
		  <block type="pseudo"><expr_stmt><expr><name><name pos:line="107" pos:column="19">dfa<pos:position pos:line="107" pos:column="22"/></name><operator pos:line="107" pos:column="22">-&gt;<pos:position pos:line="107" pos:column="27"/></operator><name pos:line="107" pos:column="24">map_notascii<pos:position pos:line="107" pos:column="36"/></name></name> <operator pos:line="107" pos:column="37">=<pos:position pos:line="107" pos:column="38"/></operator> <literal type="number" pos:line="107" pos:column="39">1<pos:position pos:line="107" pos:column="40"/></literal></expr>;<pos:position pos:line="107" pos:column="41"/></expr_stmt></block></then></if>
<cpp:endif pos:line="108" pos:column="1"># <cpp:directive pos:line="108" pos:column="3">endif<pos:position pos:line="108" pos:column="8"/></cpp:directive></cpp:endif>
	      }<pos:position pos:line="109" pos:column="16"/></block></for></block></for>
	}<pos:position pos:line="110" pos:column="10"/></block></else></if>
    }<pos:position pos:line="111" pos:column="6"/></block></then></if>
<cpp:endif pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">endif<pos:position pos:line="112" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="114" pos:column="3">if <condition pos:line="114" pos:column="6">(<expr><call><name pos:line="114" pos:column="7">BE<pos:position pos:line="114" pos:column="9"/></name> <argument_list pos:line="114" pos:column="10">(<argument><expr><name><name pos:line="114" pos:column="11">dfa<pos:position pos:line="114" pos:column="14"/></name><operator pos:line="114" pos:column="14">-&gt;<pos:position pos:line="114" pos:column="19"/></operator><name pos:line="114" pos:column="16">nodes<pos:position pos:line="114" pos:column="21"/></name></name> <operator pos:line="114" pos:column="22">==<pos:position pos:line="114" pos:column="24"/></operator> <name pos:line="114" pos:column="25">NULL<pos:position pos:line="114" pos:column="29"/></name> <operator pos:line="114" pos:column="30">||<pos:position pos:line="114" pos:column="32"/></operator> <name><name pos:line="114" pos:column="33">dfa<pos:position pos:line="114" pos:column="36"/></name><operator pos:line="114" pos:column="36">-&gt;<pos:position pos:line="114" pos:column="41"/></operator><name pos:line="114" pos:column="38">state_table<pos:position pos:line="114" pos:column="49"/></name></name> <operator pos:line="114" pos:column="50">==<pos:position pos:line="114" pos:column="52"/></operator> <name pos:line="114" pos:column="53">NULL<pos:position pos:line="114" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="114" pos:column="59">0<pos:position pos:line="114" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="114" pos:column="62"/></condition><then pos:line="114" pos:column="62">
    <block type="pseudo"><return pos:line="115" pos:column="5">return <expr><name pos:line="115" pos:column="12">REG_ESPACE<pos:position pos:line="115" pos:column="22"/></name></expr>;<pos:position pos:line="115" pos:column="23"/></return></block></then></if>
  <return pos:line="116" pos:column="3">return <expr><name pos:line="116" pos:column="10">REG_NOERROR<pos:position pos:line="116" pos:column="21"/></name></expr>;<pos:position pos:line="116" pos:column="22"/></return>
}<pos:position pos:line="117" pos:column="2"/></block></function></unit>
