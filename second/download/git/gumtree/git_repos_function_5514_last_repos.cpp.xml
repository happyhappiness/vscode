<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5514_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">object<pos:position pos:line="1" pos:column="21"/></name></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">parse_loose_object<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">object_id<pos:position pos:line="1" pos:column="64"/></name></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">oid<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
					 <parameter><decl><type><specifier pos:line="2" pos:column="42">const<pos:position pos:line="2" pos:column="47"/></specifier> <name pos:line="2" pos:column="48">char<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">path<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">object<pos:position pos:line="4" pos:column="22"/></name></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">obj<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">void<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">contents<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">enum<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">object_type<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">type<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">long<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">size<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">eaten<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">read_loose_object<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">path<pos:position pos:line="10" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="37">oid<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">-&gt;<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="42">hash<pos:position pos:line="10" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="48">&amp;<pos:position pos:line="10" pos:column="53"/></operator><name pos:line="10" pos:column="49">type<pos:position pos:line="10" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="55">&amp;<pos:position pos:line="10" pos:column="60"/></operator><name pos:line="10" pos:column="56">size<pos:position pos:line="10" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="62">&amp;<pos:position pos:line="10" pos:column="67"/></operator><name pos:line="10" pos:column="63">contents<pos:position pos:line="10" pos:column="71"/></name></expr></argument>)<pos:position pos:line="10" pos:column="72"/></argument_list></call> <operator pos:line="10" pos:column="73">&lt;<pos:position pos:line="10" pos:column="77"/></operator> <literal type="number" pos:line="10" pos:column="75">0<pos:position pos:line="10" pos:column="76"/></literal></expr>)<pos:position pos:line="10" pos:column="77"/></condition><then pos:line="10" pos:column="77">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><name pos:line="11" pos:column="24">NULL<pos:position pos:line="11" pos:column="28"/></name></expr>;<pos:position pos:line="11" pos:column="29"/></return></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">contents<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">&amp;&amp;<pos:position pos:line="13" pos:column="33"/></operator> <name pos:line="13" pos:column="26">type<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">!=<pos:position pos:line="13" pos:column="33"/></operator> <name pos:line="13" pos:column="34">OBJ_BLOB<pos:position pos:line="13" pos:column="42"/></name></expr>)<pos:position pos:line="13" pos:column="43"/></condition><then pos:line="13" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="17">die<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><literal type="string" pos:line="14" pos:column="21">"BUG: read_loose_object streamed a non-blob"<pos:position pos:line="14" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="67"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">obj<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">parse_object_buffer<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">oid<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="40">type<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">size<pos:position pos:line="16" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="52">contents<pos:position pos:line="16" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="62">&amp;<pos:position pos:line="16" pos:column="67"/></operator><name pos:line="16" pos:column="63">eaten<pos:position pos:line="16" pos:column="68"/></name></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="70"/></expr_stmt>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">eaten<pos:position pos:line="18" pos:column="19"/></name></expr>)<pos:position pos:line="18" pos:column="20"/></condition><then pos:line="18" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="17">free<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">contents<pos:position pos:line="19" pos:column="30"/></name></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt></block></then></if>
	<return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">obj<pos:position pos:line="20" pos:column="19"/></name></expr>;<pos:position pos:line="20" pos:column="20"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
