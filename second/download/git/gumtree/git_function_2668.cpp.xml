<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2668.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">write_eolinfo<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">cache_entry<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">ce<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name pos:line="1" pos:column="63">char<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">path<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><name pos:line="3" pos:column="14">show_eol<pos:position pos:line="3" pos:column="22"/></name></expr>)<pos:position pos:line="3" pos:column="23"/></condition><then pos:line="3" pos:column="23">
		<block type="pseudo"><return pos:line="4" pos:column="17">return;<pos:position pos:line="4" pos:column="24"/></return></block></then>
	<else pos:line="5" pos:column="9">else <block pos:line="5" pos:column="14">{
		<decl_stmt><decl><type><name><name pos:line="6" pos:column="17">struct<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">stat<pos:position pos:line="6" pos:column="28"/></name></name></type> <name pos:line="6" pos:column="29">st<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="7" pos:column="17">const<pos:position pos:line="7" pos:column="22"/></specifier> <name pos:line="7" pos:column="23">char<pos:position pos:line="7" pos:column="27"/></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">i_txt<pos:position pos:line="7" pos:column="34"/></name> <init pos:line="7" pos:column="35">= <expr><literal type="string" pos:line="7" pos:column="37">""<pos:position pos:line="7" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name pos:line="8" pos:column="23">char<pos:position pos:line="8" pos:column="27"/></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">w_txt<pos:position pos:line="8" pos:column="34"/></name> <init pos:line="8" pos:column="35">= <expr><literal type="string" pos:line="8" pos:column="37">""<pos:position pos:line="8" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="9" pos:column="17">const<pos:position pos:line="9" pos:column="22"/></specifier> <name pos:line="9" pos:column="23">char<pos:position pos:line="9" pos:column="27"/></name> <modifier pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></modifier></type><name pos:line="9" pos:column="29">a_txt<pos:position pos:line="9" pos:column="34"/></name> <init pos:line="9" pos:column="35">= <expr><call><name pos:line="9" pos:column="37">get_convert_attr_ascii<pos:position pos:line="9" pos:column="59"/></name><argument_list pos:line="9" pos:column="59">(<argument><expr><name pos:line="9" pos:column="60">path<pos:position pos:line="9" pos:column="64"/></name></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="66"/></decl_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><name pos:line="10" pos:column="21">ce<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">&amp;&amp;<pos:position pos:line="10" pos:column="34"/></operator> <call><name pos:line="10" pos:column="27">S_ISREG<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><name><name pos:line="10" pos:column="35">ce<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">-&gt;<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="39">ce_mode<pos:position pos:line="10" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="48"/></condition><then pos:line="10" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="25">i_txt<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">=<pos:position pos:line="11" pos:column="32"/></operator> <call><name pos:line="11" pos:column="33">get_cached_convert_stats_ascii<pos:position pos:line="11" pos:column="63"/></name><argument_list pos:line="11" pos:column="63">(<argument><expr><name><name pos:line="11" pos:column="64">ce<pos:position pos:line="11" pos:column="66"/></name><operator pos:line="11" pos:column="66">-&gt;<pos:position pos:line="11" pos:column="71"/></operator><name pos:line="11" pos:column="68">name<pos:position pos:line="11" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="74"/></expr_stmt></block></then></if>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><call><name pos:line="12" pos:column="22">lstat<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">path<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="34">&amp;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="35">st<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call> <operator pos:line="12" pos:column="39">&amp;&amp;<pos:position pos:line="12" pos:column="49"/></operator> <call><name pos:line="12" pos:column="42">S_ISREG<pos:position pos:line="12" pos:column="49"/></name><argument_list pos:line="12" pos:column="49">(<argument><expr><name><name pos:line="12" pos:column="50">st<pos:position pos:line="12" pos:column="52"/></name><operator pos:line="12" pos:column="52">.<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="53">st_mode<pos:position pos:line="12" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="62"/></condition><then pos:line="12" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="25">w_txt<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">=<pos:position pos:line="13" pos:column="32"/></operator> <call><name pos:line="13" pos:column="33">get_wt_convert_stats_ascii<pos:position pos:line="13" pos:column="59"/></name><argument_list pos:line="13" pos:column="59">(<argument><expr><name pos:line="13" pos:column="60">path<pos:position pos:line="13" pos:column="64"/></name></expr></argument>)<pos:position pos:line="13" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="66"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">printf<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><literal type="string" pos:line="14" pos:column="24">"i/%-5s w/%-5s attr/%-17s\t"<pos:position pos:line="14" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="54">i_txt<pos:position pos:line="14" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="61">w_txt<pos:position pos:line="14" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="68">a_txt<pos:position pos:line="14" pos:column="73"/></name></expr></argument>)<pos:position pos:line="14" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="75"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></else></if>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
