<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_279_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">finish_delayed_checkout<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">checkout<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">state<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">errs<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><literal type="number" pos:line="3" pos:column="20">0<pos:position pos:line="3" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">string_list_item<pos:position pos:line="4" pos:column="32"/></name></name> <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">filter<pos:position pos:line="4" pos:column="40"/></name></decl>, <modifier pos:line="4" pos:column="42">*<pos:position pos:line="4" pos:column="43"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="43">path<pos:position pos:line="4" pos:column="47"/></name></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">delayed_checkout<pos:position pos:line="5" pos:column="32"/></name></name> <modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier></type><name pos:line="5" pos:column="34">dco<pos:position pos:line="5" pos:column="37"/></name> <init pos:line="5" pos:column="38">= <expr><name><name pos:line="5" pos:column="40">state<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">-&gt;<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="47">delayed_checkout<pos:position pos:line="5" pos:column="63"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="64"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name><name pos:line="7" pos:column="14">state<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">-&gt;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="21">delayed_checkout<pos:position pos:line="7" pos:column="37"/></name></name></expr>)<pos:position pos:line="7" pos:column="38"/></condition><then pos:line="7" pos:column="38">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><name pos:line="8" pos:column="24">errs<pos:position pos:line="8" pos:column="28"/></name></expr>;<pos:position pos:line="8" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="10" pos:column="9">dco<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">state<pos:position pos:line="10" pos:column="19"/></name></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <name pos:line="10" pos:column="22">CE_RETRY<pos:position pos:line="10" pos:column="30"/></name></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>
	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><name><name pos:line="11" pos:column="16">dco<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">-&gt;<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="21">filters<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">.<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="29">nr<pos:position pos:line="11" pos:column="31"/></name></name> <operator pos:line="11" pos:column="32">&gt;<pos:position pos:line="11" pos:column="36"/></operator> <literal type="number" pos:line="11" pos:column="34">0<pos:position pos:line="11" pos:column="35"/></literal></expr>)<pos:position pos:line="11" pos:column="36"/></condition> <block pos:line="11" pos:column="37">{
		<macro><name pos:line="12" pos:column="17">for_each_string_list_item<pos:position pos:line="12" pos:column="42"/></name><argument_list pos:line="12" pos:column="42">(<argument pos:line="12" pos:column="43">filter<pos:position pos:line="12" pos:column="49"/></argument>, <argument pos:line="12" pos:column="51">&amp;dco-&gt;filters<pos:position pos:line="12" pos:column="64"/></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></macro> <block pos:line="12" pos:column="66">{
			<decl_stmt><decl><type><name><name pos:line="13" pos:column="25">struct<pos:position pos:line="13" pos:column="31"/></name> <name pos:line="13" pos:column="32">string_list<pos:position pos:line="13" pos:column="43"/></name></name></type> <name pos:line="13" pos:column="44">available_paths<pos:position pos:line="13" pos:column="59"/></name> <init pos:line="13" pos:column="60">= <expr><name pos:line="13" pos:column="62">STRING_LIST_INIT_NODUP<pos:position pos:line="13" pos:column="84"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="85"/></decl_stmt>

			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><operator pos:line="15" pos:column="29">!<pos:position pos:line="15" pos:column="30"/></operator><call><name pos:line="15" pos:column="30">async_query_available_blobs<pos:position pos:line="15" pos:column="57"/></name><argument_list pos:line="15" pos:column="57">(<argument><expr><name><name pos:line="15" pos:column="58">filter<pos:position pos:line="15" pos:column="64"/></name><operator pos:line="15" pos:column="64">-&gt;<pos:position pos:line="15" pos:column="69"/></operator><name pos:line="15" pos:column="66">string<pos:position pos:line="15" pos:column="72"/></name></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="74">&amp;<pos:position pos:line="15" pos:column="79"/></operator><name pos:line="15" pos:column="75">available_paths<pos:position pos:line="15" pos:column="90"/></name></expr></argument>)<pos:position pos:line="15" pos:column="91"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="92"/></condition><then pos:line="15" pos:column="92"> <block pos:line="15" pos:column="93">{
				<comment type="block" pos:line="16" pos:column="33">/* Filter reported an error */</comment>
				<expr_stmt><expr><name pos:line="17" pos:column="33">errs<pos:position pos:line="17" pos:column="37"/></name> <operator pos:line="17" pos:column="38">=<pos:position pos:line="17" pos:column="39"/></operator> <literal type="number" pos:line="17" pos:column="40">1<pos:position pos:line="17" pos:column="41"/></literal></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="18" pos:column="33">filter<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">string<pos:position pos:line="18" pos:column="47"/></name></name> <operator pos:line="18" pos:column="48">=<pos:position pos:line="18" pos:column="49"/></operator> <literal type="string" pos:line="18" pos:column="50">""<pos:position pos:line="18" pos:column="52"/></literal></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
				<continue pos:line="19" pos:column="33">continue;<pos:position pos:line="19" pos:column="42"/></continue>
			}<pos:position pos:line="20" pos:column="26"/></block></then></if>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><name><name pos:line="21" pos:column="29">available_paths<pos:position pos:line="21" pos:column="44"/></name><operator pos:line="21" pos:column="44">.<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="45">nr<pos:position pos:line="21" pos:column="47"/></name></name> <operator pos:line="21" pos:column="48">&lt;=<pos:position pos:line="21" pos:column="53"/></operator> <literal type="number" pos:line="21" pos:column="51">0<pos:position pos:line="21" pos:column="52"/></literal></expr>)<pos:position pos:line="21" pos:column="53"/></condition><then pos:line="21" pos:column="53"> <block pos:line="21" pos:column="54">{
				<comment type="block" pos:line="22" pos:column="33">/*
				 * Filter responded with no entries. That means
				 * the filter is done and we can remove the
				 * filter from the list (see
				 * "string_list_remove_empty_items" call below).
				 */</comment>
				<expr_stmt><expr><name><name pos:line="28" pos:column="33">filter<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">-&gt;<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="41">string<pos:position pos:line="28" pos:column="47"/></name></name> <operator pos:line="28" pos:column="48">=<pos:position pos:line="28" pos:column="49"/></operator> <literal type="string" pos:line="28" pos:column="50">""<pos:position pos:line="28" pos:column="52"/></literal></expr>;<pos:position pos:line="28" pos:column="53"/></expr_stmt>
				<continue pos:line="29" pos:column="33">continue;<pos:position pos:line="29" pos:column="42"/></continue>
			}<pos:position pos:line="30" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="32" pos:column="25">/*
			 * In dco-&gt;paths we store a list of all delayed paths.
			 * The filter just send us a list of available paths.
			 * Remove them from the list.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">filter_string_list<pos:position pos:line="37" pos:column="43"/></name><argument_list pos:line="37" pos:column="43">(<argument><expr><operator pos:line="37" pos:column="44">&amp;<pos:position pos:line="37" pos:column="49"/></operator><name><name pos:line="37" pos:column="45">dco<pos:position pos:line="37" pos:column="48"/></name><operator pos:line="37" pos:column="48">-&gt;<pos:position pos:line="37" pos:column="53"/></operator><name pos:line="37" pos:column="50">paths<pos:position pos:line="37" pos:column="55"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="57">0<pos:position pos:line="37" pos:column="58"/></literal></expr></argument>,
				<argument><expr><operator pos:line="38" pos:column="33">&amp;<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="34">remove_available_paths<pos:position pos:line="38" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="58">&amp;<pos:position pos:line="38" pos:column="63"/></operator><name pos:line="38" pos:column="59">available_paths<pos:position pos:line="38" pos:column="74"/></name></expr></argument>)<pos:position pos:line="38" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="76"/></expr_stmt>

			<macro><name pos:line="40" pos:column="25">for_each_string_list_item<pos:position pos:line="40" pos:column="50"/></name><argument_list pos:line="40" pos:column="50">(<argument pos:line="40" pos:column="51">path<pos:position pos:line="40" pos:column="55"/></argument>, <argument pos:line="40" pos:column="57">&amp;available_paths<pos:position pos:line="40" pos:column="73"/></argument>)<pos:position pos:line="40" pos:column="74"/></argument_list></macro> <block pos:line="40" pos:column="75">{
				<decl_stmt><decl><type><name><name pos:line="41" pos:column="33">struct<pos:position pos:line="41" pos:column="39"/></name> <name pos:line="41" pos:column="40">cache_entry<pos:position pos:line="41" pos:column="51"/></name></name><modifier pos:line="41" pos:column="51">*<pos:position pos:line="41" pos:column="52"/></modifier></type> <name pos:line="41" pos:column="53">ce<pos:position pos:line="41" pos:column="55"/></name></decl>;<pos:position pos:line="41" pos:column="56"/></decl_stmt>

				<if pos:line="43" pos:column="33">if <condition pos:line="43" pos:column="36">(<expr><operator pos:line="43" pos:column="37">!<pos:position pos:line="43" pos:column="38"/></operator><name><name pos:line="43" pos:column="38">path<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">-&gt;<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="44">util<pos:position pos:line="43" pos:column="48"/></name></name></expr>)<pos:position pos:line="43" pos:column="49"/></condition><then pos:line="43" pos:column="49"> <block pos:line="43" pos:column="50">{
					<expr_stmt><expr><call><name pos:line="44" pos:column="41">error<pos:position pos:line="44" pos:column="46"/></name><argument_list pos:line="44" pos:column="46">(<argument><expr><literal type="string" pos:line="44" pos:column="47">"external filter '%s' signaled that '%s' "<pos:position pos:line="44" pos:column="89"/></literal>
					      <literal type="string" pos:line="45" pos:column="47">"is now available although it has not been "<pos:position pos:line="45" pos:column="91"/></literal>
					      <literal type="string" pos:line="46" pos:column="47">"delayed earlier"<pos:position pos:line="46" pos:column="64"/></literal></expr></argument>,
					      <argument><expr><name><name pos:line="47" pos:column="47">filter<pos:position pos:line="47" pos:column="53"/></name><operator pos:line="47" pos:column="53">-&gt;<pos:position pos:line="47" pos:column="58"/></operator><name pos:line="47" pos:column="55">string<pos:position pos:line="47" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="63">path<pos:position pos:line="47" pos:column="67"/></name><operator pos:line="47" pos:column="67">-&gt;<pos:position pos:line="47" pos:column="72"/></operator><name pos:line="47" pos:column="69">string<pos:position pos:line="47" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="77"/></expr_stmt>
					<expr_stmt><expr><name pos:line="48" pos:column="41">errs<pos:position pos:line="48" pos:column="45"/></name> <operator pos:line="48" pos:column="46">|=<pos:position pos:line="48" pos:column="48"/></operator> <literal type="number" pos:line="48" pos:column="49">1<pos:position pos:line="48" pos:column="50"/></literal></expr>;<pos:position pos:line="48" pos:column="51"/></expr_stmt>

					<comment type="block" pos:line="50" pos:column="41">/*
					 * Do not ask the filter for available blobs,
					 * again, as the filter is likely buggy.
					 */</comment>
					<expr_stmt><expr><name><name pos:line="54" pos:column="41">filter<pos:position pos:line="54" pos:column="47"/></name><operator pos:line="54" pos:column="47">-&gt;<pos:position pos:line="54" pos:column="52"/></operator><name pos:line="54" pos:column="49">string<pos:position pos:line="54" pos:column="55"/></name></name> <operator pos:line="54" pos:column="56">=<pos:position pos:line="54" pos:column="57"/></operator> <literal type="string" pos:line="54" pos:column="58">""<pos:position pos:line="54" pos:column="60"/></literal></expr>;<pos:position pos:line="54" pos:column="61"/></expr_stmt>
					<continue pos:line="55" pos:column="41">continue;<pos:position pos:line="55" pos:column="50"/></continue>
				}<pos:position pos:line="56" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name pos:line="57" pos:column="33">ce<pos:position pos:line="57" pos:column="35"/></name> <operator pos:line="57" pos:column="36">=<pos:position pos:line="57" pos:column="37"/></operator> <call><name pos:line="57" pos:column="38">index_file_exists<pos:position pos:line="57" pos:column="55"/></name><argument_list pos:line="57" pos:column="55">(<argument><expr><name><name pos:line="57" pos:column="56">state<pos:position pos:line="57" pos:column="61"/></name><operator pos:line="57" pos:column="61">-&gt;<pos:position pos:line="57" pos:column="66"/></operator><name pos:line="57" pos:column="63">istate<pos:position pos:line="57" pos:column="69"/></name></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="71">path<pos:position pos:line="57" pos:column="75"/></name><operator pos:line="57" pos:column="75">-&gt;<pos:position pos:line="57" pos:column="80"/></operator><name pos:line="57" pos:column="77">string<pos:position pos:line="57" pos:column="83"/></name></name></expr></argument>,
						       <argument><expr><call><name pos:line="58" pos:column="56">strlen<pos:position pos:line="58" pos:column="62"/></name><argument_list pos:line="58" pos:column="62">(<argument><expr><name><name pos:line="58" pos:column="63">path<pos:position pos:line="58" pos:column="67"/></name><operator pos:line="58" pos:column="67">-&gt;<pos:position pos:line="58" pos:column="72"/></operator><name pos:line="58" pos:column="69">string<pos:position pos:line="58" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="76"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="78">0<pos:position pos:line="58" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="81"/></expr_stmt>
				<expr_stmt><expr><name pos:line="59" pos:column="33">errs<pos:position pos:line="59" pos:column="37"/></name> <operator pos:line="59" pos:column="38">|=<pos:position pos:line="59" pos:column="40"/></operator> <operator pos:line="59" pos:column="41">(<pos:position pos:line="59" pos:column="42"/></operator><ternary><condition><expr><name pos:line="59" pos:column="42">ce<pos:position pos:line="59" pos:column="44"/></name></expr> ?<pos:position pos:line="59" pos:column="46"/></condition><then pos:line="59" pos:column="46"> <expr><call><name pos:line="59" pos:column="47">checkout_entry<pos:position pos:line="59" pos:column="61"/></name><argument_list pos:line="59" pos:column="61">(<argument><expr><name pos:line="59" pos:column="62">ce<pos:position pos:line="59" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="66">state<pos:position pos:line="59" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="73">NULL<pos:position pos:line="59" pos:column="77"/></name></expr></argument>)<pos:position pos:line="59" pos:column="78"/></argument_list></call></expr> <pos:position pos:line="59" pos:column="79"/></then><else pos:line="59" pos:column="79">: <expr><literal type="number" pos:line="59" pos:column="81">1<pos:position pos:line="59" pos:column="82"/></literal></expr></else></ternary><operator pos:line="59" pos:column="82">)<pos:position pos:line="59" pos:column="83"/></operator></expr>;<pos:position pos:line="59" pos:column="84"/></expr_stmt>
			}<pos:position pos:line="60" pos:column="26"/></block>
		}<pos:position pos:line="61" pos:column="18"/></block>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">string_list_remove_empty_items<pos:position pos:line="62" pos:column="47"/></name><argument_list pos:line="62" pos:column="47">(<argument><expr><operator pos:line="62" pos:column="48">&amp;<pos:position pos:line="62" pos:column="53"/></operator><name><name pos:line="62" pos:column="49">dco<pos:position pos:line="62" pos:column="52"/></name><operator pos:line="62" pos:column="52">-&gt;<pos:position pos:line="62" pos:column="57"/></operator><name pos:line="62" pos:column="54">filters<pos:position pos:line="62" pos:column="61"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="63">0<pos:position pos:line="62" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="63" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="64" pos:column="9">string_list_clear<pos:position pos:line="64" pos:column="26"/></name><argument_list pos:line="64" pos:column="26">(<argument><expr><operator pos:line="64" pos:column="27">&amp;<pos:position pos:line="64" pos:column="32"/></operator><name><name pos:line="64" pos:column="28">dco<pos:position pos:line="64" pos:column="31"/></name><operator pos:line="64" pos:column="31">-&gt;<pos:position pos:line="64" pos:column="36"/></operator><name pos:line="64" pos:column="33">filters<pos:position pos:line="64" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="42">0<pos:position pos:line="64" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="45"/></expr_stmt>

	<comment type="block" pos:line="66" pos:column="9">/* At this point we should not have any delayed paths anymore. */</comment>
	<expr_stmt><expr><name pos:line="67" pos:column="9">errs<pos:position pos:line="67" pos:column="13"/></name> <operator pos:line="67" pos:column="14">|=<pos:position pos:line="67" pos:column="16"/></operator> <name><name pos:line="67" pos:column="17">dco<pos:position pos:line="67" pos:column="20"/></name><operator pos:line="67" pos:column="20">-&gt;<pos:position pos:line="67" pos:column="25"/></operator><name pos:line="67" pos:column="22">paths<pos:position pos:line="67" pos:column="27"/></name><operator pos:line="67" pos:column="27">.<pos:position pos:line="67" pos:column="28"/></operator><name pos:line="67" pos:column="28">nr<pos:position pos:line="67" pos:column="30"/></name></name></expr>;<pos:position pos:line="67" pos:column="31"/></expr_stmt>
	<macro><name pos:line="68" pos:column="9">for_each_string_list_item<pos:position pos:line="68" pos:column="34"/></name><argument_list pos:line="68" pos:column="34">(<argument pos:line="68" pos:column="35">path<pos:position pos:line="68" pos:column="39"/></argument>, <argument pos:line="68" pos:column="41">&amp;dco-&gt;paths<pos:position pos:line="68" pos:column="52"/></argument>)<pos:position pos:line="68" pos:column="53"/></argument_list></macro> <block pos:line="68" pos:column="54">{
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">error<pos:position pos:line="69" pos:column="22"/></name><argument_list pos:line="69" pos:column="22">(<argument><expr><literal type="string" pos:line="69" pos:column="23">"'%s' was not filtered properly"<pos:position pos:line="69" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="57">path<pos:position pos:line="69" pos:column="61"/></name><operator pos:line="69" pos:column="61">-&gt;<pos:position pos:line="69" pos:column="66"/></operator><name pos:line="69" pos:column="63">string<pos:position pos:line="69" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="71"/></expr_stmt>
	}<pos:position pos:line="70" pos:column="10"/></block>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">string_list_clear<pos:position pos:line="71" pos:column="26"/></name><argument_list pos:line="71" pos:column="26">(<argument><expr><operator pos:line="71" pos:column="27">&amp;<pos:position pos:line="71" pos:column="32"/></operator><name><name pos:line="71" pos:column="28">dco<pos:position pos:line="71" pos:column="31"/></name><operator pos:line="71" pos:column="31">-&gt;<pos:position pos:line="71" pos:column="36"/></operator><name pos:line="71" pos:column="33">paths<pos:position pos:line="71" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="40">0<pos:position pos:line="71" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="43"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="73" pos:column="9">free<pos:position pos:line="73" pos:column="13"/></name><argument_list pos:line="73" pos:column="13">(<argument><expr><name pos:line="73" pos:column="14">dco<pos:position pos:line="73" pos:column="17"/></name></expr></argument>)<pos:position pos:line="73" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="74" pos:column="9">state<pos:position pos:line="74" pos:column="14"/></name><operator pos:line="74" pos:column="14">-&gt;<pos:position pos:line="74" pos:column="19"/></operator><name pos:line="74" pos:column="16">delayed_checkout<pos:position pos:line="74" pos:column="32"/></name></name> <operator pos:line="74" pos:column="33">=<pos:position pos:line="74" pos:column="34"/></operator> <name pos:line="74" pos:column="35">NULL<pos:position pos:line="74" pos:column="39"/></name></expr>;<pos:position pos:line="74" pos:column="40"/></expr_stmt>

	<return pos:line="76" pos:column="9">return <expr><name pos:line="76" pos:column="16">errs<pos:position pos:line="76" pos:column="20"/></name></expr>;<pos:position pos:line="76" pos:column="21"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
