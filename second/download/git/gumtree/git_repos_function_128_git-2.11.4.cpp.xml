<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_128_git-2.11.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">pretty_print_commit<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">pretty_print_context<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">pp<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
			 <parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name><name pos:line="2" pos:column="32">struct<pos:position pos:line="2" pos:column="38"/></name> <name pos:line="2" pos:column="39">commit<pos:position pos:line="2" pos:column="45"/></name></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">commit<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>,
			 <parameter><decl><type><name><name pos:line="3" pos:column="26">struct<pos:position pos:line="3" pos:column="32"/></name> <name pos:line="3" pos:column="33">strbuf<pos:position pos:line="3" pos:column="39"/></name></name> <modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier></type><name pos:line="3" pos:column="41">sb<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="44"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">beginning_of_body<pos:position pos:line="5" pos:column="40"/></name></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">indent<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">4<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">msg<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">reencoded<pos:position pos:line="8" pos:column="30"/></name></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">encoding<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">need_8bit_cte<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><name><name pos:line="10" pos:column="29">pp<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">need_8bit_cte<pos:position pos:line="10" pos:column="46"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="47"/></decl_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">pp<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">-&gt;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">fmt<pos:position pos:line="12" pos:column="20"/></name></name> <operator pos:line="12" pos:column="21">==<pos:position pos:line="12" pos:column="23"/></operator> <name pos:line="12" pos:column="24">CMIT_FMT_USERFORMAT<pos:position pos:line="12" pos:column="43"/></name></expr>)<pos:position pos:line="12" pos:column="44"/></condition><then pos:line="12" pos:column="44"> <block pos:line="12" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">format_commit_message<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">(<argument><expr><name pos:line="13" pos:column="39">commit<pos:position pos:line="13" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="47">user_format<pos:position pos:line="13" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="60">sb<pos:position pos:line="13" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="64">pp<pos:position pos:line="13" pos:column="66"/></name></expr></argument>)<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="68"/></expr_stmt>
		<return pos:line="14" pos:column="17">return;<pos:position pos:line="14" pos:column="24"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="17" pos:column="9">encoding<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <call><name pos:line="17" pos:column="20">get_log_output_encoding<pos:position pos:line="17" pos:column="43"/></name><argument_list pos:line="17" pos:column="43">()<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name pos:line="18" pos:column="9">msg<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <name pos:line="18" pos:column="15">reencoded<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">=<pos:position pos:line="18" pos:column="26"/></operator> <call><name pos:line="18" pos:column="27">logmsg_reencode<pos:position pos:line="18" pos:column="42"/></name><argument_list pos:line="18" pos:column="42">(<argument><expr><name pos:line="18" pos:column="43">commit<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">NULL<pos:position pos:line="18" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="57">encoding<pos:position pos:line="18" pos:column="65"/></name></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="67"/></expr_stmt>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name><name pos:line="20" pos:column="13">pp<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">-&gt;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="17">fmt<pos:position pos:line="20" pos:column="20"/></name></name> <operator pos:line="20" pos:column="21">==<pos:position pos:line="20" pos:column="23"/></operator> <name pos:line="20" pos:column="24">CMIT_FMT_ONELINE<pos:position pos:line="20" pos:column="40"/></name> <operator pos:line="20" pos:column="41">||<pos:position pos:line="20" pos:column="43"/></operator> <call><name pos:line="20" pos:column="44">cmit_fmt_is_mail<pos:position pos:line="20" pos:column="60"/></name><argument_list pos:line="20" pos:column="60">(<argument><expr><name><name pos:line="20" pos:column="61">pp<pos:position pos:line="20" pos:column="63"/></name><operator pos:line="20" pos:column="63">-&gt;<pos:position pos:line="20" pos:column="68"/></operator><name pos:line="20" pos:column="65">fmt<pos:position pos:line="20" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="70"/></condition><then pos:line="20" pos:column="70">
		<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="17">indent<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">=<pos:position pos:line="21" pos:column="25"/></operator> <literal type="number" pos:line="21" pos:column="26">0<pos:position pos:line="21" pos:column="27"/></literal></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="23" pos:column="9">/*
	 * We need to check and emit Content-type: to mark it
	 * as 8-bit if we haven't done so.
	 */</comment>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><call><name pos:line="27" pos:column="13">cmit_fmt_is_mail<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name><name pos:line="27" pos:column="30">pp<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">-&gt;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="34">fmt<pos:position pos:line="27" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="38"/></argument_list></call> <operator pos:line="27" pos:column="39">&amp;&amp;<pos:position pos:line="27" pos:column="49"/></operator> <name pos:line="27" pos:column="42">need_8bit_cte<pos:position pos:line="27" pos:column="55"/></name> <operator pos:line="27" pos:column="56">==<pos:position pos:line="27" pos:column="58"/></operator> <literal type="number" pos:line="27" pos:column="59">0<pos:position pos:line="27" pos:column="60"/></literal></expr>)<pos:position pos:line="27" pos:column="61"/></condition><then pos:line="27" pos:column="61"> <block pos:line="27" pos:column="62">{
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">int<pos:position pos:line="28" pos:column="20"/></name></type> <name pos:line="28" pos:column="21">i<pos:position pos:line="28" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="28" pos:column="24">ch<pos:position pos:line="28" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="28" pos:column="28">in_body<pos:position pos:line="28" pos:column="35"/></name></decl>;<pos:position pos:line="28" pos:column="36"/></decl_stmt>

		<for pos:line="30" pos:column="17">for <control pos:line="30" pos:column="21">(<init><expr><name pos:line="30" pos:column="22">in_body<pos:position pos:line="30" pos:column="29"/></name> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <name pos:line="30" pos:column="32">i<pos:position pos:line="30" pos:column="33"/></name> <operator pos:line="30" pos:column="34">=<pos:position pos:line="30" pos:column="35"/></operator> <literal type="number" pos:line="30" pos:column="36">0<pos:position pos:line="30" pos:column="37"/></literal></expr>;<pos:position pos:line="30" pos:column="38"/></init> <condition><expr><operator pos:line="30" pos:column="39">(<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="40">ch<pos:position pos:line="30" pos:column="42"/></name> <operator pos:line="30" pos:column="43">=<pos:position pos:line="30" pos:column="44"/></operator> <name><name pos:line="30" pos:column="45">msg<pos:position pos:line="30" pos:column="48"/></name><index pos:line="30" pos:column="48">[<expr><name pos:line="30" pos:column="49">i<pos:position pos:line="30" pos:column="50"/></name></expr>]<pos:position pos:line="30" pos:column="51"/></index></name><operator pos:line="30" pos:column="51">)<pos:position pos:line="30" pos:column="52"/></operator></expr>;<pos:position pos:line="30" pos:column="53"/></condition> <incr><expr><name pos:line="30" pos:column="54">i<pos:position pos:line="30" pos:column="55"/></name><operator pos:line="30" pos:column="55">++<pos:position pos:line="30" pos:column="57"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="58"/></control> <block pos:line="30" pos:column="59">{
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><operator pos:line="31" pos:column="29">!<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="30">in_body<pos:position pos:line="31" pos:column="37"/></name></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38"> <block pos:line="31" pos:column="39">{
				<comment type="block" pos:line="32" pos:column="33">/* author could be non 7-bit ASCII but
				 * the log may be so; skip over the
				 * header part first.
				 */</comment>
				<if pos:line="36" pos:column="33">if <condition pos:line="36" pos:column="36">(<expr><name pos:line="36" pos:column="37">ch<pos:position pos:line="36" pos:column="39"/></name> <operator pos:line="36" pos:column="40">==<pos:position pos:line="36" pos:column="42"/></operator> <literal type="char" pos:line="36" pos:column="43">'\n'<pos:position pos:line="36" pos:column="47"/></literal> <operator pos:line="36" pos:column="48">&amp;&amp;<pos:position pos:line="36" pos:column="58"/></operator> <name><name pos:line="36" pos:column="51">msg<pos:position pos:line="36" pos:column="54"/></name><index pos:line="36" pos:column="54">[<expr><name pos:line="36" pos:column="55">i<pos:position pos:line="36" pos:column="56"/></name><operator pos:line="36" pos:column="56">+<pos:position pos:line="36" pos:column="57"/></operator><literal type="number" pos:line="36" pos:column="57">1<pos:position pos:line="36" pos:column="58"/></literal></expr>]<pos:position pos:line="36" pos:column="59"/></index></name> <operator pos:line="36" pos:column="60">==<pos:position pos:line="36" pos:column="62"/></operator> <literal type="char" pos:line="36" pos:column="63">'\n'<pos:position pos:line="36" pos:column="67"/></literal></expr>)<pos:position pos:line="36" pos:column="68"/></condition><then pos:line="36" pos:column="68">
					<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="41">in_body<pos:position pos:line="37" pos:column="48"/></name> <operator pos:line="37" pos:column="49">=<pos:position pos:line="37" pos:column="50"/></operator> <literal type="number" pos:line="37" pos:column="51">1<pos:position pos:line="37" pos:column="52"/></literal></expr>;<pos:position pos:line="37" pos:column="53"/></expr_stmt></block></then></if>
			}<pos:position pos:line="38" pos:column="26"/></block></then>
			<elseif pos:line="39" pos:column="25">else <if pos:line="39" pos:column="30">if <condition pos:line="39" pos:column="33">(<expr><call><name pos:line="39" pos:column="34">non_ascii<pos:position pos:line="39" pos:column="43"/></name><argument_list pos:line="39" pos:column="43">(<argument><expr><name pos:line="39" pos:column="44">ch<pos:position pos:line="39" pos:column="46"/></name></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="48"/></condition><then pos:line="39" pos:column="48"> <block pos:line="39" pos:column="49">{
				<expr_stmt><expr><name pos:line="40" pos:column="33">need_8bit_cte<pos:position pos:line="40" pos:column="46"/></name> <operator pos:line="40" pos:column="47">=<pos:position pos:line="40" pos:column="48"/></operator> <literal type="number" pos:line="40" pos:column="49">1<pos:position pos:line="40" pos:column="50"/></literal></expr>;<pos:position pos:line="40" pos:column="51"/></expr_stmt>
				<break pos:line="41" pos:column="33">break;<pos:position pos:line="41" pos:column="39"/></break>
			}<pos:position pos:line="42" pos:column="26"/></block></then></if></elseif></if>
		}<pos:position pos:line="43" pos:column="18"/></block></for>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="46" pos:column="9">pp_header<pos:position pos:line="46" pos:column="18"/></name><argument_list pos:line="46" pos:column="18">(<argument><expr><name pos:line="46" pos:column="19">pp<pos:position pos:line="46" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="23">encoding<pos:position pos:line="46" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="33">commit<pos:position pos:line="46" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="41">&amp;<pos:position pos:line="46" pos:column="46"/></operator><name pos:line="46" pos:column="42">msg<pos:position pos:line="46" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">sb<pos:position pos:line="46" pos:column="49"/></name></expr></argument>)<pos:position pos:line="46" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="51"/></expr_stmt>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name><name pos:line="47" pos:column="13">pp<pos:position pos:line="47" pos:column="15"/></name><operator pos:line="47" pos:column="15">-&gt;<pos:position pos:line="47" pos:column="20"/></operator><name pos:line="47" pos:column="17">fmt<pos:position pos:line="47" pos:column="20"/></name></name> <operator pos:line="47" pos:column="21">!=<pos:position pos:line="47" pos:column="23"/></operator> <name pos:line="47" pos:column="24">CMIT_FMT_ONELINE<pos:position pos:line="47" pos:column="40"/></name> <operator pos:line="47" pos:column="41">&amp;&amp;<pos:position pos:line="47" pos:column="51"/></operator> <operator pos:line="47" pos:column="44">!<pos:position pos:line="47" pos:column="45"/></operator><name><name pos:line="47" pos:column="45">pp<pos:position pos:line="47" pos:column="47"/></name><operator pos:line="47" pos:column="47">-&gt;<pos:position pos:line="47" pos:column="52"/></operator><name pos:line="47" pos:column="49">subject<pos:position pos:line="47" pos:column="56"/></name></name></expr>)<pos:position pos:line="47" pos:column="57"/></condition><then pos:line="47" pos:column="57"> <block pos:line="47" pos:column="58">{
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">strbuf_addch<pos:position pos:line="48" pos:column="29"/></name><argument_list pos:line="48" pos:column="29">(<argument><expr><name pos:line="48" pos:column="30">sb<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="48" pos:column="34">'\n'<pos:position pos:line="48" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="51" pos:column="9">/* Skip excess blank lines at the beginning of body, if any... */</comment>
	<expr_stmt><expr><name pos:line="52" pos:column="9">msg<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">=<pos:position pos:line="52" pos:column="14"/></operator> <call><name pos:line="52" pos:column="15">skip_blank_lines<pos:position pos:line="52" pos:column="31"/></name><argument_list pos:line="52" pos:column="31">(<argument><expr><name pos:line="52" pos:column="32">msg<pos:position pos:line="52" pos:column="35"/></name></expr></argument>)<pos:position pos:line="52" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="37"/></expr_stmt>

	<comment type="block" pos:line="54" pos:column="9">/* These formats treat the title line specially. */</comment>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name><name pos:line="55" pos:column="13">pp<pos:position pos:line="55" pos:column="15"/></name><operator pos:line="55" pos:column="15">-&gt;<pos:position pos:line="55" pos:column="20"/></operator><name pos:line="55" pos:column="17">fmt<pos:position pos:line="55" pos:column="20"/></name></name> <operator pos:line="55" pos:column="21">==<pos:position pos:line="55" pos:column="23"/></operator> <name pos:line="55" pos:column="24">CMIT_FMT_ONELINE<pos:position pos:line="55" pos:column="40"/></name> <operator pos:line="55" pos:column="41">||<pos:position pos:line="55" pos:column="43"/></operator> <call><name pos:line="55" pos:column="44">cmit_fmt_is_mail<pos:position pos:line="55" pos:column="60"/></name><argument_list pos:line="55" pos:column="60">(<argument><expr><name><name pos:line="55" pos:column="61">pp<pos:position pos:line="55" pos:column="63"/></name><operator pos:line="55" pos:column="63">-&gt;<pos:position pos:line="55" pos:column="68"/></operator><name pos:line="55" pos:column="65">fmt<pos:position pos:line="55" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="70"/></condition><then pos:line="55" pos:column="70">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="17">pp_title_line<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><name pos:line="56" pos:column="31">pp<pos:position pos:line="56" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="35">&amp;<pos:position pos:line="56" pos:column="40"/></operator><name pos:line="56" pos:column="36">msg<pos:position pos:line="56" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="41">sb<pos:position pos:line="56" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="45">encoding<pos:position pos:line="56" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="55">need_8bit_cte<pos:position pos:line="56" pos:column="68"/></name></expr></argument>)<pos:position pos:line="56" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="70"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="58" pos:column="9">beginning_of_body<pos:position pos:line="58" pos:column="26"/></name> <operator pos:line="58" pos:column="27">=<pos:position pos:line="58" pos:column="28"/></operator> <name><name pos:line="58" pos:column="29">sb<pos:position pos:line="58" pos:column="31"/></name><operator pos:line="58" pos:column="31">-&gt;<pos:position pos:line="58" pos:column="36"/></operator><name pos:line="58" pos:column="33">len<pos:position pos:line="58" pos:column="36"/></name></name></expr>;<pos:position pos:line="58" pos:column="37"/></expr_stmt>
	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name><name pos:line="59" pos:column="13">pp<pos:position pos:line="59" pos:column="15"/></name><operator pos:line="59" pos:column="15">-&gt;<pos:position pos:line="59" pos:column="20"/></operator><name pos:line="59" pos:column="17">fmt<pos:position pos:line="59" pos:column="20"/></name></name> <operator pos:line="59" pos:column="21">!=<pos:position pos:line="59" pos:column="23"/></operator> <name pos:line="59" pos:column="24">CMIT_FMT_ONELINE<pos:position pos:line="59" pos:column="40"/></name></expr>)<pos:position pos:line="59" pos:column="41"/></condition><then pos:line="59" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="17">pp_remainder<pos:position pos:line="60" pos:column="29"/></name><argument_list pos:line="60" pos:column="29">(<argument><expr><name pos:line="60" pos:column="30">pp<pos:position pos:line="60" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="34">&amp;<pos:position pos:line="60" pos:column="39"/></operator><name pos:line="60" pos:column="35">msg<pos:position pos:line="60" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="40">sb<pos:position pos:line="60" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="44">indent<pos:position pos:line="60" pos:column="50"/></name></expr></argument>)<pos:position pos:line="60" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="52"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">strbuf_rtrim<pos:position pos:line="61" pos:column="21"/></name><argument_list pos:line="61" pos:column="21">(<argument><expr><name pos:line="61" pos:column="22">sb<pos:position pos:line="61" pos:column="24"/></name></expr></argument>)<pos:position pos:line="61" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="26"/></expr_stmt>

	<comment type="block" pos:line="63" pos:column="9">/* Make sure there is an EOLN for the non-oneline case */</comment>
	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name><name pos:line="64" pos:column="13">pp<pos:position pos:line="64" pos:column="15"/></name><operator pos:line="64" pos:column="15">-&gt;<pos:position pos:line="64" pos:column="20"/></operator><name pos:line="64" pos:column="17">fmt<pos:position pos:line="64" pos:column="20"/></name></name> <operator pos:line="64" pos:column="21">!=<pos:position pos:line="64" pos:column="23"/></operator> <name pos:line="64" pos:column="24">CMIT_FMT_ONELINE<pos:position pos:line="64" pos:column="40"/></name></expr>)<pos:position pos:line="64" pos:column="41"/></condition><then pos:line="64" pos:column="41">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="17">strbuf_addch<pos:position pos:line="65" pos:column="29"/></name><argument_list pos:line="65" pos:column="29">(<argument><expr><name pos:line="65" pos:column="30">sb<pos:position pos:line="65" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="65" pos:column="34">'\n'<pos:position pos:line="65" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="40"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="67" pos:column="9">/*
	 * The caller may append additional body text in e-mail
	 * format.  Make sure we did not strip the blank line
	 * between the header and the body.
	 */</comment>
	<if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><call><name pos:line="72" pos:column="13">cmit_fmt_is_mail<pos:position pos:line="72" pos:column="29"/></name><argument_list pos:line="72" pos:column="29">(<argument><expr><name><name pos:line="72" pos:column="30">pp<pos:position pos:line="72" pos:column="32"/></name><operator pos:line="72" pos:column="32">-&gt;<pos:position pos:line="72" pos:column="37"/></operator><name pos:line="72" pos:column="34">fmt<pos:position pos:line="72" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="38"/></argument_list></call> <operator pos:line="72" pos:column="39">&amp;&amp;<pos:position pos:line="72" pos:column="49"/></operator> <name><name pos:line="72" pos:column="42">sb<pos:position pos:line="72" pos:column="44"/></name><operator pos:line="72" pos:column="44">-&gt;<pos:position pos:line="72" pos:column="49"/></operator><name pos:line="72" pos:column="46">len<pos:position pos:line="72" pos:column="49"/></name></name> <operator pos:line="72" pos:column="50">&lt;=<pos:position pos:line="72" pos:column="55"/></operator> <name pos:line="72" pos:column="53">beginning_of_body<pos:position pos:line="72" pos:column="70"/></name></expr>)<pos:position pos:line="72" pos:column="71"/></condition><then pos:line="72" pos:column="71">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="17">strbuf_addch<pos:position pos:line="73" pos:column="29"/></name><argument_list pos:line="73" pos:column="29">(<argument><expr><name pos:line="73" pos:column="30">sb<pos:position pos:line="73" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="73" pos:column="34">'\n'<pos:position pos:line="73" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="40"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="75" pos:column="9">unuse_commit_buffer<pos:position pos:line="75" pos:column="28"/></name><argument_list pos:line="75" pos:column="28">(<argument><expr><name pos:line="75" pos:column="29">commit<pos:position pos:line="75" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="37">reencoded<pos:position pos:line="75" pos:column="46"/></name></expr></argument>)<pos:position pos:line="75" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="48"/></expr_stmt>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
