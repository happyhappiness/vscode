<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_777.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">handle_bad_merge_base<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">void<pos:position pos:line="1" pos:column="39"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><call><name pos:line="3" pos:column="13">is_expected_rev<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><name pos:line="3" pos:column="29">current_bad_oid<pos:position pos:line="3" pos:column="44"/></name></expr></argument>)<pos:position pos:line="3" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="46"/></condition><then pos:line="3" pos:column="46"> <block pos:line="3" pos:column="47">{
		<decl_stmt><decl><type><name pos:line="4" pos:column="17">char<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">bad_hex<pos:position pos:line="4" pos:column="30"/></name> <init pos:line="4" pos:column="31">= <expr><call><name pos:line="4" pos:column="33">oid_to_hex<pos:position pos:line="4" pos:column="43"/></name><argument_list pos:line="4" pos:column="43">(<argument><expr><name pos:line="4" pos:column="44">current_bad_oid<pos:position pos:line="4" pos:column="59"/></name></expr></argument>)<pos:position pos:line="4" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="61"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">char<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">good_hex<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><call><name pos:line="5" pos:column="34">join_sha1_array_hex<pos:position pos:line="5" pos:column="53"/></name><argument_list pos:line="5" pos:column="53">(<argument><expr><operator pos:line="5" pos:column="54">&amp;<pos:position pos:line="5" pos:column="59"/></operator><name pos:line="5" pos:column="55">good_revs<pos:position pos:line="5" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="5" pos:column="66">' '<pos:position pos:line="5" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="71"/></decl_stmt>
		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><operator pos:line="6" pos:column="21">!<pos:position pos:line="6" pos:column="22"/></operator><call><name pos:line="6" pos:column="22">strcmp<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><name pos:line="6" pos:column="29">term_bad<pos:position pos:line="6" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="39">"bad"<pos:position pos:line="6" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call> <operator pos:line="6" pos:column="46">&amp;&amp;<pos:position pos:line="6" pos:column="56"/></operator> <operator pos:line="6" pos:column="49">!<pos:position pos:line="6" pos:column="50"/></operator><call><name pos:line="6" pos:column="50">strcmp<pos:position pos:line="6" pos:column="56"/></name><argument_list pos:line="6" pos:column="56">(<argument><expr><name pos:line="6" pos:column="57">term_good<pos:position pos:line="6" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="68">"good"<pos:position pos:line="6" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="76"/></condition><then pos:line="6" pos:column="76"> <block pos:line="6" pos:column="77">{
			<expr_stmt><expr><call><name pos:line="7" pos:column="25">fprintf<pos:position pos:line="7" pos:column="32"/></name><argument_list pos:line="7" pos:column="32">(<argument><expr><name pos:line="7" pos:column="33">stderr<pos:position pos:line="7" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="7" pos:column="41">_<pos:position pos:line="7" pos:column="42"/></name><argument_list pos:line="7" pos:column="42">(<argument><expr><literal type="string" pos:line="7" pos:column="43">"The merge base %s is bad.\n"<pos:position pos:line="7" pos:column="72"/></literal>
				<literal type="string" pos:line="8" pos:column="33">"This means the bug has been fixed "<pos:position pos:line="8" pos:column="69"/></literal>
				<literal type="string" pos:line="9" pos:column="33">"between %s and [%s].\n"<pos:position pos:line="9" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr></argument>,
				<argument><expr><name pos:line="10" pos:column="33">bad_hex<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="42">bad_hex<pos:position pos:line="10" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="51">good_hex<pos:position pos:line="10" pos:column="59"/></name></expr></argument>)<pos:position pos:line="10" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="61"/></expr_stmt>
		}<pos:position pos:line="11" pos:column="18"/></block></then> <elseif pos:line="11" pos:column="19">else <if pos:line="11" pos:column="24">if <condition pos:line="11" pos:column="27">(<expr><operator pos:line="11" pos:column="28">!<pos:position pos:line="11" pos:column="29"/></operator><call><name pos:line="11" pos:column="29">strcmp<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><name pos:line="11" pos:column="36">term_bad<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="46">"new"<pos:position pos:line="11" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call> <operator pos:line="11" pos:column="53">&amp;&amp;<pos:position pos:line="11" pos:column="63"/></operator> <operator pos:line="11" pos:column="56">!<pos:position pos:line="11" pos:column="57"/></operator><call><name pos:line="11" pos:column="57">strcmp<pos:position pos:line="11" pos:column="63"/></name><argument_list pos:line="11" pos:column="63">(<argument><expr><name pos:line="11" pos:column="64">term_good<pos:position pos:line="11" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="75">"old"<pos:position pos:line="11" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="81"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="82"/></condition><then pos:line="11" pos:column="82"> <block pos:line="11" pos:column="83">{
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">fprintf<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">stderr<pos:position pos:line="12" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="41">_<pos:position pos:line="12" pos:column="42"/></name><argument_list pos:line="12" pos:column="42">(<argument><expr><literal type="string" pos:line="12" pos:column="43">"The merge base %s is new.\n"<pos:position pos:line="12" pos:column="72"/></literal>
				<literal type="string" pos:line="13" pos:column="33">"The property has changed "<pos:position pos:line="13" pos:column="60"/></literal>
				<literal type="string" pos:line="14" pos:column="33">"between %s and [%s].\n"<pos:position pos:line="14" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="58"/></argument_list></call></expr></argument>,
				<argument><expr><name pos:line="15" pos:column="33">bad_hex<pos:position pos:line="15" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="42">bad_hex<pos:position pos:line="15" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="51">good_hex<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="61"/></expr_stmt>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if></elseif> <else pos:line="16" pos:column="19">else <block pos:line="16" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">fprintf<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">stderr<pos:position pos:line="17" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="41">_<pos:position pos:line="17" pos:column="42"/></name><argument_list pos:line="17" pos:column="42">(<argument><expr><literal type="string" pos:line="17" pos:column="43">"The merge base %s is %s.\n"<pos:position pos:line="17" pos:column="71"/></literal>
				<literal type="string" pos:line="18" pos:column="33">"This means the first '%s' commit is "<pos:position pos:line="18" pos:column="71"/></literal>
				<literal type="string" pos:line="19" pos:column="33">"between %s and [%s].\n"<pos:position pos:line="19" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="58"/></argument_list></call></expr></argument>,
				<argument><expr><name pos:line="20" pos:column="33">bad_hex<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="42">term_bad<pos:position pos:line="20" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="52">term_good<pos:position pos:line="20" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="63">bad_hex<pos:position pos:line="20" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="72">good_hex<pos:position pos:line="20" pos:column="80"/></name></expr></argument>)<pos:position pos:line="20" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="82"/></expr_stmt>
		}<pos:position pos:line="21" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">exit<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><literal type="number" pos:line="22" pos:column="22">3<pos:position pos:line="22" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="25" pos:column="9">fprintf<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">(<argument><expr><name pos:line="25" pos:column="17">stderr<pos:position pos:line="25" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="25">_<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">(<argument><expr><literal type="string" pos:line="25" pos:column="27">"Some %s revs are not ancestor of the %s rev.\n"<pos:position pos:line="25" pos:column="75"/></literal>
		<literal type="string" pos:line="26" pos:column="17">"git bisect cannot work properly in this case.\n"<pos:position pos:line="26" pos:column="66"/></literal>
		<literal type="string" pos:line="27" pos:column="17">"Maybe you mistook %s and %s revs?\n"<pos:position pos:line="27" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr></argument>,
		<argument><expr><name pos:line="28" pos:column="17">term_good<pos:position pos:line="28" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="28">term_bad<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="38">term_good<pos:position pos:line="28" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="49">term_bad<pos:position pos:line="28" pos:column="57"/></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">exit<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><literal type="number" pos:line="29" pos:column="14">1<pos:position pos:line="29" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="17"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
