<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4051_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">dump_grep_pat<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">grep_pat<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">p<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<switch pos:line="3" pos:column="9">switch <condition pos:line="3" pos:column="16">(<expr><name><name pos:line="3" pos:column="17">p<pos:position pos:line="3" pos:column="18"/></name><operator pos:line="3" pos:column="18">-&gt;<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="20">token<pos:position pos:line="3" pos:column="25"/></name></name></expr>)<pos:position pos:line="3" pos:column="26"/></condition> <block pos:line="3" pos:column="27">{
	<case pos:line="4" pos:column="9">case <expr><name pos:line="4" pos:column="14">GREP_AND<pos:position pos:line="4" pos:column="22"/></name></expr>:<pos:position pos:line="4" pos:column="23"/></case> <expr_stmt><expr><call><name pos:line="4" pos:column="24">fprintf<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">(<argument><expr><name pos:line="4" pos:column="32">stderr<pos:position pos:line="4" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="40">"*and*"<pos:position pos:line="4" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="49"/></expr_stmt> <break pos:line="4" pos:column="50">break;<pos:position pos:line="4" pos:column="56"/></break>
	<case pos:line="5" pos:column="9">case <expr><name pos:line="5" pos:column="14">GREP_OPEN_PAREN<pos:position pos:line="5" pos:column="29"/></name></expr>:<pos:position pos:line="5" pos:column="30"/></case> <expr_stmt><expr><call><name pos:line="5" pos:column="31">fprintf<pos:position pos:line="5" pos:column="38"/></name><argument_list pos:line="5" pos:column="38">(<argument><expr><name pos:line="5" pos:column="39">stderr<pos:position pos:line="5" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="47">"*(*"<pos:position pos:line="5" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="54"/></expr_stmt> <break pos:line="5" pos:column="55">break;<pos:position pos:line="5" pos:column="61"/></break>
	<case pos:line="6" pos:column="9">case <expr><name pos:line="6" pos:column="14">GREP_CLOSE_PAREN<pos:position pos:line="6" pos:column="30"/></name></expr>:<pos:position pos:line="6" pos:column="31"/></case> <expr_stmt><expr><call><name pos:line="6" pos:column="32">fprintf<pos:position pos:line="6" pos:column="39"/></name><argument_list pos:line="6" pos:column="39">(<argument><expr><name pos:line="6" pos:column="40">stderr<pos:position pos:line="6" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="48">"*)*"<pos:position pos:line="6" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="55"/></expr_stmt> <break pos:line="6" pos:column="56">break;<pos:position pos:line="6" pos:column="62"/></break>
	<case pos:line="7" pos:column="9">case <expr><name pos:line="7" pos:column="14">GREP_NOT<pos:position pos:line="7" pos:column="22"/></name></expr>:<pos:position pos:line="7" pos:column="23"/></case> <expr_stmt><expr><call><name pos:line="7" pos:column="24">fprintf<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><name pos:line="7" pos:column="32">stderr<pos:position pos:line="7" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="40">"*not*"<pos:position pos:line="7" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="49"/></expr_stmt> <break pos:line="7" pos:column="50">break;<pos:position pos:line="7" pos:column="56"/></break>
	<case pos:line="8" pos:column="9">case <expr><name pos:line="8" pos:column="14">GREP_OR<pos:position pos:line="8" pos:column="21"/></name></expr>:<pos:position pos:line="8" pos:column="22"/></case> <expr_stmt><expr><call><name pos:line="8" pos:column="23">fprintf<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">stderr<pos:position pos:line="8" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="39">"*or*"<pos:position pos:line="8" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="47"/></expr_stmt> <break pos:line="8" pos:column="48">break;<pos:position pos:line="8" pos:column="54"/></break>

	<case pos:line="10" pos:column="9">case <expr><name pos:line="10" pos:column="14">GREP_PATTERN<pos:position pos:line="10" pos:column="26"/></name></expr>:<pos:position pos:line="10" pos:column="27"/></case> <expr_stmt><expr><call><name pos:line="10" pos:column="28">fprintf<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><name pos:line="10" pos:column="36">stderr<pos:position pos:line="10" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="44">"pattern"<pos:position pos:line="10" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></expr_stmt> <break pos:line="10" pos:column="56">break;<pos:position pos:line="10" pos:column="62"/></break>
	<case pos:line="11" pos:column="9">case <expr><name pos:line="11" pos:column="14">GREP_PATTERN_HEAD<pos:position pos:line="11" pos:column="31"/></name></expr>:<pos:position pos:line="11" pos:column="32"/></case> <expr_stmt><expr><call><name pos:line="11" pos:column="33">fprintf<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">stderr<pos:position pos:line="11" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="49">"pattern_head"<pos:position pos:line="11" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="65"/></expr_stmt> <break pos:line="11" pos:column="66">break;<pos:position pos:line="11" pos:column="72"/></break>
	<case pos:line="12" pos:column="9">case <expr><name pos:line="12" pos:column="14">GREP_PATTERN_BODY<pos:position pos:line="12" pos:column="31"/></name></expr>:<pos:position pos:line="12" pos:column="32"/></case> <expr_stmt><expr><call><name pos:line="12" pos:column="33">fprintf<pos:position pos:line="12" pos:column="40"/></name><argument_list pos:line="12" pos:column="40">(<argument><expr><name pos:line="12" pos:column="41">stderr<pos:position pos:line="12" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="49">"pattern_body"<pos:position pos:line="12" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="65"/></expr_stmt> <break pos:line="12" pos:column="66">break;<pos:position pos:line="12" pos:column="72"/></break>
	}<pos:position pos:line="13" pos:column="10"/></block></switch>

	<switch pos:line="15" pos:column="9">switch <condition pos:line="15" pos:column="16">(<expr><name><name pos:line="15" pos:column="17">p<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">-&gt;<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="20">token<pos:position pos:line="15" pos:column="25"/></name></name></expr>)<pos:position pos:line="15" pos:column="26"/></condition> <block pos:line="15" pos:column="27">{
	<default pos:line="16" pos:column="9">default:<pos:position pos:line="16" pos:column="17"/></default> <break pos:line="16" pos:column="18">break;<pos:position pos:line="16" pos:column="24"/></break>
	<case pos:line="17" pos:column="9">case <expr><name pos:line="17" pos:column="14">GREP_PATTERN_HEAD<pos:position pos:line="17" pos:column="31"/></name></expr>:<pos:position pos:line="17" pos:column="32"/></case>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">fprintf<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">stderr<pos:position pos:line="18" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="33">"&lt;head %d&gt;"<pos:position pos:line="18" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="46">p<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">-&gt;<pos:position pos:line="18" pos:column="52"/></operator><name pos:line="18" pos:column="49">field<pos:position pos:line="18" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt> <break pos:line="18" pos:column="57">break;<pos:position pos:line="18" pos:column="63"/></break>
	<case pos:line="19" pos:column="9">case <expr><name pos:line="19" pos:column="14">GREP_PATTERN_BODY<pos:position pos:line="19" pos:column="31"/></name></expr>:<pos:position pos:line="19" pos:column="32"/></case>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">fprintf<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">stderr<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="33">"&lt;body&gt;"<pos:position pos:line="20" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt> <break pos:line="20" pos:column="44">break;<pos:position pos:line="20" pos:column="50"/></break>
	}<pos:position pos:line="21" pos:column="10"/></block></switch>
	<switch pos:line="22" pos:column="9">switch <condition pos:line="22" pos:column="16">(<expr><name><name pos:line="22" pos:column="17">p<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">-&gt;<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="20">token<pos:position pos:line="22" pos:column="25"/></name></name></expr>)<pos:position pos:line="22" pos:column="26"/></condition> <block pos:line="22" pos:column="27">{
	<default pos:line="23" pos:column="9">default:<pos:position pos:line="23" pos:column="17"/></default> <break pos:line="23" pos:column="18">break;<pos:position pos:line="23" pos:column="24"/></break>
	<case pos:line="24" pos:column="9">case <expr><name pos:line="24" pos:column="14">GREP_PATTERN_HEAD<pos:position pos:line="24" pos:column="31"/></name></expr>:<pos:position pos:line="24" pos:column="32"/></case>
	<case pos:line="25" pos:column="9">case <expr><name pos:line="25" pos:column="14">GREP_PATTERN_BODY<pos:position pos:line="25" pos:column="31"/></name></expr>:<pos:position pos:line="25" pos:column="32"/></case>
	<case pos:line="26" pos:column="9">case <expr><name pos:line="26" pos:column="14">GREP_PATTERN<pos:position pos:line="26" pos:column="26"/></name></expr>:<pos:position pos:line="26" pos:column="27"/></case>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">fprintf<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">stderr<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="33">"%.*s"<pos:position pos:line="27" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="27" pos:column="41">(<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="42">int<pos:position pos:line="27" pos:column="45"/></name><operator pos:line="27" pos:column="45">)<pos:position pos:line="27" pos:column="46"/></operator><name><name pos:line="27" pos:column="46">p<pos:position pos:line="27" pos:column="47"/></name><operator pos:line="27" pos:column="47">-&gt;<pos:position pos:line="27" pos:column="52"/></operator><name pos:line="27" pos:column="49">patternlen<pos:position pos:line="27" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="61">p<pos:position pos:line="27" pos:column="62"/></name><operator pos:line="27" pos:column="62">-&gt;<pos:position pos:line="27" pos:column="67"/></operator><name pos:line="27" pos:column="64">pattern<pos:position pos:line="27" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="73"/></expr_stmt>
		<break pos:line="28" pos:column="17">break;<pos:position pos:line="28" pos:column="23"/></break>
	}<pos:position pos:line="29" pos:column="10"/></block></switch>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">fputc<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><literal type="char" pos:line="30" pos:column="15">'\n'<pos:position pos:line="30" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="21">stderr<pos:position pos:line="30" pos:column="27"/></name></expr></argument>)<pos:position pos:line="30" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
