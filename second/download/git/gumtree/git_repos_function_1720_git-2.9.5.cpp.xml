<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1720_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">init_skiplist<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">fsck_options<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">options<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name pos:line="1" pos:column="63">char<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">path<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">sha1_array<pos:position pos:line="3" pos:column="33"/></name></name></type> <name pos:line="3" pos:column="34">skiplist<pos:position pos:line="3" pos:column="42"/></name> <init pos:line="3" pos:column="43">= <expr><name pos:line="3" pos:column="45">SHA1_ARRAY_INIT<pos:position pos:line="3" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="61"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">sorted<pos:position pos:line="4" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="21">fd<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">buffer<pos:position pos:line="5" pos:column="20"/></name><index pos:line="5" pos:column="20">[<expr><literal type="number" pos:line="5" pos:column="21">41<pos:position pos:line="5" pos:column="23"/></literal></expr>]<pos:position pos:line="5" pos:column="24"/></index></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name></type> <name><name pos:line="6" pos:column="23">sha1<pos:position pos:line="6" pos:column="27"/></name><index pos:line="6" pos:column="27">[<expr><literal type="number" pos:line="6" pos:column="28">20<pos:position pos:line="6" pos:column="30"/></literal></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">options<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">-&gt;<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="22">skiplist<pos:position pos:line="8" pos:column="30"/></name></name></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">sorted<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">=<pos:position pos:line="9" pos:column="25"/></operator> <name><name pos:line="9" pos:column="26">options<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">-&gt;<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="35">skiplist<pos:position pos:line="9" pos:column="43"/></name><operator pos:line="9" pos:column="43">-&gt;<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="45">sorted<pos:position pos:line="9" pos:column="51"/></name></name></expr>;<pos:position pos:line="9" pos:column="52"/></expr_stmt></block></then>
	<else pos:line="10" pos:column="9">else <block pos:line="10" pos:column="14">{
		<expr_stmt><expr><name pos:line="11" pos:column="17">sorted<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">=<pos:position pos:line="11" pos:column="25"/></operator> <literal type="number" pos:line="11" pos:column="26">1<pos:position pos:line="11" pos:column="27"/></literal></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="12" pos:column="17">options<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">-&gt;<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="26">skiplist<pos:position pos:line="12" pos:column="34"/></name></name> <operator pos:line="12" pos:column="35">=<pos:position pos:line="12" pos:column="36"/></operator> <operator pos:line="12" pos:column="37">&amp;<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="38">skiplist<pos:position pos:line="12" pos:column="46"/></name></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></else></if>

	<expr_stmt><expr><name pos:line="15" pos:column="9">fd<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <call><name pos:line="15" pos:column="14">open<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">path<pos:position pos:line="15" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="25">O_RDONLY<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">fd<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">&lt;<pos:position pos:line="16" pos:column="20"/></operator> <literal type="number" pos:line="16" pos:column="18">0<pos:position pos:line="16" pos:column="19"/></literal></expr>)<pos:position pos:line="16" pos:column="20"/></condition><then pos:line="16" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">die<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><literal type="string" pos:line="17" pos:column="21">"Could not open skip list: %s"<pos:position pos:line="17" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="53">path<pos:position pos:line="17" pos:column="57"/></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="59"/></expr_stmt></block></then></if>
	<for pos:line="18" pos:column="9">for <control pos:line="18" pos:column="13">(<init pos:line="18" pos:column="14">;<pos:position pos:line="18" pos:column="15"/></init><condition pos:line="18" pos:column="15">;<pos:position pos:line="18" pos:column="16"/></condition><incr/>)<pos:position pos:line="18" pos:column="17"/></control> <block pos:line="18" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">int<pos:position pos:line="19" pos:column="20"/></name></type> <name pos:line="19" pos:column="21">result<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><call><name pos:line="19" pos:column="30">read_in_full<pos:position pos:line="19" pos:column="42"/></name><argument_list pos:line="19" pos:column="42">(<argument><expr><name pos:line="19" pos:column="43">fd<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="47">buffer<pos:position pos:line="19" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="55">sizeof<argument_list pos:line="19" pos:column="61">(<argument><expr><name pos:line="19" pos:column="62">buffer<pos:position pos:line="19" pos:column="68"/></name></expr></argument>)<pos:position pos:line="19" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="71"/></decl_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">result<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">&lt;<pos:position pos:line="20" pos:column="32"/></operator> <literal type="number" pos:line="20" pos:column="30">0<pos:position pos:line="20" pos:column="31"/></literal></expr>)<pos:position pos:line="20" pos:column="32"/></condition><then pos:line="20" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">die_errno<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><literal type="string" pos:line="21" pos:column="35">"Could not read '%s'"<pos:position pos:line="21" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="58">path<pos:position pos:line="21" pos:column="62"/></name></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="64"/></expr_stmt></block></then></if>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">result<pos:position pos:line="22" pos:column="28"/></name></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29">
			<block type="pseudo"><break pos:line="23" pos:column="25">break;<pos:position pos:line="23" pos:column="31"/></break></block></then></if>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><call><name pos:line="24" pos:column="21">get_sha1_hex<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">(<argument><expr><name pos:line="24" pos:column="34">buffer<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="42">sha1<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call> <operator pos:line="24" pos:column="48">||<pos:position pos:line="24" pos:column="50"/></operator> <name><name pos:line="24" pos:column="51">buffer<pos:position pos:line="24" pos:column="57"/></name><index pos:line="24" pos:column="57">[<expr><literal type="number" pos:line="24" pos:column="58">40<pos:position pos:line="24" pos:column="60"/></literal></expr>]<pos:position pos:line="24" pos:column="61"/></index></name> <operator pos:line="24" pos:column="62">!=<pos:position pos:line="24" pos:column="64"/></operator> <literal type="char" pos:line="24" pos:column="65">'\n'<pos:position pos:line="24" pos:column="69"/></literal></expr>)<pos:position pos:line="24" pos:column="70"/></condition><then pos:line="24" pos:column="70">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">die<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><literal type="string" pos:line="25" pos:column="29">"Invalid SHA-1: %s"<pos:position pos:line="25" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="50">buffer<pos:position pos:line="25" pos:column="56"/></name></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">sha1_array_append<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><operator pos:line="26" pos:column="35">&amp;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="36">skiplist<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="46">sha1<pos:position pos:line="26" pos:column="50"/></name></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="52"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">sorted<pos:position pos:line="27" pos:column="27"/></name> <operator pos:line="27" pos:column="28">&amp;&amp;<pos:position pos:line="27" pos:column="38"/></operator> <name><name pos:line="27" pos:column="31">skiplist<pos:position pos:line="27" pos:column="39"/></name><operator pos:line="27" pos:column="39">.<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="40">nr<pos:position pos:line="27" pos:column="42"/></name></name> <operator pos:line="27" pos:column="43">&gt;<pos:position pos:line="27" pos:column="47"/></operator> <literal type="number" pos:line="27" pos:column="45">1<pos:position pos:line="27" pos:column="46"/></literal> <operator pos:line="27" pos:column="47">&amp;&amp;<pos:position pos:line="27" pos:column="57"/></operator>
				<call><name pos:line="28" pos:column="33">hashcmp<pos:position pos:line="28" pos:column="40"/></name><argument_list pos:line="28" pos:column="40">(<argument><expr><name><name pos:line="28" pos:column="41">skiplist<pos:position pos:line="28" pos:column="49"/></name><operator pos:line="28" pos:column="49">.<pos:position pos:line="28" pos:column="50"/></operator><name pos:line="28" pos:column="50">sha1<pos:position pos:line="28" pos:column="54"/></name><index pos:line="28" pos:column="54">[<expr><name><name pos:line="28" pos:column="55">skiplist<pos:position pos:line="28" pos:column="63"/></name><operator pos:line="28" pos:column="63">.<pos:position pos:line="28" pos:column="64"/></operator><name pos:line="28" pos:column="64">nr<pos:position pos:line="28" pos:column="66"/></name></name> <operator pos:line="28" pos:column="67">-<pos:position pos:line="28" pos:column="68"/></operator> <literal type="number" pos:line="28" pos:column="69">2<pos:position pos:line="28" pos:column="70"/></literal></expr>]<pos:position pos:line="28" pos:column="71"/></index></name></expr></argument>,
					<argument><expr><name pos:line="29" pos:column="41">sha1<pos:position pos:line="29" pos:column="45"/></name></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call> <operator pos:line="29" pos:column="47">&gt;<pos:position pos:line="29" pos:column="51"/></operator> <literal type="number" pos:line="29" pos:column="49">0<pos:position pos:line="29" pos:column="50"/></literal></expr>)<pos:position pos:line="29" pos:column="51"/></condition><then pos:line="29" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="25">sorted<pos:position pos:line="30" pos:column="31"/></name> <operator pos:line="30" pos:column="32">=<pos:position pos:line="30" pos:column="33"/></operator> <literal type="number" pos:line="30" pos:column="34">0<pos:position pos:line="30" pos:column="35"/></literal></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt></block></then></if>
	}<pos:position pos:line="31" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">close<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">fd<pos:position pos:line="32" pos:column="17"/></name></expr></argument>)<pos:position pos:line="32" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="19"/></expr_stmt>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">sorted<pos:position pos:line="34" pos:column="19"/></name></expr>)<pos:position pos:line="34" pos:column="20"/></condition><then pos:line="34" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="17">skiplist<pos:position pos:line="35" pos:column="25"/></name><operator pos:line="35" pos:column="25">.<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="26">sorted<pos:position pos:line="35" pos:column="32"/></name></name> <operator pos:line="35" pos:column="33">=<pos:position pos:line="35" pos:column="34"/></operator> <literal type="number" pos:line="35" pos:column="35">1<pos:position pos:line="35" pos:column="36"/></literal></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt></block></then></if>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
