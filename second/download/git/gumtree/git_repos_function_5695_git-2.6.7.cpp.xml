<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5695_git-2.6.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">notes_copy_from_stdin<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">int<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">force<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">rewrite_cmd<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">buf<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">STRBUF_INIT<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">notes_rewrite_cfg<pos:position pos:line="4" pos:column="33"/></name></name> <modifier pos:line="4" pos:column="34">*<pos:position pos:line="4" pos:column="35"/></modifier></type><name pos:line="4" pos:column="35">c<pos:position pos:line="4" pos:column="36"/></name> <init pos:line="4" pos:column="37">= <expr><name pos:line="4" pos:column="39">NULL<pos:position pos:line="4" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">notes_tree<pos:position pos:line="5" pos:column="26"/></name></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">t<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name pos:line="5" pos:column="32">NULL<pos:position pos:line="5" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">ret<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><literal type="number" pos:line="6" pos:column="19">0<pos:position pos:line="6" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">msg<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><literal type="string" pos:line="7" pos:column="27">"Notes added by 'git notes copy'"<pos:position pos:line="7" pos:column="60"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="61"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">rewrite_cmd<pos:position pos:line="9" pos:column="24"/></name></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25"> <block pos:line="9" pos:column="26">{
		<expr_stmt><expr><name pos:line="10" pos:column="17">c<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">init_copy_notes_for_rewrite<pos:position pos:line="10" pos:column="48"/></name><argument_list pos:line="10" pos:column="48">(<argument><expr><name pos:line="10" pos:column="49">rewrite_cmd<pos:position pos:line="10" pos:column="60"/></name></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></expr_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">c<pos:position pos:line="11" pos:column="23"/></name></expr>)<pos:position pos:line="11" pos:column="24"/></condition><then pos:line="11" pos:column="24">
			<block type="pseudo"><return pos:line="12" pos:column="25">return <expr><literal type="number" pos:line="12" pos:column="32">0<pos:position pos:line="12" pos:column="33"/></literal></expr>;<pos:position pos:line="12" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="13" pos:column="10"/></block></then> <else pos:line="13" pos:column="11">else <block pos:line="13" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">init_notes<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">NULL<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="34">NULL<pos:position pos:line="14" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="40">NULL<pos:position pos:line="14" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="46">0<pos:position pos:line="14" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">t<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <operator pos:line="15" pos:column="21">&amp;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="22">default_notes_tree<pos:position pos:line="15" pos:column="40"/></name></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></else></if>

	<while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><call><name pos:line="18" pos:column="16">strbuf_getline<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><operator pos:line="18" pos:column="31">&amp;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="32">buf<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="37">stdin<pos:position pos:line="18" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="44">'\n'<pos:position pos:line="18" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call> <operator pos:line="18" pos:column="50">!=<pos:position pos:line="18" pos:column="52"/></operator> <name pos:line="18" pos:column="53">EOF<pos:position pos:line="18" pos:column="56"/></name></expr>)<pos:position pos:line="18" pos:column="57"/></condition> <block pos:line="18" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">unsigned<pos:position pos:line="19" pos:column="25"/></name> <name pos:line="19" pos:column="26">char<pos:position pos:line="19" pos:column="30"/></name></type> <name><name pos:line="19" pos:column="31">from_obj<pos:position pos:line="19" pos:column="39"/></name><index pos:line="19" pos:column="39">[<expr><literal type="number" pos:line="19" pos:column="40">20<pos:position pos:line="19" pos:column="42"/></literal></expr>]<pos:position pos:line="19" pos:column="43"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="19" pos:column="45">to_obj<pos:position pos:line="19" pos:column="51"/></name><index pos:line="19" pos:column="51">[<expr><literal type="number" pos:line="19" pos:column="52">20<pos:position pos:line="19" pos:column="54"/></literal></expr>]<pos:position pos:line="19" pos:column="55"/></index></name></decl>;<pos:position pos:line="19" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="20" pos:column="17">struct<pos:position pos:line="20" pos:column="23"/></name> <name pos:line="20" pos:column="24">strbuf<pos:position pos:line="20" pos:column="30"/></name></name> <modifier pos:line="20" pos:column="31">*<pos:position pos:line="20" pos:column="32"/></modifier><modifier pos:line="20" pos:column="32">*<pos:position pos:line="20" pos:column="33"/></modifier></type><name pos:line="20" pos:column="33">split<pos:position pos:line="20" pos:column="38"/></name></decl>;<pos:position pos:line="20" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">int<pos:position pos:line="21" pos:column="20"/></name></type> <name pos:line="21" pos:column="21">err<pos:position pos:line="21" pos:column="24"/></name></decl>;<pos:position pos:line="21" pos:column="25"/></decl_stmt>

		<expr_stmt><expr><name pos:line="23" pos:column="17">split<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator> <call><name pos:line="23" pos:column="25">strbuf_split<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><operator pos:line="23" pos:column="38">&amp;<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="39">buf<pos:position pos:line="23" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="44">' '<pos:position pos:line="23" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><name><name pos:line="24" pos:column="22">split<pos:position pos:line="24" pos:column="27"/></name><index pos:line="24" pos:column="27">[<expr><literal type="number" pos:line="24" pos:column="28">0<pos:position pos:line="24" pos:column="29"/></literal></expr>]<pos:position pos:line="24" pos:column="30"/></index></name> <operator pos:line="24" pos:column="31">||<pos:position pos:line="24" pos:column="33"/></operator> <operator pos:line="24" pos:column="34">!<pos:position pos:line="24" pos:column="35"/></operator><name><name pos:line="24" pos:column="35">split<pos:position pos:line="24" pos:column="40"/></name><index pos:line="24" pos:column="40">[<expr><literal type="number" pos:line="24" pos:column="41">1<pos:position pos:line="24" pos:column="42"/></literal></expr>]<pos:position pos:line="24" pos:column="43"/></index></name></expr>)<pos:position pos:line="24" pos:column="44"/></condition><then pos:line="24" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">die<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><call><name pos:line="25" pos:column="29">_<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><literal type="string" pos:line="25" pos:column="31">"Malformed input line: '%s'."<pos:position pos:line="25" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="63">buf<pos:position pos:line="25" pos:column="66"/></name><operator pos:line="25" pos:column="66">.<pos:position pos:line="25" pos:column="67"/></operator><name pos:line="25" pos:column="67">buf<pos:position pos:line="25" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="72"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">strbuf_rtrim<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name><name pos:line="26" pos:column="30">split<pos:position pos:line="26" pos:column="35"/></name><index pos:line="26" pos:column="35">[<expr><literal type="number" pos:line="26" pos:column="36">0<pos:position pos:line="26" pos:column="37"/></literal></expr>]<pos:position pos:line="26" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">strbuf_rtrim<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name><name pos:line="27" pos:column="30">split<pos:position pos:line="27" pos:column="35"/></name><index pos:line="27" pos:column="35">[<expr><literal type="number" pos:line="27" pos:column="36">1<pos:position pos:line="27" pos:column="37"/></literal></expr>]<pos:position pos:line="27" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><call><name pos:line="28" pos:column="21">get_sha1<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name><name pos:line="28" pos:column="30">split<pos:position pos:line="28" pos:column="35"/></name><index pos:line="28" pos:column="35">[<expr><literal type="number" pos:line="28" pos:column="36">0<pos:position pos:line="28" pos:column="37"/></literal></expr>]<pos:position pos:line="28" pos:column="38"/></index></name><operator pos:line="28" pos:column="38">-&gt;<pos:position pos:line="28" pos:column="43"/></operator><name pos:line="28" pos:column="40">buf<pos:position pos:line="28" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="45">from_obj<pos:position pos:line="28" pos:column="53"/></name></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="55"/></condition><then pos:line="28" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">die<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><call><name pos:line="29" pos:column="29">_<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><literal type="string" pos:line="29" pos:column="31">"Failed to resolve '%s' as a valid ref."<pos:position pos:line="29" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="74">split<pos:position pos:line="29" pos:column="79"/></name><index pos:line="29" pos:column="79">[<expr><literal type="number" pos:line="29" pos:column="80">0<pos:position pos:line="29" pos:column="81"/></literal></expr>]<pos:position pos:line="29" pos:column="82"/></index></name><operator pos:line="29" pos:column="82">-&gt;<pos:position pos:line="29" pos:column="87"/></operator><name pos:line="29" pos:column="84">buf<pos:position pos:line="29" pos:column="87"/></name></expr></argument>)<pos:position pos:line="29" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="89"/></expr_stmt></block></then></if>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><call><name pos:line="30" pos:column="21">get_sha1<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name><name pos:line="30" pos:column="30">split<pos:position pos:line="30" pos:column="35"/></name><index pos:line="30" pos:column="35">[<expr><literal type="number" pos:line="30" pos:column="36">1<pos:position pos:line="30" pos:column="37"/></literal></expr>]<pos:position pos:line="30" pos:column="38"/></index></name><operator pos:line="30" pos:column="38">-&gt;<pos:position pos:line="30" pos:column="43"/></operator><name pos:line="30" pos:column="40">buf<pos:position pos:line="30" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="45">to_obj<pos:position pos:line="30" pos:column="51"/></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">die<pos:position pos:line="31" pos:column="28"/></name><argument_list pos:line="31" pos:column="28">(<argument><expr><call><name pos:line="31" pos:column="29">_<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><literal type="string" pos:line="31" pos:column="31">"Failed to resolve '%s' as a valid ref."<pos:position pos:line="31" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="74">split<pos:position pos:line="31" pos:column="79"/></name><index pos:line="31" pos:column="79">[<expr><literal type="number" pos:line="31" pos:column="80">1<pos:position pos:line="31" pos:column="81"/></literal></expr>]<pos:position pos:line="31" pos:column="82"/></index></name><operator pos:line="31" pos:column="82">-&gt;<pos:position pos:line="31" pos:column="87"/></operator><name pos:line="31" pos:column="84">buf<pos:position pos:line="31" pos:column="87"/></name></expr></argument>)<pos:position pos:line="31" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="89"/></expr_stmt></block></then></if>

		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">rewrite_cmd<pos:position pos:line="33" pos:column="32"/></name></expr>)<pos:position pos:line="33" pos:column="33"/></condition><then pos:line="33" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="25">err<pos:position pos:line="34" pos:column="28"/></name> <operator pos:line="34" pos:column="29">=<pos:position pos:line="34" pos:column="30"/></operator> <call><name pos:line="34" pos:column="31">copy_note_for_rewrite<pos:position pos:line="34" pos:column="52"/></name><argument_list pos:line="34" pos:column="52">(<argument><expr><name pos:line="34" pos:column="53">c<pos:position pos:line="34" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="56">from_obj<pos:position pos:line="34" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="66">to_obj<pos:position pos:line="34" pos:column="72"/></name></expr></argument>)<pos:position pos:line="34" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="74"/></expr_stmt></block></then>
		<else pos:line="35" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="25">err<pos:position pos:line="36" pos:column="28"/></name> <operator pos:line="36" pos:column="29">=<pos:position pos:line="36" pos:column="30"/></operator> <call><name pos:line="36" pos:column="31">copy_note<pos:position pos:line="36" pos:column="40"/></name><argument_list pos:line="36" pos:column="40">(<argument><expr><name pos:line="36" pos:column="41">t<pos:position pos:line="36" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="44">from_obj<pos:position pos:line="36" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="54">to_obj<pos:position pos:line="36" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="62">force<pos:position pos:line="36" pos:column="67"/></name></expr></argument>,
					<argument><expr><name pos:line="37" pos:column="41">combine_notes_overwrite<pos:position pos:line="37" pos:column="64"/></name></expr></argument>)<pos:position pos:line="37" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="66"/></expr_stmt></block></else></if>

		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">err<pos:position pos:line="39" pos:column="24"/></name></expr>)<pos:position pos:line="39" pos:column="25"/></condition><then pos:line="39" pos:column="25"> <block pos:line="39" pos:column="26">{
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">error<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><call><name pos:line="40" pos:column="31">_<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><literal type="string" pos:line="40" pos:column="33">"Failed to copy notes from '%s' to '%s'"<pos:position pos:line="40" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="74"/></argument_list></call></expr></argument>,
			      <argument><expr><name><name pos:line="41" pos:column="31">split<pos:position pos:line="41" pos:column="36"/></name><index pos:line="41" pos:column="36">[<expr><literal type="number" pos:line="41" pos:column="37">0<pos:position pos:line="41" pos:column="38"/></literal></expr>]<pos:position pos:line="41" pos:column="39"/></index></name><operator pos:line="41" pos:column="39">-&gt;<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="41">buf<pos:position pos:line="41" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="46">split<pos:position pos:line="41" pos:column="51"/></name><index pos:line="41" pos:column="51">[<expr><literal type="number" pos:line="41" pos:column="52">1<pos:position pos:line="41" pos:column="53"/></literal></expr>]<pos:position pos:line="41" pos:column="54"/></index></name><operator pos:line="41" pos:column="54">-&gt;<pos:position pos:line="41" pos:column="59"/></operator><name pos:line="41" pos:column="56">buf<pos:position pos:line="41" pos:column="59"/></name></expr></argument>)<pos:position pos:line="41" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><name pos:line="42" pos:column="25">ret<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">=<pos:position pos:line="42" pos:column="30"/></operator> <literal type="number" pos:line="42" pos:column="31">1<pos:position pos:line="42" pos:column="32"/></literal></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="45" pos:column="17">strbuf_list_free<pos:position pos:line="45" pos:column="33"/></name><argument_list pos:line="45" pos:column="33">(<argument><expr><name pos:line="45" pos:column="34">split<pos:position pos:line="45" pos:column="39"/></name></expr></argument>)<pos:position pos:line="45" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></while>

	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><operator pos:line="48" pos:column="13">!<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="14">rewrite_cmd<pos:position pos:line="48" pos:column="25"/></name></expr>)<pos:position pos:line="48" pos:column="26"/></condition><then pos:line="48" pos:column="26"> <block pos:line="48" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">commit_notes<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">t<pos:position pos:line="49" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="33">msg<pos:position pos:line="49" pos:column="36"/></name></expr></argument>)<pos:position pos:line="49" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">free_notes<pos:position pos:line="50" pos:column="27"/></name><argument_list pos:line="50" pos:column="27">(<argument><expr><name pos:line="50" pos:column="28">t<pos:position pos:line="50" pos:column="29"/></name></expr></argument>)<pos:position pos:line="50" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="51" pos:column="10"/></block></then> <else pos:line="51" pos:column="11">else <block pos:line="51" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">finish_copy_notes_for_rewrite<pos:position pos:line="52" pos:column="46"/></name><argument_list pos:line="52" pos:column="46">(<argument><expr><name pos:line="52" pos:column="47">c<pos:position pos:line="52" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="50">msg<pos:position pos:line="52" pos:column="53"/></name></expr></argument>)<pos:position pos:line="52" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="55"/></expr_stmt>
	}<pos:position pos:line="53" pos:column="10"/></block></else></if>
	<return pos:line="54" pos:column="9">return <expr><name pos:line="54" pos:column="16">ret<pos:position pos:line="54" pos:column="19"/></name></expr>;<pos:position pos:line="54" pos:column="20"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
