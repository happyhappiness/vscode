<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4734_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">note_tree_insert<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">notes_tree<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">t<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">int_node<pos:position pos:line="1" pos:column="66"/></name></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">tree<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">unsigned<pos:position pos:line="2" pos:column="25"/></name> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">n<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="34">struct<pos:position pos:line="2" pos:column="40"/></name> <name pos:line="2" pos:column="41">leaf_node<pos:position pos:line="2" pos:column="50"/></name></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">entry<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">unsigned<pos:position pos:line="2" pos:column="67"/></name> <name pos:line="2" pos:column="68">char<pos:position pos:line="2" pos:column="72"/></name></type> <name pos:line="2" pos:column="73">type<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="3" pos:column="17">combine_notes_fn<pos:position pos:line="3" pos:column="33"/></name></type> <name pos:line="3" pos:column="34">combine_notes<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="48"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">int_node<pos:position pos:line="5" pos:column="24"/></name></name> <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="26">new_node<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">leaf_node<pos:position pos:line="6" pos:column="25"/></name></name> <modifier pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></modifier></type><name pos:line="6" pos:column="27">l<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">void<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier><modifier pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></modifier></type><name pos:line="7" pos:column="16">p<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><call><name pos:line="7" pos:column="20">note_tree_search<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">(<argument><expr><name pos:line="7" pos:column="37">t<pos:position pos:line="7" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="40">&amp;<pos:position pos:line="7" pos:column="45"/></operator><name pos:line="7" pos:column="41">tree<pos:position pos:line="7" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="47">&amp;<pos:position pos:line="7" pos:column="52"/></operator><name pos:line="7" pos:column="48">n<pos:position pos:line="7" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="51">entry<pos:position pos:line="7" pos:column="56"/></name><operator pos:line="7" pos:column="56">-&gt;<pos:position pos:line="7" pos:column="61"/></operator><name pos:line="7" pos:column="58">key_oid<pos:position pos:line="7" pos:column="65"/></name><operator pos:line="7" pos:column="65">.<pos:position pos:line="7" pos:column="66"/></operator><name pos:line="7" pos:column="66">hash<pos:position pos:line="7" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="72"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">ret<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><call><name pos:line="10" pos:column="16">GET_PTR_TYPE<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">entry<pos:position pos:line="10" pos:column="34"/></name></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call> <operator pos:line="10" pos:column="36">==<pos:position pos:line="10" pos:column="38"/></operator> <literal type="number" pos:line="10" pos:column="39">0<pos:position pos:line="10" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt> <comment type="block" pos:line="10" pos:column="43">/* no type bits set */</comment>
	<expr_stmt><expr><name pos:line="11" pos:column="9">l<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <operator pos:line="11" pos:column="13">(<pos:position pos:line="11" pos:column="14"/></operator>struct <name pos:line="11" pos:column="21">leaf_node<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">*<pos:position pos:line="11" pos:column="32"/></operator><operator pos:line="11" pos:column="32">)<pos:position pos:line="11" pos:column="33"/></operator> <call><name pos:line="11" pos:column="34">CLR_PTR_TYPE<pos:position pos:line="11" pos:column="46"/></name><argument_list pos:line="11" pos:column="46">(<argument><expr><operator pos:line="11" pos:column="47">*<pos:position pos:line="11" pos:column="48"/></operator><name pos:line="11" pos:column="48">p<pos:position pos:line="11" pos:column="49"/></name></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt>
	<switch pos:line="12" pos:column="9">switch <condition pos:line="12" pos:column="16">(<expr><call><name pos:line="12" pos:column="17">GET_PTR_TYPE<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><operator pos:line="12" pos:column="30">*<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">p<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="34"/></condition> <block pos:line="12" pos:column="35">{
	<case pos:line="13" pos:column="9">case <expr><name pos:line="13" pos:column="14">PTR_TYPE_NULL<pos:position pos:line="13" pos:column="27"/></name></expr>:<pos:position pos:line="13" pos:column="28"/></case>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">assert<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><operator pos:line="14" pos:column="24">!<pos:position pos:line="14" pos:column="25"/></operator><operator pos:line="14" pos:column="25">*<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="26">p<pos:position pos:line="14" pos:column="27"/></name></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">is_null_oid<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><operator pos:line="15" pos:column="33">&amp;<pos:position pos:line="15" pos:column="38"/></operator><name><name pos:line="15" pos:column="34">entry<pos:position pos:line="15" pos:column="39"/></name><operator pos:line="15" pos:column="39">-&gt;<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="41">val_oid<pos:position pos:line="15" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="50"/></condition><then pos:line="15" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">free<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">entry<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt></block></then>
		<else pos:line="17" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="25">*<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">p<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <call><name pos:line="18" pos:column="30">SET_PTR_TYPE<pos:position pos:line="18" pos:column="42"/></name><argument_list pos:line="18" pos:column="42">(<argument><expr><name pos:line="18" pos:column="43">entry<pos:position pos:line="18" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="50">type<pos:position pos:line="18" pos:column="54"/></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt></block></else></if>
		<return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return>
	<case pos:line="20" pos:column="9">case <expr><name pos:line="20" pos:column="14">PTR_TYPE_NOTE<pos:position pos:line="20" pos:column="27"/></name></expr>:<pos:position pos:line="20" pos:column="28"/></case>
		<switch pos:line="21" pos:column="17">switch <condition pos:line="21" pos:column="24">(<expr><name pos:line="21" pos:column="25">type<pos:position pos:line="21" pos:column="29"/></name></expr>)<pos:position pos:line="21" pos:column="30"/></condition> <block pos:line="21" pos:column="31">{
		<case pos:line="22" pos:column="17">case <expr><name pos:line="22" pos:column="22">PTR_TYPE_NOTE<pos:position pos:line="22" pos:column="35"/></name></expr>:<pos:position pos:line="22" pos:column="36"/></case>
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><operator pos:line="23" pos:column="29">!<pos:position pos:line="23" pos:column="30"/></operator><call><name pos:line="23" pos:column="30">oidcmp<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><operator pos:line="23" pos:column="37">&amp;<pos:position pos:line="23" pos:column="42"/></operator><name><name pos:line="23" pos:column="38">l<pos:position pos:line="23" pos:column="39"/></name><operator pos:line="23" pos:column="39">-&gt;<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="41">key_oid<pos:position pos:line="23" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="50">&amp;<pos:position pos:line="23" pos:column="55"/></operator><name><name pos:line="23" pos:column="51">entry<pos:position pos:line="23" pos:column="56"/></name><operator pos:line="23" pos:column="56">-&gt;<pos:position pos:line="23" pos:column="61"/></operator><name pos:line="23" pos:column="58">key_oid<pos:position pos:line="23" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="67"/></condition><then pos:line="23" pos:column="67"> <block pos:line="23" pos:column="68">{
				<comment type="block" pos:line="24" pos:column="33">/* skip concatenation if l == entry */</comment>
				<if pos:line="25" pos:column="33">if <condition pos:line="25" pos:column="36">(<expr><operator pos:line="25" pos:column="37">!<pos:position pos:line="25" pos:column="38"/></operator><call><name pos:line="25" pos:column="38">oidcmp<pos:position pos:line="25" pos:column="44"/></name><argument_list pos:line="25" pos:column="44">(<argument><expr><operator pos:line="25" pos:column="45">&amp;<pos:position pos:line="25" pos:column="50"/></operator><name><name pos:line="25" pos:column="46">l<pos:position pos:line="25" pos:column="47"/></name><operator pos:line="25" pos:column="47">-&gt;<pos:position pos:line="25" pos:column="52"/></operator><name pos:line="25" pos:column="49">val_oid<pos:position pos:line="25" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="58">&amp;<pos:position pos:line="25" pos:column="63"/></operator><name><name pos:line="25" pos:column="59">entry<pos:position pos:line="25" pos:column="64"/></name><operator pos:line="25" pos:column="64">-&gt;<pos:position pos:line="25" pos:column="69"/></operator><name pos:line="25" pos:column="66">val_oid<pos:position pos:line="25" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="75"/></condition><then pos:line="25" pos:column="75">
					<block type="pseudo"><return pos:line="26" pos:column="41">return <expr><literal type="number" pos:line="26" pos:column="48">0<pos:position pos:line="26" pos:column="49"/></literal></expr>;<pos:position pos:line="26" pos:column="50"/></return></block></then></if>

				<expr_stmt><expr><name pos:line="28" pos:column="33">ret<pos:position pos:line="28" pos:column="36"/></name> <operator pos:line="28" pos:column="37">=<pos:position pos:line="28" pos:column="38"/></operator> <call><name pos:line="28" pos:column="39">combine_notes<pos:position pos:line="28" pos:column="52"/></name><argument_list pos:line="28" pos:column="52">(<argument><expr><name><name pos:line="28" pos:column="53">l<pos:position pos:line="28" pos:column="54"/></name><operator pos:line="28" pos:column="54">-&gt;<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="56">val_oid<pos:position pos:line="28" pos:column="63"/></name><operator pos:line="28" pos:column="63">.<pos:position pos:line="28" pos:column="64"/></operator><name pos:line="28" pos:column="64">hash<pos:position pos:line="28" pos:column="68"/></name></name></expr></argument>,
						    <argument><expr><name><name pos:line="29" pos:column="53">entry<pos:position pos:line="29" pos:column="58"/></name><operator pos:line="29" pos:column="58">-&gt;<pos:position pos:line="29" pos:column="63"/></operator><name pos:line="29" pos:column="60">val_oid<pos:position pos:line="29" pos:column="67"/></name><operator pos:line="29" pos:column="67">.<pos:position pos:line="29" pos:column="68"/></operator><name pos:line="29" pos:column="68">hash<pos:position pos:line="29" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="74"/></expr_stmt>
				<if pos:line="30" pos:column="33">if <condition pos:line="30" pos:column="36">(<expr><operator pos:line="30" pos:column="37">!<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="38">ret<pos:position pos:line="30" pos:column="41"/></name> <operator pos:line="30" pos:column="42">&amp;&amp;<pos:position pos:line="30" pos:column="52"/></operator> <call><name pos:line="30" pos:column="45">is_null_oid<pos:position pos:line="30" pos:column="56"/></name><argument_list pos:line="30" pos:column="56">(<argument><expr><operator pos:line="30" pos:column="57">&amp;<pos:position pos:line="30" pos:column="62"/></operator><name><name pos:line="30" pos:column="58">l<pos:position pos:line="30" pos:column="59"/></name><operator pos:line="30" pos:column="59">-&gt;<pos:position pos:line="30" pos:column="64"/></operator><name pos:line="30" pos:column="61">val_oid<pos:position pos:line="30" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="70"/></condition><then pos:line="30" pos:column="70">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="41">note_tree_remove<pos:position pos:line="31" pos:column="57"/></name><argument_list pos:line="31" pos:column="57">(<argument><expr><name pos:line="31" pos:column="58">t<pos:position pos:line="31" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="61">tree<pos:position pos:line="31" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="67">n<pos:position pos:line="31" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="70">entry<pos:position pos:line="31" pos:column="75"/></name></expr></argument>)<pos:position pos:line="31" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="77"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="32" pos:column="33">free<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">(<argument><expr><name pos:line="32" pos:column="38">entry<pos:position pos:line="32" pos:column="43"/></name></expr></argument>)<pos:position pos:line="32" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="45"/></expr_stmt>
				<return pos:line="33" pos:column="33">return <expr><name pos:line="33" pos:column="40">ret<pos:position pos:line="33" pos:column="43"/></name></expr>;<pos:position pos:line="33" pos:column="44"/></return>
			}<pos:position pos:line="34" pos:column="26"/></block></then></if>
			<break pos:line="35" pos:column="25">break;<pos:position pos:line="35" pos:column="31"/></break>
		<case pos:line="36" pos:column="17">case <expr><name pos:line="36" pos:column="22">PTR_TYPE_SUBTREE<pos:position pos:line="36" pos:column="38"/></name></expr>:<pos:position pos:line="36" pos:column="39"/></case>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><operator pos:line="37" pos:column="29">!<pos:position pos:line="37" pos:column="30"/></operator><call><name pos:line="37" pos:column="30">SUBTREE_SHA1_PREFIXCMP<pos:position pos:line="37" pos:column="52"/></name><argument_list pos:line="37" pos:column="52">(<argument><expr><name><name pos:line="37" pos:column="53">l<pos:position pos:line="37" pos:column="54"/></name><operator pos:line="37" pos:column="54">-&gt;<pos:position pos:line="37" pos:column="59"/></operator><name pos:line="37" pos:column="56">key_oid<pos:position pos:line="37" pos:column="63"/></name><operator pos:line="37" pos:column="63">.<pos:position pos:line="37" pos:column="64"/></operator><name pos:line="37" pos:column="64">hash<pos:position pos:line="37" pos:column="68"/></name></name></expr></argument>,
						    <argument><expr><name><name pos:line="38" pos:column="53">entry<pos:position pos:line="38" pos:column="58"/></name><operator pos:line="38" pos:column="58">-&gt;<pos:position pos:line="38" pos:column="63"/></operator><name pos:line="38" pos:column="60">key_oid<pos:position pos:line="38" pos:column="67"/></name><operator pos:line="38" pos:column="67">.<pos:position pos:line="38" pos:column="68"/></operator><name pos:line="38" pos:column="68">hash<pos:position pos:line="38" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="74"/></condition><then pos:line="38" pos:column="74"> <block pos:line="38" pos:column="75">{
				<comment type="block" pos:line="39" pos:column="33">/* unpack 'entry' */</comment>
				<expr_stmt><expr><call><name pos:line="40" pos:column="33">load_subtree<pos:position pos:line="40" pos:column="45"/></name><argument_list pos:line="40" pos:column="45">(<argument><expr><name pos:line="40" pos:column="46">t<pos:position pos:line="40" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="49">entry<pos:position pos:line="40" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="56">tree<pos:position pos:line="40" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="62">n<pos:position pos:line="40" pos:column="63"/></name></expr></argument>)<pos:position pos:line="40" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="41" pos:column="33">free<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">(<argument><expr><name pos:line="41" pos:column="38">entry<pos:position pos:line="41" pos:column="43"/></name></expr></argument>)<pos:position pos:line="41" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
				<return pos:line="42" pos:column="33">return <expr><literal type="number" pos:line="42" pos:column="40">0<pos:position pos:line="42" pos:column="41"/></literal></expr>;<pos:position pos:line="42" pos:column="42"/></return>
			}<pos:position pos:line="43" pos:column="26"/></block></then></if>
			<break pos:line="44" pos:column="25">break;<pos:position pos:line="44" pos:column="31"/></break>
		}<pos:position pos:line="45" pos:column="18"/></block></switch>
		<break pos:line="46" pos:column="17">break;<pos:position pos:line="46" pos:column="23"/></break>
	<case pos:line="47" pos:column="9">case <expr><name pos:line="47" pos:column="14">PTR_TYPE_SUBTREE<pos:position pos:line="47" pos:column="30"/></name></expr>:<pos:position pos:line="47" pos:column="31"/></case>
		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><operator pos:line="48" pos:column="21">!<pos:position pos:line="48" pos:column="22"/></operator><call><name pos:line="48" pos:column="22">SUBTREE_SHA1_PREFIXCMP<pos:position pos:line="48" pos:column="44"/></name><argument_list pos:line="48" pos:column="44">(<argument><expr><name><name pos:line="48" pos:column="45">entry<pos:position pos:line="48" pos:column="50"/></name><operator pos:line="48" pos:column="50">-&gt;<pos:position pos:line="48" pos:column="55"/></operator><name pos:line="48" pos:column="52">key_oid<pos:position pos:line="48" pos:column="59"/></name><operator pos:line="48" pos:column="59">.<pos:position pos:line="48" pos:column="60"/></operator><name pos:line="48" pos:column="60">hash<pos:position pos:line="48" pos:column="64"/></name></name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="66">l<pos:position pos:line="48" pos:column="67"/></name><operator pos:line="48" pos:column="67">-&gt;<pos:position pos:line="48" pos:column="72"/></operator><name pos:line="48" pos:column="69">key_oid<pos:position pos:line="48" pos:column="76"/></name><operator pos:line="48" pos:column="76">.<pos:position pos:line="48" pos:column="77"/></operator><name pos:line="48" pos:column="77">hash<pos:position pos:line="48" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="83"/></condition><then pos:line="48" pos:column="83"> <block pos:line="48" pos:column="84">{
			<comment type="block" pos:line="49" pos:column="25">/* unpack 'l' and restart insert */</comment>
			<expr_stmt><expr><operator pos:line="50" pos:column="25">*<pos:position pos:line="50" pos:column="26"/></operator><name pos:line="50" pos:column="26">p<pos:position pos:line="50" pos:column="27"/></name> <operator pos:line="50" pos:column="28">=<pos:position pos:line="50" pos:column="29"/></operator> <name pos:line="50" pos:column="30">NULL<pos:position pos:line="50" pos:column="34"/></name></expr>;<pos:position pos:line="50" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">load_subtree<pos:position pos:line="51" pos:column="37"/></name><argument_list pos:line="51" pos:column="37">(<argument><expr><name pos:line="51" pos:column="38">t<pos:position pos:line="51" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="41">l<pos:position pos:line="51" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="44">tree<pos:position pos:line="51" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="50">n<pos:position pos:line="51" pos:column="51"/></name></expr></argument>)<pos:position pos:line="51" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="53"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="52" pos:column="25">free<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><name pos:line="52" pos:column="30">l<pos:position pos:line="52" pos:column="31"/></name></expr></argument>)<pos:position pos:line="52" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="33"/></expr_stmt>
			<return pos:line="53" pos:column="25">return <expr><call><name pos:line="53" pos:column="32">note_tree_insert<pos:position pos:line="53" pos:column="48"/></name><argument_list pos:line="53" pos:column="48">(<argument><expr><name pos:line="53" pos:column="49">t<pos:position pos:line="53" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="52">tree<pos:position pos:line="53" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="58">n<pos:position pos:line="53" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="61">entry<pos:position pos:line="53" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="68">type<pos:position pos:line="53" pos:column="72"/></name></expr></argument>,
						<argument><expr><name pos:line="54" pos:column="49">combine_notes<pos:position pos:line="54" pos:column="62"/></name></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="64"/></return>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>
		<break pos:line="56" pos:column="17">break;<pos:position pos:line="56" pos:column="23"/></break>
	}<pos:position pos:line="57" pos:column="10"/></block></switch>

	<comment type="block" pos:line="59" pos:column="9">/* non-matching leaf_node */</comment>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">assert<pos:position pos:line="60" pos:column="15"/></name><argument_list pos:line="60" pos:column="15">(<argument><expr><call><name pos:line="60" pos:column="16">GET_PTR_TYPE<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">(<argument><expr><operator pos:line="60" pos:column="29">*<pos:position pos:line="60" pos:column="30"/></operator><name pos:line="60" pos:column="30">p<pos:position pos:line="60" pos:column="31"/></name></expr></argument>)<pos:position pos:line="60" pos:column="32"/></argument_list></call> <operator pos:line="60" pos:column="33">==<pos:position pos:line="60" pos:column="35"/></operator> <name pos:line="60" pos:column="36">PTR_TYPE_NOTE<pos:position pos:line="60" pos:column="49"/></name> <operator pos:line="60" pos:column="50">||<pos:position pos:line="60" pos:column="52"/></operator>
	       <call><name pos:line="61" pos:column="16">GET_PTR_TYPE<pos:position pos:line="61" pos:column="28"/></name><argument_list pos:line="61" pos:column="28">(<argument><expr><operator pos:line="61" pos:column="29">*<pos:position pos:line="61" pos:column="30"/></operator><name pos:line="61" pos:column="30">p<pos:position pos:line="61" pos:column="31"/></name></expr></argument>)<pos:position pos:line="61" pos:column="32"/></argument_list></call> <operator pos:line="61" pos:column="33">==<pos:position pos:line="61" pos:column="35"/></operator> <name pos:line="61" pos:column="36">PTR_TYPE_SUBTREE<pos:position pos:line="61" pos:column="52"/></name></expr></argument>)<pos:position pos:line="61" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="54"/></expr_stmt>
	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><call><name pos:line="62" pos:column="13">is_null_oid<pos:position pos:line="62" pos:column="24"/></name><argument_list pos:line="62" pos:column="24">(<argument><expr><operator pos:line="62" pos:column="25">&amp;<pos:position pos:line="62" pos:column="30"/></operator><name><name pos:line="62" pos:column="26">entry<pos:position pos:line="62" pos:column="31"/></name><operator pos:line="62" pos:column="31">-&gt;<pos:position pos:line="62" pos:column="36"/></operator><name pos:line="62" pos:column="33">val_oid<pos:position pos:line="62" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="42"/></condition><then pos:line="62" pos:column="42"> <block pos:line="62" pos:column="43">{ <comment type="block" pos:line="62" pos:column="45">/* skip insertion of empty note */</comment>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">free<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><name pos:line="63" pos:column="22">entry<pos:position pos:line="63" pos:column="27"/></name></expr></argument>)<pos:position pos:line="63" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="29"/></expr_stmt>
		<return pos:line="64" pos:column="17">return <expr><literal type="number" pos:line="64" pos:column="24">0<pos:position pos:line="64" pos:column="25"/></literal></expr>;<pos:position pos:line="64" pos:column="26"/></return>
	}<pos:position pos:line="65" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="66" pos:column="9">new_node<pos:position pos:line="66" pos:column="17"/></name> <operator pos:line="66" pos:column="18">=<pos:position pos:line="66" pos:column="19"/></operator> <operator pos:line="66" pos:column="20">(<pos:position pos:line="66" pos:column="21"/></operator>struct <name pos:line="66" pos:column="28">int_node<pos:position pos:line="66" pos:column="36"/></name> <operator pos:line="66" pos:column="37">*<pos:position pos:line="66" pos:column="38"/></operator><operator pos:line="66" pos:column="38">)<pos:position pos:line="66" pos:column="39"/></operator> <call><name pos:line="66" pos:column="40">xcalloc<pos:position pos:line="66" pos:column="47"/></name><argument_list pos:line="66" pos:column="47">(<argument><expr><literal type="number" pos:line="66" pos:column="48">1<pos:position pos:line="66" pos:column="49"/></literal></expr></argument>, <argument><expr><sizeof pos:line="66" pos:column="51">sizeof<argument_list pos:line="66" pos:column="57">(<argument><expr pos:line="66" pos:column="58">struct <name pos:line="66" pos:column="65">int_node<pos:position pos:line="66" pos:column="73"/></name></expr></argument>)<pos:position pos:line="66" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="66" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="76"/></expr_stmt>
	<expr_stmt><expr><name pos:line="67" pos:column="9">ret<pos:position pos:line="67" pos:column="12"/></name> <operator pos:line="67" pos:column="13">=<pos:position pos:line="67" pos:column="14"/></operator> <call><name pos:line="67" pos:column="15">note_tree_insert<pos:position pos:line="67" pos:column="31"/></name><argument_list pos:line="67" pos:column="31">(<argument><expr><name pos:line="67" pos:column="32">t<pos:position pos:line="67" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="35">new_node<pos:position pos:line="67" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="45">n<pos:position pos:line="67" pos:column="46"/></name> <operator pos:line="67" pos:column="47">+<pos:position pos:line="67" pos:column="48"/></operator> <literal type="number" pos:line="67" pos:column="49">1<pos:position pos:line="67" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="52">l<pos:position pos:line="67" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="67" pos:column="55">GET_PTR_TYPE<pos:position pos:line="67" pos:column="67"/></name><argument_list pos:line="67" pos:column="67">(<argument><expr><operator pos:line="67" pos:column="68">*<pos:position pos:line="67" pos:column="69"/></operator><name pos:line="67" pos:column="69">p<pos:position pos:line="67" pos:column="70"/></name></expr></argument>)<pos:position pos:line="67" pos:column="71"/></argument_list></call></expr></argument>,
			       <argument><expr><name pos:line="68" pos:column="32">combine_notes<pos:position pos:line="68" pos:column="45"/></name></expr></argument>)<pos:position pos:line="68" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="47"/></expr_stmt>
	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">ret<pos:position pos:line="69" pos:column="16"/></name></expr>)<pos:position pos:line="69" pos:column="17"/></condition><then pos:line="69" pos:column="17">
		<block type="pseudo"><return pos:line="70" pos:column="17">return <expr><name pos:line="70" pos:column="24">ret<pos:position pos:line="70" pos:column="27"/></name></expr>;<pos:position pos:line="70" pos:column="28"/></return></block></then></if>
	<expr_stmt><expr><operator pos:line="71" pos:column="9">*<pos:position pos:line="71" pos:column="10"/></operator><name pos:line="71" pos:column="10">p<pos:position pos:line="71" pos:column="11"/></name> <operator pos:line="71" pos:column="12">=<pos:position pos:line="71" pos:column="13"/></operator> <call><name pos:line="71" pos:column="14">SET_PTR_TYPE<pos:position pos:line="71" pos:column="26"/></name><argument_list pos:line="71" pos:column="26">(<argument><expr><name pos:line="71" pos:column="27">new_node<pos:position pos:line="71" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="37">PTR_TYPE_INTERNAL<pos:position pos:line="71" pos:column="54"/></name></expr></argument>)<pos:position pos:line="71" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="56"/></expr_stmt>
	<return pos:line="72" pos:column="9">return <expr><call><name pos:line="72" pos:column="16">note_tree_insert<pos:position pos:line="72" pos:column="32"/></name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">t<pos:position pos:line="72" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="36">new_node<pos:position pos:line="72" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="46">n<pos:position pos:line="72" pos:column="47"/></name> <operator pos:line="72" pos:column="48">+<pos:position pos:line="72" pos:column="49"/></operator> <literal type="number" pos:line="72" pos:column="50">1<pos:position pos:line="72" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="53">entry<pos:position pos:line="72" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="60">type<pos:position pos:line="72" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="66">combine_notes<pos:position pos:line="72" pos:column="79"/></name></expr></argument>)<pos:position pos:line="72" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="81"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
