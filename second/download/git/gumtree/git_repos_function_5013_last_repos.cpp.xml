<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5013_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">rebase_type<pos:position pos:line="1" pos:column="24"/></name></name></type> <name pos:line="1" pos:column="25">config_get_rebase<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name pos:line="1" pos:column="43">void<pos:position pos:line="1" pos:column="47"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">branch<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">curr_branch<pos:position pos:line="3" pos:column="35"/></name> <init pos:line="3" pos:column="36">= <expr><call><name pos:line="3" pos:column="38">branch_get<pos:position pos:line="3" pos:column="48"/></name><argument_list pos:line="3" pos:column="48">(<argument><expr><literal type="string" pos:line="3" pos:column="49">"HEAD"<pos:position pos:line="3" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">value<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">curr_branch<pos:position pos:line="6" pos:column="24"/></name></expr>)<pos:position pos:line="6" pos:column="25"/></condition><then pos:line="6" pos:column="25"> <block pos:line="6" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">char<pos:position pos:line="7" pos:column="21"/></name> <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier></type><name pos:line="7" pos:column="23">key<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><call><name pos:line="7" pos:column="29">xstrfmt<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">(<argument><expr><literal type="string" pos:line="7" pos:column="37">"branch.%s.rebase"<pos:position pos:line="7" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="57">curr_branch<pos:position pos:line="7" pos:column="68"/></name><operator pos:line="7" pos:column="68">-&gt;<pos:position pos:line="7" pos:column="73"/></operator><name pos:line="7" pos:column="70">name<pos:position pos:line="7" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="76"/></decl_stmt>

		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">!<pos:position pos:line="9" pos:column="22"/></operator><call><name pos:line="9" pos:column="22">git_config_get_value<pos:position pos:line="9" pos:column="42"/></name><argument_list pos:line="9" pos:column="42">(<argument><expr><name pos:line="9" pos:column="43">key<pos:position pos:line="9" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="48">&amp;<pos:position pos:line="9" pos:column="53"/></operator><name pos:line="9" pos:column="49">value<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="56"/></condition><then pos:line="9" pos:column="56"> <block pos:line="9" pos:column="57">{
			<decl_stmt><decl><type><name><name pos:line="10" pos:column="25">enum<pos:position pos:line="10" pos:column="29"/></name> <name pos:line="10" pos:column="30">rebase_type<pos:position pos:line="10" pos:column="41"/></name></name></type> <name pos:line="10" pos:column="42">ret<pos:position pos:line="10" pos:column="45"/></name> <init pos:line="10" pos:column="46">= <expr><call><name pos:line="10" pos:column="48">parse_config_rebase<pos:position pos:line="10" pos:column="67"/></name><argument_list pos:line="10" pos:column="67">(<argument><expr><name pos:line="10" pos:column="68">key<pos:position pos:line="10" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="73">value<pos:position pos:line="10" pos:column="78"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="80">1<pos:position pos:line="10" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="83"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">free<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">key<pos:position pos:line="11" pos:column="33"/></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>
			<return pos:line="12" pos:column="25">return <expr><name pos:line="12" pos:column="32">ret<pos:position pos:line="12" pos:column="35"/></name></expr>;<pos:position pos:line="12" pos:column="36"/></return>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="15" pos:column="17">free<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">key<pos:position pos:line="15" pos:column="25"/></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><call><name pos:line="18" pos:column="14">git_config_get_value<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><literal type="string" pos:line="18" pos:column="35">"pull.rebase"<pos:position pos:line="18" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="50">&amp;<pos:position pos:line="18" pos:column="55"/></operator><name pos:line="18" pos:column="51">value<pos:position pos:line="18" pos:column="56"/></name></expr></argument>)<pos:position pos:line="18" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="58"/></condition><then pos:line="18" pos:column="58">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><call><name pos:line="19" pos:column="24">parse_config_rebase<pos:position pos:line="19" pos:column="43"/></name><argument_list pos:line="19" pos:column="43">(<argument><expr><literal type="string" pos:line="19" pos:column="44">"pull.rebase"<pos:position pos:line="19" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="59">value<pos:position pos:line="19" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="66">1<pos:position pos:line="19" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="69"/></return></block></then></if>

	<return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">REBASE_FALSE<pos:position pos:line="21" pos:column="28"/></name></expr>;<pos:position pos:line="21" pos:column="29"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
