<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_824.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">run_git_commit<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">defmsg<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="47">struct<pos:position pos:line="1" pos:column="53"/></name> <name pos:line="1" pos:column="54">replay_opts<pos:position pos:line="1" pos:column="65"/></name></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">opts<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="2" pos:column="27">int<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">allow_empty<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">int<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">edit<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">int<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">amend<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>,
			  <parameter><decl><type><name pos:line="3" pos:column="27">int<pos:position pos:line="3" pos:column="30"/></name></type> <name pos:line="3" pos:column="31">cleanup_commit_message<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="54"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">child_process<pos:position pos:line="5" pos:column="29"/></name></name></type> <name pos:line="5" pos:column="30">cmd<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><name pos:line="5" pos:column="36">CHILD_PROCESS_INIT<pos:position pos:line="5" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="55"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">value<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="8" pos:column="9">cmd<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">.<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">git_cmd<pos:position pos:line="8" pos:column="20"/></name></name> <operator pos:line="8" pos:column="21">=<pos:position pos:line="8" pos:column="22"/></operator> <literal type="number" pos:line="8" pos:column="23">1<pos:position pos:line="8" pos:column="24"/></literal></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">is_rebase_i<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">opts<pos:position pos:line="10" pos:column="29"/></name></expr></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31"> <block pos:line="10" pos:column="32">{
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">edit<pos:position pos:line="11" pos:column="26"/></name></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27"> <block pos:line="11" pos:column="28">{
			<expr_stmt><expr><name><name pos:line="12" pos:column="25">cmd<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">.<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="29">stdout_to_stderr<pos:position pos:line="12" pos:column="45"/></name></name> <operator pos:line="12" pos:column="46">=<pos:position pos:line="12" pos:column="47"/></operator> <literal type="number" pos:line="12" pos:column="48">1<pos:position pos:line="12" pos:column="49"/></literal></expr>;<pos:position pos:line="12" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="13" pos:column="25">cmd<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">.<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="29">err<pos:position pos:line="13" pos:column="32"/></name></name> <operator pos:line="13" pos:column="33">=<pos:position pos:line="13" pos:column="34"/></operator> <operator pos:line="13" pos:column="35">-<pos:position pos:line="13" pos:column="36"/></operator><literal type="number" pos:line="13" pos:column="36">1<pos:position pos:line="13" pos:column="37"/></literal></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="14" pos:column="18"/></block></then></if>

		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">read_env_script<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><operator pos:line="16" pos:column="37">&amp;<pos:position pos:line="16" pos:column="42"/></operator><name><name pos:line="16" pos:column="38">cmd<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">.<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="42">env_array<pos:position pos:line="16" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="53"/></condition><then pos:line="16" pos:column="53"> <block pos:line="16" pos:column="54">{
			<decl_stmt><decl><type><specifier pos:line="17" pos:column="25">const<pos:position pos:line="17" pos:column="30"/></specifier> <name pos:line="17" pos:column="31">char<pos:position pos:line="17" pos:column="35"/></name> <modifier pos:line="17" pos:column="36">*<pos:position pos:line="17" pos:column="37"/></modifier></type><name pos:line="17" pos:column="37">gpg_opt<pos:position pos:line="17" pos:column="44"/></name> <init pos:line="17" pos:column="45">= <expr><call><name pos:line="17" pos:column="47">gpg_sign_opt_quoted<pos:position pos:line="17" pos:column="66"/></name><argument_list pos:line="17" pos:column="66">(<argument><expr><name pos:line="17" pos:column="67">opts<pos:position pos:line="17" pos:column="71"/></name></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="73"/></decl_stmt>

			<return pos:line="19" pos:column="25">return <expr><call><name pos:line="19" pos:column="32">error<pos:position pos:line="19" pos:column="37"/></name><argument_list pos:line="19" pos:column="37">(<argument><expr><call><name pos:line="19" pos:column="38">_<pos:position pos:line="19" pos:column="39"/></name><argument_list pos:line="19" pos:column="39">(<argument><expr><name pos:line="19" pos:column="40">staged_changes_advice<pos:position pos:line="19" pos:column="61"/></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr></argument>,
				     <argument><expr><name pos:line="20" pos:column="38">gpg_opt<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">gpg_opt<pos:position pos:line="20" pos:column="54"/></name></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="56"/></return>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">argv_array_push<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><operator pos:line="24" pos:column="25">&amp;<pos:position pos:line="24" pos:column="30"/></operator><name><name pos:line="24" pos:column="26">cmd<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">.<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="30">args<pos:position pos:line="24" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="36">"commit"<pos:position pos:line="24" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">argv_array_push<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><operator pos:line="25" pos:column="25">&amp;<pos:position pos:line="25" pos:column="30"/></operator><name><name pos:line="25" pos:column="26">cmd<pos:position pos:line="25" pos:column="29"/></name><operator pos:line="25" pos:column="29">.<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="30">args<pos:position pos:line="25" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="36">"-n"<pos:position pos:line="25" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="42"/></expr_stmt>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">amend<pos:position pos:line="27" pos:column="18"/></name></expr>)<pos:position pos:line="27" pos:column="19"/></condition><then pos:line="27" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="17">argv_array_push<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><operator pos:line="28" pos:column="33">&amp;<pos:position pos:line="28" pos:column="38"/></operator><name><name pos:line="28" pos:column="34">cmd<pos:position pos:line="28" pos:column="37"/></name><operator pos:line="28" pos:column="37">.<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="38">args<pos:position pos:line="28" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="44">"--amend"<pos:position pos:line="28" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="55"/></expr_stmt></block></then></if>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name><name pos:line="29" pos:column="13">opts<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">-&gt;<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="19">gpg_sign<pos:position pos:line="29" pos:column="27"/></name></name></expr>)<pos:position pos:line="29" pos:column="28"/></condition><then pos:line="29" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="17">argv_array_pushf<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><operator pos:line="30" pos:column="34">&amp;<pos:position pos:line="30" pos:column="39"/></operator><name><name pos:line="30" pos:column="35">cmd<pos:position pos:line="30" pos:column="38"/></name><operator pos:line="30" pos:column="38">.<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="39">args<pos:position pos:line="30" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="45">"-S%s"<pos:position pos:line="30" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="53">opts<pos:position pos:line="30" pos:column="57"/></name><operator pos:line="30" pos:column="57">-&gt;<pos:position pos:line="30" pos:column="62"/></operator><name pos:line="30" pos:column="59">gpg_sign<pos:position pos:line="30" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="69"/></expr_stmt></block></then></if>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name><name pos:line="31" pos:column="13">opts<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">-&gt;<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="19">signoff<pos:position pos:line="31" pos:column="26"/></name></name></expr>)<pos:position pos:line="31" pos:column="27"/></condition><then pos:line="31" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="17">argv_array_push<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><operator pos:line="32" pos:column="33">&amp;<pos:position pos:line="32" pos:column="38"/></operator><name><name pos:line="32" pos:column="34">cmd<pos:position pos:line="32" pos:column="37"/></name><operator pos:line="32" pos:column="37">.<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="38">args<pos:position pos:line="32" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="44">"-s"<pos:position pos:line="32" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="50"/></expr_stmt></block></then></if>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">defmsg<pos:position pos:line="33" pos:column="19"/></name></expr>)<pos:position pos:line="33" pos:column="20"/></condition><then pos:line="33" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="17">argv_array_pushl<pos:position pos:line="34" pos:column="33"/></name><argument_list pos:line="34" pos:column="33">(<argument><expr><operator pos:line="34" pos:column="34">&amp;<pos:position pos:line="34" pos:column="39"/></operator><name><name pos:line="34" pos:column="35">cmd<pos:position pos:line="34" pos:column="38"/></name><operator pos:line="34" pos:column="38">.<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="39">args<pos:position pos:line="34" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="45">"-F"<pos:position pos:line="34" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="51">defmsg<pos:position pos:line="34" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="59">NULL<pos:position pos:line="34" pos:column="63"/></name></expr></argument>)<pos:position pos:line="34" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="65"/></expr_stmt></block></then></if>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">cleanup_commit_message<pos:position pos:line="35" pos:column="35"/></name></expr>)<pos:position pos:line="35" pos:column="36"/></condition><then pos:line="35" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="17">argv_array_push<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><operator pos:line="36" pos:column="33">&amp;<pos:position pos:line="36" pos:column="38"/></operator><name><name pos:line="36" pos:column="34">cmd<pos:position pos:line="36" pos:column="37"/></name><operator pos:line="36" pos:column="37">.<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="38">args<pos:position pos:line="36" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="44">"--cleanup=strip"<pos:position pos:line="36" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="63"/></expr_stmt></block></then></if>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">edit<pos:position pos:line="37" pos:column="17"/></name></expr>)<pos:position pos:line="37" pos:column="18"/></condition><then pos:line="37" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="17">argv_array_push<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><operator pos:line="38" pos:column="33">&amp;<pos:position pos:line="38" pos:column="38"/></operator><name><name pos:line="38" pos:column="34">cmd<pos:position pos:line="38" pos:column="37"/></name><operator pos:line="38" pos:column="37">.<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="38">args<pos:position pos:line="38" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="44">"-e"<pos:position pos:line="38" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="50"/></expr_stmt></block></then>
	<elseif pos:line="39" pos:column="9">else <if pos:line="39" pos:column="14">if <condition pos:line="39" pos:column="17">(<expr><operator pos:line="39" pos:column="18">!<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="19">cleanup_commit_message<pos:position pos:line="39" pos:column="41"/></name> <operator pos:line="39" pos:column="42">&amp;&amp;<pos:position pos:line="39" pos:column="52"/></operator>
		 <operator pos:line="40" pos:column="18">!<pos:position pos:line="40" pos:column="19"/></operator><name><name pos:line="40" pos:column="19">opts<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">-&gt;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="25">signoff<pos:position pos:line="40" pos:column="32"/></name></name> <operator pos:line="40" pos:column="33">&amp;&amp;<pos:position pos:line="40" pos:column="43"/></operator> <operator pos:line="40" pos:column="36">!<pos:position pos:line="40" pos:column="37"/></operator><name><name pos:line="40" pos:column="37">opts<pos:position pos:line="40" pos:column="41"/></name><operator pos:line="40" pos:column="41">-&gt;<pos:position pos:line="40" pos:column="46"/></operator><name pos:line="40" pos:column="43">record_origin<pos:position pos:line="40" pos:column="56"/></name></name> <operator pos:line="40" pos:column="57">&amp;&amp;<pos:position pos:line="40" pos:column="67"/></operator>
		 <call><name pos:line="41" pos:column="18">git_config_get_value<pos:position pos:line="41" pos:column="38"/></name><argument_list pos:line="41" pos:column="38">(<argument><expr><literal type="string" pos:line="41" pos:column="39">"commit.cleanup"<pos:position pos:line="41" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="41" pos:column="57">&amp;<pos:position pos:line="41" pos:column="62"/></operator><name pos:line="41" pos:column="58">value<pos:position pos:line="41" pos:column="63"/></name></expr></argument>)<pos:position pos:line="41" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="65"/></condition><then pos:line="41" pos:column="65">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="17">argv_array_push<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><operator pos:line="42" pos:column="33">&amp;<pos:position pos:line="42" pos:column="38"/></operator><name><name pos:line="42" pos:column="34">cmd<pos:position pos:line="42" pos:column="37"/></name><operator pos:line="42" pos:column="37">.<pos:position pos:line="42" pos:column="38"/></operator><name pos:line="42" pos:column="38">args<pos:position pos:line="42" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="44">"--cleanup=verbatim"<pos:position pos:line="42" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="66"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">allow_empty<pos:position pos:line="44" pos:column="24"/></name></expr>)<pos:position pos:line="44" pos:column="25"/></condition><then pos:line="44" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="17">argv_array_push<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><operator pos:line="45" pos:column="33">&amp;<pos:position pos:line="45" pos:column="38"/></operator><name><name pos:line="45" pos:column="34">cmd<pos:position pos:line="45" pos:column="37"/></name><operator pos:line="45" pos:column="37">.<pos:position pos:line="45" pos:column="38"/></operator><name pos:line="45" pos:column="38">args<pos:position pos:line="45" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="44">"--allow-empty"<pos:position pos:line="45" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="61"/></expr_stmt></block></then></if>

	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name><name pos:line="47" pos:column="13">opts<pos:position pos:line="47" pos:column="17"/></name><operator pos:line="47" pos:column="17">-&gt;<pos:position pos:line="47" pos:column="22"/></operator><name pos:line="47" pos:column="19">allow_empty_message<pos:position pos:line="47" pos:column="38"/></name></name></expr>)<pos:position pos:line="47" pos:column="39"/></condition><then pos:line="47" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="17">argv_array_push<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">(<argument><expr><operator pos:line="48" pos:column="33">&amp;<pos:position pos:line="48" pos:column="38"/></operator><name><name pos:line="48" pos:column="34">cmd<pos:position pos:line="48" pos:column="37"/></name><operator pos:line="48" pos:column="37">.<pos:position pos:line="48" pos:column="38"/></operator><name pos:line="48" pos:column="38">args<pos:position pos:line="48" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="44">"--allow-empty-message"<pos:position pos:line="48" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="69"/></expr_stmt></block></then></if>

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name><name pos:line="50" pos:column="13">cmd<pos:position pos:line="50" pos:column="16"/></name><operator pos:line="50" pos:column="16">.<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="17">err<pos:position pos:line="50" pos:column="20"/></name></name> <operator pos:line="50" pos:column="21">==<pos:position pos:line="50" pos:column="23"/></operator> <operator pos:line="50" pos:column="24">-<pos:position pos:line="50" pos:column="25"/></operator><literal type="number" pos:line="50" pos:column="25">1<pos:position pos:line="50" pos:column="26"/></literal></expr>)<pos:position pos:line="50" pos:column="27"/></condition><then pos:line="50" pos:column="27"> <block pos:line="50" pos:column="28">{
		<comment type="block" pos:line="51" pos:column="17">/* hide stderr on success */</comment>
		<decl_stmt><decl><type><name><name pos:line="52" pos:column="17">struct<pos:position pos:line="52" pos:column="23"/></name> <name pos:line="52" pos:column="24">strbuf<pos:position pos:line="52" pos:column="30"/></name></name></type> <name pos:line="52" pos:column="31">buf<pos:position pos:line="52" pos:column="34"/></name> <init pos:line="52" pos:column="35">= <expr><name pos:line="52" pos:column="37">STRBUF_INIT<pos:position pos:line="52" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="52" pos:column="49"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="53" pos:column="17">int<pos:position pos:line="53" pos:column="20"/></name></type> <name pos:line="53" pos:column="21">rc<pos:position pos:line="53" pos:column="23"/></name> <init pos:line="53" pos:column="24">= <expr><call><name pos:line="53" pos:column="26">pipe_command<pos:position pos:line="53" pos:column="38"/></name><argument_list pos:line="53" pos:column="38">(<argument><expr><operator pos:line="53" pos:column="39">&amp;<pos:position pos:line="53" pos:column="44"/></operator><name pos:line="53" pos:column="40">cmd<pos:position pos:line="53" pos:column="43"/></name></expr></argument>,
				      <argument><expr><name pos:line="54" pos:column="39">NULL<pos:position pos:line="54" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="45">0<pos:position pos:line="54" pos:column="46"/></literal></expr></argument>,
				      <comment type="block" pos:line="55" pos:column="39">/* stdout is already redirected */</comment>
				      <argument><expr><name pos:line="56" pos:column="39">NULL<pos:position pos:line="56" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="45">0<pos:position pos:line="56" pos:column="46"/></literal></expr></argument>,
				      <argument><expr><operator pos:line="57" pos:column="39">&amp;<pos:position pos:line="57" pos:column="44"/></operator><name pos:line="57" pos:column="40">buf<pos:position pos:line="57" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="45">0<pos:position pos:line="57" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="57" pos:column="48"/></decl_stmt>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name pos:line="58" pos:column="21">rc<pos:position pos:line="58" pos:column="23"/></name></expr>)<pos:position pos:line="58" pos:column="24"/></condition><then pos:line="58" pos:column="24">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="25">fputs<pos:position pos:line="59" pos:column="30"/></name><argument_list pos:line="59" pos:column="30">(<argument><expr><name><name pos:line="59" pos:column="31">buf<pos:position pos:line="59" pos:column="34"/></name><operator pos:line="59" pos:column="34">.<pos:position pos:line="59" pos:column="35"/></operator><name pos:line="59" pos:column="35">buf<pos:position pos:line="59" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="40">stderr<pos:position pos:line="59" pos:column="46"/></name></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">strbuf_release<pos:position pos:line="60" pos:column="31"/></name><argument_list pos:line="60" pos:column="31">(<argument><expr><operator pos:line="60" pos:column="32">&amp;<pos:position pos:line="60" pos:column="37"/></operator><name pos:line="60" pos:column="33">buf<pos:position pos:line="60" pos:column="36"/></name></expr></argument>)<pos:position pos:line="60" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="38"/></expr_stmt>
		<return pos:line="61" pos:column="17">return <expr><name pos:line="61" pos:column="24">rc<pos:position pos:line="61" pos:column="26"/></name></expr>;<pos:position pos:line="61" pos:column="27"/></return>
	}<pos:position pos:line="62" pos:column="10"/></block></then></if>

	<return pos:line="64" pos:column="9">return <expr><call><name pos:line="64" pos:column="16">run_command<pos:position pos:line="64" pos:column="27"/></name><argument_list pos:line="64" pos:column="27">(<argument><expr><operator pos:line="64" pos:column="28">&amp;<pos:position pos:line="64" pos:column="33"/></operator><name pos:line="64" pos:column="29">cmd<pos:position pos:line="64" pos:column="32"/></name></expr></argument>)<pos:position pos:line="64" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="34"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
