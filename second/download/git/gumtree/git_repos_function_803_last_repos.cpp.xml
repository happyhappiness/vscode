<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_803_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">stream_blocked<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">unsigned<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">sha1<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">git_istream<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">st<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">enum<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">object_type<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">type<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">sz<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">buf<pos:position pos:line="6" pos:column="17"/></name><index pos:line="6" pos:column="17">[<expr><name pos:line="6" pos:column="18">BLOCKSIZE<pos:position pos:line="6" pos:column="27"/></name></expr>]<pos:position pos:line="6" pos:column="28"/></index></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">ssize_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">readlen<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">st<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <call><name pos:line="9" pos:column="14">open_istream<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">sha1<pos:position pos:line="9" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="33">&amp;<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="34">type<pos:position pos:line="9" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="40">&amp;<pos:position pos:line="9" pos:column="45"/></operator><name pos:line="9" pos:column="41">sz<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="45">NULL<pos:position pos:line="9" pos:column="49"/></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="51"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">st<pos:position pos:line="10" pos:column="16"/></name></expr>)<pos:position pos:line="10" pos:column="17"/></condition><then pos:line="10" pos:column="17">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><call><name pos:line="11" pos:column="24">error<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><literal type="string" pos:line="11" pos:column="30">"cannot stream blob %s"<pos:position pos:line="11" pos:column="53"/></literal></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="55">sha1_to_hex<pos:position pos:line="11" pos:column="66"/></name><argument_list pos:line="11" pos:column="66">(<argument><expr><name pos:line="11" pos:column="67">sha1<pos:position pos:line="11" pos:column="71"/></name></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="74"/></return></block></then></if>
	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init pos:line="12" pos:column="14">;<pos:position pos:line="12" pos:column="15"/></init><condition pos:line="12" pos:column="15">;<pos:position pos:line="12" pos:column="16"/></condition><incr/>)<pos:position pos:line="12" pos:column="17"/></control> <block pos:line="12" pos:column="18">{
		<expr_stmt><expr><name pos:line="13" pos:column="17">readlen<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">=<pos:position pos:line="13" pos:column="26"/></operator> <call><name pos:line="13" pos:column="27">read_istream<pos:position pos:line="13" pos:column="39"/></name><argument_list pos:line="13" pos:column="39">(<argument><expr><name pos:line="13" pos:column="40">st<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="44">buf<pos:position pos:line="13" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="49">sizeof<argument_list pos:line="13" pos:column="55">(<argument><expr><name pos:line="13" pos:column="56">buf<pos:position pos:line="13" pos:column="59"/></name></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="62"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">readlen<pos:position pos:line="14" pos:column="28"/></name> <operator pos:line="14" pos:column="29">&lt;=<pos:position pos:line="14" pos:column="34"/></operator> <literal type="number" pos:line="14" pos:column="32">0<pos:position pos:line="14" pos:column="33"/></literal></expr>)<pos:position pos:line="14" pos:column="34"/></condition><then pos:line="14" pos:column="34">
			<block type="pseudo"><break pos:line="15" pos:column="25">break;<pos:position pos:line="15" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">do_write_blocked<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">(<argument><expr><name pos:line="16" pos:column="34">buf<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="39">readlen<pos:position pos:line="16" pos:column="46"/></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">close_istream<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">st<pos:position pos:line="18" pos:column="25"/></name></expr></argument>)<pos:position pos:line="18" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">readlen<pos:position pos:line="19" pos:column="21"/></name></expr>)<pos:position pos:line="19" pos:column="22"/></condition><then pos:line="19" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">finish_record<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">()<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt></block></then></if>
	<return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">readlen<pos:position pos:line="21" pos:column="23"/></name></expr>;<pos:position pos:line="21" pos:column="24"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
