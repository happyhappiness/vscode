<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6252_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">off_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">write_reused_pack<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">sha1file<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">f<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">char<pos:position pos:line="3" pos:column="22"/></name></type> <name><name pos:line="3" pos:column="23">buffer<pos:position pos:line="3" pos:column="29"/></name><index pos:line="3" pos:column="29">[<expr><literal type="number" pos:line="3" pos:column="30">8192<pos:position pos:line="3" pos:column="34"/></literal></expr>]<pos:position pos:line="3" pos:column="35"/></index></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">off_t<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">to_write<pos:position pos:line="4" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="25">total<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">fd<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><call><name pos:line="7" pos:column="14">is_pack_valid<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">reuse_packfile<pos:position pos:line="7" pos:column="42"/></name></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="44"/></condition><then pos:line="7" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="17">die<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><literal type="string" pos:line="8" pos:column="21">"packfile is invalid: %s"<pos:position pos:line="8" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="48">reuse_packfile<pos:position pos:line="8" pos:column="62"/></name><operator pos:line="8" pos:column="62">-&gt;<pos:position pos:line="8" pos:column="67"/></operator><name pos:line="8" pos:column="64">pack_name<pos:position pos:line="8" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="75"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="10" pos:column="9">fd<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">git_open<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name><name pos:line="10" pos:column="23">reuse_packfile<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">-&gt;<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="39">pack_name<pos:position pos:line="10" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="50"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">fd<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">&lt;<pos:position pos:line="11" pos:column="20"/></operator> <literal type="number" pos:line="11" pos:column="18">0<pos:position pos:line="11" pos:column="19"/></literal></expr>)<pos:position pos:line="11" pos:column="20"/></condition><then pos:line="11" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">die_errno<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><literal type="string" pos:line="12" pos:column="27">"unable to open packfile for reuse: %s"<pos:position pos:line="12" pos:column="66"/></literal></expr></argument>,
			  <argument><expr><name><name pos:line="13" pos:column="27">reuse_packfile<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">-&gt;<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="43">pack_name<pos:position pos:line="13" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">lseek<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">fd<pos:position pos:line="15" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="23">sizeof<argument_list pos:line="15" pos:column="29">(<argument><expr pos:line="15" pos:column="30">struct <name pos:line="15" pos:column="37">pack_header<pos:position pos:line="15" pos:column="48"/></name></expr></argument>)<pos:position pos:line="15" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="15" pos:column="51">SEEK_SET<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call> <operator pos:line="15" pos:column="61">==<pos:position pos:line="15" pos:column="63"/></operator> <operator pos:line="15" pos:column="64">-<pos:position pos:line="15" pos:column="65"/></operator><literal type="number" pos:line="15" pos:column="65">1<pos:position pos:line="15" pos:column="66"/></literal></expr>)<pos:position pos:line="15" pos:column="67"/></condition><then pos:line="15" pos:column="67">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">die_errno<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><literal type="string" pos:line="16" pos:column="27">"unable to seek in reused packfile"<pos:position pos:line="16" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="64"/></expr_stmt></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">reuse_packfile_offset<pos:position pos:line="18" pos:column="34"/></name> <operator pos:line="18" pos:column="35">&lt;<pos:position pos:line="18" pos:column="39"/></operator> <literal type="number" pos:line="18" pos:column="37">0<pos:position pos:line="18" pos:column="38"/></literal></expr>)<pos:position pos:line="18" pos:column="39"/></condition><then pos:line="18" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="17">reuse_packfile_offset<pos:position pos:line="19" pos:column="38"/></name> <operator pos:line="19" pos:column="39">=<pos:position pos:line="19" pos:column="40"/></operator> <name><name pos:line="19" pos:column="41">reuse_packfile<pos:position pos:line="19" pos:column="55"/></name><operator pos:line="19" pos:column="55">-&gt;<pos:position pos:line="19" pos:column="60"/></operator><name pos:line="19" pos:column="57">pack_size<pos:position pos:line="19" pos:column="66"/></name></name> <operator pos:line="19" pos:column="67">-<pos:position pos:line="19" pos:column="68"/></operator> <literal type="number" pos:line="19" pos:column="69">20<pos:position pos:line="19" pos:column="71"/></literal></expr>;<pos:position pos:line="19" pos:column="72"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="21" pos:column="9">total<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <name pos:line="21" pos:column="17">to_write<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">=<pos:position pos:line="21" pos:column="27"/></operator> <name pos:line="21" pos:column="28">reuse_packfile_offset<pos:position pos:line="21" pos:column="49"/></name> <operator pos:line="21" pos:column="50">-<pos:position pos:line="21" pos:column="51"/></operator> <sizeof pos:line="21" pos:column="52">sizeof<argument_list pos:line="21" pos:column="58">(<argument><expr pos:line="21" pos:column="59">struct <name pos:line="21" pos:column="66">pack_header<pos:position pos:line="21" pos:column="77"/></name></expr></argument>)<pos:position pos:line="21" pos:column="78"/></argument_list></sizeof></expr>;<pos:position pos:line="21" pos:column="79"/></expr_stmt>

	<while pos:line="23" pos:column="9">while <condition pos:line="23" pos:column="15">(<expr><name pos:line="23" pos:column="16">to_write<pos:position pos:line="23" pos:column="24"/></name></expr>)<pos:position pos:line="23" pos:column="25"/></condition> <block pos:line="23" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">int<pos:position pos:line="24" pos:column="20"/></name></type> <name pos:line="24" pos:column="21">read_pack<pos:position pos:line="24" pos:column="30"/></name> <init pos:line="24" pos:column="31">= <expr><call><name pos:line="24" pos:column="33">xread<pos:position pos:line="24" pos:column="38"/></name><argument_list pos:line="24" pos:column="38">(<argument><expr><name pos:line="24" pos:column="39">fd<pos:position pos:line="24" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="43">buffer<pos:position pos:line="24" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="51">sizeof<argument_list pos:line="24" pos:column="57">(<argument><expr><name pos:line="24" pos:column="58">buffer<pos:position pos:line="24" pos:column="64"/></name></expr></argument>)<pos:position pos:line="24" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="67"/></decl_stmt>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">read_pack<pos:position pos:line="26" pos:column="30"/></name> <operator pos:line="26" pos:column="31">&lt;=<pos:position pos:line="26" pos:column="36"/></operator> <literal type="number" pos:line="26" pos:column="34">0<pos:position pos:line="26" pos:column="35"/></literal></expr>)<pos:position pos:line="26" pos:column="36"/></condition><then pos:line="26" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">die_errno<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><literal type="string" pos:line="27" pos:column="35">"unable to read from reused packfile"<pos:position pos:line="27" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="74"/></expr_stmt></block></then></if>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">read_pack<pos:position pos:line="29" pos:column="30"/></name> <operator pos:line="29" pos:column="31">&gt;<pos:position pos:line="29" pos:column="35"/></operator> <name pos:line="29" pos:column="33">to_write<pos:position pos:line="29" pos:column="41"/></name></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="25">read_pack<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">=<pos:position pos:line="30" pos:column="36"/></operator> <name pos:line="30" pos:column="37">to_write<pos:position pos:line="30" pos:column="45"/></name></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="32" pos:column="17">sha1write<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">(<argument><expr><name pos:line="32" pos:column="27">f<pos:position pos:line="32" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="30">buffer<pos:position pos:line="32" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="38">read_pack<pos:position pos:line="32" pos:column="47"/></name></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">to_write<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">-=<pos:position pos:line="33" pos:column="28"/></operator> <name pos:line="33" pos:column="29">read_pack<pos:position pos:line="33" pos:column="38"/></name></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt>

		<comment type="block" pos:line="35" pos:column="17">/*
		 * We don't know the actual number of objects written,
		 * only how many bytes written, how many bytes total, and
		 * how many objects total. So we can fake it by pretending all
		 * objects we are writing are the same size. This gives us a
		 * smooth progress meter, and at the end it matches the true
		 * answer.
		 */</comment>
		<expr_stmt><expr><name pos:line="43" pos:column="17">written<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">=<pos:position pos:line="43" pos:column="26"/></operator> <name pos:line="43" pos:column="27">reuse_packfile_objects<pos:position pos:line="43" pos:column="49"/></name> <operator pos:line="43" pos:column="50">*<pos:position pos:line="43" pos:column="51"/></operator>
				<operator pos:line="44" pos:column="33">(<pos:position pos:line="44" pos:column="34"/></operator><operator pos:line="44" pos:column="34">(<pos:position pos:line="44" pos:column="35"/></operator><call pos:line="44" pos:column="35">(<name pos:line="44" pos:column="36">double<pos:position pos:line="44" pos:column="42"/></name>)<argument_list pos:line="44" pos:column="43">(<argument><expr><name pos:line="44" pos:column="44">total<pos:position pos:line="44" pos:column="49"/></name> <operator pos:line="44" pos:column="50">-<pos:position pos:line="44" pos:column="51"/></operator> <name pos:line="44" pos:column="52">to_write<pos:position pos:line="44" pos:column="60"/></name></expr></argument>)<pos:position pos:line="44" pos:column="61"/></argument_list></call><operator pos:line="44" pos:column="61">)<pos:position pos:line="44" pos:column="62"/></operator> <operator pos:line="44" pos:column="63">/<pos:position pos:line="44" pos:column="64"/></operator> <name pos:line="44" pos:column="65">total<pos:position pos:line="44" pos:column="70"/></name><operator pos:line="44" pos:column="70">)<pos:position pos:line="44" pos:column="71"/></operator></expr>;<pos:position pos:line="44" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">display_progress<pos:position pos:line="45" pos:column="33"/></name><argument_list pos:line="45" pos:column="33">(<argument><expr><name pos:line="45" pos:column="34">progress_state<pos:position pos:line="45" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="50">written<pos:position pos:line="45" pos:column="57"/></name></expr></argument>)<pos:position pos:line="45" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="48" pos:column="9">close<pos:position pos:line="48" pos:column="14"/></name><argument_list pos:line="48" pos:column="14">(<argument><expr><name pos:line="48" pos:column="15">fd<pos:position pos:line="48" pos:column="17"/></name></expr></argument>)<pos:position pos:line="48" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="49" pos:column="9">written<pos:position pos:line="49" pos:column="16"/></name> <operator pos:line="49" pos:column="17">=<pos:position pos:line="49" pos:column="18"/></operator> <name pos:line="49" pos:column="19">reuse_packfile_objects<pos:position pos:line="49" pos:column="41"/></name></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">display_progress<pos:position pos:line="50" pos:column="25"/></name><argument_list pos:line="50" pos:column="25">(<argument><expr><name pos:line="50" pos:column="26">progress_state<pos:position pos:line="50" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="42">written<pos:position pos:line="50" pos:column="49"/></name></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt>
	<return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">reuse_packfile_offset<pos:position pos:line="51" pos:column="37"/></name> <operator pos:line="51" pos:column="38">-<pos:position pos:line="51" pos:column="39"/></operator> <sizeof pos:line="51" pos:column="40">sizeof<argument_list pos:line="51" pos:column="46">(<argument><expr pos:line="51" pos:column="47">struct <name pos:line="51" pos:column="54">pack_header<pos:position pos:line="51" pos:column="65"/></name></expr></argument>)<pos:position pos:line="51" pos:column="66"/></argument_list></sizeof></expr>;<pos:position pos:line="51" pos:column="67"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
