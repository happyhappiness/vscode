<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3038_git-2.4.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">graph_show_commit<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">git_graph<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">graph<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">msgbuf<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><name pos:line="3" pos:column="32">STRBUF_INIT<pos:position pos:line="3" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">shown_commit_line<pos:position pos:line="4" pos:column="30"/></name> <init pos:line="4" pos:column="31">= <expr><literal type="number" pos:line="4" pos:column="33">0<pos:position pos:line="4" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">graph<pos:position pos:line="6" pos:column="19"/></name></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20">
		<block type="pseudo"><return pos:line="7" pos:column="17">return;<pos:position pos:line="7" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * When showing a diff of a merge against each of its parents, we
	 * are called once for each parent without graph_update having been
	 * called.  In this case, simply output a single padding line.
	 */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">graph_is_commit_finished<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><name pos:line="14" pos:column="38">graph<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="45"/></condition><then pos:line="14" pos:column="45"> <block pos:line="14" pos:column="46">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">graph_show_padding<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">graph<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">shown_commit_line<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">=<pos:position pos:line="16" pos:column="36"/></operator> <literal type="number" pos:line="16" pos:column="37">1<pos:position pos:line="16" pos:column="38"/></literal></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<while pos:line="19" pos:column="9">while <condition pos:line="19" pos:column="15">(<expr><operator pos:line="19" pos:column="16">!<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">shown_commit_line<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">&amp;&amp;<pos:position pos:line="19" pos:column="45"/></operator> <operator pos:line="19" pos:column="38">!<pos:position pos:line="19" pos:column="39"/></operator><call><name pos:line="19" pos:column="39">graph_is_commit_finished<pos:position pos:line="19" pos:column="63"/></name><argument_list pos:line="19" pos:column="63">(<argument><expr><name pos:line="19" pos:column="64">graph<pos:position pos:line="19" pos:column="69"/></name></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="71"/></condition> <block pos:line="19" pos:column="72">{
		<expr_stmt><expr><name pos:line="20" pos:column="17">shown_commit_line<pos:position pos:line="20" pos:column="34"/></name> <operator pos:line="20" pos:column="35">=<pos:position pos:line="20" pos:column="36"/></operator> <call><name pos:line="20" pos:column="37">graph_next_line<pos:position pos:line="20" pos:column="52"/></name><argument_list pos:line="20" pos:column="52">(<argument><expr><name pos:line="20" pos:column="53">graph<pos:position pos:line="20" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="60">&amp;<pos:position pos:line="20" pos:column="65"/></operator><name pos:line="20" pos:column="61">msgbuf<pos:position pos:line="20" pos:column="67"/></name></expr></argument>)<pos:position pos:line="20" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">fwrite<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name><name pos:line="21" pos:column="24">msgbuf<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">.<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">buf<pos:position pos:line="21" pos:column="34"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="36">sizeof<argument_list pos:line="21" pos:column="42">(<argument><expr><name pos:line="21" pos:column="43">char<pos:position pos:line="21" pos:column="47"/></name></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="50">msgbuf<pos:position pos:line="21" pos:column="56"/></name><operator pos:line="21" pos:column="56">.<pos:position pos:line="21" pos:column="57"/></operator><name pos:line="21" pos:column="57">len<pos:position pos:line="21" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="62">stdout<pos:position pos:line="21" pos:column="68"/></name></expr></argument>)<pos:position pos:line="21" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="70"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">shown_commit_line<pos:position pos:line="22" pos:column="39"/></name></expr>)<pos:position pos:line="22" pos:column="40"/></condition><then pos:line="22" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">putchar<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><literal type="char" pos:line="23" pos:column="33">'\n'<pos:position pos:line="23" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="39"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">strbuf_setlen<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><operator pos:line="24" pos:column="31">&amp;<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="32">msgbuf<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="40">0<pos:position pos:line="24" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">strbuf_release<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><operator pos:line="27" pos:column="24">&amp;<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="25">msgbuf<pos:position pos:line="27" pos:column="31"/></name></expr></argument>)<pos:position pos:line="27" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
