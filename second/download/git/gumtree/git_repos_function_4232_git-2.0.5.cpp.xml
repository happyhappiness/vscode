<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4232_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">branch_merged<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">kind<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">name<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
			 <parameter><decl><type><name><name pos:line="2" pos:column="26">struct<pos:position pos:line="2" pos:column="32"/></name> <name pos:line="2" pos:column="33">commit<pos:position pos:line="2" pos:column="39"/></name></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">rev<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="46">struct<pos:position pos:line="2" pos:column="52"/></name> <name pos:line="2" pos:column="53">commit<pos:position pos:line="2" pos:column="59"/></name></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">head_rev<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<comment type="block" pos:line="4" pos:column="9">/*
	 * This checks whether the merge bases of branch and HEAD (or
	 * the other branch this branch builds upon) contains the
	 * branch, which means that the branch has already been merged
	 * safely to HEAD (or the other branch).
	 */</comment>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">commit<pos:position pos:line="10" pos:column="22"/></name></name> <modifier pos:line="10" pos:column="23">*<pos:position pos:line="10" pos:column="24"/></modifier></type><name pos:line="10" pos:column="24">reference_rev<pos:position pos:line="10" pos:column="37"/></name> <init pos:line="10" pos:column="38">= <expr><name pos:line="10" pos:column="40">NULL<pos:position pos:line="10" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="11" pos:column="9">const<pos:position pos:line="11" pos:column="14"/></specifier> <name pos:line="11" pos:column="15">char<pos:position pos:line="11" pos:column="19"/></name> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">reference_name<pos:position pos:line="11" pos:column="35"/></name> <init pos:line="11" pos:column="36">= <expr><name pos:line="11" pos:column="38">NULL<pos:position pos:line="11" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">void<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">reference_name_to_free<pos:position pos:line="12" pos:column="37"/></name> <init pos:line="12" pos:column="38">= <expr><name pos:line="12" pos:column="40">NULL<pos:position pos:line="12" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">merged<pos:position pos:line="13" pos:column="19"/></name></decl>;<pos:position pos:line="13" pos:column="20"/></decl_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">kind<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">==<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">REF_LOCAL_BRANCH<pos:position pos:line="15" pos:column="37"/></name></expr>)<pos:position pos:line="15" pos:column="38"/></condition><then pos:line="15" pos:column="38"> <block pos:line="15" pos:column="39">{
		<decl_stmt><decl><type><name><name pos:line="16" pos:column="17">struct<pos:position pos:line="16" pos:column="23"/></name> <name pos:line="16" pos:column="24">branch<pos:position pos:line="16" pos:column="30"/></name></name> <modifier pos:line="16" pos:column="31">*<pos:position pos:line="16" pos:column="32"/></modifier></type><name pos:line="16" pos:column="32">branch<pos:position pos:line="16" pos:column="38"/></name> <init pos:line="16" pos:column="39">= <expr><call><name pos:line="16" pos:column="41">branch_get<pos:position pos:line="16" pos:column="51"/></name><argument_list pos:line="16" pos:column="51">(<argument><expr><name pos:line="16" pos:column="52">name<pos:position pos:line="16" pos:column="56"/></name></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="58"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">unsigned<pos:position pos:line="17" pos:column="25"/></name> <name pos:line="17" pos:column="26">char<pos:position pos:line="17" pos:column="30"/></name></type> <name><name pos:line="17" pos:column="31">sha1<pos:position pos:line="17" pos:column="35"/></name><index pos:line="17" pos:column="35">[<expr><literal type="number" pos:line="17" pos:column="36">20<pos:position pos:line="17" pos:column="38"/></literal></expr>]<pos:position pos:line="17" pos:column="39"/></index></name></decl>;<pos:position pos:line="17" pos:column="40"/></decl_stmt>

		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">branch<pos:position pos:line="19" pos:column="27"/></name> <operator pos:line="19" pos:column="28">&amp;&amp;<pos:position pos:line="19" pos:column="38"/></operator>
		    <name><name pos:line="20" pos:column="21">branch<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">-&gt;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="29">merge<pos:position pos:line="20" pos:column="34"/></name></name> <operator pos:line="20" pos:column="35">&amp;&amp;<pos:position pos:line="20" pos:column="45"/></operator>
		    <name><name pos:line="21" pos:column="21">branch<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">-&gt;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="29">merge<pos:position pos:line="21" pos:column="34"/></name><index pos:line="21" pos:column="34">[<expr><literal type="number" pos:line="21" pos:column="35">0<pos:position pos:line="21" pos:column="36"/></literal></expr>]<pos:position pos:line="21" pos:column="37"/></index></name> <operator pos:line="21" pos:column="38">&amp;&amp;<pos:position pos:line="21" pos:column="48"/></operator>
		    <name><name pos:line="22" pos:column="21">branch<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">-&gt;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="29">merge<pos:position pos:line="22" pos:column="34"/></name><index pos:line="22" pos:column="34">[<expr><literal type="number" pos:line="22" pos:column="35">0<pos:position pos:line="22" pos:column="36"/></literal></expr>]<pos:position pos:line="22" pos:column="37"/></index></name><operator pos:line="22" pos:column="37">-&gt;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="39">dst<pos:position pos:line="22" pos:column="42"/></name> <operator pos:line="22" pos:column="43">&amp;&amp;<pos:position pos:line="22" pos:column="53"/></operator>
		    <operator pos:line="23" pos:column="21">(<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">reference_name<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">=<pos:position pos:line="23" pos:column="38"/></operator> <name pos:line="23" pos:column="39">reference_name_to_free<pos:position pos:line="23" pos:column="61"/></name> <operator pos:line="23" pos:column="62">=<pos:position pos:line="23" pos:column="63"/></operator>
		     <call><name pos:line="24" pos:column="22">resolve_refdup<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">(<argument><expr><name><name pos:line="24" pos:column="37">branch<pos:position pos:line="24" pos:column="43"/></name><operator pos:line="24" pos:column="43">-&gt;<pos:position pos:line="24" pos:column="48"/></operator><name pos:line="24" pos:column="45">merge<pos:position pos:line="24" pos:column="50"/></name><index pos:line="24" pos:column="50">[<expr><literal type="number" pos:line="24" pos:column="51">0<pos:position pos:line="24" pos:column="52"/></literal></expr>]<pos:position pos:line="24" pos:column="53"/></index></name><operator pos:line="24" pos:column="53">-&gt;<pos:position pos:line="24" pos:column="58"/></operator><name pos:line="24" pos:column="55">dst<pos:position pos:line="24" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="60">sha1<pos:position pos:line="24" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="66">1<pos:position pos:line="24" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="69">NULL<pos:position pos:line="24" pos:column="73"/></name></expr></argument>)<pos:position pos:line="24" pos:column="74"/></argument_list></call><operator pos:line="24" pos:column="74">)<pos:position pos:line="24" pos:column="75"/></operator> <operator pos:line="24" pos:column="76">!=<pos:position pos:line="24" pos:column="78"/></operator> <name pos:line="24" pos:column="79">NULL<pos:position pos:line="24" pos:column="83"/></name></expr>)<pos:position pos:line="24" pos:column="84"/></condition><then pos:line="24" pos:column="84">
			<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="25">reference_rev<pos:position pos:line="25" pos:column="38"/></name> <operator pos:line="25" pos:column="39">=<pos:position pos:line="25" pos:column="40"/></operator> <call><name pos:line="25" pos:column="41">lookup_commit_reference<pos:position pos:line="25" pos:column="64"/></name><argument_list pos:line="25" pos:column="64">(<argument><expr><name pos:line="25" pos:column="65">sha1<pos:position pos:line="25" pos:column="69"/></name></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="71"/></expr_stmt></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">reference_rev<pos:position pos:line="27" pos:column="27"/></name></expr>)<pos:position pos:line="27" pos:column="28"/></condition><then pos:line="27" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="17">reference_rev<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">=<pos:position pos:line="28" pos:column="32"/></operator> <name pos:line="28" pos:column="33">head_rev<pos:position pos:line="28" pos:column="41"/></name></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="30" pos:column="9">merged<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <call><name pos:line="30" pos:column="18">in_merge_bases<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">rev<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="38">reference_rev<pos:position pos:line="30" pos:column="51"/></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt>

	<comment type="block" pos:line="32" pos:column="9">/*
	 * After the safety valve is fully redefined to "check with
	 * upstream, if any, otherwise with HEAD", we should just
	 * return the result of the in_merge_bases() above without
	 * any of the following code, but during the transition period,
	 * a gentle reminder is in order.
	 */</comment>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><operator pos:line="39" pos:column="13">(<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="14">head_rev<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">!=<pos:position pos:line="39" pos:column="25"/></operator> <name pos:line="39" pos:column="26">reference_rev<pos:position pos:line="39" pos:column="39"/></name><operator pos:line="39" pos:column="39">)<pos:position pos:line="39" pos:column="40"/></operator> <operator pos:line="39" pos:column="41">&amp;&amp;<pos:position pos:line="39" pos:column="51"/></operator>
	    <call><name pos:line="40" pos:column="13">in_merge_bases<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">rev<pos:position pos:line="40" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="33">head_rev<pos:position pos:line="40" pos:column="41"/></name></expr></argument>)<pos:position pos:line="40" pos:column="42"/></argument_list></call> <operator pos:line="40" pos:column="43">!=<pos:position pos:line="40" pos:column="45"/></operator> <name pos:line="40" pos:column="46">merged<pos:position pos:line="40" pos:column="52"/></name></expr>)<pos:position pos:line="40" pos:column="53"/></condition><then pos:line="40" pos:column="53"> <block pos:line="40" pos:column="54">{
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">merged<pos:position pos:line="41" pos:column="27"/></name></expr>)<pos:position pos:line="41" pos:column="28"/></condition><then pos:line="41" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="25">warning<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><call><name pos:line="42" pos:column="33">_<pos:position pos:line="42" pos:column="34"/></name><argument_list pos:line="42" pos:column="34">(<argument><expr><literal type="string" pos:line="42" pos:column="35">"deleting branch '%s' that has been merged to\n"<pos:position pos:line="42" pos:column="83"/></literal>
				<literal type="string" pos:line="43" pos:column="33">"         '%s', but not yet merged to HEAD."<pos:position pos:line="43" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="78"/></argument_list></call></expr></argument>,
				<argument><expr><name pos:line="44" pos:column="33">name<pos:position pos:line="44" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="39">reference_name<pos:position pos:line="44" pos:column="53"/></name></expr></argument>)<pos:position pos:line="44" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="55"/></expr_stmt></block></then>
		<else pos:line="45" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="25">warning<pos:position pos:line="46" pos:column="32"/></name><argument_list pos:line="46" pos:column="32">(<argument><expr><call><name pos:line="46" pos:column="33">_<pos:position pos:line="46" pos:column="34"/></name><argument_list pos:line="46" pos:column="34">(<argument><expr><literal type="string" pos:line="46" pos:column="35">"not deleting branch '%s' that is not yet merged to\n"<pos:position pos:line="46" pos:column="89"/></literal>
				<literal type="string" pos:line="47" pos:column="33">"         '%s', even though it is merged to HEAD."<pos:position pos:line="47" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="84"/></argument_list></call></expr></argument>,
				<argument><expr><name pos:line="48" pos:column="33">name<pos:position pos:line="48" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="39">reference_name<pos:position pos:line="48" pos:column="53"/></name></expr></argument>)<pos:position pos:line="48" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="55"/></expr_stmt></block></else></if>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">free<pos:position pos:line="50" pos:column="13"/></name><argument_list pos:line="50" pos:column="13">(<argument><expr><name pos:line="50" pos:column="14">reference_name_to_free<pos:position pos:line="50" pos:column="36"/></name></expr></argument>)<pos:position pos:line="50" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>
	<return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">merged<pos:position pos:line="51" pos:column="22"/></name></expr>;<pos:position pos:line="51" pos:column="23"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
