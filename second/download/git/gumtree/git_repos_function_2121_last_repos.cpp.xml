<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2121_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fsck_tree<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">tree<pos:position pos:line="1" pos:column="33"/></name></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">item<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">fsck_options<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">options<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">retval<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><literal type="number" pos:line="3" pos:column="22">0<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">has_null_sha1<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><literal type="number" pos:line="4" pos:column="29">0<pos:position pos:line="4" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">has_full_path<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><literal type="number" pos:line="5" pos:column="29">0<pos:position pos:line="5" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">has_empty_name<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><literal type="number" pos:line="6" pos:column="30">0<pos:position pos:line="6" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">has_dot<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">has_dotdot<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><literal type="number" pos:line="8" pos:column="26">0<pos:position pos:line="8" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">has_dotgit<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><literal type="number" pos:line="9" pos:column="26">0<pos:position pos:line="9" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">has_zero_pad<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><literal type="number" pos:line="10" pos:column="28">0<pos:position pos:line="10" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">has_bad_modes<pos:position pos:line="11" pos:column="26"/></name> <init pos:line="11" pos:column="27">= <expr><literal type="number" pos:line="11" pos:column="29">0<pos:position pos:line="11" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">has_dup_entries<pos:position pos:line="12" pos:column="28"/></name> <init pos:line="12" pos:column="29">= <expr><literal type="number" pos:line="12" pos:column="31">0<pos:position pos:line="12" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">not_properly_sorted<pos:position pos:line="13" pos:column="32"/></name> <init pos:line="13" pos:column="33">= <expr><literal type="number" pos:line="13" pos:column="35">0<pos:position pos:line="13" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="14" pos:column="9">struct<pos:position pos:line="14" pos:column="15"/></name> <name pos:line="14" pos:column="16">tree_desc<pos:position pos:line="14" pos:column="25"/></name></name></type> <name pos:line="14" pos:column="26">desc<pos:position pos:line="14" pos:column="30"/></name></decl>;<pos:position pos:line="14" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">unsigned<pos:position pos:line="15" pos:column="17"/></name></type> <name pos:line="15" pos:column="18">o_mode<pos:position pos:line="15" pos:column="24"/></name></decl>;<pos:position pos:line="15" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="16" pos:column="9">const<pos:position pos:line="16" pos:column="14"/></specifier> <name pos:line="16" pos:column="15">char<pos:position pos:line="16" pos:column="19"/></name> <modifier pos:line="16" pos:column="20">*<pos:position pos:line="16" pos:column="21"/></modifier></type><name pos:line="16" pos:column="21">o_name<pos:position pos:line="16" pos:column="27"/></name></decl>;<pos:position pos:line="16" pos:column="28"/></decl_stmt>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">init_tree_desc_gently<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><operator pos:line="18" pos:column="35">&amp;<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="36">desc<pos:position pos:line="18" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="42">item<pos:position pos:line="18" pos:column="46"/></name><operator pos:line="18" pos:column="46">-&gt;<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="48">buffer<pos:position pos:line="18" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="56">item<pos:position pos:line="18" pos:column="60"/></name><operator pos:line="18" pos:column="60">-&gt;<pos:position pos:line="18" pos:column="65"/></operator><name pos:line="18" pos:column="62">size<pos:position pos:line="18" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="68"/></condition><then pos:line="18" pos:column="68"> <block pos:line="18" pos:column="69">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">retval<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">+=<pos:position pos:line="19" pos:column="26"/></operator> <call><name pos:line="19" pos:column="27">report<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">options<pos:position pos:line="19" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="43">&amp;<pos:position pos:line="19" pos:column="48"/></operator><name><name pos:line="19" pos:column="44">item<pos:position pos:line="19" pos:column="48"/></name><operator pos:line="19" pos:column="48">-&gt;<pos:position pos:line="19" pos:column="53"/></operator><name pos:line="19" pos:column="50">object<pos:position pos:line="19" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="58">FSCK_MSG_BAD_TREE<pos:position pos:line="19" pos:column="75"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="77">"cannot be parsed as a tree"<pos:position pos:line="19" pos:column="105"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="107"/></expr_stmt>
		<return pos:line="20" pos:column="17">return <expr><name pos:line="20" pos:column="24">retval<pos:position pos:line="20" pos:column="30"/></name></expr>;<pos:position pos:line="20" pos:column="31"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="23" pos:column="9">o_mode<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <literal type="number" pos:line="23" pos:column="18">0<pos:position pos:line="23" pos:column="19"/></literal></expr>;<pos:position pos:line="23" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name pos:line="24" pos:column="9">o_name<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <name pos:line="24" pos:column="18">NULL<pos:position pos:line="24" pos:column="22"/></name></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>

	<while pos:line="26" pos:column="9">while <condition pos:line="26" pos:column="15">(<expr><name><name pos:line="26" pos:column="16">desc<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">.<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="21">size<pos:position pos:line="26" pos:column="25"/></name></name></expr>)<pos:position pos:line="26" pos:column="26"/></condition> <block pos:line="26" pos:column="27">{
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">unsigned<pos:position pos:line="27" pos:column="25"/></name></type> <name pos:line="27" pos:column="26">mode<pos:position pos:line="27" pos:column="30"/></name></decl>;<pos:position pos:line="27" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="28" pos:column="17">const<pos:position pos:line="28" pos:column="22"/></specifier> <name pos:line="28" pos:column="23">char<pos:position pos:line="28" pos:column="27"/></name> <modifier pos:line="28" pos:column="28">*<pos:position pos:line="28" pos:column="29"/></modifier></type><name pos:line="28" pos:column="29">name<pos:position pos:line="28" pos:column="33"/></name></decl>;<pos:position pos:line="28" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="29" pos:column="17">const<pos:position pos:line="29" pos:column="22"/></specifier> <name><name pos:line="29" pos:column="23">struct<pos:position pos:line="29" pos:column="29"/></name> <name pos:line="29" pos:column="30">object_id<pos:position pos:line="29" pos:column="39"/></name></name> <modifier pos:line="29" pos:column="40">*<pos:position pos:line="29" pos:column="41"/></modifier></type><name pos:line="29" pos:column="41">oid<pos:position pos:line="29" pos:column="44"/></name></decl>;<pos:position pos:line="29" pos:column="45"/></decl_stmt>

		<expr_stmt><expr><name pos:line="31" pos:column="17">oid<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <call><name pos:line="31" pos:column="23">tree_entry_extract<pos:position pos:line="31" pos:column="41"/></name><argument_list pos:line="31" pos:column="41">(<argument><expr><operator pos:line="31" pos:column="42">&amp;<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="43">desc<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="49">&amp;<pos:position pos:line="31" pos:column="54"/></operator><name pos:line="31" pos:column="50">name<pos:position pos:line="31" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="56">&amp;<pos:position pos:line="31" pos:column="61"/></operator><name pos:line="31" pos:column="57">mode<pos:position pos:line="31" pos:column="61"/></name></expr></argument>)<pos:position pos:line="31" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="63"/></expr_stmt>

		<expr_stmt><expr><name pos:line="33" pos:column="17">has_null_sha1<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">|=<pos:position pos:line="33" pos:column="33"/></operator> <call><name pos:line="33" pos:column="34">is_null_oid<pos:position pos:line="33" pos:column="45"/></name><argument_list pos:line="33" pos:column="45">(<argument><expr><name pos:line="33" pos:column="46">oid<pos:position pos:line="33" pos:column="49"/></name></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">has_full_path<pos:position pos:line="34" pos:column="30"/></name> <operator pos:line="34" pos:column="31">|=<pos:position pos:line="34" pos:column="33"/></operator> <operator pos:line="34" pos:column="34">!<pos:position pos:line="34" pos:column="35"/></operator><operator pos:line="34" pos:column="35">!<pos:position pos:line="34" pos:column="36"/></operator><call><name pos:line="34" pos:column="36">strchr<pos:position pos:line="34" pos:column="42"/></name><argument_list pos:line="34" pos:column="42">(<argument><expr><name pos:line="34" pos:column="43">name<pos:position pos:line="34" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="34" pos:column="49">'/'<pos:position pos:line="34" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name pos:line="35" pos:column="17">has_empty_name<pos:position pos:line="35" pos:column="31"/></name> <operator pos:line="35" pos:column="32">|=<pos:position pos:line="35" pos:column="34"/></operator> <operator pos:line="35" pos:column="35">!<pos:position pos:line="35" pos:column="36"/></operator><operator pos:line="35" pos:column="36">*<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="37">name<pos:position pos:line="35" pos:column="41"/></name></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="36" pos:column="17">has_dot<pos:position pos:line="36" pos:column="24"/></name> <operator pos:line="36" pos:column="25">|=<pos:position pos:line="36" pos:column="27"/></operator> <operator pos:line="36" pos:column="28">!<pos:position pos:line="36" pos:column="29"/></operator><call><name pos:line="36" pos:column="29">strcmp<pos:position pos:line="36" pos:column="35"/></name><argument_list pos:line="36" pos:column="35">(<argument><expr><name pos:line="36" pos:column="36">name<pos:position pos:line="36" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="42">"."<pos:position pos:line="36" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name pos:line="37" pos:column="17">has_dotdot<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">|=<pos:position pos:line="37" pos:column="30"/></operator> <operator pos:line="37" pos:column="31">!<pos:position pos:line="37" pos:column="32"/></operator><call><name pos:line="37" pos:column="32">strcmp<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name pos:line="37" pos:column="39">name<pos:position pos:line="37" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="45">".."<pos:position pos:line="37" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name pos:line="38" pos:column="17">has_dotgit<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">|=<pos:position pos:line="38" pos:column="30"/></operator> <operator pos:line="38" pos:column="31">(<pos:position pos:line="38" pos:column="32"/></operator><operator pos:line="38" pos:column="32">!<pos:position pos:line="38" pos:column="33"/></operator><call><name pos:line="38" pos:column="33">strcmp<pos:position pos:line="38" pos:column="39"/></name><argument_list pos:line="38" pos:column="39">(<argument><expr><name pos:line="38" pos:column="40">name<pos:position pos:line="38" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="46">".git"<pos:position pos:line="38" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></call> <operator pos:line="38" pos:column="54">||<pos:position pos:line="38" pos:column="56"/></operator>
			       <call><name pos:line="39" pos:column="32">is_hfs_dotgit<pos:position pos:line="39" pos:column="45"/></name><argument_list pos:line="39" pos:column="45">(<argument><expr><name pos:line="39" pos:column="46">name<pos:position pos:line="39" pos:column="50"/></name></expr></argument>)<pos:position pos:line="39" pos:column="51"/></argument_list></call> <operator pos:line="39" pos:column="52">||<pos:position pos:line="39" pos:column="54"/></operator>
			       <call><name pos:line="40" pos:column="32">is_ntfs_dotgit<pos:position pos:line="40" pos:column="46"/></name><argument_list pos:line="40" pos:column="46">(<argument><expr><name pos:line="40" pos:column="47">name<pos:position pos:line="40" pos:column="51"/></name></expr></argument>)<pos:position pos:line="40" pos:column="52"/></argument_list></call><operator pos:line="40" pos:column="52">)<pos:position pos:line="40" pos:column="53"/></operator></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">has_zero_pad<pos:position pos:line="41" pos:column="29"/></name> <operator pos:line="41" pos:column="30">|=<pos:position pos:line="41" pos:column="32"/></operator> <operator pos:line="41" pos:column="33">*<pos:position pos:line="41" pos:column="34"/></operator><operator pos:line="41" pos:column="34">(<pos:position pos:line="41" pos:column="35"/></operator><name pos:line="41" pos:column="35">char<pos:position pos:line="41" pos:column="39"/></name> <operator pos:line="41" pos:column="40">*<pos:position pos:line="41" pos:column="41"/></operator><operator pos:line="41" pos:column="41">)<pos:position pos:line="41" pos:column="42"/></operator><name><name pos:line="41" pos:column="42">desc<pos:position pos:line="41" pos:column="46"/></name><operator pos:line="41" pos:column="46">.<pos:position pos:line="41" pos:column="47"/></operator><name pos:line="41" pos:column="47">buffer<pos:position pos:line="41" pos:column="53"/></name></name> <operator pos:line="41" pos:column="54">==<pos:position pos:line="41" pos:column="56"/></operator> <literal type="char" pos:line="41" pos:column="57">'0'<pos:position pos:line="41" pos:column="60"/></literal></expr>;<pos:position pos:line="41" pos:column="61"/></expr_stmt>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><call><name pos:line="42" pos:column="21">update_tree_entry_gently<pos:position pos:line="42" pos:column="45"/></name><argument_list pos:line="42" pos:column="45">(<argument><expr><operator pos:line="42" pos:column="46">&amp;<pos:position pos:line="42" pos:column="51"/></operator><name pos:line="42" pos:column="47">desc<pos:position pos:line="42" pos:column="51"/></name></expr></argument>)<pos:position pos:line="42" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="53"/></condition><then pos:line="42" pos:column="53"> <block pos:line="42" pos:column="54">{
			<expr_stmt><expr><name pos:line="43" pos:column="25">retval<pos:position pos:line="43" pos:column="31"/></name> <operator pos:line="43" pos:column="32">+=<pos:position pos:line="43" pos:column="34"/></operator> <call><name pos:line="43" pos:column="35">report<pos:position pos:line="43" pos:column="41"/></name><argument_list pos:line="43" pos:column="41">(<argument><expr><name pos:line="43" pos:column="42">options<pos:position pos:line="43" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="51">&amp;<pos:position pos:line="43" pos:column="56"/></operator><name><name pos:line="43" pos:column="52">item<pos:position pos:line="43" pos:column="56"/></name><operator pos:line="43" pos:column="56">-&gt;<pos:position pos:line="43" pos:column="61"/></operator><name pos:line="43" pos:column="58">object<pos:position pos:line="43" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="66">FSCK_MSG_BAD_TREE<pos:position pos:line="43" pos:column="83"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="85">"cannot be parsed as a tree"<pos:position pos:line="43" pos:column="113"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="115"/></expr_stmt>
			<break pos:line="44" pos:column="25">break;<pos:position pos:line="44" pos:column="31"/></break>
		}<pos:position pos:line="45" pos:column="18"/></block></then></if>

		<switch pos:line="47" pos:column="17">switch <condition pos:line="47" pos:column="24">(<expr><name pos:line="47" pos:column="25">mode<pos:position pos:line="47" pos:column="29"/></name></expr>)<pos:position pos:line="47" pos:column="30"/></condition> <block pos:line="47" pos:column="31">{
		<comment type="block" pos:line="48" pos:column="17">/*
		 * Standard modes..
		 */</comment>
		<case pos:line="51" pos:column="17">case <expr><name pos:line="51" pos:column="22">S_IFREG<pos:position pos:line="51" pos:column="29"/></name> <operator pos:line="51" pos:column="30">|<pos:position pos:line="51" pos:column="31"/></operator> <literal type="number" pos:line="51" pos:column="32">0755<pos:position pos:line="51" pos:column="36"/></literal></expr>:<pos:position pos:line="51" pos:column="37"/></case>
		<case pos:line="52" pos:column="17">case <expr><name pos:line="52" pos:column="22">S_IFREG<pos:position pos:line="52" pos:column="29"/></name> <operator pos:line="52" pos:column="30">|<pos:position pos:line="52" pos:column="31"/></operator> <literal type="number" pos:line="52" pos:column="32">0644<pos:position pos:line="52" pos:column="36"/></literal></expr>:<pos:position pos:line="52" pos:column="37"/></case>
		<case pos:line="53" pos:column="17">case <expr><name pos:line="53" pos:column="22">S_IFLNK<pos:position pos:line="53" pos:column="29"/></name></expr>:<pos:position pos:line="53" pos:column="30"/></case>
		<case pos:line="54" pos:column="17">case <expr><name pos:line="54" pos:column="22">S_IFDIR<pos:position pos:line="54" pos:column="29"/></name></expr>:<pos:position pos:line="54" pos:column="30"/></case>
		<case pos:line="55" pos:column="17">case <expr><name pos:line="55" pos:column="22">S_IFGITLINK<pos:position pos:line="55" pos:column="33"/></name></expr>:<pos:position pos:line="55" pos:column="34"/></case>
			<break pos:line="56" pos:column="25">break;<pos:position pos:line="56" pos:column="31"/></break>
		<comment type="block" pos:line="57" pos:column="17">/*
		 * This is nonstandard, but we had a few of these
		 * early on when we honored the full set of mode
		 * bits..
		 */</comment>
		<case pos:line="62" pos:column="17">case <expr><name pos:line="62" pos:column="22">S_IFREG<pos:position pos:line="62" pos:column="29"/></name> <operator pos:line="62" pos:column="30">|<pos:position pos:line="62" pos:column="31"/></operator> <literal type="number" pos:line="62" pos:column="32">0664<pos:position pos:line="62" pos:column="36"/></literal></expr>:<pos:position pos:line="62" pos:column="37"/></case>
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><operator pos:line="63" pos:column="29">!<pos:position pos:line="63" pos:column="30"/></operator><name><name pos:line="63" pos:column="30">options<pos:position pos:line="63" pos:column="37"/></name><operator pos:line="63" pos:column="37">-&gt;<pos:position pos:line="63" pos:column="42"/></operator><name pos:line="63" pos:column="39">strict<pos:position pos:line="63" pos:column="45"/></name></name></expr>)<pos:position pos:line="63" pos:column="46"/></condition><then pos:line="63" pos:column="46">
				<block type="pseudo"><break pos:line="64" pos:column="33">break;<pos:position pos:line="64" pos:column="39"/></break></block></then></if>
		<default pos:line="65" pos:column="17">default:<pos:position pos:line="65" pos:column="25"/></default>
			<expr_stmt><expr><name pos:line="66" pos:column="25">has_bad_modes<pos:position pos:line="66" pos:column="38"/></name> <operator pos:line="66" pos:column="39">=<pos:position pos:line="66" pos:column="40"/></operator> <literal type="number" pos:line="66" pos:column="41">1<pos:position pos:line="66" pos:column="42"/></literal></expr>;<pos:position pos:line="66" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="67" pos:column="18"/></block></switch>

		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">o_name<pos:position pos:line="69" pos:column="27"/></name></expr>)<pos:position pos:line="69" pos:column="28"/></condition><then pos:line="69" pos:column="28"> <block pos:line="69" pos:column="29">{
			<switch pos:line="70" pos:column="25">switch <condition pos:line="70" pos:column="32">(<expr><call><name pos:line="70" pos:column="33">verify_ordered<pos:position pos:line="70" pos:column="47"/></name><argument_list pos:line="70" pos:column="47">(<argument><expr><name pos:line="70" pos:column="48">o_mode<pos:position pos:line="70" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="56">o_name<pos:position pos:line="70" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="64">mode<pos:position pos:line="70" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="70">name<pos:position pos:line="70" pos:column="74"/></name></expr></argument>)<pos:position pos:line="70" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="76"/></condition> <block pos:line="70" pos:column="77">{
			<case pos:line="71" pos:column="25">case <expr><name pos:line="71" pos:column="30">TREE_UNORDERED<pos:position pos:line="71" pos:column="44"/></name></expr>:<pos:position pos:line="71" pos:column="45"/></case>
				<expr_stmt><expr><name pos:line="72" pos:column="33">not_properly_sorted<pos:position pos:line="72" pos:column="52"/></name> <operator pos:line="72" pos:column="53">=<pos:position pos:line="72" pos:column="54"/></operator> <literal type="number" pos:line="72" pos:column="55">1<pos:position pos:line="72" pos:column="56"/></literal></expr>;<pos:position pos:line="72" pos:column="57"/></expr_stmt>
				<break pos:line="73" pos:column="33">break;<pos:position pos:line="73" pos:column="39"/></break>
			<case pos:line="74" pos:column="25">case <expr><name pos:line="74" pos:column="30">TREE_HAS_DUPS<pos:position pos:line="74" pos:column="43"/></name></expr>:<pos:position pos:line="74" pos:column="44"/></case>
				<expr_stmt><expr><name pos:line="75" pos:column="33">has_dup_entries<pos:position pos:line="75" pos:column="48"/></name> <operator pos:line="75" pos:column="49">=<pos:position pos:line="75" pos:column="50"/></operator> <literal type="number" pos:line="75" pos:column="51">1<pos:position pos:line="75" pos:column="52"/></literal></expr>;<pos:position pos:line="75" pos:column="53"/></expr_stmt>
				<break pos:line="76" pos:column="33">break;<pos:position pos:line="76" pos:column="39"/></break>
			<default pos:line="77" pos:column="25">default:<pos:position pos:line="77" pos:column="33"/></default>
				<break pos:line="78" pos:column="33">break;<pos:position pos:line="78" pos:column="39"/></break>
			}<pos:position pos:line="79" pos:column="26"/></block></switch>
		}<pos:position pos:line="80" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="82" pos:column="17">o_mode<pos:position pos:line="82" pos:column="23"/></name> <operator pos:line="82" pos:column="24">=<pos:position pos:line="82" pos:column="25"/></operator> <name pos:line="82" pos:column="26">mode<pos:position pos:line="82" pos:column="30"/></name></expr>;<pos:position pos:line="82" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="83" pos:column="17">o_name<pos:position pos:line="83" pos:column="23"/></name> <operator pos:line="83" pos:column="24">=<pos:position pos:line="83" pos:column="25"/></operator> <name pos:line="83" pos:column="26">name<pos:position pos:line="83" pos:column="30"/></name></expr>;<pos:position pos:line="83" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="84" pos:column="10"/></block></while>

	<if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><name pos:line="86" pos:column="13">has_null_sha1<pos:position pos:line="86" pos:column="26"/></name></expr>)<pos:position pos:line="86" pos:column="27"/></condition><then pos:line="86" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="87" pos:column="17">retval<pos:position pos:line="87" pos:column="23"/></name> <operator pos:line="87" pos:column="24">+=<pos:position pos:line="87" pos:column="26"/></operator> <call><name pos:line="87" pos:column="27">report<pos:position pos:line="87" pos:column="33"/></name><argument_list pos:line="87" pos:column="33">(<argument><expr><name pos:line="87" pos:column="34">options<pos:position pos:line="87" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="43">&amp;<pos:position pos:line="87" pos:column="48"/></operator><name><name pos:line="87" pos:column="44">item<pos:position pos:line="87" pos:column="48"/></name><operator pos:line="87" pos:column="48">-&gt;<pos:position pos:line="87" pos:column="53"/></operator><name pos:line="87" pos:column="50">object<pos:position pos:line="87" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="58">FSCK_MSG_NULL_SHA1<pos:position pos:line="87" pos:column="76"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="78">"contains entries pointing to null sha1"<pos:position pos:line="87" pos:column="118"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="120"/></expr_stmt></block></then></if>
	<if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><name pos:line="88" pos:column="13">has_full_path<pos:position pos:line="88" pos:column="26"/></name></expr>)<pos:position pos:line="88" pos:column="27"/></condition><then pos:line="88" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="17">retval<pos:position pos:line="89" pos:column="23"/></name> <operator pos:line="89" pos:column="24">+=<pos:position pos:line="89" pos:column="26"/></operator> <call><name pos:line="89" pos:column="27">report<pos:position pos:line="89" pos:column="33"/></name><argument_list pos:line="89" pos:column="33">(<argument><expr><name pos:line="89" pos:column="34">options<pos:position pos:line="89" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="43">&amp;<pos:position pos:line="89" pos:column="48"/></operator><name><name pos:line="89" pos:column="44">item<pos:position pos:line="89" pos:column="48"/></name><operator pos:line="89" pos:column="48">-&gt;<pos:position pos:line="89" pos:column="53"/></operator><name pos:line="89" pos:column="50">object<pos:position pos:line="89" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="58">FSCK_MSG_FULL_PATHNAME<pos:position pos:line="89" pos:column="80"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="82">"contains full pathnames"<pos:position pos:line="89" pos:column="107"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="109"/></expr_stmt></block></then></if>
	<if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">(<expr><name pos:line="90" pos:column="13">has_empty_name<pos:position pos:line="90" pos:column="27"/></name></expr>)<pos:position pos:line="90" pos:column="28"/></condition><then pos:line="90" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="91" pos:column="17">retval<pos:position pos:line="91" pos:column="23"/></name> <operator pos:line="91" pos:column="24">+=<pos:position pos:line="91" pos:column="26"/></operator> <call><name pos:line="91" pos:column="27">report<pos:position pos:line="91" pos:column="33"/></name><argument_list pos:line="91" pos:column="33">(<argument><expr><name pos:line="91" pos:column="34">options<pos:position pos:line="91" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="91" pos:column="43">&amp;<pos:position pos:line="91" pos:column="48"/></operator><name><name pos:line="91" pos:column="44">item<pos:position pos:line="91" pos:column="48"/></name><operator pos:line="91" pos:column="48">-&gt;<pos:position pos:line="91" pos:column="53"/></operator><name pos:line="91" pos:column="50">object<pos:position pos:line="91" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="58">FSCK_MSG_EMPTY_NAME<pos:position pos:line="91" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="79">"contains empty pathname"<pos:position pos:line="91" pos:column="104"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="106"/></expr_stmt></block></then></if>
	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name pos:line="92" pos:column="13">has_dot<pos:position pos:line="92" pos:column="20"/></name></expr>)<pos:position pos:line="92" pos:column="21"/></condition><then pos:line="92" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="93" pos:column="17">retval<pos:position pos:line="93" pos:column="23"/></name> <operator pos:line="93" pos:column="24">+=<pos:position pos:line="93" pos:column="26"/></operator> <call><name pos:line="93" pos:column="27">report<pos:position pos:line="93" pos:column="33"/></name><argument_list pos:line="93" pos:column="33">(<argument><expr><name pos:line="93" pos:column="34">options<pos:position pos:line="93" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="43">&amp;<pos:position pos:line="93" pos:column="48"/></operator><name><name pos:line="93" pos:column="44">item<pos:position pos:line="93" pos:column="48"/></name><operator pos:line="93" pos:column="48">-&gt;<pos:position pos:line="93" pos:column="53"/></operator><name pos:line="93" pos:column="50">object<pos:position pos:line="93" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="58">FSCK_MSG_HAS_DOT<pos:position pos:line="93" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="76">"contains '.'"<pos:position pos:line="93" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="92"/></expr_stmt></block></then></if>
	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><name pos:line="94" pos:column="13">has_dotdot<pos:position pos:line="94" pos:column="23"/></name></expr>)<pos:position pos:line="94" pos:column="24"/></condition><then pos:line="94" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><name pos:line="95" pos:column="17">retval<pos:position pos:line="95" pos:column="23"/></name> <operator pos:line="95" pos:column="24">+=<pos:position pos:line="95" pos:column="26"/></operator> <call><name pos:line="95" pos:column="27">report<pos:position pos:line="95" pos:column="33"/></name><argument_list pos:line="95" pos:column="33">(<argument><expr><name pos:line="95" pos:column="34">options<pos:position pos:line="95" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="43">&amp;<pos:position pos:line="95" pos:column="48"/></operator><name><name pos:line="95" pos:column="44">item<pos:position pos:line="95" pos:column="48"/></name><operator pos:line="95" pos:column="48">-&gt;<pos:position pos:line="95" pos:column="53"/></operator><name pos:line="95" pos:column="50">object<pos:position pos:line="95" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="58">FSCK_MSG_HAS_DOTDOT<pos:position pos:line="95" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="79">"contains '..'"<pos:position pos:line="95" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="96"/></expr_stmt></block></then></if>
	<if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><name pos:line="96" pos:column="13">has_dotgit<pos:position pos:line="96" pos:column="23"/></name></expr>)<pos:position pos:line="96" pos:column="24"/></condition><then pos:line="96" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><name pos:line="97" pos:column="17">retval<pos:position pos:line="97" pos:column="23"/></name> <operator pos:line="97" pos:column="24">+=<pos:position pos:line="97" pos:column="26"/></operator> <call><name pos:line="97" pos:column="27">report<pos:position pos:line="97" pos:column="33"/></name><argument_list pos:line="97" pos:column="33">(<argument><expr><name pos:line="97" pos:column="34">options<pos:position pos:line="97" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="43">&amp;<pos:position pos:line="97" pos:column="48"/></operator><name><name pos:line="97" pos:column="44">item<pos:position pos:line="97" pos:column="48"/></name><operator pos:line="97" pos:column="48">-&gt;<pos:position pos:line="97" pos:column="53"/></operator><name pos:line="97" pos:column="50">object<pos:position pos:line="97" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="58">FSCK_MSG_HAS_DOTGIT<pos:position pos:line="97" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="79">"contains '.git'"<pos:position pos:line="97" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="98"/></expr_stmt></block></then></if>
	<if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">has_zero_pad<pos:position pos:line="98" pos:column="25"/></name></expr>)<pos:position pos:line="98" pos:column="26"/></condition><then pos:line="98" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="99" pos:column="17">retval<pos:position pos:line="99" pos:column="23"/></name> <operator pos:line="99" pos:column="24">+=<pos:position pos:line="99" pos:column="26"/></operator> <call><name pos:line="99" pos:column="27">report<pos:position pos:line="99" pos:column="33"/></name><argument_list pos:line="99" pos:column="33">(<argument><expr><name pos:line="99" pos:column="34">options<pos:position pos:line="99" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="43">&amp;<pos:position pos:line="99" pos:column="48"/></operator><name><name pos:line="99" pos:column="44">item<pos:position pos:line="99" pos:column="48"/></name><operator pos:line="99" pos:column="48">-&gt;<pos:position pos:line="99" pos:column="53"/></operator><name pos:line="99" pos:column="50">object<pos:position pos:line="99" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="58">FSCK_MSG_ZERO_PADDED_FILEMODE<pos:position pos:line="99" pos:column="87"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="89">"contains zero-padded file modes"<pos:position pos:line="99" pos:column="122"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="123"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="124"/></expr_stmt></block></then></if>
	<if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><name pos:line="100" pos:column="13">has_bad_modes<pos:position pos:line="100" pos:column="26"/></name></expr>)<pos:position pos:line="100" pos:column="27"/></condition><then pos:line="100" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="101" pos:column="17">retval<pos:position pos:line="101" pos:column="23"/></name> <operator pos:line="101" pos:column="24">+=<pos:position pos:line="101" pos:column="26"/></operator> <call><name pos:line="101" pos:column="27">report<pos:position pos:line="101" pos:column="33"/></name><argument_list pos:line="101" pos:column="33">(<argument><expr><name pos:line="101" pos:column="34">options<pos:position pos:line="101" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="43">&amp;<pos:position pos:line="101" pos:column="48"/></operator><name><name pos:line="101" pos:column="44">item<pos:position pos:line="101" pos:column="48"/></name><operator pos:line="101" pos:column="48">-&gt;<pos:position pos:line="101" pos:column="53"/></operator><name pos:line="101" pos:column="50">object<pos:position pos:line="101" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="58">FSCK_MSG_BAD_FILEMODE<pos:position pos:line="101" pos:column="79"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="81">"contains bad file modes"<pos:position pos:line="101" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="108"/></expr_stmt></block></then></if>
	<if pos:line="102" pos:column="9">if <condition pos:line="102" pos:column="12">(<expr><name pos:line="102" pos:column="13">has_dup_entries<pos:position pos:line="102" pos:column="28"/></name></expr>)<pos:position pos:line="102" pos:column="29"/></condition><then pos:line="102" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="103" pos:column="17">retval<pos:position pos:line="103" pos:column="23"/></name> <operator pos:line="103" pos:column="24">+=<pos:position pos:line="103" pos:column="26"/></operator> <call><name pos:line="103" pos:column="27">report<pos:position pos:line="103" pos:column="33"/></name><argument_list pos:line="103" pos:column="33">(<argument><expr><name pos:line="103" pos:column="34">options<pos:position pos:line="103" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="103" pos:column="43">&amp;<pos:position pos:line="103" pos:column="48"/></operator><name><name pos:line="103" pos:column="44">item<pos:position pos:line="103" pos:column="48"/></name><operator pos:line="103" pos:column="48">-&gt;<pos:position pos:line="103" pos:column="53"/></operator><name pos:line="103" pos:column="50">object<pos:position pos:line="103" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="58">FSCK_MSG_DUPLICATE_ENTRIES<pos:position pos:line="103" pos:column="84"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="86">"contains duplicate file entries"<pos:position pos:line="103" pos:column="119"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="121"/></expr_stmt></block></then></if>
	<if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><name pos:line="104" pos:column="13">not_properly_sorted<pos:position pos:line="104" pos:column="32"/></name></expr>)<pos:position pos:line="104" pos:column="33"/></condition><then pos:line="104" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><name pos:line="105" pos:column="17">retval<pos:position pos:line="105" pos:column="23"/></name> <operator pos:line="105" pos:column="24">+=<pos:position pos:line="105" pos:column="26"/></operator> <call><name pos:line="105" pos:column="27">report<pos:position pos:line="105" pos:column="33"/></name><argument_list pos:line="105" pos:column="33">(<argument><expr><name pos:line="105" pos:column="34">options<pos:position pos:line="105" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="105" pos:column="43">&amp;<pos:position pos:line="105" pos:column="48"/></operator><name><name pos:line="105" pos:column="44">item<pos:position pos:line="105" pos:column="48"/></name><operator pos:line="105" pos:column="48">-&gt;<pos:position pos:line="105" pos:column="53"/></operator><name pos:line="105" pos:column="50">object<pos:position pos:line="105" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="58">FSCK_MSG_TREE_NOT_SORTED<pos:position pos:line="105" pos:column="82"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="84">"not properly sorted"<pos:position pos:line="105" pos:column="105"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="107"/></expr_stmt></block></then></if>
	<return pos:line="106" pos:column="9">return <expr><name pos:line="106" pos:column="16">retval<pos:position pos:line="106" pos:column="22"/></name></expr>;<pos:position pos:line="106" pos:column="23"/></return>
}<pos:position pos:line="107" pos:column="2"/></block></function></unit>
