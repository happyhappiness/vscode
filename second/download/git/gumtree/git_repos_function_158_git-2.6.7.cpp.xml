<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_158_git-2.6.7.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">recv_sideband<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">me<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">in_stream<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">out<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">pf<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><call><name pos:line="3" pos:column="23">strlen<pos:position pos:line="3" pos:column="29"/></name><argument_list pos:line="3" pos:column="29">(<argument><expr><name pos:line="3" pos:column="30">PREFIX<pos:position pos:line="3" pos:column="36"/></name></expr></argument>)<pos:position pos:line="3" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">sf<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">buf<pos:position pos:line="5" pos:column="17"/></name><index pos:line="5" pos:column="17">[<expr><name pos:line="5" pos:column="18">LARGE_PACKET_MAX<pos:position pos:line="5" pos:column="34"/></name> <operator pos:line="5" pos:column="35">+<pos:position pos:line="5" pos:column="36"/></operator> <literal type="number" pos:line="5" pos:column="37">2<pos:position pos:line="5" pos:column="38"/></literal><operator pos:line="5" pos:column="38">*<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="39">FIX_SIZE<pos:position pos:line="5" pos:column="47"/></name></expr>]<pos:position pos:line="5" pos:column="48"/></index></name></decl>;<pos:position pos:line="5" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">suffix<pos:position pos:line="6" pos:column="21"/></name></decl>, <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="24">term<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">skip_pf<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">memcpy<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">buf<pos:position pos:line="9" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="21">PREFIX<pos:position pos:line="9" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="29">pf<pos:position pos:line="9" pos:column="31"/></name></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="10" pos:column="9">term<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">=<pos:position pos:line="10" pos:column="15"/></operator> <call><name pos:line="10" pos:column="16">getenv<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><literal type="string" pos:line="10" pos:column="23">"TERM"<pos:position pos:line="10" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">isatty<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><literal type="number" pos:line="11" pos:column="20">2<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="22"/></argument_list></call> <operator pos:line="11" pos:column="23">&amp;&amp;<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="26">term<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">&amp;&amp;<pos:position pos:line="11" pos:column="41"/></operator> <call><name pos:line="11" pos:column="34">strcmp<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">term<pos:position pos:line="11" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="47">"dumb"<pos:position pos:line="11" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="55"/></condition><then pos:line="11" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">suffix<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <name pos:line="12" pos:column="26">ANSI_SUFFIX<pos:position pos:line="12" pos:column="37"/></name></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt></block></then>
	<else pos:line="13" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="17">suffix<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <name pos:line="14" pos:column="26">DUMB_SUFFIX<pos:position pos:line="14" pos:column="37"/></name></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt></block></else></if>
	<expr_stmt><expr><name pos:line="15" pos:column="9">sf<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <call><name pos:line="15" pos:column="14">strlen<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">suffix<pos:position pos:line="15" pos:column="27"/></name></expr></argument>)<pos:position pos:line="15" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>

	<while pos:line="17" pos:column="9">while <condition pos:line="17" pos:column="15">(<expr><literal type="number" pos:line="17" pos:column="16">1<pos:position pos:line="17" pos:column="17"/></literal></expr>)<pos:position pos:line="17" pos:column="18"/></condition> <block pos:line="17" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">int<pos:position pos:line="18" pos:column="20"/></name></type> <name pos:line="18" pos:column="21">band<pos:position pos:line="18" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="18" pos:column="27">len<pos:position pos:line="18" pos:column="30"/></name></decl>;<pos:position pos:line="18" pos:column="31"/></decl_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">len<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <call><name pos:line="19" pos:column="23">packet_read<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><name pos:line="19" pos:column="35">in_stream<pos:position pos:line="19" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="46">NULL<pos:position pos:line="19" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="52">NULL<pos:position pos:line="19" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="58">buf<pos:position pos:line="19" pos:column="61"/></name> <operator pos:line="19" pos:column="62">+<pos:position pos:line="19" pos:column="63"/></operator> <name pos:line="19" pos:column="64">pf<pos:position pos:line="19" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="68">LARGE_PACKET_MAX<pos:position pos:line="19" pos:column="84"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="86">0<pos:position pos:line="19" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="89"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">len<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">==<pos:position pos:line="20" pos:column="27"/></operator> <literal type="number" pos:line="20" pos:column="28">0<pos:position pos:line="20" pos:column="29"/></literal></expr>)<pos:position pos:line="20" pos:column="30"/></condition><then pos:line="20" pos:column="30">
			<block type="pseudo"><break pos:line="21" pos:column="25">break;<pos:position pos:line="21" pos:column="31"/></break></block></then></if>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">len<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">&lt;<pos:position pos:line="22" pos:column="29"/></operator> <literal type="number" pos:line="22" pos:column="27">1<pos:position pos:line="22" pos:column="28"/></literal></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29"> <block pos:line="22" pos:column="30">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">fprintf<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">stderr<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="41">"%s: protocol error: no band designator\n"<pos:position pos:line="23" pos:column="83"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="85">me<pos:position pos:line="23" pos:column="87"/></name></expr></argument>)<pos:position pos:line="23" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="89"/></expr_stmt>
			<return pos:line="24" pos:column="25">return <expr><name pos:line="24" pos:column="32">SIDEBAND_PROTOCOL_ERROR<pos:position pos:line="24" pos:column="55"/></name></expr>;<pos:position pos:line="24" pos:column="56"/></return>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="26" pos:column="17">band<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">=<pos:position pos:line="26" pos:column="23"/></operator> <name><name pos:line="26" pos:column="24">buf<pos:position pos:line="26" pos:column="27"/></name><index pos:line="26" pos:column="27">[<expr><name pos:line="26" pos:column="28">pf<pos:position pos:line="26" pos:column="30"/></name></expr>]<pos:position pos:line="26" pos:column="31"/></index></name> <operator pos:line="26" pos:column="32">&amp;<pos:position pos:line="26" pos:column="37"/></operator> <literal type="number" pos:line="26" pos:column="34">0xff<pos:position pos:line="26" pos:column="38"/></literal></expr>;<pos:position pos:line="26" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name pos:line="27" pos:column="17">len<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">--<pos:position pos:line="27" pos:column="22"/></operator></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
		<switch pos:line="28" pos:column="17">switch <condition pos:line="28" pos:column="24">(<expr><name pos:line="28" pos:column="25">band<pos:position pos:line="28" pos:column="29"/></name></expr>)<pos:position pos:line="28" pos:column="30"/></condition> <block pos:line="28" pos:column="31">{
		<case pos:line="29" pos:column="17">case <expr><literal type="number" pos:line="29" pos:column="22">3<pos:position pos:line="29" pos:column="23"/></literal></expr>:<pos:position pos:line="29" pos:column="24"/></case>
			<expr_stmt><expr><name><name pos:line="30" pos:column="25">buf<pos:position pos:line="30" pos:column="28"/></name><index pos:line="30" pos:column="28">[<expr><name pos:line="30" pos:column="29">pf<pos:position pos:line="30" pos:column="31"/></name></expr>]<pos:position pos:line="30" pos:column="32"/></index></name> <operator pos:line="30" pos:column="33">=<pos:position pos:line="30" pos:column="34"/></operator> <literal type="char" pos:line="30" pos:column="35">' '<pos:position pos:line="30" pos:column="38"/></literal></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="31" pos:column="25">buf<pos:position pos:line="31" pos:column="28"/></name><index pos:line="31" pos:column="28">[<expr><name pos:line="31" pos:column="29">pf<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">+<pos:position pos:line="31" pos:column="32"/></operator><literal type="number" pos:line="31" pos:column="32">1<pos:position pos:line="31" pos:column="33"/></literal><operator pos:line="31" pos:column="33">+<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">len<pos:position pos:line="31" pos:column="37"/></name></expr>]<pos:position pos:line="31" pos:column="38"/></index></name> <operator pos:line="31" pos:column="39">=<pos:position pos:line="31" pos:column="40"/></operator> <literal type="char" pos:line="31" pos:column="41">'\0'<pos:position pos:line="31" pos:column="45"/></literal></expr>;<pos:position pos:line="31" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">fprintf<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">stderr<pos:position pos:line="32" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="41">"%s\n"<pos:position pos:line="32" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="49">buf<pos:position pos:line="32" pos:column="52"/></name></expr></argument>)<pos:position pos:line="32" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="54"/></expr_stmt>
			<return pos:line="33" pos:column="25">return <expr><name pos:line="33" pos:column="32">SIDEBAND_REMOTE_ERROR<pos:position pos:line="33" pos:column="53"/></name></expr>;<pos:position pos:line="33" pos:column="54"/></return>
		<case pos:line="34" pos:column="17">case <expr><literal type="number" pos:line="34" pos:column="22">2<pos:position pos:line="34" pos:column="23"/></literal></expr>:<pos:position pos:line="34" pos:column="24"/></case>
			<expr_stmt><expr><name><name pos:line="35" pos:column="25">buf<pos:position pos:line="35" pos:column="28"/></name><index pos:line="35" pos:column="28">[<expr><name pos:line="35" pos:column="29">pf<pos:position pos:line="35" pos:column="31"/></name></expr>]<pos:position pos:line="35" pos:column="32"/></index></name> <operator pos:line="35" pos:column="33">=<pos:position pos:line="35" pos:column="34"/></operator> <literal type="char" pos:line="35" pos:column="35">' '<pos:position pos:line="35" pos:column="38"/></literal></expr>;<pos:position pos:line="35" pos:column="39"/></expr_stmt>
			<do pos:line="36" pos:column="25">do <block pos:line="36" pos:column="28">{
				<decl_stmt><decl><type><name pos:line="37" pos:column="33">char<pos:position pos:line="37" pos:column="37"/></name> <modifier pos:line="37" pos:column="38">*<pos:position pos:line="37" pos:column="39"/></modifier></type><name pos:line="37" pos:column="39">b<pos:position pos:line="37" pos:column="40"/></name> <init pos:line="37" pos:column="41">= <expr><name pos:line="37" pos:column="43">buf<pos:position pos:line="37" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="37" pos:column="47"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="38" pos:column="33">int<pos:position pos:line="38" pos:column="36"/></name></type> <name pos:line="38" pos:column="37">brk<pos:position pos:line="38" pos:column="40"/></name> <init pos:line="38" pos:column="41">= <expr><literal type="number" pos:line="38" pos:column="43">0<pos:position pos:line="38" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="38" pos:column="45"/></decl_stmt>

				<comment type="block" pos:line="40" pos:column="33">/*
				 * If the last buffer didn't end with a line
				 * break then we should not print a prefix
				 * this time around.
				 */</comment>
				<if pos:line="45" pos:column="33">if <condition pos:line="45" pos:column="36">(<expr><name pos:line="45" pos:column="37">skip_pf<pos:position pos:line="45" pos:column="44"/></name></expr>)<pos:position pos:line="45" pos:column="45"/></condition><then pos:line="45" pos:column="45"> <block pos:line="45" pos:column="46">{
					<expr_stmt><expr><name pos:line="46" pos:column="41">b<pos:position pos:line="46" pos:column="42"/></name> <operator pos:line="46" pos:column="43">+=<pos:position pos:line="46" pos:column="45"/></operator> <name pos:line="46" pos:column="46">pf<pos:position pos:line="46" pos:column="48"/></name><operator pos:line="46" pos:column="48">+<pos:position pos:line="46" pos:column="49"/></operator><literal type="number" pos:line="46" pos:column="49">1<pos:position pos:line="46" pos:column="50"/></literal></expr>;<pos:position pos:line="46" pos:column="51"/></expr_stmt>
				}<pos:position pos:line="47" pos:column="34"/></block></then> <else pos:line="47" pos:column="35">else <block pos:line="47" pos:column="40">{
					<expr_stmt><expr><name pos:line="48" pos:column="41">len<pos:position pos:line="48" pos:column="44"/></name> <operator pos:line="48" pos:column="45">+=<pos:position pos:line="48" pos:column="47"/></operator> <name pos:line="48" pos:column="48">pf<pos:position pos:line="48" pos:column="50"/></name><operator pos:line="48" pos:column="50">+<pos:position pos:line="48" pos:column="51"/></operator><literal type="number" pos:line="48" pos:column="51">1<pos:position pos:line="48" pos:column="52"/></literal></expr>;<pos:position pos:line="48" pos:column="53"/></expr_stmt>
					<expr_stmt><expr><name pos:line="49" pos:column="41">brk<pos:position pos:line="49" pos:column="44"/></name> <operator pos:line="49" pos:column="45">+=<pos:position pos:line="49" pos:column="47"/></operator> <name pos:line="49" pos:column="48">pf<pos:position pos:line="49" pos:column="50"/></name><operator pos:line="49" pos:column="50">+<pos:position pos:line="49" pos:column="51"/></operator><literal type="number" pos:line="49" pos:column="51">1<pos:position pos:line="49" pos:column="52"/></literal></expr>;<pos:position pos:line="49" pos:column="53"/></expr_stmt>
				}<pos:position pos:line="50" pos:column="34"/></block></else></if>

				<comment type="block" pos:line="52" pos:column="33">/* Look for a line break. */</comment>
				<for pos:line="53" pos:column="33">for <control pos:line="53" pos:column="37">(<init pos:line="53" pos:column="38">;<pos:position pos:line="53" pos:column="39"/></init><condition pos:line="53" pos:column="39">;<pos:position pos:line="53" pos:column="40"/></condition><incr/>)<pos:position pos:line="53" pos:column="41"/></control> <block pos:line="53" pos:column="42">{
					<expr_stmt><expr><name pos:line="54" pos:column="41">brk<pos:position pos:line="54" pos:column="44"/></name><operator pos:line="54" pos:column="44">++<pos:position pos:line="54" pos:column="46"/></operator></expr>;<pos:position pos:line="54" pos:column="47"/></expr_stmt>
					<if pos:line="55" pos:column="41">if <condition pos:line="55" pos:column="44">(<expr><name pos:line="55" pos:column="45">brk<pos:position pos:line="55" pos:column="48"/></name> <operator pos:line="55" pos:column="49">&gt;<pos:position pos:line="55" pos:column="53"/></operator> <name pos:line="55" pos:column="51">len<pos:position pos:line="55" pos:column="54"/></name></expr>)<pos:position pos:line="55" pos:column="55"/></condition><then pos:line="55" pos:column="55"> <block pos:line="55" pos:column="56">{
						<expr_stmt><expr><name pos:line="56" pos:column="49">brk<pos:position pos:line="56" pos:column="52"/></name> <operator pos:line="56" pos:column="53">=<pos:position pos:line="56" pos:column="54"/></operator> <literal type="number" pos:line="56" pos:column="55">0<pos:position pos:line="56" pos:column="56"/></literal></expr>;<pos:position pos:line="56" pos:column="57"/></expr_stmt>
						<break pos:line="57" pos:column="49">break;<pos:position pos:line="57" pos:column="55"/></break>
					}<pos:position pos:line="58" pos:column="42"/></block></then></if>
					<if pos:line="59" pos:column="41">if <condition pos:line="59" pos:column="44">(<expr><name><name pos:line="59" pos:column="45">b<pos:position pos:line="59" pos:column="46"/></name><index pos:line="59" pos:column="46">[<expr><name pos:line="59" pos:column="47">brk<pos:position pos:line="59" pos:column="50"/></name><operator pos:line="59" pos:column="50">-<pos:position pos:line="59" pos:column="51"/></operator><literal type="number" pos:line="59" pos:column="51">1<pos:position pos:line="59" pos:column="52"/></literal></expr>]<pos:position pos:line="59" pos:column="53"/></index></name> <operator pos:line="59" pos:column="54">==<pos:position pos:line="59" pos:column="56"/></operator> <literal type="char" pos:line="59" pos:column="57">'\n'<pos:position pos:line="59" pos:column="61"/></literal> <operator pos:line="59" pos:column="62">||<pos:position pos:line="59" pos:column="64"/></operator>
					    <name><name pos:line="60" pos:column="45">b<pos:position pos:line="60" pos:column="46"/></name><index pos:line="60" pos:column="46">[<expr><name pos:line="60" pos:column="47">brk<pos:position pos:line="60" pos:column="50"/></name><operator pos:line="60" pos:column="50">-<pos:position pos:line="60" pos:column="51"/></operator><literal type="number" pos:line="60" pos:column="51">1<pos:position pos:line="60" pos:column="52"/></literal></expr>]<pos:position pos:line="60" pos:column="53"/></index></name> <operator pos:line="60" pos:column="54">==<pos:position pos:line="60" pos:column="56"/></operator> <literal type="char" pos:line="60" pos:column="57">'\r'<pos:position pos:line="60" pos:column="61"/></literal></expr>)<pos:position pos:line="60" pos:column="62"/></condition><then pos:line="60" pos:column="62">
						<block type="pseudo"><break pos:line="61" pos:column="49">break;<pos:position pos:line="61" pos:column="55"/></break></block></then></if>
				}<pos:position pos:line="62" pos:column="34"/></block></for>

				<comment type="block" pos:line="64" pos:column="33">/*
				 * Let's insert a suffix to clear the end
				 * of the screen line if a line break was
				 * found.  Also, if we don't skip the
				 * prefix, then a non-empty string must be
				 * present too.
				 */</comment>
				<if pos:line="71" pos:column="33">if <condition pos:line="71" pos:column="36">(<expr><name pos:line="71" pos:column="37">brk<pos:position pos:line="71" pos:column="40"/></name> <operator pos:line="71" pos:column="41">&gt;<pos:position pos:line="71" pos:column="45"/></operator> <operator pos:line="71" pos:column="43">(<pos:position pos:line="71" pos:column="44"/></operator><ternary><condition><expr><name pos:line="71" pos:column="44">skip_pf<pos:position pos:line="71" pos:column="51"/></name></expr> ?<pos:position pos:line="71" pos:column="53"/></condition><then pos:line="71" pos:column="53"> <expr><literal type="number" pos:line="71" pos:column="54">0<pos:position pos:line="71" pos:column="55"/></literal></expr> <pos:position pos:line="71" pos:column="56"/></then><else pos:line="71" pos:column="56">: <expr><operator pos:line="71" pos:column="58">(<pos:position pos:line="71" pos:column="59"/></operator><name pos:line="71" pos:column="59">pf<pos:position pos:line="71" pos:column="61"/></name><operator pos:line="71" pos:column="61">+<pos:position pos:line="71" pos:column="62"/></operator><literal type="number" pos:line="71" pos:column="62">1<pos:position pos:line="71" pos:column="63"/></literal> <operator pos:line="71" pos:column="64">+<pos:position pos:line="71" pos:column="65"/></operator> <literal type="number" pos:line="71" pos:column="66">1<pos:position pos:line="71" pos:column="67"/></literal><operator pos:line="71" pos:column="67">)<pos:position pos:line="71" pos:column="68"/></operator></expr></else></ternary><operator pos:line="71" pos:column="68">)<pos:position pos:line="71" pos:column="69"/></operator></expr>)<pos:position pos:line="71" pos:column="70"/></condition><then pos:line="71" pos:column="70"> <block pos:line="71" pos:column="71">{
					<decl_stmt><decl><type><name pos:line="72" pos:column="41">char<pos:position pos:line="72" pos:column="45"/></name></type> <name><name pos:line="72" pos:column="46">save<pos:position pos:line="72" pos:column="50"/></name><index pos:line="72" pos:column="50">[<expr><name pos:line="72" pos:column="51">FIX_SIZE<pos:position pos:line="72" pos:column="59"/></name></expr>]<pos:position pos:line="72" pos:column="60"/></index></name></decl>;<pos:position pos:line="72" pos:column="61"/></decl_stmt>
					<expr_stmt><expr><call><name pos:line="73" pos:column="41">memcpy<pos:position pos:line="73" pos:column="47"/></name><argument_list pos:line="73" pos:column="47">(<argument><expr><name pos:line="73" pos:column="48">save<pos:position pos:line="73" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="54">b<pos:position pos:line="73" pos:column="55"/></name> <operator pos:line="73" pos:column="56">+<pos:position pos:line="73" pos:column="57"/></operator> <name pos:line="73" pos:column="58">brk<pos:position pos:line="73" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="63">sf<pos:position pos:line="73" pos:column="65"/></name></expr></argument>)<pos:position pos:line="73" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="67"/></expr_stmt>
					<expr_stmt><expr><name><name pos:line="74" pos:column="41">b<pos:position pos:line="74" pos:column="42"/></name><index pos:line="74" pos:column="42">[<expr><name pos:line="74" pos:column="43">brk<pos:position pos:line="74" pos:column="46"/></name> <operator pos:line="74" pos:column="47">+<pos:position pos:line="74" pos:column="48"/></operator> <name pos:line="74" pos:column="49">sf<pos:position pos:line="74" pos:column="51"/></name> <operator pos:line="74" pos:column="52">-<pos:position pos:line="74" pos:column="53"/></operator> <literal type="number" pos:line="74" pos:column="54">1<pos:position pos:line="74" pos:column="55"/></literal></expr>]<pos:position pos:line="74" pos:column="56"/></index></name> <operator pos:line="74" pos:column="57">=<pos:position pos:line="74" pos:column="58"/></operator> <name><name pos:line="74" pos:column="59">b<pos:position pos:line="74" pos:column="60"/></name><index pos:line="74" pos:column="60">[<expr><name pos:line="74" pos:column="61">brk<pos:position pos:line="74" pos:column="64"/></name> <operator pos:line="74" pos:column="65">-<pos:position pos:line="74" pos:column="66"/></operator> <literal type="number" pos:line="74" pos:column="67">1<pos:position pos:line="74" pos:column="68"/></literal></expr>]<pos:position pos:line="74" pos:column="69"/></index></name></expr>;<pos:position pos:line="74" pos:column="70"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="75" pos:column="41">memcpy<pos:position pos:line="75" pos:column="47"/></name><argument_list pos:line="75" pos:column="47">(<argument><expr><name pos:line="75" pos:column="48">b<pos:position pos:line="75" pos:column="49"/></name> <operator pos:line="75" pos:column="50">+<pos:position pos:line="75" pos:column="51"/></operator> <name pos:line="75" pos:column="52">brk<pos:position pos:line="75" pos:column="55"/></name> <operator pos:line="75" pos:column="56">-<pos:position pos:line="75" pos:column="57"/></operator> <literal type="number" pos:line="75" pos:column="58">1<pos:position pos:line="75" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="61">suffix<pos:position pos:line="75" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="69">sf<pos:position pos:line="75" pos:column="71"/></name></expr></argument>)<pos:position pos:line="75" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="73"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="76" pos:column="41">fprintf<pos:position pos:line="76" pos:column="48"/></name><argument_list pos:line="76" pos:column="48">(<argument><expr><name pos:line="76" pos:column="49">stderr<pos:position pos:line="76" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="57">"%.*s"<pos:position pos:line="76" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="65">brk<pos:position pos:line="76" pos:column="68"/></name> <operator pos:line="76" pos:column="69">+<pos:position pos:line="76" pos:column="70"/></operator> <name pos:line="76" pos:column="71">sf<pos:position pos:line="76" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="75">b<pos:position pos:line="76" pos:column="76"/></name></expr></argument>)<pos:position pos:line="76" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="78"/></expr_stmt>
					<expr_stmt><expr><call><name pos:line="77" pos:column="41">memcpy<pos:position pos:line="77" pos:column="47"/></name><argument_list pos:line="77" pos:column="47">(<argument><expr><name pos:line="77" pos:column="48">b<pos:position pos:line="77" pos:column="49"/></name> <operator pos:line="77" pos:column="50">+<pos:position pos:line="77" pos:column="51"/></operator> <name pos:line="77" pos:column="52">brk<pos:position pos:line="77" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="57">save<pos:position pos:line="77" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="63">sf<pos:position pos:line="77" pos:column="65"/></name></expr></argument>)<pos:position pos:line="77" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="67"/></expr_stmt>
					<expr_stmt><expr><name pos:line="78" pos:column="41">len<pos:position pos:line="78" pos:column="44"/></name> <operator pos:line="78" pos:column="45">-=<pos:position pos:line="78" pos:column="47"/></operator> <name pos:line="78" pos:column="48">brk<pos:position pos:line="78" pos:column="51"/></name></expr>;<pos:position pos:line="78" pos:column="52"/></expr_stmt>
				}<pos:position pos:line="79" pos:column="34"/></block></then> <else pos:line="79" pos:column="35">else <block pos:line="79" pos:column="40">{
					<decl_stmt><decl><type><name pos:line="80" pos:column="41">int<pos:position pos:line="80" pos:column="44"/></name></type> <name pos:line="80" pos:column="45">l<pos:position pos:line="80" pos:column="46"/></name> <init pos:line="80" pos:column="47">= <expr><ternary><condition><expr><name pos:line="80" pos:column="49">brk<pos:position pos:line="80" pos:column="52"/></name></expr> ?<pos:position pos:line="80" pos:column="54"/></condition><then pos:line="80" pos:column="54"> <expr><name pos:line="80" pos:column="55">brk<pos:position pos:line="80" pos:column="58"/></name></expr> <pos:position pos:line="80" pos:column="59"/></then><else pos:line="80" pos:column="59">: <expr><name pos:line="80" pos:column="61">len<pos:position pos:line="80" pos:column="64"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="80" pos:column="65"/></decl_stmt>
					<expr_stmt><expr><call><name pos:line="81" pos:column="41">fprintf<pos:position pos:line="81" pos:column="48"/></name><argument_list pos:line="81" pos:column="48">(<argument><expr><name pos:line="81" pos:column="49">stderr<pos:position pos:line="81" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="57">"%.*s"<pos:position pos:line="81" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="65">l<pos:position pos:line="81" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="68">b<pos:position pos:line="81" pos:column="69"/></name></expr></argument>)<pos:position pos:line="81" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="71"/></expr_stmt>
					<expr_stmt><expr><name pos:line="82" pos:column="41">len<pos:position pos:line="82" pos:column="44"/></name> <operator pos:line="82" pos:column="45">-=<pos:position pos:line="82" pos:column="47"/></operator> <name pos:line="82" pos:column="48">l<pos:position pos:line="82" pos:column="49"/></name></expr>;<pos:position pos:line="82" pos:column="50"/></expr_stmt>
				}<pos:position pos:line="83" pos:column="34"/></block></else></if>

				<expr_stmt><expr><name pos:line="85" pos:column="33">skip_pf<pos:position pos:line="85" pos:column="40"/></name> <operator pos:line="85" pos:column="41">=<pos:position pos:line="85" pos:column="42"/></operator> <operator pos:line="85" pos:column="43">!<pos:position pos:line="85" pos:column="44"/></operator><name pos:line="85" pos:column="44">brk<pos:position pos:line="85" pos:column="47"/></name></expr>;<pos:position pos:line="85" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="86" pos:column="33">memmove<pos:position pos:line="86" pos:column="40"/></name><argument_list pos:line="86" pos:column="40">(<argument><expr><name pos:line="86" pos:column="41">buf<pos:position pos:line="86" pos:column="44"/></name> <operator pos:line="86" pos:column="45">+<pos:position pos:line="86" pos:column="46"/></operator> <name pos:line="86" pos:column="47">pf<pos:position pos:line="86" pos:column="49"/></name><operator pos:line="86" pos:column="49">+<pos:position pos:line="86" pos:column="50"/></operator><literal type="number" pos:line="86" pos:column="50">1<pos:position pos:line="86" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="53">b<pos:position pos:line="86" pos:column="54"/></name> <operator pos:line="86" pos:column="55">+<pos:position pos:line="86" pos:column="56"/></operator> <name pos:line="86" pos:column="57">brk<pos:position pos:line="86" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="62">len<pos:position pos:line="86" pos:column="65"/></name></expr></argument>)<pos:position pos:line="86" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="67"/></expr_stmt>
			}<pos:position pos:line="87" pos:column="26"/></block> while <condition pos:line="87" pos:column="33">(<expr><name pos:line="87" pos:column="34">len<pos:position pos:line="87" pos:column="37"/></name></expr>)<pos:position pos:line="87" pos:column="38"/></condition>;<pos:position pos:line="87" pos:column="39"/></do>
			<continue pos:line="88" pos:column="25">continue;<pos:position pos:line="88" pos:column="34"/></continue>
		<case pos:line="89" pos:column="17">case <expr><literal type="number" pos:line="89" pos:column="22">1<pos:position pos:line="89" pos:column="23"/></literal></expr>:<pos:position pos:line="89" pos:column="24"/></case>
			<expr_stmt><expr><call><name pos:line="90" pos:column="25">write_or_die<pos:position pos:line="90" pos:column="37"/></name><argument_list pos:line="90" pos:column="37">(<argument><expr><name pos:line="90" pos:column="38">out<pos:position pos:line="90" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="43">buf<pos:position pos:line="90" pos:column="46"/></name> <operator pos:line="90" pos:column="47">+<pos:position pos:line="90" pos:column="48"/></operator> <name pos:line="90" pos:column="49">pf<pos:position pos:line="90" pos:column="51"/></name><operator pos:line="90" pos:column="51">+<pos:position pos:line="90" pos:column="52"/></operator><literal type="number" pos:line="90" pos:column="52">1<pos:position pos:line="90" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="55">len<pos:position pos:line="90" pos:column="58"/></name></expr></argument>)<pos:position pos:line="90" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="60"/></expr_stmt>
			<continue pos:line="91" pos:column="25">continue;<pos:position pos:line="91" pos:column="34"/></continue>
		<default pos:line="92" pos:column="17">default:<pos:position pos:line="92" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="93" pos:column="25">fprintf<pos:position pos:line="93" pos:column="32"/></name><argument_list pos:line="93" pos:column="32">(<argument><expr><name pos:line="93" pos:column="33">stderr<pos:position pos:line="93" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="41">"%s: protocol error: bad band #%d\n"<pos:position pos:line="93" pos:column="77"/></literal></expr></argument>,
				<argument><expr><name pos:line="94" pos:column="33">me<pos:position pos:line="94" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="37">band<pos:position pos:line="94" pos:column="41"/></name></expr></argument>)<pos:position pos:line="94" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="43"/></expr_stmt>
			<return pos:line="95" pos:column="25">return <expr><name pos:line="95" pos:column="32">SIDEBAND_PROTOCOL_ERROR<pos:position pos:line="95" pos:column="55"/></name></expr>;<pos:position pos:line="95" pos:column="56"/></return>
		}<pos:position pos:line="96" pos:column="18"/></block></switch>
	}<pos:position pos:line="97" pos:column="10"/></block></while>
	<return pos:line="98" pos:column="9">return <expr><literal type="number" pos:line="98" pos:column="16">0<pos:position pos:line="98" pos:column="17"/></literal></expr>;<pos:position pos:line="98" pos:column="18"/></return>
}<pos:position pos:line="99" pos:column="2"/></block></function></unit>
