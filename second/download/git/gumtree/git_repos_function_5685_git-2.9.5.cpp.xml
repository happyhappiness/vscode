<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5685_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">check_object<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">object_entry<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">entry<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name><name pos:line="3" pos:column="13">entry<pos:position pos:line="3" pos:column="18"/></name><operator pos:line="3" pos:column="18">-&gt;<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="20">in_pack<pos:position pos:line="3" pos:column="27"/></name></name></expr>)<pos:position pos:line="3" pos:column="28"/></condition><then pos:line="3" pos:column="28"> <block pos:line="3" pos:column="29">{
		<decl_stmt><decl><type><name><name pos:line="4" pos:column="17">struct<pos:position pos:line="4" pos:column="23"/></name> <name pos:line="4" pos:column="24">packed_git<pos:position pos:line="4" pos:column="34"/></name></name> <modifier pos:line="4" pos:column="35">*<pos:position pos:line="4" pos:column="36"/></modifier></type><name pos:line="4" pos:column="36">p<pos:position pos:line="4" pos:column="37"/></name> <init pos:line="4" pos:column="38">= <expr><name><name pos:line="4" pos:column="40">entry<pos:position pos:line="4" pos:column="45"/></name><operator pos:line="4" pos:column="45">-&gt;<pos:position pos:line="4" pos:column="50"/></operator><name pos:line="4" pos:column="47">in_pack<pos:position pos:line="4" pos:column="54"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="55"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="5" pos:column="17">struct<pos:position pos:line="5" pos:column="23"/></name> <name pos:line="5" pos:column="24">pack_window<pos:position pos:line="5" pos:column="35"/></name></name> <modifier pos:line="5" pos:column="36">*<pos:position pos:line="5" pos:column="37"/></modifier></type><name pos:line="5" pos:column="37">w_curs<pos:position pos:line="5" pos:column="43"/></name> <init pos:line="5" pos:column="44">= <expr><name pos:line="5" pos:column="46">NULL<pos:position pos:line="5" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="51"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="6" pos:column="17">const<pos:position pos:line="6" pos:column="22"/></specifier> <name pos:line="6" pos:column="23">unsigned<pos:position pos:line="6" pos:column="31"/></name> <name pos:line="6" pos:column="32">char<pos:position pos:line="6" pos:column="36"/></name> <modifier pos:line="6" pos:column="37">*<pos:position pos:line="6" pos:column="38"/></modifier></type><name pos:line="6" pos:column="38">base_ref<pos:position pos:line="6" pos:column="46"/></name> <init pos:line="6" pos:column="47">= <expr><name pos:line="6" pos:column="49">NULL<pos:position pos:line="6" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="54"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="7" pos:column="17">struct<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">object_entry<pos:position pos:line="7" pos:column="36"/></name></name> <modifier pos:line="7" pos:column="37">*<pos:position pos:line="7" pos:column="38"/></modifier></type><name pos:line="7" pos:column="38">base_entry<pos:position pos:line="7" pos:column="48"/></name></decl>;<pos:position pos:line="7" pos:column="49"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">unsigned<pos:position pos:line="8" pos:column="25"/></name> <name pos:line="8" pos:column="26">long<pos:position pos:line="8" pos:column="30"/></name></type> <name pos:line="8" pos:column="31">used<pos:position pos:line="8" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="37">used_0<pos:position pos:line="8" pos:column="43"/></name></decl>;<pos:position pos:line="8" pos:column="44"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">unsigned<pos:position pos:line="9" pos:column="25"/></name> <name pos:line="9" pos:column="26">long<pos:position pos:line="9" pos:column="30"/></name></type> <name pos:line="9" pos:column="31">avail<pos:position pos:line="9" pos:column="36"/></name></decl>;<pos:position pos:line="9" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">off_t<pos:position pos:line="10" pos:column="22"/></name></type> <name pos:line="10" pos:column="23">ofs<pos:position pos:line="10" pos:column="26"/></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">unsigned<pos:position pos:line="11" pos:column="25"/></name> <name pos:line="11" pos:column="26">char<pos:position pos:line="11" pos:column="30"/></name> <modifier pos:line="11" pos:column="31">*<pos:position pos:line="11" pos:column="32"/></modifier></type><name pos:line="11" pos:column="32">buf<pos:position pos:line="11" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="37">c<pos:position pos:line="11" pos:column="38"/></name></decl>;<pos:position pos:line="11" pos:column="39"/></decl_stmt>

		<expr_stmt><expr><name pos:line="13" pos:column="17">buf<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <call><name pos:line="13" pos:column="23">use_pack<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">p<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="35">&amp;<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="36">w_curs<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="44">entry<pos:position pos:line="13" pos:column="49"/></name><operator pos:line="13" pos:column="49">-&gt;<pos:position pos:line="13" pos:column="54"/></operator><name pos:line="13" pos:column="51">in_pack_offset<pos:position pos:line="13" pos:column="65"/></name></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="67">&amp;<pos:position pos:line="13" pos:column="72"/></operator><name pos:line="13" pos:column="68">avail<pos:position pos:line="13" pos:column="73"/></name></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="75"/></expr_stmt>

		<comment type="block" pos:line="15" pos:column="17">/*
		 * We want in_pack_type even if we do not reuse delta
		 * since non-delta representations could still be reused.
		 */</comment>
		<expr_stmt><expr><name pos:line="19" pos:column="17">used<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <call><name pos:line="19" pos:column="24">unpack_object_header_buffer<pos:position pos:line="19" pos:column="51"/></name><argument_list pos:line="19" pos:column="51">(<argument><expr><name pos:line="19" pos:column="52">buf<pos:position pos:line="19" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="57">avail<pos:position pos:line="19" pos:column="62"/></name></expr></argument>,
						   <argument><expr><operator pos:line="20" pos:column="52">&amp;<pos:position pos:line="20" pos:column="57"/></operator><name><name pos:line="20" pos:column="53">entry<pos:position pos:line="20" pos:column="58"/></name><operator pos:line="20" pos:column="58">-&gt;<pos:position pos:line="20" pos:column="63"/></operator><name pos:line="20" pos:column="60">in_pack_type<pos:position pos:line="20" pos:column="72"/></name></name></expr></argument>,
						   <argument><expr><operator pos:line="21" pos:column="52">&amp;<pos:position pos:line="21" pos:column="57"/></operator><name><name pos:line="21" pos:column="53">entry<pos:position pos:line="21" pos:column="58"/></name><operator pos:line="21" pos:column="58">-&gt;<pos:position pos:line="21" pos:column="63"/></operator><name pos:line="21" pos:column="60">size<pos:position pos:line="21" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">used<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">==<pos:position pos:line="22" pos:column="28"/></operator> <literal type="number" pos:line="22" pos:column="29">0<pos:position pos:line="22" pos:column="30"/></literal></expr>)<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31">
			<block type="pseudo"><goto pos:line="23" pos:column="25">goto <name pos:line="23" pos:column="30">give_up<pos:position pos:line="23" pos:column="37"/></name>;<pos:position pos:line="23" pos:column="38"/></goto></block></then></if>

		<comment type="block" pos:line="25" pos:column="17">/*
		 * Determine if this is a delta and if so whether we can
		 * reuse it or not.  Otherwise let's find out as cheaply as
		 * possible what the actual type and size for this object is.
		 */</comment>
		<switch pos:line="30" pos:column="17">switch <condition pos:line="30" pos:column="24">(<expr><name><name pos:line="30" pos:column="25">entry<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">-&gt;<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="32">in_pack_type<pos:position pos:line="30" pos:column="44"/></name></name></expr>)<pos:position pos:line="30" pos:column="45"/></condition> <block pos:line="30" pos:column="46">{
		<default pos:line="31" pos:column="17">default:<pos:position pos:line="31" pos:column="25"/></default>
			<comment type="block" pos:line="32" pos:column="25">/* Not a delta hence we've already got all we need. */</comment>
			<expr_stmt><expr><name><name pos:line="33" pos:column="25">entry<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">-&gt;<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="32">type<pos:position pos:line="33" pos:column="36"/></name></name> <operator pos:line="33" pos:column="37">=<pos:position pos:line="33" pos:column="38"/></operator> <name><name pos:line="33" pos:column="39">entry<pos:position pos:line="33" pos:column="44"/></name><operator pos:line="33" pos:column="44">-&gt;<pos:position pos:line="33" pos:column="49"/></operator><name pos:line="33" pos:column="46">in_pack_type<pos:position pos:line="33" pos:column="58"/></name></name></expr>;<pos:position pos:line="33" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="34" pos:column="25">entry<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">-&gt;<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="32">in_pack_header_size<pos:position pos:line="34" pos:column="51"/></name></name> <operator pos:line="34" pos:column="52">=<pos:position pos:line="34" pos:column="53"/></operator> <name pos:line="34" pos:column="54">used<pos:position pos:line="34" pos:column="58"/></name></expr>;<pos:position pos:line="34" pos:column="59"/></expr_stmt>
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><name><name pos:line="35" pos:column="29">entry<pos:position pos:line="35" pos:column="34"/></name><operator pos:line="35" pos:column="34">-&gt;<pos:position pos:line="35" pos:column="39"/></operator><name><name pos:line="35" pos:column="36">type<pos:position pos:line="35" pos:column="40"/></name> <argument_list type="generic" pos:line="35" pos:column="41">&lt; <argument><expr><name pos:line="35" pos:column="43">OBJ_COMMIT<pos:position pos:line="35" pos:column="53"/></name> <operator pos:line="35" pos:column="54">||<pos:position pos:line="35" pos:column="56"/></operator> <name><name pos:line="35" pos:column="57">entry<pos:position pos:line="35" pos:column="62"/></name><operator pos:line="35" pos:column="62">-&gt;<pos:position pos:line="35" pos:column="67"/></operator><name pos:line="35" pos:column="64">type<pos:position pos:line="35" pos:column="68"/></name></name></expr></argument> &gt;<pos:position pos:line="35" pos:column="73"/></argument_list></name></name> <name pos:line="35" pos:column="71">OBJ_BLOB<pos:position pos:line="35" pos:column="79"/></name></expr>)<pos:position pos:line="35" pos:column="80"/></condition><then pos:line="35" pos:column="80">
				<block type="pseudo"><goto pos:line="36" pos:column="33">goto <name pos:line="36" pos:column="38">give_up<pos:position pos:line="36" pos:column="45"/></name>;<pos:position pos:line="36" pos:column="46"/></goto></block></then></if>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">unuse_pack<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><operator pos:line="37" pos:column="36">&amp;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="37">w_curs<pos:position pos:line="37" pos:column="43"/></name></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="45"/></expr_stmt>
			<return pos:line="38" pos:column="25">return;<pos:position pos:line="38" pos:column="32"/></return>
		<case pos:line="39" pos:column="17">case <expr><name pos:line="39" pos:column="22">OBJ_REF_DELTA<pos:position pos:line="39" pos:column="35"/></name></expr>:<pos:position pos:line="39" pos:column="36"/></case>
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><name pos:line="40" pos:column="29">reuse_delta<pos:position pos:line="40" pos:column="40"/></name> <operator pos:line="40" pos:column="41">&amp;&amp;<pos:position pos:line="40" pos:column="51"/></operator> <operator pos:line="40" pos:column="44">!<pos:position pos:line="40" pos:column="45"/></operator><name><name pos:line="40" pos:column="45">entry<pos:position pos:line="40" pos:column="50"/></name><operator pos:line="40" pos:column="50">-&gt;<pos:position pos:line="40" pos:column="55"/></operator><name pos:line="40" pos:column="52">preferred_base<pos:position pos:line="40" pos:column="66"/></name></name></expr>)<pos:position pos:line="40" pos:column="67"/></condition><then pos:line="40" pos:column="67">
				<block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="33">base_ref<pos:position pos:line="41" pos:column="41"/></name> <operator pos:line="41" pos:column="42">=<pos:position pos:line="41" pos:column="43"/></operator> <call><name pos:line="41" pos:column="44">use_pack<pos:position pos:line="41" pos:column="52"/></name><argument_list pos:line="41" pos:column="52">(<argument><expr><name pos:line="41" pos:column="53">p<pos:position pos:line="41" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="56">&amp;<pos:position pos:line="41" pos:column="61"/></operator><name pos:line="41" pos:column="57">w_curs<pos:position pos:line="41" pos:column="63"/></name></expr></argument>,
						<argument><expr><name><name pos:line="42" pos:column="49">entry<pos:position pos:line="42" pos:column="54"/></name><operator pos:line="42" pos:column="54">-&gt;<pos:position pos:line="42" pos:column="59"/></operator><name pos:line="42" pos:column="56">in_pack_offset<pos:position pos:line="42" pos:column="70"/></name></name> <operator pos:line="42" pos:column="71">+<pos:position pos:line="42" pos:column="72"/></operator> <name pos:line="42" pos:column="73">used<pos:position pos:line="42" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="79">NULL<pos:position pos:line="42" pos:column="83"/></name></expr></argument>)<pos:position pos:line="42" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="85"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="43" pos:column="25">entry<pos:position pos:line="43" pos:column="30"/></name><operator pos:line="43" pos:column="30">-&gt;<pos:position pos:line="43" pos:column="35"/></operator><name pos:line="43" pos:column="32">in_pack_header_size<pos:position pos:line="43" pos:column="51"/></name></name> <operator pos:line="43" pos:column="52">=<pos:position pos:line="43" pos:column="53"/></operator> <name pos:line="43" pos:column="54">used<pos:position pos:line="43" pos:column="58"/></name> <operator pos:line="43" pos:column="59">+<pos:position pos:line="43" pos:column="60"/></operator> <literal type="number" pos:line="43" pos:column="61">20<pos:position pos:line="43" pos:column="63"/></literal></expr>;<pos:position pos:line="43" pos:column="64"/></expr_stmt>
			<break pos:line="44" pos:column="25">break;<pos:position pos:line="44" pos:column="31"/></break>
		<case pos:line="45" pos:column="17">case <expr><name pos:line="45" pos:column="22">OBJ_OFS_DELTA<pos:position pos:line="45" pos:column="35"/></name></expr>:<pos:position pos:line="45" pos:column="36"/></case>
			<expr_stmt><expr><name pos:line="46" pos:column="25">buf<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">=<pos:position pos:line="46" pos:column="30"/></operator> <call><name pos:line="46" pos:column="31">use_pack<pos:position pos:line="46" pos:column="39"/></name><argument_list pos:line="46" pos:column="39">(<argument><expr><name pos:line="46" pos:column="40">p<pos:position pos:line="46" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="43">&amp;<pos:position pos:line="46" pos:column="48"/></operator><name pos:line="46" pos:column="44">w_curs<pos:position pos:line="46" pos:column="50"/></name></expr></argument>,
				       <argument><expr><name><name pos:line="47" pos:column="40">entry<pos:position pos:line="47" pos:column="45"/></name><operator pos:line="47" pos:column="45">-&gt;<pos:position pos:line="47" pos:column="50"/></operator><name pos:line="47" pos:column="47">in_pack_offset<pos:position pos:line="47" pos:column="61"/></name></name> <operator pos:line="47" pos:column="62">+<pos:position pos:line="47" pos:column="63"/></operator> <name pos:line="47" pos:column="64">used<pos:position pos:line="47" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="70">NULL<pos:position pos:line="47" pos:column="74"/></name></expr></argument>)<pos:position pos:line="47" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><name pos:line="48" pos:column="25">used_0<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">=<pos:position pos:line="48" pos:column="33"/></operator> <literal type="number" pos:line="48" pos:column="34">0<pos:position pos:line="48" pos:column="35"/></literal></expr>;<pos:position pos:line="48" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name pos:line="49" pos:column="25">c<pos:position pos:line="49" pos:column="26"/></name> <operator pos:line="49" pos:column="27">=<pos:position pos:line="49" pos:column="28"/></operator> <name><name pos:line="49" pos:column="29">buf<pos:position pos:line="49" pos:column="32"/></name><index pos:line="49" pos:column="32">[<expr><name pos:line="49" pos:column="33">used_0<pos:position pos:line="49" pos:column="39"/></name><operator pos:line="49" pos:column="39">++<pos:position pos:line="49" pos:column="41"/></operator></expr>]<pos:position pos:line="49" pos:column="42"/></index></name></expr>;<pos:position pos:line="49" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><name pos:line="50" pos:column="25">ofs<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">=<pos:position pos:line="50" pos:column="30"/></operator> <name pos:line="50" pos:column="31">c<pos:position pos:line="50" pos:column="32"/></name> <operator pos:line="50" pos:column="33">&amp;<pos:position pos:line="50" pos:column="38"/></operator> <literal type="number" pos:line="50" pos:column="35">127<pos:position pos:line="50" pos:column="38"/></literal></expr>;<pos:position pos:line="50" pos:column="39"/></expr_stmt>
			<while pos:line="51" pos:column="25">while <condition pos:line="51" pos:column="31">(<expr><name pos:line="51" pos:column="32">c<pos:position pos:line="51" pos:column="33"/></name> <operator pos:line="51" pos:column="34">&amp;<pos:position pos:line="51" pos:column="39"/></operator> <literal type="number" pos:line="51" pos:column="36">128<pos:position pos:line="51" pos:column="39"/></literal></expr>)<pos:position pos:line="51" pos:column="40"/></condition> <block pos:line="51" pos:column="41">{
				<expr_stmt><expr><name pos:line="52" pos:column="33">ofs<pos:position pos:line="52" pos:column="36"/></name> <operator pos:line="52" pos:column="37">+=<pos:position pos:line="52" pos:column="39"/></operator> <literal type="number" pos:line="52" pos:column="40">1<pos:position pos:line="52" pos:column="41"/></literal></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>
				<if pos:line="53" pos:column="33">if <condition pos:line="53" pos:column="36">(<expr><operator pos:line="53" pos:column="37">!<pos:position pos:line="53" pos:column="38"/></operator><name pos:line="53" pos:column="38">ofs<pos:position pos:line="53" pos:column="41"/></name> <operator pos:line="53" pos:column="42">||<pos:position pos:line="53" pos:column="44"/></operator> <call><name pos:line="53" pos:column="45">MSB<pos:position pos:line="53" pos:column="48"/></name><argument_list pos:line="53" pos:column="48">(<argument><expr><name pos:line="53" pos:column="49">ofs<pos:position pos:line="53" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="54">7<pos:position pos:line="53" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="57"/></condition><then pos:line="53" pos:column="57"> <block pos:line="53" pos:column="58">{
					<expr_stmt><expr><call><name pos:line="54" pos:column="41">error<pos:position pos:line="54" pos:column="46"/></name><argument_list pos:line="54" pos:column="46">(<argument><expr><literal type="string" pos:line="54" pos:column="47">"delta base offset overflow in pack for %s"<pos:position pos:line="54" pos:column="90"/></literal></expr></argument>,
					      <argument><expr><call><name pos:line="55" pos:column="47">sha1_to_hex<pos:position pos:line="55" pos:column="58"/></name><argument_list pos:line="55" pos:column="58">(<argument><expr><name><name pos:line="55" pos:column="59">entry<pos:position pos:line="55" pos:column="64"/></name><operator pos:line="55" pos:column="64">-&gt;<pos:position pos:line="55" pos:column="69"/></operator><name pos:line="55" pos:column="66">idx<pos:position pos:line="55" pos:column="69"/></name><operator pos:line="55" pos:column="69">.<pos:position pos:line="55" pos:column="70"/></operator><name pos:line="55" pos:column="70">sha1<pos:position pos:line="55" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="77"/></expr_stmt>
					<goto pos:line="56" pos:column="41">goto <name pos:line="56" pos:column="46">give_up<pos:position pos:line="56" pos:column="53"/></name>;<pos:position pos:line="56" pos:column="54"/></goto>
				}<pos:position pos:line="57" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name pos:line="58" pos:column="33">c<pos:position pos:line="58" pos:column="34"/></name> <operator pos:line="58" pos:column="35">=<pos:position pos:line="58" pos:column="36"/></operator> <name><name pos:line="58" pos:column="37">buf<pos:position pos:line="58" pos:column="40"/></name><index pos:line="58" pos:column="40">[<expr><name pos:line="58" pos:column="41">used_0<pos:position pos:line="58" pos:column="47"/></name><operator pos:line="58" pos:column="47">++<pos:position pos:line="58" pos:column="49"/></operator></expr>]<pos:position pos:line="58" pos:column="50"/></index></name></expr>;<pos:position pos:line="58" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><name pos:line="59" pos:column="33">ofs<pos:position pos:line="59" pos:column="36"/></name> <operator pos:line="59" pos:column="37">=<pos:position pos:line="59" pos:column="38"/></operator> <operator pos:line="59" pos:column="39">(<pos:position pos:line="59" pos:column="40"/></operator><name pos:line="59" pos:column="40">ofs<pos:position pos:line="59" pos:column="43"/></name> <operator pos:line="59" pos:column="44">&lt;&lt;<pos:position pos:line="59" pos:column="52"/></operator> <literal type="number" pos:line="59" pos:column="47">7<pos:position pos:line="59" pos:column="48"/></literal><operator pos:line="59" pos:column="48">)<pos:position pos:line="59" pos:column="49"/></operator> <operator pos:line="59" pos:column="50">+<pos:position pos:line="59" pos:column="51"/></operator> <operator pos:line="59" pos:column="52">(<pos:position pos:line="59" pos:column="53"/></operator><name pos:line="59" pos:column="53">c<pos:position pos:line="59" pos:column="54"/></name> <operator pos:line="59" pos:column="55">&amp;<pos:position pos:line="59" pos:column="60"/></operator> <literal type="number" pos:line="59" pos:column="57">127<pos:position pos:line="59" pos:column="60"/></literal><operator pos:line="59" pos:column="60">)<pos:position pos:line="59" pos:column="61"/></operator></expr>;<pos:position pos:line="59" pos:column="62"/></expr_stmt>
			}<pos:position pos:line="60" pos:column="26"/></block></while>
			<expr_stmt><expr><name pos:line="61" pos:column="25">ofs<pos:position pos:line="61" pos:column="28"/></name> <operator pos:line="61" pos:column="29">=<pos:position pos:line="61" pos:column="30"/></operator> <name><name pos:line="61" pos:column="31">entry<pos:position pos:line="61" pos:column="36"/></name><operator pos:line="61" pos:column="36">-&gt;<pos:position pos:line="61" pos:column="41"/></operator><name pos:line="61" pos:column="38">in_pack_offset<pos:position pos:line="61" pos:column="52"/></name></name> <operator pos:line="61" pos:column="53">-<pos:position pos:line="61" pos:column="54"/></operator> <name pos:line="61" pos:column="55">ofs<pos:position pos:line="61" pos:column="58"/></name></expr>;<pos:position pos:line="61" pos:column="59"/></expr_stmt>
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><name pos:line="62" pos:column="29">ofs<pos:position pos:line="62" pos:column="32"/></name> <operator pos:line="62" pos:column="33">&lt;=<pos:position pos:line="62" pos:column="38"/></operator> <literal type="number" pos:line="62" pos:column="36">0<pos:position pos:line="62" pos:column="37"/></literal> <operator pos:line="62" pos:column="38">||<pos:position pos:line="62" pos:column="40"/></operator> <name pos:line="62" pos:column="41">ofs<pos:position pos:line="62" pos:column="44"/></name> <operator pos:line="62" pos:column="45">&gt;=<pos:position pos:line="62" pos:column="50"/></operator> <name><name pos:line="62" pos:column="48">entry<pos:position pos:line="62" pos:column="53"/></name><operator pos:line="62" pos:column="53">-&gt;<pos:position pos:line="62" pos:column="58"/></operator><name pos:line="62" pos:column="55">in_pack_offset<pos:position pos:line="62" pos:column="69"/></name></name></expr>)<pos:position pos:line="62" pos:column="70"/></condition><then pos:line="62" pos:column="70"> <block pos:line="62" pos:column="71">{
				<expr_stmt><expr><call><name pos:line="63" pos:column="33">error<pos:position pos:line="63" pos:column="38"/></name><argument_list pos:line="63" pos:column="38">(<argument><expr><literal type="string" pos:line="63" pos:column="39">"delta base offset out of bound for %s"<pos:position pos:line="63" pos:column="78"/></literal></expr></argument>,
				      <argument><expr><call><name pos:line="64" pos:column="39">sha1_to_hex<pos:position pos:line="64" pos:column="50"/></name><argument_list pos:line="64" pos:column="50">(<argument><expr><name><name pos:line="64" pos:column="51">entry<pos:position pos:line="64" pos:column="56"/></name><operator pos:line="64" pos:column="56">-&gt;<pos:position pos:line="64" pos:column="61"/></operator><name pos:line="64" pos:column="58">idx<pos:position pos:line="64" pos:column="61"/></name><operator pos:line="64" pos:column="61">.<pos:position pos:line="64" pos:column="62"/></operator><name pos:line="64" pos:column="62">sha1<pos:position pos:line="64" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="69"/></expr_stmt>
				<goto pos:line="65" pos:column="33">goto <name pos:line="65" pos:column="38">give_up<pos:position pos:line="65" pos:column="45"/></name>;<pos:position pos:line="65" pos:column="46"/></goto>
			}<pos:position pos:line="66" pos:column="26"/></block></then></if>
			<if pos:line="67" pos:column="25">if <condition pos:line="67" pos:column="28">(<expr><name pos:line="67" pos:column="29">reuse_delta<pos:position pos:line="67" pos:column="40"/></name> <operator pos:line="67" pos:column="41">&amp;&amp;<pos:position pos:line="67" pos:column="51"/></operator> <operator pos:line="67" pos:column="44">!<pos:position pos:line="67" pos:column="45"/></operator><name><name pos:line="67" pos:column="45">entry<pos:position pos:line="67" pos:column="50"/></name><operator pos:line="67" pos:column="50">-&gt;<pos:position pos:line="67" pos:column="55"/></operator><name pos:line="67" pos:column="52">preferred_base<pos:position pos:line="67" pos:column="66"/></name></name></expr>)<pos:position pos:line="67" pos:column="67"/></condition><then pos:line="67" pos:column="67"> <block pos:line="67" pos:column="68">{
				<decl_stmt><decl><type><name><name pos:line="68" pos:column="33">struct<pos:position pos:line="68" pos:column="39"/></name> <name pos:line="68" pos:column="40">revindex_entry<pos:position pos:line="68" pos:column="54"/></name></name> <modifier pos:line="68" pos:column="55">*<pos:position pos:line="68" pos:column="56"/></modifier></type><name pos:line="68" pos:column="56">revidx<pos:position pos:line="68" pos:column="62"/></name></decl>;<pos:position pos:line="68" pos:column="63"/></decl_stmt>
				<expr_stmt><expr><name pos:line="69" pos:column="33">revidx<pos:position pos:line="69" pos:column="39"/></name> <operator pos:line="69" pos:column="40">=<pos:position pos:line="69" pos:column="41"/></operator> <call><name pos:line="69" pos:column="42">find_pack_revindex<pos:position pos:line="69" pos:column="60"/></name><argument_list pos:line="69" pos:column="60">(<argument><expr><name pos:line="69" pos:column="61">p<pos:position pos:line="69" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="64">ofs<pos:position pos:line="69" pos:column="67"/></name></expr></argument>)<pos:position pos:line="69" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="69"/></expr_stmt>
				<if pos:line="70" pos:column="33">if <condition pos:line="70" pos:column="36">(<expr><operator pos:line="70" pos:column="37">!<pos:position pos:line="70" pos:column="38"/></operator><name pos:line="70" pos:column="38">revidx<pos:position pos:line="70" pos:column="44"/></name></expr>)<pos:position pos:line="70" pos:column="45"/></condition><then pos:line="70" pos:column="45">
					<block type="pseudo"><goto pos:line="71" pos:column="41">goto <name pos:line="71" pos:column="46">give_up<pos:position pos:line="71" pos:column="53"/></name>;<pos:position pos:line="71" pos:column="54"/></goto></block></then></if>
				<expr_stmt><expr><name pos:line="72" pos:column="33">base_ref<pos:position pos:line="72" pos:column="41"/></name> <operator pos:line="72" pos:column="42">=<pos:position pos:line="72" pos:column="43"/></operator> <call><name pos:line="72" pos:column="44">nth_packed_object_sha1<pos:position pos:line="72" pos:column="66"/></name><argument_list pos:line="72" pos:column="66">(<argument><expr><name pos:line="72" pos:column="67">p<pos:position pos:line="72" pos:column="68"/></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="70">revidx<pos:position pos:line="72" pos:column="76"/></name><operator pos:line="72" pos:column="76">-&gt;<pos:position pos:line="72" pos:column="81"/></operator><name pos:line="72" pos:column="78">nr<pos:position pos:line="72" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="82"/></expr_stmt>
			}<pos:position pos:line="73" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="74" pos:column="25">entry<pos:position pos:line="74" pos:column="30"/></name><operator pos:line="74" pos:column="30">-&gt;<pos:position pos:line="74" pos:column="35"/></operator><name pos:line="74" pos:column="32">in_pack_header_size<pos:position pos:line="74" pos:column="51"/></name></name> <operator pos:line="74" pos:column="52">=<pos:position pos:line="74" pos:column="53"/></operator> <name pos:line="74" pos:column="54">used<pos:position pos:line="74" pos:column="58"/></name> <operator pos:line="74" pos:column="59">+<pos:position pos:line="74" pos:column="60"/></operator> <name pos:line="74" pos:column="61">used_0<pos:position pos:line="74" pos:column="67"/></name></expr>;<pos:position pos:line="74" pos:column="68"/></expr_stmt>
			<break pos:line="75" pos:column="25">break;<pos:position pos:line="75" pos:column="31"/></break>
		}<pos:position pos:line="76" pos:column="18"/></block></switch>

		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><name pos:line="78" pos:column="21">base_ref<pos:position pos:line="78" pos:column="29"/></name> <operator pos:line="78" pos:column="30">&amp;&amp;<pos:position pos:line="78" pos:column="40"/></operator> <operator pos:line="78" pos:column="33">(<pos:position pos:line="78" pos:column="34"/></operator><name pos:line="78" pos:column="34">base_entry<pos:position pos:line="78" pos:column="44"/></name> <operator pos:line="78" pos:column="45">=<pos:position pos:line="78" pos:column="46"/></operator> <call><name pos:line="78" pos:column="47">packlist_find<pos:position pos:line="78" pos:column="60"/></name><argument_list pos:line="78" pos:column="60">(<argument><expr><operator pos:line="78" pos:column="61">&amp;<pos:position pos:line="78" pos:column="66"/></operator><name pos:line="78" pos:column="62">to_pack<pos:position pos:line="78" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="71">base_ref<pos:position pos:line="78" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="81">NULL<pos:position pos:line="78" pos:column="85"/></name></expr></argument>)<pos:position pos:line="78" pos:column="86"/></argument_list></call><operator pos:line="78" pos:column="86">)<pos:position pos:line="78" pos:column="87"/></operator></expr>)<pos:position pos:line="78" pos:column="88"/></condition><then pos:line="78" pos:column="88"> <block pos:line="78" pos:column="89">{
			<comment type="block" pos:line="79" pos:column="25">/*
			 * If base_ref was set above that means we wish to
			 * reuse delta data, and we even found that base
			 * in the list of objects we want to pack. Goodie!
			 *
			 * Depth value does not matter - find_deltas() will
			 * never consider reused delta as the base object to
			 * deltify other objects against, in order to avoid
			 * circular deltas.
			 */</comment>
			<expr_stmt><expr><name><name pos:line="89" pos:column="25">entry<pos:position pos:line="89" pos:column="30"/></name><operator pos:line="89" pos:column="30">-&gt;<pos:position pos:line="89" pos:column="35"/></operator><name pos:line="89" pos:column="32">type<pos:position pos:line="89" pos:column="36"/></name></name> <operator pos:line="89" pos:column="37">=<pos:position pos:line="89" pos:column="38"/></operator> <name><name pos:line="89" pos:column="39">entry<pos:position pos:line="89" pos:column="44"/></name><operator pos:line="89" pos:column="44">-&gt;<pos:position pos:line="89" pos:column="49"/></operator><name pos:line="89" pos:column="46">in_pack_type<pos:position pos:line="89" pos:column="58"/></name></name></expr>;<pos:position pos:line="89" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="90" pos:column="25">entry<pos:position pos:line="90" pos:column="30"/></name><operator pos:line="90" pos:column="30">-&gt;<pos:position pos:line="90" pos:column="35"/></operator><name pos:line="90" pos:column="32">delta<pos:position pos:line="90" pos:column="37"/></name></name> <operator pos:line="90" pos:column="38">=<pos:position pos:line="90" pos:column="39"/></operator> <name pos:line="90" pos:column="40">base_entry<pos:position pos:line="90" pos:column="50"/></name></expr>;<pos:position pos:line="90" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="91" pos:column="25">entry<pos:position pos:line="91" pos:column="30"/></name><operator pos:line="91" pos:column="30">-&gt;<pos:position pos:line="91" pos:column="35"/></operator><name pos:line="91" pos:column="32">delta_size<pos:position pos:line="91" pos:column="42"/></name></name> <operator pos:line="91" pos:column="43">=<pos:position pos:line="91" pos:column="44"/></operator> <name><name pos:line="91" pos:column="45">entry<pos:position pos:line="91" pos:column="50"/></name><operator pos:line="91" pos:column="50">-&gt;<pos:position pos:line="91" pos:column="55"/></operator><name pos:line="91" pos:column="52">size<pos:position pos:line="91" pos:column="56"/></name></name></expr>;<pos:position pos:line="91" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="92" pos:column="25">entry<pos:position pos:line="92" pos:column="30"/></name><operator pos:line="92" pos:column="30">-&gt;<pos:position pos:line="92" pos:column="35"/></operator><name pos:line="92" pos:column="32">delta_sibling<pos:position pos:line="92" pos:column="45"/></name></name> <operator pos:line="92" pos:column="46">=<pos:position pos:line="92" pos:column="47"/></operator> <name><name pos:line="92" pos:column="48">base_entry<pos:position pos:line="92" pos:column="58"/></name><operator pos:line="92" pos:column="58">-&gt;<pos:position pos:line="92" pos:column="63"/></operator><name pos:line="92" pos:column="60">delta_child<pos:position pos:line="92" pos:column="71"/></name></name></expr>;<pos:position pos:line="92" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="93" pos:column="25">base_entry<pos:position pos:line="93" pos:column="35"/></name><operator pos:line="93" pos:column="35">-&gt;<pos:position pos:line="93" pos:column="40"/></operator><name pos:line="93" pos:column="37">delta_child<pos:position pos:line="93" pos:column="48"/></name></name> <operator pos:line="93" pos:column="49">=<pos:position pos:line="93" pos:column="50"/></operator> <name pos:line="93" pos:column="51">entry<pos:position pos:line="93" pos:column="56"/></name></expr>;<pos:position pos:line="93" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="94" pos:column="25">unuse_pack<pos:position pos:line="94" pos:column="35"/></name><argument_list pos:line="94" pos:column="35">(<argument><expr><operator pos:line="94" pos:column="36">&amp;<pos:position pos:line="94" pos:column="41"/></operator><name pos:line="94" pos:column="37">w_curs<pos:position pos:line="94" pos:column="43"/></name></expr></argument>)<pos:position pos:line="94" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="45"/></expr_stmt>
			<return pos:line="95" pos:column="25">return;<pos:position pos:line="95" pos:column="32"/></return>
		}<pos:position pos:line="96" pos:column="18"/></block></then></if>

		<if pos:line="98" pos:column="17">if <condition pos:line="98" pos:column="20">(<expr><name><name pos:line="98" pos:column="21">entry<pos:position pos:line="98" pos:column="26"/></name><operator pos:line="98" pos:column="26">-&gt;<pos:position pos:line="98" pos:column="31"/></operator><name pos:line="98" pos:column="28">type<pos:position pos:line="98" pos:column="32"/></name></name></expr>)<pos:position pos:line="98" pos:column="33"/></condition><then pos:line="98" pos:column="33"> <block pos:line="98" pos:column="34">{
			<comment type="block" pos:line="99" pos:column="25">/*
			 * This must be a delta and we already know what the
			 * final object type is.  Let's extract the actual
			 * object size from the delta header.
			 */</comment>
			<expr_stmt><expr><name><name pos:line="104" pos:column="25">entry<pos:position pos:line="104" pos:column="30"/></name><operator pos:line="104" pos:column="30">-&gt;<pos:position pos:line="104" pos:column="35"/></operator><name pos:line="104" pos:column="32">size<pos:position pos:line="104" pos:column="36"/></name></name> <operator pos:line="104" pos:column="37">=<pos:position pos:line="104" pos:column="38"/></operator> <call><name pos:line="104" pos:column="39">get_size_from_delta<pos:position pos:line="104" pos:column="58"/></name><argument_list pos:line="104" pos:column="58">(<argument><expr><name pos:line="104" pos:column="59">p<pos:position pos:line="104" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="62">&amp;<pos:position pos:line="104" pos:column="67"/></operator><name pos:line="104" pos:column="63">w_curs<pos:position pos:line="104" pos:column="69"/></name></expr></argument>,
					<argument><expr><name><name pos:line="105" pos:column="41">entry<pos:position pos:line="105" pos:column="46"/></name><operator pos:line="105" pos:column="46">-&gt;<pos:position pos:line="105" pos:column="51"/></operator><name pos:line="105" pos:column="48">in_pack_offset<pos:position pos:line="105" pos:column="62"/></name></name> <operator pos:line="105" pos:column="63">+<pos:position pos:line="105" pos:column="64"/></operator> <name><name pos:line="105" pos:column="65">entry<pos:position pos:line="105" pos:column="70"/></name><operator pos:line="105" pos:column="70">-&gt;<pos:position pos:line="105" pos:column="75"/></operator><name pos:line="105" pos:column="72">in_pack_header_size<pos:position pos:line="105" pos:column="91"/></name></name></expr></argument>)<pos:position pos:line="105" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="93"/></expr_stmt>
			<if pos:line="106" pos:column="25">if <condition pos:line="106" pos:column="28">(<expr><name><name pos:line="106" pos:column="29">entry<pos:position pos:line="106" pos:column="34"/></name><operator pos:line="106" pos:column="34">-&gt;<pos:position pos:line="106" pos:column="39"/></operator><name pos:line="106" pos:column="36">size<pos:position pos:line="106" pos:column="40"/></name></name> <operator pos:line="106" pos:column="41">==<pos:position pos:line="106" pos:column="43"/></operator> <literal type="number" pos:line="106" pos:column="44">0<pos:position pos:line="106" pos:column="45"/></literal></expr>)<pos:position pos:line="106" pos:column="46"/></condition><then pos:line="106" pos:column="46">
				<block type="pseudo"><goto pos:line="107" pos:column="33">goto <name pos:line="107" pos:column="38">give_up<pos:position pos:line="107" pos:column="45"/></name>;<pos:position pos:line="107" pos:column="46"/></goto></block></then></if>
			<expr_stmt><expr><call><name pos:line="108" pos:column="25">unuse_pack<pos:position pos:line="108" pos:column="35"/></name><argument_list pos:line="108" pos:column="35">(<argument><expr><operator pos:line="108" pos:column="36">&amp;<pos:position pos:line="108" pos:column="41"/></operator><name pos:line="108" pos:column="37">w_curs<pos:position pos:line="108" pos:column="43"/></name></expr></argument>)<pos:position pos:line="108" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="45"/></expr_stmt>
			<return pos:line="109" pos:column="25">return;<pos:position pos:line="109" pos:column="32"/></return>
		}<pos:position pos:line="110" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="112" pos:column="17">/*
		 * No choice but to fall back to the recursive delta walk
		 * with sha1_object_info() to find about the object type
		 * at this point...
		 */</comment>
		<label><name pos:line="117" pos:column="17">give_up<pos:position pos:line="117" pos:column="24"/></name>:<pos:position pos:line="117" pos:column="25"/></label>
		<expr_stmt><expr><call><name pos:line="118" pos:column="17">unuse_pack<pos:position pos:line="118" pos:column="27"/></name><argument_list pos:line="118" pos:column="27">(<argument><expr><operator pos:line="118" pos:column="28">&amp;<pos:position pos:line="118" pos:column="33"/></operator><name pos:line="118" pos:column="29">w_curs<pos:position pos:line="118" pos:column="35"/></name></expr></argument>)<pos:position pos:line="118" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="119" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="121" pos:column="9">entry<pos:position pos:line="121" pos:column="14"/></name><operator pos:line="121" pos:column="14">-&gt;<pos:position pos:line="121" pos:column="19"/></operator><name pos:line="121" pos:column="16">type<pos:position pos:line="121" pos:column="20"/></name></name> <operator pos:line="121" pos:column="21">=<pos:position pos:line="121" pos:column="22"/></operator> <call><name pos:line="121" pos:column="23">sha1_object_info<pos:position pos:line="121" pos:column="39"/></name><argument_list pos:line="121" pos:column="39">(<argument><expr><name><name pos:line="121" pos:column="40">entry<pos:position pos:line="121" pos:column="45"/></name><operator pos:line="121" pos:column="45">-&gt;<pos:position pos:line="121" pos:column="50"/></operator><name pos:line="121" pos:column="47">idx<pos:position pos:line="121" pos:column="50"/></name><operator pos:line="121" pos:column="50">.<pos:position pos:line="121" pos:column="51"/></operator><name pos:line="121" pos:column="51">sha1<pos:position pos:line="121" pos:column="55"/></name></name></expr></argument>, <argument><expr><operator pos:line="121" pos:column="57">&amp;<pos:position pos:line="121" pos:column="62"/></operator><name><name pos:line="121" pos:column="58">entry<pos:position pos:line="121" pos:column="63"/></name><operator pos:line="121" pos:column="63">-&gt;<pos:position pos:line="121" pos:column="68"/></operator><name pos:line="121" pos:column="65">size<pos:position pos:line="121" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="121" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="71"/></expr_stmt>
	<comment type="block" pos:line="122" pos:column="9">/*
	 * The error condition is checked in prepare_pack().  This is
	 * to permit a missing preferred base object to be ignored
	 * as a preferred base.  Doing so can result in a larger
	 * pack file, but the transfer will still take place.
	 */</comment>
}<pos:position pos:line="128" pos:column="2"/></block></function></unit>
