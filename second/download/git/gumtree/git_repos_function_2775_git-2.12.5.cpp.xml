<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2775_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_strategy_opts<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">replay_opts<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">opts<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="58">struct<pos:position pos:line="1" pos:column="64"/></name> <name pos:line="1" pos:column="65">strbuf<pos:position pos:line="1" pos:column="71"/></name></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">buf<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">strbuf_reset<pos:position pos:line="5" pos:column="21"/></name><argument_list pos:line="5" pos:column="21">(<argument><expr><name pos:line="5" pos:column="22">buf<pos:position pos:line="5" pos:column="25"/></name></expr></argument>)<pos:position pos:line="5" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="27"/></expr_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">read_oneliner<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">(<argument><expr><name pos:line="6" pos:column="28">buf<pos:position pos:line="6" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="33">rebase_path_strategy<pos:position pos:line="6" pos:column="53"/></name><argument_list pos:line="6" pos:column="53">()<pos:position pos:line="6" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="57">0<pos:position pos:line="6" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="60"/></condition><then pos:line="6" pos:column="60">
		<block type="pseudo"><return pos:line="7" pos:column="17">return;<pos:position pos:line="7" pos:column="24"/></return></block></then></if>
	<expr_stmt><expr><name><name pos:line="8" pos:column="9">opts<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">strategy<pos:position pos:line="8" pos:column="23"/></name></name> <operator pos:line="8" pos:column="24">=<pos:position pos:line="8" pos:column="25"/></operator> <call><name pos:line="8" pos:column="26">strbuf_detach<pos:position pos:line="8" pos:column="39"/></name><argument_list pos:line="8" pos:column="39">(<argument><expr><name pos:line="8" pos:column="40">buf<pos:position pos:line="8" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="45">NULL<pos:position pos:line="8" pos:column="49"/></name></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="51"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">read_oneliner<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><name pos:line="9" pos:column="28">buf<pos:position pos:line="9" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="33">rebase_path_strategy_opts<pos:position pos:line="9" pos:column="58"/></name><argument_list pos:line="9" pos:column="58">()<pos:position pos:line="9" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="62">0<pos:position pos:line="9" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="65"/></condition><then pos:line="9" pos:column="65">
		<block type="pseudo"><return pos:line="10" pos:column="17">return;<pos:position pos:line="10" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="12" pos:column="9">opts<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">xopts_nr<pos:position pos:line="12" pos:column="23"/></name></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <call><name pos:line="12" pos:column="26">split_cmdline<pos:position pos:line="12" pos:column="39"/></name><argument_list pos:line="12" pos:column="39">(<argument><expr><name><name pos:line="12" pos:column="40">buf<pos:position pos:line="12" pos:column="43"/></name><operator pos:line="12" pos:column="43">-&gt;<pos:position pos:line="12" pos:column="48"/></operator><name pos:line="12" pos:column="45">buf<pos:position pos:line="12" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="50">(<pos:position pos:line="12" pos:column="51"/></operator><specifier pos:line="12" pos:column="51">const<pos:position pos:line="12" pos:column="56"/></specifier> <name pos:line="12" pos:column="57">char<pos:position pos:line="12" pos:column="61"/></name> <operator pos:line="12" pos:column="62">*<pos:position pos:line="12" pos:column="63"/></operator><operator pos:line="12" pos:column="63">*<pos:position pos:line="12" pos:column="64"/></operator><operator pos:line="12" pos:column="64">*<pos:position pos:line="12" pos:column="65"/></operator><operator pos:line="12" pos:column="65">)<pos:position pos:line="12" pos:column="66"/></operator><operator pos:line="12" pos:column="66">&amp;<pos:position pos:line="12" pos:column="71"/></operator><name><name pos:line="12" pos:column="67">opts<pos:position pos:line="12" pos:column="71"/></name><operator pos:line="12" pos:column="71">-&gt;<pos:position pos:line="12" pos:column="76"/></operator><name pos:line="12" pos:column="73">xopts<pos:position pos:line="12" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="80"/></expr_stmt>
	<for pos:line="13" pos:column="9">for <control pos:line="13" pos:column="13">(<init><expr><name pos:line="13" pos:column="14">i<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr>;<pos:position pos:line="13" pos:column="20"/></init> <condition><expr><name pos:line="13" pos:column="21">i<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">&lt;<pos:position pos:line="13" pos:column="27"/></operator> <name><name pos:line="13" pos:column="25">opts<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">xopts_nr<pos:position pos:line="13" pos:column="39"/></name></name></expr>;<pos:position pos:line="13" pos:column="40"/></condition> <incr><expr><name pos:line="13" pos:column="41">i<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">++<pos:position pos:line="13" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="45"/></control> <block pos:line="13" pos:column="46">{
		<decl_stmt><decl><type><specifier pos:line="14" pos:column="17">const<pos:position pos:line="14" pos:column="22"/></specifier> <name pos:line="14" pos:column="23">char<pos:position pos:line="14" pos:column="27"/></name> <modifier pos:line="14" pos:column="28">*<pos:position pos:line="14" pos:column="29"/></modifier></type><name pos:line="14" pos:column="29">arg<pos:position pos:line="14" pos:column="32"/></name> <init pos:line="14" pos:column="33">= <expr><name><name pos:line="14" pos:column="35">opts<pos:position pos:line="14" pos:column="39"/></name><operator pos:line="14" pos:column="39">-&gt;<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="41">xopts<pos:position pos:line="14" pos:column="46"/></name><index pos:line="14" pos:column="46">[<expr><name pos:line="14" pos:column="47">i<pos:position pos:line="14" pos:column="48"/></name></expr>]<pos:position pos:line="14" pos:column="49"/></index></name></expr></init></decl>;<pos:position pos:line="14" pos:column="50"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="16" pos:column="17">skip_prefix<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">arg<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="34">"--"<pos:position pos:line="16" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="40">&amp;<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="41">arg<pos:position pos:line="16" pos:column="44"/></name></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="17" pos:column="17">opts<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">-&gt;<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="23">xopts<pos:position pos:line="17" pos:column="28"/></name><index pos:line="17" pos:column="28">[<expr><name pos:line="17" pos:column="29">i<pos:position pos:line="17" pos:column="30"/></name></expr>]<pos:position pos:line="17" pos:column="31"/></index></name> <operator pos:line="17" pos:column="32">=<pos:position pos:line="17" pos:column="33"/></operator> <call><name pos:line="17" pos:column="34">xstrdup<pos:position pos:line="17" pos:column="41"/></name><argument_list pos:line="17" pos:column="41">(<argument><expr><name pos:line="17" pos:column="42">arg<pos:position pos:line="17" pos:column="45"/></name></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></for>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
