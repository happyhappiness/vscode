<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6777_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">mingw_startup<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">void<pos:position pos:line="1" pos:column="24"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="25"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">maxlen<pos:position pos:line="3" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="24">argc<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">buffer<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">wchar_t<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier><modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">wenv<pos:position pos:line="5" pos:column="23"/></name></decl>, <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier><modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="27">wargv<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">_startupinfo<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">si<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/* get wide char arguments and environment */</comment>
	<expr_stmt><expr><name><name pos:line="9" pos:column="9">si<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">.<pos:position pos:line="9" pos:column="12"/></operator><name pos:line="9" pos:column="12">newmode<pos:position pos:line="9" pos:column="19"/></name></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal></expr>;<pos:position pos:line="9" pos:column="24"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">__wgetmainargs<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><operator pos:line="10" pos:column="28">&amp;<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="29">argc<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="35">&amp;<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="36">wargv<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="43">&amp;<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="44">wenv<pos:position pos:line="10" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="50">_CRT_glob<pos:position pos:line="10" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="61">&amp;<pos:position pos:line="10" pos:column="66"/></operator><name pos:line="10" pos:column="62">si<pos:position pos:line="10" pos:column="64"/></name></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call> <operator pos:line="10" pos:column="66">&lt;<pos:position pos:line="10" pos:column="70"/></operator> <literal type="number" pos:line="10" pos:column="68">0<pos:position pos:line="10" pos:column="69"/></literal></expr>)<pos:position pos:line="10" pos:column="70"/></condition><then pos:line="10" pos:column="70">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">die_startup<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">()<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="13" pos:column="9">/* determine size of argv and environ conversion buffer */</comment>
	<expr_stmt><expr><name pos:line="14" pos:column="9">maxlen<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <call><name pos:line="14" pos:column="18">wcslen<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">_wpgmptr<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
	<for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">(<init><expr><name pos:line="15" pos:column="14">i<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <literal type="number" pos:line="15" pos:column="18">1<pos:position pos:line="15" pos:column="19"/></literal></expr>;<pos:position pos:line="15" pos:column="20"/></init> <condition><expr><name pos:line="15" pos:column="21">i<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">&lt;<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="25">argc<pos:position pos:line="15" pos:column="29"/></name></expr>;<pos:position pos:line="15" pos:column="30"/></condition> <incr><expr><name pos:line="15" pos:column="31">i<pos:position pos:line="15" pos:column="32"/></name><operator pos:line="15" pos:column="32">++<pos:position pos:line="15" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="15" pos:column="35"/></control>
		<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="17">maxlen<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">=<pos:position pos:line="16" pos:column="25"/></operator> <call><name pos:line="16" pos:column="26">max<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">maxlen<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="38">wcslen<pos:position pos:line="16" pos:column="44"/></name><argument_list pos:line="16" pos:column="44">(<argument><expr><name><name pos:line="16" pos:column="45">wargv<pos:position pos:line="16" pos:column="50"/></name><index pos:line="16" pos:column="50">[<expr><name pos:line="16" pos:column="51">i<pos:position pos:line="16" pos:column="52"/></name></expr>]<pos:position pos:line="16" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="56"/></expr_stmt></block></for>
	<for pos:line="17" pos:column="9">for <control pos:line="17" pos:column="13">(<init><expr><name pos:line="17" pos:column="14">i<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">0<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></init> <condition><expr><name><name pos:line="17" pos:column="21">wenv<pos:position pos:line="17" pos:column="25"/></name><index pos:line="17" pos:column="25">[<expr><name pos:line="17" pos:column="26">i<pos:position pos:line="17" pos:column="27"/></name></expr>]<pos:position pos:line="17" pos:column="28"/></index></name></expr>;<pos:position pos:line="17" pos:column="29"/></condition> <incr><expr><name pos:line="17" pos:column="30">i<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">++<pos:position pos:line="17" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="34"/></control>
		<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="17">maxlen<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <call><name pos:line="18" pos:column="26">max<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">maxlen<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="38">wcslen<pos:position pos:line="18" pos:column="44"/></name><argument_list pos:line="18" pos:column="44">(<argument><expr><name><name pos:line="18" pos:column="45">wenv<pos:position pos:line="18" pos:column="49"/></name><index pos:line="18" pos:column="49">[<expr><name pos:line="18" pos:column="50">i<pos:position pos:line="18" pos:column="51"/></name></expr>]<pos:position pos:line="18" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt></block></for>

	<comment type="block" pos:line="20" pos:column="9">/*
	 * nedmalloc can't free CRT memory, allocate resizable environment
	 * list. Note that xmalloc / xmemdupz etc. call getenv, so we cannot
	 * use it while initializing the environment itself.
	 */</comment>
	<expr_stmt><expr><name pos:line="25" pos:column="9">environ_size<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <name pos:line="25" pos:column="24">i<pos:position pos:line="25" pos:column="25"/></name> <operator pos:line="25" pos:column="26">+<pos:position pos:line="25" pos:column="27"/></operator> <literal type="number" pos:line="25" pos:column="28">1<pos:position pos:line="25" pos:column="29"/></literal></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">environ_alloc<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">=<pos:position pos:line="26" pos:column="24"/></operator> <call><name pos:line="26" pos:column="25">alloc_nr<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">environ_size<pos:position pos:line="26" pos:column="46"/></name> <operator pos:line="26" pos:column="47">*<pos:position pos:line="26" pos:column="48"/></operator> <sizeof pos:line="26" pos:column="49">sizeof<argument_list pos:line="26" pos:column="55">(<argument><expr><name pos:line="26" pos:column="56">char<pos:position pos:line="26" pos:column="60"/></name><operator pos:line="26" pos:column="60">*<pos:position pos:line="26" pos:column="61"/></operator></expr></argument>)<pos:position pos:line="26" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="64"/></expr_stmt>
	<expr_stmt><expr><name pos:line="27" pos:column="9">environ<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <call><name pos:line="27" pos:column="19">malloc_startup<pos:position pos:line="27" pos:column="33"/></name><argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">environ_alloc<pos:position pos:line="27" pos:column="47"/></name></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>

	<comment type="block" pos:line="29" pos:column="9">/* allocate buffer (wchar_t encodes to max 3 UTF-8 bytes) */</comment>
	<expr_stmt><expr><name pos:line="30" pos:column="9">maxlen<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <literal type="number" pos:line="30" pos:column="18">3<pos:position pos:line="30" pos:column="19"/></literal> <operator pos:line="30" pos:column="20">*<pos:position pos:line="30" pos:column="21"/></operator> <name pos:line="30" pos:column="22">maxlen<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">+<pos:position pos:line="30" pos:column="30"/></operator> <literal type="number" pos:line="30" pos:column="31">1<pos:position pos:line="30" pos:column="32"/></literal></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="31" pos:column="9">buffer<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <call><name pos:line="31" pos:column="18">malloc_startup<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">maxlen<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>

	<comment type="block" pos:line="33" pos:column="9">/* convert command line arguments and environment to UTF-8 */</comment>
	<expr_stmt><expr><name><name pos:line="34" pos:column="9">__argv<pos:position pos:line="34" pos:column="15"/></name><index pos:line="34" pos:column="15">[<expr><literal type="number" pos:line="34" pos:column="16">0<pos:position pos:line="34" pos:column="17"/></literal></expr>]<pos:position pos:line="34" pos:column="18"/></index></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <call><name pos:line="34" pos:column="21">wcstoutfdup_startup<pos:position pos:line="34" pos:column="40"/></name><argument_list pos:line="34" pos:column="40">(<argument><expr><name pos:line="34" pos:column="41">buffer<pos:position pos:line="34" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="49">_wpgmptr<pos:position pos:line="34" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="59">maxlen<pos:position pos:line="34" pos:column="65"/></name></expr></argument>)<pos:position pos:line="34" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="67"/></expr_stmt>
	<for pos:line="35" pos:column="9">for <control pos:line="35" pos:column="13">(<init><expr><name pos:line="35" pos:column="14">i<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <literal type="number" pos:line="35" pos:column="18">1<pos:position pos:line="35" pos:column="19"/></literal></expr>;<pos:position pos:line="35" pos:column="20"/></init> <condition><expr><name pos:line="35" pos:column="21">i<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">&lt;<pos:position pos:line="35" pos:column="27"/></operator> <name pos:line="35" pos:column="25">argc<pos:position pos:line="35" pos:column="29"/></name></expr>;<pos:position pos:line="35" pos:column="30"/></condition> <incr><expr><name pos:line="35" pos:column="31">i<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">++<pos:position pos:line="35" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="35"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="36" pos:column="17">__argv<pos:position pos:line="36" pos:column="23"/></name><index pos:line="36" pos:column="23">[<expr><name pos:line="36" pos:column="24">i<pos:position pos:line="36" pos:column="25"/></name></expr>]<pos:position pos:line="36" pos:column="26"/></index></name> <operator pos:line="36" pos:column="27">=<pos:position pos:line="36" pos:column="28"/></operator> <call><name pos:line="36" pos:column="29">wcstoutfdup_startup<pos:position pos:line="36" pos:column="48"/></name><argument_list pos:line="36" pos:column="48">(<argument><expr><name pos:line="36" pos:column="49">buffer<pos:position pos:line="36" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="57">wargv<pos:position pos:line="36" pos:column="62"/></name><index pos:line="36" pos:column="62">[<expr><name pos:line="36" pos:column="63">i<pos:position pos:line="36" pos:column="64"/></name></expr>]<pos:position pos:line="36" pos:column="65"/></index></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="67">maxlen<pos:position pos:line="36" pos:column="73"/></name></expr></argument>)<pos:position pos:line="36" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="75"/></expr_stmt></block></for>
	<for pos:line="37" pos:column="9">for <control pos:line="37" pos:column="13">(<init><expr><name pos:line="37" pos:column="14">i<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <literal type="number" pos:line="37" pos:column="18">0<pos:position pos:line="37" pos:column="19"/></literal></expr>;<pos:position pos:line="37" pos:column="20"/></init> <condition><expr><name><name pos:line="37" pos:column="21">wenv<pos:position pos:line="37" pos:column="25"/></name><index pos:line="37" pos:column="25">[<expr><name pos:line="37" pos:column="26">i<pos:position pos:line="37" pos:column="27"/></name></expr>]<pos:position pos:line="37" pos:column="28"/></index></name></expr>;<pos:position pos:line="37" pos:column="29"/></condition> <incr><expr><name pos:line="37" pos:column="30">i<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">++<pos:position pos:line="37" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="37" pos:column="34"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="38" pos:column="17">environ<pos:position pos:line="38" pos:column="24"/></name><index pos:line="38" pos:column="24">[<expr><name pos:line="38" pos:column="25">i<pos:position pos:line="38" pos:column="26"/></name></expr>]<pos:position pos:line="38" pos:column="27"/></index></name> <operator pos:line="38" pos:column="28">=<pos:position pos:line="38" pos:column="29"/></operator> <call><name pos:line="38" pos:column="30">wcstoutfdup_startup<pos:position pos:line="38" pos:column="49"/></name><argument_list pos:line="38" pos:column="49">(<argument><expr><name pos:line="38" pos:column="50">buffer<pos:position pos:line="38" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="58">wenv<pos:position pos:line="38" pos:column="62"/></name><index pos:line="38" pos:column="62">[<expr><name pos:line="38" pos:column="63">i<pos:position pos:line="38" pos:column="64"/></name></expr>]<pos:position pos:line="38" pos:column="65"/></index></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="67">maxlen<pos:position pos:line="38" pos:column="73"/></name></expr></argument>)<pos:position pos:line="38" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="75"/></expr_stmt></block></for>
	<expr_stmt><expr><name><name pos:line="39" pos:column="9">environ<pos:position pos:line="39" pos:column="16"/></name><index pos:line="39" pos:column="16">[<expr><name pos:line="39" pos:column="17">i<pos:position pos:line="39" pos:column="18"/></name></expr>]<pos:position pos:line="39" pos:column="19"/></index></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <name pos:line="39" pos:column="22">NULL<pos:position pos:line="39" pos:column="26"/></name></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">free<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name pos:line="40" pos:column="14">buffer<pos:position pos:line="40" pos:column="20"/></name></expr></argument>)<pos:position pos:line="40" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="22"/></expr_stmt>

	<comment type="block" pos:line="42" pos:column="9">/* sort environment for O(log n) getenv / putenv */</comment>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">qsort<pos:position pos:line="43" pos:column="14"/></name><argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">environ<pos:position pos:line="43" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="24">i<pos:position pos:line="43" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="27">sizeof<argument_list pos:line="43" pos:column="33">(<argument><expr><name pos:line="43" pos:column="34">char<pos:position pos:line="43" pos:column="38"/></name><operator pos:line="43" pos:column="38">*<pos:position pos:line="43" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="43" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="43" pos:column="42">compareenv<pos:position pos:line="43" pos:column="52"/></name></expr></argument>)<pos:position pos:line="43" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="54"/></expr_stmt>

	<comment type="block" pos:line="45" pos:column="9">/* fix Windows specific environment settings */</comment>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">setup_windows_environment<pos:position pos:line="46" pos:column="34"/></name><argument_list pos:line="46" pos:column="34">()<pos:position pos:line="46" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="37"/></expr_stmt>

	<comment type="block" pos:line="48" pos:column="9">/* initialize critical section for waitpid pinfo_t list */</comment>
	<expr_stmt><expr><call><name pos:line="49" pos:column="9">InitializeCriticalSection<pos:position pos:line="49" pos:column="34"/></name><argument_list pos:line="49" pos:column="34">(<argument><expr><operator pos:line="49" pos:column="35">&amp;<pos:position pos:line="49" pos:column="40"/></operator><name pos:line="49" pos:column="36">pinfo_cs<pos:position pos:line="49" pos:column="44"/></name></expr></argument>)<pos:position pos:line="49" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="46"/></expr_stmt>

	<comment type="block" pos:line="51" pos:column="9">/* set up default file mode and file modes for stdin/out/err */</comment>
	<expr_stmt><expr><name pos:line="52" pos:column="9">_fmode<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">=<pos:position pos:line="52" pos:column="17"/></operator> <name pos:line="52" pos:column="18">_O_BINARY<pos:position pos:line="52" pos:column="27"/></name></expr>;<pos:position pos:line="52" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="53" pos:column="9">_setmode<pos:position pos:line="53" pos:column="17"/></name><argument_list pos:line="53" pos:column="17">(<argument><expr><call><name pos:line="53" pos:column="18">_fileno<pos:position pos:line="53" pos:column="25"/></name><argument_list pos:line="53" pos:column="25">(<argument><expr><name pos:line="53" pos:column="26">stdin<pos:position pos:line="53" pos:column="31"/></name></expr></argument>)<pos:position pos:line="53" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="53" pos:column="34">_O_BINARY<pos:position pos:line="53" pos:column="43"/></name></expr></argument>)<pos:position pos:line="53" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="54" pos:column="9">_setmode<pos:position pos:line="54" pos:column="17"/></name><argument_list pos:line="54" pos:column="17">(<argument><expr><call><name pos:line="54" pos:column="18">_fileno<pos:position pos:line="54" pos:column="25"/></name><argument_list pos:line="54" pos:column="25">(<argument><expr><name pos:line="54" pos:column="26">stdout<pos:position pos:line="54" pos:column="32"/></name></expr></argument>)<pos:position pos:line="54" pos:column="33"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="54" pos:column="35">_O_BINARY<pos:position pos:line="54" pos:column="44"/></name></expr></argument>)<pos:position pos:line="54" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">_setmode<pos:position pos:line="55" pos:column="17"/></name><argument_list pos:line="55" pos:column="17">(<argument><expr><call><name pos:line="55" pos:column="18">_fileno<pos:position pos:line="55" pos:column="25"/></name><argument_list pos:line="55" pos:column="25">(<argument><expr><name pos:line="55" pos:column="26">stderr<pos:position pos:line="55" pos:column="32"/></name></expr></argument>)<pos:position pos:line="55" pos:column="33"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="55" pos:column="35">_O_BINARY<pos:position pos:line="55" pos:column="44"/></name></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="46"/></expr_stmt>

	<comment type="block" pos:line="57" pos:column="9">/* initialize Unicode console */</comment>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">winansi_init<pos:position pos:line="58" pos:column="21"/></name><argument_list pos:line="58" pos:column="21">()<pos:position pos:line="58" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="24"/></expr_stmt>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
