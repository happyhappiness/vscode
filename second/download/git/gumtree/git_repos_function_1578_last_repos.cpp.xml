<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1578_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">long<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">sane_truncate_line<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">emit_callback<pos:position pos:line="1" pos:column="61"/></name></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">ecb<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">char<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">line<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="80">unsigned<pos:position pos:line="1" pos:column="88"/></name> <name pos:line="1" pos:column="89">long<pos:position pos:line="1" pos:column="93"/></name></type> <name pos:line="1" pos:column="94">len<pos:position pos:line="1" pos:column="97"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="98"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">cp<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">long<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">allot<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">l<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><name pos:line="5" pos:column="20">len<pos:position pos:line="5" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">ecb<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">-&gt;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="18">truncate<pos:position pos:line="7" pos:column="26"/></name></name></expr>)<pos:position pos:line="7" pos:column="27"/></condition><then pos:line="7" pos:column="27">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><call><name><name pos:line="8" pos:column="24">ecb<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">-&gt;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="29">truncate<pos:position pos:line="8" pos:column="37"/></name></name><argument_list pos:line="8" pos:column="37">(<argument><expr><name pos:line="8" pos:column="38">line<pos:position pos:line="8" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="44">len<pos:position pos:line="8" pos:column="47"/></name></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="49"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="9" pos:column="9">cp<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <name pos:line="9" pos:column="14">line<pos:position pos:line="9" pos:column="18"/></name></expr>;<pos:position pos:line="9" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="10" pos:column="9">allot<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">l<pos:position pos:line="10" pos:column="18"/></name></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>
	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal> <operator pos:line="11" pos:column="18">&lt;<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="20">l<pos:position pos:line="11" pos:column="21"/></name></expr>)<pos:position pos:line="11" pos:column="22"/></condition> <block pos:line="11" pos:column="23">{
		<expr_stmt><expr><operator pos:line="12" pos:column="17">(<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">void<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">)<pos:position pos:line="12" pos:column="23"/></operator> <call><name pos:line="12" pos:column="24">utf8_width<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><operator pos:line="12" pos:column="35">&amp;<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="36">cp<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="40">&amp;<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="41">l<pos:position pos:line="12" pos:column="42"/></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">cp<pos:position pos:line="13" pos:column="24"/></name></expr>)<pos:position pos:line="13" pos:column="25"/></condition><then pos:line="13" pos:column="25">
			<block type="pseudo"><break pos:line="14" pos:column="25">break;<pos:position pos:line="14" pos:column="31"/></break></block></then></if> <comment type="block" pos:line="14" pos:column="32">/* truncated in the middle? */</comment>
	}<pos:position pos:line="15" pos:column="10"/></block></while>
	<return pos:line="16" pos:column="9">return <expr><name pos:line="16" pos:column="16">allot<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">-<pos:position pos:line="16" pos:column="23"/></operator> <name pos:line="16" pos:column="24">l<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
