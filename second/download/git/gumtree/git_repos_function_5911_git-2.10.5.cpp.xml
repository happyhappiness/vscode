<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5911_git-2.10.5.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">ref_iterator<pos:position pos:line="1" pos:column="20"/></name></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type><name pos:line="1" pos:column="22">files_ref_iterator_begin<pos:position pos:line="1" pos:column="46"/></name><parameter_list pos:line="1" pos:column="46">(
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">submodule<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">char<pos:position pos:line="3" pos:column="27"/></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">prefix<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="37">unsigned<pos:position pos:line="3" pos:column="45"/></name> <name pos:line="3" pos:column="46">int<pos:position pos:line="3" pos:column="49"/></name></type> <name pos:line="3" pos:column="50">flags<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="56"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">ref_cache<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">refs<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><call><name pos:line="5" pos:column="34">get_ref_cache<pos:position pos:line="5" pos:column="47"/></name><argument_list pos:line="5" pos:column="47">(<argument><expr><name pos:line="5" pos:column="48">submodule<pos:position pos:line="5" pos:column="57"/></name></expr></argument>)<pos:position pos:line="5" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">ref_dir<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">loose_dir<pos:position pos:line="6" pos:column="34"/></name></decl>, <modifier pos:line="6" pos:column="36">*<pos:position pos:line="6" pos:column="37"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="37">packed_dir<pos:position pos:line="6" pos:column="47"/></name></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">ref_iterator<pos:position pos:line="7" pos:column="28"/></name></name> <modifier pos:line="7" pos:column="29">*<pos:position pos:line="7" pos:column="30"/></modifier></type><name pos:line="7" pos:column="30">loose_iter<pos:position pos:line="7" pos:column="40"/></name></decl>, <modifier pos:line="7" pos:column="42">*<pos:position pos:line="7" pos:column="43"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="43">packed_iter<pos:position pos:line="7" pos:column="54"/></name></decl>;<pos:position pos:line="7" pos:column="55"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">files_ref_iterator<pos:position pos:line="8" pos:column="34"/></name></name> <modifier pos:line="8" pos:column="35">*<pos:position pos:line="8" pos:column="36"/></modifier></type><name pos:line="8" pos:column="36">iter<pos:position pos:line="8" pos:column="40"/></name></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">ref_iterator<pos:position pos:line="9" pos:column="28"/></name></name> <modifier pos:line="9" pos:column="29">*<pos:position pos:line="9" pos:column="30"/></modifier></type><name pos:line="9" pos:column="30">ref_iterator<pos:position pos:line="9" pos:column="42"/></name></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">refs<pos:position pos:line="11" pos:column="18"/></name></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><call><name pos:line="12" pos:column="24">empty_ref_iterator_begin<pos:position pos:line="12" pos:column="48"/></name><argument_list pos:line="12" pos:column="48">()<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></return></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">ref_paranoia<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">&lt;<pos:position pos:line="14" pos:column="30"/></operator> <literal type="number" pos:line="14" pos:column="28">0<pos:position pos:line="14" pos:column="29"/></literal></expr>)<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="17">ref_paranoia<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">=<pos:position pos:line="15" pos:column="31"/></operator> <call><name pos:line="15" pos:column="32">git_env_bool<pos:position pos:line="15" pos:column="44"/></name><argument_list pos:line="15" pos:column="44">(<argument><expr><literal type="string" pos:line="15" pos:column="45">"GIT_REF_PARANOIA"<pos:position pos:line="15" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="65">0<pos:position pos:line="15" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="68"/></expr_stmt></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">ref_paranoia<pos:position pos:line="16" pos:column="25"/></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">flags<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">|=<pos:position pos:line="17" pos:column="25"/></operator> <name pos:line="17" pos:column="26">DO_FOR_EACH_INCLUDE_BROKEN<pos:position pos:line="17" pos:column="52"/></name></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">iter<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">xcalloc<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="number" pos:line="19" pos:column="24">1<pos:position pos:line="19" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="27">sizeof<argument_list pos:line="19" pos:column="33">(<argument><expr><operator pos:line="19" pos:column="34">*<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="35">iter<pos:position pos:line="19" pos:column="39"/></name></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">ref_iterator<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <operator pos:line="20" pos:column="24">&amp;<pos:position pos:line="20" pos:column="29"/></operator><name><name pos:line="20" pos:column="25">iter<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">-&gt;<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="31">base<pos:position pos:line="20" pos:column="35"/></name></name></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">base_ref_iterator_init<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">ref_iterator<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="46">&amp;<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="47">files_ref_iterator_vtable<pos:position pos:line="21" pos:column="72"/></name></expr></argument>)<pos:position pos:line="21" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="74"/></expr_stmt>

	<comment type="block" pos:line="23" pos:column="9">/*
	 * We must make sure that all loose refs are read before
	 * accessing the packed-refs file; this avoids a race
	 * condition if loose refs are migrated to the packed-refs
	 * file by a simultaneous process, but our in-memory view is
	 * from before the migration. We ensure this as follows:
	 * First, we call prime_ref_dir(), which pre-reads the loose
	 * references for the subtree into the cache. (If they've
	 * already been read, that's OK; we only need to guarantee
	 * that they're read before the packed refs, not *how much*
	 * before.) After that, we call get_packed_ref_cache(), which
	 * internally checks whether the packed-ref cache is up to
	 * date with what is on disk, and re-reads it if not.
	 */</comment>

	<expr_stmt><expr><name pos:line="38" pos:column="9">loose_dir<pos:position pos:line="38" pos:column="18"/></name> <operator pos:line="38" pos:column="19">=<pos:position pos:line="38" pos:column="20"/></operator> <call><name pos:line="38" pos:column="21">get_loose_refs<pos:position pos:line="38" pos:column="35"/></name><argument_list pos:line="38" pos:column="35">(<argument><expr><name pos:line="38" pos:column="36">refs<pos:position pos:line="38" pos:column="40"/></name></expr></argument>)<pos:position pos:line="38" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="42"/></expr_stmt>

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">prefix<pos:position pos:line="40" pos:column="19"/></name> <operator pos:line="40" pos:column="20">&amp;&amp;<pos:position pos:line="40" pos:column="30"/></operator> <operator pos:line="40" pos:column="23">*<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="24">prefix<pos:position pos:line="40" pos:column="30"/></name></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="17">loose_dir<pos:position pos:line="41" pos:column="26"/></name> <operator pos:line="41" pos:column="27">=<pos:position pos:line="41" pos:column="28"/></operator> <call><name pos:line="41" pos:column="29">find_containing_dir<pos:position pos:line="41" pos:column="48"/></name><argument_list pos:line="41" pos:column="48">(<argument><expr><name pos:line="41" pos:column="49">loose_dir<pos:position pos:line="41" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="60">prefix<pos:position pos:line="41" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="68">0<pos:position pos:line="41" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="71"/></expr_stmt></block></then></if>

	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">loose_dir<pos:position pos:line="43" pos:column="22"/></name></expr>)<pos:position pos:line="43" pos:column="23"/></condition><then pos:line="43" pos:column="23"> <block pos:line="43" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">prime_ref_dir<pos:position pos:line="44" pos:column="30"/></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">loose_dir<pos:position pos:line="44" pos:column="40"/></name></expr></argument>)<pos:position pos:line="44" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="45" pos:column="17">loose_iter<pos:position pos:line="45" pos:column="27"/></name> <operator pos:line="45" pos:column="28">=<pos:position pos:line="45" pos:column="29"/></operator> <call><name pos:line="45" pos:column="30">cache_ref_iterator_begin<pos:position pos:line="45" pos:column="54"/></name><argument_list pos:line="45" pos:column="54">(<argument><expr><name pos:line="45" pos:column="55">loose_dir<pos:position pos:line="45" pos:column="64"/></name></expr></argument>)<pos:position pos:line="45" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></then> <else pos:line="46" pos:column="11">else <block pos:line="46" pos:column="16">{
		<comment type="block" pos:line="47" pos:column="17">/* There's nothing to iterate over. */</comment>
		<expr_stmt><expr><name pos:line="48" pos:column="17">loose_iter<pos:position pos:line="48" pos:column="27"/></name> <operator pos:line="48" pos:column="28">=<pos:position pos:line="48" pos:column="29"/></operator> <call><name pos:line="48" pos:column="30">empty_ref_iterator_begin<pos:position pos:line="48" pos:column="54"/></name><argument_list pos:line="48" pos:column="54">()<pos:position pos:line="48" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></else></if>

	<expr_stmt><expr><name><name pos:line="51" pos:column="9">iter<pos:position pos:line="51" pos:column="13"/></name><operator pos:line="51" pos:column="13">-&gt;<pos:position pos:line="51" pos:column="18"/></operator><name pos:line="51" pos:column="15">packed_ref_cache<pos:position pos:line="51" pos:column="31"/></name></name> <operator pos:line="51" pos:column="32">=<pos:position pos:line="51" pos:column="33"/></operator> <call><name pos:line="51" pos:column="34">get_packed_ref_cache<pos:position pos:line="51" pos:column="54"/></name><argument_list pos:line="51" pos:column="54">(<argument><expr><name pos:line="51" pos:column="55">refs<pos:position pos:line="51" pos:column="59"/></name></expr></argument>)<pos:position pos:line="51" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="52" pos:column="9">acquire_packed_ref_cache<pos:position pos:line="52" pos:column="33"/></name><argument_list pos:line="52" pos:column="33">(<argument><expr><name><name pos:line="52" pos:column="34">iter<pos:position pos:line="52" pos:column="38"/></name><operator pos:line="52" pos:column="38">-&gt;<pos:position pos:line="52" pos:column="43"/></operator><name pos:line="52" pos:column="40">packed_ref_cache<pos:position pos:line="52" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="53" pos:column="9">packed_dir<pos:position pos:line="53" pos:column="19"/></name> <operator pos:line="53" pos:column="20">=<pos:position pos:line="53" pos:column="21"/></operator> <call><name pos:line="53" pos:column="22">get_packed_ref_dir<pos:position pos:line="53" pos:column="40"/></name><argument_list pos:line="53" pos:column="40">(<argument><expr><name><name pos:line="53" pos:column="41">iter<pos:position pos:line="53" pos:column="45"/></name><operator pos:line="53" pos:column="45">-&gt;<pos:position pos:line="53" pos:column="50"/></operator><name pos:line="53" pos:column="47">packed_ref_cache<pos:position pos:line="53" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="65"/></expr_stmt>

	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name pos:line="55" pos:column="13">prefix<pos:position pos:line="55" pos:column="19"/></name> <operator pos:line="55" pos:column="20">&amp;&amp;<pos:position pos:line="55" pos:column="30"/></operator> <operator pos:line="55" pos:column="23">*<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="24">prefix<pos:position pos:line="55" pos:column="30"/></name></expr>)<pos:position pos:line="55" pos:column="31"/></condition><then pos:line="55" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="17">packed_dir<pos:position pos:line="56" pos:column="27"/></name> <operator pos:line="56" pos:column="28">=<pos:position pos:line="56" pos:column="29"/></operator> <call><name pos:line="56" pos:column="30">find_containing_dir<pos:position pos:line="56" pos:column="49"/></name><argument_list pos:line="56" pos:column="49">(<argument><expr><name pos:line="56" pos:column="50">packed_dir<pos:position pos:line="56" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="62">prefix<pos:position pos:line="56" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="70">0<pos:position pos:line="56" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="73"/></expr_stmt></block></then></if>

	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">packed_dir<pos:position pos:line="58" pos:column="23"/></name></expr>)<pos:position pos:line="58" pos:column="24"/></condition><then pos:line="58" pos:column="24"> <block pos:line="58" pos:column="25">{
		<expr_stmt><expr><name pos:line="59" pos:column="17">packed_iter<pos:position pos:line="59" pos:column="28"/></name> <operator pos:line="59" pos:column="29">=<pos:position pos:line="59" pos:column="30"/></operator> <call><name pos:line="59" pos:column="31">cache_ref_iterator_begin<pos:position pos:line="59" pos:column="55"/></name><argument_list pos:line="59" pos:column="55">(<argument><expr><name pos:line="59" pos:column="56">packed_dir<pos:position pos:line="59" pos:column="66"/></name></expr></argument>)<pos:position pos:line="59" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="68"/></expr_stmt>
	}<pos:position pos:line="60" pos:column="10"/></block></then> <else pos:line="60" pos:column="11">else <block pos:line="60" pos:column="16">{
		<comment type="block" pos:line="61" pos:column="17">/* There's nothing to iterate over. */</comment>
		<expr_stmt><expr><name pos:line="62" pos:column="17">packed_iter<pos:position pos:line="62" pos:column="28"/></name> <operator pos:line="62" pos:column="29">=<pos:position pos:line="62" pos:column="30"/></operator> <call><name pos:line="62" pos:column="31">empty_ref_iterator_begin<pos:position pos:line="62" pos:column="55"/></name><argument_list pos:line="62" pos:column="55">()<pos:position pos:line="62" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="63" pos:column="10"/></block></else></if>

	<expr_stmt><expr><name><name pos:line="65" pos:column="9">iter<pos:position pos:line="65" pos:column="13"/></name><operator pos:line="65" pos:column="13">-&gt;<pos:position pos:line="65" pos:column="18"/></operator><name pos:line="65" pos:column="15">iter0<pos:position pos:line="65" pos:column="20"/></name></name> <operator pos:line="65" pos:column="21">=<pos:position pos:line="65" pos:column="22"/></operator> <call><name pos:line="65" pos:column="23">overlay_ref_iterator_begin<pos:position pos:line="65" pos:column="49"/></name><argument_list pos:line="65" pos:column="49">(<argument><expr><name pos:line="65" pos:column="50">loose_iter<pos:position pos:line="65" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="62">packed_iter<pos:position pos:line="65" pos:column="73"/></name></expr></argument>)<pos:position pos:line="65" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="75"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="66" pos:column="9">iter<pos:position pos:line="66" pos:column="13"/></name><operator pos:line="66" pos:column="13">-&gt;<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="15">flags<pos:position pos:line="66" pos:column="20"/></name></name> <operator pos:line="66" pos:column="21">=<pos:position pos:line="66" pos:column="22"/></operator> <name pos:line="66" pos:column="23">flags<pos:position pos:line="66" pos:column="28"/></name></expr>;<pos:position pos:line="66" pos:column="29"/></expr_stmt>

	<return pos:line="68" pos:column="9">return <expr><name pos:line="68" pos:column="16">ref_iterator<pos:position pos:line="68" pos:column="28"/></name></expr>;<pos:position pos:line="68" pos:column="29"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
