<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_266.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">apply_binary<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">apply_state<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">state<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="2" pos:column="25">struct<pos:position pos:line="2" pos:column="31"/></name> <name pos:line="2" pos:column="32">image<pos:position pos:line="2" pos:column="37"/></name></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">img<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="3" pos:column="25">struct<pos:position pos:line="3" pos:column="31"/></name> <name pos:line="3" pos:column="32">patch<pos:position pos:line="3" pos:column="37"/></name></name> <modifier pos:line="3" pos:column="38">*<pos:position pos:line="3" pos:column="39"/></modifier></type><name pos:line="3" pos:column="39">patch<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="45"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">name<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><ternary><condition><expr><name><name pos:line="5" pos:column="28">patch<pos:position pos:line="5" pos:column="33"/></name><operator pos:line="5" pos:column="33">-&gt;<pos:position pos:line="5" pos:column="38"/></operator><name pos:line="5" pos:column="35">old_name<pos:position pos:line="5" pos:column="43"/></name></name></expr> ?<pos:position pos:line="5" pos:column="45"/></condition><then pos:line="5" pos:column="45"> <expr><name><name pos:line="5" pos:column="46">patch<pos:position pos:line="5" pos:column="51"/></name><operator pos:line="5" pos:column="51">-&gt;<pos:position pos:line="5" pos:column="56"/></operator><name pos:line="5" pos:column="53">old_name<pos:position pos:line="5" pos:column="61"/></name></name></expr> <pos:position pos:line="5" pos:column="62"/></then><else pos:line="5" pos:column="62">: <expr><name><name pos:line="5" pos:column="64">patch<pos:position pos:line="5" pos:column="69"/></name><operator pos:line="5" pos:column="69">-&gt;<pos:position pos:line="5" pos:column="74"/></operator><name pos:line="5" pos:column="71">new_name<pos:position pos:line="5" pos:column="79"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="5" pos:column="80"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name></type> <name><name pos:line="6" pos:column="23">sha1<pos:position pos:line="6" pos:column="27"/></name><index pos:line="6" pos:column="27">[<expr><literal type="number" pos:line="6" pos:column="28">20<pos:position pos:line="6" pos:column="30"/></literal></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/*
	 * For safety, we require patch index line to contain
	 * full 40-byte textual SHA1 for old and new, at least for now.
	 */</comment>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">strlen<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><name><name pos:line="12" pos:column="20">patch<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">-&gt;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="27">old_sha1_prefix<pos:position pos:line="12" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call> <operator pos:line="12" pos:column="44">!=<pos:position pos:line="12" pos:column="46"/></operator> <literal type="number" pos:line="12" pos:column="47">40<pos:position pos:line="12" pos:column="49"/></literal> <operator pos:line="12" pos:column="50">||<pos:position pos:line="12" pos:column="52"/></operator>
	    <call><name pos:line="13" pos:column="13">strlen<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name><name pos:line="13" pos:column="20">patch<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">-&gt;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="27">new_sha1_prefix<pos:position pos:line="13" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call> <operator pos:line="13" pos:column="44">!=<pos:position pos:line="13" pos:column="46"/></operator> <literal type="number" pos:line="13" pos:column="47">40<pos:position pos:line="13" pos:column="49"/></literal> <operator pos:line="13" pos:column="50">||<pos:position pos:line="13" pos:column="52"/></operator>
	    <call><name pos:line="14" pos:column="13">get_sha1_hex<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name><name pos:line="14" pos:column="26">patch<pos:position pos:line="14" pos:column="31"/></name><operator pos:line="14" pos:column="31">-&gt;<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="33">old_sha1_prefix<pos:position pos:line="14" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="50">sha1<pos:position pos:line="14" pos:column="54"/></name></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call> <operator pos:line="14" pos:column="56">||<pos:position pos:line="14" pos:column="58"/></operator>
	    <call><name pos:line="15" pos:column="13">get_sha1_hex<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name><name pos:line="15" pos:column="26">patch<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">-&gt;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="33">new_sha1_prefix<pos:position pos:line="15" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="50">sha1<pos:position pos:line="15" pos:column="54"/></name></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="56"/></condition><then pos:line="15" pos:column="56">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><call><name pos:line="16" pos:column="24">error<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><literal type="string" pos:line="16" pos:column="30">"cannot apply binary patch to '%s' "<pos:position pos:line="16" pos:column="66"/></literal>
			     <literal type="string" pos:line="17" pos:column="30">"without full index line"<pos:position pos:line="17" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="57">name<pos:position pos:line="17" pos:column="61"/></name></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="63"/></return></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name><name pos:line="19" pos:column="13">patch<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">old_name<pos:position pos:line="19" pos:column="28"/></name></name></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29"> <block pos:line="19" pos:column="30">{
		<comment type="block" pos:line="20" pos:column="17">/*
		 * See if the old one matches what the patch
		 * applies to.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">hash_sha1_file<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><name><name pos:line="24" pos:column="32">img<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">-&gt;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="37">buf<pos:position pos:line="24" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="42">img<pos:position pos:line="24" pos:column="45"/></name><operator pos:line="24" pos:column="45">-&gt;<pos:position pos:line="24" pos:column="50"/></operator><name pos:line="24" pos:column="47">len<pos:position pos:line="24" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="52">blob_type<pos:position pos:line="24" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="63">sha1<pos:position pos:line="24" pos:column="67"/></name></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">strcmp<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><call><name pos:line="25" pos:column="28">sha1_to_hex<pos:position pos:line="25" pos:column="39"/></name><argument_list pos:line="25" pos:column="39">(<argument><expr><name pos:line="25" pos:column="40">sha1<pos:position pos:line="25" pos:column="44"/></name></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="47">patch<pos:position pos:line="25" pos:column="52"/></name><operator pos:line="25" pos:column="52">-&gt;<pos:position pos:line="25" pos:column="57"/></operator><name pos:line="25" pos:column="54">old_sha1_prefix<pos:position pos:line="25" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="71"/></condition><then pos:line="25" pos:column="71">
			<block type="pseudo"><return pos:line="26" pos:column="25">return <expr><call><name pos:line="26" pos:column="32">error<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><literal type="string" pos:line="26" pos:column="38">"the patch applies to '%s' (%s), "<pos:position pos:line="26" pos:column="72"/></literal>
				     <literal type="string" pos:line="27" pos:column="38">"which does not match the "<pos:position pos:line="27" pos:column="65"/></literal>
				     <literal type="string" pos:line="28" pos:column="38">"current contents."<pos:position pos:line="28" pos:column="57"/></literal></expr></argument>,
				     <argument><expr><name pos:line="29" pos:column="38">name<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="44">sha1_to_hex<pos:position pos:line="29" pos:column="55"/></name><argument_list pos:line="29" pos:column="55">(<argument><expr><name pos:line="29" pos:column="56">sha1<pos:position pos:line="29" pos:column="60"/></name></expr></argument>)<pos:position pos:line="29" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="63"/></return></block></then></if>
	}<pos:position pos:line="30" pos:column="10"/></block></then>
	<else pos:line="31" pos:column="9">else <block pos:line="31" pos:column="14">{
		<comment type="block" pos:line="32" pos:column="17">/* Otherwise, the old one must be empty. */</comment>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name><name pos:line="33" pos:column="21">img<pos:position pos:line="33" pos:column="24"/></name><operator pos:line="33" pos:column="24">-&gt;<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="26">len<pos:position pos:line="33" pos:column="29"/></name></name></expr>)<pos:position pos:line="33" pos:column="30"/></condition><then pos:line="33" pos:column="30">
			<block type="pseudo"><return pos:line="34" pos:column="25">return <expr><call><name pos:line="34" pos:column="32">error<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><literal type="string" pos:line="34" pos:column="38">"the patch applies to an empty "<pos:position pos:line="34" pos:column="70"/></literal>
				     <literal type="string" pos:line="35" pos:column="38">"'%s' but it is not empty"<pos:position pos:line="35" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="66">name<pos:position pos:line="35" pos:column="70"/></name></expr></argument>)<pos:position pos:line="35" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="72"/></return></block></then></if>
	}<pos:position pos:line="36" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="38" pos:column="9">get_sha1_hex<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name><name pos:line="38" pos:column="22">patch<pos:position pos:line="38" pos:column="27"/></name><operator pos:line="38" pos:column="27">-&gt;<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="29">new_sha1_prefix<pos:position pos:line="38" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="46">sha1<pos:position pos:line="38" pos:column="50"/></name></expr></argument>)<pos:position pos:line="38" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="52"/></expr_stmt>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><call><name pos:line="39" pos:column="13">is_null_sha1<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">sha1<pos:position pos:line="39" pos:column="30"/></name></expr></argument>)<pos:position pos:line="39" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="32"/></condition><then pos:line="39" pos:column="32"> <block pos:line="39" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">clear_image<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">img<pos:position pos:line="40" pos:column="32"/></name></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>
		<return pos:line="41" pos:column="17">return <expr><literal type="number" pos:line="41" pos:column="24">0<pos:position pos:line="41" pos:column="25"/></literal></expr>;<pos:position pos:line="41" pos:column="26"/></return> <comment type="block" pos:line="41" pos:column="27">/* deletion patch */</comment>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name pos:line="44" pos:column="13">has_sha1_file<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">(<argument><expr><name pos:line="44" pos:column="27">sha1<pos:position pos:line="44" pos:column="31"/></name></expr></argument>)<pos:position pos:line="44" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="33"/></condition><then pos:line="44" pos:column="33"> <block pos:line="44" pos:column="34">{
		<comment type="block" pos:line="45" pos:column="17">/* We already have the postimage */</comment>
		<decl_stmt><decl><type><name><name pos:line="46" pos:column="17">enum<pos:position pos:line="46" pos:column="21"/></name> <name pos:line="46" pos:column="22">object_type<pos:position pos:line="46" pos:column="33"/></name></name></type> <name pos:line="46" pos:column="34">type<pos:position pos:line="46" pos:column="38"/></name></decl>;<pos:position pos:line="46" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="47" pos:column="17">unsigned<pos:position pos:line="47" pos:column="25"/></name> <name pos:line="47" pos:column="26">long<pos:position pos:line="47" pos:column="30"/></name></type> <name pos:line="47" pos:column="31">size<pos:position pos:line="47" pos:column="35"/></name></decl>;<pos:position pos:line="47" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="48" pos:column="17">char<pos:position pos:line="48" pos:column="21"/></name> <modifier pos:line="48" pos:column="22">*<pos:position pos:line="48" pos:column="23"/></modifier></type><name pos:line="48" pos:column="23">result<pos:position pos:line="48" pos:column="29"/></name></decl>;<pos:position pos:line="48" pos:column="30"/></decl_stmt>

		<expr_stmt><expr><name pos:line="50" pos:column="17">result<pos:position pos:line="50" pos:column="23"/></name> <operator pos:line="50" pos:column="24">=<pos:position pos:line="50" pos:column="25"/></operator> <call><name pos:line="50" pos:column="26">read_sha1_file<pos:position pos:line="50" pos:column="40"/></name><argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">sha1<pos:position pos:line="50" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="47">&amp;<pos:position pos:line="50" pos:column="52"/></operator><name pos:line="50" pos:column="48">type<pos:position pos:line="50" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="54">&amp;<pos:position pos:line="50" pos:column="59"/></operator><name pos:line="50" pos:column="55">size<pos:position pos:line="50" pos:column="59"/></name></expr></argument>)<pos:position pos:line="50" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="61"/></expr_stmt>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><operator pos:line="51" pos:column="21">!<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">result<pos:position pos:line="51" pos:column="28"/></name></expr>)<pos:position pos:line="51" pos:column="29"/></condition><then pos:line="51" pos:column="29">
			<block type="pseudo"><return pos:line="52" pos:column="25">return <expr><call><name pos:line="52" pos:column="32">error<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><literal type="string" pos:line="52" pos:column="38">"the necessary postimage %s for "<pos:position pos:line="52" pos:column="71"/></literal>
				     <literal type="string" pos:line="53" pos:column="38">"'%s' cannot be read"<pos:position pos:line="53" pos:column="59"/></literal></expr></argument>,
				     <argument><expr><name><name pos:line="54" pos:column="38">patch<pos:position pos:line="54" pos:column="43"/></name><operator pos:line="54" pos:column="43">-&gt;<pos:position pos:line="54" pos:column="48"/></operator><name pos:line="54" pos:column="45">new_sha1_prefix<pos:position pos:line="54" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="62">name<pos:position pos:line="54" pos:column="66"/></name></expr></argument>)<pos:position pos:line="54" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="68"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">clear_image<pos:position pos:line="55" pos:column="28"/></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">img<pos:position pos:line="55" pos:column="32"/></name></expr></argument>)<pos:position pos:line="55" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="56" pos:column="17">img<pos:position pos:line="56" pos:column="20"/></name><operator pos:line="56" pos:column="20">-&gt;<pos:position pos:line="56" pos:column="25"/></operator><name pos:line="56" pos:column="22">buf<pos:position pos:line="56" pos:column="25"/></name></name> <operator pos:line="56" pos:column="26">=<pos:position pos:line="56" pos:column="27"/></operator> <name pos:line="56" pos:column="28">result<pos:position pos:line="56" pos:column="34"/></name></expr>;<pos:position pos:line="56" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="57" pos:column="17">img<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">-&gt;<pos:position pos:line="57" pos:column="25"/></operator><name pos:line="57" pos:column="22">len<pos:position pos:line="57" pos:column="25"/></name></name> <operator pos:line="57" pos:column="26">=<pos:position pos:line="57" pos:column="27"/></operator> <name pos:line="57" pos:column="28">size<pos:position pos:line="57" pos:column="32"/></name></expr>;<pos:position pos:line="57" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="58" pos:column="10"/></block></then> <else pos:line="58" pos:column="11">else <block pos:line="58" pos:column="16">{
		<comment type="block" pos:line="59" pos:column="17">/*
		 * We have verified buf matches the preimage;
		 * apply the patch data to it, which is stored
		 * in the patch-&gt;fragments-&gt;{patch,size}.
		 */</comment>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><call><name pos:line="64" pos:column="21">apply_binary_fragment<pos:position pos:line="64" pos:column="42"/></name><argument_list pos:line="64" pos:column="42">(<argument><expr><name pos:line="64" pos:column="43">state<pos:position pos:line="64" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="50">img<pos:position pos:line="64" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="55">patch<pos:position pos:line="64" pos:column="60"/></name></expr></argument>)<pos:position pos:line="64" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="62"/></condition><then pos:line="64" pos:column="62">
			<block type="pseudo"><return pos:line="65" pos:column="25">return <expr><call><name pos:line="65" pos:column="32">error<pos:position pos:line="65" pos:column="37"/></name><argument_list pos:line="65" pos:column="37">(<argument><expr><call><name pos:line="65" pos:column="38">_<pos:position pos:line="65" pos:column="39"/></name><argument_list pos:line="65" pos:column="39">(<argument><expr><literal type="string" pos:line="65" pos:column="40">"binary patch does not apply to '%s'"<pos:position pos:line="65" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="78"/></argument_list></call></expr></argument>,
				     <argument><expr><name pos:line="66" pos:column="38">name<pos:position pos:line="66" pos:column="42"/></name></expr></argument>)<pos:position pos:line="66" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="44"/></return></block></then></if>

		<comment type="block" pos:line="68" pos:column="17">/* verify that the result matches */</comment>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">hash_sha1_file<pos:position pos:line="69" pos:column="31"/></name><argument_list pos:line="69" pos:column="31">(<argument><expr><name><name pos:line="69" pos:column="32">img<pos:position pos:line="69" pos:column="35"/></name><operator pos:line="69" pos:column="35">-&gt;<pos:position pos:line="69" pos:column="40"/></operator><name pos:line="69" pos:column="37">buf<pos:position pos:line="69" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="42">img<pos:position pos:line="69" pos:column="45"/></name><operator pos:line="69" pos:column="45">-&gt;<pos:position pos:line="69" pos:column="50"/></operator><name pos:line="69" pos:column="47">len<pos:position pos:line="69" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="52">blob_type<pos:position pos:line="69" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="63">sha1<pos:position pos:line="69" pos:column="67"/></name></expr></argument>)<pos:position pos:line="69" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="69"/></expr_stmt>
		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><call><name pos:line="70" pos:column="21">strcmp<pos:position pos:line="70" pos:column="27"/></name><argument_list pos:line="70" pos:column="27">(<argument><expr><call><name pos:line="70" pos:column="28">sha1_to_hex<pos:position pos:line="70" pos:column="39"/></name><argument_list pos:line="70" pos:column="39">(<argument><expr><name pos:line="70" pos:column="40">sha1<pos:position pos:line="70" pos:column="44"/></name></expr></argument>)<pos:position pos:line="70" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="47">patch<pos:position pos:line="70" pos:column="52"/></name><operator pos:line="70" pos:column="52">-&gt;<pos:position pos:line="70" pos:column="57"/></operator><name pos:line="70" pos:column="54">new_sha1_prefix<pos:position pos:line="70" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="71"/></condition><then pos:line="70" pos:column="71">
			<block type="pseudo"><return pos:line="71" pos:column="25">return <expr><call><name pos:line="71" pos:column="32">error<pos:position pos:line="71" pos:column="37"/></name><argument_list pos:line="71" pos:column="37">(<argument><expr><call><name pos:line="71" pos:column="38">_<pos:position pos:line="71" pos:column="39"/></name><argument_list pos:line="71" pos:column="39">(<argument><expr><literal type="string" pos:line="71" pos:column="40">"binary patch to '%s' creates incorrect result (expecting %s, got %s)"<pos:position pos:line="71" pos:column="110"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="111"/></argument_list></call></expr></argument>,
				<argument><expr><name pos:line="72" pos:column="33">name<pos:position pos:line="72" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="39">patch<pos:position pos:line="72" pos:column="44"/></name><operator pos:line="72" pos:column="44">-&gt;<pos:position pos:line="72" pos:column="49"/></operator><name pos:line="72" pos:column="46">new_sha1_prefix<pos:position pos:line="72" pos:column="61"/></name></name></expr></argument>, <argument><expr><call><name pos:line="72" pos:column="63">sha1_to_hex<pos:position pos:line="72" pos:column="74"/></name><argument_list pos:line="72" pos:column="74">(<argument><expr><name pos:line="72" pos:column="75">sha1<pos:position pos:line="72" pos:column="79"/></name></expr></argument>)<pos:position pos:line="72" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="72" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="82"/></return></block></then></if>
	}<pos:position pos:line="73" pos:column="10"/></block></else></if>

	<return pos:line="75" pos:column="9">return <expr><literal type="number" pos:line="75" pos:column="16">0<pos:position pos:line="75" pos:column="17"/></literal></expr>;<pos:position pos:line="75" pos:column="18"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
