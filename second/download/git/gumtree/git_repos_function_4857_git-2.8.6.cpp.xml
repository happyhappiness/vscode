<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4857_git-2.8.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">am_abort<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">am_state<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">state<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">char<pos:position pos:line="3" pos:column="22"/></name></type> <name><name pos:line="3" pos:column="23">curr_head<pos:position pos:line="3" pos:column="32"/></name><index pos:line="3" pos:column="32">[<expr><name pos:line="3" pos:column="33">GIT_SHA1_RAWSZ<pos:position pos:line="3" pos:column="47"/></name></expr>]<pos:position pos:line="3" pos:column="48"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="3" pos:column="50">orig_head<pos:position pos:line="3" pos:column="59"/></name><index pos:line="3" pos:column="59">[<expr><name pos:line="3" pos:column="60">GIT_SHA1_RAWSZ<pos:position pos:line="3" pos:column="74"/></name></expr>]<pos:position pos:line="3" pos:column="75"/></index></name></decl>;<pos:position pos:line="3" pos:column="76"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">has_curr_head<pos:position pos:line="4" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="28">has_orig_head<pos:position pos:line="4" pos:column="41"/></name></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">curr_branch<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><call><name pos:line="7" pos:column="14">safe_to_abort<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">state<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="35"/></condition><then pos:line="7" pos:column="35"> <block pos:line="7" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">am_destroy<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name pos:line="8" pos:column="28">state<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>
		<return pos:line="9" pos:column="17">return;<pos:position pos:line="9" pos:column="24"/></return>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">am_rerere_clear<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">()<pos:position pos:line="12" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">curr_branch<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <call><name pos:line="14" pos:column="23">resolve_refdup<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><literal type="string" pos:line="14" pos:column="38">"HEAD"<pos:position pos:line="14" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="46">0<pos:position pos:line="14" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="49">curr_head<pos:position pos:line="14" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="60">NULL<pos:position pos:line="14" pos:column="64"/></name></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">has_curr_head<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">=<pos:position pos:line="15" pos:column="24"/></operator> <operator pos:line="15" pos:column="25">!<pos:position pos:line="15" pos:column="26"/></operator><call><name pos:line="15" pos:column="26">is_null_sha1<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><name pos:line="15" pos:column="39">curr_head<pos:position pos:line="15" pos:column="48"/></name></expr></argument>)<pos:position pos:line="15" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="50"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">has_curr_head<pos:position pos:line="16" pos:column="27"/></name></expr>)<pos:position pos:line="16" pos:column="28"/></condition><then pos:line="16" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">hashcpy<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">curr_head<pos:position pos:line="17" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="36">EMPTY_TREE_SHA1_BIN<pos:position pos:line="17" pos:column="55"/></name></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">has_orig_head<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">=<pos:position pos:line="19" pos:column="24"/></operator> <operator pos:line="19" pos:column="25">!<pos:position pos:line="19" pos:column="26"/></operator><call><name pos:line="19" pos:column="26">get_sha1<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><literal type="string" pos:line="19" pos:column="35">"ORIG_HEAD"<pos:position pos:line="19" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="48">orig_head<pos:position pos:line="19" pos:column="57"/></name></expr></argument>)<pos:position pos:line="19" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="59"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">has_orig_head<pos:position pos:line="20" pos:column="27"/></name></expr>)<pos:position pos:line="20" pos:column="28"/></condition><then pos:line="20" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="17">hashcpy<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">orig_head<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="36">EMPTY_TREE_SHA1_BIN<pos:position pos:line="21" pos:column="55"/></name></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">clean_index<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">curr_head<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="32">orig_head<pos:position pos:line="23" pos:column="41"/></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">has_orig_head<pos:position pos:line="25" pos:column="26"/></name></expr>)<pos:position pos:line="25" pos:column="27"/></condition><then pos:line="25" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">update_ref<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><literal type="string" pos:line="26" pos:column="28">"am --abort"<pos:position pos:line="26" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="42">"HEAD"<pos:position pos:line="26" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="50">orig_head<pos:position pos:line="26" pos:column="59"/></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="27" pos:column="33">has_curr_head<pos:position pos:line="27" pos:column="46"/></name></expr> ?<pos:position pos:line="27" pos:column="48"/></condition><then pos:line="27" pos:column="48"> <expr><name pos:line="27" pos:column="49">curr_head<pos:position pos:line="27" pos:column="58"/></name></expr> <pos:position pos:line="27" pos:column="59"/></then><else pos:line="27" pos:column="59">: <expr><name pos:line="27" pos:column="61">NULL<pos:position pos:line="27" pos:column="65"/></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="67">0<pos:position pos:line="27" pos:column="68"/></literal></expr></argument>,
				<argument><expr><name pos:line="28" pos:column="33">UPDATE_REFS_DIE_ON_ERR<pos:position pos:line="28" pos:column="55"/></name></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt></block></then>
	<elseif pos:line="29" pos:column="9">else <if pos:line="29" pos:column="14">if <condition pos:line="29" pos:column="17">(<expr><name pos:line="29" pos:column="18">curr_branch<pos:position pos:line="29" pos:column="29"/></name></expr>)<pos:position pos:line="29" pos:column="30"/></condition><then pos:line="29" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="17">delete_ref<pos:position pos:line="30" pos:column="27"/></name><argument_list pos:line="30" pos:column="27">(<argument><expr><name pos:line="30" pos:column="28">curr_branch<pos:position pos:line="30" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="41">NULL<pos:position pos:line="30" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="47">REF_NODEREF<pos:position pos:line="30" pos:column="58"/></name></expr></argument>)<pos:position pos:line="30" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="60"/></expr_stmt></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="32" pos:column="9">free<pos:position pos:line="32" pos:column="13"/></name><argument_list pos:line="32" pos:column="13">(<argument><expr><name pos:line="32" pos:column="14">curr_branch<pos:position pos:line="32" pos:column="25"/></name></expr></argument>)<pos:position pos:line="32" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">am_destroy<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><name pos:line="33" pos:column="20">state<pos:position pos:line="33" pos:column="25"/></name></expr></argument>)<pos:position pos:line="33" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
