<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3063_git-2.10.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sha1close<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name><name pos:line="1" pos:column="15">struct<pos:position pos:line="1" pos:column="21"/></name> <name pos:line="1" pos:column="22">sha1file<pos:position pos:line="1" pos:column="30"/></name></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">f<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">unsigned<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">result<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">unsigned<pos:position pos:line="1" pos:column="66"/></name> <name pos:line="1" pos:column="67">int<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">flags<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">sha1flush<pos:position pos:line="5" pos:column="18"/></name><argument_list pos:line="5" pos:column="18">(<argument><expr><name pos:line="5" pos:column="19">f<pos:position pos:line="5" pos:column="20"/></name></expr></argument>)<pos:position pos:line="5" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="6" pos:column="9">git_SHA1_Final<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><name><name pos:line="6" pos:column="24">f<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">-&gt;<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="27">buffer<pos:position pos:line="6" pos:column="33"/></name></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="35">&amp;<pos:position pos:line="6" pos:column="40"/></operator><name><name pos:line="6" pos:column="36">f<pos:position pos:line="6" pos:column="37"/></name><operator pos:line="6" pos:column="37">-&gt;<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="39">ctx<pos:position pos:line="6" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="44"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">result<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="17">hashcpy<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">result<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="33">f<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">-&gt;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="36">buffer<pos:position pos:line="8" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="44"/></expr_stmt></block></then></if>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">flags<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">&amp;<pos:position pos:line="9" pos:column="24"/></operator> <operator pos:line="9" pos:column="21">(<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">CSUM_CLOSE<pos:position pos:line="9" pos:column="32"/></name> <operator pos:line="9" pos:column="33">|<pos:position pos:line="9" pos:column="34"/></operator> <name pos:line="9" pos:column="35">CSUM_FSYNC<pos:position pos:line="9" pos:column="45"/></name><operator pos:line="9" pos:column="45">)<pos:position pos:line="9" pos:column="46"/></operator></expr>)<pos:position pos:line="9" pos:column="47"/></condition><then pos:line="9" pos:column="47"> <block pos:line="9" pos:column="48">{
		<comment type="block" pos:line="10" pos:column="17">/* write checksum and close fd */</comment>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">flush<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">f<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="26">f<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">-&gt;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="29">buffer<pos:position pos:line="11" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="37">20<pos:position pos:line="11" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">flags<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">&amp;<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="29">CSUM_FSYNC<pos:position pos:line="12" pos:column="39"/></name></expr>)<pos:position pos:line="12" pos:column="40"/></condition><then pos:line="12" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">fsync_or_die<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name><name pos:line="13" pos:column="38">f<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">-&gt;<pos:position pos:line="13" pos:column="44"/></operator><name pos:line="13" pos:column="41">fd<pos:position pos:line="13" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="45">f<pos:position pos:line="13" pos:column="46"/></name><operator pos:line="13" pos:column="46">-&gt;<pos:position pos:line="13" pos:column="51"/></operator><name pos:line="13" pos:column="48">name<pos:position pos:line="13" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt></block></then></if>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><call><name pos:line="14" pos:column="21">close<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><name><name pos:line="14" pos:column="27">f<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">-&gt;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="30">fd<pos:position pos:line="14" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="34"/></condition><then pos:line="14" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="25">die_errno<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><literal type="string" pos:line="15" pos:column="35">"%s: sha1 file error on close"<pos:position pos:line="15" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="67">f<pos:position pos:line="15" pos:column="68"/></name><operator pos:line="15" pos:column="68">-&gt;<pos:position pos:line="15" pos:column="73"/></operator><name pos:line="15" pos:column="70">name<pos:position pos:line="15" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="76"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="16" pos:column="17">fd<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <literal type="number" pos:line="16" pos:column="22">0<pos:position pos:line="16" pos:column="23"/></literal></expr>;<pos:position pos:line="16" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then> <else pos:line="17" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="17">fd<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <name><name pos:line="18" pos:column="22">f<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">-&gt;<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="25">fd<pos:position pos:line="18" pos:column="27"/></name></name></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt></block></else></if>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><literal type="number" pos:line="19" pos:column="13">0<pos:position pos:line="19" pos:column="14"/></literal> <operator pos:line="19" pos:column="15">&lt;=<pos:position pos:line="19" pos:column="20"/></operator> <name><name pos:line="19" pos:column="18">f<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">-&gt;<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="21">check_fd<pos:position pos:line="19" pos:column="29"/></name></name></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30"> <block pos:line="19" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">char<pos:position pos:line="20" pos:column="21"/></name></type> <name pos:line="20" pos:column="22">discard<pos:position pos:line="20" pos:column="29"/></name></decl>;<pos:position pos:line="20" pos:column="30"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">int<pos:position pos:line="21" pos:column="20"/></name></type> <name pos:line="21" pos:column="21">cnt<pos:position pos:line="21" pos:column="24"/></name> <init pos:line="21" pos:column="25">= <expr><call><name pos:line="21" pos:column="27">read_in_full<pos:position pos:line="21" pos:column="39"/></name><argument_list pos:line="21" pos:column="39">(<argument><expr><name><name pos:line="21" pos:column="40">f<pos:position pos:line="21" pos:column="41"/></name><operator pos:line="21" pos:column="41">-&gt;<pos:position pos:line="21" pos:column="46"/></operator><name pos:line="21" pos:column="43">check_fd<pos:position pos:line="21" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="53">&amp;<pos:position pos:line="21" pos:column="58"/></operator><name pos:line="21" pos:column="54">discard<pos:position pos:line="21" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="63">1<pos:position pos:line="21" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="66"/></decl_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">cnt<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">&lt;<pos:position pos:line="22" pos:column="29"/></operator> <literal type="number" pos:line="22" pos:column="27">0<pos:position pos:line="22" pos:column="28"/></literal></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">die_errno<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><literal type="string" pos:line="23" pos:column="35">"%s: error when reading the tail of sha1 file"<pos:position pos:line="23" pos:column="81"/></literal></expr></argument>,
				  <argument><expr><name><name pos:line="24" pos:column="35">f<pos:position pos:line="24" pos:column="36"/></name><operator pos:line="24" pos:column="36">-&gt;<pos:position pos:line="24" pos:column="41"/></operator><name pos:line="24" pos:column="38">name<pos:position pos:line="24" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="44"/></expr_stmt></block></then></if>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">cnt<pos:position pos:line="25" pos:column="24"/></name></expr>)<pos:position pos:line="25" pos:column="25"/></condition><then pos:line="25" pos:column="25">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="25">die<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><literal type="string" pos:line="26" pos:column="29">"%s: sha1 file has trailing garbage"<pos:position pos:line="26" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="67">f<pos:position pos:line="26" pos:column="68"/></name><operator pos:line="26" pos:column="68">-&gt;<pos:position pos:line="26" pos:column="73"/></operator><name pos:line="26" pos:column="70">name<pos:position pos:line="26" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="76"/></expr_stmt></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">close<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name><name pos:line="27" pos:column="27">f<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">-&gt;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="30">check_fd<pos:position pos:line="27" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="40"/></condition><then pos:line="27" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">die_errno<pos:position pos:line="28" pos:column="34"/></name><argument_list pos:line="28" pos:column="34">(<argument><expr><literal type="string" pos:line="28" pos:column="35">"%s: sha1 file error on close"<pos:position pos:line="28" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="67">f<pos:position pos:line="28" pos:column="68"/></name><operator pos:line="28" pos:column="68">-&gt;<pos:position pos:line="28" pos:column="73"/></operator><name pos:line="28" pos:column="70">name<pos:position pos:line="28" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="76"/></expr_stmt></block></then></if>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">free<pos:position pos:line="30" pos:column="13"/></name><argument_list pos:line="30" pos:column="13">(<argument><expr><name pos:line="30" pos:column="14">f<pos:position pos:line="30" pos:column="15"/></name></expr></argument>)<pos:position pos:line="30" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="17"/></expr_stmt>
	<return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">fd<pos:position pos:line="31" pos:column="18"/></name></expr>;<pos:position pos:line="31" pos:column="19"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
