<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2140_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">check_stream_sha1<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">git_zstream<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">stream<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">hdr<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="3" pos:column="30">unsigned<pos:position pos:line="3" pos:column="38"/></name> <name pos:line="3" pos:column="39">long<pos:position pos:line="3" pos:column="43"/></name></type> <name pos:line="3" pos:column="44">size<pos:position pos:line="3" pos:column="48"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="4" pos:column="30">const<pos:position pos:line="4" pos:column="35"/></specifier> <name pos:line="4" pos:column="36">char<pos:position pos:line="4" pos:column="40"/></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier></type><name pos:line="4" pos:column="42">path<pos:position pos:line="4" pos:column="46"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="5" pos:column="30">const<pos:position pos:line="5" pos:column="35"/></specifier> <name pos:line="5" pos:column="36">unsigned<pos:position pos:line="5" pos:column="44"/></name> <name pos:line="5" pos:column="45">char<pos:position pos:line="5" pos:column="49"/></name> <modifier pos:line="5" pos:column="50">*<pos:position pos:line="5" pos:column="51"/></modifier></type><name pos:line="5" pos:column="51">expected_sha1<pos:position pos:line="5" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="65"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">git_SHA_CTX<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">c<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name> <name pos:line="8" pos:column="18">char<pos:position pos:line="8" pos:column="22"/></name></type> <name><name pos:line="8" pos:column="23">real_sha1<pos:position pos:line="8" pos:column="32"/></name><index pos:line="8" pos:column="32">[<expr><name pos:line="8" pos:column="33">GIT_SHA1_RAWSZ<pos:position pos:line="8" pos:column="47"/></name></expr>]<pos:position pos:line="8" pos:column="48"/></index></name></decl>;<pos:position pos:line="8" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name> <name pos:line="9" pos:column="18">char<pos:position pos:line="9" pos:column="22"/></name></type> <name><name pos:line="9" pos:column="23">buf<pos:position pos:line="9" pos:column="26"/></name><index pos:line="9" pos:column="26">[<expr><literal type="number" pos:line="9" pos:column="27">4096<pos:position pos:line="9" pos:column="31"/></literal></expr>]<pos:position pos:line="9" pos:column="32"/></index></name></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">unsigned<pos:position pos:line="10" pos:column="17"/></name> <name pos:line="10" pos:column="18">long<pos:position pos:line="10" pos:column="22"/></name></type> <name pos:line="10" pos:column="23">total_read<pos:position pos:line="10" pos:column="33"/></name></decl>;<pos:position pos:line="10" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">status<pos:position pos:line="11" pos:column="19"/></name> <init pos:line="11" pos:column="20">= <expr><name pos:line="11" pos:column="22">Z_OK<pos:position pos:line="11" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">git_SHA1_Init<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><operator pos:line="13" pos:column="23">&amp;<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="24">c<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">git_SHA1_Update<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><operator pos:line="14" pos:column="25">&amp;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="26">c<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="29">hdr<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="34">stream<pos:position pos:line="14" pos:column="40"/></name><operator pos:line="14" pos:column="40">-&gt;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="42">total_out<pos:position pos:line="14" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>

	<comment type="block" pos:line="16" pos:column="9">/*
	 * We already read some bytes into hdr, but the ones up to the NUL
	 * do not count against the object's content size.
	 */</comment>
	<expr_stmt><expr><name pos:line="20" pos:column="9">total_read<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name><name pos:line="20" pos:column="22">stream<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">-&gt;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="30">total_out<pos:position pos:line="20" pos:column="39"/></name></name> <operator pos:line="20" pos:column="40">-<pos:position pos:line="20" pos:column="41"/></operator> <call><name pos:line="20" pos:column="42">strlen<pos:position pos:line="20" pos:column="48"/></name><argument_list pos:line="20" pos:column="48">(<argument><expr><name pos:line="20" pos:column="49">hdr<pos:position pos:line="20" pos:column="52"/></name></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call> <operator pos:line="20" pos:column="54">-<pos:position pos:line="20" pos:column="55"/></operator> <literal type="number" pos:line="20" pos:column="56">1<pos:position pos:line="20" pos:column="57"/></literal></expr>;<pos:position pos:line="20" pos:column="58"/></expr_stmt>

	<comment type="block" pos:line="22" pos:column="9">/*
	 * This size comparison must be "&lt;=" to read the final zlib packets;
	 * see the comment in unpack_sha1_rest for details.
	 */</comment>
	<while pos:line="26" pos:column="9">while <condition pos:line="26" pos:column="15">(<expr><name pos:line="26" pos:column="16">total_read<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">&lt;=<pos:position pos:line="26" pos:column="32"/></operator> <name pos:line="26" pos:column="30">size<pos:position pos:line="26" pos:column="34"/></name> <operator pos:line="26" pos:column="35">&amp;&amp;<pos:position pos:line="26" pos:column="45"/></operator>
	       <operator pos:line="27" pos:column="16">(<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="17">status<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">==<pos:position pos:line="27" pos:column="26"/></operator> <name pos:line="27" pos:column="27">Z_OK<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">||<pos:position pos:line="27" pos:column="34"/></operator> <name pos:line="27" pos:column="35">status<pos:position pos:line="27" pos:column="41"/></name> <operator pos:line="27" pos:column="42">==<pos:position pos:line="27" pos:column="44"/></operator> <name pos:line="27" pos:column="45">Z_BUF_ERROR<pos:position pos:line="27" pos:column="56"/></name><operator pos:line="27" pos:column="56">)<pos:position pos:line="27" pos:column="57"/></operator></expr>)<pos:position pos:line="27" pos:column="58"/></condition> <block pos:line="27" pos:column="59">{
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">stream<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">-&gt;<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="25">next_out<pos:position pos:line="28" pos:column="33"/></name></name> <operator pos:line="28" pos:column="34">=<pos:position pos:line="28" pos:column="35"/></operator> <name pos:line="28" pos:column="36">buf<pos:position pos:line="28" pos:column="39"/></name></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="29" pos:column="17">stream<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">-&gt;<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="25">avail_out<pos:position pos:line="29" pos:column="34"/></name></name> <operator pos:line="29" pos:column="35">=<pos:position pos:line="29" pos:column="36"/></operator> <sizeof pos:line="29" pos:column="37">sizeof<argument_list pos:line="29" pos:column="43">(<argument><expr><name pos:line="29" pos:column="44">buf<pos:position pos:line="29" pos:column="47"/></name></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></sizeof></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">size<pos:position pos:line="30" pos:column="25"/></name> <operator pos:line="30" pos:column="26">-<pos:position pos:line="30" pos:column="27"/></operator> <name pos:line="30" pos:column="28">total_read<pos:position pos:line="30" pos:column="38"/></name> <operator pos:line="30" pos:column="39">&lt;<pos:position pos:line="30" pos:column="43"/></operator> <name><name pos:line="30" pos:column="41">stream<pos:position pos:line="30" pos:column="47"/></name><operator pos:line="30" pos:column="47">-&gt;<pos:position pos:line="30" pos:column="52"/></operator><name pos:line="30" pos:column="49">avail_out<pos:position pos:line="30" pos:column="58"/></name></name></expr>)<pos:position pos:line="30" pos:column="59"/></condition><then pos:line="30" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="25">stream<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">-&gt;<pos:position pos:line="31" pos:column="36"/></operator><name pos:line="31" pos:column="33">avail_out<pos:position pos:line="31" pos:column="42"/></name></name> <operator pos:line="31" pos:column="43">=<pos:position pos:line="31" pos:column="44"/></operator> <name pos:line="31" pos:column="45">size<pos:position pos:line="31" pos:column="49"/></name> <operator pos:line="31" pos:column="50">-<pos:position pos:line="31" pos:column="51"/></operator> <name pos:line="31" pos:column="52">total_read<pos:position pos:line="31" pos:column="62"/></name></expr>;<pos:position pos:line="31" pos:column="63"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="32" pos:column="17">status<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <call><name pos:line="32" pos:column="26">git_inflate<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">(<argument><expr><name pos:line="32" pos:column="38">stream<pos:position pos:line="32" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="46">Z_FINISH<pos:position pos:line="32" pos:column="54"/></name></expr></argument>)<pos:position pos:line="32" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">git_SHA1_Update<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><operator pos:line="33" pos:column="33">&amp;<pos:position pos:line="33" pos:column="38"/></operator><name pos:line="33" pos:column="34">c<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">buf<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="42">stream<pos:position pos:line="33" pos:column="48"/></name><operator pos:line="33" pos:column="48">-&gt;<pos:position pos:line="33" pos:column="53"/></operator><name pos:line="33" pos:column="50">next_out<pos:position pos:line="33" pos:column="58"/></name></name> <operator pos:line="33" pos:column="59">-<pos:position pos:line="33" pos:column="60"/></operator> <name pos:line="33" pos:column="61">buf<pos:position pos:line="33" pos:column="64"/></name></expr></argument>)<pos:position pos:line="33" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">total_read<pos:position pos:line="34" pos:column="27"/></name> <operator pos:line="34" pos:column="28">+=<pos:position pos:line="34" pos:column="30"/></operator> <name><name pos:line="34" pos:column="31">stream<pos:position pos:line="34" pos:column="37"/></name><operator pos:line="34" pos:column="37">-&gt;<pos:position pos:line="34" pos:column="42"/></operator><name pos:line="34" pos:column="39">next_out<pos:position pos:line="34" pos:column="47"/></name></name> <operator pos:line="34" pos:column="48">-<pos:position pos:line="34" pos:column="49"/></operator> <name pos:line="34" pos:column="50">buf<pos:position pos:line="34" pos:column="53"/></name></expr>;<pos:position pos:line="34" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">git_inflate_end<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name pos:line="36" pos:column="25">stream<pos:position pos:line="36" pos:column="31"/></name></expr></argument>)<pos:position pos:line="36" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">status<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">!=<pos:position pos:line="38" pos:column="22"/></operator> <name pos:line="38" pos:column="23">Z_STREAM_END<pos:position pos:line="38" pos:column="35"/></name></expr>)<pos:position pos:line="38" pos:column="36"/></condition><then pos:line="38" pos:column="36"> <block pos:line="38" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">error<pos:position pos:line="39" pos:column="22"/></name><argument_list pos:line="39" pos:column="22">(<argument><expr><literal type="string" pos:line="39" pos:column="23">"corrupt loose object '%s'"<pos:position pos:line="39" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="52">sha1_to_hex<pos:position pos:line="39" pos:column="63"/></name><argument_list pos:line="39" pos:column="63">(<argument><expr><name pos:line="39" pos:column="64">expected_sha1<pos:position pos:line="39" pos:column="77"/></name></expr></argument>)<pos:position pos:line="39" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="80"/></expr_stmt>
		<return pos:line="40" pos:column="17">return <expr><operator pos:line="40" pos:column="24">-<pos:position pos:line="40" pos:column="25"/></operator><literal type="number" pos:line="40" pos:column="25">1<pos:position pos:line="40" pos:column="26"/></literal></expr>;<pos:position pos:line="40" pos:column="27"/></return>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name><name pos:line="42" pos:column="13">stream<pos:position pos:line="42" pos:column="19"/></name><operator pos:line="42" pos:column="19">-&gt;<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="21">avail_in<pos:position pos:line="42" pos:column="29"/></name></name></expr>)<pos:position pos:line="42" pos:column="30"/></condition><then pos:line="42" pos:column="30"> <block pos:line="42" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">error<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><literal type="string" pos:line="43" pos:column="23">"garbage at end of loose object '%s'"<pos:position pos:line="43" pos:column="60"/></literal></expr></argument>,
		      <argument><expr><call><name pos:line="44" pos:column="23">sha1_to_hex<pos:position pos:line="44" pos:column="34"/></name><argument_list pos:line="44" pos:column="34">(<argument><expr><name pos:line="44" pos:column="35">expected_sha1<pos:position pos:line="44" pos:column="48"/></name></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="51"/></expr_stmt>
		<return pos:line="45" pos:column="17">return <expr><operator pos:line="45" pos:column="24">-<pos:position pos:line="45" pos:column="25"/></operator><literal type="number" pos:line="45" pos:column="25">1<pos:position pos:line="45" pos:column="26"/></literal></expr>;<pos:position pos:line="45" pos:column="27"/></return>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="48" pos:column="9">git_SHA1_Final<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><name pos:line="48" pos:column="24">real_sha1<pos:position pos:line="48" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="35">&amp;<pos:position pos:line="48" pos:column="40"/></operator><name pos:line="48" pos:column="36">c<pos:position pos:line="48" pos:column="37"/></name></expr></argument>)<pos:position pos:line="48" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><call><name pos:line="49" pos:column="13">hashcmp<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><name pos:line="49" pos:column="21">expected_sha1<pos:position pos:line="49" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="36">real_sha1<pos:position pos:line="49" pos:column="45"/></name></expr></argument>)<pos:position pos:line="49" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="47"/></condition><then pos:line="49" pos:column="47"> <block pos:line="49" pos:column="48">{
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">error<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">(<argument><expr><literal type="string" pos:line="50" pos:column="23">"sha1 mismatch for %s (expected %s)"<pos:position pos:line="50" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="61">path<pos:position pos:line="50" pos:column="65"/></name></expr></argument>,
		      <argument><expr><call><name pos:line="51" pos:column="23">sha1_to_hex<pos:position pos:line="51" pos:column="34"/></name><argument_list pos:line="51" pos:column="34">(<argument><expr><name pos:line="51" pos:column="35">expected_sha1<pos:position pos:line="51" pos:column="48"/></name></expr></argument>)<pos:position pos:line="51" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="51"/></expr_stmt>
		<return pos:line="52" pos:column="17">return <expr><operator pos:line="52" pos:column="24">-<pos:position pos:line="52" pos:column="25"/></operator><literal type="number" pos:line="52" pos:column="25">1<pos:position pos:line="52" pos:column="26"/></literal></expr>;<pos:position pos:line="52" pos:column="27"/></return>
	}<pos:position pos:line="53" pos:column="10"/></block></then></if>

	<return pos:line="55" pos:column="9">return <expr><literal type="number" pos:line="55" pos:column="16">0<pos:position pos:line="55" pos:column="17"/></literal></expr>;<pos:position pos:line="55" pos:column="18"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
