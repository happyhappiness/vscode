<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1085.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">if_atom_parser<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">used_atom<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">atom<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">arg<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><name pos:line="3" pos:column="14">arg<pos:position pos:line="3" pos:column="17"/></name></expr>)<pos:position pos:line="3" pos:column="18"/></condition><then pos:line="3" pos:column="18"> <block pos:line="3" pos:column="19">{
		<expr_stmt><expr><name><name pos:line="4" pos:column="17">atom<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">-&gt;<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="23">u<pos:position pos:line="4" pos:column="24"/></name><operator pos:line="4" pos:column="24">.<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">if_then_else<pos:position pos:line="4" pos:column="37"/></name><operator pos:line="4" pos:column="37">.<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="38">cmp_status<pos:position pos:line="4" pos:column="48"/></name></name> <operator pos:line="4" pos:column="49">=<pos:position pos:line="4" pos:column="50"/></operator> <name pos:line="4" pos:column="51">COMPARE_NONE<pos:position pos:line="4" pos:column="63"/></name></expr>;<pos:position pos:line="4" pos:column="64"/></expr_stmt>
		<return pos:line="5" pos:column="17">return;<pos:position pos:line="5" pos:column="24"/></return>
	}<pos:position pos:line="6" pos:column="10"/></block></then> <elseif pos:line="6" pos:column="11">else <if pos:line="6" pos:column="16">if <condition pos:line="6" pos:column="19">(<expr><call><name pos:line="6" pos:column="20">skip_prefix<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><name pos:line="6" pos:column="32">arg<pos:position pos:line="6" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="37">"equals="<pos:position pos:line="6" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="6" pos:column="48">&amp;<pos:position pos:line="6" pos:column="53"/></operator><name><name pos:line="6" pos:column="49">atom<pos:position pos:line="6" pos:column="53"/></name><operator pos:line="6" pos:column="53">-&gt;<pos:position pos:line="6" pos:column="58"/></operator><name pos:line="6" pos:column="55">u<pos:position pos:line="6" pos:column="56"/></name><operator pos:line="6" pos:column="56">.<pos:position pos:line="6" pos:column="57"/></operator><name pos:line="6" pos:column="57">if_then_else<pos:position pos:line="6" pos:column="69"/></name><operator pos:line="6" pos:column="69">.<pos:position pos:line="6" pos:column="70"/></operator><name pos:line="6" pos:column="70">str<pos:position pos:line="6" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="75"/></condition><then pos:line="6" pos:column="75"> <block pos:line="6" pos:column="76">{
		<expr_stmt><expr><name><name pos:line="7" pos:column="17">atom<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">-&gt;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="23">u<pos:position pos:line="7" pos:column="24"/></name><operator pos:line="7" pos:column="24">.<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="25">if_then_else<pos:position pos:line="7" pos:column="37"/></name><operator pos:line="7" pos:column="37">.<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="38">cmp_status<pos:position pos:line="7" pos:column="48"/></name></name> <operator pos:line="7" pos:column="49">=<pos:position pos:line="7" pos:column="50"/></operator> <name pos:line="7" pos:column="51">COMPARE_EQUAL<pos:position pos:line="7" pos:column="64"/></name></expr>;<pos:position pos:line="7" pos:column="65"/></expr_stmt>
	}<pos:position pos:line="8" pos:column="10"/></block></then></if></elseif> <elseif pos:line="8" pos:column="11">else <if pos:line="8" pos:column="16">if <condition pos:line="8" pos:column="19">(<expr><call><name pos:line="8" pos:column="20">skip_prefix<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><name pos:line="8" pos:column="32">arg<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="37">"notequals="<pos:position pos:line="8" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="8" pos:column="51">&amp;<pos:position pos:line="8" pos:column="56"/></operator><name><name pos:line="8" pos:column="52">atom<pos:position pos:line="8" pos:column="56"/></name><operator pos:line="8" pos:column="56">-&gt;<pos:position pos:line="8" pos:column="61"/></operator><name pos:line="8" pos:column="58">u<pos:position pos:line="8" pos:column="59"/></name><operator pos:line="8" pos:column="59">.<pos:position pos:line="8" pos:column="60"/></operator><name pos:line="8" pos:column="60">if_then_else<pos:position pos:line="8" pos:column="72"/></name><operator pos:line="8" pos:column="72">.<pos:position pos:line="8" pos:column="73"/></operator><name pos:line="8" pos:column="73">str<pos:position pos:line="8" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="78"/></condition><then pos:line="8" pos:column="78"> <block pos:line="8" pos:column="79">{
		<expr_stmt><expr><name><name pos:line="9" pos:column="17">atom<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">-&gt;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="23">u<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">.<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="25">if_then_else<pos:position pos:line="9" pos:column="37"/></name><operator pos:line="9" pos:column="37">.<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="38">cmp_status<pos:position pos:line="9" pos:column="48"/></name></name> <operator pos:line="9" pos:column="49">=<pos:position pos:line="9" pos:column="50"/></operator> <name pos:line="9" pos:column="51">COMPARE_UNEQUAL<pos:position pos:line="9" pos:column="66"/></name></expr>;<pos:position pos:line="9" pos:column="67"/></expr_stmt>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if></elseif> <else pos:line="10" pos:column="11">else <block pos:line="10" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">die<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><call><name pos:line="11" pos:column="21">_<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><literal type="string" pos:line="11" pos:column="23">"unrecognized %%(if) argument: %s"<pos:position pos:line="11" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="11" pos:column="60">arg<pos:position pos:line="11" pos:column="63"/></name></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="65"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></else></if>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
