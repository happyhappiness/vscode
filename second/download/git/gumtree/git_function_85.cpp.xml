<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_85.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">parse_next_arg<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">next<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="53">struct<pos:position pos:line="1" pos:column="59"/></name> <name pos:line="1" pos:column="60">strbuf<pos:position pos:line="1" pos:column="66"/></name></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">arg<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/* Parse next SP-terminated or NUL-terminated argument, if any */</comment>
	<expr_stmt><expr><call><name pos:line="4" pos:column="9">strbuf_reset<pos:position pos:line="4" pos:column="21"/></name><argument_list pos:line="4" pos:column="21">(<argument><expr><name pos:line="4" pos:column="22">arg<pos:position pos:line="4" pos:column="25"/></name></expr></argument>)<pos:position pos:line="4" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="27"/></expr_stmt>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">line_termination<pos:position pos:line="5" pos:column="29"/></name></expr>)<pos:position pos:line="5" pos:column="30"/></condition><then pos:line="5" pos:column="30"> <block pos:line="5" pos:column="31">{
		<comment type="block" pos:line="6" pos:column="17">/* Without -z, consume SP and use next argument */</comment>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><operator pos:line="7" pos:column="21">!<pos:position pos:line="7" pos:column="22"/></operator><operator pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">next<pos:position pos:line="7" pos:column="27"/></name></expr>)<pos:position pos:line="7" pos:column="28"/></condition><then pos:line="7" pos:column="28">
			<block type="pseudo"><return pos:line="8" pos:column="25">return <expr><name pos:line="8" pos:column="32">NULL<pos:position pos:line="8" pos:column="36"/></name></expr>;<pos:position pos:line="8" pos:column="37"/></return></block></then></if>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">*<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">next<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">!=<pos:position pos:line="9" pos:column="29"/></operator> <literal type="char" pos:line="9" pos:column="30">' '<pos:position pos:line="9" pos:column="33"/></literal></expr>)<pos:position pos:line="9" pos:column="34"/></condition><then pos:line="9" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">die<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><literal type="string" pos:line="10" pos:column="29">"expected SP but got: %s"<pos:position pos:line="10" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="56">next<pos:position pos:line="10" pos:column="60"/></name></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="11" pos:column="17">next<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <call><name pos:line="11" pos:column="24">parse_arg<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name pos:line="11" pos:column="34">next<pos:position pos:line="11" pos:column="38"/></name> <operator pos:line="11" pos:column="39">+<pos:position pos:line="11" pos:column="40"/></operator> <literal type="number" pos:line="11" pos:column="41">1<pos:position pos:line="11" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="44">arg<pos:position pos:line="11" pos:column="47"/></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then> <else pos:line="12" pos:column="11">else <block pos:line="12" pos:column="16">{
		<comment type="block" pos:line="13" pos:column="17">/* With -z, read the next NUL-terminated line */</comment>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><operator pos:line="14" pos:column="21">*<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">next<pos:position pos:line="14" pos:column="26"/></name></expr>)<pos:position pos:line="14" pos:column="27"/></condition><then pos:line="14" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="25">die<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><literal type="string" pos:line="15" pos:column="29">"expected NUL but got: %s"<pos:position pos:line="15" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="57">next<pos:position pos:line="15" pos:column="61"/></name></expr></argument>)<pos:position pos:line="15" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="63"/></expr_stmt></block></then></if>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">strbuf_getline<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">arg<pos:position pos:line="16" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="41">stdin<pos:position pos:line="16" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="16" pos:column="48">'\0'<pos:position pos:line="16" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="53"/></argument_list></call> <operator pos:line="16" pos:column="54">==<pos:position pos:line="16" pos:column="56"/></operator> <name pos:line="16" pos:column="57">EOF<pos:position pos:line="16" pos:column="60"/></name></expr>)<pos:position pos:line="16" pos:column="61"/></condition><then pos:line="16" pos:column="61">
			<block type="pseudo"><return pos:line="17" pos:column="25">return <expr><name pos:line="17" pos:column="32">NULL<pos:position pos:line="17" pos:column="36"/></name></expr>;<pos:position pos:line="17" pos:column="37"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="18" pos:column="17">next<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <name><name pos:line="18" pos:column="24">arg<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">-&gt;<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="29">buf<pos:position pos:line="18" pos:column="32"/></name></name> <operator pos:line="18" pos:column="33">+<pos:position pos:line="18" pos:column="34"/></operator> <name><name pos:line="18" pos:column="35">arg<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">-&gt;<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="40">len<pos:position pos:line="18" pos:column="43"/></name></name></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></else></if>
	<return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">next<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
