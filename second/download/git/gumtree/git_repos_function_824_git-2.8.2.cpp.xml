<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_824_git-2.8.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">finish_command<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">child_process<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">cmd<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ret<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><call><name pos:line="3" pos:column="19">wait_or_whine<pos:position pos:line="3" pos:column="32"/></name><argument_list pos:line="3" pos:column="32">(<argument><expr><name><name pos:line="3" pos:column="33">cmd<pos:position pos:line="3" pos:column="36"/></name><operator pos:line="3" pos:column="36">-&gt;<pos:position pos:line="3" pos:column="41"/></operator><name pos:line="3" pos:column="38">pid<pos:position pos:line="3" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="3" pos:column="43">cmd<pos:position pos:line="3" pos:column="46"/></name><operator pos:line="3" pos:column="46">-&gt;<pos:position pos:line="3" pos:column="51"/></operator><name pos:line="3" pos:column="48">argv<pos:position pos:line="3" pos:column="52"/></name><index pos:line="3" pos:column="52">[<expr><literal type="number" pos:line="3" pos:column="53">0<pos:position pos:line="3" pos:column="54"/></literal></expr>]<pos:position pos:line="3" pos:column="55"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="57">0<pos:position pos:line="3" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="60"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="4" pos:column="9">child_process_clear<pos:position pos:line="4" pos:column="28"/></name><argument_list pos:line="4" pos:column="28">(<argument><expr><name pos:line="4" pos:column="29">cmd<pos:position pos:line="4" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="34"/></expr_stmt>
	<return pos:line="5" pos:column="9">return <expr><name pos:line="5" pos:column="16">ret<pos:position pos:line="5" pos:column="19"/></name></expr>;<pos:position pos:line="5" pos:column="20"/></return>
}<pos:position pos:line="6" pos:column="2"/></block></function></unit>
