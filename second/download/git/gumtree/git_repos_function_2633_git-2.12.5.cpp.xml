<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2633_git-2.12.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ssize_t<pos:position pos:line="1" pos:column="8"/></name></type> <name pos:line="1" pos:column="9">write_in_full<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">int<pos:position pos:line="1" pos:column="26"/></name></type> <name pos:line="1" pos:column="27">fd<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">void<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">buf<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">size_t<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">count<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">p<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><name pos:line="3" pos:column="25">buf<pos:position pos:line="3" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">ssize_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">total<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><literal type="number" pos:line="4" pos:column="25">0<pos:position pos:line="4" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><name pos:line="6" pos:column="16">count<pos:position pos:line="6" pos:column="21"/></name> <operator pos:line="6" pos:column="22">&gt;<pos:position pos:line="6" pos:column="26"/></operator> <literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>)<pos:position pos:line="6" pos:column="26"/></condition> <block pos:line="6" pos:column="27">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">ssize_t<pos:position pos:line="7" pos:column="24"/></name></type> <name pos:line="7" pos:column="25">written<pos:position pos:line="7" pos:column="32"/></name> <init pos:line="7" pos:column="33">= <expr><call><name pos:line="7" pos:column="35">xwrite<pos:position pos:line="7" pos:column="41"/></name><argument_list pos:line="7" pos:column="41">(<argument><expr><name pos:line="7" pos:column="42">fd<pos:position pos:line="7" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="46">p<pos:position pos:line="7" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="49">count<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="56"/></decl_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">written<pos:position pos:line="8" pos:column="28"/></name> <operator pos:line="8" pos:column="29">&lt;<pos:position pos:line="8" pos:column="33"/></operator> <literal type="number" pos:line="8" pos:column="31">0<pos:position pos:line="8" pos:column="32"/></literal></expr>)<pos:position pos:line="8" pos:column="33"/></condition><then pos:line="8" pos:column="33">
			<block type="pseudo"><return pos:line="9" pos:column="25">return <expr><operator pos:line="9" pos:column="32">-<pos:position pos:line="9" pos:column="33"/></operator><literal type="number" pos:line="9" pos:column="33">1<pos:position pos:line="9" pos:column="34"/></literal></expr>;<pos:position pos:line="9" pos:column="35"/></return></block></then></if>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">written<pos:position pos:line="10" pos:column="29"/></name></expr>)<pos:position pos:line="10" pos:column="30"/></condition><then pos:line="10" pos:column="30"> <block pos:line="10" pos:column="31">{
			<expr_stmt><expr><name pos:line="11" pos:column="25">errno<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">=<pos:position pos:line="11" pos:column="32"/></operator> <name pos:line="11" pos:column="33">ENOSPC<pos:position pos:line="11" pos:column="39"/></name></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
			<return pos:line="12" pos:column="25">return <expr><operator pos:line="12" pos:column="32">-<pos:position pos:line="12" pos:column="33"/></operator><literal type="number" pos:line="12" pos:column="33">1<pos:position pos:line="12" pos:column="34"/></literal></expr>;<pos:position pos:line="12" pos:column="35"/></return>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="14" pos:column="17">count<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">-=<pos:position pos:line="14" pos:column="25"/></operator> <name pos:line="14" pos:column="26">written<pos:position pos:line="14" pos:column="33"/></name></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">p<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">+=<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="22">written<pos:position pos:line="15" pos:column="29"/></name></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">total<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">+=<pos:position pos:line="16" pos:column="25"/></operator> <name pos:line="16" pos:column="26">written<pos:position pos:line="16" pos:column="33"/></name></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></while>

	<return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">total<pos:position pos:line="19" pos:column="21"/></name></expr>;<pos:position pos:line="19" pos:column="22"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
