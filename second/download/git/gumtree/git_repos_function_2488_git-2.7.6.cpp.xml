<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2488_git-2.7.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">add_recent_object<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">unsigned<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">sha1<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="2" pos:column="31">unsigned<pos:position pos:line="2" pos:column="39"/></name> <name pos:line="2" pos:column="40">long<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">mtime<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="3" pos:column="31">struct<pos:position pos:line="3" pos:column="37"/></name> <name pos:line="3" pos:column="38">recent_data<pos:position pos:line="3" pos:column="49"/></name></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">data<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="56"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">object<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">obj<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">enum<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">object_type<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">type<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">mtime<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">&lt;=<pos:position pos:line="8" pos:column="24"/></operator> <name><name pos:line="8" pos:column="22">data<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">-&gt;<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="28">timestamp<pos:position pos:line="8" pos:column="37"/></name></name></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38">
		<block type="pseudo"><return pos:line="9" pos:column="17">return;<pos:position pos:line="9" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="11" pos:column="9">/*
	 * We do not want to call parse_object here, because
	 * inflating blobs and trees could be very expensive.
	 * However, we do need to know the correct type for
	 * later processing, and the revision machinery expects
	 * commits and tags to have been parsed.
	 */</comment>
	<expr_stmt><expr><name pos:line="18" pos:column="9">type<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <call><name pos:line="18" pos:column="16">sha1_object_info<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">sha1<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="39">NULL<pos:position pos:line="18" pos:column="43"/></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">type<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">&lt;<pos:position pos:line="19" pos:column="22"/></operator> <literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr>)<pos:position pos:line="19" pos:column="22"/></condition><then pos:line="19" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">die<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><literal type="string" pos:line="20" pos:column="21">"unable to get object info for %s"<pos:position pos:line="20" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="57">sha1_to_hex<pos:position pos:line="20" pos:column="68"/></name><argument_list pos:line="20" pos:column="68">(<argument><expr><name pos:line="20" pos:column="69">sha1<pos:position pos:line="20" pos:column="73"/></name></expr></argument>)<pos:position pos:line="20" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="76"/></expr_stmt></block></then></if>

	<switch pos:line="22" pos:column="9">switch <condition pos:line="22" pos:column="16">(<expr><name pos:line="22" pos:column="17">type<pos:position pos:line="22" pos:column="21"/></name></expr>)<pos:position pos:line="22" pos:column="22"/></condition> <block pos:line="22" pos:column="23">{
	<case pos:line="23" pos:column="9">case <expr><name pos:line="23" pos:column="14">OBJ_TAG<pos:position pos:line="23" pos:column="21"/></name></expr>:<pos:position pos:line="23" pos:column="22"/></case>
	<case pos:line="24" pos:column="9">case <expr><name pos:line="24" pos:column="14">OBJ_COMMIT<pos:position pos:line="24" pos:column="24"/></name></expr>:<pos:position pos:line="24" pos:column="25"/></case>
		<expr_stmt><expr><name pos:line="25" pos:column="17">obj<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <call><name pos:line="25" pos:column="23">parse_object_or_die<pos:position pos:line="25" pos:column="42"/></name><argument_list pos:line="25" pos:column="42">(<argument><expr><name pos:line="25" pos:column="43">sha1<pos:position pos:line="25" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="49">NULL<pos:position pos:line="25" pos:column="53"/></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>
		<break pos:line="26" pos:column="17">break;<pos:position pos:line="26" pos:column="23"/></break>
	<case pos:line="27" pos:column="9">case <expr><name pos:line="27" pos:column="14">OBJ_TREE<pos:position pos:line="27" pos:column="22"/></name></expr>:<pos:position pos:line="27" pos:column="23"/></case>
		<expr_stmt><expr><name pos:line="28" pos:column="17">obj<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <operator pos:line="28" pos:column="23">(<pos:position pos:line="28" pos:column="24"/></operator>struct <name pos:line="28" pos:column="31">object<pos:position pos:line="28" pos:column="37"/></name> <operator pos:line="28" pos:column="38">*<pos:position pos:line="28" pos:column="39"/></operator><operator pos:line="28" pos:column="39">)<pos:position pos:line="28" pos:column="40"/></operator><call><name pos:line="28" pos:column="40">lookup_tree<pos:position pos:line="28" pos:column="51"/></name><argument_list pos:line="28" pos:column="51">(<argument><expr><name pos:line="28" pos:column="52">sha1<pos:position pos:line="28" pos:column="56"/></name></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>
		<break pos:line="29" pos:column="17">break;<pos:position pos:line="29" pos:column="23"/></break>
	<case pos:line="30" pos:column="9">case <expr><name pos:line="30" pos:column="14">OBJ_BLOB<pos:position pos:line="30" pos:column="22"/></name></expr>:<pos:position pos:line="30" pos:column="23"/></case>
		<expr_stmt><expr><name pos:line="31" pos:column="17">obj<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <operator pos:line="31" pos:column="23">(<pos:position pos:line="31" pos:column="24"/></operator>struct <name pos:line="31" pos:column="31">object<pos:position pos:line="31" pos:column="37"/></name> <operator pos:line="31" pos:column="38">*<pos:position pos:line="31" pos:column="39"/></operator><operator pos:line="31" pos:column="39">)<pos:position pos:line="31" pos:column="40"/></operator><call><name pos:line="31" pos:column="40">lookup_blob<pos:position pos:line="31" pos:column="51"/></name><argument_list pos:line="31" pos:column="51">(<argument><expr><name pos:line="31" pos:column="52">sha1<pos:position pos:line="31" pos:column="56"/></name></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="58"/></expr_stmt>
		<break pos:line="32" pos:column="17">break;<pos:position pos:line="32" pos:column="23"/></break>
	<default pos:line="33" pos:column="9">default:<pos:position pos:line="33" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">die<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><literal type="string" pos:line="34" pos:column="21">"unknown object type for %s: %s"<pos:position pos:line="34" pos:column="53"/></literal></expr></argument>,
		    <argument><expr><call><name pos:line="35" pos:column="21">sha1_to_hex<pos:position pos:line="35" pos:column="32"/></name><argument_list pos:line="35" pos:column="32">(<argument><expr><name pos:line="35" pos:column="33">sha1<pos:position pos:line="35" pos:column="37"/></name></expr></argument>)<pos:position pos:line="35" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><name><typename pos:line="35" pos:column="40">typename<pos:position pos:line="35" pos:column="48"/></typename></name><operator pos:line="35" pos:column="48">(<pos:position pos:line="35" pos:column="49"/></operator><name pos:line="35" pos:column="49">type<pos:position pos:line="35" pos:column="53"/></name><operator pos:line="35" pos:column="53">)<pos:position pos:line="35" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="56"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></switch>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">obj<pos:position pos:line="38" pos:column="17"/></name></expr>)<pos:position pos:line="38" pos:column="18"/></condition><then pos:line="38" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="17">die<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><literal type="string" pos:line="39" pos:column="21">"unable to lookup %s"<pos:position pos:line="39" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="44">sha1_to_hex<pos:position pos:line="39" pos:column="55"/></name><argument_list pos:line="39" pos:column="55">(<argument><expr><name pos:line="39" pos:column="56">sha1<pos:position pos:line="39" pos:column="60"/></name></expr></argument>)<pos:position pos:line="39" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="63"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="41" pos:column="9">add_pending_object<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name><name pos:line="41" pos:column="28">data<pos:position pos:line="41" pos:column="32"/></name><operator pos:line="41" pos:column="32">-&gt;<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="34">revs<pos:position pos:line="41" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="40">obj<pos:position pos:line="41" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="45">""<pos:position pos:line="41" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="49"/></expr_stmt>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
