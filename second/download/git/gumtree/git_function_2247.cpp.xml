<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2247.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">FILE<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">xfopen<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><specifier pos:line="1" pos:column="14">const<pos:position pos:line="1" pos:column="19"/></specifier> <name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">path<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">mode<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<for pos:line="3" pos:column="9">for <control pos:line="3" pos:column="13">(<init pos:line="3" pos:column="14">;<pos:position pos:line="3" pos:column="15"/></init><condition pos:line="3" pos:column="15">;<pos:position pos:line="3" pos:column="16"/></condition><incr/>)<pos:position pos:line="3" pos:column="17"/></control> <block pos:line="3" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="4" pos:column="17">FILE<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">fp<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><call><name pos:line="4" pos:column="28">fopen<pos:position pos:line="4" pos:column="33"/></name><argument_list pos:line="4" pos:column="33">(<argument><expr><name pos:line="4" pos:column="34">path<pos:position pos:line="4" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="40">mode<pos:position pos:line="4" pos:column="44"/></name></expr></argument>)<pos:position pos:line="4" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="46"/></decl_stmt>
		<if pos:line="5" pos:column="17">if <condition pos:line="5" pos:column="20">(<expr><name pos:line="5" pos:column="21">fp<pos:position pos:line="5" pos:column="23"/></name></expr>)<pos:position pos:line="5" pos:column="24"/></condition><then pos:line="5" pos:column="24">
			<block type="pseudo"><return pos:line="6" pos:column="25">return <expr><name pos:line="6" pos:column="32">fp<pos:position pos:line="6" pos:column="34"/></name></expr>;<pos:position pos:line="6" pos:column="35"/></return></block></then></if>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">errno<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">==<pos:position pos:line="7" pos:column="29"/></operator> <name pos:line="7" pos:column="30">EINTR<pos:position pos:line="7" pos:column="35"/></name></expr>)<pos:position pos:line="7" pos:column="36"/></condition><then pos:line="7" pos:column="36">
			<block type="pseudo"><continue pos:line="8" pos:column="25">continue;<pos:position pos:line="8" pos:column="34"/></continue></block></then></if>

		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">*<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">mode<pos:position pos:line="10" pos:column="26"/></name> <operator pos:line="10" pos:column="27">&amp;&amp;<pos:position pos:line="10" pos:column="37"/></operator> <name><name pos:line="10" pos:column="30">mode<pos:position pos:line="10" pos:column="34"/></name><index pos:line="10" pos:column="34">[<expr><literal type="number" pos:line="10" pos:column="35">1<pos:position pos:line="10" pos:column="36"/></literal></expr>]<pos:position pos:line="10" pos:column="37"/></index></name> <operator pos:line="10" pos:column="38">==<pos:position pos:line="10" pos:column="40"/></operator> <literal type="char" pos:line="10" pos:column="41">'+'<pos:position pos:line="10" pos:column="44"/></literal></expr>)<pos:position pos:line="10" pos:column="45"/></condition><then pos:line="10" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="25">die_errno<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><call><name pos:line="11" pos:column="35">_<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">(<argument><expr><literal type="string" pos:line="11" pos:column="37">"could not open '%s' for reading and writing"<pos:position pos:line="11" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="83"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="11" pos:column="85">path<pos:position pos:line="11" pos:column="89"/></name></expr></argument>)<pos:position pos:line="11" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="91"/></expr_stmt></block></then>
		<elseif pos:line="12" pos:column="17">else <if pos:line="12" pos:column="22">if <condition pos:line="12" pos:column="25">(<expr><operator pos:line="12" pos:column="26">*<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">mode<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">==<pos:position pos:line="12" pos:column="34"/></operator> <literal type="char" pos:line="12" pos:column="35">'w'<pos:position pos:line="12" pos:column="38"/></literal> <operator pos:line="12" pos:column="39">||<pos:position pos:line="12" pos:column="41"/></operator> <operator pos:line="12" pos:column="42">*<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="43">mode<pos:position pos:line="12" pos:column="47"/></name> <operator pos:line="12" pos:column="48">==<pos:position pos:line="12" pos:column="50"/></operator> <literal type="char" pos:line="12" pos:column="51">'a'<pos:position pos:line="12" pos:column="54"/></literal></expr>)<pos:position pos:line="12" pos:column="55"/></condition><then pos:line="12" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">die_errno<pos:position pos:line="13" pos:column="34"/></name><argument_list pos:line="13" pos:column="34">(<argument><expr><call><name pos:line="13" pos:column="35">_<pos:position pos:line="13" pos:column="36"/></name><argument_list pos:line="13" pos:column="36">(<argument><expr><literal type="string" pos:line="13" pos:column="37">"could not open '%s' for writing"<pos:position pos:line="13" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="73">path<pos:position pos:line="13" pos:column="77"/></name></expr></argument>)<pos:position pos:line="13" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="79"/></expr_stmt></block></then></if></elseif>
		<else pos:line="14" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="25">die_errno<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><call><name pos:line="15" pos:column="35">_<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><literal type="string" pos:line="15" pos:column="37">"could not open '%s' for reading"<pos:position pos:line="15" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="15" pos:column="73">path<pos:position pos:line="15" pos:column="77"/></name></expr></argument>)<pos:position pos:line="15" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="79"/></expr_stmt></block></else></if>
	}<pos:position pos:line="16" pos:column="10"/></block></for>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
