<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4256_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">shift_tree<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">object_id<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">hash1<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name><name pos:line="2" pos:column="23">struct<pos:position pos:line="2" pos:column="29"/></name> <name pos:line="2" pos:column="30">object_id<pos:position pos:line="2" pos:column="39"/></name></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">hash2<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="3" pos:column="17">struct<pos:position pos:line="3" pos:column="23"/></name> <name pos:line="3" pos:column="24">object_id<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">shifted<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="4" pos:column="17">int<pos:position pos:line="4" pos:column="20"/></name></type> <name pos:line="4" pos:column="21">depth_limit<pos:position pos:line="4" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="33"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">add_prefix<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">del_prefix<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">add_score<pos:position pos:line="8" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="24">del_score<pos:position pos:line="8" pos:column="33"/></name></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>

	<comment type="block" pos:line="10" pos:column="9">/*
	 * NEEDSWORK: this limits the recursion depth to hardcoded
	 * value '2' to avoid excessive overhead.
	 */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">depth_limit<pos:position pos:line="14" pos:column="25"/></name></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="17">depth_limit<pos:position pos:line="15" pos:column="28"/></name> <operator pos:line="15" pos:column="29">=<pos:position pos:line="15" pos:column="30"/></operator> <literal type="number" pos:line="15" pos:column="31">2<pos:position pos:line="15" pos:column="32"/></literal></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="17" pos:column="9">add_score<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <name pos:line="17" pos:column="21">del_score<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">=<pos:position pos:line="17" pos:column="32"/></operator> <call><name pos:line="17" pos:column="33">score_trees<pos:position pos:line="17" pos:column="44"/></name><argument_list pos:line="17" pos:column="44">(<argument><expr><name pos:line="17" pos:column="45">hash1<pos:position pos:line="17" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="52">hash2<pos:position pos:line="17" pos:column="57"/></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><name pos:line="18" pos:column="9">add_prefix<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <call><name pos:line="18" pos:column="22">xcalloc<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><literal type="number" pos:line="18" pos:column="30">1<pos:position pos:line="18" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="33">1<pos:position pos:line="18" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">del_prefix<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <call><name pos:line="19" pos:column="22">xcalloc<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><literal type="number" pos:line="19" pos:column="30">1<pos:position pos:line="19" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="33">1<pos:position pos:line="19" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>

	<comment type="block" pos:line="21" pos:column="9">/*
	 * See if one's subtree resembles two; if so we need to prefix
	 * two with a few fake trees to match the prefix.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">match_trees<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">hash1<pos:position pos:line="25" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="28">hash2<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="35">&amp;<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="36">add_score<pos:position pos:line="25" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="47">&amp;<pos:position pos:line="25" pos:column="52"/></operator><name pos:line="25" pos:column="48">add_prefix<pos:position pos:line="25" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="60">""<pos:position pos:line="25" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="64">depth_limit<pos:position pos:line="25" pos:column="75"/></name></expr></argument>)<pos:position pos:line="25" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="77"/></expr_stmt>

	<comment type="block" pos:line="27" pos:column="9">/*
	 * See if two's subtree resembles one; if so we need to
	 * pick only subtree of two.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">match_trees<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name pos:line="31" pos:column="21">hash2<pos:position pos:line="31" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="28">hash1<pos:position pos:line="31" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="35">&amp;<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="36">del_score<pos:position pos:line="31" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="47">&amp;<pos:position pos:line="31" pos:column="52"/></operator><name pos:line="31" pos:column="48">del_prefix<pos:position pos:line="31" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="60">""<pos:position pos:line="31" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="64">depth_limit<pos:position pos:line="31" pos:column="75"/></name></expr></argument>)<pos:position pos:line="31" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="77"/></expr_stmt>

	<comment type="block" pos:line="33" pos:column="9">/* Assume we do not have to do any shifting */</comment>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">oidcpy<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><name pos:line="34" pos:column="16">shifted<pos:position pos:line="34" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="25">hash2<pos:position pos:line="34" pos:column="30"/></name></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">add_score<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">&lt;<pos:position pos:line="36" pos:column="27"/></operator> <name pos:line="36" pos:column="25">del_score<pos:position pos:line="36" pos:column="34"/></name></expr>)<pos:position pos:line="36" pos:column="35"/></condition><then pos:line="36" pos:column="35"> <block pos:line="36" pos:column="36">{
		<comment type="block" pos:line="37" pos:column="17">/* We need to pick a subtree of two */</comment>
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">unsigned<pos:position pos:line="38" pos:column="25"/></name></type> <name pos:line="38" pos:column="26">mode<pos:position pos:line="38" pos:column="30"/></name></decl>;<pos:position pos:line="38" pos:column="31"/></decl_stmt>

		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">!<pos:position pos:line="40" pos:column="22"/></operator><operator pos:line="40" pos:column="22">*<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="23">del_prefix<pos:position pos:line="40" pos:column="33"/></name></expr>)<pos:position pos:line="40" pos:column="34"/></condition><then pos:line="40" pos:column="34">
			<block type="pseudo"><return pos:line="41" pos:column="25">return;<pos:position pos:line="41" pos:column="32"/></return></block></then></if>

		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><call><name pos:line="43" pos:column="21">get_tree_entry<pos:position pos:line="43" pos:column="35"/></name><argument_list pos:line="43" pos:column="35">(<argument><expr><name><name pos:line="43" pos:column="36">hash2<pos:position pos:line="43" pos:column="41"/></name><operator pos:line="43" pos:column="41">-&gt;<pos:position pos:line="43" pos:column="46"/></operator><name pos:line="43" pos:column="43">hash<pos:position pos:line="43" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="49">del_prefix<pos:position pos:line="43" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="61">shifted<pos:position pos:line="43" pos:column="68"/></name><operator pos:line="43" pos:column="68">-&gt;<pos:position pos:line="43" pos:column="73"/></operator><name pos:line="43" pos:column="70">hash<pos:position pos:line="43" pos:column="74"/></name></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="76">&amp;<pos:position pos:line="43" pos:column="81"/></operator><name pos:line="43" pos:column="77">mode<pos:position pos:line="43" pos:column="81"/></name></expr></argument>)<pos:position pos:line="43" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="83"/></condition><then pos:line="43" pos:column="83">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="25">die<pos:position pos:line="44" pos:column="28"/></name><argument_list pos:line="44" pos:column="28">(<argument><expr><literal type="string" pos:line="44" pos:column="29">"cannot find path %s in tree %s"<pos:position pos:line="44" pos:column="61"/></literal></expr></argument>,
			    <argument><expr><name pos:line="45" pos:column="29">del_prefix<pos:position pos:line="45" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="41">oid_to_hex<pos:position pos:line="45" pos:column="51"/></name><argument_list pos:line="45" pos:column="51">(<argument><expr><name pos:line="45" pos:column="52">hash2<pos:position pos:line="45" pos:column="57"/></name></expr></argument>)<pos:position pos:line="45" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="60"/></expr_stmt></block></then></if>
		<return pos:line="46" pos:column="17">return;<pos:position pos:line="46" pos:column="24"/></return>
	}<pos:position pos:line="47" pos:column="10"/></block></then></if>

	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><operator pos:line="49" pos:column="13">!<pos:position pos:line="49" pos:column="14"/></operator><operator pos:line="49" pos:column="14">*<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="15">add_prefix<pos:position pos:line="49" pos:column="25"/></name></expr>)<pos:position pos:line="49" pos:column="26"/></condition><then pos:line="49" pos:column="26">
		<block type="pseudo"><return pos:line="50" pos:column="17">return;<pos:position pos:line="50" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="52" pos:column="9">splice_tree<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name><name pos:line="52" pos:column="21">hash1<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">-&gt;<pos:position pos:line="52" pos:column="31"/></operator><name pos:line="52" pos:column="28">hash<pos:position pos:line="52" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="34">add_prefix<pos:position pos:line="52" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="46">hash2<pos:position pos:line="52" pos:column="51"/></name><operator pos:line="52" pos:column="51">-&gt;<pos:position pos:line="52" pos:column="56"/></operator><name pos:line="52" pos:column="53">hash<pos:position pos:line="52" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="59">shifted<pos:position pos:line="52" pos:column="66"/></name><operator pos:line="52" pos:column="66">-&gt;<pos:position pos:line="52" pos:column="71"/></operator><name pos:line="52" pos:column="68">hash<pos:position pos:line="52" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="74"/></expr_stmt>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
