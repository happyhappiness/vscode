<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5617_git-2.7.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">for_each_replace_name<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">argv<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">each_replace_name_fn<pos:position pos:line="1" pos:column="73"/></name></type> <name pos:line="1" pos:column="74">fn<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier><modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">p<pos:position pos:line="3" pos:column="23"/></name></decl>, <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="26">full_hex<pos:position pos:line="3" pos:column="34"/></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">ref<pos:position pos:line="4" pos:column="17"/></name><index pos:line="4" pos:column="17">[<expr><name pos:line="4" pos:column="18">PATH_MAX<pos:position pos:line="4" pos:column="26"/></name></expr>]<pos:position pos:line="4" pos:column="27"/></index></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">had_error<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><literal type="number" pos:line="5" pos:column="25">0<pos:position pos:line="5" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name></type> <name><name pos:line="6" pos:column="23">sha1<pos:position pos:line="6" pos:column="27"/></name><index pos:line="6" pos:column="27">[<expr><literal type="number" pos:line="6" pos:column="28">20<pos:position pos:line="6" pos:column="30"/></literal></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>

	<for pos:line="8" pos:column="9">for <control pos:line="8" pos:column="13">(<init><expr><name pos:line="8" pos:column="14">p<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <name pos:line="8" pos:column="18">argv<pos:position pos:line="8" pos:column="22"/></name></expr>;<pos:position pos:line="8" pos:column="23"/></init> <condition><expr><operator pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">p<pos:position pos:line="8" pos:column="26"/></name></expr>;<pos:position pos:line="8" pos:column="27"/></condition> <incr><expr><name pos:line="8" pos:column="28">p<pos:position pos:line="8" pos:column="29"/></name><operator pos:line="8" pos:column="29">++<pos:position pos:line="8" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="8" pos:column="32"/></control> <block pos:line="8" pos:column="33">{
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><call><name pos:line="9" pos:column="21">get_sha1<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><operator pos:line="9" pos:column="30">*<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">p<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="34">sha1<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="40"/></condition><then pos:line="9" pos:column="40"> <block pos:line="9" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">error<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><literal type="string" pos:line="10" pos:column="31">"Failed to resolve '%s' as a valid ref."<pos:position pos:line="10" pos:column="71"/></literal></expr></argument>, <argument><expr><operator pos:line="10" pos:column="73">*<pos:position pos:line="10" pos:column="74"/></operator><name pos:line="10" pos:column="74">p<pos:position pos:line="10" pos:column="75"/></name></expr></argument>)<pos:position pos:line="10" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="77"/></expr_stmt>
			<expr_stmt><expr><name pos:line="11" pos:column="25">had_error<pos:position pos:line="11" pos:column="34"/></name> <operator pos:line="11" pos:column="35">=<pos:position pos:line="11" pos:column="36"/></operator> <literal type="number" pos:line="11" pos:column="37">1<pos:position pos:line="11" pos:column="38"/></literal></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt>
			<continue pos:line="12" pos:column="25">continue;<pos:position pos:line="12" pos:column="34"/></continue>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="14" pos:column="17">full_hex<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">=<pos:position pos:line="14" pos:column="27"/></operator> <call><name pos:line="14" pos:column="28">sha1_to_hex<pos:position pos:line="14" pos:column="39"/></name><argument_list pos:line="14" pos:column="39">(<argument><expr><name pos:line="14" pos:column="40">sha1<pos:position pos:line="14" pos:column="44"/></name></expr></argument>)<pos:position pos:line="14" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">snprintf<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">ref<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="31">sizeof<argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">ref<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="44">"%s%s"<pos:position pos:line="15" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="52">git_replace_ref_base<pos:position pos:line="15" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="74">full_hex<pos:position pos:line="15" pos:column="82"/></name></expr></argument>)<pos:position pos:line="15" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="84"/></expr_stmt>
		<comment type="block" pos:line="16" pos:column="17">/* read_ref() may reuse the buffer */</comment>
		<expr_stmt><expr><name pos:line="17" pos:column="17">full_hex<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">=<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="28">ref<pos:position pos:line="17" pos:column="31"/></name> <operator pos:line="17" pos:column="32">+<pos:position pos:line="17" pos:column="33"/></operator> <call><name pos:line="17" pos:column="34">strlen<pos:position pos:line="17" pos:column="40"/></name><argument_list pos:line="17" pos:column="40">(<argument><expr><name pos:line="17" pos:column="41">git_replace_ref_base<pos:position pos:line="17" pos:column="61"/></name></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="63"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><call><name pos:line="18" pos:column="21">read_ref<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">ref<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">sha1<pos:position pos:line="18" pos:column="39"/></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="41"/></condition><then pos:line="18" pos:column="41"> <block pos:line="18" pos:column="42">{
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">error<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><literal type="string" pos:line="19" pos:column="31">"replace ref '%s' not found."<pos:position pos:line="19" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="62">full_hex<pos:position pos:line="19" pos:column="70"/></name></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><name pos:line="20" pos:column="25">had_error<pos:position pos:line="20" pos:column="34"/></name> <operator pos:line="20" pos:column="35">=<pos:position pos:line="20" pos:column="36"/></operator> <literal type="number" pos:line="20" pos:column="37">1<pos:position pos:line="20" pos:column="38"/></literal></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>
			<continue pos:line="21" pos:column="25">continue;<pos:position pos:line="21" pos:column="34"/></continue>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><call><name pos:line="23" pos:column="21">fn<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><name pos:line="23" pos:column="24">full_hex<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">ref<pos:position pos:line="23" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="39">sha1<pos:position pos:line="23" pos:column="43"/></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="45"/></condition><then pos:line="23" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="25">had_error<pos:position pos:line="24" pos:column="34"/></name> <operator pos:line="24" pos:column="35">=<pos:position pos:line="24" pos:column="36"/></operator> <literal type="number" pos:line="24" pos:column="37">1<pos:position pos:line="24" pos:column="38"/></literal></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block></for>
	<return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">had_error<pos:position pos:line="26" pos:column="25"/></name></expr>;<pos:position pos:line="26" pos:column="26"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
