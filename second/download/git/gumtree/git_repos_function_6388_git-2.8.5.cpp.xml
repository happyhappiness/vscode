<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6388_git-2.8.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">win32_pthread_join<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">pthread_t<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">thread<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">void<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier><modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">value_ptr<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">DWORD<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">result<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><call><name pos:line="3" pos:column="24">WaitForSingleObject<pos:position pos:line="3" pos:column="43"/></name><argument_list pos:line="3" pos:column="43">(<argument><expr><name><name pos:line="3" pos:column="44">thread<pos:position pos:line="3" pos:column="50"/></name><operator pos:line="3" pos:column="50">-&gt;<pos:position pos:line="3" pos:column="55"/></operator><name pos:line="3" pos:column="52">handle<pos:position pos:line="3" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="60">INFINITE<pos:position pos:line="3" pos:column="68"/></name></expr></argument>)<pos:position pos:line="3" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="70"/></decl_stmt>
	<switch pos:line="4" pos:column="9">switch <condition pos:line="4" pos:column="16">(<expr><name pos:line="4" pos:column="17">result<pos:position pos:line="4" pos:column="23"/></name></expr>)<pos:position pos:line="4" pos:column="24"/></condition> <block pos:line="4" pos:column="25">{
		<case pos:line="5" pos:column="17">case <expr><name pos:line="5" pos:column="22">WAIT_OBJECT_0<pos:position pos:line="5" pos:column="35"/></name></expr>:<pos:position pos:line="5" pos:column="36"/></case>
			<if pos:line="6" pos:column="25">if <condition pos:line="6" pos:column="28">(<expr><name pos:line="6" pos:column="29">value_ptr<pos:position pos:line="6" pos:column="38"/></name></expr>)<pos:position pos:line="6" pos:column="39"/></condition><then pos:line="6" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="7" pos:column="33">*<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="34">value_ptr<pos:position pos:line="7" pos:column="43"/></name> <operator pos:line="7" pos:column="44">=<pos:position pos:line="7" pos:column="45"/></operator> <name><name pos:line="7" pos:column="46">thread<pos:position pos:line="7" pos:column="52"/></name><operator pos:line="7" pos:column="52">-&gt;<pos:position pos:line="7" pos:column="57"/></operator><name pos:line="7" pos:column="54">arg<pos:position pos:line="7" pos:column="57"/></name></name></expr>;<pos:position pos:line="7" pos:column="58"/></expr_stmt></block></then></if>
			<return pos:line="8" pos:column="25">return <expr><literal type="number" pos:line="8" pos:column="32">0<pos:position pos:line="8" pos:column="33"/></literal></expr>;<pos:position pos:line="8" pos:column="34"/></return>
		<case pos:line="9" pos:column="17">case <expr><name pos:line="9" pos:column="22">WAIT_ABANDONED<pos:position pos:line="9" pos:column="36"/></name></expr>:<pos:position pos:line="9" pos:column="37"/></case>
			<return pos:line="10" pos:column="25">return <expr><name pos:line="10" pos:column="32">EINVAL<pos:position pos:line="10" pos:column="38"/></name></expr>;<pos:position pos:line="10" pos:column="39"/></return>
		<default pos:line="11" pos:column="17">default:<pos:position pos:line="11" pos:column="25"/></default>
			<return pos:line="12" pos:column="25">return <expr><call><name pos:line="12" pos:column="32">err_win_to_posix<pos:position pos:line="12" pos:column="48"/></name><argument_list pos:line="12" pos:column="48">(<argument><expr><call><name pos:line="12" pos:column="49">GetLastError<pos:position pos:line="12" pos:column="61"/></name><argument_list pos:line="12" pos:column="61">()<pos:position pos:line="12" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="65"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></switch>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
