<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6667_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">gitmemmem<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">haystack<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">size_t<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">haystack_len<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">void<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">needle<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">size_t<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">needle_len<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">begin<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">haystack<pos:position pos:line="4" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">last_possible<pos:position pos:line="5" pos:column="34"/></name> <init pos:line="5" pos:column="35">= <expr><name pos:line="5" pos:column="37">begin<pos:position pos:line="5" pos:column="42"/></name> <operator pos:line="5" pos:column="43">+<pos:position pos:line="5" pos:column="44"/></operator> <name pos:line="5" pos:column="45">haystack_len<pos:position pos:line="5" pos:column="57"/></name> <operator pos:line="5" pos:column="58">-<pos:position pos:line="5" pos:column="59"/></operator> <name pos:line="5" pos:column="60">needle_len<pos:position pos:line="5" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="71"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">tail<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name pos:line="6" pos:column="28">needle<pos:position pos:line="6" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">point<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

	<comment type="block" pos:line="9" pos:column="9">/*
	 * The first occurrence of the empty string is deemed to occur at
	 * the beginning of the string.
	 */</comment>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">needle_len<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">==<pos:position pos:line="13" pos:column="26"/></operator> <literal type="number" pos:line="13" pos:column="27">0<pos:position pos:line="13" pos:column="28"/></literal></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><operator pos:line="14" pos:column="24">(<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">void<pos:position pos:line="14" pos:column="29"/></name> <operator pos:line="14" pos:column="30">*<pos:position pos:line="14" pos:column="31"/></operator><operator pos:line="14" pos:column="31">)<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">begin<pos:position pos:line="14" pos:column="37"/></name></expr>;<pos:position pos:line="14" pos:column="38"/></return></block></then></if>

	<comment type="block" pos:line="16" pos:column="9">/*
	 * Sanity check, otherwise the loop might search through the whole
	 * memory.
	 */</comment>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">haystack_len<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">&lt;<pos:position pos:line="20" pos:column="30"/></operator> <name pos:line="20" pos:column="28">needle_len<pos:position pos:line="20" pos:column="38"/></name></expr>)<pos:position pos:line="20" pos:column="39"/></condition><then pos:line="20" pos:column="39">
		<block type="pseudo"><return pos:line="21" pos:column="17">return <expr><name pos:line="21" pos:column="24">NULL<pos:position pos:line="21" pos:column="28"/></name></expr>;<pos:position pos:line="21" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="23" pos:column="9">point<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <operator pos:line="23" pos:column="17">*<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">tail<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">++<pos:position pos:line="23" pos:column="24"/></operator></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt>
	<for pos:line="24" pos:column="9">for <control pos:line="24" pos:column="13">(<init pos:line="24" pos:column="14">;<pos:position pos:line="24" pos:column="15"/></init> <condition><expr><name pos:line="24" pos:column="16">begin<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">&lt;=<pos:position pos:line="24" pos:column="27"/></operator> <name pos:line="24" pos:column="25">last_possible<pos:position pos:line="24" pos:column="38"/></name></expr>;<pos:position pos:line="24" pos:column="39"/></condition> <incr><expr><name pos:line="24" pos:column="40">begin<pos:position pos:line="24" pos:column="45"/></name><operator pos:line="24" pos:column="45">++<pos:position pos:line="24" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="24" pos:column="48"/></control> <block pos:line="24" pos:column="49">{
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">*<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">begin<pos:position pos:line="25" pos:column="27"/></name> <operator pos:line="25" pos:column="28">==<pos:position pos:line="25" pos:column="30"/></operator> <name pos:line="25" pos:column="31">point<pos:position pos:line="25" pos:column="36"/></name> <operator pos:line="25" pos:column="37">&amp;&amp;<pos:position pos:line="25" pos:column="47"/></operator> <operator pos:line="25" pos:column="40">!<pos:position pos:line="25" pos:column="41"/></operator><call><name pos:line="25" pos:column="41">memcmp<pos:position pos:line="25" pos:column="47"/></name><argument_list pos:line="25" pos:column="47">(<argument><expr><name pos:line="25" pos:column="48">begin<pos:position pos:line="25" pos:column="53"/></name> <operator pos:line="25" pos:column="54">+<pos:position pos:line="25" pos:column="55"/></operator> <literal type="number" pos:line="25" pos:column="56">1<pos:position pos:line="25" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="59">tail<pos:position pos:line="25" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="65">needle_len<pos:position pos:line="25" pos:column="75"/></name> <operator pos:line="25" pos:column="76">-<pos:position pos:line="25" pos:column="77"/></operator> <literal type="number" pos:line="25" pos:column="78">1<pos:position pos:line="25" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="80"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="81"/></condition><then pos:line="25" pos:column="81">
			<block type="pseudo"><return pos:line="26" pos:column="25">return <expr><operator pos:line="26" pos:column="32">(<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="33">void<pos:position pos:line="26" pos:column="37"/></name> <operator pos:line="26" pos:column="38">*<pos:position pos:line="26" pos:column="39"/></operator><operator pos:line="26" pos:column="39">)<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="40">begin<pos:position pos:line="26" pos:column="45"/></name></expr>;<pos:position pos:line="26" pos:column="46"/></return></block></then></if>
	}<pos:position pos:line="27" pos:column="10"/></block></for>

	<return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">NULL<pos:position pos:line="29" pos:column="20"/></name></expr>;<pos:position pos:line="29" pos:column="21"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
