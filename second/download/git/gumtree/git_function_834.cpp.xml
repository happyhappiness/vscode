<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_834.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">flush_rewritten_pending<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">void<pos:position pos:line="1" pos:column="41"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list> <block pos:line="1" pos:column="43">{
	<decl_stmt><decl><type><name><name pos:line="2" pos:column="9">struct<pos:position pos:line="2" pos:column="15"/></name> <name pos:line="2" pos:column="16">strbuf<pos:position pos:line="2" pos:column="22"/></name></name></type> <name pos:line="2" pos:column="23">buf<pos:position pos:line="2" pos:column="26"/></name> <init pos:line="2" pos:column="27">= <expr><name pos:line="2" pos:column="29">STRBUF_INIT<pos:position pos:line="2" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">char<pos:position pos:line="3" pos:column="22"/></name></type> <name><name pos:line="3" pos:column="23">newsha1<pos:position pos:line="3" pos:column="30"/></name><index pos:line="3" pos:column="30">[<expr><literal type="number" pos:line="3" pos:column="31">20<pos:position pos:line="3" pos:column="33"/></literal></expr>]<pos:position pos:line="3" pos:column="34"/></index></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">FILE<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">out<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">strbuf_read_file<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><operator pos:line="6" pos:column="30">&amp;<pos:position pos:line="6" pos:column="35"/></operator><name pos:line="6" pos:column="31">buf<pos:position pos:line="6" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="36">rebase_path_rewritten_pending<pos:position pos:line="6" pos:column="65"/></name><argument_list pos:line="6" pos:column="65">()<pos:position pos:line="6" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="69">82<pos:position pos:line="6" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="72"/></argument_list></call> <operator pos:line="6" pos:column="73">&gt;<pos:position pos:line="6" pos:column="77"/></operator> <literal type="number" pos:line="6" pos:column="75">0<pos:position pos:line="6" pos:column="76"/></literal> <operator pos:line="6" pos:column="77">&amp;&amp;<pos:position pos:line="6" pos:column="87"/></operator>
			<operator pos:line="7" pos:column="25">!<pos:position pos:line="7" pos:column="26"/></operator><call><name pos:line="7" pos:column="26">get_sha1<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><literal type="string" pos:line="7" pos:column="35">"HEAD"<pos:position pos:line="7" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="43">newsha1<pos:position pos:line="7" pos:column="50"/></name></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call> <operator pos:line="7" pos:column="52">&amp;&amp;<pos:position pos:line="7" pos:column="62"/></operator>
			<operator pos:line="8" pos:column="25">(<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="26">out<pos:position pos:line="8" pos:column="29"/></name> <operator pos:line="8" pos:column="30">=<pos:position pos:line="8" pos:column="31"/></operator> <call><name pos:line="8" pos:column="32">fopen<pos:position pos:line="8" pos:column="37"/></name><argument_list pos:line="8" pos:column="37">(<argument><expr><call><name pos:line="8" pos:column="38">rebase_path_rewritten_list<pos:position pos:line="8" pos:column="64"/></name><argument_list pos:line="8" pos:column="64">()<pos:position pos:line="8" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="68">"a"<pos:position pos:line="8" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="72"/></argument_list></call><operator pos:line="8" pos:column="72">)<pos:position pos:line="8" pos:column="73"/></operator></expr>)<pos:position pos:line="8" pos:column="74"/></condition><then pos:line="8" pos:column="74"> <block pos:line="8" pos:column="75">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">char<pos:position pos:line="9" pos:column="21"/></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">bol<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><name><name pos:line="9" pos:column="29">buf<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">.<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="33">buf<pos:position pos:line="9" pos:column="36"/></name></name></expr></init></decl>, <modifier pos:line="9" pos:column="38">*<pos:position pos:line="9" pos:column="39"/></modifier><decl><type ref="prev"/><name pos:line="9" pos:column="39">eol<pos:position pos:line="9" pos:column="42"/></name></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>

		<while pos:line="11" pos:column="17">while <condition pos:line="11" pos:column="23">(<expr><operator pos:line="11" pos:column="24">*<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="25">bol<pos:position pos:line="11" pos:column="28"/></name></expr>)<pos:position pos:line="11" pos:column="29"/></condition> <block pos:line="11" pos:column="30">{
			<expr_stmt><expr><name pos:line="12" pos:column="25">eol<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">=<pos:position pos:line="12" pos:column="30"/></operator> <call><name pos:line="12" pos:column="31">strchrnul<pos:position pos:line="12" pos:column="40"/></name><argument_list pos:line="12" pos:column="40">(<argument><expr><name pos:line="12" pos:column="41">bol<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="46">'\n'<pos:position pos:line="12" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">fprintf<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">out<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="38">"%.*s %s\n"<pos:position pos:line="13" pos:column="49"/></literal></expr></argument>, <argument><expr><call pos:line="13" pos:column="51">(<name pos:line="13" pos:column="52">int<pos:position pos:line="13" pos:column="55"/></name>)<argument_list pos:line="13" pos:column="56">(<argument><expr><name pos:line="13" pos:column="57">eol<pos:position pos:line="13" pos:column="60"/></name> <operator pos:line="13" pos:column="61">-<pos:position pos:line="13" pos:column="62"/></operator> <name pos:line="13" pos:column="63">bol<pos:position pos:line="13" pos:column="66"/></name></expr></argument>)<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr></argument>,
					<argument><expr><name pos:line="14" pos:column="41">bol<pos:position pos:line="14" pos:column="44"/></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="46">sha1_to_hex<pos:position pos:line="14" pos:column="57"/></name><argument_list pos:line="14" pos:column="57">(<argument><expr><name pos:line="14" pos:column="58">newsha1<pos:position pos:line="14" pos:column="65"/></name></expr></argument>)<pos:position pos:line="14" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="68"/></expr_stmt>
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><operator pos:line="15" pos:column="29">!<pos:position pos:line="15" pos:column="30"/></operator><operator pos:line="15" pos:column="30">*<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="31">eol<pos:position pos:line="15" pos:column="34"/></name></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35">
				<block type="pseudo"><break pos:line="16" pos:column="33">break;<pos:position pos:line="16" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="17" pos:column="25">bol<pos:position pos:line="17" pos:column="28"/></name> <operator pos:line="17" pos:column="29">=<pos:position pos:line="17" pos:column="30"/></operator> <name pos:line="17" pos:column="31">eol<pos:position pos:line="17" pos:column="34"/></name> <operator pos:line="17" pos:column="35">+<pos:position pos:line="17" pos:column="36"/></operator> <literal type="number" pos:line="17" pos:column="37">1<pos:position pos:line="17" pos:column="38"/></literal></expr>;<pos:position pos:line="17" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="18" pos:column="18"/></block></while>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">fclose<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><name pos:line="19" pos:column="24">out<pos:position pos:line="19" pos:column="27"/></name></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">unlink<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><call><name pos:line="20" pos:column="24">rebase_path_rewritten_pending<pos:position pos:line="20" pos:column="53"/></name><argument_list pos:line="20" pos:column="53">()<pos:position pos:line="20" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">strbuf_release<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><operator pos:line="22" pos:column="24">&amp;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="25">buf<pos:position pos:line="22" pos:column="28"/></name></expr></argument>)<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
