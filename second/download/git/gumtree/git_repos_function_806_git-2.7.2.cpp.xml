<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_806_git-2.7.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">wait_or_whine<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">pid_t<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">pid<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">argv0<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">in_signal<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">status<pos:position pos:line="3" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="21">code<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><operator pos:line="3" pos:column="28">-<pos:position pos:line="3" pos:column="29"/></operator><literal type="number" pos:line="3" pos:column="29">1<pos:position pos:line="3" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">pid_t<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">waiting<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">failed_errno<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><literal type="number" pos:line="5" pos:column="28">0<pos:position pos:line="5" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>

	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><operator pos:line="7" pos:column="16">(<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">waiting<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">=<pos:position pos:line="7" pos:column="26"/></operator> <call><name pos:line="7" pos:column="27">waitpid<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><name pos:line="7" pos:column="35">pid<pos:position pos:line="7" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="40">&amp;<pos:position pos:line="7" pos:column="45"/></operator><name pos:line="7" pos:column="41">status<pos:position pos:line="7" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="49">0<pos:position pos:line="7" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call><operator pos:line="7" pos:column="51">)<pos:position pos:line="7" pos:column="52"/></operator> <operator pos:line="7" pos:column="53">&lt;<pos:position pos:line="7" pos:column="57"/></operator> <literal type="number" pos:line="7" pos:column="55">0<pos:position pos:line="7" pos:column="56"/></literal> <operator pos:line="7" pos:column="57">&amp;&amp;<pos:position pos:line="7" pos:column="67"/></operator> <name pos:line="7" pos:column="60">errno<pos:position pos:line="7" pos:column="65"/></name> <operator pos:line="7" pos:column="66">==<pos:position pos:line="7" pos:column="68"/></operator> <name pos:line="7" pos:column="69">EINTR<pos:position pos:line="7" pos:column="74"/></name></expr>)<pos:position pos:line="7" pos:column="75"/></condition>
		<block type="pseudo"><empty_stmt pos:line="8" pos:column="17">;<pos:position pos:line="8" pos:column="18"/></empty_stmt></block></while>	<comment type="block" pos:line="8" pos:column="25">/* nothing */</comment>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">in_signal<pos:position pos:line="9" pos:column="22"/></name></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">waiting<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">&lt;<pos:position pos:line="12" pos:column="25"/></operator> <literal type="number" pos:line="12" pos:column="23">0<pos:position pos:line="12" pos:column="24"/></literal></expr>)<pos:position pos:line="12" pos:column="25"/></condition><then pos:line="12" pos:column="25"> <block pos:line="12" pos:column="26">{
		<expr_stmt><expr><name pos:line="13" pos:column="17">failed_errno<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">=<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="32">errno<pos:position pos:line="13" pos:column="37"/></name></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">error<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><literal type="string" pos:line="14" pos:column="23">"waitpid for %s failed: %s"<pos:position pos:line="14" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="52">argv0<pos:position pos:line="14" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="59">strerror<pos:position pos:line="14" pos:column="67"/></name><argument_list pos:line="14" pos:column="67">(<argument><expr><name pos:line="14" pos:column="68">errno<pos:position pos:line="14" pos:column="73"/></name></expr></argument>)<pos:position pos:line="14" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="76"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then> <elseif pos:line="15" pos:column="11">else <if pos:line="15" pos:column="16">if <condition pos:line="15" pos:column="19">(<expr><name pos:line="15" pos:column="20">waiting<pos:position pos:line="15" pos:column="27"/></name> <operator pos:line="15" pos:column="28">!=<pos:position pos:line="15" pos:column="30"/></operator> <name pos:line="15" pos:column="31">pid<pos:position pos:line="15" pos:column="34"/></name></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35"> <block pos:line="15" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">error<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><literal type="string" pos:line="16" pos:column="23">"waitpid is confused (%s)"<pos:position pos:line="16" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">argv0<pos:position pos:line="16" pos:column="56"/></name></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if></elseif> <elseif pos:line="17" pos:column="11">else <if pos:line="17" pos:column="16">if <condition pos:line="17" pos:column="19">(<expr><call><name pos:line="17" pos:column="20">WIFSIGNALED<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">status<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="40"/></condition><then pos:line="17" pos:column="40"> <block pos:line="17" pos:column="41">{
		<expr_stmt><expr><name pos:line="18" pos:column="17">code<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <call><name pos:line="18" pos:column="24">WTERMSIG<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">status<pos:position pos:line="18" pos:column="39"/></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">code<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">!=<pos:position pos:line="19" pos:column="28"/></operator> <name pos:line="19" pos:column="29">SIGINT<pos:position pos:line="19" pos:column="35"/></name> <operator pos:line="19" pos:column="36">&amp;&amp;<pos:position pos:line="19" pos:column="46"/></operator> <name pos:line="19" pos:column="39">code<pos:position pos:line="19" pos:column="43"/></name> <operator pos:line="19" pos:column="44">!=<pos:position pos:line="19" pos:column="46"/></operator> <name pos:line="19" pos:column="47">SIGQUIT<pos:position pos:line="19" pos:column="54"/></name></expr>)<pos:position pos:line="19" pos:column="55"/></condition><then pos:line="19" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="25">error<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><literal type="string" pos:line="20" pos:column="31">"%s died of signal %d"<pos:position pos:line="20" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="55">argv0<pos:position pos:line="20" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="62">code<pos:position pos:line="20" pos:column="66"/></name></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="68"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="21" pos:column="17">/*
		 * This return value is chosen so that code &amp; 0xff
		 * mimics the exit code that a POSIX shell would report for
		 * a program that died from this signal.
		 */</comment>
		<expr_stmt><expr><name pos:line="26" pos:column="17">code<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">+=<pos:position pos:line="26" pos:column="24"/></operator> <literal type="number" pos:line="26" pos:column="25">128<pos:position pos:line="26" pos:column="28"/></literal></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if></elseif> <elseif pos:line="27" pos:column="11">else <if pos:line="27" pos:column="16">if <condition pos:line="27" pos:column="19">(<expr><call><name pos:line="27" pos:column="20">WIFEXITED<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">status<pos:position pos:line="27" pos:column="36"/></name></expr></argument>)<pos:position pos:line="27" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="38"/></condition><then pos:line="27" pos:column="38"> <block pos:line="27" pos:column="39">{
		<expr_stmt><expr><name pos:line="28" pos:column="17">code<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <call><name pos:line="28" pos:column="24">WEXITSTATUS<pos:position pos:line="28" pos:column="35"/></name><argument_list pos:line="28" pos:column="35">(<argument><expr><name pos:line="28" pos:column="36">status<pos:position pos:line="28" pos:column="42"/></name></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt>
		<comment type="block" pos:line="29" pos:column="17">/*
		 * Convert special exit code when execvp failed.
		 */</comment>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">code<pos:position pos:line="32" pos:column="25"/></name> <operator pos:line="32" pos:column="26">==<pos:position pos:line="32" pos:column="28"/></operator> <literal type="number" pos:line="32" pos:column="29">127<pos:position pos:line="32" pos:column="32"/></literal></expr>)<pos:position pos:line="32" pos:column="33"/></condition><then pos:line="32" pos:column="33"> <block pos:line="32" pos:column="34">{
			<expr_stmt><expr><name pos:line="33" pos:column="25">code<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">=<pos:position pos:line="33" pos:column="31"/></operator> <operator pos:line="33" pos:column="32">-<pos:position pos:line="33" pos:column="33"/></operator><literal type="number" pos:line="33" pos:column="33">1<pos:position pos:line="33" pos:column="34"/></literal></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="34" pos:column="25">failed_errno<pos:position pos:line="34" pos:column="37"/></name> <operator pos:line="34" pos:column="38">=<pos:position pos:line="34" pos:column="39"/></operator> <name pos:line="34" pos:column="40">ENOENT<pos:position pos:line="34" pos:column="46"/></name></expr>;<pos:position pos:line="34" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if></elseif> <else pos:line="36" pos:column="11">else <block pos:line="36" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">error<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><literal type="string" pos:line="37" pos:column="23">"waitpid is confused (%s)"<pos:position pos:line="37" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="51">argv0<pos:position pos:line="37" pos:column="56"/></name></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="40" pos:column="9">clear_child_for_cleanup<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">pid<pos:position pos:line="40" pos:column="36"/></name></expr></argument>)<pos:position pos:line="40" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="38"/></expr_stmt>

	<expr_stmt><expr><name pos:line="42" pos:column="9">errno<pos:position pos:line="42" pos:column="14"/></name> <operator pos:line="42" pos:column="15">=<pos:position pos:line="42" pos:column="16"/></operator> <name pos:line="42" pos:column="17">failed_errno<pos:position pos:line="42" pos:column="29"/></name></expr>;<pos:position pos:line="42" pos:column="30"/></expr_stmt>
	<return pos:line="43" pos:column="9">return <expr><name pos:line="43" pos:column="16">code<pos:position pos:line="43" pos:column="20"/></name></expr>;<pos:position pos:line="43" pos:column="21"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
