<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_418_git-2.1.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_value<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">config_fn_t<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">fn<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">void<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">data<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="50">struct<pos:position pos:line="1" pos:column="56"/></name> <name pos:line="1" pos:column="57">strbuf<pos:position pos:line="1" pos:column="63"/></name></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">name<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">c<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">value<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* Get the full name */</comment>
	<for pos:line="7" pos:column="9">for <control pos:line="7" pos:column="13">(<init pos:line="7" pos:column="14">;<pos:position pos:line="7" pos:column="15"/></init><condition pos:line="7" pos:column="15">;<pos:position pos:line="7" pos:column="16"/></condition><incr/>)<pos:position pos:line="7" pos:column="17"/></control> <block pos:line="7" pos:column="18">{
		<expr_stmt><expr><name pos:line="8" pos:column="17">c<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">=<pos:position pos:line="8" pos:column="20"/></operator> <call><name pos:line="8" pos:column="21">get_next_char<pos:position pos:line="8" pos:column="34"/></name><argument_list pos:line="8" pos:column="34">()<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name><name pos:line="9" pos:column="21">cf<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">-&gt;<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="25">eof<pos:position pos:line="9" pos:column="28"/></name></name></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29">
			<block type="pseudo"><break pos:line="10" pos:column="25">break;<pos:position pos:line="10" pos:column="31"/></break></block></then></if>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><call><name pos:line="11" pos:column="22">iskeychar<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">c<pos:position pos:line="11" pos:column="33"/></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="35"/></condition><then pos:line="11" pos:column="35">
			<block type="pseudo"><break pos:line="12" pos:column="25">break;<pos:position pos:line="12" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">strbuf_addch<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">name<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="36">tolower<pos:position pos:line="13" pos:column="43"/></name><argument_list pos:line="13" pos:column="43">(<argument><expr><name pos:line="13" pos:column="44">c<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></for>

	<while pos:line="16" pos:column="9">while <condition pos:line="16" pos:column="15">(<expr><name pos:line="16" pos:column="16">c<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">==<pos:position pos:line="16" pos:column="20"/></operator> <literal type="char" pos:line="16" pos:column="21">' '<pos:position pos:line="16" pos:column="24"/></literal> <operator pos:line="16" pos:column="25">||<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="28">c<pos:position pos:line="16" pos:column="29"/></name> <operator pos:line="16" pos:column="30">==<pos:position pos:line="16" pos:column="32"/></operator> <literal type="char" pos:line="16" pos:column="33">'\t'<pos:position pos:line="16" pos:column="37"/></literal></expr>)<pos:position pos:line="16" pos:column="38"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">c<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <call><name pos:line="17" pos:column="21">get_next_char<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">()<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt></block></while>

	<expr_stmt><expr><name pos:line="19" pos:column="9">value<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <name pos:line="19" pos:column="17">NULL<pos:position pos:line="19" pos:column="21"/></name></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">c<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">!=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="char" pos:line="20" pos:column="18">'\n'<pos:position pos:line="20" pos:column="22"/></literal></expr>)<pos:position pos:line="20" pos:column="23"/></condition><then pos:line="20" pos:column="23"> <block pos:line="20" pos:column="24">{
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">c<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">!=<pos:position pos:line="21" pos:column="25"/></operator> <literal type="char" pos:line="21" pos:column="26">'='<pos:position pos:line="21" pos:column="29"/></literal></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30">
			<block type="pseudo"><return pos:line="22" pos:column="25">return <expr><operator pos:line="22" pos:column="32">-<pos:position pos:line="22" pos:column="33"/></operator><literal type="number" pos:line="22" pos:column="33">1<pos:position pos:line="22" pos:column="34"/></literal></expr>;<pos:position pos:line="22" pos:column="35"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="23" pos:column="17">value<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator> <call><name pos:line="23" pos:column="25">parse_value<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">()<pos:position pos:line="23" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="39"/></expr_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">value<pos:position pos:line="24" pos:column="27"/></name></expr>)<pos:position pos:line="24" pos:column="28"/></condition><then pos:line="24" pos:column="28">
			<block type="pseudo"><return pos:line="25" pos:column="25">return <expr><operator pos:line="25" pos:column="32">-<pos:position pos:line="25" pos:column="33"/></operator><literal type="number" pos:line="25" pos:column="33">1<pos:position pos:line="25" pos:column="34"/></literal></expr>;<pos:position pos:line="25" pos:column="35"/></return></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<return pos:line="27" pos:column="9">return <expr><call><name pos:line="27" pos:column="16">fn<pos:position pos:line="27" pos:column="18"/></name><argument_list pos:line="27" pos:column="18">(<argument><expr><name><name pos:line="27" pos:column="19">name<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">-&gt;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="25">buf<pos:position pos:line="27" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="30">value<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">data<pos:position pos:line="27" pos:column="41"/></name></expr></argument>)<pos:position pos:line="27" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="43"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
