<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5628_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">run_and_feed_hook<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">hook_name<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">feed_fn<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">feed<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
			     <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">receive_hook_feed_state<pos:position pos:line="2" pos:column="60"/></name></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">feed_state<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">child_process<pos:position pos:line="4" pos:column="29"/></name></name></type> <name pos:line="4" pos:column="30">proc<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><name pos:line="4" pos:column="37">CHILD_PROCESS_INIT<pos:position pos:line="4" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">async<pos:position pos:line="5" pos:column="21"/></name></name></type> <name pos:line="5" pos:column="22">muxer<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name><name pos:line="6" pos:column="21">argv<pos:position pos:line="6" pos:column="25"/></name><index pos:line="6" pos:column="25">[<expr><literal type="number" pos:line="6" pos:column="26">2<pos:position pos:line="6" pos:column="27"/></literal></expr>]<pos:position pos:line="6" pos:column="28"/></index></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">code<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="9" pos:column="9">argv<pos:position pos:line="9" pos:column="13"/></name><index pos:line="9" pos:column="13">[<expr><literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr>]<pos:position pos:line="9" pos:column="16"/></index></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <call><name pos:line="9" pos:column="19">find_hook<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><name pos:line="9" pos:column="29">hook_name<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name><name pos:line="10" pos:column="14">argv<pos:position pos:line="10" pos:column="18"/></name><index pos:line="10" pos:column="18">[<expr><literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr>]<pos:position pos:line="10" pos:column="21"/></index></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="13" pos:column="9">argv<pos:position pos:line="13" pos:column="13"/></name><index pos:line="13" pos:column="13">[<expr><literal type="number" pos:line="13" pos:column="14">1<pos:position pos:line="13" pos:column="15"/></literal></expr>]<pos:position pos:line="13" pos:column="16"/></index></name> <operator pos:line="13" pos:column="17">=<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="19">NULL<pos:position pos:line="13" pos:column="23"/></name></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="15" pos:column="9">proc<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">.<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">argv<pos:position pos:line="15" pos:column="18"/></name></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">argv<pos:position pos:line="15" pos:column="25"/></name></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">proc<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">.<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">in<pos:position pos:line="16" pos:column="16"/></name></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <operator pos:line="16" pos:column="19">-<pos:position pos:line="16" pos:column="20"/></operator><literal type="number" pos:line="16" pos:column="20">1<pos:position pos:line="16" pos:column="21"/></literal></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">proc<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">.<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">stdout_to_stderr<pos:position pos:line="17" pos:column="30"/></name></name> <operator pos:line="17" pos:column="31">=<pos:position pos:line="17" pos:column="32"/></operator> <literal type="number" pos:line="17" pos:column="33">1<pos:position pos:line="17" pos:column="34"/></literal></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name><name pos:line="18" pos:column="13">feed_state<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">-&gt;<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="25">push_options<pos:position pos:line="18" pos:column="37"/></name></name></expr>)<pos:position pos:line="18" pos:column="38"/></condition><then pos:line="18" pos:column="38"> <block pos:line="18" pos:column="39">{
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">int<pos:position pos:line="19" pos:column="20"/></name></type> <name pos:line="19" pos:column="21">i<pos:position pos:line="19" pos:column="22"/></name></decl>;<pos:position pos:line="19" pos:column="23"/></decl_stmt>
		<for pos:line="20" pos:column="17">for <control pos:line="20" pos:column="21">(<init><expr><name pos:line="20" pos:column="22">i<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="26">0<pos:position pos:line="20" pos:column="27"/></literal></expr>;<pos:position pos:line="20" pos:column="28"/></init> <condition><expr><name pos:line="20" pos:column="29">i<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">&lt;<pos:position pos:line="20" pos:column="35"/></operator> <name><name pos:line="20" pos:column="33">feed_state<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">-&gt;<pos:position pos:line="20" pos:column="48"/></operator><name pos:line="20" pos:column="45">push_options<pos:position pos:line="20" pos:column="57"/></name><operator pos:line="20" pos:column="57">-&gt;<pos:position pos:line="20" pos:column="62"/></operator><name pos:line="20" pos:column="59">nr<pos:position pos:line="20" pos:column="61"/></name></name></expr>;<pos:position pos:line="20" pos:column="62"/></condition> <incr><expr><name pos:line="20" pos:column="63">i<pos:position pos:line="20" pos:column="64"/></name><operator pos:line="20" pos:column="64">++<pos:position pos:line="20" pos:column="66"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="67"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">argv_array_pushf<pos:position pos:line="21" pos:column="41"/></name><argument_list pos:line="21" pos:column="41">(<argument><expr><operator pos:line="21" pos:column="42">&amp;<pos:position pos:line="21" pos:column="47"/></operator><name><name pos:line="21" pos:column="43">proc<pos:position pos:line="21" pos:column="47"/></name><operator pos:line="21" pos:column="47">.<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="48">env_array<pos:position pos:line="21" pos:column="57"/></name></name></expr></argument>,
				<argument><expr><literal type="string" pos:line="22" pos:column="33">"GIT_PUSH_OPTION_%d=%s"<pos:position pos:line="22" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="58">i<pos:position pos:line="22" pos:column="59"/></name></expr></argument>,
				<argument><expr><name><name pos:line="23" pos:column="33">feed_state<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">-&gt;<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="45">push_options<pos:position pos:line="23" pos:column="57"/></name><operator pos:line="23" pos:column="57">-&gt;<pos:position pos:line="23" pos:column="62"/></operator><name pos:line="23" pos:column="59">items<pos:position pos:line="23" pos:column="64"/></name><index pos:line="23" pos:column="64">[<expr><name pos:line="23" pos:column="65">i<pos:position pos:line="23" pos:column="66"/></name></expr>]<pos:position pos:line="23" pos:column="67"/></index></name><operator pos:line="23" pos:column="67">.<pos:position pos:line="23" pos:column="68"/></operator><name pos:line="23" pos:column="68">string<pos:position pos:line="23" pos:column="74"/></name></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="76"/></expr_stmt></block></for>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">argv_array_pushf<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">(<argument><expr><operator pos:line="24" pos:column="34">&amp;<pos:position pos:line="24" pos:column="39"/></operator><name><name pos:line="24" pos:column="35">proc<pos:position pos:line="24" pos:column="39"/></name><operator pos:line="24" pos:column="39">.<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="40">env_array<pos:position pos:line="24" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="51">"GIT_PUSH_OPTION_COUNT=%d"<pos:position pos:line="24" pos:column="77"/></literal></expr></argument>,
				 <argument><expr><name><name pos:line="25" pos:column="34">feed_state<pos:position pos:line="25" pos:column="44"/></name><operator pos:line="25" pos:column="44">-&gt;<pos:position pos:line="25" pos:column="49"/></operator><name pos:line="25" pos:column="46">push_options<pos:position pos:line="25" pos:column="58"/></name><operator pos:line="25" pos:column="58">-&gt;<pos:position pos:line="25" pos:column="63"/></operator><name pos:line="25" pos:column="60">nr<pos:position pos:line="25" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="64"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></then> <else pos:line="26" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="17">argv_array_pushf<pos:position pos:line="27" pos:column="33"/></name><argument_list pos:line="27" pos:column="33">(<argument><expr><operator pos:line="27" pos:column="34">&amp;<pos:position pos:line="27" pos:column="39"/></operator><name><name pos:line="27" pos:column="35">proc<pos:position pos:line="27" pos:column="39"/></name><operator pos:line="27" pos:column="39">.<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="40">env_array<pos:position pos:line="27" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="51">"GIT_PUSH_OPTION_COUNT"<pos:position pos:line="27" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="76"/></expr_stmt></block></else></if>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">tmp_objdir<pos:position pos:line="29" pos:column="23"/></name></expr>)<pos:position pos:line="29" pos:column="24"/></condition><then pos:line="29" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="17">argv_array_pushv<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><operator pos:line="30" pos:column="34">&amp;<pos:position pos:line="30" pos:column="39"/></operator><name><name pos:line="30" pos:column="35">proc<pos:position pos:line="30" pos:column="39"/></name><operator pos:line="30" pos:column="39">.<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="40">env_array<pos:position pos:line="30" pos:column="49"/></name></name></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="51">tmp_objdir_env<pos:position pos:line="30" pos:column="65"/></name><argument_list pos:line="30" pos:column="65">(<argument><expr><name pos:line="30" pos:column="66">tmp_objdir<pos:position pos:line="30" pos:column="76"/></name></expr></argument>)<pos:position pos:line="30" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="79"/></expr_stmt></block></then></if>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">use_sideband<pos:position pos:line="32" pos:column="25"/></name></expr>)<pos:position pos:line="32" pos:column="26"/></condition><then pos:line="32" pos:column="26"> <block pos:line="32" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">memset<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><operator pos:line="33" pos:column="24">&amp;<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="25">muxer<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="32">0<pos:position pos:line="33" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="35">sizeof<argument_list pos:line="33" pos:column="41">(<argument><expr><name pos:line="33" pos:column="42">muxer<pos:position pos:line="33" pos:column="47"/></name></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="34" pos:column="17">muxer<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">.<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="23">proc<pos:position pos:line="34" pos:column="27"/></name></name> <operator pos:line="34" pos:column="28">=<pos:position pos:line="34" pos:column="29"/></operator> <name pos:line="34" pos:column="30">copy_to_sideband<pos:position pos:line="34" pos:column="46"/></name></expr>;<pos:position pos:line="34" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="35" pos:column="17">muxer<pos:position pos:line="35" pos:column="22"/></name><operator pos:line="35" pos:column="22">.<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="23">in<pos:position pos:line="35" pos:column="25"/></name></name> <operator pos:line="35" pos:column="26">=<pos:position pos:line="35" pos:column="27"/></operator> <operator pos:line="35" pos:column="28">-<pos:position pos:line="35" pos:column="29"/></operator><literal type="number" pos:line="35" pos:column="29">1<pos:position pos:line="35" pos:column="30"/></literal></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name pos:line="36" pos:column="17">code<pos:position pos:line="36" pos:column="21"/></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <call><name pos:line="36" pos:column="24">start_async<pos:position pos:line="36" pos:column="35"/></name><argument_list pos:line="36" pos:column="35">(<argument><expr><operator pos:line="36" pos:column="36">&amp;<pos:position pos:line="36" pos:column="41"/></operator><name pos:line="36" pos:column="37">muxer<pos:position pos:line="36" pos:column="42"/></name></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="44"/></expr_stmt>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">code<pos:position pos:line="37" pos:column="25"/></name></expr>)<pos:position pos:line="37" pos:column="26"/></condition><then pos:line="37" pos:column="26">
			<block type="pseudo"><return pos:line="38" pos:column="25">return <expr><name pos:line="38" pos:column="32">code<pos:position pos:line="38" pos:column="36"/></name></expr>;<pos:position pos:line="38" pos:column="37"/></return></block></then></if>
		<expr_stmt><expr><name><name pos:line="39" pos:column="17">proc<pos:position pos:line="39" pos:column="21"/></name><operator pos:line="39" pos:column="21">.<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">err<pos:position pos:line="39" pos:column="25"/></name></name> <operator pos:line="39" pos:column="26">=<pos:position pos:line="39" pos:column="27"/></operator> <name><name pos:line="39" pos:column="28">muxer<pos:position pos:line="39" pos:column="33"/></name><operator pos:line="39" pos:column="33">.<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="34">in<pos:position pos:line="39" pos:column="36"/></name></name></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="42" pos:column="9">prepare_push_cert_sha1<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><operator pos:line="42" pos:column="32">&amp;<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="33">proc<pos:position pos:line="42" pos:column="37"/></name></expr></argument>)<pos:position pos:line="42" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>

	<expr_stmt><expr><name pos:line="44" pos:column="9">code<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <call><name pos:line="44" pos:column="16">start_command<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><operator pos:line="44" pos:column="30">&amp;<pos:position pos:line="44" pos:column="35"/></operator><name pos:line="44" pos:column="31">proc<pos:position pos:line="44" pos:column="35"/></name></expr></argument>)<pos:position pos:line="44" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="37"/></expr_stmt>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">code<pos:position pos:line="45" pos:column="17"/></name></expr>)<pos:position pos:line="45" pos:column="18"/></condition><then pos:line="45" pos:column="18"> <block pos:line="45" pos:column="19">{
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name pos:line="46" pos:column="21">use_sideband<pos:position pos:line="46" pos:column="33"/></name></expr>)<pos:position pos:line="46" pos:column="34"/></condition><then pos:line="46" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="25">finish_async<pos:position pos:line="47" pos:column="37"/></name><argument_list pos:line="47" pos:column="37">(<argument><expr><operator pos:line="47" pos:column="38">&amp;<pos:position pos:line="47" pos:column="43"/></operator><name pos:line="47" pos:column="39">muxer<pos:position pos:line="47" pos:column="44"/></name></expr></argument>)<pos:position pos:line="47" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="46"/></expr_stmt></block></then></if>
		<return pos:line="48" pos:column="17">return <expr><name pos:line="48" pos:column="24">code<pos:position pos:line="48" pos:column="28"/></name></expr>;<pos:position pos:line="48" pos:column="29"/></return>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="51" pos:column="9">sigchain_push<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">(<argument><expr><name pos:line="51" pos:column="23">SIGPIPE<pos:position pos:line="51" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="32">SIG_IGN<pos:position pos:line="51" pos:column="39"/></name></expr></argument>)<pos:position pos:line="51" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt>

	<while pos:line="53" pos:column="9">while <condition pos:line="53" pos:column="15">(<expr><literal type="number" pos:line="53" pos:column="16">1<pos:position pos:line="53" pos:column="17"/></literal></expr>)<pos:position pos:line="53" pos:column="18"/></condition> <block pos:line="53" pos:column="19">{
		<decl_stmt><decl><type><specifier pos:line="54" pos:column="17">const<pos:position pos:line="54" pos:column="22"/></specifier> <name pos:line="54" pos:column="23">char<pos:position pos:line="54" pos:column="27"/></name> <modifier pos:line="54" pos:column="28">*<pos:position pos:line="54" pos:column="29"/></modifier></type><name pos:line="54" pos:column="29">buf<pos:position pos:line="54" pos:column="32"/></name></decl>;<pos:position pos:line="54" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="55" pos:column="17">size_t<pos:position pos:line="55" pos:column="23"/></name></type> <name pos:line="55" pos:column="24">n<pos:position pos:line="55" pos:column="25"/></name></decl>;<pos:position pos:line="55" pos:column="26"/></decl_stmt>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><call><name pos:line="56" pos:column="21">feed<pos:position pos:line="56" pos:column="25"/></name><argument_list pos:line="56" pos:column="25">(<argument><expr><name pos:line="56" pos:column="26">feed_state<pos:position pos:line="56" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="38">&amp;<pos:position pos:line="56" pos:column="43"/></operator><name pos:line="56" pos:column="39">buf<pos:position pos:line="56" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="44">&amp;<pos:position pos:line="56" pos:column="49"/></operator><name pos:line="56" pos:column="45">n<pos:position pos:line="56" pos:column="46"/></name></expr></argument>)<pos:position pos:line="56" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="48"/></condition><then pos:line="56" pos:column="48">
			<block type="pseudo"><break pos:line="57" pos:column="25">break;<pos:position pos:line="57" pos:column="31"/></break></block></then></if>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><call><name pos:line="58" pos:column="21">write_in_full<pos:position pos:line="58" pos:column="34"/></name><argument_list pos:line="58" pos:column="34">(<argument><expr><name><name pos:line="58" pos:column="35">proc<pos:position pos:line="58" pos:column="39"/></name><operator pos:line="58" pos:column="39">.<pos:position pos:line="58" pos:column="40"/></operator><name pos:line="58" pos:column="40">in<pos:position pos:line="58" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="44">buf<pos:position pos:line="58" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="49">n<pos:position pos:line="58" pos:column="50"/></name></expr></argument>)<pos:position pos:line="58" pos:column="51"/></argument_list></call> <operator pos:line="58" pos:column="52">!=<pos:position pos:line="58" pos:column="54"/></operator> <name pos:line="58" pos:column="55">n<pos:position pos:line="58" pos:column="56"/></name></expr>)<pos:position pos:line="58" pos:column="57"/></condition><then pos:line="58" pos:column="57">
			<block type="pseudo"><break pos:line="59" pos:column="25">break;<pos:position pos:line="59" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="60" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">close<pos:position pos:line="61" pos:column="14"/></name><argument_list pos:line="61" pos:column="14">(<argument><expr><name><name pos:line="61" pos:column="15">proc<pos:position pos:line="61" pos:column="19"/></name><operator pos:line="61" pos:column="19">.<pos:position pos:line="61" pos:column="20"/></operator><name pos:line="61" pos:column="20">in<pos:position pos:line="61" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="24"/></expr_stmt>
	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">use_sideband<pos:position pos:line="62" pos:column="25"/></name></expr>)<pos:position pos:line="62" pos:column="26"/></condition><then pos:line="62" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="17">finish_async<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><operator pos:line="63" pos:column="30">&amp;<pos:position pos:line="63" pos:column="35"/></operator><name pos:line="63" pos:column="31">muxer<pos:position pos:line="63" pos:column="36"/></name></expr></argument>)<pos:position pos:line="63" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="65" pos:column="9">sigchain_pop<pos:position pos:line="65" pos:column="21"/></name><argument_list pos:line="65" pos:column="21">(<argument><expr><name pos:line="65" pos:column="22">SIGPIPE<pos:position pos:line="65" pos:column="29"/></name></expr></argument>)<pos:position pos:line="65" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="31"/></expr_stmt>

	<return pos:line="67" pos:column="9">return <expr><call><name pos:line="67" pos:column="16">finish_command<pos:position pos:line="67" pos:column="30"/></name><argument_list pos:line="67" pos:column="30">(<argument><expr><operator pos:line="67" pos:column="31">&amp;<pos:position pos:line="67" pos:column="36"/></operator><name pos:line="67" pos:column="32">proc<pos:position pos:line="67" pos:column="36"/></name></expr></argument>)<pos:position pos:line="67" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="38"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
