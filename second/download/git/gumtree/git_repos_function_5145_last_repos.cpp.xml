<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5145_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">normalize_value<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">key<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">value<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><name pos:line="3" pos:column="14">value<pos:position pos:line="3" pos:column="19"/></name></expr>)<pos:position pos:line="3" pos:column="20"/></condition><then pos:line="3" pos:column="20">
		<block type="pseudo"><return pos:line="4" pos:column="17">return <expr><name pos:line="4" pos:column="24">NULL<pos:position pos:line="4" pos:column="28"/></name></expr>;<pos:position pos:line="4" pos:column="29"/></return></block></then></if>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">types<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">==<pos:position pos:line="6" pos:column="21"/></operator> <literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal> <operator pos:line="6" pos:column="24">||<pos:position pos:line="6" pos:column="26"/></operator> <name pos:line="6" pos:column="27">types<pos:position pos:line="6" pos:column="32"/></name> <operator pos:line="6" pos:column="33">==<pos:position pos:line="6" pos:column="35"/></operator> <name pos:line="6" pos:column="36">TYPE_PATH<pos:position pos:line="6" pos:column="45"/></name></expr>)<pos:position pos:line="6" pos:column="46"/></condition><then pos:line="6" pos:column="46">
		<comment type="block" pos:line="7" pos:column="17">/*
		 * We don't do normalization for TYPE_PATH here: If
		 * the path is like ~/foobar/, we prefer to store
		 * "~/foobar/" in the config file, and to expand the ~
		 * when retrieving the value.
		 */</comment>
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><call><name pos:line="13" pos:column="24">xstrdup<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">value<pos:position pos:line="13" pos:column="37"/></name></expr></argument>)<pos:position pos:line="13" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="39"/></return></block></then></if>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">types<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">==<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">TYPE_INT<pos:position pos:line="14" pos:column="30"/></name></expr>)<pos:position pos:line="14" pos:column="31"/></condition><then pos:line="14" pos:column="31">
		<block type="pseudo"><return pos:line="15" pos:column="17">return <expr><call><name pos:line="15" pos:column="24">xstrfmt<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><literal type="string" pos:line="15" pos:column="32">"%"<pos:position pos:line="15" pos:column="35"/></literal><name pos:line="15" pos:column="35">PRId64<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="43">git_config_int64<pos:position pos:line="15" pos:column="59"/></name><argument_list pos:line="15" pos:column="59">(<argument><expr><name pos:line="15" pos:column="60">key<pos:position pos:line="15" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="65">value<pos:position pos:line="15" pos:column="70"/></name></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="73"/></return></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">types<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">==<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">TYPE_BOOL<pos:position pos:line="16" pos:column="31"/></name></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32">
		<block type="pseudo"><return pos:line="17" pos:column="17">return <expr><call><name pos:line="17" pos:column="24">xstrdup<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><ternary><condition><expr><call><name pos:line="17" pos:column="32">git_config_bool<pos:position pos:line="17" pos:column="47"/></name><argument_list pos:line="17" pos:column="47">(<argument><expr><name pos:line="17" pos:column="48">key<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="53">value<pos:position pos:line="17" pos:column="58"/></name></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr> ?<pos:position pos:line="17" pos:column="61"/></condition><then pos:line="17" pos:column="61">  <expr><literal type="string" pos:line="17" pos:column="63">"true"<pos:position pos:line="17" pos:column="69"/></literal></expr> <pos:position pos:line="17" pos:column="70"/></then><else pos:line="17" pos:column="70">: <expr><literal type="string" pos:line="17" pos:column="72">"false"<pos:position pos:line="17" pos:column="79"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="17" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="81"/></return></block></then></if>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">types<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">==<pos:position pos:line="18" pos:column="21"/></operator> <name pos:line="18" pos:column="22">TYPE_BOOL_OR_INT<pos:position pos:line="18" pos:column="38"/></name></expr>)<pos:position pos:line="18" pos:column="39"/></condition><then pos:line="18" pos:column="39"> <block pos:line="18" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">int<pos:position pos:line="19" pos:column="20"/></name></type> <name pos:line="19" pos:column="21">is_bool<pos:position pos:line="19" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="19" pos:column="30">v<pos:position pos:line="19" pos:column="31"/></name></decl>;<pos:position pos:line="19" pos:column="32"/></decl_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">v<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <call><name pos:line="20" pos:column="21">git_config_bool_or_int<pos:position pos:line="20" pos:column="43"/></name><argument_list pos:line="20" pos:column="43">(<argument><expr><name pos:line="20" pos:column="44">key<pos:position pos:line="20" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="49">value<pos:position pos:line="20" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="56">&amp;<pos:position pos:line="20" pos:column="61"/></operator><name pos:line="20" pos:column="57">is_bool<pos:position pos:line="20" pos:column="64"/></name></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="66"/></expr_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">is_bool<pos:position pos:line="21" pos:column="29"/></name></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30">
			<block type="pseudo"><return pos:line="22" pos:column="25">return <expr><call><name pos:line="22" pos:column="32">xstrfmt<pos:position pos:line="22" pos:column="39"/></name><argument_list pos:line="22" pos:column="39">(<argument><expr><literal type="string" pos:line="22" pos:column="40">"%d"<pos:position pos:line="22" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="46">v<pos:position pos:line="22" pos:column="47"/></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></return></block></then>
		<else pos:line="23" pos:column="17">else
			<block type="pseudo"><return pos:line="24" pos:column="25">return <expr><call><name pos:line="24" pos:column="32">xstrdup<pos:position pos:line="24" pos:column="39"/></name><argument_list pos:line="24" pos:column="39">(<argument><expr><ternary><condition><expr><name pos:line="24" pos:column="40">v<pos:position pos:line="24" pos:column="41"/></name></expr> ?<pos:position pos:line="24" pos:column="43"/></condition><then pos:line="24" pos:column="43"> <expr><literal type="string" pos:line="24" pos:column="44">"true"<pos:position pos:line="24" pos:column="50"/></literal></expr> <pos:position pos:line="24" pos:column="51"/></then><else pos:line="24" pos:column="51">: <expr><literal type="string" pos:line="24" pos:column="53">"false"<pos:position pos:line="24" pos:column="60"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="24" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="62"/></return></block></else></if>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">die<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><literal type="string" pos:line="27" pos:column="13">"BUG: cannot normalize type %d"<pos:position pos:line="27" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="46">types<pos:position pos:line="27" pos:column="51"/></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
