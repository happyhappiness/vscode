<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4408_git-2.11.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">format_note<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">notes_tree<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">t<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">unsigned<pos:position pos:line="1" pos:column="61"/></name> <name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">object_sha1<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
			<parameter><decl><type><name><name pos:line="2" pos:column="25">struct<pos:position pos:line="2" pos:column="31"/></name> <name pos:line="2" pos:column="32">strbuf<pos:position pos:line="2" pos:column="38"/></name></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">sb<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name pos:line="2" pos:column="50">char<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">output_encoding<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="73">int<pos:position pos:line="2" pos:column="76"/></name></type> <name pos:line="2" pos:column="77">raw<pos:position pos:line="2" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="81"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><specifier pos:line="4" pos:column="16">const<pos:position pos:line="4" pos:column="21"/></specifier> <name pos:line="4" pos:column="22">char<pos:position pos:line="4" pos:column="26"/></name></type> <name><name pos:line="4" pos:column="27">utf8<pos:position pos:line="4" pos:column="31"/></name><index pos:line="4" pos:column="31">[]<pos:position pos:line="4" pos:column="33"/></index></name> <init pos:line="4" pos:column="34">= <expr><literal type="string" pos:line="4" pos:column="36">"utf-8"<pos:position pos:line="4" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">unsigned<pos:position pos:line="5" pos:column="23"/></name> <name pos:line="5" pos:column="24">char<pos:position pos:line="5" pos:column="28"/></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">sha1<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">msg<pos:position pos:line="6" pos:column="18"/></name></decl>, <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="21">msg_p<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">long<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">linelen<pos:position pos:line="7" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="32">msglen<pos:position pos:line="7" pos:column="38"/></name></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">enum<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">object_type<pos:position pos:line="8" pos:column="25"/></name></name></type> <name pos:line="8" pos:column="26">type<pos:position pos:line="8" pos:column="30"/></name></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">t<pos:position pos:line="10" pos:column="15"/></name></expr>)<pos:position pos:line="10" pos:column="16"/></condition><then pos:line="10" pos:column="16">
		<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">t<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <operator pos:line="11" pos:column="21">&amp;<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="22">default_notes_tree<pos:position pos:line="11" pos:column="40"/></name></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt></block></then></if>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name><name pos:line="12" pos:column="14">t<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">-&gt;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">initialized<pos:position pos:line="12" pos:column="28"/></name></name></expr>)<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">init_notes<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">t<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="31">NULL<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">NULL<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="43">0<pos:position pos:line="13" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="15" pos:column="9">sha1<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <call><name pos:line="15" pos:column="16">get_note<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">t<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="28">object_sha1<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">sha1<pos:position pos:line="16" pos:column="18"/></name></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19">
		<block type="pseudo"><return pos:line="17" pos:column="17">return;<pos:position pos:line="17" pos:column="24"/></return></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><operator pos:line="19" pos:column="14">(<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">msg<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <call><name pos:line="19" pos:column="21">read_sha1_file<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><name pos:line="19" pos:column="36">sha1<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="42">&amp;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="43">type<pos:position pos:line="19" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="49">&amp;<pos:position pos:line="19" pos:column="54"/></operator><name pos:line="19" pos:column="50">msglen<pos:position pos:line="19" pos:column="56"/></name></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call><operator pos:line="19" pos:column="57">)<pos:position pos:line="19" pos:column="58"/></operator> <operator pos:line="19" pos:column="59">||<pos:position pos:line="19" pos:column="61"/></operator> <name pos:line="19" pos:column="62">type<pos:position pos:line="19" pos:column="66"/></name> <operator pos:line="19" pos:column="67">!=<pos:position pos:line="19" pos:column="69"/></operator> <name pos:line="19" pos:column="70">OBJ_BLOB<pos:position pos:line="19" pos:column="78"/></name></expr>)<pos:position pos:line="19" pos:column="79"/></condition><then pos:line="19" pos:column="79"> <block pos:line="19" pos:column="80">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">free<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">msg<pos:position pos:line="20" pos:column="25"/></name></expr></argument>)<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
		<return pos:line="21" pos:column="17">return;<pos:position pos:line="21" pos:column="24"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">output_encoding<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">&amp;&amp;<pos:position pos:line="24" pos:column="39"/></operator> <operator pos:line="24" pos:column="32">*<pos:position pos:line="24" pos:column="33"/></operator><name pos:line="24" pos:column="33">output_encoding<pos:position pos:line="24" pos:column="48"/></name> <operator pos:line="24" pos:column="49">&amp;&amp;<pos:position pos:line="24" pos:column="59"/></operator>
	    <operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><call><name pos:line="25" pos:column="14">is_encoding_utf8<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><name pos:line="25" pos:column="31">output_encoding<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="48"/></condition><then pos:line="25" pos:column="48"> <block pos:line="25" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">char<pos:position pos:line="26" pos:column="21"/></name> <modifier pos:line="26" pos:column="22">*<pos:position pos:line="26" pos:column="23"/></modifier></type><name pos:line="26" pos:column="23">reencoded<pos:position pos:line="26" pos:column="32"/></name> <init pos:line="26" pos:column="33">= <expr><call><name pos:line="26" pos:column="35">reencode_string<pos:position pos:line="26" pos:column="50"/></name><argument_list pos:line="26" pos:column="50">(<argument><expr><name pos:line="26" pos:column="51">msg<pos:position pos:line="26" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="56">output_encoding<pos:position pos:line="26" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="73">utf8<pos:position pos:line="26" pos:column="77"/></name></expr></argument>)<pos:position pos:line="26" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="79"/></decl_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">reencoded<pos:position pos:line="27" pos:column="30"/></name></expr>)<pos:position pos:line="27" pos:column="31"/></condition><then pos:line="27" pos:column="31"> <block pos:line="27" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">free<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">msg<pos:position pos:line="28" pos:column="33"/></name></expr></argument>)<pos:position pos:line="28" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="29" pos:column="25">msg<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">=<pos:position pos:line="29" pos:column="30"/></operator> <name pos:line="29" pos:column="31">reencoded<pos:position pos:line="29" pos:column="40"/></name></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="30" pos:column="25">msglen<pos:position pos:line="30" pos:column="31"/></name> <operator pos:line="30" pos:column="32">=<pos:position pos:line="30" pos:column="33"/></operator> <call><name pos:line="30" pos:column="34">strlen<pos:position pos:line="30" pos:column="40"/></name><argument_list pos:line="30" pos:column="40">(<argument><expr><name pos:line="30" pos:column="41">msg<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="34" pos:column="9">/* we will end the annotation by a newline anyway */</comment>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">msglen<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">&amp;&amp;<pos:position pos:line="35" pos:column="30"/></operator> <name><name pos:line="35" pos:column="23">msg<pos:position pos:line="35" pos:column="26"/></name><index pos:line="35" pos:column="26">[<expr><name pos:line="35" pos:column="27">msglen<pos:position pos:line="35" pos:column="33"/></name> <operator pos:line="35" pos:column="34">-<pos:position pos:line="35" pos:column="35"/></operator> <literal type="number" pos:line="35" pos:column="36">1<pos:position pos:line="35" pos:column="37"/></literal></expr>]<pos:position pos:line="35" pos:column="38"/></index></name> <operator pos:line="35" pos:column="39">==<pos:position pos:line="35" pos:column="41"/></operator> <literal type="char" pos:line="35" pos:column="42">'\n'<pos:position pos:line="35" pos:column="46"/></literal></expr>)<pos:position pos:line="35" pos:column="47"/></condition><then pos:line="35" pos:column="47">
		<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="17">msglen<pos:position pos:line="36" pos:column="23"/></name><operator pos:line="36" pos:column="23">--<pos:position pos:line="36" pos:column="25"/></operator></expr>;<pos:position pos:line="36" pos:column="26"/></expr_stmt></block></then></if>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">raw<pos:position pos:line="38" pos:column="17"/></name></expr>)<pos:position pos:line="38" pos:column="18"/></condition><then pos:line="38" pos:column="18"> <block pos:line="38" pos:column="19">{
		<decl_stmt><decl><type><specifier pos:line="39" pos:column="17">const<pos:position pos:line="39" pos:column="22"/></specifier> <name pos:line="39" pos:column="23">char<pos:position pos:line="39" pos:column="27"/></name> <modifier pos:line="39" pos:column="28">*<pos:position pos:line="39" pos:column="29"/></modifier></type><name pos:line="39" pos:column="29">ref<pos:position pos:line="39" pos:column="32"/></name> <init pos:line="39" pos:column="33">= <expr><name><name pos:line="39" pos:column="35">t<pos:position pos:line="39" pos:column="36"/></name><operator pos:line="39" pos:column="36">-&gt;<pos:position pos:line="39" pos:column="41"/></operator><name pos:line="39" pos:column="38">ref<pos:position pos:line="39" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="39" pos:column="42"/></decl_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">!<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="22">ref<pos:position pos:line="40" pos:column="25"/></name> <operator pos:line="40" pos:column="26">||<pos:position pos:line="40" pos:column="28"/></operator> <operator pos:line="40" pos:column="29">!<pos:position pos:line="40" pos:column="30"/></operator><call><name pos:line="40" pos:column="30">strcmp<pos:position pos:line="40" pos:column="36"/></name><argument_list pos:line="40" pos:column="36">(<argument><expr><name pos:line="40" pos:column="37">ref<pos:position pos:line="40" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="42">GIT_NOTES_DEFAULT_REF<pos:position pos:line="40" pos:column="63"/></name></expr></argument>)<pos:position pos:line="40" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="65"/></condition><then pos:line="40" pos:column="65"> <block pos:line="40" pos:column="66">{
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">strbuf_addstr<pos:position pos:line="41" pos:column="38"/></name><argument_list pos:line="41" pos:column="38">(<argument><expr><name pos:line="41" pos:column="39">sb<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="43">"\nNotes:\n"<pos:position pos:line="41" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></then> <else pos:line="42" pos:column="19">else <block pos:line="42" pos:column="24">{
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><call><name pos:line="43" pos:column="29">starts_with<pos:position pos:line="43" pos:column="40"/></name><argument_list pos:line="43" pos:column="40">(<argument><expr><name pos:line="43" pos:column="41">ref<pos:position pos:line="43" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="46">"refs/"<pos:position pos:line="43" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="55"/></condition><then pos:line="43" pos:column="55">
				<block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="33">ref<pos:position pos:line="44" pos:column="36"/></name> <operator pos:line="44" pos:column="37">+=<pos:position pos:line="44" pos:column="39"/></operator> <literal type="number" pos:line="44" pos:column="40">5<pos:position pos:line="44" pos:column="41"/></literal></expr>;<pos:position pos:line="44" pos:column="42"/></expr_stmt></block></then></if>
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><call><name pos:line="45" pos:column="29">starts_with<pos:position pos:line="45" pos:column="40"/></name><argument_list pos:line="45" pos:column="40">(<argument><expr><name pos:line="45" pos:column="41">ref<pos:position pos:line="45" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="46">"notes/"<pos:position pos:line="45" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="56"/></condition><then pos:line="45" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="33">ref<pos:position pos:line="46" pos:column="36"/></name> <operator pos:line="46" pos:column="37">+=<pos:position pos:line="46" pos:column="39"/></operator> <literal type="number" pos:line="46" pos:column="40">6<pos:position pos:line="46" pos:column="41"/></literal></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">strbuf_addf<pos:position pos:line="47" pos:column="36"/></name><argument_list pos:line="47" pos:column="36">(<argument><expr><name pos:line="47" pos:column="37">sb<pos:position pos:line="47" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="41">"\nNotes (%s):\n"<pos:position pos:line="47" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="60">ref<pos:position pos:line="47" pos:column="63"/></name></expr></argument>)<pos:position pos:line="47" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="65"/></expr_stmt>
		}<pos:position pos:line="48" pos:column="18"/></block></else></if>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

	<for pos:line="51" pos:column="9">for <control pos:line="51" pos:column="13">(<init><expr><name pos:line="51" pos:column="14">msg_p<pos:position pos:line="51" pos:column="19"/></name> <operator pos:line="51" pos:column="20">=<pos:position pos:line="51" pos:column="21"/></operator> <name pos:line="51" pos:column="22">msg<pos:position pos:line="51" pos:column="25"/></name></expr>;<pos:position pos:line="51" pos:column="26"/></init> <condition><expr><name pos:line="51" pos:column="27">msg_p<pos:position pos:line="51" pos:column="32"/></name> <operator pos:line="51" pos:column="33">&lt;<pos:position pos:line="51" pos:column="37"/></operator> <name pos:line="51" pos:column="35">msg<pos:position pos:line="51" pos:column="38"/></name> <operator pos:line="51" pos:column="39">+<pos:position pos:line="51" pos:column="40"/></operator> <name pos:line="51" pos:column="41">msglen<pos:position pos:line="51" pos:column="47"/></name></expr>;<pos:position pos:line="51" pos:column="48"/></condition> <incr><expr><name pos:line="51" pos:column="49">msg_p<pos:position pos:line="51" pos:column="54"/></name> <operator pos:line="51" pos:column="55">+=<pos:position pos:line="51" pos:column="57"/></operator> <name pos:line="51" pos:column="58">linelen<pos:position pos:line="51" pos:column="65"/></name> <operator pos:line="51" pos:column="66">+<pos:position pos:line="51" pos:column="67"/></operator> <literal type="number" pos:line="51" pos:column="68">1<pos:position pos:line="51" pos:column="69"/></literal></expr></incr>)<pos:position pos:line="51" pos:column="70"/></control> <block pos:line="51" pos:column="71">{
		<expr_stmt><expr><name pos:line="52" pos:column="17">linelen<pos:position pos:line="52" pos:column="24"/></name> <operator pos:line="52" pos:column="25">=<pos:position pos:line="52" pos:column="26"/></operator> <call><name pos:line="52" pos:column="27">strchrnul<pos:position pos:line="52" pos:column="36"/></name><argument_list pos:line="52" pos:column="36">(<argument><expr><name pos:line="52" pos:column="37">msg_p<pos:position pos:line="52" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="52" pos:column="44">'\n'<pos:position pos:line="52" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="49"/></argument_list></call> <operator pos:line="52" pos:column="50">-<pos:position pos:line="52" pos:column="51"/></operator> <name pos:line="52" pos:column="52">msg_p<pos:position pos:line="52" pos:column="57"/></name></expr>;<pos:position pos:line="52" pos:column="58"/></expr_stmt>

		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><operator pos:line="54" pos:column="21">!<pos:position pos:line="54" pos:column="22"/></operator><name pos:line="54" pos:column="22">raw<pos:position pos:line="54" pos:column="25"/></name></expr>)<pos:position pos:line="54" pos:column="26"/></condition><then pos:line="54" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="25">strbuf_addstr<pos:position pos:line="55" pos:column="38"/></name><argument_list pos:line="55" pos:column="38">(<argument><expr><name pos:line="55" pos:column="39">sb<pos:position pos:line="55" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="43">"    "<pos:position pos:line="55" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="51"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="56" pos:column="17">strbuf_add<pos:position pos:line="56" pos:column="27"/></name><argument_list pos:line="56" pos:column="27">(<argument><expr><name pos:line="56" pos:column="28">sb<pos:position pos:line="56" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="32">msg_p<pos:position pos:line="56" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="39">linelen<pos:position pos:line="56" pos:column="46"/></name></expr></argument>)<pos:position pos:line="56" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">strbuf_addch<pos:position pos:line="57" pos:column="29"/></name><argument_list pos:line="57" pos:column="29">(<argument><expr><name pos:line="57" pos:column="30">sb<pos:position pos:line="57" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="57" pos:column="34">'\n'<pos:position pos:line="57" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="58" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="60" pos:column="9">free<pos:position pos:line="60" pos:column="13"/></name><argument_list pos:line="60" pos:column="13">(<argument><expr><name pos:line="60" pos:column="14">msg<pos:position pos:line="60" pos:column="17"/></name></expr></argument>)<pos:position pos:line="60" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="19"/></expr_stmt>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
