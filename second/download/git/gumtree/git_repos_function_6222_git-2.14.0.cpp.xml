<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6222_git-2.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">long<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">write_large_blob_data<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name><name pos:line="1" pos:column="44">struct<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">git_istream<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">st<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="68">struct<pos:position pos:line="1" pos:column="74"/></name> <name pos:line="1" pos:column="75">sha1file<pos:position pos:line="1" pos:column="83"/></name></name> <modifier pos:line="1" pos:column="84">*<pos:position pos:line="1" pos:column="85"/></modifier></type><name pos:line="1" pos:column="85">f<pos:position pos:line="1" pos:column="86"/></name></decl></parameter>,
					   <parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name pos:line="2" pos:column="50">unsigned<pos:position pos:line="2" pos:column="58"/></name> <name pos:line="2" pos:column="59">char<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="65">sha1<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">git_zstream<pos:position pos:line="4" pos:column="20"/></name></type> <name pos:line="4" pos:column="21">stream<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name><name pos:line="5" pos:column="23">ibuf<pos:position pos:line="5" pos:column="27"/></name><index pos:line="5" pos:column="27">[<expr><literal type="number" pos:line="5" pos:column="28">1024<pos:position pos:line="5" pos:column="32"/></literal> <operator pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></operator> <literal type="number" pos:line="5" pos:column="35">16<pos:position pos:line="5" pos:column="37"/></literal></expr>]<pos:position pos:line="5" pos:column="38"/></index></name></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name></type> <name><name pos:line="6" pos:column="23">obuf<pos:position pos:line="6" pos:column="27"/></name><index pos:line="6" pos:column="27">[<expr><literal type="number" pos:line="6" pos:column="28">1024<pos:position pos:line="6" pos:column="32"/></literal> <operator pos:line="6" pos:column="33">*<pos:position pos:line="6" pos:column="34"/></operator> <literal type="number" pos:line="6" pos:column="35">16<pos:position pos:line="6" pos:column="37"/></literal></expr>]<pos:position pos:line="6" pos:column="38"/></index></name></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">long<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">olen<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><literal type="number" pos:line="7" pos:column="30">0<pos:position pos:line="7" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">git_deflate_init<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><operator pos:line="9" pos:column="26">&amp;<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="27">stream<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="35">pack_compression_level<pos:position pos:line="9" pos:column="57"/></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="59"/></expr_stmt>

	<for pos:line="11" pos:column="9">for <control pos:line="11" pos:column="13">(<init pos:line="11" pos:column="14">;<pos:position pos:line="11" pos:column="15"/></init><condition pos:line="11" pos:column="15">;<pos:position pos:line="11" pos:column="16"/></condition><incr/>)<pos:position pos:line="11" pos:column="17"/></control> <block pos:line="11" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">ssize_t<pos:position pos:line="12" pos:column="24"/></name></type> <name pos:line="12" pos:column="25">readlen<pos:position pos:line="12" pos:column="32"/></name></decl>;<pos:position pos:line="12" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">zret<pos:position pos:line="13" pos:column="25"/></name> <init pos:line="13" pos:column="26">= <expr><name pos:line="13" pos:column="28">Z_OK<pos:position pos:line="13" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="33"/></decl_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">readlen<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">=<pos:position pos:line="14" pos:column="26"/></operator> <call><name pos:line="14" pos:column="27">read_istream<pos:position pos:line="14" pos:column="39"/></name><argument_list pos:line="14" pos:column="39">(<argument><expr><name pos:line="14" pos:column="40">st<pos:position pos:line="14" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="44">ibuf<pos:position pos:line="14" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="50">sizeof<argument_list pos:line="14" pos:column="56">(<argument><expr><name pos:line="14" pos:column="57">ibuf<pos:position pos:line="14" pos:column="61"/></name></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">readlen<pos:position pos:line="15" pos:column="28"/></name> <operator pos:line="15" pos:column="29">==<pos:position pos:line="15" pos:column="31"/></operator> <operator pos:line="15" pos:column="32">-<pos:position pos:line="15" pos:column="33"/></operator><literal type="number" pos:line="15" pos:column="33">1<pos:position pos:line="15" pos:column="34"/></literal></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="25">die<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><call><name pos:line="16" pos:column="29">_<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><literal type="string" pos:line="16" pos:column="31">"unable to read %s"<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="53">sha1_to_hex<pos:position pos:line="16" pos:column="64"/></name><argument_list pos:line="16" pos:column="64">(<argument><expr><name pos:line="16" pos:column="65">sha1<pos:position pos:line="16" pos:column="69"/></name></expr></argument>)<pos:position pos:line="16" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="72"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name><name pos:line="18" pos:column="17">stream<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">.<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">next_in<pos:position pos:line="18" pos:column="31"/></name></name> <operator pos:line="18" pos:column="32">=<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">ibuf<pos:position pos:line="18" pos:column="38"/></name></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="19" pos:column="17">stream<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">.<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="24">avail_in<pos:position pos:line="19" pos:column="32"/></name></name> <operator pos:line="19" pos:column="33">=<pos:position pos:line="19" pos:column="34"/></operator> <name pos:line="19" pos:column="35">readlen<pos:position pos:line="19" pos:column="42"/></name></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
		<while pos:line="20" pos:column="17">while <condition pos:line="20" pos:column="23">(<expr><operator pos:line="20" pos:column="24">(<pos:position pos:line="20" pos:column="25"/></operator><name><name pos:line="20" pos:column="25">stream<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">.<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">avail_in<pos:position pos:line="20" pos:column="40"/></name></name> <operator pos:line="20" pos:column="41">||<pos:position pos:line="20" pos:column="43"/></operator> <name pos:line="20" pos:column="44">readlen<pos:position pos:line="20" pos:column="51"/></name> <operator pos:line="20" pos:column="52">==<pos:position pos:line="20" pos:column="54"/></operator> <literal type="number" pos:line="20" pos:column="55">0<pos:position pos:line="20" pos:column="56"/></literal><operator pos:line="20" pos:column="56">)<pos:position pos:line="20" pos:column="57"/></operator> <operator pos:line="20" pos:column="58">&amp;&amp;<pos:position pos:line="20" pos:column="68"/></operator>
		       <operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">zret<pos:position pos:line="21" pos:column="29"/></name> <operator pos:line="21" pos:column="30">==<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="33">Z_OK<pos:position pos:line="21" pos:column="37"/></name> <operator pos:line="21" pos:column="38">||<pos:position pos:line="21" pos:column="40"/></operator> <name pos:line="21" pos:column="41">zret<pos:position pos:line="21" pos:column="45"/></name> <operator pos:line="21" pos:column="46">==<pos:position pos:line="21" pos:column="48"/></operator> <name pos:line="21" pos:column="49">Z_BUF_ERROR<pos:position pos:line="21" pos:column="60"/></name><operator pos:line="21" pos:column="60">)<pos:position pos:line="21" pos:column="61"/></operator></expr>)<pos:position pos:line="21" pos:column="62"/></condition> <block pos:line="21" pos:column="63">{
			<expr_stmt><expr><name><name pos:line="22" pos:column="25">stream<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">.<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="32">next_out<pos:position pos:line="22" pos:column="40"/></name></name> <operator pos:line="22" pos:column="41">=<pos:position pos:line="22" pos:column="42"/></operator> <name pos:line="22" pos:column="43">obuf<pos:position pos:line="22" pos:column="47"/></name></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="23" pos:column="25">stream<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">.<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">avail_out<pos:position pos:line="23" pos:column="41"/></name></name> <operator pos:line="23" pos:column="42">=<pos:position pos:line="23" pos:column="43"/></operator> <sizeof pos:line="23" pos:column="44">sizeof<argument_list pos:line="23" pos:column="50">(<argument><expr><name pos:line="23" pos:column="51">obuf<pos:position pos:line="23" pos:column="55"/></name></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></sizeof></expr>;<pos:position pos:line="23" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><name pos:line="24" pos:column="25">zret<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">=<pos:position pos:line="24" pos:column="31"/></operator> <call><name pos:line="24" pos:column="32">git_deflate<pos:position pos:line="24" pos:column="43"/></name><argument_list pos:line="24" pos:column="43">(<argument><expr><operator pos:line="24" pos:column="44">&amp;<pos:position pos:line="24" pos:column="49"/></operator><name pos:line="24" pos:column="45">stream<pos:position pos:line="24" pos:column="51"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="24" pos:column="53">readlen<pos:position pos:line="24" pos:column="60"/></name></expr> ?<pos:position pos:line="24" pos:column="62"/></condition><then pos:line="24" pos:column="62"> <expr><literal type="number" pos:line="24" pos:column="63">0<pos:position pos:line="24" pos:column="64"/></literal></expr> <pos:position pos:line="24" pos:column="65"/></then><else pos:line="24" pos:column="65">: <expr><name pos:line="24" pos:column="67">Z_FINISH<pos:position pos:line="24" pos:column="75"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="24" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="77"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">sha1write<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">f<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">obuf<pos:position pos:line="25" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="44">stream<pos:position pos:line="25" pos:column="50"/></name><operator pos:line="25" pos:column="50">.<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="51">next_out<pos:position pos:line="25" pos:column="59"/></name></name> <operator pos:line="25" pos:column="60">-<pos:position pos:line="25" pos:column="61"/></operator> <name pos:line="25" pos:column="62">obuf<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><name pos:line="26" pos:column="25">olen<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">+=<pos:position pos:line="26" pos:column="32"/></operator> <name><name pos:line="26" pos:column="33">stream<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">.<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="40">next_out<pos:position pos:line="26" pos:column="48"/></name></name> <operator pos:line="26" pos:column="49">-<pos:position pos:line="26" pos:column="50"/></operator> <name pos:line="26" pos:column="51">obuf<pos:position pos:line="26" pos:column="55"/></name></expr>;<pos:position pos:line="26" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="27" pos:column="18"/></block></while>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name><name pos:line="28" pos:column="21">stream<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">.<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="28">avail_in<pos:position pos:line="28" pos:column="36"/></name></name></expr>)<pos:position pos:line="28" pos:column="37"/></condition><then pos:line="28" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">die<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><call><name pos:line="29" pos:column="29">_<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><literal type="string" pos:line="29" pos:column="31">"deflate error (%d)"<pos:position pos:line="29" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="29" pos:column="54">zret<pos:position pos:line="29" pos:column="58"/></name></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="60"/></expr_stmt></block></then></if>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">readlen<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">==<pos:position pos:line="30" pos:column="31"/></operator> <literal type="number" pos:line="30" pos:column="32">0<pos:position pos:line="30" pos:column="33"/></literal></expr>)<pos:position pos:line="30" pos:column="34"/></condition><then pos:line="30" pos:column="34"> <block pos:line="30" pos:column="35">{
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><name pos:line="31" pos:column="29">zret<pos:position pos:line="31" pos:column="33"/></name> <operator pos:line="31" pos:column="34">!=<pos:position pos:line="31" pos:column="36"/></operator> <name pos:line="31" pos:column="37">Z_STREAM_END<pos:position pos:line="31" pos:column="49"/></name></expr>)<pos:position pos:line="31" pos:column="50"/></condition><then pos:line="31" pos:column="50">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="33">die<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">(<argument><expr><call><name pos:line="32" pos:column="37">_<pos:position pos:line="32" pos:column="38"/></name><argument_list pos:line="32" pos:column="38">(<argument><expr><literal type="string" pos:line="32" pos:column="39">"deflate error (%d)"<pos:position pos:line="32" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="32" pos:column="62">zret<pos:position pos:line="32" pos:column="66"/></name></expr></argument>)<pos:position pos:line="32" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="68"/></expr_stmt></block></then></if>
			<break pos:line="33" pos:column="25">break;<pos:position pos:line="33" pos:column="31"/></break>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
	}<pos:position pos:line="35" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">git_deflate_end<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><operator pos:line="36" pos:column="25">&amp;<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="26">stream<pos:position pos:line="36" pos:column="32"/></name></expr></argument>)<pos:position pos:line="36" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt>
	<return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">olen<pos:position pos:line="37" pos:column="20"/></name></expr>;<pos:position pos:line="37" pos:column="21"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
