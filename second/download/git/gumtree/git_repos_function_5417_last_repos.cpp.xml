<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5417_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">copy_notes_for_rebase<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">am_state<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">state<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">notes_rewrite_cfg<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">c<pos:position pos:line="3" pos:column="36"/></name></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">sb<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">STRBUF_INIT<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">invalid_line<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><call><name pos:line="5" pos:column="36">_<pos:position pos:line="5" pos:column="37"/></name><argument_list pos:line="5" pos:column="37">(<argument><expr><literal type="string" pos:line="5" pos:column="38">"Malformed input line: '%s'."<pos:position pos:line="5" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="69"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">msg<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><literal type="string" pos:line="6" pos:column="27">"Notes added by 'git rebase'"<pos:position pos:line="6" pos:column="56"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">FILE<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">fp<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">ret<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name><name pos:line="10" pos:column="16">state<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">-&gt;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="23">rebasing<pos:position pos:line="10" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><name pos:line="12" pos:column="9">c<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name pos:line="12" pos:column="13">init_copy_notes_for_rewrite<pos:position pos:line="12" pos:column="40"/></name><argument_list pos:line="12" pos:column="40">(<argument><expr><literal type="string" pos:line="12" pos:column="41">"rebase"<pos:position pos:line="12" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">c<pos:position pos:line="13" pos:column="15"/></name></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>;<pos:position pos:line="14" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">fp<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">xfopen<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><call><name pos:line="16" pos:column="21">am_path<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">state<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="36">"rewritten"<pos:position pos:line="16" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="50">"r"<pos:position pos:line="16" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>

	<while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><operator pos:line="18" pos:column="16">!<pos:position pos:line="18" pos:column="17"/></operator><call><name pos:line="18" pos:column="17">strbuf_getline_lf<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><operator pos:line="18" pos:column="35">&amp;<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="36">sb<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="40">fp<pos:position pos:line="18" pos:column="42"/></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="44"/></condition> <block pos:line="18" pos:column="45">{
		<decl_stmt><decl><type><name><name pos:line="19" pos:column="17">struct<pos:position pos:line="19" pos:column="23"/></name> <name pos:line="19" pos:column="24">object_id<pos:position pos:line="19" pos:column="33"/></name></name></type> <name pos:line="19" pos:column="34">from_obj<pos:position pos:line="19" pos:column="42"/></name></decl>, <decl><type ref="prev"/><name pos:line="19" pos:column="44">to_obj<pos:position pos:line="19" pos:column="50"/></name></decl>;<pos:position pos:line="19" pos:column="51"/></decl_stmt>

		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name><name pos:line="21" pos:column="21">sb<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">.<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="24">len<pos:position pos:line="21" pos:column="27"/></name></name> <operator pos:line="21" pos:column="28">!=<pos:position pos:line="21" pos:column="30"/></operator> <name pos:line="21" pos:column="31">GIT_SHA1_HEXSZ<pos:position pos:line="21" pos:column="45"/></name> <operator pos:line="21" pos:column="46">*<pos:position pos:line="21" pos:column="47"/></operator> <literal type="number" pos:line="21" pos:column="48">2<pos:position pos:line="21" pos:column="49"/></literal> <operator pos:line="21" pos:column="50">+<pos:position pos:line="21" pos:column="51"/></operator> <literal type="number" pos:line="21" pos:column="52">1<pos:position pos:line="21" pos:column="53"/></literal></expr>)<pos:position pos:line="21" pos:column="54"/></condition><then pos:line="21" pos:column="54"> <block pos:line="21" pos:column="55">{
			<expr_stmt><expr><name pos:line="22" pos:column="25">ret<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">=<pos:position pos:line="22" pos:column="30"/></operator> <call><name pos:line="22" pos:column="31">error<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><name pos:line="22" pos:column="37">invalid_line<pos:position pos:line="22" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="51">sb<pos:position pos:line="22" pos:column="53"/></name><operator pos:line="22" pos:column="53">.<pos:position pos:line="22" pos:column="54"/></operator><name pos:line="22" pos:column="54">buf<pos:position pos:line="22" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="59"/></expr_stmt>
			<goto pos:line="23" pos:column="25">goto <name pos:line="23" pos:column="30">finish<pos:position pos:line="23" pos:column="36"/></name>;<pos:position pos:line="23" pos:column="37"/></goto>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><call><name pos:line="26" pos:column="21">get_oid_hex<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><name><name pos:line="26" pos:column="33">sb<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">.<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="36">buf<pos:position pos:line="26" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="41">&amp;<pos:position pos:line="26" pos:column="46"/></operator><name pos:line="26" pos:column="42">from_obj<pos:position pos:line="26" pos:column="50"/></name></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="52"/></condition><then pos:line="26" pos:column="52"> <block pos:line="26" pos:column="53">{
			<expr_stmt><expr><name pos:line="27" pos:column="25">ret<pos:position pos:line="27" pos:column="28"/></name> <operator pos:line="27" pos:column="29">=<pos:position pos:line="27" pos:column="30"/></operator> <call><name pos:line="27" pos:column="31">error<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><name pos:line="27" pos:column="37">invalid_line<pos:position pos:line="27" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="51">sb<pos:position pos:line="27" pos:column="53"/></name><operator pos:line="27" pos:column="53">.<pos:position pos:line="27" pos:column="54"/></operator><name pos:line="27" pos:column="54">buf<pos:position pos:line="27" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="59"/></expr_stmt>
			<goto pos:line="28" pos:column="25">goto <name pos:line="28" pos:column="30">finish<pos:position pos:line="28" pos:column="36"/></name>;<pos:position pos:line="28" pos:column="37"/></goto>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>

		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name><name pos:line="31" pos:column="21">sb<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">.<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="24">buf<pos:position pos:line="31" pos:column="27"/></name><index pos:line="31" pos:column="27">[<expr><name pos:line="31" pos:column="28">GIT_SHA1_HEXSZ<pos:position pos:line="31" pos:column="42"/></name></expr>]<pos:position pos:line="31" pos:column="43"/></index></name> <operator pos:line="31" pos:column="44">!=<pos:position pos:line="31" pos:column="46"/></operator> <literal type="char" pos:line="31" pos:column="47">' '<pos:position pos:line="31" pos:column="50"/></literal></expr>)<pos:position pos:line="31" pos:column="51"/></condition><then pos:line="31" pos:column="51"> <block pos:line="31" pos:column="52">{
			<expr_stmt><expr><name pos:line="32" pos:column="25">ret<pos:position pos:line="32" pos:column="28"/></name> <operator pos:line="32" pos:column="29">=<pos:position pos:line="32" pos:column="30"/></operator> <call><name pos:line="32" pos:column="31">error<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">(<argument><expr><name pos:line="32" pos:column="37">invalid_line<pos:position pos:line="32" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="51">sb<pos:position pos:line="32" pos:column="53"/></name><operator pos:line="32" pos:column="53">.<pos:position pos:line="32" pos:column="54"/></operator><name pos:line="32" pos:column="54">buf<pos:position pos:line="32" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="59"/></expr_stmt>
			<goto pos:line="33" pos:column="25">goto <name pos:line="33" pos:column="30">finish<pos:position pos:line="33" pos:column="36"/></name>;<pos:position pos:line="33" pos:column="37"/></goto>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>

		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><call><name pos:line="36" pos:column="21">get_oid_hex<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name><name pos:line="36" pos:column="33">sb<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">.<pos:position pos:line="36" pos:column="36"/></operator><name pos:line="36" pos:column="36">buf<pos:position pos:line="36" pos:column="39"/></name></name> <operator pos:line="36" pos:column="40">+<pos:position pos:line="36" pos:column="41"/></operator> <name pos:line="36" pos:column="42">GIT_SHA1_HEXSZ<pos:position pos:line="36" pos:column="56"/></name> <operator pos:line="36" pos:column="57">+<pos:position pos:line="36" pos:column="58"/></operator> <literal type="number" pos:line="36" pos:column="59">1<pos:position pos:line="36" pos:column="60"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="62">&amp;<pos:position pos:line="36" pos:column="67"/></operator><name pos:line="36" pos:column="63">to_obj<pos:position pos:line="36" pos:column="69"/></name></expr></argument>)<pos:position pos:line="36" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="71"/></condition><then pos:line="36" pos:column="71"> <block pos:line="36" pos:column="72">{
			<expr_stmt><expr><name pos:line="37" pos:column="25">ret<pos:position pos:line="37" pos:column="28"/></name> <operator pos:line="37" pos:column="29">=<pos:position pos:line="37" pos:column="30"/></operator> <call><name pos:line="37" pos:column="31">error<pos:position pos:line="37" pos:column="36"/></name><argument_list pos:line="37" pos:column="36">(<argument><expr><name pos:line="37" pos:column="37">invalid_line<pos:position pos:line="37" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="51">sb<pos:position pos:line="37" pos:column="53"/></name><operator pos:line="37" pos:column="53">.<pos:position pos:line="37" pos:column="54"/></operator><name pos:line="37" pos:column="54">buf<pos:position pos:line="37" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="59"/></expr_stmt>
			<goto pos:line="38" pos:column="25">goto <name pos:line="38" pos:column="30">finish<pos:position pos:line="38" pos:column="36"/></name>;<pos:position pos:line="38" pos:column="37"/></goto>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>

		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><call><name pos:line="41" pos:column="21">copy_note_for_rewrite<pos:position pos:line="41" pos:column="42"/></name><argument_list pos:line="41" pos:column="42">(<argument><expr><name pos:line="41" pos:column="43">c<pos:position pos:line="41" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="46">&amp;<pos:position pos:line="41" pos:column="51"/></operator><name pos:line="41" pos:column="47">from_obj<pos:position pos:line="41" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="57">&amp;<pos:position pos:line="41" pos:column="62"/></operator><name pos:line="41" pos:column="58">to_obj<pos:position pos:line="41" pos:column="64"/></name></expr></argument>)<pos:position pos:line="41" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="66"/></condition><then pos:line="41" pos:column="66">
			<block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="25">ret<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">=<pos:position pos:line="42" pos:column="30"/></operator> <call><name pos:line="42" pos:column="31">error<pos:position pos:line="42" pos:column="36"/></name><argument_list pos:line="42" pos:column="36">(<argument><expr><call><name pos:line="42" pos:column="37">_<pos:position pos:line="42" pos:column="38"/></name><argument_list pos:line="42" pos:column="38">(<argument><expr><literal type="string" pos:line="42" pos:column="39">"Failed to copy notes from '%s' to '%s'"<pos:position pos:line="42" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="80"/></argument_list></call></expr></argument>,
					<argument><expr><call><name pos:line="43" pos:column="41">oid_to_hex<pos:position pos:line="43" pos:column="51"/></name><argument_list pos:line="43" pos:column="51">(<argument><expr><operator pos:line="43" pos:column="52">&amp;<pos:position pos:line="43" pos:column="57"/></operator><name pos:line="43" pos:column="53">from_obj<pos:position pos:line="43" pos:column="61"/></name></expr></argument>)<pos:position pos:line="43" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="64">oid_to_hex<pos:position pos:line="43" pos:column="74"/></name><argument_list pos:line="43" pos:column="74">(<argument><expr><operator pos:line="43" pos:column="75">&amp;<pos:position pos:line="43" pos:column="80"/></operator><name pos:line="43" pos:column="76">to_obj<pos:position pos:line="43" pos:column="82"/></name></expr></argument>)<pos:position pos:line="43" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="85"/></expr_stmt></block></then></if>
	}<pos:position pos:line="44" pos:column="10"/></block></while>

<label><name pos:line="46" pos:column="1">finish<pos:position pos:line="46" pos:column="7"/></name>:<pos:position pos:line="46" pos:column="8"/></label>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">finish_copy_notes_for_rewrite<pos:position pos:line="47" pos:column="38"/></name><argument_list pos:line="47" pos:column="38">(<argument><expr><name pos:line="47" pos:column="39">c<pos:position pos:line="47" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="42">msg<pos:position pos:line="47" pos:column="45"/></name></expr></argument>)<pos:position pos:line="47" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">fclose<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><name pos:line="48" pos:column="16">fp<pos:position pos:line="48" pos:column="18"/></name></expr></argument>)<pos:position pos:line="48" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="49" pos:column="9">strbuf_release<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><operator pos:line="49" pos:column="24">&amp;<pos:position pos:line="49" pos:column="29"/></operator><name pos:line="49" pos:column="25">sb<pos:position pos:line="49" pos:column="27"/></name></expr></argument>)<pos:position pos:line="49" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="29"/></expr_stmt>
	<return pos:line="50" pos:column="9">return <expr><name pos:line="50" pos:column="16">ret<pos:position pos:line="50" pos:column="19"/></name></expr>;<pos:position pos:line="50" pos:column="20"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
