<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3434_git-2.13.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">handle_path<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">unsigned<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">sha1<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">rerere_io<pos:position pos:line="1" pos:column="61"/></name></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">io<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">int<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">marker_size<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="83"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">git_SHA_CTX<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">ctx<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">hunk_no<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><literal type="number" pos:line="4" pos:column="23">0<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<enum pos:line="5" pos:column="9">enum <block pos:line="5" pos:column="14">{
		<decl><name pos:line="6" pos:column="17">RR_CONTEXT<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><literal type="number" pos:line="6" pos:column="30">0<pos:position pos:line="6" pos:column="31"/></literal></expr></init></decl>, <decl><name pos:line="6" pos:column="33">RR_SIDE_1<pos:position pos:line="6" pos:column="42"/></name></decl>, <decl><name pos:line="6" pos:column="44">RR_SIDE_2<pos:position pos:line="6" pos:column="53"/></name></decl>, <decl><name pos:line="6" pos:column="55">RR_ORIGINAL<pos:position pos:line="6" pos:column="66"/></name></decl>
	}<pos:position pos:line="7" pos:column="10"/></block> <decl><name pos:line="7" pos:column="11">hunk<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><name pos:line="7" pos:column="18">RR_CONTEXT<pos:position pos:line="7" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></enum>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">strbuf<pos:position pos:line="8" pos:column="22"/></name></name></type> <name pos:line="8" pos:column="23">one<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name pos:line="8" pos:column="29">STRBUF_INIT<pos:position pos:line="8" pos:column="40"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="42">two<pos:position pos:line="8" pos:column="45"/></name> <init pos:line="8" pos:column="46">= <expr><name pos:line="8" pos:column="48">STRBUF_INIT<pos:position pos:line="8" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">strbuf<pos:position pos:line="9" pos:column="22"/></name></name></type> <name pos:line="9" pos:column="23">buf<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><name pos:line="9" pos:column="29">STRBUF_INIT<pos:position pos:line="9" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="41"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">sha1<pos:position pos:line="11" pos:column="17"/></name></expr>)<pos:position pos:line="11" pos:column="18"/></condition><then pos:line="11" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">git_SHA1_Init<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><operator pos:line="12" pos:column="31">&amp;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="32">ctx<pos:position pos:line="12" pos:column="35"/></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt></block></then></if>

	<while pos:line="14" pos:column="9">while <condition pos:line="14" pos:column="15">(<expr><operator pos:line="14" pos:column="16">!<pos:position pos:line="14" pos:column="17"/></operator><call><name><name pos:line="14" pos:column="17">io<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">-&gt;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="21">getline<pos:position pos:line="14" pos:column="28"/></name></name><argument_list pos:line="14" pos:column="28">(<argument><expr><operator pos:line="14" pos:column="29">&amp;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="30">buf<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="35">io<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="39"/></condition> <block pos:line="14" pos:column="40">{
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">is_cmarker<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name><name pos:line="15" pos:column="32">buf<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">.<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="36">buf<pos:position pos:line="15" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="41">'&lt;'<pos:position pos:line="15" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">marker_size<pos:position pos:line="15" pos:column="57"/></name></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="59"/></condition><then pos:line="15" pos:column="59"> <block pos:line="15" pos:column="60">{
			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><name pos:line="16" pos:column="29">hunk<pos:position pos:line="16" pos:column="33"/></name> <operator pos:line="16" pos:column="34">!=<pos:position pos:line="16" pos:column="36"/></operator> <name pos:line="16" pos:column="37">RR_CONTEXT<pos:position pos:line="16" pos:column="47"/></name></expr>)<pos:position pos:line="16" pos:column="48"/></condition><then pos:line="16" pos:column="48">
				<block type="pseudo"><goto pos:line="17" pos:column="33">goto <name pos:line="17" pos:column="38">bad<pos:position pos:line="17" pos:column="41"/></name>;<pos:position pos:line="17" pos:column="42"/></goto></block></then></if>
			<expr_stmt><expr><name pos:line="18" pos:column="25">hunk<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">=<pos:position pos:line="18" pos:column="31"/></operator> <name pos:line="18" pos:column="32">RR_SIDE_1<pos:position pos:line="18" pos:column="41"/></name></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="19" pos:column="18"/></block></then> <elseif pos:line="19" pos:column="19">else <if pos:line="19" pos:column="24">if <condition pos:line="19" pos:column="27">(<expr><call><name pos:line="19" pos:column="28">is_cmarker<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(<argument><expr><name><name pos:line="19" pos:column="39">buf<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">.<pos:position pos:line="19" pos:column="43"/></operator><name pos:line="19" pos:column="43">buf<pos:position pos:line="19" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="48">'|'<pos:position pos:line="19" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="53">marker_size<pos:position pos:line="19" pos:column="64"/></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="66"/></condition><then pos:line="19" pos:column="66"> <block pos:line="19" pos:column="67">{
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><name pos:line="20" pos:column="29">hunk<pos:position pos:line="20" pos:column="33"/></name> <operator pos:line="20" pos:column="34">!=<pos:position pos:line="20" pos:column="36"/></operator> <name pos:line="20" pos:column="37">RR_SIDE_1<pos:position pos:line="20" pos:column="46"/></name></expr>)<pos:position pos:line="20" pos:column="47"/></condition><then pos:line="20" pos:column="47">
				<block type="pseudo"><goto pos:line="21" pos:column="33">goto <name pos:line="21" pos:column="38">bad<pos:position pos:line="21" pos:column="41"/></name>;<pos:position pos:line="21" pos:column="42"/></goto></block></then></if>
			<expr_stmt><expr><name pos:line="22" pos:column="25">hunk<pos:position pos:line="22" pos:column="29"/></name> <operator pos:line="22" pos:column="30">=<pos:position pos:line="22" pos:column="31"/></operator> <name pos:line="22" pos:column="32">RR_ORIGINAL<pos:position pos:line="22" pos:column="43"/></name></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if></elseif> <elseif pos:line="23" pos:column="19">else <if pos:line="23" pos:column="24">if <condition pos:line="23" pos:column="27">(<expr><call><name pos:line="23" pos:column="28">is_cmarker<pos:position pos:line="23" pos:column="38"/></name><argument_list pos:line="23" pos:column="38">(<argument><expr><name><name pos:line="23" pos:column="39">buf<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">.<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="43">buf<pos:position pos:line="23" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="48">'='<pos:position pos:line="23" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="53">marker_size<pos:position pos:line="23" pos:column="64"/></name></expr></argument>)<pos:position pos:line="23" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="66"/></condition><then pos:line="23" pos:column="66"> <block pos:line="23" pos:column="67">{
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name pos:line="24" pos:column="29">hunk<pos:position pos:line="24" pos:column="33"/></name> <operator pos:line="24" pos:column="34">!=<pos:position pos:line="24" pos:column="36"/></operator> <name pos:line="24" pos:column="37">RR_SIDE_1<pos:position pos:line="24" pos:column="46"/></name> <operator pos:line="24" pos:column="47">&amp;&amp;<pos:position pos:line="24" pos:column="57"/></operator> <name pos:line="24" pos:column="50">hunk<pos:position pos:line="24" pos:column="54"/></name> <operator pos:line="24" pos:column="55">!=<pos:position pos:line="24" pos:column="57"/></operator> <name pos:line="24" pos:column="58">RR_ORIGINAL<pos:position pos:line="24" pos:column="69"/></name></expr>)<pos:position pos:line="24" pos:column="70"/></condition><then pos:line="24" pos:column="70">
				<block type="pseudo"><goto pos:line="25" pos:column="33">goto <name pos:line="25" pos:column="38">bad<pos:position pos:line="25" pos:column="41"/></name>;<pos:position pos:line="25" pos:column="42"/></goto></block></then></if>
			<expr_stmt><expr><name pos:line="26" pos:column="25">hunk<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">=<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="32">RR_SIDE_2<pos:position pos:line="26" pos:column="41"/></name></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if></elseif> <elseif pos:line="27" pos:column="19">else <if pos:line="27" pos:column="24">if <condition pos:line="27" pos:column="27">(<expr><call><name pos:line="27" pos:column="28">is_cmarker<pos:position pos:line="27" pos:column="38"/></name><argument_list pos:line="27" pos:column="38">(<argument><expr><name><name pos:line="27" pos:column="39">buf<pos:position pos:line="27" pos:column="42"/></name><operator pos:line="27" pos:column="42">.<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="43">buf<pos:position pos:line="27" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="27" pos:column="48">'&gt;'<pos:position pos:line="27" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="53">marker_size<pos:position pos:line="27" pos:column="64"/></name></expr></argument>)<pos:position pos:line="27" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="66"/></condition><then pos:line="27" pos:column="66"> <block pos:line="27" pos:column="67">{
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><name pos:line="28" pos:column="29">hunk<pos:position pos:line="28" pos:column="33"/></name> <operator pos:line="28" pos:column="34">!=<pos:position pos:line="28" pos:column="36"/></operator> <name pos:line="28" pos:column="37">RR_SIDE_2<pos:position pos:line="28" pos:column="46"/></name></expr>)<pos:position pos:line="28" pos:column="47"/></condition><then pos:line="28" pos:column="47">
				<block type="pseudo"><goto pos:line="29" pos:column="33">goto <name pos:line="29" pos:column="38">bad<pos:position pos:line="29" pos:column="41"/></name>;<pos:position pos:line="29" pos:column="42"/></goto></block></then></if>
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><call><name pos:line="30" pos:column="29">strbuf_cmp<pos:position pos:line="30" pos:column="39"/></name><argument_list pos:line="30" pos:column="39">(<argument><expr><operator pos:line="30" pos:column="40">&amp;<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="41">one<pos:position pos:line="30" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="46">&amp;<pos:position pos:line="30" pos:column="51"/></operator><name pos:line="30" pos:column="47">two<pos:position pos:line="30" pos:column="50"/></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call> <operator pos:line="30" pos:column="52">&gt;<pos:position pos:line="30" pos:column="56"/></operator> <literal type="number" pos:line="30" pos:column="54">0<pos:position pos:line="30" pos:column="55"/></literal></expr>)<pos:position pos:line="30" pos:column="56"/></condition><then pos:line="30" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="33">strbuf_swap<pos:position pos:line="31" pos:column="44"/></name><argument_list pos:line="31" pos:column="44">(<argument><expr><operator pos:line="31" pos:column="45">&amp;<pos:position pos:line="31" pos:column="50"/></operator><name pos:line="31" pos:column="46">one<pos:position pos:line="31" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="51">&amp;<pos:position pos:line="31" pos:column="56"/></operator><name pos:line="31" pos:column="52">two<pos:position pos:line="31" pos:column="55"/></name></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="57"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="32" pos:column="25">hunk_no<pos:position pos:line="32" pos:column="32"/></name><operator pos:line="32" pos:column="32">++<pos:position pos:line="32" pos:column="34"/></operator></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">hunk<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">=<pos:position pos:line="33" pos:column="31"/></operator> <name pos:line="33" pos:column="32">RR_CONTEXT<pos:position pos:line="33" pos:column="42"/></name></expr>;<pos:position pos:line="33" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">rerere_io_putconflict<pos:position pos:line="34" pos:column="46"/></name><argument_list pos:line="34" pos:column="46">(<argument><expr><literal type="char" pos:line="34" pos:column="47">'&lt;'<pos:position pos:line="34" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="52">marker_size<pos:position pos:line="34" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="65">io<pos:position pos:line="34" pos:column="67"/></name></expr></argument>)<pos:position pos:line="34" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">rerere_io_putmem<pos:position pos:line="35" pos:column="41"/></name><argument_list pos:line="35" pos:column="41">(<argument><expr><name><name pos:line="35" pos:column="42">one<pos:position pos:line="35" pos:column="45"/></name><operator pos:line="35" pos:column="45">.<pos:position pos:line="35" pos:column="46"/></operator><name pos:line="35" pos:column="46">buf<pos:position pos:line="35" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="51">one<pos:position pos:line="35" pos:column="54"/></name><operator pos:line="35" pos:column="54">.<pos:position pos:line="35" pos:column="55"/></operator><name pos:line="35" pos:column="55">len<pos:position pos:line="35" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="60">io<pos:position pos:line="35" pos:column="62"/></name></expr></argument>)<pos:position pos:line="35" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">rerere_io_putconflict<pos:position pos:line="36" pos:column="46"/></name><argument_list pos:line="36" pos:column="46">(<argument><expr><literal type="char" pos:line="36" pos:column="47">'='<pos:position pos:line="36" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="52">marker_size<pos:position pos:line="36" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="65">io<pos:position pos:line="36" pos:column="67"/></name></expr></argument>)<pos:position pos:line="36" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">rerere_io_putmem<pos:position pos:line="37" pos:column="41"/></name><argument_list pos:line="37" pos:column="41">(<argument><expr><name><name pos:line="37" pos:column="42">two<pos:position pos:line="37" pos:column="45"/></name><operator pos:line="37" pos:column="45">.<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="46">buf<pos:position pos:line="37" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="51">two<pos:position pos:line="37" pos:column="54"/></name><operator pos:line="37" pos:column="54">.<pos:position pos:line="37" pos:column="55"/></operator><name pos:line="37" pos:column="55">len<pos:position pos:line="37" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="60">io<pos:position pos:line="37" pos:column="62"/></name></expr></argument>)<pos:position pos:line="37" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">rerere_io_putconflict<pos:position pos:line="38" pos:column="46"/></name><argument_list pos:line="38" pos:column="46">(<argument><expr><literal type="char" pos:line="38" pos:column="47">'&gt;'<pos:position pos:line="38" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="52">marker_size<pos:position pos:line="38" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="65">io<pos:position pos:line="38" pos:column="67"/></name></expr></argument>)<pos:position pos:line="38" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="69"/></expr_stmt>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><name pos:line="39" pos:column="29">sha1<pos:position pos:line="39" pos:column="33"/></name></expr>)<pos:position pos:line="39" pos:column="34"/></condition><then pos:line="39" pos:column="34"> <block pos:line="39" pos:column="35">{
				<expr_stmt><expr><call><name pos:line="40" pos:column="33">git_SHA1_Update<pos:position pos:line="40" pos:column="48"/></name><argument_list pos:line="40" pos:column="48">(<argument><expr><operator pos:line="40" pos:column="49">&amp;<pos:position pos:line="40" pos:column="54"/></operator><name pos:line="40" pos:column="50">ctx<pos:position pos:line="40" pos:column="53"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="40" pos:column="55">one<pos:position pos:line="40" pos:column="58"/></name><operator pos:line="40" pos:column="58">.<pos:position pos:line="40" pos:column="59"/></operator><name pos:line="40" pos:column="59">buf<pos:position pos:line="40" pos:column="62"/></name></name></expr> ?<pos:position pos:line="40" pos:column="64"/></condition><then pos:line="40" pos:column="64"> <expr><name><name pos:line="40" pos:column="65">one<pos:position pos:line="40" pos:column="68"/></name><operator pos:line="40" pos:column="68">.<pos:position pos:line="40" pos:column="69"/></operator><name pos:line="40" pos:column="69">buf<pos:position pos:line="40" pos:column="72"/></name></name></expr> <pos:position pos:line="40" pos:column="73"/></then><else pos:line="40" pos:column="73">: <expr><literal type="string" pos:line="40" pos:column="75">""<pos:position pos:line="40" pos:column="77"/></literal></expr></else></ternary></expr></argument>,
					    <argument><expr><name><name pos:line="41" pos:column="45">one<pos:position pos:line="41" pos:column="48"/></name><operator pos:line="41" pos:column="48">.<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="49">len<pos:position pos:line="41" pos:column="52"/></name></name> <operator pos:line="41" pos:column="53">+<pos:position pos:line="41" pos:column="54"/></operator> <literal type="number" pos:line="41" pos:column="55">1<pos:position pos:line="41" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="42" pos:column="33">git_SHA1_Update<pos:position pos:line="42" pos:column="48"/></name><argument_list pos:line="42" pos:column="48">(<argument><expr><operator pos:line="42" pos:column="49">&amp;<pos:position pos:line="42" pos:column="54"/></operator><name pos:line="42" pos:column="50">ctx<pos:position pos:line="42" pos:column="53"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="42" pos:column="55">two<pos:position pos:line="42" pos:column="58"/></name><operator pos:line="42" pos:column="58">.<pos:position pos:line="42" pos:column="59"/></operator><name pos:line="42" pos:column="59">buf<pos:position pos:line="42" pos:column="62"/></name></name></expr> ?<pos:position pos:line="42" pos:column="64"/></condition><then pos:line="42" pos:column="64"> <expr><name><name pos:line="42" pos:column="65">two<pos:position pos:line="42" pos:column="68"/></name><operator pos:line="42" pos:column="68">.<pos:position pos:line="42" pos:column="69"/></operator><name pos:line="42" pos:column="69">buf<pos:position pos:line="42" pos:column="72"/></name></name></expr> <pos:position pos:line="42" pos:column="73"/></then><else pos:line="42" pos:column="73">: <expr><literal type="string" pos:line="42" pos:column="75">""<pos:position pos:line="42" pos:column="77"/></literal></expr></else></ternary></expr></argument>,
					    <argument><expr><name><name pos:line="43" pos:column="45">two<pos:position pos:line="43" pos:column="48"/></name><operator pos:line="43" pos:column="48">.<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="49">len<pos:position pos:line="43" pos:column="52"/></name></name> <operator pos:line="43" pos:column="53">+<pos:position pos:line="43" pos:column="54"/></operator> <literal type="number" pos:line="43" pos:column="55">1<pos:position pos:line="43" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="44" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">strbuf_reset<pos:position pos:line="45" pos:column="37"/></name><argument_list pos:line="45" pos:column="37">(<argument><expr><operator pos:line="45" pos:column="38">&amp;<pos:position pos:line="45" pos:column="43"/></operator><name pos:line="45" pos:column="39">one<pos:position pos:line="45" pos:column="42"/></name></expr></argument>)<pos:position pos:line="45" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">strbuf_reset<pos:position pos:line="46" pos:column="37"/></name><argument_list pos:line="46" pos:column="37">(<argument><expr><operator pos:line="46" pos:column="38">&amp;<pos:position pos:line="46" pos:column="43"/></operator><name pos:line="46" pos:column="39">two<pos:position pos:line="46" pos:column="42"/></name></expr></argument>)<pos:position pos:line="46" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if></elseif> <elseif pos:line="47" pos:column="19">else <if pos:line="47" pos:column="24">if <condition pos:line="47" pos:column="27">(<expr><name pos:line="47" pos:column="28">hunk<pos:position pos:line="47" pos:column="32"/></name> <operator pos:line="47" pos:column="33">==<pos:position pos:line="47" pos:column="35"/></operator> <name pos:line="47" pos:column="36">RR_SIDE_1<pos:position pos:line="47" pos:column="45"/></name></expr>)<pos:position pos:line="47" pos:column="46"/></condition><then pos:line="47" pos:column="46">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="25">strbuf_addbuf<pos:position pos:line="48" pos:column="38"/></name><argument_list pos:line="48" pos:column="38">(<argument><expr><operator pos:line="48" pos:column="39">&amp;<pos:position pos:line="48" pos:column="44"/></operator><name pos:line="48" pos:column="40">one<pos:position pos:line="48" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="45">&amp;<pos:position pos:line="48" pos:column="50"/></operator><name pos:line="48" pos:column="46">buf<pos:position pos:line="48" pos:column="49"/></name></expr></argument>)<pos:position pos:line="48" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="51"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="49" pos:column="17">else <if pos:line="49" pos:column="22">if <condition pos:line="49" pos:column="25">(<expr><name pos:line="49" pos:column="26">hunk<pos:position pos:line="49" pos:column="30"/></name> <operator pos:line="49" pos:column="31">==<pos:position pos:line="49" pos:column="33"/></operator> <name pos:line="49" pos:column="34">RR_ORIGINAL<pos:position pos:line="49" pos:column="45"/></name></expr>)<pos:position pos:line="49" pos:column="46"/></condition><then pos:line="49" pos:column="46">
			<block type="pseudo"><empty_stmt pos:line="50" pos:column="25">;<pos:position pos:line="50" pos:column="26"/></empty_stmt></block></then></if></elseif> <comment type="block" pos:line="50" pos:column="27">/* discard */</comment>
		<elseif pos:line="51" pos:column="17">else <if pos:line="51" pos:column="22">if <condition pos:line="51" pos:column="25">(<expr><name pos:line="51" pos:column="26">hunk<pos:position pos:line="51" pos:column="30"/></name> <operator pos:line="51" pos:column="31">==<pos:position pos:line="51" pos:column="33"/></operator> <name pos:line="51" pos:column="34">RR_SIDE_2<pos:position pos:line="51" pos:column="43"/></name></expr>)<pos:position pos:line="51" pos:column="44"/></condition><then pos:line="51" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="25">strbuf_addbuf<pos:position pos:line="52" pos:column="38"/></name><argument_list pos:line="52" pos:column="38">(<argument><expr><operator pos:line="52" pos:column="39">&amp;<pos:position pos:line="52" pos:column="44"/></operator><name pos:line="52" pos:column="40">two<pos:position pos:line="52" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="45">&amp;<pos:position pos:line="52" pos:column="50"/></operator><name pos:line="52" pos:column="46">buf<pos:position pos:line="52" pos:column="49"/></name></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="51"/></expr_stmt></block></then></if></elseif>
		<else pos:line="53" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="25">rerere_io_putstr<pos:position pos:line="54" pos:column="41"/></name><argument_list pos:line="54" pos:column="41">(<argument><expr><name><name pos:line="54" pos:column="42">buf<pos:position pos:line="54" pos:column="45"/></name><operator pos:line="54" pos:column="45">.<pos:position pos:line="54" pos:column="46"/></operator><name pos:line="54" pos:column="46">buf<pos:position pos:line="54" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="51">io<pos:position pos:line="54" pos:column="53"/></name></expr></argument>)<pos:position pos:line="54" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="55"/></expr_stmt></block></else></if>
		<continue pos:line="55" pos:column="17">continue;<pos:position pos:line="55" pos:column="26"/></continue>
	<label><name pos:line="56" pos:column="9">bad<pos:position pos:line="56" pos:column="12"/></name>:<pos:position pos:line="56" pos:column="13"/></label>
		<expr_stmt><expr><name pos:line="57" pos:column="17">hunk<pos:position pos:line="57" pos:column="21"/></name> <operator pos:line="57" pos:column="22">=<pos:position pos:line="57" pos:column="23"/></operator> <literal type="number" pos:line="57" pos:column="24">99<pos:position pos:line="57" pos:column="26"/></literal></expr>;<pos:position pos:line="57" pos:column="27"/></expr_stmt> <comment type="block" pos:line="57" pos:column="28">/* force error exit */</comment>
		<break pos:line="58" pos:column="17">break;<pos:position pos:line="58" pos:column="23"/></break>
	}<pos:position pos:line="59" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">strbuf_release<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">(<argument><expr><operator pos:line="60" pos:column="24">&amp;<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="25">one<pos:position pos:line="60" pos:column="28"/></name></expr></argument>)<pos:position pos:line="60" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">strbuf_release<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><operator pos:line="61" pos:column="24">&amp;<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="25">two<pos:position pos:line="61" pos:column="28"/></name></expr></argument>)<pos:position pos:line="61" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">strbuf_release<pos:position pos:line="62" pos:column="23"/></name><argument_list pos:line="62" pos:column="23">(<argument><expr><operator pos:line="62" pos:column="24">&amp;<pos:position pos:line="62" pos:column="29"/></operator><name pos:line="62" pos:column="25">buf<pos:position pos:line="62" pos:column="28"/></name></expr></argument>)<pos:position pos:line="62" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="30"/></expr_stmt>

	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name pos:line="64" pos:column="13">sha1<pos:position pos:line="64" pos:column="17"/></name></expr>)<pos:position pos:line="64" pos:column="18"/></condition><then pos:line="64" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="17">git_SHA1_Final<pos:position pos:line="65" pos:column="31"/></name><argument_list pos:line="65" pos:column="31">(<argument><expr><name pos:line="65" pos:column="32">sha1<pos:position pos:line="65" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="38">&amp;<pos:position pos:line="65" pos:column="43"/></operator><name pos:line="65" pos:column="39">ctx<pos:position pos:line="65" pos:column="42"/></name></expr></argument>)<pos:position pos:line="65" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="44"/></expr_stmt></block></then></if>
	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name pos:line="66" pos:column="13">hunk<pos:position pos:line="66" pos:column="17"/></name> <operator pos:line="66" pos:column="18">!=<pos:position pos:line="66" pos:column="20"/></operator> <name pos:line="66" pos:column="21">RR_CONTEXT<pos:position pos:line="66" pos:column="31"/></name></expr>)<pos:position pos:line="66" pos:column="32"/></condition><then pos:line="66" pos:column="32">
		<block type="pseudo"><return pos:line="67" pos:column="17">return <expr><operator pos:line="67" pos:column="24">-<pos:position pos:line="67" pos:column="25"/></operator><literal type="number" pos:line="67" pos:column="25">1<pos:position pos:line="67" pos:column="26"/></literal></expr>;<pos:position pos:line="67" pos:column="27"/></return></block></then></if>
	<return pos:line="68" pos:column="9">return <expr><name pos:line="68" pos:column="16">hunk_no<pos:position pos:line="68" pos:column="23"/></name></expr>;<pos:position pos:line="68" pos:column="24"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
