<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4270_git-2.13.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">remote<pos:position pos:line="1" pos:column="21"/></name></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">make_remote<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">name<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">len<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">remote<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">ret<pos:position pos:line="3" pos:column="27"/></name></decl>, <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="30">replaced<pos:position pos:line="3" pos:column="38"/></name></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">remotes_hash_key<pos:position pos:line="4" pos:column="32"/></name></name></type> <name pos:line="4" pos:column="33">lookup<pos:position pos:line="4" pos:column="39"/></name></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">hashmap_entry<pos:position pos:line="5" pos:column="29"/></name></name></type> <name pos:line="5" pos:column="30">lookup_entry<pos:position pos:line="5" pos:column="42"/></name></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">len<pos:position pos:line="7" pos:column="17"/></name></expr>)<pos:position pos:line="7" pos:column="18"/></condition><then pos:line="7" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="17">len<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">=<pos:position pos:line="8" pos:column="22"/></operator> <call><name pos:line="8" pos:column="23">strlen<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name pos:line="8" pos:column="30">name<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">init_remotes_hash<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">()<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="11" pos:column="9">lookup<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">str<pos:position pos:line="11" pos:column="19"/></name></name> <operator pos:line="11" pos:column="20">=<pos:position pos:line="11" pos:column="21"/></operator> <name pos:line="11" pos:column="22">name<pos:position pos:line="11" pos:column="26"/></name></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">lookup<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">len<pos:position pos:line="12" pos:column="19"/></name></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">len<pos:position pos:line="12" pos:column="25"/></name></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">hashmap_entry_init<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><operator pos:line="13" pos:column="28">&amp;<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="29">lookup_entry<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="43">memhash<pos:position pos:line="13" pos:column="50"/></name><argument_list pos:line="13" pos:column="50">(<argument><expr><name pos:line="13" pos:column="51">name<pos:position pos:line="13" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="57">len<pos:position pos:line="13" pos:column="60"/></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="63"/></expr_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">(<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">ret<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">=<pos:position pos:line="15" pos:column="19"/></operator> <call><name pos:line="15" pos:column="20">hashmap_get<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><operator pos:line="15" pos:column="32">&amp;<pos:position pos:line="15" pos:column="37"/></operator><name pos:line="15" pos:column="33">remotes_hash<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="47">&amp;<pos:position pos:line="15" pos:column="52"/></operator><name pos:line="15" pos:column="48">lookup_entry<pos:position pos:line="15" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="62">&amp;<pos:position pos:line="15" pos:column="67"/></operator><name pos:line="15" pos:column="63">lookup<pos:position pos:line="15" pos:column="69"/></name></expr></argument>)<pos:position pos:line="15" pos:column="70"/></argument_list></call><operator pos:line="15" pos:column="70">)<pos:position pos:line="15" pos:column="71"/></operator> <operator pos:line="15" pos:column="72">!=<pos:position pos:line="15" pos:column="74"/></operator> <name pos:line="15" pos:column="75">NULL<pos:position pos:line="15" pos:column="79"/></name></expr>)<pos:position pos:line="15" pos:column="80"/></condition><then pos:line="15" pos:column="80">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">ret<pos:position pos:line="16" pos:column="27"/></name></expr>;<pos:position pos:line="16" pos:column="28"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="18" pos:column="9">ret<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <call><name pos:line="18" pos:column="15">xcalloc<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><literal type="number" pos:line="18" pos:column="23">1<pos:position pos:line="18" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="26">sizeof<argument_list pos:line="18" pos:column="32">(<argument><expr pos:line="18" pos:column="33">struct <name pos:line="18" pos:column="40">remote<pos:position pos:line="18" pos:column="46"/></name></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">ret<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">prune<pos:position pos:line="19" pos:column="19"/></name></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <operator pos:line="19" pos:column="22">-<pos:position pos:line="19" pos:column="23"/></operator><literal type="number" pos:line="19" pos:column="23">1<pos:position pos:line="19" pos:column="24"/></literal></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>  <comment type="block" pos:line="19" pos:column="27">/* unspecified */</comment>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">ALLOC_GROW<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">remotes<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="29">remotes_nr<pos:position pos:line="20" pos:column="39"/></name> <operator pos:line="20" pos:column="40">+<pos:position pos:line="20" pos:column="41"/></operator> <literal type="number" pos:line="20" pos:column="42">1<pos:position pos:line="20" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="45">remotes_alloc<pos:position pos:line="20" pos:column="58"/></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">remotes<pos:position pos:line="21" pos:column="16"/></name><index pos:line="21" pos:column="16">[<expr><name pos:line="21" pos:column="17">remotes_nr<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">++<pos:position pos:line="21" pos:column="29"/></operator></expr>]<pos:position pos:line="21" pos:column="30"/></index></name> <operator pos:line="21" pos:column="31">=<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="33">ret<pos:position pos:line="21" pos:column="36"/></name></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">ret<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">name<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <call><name pos:line="22" pos:column="21">xstrndup<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">name<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="36">len<pos:position pos:line="22" pos:column="39"/></name></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">hashmap_entry_init<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">(<argument><expr><name pos:line="24" pos:column="28">ret<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="33">lookup_entry<pos:position pos:line="24" pos:column="45"/></name><operator pos:line="24" pos:column="45">.<pos:position pos:line="24" pos:column="46"/></operator><name pos:line="24" pos:column="46">hash<pos:position pos:line="24" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">replaced<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <call><name pos:line="25" pos:column="20">hashmap_put<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><operator pos:line="25" pos:column="32">&amp;<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="33">remotes_hash<pos:position pos:line="25" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="47">ret<pos:position pos:line="25" pos:column="50"/></name></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">assert<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">replaced<pos:position pos:line="26" pos:column="24"/></name> <operator pos:line="26" pos:column="25">==<pos:position pos:line="26" pos:column="27"/></operator> <name pos:line="26" pos:column="28">NULL<pos:position pos:line="26" pos:column="32"/></name></expr></argument>)<pos:position pos:line="26" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>  <comment type="block" pos:line="26" pos:column="36">/* no previous entry overwritten */</comment>
	<return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">ret<pos:position pos:line="27" pos:column="19"/></name></expr>;<pos:position pos:line="27" pos:column="20"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
