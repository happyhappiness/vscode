<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5015_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">get_merge_heads<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">oid_array<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">merge_heads<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">filename<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><call><name pos:line="3" pos:column="32">git_path_fetch_head<pos:position pos:line="3" pos:column="51"/></name><argument_list pos:line="3" pos:column="51">()<pos:position pos:line="3" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">FILE<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">fp<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">sb<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">STRBUF_INIT<pos:position pos:line="5" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">object_id<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">oid<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">fp<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">xfopen<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">filename<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="31">"r"<pos:position pos:line="8" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>
	<while pos:line="9" pos:column="9">while <condition pos:line="9" pos:column="15">(<expr><call><name pos:line="9" pos:column="16">strbuf_getline_lf<pos:position pos:line="9" pos:column="33"/></name><argument_list pos:line="9" pos:column="33">(<argument><expr><operator pos:line="9" pos:column="34">&amp;<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="35">sb<pos:position pos:line="9" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="39">fp<pos:position pos:line="9" pos:column="41"/></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call> <operator pos:line="9" pos:column="43">!=<pos:position pos:line="9" pos:column="45"/></operator> <name pos:line="9" pos:column="46">EOF<pos:position pos:line="9" pos:column="49"/></name></expr>)<pos:position pos:line="9" pos:column="50"/></condition> <block pos:line="9" pos:column="51">{
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">get_oid_hex<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name><name pos:line="10" pos:column="33">sb<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">.<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="36">buf<pos:position pos:line="10" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="41">&amp;<pos:position pos:line="10" pos:column="46"/></operator><name pos:line="10" pos:column="42">oid<pos:position pos:line="10" pos:column="45"/></name></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="47"/></condition><then pos:line="10" pos:column="47">
			<block type="pseudo"><continue pos:line="11" pos:column="25">continue;<pos:position pos:line="11" pos:column="34"/></continue></block></then></if>  <comment type="block" pos:line="11" pos:column="36">/* invalid line: does not start with SHA1 */</comment>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">starts_with<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name><name pos:line="12" pos:column="33">sb<pos:position pos:line="12" pos:column="35"/></name><operator pos:line="12" pos:column="35">.<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="36">buf<pos:position pos:line="12" pos:column="39"/></name></name> <operator pos:line="12" pos:column="40">+<pos:position pos:line="12" pos:column="41"/></operator> <name pos:line="12" pos:column="42">GIT_SHA1_HEXSZ<pos:position pos:line="12" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="58">"\tnot-for-merge\t"<pos:position pos:line="12" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="79"/></condition><then pos:line="12" pos:column="79">
			<block type="pseudo"><continue pos:line="13" pos:column="25">continue;<pos:position pos:line="13" pos:column="34"/></continue></block></then></if>  <comment type="block" pos:line="13" pos:column="36">/* ref is not-for-merge */</comment>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">oid_array_append<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">merge_heads<pos:position pos:line="14" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="47">&amp;<pos:position pos:line="14" pos:column="52"/></operator><name pos:line="14" pos:column="48">oid<pos:position pos:line="14" pos:column="51"/></name></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">fclose<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">fp<pos:position pos:line="16" pos:column="18"/></name></expr></argument>)<pos:position pos:line="16" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">strbuf_release<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><operator pos:line="17" pos:column="24">&amp;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="25">sb<pos:position pos:line="17" pos:column="27"/></name></expr></argument>)<pos:position pos:line="17" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
