<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3611_git-2.8.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">compile_regexp<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">grep_pat<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">p<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">grep_opt<pos:position pos:line="1" pos:column="63"/></name></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">opt<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">err<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="5" pos:column="9">p<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">-&gt;<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="12">word_regexp<pos:position pos:line="5" pos:column="23"/></name></name> <operator pos:line="5" pos:column="24">=<pos:position pos:line="5" pos:column="25"/></operator> <name><name pos:line="5" pos:column="26">opt<pos:position pos:line="5" pos:column="29"/></name><operator pos:line="5" pos:column="29">-&gt;<pos:position pos:line="5" pos:column="34"/></operator><name pos:line="5" pos:column="31">word_regexp<pos:position pos:line="5" pos:column="42"/></name></name></expr>;<pos:position pos:line="5" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="6" pos:column="9">p<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">-&gt;<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="12">ignore_case<pos:position pos:line="6" pos:column="23"/></name></name> <operator pos:line="6" pos:column="24">=<pos:position pos:line="6" pos:column="25"/></operator> <name><name pos:line="6" pos:column="26">opt<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">-&gt;<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="31">ignore_case<pos:position pos:line="6" pos:column="42"/></name></name></expr>;<pos:position pos:line="6" pos:column="43"/></expr_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">opt<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">-&gt;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="18">fixed<pos:position pos:line="8" pos:column="23"/></name></name> <operator pos:line="8" pos:column="24">||<pos:position pos:line="8" pos:column="26"/></operator> <call><name pos:line="8" pos:column="27">is_fixed<pos:position pos:line="8" pos:column="35"/></name><argument_list pos:line="8" pos:column="35">(<argument><expr><name><name pos:line="8" pos:column="36">p<pos:position pos:line="8" pos:column="37"/></name><operator pos:line="8" pos:column="37">-&gt;<pos:position pos:line="8" pos:column="42"/></operator><name pos:line="8" pos:column="39">pattern<pos:position pos:line="8" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="48">p<pos:position pos:line="8" pos:column="49"/></name><operator pos:line="8" pos:column="49">-&gt;<pos:position pos:line="8" pos:column="54"/></operator><name pos:line="8" pos:column="51">patternlen<pos:position pos:line="8" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="63"/></condition><then pos:line="8" pos:column="63">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="9" pos:column="17">p<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">-&gt;<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="20">fixed<pos:position pos:line="9" pos:column="25"/></name></name> <operator pos:line="9" pos:column="26">=<pos:position pos:line="9" pos:column="27"/></operator> <literal type="number" pos:line="9" pos:column="28">1<pos:position pos:line="9" pos:column="29"/></literal></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt></block></then>
	<else pos:line="10" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="11" pos:column="17">p<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">-&gt;<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="20">fixed<pos:position pos:line="11" pos:column="25"/></name></name> <operator pos:line="11" pos:column="26">=<pos:position pos:line="11" pos:column="27"/></operator> <literal type="number" pos:line="11" pos:column="28">0<pos:position pos:line="11" pos:column="29"/></literal></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt></block></else></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name><name pos:line="13" pos:column="13">p<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">fixed<pos:position pos:line="13" pos:column="21"/></name></name></expr>)<pos:position pos:line="13" pos:column="22"/></condition><then pos:line="13" pos:column="22"> <block pos:line="13" pos:column="23">{
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name><name pos:line="14" pos:column="21">opt<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">-&gt;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="26">regflags<pos:position pos:line="14" pos:column="34"/></name></name> <operator pos:line="14" pos:column="35">&amp;<pos:position pos:line="14" pos:column="40"/></operator> <name pos:line="14" pos:column="37">REG_ICASE<pos:position pos:line="14" pos:column="46"/></name> <operator pos:line="14" pos:column="47">||<pos:position pos:line="14" pos:column="49"/></operator> <name><name pos:line="14" pos:column="50">p<pos:position pos:line="14" pos:column="51"/></name><operator pos:line="14" pos:column="51">-&gt;<pos:position pos:line="14" pos:column="56"/></operator><name pos:line="14" pos:column="53">ignore_case<pos:position pos:line="14" pos:column="64"/></name></name></expr>)<pos:position pos:line="14" pos:column="65"/></condition><then pos:line="14" pos:column="65">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="25">p<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">-&gt;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="28">kws<pos:position pos:line="15" pos:column="31"/></name></name> <operator pos:line="15" pos:column="32">=<pos:position pos:line="15" pos:column="33"/></operator> <call><name pos:line="15" pos:column="34">kwsalloc<pos:position pos:line="15" pos:column="42"/></name><argument_list pos:line="15" pos:column="42">(<argument><expr><name pos:line="15" pos:column="43">tolower_trans_tbl<pos:position pos:line="15" pos:column="60"/></name></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt></block></then>
		<else pos:line="16" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="17" pos:column="25">p<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">-&gt;<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="28">kws<pos:position pos:line="17" pos:column="31"/></name></name> <operator pos:line="17" pos:column="32">=<pos:position pos:line="17" pos:column="33"/></operator> <call><name pos:line="17" pos:column="34">kwsalloc<pos:position pos:line="17" pos:column="42"/></name><argument_list pos:line="17" pos:column="42">(<argument><expr><name pos:line="17" pos:column="43">NULL<pos:position pos:line="17" pos:column="47"/></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">kwsincr<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name><name pos:line="18" pos:column="25">p<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">-&gt;<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="28">kws<pos:position pos:line="18" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="33">p<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">-&gt;<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="36">pattern<pos:position pos:line="18" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="45">p<pos:position pos:line="18" pos:column="46"/></name><operator pos:line="18" pos:column="46">-&gt;<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="48">patternlen<pos:position pos:line="18" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">kwsprep<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name><name pos:line="19" pos:column="25">p<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">-&gt;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="28">kws<pos:position pos:line="19" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
		<return pos:line="20" pos:column="17">return;<pos:position pos:line="20" pos:column="24"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name><name pos:line="23" pos:column="13">opt<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">pcre<pos:position pos:line="23" pos:column="22"/></name></name></expr>)<pos:position pos:line="23" pos:column="23"/></condition><then pos:line="23" pos:column="23"> <block pos:line="23" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">compile_pcre_regexp<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">(<argument><expr><name pos:line="24" pos:column="37">p<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="40">opt<pos:position pos:line="24" pos:column="43"/></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
		<return pos:line="25" pos:column="17">return;<pos:position pos:line="25" pos:column="24"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="28" pos:column="9">err<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <call><name pos:line="28" pos:column="15">regcomp<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><operator pos:line="28" pos:column="23">&amp;<pos:position pos:line="28" pos:column="28"/></operator><name><name pos:line="28" pos:column="24">p<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">-&gt;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="27">regexp<pos:position pos:line="28" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="35">p<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">-&gt;<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="38">pattern<pos:position pos:line="28" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="47">opt<pos:position pos:line="28" pos:column="50"/></name><operator pos:line="28" pos:column="50">-&gt;<pos:position pos:line="28" pos:column="55"/></operator><name pos:line="28" pos:column="52">regflags<pos:position pos:line="28" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="62"/></expr_stmt>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">err<pos:position pos:line="29" pos:column="16"/></name></expr>)<pos:position pos:line="29" pos:column="17"/></condition><then pos:line="29" pos:column="17"> <block pos:line="29" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="30" pos:column="17">char<pos:position pos:line="30" pos:column="21"/></name></type> <name><name pos:line="30" pos:column="22">errbuf<pos:position pos:line="30" pos:column="28"/></name><index pos:line="30" pos:column="28">[<expr><literal type="number" pos:line="30" pos:column="29">1024<pos:position pos:line="30" pos:column="33"/></literal></expr>]<pos:position pos:line="30" pos:column="34"/></index></name></decl>;<pos:position pos:line="30" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">regerror<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">err<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="31">&amp;<pos:position pos:line="31" pos:column="36"/></operator><name><name pos:line="31" pos:column="32">p<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">-&gt;<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="35">regexp<pos:position pos:line="31" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="43">errbuf<pos:position pos:line="31" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="51">1024<pos:position pos:line="31" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">regfree<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">(<argument><expr><operator pos:line="32" pos:column="25">&amp;<pos:position pos:line="32" pos:column="30"/></operator><name><name pos:line="32" pos:column="26">p<pos:position pos:line="32" pos:column="27"/></name><operator pos:line="32" pos:column="27">-&gt;<pos:position pos:line="32" pos:column="32"/></operator><name pos:line="32" pos:column="29">regexp<pos:position pos:line="32" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">compile_regexp_failed<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name pos:line="33" pos:column="39">p<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="42">errbuf<pos:position pos:line="33" pos:column="48"/></name></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
