<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1547_git-2.5.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fsck_walk_tree<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">tree<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">tree<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">fsck_walk_func<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">walk<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">void<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">data<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">tree_desc<pos:position pos:line="3" pos:column="25"/></name></name></type> <name pos:line="3" pos:column="26">desc<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">name_entry<pos:position pos:line="4" pos:column="26"/></name></name></type> <name pos:line="4" pos:column="27">entry<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">res<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name pos:line="7" pos:column="13">parse_tree<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><name pos:line="7" pos:column="24">tree<pos:position pos:line="7" pos:column="28"/></name></expr></argument>)<pos:position pos:line="7" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="30"/></condition><then pos:line="7" pos:column="30">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><operator pos:line="8" pos:column="24">-<pos:position pos:line="8" pos:column="25"/></operator><literal type="number" pos:line="8" pos:column="25">1<pos:position pos:line="8" pos:column="26"/></literal></expr>;<pos:position pos:line="8" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">init_tree_desc<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><operator pos:line="10" pos:column="24">&amp;<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="25">desc<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="31">tree<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">-&gt;<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="37">buffer<pos:position pos:line="10" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="45">tree<pos:position pos:line="10" pos:column="49"/></name><operator pos:line="10" pos:column="49">-&gt;<pos:position pos:line="10" pos:column="54"/></operator><name pos:line="10" pos:column="51">size<pos:position pos:line="10" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="57"/></expr_stmt>
	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><call><name pos:line="11" pos:column="16">tree_entry<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><operator pos:line="11" pos:column="27">&amp;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="28">desc<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="34">&amp;<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="35">entry<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="42"/></condition> <block pos:line="11" pos:column="43">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">int<pos:position pos:line="12" pos:column="20"/></name></type> <name pos:line="12" pos:column="21">result<pos:position pos:line="12" pos:column="27"/></name></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>

		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><call><name pos:line="14" pos:column="21">S_ISGITLINK<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name><name pos:line="14" pos:column="33">entry<pos:position pos:line="14" pos:column="38"/></name><operator pos:line="14" pos:column="38">.<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="39">mode<pos:position pos:line="14" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="45"/></condition><then pos:line="14" pos:column="45">
			<block type="pseudo"><continue pos:line="15" pos:column="25">continue;<pos:position pos:line="15" pos:column="34"/></continue></block></then></if>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">S_ISDIR<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name><name pos:line="16" pos:column="29">entry<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">.<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="35">mode<pos:position pos:line="16" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="41"/></condition><then pos:line="16" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="25">result<pos:position pos:line="17" pos:column="31"/></name> <operator pos:line="17" pos:column="32">=<pos:position pos:line="17" pos:column="33"/></operator> <call><name pos:line="17" pos:column="34">walk<pos:position pos:line="17" pos:column="38"/></name><argument_list pos:line="17" pos:column="38">(<argument><expr><operator pos:line="17" pos:column="39">&amp;<pos:position pos:line="17" pos:column="44"/></operator><call><name pos:line="17" pos:column="40">lookup_tree<pos:position pos:line="17" pos:column="51"/></name><argument_list pos:line="17" pos:column="51">(<argument><expr><name><name pos:line="17" pos:column="52">entry<pos:position pos:line="17" pos:column="57"/></name><operator pos:line="17" pos:column="57">.<pos:position pos:line="17" pos:column="58"/></operator><name pos:line="17" pos:column="58">sha1<pos:position pos:line="17" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="63"/></argument_list></call><operator pos:line="17" pos:column="63">-&gt;<pos:position pos:line="17" pos:column="68"/></operator><name pos:line="17" pos:column="65">object<pos:position pos:line="17" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="73">OBJ_TREE<pos:position pos:line="17" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="83">data<pos:position pos:line="17" pos:column="87"/></name></expr></argument>)<pos:position pos:line="17" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="89"/></expr_stmt></block></then>
		<elseif pos:line="18" pos:column="17">else <if pos:line="18" pos:column="22">if <condition pos:line="18" pos:column="25">(<expr><call><name pos:line="18" pos:column="26">S_ISREG<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name><name pos:line="18" pos:column="34">entry<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">.<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="40">mode<pos:position pos:line="18" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call> <operator pos:line="18" pos:column="46">||<pos:position pos:line="18" pos:column="48"/></operator> <call><name pos:line="18" pos:column="49">S_ISLNK<pos:position pos:line="18" pos:column="56"/></name><argument_list pos:line="18" pos:column="56">(<argument><expr><name><name pos:line="18" pos:column="57">entry<pos:position pos:line="18" pos:column="62"/></name><operator pos:line="18" pos:column="62">.<pos:position pos:line="18" pos:column="63"/></operator><name pos:line="18" pos:column="63">mode<pos:position pos:line="18" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="69"/></condition><then pos:line="18" pos:column="69">
			<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="25">result<pos:position pos:line="19" pos:column="31"/></name> <operator pos:line="19" pos:column="32">=<pos:position pos:line="19" pos:column="33"/></operator> <call><name pos:line="19" pos:column="34">walk<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(<argument><expr><operator pos:line="19" pos:column="39">&amp;<pos:position pos:line="19" pos:column="44"/></operator><call><name pos:line="19" pos:column="40">lookup_blob<pos:position pos:line="19" pos:column="51"/></name><argument_list pos:line="19" pos:column="51">(<argument><expr><name><name pos:line="19" pos:column="52">entry<pos:position pos:line="19" pos:column="57"/></name><operator pos:line="19" pos:column="57">.<pos:position pos:line="19" pos:column="58"/></operator><name pos:line="19" pos:column="58">sha1<pos:position pos:line="19" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></call><operator pos:line="19" pos:column="63">-&gt;<pos:position pos:line="19" pos:column="68"/></operator><name pos:line="19" pos:column="65">object<pos:position pos:line="19" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="73">OBJ_BLOB<pos:position pos:line="19" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="83">data<pos:position pos:line="19" pos:column="87"/></name></expr></argument>)<pos:position pos:line="19" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="89"/></expr_stmt></block></then></if></elseif>
		<else pos:line="20" pos:column="17">else <block pos:line="20" pos:column="22">{
			<expr_stmt><expr><name pos:line="21" pos:column="25">result<pos:position pos:line="21" pos:column="31"/></name> <operator pos:line="21" pos:column="32">=<pos:position pos:line="21" pos:column="33"/></operator> <call><name pos:line="21" pos:column="34">error<pos:position pos:line="21" pos:column="39"/></name><argument_list pos:line="21" pos:column="39">(<argument><expr><literal type="string" pos:line="21" pos:column="40">"in tree %s: entry %s has bad mode %.6o"<pos:position pos:line="21" pos:column="80"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="22" pos:column="41">sha1_to_hex<pos:position pos:line="22" pos:column="52"/></name><argument_list pos:line="22" pos:column="52">(<argument><expr><name><name pos:line="22" pos:column="53">tree<pos:position pos:line="22" pos:column="57"/></name><operator pos:line="22" pos:column="57">-&gt;<pos:position pos:line="22" pos:column="62"/></operator><name pos:line="22" pos:column="59">object<pos:position pos:line="22" pos:column="65"/></name><operator pos:line="22" pos:column="65">.<pos:position pos:line="22" pos:column="66"/></operator><name pos:line="22" pos:column="66">sha1<pos:position pos:line="22" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="73">entry<pos:position pos:line="22" pos:column="78"/></name><operator pos:line="22" pos:column="78">.<pos:position pos:line="22" pos:column="79"/></operator><name pos:line="22" pos:column="79">path<pos:position pos:line="22" pos:column="83"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="85">entry<pos:position pos:line="22" pos:column="90"/></name><operator pos:line="22" pos:column="90">.<pos:position pos:line="22" pos:column="91"/></operator><name pos:line="22" pos:column="91">mode<pos:position pos:line="22" pos:column="95"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="97"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></else></if>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">result<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">&lt;<pos:position pos:line="24" pos:column="32"/></operator> <literal type="number" pos:line="24" pos:column="30">0<pos:position pos:line="24" pos:column="31"/></literal></expr>)<pos:position pos:line="24" pos:column="32"/></condition><then pos:line="24" pos:column="32">
			<block type="pseudo"><return pos:line="25" pos:column="25">return <expr><name pos:line="25" pos:column="32">result<pos:position pos:line="25" pos:column="38"/></name></expr>;<pos:position pos:line="25" pos:column="39"/></return></block></then></if>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><operator pos:line="26" pos:column="21">!<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="22">res<pos:position pos:line="26" pos:column="25"/></name></expr>)<pos:position pos:line="26" pos:column="26"/></condition><then pos:line="26" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="25">res<pos:position pos:line="27" pos:column="28"/></name> <operator pos:line="27" pos:column="29">=<pos:position pos:line="27" pos:column="30"/></operator> <name pos:line="27" pos:column="31">result<pos:position pos:line="27" pos:column="37"/></name></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt></block></then></if>
	}<pos:position pos:line="28" pos:column="10"/></block></while>
	<return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">res<pos:position pos:line="29" pos:column="19"/></name></expr>;<pos:position pos:line="29" pos:column="20"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
