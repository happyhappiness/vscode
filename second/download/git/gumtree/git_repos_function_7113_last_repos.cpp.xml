<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7113_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">match_part_with_last<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">LPCWSTR<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">ptarget<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">LPCWSTR<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">want<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">LPCWSTR<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">delim<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="80">int<pos:position pos:line="1" pos:column="83"/></name></type> <name pos:line="1" pos:column="84">last<pos:position pos:line="1" pos:column="88"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="89"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">LPCWSTR<pos:position pos:line="3" pos:column="16"/></name></type> <name pos:line="3" pos:column="17">delim_pos<pos:position pos:line="3" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="28">start<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><operator pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="37">ptarget<pos:position pos:line="3" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">len<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* find start of delimiter (or end-of-string if delim is empty) */</comment>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">*<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">delim<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="17">delim_pos<pos:position pos:line="8" pos:column="26"/></name> <operator pos:line="8" pos:column="27">=<pos:position pos:line="8" pos:column="28"/></operator> <ternary><condition><expr><name pos:line="8" pos:column="29">last<pos:position pos:line="8" pos:column="33"/></name></expr> ?<pos:position pos:line="8" pos:column="35"/></condition><then pos:line="8" pos:column="35"> <expr><call><name pos:line="8" pos:column="36">wcsstr_last<pos:position pos:line="8" pos:column="47"/></name><argument_list pos:line="8" pos:column="47">(<argument><expr><name pos:line="8" pos:column="48">start<pos:position pos:line="8" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="55">delim<pos:position pos:line="8" pos:column="60"/></name></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call></expr> <pos:position pos:line="8" pos:column="62"/></then><else pos:line="8" pos:column="62">: <expr><call><name pos:line="8" pos:column="64">wcsstr<pos:position pos:line="8" pos:column="70"/></name><argument_list pos:line="8" pos:column="70">(<argument><expr><name pos:line="8" pos:column="71">start<pos:position pos:line="8" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="78">delim<pos:position pos:line="8" pos:column="83"/></name></expr></argument>)<pos:position pos:line="8" pos:column="84"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="8" pos:column="85"/></expr_stmt></block></then>
	<else pos:line="9" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="17">delim_pos<pos:position pos:line="10" pos:column="26"/></name> <operator pos:line="10" pos:column="27">=<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="29">start<pos:position pos:line="10" pos:column="34"/></name> <operator pos:line="10" pos:column="35">+<pos:position pos:line="10" pos:column="36"/></operator> <call><name pos:line="10" pos:column="37">wcslen<pos:position pos:line="10" pos:column="43"/></name><argument_list pos:line="10" pos:column="43">(<argument><expr><name pos:line="10" pos:column="44">start<pos:position pos:line="10" pos:column="49"/></name></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt></block></else></if>

	<comment type="block" pos:line="12" pos:column="9">/*
	 * match text up to delimiter, or end of string (e.g. the '/' after
	 * host is optional if not followed by a path)
	 */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">delim_pos<pos:position pos:line="16" pos:column="22"/></name></expr>)<pos:position pos:line="16" pos:column="23"/></condition><then pos:line="16" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">len<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">delim_pos<pos:position pos:line="17" pos:column="32"/></name> <operator pos:line="17" pos:column="33">-<pos:position pos:line="17" pos:column="34"/></operator> <name pos:line="17" pos:column="35">start<pos:position pos:line="17" pos:column="40"/></name></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt></block></then>
	<else pos:line="18" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="17">len<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <call><name pos:line="19" pos:column="23">wcslen<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">start<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt></block></else></if>

	<comment type="block" pos:line="21" pos:column="9">/* update ptarget if we either found a delimiter or need a match */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">delim_pos<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">||<pos:position pos:line="22" pos:column="25"/></operator> <name pos:line="22" pos:column="26">want<pos:position pos:line="22" pos:column="30"/></name></expr>)<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="23" pos:column="17">*<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">ptarget<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">=<pos:position pos:line="23" pos:column="27"/></operator> <ternary><condition><expr><name pos:line="23" pos:column="28">delim_pos<pos:position pos:line="23" pos:column="37"/></name></expr> ?<pos:position pos:line="23" pos:column="39"/></condition><then pos:line="23" pos:column="39"> <expr><name pos:line="23" pos:column="40">delim_pos<pos:position pos:line="23" pos:column="49"/></name> <operator pos:line="23" pos:column="50">+<pos:position pos:line="23" pos:column="51"/></operator> <call><name pos:line="23" pos:column="52">wcslen<pos:position pos:line="23" pos:column="58"/></name><argument_list pos:line="23" pos:column="58">(<argument><expr><name pos:line="23" pos:column="59">delim<pos:position pos:line="23" pos:column="64"/></name></expr></argument>)<pos:position pos:line="23" pos:column="65"/></argument_list></call></expr> <pos:position pos:line="23" pos:column="66"/></then><else pos:line="23" pos:column="66">: <expr><name pos:line="23" pos:column="68">start<pos:position pos:line="23" pos:column="73"/></name> <operator pos:line="23" pos:column="74">+<pos:position pos:line="23" pos:column="75"/></operator> <name pos:line="23" pos:column="76">len<pos:position pos:line="23" pos:column="79"/></name></expr></else></ternary></expr>;<pos:position pos:line="23" pos:column="80"/></expr_stmt></block></then></if>

	<return pos:line="25" pos:column="9">return <expr><operator pos:line="25" pos:column="16">!<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="17">want<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">||<pos:position pos:line="25" pos:column="24"/></operator> <operator pos:line="25" pos:column="25">(<pos:position pos:line="25" pos:column="26"/></operator><operator pos:line="25" pos:column="26">!<pos:position pos:line="25" pos:column="27"/></operator><call><name pos:line="25" pos:column="27">wcsncmp<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">want<pos:position pos:line="25" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="41">start<pos:position pos:line="25" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="48">len<pos:position pos:line="25" pos:column="51"/></name></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call> <operator pos:line="25" pos:column="53">&amp;&amp;<pos:position pos:line="25" pos:column="63"/></operator> <operator pos:line="25" pos:column="56">!<pos:position pos:line="25" pos:column="57"/></operator><name><name pos:line="25" pos:column="57">want<pos:position pos:line="25" pos:column="61"/></name><index pos:line="25" pos:column="61">[<expr><name pos:line="25" pos:column="62">len<pos:position pos:line="25" pos:column="65"/></name></expr>]<pos:position pos:line="25" pos:column="66"/></index></name><operator pos:line="25" pos:column="66">)<pos:position pos:line="25" pos:column="67"/></operator></expr>;<pos:position pos:line="25" pos:column="68"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
