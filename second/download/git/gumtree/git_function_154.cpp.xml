<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_154.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">log_ref_write<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">refname<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">unsigned<pos:position pos:line="1" pos:column="61"/></name> <name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">old_sha1<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
			 <parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">unsigned<pos:position pos:line="2" pos:column="40"/></name> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">new_sha1<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier> <name pos:line="2" pos:column="63">char<pos:position pos:line="2" pos:column="67"/></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">msg<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">logfd<pos:position pos:line="4" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="20">result<pos:position pos:line="4" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="28">written<pos:position pos:line="4" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="37">oflags<pos:position pos:line="4" pos:column="43"/></name> <init pos:line="4" pos:column="44">= <expr><name pos:line="4" pos:column="46">O_APPEND<pos:position pos:line="4" pos:column="54"/></name> <operator pos:line="4" pos:column="55">|<pos:position pos:line="4" pos:column="56"/></operator> <name pos:line="4" pos:column="57">O_WRONLY<pos:position pos:line="4" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="66"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">maxlen<pos:position pos:line="5" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="26">len<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">msglen<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">log_file<pos:position pos:line="7" pos:column="22"/></name><index pos:line="7" pos:column="22">[<expr><name pos:line="7" pos:column="23">PATH_MAX<pos:position pos:line="7" pos:column="31"/></name></expr>]<pos:position pos:line="7" pos:column="32"/></index></name></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">logrec<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">committer<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">log_all_ref_updates<pos:position pos:line="11" pos:column="32"/></name> <operator pos:line="11" pos:column="33">&lt;<pos:position pos:line="11" pos:column="37"/></operator> <literal type="number" pos:line="11" pos:column="35">0<pos:position pos:line="11" pos:column="36"/></literal></expr>)<pos:position pos:line="11" pos:column="37"/></condition><then pos:line="11" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">log_all_ref_updates<pos:position pos:line="12" pos:column="36"/></name> <operator pos:line="12" pos:column="37">=<pos:position pos:line="12" pos:column="38"/></operator> <operator pos:line="12" pos:column="39">!<pos:position pos:line="12" pos:column="40"/></operator><call><name pos:line="12" pos:column="40">is_bare_repository<pos:position pos:line="12" pos:column="58"/></name><argument_list pos:line="12" pos:column="58">()<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="61"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="14" pos:column="9">result<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <call><name pos:line="14" pos:column="18">log_ref_setup<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><name pos:line="14" pos:column="32">refname<pos:position pos:line="14" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="41">log_file<pos:position pos:line="14" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="51">sizeof<argument_list pos:line="14" pos:column="57">(<argument><expr><name pos:line="14" pos:column="58">log_file<pos:position pos:line="14" pos:column="66"/></name></expr></argument>)<pos:position pos:line="14" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="69"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">result<pos:position pos:line="15" pos:column="19"/></name></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">result<pos:position pos:line="16" pos:column="30"/></name></expr>;<pos:position pos:line="16" pos:column="31"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="18" pos:column="9">logfd<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <call><name pos:line="18" pos:column="17">open<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">log_file<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="32">oflags<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">logfd<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">&lt;<pos:position pos:line="19" pos:column="23"/></operator> <literal type="number" pos:line="19" pos:column="21">0<pos:position pos:line="19" pos:column="22"/></literal></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23">
		<block type="pseudo"><return pos:line="20" pos:column="17">return <expr><literal type="number" pos:line="20" pos:column="24">0<pos:position pos:line="20" pos:column="25"/></literal></expr>;<pos:position pos:line="20" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="21" pos:column="9">msglen<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <ternary><condition><expr><name pos:line="21" pos:column="18">msg<pos:position pos:line="21" pos:column="21"/></name></expr> ?<pos:position pos:line="21" pos:column="23"/></condition><then pos:line="21" pos:column="23"> <expr><call><name pos:line="21" pos:column="24">strlen<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name pos:line="21" pos:column="31">msg<pos:position pos:line="21" pos:column="34"/></name></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr> <pos:position pos:line="21" pos:column="36"/></then><else pos:line="21" pos:column="36">: <expr><literal type="number" pos:line="21" pos:column="38">0<pos:position pos:line="21" pos:column="39"/></literal></expr></else></ternary></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">committer<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <call><name pos:line="22" pos:column="21">git_committer_info<pos:position pos:line="22" pos:column="39"/></name><argument_list pos:line="22" pos:column="39">(<argument><expr><literal type="number" pos:line="22" pos:column="40">0<pos:position pos:line="22" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name pos:line="23" pos:column="9">maxlen<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <call><name pos:line="23" pos:column="18">strlen<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">committer<pos:position pos:line="23" pos:column="34"/></name></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call> <operator pos:line="23" pos:column="36">+<pos:position pos:line="23" pos:column="37"/></operator> <name pos:line="23" pos:column="38">msglen<pos:position pos:line="23" pos:column="44"/></name> <operator pos:line="23" pos:column="45">+<pos:position pos:line="23" pos:column="46"/></operator> <literal type="number" pos:line="23" pos:column="47">100<pos:position pos:line="23" pos:column="50"/></literal></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name pos:line="24" pos:column="9">logrec<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <call><name pos:line="24" pos:column="18">xmalloc<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">maxlen<pos:position pos:line="24" pos:column="32"/></name></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">len<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <call><name pos:line="25" pos:column="15">sprintf<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">logrec<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="31">"%s %s %s\n"<pos:position pos:line="25" pos:column="43"/></literal></expr></argument>,
		      <argument><expr><call><name pos:line="26" pos:column="23">sha1_to_hex<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">old_sha1<pos:position pos:line="26" pos:column="43"/></name></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></call></expr></argument>,
		      <argument><expr><call><name pos:line="27" pos:column="23">sha1_to_hex<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><name pos:line="27" pos:column="35">new_sha1<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr></argument>,
		      <argument><expr><name pos:line="28" pos:column="23">committer<pos:position pos:line="28" pos:column="32"/></name></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">msglen<pos:position pos:line="29" pos:column="19"/></name></expr>)<pos:position pos:line="29" pos:column="20"/></condition><then pos:line="29" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="17">len<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">+=<pos:position pos:line="30" pos:column="23"/></operator> <call><name pos:line="30" pos:column="24">copy_msg<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">logrec<pos:position pos:line="30" pos:column="39"/></name> <operator pos:line="30" pos:column="40">+<pos:position pos:line="30" pos:column="41"/></operator> <name pos:line="30" pos:column="42">len<pos:position pos:line="30" pos:column="45"/></name> <operator pos:line="30" pos:column="46">-<pos:position pos:line="30" pos:column="47"/></operator> <literal type="number" pos:line="30" pos:column="48">1<pos:position pos:line="30" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="51">msg<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call> <operator pos:line="30" pos:column="56">-<pos:position pos:line="30" pos:column="57"/></operator> <literal type="number" pos:line="30" pos:column="58">1<pos:position pos:line="30" pos:column="59"/></literal></expr>;<pos:position pos:line="30" pos:column="60"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="31" pos:column="9">written<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <ternary><condition><expr><name pos:line="31" pos:column="19">len<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">&lt;=<pos:position pos:line="31" pos:column="28"/></operator> <name pos:line="31" pos:column="26">maxlen<pos:position pos:line="31" pos:column="32"/></name></expr> ?<pos:position pos:line="31" pos:column="34"/></condition><then pos:line="31" pos:column="34"> <expr><call><name pos:line="31" pos:column="35">write_in_full<pos:position pos:line="31" pos:column="48"/></name><argument_list pos:line="31" pos:column="48">(<argument><expr><name pos:line="31" pos:column="49">logfd<pos:position pos:line="31" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="56">logrec<pos:position pos:line="31" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="64">len<pos:position pos:line="31" pos:column="67"/></name></expr></argument>)<pos:position pos:line="31" pos:column="68"/></argument_list></call></expr> <pos:position pos:line="31" pos:column="69"/></then><else pos:line="31" pos:column="69">: <expr><operator pos:line="31" pos:column="71">-<pos:position pos:line="31" pos:column="72"/></operator><literal type="number" pos:line="31" pos:column="72">1<pos:position pos:line="31" pos:column="73"/></literal></expr></else></ternary></expr>;<pos:position pos:line="31" pos:column="74"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">free<pos:position pos:line="32" pos:column="13"/></name><argument_list pos:line="32" pos:column="13">(<argument><expr><name pos:line="32" pos:column="14">logrec<pos:position pos:line="32" pos:column="20"/></name></expr></argument>)<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">written<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">!=<pos:position pos:line="33" pos:column="23"/></operator> <name pos:line="33" pos:column="24">len<pos:position pos:line="33" pos:column="27"/></name></expr>)<pos:position pos:line="33" pos:column="28"/></condition><then pos:line="33" pos:column="28"> <block pos:line="33" pos:column="29">{
		<decl_stmt><decl><type><name pos:line="34" pos:column="17">int<pos:position pos:line="34" pos:column="20"/></name></type> <name pos:line="34" pos:column="21">save_errno<pos:position pos:line="34" pos:column="31"/></name> <init pos:line="34" pos:column="32">= <expr><name pos:line="34" pos:column="34">errno<pos:position pos:line="34" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="40"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">close<pos:position pos:line="35" pos:column="22"/></name><argument_list pos:line="35" pos:column="22">(<argument><expr><name pos:line="35" pos:column="23">logfd<pos:position pos:line="35" pos:column="28"/></name></expr></argument>)<pos:position pos:line="35" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">error<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><literal type="string" pos:line="36" pos:column="23">"Unable to append to %s"<pos:position pos:line="36" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">log_file<pos:position pos:line="36" pos:column="57"/></name></expr></argument>)<pos:position pos:line="36" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name pos:line="37" pos:column="17">errno<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">=<pos:position pos:line="37" pos:column="24"/></operator> <name pos:line="37" pos:column="25">save_errno<pos:position pos:line="37" pos:column="35"/></name></expr>;<pos:position pos:line="37" pos:column="36"/></expr_stmt>
		<return pos:line="38" pos:column="17">return <expr><operator pos:line="38" pos:column="24">-<pos:position pos:line="38" pos:column="25"/></operator><literal type="number" pos:line="38" pos:column="25">1<pos:position pos:line="38" pos:column="26"/></literal></expr>;<pos:position pos:line="38" pos:column="27"/></return>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><call><name pos:line="40" pos:column="13">close<pos:position pos:line="40" pos:column="18"/></name><argument_list pos:line="40" pos:column="18">(<argument><expr><name pos:line="40" pos:column="19">logfd<pos:position pos:line="40" pos:column="24"/></name></expr></argument>)<pos:position pos:line="40" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="26"/></condition><then pos:line="40" pos:column="26"> <block pos:line="40" pos:column="27">{
		<decl_stmt><decl><type><name pos:line="41" pos:column="17">int<pos:position pos:line="41" pos:column="20"/></name></type> <name pos:line="41" pos:column="21">save_errno<pos:position pos:line="41" pos:column="31"/></name> <init pos:line="41" pos:column="32">= <expr><name pos:line="41" pos:column="34">errno<pos:position pos:line="41" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="40"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">error<pos:position pos:line="42" pos:column="22"/></name><argument_list pos:line="42" pos:column="22">(<argument><expr><literal type="string" pos:line="42" pos:column="23">"Unable to append to %s"<pos:position pos:line="42" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="49">log_file<pos:position pos:line="42" pos:column="57"/></name></expr></argument>)<pos:position pos:line="42" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name pos:line="43" pos:column="17">errno<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <name pos:line="43" pos:column="25">save_errno<pos:position pos:line="43" pos:column="35"/></name></expr>;<pos:position pos:line="43" pos:column="36"/></expr_stmt>
		<return pos:line="44" pos:column="17">return <expr><operator pos:line="44" pos:column="24">-<pos:position pos:line="44" pos:column="25"/></operator><literal type="number" pos:line="44" pos:column="25">1<pos:position pos:line="44" pos:column="26"/></literal></expr>;<pos:position pos:line="44" pos:column="27"/></return>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if>
	<return pos:line="46" pos:column="9">return <expr><literal type="number" pos:line="46" pos:column="16">0<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
