<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6845_git-2.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_check_free_chunk<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">mstate<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">m<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">mchunkptr<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">p<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list> <block pos:line="1" pos:column="56">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">size_t<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">sz<pos:position pos:line="2" pos:column="12"/></name> <init pos:line="2" pos:column="13">= <expr><call><name pos:line="2" pos:column="15">chunksize<pos:position pos:line="2" pos:column="24"/></name><argument_list pos:line="2" pos:column="24">(<argument><expr><name pos:line="2" pos:column="25">p<pos:position pos:line="2" pos:column="26"/></name></expr></argument>)<pos:position pos:line="2" pos:column="27"/></argument_list></call></expr></init></decl>;<pos:position pos:line="2" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">mchunkptr<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">next<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><call><name pos:line="3" pos:column="20">chunk_plus_offset<pos:position pos:line="3" pos:column="37"/></name><argument_list pos:line="3" pos:column="37">(<argument><expr><name pos:line="3" pos:column="38">p<pos:position pos:line="3" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="41">sz<pos:position pos:line="3" pos:column="43"/></name></expr></argument>)<pos:position pos:line="3" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="45"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="4" pos:column="3">do_check_any_chunk<pos:position pos:line="4" pos:column="21"/></name><argument_list pos:line="4" pos:column="21">(<argument><expr><name pos:line="4" pos:column="22">m<pos:position pos:line="4" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="25">p<pos:position pos:line="4" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5" pos:column="3">assert<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><operator pos:line="5" pos:column="10">!<pos:position pos:line="5" pos:column="11"/></operator><call><name pos:line="5" pos:column="11">cinuse<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">(<argument><expr><name pos:line="5" pos:column="18">p<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">assert<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><operator pos:line="6" pos:column="10">!<pos:position pos:line="6" pos:column="11"/></operator><call><name pos:line="6" pos:column="11">next_pinuse<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><name pos:line="6" pos:column="23">p<pos:position pos:line="6" pos:column="24"/></name></expr></argument>)<pos:position pos:line="6" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">assert<pos:position pos:line="7" pos:column="9"/></name> <argument_list pos:line="7" pos:column="10">(<argument><expr><operator pos:line="7" pos:column="11">!<pos:position pos:line="7" pos:column="12"/></operator><call><name pos:line="7" pos:column="12">is_mmapped<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">p<pos:position pos:line="7" pos:column="24"/></name></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">p<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">!=<pos:position pos:line="8" pos:column="11"/></operator> <name><name pos:line="8" pos:column="12">m<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">dv<pos:position pos:line="8" pos:column="17"/></name></name> <operator pos:line="8" pos:column="18">&amp;&amp;<pos:position pos:line="8" pos:column="28"/></operator> <name pos:line="8" pos:column="21">p<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">!=<pos:position pos:line="8" pos:column="25"/></operator> <name><name pos:line="8" pos:column="26">m<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">-&gt;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="29">top<pos:position pos:line="8" pos:column="32"/></name></name></expr>)<pos:position pos:line="8" pos:column="33"/></condition><then pos:line="8" pos:column="33"> <block pos:line="8" pos:column="34">{
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">sz<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">&gt;=<pos:position pos:line="9" pos:column="17"/></operator> <name pos:line="9" pos:column="15">MIN_CHUNK_SIZE<pos:position pos:line="9" pos:column="29"/></name></expr>)<pos:position pos:line="9" pos:column="30"/></condition><then pos:line="9" pos:column="30"> <block pos:line="9" pos:column="31">{
      <expr_stmt><expr><call><name pos:line="10" pos:column="7">assert<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><operator pos:line="10" pos:column="14">(<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">sz<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">&amp;<pos:position pos:line="10" pos:column="23"/></operator> <name pos:line="10" pos:column="20">CHUNK_ALIGN_MASK<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">)<pos:position pos:line="10" pos:column="37"/></operator> <operator pos:line="10" pos:column="38">==<pos:position pos:line="10" pos:column="40"/></operator> <literal type="number" pos:line="10" pos:column="41">0<pos:position pos:line="10" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="11" pos:column="7">assert<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><call><name pos:line="11" pos:column="14">is_aligned<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><call><name pos:line="11" pos:column="25">chunk2mem<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">p<pos:position pos:line="11" pos:column="36"/></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="12" pos:column="7">assert<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><name><name pos:line="12" pos:column="14">next<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">-&gt;<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="20">prev_foot<pos:position pos:line="12" pos:column="29"/></name></name> <operator pos:line="12" pos:column="30">==<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="33">sz<pos:position pos:line="12" pos:column="35"/></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="13" pos:column="7">assert<pos:position pos:line="13" pos:column="13"/></name><argument_list pos:line="13" pos:column="13">(<argument><expr><call><name pos:line="13" pos:column="14">pinuse<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">p<pos:position pos:line="13" pos:column="22"/></name></expr></argument>)<pos:position pos:line="13" pos:column="23"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="14" pos:column="7">assert<pos:position pos:line="14" pos:column="13"/></name> <argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">next<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">==<pos:position pos:line="14" pos:column="22"/></operator> <name><name pos:line="14" pos:column="23">m<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">-&gt;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="26">top<pos:position pos:line="14" pos:column="29"/></name></name> <operator pos:line="14" pos:column="30">||<pos:position pos:line="14" pos:column="32"/></operator> <call><name pos:line="14" pos:column="33">cinuse<pos:position pos:line="14" pos:column="39"/></name><argument_list pos:line="14" pos:column="39">(<argument><expr><name pos:line="14" pos:column="40">next<pos:position pos:line="14" pos:column="44"/></name></expr></argument>)<pos:position pos:line="14" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">assert<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><name><name pos:line="15" pos:column="14">p<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">-&gt;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="17">fd<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">-&gt;<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="21">bk<pos:position pos:line="15" pos:column="23"/></name></name> <operator pos:line="15" pos:column="24">==<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">p<pos:position pos:line="15" pos:column="28"/></name></expr></argument>)<pos:position pos:line="15" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">assert<pos:position pos:line="16" pos:column="13"/></name><argument_list pos:line="16" pos:column="13">(<argument><expr><name><name pos:line="16" pos:column="14">p<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">-&gt;<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="17">bk<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">fd<pos:position pos:line="16" pos:column="23"/></name></name> <operator pos:line="16" pos:column="24">==<pos:position pos:line="16" pos:column="26"/></operator> <name pos:line="16" pos:column="27">p<pos:position pos:line="16" pos:column="28"/></name></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then>
    <else pos:line="18" pos:column="5">else  <comment type="block" pos:line="18" pos:column="11">/* markers are always of size SIZE_T_SIZE */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="7">assert<pos:position pos:line="19" pos:column="13"/></name><argument_list pos:line="19" pos:column="13">(<argument><expr><name pos:line="19" pos:column="14">sz<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">==<pos:position pos:line="19" pos:column="19"/></operator> <name pos:line="19" pos:column="20">SIZE_T_SIZE<pos:position pos:line="19" pos:column="31"/></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt></block></else></if>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
