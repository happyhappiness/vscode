<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_507.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">cmd2process<pos:position pos:line="1" pos:column="26"/></name></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">start_multi_file_filter<pos:position pos:line="1" pos:column="51"/></name><parameter_list pos:line="1" pos:column="51">(<parameter><decl><type><name><name pos:line="1" pos:column="52">struct<pos:position pos:line="1" pos:column="58"/></name> <name pos:line="1" pos:column="59">hashmap<pos:position pos:line="1" pos:column="66"/></name></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">hashmap<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="77">const<pos:position pos:line="1" pos:column="82"/></specifier> <name pos:line="1" pos:column="83">char<pos:position pos:line="1" pos:column="87"/></name> <modifier pos:line="1" pos:column="88">*<pos:position pos:line="1" pos:column="89"/></modifier></type><name pos:line="1" pos:column="89">cmd<pos:position pos:line="1" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="93"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">err<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">cmd2process<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">entry<pos:position pos:line="4" pos:column="34"/></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">child_process<pos:position pos:line="5" pos:column="29"/></name></name> <modifier pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></modifier></type><name pos:line="5" pos:column="31">process<pos:position pos:line="5" pos:column="38"/></name></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name><name pos:line="6" pos:column="21">argv<pos:position pos:line="6" pos:column="25"/></name><index pos:line="6" pos:column="25">[]<pos:position pos:line="6" pos:column="27"/></index></name> <init pos:line="6" pos:column="28">= <expr><block pos:line="6" pos:column="30">{ <expr><name pos:line="6" pos:column="32">cmd<pos:position pos:line="6" pos:column="35"/></name></expr>, <expr><name pos:line="6" pos:column="37">NULL<pos:position pos:line="6" pos:column="41"/></name></expr> }<pos:position pos:line="6" pos:column="43"/></block></expr></init></decl>;<pos:position pos:line="6" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">string_list<pos:position pos:line="7" pos:column="27"/></name></name></type> <name pos:line="7" pos:column="28">cap_list<pos:position pos:line="7" pos:column="36"/></name> <init pos:line="7" pos:column="37">= <expr><name pos:line="7" pos:column="39">STRING_LIST_INIT_NODUP<pos:position pos:line="7" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="62"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">cap_buf<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">cap_name<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><name pos:line="11" pos:column="9">entry<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <call><name pos:line="11" pos:column="17">xmalloc<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><sizeof pos:line="11" pos:column="25">sizeof<argument_list pos:line="11" pos:column="31">(<argument><expr><operator pos:line="11" pos:column="32">*<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">entry<pos:position pos:line="11" pos:column="38"/></name></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">entry<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">cmd<pos:position pos:line="12" pos:column="19"/></name></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">cmd<pos:position pos:line="12" pos:column="25"/></name></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">entry<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">supported_capabilities<pos:position pos:line="13" pos:column="38"/></name></name> <operator pos:line="13" pos:column="39">=<pos:position pos:line="13" pos:column="40"/></operator> <literal type="number" pos:line="13" pos:column="41">0<pos:position pos:line="13" pos:column="42"/></literal></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name pos:line="14" pos:column="9">process<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <operator pos:line="14" pos:column="19">&amp;<pos:position pos:line="14" pos:column="24"/></operator><name><name pos:line="14" pos:column="20">entry<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">-&gt;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="27">process<pos:position pos:line="14" pos:column="34"/></name></name></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">child_process_init<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">process<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">process<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">-&gt;<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="18">argv<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">argv<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">process<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">use_shell<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <literal type="number" pos:line="18" pos:column="30">1<pos:position pos:line="18" pos:column="31"/></literal></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">process<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">-&gt;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="18">in<pos:position pos:line="19" pos:column="20"/></name></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <operator pos:line="19" pos:column="23">-<pos:position pos:line="19" pos:column="24"/></operator><literal type="number" pos:line="19" pos:column="24">1<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">process<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">out<pos:position pos:line="20" pos:column="21"/></name></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <operator pos:line="20" pos:column="24">-<pos:position pos:line="20" pos:column="25"/></operator><literal type="number" pos:line="20" pos:column="25">1<pos:position pos:line="20" pos:column="26"/></literal></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">process<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">clean_on_exit<pos:position pos:line="21" pos:column="31"/></name></name> <operator pos:line="21" pos:column="32">=<pos:position pos:line="21" pos:column="33"/></operator> <literal type="number" pos:line="21" pos:column="34">1<pos:position pos:line="21" pos:column="35"/></literal></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">process<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">-&gt;<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="18">clean_on_exit_handler<pos:position pos:line="22" pos:column="39"/></name></name> <operator pos:line="22" pos:column="40">=<pos:position pos:line="22" pos:column="41"/></operator> <name pos:line="22" pos:column="42">stop_multi_file_filter<pos:position pos:line="22" pos:column="64"/></name></expr>;<pos:position pos:line="22" pos:column="65"/></expr_stmt>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">start_command<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">process<pos:position pos:line="24" pos:column="34"/></name></expr></argument>)<pos:position pos:line="24" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="36"/></condition><then pos:line="24" pos:column="36"> <block pos:line="24" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">error<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><literal type="string" pos:line="25" pos:column="23">"cannot fork to run external filter '%s'"<pos:position pos:line="25" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="66">cmd<pos:position pos:line="25" pos:column="69"/></name></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="71"/></expr_stmt>
		<return pos:line="26" pos:column="17">return <expr><name pos:line="26" pos:column="24">NULL<pos:position pos:line="26" pos:column="28"/></name></expr>;<pos:position pos:line="26" pos:column="29"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="29" pos:column="9">hashmap_entry_init<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">entry<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="35">strhash<pos:position pos:line="29" pos:column="42"/></name><argument_list pos:line="29" pos:column="42">(<argument><expr><name pos:line="29" pos:column="43">cmd<pos:position pos:line="29" pos:column="46"/></name></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="31" pos:column="9">sigchain_push<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">SIGPIPE<pos:position pos:line="31" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="32">SIG_IGN<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><name pos:line="33" pos:column="9">err<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <call><name pos:line="33" pos:column="15">packet_write_list<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name><name pos:line="33" pos:column="33">process<pos:position pos:line="33" pos:column="40"/></name><operator pos:line="33" pos:column="40">-&gt;<pos:position pos:line="33" pos:column="45"/></operator><name pos:line="33" pos:column="42">in<pos:position pos:line="33" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="46">"git-filter-client"<pos:position pos:line="33" pos:column="65"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="67">"version=2"<pos:position pos:line="33" pos:column="78"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="80">NULL<pos:position pos:line="33" pos:column="84"/></name></expr></argument>)<pos:position pos:line="33" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="86"/></expr_stmt>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">err<pos:position pos:line="34" pos:column="16"/></name></expr>)<pos:position pos:line="34" pos:column="17"/></condition><then pos:line="34" pos:column="17">
		<block type="pseudo"><goto pos:line="35" pos:column="17">goto <name pos:line="35" pos:column="22">done<pos:position pos:line="35" pos:column="26"/></name>;<pos:position pos:line="35" pos:column="27"/></goto></block></then></if>

	<expr_stmt><expr><name pos:line="37" pos:column="9">err<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <call><name pos:line="37" pos:column="15">strcmp<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><call><name pos:line="37" pos:column="22">packet_read_line<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name><name pos:line="37" pos:column="39">process<pos:position pos:line="37" pos:column="46"/></name><operator pos:line="37" pos:column="46">-&gt;<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="48">out<pos:position pos:line="37" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="53">NULL<pos:position pos:line="37" pos:column="57"/></name></expr></argument>)<pos:position pos:line="37" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="60">"git-filter-server"<pos:position pos:line="37" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="81"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">err<pos:position pos:line="38" pos:column="16"/></name></expr>)<pos:position pos:line="38" pos:column="17"/></condition><then pos:line="38" pos:column="17"> <block pos:line="38" pos:column="18">{
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">error<pos:position pos:line="39" pos:column="22"/></name><argument_list pos:line="39" pos:column="22">(<argument><expr><literal type="string" pos:line="39" pos:column="23">"external filter '%s' does not support filter protocol version 2"<pos:position pos:line="39" pos:column="88"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="90">cmd<pos:position pos:line="39" pos:column="93"/></name></expr></argument>)<pos:position pos:line="39" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="95"/></expr_stmt>
		<goto pos:line="40" pos:column="17">goto <name pos:line="40" pos:column="22">done<pos:position pos:line="40" pos:column="26"/></name>;<pos:position pos:line="40" pos:column="27"/></goto>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="42" pos:column="9">err<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <call><name pos:line="42" pos:column="15">strcmp<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(<argument><expr><call><name pos:line="42" pos:column="22">packet_read_line<pos:position pos:line="42" pos:column="38"/></name><argument_list pos:line="42" pos:column="38">(<argument><expr><name><name pos:line="42" pos:column="39">process<pos:position pos:line="42" pos:column="46"/></name><operator pos:line="42" pos:column="46">-&gt;<pos:position pos:line="42" pos:column="51"/></operator><name pos:line="42" pos:column="48">out<pos:position pos:line="42" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="53">NULL<pos:position pos:line="42" pos:column="57"/></name></expr></argument>)<pos:position pos:line="42" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="60">"version=2"<pos:position pos:line="42" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="73"/></expr_stmt>
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">err<pos:position pos:line="43" pos:column="16"/></name></expr>)<pos:position pos:line="43" pos:column="17"/></condition><then pos:line="43" pos:column="17">
		<block type="pseudo"><goto pos:line="44" pos:column="17">goto <name pos:line="44" pos:column="22">done<pos:position pos:line="44" pos:column="26"/></name>;<pos:position pos:line="44" pos:column="27"/></goto></block></then></if>
	<expr_stmt><expr><name pos:line="45" pos:column="9">err<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <call><name pos:line="45" pos:column="15">packet_read_line<pos:position pos:line="45" pos:column="31"/></name><argument_list pos:line="45" pos:column="31">(<argument><expr><name><name pos:line="45" pos:column="32">process<pos:position pos:line="45" pos:column="39"/></name><operator pos:line="45" pos:column="39">-&gt;<pos:position pos:line="45" pos:column="44"/></operator><name pos:line="45" pos:column="41">out<pos:position pos:line="45" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="46">NULL<pos:position pos:line="45" pos:column="50"/></name></expr></argument>)<pos:position pos:line="45" pos:column="51"/></argument_list></call> <operator pos:line="45" pos:column="52">!=<pos:position pos:line="45" pos:column="54"/></operator> <name pos:line="45" pos:column="55">NULL<pos:position pos:line="45" pos:column="59"/></name></expr>;<pos:position pos:line="45" pos:column="60"/></expr_stmt>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">err<pos:position pos:line="46" pos:column="16"/></name></expr>)<pos:position pos:line="46" pos:column="17"/></condition><then pos:line="46" pos:column="17">
		<block type="pseudo"><goto pos:line="47" pos:column="17">goto <name pos:line="47" pos:column="22">done<pos:position pos:line="47" pos:column="26"/></name>;<pos:position pos:line="47" pos:column="27"/></goto></block></then></if>

	<expr_stmt><expr><name pos:line="49" pos:column="9">err<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">=<pos:position pos:line="49" pos:column="14"/></operator> <call><name pos:line="49" pos:column="15">packet_write_list<pos:position pos:line="49" pos:column="32"/></name><argument_list pos:line="49" pos:column="32">(<argument><expr><name><name pos:line="49" pos:column="33">process<pos:position pos:line="49" pos:column="40"/></name><operator pos:line="49" pos:column="40">-&gt;<pos:position pos:line="49" pos:column="45"/></operator><name pos:line="49" pos:column="42">in<pos:position pos:line="49" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="46">"capability=clean"<pos:position pos:line="49" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="66">"capability=smudge"<pos:position pos:line="49" pos:column="85"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="87">NULL<pos:position pos:line="49" pos:column="91"/></name></expr></argument>)<pos:position pos:line="49" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="93"/></expr_stmt>

	<for pos:line="51" pos:column="9">for <control pos:line="51" pos:column="13">(<init pos:line="51" pos:column="14">;<pos:position pos:line="51" pos:column="15"/></init><condition pos:line="51" pos:column="15">;<pos:position pos:line="51" pos:column="16"/></condition><incr/>)<pos:position pos:line="51" pos:column="17"/></control> <block pos:line="51" pos:column="18">{
		<expr_stmt><expr><name pos:line="52" pos:column="17">cap_buf<pos:position pos:line="52" pos:column="24"/></name> <operator pos:line="52" pos:column="25">=<pos:position pos:line="52" pos:column="26"/></operator> <call><name pos:line="52" pos:column="27">packet_read_line<pos:position pos:line="52" pos:column="43"/></name><argument_list pos:line="52" pos:column="43">(<argument><expr><name><name pos:line="52" pos:column="44">process<pos:position pos:line="52" pos:column="51"/></name><operator pos:line="52" pos:column="51">-&gt;<pos:position pos:line="52" pos:column="56"/></operator><name pos:line="52" pos:column="53">out<pos:position pos:line="52" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="58">NULL<pos:position pos:line="52" pos:column="62"/></name></expr></argument>)<pos:position pos:line="52" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="64"/></expr_stmt>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><operator pos:line="53" pos:column="21">!<pos:position pos:line="53" pos:column="22"/></operator><name pos:line="53" pos:column="22">cap_buf<pos:position pos:line="53" pos:column="29"/></name></expr>)<pos:position pos:line="53" pos:column="30"/></condition><then pos:line="53" pos:column="30">
			<block type="pseudo"><break pos:line="54" pos:column="25">break;<pos:position pos:line="54" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">string_list_split_in_place<pos:position pos:line="55" pos:column="43"/></name><argument_list pos:line="55" pos:column="43">(<argument><expr><operator pos:line="55" pos:column="44">&amp;<pos:position pos:line="55" pos:column="49"/></operator><name pos:line="55" pos:column="45">cap_list<pos:position pos:line="55" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="55">cap_buf<pos:position pos:line="55" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="55" pos:column="64">'='<pos:position pos:line="55" pos:column="67"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="69">1<pos:position pos:line="55" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="72"/></expr_stmt>

		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><name><name pos:line="57" pos:column="21">cap_list<pos:position pos:line="57" pos:column="29"/></name><operator pos:line="57" pos:column="29">.<pos:position pos:line="57" pos:column="30"/></operator><name pos:line="57" pos:column="30">nr<pos:position pos:line="57" pos:column="32"/></name></name> <operator pos:line="57" pos:column="33">!=<pos:position pos:line="57" pos:column="35"/></operator> <literal type="number" pos:line="57" pos:column="36">2<pos:position pos:line="57" pos:column="37"/></literal> <operator pos:line="57" pos:column="38">||<pos:position pos:line="57" pos:column="40"/></operator> <call><name pos:line="57" pos:column="41">strcmp<pos:position pos:line="57" pos:column="47"/></name><argument_list pos:line="57" pos:column="47">(<argument><expr><name><name pos:line="57" pos:column="48">cap_list<pos:position pos:line="57" pos:column="56"/></name><operator pos:line="57" pos:column="56">.<pos:position pos:line="57" pos:column="57"/></operator><name pos:line="57" pos:column="57">items<pos:position pos:line="57" pos:column="62"/></name><index pos:line="57" pos:column="62">[<expr><literal type="number" pos:line="57" pos:column="63">0<pos:position pos:line="57" pos:column="64"/></literal></expr>]<pos:position pos:line="57" pos:column="65"/></index></name><operator pos:line="57" pos:column="65">.<pos:position pos:line="57" pos:column="66"/></operator><name pos:line="57" pos:column="66">string<pos:position pos:line="57" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="74">"capability"<pos:position pos:line="57" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="87"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="88"/></condition><then pos:line="57" pos:column="88">
			<block type="pseudo"><continue pos:line="58" pos:column="25">continue;<pos:position pos:line="58" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="60" pos:column="17">cap_name<pos:position pos:line="60" pos:column="25"/></name> <operator pos:line="60" pos:column="26">=<pos:position pos:line="60" pos:column="27"/></operator> <name><name pos:line="60" pos:column="28">cap_list<pos:position pos:line="60" pos:column="36"/></name><operator pos:line="60" pos:column="36">.<pos:position pos:line="60" pos:column="37"/></operator><name pos:line="60" pos:column="37">items<pos:position pos:line="60" pos:column="42"/></name><index pos:line="60" pos:column="42">[<expr><literal type="number" pos:line="60" pos:column="43">1<pos:position pos:line="60" pos:column="44"/></literal></expr>]<pos:position pos:line="60" pos:column="45"/></index></name><operator pos:line="60" pos:column="45">.<pos:position pos:line="60" pos:column="46"/></operator><name pos:line="60" pos:column="46">string<pos:position pos:line="60" pos:column="52"/></name></expr>;<pos:position pos:line="60" pos:column="53"/></expr_stmt>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><operator pos:line="61" pos:column="21">!<pos:position pos:line="61" pos:column="22"/></operator><call><name pos:line="61" pos:column="22">strcmp<pos:position pos:line="61" pos:column="28"/></name><argument_list pos:line="61" pos:column="28">(<argument><expr><name pos:line="61" pos:column="29">cap_name<pos:position pos:line="61" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="39">"clean"<pos:position pos:line="61" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="48"/></condition><then pos:line="61" pos:column="48"> <block pos:line="61" pos:column="49">{
			<expr_stmt><expr><name><name pos:line="62" pos:column="25">entry<pos:position pos:line="62" pos:column="30"/></name><operator pos:line="62" pos:column="30">-&gt;<pos:position pos:line="62" pos:column="35"/></operator><name pos:line="62" pos:column="32">supported_capabilities<pos:position pos:line="62" pos:column="54"/></name></name> <operator pos:line="62" pos:column="55">|=<pos:position pos:line="62" pos:column="57"/></operator> <name pos:line="62" pos:column="58">CAP_CLEAN<pos:position pos:line="62" pos:column="67"/></name></expr>;<pos:position pos:line="62" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="63" pos:column="18"/></block></then> <elseif pos:line="63" pos:column="19">else <if pos:line="63" pos:column="24">if <condition pos:line="63" pos:column="27">(<expr><operator pos:line="63" pos:column="28">!<pos:position pos:line="63" pos:column="29"/></operator><call><name pos:line="63" pos:column="29">strcmp<pos:position pos:line="63" pos:column="35"/></name><argument_list pos:line="63" pos:column="35">(<argument><expr><name pos:line="63" pos:column="36">cap_name<pos:position pos:line="63" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="46">"smudge"<pos:position pos:line="63" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="56"/></condition><then pos:line="63" pos:column="56"> <block pos:line="63" pos:column="57">{
			<expr_stmt><expr><name><name pos:line="64" pos:column="25">entry<pos:position pos:line="64" pos:column="30"/></name><operator pos:line="64" pos:column="30">-&gt;<pos:position pos:line="64" pos:column="35"/></operator><name pos:line="64" pos:column="32">supported_capabilities<pos:position pos:line="64" pos:column="54"/></name></name> <operator pos:line="64" pos:column="55">|=<pos:position pos:line="64" pos:column="57"/></operator> <name pos:line="64" pos:column="58">CAP_SMUDGE<pos:position pos:line="64" pos:column="68"/></name></expr>;<pos:position pos:line="64" pos:column="69"/></expr_stmt>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if></elseif> <else pos:line="65" pos:column="19">else <block pos:line="65" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">warning<pos:position pos:line="66" pos:column="32"/></name><argument_list pos:line="66" pos:column="32">(
				<argument><expr><literal type="string" pos:line="67" pos:column="33">"external filter '%s' requested unsupported filter capability '%s'"<pos:position pos:line="67" pos:column="100"/></literal></expr></argument>,
				<argument><expr><name pos:line="68" pos:column="33">cmd<pos:position pos:line="68" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="38">cap_name<pos:position pos:line="68" pos:column="46"/></name></expr></argument>
			)<pos:position pos:line="69" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="27"/></expr_stmt>
		}<pos:position pos:line="70" pos:column="18"/></block></else></if>

		<expr_stmt><expr><call><name pos:line="72" pos:column="17">string_list_clear<pos:position pos:line="72" pos:column="34"/></name><argument_list pos:line="72" pos:column="34">(<argument><expr><operator pos:line="72" pos:column="35">&amp;<pos:position pos:line="72" pos:column="40"/></operator><name pos:line="72" pos:column="36">cap_list<pos:position pos:line="72" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="46">0<pos:position pos:line="72" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="73" pos:column="10"/></block></for>

<label><name pos:line="75" pos:column="1">done<pos:position pos:line="75" pos:column="5"/></name>:<pos:position pos:line="75" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="76" pos:column="9">sigchain_pop<pos:position pos:line="76" pos:column="21"/></name><argument_list pos:line="76" pos:column="21">(<argument><expr><name pos:line="76" pos:column="22">SIGPIPE<pos:position pos:line="76" pos:column="29"/></name></expr></argument>)<pos:position pos:line="76" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="31"/></expr_stmt>

	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name pos:line="78" pos:column="13">err<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">||<pos:position pos:line="78" pos:column="19"/></operator> <name pos:line="78" pos:column="20">errno<pos:position pos:line="78" pos:column="25"/></name> <operator pos:line="78" pos:column="26">==<pos:position pos:line="78" pos:column="28"/></operator> <name pos:line="78" pos:column="29">EPIPE<pos:position pos:line="78" pos:column="34"/></name></expr>)<pos:position pos:line="78" pos:column="35"/></condition><then pos:line="78" pos:column="35"> <block pos:line="78" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">error<pos:position pos:line="79" pos:column="22"/></name><argument_list pos:line="79" pos:column="22">(<argument><expr><literal type="string" pos:line="79" pos:column="23">"initialization for external filter '%s' failed"<pos:position pos:line="79" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="73">cmd<pos:position pos:line="79" pos:column="76"/></name></expr></argument>)<pos:position pos:line="79" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="78"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="80" pos:column="17">kill_multi_file_filter<pos:position pos:line="80" pos:column="39"/></name><argument_list pos:line="80" pos:column="39">(<argument><expr><name pos:line="80" pos:column="40">hashmap<pos:position pos:line="80" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="49">entry<pos:position pos:line="80" pos:column="54"/></name></expr></argument>)<pos:position pos:line="80" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="56"/></expr_stmt>
		<return pos:line="81" pos:column="17">return <expr><name pos:line="81" pos:column="24">NULL<pos:position pos:line="81" pos:column="28"/></name></expr>;<pos:position pos:line="81" pos:column="29"/></return>
	}<pos:position pos:line="82" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="84" pos:column="9">hashmap_add<pos:position pos:line="84" pos:column="20"/></name><argument_list pos:line="84" pos:column="20">(<argument><expr><name pos:line="84" pos:column="21">hashmap<pos:position pos:line="84" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="30">entry<pos:position pos:line="84" pos:column="35"/></name></expr></argument>)<pos:position pos:line="84" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="37"/></expr_stmt>
	<return pos:line="85" pos:column="9">return <expr><name pos:line="85" pos:column="16">entry<pos:position pos:line="85" pos:column="21"/></name></expr>;<pos:position pos:line="85" pos:column="22"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
