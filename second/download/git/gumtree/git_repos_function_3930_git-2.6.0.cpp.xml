<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3930_git-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">load_subtree<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">notes_tree<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">t<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">leaf_node<pos:position pos:line="1" pos:column="64"/></name></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">subtree<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">int_node<pos:position pos:line="2" pos:column="32"/></name></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">node<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">unsigned<pos:position pos:line="2" pos:column="48"/></name> <name pos:line="2" pos:column="49">int<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">n<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">object_sha1<pos:position pos:line="4" pos:column="34"/></name><index pos:line="4" pos:column="34">[<expr><literal type="number" pos:line="4" pos:column="35">20<pos:position pos:line="4" pos:column="37"/></literal></expr>]<pos:position pos:line="4" pos:column="38"/></index></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">int<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">prefix_len<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">void<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">buf<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">tree_desc<pos:position pos:line="7" pos:column="25"/></name></name></type> <name pos:line="7" pos:column="26">desc<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">name_entry<pos:position pos:line="8" pos:column="26"/></name></name></type> <name pos:line="8" pos:column="27">entry<pos:position pos:line="8" pos:column="32"/></name></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">len<pos:position pos:line="9" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="18">path_len<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">unsigned<pos:position pos:line="10" pos:column="17"/></name> <name pos:line="10" pos:column="18">char<pos:position pos:line="10" pos:column="22"/></name></type> <name pos:line="10" pos:column="23">type<pos:position pos:line="10" pos:column="27"/></name></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">leaf_node<pos:position pos:line="11" pos:column="25"/></name></name> <modifier pos:line="11" pos:column="26">*<pos:position pos:line="11" pos:column="27"/></modifier></type><name pos:line="11" pos:column="27">l<pos:position pos:line="11" pos:column="28"/></name></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>

	<expr_stmt><expr><name pos:line="13" pos:column="9">buf<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">fill_tree_descriptor<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><operator pos:line="13" pos:column="36">&amp;<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="37">desc<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="43">subtree<pos:position pos:line="13" pos:column="50"/></name><operator pos:line="13" pos:column="50">-&gt;<pos:position pos:line="13" pos:column="55"/></operator><name pos:line="13" pos:column="52">val_sha1<pos:position pos:line="13" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="62"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">buf<pos:position pos:line="14" pos:column="17"/></name></expr>)<pos:position pos:line="14" pos:column="18"/></condition><then pos:line="14" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">die<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><literal type="string" pos:line="15" pos:column="21">"Could not read %s for notes-index"<pos:position pos:line="15" pos:column="56"/></literal></expr></argument>,
		     <argument><expr><call><name pos:line="16" pos:column="22">sha1_to_hex<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">(<argument><expr><name><name pos:line="16" pos:column="34">subtree<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">-&gt;<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="43">val_sha1<pos:position pos:line="16" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="54"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="18" pos:column="9">prefix_len<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <name><name pos:line="18" pos:column="22">subtree<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">key_sha1<pos:position pos:line="18" pos:column="39"/></name><index pos:line="18" pos:column="39">[<expr><literal type="number" pos:line="18" pos:column="40">19<pos:position pos:line="18" pos:column="42"/></literal></expr>]<pos:position pos:line="18" pos:column="43"/></index></name></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">assert<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name pos:line="19" pos:column="16">prefix_len<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">*<pos:position pos:line="19" pos:column="28"/></operator> <literal type="number" pos:line="19" pos:column="29">2<pos:position pos:line="19" pos:column="30"/></literal> <operator pos:line="19" pos:column="31">&gt;=<pos:position pos:line="19" pos:column="36"/></operator> <name pos:line="19" pos:column="34">n<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">memcpy<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">object_sha1<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="29">subtree<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">-&gt;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="38">key_sha1<pos:position pos:line="20" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="48">prefix_len<pos:position pos:line="20" pos:column="58"/></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt>
	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><call><name pos:line="21" pos:column="16">tree_entry<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><operator pos:line="21" pos:column="27">&amp;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="28">desc<pos:position pos:line="21" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="34">&amp;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="35">entry<pos:position pos:line="21" pos:column="40"/></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="42"/></condition> <block pos:line="21" pos:column="43">{
		<expr_stmt><expr><name pos:line="22" pos:column="17">path_len<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">=<pos:position pos:line="22" pos:column="27"/></operator> <call><name pos:line="22" pos:column="28">strlen<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">(<argument><expr><name><name pos:line="22" pos:column="35">entry<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">.<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="41">path<pos:position pos:line="22" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name pos:line="23" pos:column="17">len<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <call><name pos:line="23" pos:column="23">get_sha1_hex_segment<pos:position pos:line="23" pos:column="43"/></name><argument_list pos:line="23" pos:column="43">(<argument><expr><name><name pos:line="23" pos:column="44">entry<pos:position pos:line="23" pos:column="49"/></name><operator pos:line="23" pos:column="49">.<pos:position pos:line="23" pos:column="50"/></operator><name pos:line="23" pos:column="50">path<pos:position pos:line="23" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="56">path_len<pos:position pos:line="23" pos:column="64"/></name></expr></argument>,
				<argument><expr><name pos:line="24" pos:column="33">object_sha1<pos:position pos:line="24" pos:column="44"/></name> <operator pos:line="24" pos:column="45">+<pos:position pos:line="24" pos:column="46"/></operator> <name pos:line="24" pos:column="47">prefix_len<pos:position pos:line="24" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="59">20<pos:position pos:line="24" pos:column="61"/></literal> <operator pos:line="24" pos:column="62">-<pos:position pos:line="24" pos:column="63"/></operator> <name pos:line="24" pos:column="64">prefix_len<pos:position pos:line="24" pos:column="74"/></name></expr></argument>)<pos:position pos:line="24" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="76"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">len<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">&lt;<pos:position pos:line="25" pos:column="29"/></operator> <literal type="number" pos:line="25" pos:column="27">0<pos:position pos:line="25" pos:column="28"/></literal></expr>)<pos:position pos:line="25" pos:column="29"/></condition><then pos:line="25" pos:column="29">
			<block type="pseudo"><goto pos:line="26" pos:column="25">goto <name pos:line="26" pos:column="30">handle_non_note<pos:position pos:line="26" pos:column="45"/></name>;<pos:position pos:line="26" pos:column="46"/></goto></block></then></if> <comment type="block" pos:line="26" pos:column="47">/* entry.path is not a SHA1 */</comment>
		<expr_stmt><expr><name pos:line="27" pos:column="17">len<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">+=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">prefix_len<pos:position pos:line="27" pos:column="34"/></name></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>

		<comment type="block" pos:line="29" pos:column="17">/*
		 * If object SHA1 is complete (len == 20), assume note object
		 * If object SHA1 is incomplete (len &lt; 20), and current
		 * component consists of 2 hex chars, assume note subtree
		 */</comment>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">len<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">&lt;=<pos:position pos:line="34" pos:column="30"/></operator> <literal type="number" pos:line="34" pos:column="28">20<pos:position pos:line="34" pos:column="30"/></literal></expr>)<pos:position pos:line="34" pos:column="31"/></condition><then pos:line="34" pos:column="31"> <block pos:line="34" pos:column="32">{
			<expr_stmt><expr><name pos:line="35" pos:column="25">type<pos:position pos:line="35" pos:column="29"/></name> <operator pos:line="35" pos:column="30">=<pos:position pos:line="35" pos:column="31"/></operator> <name pos:line="35" pos:column="32">PTR_TYPE_NOTE<pos:position pos:line="35" pos:column="45"/></name></expr>;<pos:position pos:line="35" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="36" pos:column="25">l<pos:position pos:line="36" pos:column="26"/></name> <operator pos:line="36" pos:column="27">=<pos:position pos:line="36" pos:column="28"/></operator> <operator pos:line="36" pos:column="29">(<pos:position pos:line="36" pos:column="30"/></operator>struct <name pos:line="36" pos:column="37">leaf_node<pos:position pos:line="36" pos:column="46"/></name> <operator pos:line="36" pos:column="47">*<pos:position pos:line="36" pos:column="48"/></operator><operator pos:line="36" pos:column="48">)<pos:position pos:line="36" pos:column="49"/></operator>
				<call><name pos:line="37" pos:column="33">xcalloc<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><literal type="number" pos:line="37" pos:column="41">1<pos:position pos:line="37" pos:column="42"/></literal></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="44">sizeof<argument_list pos:line="37" pos:column="50">(<argument><expr pos:line="37" pos:column="51">struct <name pos:line="37" pos:column="58">leaf_node<pos:position pos:line="37" pos:column="67"/></name></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="70"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">hashcpy<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name><name pos:line="38" pos:column="33">l<pos:position pos:line="38" pos:column="34"/></name><operator pos:line="38" pos:column="34">-&gt;<pos:position pos:line="38" pos:column="39"/></operator><name pos:line="38" pos:column="36">key_sha1<pos:position pos:line="38" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="46">object_sha1<pos:position pos:line="38" pos:column="57"/></name></expr></argument>)<pos:position pos:line="38" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">hashcpy<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><name><name pos:line="39" pos:column="33">l<pos:position pos:line="39" pos:column="34"/></name><operator pos:line="39" pos:column="34">-&gt;<pos:position pos:line="39" pos:column="39"/></operator><name pos:line="39" pos:column="36">val_sha1<pos:position pos:line="39" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="46">entry<pos:position pos:line="39" pos:column="51"/></name><operator pos:line="39" pos:column="51">.<pos:position pos:line="39" pos:column="52"/></operator><name pos:line="39" pos:column="52">sha1<pos:position pos:line="39" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="58"/></expr_stmt>
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><name pos:line="40" pos:column="29">len<pos:position pos:line="40" pos:column="32"/></name> <operator pos:line="40" pos:column="33">&lt;<pos:position pos:line="40" pos:column="37"/></operator> <literal type="number" pos:line="40" pos:column="35">20<pos:position pos:line="40" pos:column="37"/></literal></expr>)<pos:position pos:line="40" pos:column="38"/></condition><then pos:line="40" pos:column="38"> <block pos:line="40" pos:column="39">{
				<if pos:line="41" pos:column="33">if <condition pos:line="41" pos:column="36">(<expr><operator pos:line="41" pos:column="37">!<pos:position pos:line="41" pos:column="38"/></operator><call><name pos:line="41" pos:column="38">S_ISDIR<pos:position pos:line="41" pos:column="45"/></name><argument_list pos:line="41" pos:column="45">(<argument><expr><name><name pos:line="41" pos:column="46">entry<pos:position pos:line="41" pos:column="51"/></name><operator pos:line="41" pos:column="51">.<pos:position pos:line="41" pos:column="52"/></operator><name pos:line="41" pos:column="52">mode<pos:position pos:line="41" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call> <operator pos:line="41" pos:column="58">||<pos:position pos:line="41" pos:column="60"/></operator> <name pos:line="41" pos:column="61">path_len<pos:position pos:line="41" pos:column="69"/></name> <operator pos:line="41" pos:column="70">!=<pos:position pos:line="41" pos:column="72"/></operator> <literal type="number" pos:line="41" pos:column="73">2<pos:position pos:line="41" pos:column="74"/></literal></expr>)<pos:position pos:line="41" pos:column="75"/></condition><then pos:line="41" pos:column="75">
					<block type="pseudo"><goto pos:line="42" pos:column="41">goto <name pos:line="42" pos:column="46">handle_non_note<pos:position pos:line="42" pos:column="61"/></name>;<pos:position pos:line="42" pos:column="62"/></goto></block></then></if> <comment type="block" pos:line="42" pos:column="63">/* not subtree */</comment>
				<expr_stmt><expr><name><name pos:line="43" pos:column="33">l<pos:position pos:line="43" pos:column="34"/></name><operator pos:line="43" pos:column="34">-&gt;<pos:position pos:line="43" pos:column="39"/></operator><name pos:line="43" pos:column="36">key_sha1<pos:position pos:line="43" pos:column="44"/></name><index pos:line="43" pos:column="44">[<expr><literal type="number" pos:line="43" pos:column="45">19<pos:position pos:line="43" pos:column="47"/></literal></expr>]<pos:position pos:line="43" pos:column="48"/></index></name> <operator pos:line="43" pos:column="49">=<pos:position pos:line="43" pos:column="50"/></operator> <operator pos:line="43" pos:column="51">(<pos:position pos:line="43" pos:column="52"/></operator><name pos:line="43" pos:column="52">unsigned<pos:position pos:line="43" pos:column="60"/></name> <name pos:line="43" pos:column="61">char<pos:position pos:line="43" pos:column="65"/></name><operator pos:line="43" pos:column="65">)<pos:position pos:line="43" pos:column="66"/></operator> <name pos:line="43" pos:column="67">len<pos:position pos:line="43" pos:column="70"/></name></expr>;<pos:position pos:line="43" pos:column="71"/></expr_stmt>
				<expr_stmt><expr><name pos:line="44" pos:column="33">type<pos:position pos:line="44" pos:column="37"/></name> <operator pos:line="44" pos:column="38">=<pos:position pos:line="44" pos:column="39"/></operator> <name pos:line="44" pos:column="40">PTR_TYPE_SUBTREE<pos:position pos:line="44" pos:column="56"/></name></expr>;<pos:position pos:line="44" pos:column="57"/></expr_stmt>
			}<pos:position pos:line="45" pos:column="26"/></block></then></if>
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><call><name pos:line="46" pos:column="29">note_tree_insert<pos:position pos:line="46" pos:column="45"/></name><argument_list pos:line="46" pos:column="45">(<argument><expr><name pos:line="46" pos:column="46">t<pos:position pos:line="46" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="49">node<pos:position pos:line="46" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="55">n<pos:position pos:line="46" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="58">l<pos:position pos:line="46" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="61">type<pos:position pos:line="46" pos:column="65"/></name></expr></argument>,
					     <argument><expr><name pos:line="47" pos:column="46">combine_notes_concatenate<pos:position pos:line="47" pos:column="71"/></name></expr></argument>)<pos:position pos:line="47" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="73"/></condition><then pos:line="47" pos:column="73">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="33">die<pos:position pos:line="48" pos:column="36"/></name><argument_list pos:line="48" pos:column="36">(<argument><expr><literal type="string" pos:line="48" pos:column="37">"Failed to load %s %s into notes tree "<pos:position pos:line="48" pos:column="76"/></literal>
				    <literal type="string" pos:line="49" pos:column="37">"from %s"<pos:position pos:line="49" pos:column="46"/></literal></expr></argument>,
				    <argument><expr><ternary><condition><expr><name pos:line="50" pos:column="37">type<pos:position pos:line="50" pos:column="41"/></name> <operator pos:line="50" pos:column="42">==<pos:position pos:line="50" pos:column="44"/></operator> <name pos:line="50" pos:column="45">PTR_TYPE_NOTE<pos:position pos:line="50" pos:column="58"/></name></expr> ?<pos:position pos:line="50" pos:column="60"/></condition><then pos:line="50" pos:column="60"> <expr><literal type="string" pos:line="50" pos:column="61">"note"<pos:position pos:line="50" pos:column="67"/></literal></expr> <pos:position pos:line="50" pos:column="68"/></then><else pos:line="50" pos:column="68">: <expr><literal type="string" pos:line="50" pos:column="70">"subtree"<pos:position pos:line="50" pos:column="79"/></literal></expr></else></ternary></expr></argument>,
				    <argument><expr><call><name pos:line="51" pos:column="37">sha1_to_hex<pos:position pos:line="51" pos:column="48"/></name><argument_list pos:line="51" pos:column="48">(<argument><expr><name><name pos:line="51" pos:column="49">l<pos:position pos:line="51" pos:column="50"/></name><operator pos:line="51" pos:column="50">-&gt;<pos:position pos:line="51" pos:column="55"/></operator><name pos:line="51" pos:column="52">key_sha1<pos:position pos:line="51" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="63">t<pos:position pos:line="51" pos:column="64"/></name><operator pos:line="51" pos:column="64">-&gt;<pos:position pos:line="51" pos:column="69"/></operator><name pos:line="51" pos:column="66">ref<pos:position pos:line="51" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="71"/></expr_stmt></block></then></if>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if>
		<continue pos:line="53" pos:column="17">continue;<pos:position pos:line="53" pos:column="26"/></continue>

<label><name pos:line="55" pos:column="1">handle_non_note<pos:position pos:line="55" pos:column="16"/></name>:<pos:position pos:line="55" pos:column="17"/></label>
		<comment type="block" pos:line="56" pos:column="17">/*
		 * Determine full path for this non-note entry:
		 * The filename is already found in entry.path, but the
		 * directory part of the path must be deduced from the subtree
		 * containing this entry. We assume here that the overall notes
		 * tree follows a strict byte-based progressive fanout
		 * structure (i.e. using 2/38, 2/2/36, etc. fanouts, and not
		 * e.g. 4/36 fanout). This means that if a non-note is found at
		 * path "dead/beef", the following code will register it as
		 * being found on "de/ad/beef".
		 * On the other hand, if you use such non-obvious non-note
		 * paths in the middle of a notes tree, you deserve what's
		 * coming to you ;). Note that for non-notes that are not
		 * SHA1-like at the top level, there will be no problems.
		 *
		 * To conclude, it is strongly advised to make sure non-notes
		 * have at least one non-hex character in the top-level path
		 * component.
		 */</comment>
		<block pos:line="75" pos:column="17">{
			<decl_stmt><decl><type><name><name pos:line="76" pos:column="25">struct<pos:position pos:line="76" pos:column="31"/></name> <name pos:line="76" pos:column="32">strbuf<pos:position pos:line="76" pos:column="38"/></name></name></type> <name pos:line="76" pos:column="39">non_note_path<pos:position pos:line="76" pos:column="52"/></name> <init pos:line="76" pos:column="53">= <expr><name pos:line="76" pos:column="55">STRBUF_INIT<pos:position pos:line="76" pos:column="66"/></name></expr></init></decl>;<pos:position pos:line="76" pos:column="67"/></decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="77" pos:column="25">const<pos:position pos:line="77" pos:column="30"/></specifier> <name pos:line="77" pos:column="31">char<pos:position pos:line="77" pos:column="35"/></name> <modifier pos:line="77" pos:column="36">*<pos:position pos:line="77" pos:column="37"/></modifier></type><name pos:line="77" pos:column="37">q<pos:position pos:line="77" pos:column="38"/></name> <init pos:line="77" pos:column="39">= <expr><call><name pos:line="77" pos:column="41">sha1_to_hex<pos:position pos:line="77" pos:column="52"/></name><argument_list pos:line="77" pos:column="52">(<argument><expr><name><name pos:line="77" pos:column="53">subtree<pos:position pos:line="77" pos:column="60"/></name><operator pos:line="77" pos:column="60">-&gt;<pos:position pos:line="77" pos:column="65"/></operator><name pos:line="77" pos:column="62">key_sha1<pos:position pos:line="77" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="77" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="77" pos:column="72"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="78" pos:column="25">int<pos:position pos:line="78" pos:column="28"/></name></type> <name pos:line="78" pos:column="29">i<pos:position pos:line="78" pos:column="30"/></name></decl>;<pos:position pos:line="78" pos:column="31"/></decl_stmt>
			<for pos:line="79" pos:column="25">for <control pos:line="79" pos:column="29">(<init><expr><name pos:line="79" pos:column="30">i<pos:position pos:line="79" pos:column="31"/></name> <operator pos:line="79" pos:column="32">=<pos:position pos:line="79" pos:column="33"/></operator> <literal type="number" pos:line="79" pos:column="34">0<pos:position pos:line="79" pos:column="35"/></literal></expr>;<pos:position pos:line="79" pos:column="36"/></init> <condition><expr><name pos:line="79" pos:column="37">i<pos:position pos:line="79" pos:column="38"/></name> <operator pos:line="79" pos:column="39">&lt;<pos:position pos:line="79" pos:column="43"/></operator> <name pos:line="79" pos:column="41">prefix_len<pos:position pos:line="79" pos:column="51"/></name></expr>;<pos:position pos:line="79" pos:column="52"/></condition> <incr><expr><name pos:line="79" pos:column="53">i<pos:position pos:line="79" pos:column="54"/></name><operator pos:line="79" pos:column="54">++<pos:position pos:line="79" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="79" pos:column="57"/></control> <block pos:line="79" pos:column="58">{
				<expr_stmt><expr><call><name pos:line="80" pos:column="33">strbuf_addch<pos:position pos:line="80" pos:column="45"/></name><argument_list pos:line="80" pos:column="45">(<argument><expr><operator pos:line="80" pos:column="46">&amp;<pos:position pos:line="80" pos:column="51"/></operator><name pos:line="80" pos:column="47">non_note_path<pos:position pos:line="80" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="62">*<pos:position pos:line="80" pos:column="63"/></operator><name pos:line="80" pos:column="63">q<pos:position pos:line="80" pos:column="64"/></name><operator pos:line="80" pos:column="64">++<pos:position pos:line="80" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="80" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="68"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="81" pos:column="33">strbuf_addch<pos:position pos:line="81" pos:column="45"/></name><argument_list pos:line="81" pos:column="45">(<argument><expr><operator pos:line="81" pos:column="46">&amp;<pos:position pos:line="81" pos:column="51"/></operator><name pos:line="81" pos:column="47">non_note_path<pos:position pos:line="81" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="62">*<pos:position pos:line="81" pos:column="63"/></operator><name pos:line="81" pos:column="63">q<pos:position pos:line="81" pos:column="64"/></name><operator pos:line="81" pos:column="64">++<pos:position pos:line="81" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="81" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="68"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="82" pos:column="33">strbuf_addch<pos:position pos:line="82" pos:column="45"/></name><argument_list pos:line="82" pos:column="45">(<argument><expr><operator pos:line="82" pos:column="46">&amp;<pos:position pos:line="82" pos:column="51"/></operator><name pos:line="82" pos:column="47">non_note_path<pos:position pos:line="82" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="82" pos:column="62">'/'<pos:position pos:line="82" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="67"/></expr_stmt>
			}<pos:position pos:line="83" pos:column="26"/></block></for>
			<expr_stmt><expr><call><name pos:line="84" pos:column="25">strbuf_addstr<pos:position pos:line="84" pos:column="38"/></name><argument_list pos:line="84" pos:column="38">(<argument><expr><operator pos:line="84" pos:column="39">&amp;<pos:position pos:line="84" pos:column="44"/></operator><name pos:line="84" pos:column="40">non_note_path<pos:position pos:line="84" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="55">entry<pos:position pos:line="84" pos:column="60"/></name><operator pos:line="84" pos:column="60">.<pos:position pos:line="84" pos:column="61"/></operator><name pos:line="84" pos:column="61">path<pos:position pos:line="84" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="85" pos:column="25">add_non_note<pos:position pos:line="85" pos:column="37"/></name><argument_list pos:line="85" pos:column="37">(<argument><expr><name pos:line="85" pos:column="38">t<pos:position pos:line="85" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="85" pos:column="41">strbuf_detach<pos:position pos:line="85" pos:column="54"/></name><argument_list pos:line="85" pos:column="54">(<argument><expr><operator pos:line="85" pos:column="55">&amp;<pos:position pos:line="85" pos:column="60"/></operator><name pos:line="85" pos:column="56">non_note_path<pos:position pos:line="85" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="71">NULL<pos:position pos:line="85" pos:column="75"/></name></expr></argument>)<pos:position pos:line="85" pos:column="76"/></argument_list></call></expr></argument>,
				     <argument><expr><name><name pos:line="86" pos:column="38">entry<pos:position pos:line="86" pos:column="43"/></name><operator pos:line="86" pos:column="43">.<pos:position pos:line="86" pos:column="44"/></operator><name pos:line="86" pos:column="44">mode<pos:position pos:line="86" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="50">entry<pos:position pos:line="86" pos:column="55"/></name><operator pos:line="86" pos:column="55">.<pos:position pos:line="86" pos:column="56"/></operator><name pos:line="86" pos:column="56">sha1<pos:position pos:line="86" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="87" pos:column="18"/></block>
	}<pos:position pos:line="88" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="89" pos:column="9">free<pos:position pos:line="89" pos:column="13"/></name><argument_list pos:line="89" pos:column="13">(<argument><expr><name pos:line="89" pos:column="14">buf<pos:position pos:line="89" pos:column="17"/></name></expr></argument>)<pos:position pos:line="89" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="19"/></expr_stmt>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
