<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2437_git-2.7.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">subst_from_stdin<pos:position pos:line="2" pos:column="17"/></name> <parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">void<pos:position pos:line="2" pos:column="23"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="4" pos:column="3">static<pos:position pos:line="4" pos:column="9"/></specifier> <type><name pos:line="4" pos:column="10">char<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">buffer<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="5" pos:column="3">static<pos:position pos:line="5" pos:column="9"/></specifier> <type><name pos:line="5" pos:column="10">size_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">bufmax<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="6" pos:column="3">static<pos:position pos:line="6" pos:column="9"/></specifier> <type><name pos:line="6" pos:column="10">size_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">buflen<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">c<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>

  <for pos:line="9" pos:column="3">for <control pos:line="9" pos:column="7">(<init pos:line="9" pos:column="8">;<pos:position pos:line="9" pos:column="9"/></init><condition pos:line="9" pos:column="9">;<pos:position pos:line="9" pos:column="10"/></condition><incr/>)<pos:position pos:line="9" pos:column="11"/></control>
    <block pos:line="10" pos:column="5">{
      <expr_stmt><expr><name pos:line="11" pos:column="7">c<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <call><name pos:line="11" pos:column="11">do_getc<pos:position pos:line="11" pos:column="18"/></name> <argument_list pos:line="11" pos:column="19">()<pos:position pos:line="11" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
      <if pos:line="12" pos:column="7">if <condition pos:line="12" pos:column="10">(<expr><name pos:line="12" pos:column="11">c<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">==<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">EOF<pos:position pos:line="12" pos:column="19"/></name></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20">
	<block type="pseudo"><break pos:line="13" pos:column="9">break;<pos:position pos:line="13" pos:column="15"/></break></block></then></if>
      <comment type="block" pos:line="14" pos:column="7">/* Look for $VARIABLE or ${VARIABLE}.  */</comment>
      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><name pos:line="15" pos:column="11">c<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">==<pos:position pos:line="15" pos:column="15"/></operator> <literal type="char" pos:line="15" pos:column="16">'$'<pos:position pos:line="15" pos:column="19"/></literal></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20">
	<block pos:line="16" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="17" pos:column="11">unsigned<pos:position pos:line="17" pos:column="19"/></name> <name pos:line="17" pos:column="20">short<pos:position pos:line="17" pos:column="25"/></name> <name pos:line="17" pos:column="26">int<pos:position pos:line="17" pos:column="29"/></name></type> <name pos:line="17" pos:column="30">opening_brace<pos:position pos:line="17" pos:column="43"/></name> <init pos:line="17" pos:column="44">= <expr><literal type="number" pos:line="17" pos:column="46">0<pos:position pos:line="17" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="48"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="18" pos:column="11">unsigned<pos:position pos:line="18" pos:column="19"/></name> <name pos:line="18" pos:column="20">short<pos:position pos:line="18" pos:column="25"/></name> <name pos:line="18" pos:column="26">int<pos:position pos:line="18" pos:column="29"/></name></type> <name pos:line="18" pos:column="30">closing_brace<pos:position pos:line="18" pos:column="43"/></name> <init pos:line="18" pos:column="44">= <expr><literal type="number" pos:line="18" pos:column="46">0<pos:position pos:line="18" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="48"/></decl_stmt>

	  <expr_stmt><expr><name pos:line="20" pos:column="11">c<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <call><name pos:line="20" pos:column="15">do_getc<pos:position pos:line="20" pos:column="22"/></name> <argument_list pos:line="20" pos:column="23">()<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
	  <if pos:line="21" pos:column="11">if <condition pos:line="21" pos:column="14">(<expr><name pos:line="21" pos:column="15">c<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">==<pos:position pos:line="21" pos:column="19"/></operator> <literal type="char" pos:line="21" pos:column="20">'{'<pos:position pos:line="21" pos:column="23"/></literal></expr>)<pos:position pos:line="21" pos:column="24"/></condition><then pos:line="21" pos:column="24">
	    <block pos:line="22" pos:column="13">{
	      <expr_stmt><expr><name pos:line="23" pos:column="15">opening_brace<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">=<pos:position pos:line="23" pos:column="30"/></operator> <literal type="number" pos:line="23" pos:column="31">1<pos:position pos:line="23" pos:column="32"/></literal></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="24" pos:column="15">c<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <call><name pos:line="24" pos:column="19">do_getc<pos:position pos:line="24" pos:column="26"/></name> <argument_list pos:line="24" pos:column="27">()<pos:position pos:line="24" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
	    }<pos:position pos:line="25" pos:column="14"/></block></then></if>
	  <if pos:line="26" pos:column="11">if <condition pos:line="26" pos:column="14">(<expr><operator pos:line="26" pos:column="15">(<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">c<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">&gt;=<pos:position pos:line="26" pos:column="23"/></operator> <literal type="char" pos:line="26" pos:column="21">'A'<pos:position pos:line="26" pos:column="24"/></literal> <operator pos:line="26" pos:column="25">&amp;&amp;<pos:position pos:line="26" pos:column="35"/></operator> <name pos:line="26" pos:column="28">c<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">&lt;=<pos:position pos:line="26" pos:column="35"/></operator> <literal type="char" pos:line="26" pos:column="33">'Z'<pos:position pos:line="26" pos:column="36"/></literal><operator pos:line="26" pos:column="36">)<pos:position pos:line="26" pos:column="37"/></operator> <operator pos:line="26" pos:column="38">||<pos:position pos:line="26" pos:column="40"/></operator> <operator pos:line="26" pos:column="41">(<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="42">c<pos:position pos:line="26" pos:column="43"/></name> <operator pos:line="26" pos:column="44">&gt;=<pos:position pos:line="26" pos:column="49"/></operator> <literal type="char" pos:line="26" pos:column="47">'a'<pos:position pos:line="26" pos:column="50"/></literal> <operator pos:line="26" pos:column="51">&amp;&amp;<pos:position pos:line="26" pos:column="61"/></operator> <name pos:line="26" pos:column="54">c<pos:position pos:line="26" pos:column="55"/></name> <operator pos:line="26" pos:column="56">&lt;=<pos:position pos:line="26" pos:column="61"/></operator> <literal type="char" pos:line="26" pos:column="59">'z'<pos:position pos:line="26" pos:column="62"/></literal><operator pos:line="26" pos:column="62">)<pos:position pos:line="26" pos:column="63"/></operator> <operator pos:line="26" pos:column="64">||<pos:position pos:line="26" pos:column="66"/></operator> <name pos:line="26" pos:column="67">c<pos:position pos:line="26" pos:column="68"/></name> <operator pos:line="26" pos:column="69">==<pos:position pos:line="26" pos:column="71"/></operator> <literal type="char" pos:line="26" pos:column="72">'_'<pos:position pos:line="26" pos:column="75"/></literal></expr>)<pos:position pos:line="26" pos:column="76"/></condition><then pos:line="26" pos:column="76">
	    <block pos:line="27" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="28" pos:column="15">unsigned<pos:position pos:line="28" pos:column="23"/></name> <name pos:line="28" pos:column="24">short<pos:position pos:line="28" pos:column="29"/></name> <name pos:line="28" pos:column="30">int<pos:position pos:line="28" pos:column="33"/></name></type> <name pos:line="28" pos:column="34">valid<pos:position pos:line="28" pos:column="39"/></name></decl>;<pos:position pos:line="28" pos:column="40"/></decl_stmt>

	      <comment type="block" pos:line="30" pos:column="15">/* Accumulate the VARIABLE in buffer.  */</comment>
	      <expr_stmt><expr><name pos:line="31" pos:column="15">buflen<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <literal type="number" pos:line="31" pos:column="24">0<pos:position pos:line="31" pos:column="25"/></literal></expr>;<pos:position pos:line="31" pos:column="26"/></expr_stmt>
	      <do pos:line="32" pos:column="15">do
		<block pos:line="33" pos:column="17">{
		  <if pos:line="34" pos:column="19">if <condition pos:line="34" pos:column="22">(<expr><name pos:line="34" pos:column="23">buflen<pos:position pos:line="34" pos:column="29"/></name> <operator pos:line="34" pos:column="30">&gt;=<pos:position pos:line="34" pos:column="35"/></operator> <name pos:line="34" pos:column="33">bufmax<pos:position pos:line="34" pos:column="39"/></name></expr>)<pos:position pos:line="34" pos:column="40"/></condition><then pos:line="34" pos:column="40">
		    <block pos:line="35" pos:column="21">{
		      <expr_stmt><expr><name pos:line="36" pos:column="23">bufmax<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">=<pos:position pos:line="36" pos:column="31"/></operator> <literal type="number" pos:line="36" pos:column="32">2<pos:position pos:line="36" pos:column="33"/></literal> <operator pos:line="36" pos:column="34">*<pos:position pos:line="36" pos:column="35"/></operator> <name pos:line="36" pos:column="36">bufmax<pos:position pos:line="36" pos:column="42"/></name> <operator pos:line="36" pos:column="43">+<pos:position pos:line="36" pos:column="44"/></operator> <literal type="number" pos:line="36" pos:column="45">10<pos:position pos:line="36" pos:column="47"/></literal></expr>;<pos:position pos:line="36" pos:column="48"/></expr_stmt>
		      <expr_stmt><expr><name pos:line="37" pos:column="23">buffer<pos:position pos:line="37" pos:column="29"/></name> <operator pos:line="37" pos:column="30">=<pos:position pos:line="37" pos:column="31"/></operator> <call><name pos:line="37" pos:column="32">xrealloc<pos:position pos:line="37" pos:column="40"/></name> <argument_list pos:line="37" pos:column="41">(<argument><expr><name pos:line="37" pos:column="42">buffer<pos:position pos:line="37" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="50">bufmax<pos:position pos:line="37" pos:column="56"/></name></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="58"/></expr_stmt>
		    }<pos:position pos:line="38" pos:column="22"/></block></then></if>
		  <expr_stmt><expr><name><name pos:line="39" pos:column="19">buffer<pos:position pos:line="39" pos:column="25"/></name><index pos:line="39" pos:column="25">[<expr><name pos:line="39" pos:column="26">buflen<pos:position pos:line="39" pos:column="32"/></name><operator pos:line="39" pos:column="32">++<pos:position pos:line="39" pos:column="34"/></operator></expr>]<pos:position pos:line="39" pos:column="35"/></index></name> <operator pos:line="39" pos:column="36">=<pos:position pos:line="39" pos:column="37"/></operator> <name pos:line="39" pos:column="38">c<pos:position pos:line="39" pos:column="39"/></name></expr>;<pos:position pos:line="39" pos:column="40"/></expr_stmt>

		  <expr_stmt><expr><name pos:line="41" pos:column="19">c<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">=<pos:position pos:line="41" pos:column="22"/></operator> <call><name pos:line="41" pos:column="23">do_getc<pos:position pos:line="41" pos:column="30"/></name> <argument_list pos:line="41" pos:column="31">()<pos:position pos:line="41" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block>
	      while <condition pos:line="43" pos:column="21">(<expr><operator pos:line="43" pos:column="22">(<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">c<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">&gt;=<pos:position pos:line="43" pos:column="30"/></operator> <literal type="char" pos:line="43" pos:column="28">'A'<pos:position pos:line="43" pos:column="31"/></literal> <operator pos:line="43" pos:column="32">&amp;&amp;<pos:position pos:line="43" pos:column="42"/></operator> <name pos:line="43" pos:column="35">c<pos:position pos:line="43" pos:column="36"/></name> <operator pos:line="43" pos:column="37">&lt;=<pos:position pos:line="43" pos:column="42"/></operator> <literal type="char" pos:line="43" pos:column="40">'Z'<pos:position pos:line="43" pos:column="43"/></literal><operator pos:line="43" pos:column="43">)<pos:position pos:line="43" pos:column="44"/></operator> <operator pos:line="43" pos:column="45">||<pos:position pos:line="43" pos:column="47"/></operator> <operator pos:line="43" pos:column="48">(<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="49">c<pos:position pos:line="43" pos:column="50"/></name> <operator pos:line="43" pos:column="51">&gt;=<pos:position pos:line="43" pos:column="56"/></operator> <literal type="char" pos:line="43" pos:column="54">'a'<pos:position pos:line="43" pos:column="57"/></literal> <operator pos:line="43" pos:column="58">&amp;&amp;<pos:position pos:line="43" pos:column="68"/></operator> <name pos:line="43" pos:column="61">c<pos:position pos:line="43" pos:column="62"/></name> <operator pos:line="43" pos:column="63">&lt;=<pos:position pos:line="43" pos:column="68"/></operator> <literal type="char" pos:line="43" pos:column="66">'z'<pos:position pos:line="43" pos:column="69"/></literal><operator pos:line="43" pos:column="69">)<pos:position pos:line="43" pos:column="70"/></operator>
		     <operator pos:line="44" pos:column="22">||<pos:position pos:line="44" pos:column="24"/></operator> <operator pos:line="44" pos:column="25">(<pos:position pos:line="44" pos:column="26"/></operator><name pos:line="44" pos:column="26">c<pos:position pos:line="44" pos:column="27"/></name> <operator pos:line="44" pos:column="28">&gt;=<pos:position pos:line="44" pos:column="33"/></operator> <literal type="char" pos:line="44" pos:column="31">'0'<pos:position pos:line="44" pos:column="34"/></literal> <operator pos:line="44" pos:column="35">&amp;&amp;<pos:position pos:line="44" pos:column="45"/></operator> <name pos:line="44" pos:column="38">c<pos:position pos:line="44" pos:column="39"/></name> <operator pos:line="44" pos:column="40">&lt;=<pos:position pos:line="44" pos:column="45"/></operator> <literal type="char" pos:line="44" pos:column="43">'9'<pos:position pos:line="44" pos:column="46"/></literal><operator pos:line="44" pos:column="46">)<pos:position pos:line="44" pos:column="47"/></operator> <operator pos:line="44" pos:column="48">||<pos:position pos:line="44" pos:column="50"/></operator> <name pos:line="44" pos:column="51">c<pos:position pos:line="44" pos:column="52"/></name> <operator pos:line="44" pos:column="53">==<pos:position pos:line="44" pos:column="55"/></operator> <literal type="char" pos:line="44" pos:column="56">'_'<pos:position pos:line="44" pos:column="59"/></literal></expr>)<pos:position pos:line="44" pos:column="60"/></condition>;<pos:position pos:line="44" pos:column="61"/></do>

	      <if pos:line="46" pos:column="15">if <condition pos:line="46" pos:column="18">(<expr><name pos:line="46" pos:column="19">opening_brace<pos:position pos:line="46" pos:column="32"/></name></expr>)<pos:position pos:line="46" pos:column="33"/></condition><then pos:line="46" pos:column="33">
		<block pos:line="47" pos:column="17">{
		  <if pos:line="48" pos:column="19">if <condition pos:line="48" pos:column="22">(<expr><name pos:line="48" pos:column="23">c<pos:position pos:line="48" pos:column="24"/></name> <operator pos:line="48" pos:column="25">==<pos:position pos:line="48" pos:column="27"/></operator> <literal type="char" pos:line="48" pos:column="28">'}'<pos:position pos:line="48" pos:column="31"/></literal></expr>)<pos:position pos:line="48" pos:column="32"/></condition><then pos:line="48" pos:column="32">
		    <block pos:line="49" pos:column="21">{
		      <expr_stmt><expr><name pos:line="50" pos:column="23">closing_brace<pos:position pos:line="50" pos:column="36"/></name> <operator pos:line="50" pos:column="37">=<pos:position pos:line="50" pos:column="38"/></operator> <literal type="number" pos:line="50" pos:column="39">1<pos:position pos:line="50" pos:column="40"/></literal></expr>;<pos:position pos:line="50" pos:column="41"/></expr_stmt>
		      <expr_stmt><expr><name pos:line="51" pos:column="23">valid<pos:position pos:line="51" pos:column="28"/></name> <operator pos:line="51" pos:column="29">=<pos:position pos:line="51" pos:column="30"/></operator> <literal type="number" pos:line="51" pos:column="31">1<pos:position pos:line="51" pos:column="32"/></literal></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
		    }<pos:position pos:line="52" pos:column="22"/></block></then>
		  <else pos:line="53" pos:column="19">else
		    <block pos:line="54" pos:column="21">{
		      <expr_stmt><expr><name pos:line="55" pos:column="23">valid<pos:position pos:line="55" pos:column="28"/></name> <operator pos:line="55" pos:column="29">=<pos:position pos:line="55" pos:column="30"/></operator> <literal type="number" pos:line="55" pos:column="31">0<pos:position pos:line="55" pos:column="32"/></literal></expr>;<pos:position pos:line="55" pos:column="33"/></expr_stmt>
		      <expr_stmt><expr><call><name pos:line="56" pos:column="23">do_ungetc<pos:position pos:line="56" pos:column="32"/></name> <argument_list pos:line="56" pos:column="33">(<argument><expr><name pos:line="56" pos:column="34">c<pos:position pos:line="56" pos:column="35"/></name></expr></argument>)<pos:position pos:line="56" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="37"/></expr_stmt>
		    }<pos:position pos:line="57" pos:column="22"/></block></else></if>
		}<pos:position pos:line="58" pos:column="18"/></block></then>
	      <else pos:line="59" pos:column="15">else
		<block pos:line="60" pos:column="17">{
		  <expr_stmt><expr><name pos:line="61" pos:column="19">valid<pos:position pos:line="61" pos:column="24"/></name> <operator pos:line="61" pos:column="25">=<pos:position pos:line="61" pos:column="26"/></operator> <literal type="number" pos:line="61" pos:column="27">1<pos:position pos:line="61" pos:column="28"/></literal></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>
		  <expr_stmt><expr><call><name pos:line="62" pos:column="19">do_ungetc<pos:position pos:line="62" pos:column="28"/></name> <argument_list pos:line="62" pos:column="29">(<argument><expr><name pos:line="62" pos:column="30">c<pos:position pos:line="62" pos:column="31"/></name></expr></argument>)<pos:position pos:line="62" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="63" pos:column="18"/></block></else></if>

	      <if pos:line="65" pos:column="15">if <condition pos:line="65" pos:column="18">(<expr><name pos:line="65" pos:column="19">valid<pos:position pos:line="65" pos:column="24"/></name></expr>)<pos:position pos:line="65" pos:column="25"/></condition><then pos:line="65" pos:column="25">
		<block pos:line="66" pos:column="17">{
		  <comment type="block" pos:line="67" pos:column="19">/* Terminate the variable in the buffer.  */</comment>
		  <if pos:line="68" pos:column="19">if <condition pos:line="68" pos:column="22">(<expr><name pos:line="68" pos:column="23">buflen<pos:position pos:line="68" pos:column="29"/></name> <operator pos:line="68" pos:column="30">&gt;=<pos:position pos:line="68" pos:column="35"/></operator> <name pos:line="68" pos:column="33">bufmax<pos:position pos:line="68" pos:column="39"/></name></expr>)<pos:position pos:line="68" pos:column="40"/></condition><then pos:line="68" pos:column="40">
		    <block pos:line="69" pos:column="21">{
		      <expr_stmt><expr><name pos:line="70" pos:column="23">bufmax<pos:position pos:line="70" pos:column="29"/></name> <operator pos:line="70" pos:column="30">=<pos:position pos:line="70" pos:column="31"/></operator> <literal type="number" pos:line="70" pos:column="32">2<pos:position pos:line="70" pos:column="33"/></literal> <operator pos:line="70" pos:column="34">*<pos:position pos:line="70" pos:column="35"/></operator> <name pos:line="70" pos:column="36">bufmax<pos:position pos:line="70" pos:column="42"/></name> <operator pos:line="70" pos:column="43">+<pos:position pos:line="70" pos:column="44"/></operator> <literal type="number" pos:line="70" pos:column="45">10<pos:position pos:line="70" pos:column="47"/></literal></expr>;<pos:position pos:line="70" pos:column="48"/></expr_stmt>
		      <expr_stmt><expr><name pos:line="71" pos:column="23">buffer<pos:position pos:line="71" pos:column="29"/></name> <operator pos:line="71" pos:column="30">=<pos:position pos:line="71" pos:column="31"/></operator> <call><name pos:line="71" pos:column="32">xrealloc<pos:position pos:line="71" pos:column="40"/></name> <argument_list pos:line="71" pos:column="41">(<argument><expr><name pos:line="71" pos:column="42">buffer<pos:position pos:line="71" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="50">bufmax<pos:position pos:line="71" pos:column="56"/></name></expr></argument>)<pos:position pos:line="71" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="58"/></expr_stmt>
		    }<pos:position pos:line="72" pos:column="22"/></block></then></if>
		  <expr_stmt><expr><name><name pos:line="73" pos:column="19">buffer<pos:position pos:line="73" pos:column="25"/></name><index pos:line="73" pos:column="25">[<expr><name pos:line="73" pos:column="26">buflen<pos:position pos:line="73" pos:column="32"/></name></expr>]<pos:position pos:line="73" pos:column="33"/></index></name> <operator pos:line="73" pos:column="34">=<pos:position pos:line="73" pos:column="35"/></operator> <literal type="char" pos:line="73" pos:column="36">'\0'<pos:position pos:line="73" pos:column="40"/></literal></expr>;<pos:position pos:line="73" pos:column="41"/></expr_stmt>

		  <comment type="block" pos:line="75" pos:column="19">/* Test whether the variable shall be substituted.  */</comment>
		  <if pos:line="76" pos:column="19">if <condition pos:line="76" pos:column="22">(<expr><operator pos:line="76" pos:column="23">!<pos:position pos:line="76" pos:column="24"/></operator><name pos:line="76" pos:column="24">all_variables<pos:position pos:line="76" pos:column="37"/></name>
		      <operator pos:line="77" pos:column="23">&amp;&amp;<pos:position pos:line="77" pos:column="33"/></operator> <operator pos:line="77" pos:column="26">!<pos:position pos:line="77" pos:column="27"/></operator><call><name pos:line="77" pos:column="27">sorted_string_list_member<pos:position pos:line="77" pos:column="52"/></name> <argument_list pos:line="77" pos:column="53">(<argument><expr><operator pos:line="77" pos:column="54">&amp;<pos:position pos:line="77" pos:column="59"/></operator><name pos:line="77" pos:column="55">variables_set<pos:position pos:line="77" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="70">buffer<pos:position pos:line="77" pos:column="76"/></name></expr></argument>)<pos:position pos:line="77" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="78"/></condition><then pos:line="77" pos:column="78">
		    <block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="21">valid<pos:position pos:line="78" pos:column="26"/></name> <operator pos:line="78" pos:column="27">=<pos:position pos:line="78" pos:column="28"/></operator> <literal type="number" pos:line="78" pos:column="29">0<pos:position pos:line="78" pos:column="30"/></literal></expr>;<pos:position pos:line="78" pos:column="31"/></expr_stmt></block></then></if>
		}<pos:position pos:line="79" pos:column="18"/></block></then></if>

	      <if pos:line="81" pos:column="15">if <condition pos:line="81" pos:column="18">(<expr><name pos:line="81" pos:column="19">valid<pos:position pos:line="81" pos:column="24"/></name></expr>)<pos:position pos:line="81" pos:column="25"/></condition><then pos:line="81" pos:column="25">
		<block pos:line="82" pos:column="17">{
		  <comment type="block" pos:line="83" pos:column="19">/* Substitute the variable's value from the environment.  */</comment>
		  <decl_stmt><decl><type><specifier pos:line="84" pos:column="19">const<pos:position pos:line="84" pos:column="24"/></specifier> <name pos:line="84" pos:column="25">char<pos:position pos:line="84" pos:column="29"/></name> <modifier pos:line="84" pos:column="30">*<pos:position pos:line="84" pos:column="31"/></modifier></type><name pos:line="84" pos:column="31">env_value<pos:position pos:line="84" pos:column="40"/></name> <init pos:line="84" pos:column="41">= <expr><call><name pos:line="84" pos:column="43">getenv<pos:position pos:line="84" pos:column="49"/></name> <argument_list pos:line="84" pos:column="50">(<argument><expr><name pos:line="84" pos:column="51">buffer<pos:position pos:line="84" pos:column="57"/></name></expr></argument>)<pos:position pos:line="84" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="84" pos:column="59"/></decl_stmt>

		  <if pos:line="86" pos:column="19">if <condition pos:line="86" pos:column="22">(<expr><name pos:line="86" pos:column="23">env_value<pos:position pos:line="86" pos:column="32"/></name> <operator pos:line="86" pos:column="33">!=<pos:position pos:line="86" pos:column="35"/></operator> <name pos:line="86" pos:column="36">NULL<pos:position pos:line="86" pos:column="40"/></name></expr>)<pos:position pos:line="86" pos:column="41"/></condition><then pos:line="86" pos:column="41">
		    <block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="21">fputs<pos:position pos:line="87" pos:column="26"/></name> <argument_list pos:line="87" pos:column="27">(<argument><expr><name pos:line="87" pos:column="28">env_value<pos:position pos:line="87" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="39">stdout<pos:position pos:line="87" pos:column="45"/></name></expr></argument>)<pos:position pos:line="87" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="47"/></expr_stmt></block></then></if>
		}<pos:position pos:line="88" pos:column="18"/></block></then>
	      <else pos:line="89" pos:column="15">else
		<block pos:line="90" pos:column="17">{
		  <comment type="block" pos:line="91" pos:column="19">/* Perform no substitution at all.  Since the buffered input
		     contains no other '$' than at the start, we can just
		     output all the buffered contents.  */</comment>
		  <expr_stmt><expr><call><name pos:line="94" pos:column="19">putchar<pos:position pos:line="94" pos:column="26"/></name> <argument_list pos:line="94" pos:column="27">(<argument><expr><literal type="char" pos:line="94" pos:column="28">'$'<pos:position pos:line="94" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="33"/></expr_stmt>
		  <if pos:line="95" pos:column="19">if <condition pos:line="95" pos:column="22">(<expr><name pos:line="95" pos:column="23">opening_brace<pos:position pos:line="95" pos:column="36"/></name></expr>)<pos:position pos:line="95" pos:column="37"/></condition><then pos:line="95" pos:column="37">
		    <block type="pseudo"><expr_stmt><expr><call><name pos:line="96" pos:column="21">putchar<pos:position pos:line="96" pos:column="28"/></name> <argument_list pos:line="96" pos:column="29">(<argument><expr><literal type="char" pos:line="96" pos:column="30">'{'<pos:position pos:line="96" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="35"/></expr_stmt></block></then></if>
		  <expr_stmt><expr><call><name pos:line="97" pos:column="19">fwrite<pos:position pos:line="97" pos:column="25"/></name> <argument_list pos:line="97" pos:column="26">(<argument><expr><name pos:line="97" pos:column="27">buffer<pos:position pos:line="97" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="35">buflen<pos:position pos:line="97" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="97" pos:column="43">1<pos:position pos:line="97" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="46">stdout<pos:position pos:line="97" pos:column="52"/></name></expr></argument>)<pos:position pos:line="97" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="54"/></expr_stmt>
		  <if pos:line="98" pos:column="19">if <condition pos:line="98" pos:column="22">(<expr><name pos:line="98" pos:column="23">closing_brace<pos:position pos:line="98" pos:column="36"/></name></expr>)<pos:position pos:line="98" pos:column="37"/></condition><then pos:line="98" pos:column="37">
		    <block type="pseudo"><expr_stmt><expr><call><name pos:line="99" pos:column="21">putchar<pos:position pos:line="99" pos:column="28"/></name> <argument_list pos:line="99" pos:column="29">(<argument><expr><literal type="char" pos:line="99" pos:column="30">'}'<pos:position pos:line="99" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="35"/></expr_stmt></block></then></if>
		}<pos:position pos:line="100" pos:column="18"/></block></else></if>
	    }<pos:position pos:line="101" pos:column="14"/></block></then>
	  <else pos:line="102" pos:column="11">else
	    <block pos:line="103" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="104" pos:column="15">do_ungetc<pos:position pos:line="104" pos:column="24"/></name> <argument_list pos:line="104" pos:column="25">(<argument><expr><name pos:line="104" pos:column="26">c<pos:position pos:line="104" pos:column="27"/></name></expr></argument>)<pos:position pos:line="104" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="29"/></expr_stmt>
	      <expr_stmt><expr><call><name pos:line="105" pos:column="15">putchar<pos:position pos:line="105" pos:column="22"/></name> <argument_list pos:line="105" pos:column="23">(<argument><expr><literal type="char" pos:line="105" pos:column="24">'$'<pos:position pos:line="105" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="29"/></expr_stmt>
	      <if pos:line="106" pos:column="15">if <condition pos:line="106" pos:column="18">(<expr><name pos:line="106" pos:column="19">opening_brace<pos:position pos:line="106" pos:column="32"/></name></expr>)<pos:position pos:line="106" pos:column="33"/></condition><then pos:line="106" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="107" pos:column="17">putchar<pos:position pos:line="107" pos:column="24"/></name> <argument_list pos:line="107" pos:column="25">(<argument><expr><literal type="char" pos:line="107" pos:column="26">'{'<pos:position pos:line="107" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="31"/></expr_stmt></block></then></if>
	    }<pos:position pos:line="108" pos:column="14"/></block></else></if>
	}<pos:position pos:line="109" pos:column="10"/></block></then>
      <else pos:line="110" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="9">putchar<pos:position pos:line="111" pos:column="16"/></name> <argument_list pos:line="111" pos:column="17">(<argument><expr><name pos:line="111" pos:column="18">c<pos:position pos:line="111" pos:column="19"/></name></expr></argument>)<pos:position pos:line="111" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="21"/></expr_stmt></block></else></if>
    }<pos:position pos:line="112" pos:column="6"/></block></for>
}<pos:position pos:line="113" pos:column="2"/></block></function></unit>
