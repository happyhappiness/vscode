<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5403_git-2.10.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_clone<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">int<pos:position pos:line="1" pos:column="18"/></name></type> <name pos:line="1" pos:column="19">argc<pos:position pos:line="1" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier><modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">argv<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">prefix<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">is_bundle<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><literal type="number" pos:line="3" pos:column="25">0<pos:position pos:line="3" pos:column="26"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="28">is_local<pos:position pos:line="3" pos:column="36"/></name></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">stat<pos:position pos:line="4" pos:column="20"/></name></name></type> <name pos:line="4" pos:column="21">buf<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">repo_name<pos:position pos:line="5" pos:column="30"/></name></decl>, <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="33">repo<pos:position pos:line="5" pos:column="37"/></name></decl>, <modifier pos:line="5" pos:column="39">*<pos:position pos:line="5" pos:column="40"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="40">work_tree<pos:position pos:line="5" pos:column="49"/></name></decl>, <modifier pos:line="5" pos:column="51">*<pos:position pos:line="5" pos:column="52"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="52">git_dir<pos:position pos:line="5" pos:column="59"/></name></decl>;<pos:position pos:line="5" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">path<pos:position pos:line="6" pos:column="19"/></name></decl>, <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="22">dir<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">dest_exists<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name><name pos:line="8" pos:column="15">struct<pos:position pos:line="8" pos:column="21"/></name> <name pos:line="8" pos:column="22">ref<pos:position pos:line="8" pos:column="25"/></name></name> <modifier pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></modifier></type><name pos:line="8" pos:column="27">refs<pos:position pos:line="8" pos:column="31"/></name></decl>, <modifier pos:line="8" pos:column="33">*<pos:position pos:line="8" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="8" pos:column="34">remote_head<pos:position pos:line="8" pos:column="45"/></name></decl>;<pos:position pos:line="8" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name><name pos:line="9" pos:column="15">struct<pos:position pos:line="9" pos:column="21"/></name> <name pos:line="9" pos:column="22">ref<pos:position pos:line="9" pos:column="25"/></name></name> <modifier pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></modifier></type><name pos:line="9" pos:column="27">remote_head_points_at<pos:position pos:line="9" pos:column="48"/></name></decl>;<pos:position pos:line="9" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name><name pos:line="10" pos:column="15">struct<pos:position pos:line="10" pos:column="21"/></name> <name pos:line="10" pos:column="22">ref<pos:position pos:line="10" pos:column="25"/></name></name> <modifier pos:line="10" pos:column="26">*<pos:position pos:line="10" pos:column="27"/></modifier></type><name pos:line="10" pos:column="27">our_head_points_at<pos:position pos:line="10" pos:column="45"/></name></decl>;<pos:position pos:line="10" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">ref<pos:position pos:line="11" pos:column="19"/></name></name> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">mapped_refs<pos:position pos:line="11" pos:column="32"/></name></decl>;<pos:position pos:line="11" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="12" pos:column="9">const<pos:position pos:line="12" pos:column="14"/></specifier> <name><name pos:line="12" pos:column="15">struct<pos:position pos:line="12" pos:column="21"/></name> <name pos:line="12" pos:column="22">ref<pos:position pos:line="12" pos:column="25"/></name></name> <modifier pos:line="12" pos:column="26">*<pos:position pos:line="12" pos:column="27"/></modifier></type><name pos:line="12" pos:column="27">ref<pos:position pos:line="12" pos:column="30"/></name></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="13" pos:column="9">struct<pos:position pos:line="13" pos:column="15"/></name> <name pos:line="13" pos:column="16">strbuf<pos:position pos:line="13" pos:column="22"/></name></name></type> <name pos:line="13" pos:column="23">key<pos:position pos:line="13" pos:column="26"/></name> <init pos:line="13" pos:column="27">= <expr><name pos:line="13" pos:column="29">STRBUF_INIT<pos:position pos:line="13" pos:column="40"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="42">value<pos:position pos:line="13" pos:column="47"/></name> <init pos:line="13" pos:column="48">= <expr><name pos:line="13" pos:column="50">STRBUF_INIT<pos:position pos:line="13" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="62"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="14" pos:column="9">struct<pos:position pos:line="14" pos:column="15"/></name> <name pos:line="14" pos:column="16">strbuf<pos:position pos:line="14" pos:column="22"/></name></name></type> <name pos:line="14" pos:column="23">branch_top<pos:position pos:line="14" pos:column="33"/></name> <init pos:line="14" pos:column="34">= <expr><name pos:line="14" pos:column="36">STRBUF_INIT<pos:position pos:line="14" pos:column="47"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="14" pos:column="49">reflog_msg<pos:position pos:line="14" pos:column="59"/></name> <init pos:line="14" pos:column="60">= <expr><name pos:line="14" pos:column="62">STRBUF_INIT<pos:position pos:line="14" pos:column="73"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="74"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="15" pos:column="9">struct<pos:position pos:line="15" pos:column="15"/></name> <name pos:line="15" pos:column="16">transport<pos:position pos:line="15" pos:column="25"/></name></name> <modifier pos:line="15" pos:column="26">*<pos:position pos:line="15" pos:column="27"/></modifier></type><name pos:line="15" pos:column="27">transport<pos:position pos:line="15" pos:column="36"/></name> <init pos:line="15" pos:column="37">= <expr><name pos:line="15" pos:column="39">NULL<pos:position pos:line="15" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="16" pos:column="9">const<pos:position pos:line="16" pos:column="14"/></specifier> <name pos:line="16" pos:column="15">char<pos:position pos:line="16" pos:column="19"/></name> <modifier pos:line="16" pos:column="20">*<pos:position pos:line="16" pos:column="21"/></modifier></type><name pos:line="16" pos:column="21">src_ref_prefix<pos:position pos:line="16" pos:column="35"/></name> <init pos:line="16" pos:column="36">= <expr><literal type="string" pos:line="16" pos:column="38">"refs/heads/"<pos:position pos:line="16" pos:column="51"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="17" pos:column="9">struct<pos:position pos:line="17" pos:column="15"/></name> <name pos:line="17" pos:column="16">remote<pos:position pos:line="17" pos:column="22"/></name></name> <modifier pos:line="17" pos:column="23">*<pos:position pos:line="17" pos:column="24"/></modifier></type><name pos:line="17" pos:column="24">remote<pos:position pos:line="17" pos:column="30"/></name></decl>;<pos:position pos:line="17" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">err<pos:position pos:line="18" pos:column="16"/></name> <init pos:line="18" pos:column="17">= <expr><literal type="number" pos:line="18" pos:column="19">0<pos:position pos:line="18" pos:column="20"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="18" pos:column="22">complete_refs_before_fetch<pos:position pos:line="18" pos:column="48"/></name> <init pos:line="18" pos:column="49">= <expr><literal type="number" pos:line="18" pos:column="51">1<pos:position pos:line="18" pos:column="52"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="53"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="20" pos:column="9">struct<pos:position pos:line="20" pos:column="15"/></name> <name pos:line="20" pos:column="16">refspec<pos:position pos:line="20" pos:column="23"/></name></name> <modifier pos:line="20" pos:column="24">*<pos:position pos:line="20" pos:column="25"/></modifier></type><name pos:line="20" pos:column="25">refspec<pos:position pos:line="20" pos:column="32"/></name></decl>;<pos:position pos:line="20" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="21" pos:column="9">const<pos:position pos:line="21" pos:column="14"/></specifier> <name pos:line="21" pos:column="15">char<pos:position pos:line="21" pos:column="19"/></name> <modifier pos:line="21" pos:column="20">*<pos:position pos:line="21" pos:column="21"/></modifier></type><name pos:line="21" pos:column="21">fetch_pattern<pos:position pos:line="21" pos:column="34"/></name></decl>;<pos:position pos:line="21" pos:column="35"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">packet_trace_identity<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><literal type="string" pos:line="23" pos:column="31">"clone"<pos:position pos:line="23" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name pos:line="24" pos:column="9">argc<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <call><name pos:line="24" pos:column="16">parse_options<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">argc<pos:position pos:line="24" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="36">argv<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="42">prefix<pos:position pos:line="24" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="50">builtin_clone_options<pos:position pos:line="24" pos:column="71"/></name></expr></argument>,
			     <argument><expr><name pos:line="25" pos:column="30">builtin_clone_usage<pos:position pos:line="25" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="51">0<pos:position pos:line="25" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="54"/></expr_stmt>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">argc<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">&gt;<pos:position pos:line="27" pos:column="22"/></operator> <literal type="number" pos:line="27" pos:column="20">2<pos:position pos:line="27" pos:column="21"/></literal></expr>)<pos:position pos:line="27" pos:column="22"/></condition><then pos:line="27" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="17">usage_msg_opt<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><call><name pos:line="28" pos:column="31">_<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><literal type="string" pos:line="28" pos:column="33">"Too many arguments."<pos:position pos:line="28" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="29" pos:column="25">builtin_clone_usage<pos:position pos:line="29" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="46">builtin_clone_options<pos:position pos:line="29" pos:column="67"/></name></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="69"/></expr_stmt></block></then></if>

	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">argc<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">==<pos:position pos:line="31" pos:column="20"/></operator> <literal type="number" pos:line="31" pos:column="21">0<pos:position pos:line="31" pos:column="22"/></literal></expr>)<pos:position pos:line="31" pos:column="23"/></condition><then pos:line="31" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="17">usage_msg_opt<pos:position pos:line="32" pos:column="30"/></name><argument_list pos:line="32" pos:column="30">(<argument><expr><call><name pos:line="32" pos:column="31">_<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><literal type="string" pos:line="32" pos:column="33">"You must specify a repository to clone."<pos:position pos:line="32" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="75"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="33" pos:column="25">builtin_clone_usage<pos:position pos:line="33" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="46">builtin_clone_options<pos:position pos:line="33" pos:column="67"/></name></expr></argument>)<pos:position pos:line="33" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="69"/></expr_stmt></block></then></if>

	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">option_single_branch<pos:position pos:line="35" pos:column="33"/></name> <operator pos:line="35" pos:column="34">==<pos:position pos:line="35" pos:column="36"/></operator> <operator pos:line="35" pos:column="37">-<pos:position pos:line="35" pos:column="38"/></operator><literal type="number" pos:line="35" pos:column="38">1<pos:position pos:line="35" pos:column="39"/></literal></expr>)<pos:position pos:line="35" pos:column="40"/></condition><then pos:line="35" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="17">option_single_branch<pos:position pos:line="36" pos:column="37"/></name> <operator pos:line="36" pos:column="38">=<pos:position pos:line="36" pos:column="39"/></operator> <ternary><condition><expr><name pos:line="36" pos:column="40">option_depth<pos:position pos:line="36" pos:column="52"/></name></expr> ?<pos:position pos:line="36" pos:column="54"/></condition><then pos:line="36" pos:column="54"> <expr><literal type="number" pos:line="36" pos:column="55">1<pos:position pos:line="36" pos:column="56"/></literal></expr> <pos:position pos:line="36" pos:column="57"/></then><else pos:line="36" pos:column="57">: <expr><literal type="number" pos:line="36" pos:column="59">0<pos:position pos:line="36" pos:column="60"/></literal></expr></else></ternary></expr>;<pos:position pos:line="36" pos:column="61"/></expr_stmt></block></then></if>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">option_mirror<pos:position pos:line="38" pos:column="26"/></name></expr>)<pos:position pos:line="38" pos:column="27"/></condition><then pos:line="38" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="17">option_bare<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">=<pos:position pos:line="39" pos:column="30"/></operator> <literal type="number" pos:line="39" pos:column="31">1<pos:position pos:line="39" pos:column="32"/></literal></expr>;<pos:position pos:line="39" pos:column="33"/></expr_stmt></block></then></if>

	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">option_bare<pos:position pos:line="41" pos:column="24"/></name></expr>)<pos:position pos:line="41" pos:column="25"/></condition><then pos:line="41" pos:column="25"> <block pos:line="41" pos:column="26">{
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">option_origin<pos:position pos:line="42" pos:column="34"/></name></expr>)<pos:position pos:line="42" pos:column="35"/></condition><then pos:line="42" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="25">die<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><call><name pos:line="43" pos:column="29">_<pos:position pos:line="43" pos:column="30"/></name><argument_list pos:line="43" pos:column="30">(<argument><expr><literal type="string" pos:line="43" pos:column="31">"--bare and --origin %s options are incompatible."<pos:position pos:line="43" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="82"/></argument_list></call></expr></argument>,
			    <argument><expr><name pos:line="44" pos:column="29">option_origin<pos:position pos:line="44" pos:column="42"/></name></expr></argument>)<pos:position pos:line="44" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="44"/></expr_stmt></block></then></if>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">real_git_dir<pos:position pos:line="45" pos:column="33"/></name></expr>)<pos:position pos:line="45" pos:column="34"/></condition><then pos:line="45" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="25">die<pos:position pos:line="46" pos:column="28"/></name><argument_list pos:line="46" pos:column="28">(<argument><expr><call><name pos:line="46" pos:column="29">_<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">(<argument><expr><literal type="string" pos:line="46" pos:column="31">"--bare and --separate-git-dir are incompatible."<pos:position pos:line="46" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="83"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="47" pos:column="17">option_no_checkout<pos:position pos:line="47" pos:column="35"/></name> <operator pos:line="47" pos:column="36">=<pos:position pos:line="47" pos:column="37"/></operator> <literal type="number" pos:line="47" pos:column="38">1<pos:position pos:line="47" pos:column="39"/></literal></expr>;<pos:position pos:line="47" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if>

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">!<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">option_origin<pos:position pos:line="50" pos:column="27"/></name></expr>)<pos:position pos:line="50" pos:column="28"/></condition><then pos:line="50" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="17">option_origin<pos:position pos:line="51" pos:column="30"/></name> <operator pos:line="51" pos:column="31">=<pos:position pos:line="51" pos:column="32"/></operator> <literal type="string" pos:line="51" pos:column="33">"origin"<pos:position pos:line="51" pos:column="41"/></literal></expr>;<pos:position pos:line="51" pos:column="42"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="53" pos:column="9">repo_name<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">=<pos:position pos:line="53" pos:column="20"/></operator> <name><name pos:line="53" pos:column="21">argv<pos:position pos:line="53" pos:column="25"/></name><index pos:line="53" pos:column="25">[<expr><literal type="number" pos:line="53" pos:column="26">0<pos:position pos:line="53" pos:column="27"/></literal></expr>]<pos:position pos:line="53" pos:column="28"/></index></name></expr>;<pos:position pos:line="53" pos:column="29"/></expr_stmt>

	<expr_stmt><expr><name pos:line="55" pos:column="9">path<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <call><name pos:line="55" pos:column="16">get_repo_path<pos:position pos:line="55" pos:column="29"/></name><argument_list pos:line="55" pos:column="29">(<argument><expr><name pos:line="55" pos:column="30">repo_name<pos:position pos:line="55" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="41">&amp;<pos:position pos:line="55" pos:column="46"/></operator><name pos:line="55" pos:column="42">is_bundle<pos:position pos:line="55" pos:column="51"/></name></expr></argument>)<pos:position pos:line="55" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="53"/></expr_stmt>
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">path<pos:position pos:line="56" pos:column="17"/></name></expr>)<pos:position pos:line="56" pos:column="18"/></condition><then pos:line="56" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><name pos:line="57" pos:column="17">repo<pos:position pos:line="57" pos:column="21"/></name> <operator pos:line="57" pos:column="22">=<pos:position pos:line="57" pos:column="23"/></operator> <call><name pos:line="57" pos:column="24">xstrdup<pos:position pos:line="57" pos:column="31"/></name><argument_list pos:line="57" pos:column="31">(<argument><expr><call><name pos:line="57" pos:column="32">absolute_path<pos:position pos:line="57" pos:column="45"/></name><argument_list pos:line="57" pos:column="45">(<argument><expr><name pos:line="57" pos:column="46">repo_name<pos:position pos:line="57" pos:column="55"/></name></expr></argument>)<pos:position pos:line="57" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="58"/></expr_stmt></block></then>
	<elseif pos:line="58" pos:column="9">else <if pos:line="58" pos:column="14">if <condition pos:line="58" pos:column="17">(<expr><operator pos:line="58" pos:column="18">!<pos:position pos:line="58" pos:column="19"/></operator><call><name pos:line="58" pos:column="19">strchr<pos:position pos:line="58" pos:column="25"/></name><argument_list pos:line="58" pos:column="25">(<argument><expr><name pos:line="58" pos:column="26">repo_name<pos:position pos:line="58" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="58" pos:column="37">':'<pos:position pos:line="58" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="42"/></condition><then pos:line="58" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="17">die<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><call><name pos:line="59" pos:column="21">_<pos:position pos:line="59" pos:column="22"/></name><argument_list pos:line="59" pos:column="22">(<argument><expr><literal type="string" pos:line="59" pos:column="23">"repository '%s' does not exist"<pos:position pos:line="59" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="59" pos:column="58">repo_name<pos:position pos:line="59" pos:column="67"/></name></expr></argument>)<pos:position pos:line="59" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="69"/></expr_stmt></block></then></if></elseif>
	<else pos:line="60" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="17">repo<pos:position pos:line="61" pos:column="21"/></name> <operator pos:line="61" pos:column="22">=<pos:position pos:line="61" pos:column="23"/></operator> <name pos:line="61" pos:column="24">repo_name<pos:position pos:line="61" pos:column="33"/></name></expr>;<pos:position pos:line="61" pos:column="34"/></expr_stmt></block></else></if>

	<comment type="block" pos:line="63" pos:column="9">/* no need to be strict, transport_set_option() will validate it again */</comment>
	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name pos:line="64" pos:column="13">option_depth<pos:position pos:line="64" pos:column="25"/></name> <operator pos:line="64" pos:column="26">&amp;&amp;<pos:position pos:line="64" pos:column="36"/></operator> <call><name pos:line="64" pos:column="29">atoi<pos:position pos:line="64" pos:column="33"/></name><argument_list pos:line="64" pos:column="33">(<argument><expr><name pos:line="64" pos:column="34">option_depth<pos:position pos:line="64" pos:column="46"/></name></expr></argument>)<pos:position pos:line="64" pos:column="47"/></argument_list></call> <operator pos:line="64" pos:column="48">&lt;<pos:position pos:line="64" pos:column="52"/></operator> <literal type="number" pos:line="64" pos:column="50">1<pos:position pos:line="64" pos:column="51"/></literal></expr>)<pos:position pos:line="64" pos:column="52"/></condition><then pos:line="64" pos:column="52">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="17">die<pos:position pos:line="65" pos:column="20"/></name><argument_list pos:line="65" pos:column="20">(<argument><expr><call><name pos:line="65" pos:column="21">_<pos:position pos:line="65" pos:column="22"/></name><argument_list pos:line="65" pos:column="22">(<argument><expr><literal type="string" pos:line="65" pos:column="23">"depth %s is not a positive number"<pos:position pos:line="65" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="65" pos:column="61">option_depth<pos:position pos:line="65" pos:column="73"/></name></expr></argument>)<pos:position pos:line="65" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="75"/></expr_stmt></block></then></if>

	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">argc<pos:position pos:line="67" pos:column="17"/></name> <operator pos:line="67" pos:column="18">==<pos:position pos:line="67" pos:column="20"/></operator> <literal type="number" pos:line="67" pos:column="21">2<pos:position pos:line="67" pos:column="22"/></literal></expr>)<pos:position pos:line="67" pos:column="23"/></condition><then pos:line="67" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="17">dir<pos:position pos:line="68" pos:column="20"/></name> <operator pos:line="68" pos:column="21">=<pos:position pos:line="68" pos:column="22"/></operator> <call><name pos:line="68" pos:column="23">xstrdup<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">(<argument><expr><name><name pos:line="68" pos:column="31">argv<pos:position pos:line="68" pos:column="35"/></name><index pos:line="68" pos:column="35">[<expr><literal type="number" pos:line="68" pos:column="36">1<pos:position pos:line="68" pos:column="37"/></literal></expr>]<pos:position pos:line="68" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="68" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="40"/></expr_stmt></block></then>
	<else pos:line="69" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="17">dir<pos:position pos:line="70" pos:column="20"/></name> <operator pos:line="70" pos:column="21">=<pos:position pos:line="70" pos:column="22"/></operator> <call><name pos:line="70" pos:column="23">guess_dir_name<pos:position pos:line="70" pos:column="37"/></name><argument_list pos:line="70" pos:column="37">(<argument><expr><name pos:line="70" pos:column="38">repo_name<pos:position pos:line="70" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="49">is_bundle<pos:position pos:line="70" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="60">option_bare<pos:position pos:line="70" pos:column="71"/></name></expr></argument>)<pos:position pos:line="70" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="73"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">strip_trailing_slashes<pos:position pos:line="71" pos:column="31"/></name><argument_list pos:line="71" pos:column="31">(<argument><expr><name pos:line="71" pos:column="32">dir<pos:position pos:line="71" pos:column="35"/></name></expr></argument>)<pos:position pos:line="71" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><name pos:line="73" pos:column="9">dest_exists<pos:position pos:line="73" pos:column="20"/></name> <operator pos:line="73" pos:column="21">=<pos:position pos:line="73" pos:column="22"/></operator> <operator pos:line="73" pos:column="23">!<pos:position pos:line="73" pos:column="24"/></operator><call><name pos:line="73" pos:column="24">stat<pos:position pos:line="73" pos:column="28"/></name><argument_list pos:line="73" pos:column="28">(<argument><expr><name pos:line="73" pos:column="29">dir<pos:position pos:line="73" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="34">&amp;<pos:position pos:line="73" pos:column="39"/></operator><name pos:line="73" pos:column="35">buf<pos:position pos:line="73" pos:column="38"/></name></expr></argument>)<pos:position pos:line="73" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="40"/></expr_stmt>
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">dest_exists<pos:position pos:line="74" pos:column="24"/></name> <operator pos:line="74" pos:column="25">&amp;&amp;<pos:position pos:line="74" pos:column="35"/></operator> <operator pos:line="74" pos:column="28">!<pos:position pos:line="74" pos:column="29"/></operator><call><name pos:line="74" pos:column="29">is_empty_dir<pos:position pos:line="74" pos:column="41"/></name><argument_list pos:line="74" pos:column="41">(<argument><expr><name pos:line="74" pos:column="42">dir<pos:position pos:line="74" pos:column="45"/></name></expr></argument>)<pos:position pos:line="74" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="47"/></condition><then pos:line="74" pos:column="47">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="17">die<pos:position pos:line="75" pos:column="20"/></name><argument_list pos:line="75" pos:column="20">(<argument><expr><call><name pos:line="75" pos:column="21">_<pos:position pos:line="75" pos:column="22"/></name><argument_list pos:line="75" pos:column="22">(<argument><expr><literal type="string" pos:line="75" pos:column="23">"destination path '%s' already exists and is not "<pos:position pos:line="75" pos:column="73"/></literal>
			<literal type="string" pos:line="76" pos:column="25">"an empty directory."<pos:position pos:line="76" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="76" pos:column="49">dir<pos:position pos:line="76" pos:column="52"/></name></expr></argument>)<pos:position pos:line="76" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="54"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="78" pos:column="9">strbuf_addf<pos:position pos:line="78" pos:column="20"/></name><argument_list pos:line="78" pos:column="20">(<argument><expr><operator pos:line="78" pos:column="21">&amp;<pos:position pos:line="78" pos:column="26"/></operator><name pos:line="78" pos:column="22">reflog_msg<pos:position pos:line="78" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="34">"clone: from %s"<pos:position pos:line="78" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="52">repo<pos:position pos:line="78" pos:column="56"/></name></expr></argument>)<pos:position pos:line="78" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="58"/></expr_stmt>

	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">option_bare<pos:position pos:line="80" pos:column="24"/></name></expr>)<pos:position pos:line="80" pos:column="25"/></condition><then pos:line="80" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><name pos:line="81" pos:column="17">work_tree<pos:position pos:line="81" pos:column="26"/></name> <operator pos:line="81" pos:column="27">=<pos:position pos:line="81" pos:column="28"/></operator> <name pos:line="81" pos:column="29">NULL<pos:position pos:line="81" pos:column="33"/></name></expr>;<pos:position pos:line="81" pos:column="34"/></expr_stmt></block></then>
	<else pos:line="82" pos:column="9">else <block pos:line="82" pos:column="14">{
		<expr_stmt><expr><name pos:line="83" pos:column="17">work_tree<pos:position pos:line="83" pos:column="26"/></name> <operator pos:line="83" pos:column="27">=<pos:position pos:line="83" pos:column="28"/></operator> <call><name pos:line="83" pos:column="29">getenv<pos:position pos:line="83" pos:column="35"/></name><argument_list pos:line="83" pos:column="35">(<argument><expr><literal type="string" pos:line="83" pos:column="36">"GIT_WORK_TREE"<pos:position pos:line="83" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="53"/></expr_stmt>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name pos:line="84" pos:column="21">work_tree<pos:position pos:line="84" pos:column="30"/></name> <operator pos:line="84" pos:column="31">&amp;&amp;<pos:position pos:line="84" pos:column="41"/></operator> <operator pos:line="84" pos:column="34">!<pos:position pos:line="84" pos:column="35"/></operator><call><name pos:line="84" pos:column="35">stat<pos:position pos:line="84" pos:column="39"/></name><argument_list pos:line="84" pos:column="39">(<argument><expr><name pos:line="84" pos:column="40">work_tree<pos:position pos:line="84" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="51">&amp;<pos:position pos:line="84" pos:column="56"/></operator><name pos:line="84" pos:column="52">buf<pos:position pos:line="84" pos:column="55"/></name></expr></argument>)<pos:position pos:line="84" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="57"/></condition><then pos:line="84" pos:column="57">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="25">die<pos:position pos:line="85" pos:column="28"/></name><argument_list pos:line="85" pos:column="28">(<argument><expr><call><name pos:line="85" pos:column="29">_<pos:position pos:line="85" pos:column="30"/></name><argument_list pos:line="85" pos:column="30">(<argument><expr><literal type="string" pos:line="85" pos:column="31">"working tree '%s' already exists."<pos:position pos:line="85" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="85" pos:column="69">work_tree<pos:position pos:line="85" pos:column="78"/></name></expr></argument>)<pos:position pos:line="85" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="80"/></expr_stmt></block></then></if>
	}<pos:position pos:line="86" pos:column="10"/></block></else></if>

	<if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><name pos:line="88" pos:column="13">option_bare<pos:position pos:line="88" pos:column="24"/></name> <operator pos:line="88" pos:column="25">||<pos:position pos:line="88" pos:column="27"/></operator> <name pos:line="88" pos:column="28">work_tree<pos:position pos:line="88" pos:column="37"/></name></expr>)<pos:position pos:line="88" pos:column="38"/></condition><then pos:line="88" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="17">git_dir<pos:position pos:line="89" pos:column="24"/></name> <operator pos:line="89" pos:column="25">=<pos:position pos:line="89" pos:column="26"/></operator> <call><name pos:line="89" pos:column="27">xstrdup<pos:position pos:line="89" pos:column="34"/></name><argument_list pos:line="89" pos:column="34">(<argument><expr><name pos:line="89" pos:column="35">dir<pos:position pos:line="89" pos:column="38"/></name></expr></argument>)<pos:position pos:line="89" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="40"/></expr_stmt></block></then>
	<else pos:line="90" pos:column="9">else <block pos:line="90" pos:column="14">{
		<expr_stmt><expr><name pos:line="91" pos:column="17">work_tree<pos:position pos:line="91" pos:column="26"/></name> <operator pos:line="91" pos:column="27">=<pos:position pos:line="91" pos:column="28"/></operator> <name pos:line="91" pos:column="29">dir<pos:position pos:line="91" pos:column="32"/></name></expr>;<pos:position pos:line="91" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="92" pos:column="17">git_dir<pos:position pos:line="92" pos:column="24"/></name> <operator pos:line="92" pos:column="25">=<pos:position pos:line="92" pos:column="26"/></operator> <call><name pos:line="92" pos:column="27">mkpathdup<pos:position pos:line="92" pos:column="36"/></name><argument_list pos:line="92" pos:column="36">(<argument><expr><literal type="string" pos:line="92" pos:column="37">"%s/.git"<pos:position pos:line="92" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="48">dir<pos:position pos:line="92" pos:column="51"/></name></expr></argument>)<pos:position pos:line="92" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="53"/></expr_stmt>
	}<pos:position pos:line="93" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="95" pos:column="9">atexit<pos:position pos:line="95" pos:column="15"/></name><argument_list pos:line="95" pos:column="15">(<argument><expr><name pos:line="95" pos:column="16">remove_junk<pos:position pos:line="95" pos:column="27"/></name></expr></argument>)<pos:position pos:line="95" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="96" pos:column="9">sigchain_push_common<pos:position pos:line="96" pos:column="29"/></name><argument_list pos:line="96" pos:column="29">(<argument><expr><name pos:line="96" pos:column="30">remove_junk_on_signal<pos:position pos:line="96" pos:column="51"/></name></expr></argument>)<pos:position pos:line="96" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="53"/></expr_stmt>

	<if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><operator pos:line="98" pos:column="13">!<pos:position pos:line="98" pos:column="14"/></operator><name pos:line="98" pos:column="14">option_bare<pos:position pos:line="98" pos:column="25"/></name></expr>)<pos:position pos:line="98" pos:column="26"/></condition><then pos:line="98" pos:column="26"> <block pos:line="98" pos:column="27">{
		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><call><name pos:line="99" pos:column="21">safe_create_leading_directories_const<pos:position pos:line="99" pos:column="58"/></name><argument_list pos:line="99" pos:column="58">(<argument><expr><name pos:line="99" pos:column="59">work_tree<pos:position pos:line="99" pos:column="68"/></name></expr></argument>)<pos:position pos:line="99" pos:column="69"/></argument_list></call> <operator pos:line="99" pos:column="70">&lt;<pos:position pos:line="99" pos:column="74"/></operator> <literal type="number" pos:line="99" pos:column="72">0<pos:position pos:line="99" pos:column="73"/></literal></expr>)<pos:position pos:line="99" pos:column="74"/></condition><then pos:line="99" pos:column="74">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="100" pos:column="25">die_errno<pos:position pos:line="100" pos:column="34"/></name><argument_list pos:line="100" pos:column="34">(<argument><expr><call><name pos:line="100" pos:column="35">_<pos:position pos:line="100" pos:column="36"/></name><argument_list pos:line="100" pos:column="36">(<argument><expr><literal type="string" pos:line="100" pos:column="37">"could not create leading directories of '%s'"<pos:position pos:line="100" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="84"/></argument_list></call></expr></argument>,
				  <argument><expr><name pos:line="101" pos:column="35">work_tree<pos:position pos:line="101" pos:column="44"/></name></expr></argument>)<pos:position pos:line="101" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="46"/></expr_stmt></block></then></if>
		<if pos:line="102" pos:column="17">if <condition pos:line="102" pos:column="20">(<expr><operator pos:line="102" pos:column="21">!<pos:position pos:line="102" pos:column="22"/></operator><name pos:line="102" pos:column="22">dest_exists<pos:position pos:line="102" pos:column="33"/></name> <operator pos:line="102" pos:column="34">&amp;&amp;<pos:position pos:line="102" pos:column="44"/></operator> <call><name pos:line="102" pos:column="37">mkdir<pos:position pos:line="102" pos:column="42"/></name><argument_list pos:line="102" pos:column="42">(<argument><expr><name pos:line="102" pos:column="43">work_tree<pos:position pos:line="102" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="102" pos:column="54">0777<pos:position pos:line="102" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="102" pos:column="60"/></condition><then pos:line="102" pos:column="60">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="103" pos:column="25">die_errno<pos:position pos:line="103" pos:column="34"/></name><argument_list pos:line="103" pos:column="34">(<argument><expr><call><name pos:line="103" pos:column="35">_<pos:position pos:line="103" pos:column="36"/></name><argument_list pos:line="103" pos:column="36">(<argument><expr><literal type="string" pos:line="103" pos:column="37">"could not create work tree dir '%s'"<pos:position pos:line="103" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="75"/></argument_list></call></expr></argument>,
				  <argument><expr><name pos:line="104" pos:column="35">work_tree<pos:position pos:line="104" pos:column="44"/></name></expr></argument>)<pos:position pos:line="104" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="46"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="105" pos:column="17">junk_work_tree<pos:position pos:line="105" pos:column="31"/></name> <operator pos:line="105" pos:column="32">=<pos:position pos:line="105" pos:column="33"/></operator> <name pos:line="105" pos:column="34">work_tree<pos:position pos:line="105" pos:column="43"/></name></expr>;<pos:position pos:line="105" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="106" pos:column="17">set_git_work_tree<pos:position pos:line="106" pos:column="34"/></name><argument_list pos:line="106" pos:column="34">(<argument><expr><name pos:line="106" pos:column="35">work_tree<pos:position pos:line="106" pos:column="44"/></name></expr></argument>)<pos:position pos:line="106" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="107" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="109" pos:column="9">junk_git_dir<pos:position pos:line="109" pos:column="21"/></name> <operator pos:line="109" pos:column="22">=<pos:position pos:line="109" pos:column="23"/></operator> <name pos:line="109" pos:column="24">git_dir<pos:position pos:line="109" pos:column="31"/></name></expr>;<pos:position pos:line="109" pos:column="32"/></expr_stmt>
	<if pos:line="110" pos:column="9">if <condition pos:line="110" pos:column="12">(<expr><call><name pos:line="110" pos:column="13">safe_create_leading_directories_const<pos:position pos:line="110" pos:column="50"/></name><argument_list pos:line="110" pos:column="50">(<argument><expr><name pos:line="110" pos:column="51">git_dir<pos:position pos:line="110" pos:column="58"/></name></expr></argument>)<pos:position pos:line="110" pos:column="59"/></argument_list></call> <operator pos:line="110" pos:column="60">&lt;<pos:position pos:line="110" pos:column="64"/></operator> <literal type="number" pos:line="110" pos:column="62">0<pos:position pos:line="110" pos:column="63"/></literal></expr>)<pos:position pos:line="110" pos:column="64"/></condition><then pos:line="110" pos:column="64">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="17">die<pos:position pos:line="111" pos:column="20"/></name><argument_list pos:line="111" pos:column="20">(<argument><expr><call><name pos:line="111" pos:column="21">_<pos:position pos:line="111" pos:column="22"/></name><argument_list pos:line="111" pos:column="22">(<argument><expr><literal type="string" pos:line="111" pos:column="23">"could not create leading directories of '%s'"<pos:position pos:line="111" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="111" pos:column="72">git_dir<pos:position pos:line="111" pos:column="79"/></name></expr></argument>)<pos:position pos:line="111" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="81"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="113" pos:column="9">set_git_dir_init<pos:position pos:line="113" pos:column="25"/></name><argument_list pos:line="113" pos:column="25">(<argument><expr><name pos:line="113" pos:column="26">git_dir<pos:position pos:line="113" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="35">real_git_dir<pos:position pos:line="113" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="113" pos:column="49">0<pos:position pos:line="113" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="52"/></expr_stmt>
	<if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><name pos:line="114" pos:column="13">real_git_dir<pos:position pos:line="114" pos:column="25"/></name></expr>)<pos:position pos:line="114" pos:column="26"/></condition><then pos:line="114" pos:column="26"> <block pos:line="114" pos:column="27">{
		<expr_stmt><expr><name pos:line="115" pos:column="17">git_dir<pos:position pos:line="115" pos:column="24"/></name> <operator pos:line="115" pos:column="25">=<pos:position pos:line="115" pos:column="26"/></operator> <name pos:line="115" pos:column="27">real_git_dir<pos:position pos:line="115" pos:column="39"/></name></expr>;<pos:position pos:line="115" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name pos:line="116" pos:column="17">junk_git_dir<pos:position pos:line="116" pos:column="29"/></name> <operator pos:line="116" pos:column="30">=<pos:position pos:line="116" pos:column="31"/></operator> <name pos:line="116" pos:column="32">real_git_dir<pos:position pos:line="116" pos:column="44"/></name></expr>;<pos:position pos:line="116" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="117" pos:column="10"/></block></then></if>

	<if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><literal type="number" pos:line="119" pos:column="13">0<pos:position pos:line="119" pos:column="14"/></literal> <operator pos:line="119" pos:column="15">&lt;=<pos:position pos:line="119" pos:column="20"/></operator> <name pos:line="119" pos:column="18">option_verbosity<pos:position pos:line="119" pos:column="34"/></name></expr>)<pos:position pos:line="119" pos:column="35"/></condition><then pos:line="119" pos:column="35"> <block pos:line="119" pos:column="36">{
		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><name pos:line="120" pos:column="21">option_bare<pos:position pos:line="120" pos:column="32"/></name></expr>)<pos:position pos:line="120" pos:column="33"/></condition><then pos:line="120" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="121" pos:column="25">fprintf<pos:position pos:line="121" pos:column="32"/></name><argument_list pos:line="121" pos:column="32">(<argument><expr><name pos:line="121" pos:column="33">stderr<pos:position pos:line="121" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="121" pos:column="41">_<pos:position pos:line="121" pos:column="42"/></name><argument_list pos:line="121" pos:column="42">(<argument><expr><literal type="string" pos:line="121" pos:column="43">"Cloning into bare repository '%s'...\n"<pos:position pos:line="121" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="84"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="121" pos:column="86">dir<pos:position pos:line="121" pos:column="89"/></name></expr></argument>)<pos:position pos:line="121" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="91"/></expr_stmt></block></then>
		<else pos:line="122" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="123" pos:column="25">fprintf<pos:position pos:line="123" pos:column="32"/></name><argument_list pos:line="123" pos:column="32">(<argument><expr><name pos:line="123" pos:column="33">stderr<pos:position pos:line="123" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="123" pos:column="41">_<pos:position pos:line="123" pos:column="42"/></name><argument_list pos:line="123" pos:column="42">(<argument><expr><literal type="string" pos:line="123" pos:column="43">"Cloning into '%s'...\n"<pos:position pos:line="123" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="123" pos:column="70">dir<pos:position pos:line="123" pos:column="73"/></name></expr></argument>)<pos:position pos:line="123" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="75"/></expr_stmt></block></else></if>
	}<pos:position pos:line="124" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="125" pos:column="9">init_db<pos:position pos:line="125" pos:column="16"/></name><argument_list pos:line="125" pos:column="16">(<argument><expr><name pos:line="125" pos:column="17">option_template<pos:position pos:line="125" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="34">INIT_DB_QUIET<pos:position pos:line="125" pos:column="47"/></name></expr></argument>)<pos:position pos:line="125" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="126" pos:column="9">write_config<pos:position pos:line="126" pos:column="21"/></name><argument_list pos:line="126" pos:column="21">(<argument><expr><operator pos:line="126" pos:column="22">&amp;<pos:position pos:line="126" pos:column="27"/></operator><name pos:line="126" pos:column="23">option_config<pos:position pos:line="126" pos:column="36"/></name></expr></argument>)<pos:position pos:line="126" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="38"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="128" pos:column="9">git_config<pos:position pos:line="128" pos:column="19"/></name><argument_list pos:line="128" pos:column="19">(<argument><expr><name pos:line="128" pos:column="20">git_default_config<pos:position pos:line="128" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="40">NULL<pos:position pos:line="128" pos:column="44"/></name></expr></argument>)<pos:position pos:line="128" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="46"/></expr_stmt>

	<if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><name pos:line="130" pos:column="13">option_bare<pos:position pos:line="130" pos:column="24"/></name></expr>)<pos:position pos:line="130" pos:column="25"/></condition><then pos:line="130" pos:column="25"> <block pos:line="130" pos:column="26">{
		<if pos:line="131" pos:column="17">if <condition pos:line="131" pos:column="20">(<expr><name pos:line="131" pos:column="21">option_mirror<pos:position pos:line="131" pos:column="34"/></name></expr>)<pos:position pos:line="131" pos:column="35"/></condition><then pos:line="131" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="132" pos:column="25">src_ref_prefix<pos:position pos:line="132" pos:column="39"/></name> <operator pos:line="132" pos:column="40">=<pos:position pos:line="132" pos:column="41"/></operator> <literal type="string" pos:line="132" pos:column="42">"refs/"<pos:position pos:line="132" pos:column="49"/></literal></expr>;<pos:position pos:line="132" pos:column="50"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="133" pos:column="17">strbuf_addstr<pos:position pos:line="133" pos:column="30"/></name><argument_list pos:line="133" pos:column="30">(<argument><expr><operator pos:line="133" pos:column="31">&amp;<pos:position pos:line="133" pos:column="36"/></operator><name pos:line="133" pos:column="32">branch_top<pos:position pos:line="133" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="44">src_ref_prefix<pos:position pos:line="133" pos:column="58"/></name></expr></argument>)<pos:position pos:line="133" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="60"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="135" pos:column="17">git_config_set<pos:position pos:line="135" pos:column="31"/></name><argument_list pos:line="135" pos:column="31">(<argument><expr><literal type="string" pos:line="135" pos:column="32">"core.bare"<pos:position pos:line="135" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="45">"true"<pos:position pos:line="135" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="53"/></expr_stmt>
	}<pos:position pos:line="136" pos:column="10"/></block></then> <else pos:line="136" pos:column="11">else <block pos:line="136" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="137" pos:column="17">strbuf_addf<pos:position pos:line="137" pos:column="28"/></name><argument_list pos:line="137" pos:column="28">(<argument><expr><operator pos:line="137" pos:column="29">&amp;<pos:position pos:line="137" pos:column="34"/></operator><name pos:line="137" pos:column="30">branch_top<pos:position pos:line="137" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="137" pos:column="42">"refs/remotes/%s/"<pos:position pos:line="137" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="137" pos:column="62">option_origin<pos:position pos:line="137" pos:column="75"/></name></expr></argument>)<pos:position pos:line="137" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="77"/></expr_stmt>
	}<pos:position pos:line="138" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="140" pos:column="9">strbuf_addf<pos:position pos:line="140" pos:column="20"/></name><argument_list pos:line="140" pos:column="20">(<argument><expr><operator pos:line="140" pos:column="21">&amp;<pos:position pos:line="140" pos:column="26"/></operator><name pos:line="140" pos:column="22">value<pos:position pos:line="140" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="140" pos:column="29">"+%s*:%s*"<pos:position pos:line="140" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="140" pos:column="41">src_ref_prefix<pos:position pos:line="140" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="57">branch_top<pos:position pos:line="140" pos:column="67"/></name><operator pos:line="140" pos:column="67">.<pos:position pos:line="140" pos:column="68"/></operator><name pos:line="140" pos:column="68">buf<pos:position pos:line="140" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="140" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="73"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="141" pos:column="9">strbuf_addf<pos:position pos:line="141" pos:column="20"/></name><argument_list pos:line="141" pos:column="20">(<argument><expr><operator pos:line="141" pos:column="21">&amp;<pos:position pos:line="141" pos:column="26"/></operator><name pos:line="141" pos:column="22">key<pos:position pos:line="141" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="27">"remote.%s.url"<pos:position pos:line="141" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="44">option_origin<pos:position pos:line="141" pos:column="57"/></name></expr></argument>)<pos:position pos:line="141" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="142" pos:column="9">git_config_set<pos:position pos:line="142" pos:column="23"/></name><argument_list pos:line="142" pos:column="23">(<argument><expr><name><name pos:line="142" pos:column="24">key<pos:position pos:line="142" pos:column="27"/></name><operator pos:line="142" pos:column="27">.<pos:position pos:line="142" pos:column="28"/></operator><name pos:line="142" pos:column="28">buf<pos:position pos:line="142" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="33">repo<pos:position pos:line="142" pos:column="37"/></name></expr></argument>)<pos:position pos:line="142" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="143" pos:column="9">strbuf_reset<pos:position pos:line="143" pos:column="21"/></name><argument_list pos:line="143" pos:column="21">(<argument><expr><operator pos:line="143" pos:column="22">&amp;<pos:position pos:line="143" pos:column="27"/></operator><name pos:line="143" pos:column="23">key<pos:position pos:line="143" pos:column="26"/></name></expr></argument>)<pos:position pos:line="143" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="28"/></expr_stmt>

	<if pos:line="145" pos:column="9">if <condition pos:line="145" pos:column="12">(<expr><name><name pos:line="145" pos:column="13">option_reference<pos:position pos:line="145" pos:column="29"/></name><operator pos:line="145" pos:column="29">.<pos:position pos:line="145" pos:column="30"/></operator><name pos:line="145" pos:column="30">nr<pos:position pos:line="145" pos:column="32"/></name></name></expr>)<pos:position pos:line="145" pos:column="33"/></condition><then pos:line="145" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="146" pos:column="17">setup_reference<pos:position pos:line="146" pos:column="32"/></name><argument_list pos:line="146" pos:column="32">()<pos:position pos:line="146" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="35"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="148" pos:column="9">fetch_pattern<pos:position pos:line="148" pos:column="22"/></name> <operator pos:line="148" pos:column="23">=<pos:position pos:line="148" pos:column="24"/></operator> <name><name pos:line="148" pos:column="25">value<pos:position pos:line="148" pos:column="30"/></name><operator pos:line="148" pos:column="30">.<pos:position pos:line="148" pos:column="31"/></operator><name pos:line="148" pos:column="31">buf<pos:position pos:line="148" pos:column="34"/></name></name></expr>;<pos:position pos:line="148" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name pos:line="149" pos:column="9">refspec<pos:position pos:line="149" pos:column="16"/></name> <operator pos:line="149" pos:column="17">=<pos:position pos:line="149" pos:column="18"/></operator> <call><name pos:line="149" pos:column="19">parse_fetch_refspec<pos:position pos:line="149" pos:column="38"/></name><argument_list pos:line="149" pos:column="38">(<argument><expr><literal type="number" pos:line="149" pos:column="39">1<pos:position pos:line="149" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="149" pos:column="42">&amp;<pos:position pos:line="149" pos:column="47"/></operator><name pos:line="149" pos:column="43">fetch_pattern<pos:position pos:line="149" pos:column="56"/></name></expr></argument>)<pos:position pos:line="149" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="58"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="151" pos:column="9">strbuf_reset<pos:position pos:line="151" pos:column="21"/></name><argument_list pos:line="151" pos:column="21">(<argument><expr><operator pos:line="151" pos:column="22">&amp;<pos:position pos:line="151" pos:column="27"/></operator><name pos:line="151" pos:column="23">value<pos:position pos:line="151" pos:column="28"/></name></expr></argument>)<pos:position pos:line="151" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="30"/></expr_stmt>

	<expr_stmt><expr><name pos:line="153" pos:column="9">remote<pos:position pos:line="153" pos:column="15"/></name> <operator pos:line="153" pos:column="16">=<pos:position pos:line="153" pos:column="17"/></operator> <call><name pos:line="153" pos:column="18">remote_get<pos:position pos:line="153" pos:column="28"/></name><argument_list pos:line="153" pos:column="28">(<argument><expr><name pos:line="153" pos:column="29">option_origin<pos:position pos:line="153" pos:column="42"/></name></expr></argument>)<pos:position pos:line="153" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name pos:line="154" pos:column="9">transport<pos:position pos:line="154" pos:column="18"/></name> <operator pos:line="154" pos:column="19">=<pos:position pos:line="154" pos:column="20"/></operator> <call><name pos:line="154" pos:column="21">transport_get<pos:position pos:line="154" pos:column="34"/></name><argument_list pos:line="154" pos:column="34">(<argument><expr><name pos:line="154" pos:column="35">remote<pos:position pos:line="154" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="154" pos:column="43">remote<pos:position pos:line="154" pos:column="49"/></name><operator pos:line="154" pos:column="49">-&gt;<pos:position pos:line="154" pos:column="54"/></operator><name pos:line="154" pos:column="51">url<pos:position pos:line="154" pos:column="54"/></name><index pos:line="154" pos:column="54">[<expr><literal type="number" pos:line="154" pos:column="55">0<pos:position pos:line="154" pos:column="56"/></literal></expr>]<pos:position pos:line="154" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="154" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="155" pos:column="9">transport_set_verbosity<pos:position pos:line="155" pos:column="32"/></name><argument_list pos:line="155" pos:column="32">(<argument><expr><name pos:line="155" pos:column="33">transport<pos:position pos:line="155" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="44">option_verbosity<pos:position pos:line="155" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="62">option_progress<pos:position pos:line="155" pos:column="77"/></name></expr></argument>)<pos:position pos:line="155" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="79"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="156" pos:column="9">transport<pos:position pos:line="156" pos:column="18"/></name><operator pos:line="156" pos:column="18">-&gt;<pos:position pos:line="156" pos:column="23"/></operator><name pos:line="156" pos:column="20">family<pos:position pos:line="156" pos:column="26"/></name></name> <operator pos:line="156" pos:column="27">=<pos:position pos:line="156" pos:column="28"/></operator> <name pos:line="156" pos:column="29">family<pos:position pos:line="156" pos:column="35"/></name></expr>;<pos:position pos:line="156" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><name pos:line="158" pos:column="9">path<pos:position pos:line="158" pos:column="13"/></name> <operator pos:line="158" pos:column="14">=<pos:position pos:line="158" pos:column="15"/></operator> <call><name pos:line="158" pos:column="16">get_repo_path<pos:position pos:line="158" pos:column="29"/></name><argument_list pos:line="158" pos:column="29">(<argument><expr><name><name pos:line="158" pos:column="30">remote<pos:position pos:line="158" pos:column="36"/></name><operator pos:line="158" pos:column="36">-&gt;<pos:position pos:line="158" pos:column="41"/></operator><name pos:line="158" pos:column="38">url<pos:position pos:line="158" pos:column="41"/></name><index pos:line="158" pos:column="41">[<expr><literal type="number" pos:line="158" pos:column="42">0<pos:position pos:line="158" pos:column="43"/></literal></expr>]<pos:position pos:line="158" pos:column="44"/></index></name></expr></argument>, <argument><expr><operator pos:line="158" pos:column="46">&amp;<pos:position pos:line="158" pos:column="51"/></operator><name pos:line="158" pos:column="47">is_bundle<pos:position pos:line="158" pos:column="56"/></name></expr></argument>)<pos:position pos:line="158" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="159" pos:column="9">is_local<pos:position pos:line="159" pos:column="17"/></name> <operator pos:line="159" pos:column="18">=<pos:position pos:line="159" pos:column="19"/></operator> <name pos:line="159" pos:column="20">option_local<pos:position pos:line="159" pos:column="32"/></name> <operator pos:line="159" pos:column="33">!=<pos:position pos:line="159" pos:column="35"/></operator> <literal type="number" pos:line="159" pos:column="36">0<pos:position pos:line="159" pos:column="37"/></literal> <operator pos:line="159" pos:column="38">&amp;&amp;<pos:position pos:line="159" pos:column="48"/></operator> <name pos:line="159" pos:column="41">path<pos:position pos:line="159" pos:column="45"/></name> <operator pos:line="159" pos:column="46">&amp;&amp;<pos:position pos:line="159" pos:column="56"/></operator> <operator pos:line="159" pos:column="49">!<pos:position pos:line="159" pos:column="50"/></operator><name pos:line="159" pos:column="50">is_bundle<pos:position pos:line="159" pos:column="59"/></name></expr>;<pos:position pos:line="159" pos:column="60"/></expr_stmt>
	<if pos:line="160" pos:column="9">if <condition pos:line="160" pos:column="12">(<expr><name pos:line="160" pos:column="13">is_local<pos:position pos:line="160" pos:column="21"/></name></expr>)<pos:position pos:line="160" pos:column="22"/></condition><then pos:line="160" pos:column="22"> <block pos:line="160" pos:column="23">{
		<if pos:line="161" pos:column="17">if <condition pos:line="161" pos:column="20">(<expr><name pos:line="161" pos:column="21">option_depth<pos:position pos:line="161" pos:column="33"/></name></expr>)<pos:position pos:line="161" pos:column="34"/></condition><then pos:line="161" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="162" pos:column="25">warning<pos:position pos:line="162" pos:column="32"/></name><argument_list pos:line="162" pos:column="32">(<argument><expr><call><name pos:line="162" pos:column="33">_<pos:position pos:line="162" pos:column="34"/></name><argument_list pos:line="162" pos:column="34">(<argument><expr><literal type="string" pos:line="162" pos:column="35">"--depth is ignored in local clones; use file:// instead."<pos:position pos:line="162" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="162" pos:column="94"/></argument_list></call></expr></argument>)<pos:position pos:line="162" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="96"/></expr_stmt></block></then></if>
		<if pos:line="163" pos:column="17">if <condition pos:line="163" pos:column="20">(<expr><operator pos:line="163" pos:column="21">!<pos:position pos:line="163" pos:column="22"/></operator><call><name pos:line="163" pos:column="22">access<pos:position pos:line="163" pos:column="28"/></name><argument_list pos:line="163" pos:column="28">(<argument><expr><call><name pos:line="163" pos:column="29">mkpath<pos:position pos:line="163" pos:column="35"/></name><argument_list pos:line="163" pos:column="35">(<argument><expr><literal type="string" pos:line="163" pos:column="36">"%s/shallow"<pos:position pos:line="163" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="163" pos:column="50">path<pos:position pos:line="163" pos:column="54"/></name></expr></argument>)<pos:position pos:line="163" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="163" pos:column="57">F_OK<pos:position pos:line="163" pos:column="61"/></name></expr></argument>)<pos:position pos:line="163" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="163" pos:column="63"/></condition><then pos:line="163" pos:column="63"> <block pos:line="163" pos:column="64">{
			<if pos:line="164" pos:column="25">if <condition pos:line="164" pos:column="28">(<expr><name pos:line="164" pos:column="29">option_local<pos:position pos:line="164" pos:column="41"/></name> <operator pos:line="164" pos:column="42">&gt;<pos:position pos:line="164" pos:column="46"/></operator> <literal type="number" pos:line="164" pos:column="44">0<pos:position pos:line="164" pos:column="45"/></literal></expr>)<pos:position pos:line="164" pos:column="46"/></condition><then pos:line="164" pos:column="46">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="165" pos:column="33">warning<pos:position pos:line="165" pos:column="40"/></name><argument_list pos:line="165" pos:column="40">(<argument><expr><call><name pos:line="165" pos:column="41">_<pos:position pos:line="165" pos:column="42"/></name><argument_list pos:line="165" pos:column="42">(<argument><expr><literal type="string" pos:line="165" pos:column="43">"source repository is shallow, ignoring --local"<pos:position pos:line="165" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="165" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="165" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="94"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="166" pos:column="25">is_local<pos:position pos:line="166" pos:column="33"/></name> <operator pos:line="166" pos:column="34">=<pos:position pos:line="166" pos:column="35"/></operator> <literal type="number" pos:line="166" pos:column="36">0<pos:position pos:line="166" pos:column="37"/></literal></expr>;<pos:position pos:line="166" pos:column="38"/></expr_stmt>
		}<pos:position pos:line="167" pos:column="18"/></block></then></if>
	}<pos:position pos:line="168" pos:column="10"/></block></then></if>
	<if pos:line="169" pos:column="9">if <condition pos:line="169" pos:column="12">(<expr><name pos:line="169" pos:column="13">option_local<pos:position pos:line="169" pos:column="25"/></name> <operator pos:line="169" pos:column="26">&gt;<pos:position pos:line="169" pos:column="30"/></operator> <literal type="number" pos:line="169" pos:column="28">0<pos:position pos:line="169" pos:column="29"/></literal> <operator pos:line="169" pos:column="30">&amp;&amp;<pos:position pos:line="169" pos:column="40"/></operator> <operator pos:line="169" pos:column="33">!<pos:position pos:line="169" pos:column="34"/></operator><name pos:line="169" pos:column="34">is_local<pos:position pos:line="169" pos:column="42"/></name></expr>)<pos:position pos:line="169" pos:column="43"/></condition><then pos:line="169" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="170" pos:column="17">warning<pos:position pos:line="170" pos:column="24"/></name><argument_list pos:line="170" pos:column="24">(<argument><expr><call><name pos:line="170" pos:column="25">_<pos:position pos:line="170" pos:column="26"/></name><argument_list pos:line="170" pos:column="26">(<argument><expr><literal type="string" pos:line="170" pos:column="27">"--local is ignored"<pos:position pos:line="170" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="170" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="170" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="50"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="171" pos:column="9">transport<pos:position pos:line="171" pos:column="18"/></name><operator pos:line="171" pos:column="18">-&gt;<pos:position pos:line="171" pos:column="23"/></operator><name pos:line="171" pos:column="20">cloning<pos:position pos:line="171" pos:column="27"/></name></name> <operator pos:line="171" pos:column="28">=<pos:position pos:line="171" pos:column="29"/></operator> <literal type="number" pos:line="171" pos:column="30">1<pos:position pos:line="171" pos:column="31"/></literal></expr>;<pos:position pos:line="171" pos:column="32"/></expr_stmt>

	<if pos:line="173" pos:column="9">if <condition pos:line="173" pos:column="12">(<expr><operator pos:line="173" pos:column="13">!<pos:position pos:line="173" pos:column="14"/></operator><name><name pos:line="173" pos:column="14">transport<pos:position pos:line="173" pos:column="23"/></name><operator pos:line="173" pos:column="23">-&gt;<pos:position pos:line="173" pos:column="28"/></operator><name pos:line="173" pos:column="25">get_refs_list<pos:position pos:line="173" pos:column="38"/></name></name> <operator pos:line="173" pos:column="39">||<pos:position pos:line="173" pos:column="41"/></operator> <operator pos:line="173" pos:column="42">(<pos:position pos:line="173" pos:column="43"/></operator><operator pos:line="173" pos:column="43">!<pos:position pos:line="173" pos:column="44"/></operator><name pos:line="173" pos:column="44">is_local<pos:position pos:line="173" pos:column="52"/></name> <operator pos:line="173" pos:column="53">&amp;&amp;<pos:position pos:line="173" pos:column="63"/></operator> <operator pos:line="173" pos:column="56">!<pos:position pos:line="173" pos:column="57"/></operator><name><name pos:line="173" pos:column="57">transport<pos:position pos:line="173" pos:column="66"/></name><operator pos:line="173" pos:column="66">-&gt;<pos:position pos:line="173" pos:column="71"/></operator><name pos:line="173" pos:column="68">fetch<pos:position pos:line="173" pos:column="73"/></name></name><operator pos:line="173" pos:column="73">)<pos:position pos:line="173" pos:column="74"/></operator></expr>)<pos:position pos:line="173" pos:column="75"/></condition><then pos:line="173" pos:column="75">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="174" pos:column="17">die<pos:position pos:line="174" pos:column="20"/></name><argument_list pos:line="174" pos:column="20">(<argument><expr><call><name pos:line="174" pos:column="21">_<pos:position pos:line="174" pos:column="22"/></name><argument_list pos:line="174" pos:column="22">(<argument><expr><literal type="string" pos:line="174" pos:column="23">"Don't know how to clone %s"<pos:position pos:line="174" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="174" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="174" pos:column="54">transport<pos:position pos:line="174" pos:column="63"/></name><operator pos:line="174" pos:column="63">-&gt;<pos:position pos:line="174" pos:column="68"/></operator><name pos:line="174" pos:column="65">url<pos:position pos:line="174" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="174" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="70"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="176" pos:column="9">transport_set_option<pos:position pos:line="176" pos:column="29"/></name><argument_list pos:line="176" pos:column="29">(<argument><expr><name pos:line="176" pos:column="30">transport<pos:position pos:line="176" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="41">TRANS_OPT_KEEP<pos:position pos:line="176" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="176" pos:column="57">"yes"<pos:position pos:line="176" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="176" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="64"/></expr_stmt>

	<if pos:line="178" pos:column="9">if <condition pos:line="178" pos:column="12">(<expr><name pos:line="178" pos:column="13">option_depth<pos:position pos:line="178" pos:column="25"/></name></expr>)<pos:position pos:line="178" pos:column="26"/></condition><then pos:line="178" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="179" pos:column="17">transport_set_option<pos:position pos:line="179" pos:column="37"/></name><argument_list pos:line="179" pos:column="37">(<argument><expr><name pos:line="179" pos:column="38">transport<pos:position pos:line="179" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="49">TRANS_OPT_DEPTH<pos:position pos:line="179" pos:column="64"/></name></expr></argument>,
				     <argument><expr><name pos:line="180" pos:column="38">option_depth<pos:position pos:line="180" pos:column="50"/></name></expr></argument>)<pos:position pos:line="180" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="52"/></expr_stmt></block></then></if>
	<if pos:line="181" pos:column="9">if <condition pos:line="181" pos:column="12">(<expr><name pos:line="181" pos:column="13">option_single_branch<pos:position pos:line="181" pos:column="33"/></name></expr>)<pos:position pos:line="181" pos:column="34"/></condition><then pos:line="181" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="182" pos:column="17">transport_set_option<pos:position pos:line="182" pos:column="37"/></name><argument_list pos:line="182" pos:column="37">(<argument><expr><name pos:line="182" pos:column="38">transport<pos:position pos:line="182" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="182" pos:column="49">TRANS_OPT_FOLLOWTAGS<pos:position pos:line="182" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="182" pos:column="71">"1"<pos:position pos:line="182" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="182" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="76"/></expr_stmt></block></then></if>

	<if pos:line="184" pos:column="9">if <condition pos:line="184" pos:column="12">(<expr><name pos:line="184" pos:column="13">option_upload_pack<pos:position pos:line="184" pos:column="31"/></name></expr>)<pos:position pos:line="184" pos:column="32"/></condition><then pos:line="184" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="185" pos:column="17">transport_set_option<pos:position pos:line="185" pos:column="37"/></name><argument_list pos:line="185" pos:column="37">(<argument><expr><name pos:line="185" pos:column="38">transport<pos:position pos:line="185" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="185" pos:column="49">TRANS_OPT_UPLOADPACK<pos:position pos:line="185" pos:column="69"/></name></expr></argument>,
				     <argument><expr><name pos:line="186" pos:column="38">option_upload_pack<pos:position pos:line="186" pos:column="56"/></name></expr></argument>)<pos:position pos:line="186" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="58"/></expr_stmt></block></then></if>

	<if pos:line="188" pos:column="9">if <condition pos:line="188" pos:column="12">(<expr><name><name pos:line="188" pos:column="13">transport<pos:position pos:line="188" pos:column="22"/></name><operator pos:line="188" pos:column="22">-&gt;<pos:position pos:line="188" pos:column="27"/></operator><name pos:line="188" pos:column="24">smart_options<pos:position pos:line="188" pos:column="37"/></name></name> <operator pos:line="188" pos:column="38">&amp;&amp;<pos:position pos:line="188" pos:column="48"/></operator> <operator pos:line="188" pos:column="41">!<pos:position pos:line="188" pos:column="42"/></operator><name pos:line="188" pos:column="42">option_depth<pos:position pos:line="188" pos:column="54"/></name></expr>)<pos:position pos:line="188" pos:column="55"/></condition><then pos:line="188" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="189" pos:column="17">transport<pos:position pos:line="189" pos:column="26"/></name><operator pos:line="189" pos:column="26">-&gt;<pos:position pos:line="189" pos:column="31"/></operator><name pos:line="189" pos:column="28">smart_options<pos:position pos:line="189" pos:column="41"/></name><operator pos:line="189" pos:column="41">-&gt;<pos:position pos:line="189" pos:column="46"/></operator><name pos:line="189" pos:column="43">check_self_contained_and_connected<pos:position pos:line="189" pos:column="77"/></name></name> <operator pos:line="189" pos:column="78">=<pos:position pos:line="189" pos:column="79"/></operator> <literal type="number" pos:line="189" pos:column="80">1<pos:position pos:line="189" pos:column="81"/></literal></expr>;<pos:position pos:line="189" pos:column="82"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="191" pos:column="9">refs<pos:position pos:line="191" pos:column="13"/></name> <operator pos:line="191" pos:column="14">=<pos:position pos:line="191" pos:column="15"/></operator> <call><name pos:line="191" pos:column="16">transport_get_remote_refs<pos:position pos:line="191" pos:column="41"/></name><argument_list pos:line="191" pos:column="41">(<argument><expr><name pos:line="191" pos:column="42">transport<pos:position pos:line="191" pos:column="51"/></name></expr></argument>)<pos:position pos:line="191" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="53"/></expr_stmt>

	<if pos:line="193" pos:column="9">if <condition pos:line="193" pos:column="12">(<expr><name pos:line="193" pos:column="13">refs<pos:position pos:line="193" pos:column="17"/></name></expr>)<pos:position pos:line="193" pos:column="18"/></condition><then pos:line="193" pos:column="18"> <block pos:line="193" pos:column="19">{
		<expr_stmt><expr><name pos:line="194" pos:column="17">mapped_refs<pos:position pos:line="194" pos:column="28"/></name> <operator pos:line="194" pos:column="29">=<pos:position pos:line="194" pos:column="30"/></operator> <call><name pos:line="194" pos:column="31">wanted_peer_refs<pos:position pos:line="194" pos:column="47"/></name><argument_list pos:line="194" pos:column="47">(<argument><expr><name pos:line="194" pos:column="48">refs<pos:position pos:line="194" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="54">refspec<pos:position pos:line="194" pos:column="61"/></name></expr></argument>)<pos:position pos:line="194" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="63"/></expr_stmt>
		<comment type="block" pos:line="195" pos:column="17">/*
		 * transport_get_remote_refs() may return refs with null sha-1
		 * in mapped_refs (see struct transport-&gt;get_refs_list
		 * comment). In that case we need fetch it early because
		 * remote_head code below relies on it.
		 *
		 * for normal clones, transport_get_remote_refs() should
		 * return reliable ref set, we can delay cloning until after
		 * remote HEAD check.
		 */</comment>
		<for pos:line="205" pos:column="17">for <control pos:line="205" pos:column="21">(<init><expr><name pos:line="205" pos:column="22">ref<pos:position pos:line="205" pos:column="25"/></name> <operator pos:line="205" pos:column="26">=<pos:position pos:line="205" pos:column="27"/></operator> <name pos:line="205" pos:column="28">refs<pos:position pos:line="205" pos:column="32"/></name></expr>;<pos:position pos:line="205" pos:column="33"/></init> <condition><expr><name pos:line="205" pos:column="34">ref<pos:position pos:line="205" pos:column="37"/></name></expr>;<pos:position pos:line="205" pos:column="38"/></condition> <incr><expr><name pos:line="205" pos:column="39">ref<pos:position pos:line="205" pos:column="42"/></name> <operator pos:line="205" pos:column="43">=<pos:position pos:line="205" pos:column="44"/></operator> <name><name pos:line="205" pos:column="45">ref<pos:position pos:line="205" pos:column="48"/></name><operator pos:line="205" pos:column="48">-&gt;<pos:position pos:line="205" pos:column="53"/></operator><name pos:line="205" pos:column="50">next<pos:position pos:line="205" pos:column="54"/></name></name></expr></incr>)<pos:position pos:line="205" pos:column="55"/></control>
			<block type="pseudo"><if pos:line="206" pos:column="25">if <condition pos:line="206" pos:column="28">(<expr><call><name pos:line="206" pos:column="29">is_null_oid<pos:position pos:line="206" pos:column="40"/></name><argument_list pos:line="206" pos:column="40">(<argument><expr><operator pos:line="206" pos:column="41">&amp;<pos:position pos:line="206" pos:column="46"/></operator><name><name pos:line="206" pos:column="42">ref<pos:position pos:line="206" pos:column="45"/></name><operator pos:line="206" pos:column="45">-&gt;<pos:position pos:line="206" pos:column="50"/></operator><name pos:line="206" pos:column="47">old_oid<pos:position pos:line="206" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="206" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="206" pos:column="56"/></condition><then pos:line="206" pos:column="56"> <block pos:line="206" pos:column="57">{
				<expr_stmt><expr><name pos:line="207" pos:column="33">complete_refs_before_fetch<pos:position pos:line="207" pos:column="59"/></name> <operator pos:line="207" pos:column="60">=<pos:position pos:line="207" pos:column="61"/></operator> <literal type="number" pos:line="207" pos:column="62">0<pos:position pos:line="207" pos:column="63"/></literal></expr>;<pos:position pos:line="207" pos:column="64"/></expr_stmt>
				<break pos:line="208" pos:column="33">break;<pos:position pos:line="208" pos:column="39"/></break>
			}<pos:position pos:line="209" pos:column="26"/></block></then></if></block></for>

		<if pos:line="211" pos:column="17">if <condition pos:line="211" pos:column="20">(<expr><operator pos:line="211" pos:column="21">!<pos:position pos:line="211" pos:column="22"/></operator><name pos:line="211" pos:column="22">is_local<pos:position pos:line="211" pos:column="30"/></name> <operator pos:line="211" pos:column="31">&amp;&amp;<pos:position pos:line="211" pos:column="41"/></operator> <operator pos:line="211" pos:column="34">!<pos:position pos:line="211" pos:column="35"/></operator><name pos:line="211" pos:column="35">complete_refs_before_fetch<pos:position pos:line="211" pos:column="61"/></name></expr>)<pos:position pos:line="211" pos:column="62"/></condition><then pos:line="211" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="212" pos:column="25">transport_fetch_refs<pos:position pos:line="212" pos:column="45"/></name><argument_list pos:line="212" pos:column="45">(<argument><expr><name pos:line="212" pos:column="46">transport<pos:position pos:line="212" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="57">mapped_refs<pos:position pos:line="212" pos:column="68"/></name></expr></argument>)<pos:position pos:line="212" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="70"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="214" pos:column="17">remote_head<pos:position pos:line="214" pos:column="28"/></name> <operator pos:line="214" pos:column="29">=<pos:position pos:line="214" pos:column="30"/></operator> <call><name pos:line="214" pos:column="31">find_ref_by_name<pos:position pos:line="214" pos:column="47"/></name><argument_list pos:line="214" pos:column="47">(<argument><expr><name pos:line="214" pos:column="48">refs<pos:position pos:line="214" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="214" pos:column="54">"HEAD"<pos:position pos:line="214" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="214" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><name pos:line="215" pos:column="17">remote_head_points_at<pos:position pos:line="215" pos:column="38"/></name> <operator pos:line="215" pos:column="39">=<pos:position pos:line="215" pos:column="40"/></operator>
			<call><name pos:line="216" pos:column="25">guess_remote_head<pos:position pos:line="216" pos:column="42"/></name><argument_list pos:line="216" pos:column="42">(<argument><expr><name pos:line="216" pos:column="43">remote_head<pos:position pos:line="216" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="56">mapped_refs<pos:position pos:line="216" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="216" pos:column="69">0<pos:position pos:line="216" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="216" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="72"/></expr_stmt>

		<if pos:line="218" pos:column="17">if <condition pos:line="218" pos:column="20">(<expr><name pos:line="218" pos:column="21">option_branch<pos:position pos:line="218" pos:column="34"/></name></expr>)<pos:position pos:line="218" pos:column="35"/></condition><then pos:line="218" pos:column="35"> <block pos:line="218" pos:column="36">{
			<expr_stmt><expr><name pos:line="219" pos:column="25">our_head_points_at<pos:position pos:line="219" pos:column="43"/></name> <operator pos:line="219" pos:column="44">=<pos:position pos:line="219" pos:column="45"/></operator>
				<call><name pos:line="220" pos:column="33">find_remote_branch<pos:position pos:line="220" pos:column="51"/></name><argument_list pos:line="220" pos:column="51">(<argument><expr><name pos:line="220" pos:column="52">mapped_refs<pos:position pos:line="220" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="220" pos:column="65">option_branch<pos:position pos:line="220" pos:column="78"/></name></expr></argument>)<pos:position pos:line="220" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="80"/></expr_stmt>

			<if pos:line="222" pos:column="25">if <condition pos:line="222" pos:column="28">(<expr><operator pos:line="222" pos:column="29">!<pos:position pos:line="222" pos:column="30"/></operator><name pos:line="222" pos:column="30">our_head_points_at<pos:position pos:line="222" pos:column="48"/></name></expr>)<pos:position pos:line="222" pos:column="49"/></condition><then pos:line="222" pos:column="49">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="223" pos:column="33">die<pos:position pos:line="223" pos:column="36"/></name><argument_list pos:line="223" pos:column="36">(<argument><expr><call><name pos:line="223" pos:column="37">_<pos:position pos:line="223" pos:column="38"/></name><argument_list pos:line="223" pos:column="38">(<argument><expr><literal type="string" pos:line="223" pos:column="39">"Remote branch %s not found in upstream %s"<pos:position pos:line="223" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="223" pos:column="83"/></argument_list></call></expr></argument>,
				    <argument><expr><name pos:line="224" pos:column="37">option_branch<pos:position pos:line="224" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="224" pos:column="52">option_origin<pos:position pos:line="224" pos:column="65"/></name></expr></argument>)<pos:position pos:line="224" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="67"/></expr_stmt></block></then></if>
		}<pos:position pos:line="225" pos:column="18"/></block></then>
		<else pos:line="226" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="227" pos:column="25">our_head_points_at<pos:position pos:line="227" pos:column="43"/></name> <operator pos:line="227" pos:column="44">=<pos:position pos:line="227" pos:column="45"/></operator> <name pos:line="227" pos:column="46">remote_head_points_at<pos:position pos:line="227" pos:column="67"/></name></expr>;<pos:position pos:line="227" pos:column="68"/></expr_stmt></block></else></if>
	}<pos:position pos:line="228" pos:column="10"/></block></then>
	<else pos:line="229" pos:column="9">else <block pos:line="229" pos:column="14">{
		<if pos:line="230" pos:column="17">if <condition pos:line="230" pos:column="20">(<expr><name pos:line="230" pos:column="21">option_branch<pos:position pos:line="230" pos:column="34"/></name></expr>)<pos:position pos:line="230" pos:column="35"/></condition><then pos:line="230" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="231" pos:column="25">die<pos:position pos:line="231" pos:column="28"/></name><argument_list pos:line="231" pos:column="28">(<argument><expr><call><name pos:line="231" pos:column="29">_<pos:position pos:line="231" pos:column="30"/></name><argument_list pos:line="231" pos:column="30">(<argument><expr><literal type="string" pos:line="231" pos:column="31">"Remote branch %s not found in upstream %s"<pos:position pos:line="231" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="231" pos:column="75"/></argument_list></call></expr></argument>,
					<argument><expr><name pos:line="232" pos:column="41">option_branch<pos:position pos:line="232" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="232" pos:column="56">option_origin<pos:position pos:line="232" pos:column="69"/></name></expr></argument>)<pos:position pos:line="232" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="71"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="234" pos:column="17">warning<pos:position pos:line="234" pos:column="24"/></name><argument_list pos:line="234" pos:column="24">(<argument><expr><call><name pos:line="234" pos:column="25">_<pos:position pos:line="234" pos:column="26"/></name><argument_list pos:line="234" pos:column="26">(<argument><expr><literal type="string" pos:line="234" pos:column="27">"You appear to have cloned an empty repository."<pos:position pos:line="234" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="234" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="234" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="78"/></expr_stmt>
		<expr_stmt><expr><name pos:line="235" pos:column="17">mapped_refs<pos:position pos:line="235" pos:column="28"/></name> <operator pos:line="235" pos:column="29">=<pos:position pos:line="235" pos:column="30"/></operator> <name pos:line="235" pos:column="31">NULL<pos:position pos:line="235" pos:column="35"/></name></expr>;<pos:position pos:line="235" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="236" pos:column="17">our_head_points_at<pos:position pos:line="236" pos:column="35"/></name> <operator pos:line="236" pos:column="36">=<pos:position pos:line="236" pos:column="37"/></operator> <name pos:line="236" pos:column="38">NULL<pos:position pos:line="236" pos:column="42"/></name></expr>;<pos:position pos:line="236" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name pos:line="237" pos:column="17">remote_head_points_at<pos:position pos:line="237" pos:column="38"/></name> <operator pos:line="237" pos:column="39">=<pos:position pos:line="237" pos:column="40"/></operator> <name pos:line="237" pos:column="41">NULL<pos:position pos:line="237" pos:column="45"/></name></expr>;<pos:position pos:line="237" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="238" pos:column="17">remote_head<pos:position pos:line="238" pos:column="28"/></name> <operator pos:line="238" pos:column="29">=<pos:position pos:line="238" pos:column="30"/></operator> <name pos:line="238" pos:column="31">NULL<pos:position pos:line="238" pos:column="35"/></name></expr>;<pos:position pos:line="238" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="239" pos:column="17">option_no_checkout<pos:position pos:line="239" pos:column="35"/></name> <operator pos:line="239" pos:column="36">=<pos:position pos:line="239" pos:column="37"/></operator> <literal type="number" pos:line="239" pos:column="38">1<pos:position pos:line="239" pos:column="39"/></literal></expr>;<pos:position pos:line="239" pos:column="40"/></expr_stmt>
		<if pos:line="240" pos:column="17">if <condition pos:line="240" pos:column="20">(<expr><operator pos:line="240" pos:column="21">!<pos:position pos:line="240" pos:column="22"/></operator><name pos:line="240" pos:column="22">option_bare<pos:position pos:line="240" pos:column="33"/></name></expr>)<pos:position pos:line="240" pos:column="34"/></condition><then pos:line="240" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="241" pos:column="25">install_branch_config<pos:position pos:line="241" pos:column="46"/></name><argument_list pos:line="241" pos:column="46">(<argument><expr><literal type="number" pos:line="241" pos:column="47">0<pos:position pos:line="241" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="241" pos:column="50">"master"<pos:position pos:line="241" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="241" pos:column="60">option_origin<pos:position pos:line="241" pos:column="73"/></name></expr></argument>,
					      <argument><expr><literal type="string" pos:line="242" pos:column="47">"refs/heads/master"<pos:position pos:line="242" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="242" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="68"/></expr_stmt></block></then></if>
	}<pos:position pos:line="243" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="245" pos:column="9">write_refspec_config<pos:position pos:line="245" pos:column="29"/></name><argument_list pos:line="245" pos:column="29">(<argument><expr><name pos:line="245" pos:column="30">src_ref_prefix<pos:position pos:line="245" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="245" pos:column="46">our_head_points_at<pos:position pos:line="245" pos:column="64"/></name></expr></argument>,
			<argument><expr><name pos:line="246" pos:column="25">remote_head_points_at<pos:position pos:line="246" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="246" pos:column="48">&amp;<pos:position pos:line="246" pos:column="53"/></operator><name pos:line="246" pos:column="49">branch_top<pos:position pos:line="246" pos:column="59"/></name></expr></argument>)<pos:position pos:line="246" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="61"/></expr_stmt>

	<if pos:line="248" pos:column="9">if <condition pos:line="248" pos:column="12">(<expr><name pos:line="248" pos:column="13">is_local<pos:position pos:line="248" pos:column="21"/></name></expr>)<pos:position pos:line="248" pos:column="22"/></condition><then pos:line="248" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="249" pos:column="17">clone_local<pos:position pos:line="249" pos:column="28"/></name><argument_list pos:line="249" pos:column="28">(<argument><expr><name pos:line="249" pos:column="29">path<pos:position pos:line="249" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="249" pos:column="35">git_dir<pos:position pos:line="249" pos:column="42"/></name></expr></argument>)<pos:position pos:line="249" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="44"/></expr_stmt></block></then>
	<elseif pos:line="250" pos:column="9">else <if pos:line="250" pos:column="14">if <condition pos:line="250" pos:column="17">(<expr><name pos:line="250" pos:column="18">refs<pos:position pos:line="250" pos:column="22"/></name> <operator pos:line="250" pos:column="23">&amp;&amp;<pos:position pos:line="250" pos:column="33"/></operator> <name pos:line="250" pos:column="26">complete_refs_before_fetch<pos:position pos:line="250" pos:column="52"/></name></expr>)<pos:position pos:line="250" pos:column="53"/></condition><then pos:line="250" pos:column="53">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="251" pos:column="17">transport_fetch_refs<pos:position pos:line="251" pos:column="37"/></name><argument_list pos:line="251" pos:column="37">(<argument><expr><name pos:line="251" pos:column="38">transport<pos:position pos:line="251" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="251" pos:column="49">mapped_refs<pos:position pos:line="251" pos:column="60"/></name></expr></argument>)<pos:position pos:line="251" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="62"/></expr_stmt></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="253" pos:column="9">update_remote_refs<pos:position pos:line="253" pos:column="27"/></name><argument_list pos:line="253" pos:column="27">(<argument><expr><name pos:line="253" pos:column="28">refs<pos:position pos:line="253" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="253" pos:column="34">mapped_refs<pos:position pos:line="253" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="253" pos:column="47">remote_head_points_at<pos:position pos:line="253" pos:column="68"/></name></expr></argument>,
			   <argument><expr><name><name pos:line="254" pos:column="28">branch_top<pos:position pos:line="254" pos:column="38"/></name><operator pos:line="254" pos:column="38">.<pos:position pos:line="254" pos:column="39"/></operator><name pos:line="254" pos:column="39">buf<pos:position pos:line="254" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="254" pos:column="44">reflog_msg<pos:position pos:line="254" pos:column="54"/></name><operator pos:line="254" pos:column="54">.<pos:position pos:line="254" pos:column="55"/></operator><name pos:line="254" pos:column="55">buf<pos:position pos:line="254" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="254" pos:column="60">transport<pos:position pos:line="254" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="254" pos:column="71">!<pos:position pos:line="254" pos:column="72"/></operator><name pos:line="254" pos:column="72">is_local<pos:position pos:line="254" pos:column="80"/></name></expr></argument>)<pos:position pos:line="254" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="82"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="256" pos:column="9">update_head<pos:position pos:line="256" pos:column="20"/></name><argument_list pos:line="256" pos:column="20">(<argument><expr><name pos:line="256" pos:column="21">our_head_points_at<pos:position pos:line="256" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="256" pos:column="41">remote_head<pos:position pos:line="256" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="256" pos:column="54">reflog_msg<pos:position pos:line="256" pos:column="64"/></name><operator pos:line="256" pos:column="64">.<pos:position pos:line="256" pos:column="65"/></operator><name pos:line="256" pos:column="65">buf<pos:position pos:line="256" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="256" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="70"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="258" pos:column="9">transport_unlock_pack<pos:position pos:line="258" pos:column="30"/></name><argument_list pos:line="258" pos:column="30">(<argument><expr><name pos:line="258" pos:column="31">transport<pos:position pos:line="258" pos:column="40"/></name></expr></argument>)<pos:position pos:line="258" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="259" pos:column="9">transport_disconnect<pos:position pos:line="259" pos:column="29"/></name><argument_list pos:line="259" pos:column="29">(<argument><expr><name pos:line="259" pos:column="30">transport<pos:position pos:line="259" pos:column="39"/></name></expr></argument>)<pos:position pos:line="259" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="41"/></expr_stmt>

	<if pos:line="261" pos:column="9">if <condition pos:line="261" pos:column="12">(<expr><name pos:line="261" pos:column="13">option_dissociate<pos:position pos:line="261" pos:column="30"/></name></expr>)<pos:position pos:line="261" pos:column="31"/></condition><then pos:line="261" pos:column="31"> <block pos:line="261" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="262" pos:column="17">close_all_packs<pos:position pos:line="262" pos:column="32"/></name><argument_list pos:line="262" pos:column="32">()<pos:position pos:line="262" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="262" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="263" pos:column="17">dissociate_from_references<pos:position pos:line="263" pos:column="43"/></name><argument_list pos:line="263" pos:column="43">()<pos:position pos:line="263" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="264" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="266" pos:column="9">junk_mode<pos:position pos:line="266" pos:column="18"/></name> <operator pos:line="266" pos:column="19">=<pos:position pos:line="266" pos:column="20"/></operator> <name pos:line="266" pos:column="21">JUNK_LEAVE_REPO<pos:position pos:line="266" pos:column="36"/></name></expr>;<pos:position pos:line="266" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name pos:line="267" pos:column="9">err<pos:position pos:line="267" pos:column="12"/></name> <operator pos:line="267" pos:column="13">=<pos:position pos:line="267" pos:column="14"/></operator> <call><name pos:line="267" pos:column="15">checkout<pos:position pos:line="267" pos:column="23"/></name><argument_list pos:line="267" pos:column="23">()<pos:position pos:line="267" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="267" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="269" pos:column="9">strbuf_release<pos:position pos:line="269" pos:column="23"/></name><argument_list pos:line="269" pos:column="23">(<argument><expr><operator pos:line="269" pos:column="24">&amp;<pos:position pos:line="269" pos:column="29"/></operator><name pos:line="269" pos:column="25">reflog_msg<pos:position pos:line="269" pos:column="35"/></name></expr></argument>)<pos:position pos:line="269" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="270" pos:column="9">strbuf_release<pos:position pos:line="270" pos:column="23"/></name><argument_list pos:line="270" pos:column="23">(<argument><expr><operator pos:line="270" pos:column="24">&amp;<pos:position pos:line="270" pos:column="29"/></operator><name pos:line="270" pos:column="25">branch_top<pos:position pos:line="270" pos:column="35"/></name></expr></argument>)<pos:position pos:line="270" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="270" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="271" pos:column="9">strbuf_release<pos:position pos:line="271" pos:column="23"/></name><argument_list pos:line="271" pos:column="23">(<argument><expr><operator pos:line="271" pos:column="24">&amp;<pos:position pos:line="271" pos:column="29"/></operator><name pos:line="271" pos:column="25">key<pos:position pos:line="271" pos:column="28"/></name></expr></argument>)<pos:position pos:line="271" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="272" pos:column="9">strbuf_release<pos:position pos:line="272" pos:column="23"/></name><argument_list pos:line="272" pos:column="23">(<argument><expr><operator pos:line="272" pos:column="24">&amp;<pos:position pos:line="272" pos:column="29"/></operator><name pos:line="272" pos:column="25">value<pos:position pos:line="272" pos:column="30"/></name></expr></argument>)<pos:position pos:line="272" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name pos:line="273" pos:column="9">junk_mode<pos:position pos:line="273" pos:column="18"/></name> <operator pos:line="273" pos:column="19">=<pos:position pos:line="273" pos:column="20"/></operator> <name pos:line="273" pos:column="21">JUNK_LEAVE_ALL<pos:position pos:line="273" pos:column="35"/></name></expr>;<pos:position pos:line="273" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="275" pos:column="9">free<pos:position pos:line="275" pos:column="13"/></name><argument_list pos:line="275" pos:column="13">(<argument><expr><name pos:line="275" pos:column="14">refspec<pos:position pos:line="275" pos:column="21"/></name></expr></argument>)<pos:position pos:line="275" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="275" pos:column="23"/></expr_stmt>
	<return pos:line="276" pos:column="9">return <expr><name pos:line="276" pos:column="16">err<pos:position pos:line="276" pos:column="19"/></name></expr>;<pos:position pos:line="276" pos:column="20"/></return>
}<pos:position pos:line="277" pos:column="2"/></block></function></unit>
