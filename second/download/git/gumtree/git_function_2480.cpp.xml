<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2480.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">process_tree<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">rev_info<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">revs<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>,
			 <parameter><decl><type><name><name pos:line="2" pos:column="26">struct<pos:position pos:line="2" pos:column="32"/></name> <name pos:line="2" pos:column="33">tree<pos:position pos:line="2" pos:column="37"/></name></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">tree<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="3" pos:column="26">show_object_fn<pos:position pos:line="3" pos:column="40"/></name></type> <name pos:line="3" pos:column="41">show<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>,
			 <parameter><decl><type><name><name pos:line="4" pos:column="26">struct<pos:position pos:line="4" pos:column="32"/></name> <name pos:line="4" pos:column="33">strbuf<pos:position pos:line="4" pos:column="39"/></name></name> <modifier pos:line="4" pos:column="40">*<pos:position pos:line="4" pos:column="41"/></modifier></type><name pos:line="4" pos:column="41">base<pos:position pos:line="4" pos:column="45"/></name></decl></parameter>,
			 <parameter><decl><type><specifier pos:line="5" pos:column="26">const<pos:position pos:line="5" pos:column="31"/></specifier> <name pos:line="5" pos:column="32">char<pos:position pos:line="5" pos:column="36"/></name> <modifier pos:line="5" pos:column="37">*<pos:position pos:line="5" pos:column="38"/></modifier></type><name pos:line="5" pos:column="38">name<pos:position pos:line="5" pos:column="42"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="6" pos:column="26">void<pos:position pos:line="6" pos:column="30"/></name> <modifier pos:line="6" pos:column="31">*<pos:position pos:line="6" pos:column="32"/></modifier></type><name pos:line="6" pos:column="32">cb_data<pos:position pos:line="6" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="40"/></parameter_list>
<block pos:line="7" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">object<pos:position pos:line="8" pos:column="22"/></name></name> <modifier pos:line="8" pos:column="23">*<pos:position pos:line="8" pos:column="24"/></modifier></type><name pos:line="8" pos:column="24">obj<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><operator pos:line="8" pos:column="30">&amp;<pos:position pos:line="8" pos:column="35"/></operator><name><name pos:line="8" pos:column="31">tree<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">-&gt;<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="37">object<pos:position pos:line="8" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">tree_desc<pos:position pos:line="9" pos:column="25"/></name></name></type> <name pos:line="9" pos:column="26">desc<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">name_entry<pos:position pos:line="10" pos:column="26"/></name></name></type> <name pos:line="10" pos:column="27">entry<pos:position pos:line="10" pos:column="32"/></name></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">enum<pos:position pos:line="11" pos:column="13"/></name> <name pos:line="11" pos:column="14">interesting<pos:position pos:line="11" pos:column="25"/></name></name></type> <name pos:line="11" pos:column="26">match<pos:position pos:line="11" pos:column="31"/></name> <init pos:line="11" pos:column="32">= <expr><ternary><condition><expr><name><name pos:line="11" pos:column="34">revs<pos:position pos:line="11" pos:column="38"/></name><operator pos:line="11" pos:column="38">-&gt;<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="40">diffopt<pos:position pos:line="11" pos:column="47"/></name><operator pos:line="11" pos:column="47">.<pos:position pos:line="11" pos:column="48"/></operator><name pos:line="11" pos:column="48">pathspec<pos:position pos:line="11" pos:column="56"/></name><operator pos:line="11" pos:column="56">.<pos:position pos:line="11" pos:column="57"/></operator><name pos:line="11" pos:column="57">nr<pos:position pos:line="11" pos:column="59"/></name></name> <operator pos:line="11" pos:column="60">==<pos:position pos:line="11" pos:column="62"/></operator> <literal type="number" pos:line="11" pos:column="63">0<pos:position pos:line="11" pos:column="64"/></literal></expr> ?<pos:position pos:line="11" pos:column="66"/></condition><then pos:line="11" pos:column="66">
		<expr><name pos:line="12" pos:column="17">all_entries_interesting<pos:position pos:line="12" pos:column="40"/></name></expr></then><else pos:line="12" pos:column="40">: <expr><name pos:line="12" pos:column="42">entry_not_interesting<pos:position pos:line="12" pos:column="63"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="12" pos:column="64"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">baselen<pos:position pos:line="13" pos:column="20"/></name> <init pos:line="13" pos:column="21">= <expr><name><name pos:line="13" pos:column="23">base<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">-&gt;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="29">len<pos:position pos:line="13" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="33"/></decl_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name><name pos:line="15" pos:column="14">revs<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">-&gt;<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="20">tree_objects<pos:position pos:line="15" pos:column="32"/></name></name></expr>)<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33">
		<block type="pseudo"><return pos:line="16" pos:column="17">return;<pos:position pos:line="16" pos:column="24"/></return></block></then></if>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">obj<pos:position pos:line="17" pos:column="17"/></name></expr>)<pos:position pos:line="17" pos:column="18"/></condition><then pos:line="17" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">die<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><literal type="string" pos:line="18" pos:column="21">"bad tree object"<pos:position pos:line="18" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt></block></then></if>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name><name pos:line="19" pos:column="13">obj<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">-&gt;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="18">flags<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">&amp;<pos:position pos:line="19" pos:column="29"/></operator> <operator pos:line="19" pos:column="26">(<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">UNINTERESTING<pos:position pos:line="19" pos:column="40"/></name> <operator pos:line="19" pos:column="41">|<pos:position pos:line="19" pos:column="42"/></operator> <name pos:line="19" pos:column="43">SEEN<pos:position pos:line="19" pos:column="47"/></name><operator pos:line="19" pos:column="47">)<pos:position pos:line="19" pos:column="48"/></operator></expr>)<pos:position pos:line="19" pos:column="49"/></condition><then pos:line="19" pos:column="49">
		<block type="pseudo"><return pos:line="20" pos:column="17">return;<pos:position pos:line="20" pos:column="24"/></return></block></then></if>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">parse_tree_gently<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name pos:line="21" pos:column="31">tree<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="37">revs<pos:position pos:line="21" pos:column="41"/></name><operator pos:line="21" pos:column="41">-&gt;<pos:position pos:line="21" pos:column="46"/></operator><name pos:line="21" pos:column="43">ignore_missing_links<pos:position pos:line="21" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call> <operator pos:line="21" pos:column="65">&lt;<pos:position pos:line="21" pos:column="69"/></operator> <literal type="number" pos:line="21" pos:column="67">0<pos:position pos:line="21" pos:column="68"/></literal></expr>)<pos:position pos:line="21" pos:column="69"/></condition><then pos:line="21" pos:column="69"> <block pos:line="21" pos:column="70">{
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name><name pos:line="22" pos:column="21">revs<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">-&gt;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="27">ignore_missing_links<pos:position pos:line="22" pos:column="47"/></name></name></expr>)<pos:position pos:line="22" pos:column="48"/></condition><then pos:line="22" pos:column="48">
			<block type="pseudo"><return pos:line="23" pos:column="25">return;<pos:position pos:line="23" pos:column="32"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">die<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><literal type="string" pos:line="24" pos:column="21">"bad tree object %s"<pos:position pos:line="24" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="43">sha1_to_hex<pos:position pos:line="24" pos:column="54"/></name><argument_list pos:line="24" pos:column="54">(<argument><expr><name><name pos:line="24" pos:column="55">obj<pos:position pos:line="24" pos:column="58"/></name><operator pos:line="24" pos:column="58">-&gt;<pos:position pos:line="24" pos:column="63"/></operator><name pos:line="24" pos:column="60">sha1<pos:position pos:line="24" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="67"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="27" pos:column="9">obj<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">flags<pos:position pos:line="27" pos:column="19"/></name></name> <operator pos:line="27" pos:column="20">|=<pos:position pos:line="27" pos:column="22"/></operator> <name pos:line="27" pos:column="23">SEEN<pos:position pos:line="27" pos:column="27"/></name></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">strbuf_addstr<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">base<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">name<pos:position pos:line="28" pos:column="33"/></name></expr></argument>)<pos:position pos:line="28" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">show<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><name pos:line="29" pos:column="14">obj<pos:position pos:line="29" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="19">base<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">-&gt;<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="25">buf<pos:position pos:line="29" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="30">cb_data<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name><name pos:line="30" pos:column="13">base<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">-&gt;<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="19">len<pos:position pos:line="30" pos:column="22"/></name></name></expr>)<pos:position pos:line="30" pos:column="23"/></condition><then pos:line="30" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="17">strbuf_addch<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">base<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="31" pos:column="36">'/'<pos:position pos:line="31" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">init_tree_desc<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><operator pos:line="33" pos:column="24">&amp;<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="25">desc<pos:position pos:line="33" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="31">tree<pos:position pos:line="33" pos:column="35"/></name><operator pos:line="33" pos:column="35">-&gt;<pos:position pos:line="33" pos:column="40"/></operator><name pos:line="33" pos:column="37">buffer<pos:position pos:line="33" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="45">tree<pos:position pos:line="33" pos:column="49"/></name><operator pos:line="33" pos:column="49">-&gt;<pos:position pos:line="33" pos:column="54"/></operator><name pos:line="33" pos:column="51">size<pos:position pos:line="33" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt>

	<while pos:line="35" pos:column="9">while <condition pos:line="35" pos:column="15">(<expr><call><name pos:line="35" pos:column="16">tree_entry<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><operator pos:line="35" pos:column="27">&amp;<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="28">desc<pos:position pos:line="35" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="34">&amp;<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="35">entry<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="42"/></condition> <block pos:line="35" pos:column="43">{
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">match<pos:position pos:line="36" pos:column="26"/></name> <operator pos:line="36" pos:column="27">!=<pos:position pos:line="36" pos:column="29"/></operator> <name pos:line="36" pos:column="30">all_entries_interesting<pos:position pos:line="36" pos:column="53"/></name></expr>)<pos:position pos:line="36" pos:column="54"/></condition><then pos:line="36" pos:column="54"> <block pos:line="36" pos:column="55">{
			<expr_stmt><expr><name pos:line="37" pos:column="25">match<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">=<pos:position pos:line="37" pos:column="32"/></operator> <call><name pos:line="37" pos:column="33">tree_entry_interesting<pos:position pos:line="37" pos:column="55"/></name><argument_list pos:line="37" pos:column="55">(<argument><expr><operator pos:line="37" pos:column="56">&amp;<pos:position pos:line="37" pos:column="61"/></operator><name pos:line="37" pos:column="57">entry<pos:position pos:line="37" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="64">base<pos:position pos:line="37" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="70">0<pos:position pos:line="37" pos:column="71"/></literal></expr></argument>,
						       <argument><expr><operator pos:line="38" pos:column="56">&amp;<pos:position pos:line="38" pos:column="61"/></operator><name><name pos:line="38" pos:column="57">revs<pos:position pos:line="38" pos:column="61"/></name><operator pos:line="38" pos:column="61">-&gt;<pos:position pos:line="38" pos:column="66"/></operator><name pos:line="38" pos:column="63">diffopt<pos:position pos:line="38" pos:column="70"/></name><operator pos:line="38" pos:column="70">.<pos:position pos:line="38" pos:column="71"/></operator><name pos:line="38" pos:column="71">pathspec<pos:position pos:line="38" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="81"/></expr_stmt>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><name pos:line="39" pos:column="29">match<pos:position pos:line="39" pos:column="34"/></name> <operator pos:line="39" pos:column="35">==<pos:position pos:line="39" pos:column="37"/></operator> <name pos:line="39" pos:column="38">all_entries_not_interesting<pos:position pos:line="39" pos:column="65"/></name></expr>)<pos:position pos:line="39" pos:column="66"/></condition><then pos:line="39" pos:column="66">
				<block type="pseudo"><break pos:line="40" pos:column="33">break;<pos:position pos:line="40" pos:column="39"/></break></block></then></if>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><name pos:line="41" pos:column="29">match<pos:position pos:line="41" pos:column="34"/></name> <operator pos:line="41" pos:column="35">==<pos:position pos:line="41" pos:column="37"/></operator> <name pos:line="41" pos:column="38">entry_not_interesting<pos:position pos:line="41" pos:column="59"/></name></expr>)<pos:position pos:line="41" pos:column="60"/></condition><then pos:line="41" pos:column="60">
				<block type="pseudo"><continue pos:line="42" pos:column="33">continue;<pos:position pos:line="42" pos:column="42"/></continue></block></then></if>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if>

		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><call><name pos:line="45" pos:column="21">S_ISDIR<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><name><name pos:line="45" pos:column="29">entry<pos:position pos:line="45" pos:column="34"/></name><operator pos:line="45" pos:column="34">.<pos:position pos:line="45" pos:column="35"/></operator><name pos:line="45" pos:column="35">mode<pos:position pos:line="45" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="41"/></condition><then pos:line="45" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="25">process_tree<pos:position pos:line="46" pos:column="37"/></name><argument_list pos:line="46" pos:column="37">(<argument><expr><name pos:line="46" pos:column="38">revs<pos:position pos:line="46" pos:column="42"/></name></expr></argument>,
				     <argument><expr><call><name pos:line="47" pos:column="38">lookup_tree<pos:position pos:line="47" pos:column="49"/></name><argument_list pos:line="47" pos:column="49">(<argument><expr><name><name pos:line="47" pos:column="50">entry<pos:position pos:line="47" pos:column="55"/></name><operator pos:line="47" pos:column="55">.<pos:position pos:line="47" pos:column="56"/></operator><name pos:line="47" pos:column="56">sha1<pos:position pos:line="47" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="61"/></argument_list></call></expr></argument>,
				     <argument><expr><name pos:line="48" pos:column="38">show<pos:position pos:line="48" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="44">base<pos:position pos:line="48" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="50">entry<pos:position pos:line="48" pos:column="55"/></name><operator pos:line="48" pos:column="55">.<pos:position pos:line="48" pos:column="56"/></operator><name pos:line="48" pos:column="56">path<pos:position pos:line="48" pos:column="60"/></name></name></expr></argument>,
				     <argument><expr><name pos:line="49" pos:column="38">cb_data<pos:position pos:line="49" pos:column="45"/></name></expr></argument>)<pos:position pos:line="49" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="47"/></expr_stmt></block></then>
		<elseif pos:line="50" pos:column="17">else <if pos:line="50" pos:column="22">if <condition pos:line="50" pos:column="25">(<expr><call><name pos:line="50" pos:column="26">S_ISGITLINK<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name><name pos:line="50" pos:column="38">entry<pos:position pos:line="50" pos:column="43"/></name><operator pos:line="50" pos:column="43">.<pos:position pos:line="50" pos:column="44"/></operator><name pos:line="50" pos:column="44">mode<pos:position pos:line="50" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="50"/></condition><then pos:line="50" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="25">process_gitlink<pos:position pos:line="51" pos:column="40"/></name><argument_list pos:line="51" pos:column="40">(<argument><expr><name pos:line="51" pos:column="41">revs<pos:position pos:line="51" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="47">entry<pos:position pos:line="51" pos:column="52"/></name><operator pos:line="51" pos:column="52">.<pos:position pos:line="51" pos:column="53"/></operator><name pos:line="51" pos:column="53">sha1<pos:position pos:line="51" pos:column="57"/></name></name></expr></argument>,
					<argument><expr><name pos:line="52" pos:column="41">show<pos:position pos:line="52" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="47">base<pos:position pos:line="52" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="53">entry<pos:position pos:line="52" pos:column="58"/></name><operator pos:line="52" pos:column="58">.<pos:position pos:line="52" pos:column="59"/></operator><name pos:line="52" pos:column="59">path<pos:position pos:line="52" pos:column="63"/></name></name></expr></argument>,
					<argument><expr><name pos:line="53" pos:column="41">cb_data<pos:position pos:line="53" pos:column="48"/></name></expr></argument>)<pos:position pos:line="53" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="50"/></expr_stmt></block></then></if></elseif>
		<else pos:line="54" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="25">process_blob<pos:position pos:line="55" pos:column="37"/></name><argument_list pos:line="55" pos:column="37">(<argument><expr><name pos:line="55" pos:column="38">revs<pos:position pos:line="55" pos:column="42"/></name></expr></argument>,
				     <argument><expr><call><name pos:line="56" pos:column="38">lookup_blob<pos:position pos:line="56" pos:column="49"/></name><argument_list pos:line="56" pos:column="49">(<argument><expr><name><name pos:line="56" pos:column="50">entry<pos:position pos:line="56" pos:column="55"/></name><operator pos:line="56" pos:column="55">.<pos:position pos:line="56" pos:column="56"/></operator><name pos:line="56" pos:column="56">sha1<pos:position pos:line="56" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="61"/></argument_list></call></expr></argument>,
				     <argument><expr><name pos:line="57" pos:column="38">show<pos:position pos:line="57" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="44">base<pos:position pos:line="57" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="50">entry<pos:position pos:line="57" pos:column="55"/></name><operator pos:line="57" pos:column="55">.<pos:position pos:line="57" pos:column="56"/></operator><name pos:line="57" pos:column="56">path<pos:position pos:line="57" pos:column="60"/></name></name></expr></argument>,
				     <argument><expr><name pos:line="58" pos:column="38">cb_data<pos:position pos:line="58" pos:column="45"/></name></expr></argument>)<pos:position pos:line="58" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="47"/></expr_stmt></block></else></if>
	}<pos:position pos:line="59" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">strbuf_setlen<pos:position pos:line="60" pos:column="22"/></name><argument_list pos:line="60" pos:column="22">(<argument><expr><name pos:line="60" pos:column="23">base<pos:position pos:line="60" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="29">baselen<pos:position pos:line="60" pos:column="36"/></name></expr></argument>)<pos:position pos:line="60" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">free_tree_buffer<pos:position pos:line="61" pos:column="25"/></name><argument_list pos:line="61" pos:column="25">(<argument><expr><name pos:line="61" pos:column="26">tree<pos:position pos:line="61" pos:column="30"/></name></expr></argument>)<pos:position pos:line="61" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
