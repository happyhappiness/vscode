<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5444_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_interactive<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">am_state<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">state<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">assert<pos:position pos:line="3" pos:column="15"/></name><argument_list pos:line="3" pos:column="15">(<argument><expr><name><name pos:line="3" pos:column="16">state<pos:position pos:line="3" pos:column="21"/></name><operator pos:line="3" pos:column="21">-&gt;<pos:position pos:line="3" pos:column="26"/></operator><name pos:line="3" pos:column="23">msg<pos:position pos:line="3" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="3" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="28"/></expr_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><call><name pos:line="5" pos:column="14">isatty<pos:position pos:line="5" pos:column="20"/></name><argument_list pos:line="5" pos:column="20">(<argument><expr><literal type="number" pos:line="5" pos:column="21">0<pos:position pos:line="5" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="24"/></condition><then pos:line="5" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="17">die<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><call><name pos:line="6" pos:column="21">_<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><literal type="string" pos:line="6" pos:column="23">"cannot be interactive without stdin connected to a terminal."<pos:position pos:line="6" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="88"/></expr_stmt></block></then></if>

	<for pos:line="8" pos:column="9">for <control pos:line="8" pos:column="13">(<init pos:line="8" pos:column="14">;<pos:position pos:line="8" pos:column="15"/></init><condition pos:line="8" pos:column="15">;<pos:position pos:line="8" pos:column="16"/></condition><incr/>)<pos:position pos:line="8" pos:column="17"/></control> <block pos:line="8" pos:column="18">{
		<decl_stmt><decl><type><specifier pos:line="9" pos:column="17">const<pos:position pos:line="9" pos:column="22"/></specifier> <name pos:line="9" pos:column="23">char<pos:position pos:line="9" pos:column="27"/></name> <modifier pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></modifier></type><name pos:line="9" pos:column="29">reply<pos:position pos:line="9" pos:column="34"/></name></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="11" pos:column="17">puts<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><call><name pos:line="11" pos:column="22">_<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><literal type="string" pos:line="11" pos:column="24">"Commit Body is:"<pos:position pos:line="11" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">puts<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><literal type="string" pos:line="12" pos:column="22">"--------------------------"<pos:position pos:line="12" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">printf<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><literal type="string" pos:line="13" pos:column="24">"%s"<pos:position pos:line="13" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="30">state<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">-&gt;<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="37">msg<pos:position pos:line="13" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">puts<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><literal type="string" pos:line="14" pos:column="22">"--------------------------"<pos:position pos:line="14" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="52"/></expr_stmt>

		<comment type="block" pos:line="16" pos:column="17">/*
		 * TRANSLATORS: Make sure to include [y], [n], [e], [v] and [a]
		 * in your translation. The program will only accept English
		 * input at this point.
		 */</comment>
		<expr_stmt><expr><name pos:line="21" pos:column="17">reply<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <call><name pos:line="21" pos:column="25">git_prompt<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><call><name pos:line="21" pos:column="36">_<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><literal type="string" pos:line="21" pos:column="38">"Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all: "<pos:position pos:line="21" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="93"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="21" pos:column="95">PROMPT_ECHO<pos:position pos:line="21" pos:column="106"/></name></expr></argument>)<pos:position pos:line="21" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="108"/></expr_stmt>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">!<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">reply<pos:position pos:line="23" pos:column="27"/></name></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28"> <block pos:line="23" pos:column="29">{
			<continue pos:line="24" pos:column="25">continue;<pos:position pos:line="24" pos:column="34"/></continue>
		}<pos:position pos:line="25" pos:column="18"/></block></then> <elseif pos:line="25" pos:column="19">else <if pos:line="25" pos:column="24">if <condition pos:line="25" pos:column="27">(<expr><operator pos:line="25" pos:column="28">*<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="29">reply<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">==<pos:position pos:line="25" pos:column="37"/></operator> <literal type="char" pos:line="25" pos:column="38">'y'<pos:position pos:line="25" pos:column="41"/></literal> <operator pos:line="25" pos:column="42">||<pos:position pos:line="25" pos:column="44"/></operator> <operator pos:line="25" pos:column="45">*<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="46">reply<pos:position pos:line="25" pos:column="51"/></name> <operator pos:line="25" pos:column="52">==<pos:position pos:line="25" pos:column="54"/></operator> <literal type="char" pos:line="25" pos:column="55">'Y'<pos:position pos:line="25" pos:column="58"/></literal></expr>)<pos:position pos:line="25" pos:column="59"/></condition><then pos:line="25" pos:column="59"> <block pos:line="25" pos:column="60">{
			<return pos:line="26" pos:column="25">return <expr><literal type="number" pos:line="26" pos:column="32">0<pos:position pos:line="26" pos:column="33"/></literal></expr>;<pos:position pos:line="26" pos:column="34"/></return>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if></elseif> <elseif pos:line="27" pos:column="19">else <if pos:line="27" pos:column="24">if <condition pos:line="27" pos:column="27">(<expr><operator pos:line="27" pos:column="28">*<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="29">reply<pos:position pos:line="27" pos:column="34"/></name> <operator pos:line="27" pos:column="35">==<pos:position pos:line="27" pos:column="37"/></operator> <literal type="char" pos:line="27" pos:column="38">'a'<pos:position pos:line="27" pos:column="41"/></literal> <operator pos:line="27" pos:column="42">||<pos:position pos:line="27" pos:column="44"/></operator> <operator pos:line="27" pos:column="45">*<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="46">reply<pos:position pos:line="27" pos:column="51"/></name> <operator pos:line="27" pos:column="52">==<pos:position pos:line="27" pos:column="54"/></operator> <literal type="char" pos:line="27" pos:column="55">'A'<pos:position pos:line="27" pos:column="58"/></literal></expr>)<pos:position pos:line="27" pos:column="59"/></condition><then pos:line="27" pos:column="59"> <block pos:line="27" pos:column="60">{
			<expr_stmt><expr><name><name pos:line="28" pos:column="25">state<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">-&gt;<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="32">interactive<pos:position pos:line="28" pos:column="43"/></name></name> <operator pos:line="28" pos:column="44">=<pos:position pos:line="28" pos:column="45"/></operator> <literal type="number" pos:line="28" pos:column="46">0<pos:position pos:line="28" pos:column="47"/></literal></expr>;<pos:position pos:line="28" pos:column="48"/></expr_stmt>
			<return pos:line="29" pos:column="25">return <expr><literal type="number" pos:line="29" pos:column="32">0<pos:position pos:line="29" pos:column="33"/></literal></expr>;<pos:position pos:line="29" pos:column="34"/></return>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if></elseif> <elseif pos:line="30" pos:column="19">else <if pos:line="30" pos:column="24">if <condition pos:line="30" pos:column="27">(<expr><operator pos:line="30" pos:column="28">*<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="29">reply<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">==<pos:position pos:line="30" pos:column="37"/></operator> <literal type="char" pos:line="30" pos:column="38">'n'<pos:position pos:line="30" pos:column="41"/></literal> <operator pos:line="30" pos:column="42">||<pos:position pos:line="30" pos:column="44"/></operator> <operator pos:line="30" pos:column="45">*<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="46">reply<pos:position pos:line="30" pos:column="51"/></name> <operator pos:line="30" pos:column="52">==<pos:position pos:line="30" pos:column="54"/></operator> <literal type="char" pos:line="30" pos:column="55">'N'<pos:position pos:line="30" pos:column="58"/></literal></expr>)<pos:position pos:line="30" pos:column="59"/></condition><then pos:line="30" pos:column="59"> <block pos:line="30" pos:column="60">{
			<return pos:line="31" pos:column="25">return <expr><literal type="number" pos:line="31" pos:column="32">1<pos:position pos:line="31" pos:column="33"/></literal></expr>;<pos:position pos:line="31" pos:column="34"/></return>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if></elseif> <elseif pos:line="32" pos:column="19">else <if pos:line="32" pos:column="24">if <condition pos:line="32" pos:column="27">(<expr><operator pos:line="32" pos:column="28">*<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="29">reply<pos:position pos:line="32" pos:column="34"/></name> <operator pos:line="32" pos:column="35">==<pos:position pos:line="32" pos:column="37"/></operator> <literal type="char" pos:line="32" pos:column="38">'e'<pos:position pos:line="32" pos:column="41"/></literal> <operator pos:line="32" pos:column="42">||<pos:position pos:line="32" pos:column="44"/></operator> <operator pos:line="32" pos:column="45">*<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="46">reply<pos:position pos:line="32" pos:column="51"/></name> <operator pos:line="32" pos:column="52">==<pos:position pos:line="32" pos:column="54"/></operator> <literal type="char" pos:line="32" pos:column="55">'E'<pos:position pos:line="32" pos:column="58"/></literal></expr>)<pos:position pos:line="32" pos:column="59"/></condition><then pos:line="32" pos:column="59"> <block pos:line="32" pos:column="60">{
			<decl_stmt><decl><type><name><name pos:line="33" pos:column="25">struct<pos:position pos:line="33" pos:column="31"/></name> <name pos:line="33" pos:column="32">strbuf<pos:position pos:line="33" pos:column="38"/></name></name></type> <name pos:line="33" pos:column="39">msg<pos:position pos:line="33" pos:column="42"/></name> <init pos:line="33" pos:column="43">= <expr><name pos:line="33" pos:column="45">STRBUF_INIT<pos:position pos:line="33" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="57"/></decl_stmt>

			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><operator pos:line="35" pos:column="29">!<pos:position pos:line="35" pos:column="30"/></operator><call><name pos:line="35" pos:column="30">launch_editor<pos:position pos:line="35" pos:column="43"/></name><argument_list pos:line="35" pos:column="43">(<argument><expr><call><name pos:line="35" pos:column="44">am_path<pos:position pos:line="35" pos:column="51"/></name><argument_list pos:line="35" pos:column="51">(<argument><expr><name pos:line="35" pos:column="52">state<pos:position pos:line="35" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="59">"final-commit"<pos:position pos:line="35" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="35" pos:column="76">&amp;<pos:position pos:line="35" pos:column="81"/></operator><name pos:line="35" pos:column="77">msg<pos:position pos:line="35" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="82">NULL<pos:position pos:line="35" pos:column="86"/></name></expr></argument>)<pos:position pos:line="35" pos:column="87"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="88"/></condition><then pos:line="35" pos:column="88"> <block pos:line="35" pos:column="89">{
				<expr_stmt><expr><call><name pos:line="36" pos:column="33">free<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><name><name pos:line="36" pos:column="38">state<pos:position pos:line="36" pos:column="43"/></name><operator pos:line="36" pos:column="43">-&gt;<pos:position pos:line="36" pos:column="48"/></operator><name pos:line="36" pos:column="45">msg<pos:position pos:line="36" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="50"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="37" pos:column="33">state<pos:position pos:line="37" pos:column="38"/></name><operator pos:line="37" pos:column="38">-&gt;<pos:position pos:line="37" pos:column="43"/></operator><name pos:line="37" pos:column="40">msg<pos:position pos:line="37" pos:column="43"/></name></name> <operator pos:line="37" pos:column="44">=<pos:position pos:line="37" pos:column="45"/></operator> <call><name pos:line="37" pos:column="46">strbuf_detach<pos:position pos:line="37" pos:column="59"/></name><argument_list pos:line="37" pos:column="59">(<argument><expr><operator pos:line="37" pos:column="60">&amp;<pos:position pos:line="37" pos:column="65"/></operator><name pos:line="37" pos:column="61">msg<pos:position pos:line="37" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="66">&amp;<pos:position pos:line="37" pos:column="71"/></operator><name><name pos:line="37" pos:column="67">state<pos:position pos:line="37" pos:column="72"/></name><operator pos:line="37" pos:column="72">-&gt;<pos:position pos:line="37" pos:column="77"/></operator><name pos:line="37" pos:column="74">msg_len<pos:position pos:line="37" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="83"/></expr_stmt>
			}<pos:position pos:line="38" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">strbuf_release<pos:position pos:line="39" pos:column="39"/></name><argument_list pos:line="39" pos:column="39">(<argument><expr><operator pos:line="39" pos:column="40">&amp;<pos:position pos:line="39" pos:column="45"/></operator><name pos:line="39" pos:column="41">msg<pos:position pos:line="39" pos:column="44"/></name></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if></elseif> <elseif pos:line="40" pos:column="19">else <if pos:line="40" pos:column="24">if <condition pos:line="40" pos:column="27">(<expr><operator pos:line="40" pos:column="28">*<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="29">reply<pos:position pos:line="40" pos:column="34"/></name> <operator pos:line="40" pos:column="35">==<pos:position pos:line="40" pos:column="37"/></operator> <literal type="char" pos:line="40" pos:column="38">'v'<pos:position pos:line="40" pos:column="41"/></literal> <operator pos:line="40" pos:column="42">||<pos:position pos:line="40" pos:column="44"/></operator> <operator pos:line="40" pos:column="45">*<pos:position pos:line="40" pos:column="46"/></operator><name pos:line="40" pos:column="46">reply<pos:position pos:line="40" pos:column="51"/></name> <operator pos:line="40" pos:column="52">==<pos:position pos:line="40" pos:column="54"/></operator> <literal type="char" pos:line="40" pos:column="55">'V'<pos:position pos:line="40" pos:column="58"/></literal></expr>)<pos:position pos:line="40" pos:column="59"/></condition><then pos:line="40" pos:column="59"> <block pos:line="40" pos:column="60">{
			<decl_stmt><decl><type><specifier pos:line="41" pos:column="25">const<pos:position pos:line="41" pos:column="30"/></specifier> <name pos:line="41" pos:column="31">char<pos:position pos:line="41" pos:column="35"/></name> <modifier pos:line="41" pos:column="36">*<pos:position pos:line="41" pos:column="37"/></modifier></type><name pos:line="41" pos:column="37">pager<pos:position pos:line="41" pos:column="42"/></name> <init pos:line="41" pos:column="43">= <expr><call><name pos:line="41" pos:column="45">git_pager<pos:position pos:line="41" pos:column="54"/></name><argument_list pos:line="41" pos:column="54">(<argument><expr><literal type="number" pos:line="41" pos:column="55">1<pos:position pos:line="41" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="58"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="42" pos:column="25">struct<pos:position pos:line="42" pos:column="31"/></name> <name pos:line="42" pos:column="32">child_process<pos:position pos:line="42" pos:column="45"/></name></name></type> <name pos:line="42" pos:column="46">cp<pos:position pos:line="42" pos:column="48"/></name> <init pos:line="42" pos:column="49">= <expr><name pos:line="42" pos:column="51">CHILD_PROCESS_INIT<pos:position pos:line="42" pos:column="69"/></name></expr></init></decl>;<pos:position pos:line="42" pos:column="70"/></decl_stmt>

			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><operator pos:line="44" pos:column="29">!<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="30">pager<pos:position pos:line="44" pos:column="35"/></name></expr>)<pos:position pos:line="44" pos:column="36"/></condition><then pos:line="44" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="33">pager<pos:position pos:line="45" pos:column="38"/></name> <operator pos:line="45" pos:column="39">=<pos:position pos:line="45" pos:column="40"/></operator> <literal type="string" pos:line="45" pos:column="41">"cat"<pos:position pos:line="45" pos:column="46"/></literal></expr>;<pos:position pos:line="45" pos:column="47"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">prepare_pager_args<pos:position pos:line="46" pos:column="43"/></name><argument_list pos:line="46" pos:column="43">(<argument><expr><operator pos:line="46" pos:column="44">&amp;<pos:position pos:line="46" pos:column="49"/></operator><name pos:line="46" pos:column="45">cp<pos:position pos:line="46" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="49">pager<pos:position pos:line="46" pos:column="54"/></name></expr></argument>)<pos:position pos:line="46" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">argv_array_push<pos:position pos:line="47" pos:column="40"/></name><argument_list pos:line="47" pos:column="40">(<argument><expr><operator pos:line="47" pos:column="41">&amp;<pos:position pos:line="47" pos:column="46"/></operator><name><name pos:line="47" pos:column="42">cp<pos:position pos:line="47" pos:column="44"/></name><operator pos:line="47" pos:column="44">.<pos:position pos:line="47" pos:column="45"/></operator><name pos:line="47" pos:column="45">args<pos:position pos:line="47" pos:column="49"/></name></name></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="51">am_path<pos:position pos:line="47" pos:column="58"/></name><argument_list pos:line="47" pos:column="58">(<argument><expr><name pos:line="47" pos:column="59">state<pos:position pos:line="47" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="66">"patch"<pos:position pos:line="47" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">run_command<pos:position pos:line="48" pos:column="36"/></name><argument_list pos:line="48" pos:column="36">(<argument><expr><operator pos:line="48" pos:column="37">&amp;<pos:position pos:line="48" pos:column="42"/></operator><name pos:line="48" pos:column="38">cp<pos:position pos:line="48" pos:column="40"/></name></expr></argument>)<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="50" pos:column="10"/></block></for>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
