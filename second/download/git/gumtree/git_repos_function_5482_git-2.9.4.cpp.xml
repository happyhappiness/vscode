<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5482_git-2.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">unresolve_one<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">path<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">namelen<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><call><name pos:line="3" pos:column="23">strlen<pos:position pos:line="3" pos:column="29"/></name><argument_list pos:line="3" pos:column="29">(<argument><expr><name pos:line="3" pos:column="30">path<pos:position pos:line="3" pos:column="34"/></name></expr></argument>)<pos:position pos:line="3" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">pos<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">ret<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">cache_entry<pos:position pos:line="6" pos:column="27"/></name></name> <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">ce_2<pos:position pos:line="6" pos:column="33"/></name> <init pos:line="6" pos:column="34">= <expr><name pos:line="6" pos:column="36">NULL<pos:position pos:line="6" pos:column="40"/></name></expr></init></decl>, <modifier pos:line="6" pos:column="42">*<pos:position pos:line="6" pos:column="43"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="43">ce_3<pos:position pos:line="6" pos:column="47"/></name> <init pos:line="6" pos:column="48">= <expr><name pos:line="6" pos:column="50">NULL<pos:position pos:line="6" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="55"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/* See if there is such entry in the index. */</comment>
	<expr_stmt><expr><name pos:line="9" pos:column="9">pos<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">cache_name_pos<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">path<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="36">namelen<pos:position pos:line="9" pos:column="43"/></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><literal type="number" pos:line="10" pos:column="13">0<pos:position pos:line="10" pos:column="14"/></literal> <operator pos:line="10" pos:column="15">&lt;=<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="18">pos<pos:position pos:line="10" pos:column="21"/></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22"> <block pos:line="10" pos:column="23">{
		<comment type="block" pos:line="11" pos:column="17">/* already merged */</comment>
		<expr_stmt><expr><name pos:line="12" pos:column="17">pos<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <call><name pos:line="12" pos:column="23">unmerge_cache_entry_at<pos:position pos:line="12" pos:column="45"/></name><argument_list pos:line="12" pos:column="45">(<argument><expr><name pos:line="12" pos:column="46">pos<pos:position pos:line="12" pos:column="49"/></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">pos<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">&lt;<pos:position pos:line="13" pos:column="29"/></operator> <name pos:line="13" pos:column="27">active_nr<pos:position pos:line="13" pos:column="36"/></name></expr>)<pos:position pos:line="13" pos:column="37"/></condition><then pos:line="13" pos:column="37"> <block pos:line="13" pos:column="38">{
			<decl_stmt><decl><type><specifier pos:line="14" pos:column="25">const<pos:position pos:line="14" pos:column="30"/></specifier> <name><name pos:line="14" pos:column="31">struct<pos:position pos:line="14" pos:column="37"/></name> <name pos:line="14" pos:column="38">cache_entry<pos:position pos:line="14" pos:column="49"/></name></name> <modifier pos:line="14" pos:column="50">*<pos:position pos:line="14" pos:column="51"/></modifier></type><name pos:line="14" pos:column="51">ce<pos:position pos:line="14" pos:column="53"/></name> <init pos:line="14" pos:column="54">= <expr><name><name pos:line="14" pos:column="56">active_cache<pos:position pos:line="14" pos:column="68"/></name><index pos:line="14" pos:column="68">[<expr><name pos:line="14" pos:column="69">pos<pos:position pos:line="14" pos:column="72"/></name></expr>]<pos:position pos:line="14" pos:column="73"/></index></name></expr></init></decl>;<pos:position pos:line="14" pos:column="74"/></decl_stmt>
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><call><name pos:line="15" pos:column="29">ce_stage<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">ce<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call> <operator pos:line="15" pos:column="42">&amp;&amp;<pos:position pos:line="15" pos:column="52"/></operator>
			    <call><name pos:line="16" pos:column="29">ce_namelen<pos:position pos:line="16" pos:column="39"/></name><argument_list pos:line="16" pos:column="39">(<argument><expr><name pos:line="16" pos:column="40">ce<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call> <operator pos:line="16" pos:column="44">==<pos:position pos:line="16" pos:column="46"/></operator> <name pos:line="16" pos:column="47">namelen<pos:position pos:line="16" pos:column="54"/></name> <operator pos:line="16" pos:column="55">&amp;&amp;<pos:position pos:line="16" pos:column="65"/></operator>
			    <operator pos:line="17" pos:column="29">!<pos:position pos:line="17" pos:column="30"/></operator><call><name pos:line="17" pos:column="30">memcmp<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name><name pos:line="17" pos:column="37">ce<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">-&gt;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="41">name<pos:position pos:line="17" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="47">path<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="53">namelen<pos:position pos:line="17" pos:column="60"/></name></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="62"/></condition><then pos:line="17" pos:column="62">
				<block type="pseudo"><return pos:line="18" pos:column="33">return <expr><literal type="number" pos:line="18" pos:column="40">0<pos:position pos:line="18" pos:column="41"/></literal></expr>;<pos:position pos:line="18" pos:column="42"/></return></block></then></if>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="20" pos:column="17">/* no resolve-undo information; fall back */</comment>
	}<pos:position pos:line="21" pos:column="10"/></block></then> <else pos:line="21" pos:column="11">else <block pos:line="21" pos:column="16">{
		<comment type="block" pos:line="22" pos:column="17">/* If there isn't, either it is unmerged, or
		 * resolved as "removed" by mistake.  We do not
		 * want to do anything in the former case.
		 */</comment>
		<expr_stmt><expr><name pos:line="26" pos:column="17">pos<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <operator pos:line="26" pos:column="23">-<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="24">pos<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-<pos:position pos:line="26" pos:column="28"/></operator><literal type="number" pos:line="26" pos:column="28">1<pos:position pos:line="26" pos:column="29"/></literal></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">pos<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">&lt;<pos:position pos:line="27" pos:column="29"/></operator> <name pos:line="27" pos:column="27">active_nr<pos:position pos:line="27" pos:column="36"/></name></expr>)<pos:position pos:line="27" pos:column="37"/></condition><then pos:line="27" pos:column="37"> <block pos:line="27" pos:column="38">{
			<decl_stmt><decl><type><specifier pos:line="28" pos:column="25">const<pos:position pos:line="28" pos:column="30"/></specifier> <name><name pos:line="28" pos:column="31">struct<pos:position pos:line="28" pos:column="37"/></name> <name pos:line="28" pos:column="38">cache_entry<pos:position pos:line="28" pos:column="49"/></name></name> <modifier pos:line="28" pos:column="50">*<pos:position pos:line="28" pos:column="51"/></modifier></type><name pos:line="28" pos:column="51">ce<pos:position pos:line="28" pos:column="53"/></name> <init pos:line="28" pos:column="54">= <expr><name><name pos:line="28" pos:column="56">active_cache<pos:position pos:line="28" pos:column="68"/></name><index pos:line="28" pos:column="68">[<expr><name pos:line="28" pos:column="69">pos<pos:position pos:line="28" pos:column="72"/></name></expr>]<pos:position pos:line="28" pos:column="73"/></index></name></expr></init></decl>;<pos:position pos:line="28" pos:column="74"/></decl_stmt>
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><call><name pos:line="29" pos:column="29">ce_namelen<pos:position pos:line="29" pos:column="39"/></name><argument_list pos:line="29" pos:column="39">(<argument><expr><name pos:line="29" pos:column="40">ce<pos:position pos:line="29" pos:column="42"/></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call> <operator pos:line="29" pos:column="44">==<pos:position pos:line="29" pos:column="46"/></operator> <name pos:line="29" pos:column="47">namelen<pos:position pos:line="29" pos:column="54"/></name> <operator pos:line="29" pos:column="55">&amp;&amp;<pos:position pos:line="29" pos:column="65"/></operator>
			    <operator pos:line="30" pos:column="29">!<pos:position pos:line="30" pos:column="30"/></operator><call><name pos:line="30" pos:column="30">memcmp<pos:position pos:line="30" pos:column="36"/></name><argument_list pos:line="30" pos:column="36">(<argument><expr><name><name pos:line="30" pos:column="37">ce<pos:position pos:line="30" pos:column="39"/></name><operator pos:line="30" pos:column="39">-&gt;<pos:position pos:line="30" pos:column="44"/></operator><name pos:line="30" pos:column="41">name<pos:position pos:line="30" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="47">path<pos:position pos:line="30" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="53">namelen<pos:position pos:line="30" pos:column="60"/></name></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="62"/></condition><then pos:line="30" pos:column="62"> <block pos:line="30" pos:column="63">{
				<expr_stmt><expr><call><name pos:line="31" pos:column="33">fprintf<pos:position pos:line="31" pos:column="40"/></name><argument_list pos:line="31" pos:column="40">(<argument><expr><name pos:line="31" pos:column="41">stderr<pos:position pos:line="31" pos:column="47"/></name></expr></argument>,
					<argument><expr><literal type="string" pos:line="32" pos:column="41">"%s: skipping still unmerged path.\n"<pos:position pos:line="32" pos:column="78"/></literal></expr></argument>,
					<argument><expr><name pos:line="33" pos:column="41">path<pos:position pos:line="33" pos:column="45"/></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt>
				<goto pos:line="34" pos:column="33">goto <name pos:line="34" pos:column="38">free_return<pos:position pos:line="34" pos:column="49"/></name>;<pos:position pos:line="34" pos:column="50"/></goto>
			}<pos:position pos:line="35" pos:column="26"/></block></then></if>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>
	}<pos:position pos:line="37" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="39" pos:column="9">/* Grab blobs from given path from HEAD and MERGE_HEAD,
	 * stuff HEAD version in stage #2,
	 * stuff MERGE_HEAD version in stage #3.
	 */</comment>
	<expr_stmt><expr><name pos:line="43" pos:column="9">ce_2<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <call><name pos:line="43" pos:column="16">read_one_ent<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><literal type="string" pos:line="43" pos:column="29">"our"<pos:position pos:line="43" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="36">head_sha1<pos:position pos:line="43" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="47">path<pos:position pos:line="43" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="53">namelen<pos:position pos:line="43" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="62">2<pos:position pos:line="43" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><name pos:line="44" pos:column="9">ce_3<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <call><name pos:line="44" pos:column="16">read_one_ent<pos:position pos:line="44" pos:column="28"/></name><argument_list pos:line="44" pos:column="28">(<argument><expr><literal type="string" pos:line="44" pos:column="29">"their"<pos:position pos:line="44" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="38">merge_head_sha1<pos:position pos:line="44" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="55">path<pos:position pos:line="44" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="61">namelen<pos:position pos:line="44" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="70">3<pos:position pos:line="44" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="73"/></expr_stmt>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">ce_2<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">||<pos:position pos:line="46" pos:column="21"/></operator> <operator pos:line="46" pos:column="22">!<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="23">ce_3<pos:position pos:line="46" pos:column="27"/></name></expr>)<pos:position pos:line="46" pos:column="28"/></condition><then pos:line="46" pos:column="28"> <block pos:line="46" pos:column="29">{
		<expr_stmt><expr><name pos:line="47" pos:column="17">ret<pos:position pos:line="47" pos:column="20"/></name> <operator pos:line="47" pos:column="21">=<pos:position pos:line="47" pos:column="22"/></operator> <operator pos:line="47" pos:column="23">-<pos:position pos:line="47" pos:column="24"/></operator><literal type="number" pos:line="47" pos:column="24">1<pos:position pos:line="47" pos:column="25"/></literal></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>
		<goto pos:line="48" pos:column="17">goto <name pos:line="48" pos:column="22">free_return<pos:position pos:line="48" pos:column="33"/></name>;<pos:position pos:line="48" pos:column="34"/></goto>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">!<pos:position pos:line="50" pos:column="14"/></operator><call><name pos:line="50" pos:column="14">hashcmp<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><name><name pos:line="50" pos:column="22">ce_2<pos:position pos:line="50" pos:column="26"/></name><operator pos:line="50" pos:column="26">-&gt;<pos:position pos:line="50" pos:column="31"/></operator><name pos:line="50" pos:column="28">sha1<pos:position pos:line="50" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="34">ce_3<pos:position pos:line="50" pos:column="38"/></name><operator pos:line="50" pos:column="38">-&gt;<pos:position pos:line="50" pos:column="43"/></operator><name pos:line="50" pos:column="40">sha1<pos:position pos:line="50" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="45"/></argument_list></call> <operator pos:line="50" pos:column="46">&amp;&amp;<pos:position pos:line="50" pos:column="56"/></operator>
	    <name><name pos:line="51" pos:column="13">ce_2<pos:position pos:line="51" pos:column="17"/></name><operator pos:line="51" pos:column="17">-&gt;<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="19">ce_mode<pos:position pos:line="51" pos:column="26"/></name></name> <operator pos:line="51" pos:column="27">==<pos:position pos:line="51" pos:column="29"/></operator> <name><name pos:line="51" pos:column="30">ce_3<pos:position pos:line="51" pos:column="34"/></name><operator pos:line="51" pos:column="34">-&gt;<pos:position pos:line="51" pos:column="39"/></operator><name pos:line="51" pos:column="36">ce_mode<pos:position pos:line="51" pos:column="43"/></name></name></expr>)<pos:position pos:line="51" pos:column="44"/></condition><then pos:line="51" pos:column="44"> <block pos:line="51" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">fprintf<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">stderr<pos:position pos:line="52" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="33">"%s: identical in both, skipping.\n"<pos:position pos:line="52" pos:column="69"/></literal></expr></argument>,
			<argument><expr><name pos:line="53" pos:column="25">path<pos:position pos:line="53" pos:column="29"/></name></expr></argument>)<pos:position pos:line="53" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>
		<goto pos:line="54" pos:column="17">goto <name pos:line="54" pos:column="22">free_return<pos:position pos:line="54" pos:column="33"/></name>;<pos:position pos:line="54" pos:column="34"/></goto>
	}<pos:position pos:line="55" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="57" pos:column="9">remove_file_from_cache<pos:position pos:line="57" pos:column="31"/></name><argument_list pos:line="57" pos:column="31">(<argument><expr><name pos:line="57" pos:column="32">path<pos:position pos:line="57" pos:column="36"/></name></expr></argument>)<pos:position pos:line="57" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="38"/></expr_stmt>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><call><name pos:line="58" pos:column="13">add_cache_entry<pos:position pos:line="58" pos:column="28"/></name><argument_list pos:line="58" pos:column="28">(<argument><expr><name pos:line="58" pos:column="29">ce_2<pos:position pos:line="58" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="35">ADD_CACHE_OK_TO_ADD<pos:position pos:line="58" pos:column="54"/></name></expr></argument>)<pos:position pos:line="58" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="56"/></condition><then pos:line="58" pos:column="56"> <block pos:line="58" pos:column="57">{
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">error<pos:position pos:line="59" pos:column="22"/></name><argument_list pos:line="59" pos:column="22">(<argument><expr><literal type="string" pos:line="59" pos:column="23">"%s: cannot add our version to the index."<pos:position pos:line="59" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="67">path<pos:position pos:line="59" pos:column="71"/></name></expr></argument>)<pos:position pos:line="59" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="73"/></expr_stmt>
		<expr_stmt><expr><name pos:line="60" pos:column="17">ret<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <operator pos:line="60" pos:column="23">-<pos:position pos:line="60" pos:column="24"/></operator><literal type="number" pos:line="60" pos:column="24">1<pos:position pos:line="60" pos:column="25"/></literal></expr>;<pos:position pos:line="60" pos:column="26"/></expr_stmt>
		<goto pos:line="61" pos:column="17">goto <name pos:line="61" pos:column="22">free_return<pos:position pos:line="61" pos:column="33"/></name>;<pos:position pos:line="61" pos:column="34"/></goto>
	}<pos:position pos:line="62" pos:column="10"/></block></then></if>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><operator pos:line="63" pos:column="13">!<pos:position pos:line="63" pos:column="14"/></operator><call><name pos:line="63" pos:column="14">add_cache_entry<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">ce_3<pos:position pos:line="63" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="36">ADD_CACHE_OK_TO_ADD<pos:position pos:line="63" pos:column="55"/></name></expr></argument>)<pos:position pos:line="63" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="57"/></condition><then pos:line="63" pos:column="57">
		<block type="pseudo"><return pos:line="64" pos:column="17">return <expr><literal type="number" pos:line="64" pos:column="24">0<pos:position pos:line="64" pos:column="25"/></literal></expr>;<pos:position pos:line="64" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="65" pos:column="9">error<pos:position pos:line="65" pos:column="14"/></name><argument_list pos:line="65" pos:column="14">(<argument><expr><literal type="string" pos:line="65" pos:column="15">"%s: cannot add their version to the index."<pos:position pos:line="65" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="61">path<pos:position pos:line="65" pos:column="65"/></name></expr></argument>)<pos:position pos:line="65" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="67"/></expr_stmt>
	<expr_stmt><expr><name pos:line="66" pos:column="9">ret<pos:position pos:line="66" pos:column="12"/></name> <operator pos:line="66" pos:column="13">=<pos:position pos:line="66" pos:column="14"/></operator> <operator pos:line="66" pos:column="15">-<pos:position pos:line="66" pos:column="16"/></operator><literal type="number" pos:line="66" pos:column="16">1<pos:position pos:line="66" pos:column="17"/></literal></expr>;<pos:position pos:line="66" pos:column="18"/></expr_stmt>
 <label><name pos:line="67" pos:column="2">free_return<pos:position pos:line="67" pos:column="13"/></name>:<pos:position pos:line="67" pos:column="14"/></label>
	<expr_stmt><expr><call><name pos:line="68" pos:column="9">free<pos:position pos:line="68" pos:column="13"/></name><argument_list pos:line="68" pos:column="13">(<argument><expr><name pos:line="68" pos:column="14">ce_2<pos:position pos:line="68" pos:column="18"/></name></expr></argument>)<pos:position pos:line="68" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="69" pos:column="9">free<pos:position pos:line="69" pos:column="13"/></name><argument_list pos:line="69" pos:column="13">(<argument><expr><name pos:line="69" pos:column="14">ce_3<pos:position pos:line="69" pos:column="18"/></name></expr></argument>)<pos:position pos:line="69" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="20"/></expr_stmt>
	<return pos:line="70" pos:column="9">return <expr><name pos:line="70" pos:column="16">ret<pos:position pos:line="70" pos:column="19"/></name></expr>;<pos:position pos:line="70" pos:column="20"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
