<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_747.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">init_sizeof_ioinfo<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">istty<pos:position pos:line="3" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="20">wastty<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<comment type="block" pos:line="4" pos:column="9">/* don't init twice */</comment>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">sizeof_ioinfo<pos:position pos:line="5" pos:column="26"/></name></expr>)<pos:position pos:line="5" pos:column="27"/></condition><then pos:line="5" pos:column="27">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><name pos:line="6" pos:column="24">sizeof_ioinfo<pos:position pos:line="6" pos:column="37"/></name> <operator pos:line="6" pos:column="38">&gt;=<pos:position pos:line="6" pos:column="43"/></operator> <literal type="number" pos:line="6" pos:column="41">256<pos:position pos:line="6" pos:column="44"/></literal></expr>;<pos:position pos:line="6" pos:column="45"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="8" pos:column="9">sizeof_ioinfo<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">=<pos:position pos:line="8" pos:column="24"/></operator> <sizeof pos:line="8" pos:column="25">sizeof<argument_list pos:line="8" pos:column="31">(<argument><expr><name pos:line="8" pos:column="32">ioinfo<pos:position pos:line="8" pos:column="38"/></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></sizeof></expr>;<pos:position pos:line="8" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name pos:line="9" pos:column="9">wastty<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name pos:line="9" pos:column="18">isatty<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><literal type="number" pos:line="9" pos:column="25">1<pos:position pos:line="9" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt>
	<while pos:line="10" pos:column="9">while <condition pos:line="10" pos:column="15">(<expr><name pos:line="10" pos:column="16">sizeof_ioinfo<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">&lt;<pos:position pos:line="10" pos:column="34"/></operator> <literal type="number" pos:line="10" pos:column="32">256<pos:position pos:line="10" pos:column="35"/></literal></expr>)<pos:position pos:line="10" pos:column="36"/></condition> <block pos:line="10" pos:column="37">{
		<comment type="block" pos:line="11" pos:column="17">/* toggle FDEV flag, check isatty, then toggle back */</comment>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">_pioinfo<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><literal type="number" pos:line="12" pos:column="26">1<pos:position pos:line="12" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">osflags<pos:position pos:line="12" pos:column="37"/></name> <operator pos:line="12" pos:column="38">^=<pos:position pos:line="12" pos:column="40"/></operator> <name pos:line="12" pos:column="41">FDEV<pos:position pos:line="12" pos:column="45"/></name></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">istty<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <call><name pos:line="13" pos:column="25">isatty<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><literal type="number" pos:line="13" pos:column="32">1<pos:position pos:line="13" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">_pioinfo<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><literal type="number" pos:line="14" pos:column="26">1<pos:position pos:line="14" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call><operator pos:line="14" pos:column="28">-&gt;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="30">osflags<pos:position pos:line="14" pos:column="37"/></name> <operator pos:line="14" pos:column="38">^=<pos:position pos:line="14" pos:column="40"/></operator> <name pos:line="14" pos:column="41">FDEV<pos:position pos:line="14" pos:column="45"/></name></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>
		<comment type="block" pos:line="15" pos:column="17">/* return if we found the correct size */</comment>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">istty<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">!=<pos:position pos:line="16" pos:column="29"/></operator> <name pos:line="16" pos:column="30">wastty<pos:position pos:line="16" pos:column="36"/></name></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37">
			<block type="pseudo"><return pos:line="17" pos:column="25">return <expr><literal type="number" pos:line="17" pos:column="32">0<pos:position pos:line="17" pos:column="33"/></literal></expr>;<pos:position pos:line="17" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="18" pos:column="17">sizeof_ioinfo<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">+=<pos:position pos:line="18" pos:column="33"/></operator> <sizeof pos:line="18" pos:column="34">sizeof<argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">void<pos:position pos:line="18" pos:column="45"/></name><operator pos:line="18" pos:column="45">*<pos:position pos:line="18" pos:column="46"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></sizeof></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">error<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><literal type="string" pos:line="20" pos:column="15">"Tweaking file descriptors doesn't work with this MSVCRT.dll"<pos:position pos:line="20" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="78"/></expr_stmt>
	<return pos:line="21" pos:column="9">return <expr><literal type="number" pos:line="21" pos:column="16">1<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
