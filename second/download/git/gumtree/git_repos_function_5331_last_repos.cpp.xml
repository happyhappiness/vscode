<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5331_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">copy_templates_1<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">strbuf<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">path<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">strbuf<pos:position pos:line="1" pos:column="64"/></name></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><parameter><decl><type><specifier pos:line="1" pos:column="66">template<pos:position pos:line="1" pos:column="74"/></specifier></type></decl></parameter></decl></parameter>,
			     <parameter><decl><type><name pos:line="2" pos:column="30">DIR<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">dir<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">path_baselen<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><name><name pos:line="4" pos:column="31">path<pos:position pos:line="4" pos:column="35"/></name><operator pos:line="4" pos:column="35">-&gt;<pos:position pos:line="4" pos:column="40"/></operator><name pos:line="4" pos:column="37">len<pos:position pos:line="4" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">template_baselen<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">=<pos:position pos:line="5" pos:column="34"/></init></decl></decl_stmt> <template pos:line="5" pos:column="35">template-&gt;<parameter><type><name pos:line="5" pos:column="45">len<pos:position pos:line="5" pos:column="48"/></name></type>;
	struct dirent *de<pos:position pos:line="6" pos:column="26"/></parameter><empty_stmt pos:line="6" pos:column="26">;<pos:position pos:line="6" pos:column="27"/></empty_stmt></template>

	<comment type="block" pos:line="8" pos:column="9">/* Note: if ".git/hooks" file exists in the repository being
	 * re-initialized, /etc/core-git/templates/hooks/update would
	 * cause "git init" to fail here.  I think this is sane but
	 * it means that the set of templates we ship by default, along
	 * with the way the namespace under .git/ is organized, should
	 * be really carefully chosen.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">safe_create_dir<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name><name pos:line="15" pos:column="25">path<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">buf<pos:position pos:line="15" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="36">1<pos:position pos:line="15" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt>
	<while pos:line="16" pos:column="9">while <condition pos:line="16" pos:column="15">(<expr><operator pos:line="16" pos:column="16">(<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">de<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <call><name pos:line="16" pos:column="22">readdir<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">dir<pos:position pos:line="16" pos:column="33"/></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call><operator pos:line="16" pos:column="34">)<pos:position pos:line="16" pos:column="35"/></operator> <operator pos:line="16" pos:column="36">!=<pos:position pos:line="16" pos:column="38"/></operator> <name pos:line="16" pos:column="39">NULL<pos:position pos:line="16" pos:column="43"/></name></expr>)<pos:position pos:line="16" pos:column="44"/></condition> <block pos:line="16" pos:column="45">{
		<decl_stmt><decl><type><name><name pos:line="17" pos:column="17">struct<pos:position pos:line="17" pos:column="23"/></name> <name pos:line="17" pos:column="24">stat<pos:position pos:line="17" pos:column="28"/></name></name></type> <name pos:line="17" pos:column="29">st_git<pos:position pos:line="17" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="17" pos:column="37">st_template<pos:position pos:line="17" pos:column="48"/></name></decl>;<pos:position pos:line="17" pos:column="49"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">int<pos:position pos:line="18" pos:column="20"/></name></type> <name pos:line="18" pos:column="21">exists<pos:position pos:line="18" pos:column="27"/></name> <init pos:line="18" pos:column="28">= <expr><literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="32"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="20" pos:column="17">strbuf_setlen<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">path<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="37">path_baselen<pos:position pos:line="20" pos:column="49"/></name></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt>
		<macro><name pos:line="21" pos:column="17">strbuf_setlen<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument pos:line="21" pos:column="31">template<pos:position pos:line="21" pos:column="39"/></argument>, <argument pos:line="21" pos:column="41">template_baselen<pos:position pos:line="21" pos:column="57"/></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></macro><empty_stmt pos:line="21" pos:column="58">;<pos:position pos:line="21" pos:column="59"/></empty_stmt>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">de<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">-&gt;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="25">d_name<pos:position pos:line="23" pos:column="31"/></name><index pos:line="23" pos:column="31">[<expr><literal type="number" pos:line="23" pos:column="32">0<pos:position pos:line="23" pos:column="33"/></literal></expr>]<pos:position pos:line="23" pos:column="34"/></index></name> <operator pos:line="23" pos:column="35">==<pos:position pos:line="23" pos:column="37"/></operator> <literal type="char" pos:line="23" pos:column="38">'.'<pos:position pos:line="23" pos:column="41"/></literal></expr>)<pos:position pos:line="23" pos:column="42"/></condition><then pos:line="23" pos:column="42">
			<block type="pseudo"><continue pos:line="24" pos:column="25">continue;<pos:position pos:line="24" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">strbuf_addstr<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><name pos:line="25" pos:column="31">path<pos:position pos:line="25" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="37">de<pos:position pos:line="25" pos:column="39"/></name><operator pos:line="25" pos:column="39">-&gt;<pos:position pos:line="25" pos:column="44"/></operator><name pos:line="25" pos:column="41">d_name<pos:position pos:line="25" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
		<macro><name pos:line="26" pos:column="17">strbuf_addstr<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument pos:line="26" pos:column="31">template<pos:position pos:line="26" pos:column="39"/></argument>, <argument pos:line="26" pos:column="41">de-&gt;d_name<pos:position pos:line="26" pos:column="51"/></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></macro><empty_stmt pos:line="26" pos:column="52">;<pos:position pos:line="26" pos:column="53"/></empty_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">lstat<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name><name pos:line="27" pos:column="27">path<pos:position pos:line="27" pos:column="31"/></name><operator pos:line="27" pos:column="31">-&gt;<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="33">buf<pos:position pos:line="27" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="38">&amp;<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="39">st_git<pos:position pos:line="27" pos:column="45"/></name></expr></argument>)<pos:position pos:line="27" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="47"/></condition><then pos:line="27" pos:column="47"> <block pos:line="27" pos:column="48">{
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><name pos:line="28" pos:column="29">errno<pos:position pos:line="28" pos:column="34"/></name> <operator pos:line="28" pos:column="35">!=<pos:position pos:line="28" pos:column="37"/></operator> <name pos:line="28" pos:column="38">ENOENT<pos:position pos:line="28" pos:column="44"/></name></expr>)<pos:position pos:line="28" pos:column="45"/></condition><then pos:line="28" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="33">die_errno<pos:position pos:line="29" pos:column="42"/></name><argument_list pos:line="29" pos:column="42">(<argument><expr><call><name pos:line="29" pos:column="43">_<pos:position pos:line="29" pos:column="44"/></name><argument_list pos:line="29" pos:column="44">(<argument><expr><literal type="string" pos:line="29" pos:column="45">"cannot stat '%s'"<pos:position pos:line="29" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="66">path<pos:position pos:line="29" pos:column="70"/></name><operator pos:line="29" pos:column="70">-&gt;<pos:position pos:line="29" pos:column="75"/></operator><name pos:line="29" pos:column="72">buf<pos:position pos:line="29" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="77"/></expr_stmt></block></then></if>
		}<pos:position pos:line="30" pos:column="18"/></block></then>
		<else pos:line="31" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="25">exists<pos:position pos:line="32" pos:column="31"/></name> <operator pos:line="32" pos:column="32">=<pos:position pos:line="32" pos:column="33"/></operator> <literal type="number" pos:line="32" pos:column="34">1<pos:position pos:line="32" pos:column="35"/></literal></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt></block></else></if>

		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<macro><name pos:line="34" pos:column="21">lstat<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument pos:line="34" pos:column="27">template-&gt;buf<pos:position pos:line="34" pos:column="40"/></argument>, <argument pos:line="34" pos:column="42">&amp;st_template<pos:position pos:line="34" pos:column="54"/></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></macro>)<pos:position pos:line="34" pos:column="56"/></condition><then pos:line="34" pos:column="56">
			<block type="pseudo"><macro><name pos:line="35" pos:column="25">die_errno<pos:position pos:line="35" pos:column="34"/></name><argument_list pos:line="35" pos:column="34">(<argument pos:line="35" pos:column="35">_(<literal type="string" pos:line="35" pos:column="37">"cannot stat template '%s'"<pos:position pos:line="35" pos:column="64"/></literal>)<pos:position pos:line="35" pos:column="65"/></argument>, <argument pos:line="35" pos:column="67">template-&gt;buf<pos:position pos:line="35" pos:column="80"/></argument>)<pos:position pos:line="35" pos:column="81"/></argument_list></macro><empty_stmt pos:line="35" pos:column="81">;<pos:position pos:line="35" pos:column="82"/></empty_stmt></block></then></if>

		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><call><name pos:line="37" pos:column="21">S_ISDIR<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name><name pos:line="37" pos:column="29">st_template<pos:position pos:line="37" pos:column="40"/></name><operator pos:line="37" pos:column="40">.<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="41">st_mode<pos:position pos:line="37" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="50"/></condition><then pos:line="37" pos:column="50"> <block pos:line="37" pos:column="51">{
			<decl_stmt><decl><type><name pos:line="38" pos:column="25">DIR<pos:position pos:line="38" pos:column="28"/></name> <modifier pos:line="38" pos:column="29">*<pos:position pos:line="38" pos:column="30"/></modifier></type><name pos:line="38" pos:column="30">subdir<pos:position pos:line="38" pos:column="36"/></name> <init pos:line="38" pos:column="37">= <macro><name pos:line="38" pos:column="39">opendir<pos:position pos:line="38" pos:column="46"/></name><argument_list pos:line="38" pos:column="46">(<argument pos:line="38" pos:column="47">template-&gt;buf<pos:position pos:line="38" pos:column="60"/></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></macro></init></decl>;<pos:position pos:line="38" pos:column="62"/></decl_stmt>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><operator pos:line="39" pos:column="29">!<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="30">subdir<pos:position pos:line="39" pos:column="36"/></name></expr>)<pos:position pos:line="39" pos:column="37"/></condition><then pos:line="39" pos:column="37">
				<block type="pseudo"><macro><name pos:line="40" pos:column="33">die_errno<pos:position pos:line="40" pos:column="42"/></name><argument_list pos:line="40" pos:column="42">(<argument pos:line="40" pos:column="43">_(<literal type="string" pos:line="40" pos:column="45">"cannot opendir '%s'"<pos:position pos:line="40" pos:column="66"/></literal>)<pos:position pos:line="40" pos:column="67"/></argument>, <argument pos:line="40" pos:column="69">template-&gt;buf<pos:position pos:line="40" pos:column="82"/></argument>)<pos:position pos:line="40" pos:column="83"/></argument_list></macro><empty_stmt pos:line="40" pos:column="83">;<pos:position pos:line="40" pos:column="84"/></empty_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">strbuf_addch<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">(<argument><expr><name pos:line="41" pos:column="38">path<pos:position pos:line="41" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="44">'/'<pos:position pos:line="41" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="49"/></expr_stmt>
			<macro><name pos:line="42" pos:column="25">strbuf_addch<pos:position pos:line="42" pos:column="37"/></name><argument_list pos:line="42" pos:column="37">(<argument pos:line="42" pos:column="38">template<pos:position pos:line="42" pos:column="46"/></argument>, <argument><literal type="char" pos:line="42" pos:column="48">'/'<pos:position pos:line="42" pos:column="51"/></literal></argument>)<pos:position pos:line="42" pos:column="52"/></argument_list></macro><empty_stmt pos:line="42" pos:column="52">;<pos:position pos:line="42" pos:column="53"/></empty_stmt>
			<macro><name pos:line="43" pos:column="25">copy_templates_1<pos:position pos:line="43" pos:column="41"/></name><argument_list pos:line="43" pos:column="41">(<argument pos:line="43" pos:column="42">path<pos:position pos:line="43" pos:column="46"/></argument>, <argument pos:line="43" pos:column="48">template<pos:position pos:line="43" pos:column="56"/></argument>, <argument pos:line="43" pos:column="58">subdir<pos:position pos:line="43" pos:column="64"/></argument>)<pos:position pos:line="43" pos:column="65"/></argument_list></macro><empty_stmt pos:line="43" pos:column="65">;<pos:position pos:line="43" pos:column="66"/></empty_stmt>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">closedir<pos:position pos:line="44" pos:column="33"/></name><argument_list pos:line="44" pos:column="33">(<argument><expr><name pos:line="44" pos:column="34">subdir<pos:position pos:line="44" pos:column="40"/></name></expr></argument>)<pos:position pos:line="44" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="45" pos:column="18"/></block></then>
		<elseif pos:line="46" pos:column="17">else <if pos:line="46" pos:column="22">if <condition pos:line="46" pos:column="25">(<expr><name pos:line="46" pos:column="26">exists<pos:position pos:line="46" pos:column="32"/></name></expr>)<pos:position pos:line="46" pos:column="33"/></condition><then pos:line="46" pos:column="33">
			<block type="pseudo"><continue pos:line="47" pos:column="25">continue;<pos:position pos:line="47" pos:column="34"/></continue></block></then></if></elseif>
		<elseif pos:line="48" pos:column="17">else <if pos:line="48" pos:column="22">if <condition pos:line="48" pos:column="25">(<expr><call><name pos:line="48" pos:column="26">S_ISLNK<pos:position pos:line="48" pos:column="33"/></name><argument_list pos:line="48" pos:column="33">(<argument><expr><name><name pos:line="48" pos:column="34">st_template<pos:position pos:line="48" pos:column="45"/></name><operator pos:line="48" pos:column="45">.<pos:position pos:line="48" pos:column="46"/></operator><name pos:line="48" pos:column="46">st_mode<pos:position pos:line="48" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="55"/></condition><then pos:line="48" pos:column="55"> <block pos:line="48" pos:column="56">{
			<decl_stmt><decl><type><name><name pos:line="49" pos:column="25">struct<pos:position pos:line="49" pos:column="31"/></name> <name pos:line="49" pos:column="32">strbuf<pos:position pos:line="49" pos:column="38"/></name></name></type> <name pos:line="49" pos:column="39">lnk<pos:position pos:line="49" pos:column="42"/></name> <init pos:line="49" pos:column="43">= <expr><name pos:line="49" pos:column="45">STRBUF_INIT<pos:position pos:line="49" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="49" pos:column="57"/></decl_stmt>
			<if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<macro><name pos:line="50" pos:column="29">strbuf_readlink<pos:position pos:line="50" pos:column="44"/></name><argument_list pos:line="50" pos:column="44">(<argument pos:line="50" pos:column="45">&amp;lnk<pos:position pos:line="50" pos:column="49"/></argument>, <argument pos:line="50" pos:column="51">template-&gt;buf<pos:position pos:line="50" pos:column="64"/></argument>, <argument><literal type="number" pos:line="50" pos:column="66">0<pos:position pos:line="50" pos:column="67"/></literal></argument>)<pos:position pos:line="50" pos:column="68"/></argument_list></macro> <expr><operator pos:line="50" pos:column="69">&lt;<pos:position pos:line="50" pos:column="73"/></operator> <literal type="number" pos:line="50" pos:column="71">0<pos:position pos:line="50" pos:column="72"/></literal></expr>)<pos:position pos:line="50" pos:column="73"/></condition><then pos:line="50" pos:column="73">
				<block type="pseudo"><macro><name pos:line="51" pos:column="33">die_errno<pos:position pos:line="51" pos:column="42"/></name><argument_list pos:line="51" pos:column="42">(<argument pos:line="51" pos:column="43">_(<literal type="string" pos:line="51" pos:column="45">"cannot readlink '%s'"<pos:position pos:line="51" pos:column="67"/></literal>)<pos:position pos:line="51" pos:column="68"/></argument>, <argument pos:line="51" pos:column="70">template-&gt;buf<pos:position pos:line="51" pos:column="83"/></argument>)<pos:position pos:line="51" pos:column="84"/></argument_list></macro><empty_stmt pos:line="51" pos:column="84">;<pos:position pos:line="51" pos:column="85"/></empty_stmt></block></then></if>
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><call><name pos:line="52" pos:column="29">symlink<pos:position pos:line="52" pos:column="36"/></name><argument_list pos:line="52" pos:column="36">(<argument><expr><name><name pos:line="52" pos:column="37">lnk<pos:position pos:line="52" pos:column="40"/></name><operator pos:line="52" pos:column="40">.<pos:position pos:line="52" pos:column="41"/></operator><name pos:line="52" pos:column="41">buf<pos:position pos:line="52" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="46">path<pos:position pos:line="52" pos:column="50"/></name><operator pos:line="52" pos:column="50">-&gt;<pos:position pos:line="52" pos:column="55"/></operator><name pos:line="52" pos:column="52">buf<pos:position pos:line="52" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="57"/></condition><then pos:line="52" pos:column="57">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="33">die_errno<pos:position pos:line="53" pos:column="42"/></name><argument_list pos:line="53" pos:column="42">(<argument><expr><call><name pos:line="53" pos:column="43">_<pos:position pos:line="53" pos:column="44"/></name><argument_list pos:line="53" pos:column="44">(<argument><expr><literal type="string" pos:line="53" pos:column="45">"cannot symlink '%s' '%s'"<pos:position pos:line="53" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="72"/></argument_list></call></expr></argument>,
					  <argument><expr><name><name pos:line="54" pos:column="43">lnk<pos:position pos:line="54" pos:column="46"/></name><operator pos:line="54" pos:column="46">.<pos:position pos:line="54" pos:column="47"/></operator><name pos:line="54" pos:column="47">buf<pos:position pos:line="54" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="52">path<pos:position pos:line="54" pos:column="56"/></name><operator pos:line="54" pos:column="56">-&gt;<pos:position pos:line="54" pos:column="61"/></operator><name pos:line="54" pos:column="58">buf<pos:position pos:line="54" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="63"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">strbuf_release<pos:position pos:line="55" pos:column="39"/></name><argument_list pos:line="55" pos:column="39">(<argument><expr><operator pos:line="55" pos:column="40">&amp;<pos:position pos:line="55" pos:column="45"/></operator><name pos:line="55" pos:column="41">lnk<pos:position pos:line="55" pos:column="44"/></name></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="56" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="57" pos:column="17">else <if pos:line="57" pos:column="22">if <condition pos:line="57" pos:column="25">(<expr><call><name pos:line="57" pos:column="26">S_ISREG<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">(<argument><expr><name><name pos:line="57" pos:column="34">st_template<pos:position pos:line="57" pos:column="45"/></name><operator pos:line="57" pos:column="45">.<pos:position pos:line="57" pos:column="46"/></operator><name pos:line="57" pos:column="46">st_mode<pos:position pos:line="57" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="55"/></condition><then pos:line="57" pos:column="55"> <block pos:line="57" pos:column="56">{
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<macro><name pos:line="58" pos:column="29">copy_file<pos:position pos:line="58" pos:column="38"/></name><argument_list pos:line="58" pos:column="38">(<argument pos:line="58" pos:column="39">path-&gt;buf<pos:position pos:line="58" pos:column="48"/></argument>, <argument pos:line="58" pos:column="50">template-&gt;buf<pos:position pos:line="58" pos:column="63"/></argument>, <argument pos:line="58" pos:column="65">st_template.st_mode<pos:position pos:line="58" pos:column="84"/></argument>)<pos:position pos:line="58" pos:column="85"/></argument_list></macro>)<pos:position pos:line="58" pos:column="86"/></condition><then pos:line="58" pos:column="86">
				<block type="pseudo"><macro><name pos:line="59" pos:column="33">die_errno<pos:position pos:line="59" pos:column="42"/></name><argument_list pos:line="59" pos:column="42">(<argument pos:line="59" pos:column="43">_(<literal type="string" pos:line="59" pos:column="45">"cannot copy '%s' to '%s'"<pos:position pos:line="59" pos:column="71"/></literal>)<pos:position pos:line="59" pos:column="72"/></argument>,
					  <argument pos:line="60" pos:column="43">template-&gt;buf<pos:position pos:line="60" pos:column="56"/></argument>, <argument pos:line="60" pos:column="58">path-&gt;buf<pos:position pos:line="60" pos:column="67"/></argument>)<pos:position pos:line="60" pos:column="68"/></argument_list></macro><empty_stmt pos:line="60" pos:column="68">;<pos:position pos:line="60" pos:column="69"/></empty_stmt></block></then></if>
		}<pos:position pos:line="61" pos:column="18"/></block></then></if></elseif>
		<else pos:line="62" pos:column="17">else
			<block type="pseudo"><macro><name pos:line="63" pos:column="25">error<pos:position pos:line="63" pos:column="30"/></name><argument_list pos:line="63" pos:column="30">(<argument pos:line="63" pos:column="31">_(<literal type="string" pos:line="63" pos:column="33">"ignoring template %s"<pos:position pos:line="63" pos:column="55"/></literal>)<pos:position pos:line="63" pos:column="56"/></argument>, <argument pos:line="63" pos:column="58">template-&gt;buf<pos:position pos:line="63" pos:column="71"/></argument>)<pos:position pos:line="63" pos:column="72"/></argument_list></macro><empty_stmt pos:line="63" pos:column="72">;<pos:position pos:line="63" pos:column="73"/></empty_stmt></block></else></if>
	}<pos:position pos:line="64" pos:column="10"/></block></while>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
