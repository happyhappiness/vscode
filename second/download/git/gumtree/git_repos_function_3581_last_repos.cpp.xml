<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3581_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">try_merge<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">rerere_id<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">id<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">path<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="2" pos:column="22">mmfile_t<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">cur<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">mmbuffer_t<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">result<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">mmfile_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">base<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><block pos:line="5" pos:column="25">{<expr><name pos:line="5" pos:column="26">NULL<pos:position pos:line="5" pos:column="30"/></name></expr>, <expr><literal type="number" pos:line="5" pos:column="32">0<pos:position pos:line="5" pos:column="33"/></literal></expr>}<pos:position pos:line="5" pos:column="34"/></block></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="36">other<pos:position pos:line="5" pos:column="41"/></name> <init pos:line="5" pos:column="42">= <expr><block pos:line="5" pos:column="44">{<expr><name pos:line="5" pos:column="45">NULL<pos:position pos:line="5" pos:column="49"/></name></expr>, <expr><literal type="number" pos:line="5" pos:column="51">0<pos:position pos:line="5" pos:column="52"/></literal></expr>}<pos:position pos:line="5" pos:column="53"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="54"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name pos:line="7" pos:column="13">read_mmfile<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><operator pos:line="7" pos:column="25">&amp;<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="26">base<pos:position pos:line="7" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="7" pos:column="32">rerere_path<pos:position pos:line="7" pos:column="43"/></name><argument_list pos:line="7" pos:column="43">(<argument><expr><name pos:line="7" pos:column="44">id<pos:position pos:line="7" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="48">"preimage"<pos:position pos:line="7" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></call> <operator pos:line="7" pos:column="61">||<pos:position pos:line="7" pos:column="63"/></operator>
	    <call><name pos:line="8" pos:column="13">read_mmfile<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><operator pos:line="8" pos:column="25">&amp;<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="26">other<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="33">rerere_path<pos:position pos:line="8" pos:column="44"/></name><argument_list pos:line="8" pos:column="44">(<argument><expr><name pos:line="8" pos:column="45">id<pos:position pos:line="8" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="49">"postimage"<pos:position pos:line="8" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="63"/></condition><then pos:line="8" pos:column="63">
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">ret<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">=<pos:position pos:line="9" pos:column="22"/></operator> <literal type="number" pos:line="9" pos:column="23">1<pos:position pos:line="9" pos:column="24"/></literal></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt></block></then>
	<else pos:line="10" pos:column="9">else
		<comment type="block" pos:line="11" pos:column="17">/*
		 * A three-way merge. Note that this honors user-customizable
		 * low-level merge driver settings.
		 */</comment>
		<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="17">ret<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <call><name pos:line="15" pos:column="23">ll_merge<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">result<pos:position pos:line="15" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="40">path<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="46">&amp;<pos:position pos:line="15" pos:column="51"/></operator><name pos:line="15" pos:column="47">base<pos:position pos:line="15" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">NULL<pos:position pos:line="15" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="59">cur<pos:position pos:line="15" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="64">""<pos:position pos:line="15" pos:column="66"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="68">&amp;<pos:position pos:line="15" pos:column="73"/></operator><name pos:line="15" pos:column="69">other<pos:position pos:line="15" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="76">""<pos:position pos:line="15" pos:column="78"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="80">NULL<pos:position pos:line="15" pos:column="84"/></name></expr></argument>)<pos:position pos:line="15" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="86"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">free<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><name><name pos:line="17" pos:column="14">base<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">.<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">ptr<pos:position pos:line="17" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">free<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><name><name pos:line="18" pos:column="14">other<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">.<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">ptr<pos:position pos:line="18" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>

	<return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">ret<pos:position pos:line="20" pos:column="19"/></name></expr>;<pos:position pos:line="20" pos:column="20"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
