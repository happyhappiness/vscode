<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3978_git-2.5.4.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">bitmap<pos:position pos:line="1" pos:column="14"/></name></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">ewah_to_bitmap<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">ewah_bitmap<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">ewah<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">bitmap<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">bitmap<pos:position pos:line="3" pos:column="30"/></name> <init pos:line="3" pos:column="31">= <expr><call><name pos:line="3" pos:column="33">bitmap_new<pos:position pos:line="3" pos:column="43"/></name><argument_list pos:line="3" pos:column="43">()<pos:position pos:line="3" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ewah_iterator<pos:position pos:line="4" pos:column="29"/></name></name></type> <name pos:line="4" pos:column="30">it<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">eword_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">blowup<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">i<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">ewah_iterator_init<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><operator pos:line="8" pos:column="28">&amp;<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="29">it<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="33">ewah<pos:position pos:line="8" pos:column="37"/></name></expr></argument>)<pos:position pos:line="8" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="39"/></expr_stmt>

	<while pos:line="10" pos:column="9">while <condition pos:line="10" pos:column="15">(<expr><call><name pos:line="10" pos:column="16">ewah_iterator_next<pos:position pos:line="10" pos:column="34"/></name><argument_list pos:line="10" pos:column="34">(<argument><expr><operator pos:line="10" pos:column="35">&amp;<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="36">blowup<pos:position pos:line="10" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="44">&amp;<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="45">it<pos:position pos:line="10" pos:column="47"/></name></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="49"/></condition> <block pos:line="10" pos:column="50">{
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">i<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">&gt;=<pos:position pos:line="11" pos:column="28"/></operator> <name><name pos:line="11" pos:column="26">bitmap<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">-&gt;<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="34">word_alloc<pos:position pos:line="11" pos:column="44"/></name></name></expr>)<pos:position pos:line="11" pos:column="45"/></condition><then pos:line="11" pos:column="45"> <block pos:line="11" pos:column="46">{
			<expr_stmt><expr><name><name pos:line="12" pos:column="25">bitmap<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">-&gt;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="33">word_alloc<pos:position pos:line="12" pos:column="43"/></name></name> <operator pos:line="12" pos:column="44">*=<pos:position pos:line="12" pos:column="46"/></operator> <literal type="number" pos:line="12" pos:column="47">1.5<pos:position pos:line="12" pos:column="50"/></literal></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="13" pos:column="25">bitmap<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">-&gt;<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="33">words<pos:position pos:line="13" pos:column="38"/></name></name> <operator pos:line="13" pos:column="39">=<pos:position pos:line="13" pos:column="40"/></operator> <call><name pos:line="13" pos:column="41">ewah_realloc<pos:position pos:line="13" pos:column="53"/></name><argument_list pos:line="13" pos:column="53">(
				<argument><expr><name><name pos:line="14" pos:column="33">bitmap<pos:position pos:line="14" pos:column="39"/></name><operator pos:line="14" pos:column="39">-&gt;<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="41">words<pos:position pos:line="14" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="48">bitmap<pos:position pos:line="14" pos:column="54"/></name><operator pos:line="14" pos:column="54">-&gt;<pos:position pos:line="14" pos:column="59"/></operator><name pos:line="14" pos:column="56">word_alloc<pos:position pos:line="14" pos:column="66"/></name></name> <operator pos:line="14" pos:column="67">*<pos:position pos:line="14" pos:column="68"/></operator> <sizeof pos:line="14" pos:column="69">sizeof<argument_list pos:line="14" pos:column="75">(<argument><expr><name pos:line="14" pos:column="76">eword_t<pos:position pos:line="14" pos:column="83"/></name></expr></argument>)<pos:position pos:line="14" pos:column="84"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="86"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="17" pos:column="17">bitmap<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">-&gt;<pos:position pos:line="17" pos:column="28"/></operator><name pos:line="17" pos:column="25">words<pos:position pos:line="17" pos:column="30"/></name><index pos:line="17" pos:column="30">[<expr><name pos:line="17" pos:column="31">i<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">++<pos:position pos:line="17" pos:column="34"/></operator></expr>]<pos:position pos:line="17" pos:column="35"/></index></name> <operator pos:line="17" pos:column="36">=<pos:position pos:line="17" pos:column="37"/></operator> <name pos:line="17" pos:column="38">blowup<pos:position pos:line="17" pos:column="44"/></name></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></while>

	<expr_stmt><expr><name><name pos:line="20" pos:column="9">bitmap<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">-&gt;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="17">word_alloc<pos:position pos:line="20" pos:column="27"/></name></name> <operator pos:line="20" pos:column="28">=<pos:position pos:line="20" pos:column="29"/></operator> <name pos:line="20" pos:column="30">i<pos:position pos:line="20" pos:column="31"/></name></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>
	<return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">bitmap<pos:position pos:line="21" pos:column="22"/></name></expr>;<pos:position pos:line="21" pos:column="23"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
