<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_410_git-2.8.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">int<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">contains<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">mmfile_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">mf<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">regex_t<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">regexp<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">kwset_t<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">kws<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">cnt<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">long<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">sz<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">sz<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <name><name pos:line="7" pos:column="14">mf<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">-&gt;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="18">size<pos:position pos:line="7" pos:column="22"/></name></name></expr>;<pos:position pos:line="7" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">data<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <name><name pos:line="8" pos:column="16">mf<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">-&gt;<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="20">ptr<pos:position pos:line="8" pos:column="23"/></name></name></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name pos:line="9" pos:column="9">cnt<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <literal type="number" pos:line="9" pos:column="15">0<pos:position pos:line="9" pos:column="16"/></literal></expr>;<pos:position pos:line="9" pos:column="17"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">regexp<pos:position pos:line="11" pos:column="19"/></name></expr>)<pos:position pos:line="11" pos:column="20"/></condition><then pos:line="11" pos:column="20"> <block pos:line="11" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">regmatch_t<pos:position pos:line="12" pos:column="27"/></name></type> <name pos:line="12" pos:column="28">regmatch<pos:position pos:line="12" pos:column="36"/></name></decl>;<pos:position pos:line="12" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">flags<pos:position pos:line="13" pos:column="26"/></name> <init pos:line="13" pos:column="27">= <expr><literal type="number" pos:line="13" pos:column="29">0<pos:position pos:line="13" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="31"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="15" pos:column="17">assert<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name><name pos:line="15" pos:column="24">data<pos:position pos:line="15" pos:column="28"/></name><index pos:line="15" pos:column="28">[<expr><name pos:line="15" pos:column="29">sz<pos:position pos:line="15" pos:column="31"/></name></expr>]<pos:position pos:line="15" pos:column="32"/></index></name> <operator pos:line="15" pos:column="33">==<pos:position pos:line="15" pos:column="35"/></operator> <literal type="char" pos:line="15" pos:column="36">'\0'<pos:position pos:line="15" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="42"/></expr_stmt>
		<while pos:line="16" pos:column="17">while <condition pos:line="16" pos:column="23">(<expr><operator pos:line="16" pos:column="24">*<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">data<pos:position pos:line="16" pos:column="29"/></name> <operator pos:line="16" pos:column="30">&amp;&amp;<pos:position pos:line="16" pos:column="40"/></operator> <operator pos:line="16" pos:column="33">!<pos:position pos:line="16" pos:column="34"/></operator><call><name pos:line="16" pos:column="34">regexec<pos:position pos:line="16" pos:column="41"/></name><argument_list pos:line="16" pos:column="41">(<argument><expr><name pos:line="16" pos:column="42">regexp<pos:position pos:line="16" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="50">data<pos:position pos:line="16" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="56">1<pos:position pos:line="16" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="59">&amp;<pos:position pos:line="16" pos:column="64"/></operator><name pos:line="16" pos:column="60">regmatch<pos:position pos:line="16" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="70">flags<pos:position pos:line="16" pos:column="75"/></name></expr></argument>)<pos:position pos:line="16" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="77"/></condition> <block pos:line="16" pos:column="78">{
			<expr_stmt><expr><name pos:line="17" pos:column="25">flags<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">|=<pos:position pos:line="17" pos:column="33"/></operator> <name pos:line="17" pos:column="34">REG_NOTBOL<pos:position pos:line="17" pos:column="44"/></name></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="18" pos:column="25">data<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">+=<pos:position pos:line="18" pos:column="32"/></operator> <name><name pos:line="18" pos:column="33">regmatch<pos:position pos:line="18" pos:column="41"/></name><operator pos:line="18" pos:column="41">.<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="42">rm_eo<pos:position pos:line="18" pos:column="47"/></name></name></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><operator pos:line="19" pos:column="29">*<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">data<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">&amp;&amp;<pos:position pos:line="19" pos:column="45"/></operator> <name><name pos:line="19" pos:column="38">regmatch<pos:position pos:line="19" pos:column="46"/></name><operator pos:line="19" pos:column="46">.<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="47">rm_so<pos:position pos:line="19" pos:column="52"/></name></name> <operator pos:line="19" pos:column="53">==<pos:position pos:line="19" pos:column="55"/></operator> <name><name pos:line="19" pos:column="56">regmatch<pos:position pos:line="19" pos:column="64"/></name><operator pos:line="19" pos:column="64">.<pos:position pos:line="19" pos:column="65"/></operator><name pos:line="19" pos:column="65">rm_eo<pos:position pos:line="19" pos:column="70"/></name></name></expr>)<pos:position pos:line="19" pos:column="71"/></condition><then pos:line="19" pos:column="71">
				<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="33">data<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">++<pos:position pos:line="20" pos:column="39"/></operator></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="21" pos:column="25">cnt<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">++<pos:position pos:line="21" pos:column="30"/></operator></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
		}<pos:position pos:line="22" pos:column="18"/></block></while>

	}<pos:position pos:line="24" pos:column="10"/></block></then> <else pos:line="24" pos:column="11">else <block pos:line="24" pos:column="16">{ <comment type="block" pos:line="24" pos:column="18">/* Classic exact string match */</comment>
		<while pos:line="25" pos:column="17">while <condition pos:line="25" pos:column="23">(<expr><name pos:line="25" pos:column="24">sz<pos:position pos:line="25" pos:column="26"/></name></expr>)<pos:position pos:line="25" pos:column="27"/></condition> <block pos:line="25" pos:column="28">{
			<decl_stmt><decl><type><name><name pos:line="26" pos:column="25">struct<pos:position pos:line="26" pos:column="31"/></name> <name pos:line="26" pos:column="32">kwsmatch<pos:position pos:line="26" pos:column="40"/></name></name></type> <name pos:line="26" pos:column="41">kwsm<pos:position pos:line="26" pos:column="45"/></name></decl>;<pos:position pos:line="26" pos:column="46"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="27" pos:column="25">size_t<pos:position pos:line="27" pos:column="31"/></name></type> <name pos:line="27" pos:column="32">offset<pos:position pos:line="27" pos:column="38"/></name> <init pos:line="27" pos:column="39">= <expr><call><name pos:line="27" pos:column="41">kwsexec<pos:position pos:line="27" pos:column="48"/></name><argument_list pos:line="27" pos:column="48">(<argument><expr><name pos:line="27" pos:column="49">kws<pos:position pos:line="27" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="54">data<pos:position pos:line="27" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="60">sz<pos:position pos:line="27" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="64">&amp;<pos:position pos:line="27" pos:column="69"/></operator><name pos:line="27" pos:column="65">kwsm<pos:position pos:line="27" pos:column="69"/></name></expr></argument>)<pos:position pos:line="27" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="71"/></decl_stmt>
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><name pos:line="28" pos:column="29">offset<pos:position pos:line="28" pos:column="35"/></name> <operator pos:line="28" pos:column="36">==<pos:position pos:line="28" pos:column="38"/></operator> <operator pos:line="28" pos:column="39">-<pos:position pos:line="28" pos:column="40"/></operator><literal type="number" pos:line="28" pos:column="40">1<pos:position pos:line="28" pos:column="41"/></literal></expr>)<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42">
				<block type="pseudo"><break pos:line="29" pos:column="33">break;<pos:position pos:line="29" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="30" pos:column="25">sz<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">-=<pos:position pos:line="30" pos:column="30"/></operator> <name pos:line="30" pos:column="31">offset<pos:position pos:line="30" pos:column="37"/></name> <operator pos:line="30" pos:column="38">+<pos:position pos:line="30" pos:column="39"/></operator> <name><name pos:line="30" pos:column="40">kwsm<pos:position pos:line="30" pos:column="44"/></name><operator pos:line="30" pos:column="44">.<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="45">size<pos:position pos:line="30" pos:column="49"/></name><index pos:line="30" pos:column="49">[<expr><literal type="number" pos:line="30" pos:column="50">0<pos:position pos:line="30" pos:column="51"/></literal></expr>]<pos:position pos:line="30" pos:column="52"/></index></name></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt>
			<expr_stmt><expr><name pos:line="31" pos:column="25">data<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">+=<pos:position pos:line="31" pos:column="32"/></operator> <name pos:line="31" pos:column="33">offset<pos:position pos:line="31" pos:column="39"/></name> <operator pos:line="31" pos:column="40">+<pos:position pos:line="31" pos:column="41"/></operator> <name><name pos:line="31" pos:column="42">kwsm<pos:position pos:line="31" pos:column="46"/></name><operator pos:line="31" pos:column="46">.<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="47">size<pos:position pos:line="31" pos:column="51"/></name><index pos:line="31" pos:column="51">[<expr><literal type="number" pos:line="31" pos:column="52">0<pos:position pos:line="31" pos:column="53"/></literal></expr>]<pos:position pos:line="31" pos:column="54"/></index></name></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name pos:line="32" pos:column="25">cnt<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">++<pos:position pos:line="32" pos:column="30"/></operator></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></while>
	}<pos:position pos:line="34" pos:column="10"/></block></else></if>
	<return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">cnt<pos:position pos:line="35" pos:column="19"/></name></expr>;<pos:position pos:line="35" pos:column="20"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
