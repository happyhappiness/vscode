<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3138_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">int<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">gather_convert_stats<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">data<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">unsigned<pos:position pos:line="1" pos:column="68"/></name> <name pos:line="1" pos:column="69">long<pos:position pos:line="1" pos:column="73"/></name></type> <name pos:line="1" pos:column="74">size<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">text_stat<pos:position pos:line="3" pos:column="25"/></name></name></type> <name pos:line="3" pos:column="26">stats<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">data<pos:position pos:line="5" pos:column="18"/></name> <operator pos:line="5" pos:column="19">||<pos:position pos:line="5" pos:column="21"/></operator> <operator pos:line="5" pos:column="22">!<pos:position pos:line="5" pos:column="23"/></operator><name pos:line="5" pos:column="23">size<pos:position pos:line="5" pos:column="27"/></name></expr>)<pos:position pos:line="5" pos:column="28"/></condition><then pos:line="5" pos:column="28">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">gather_stats<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">(<argument><expr><name pos:line="7" pos:column="22">data<pos:position pos:line="7" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="28">size<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="34">&amp;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="35">stats<pos:position pos:line="7" pos:column="40"/></name></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="42"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">convert_is_binary<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">size<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="37">&amp;<pos:position pos:line="8" pos:column="42"/></operator><name pos:line="8" pos:column="38">stats<pos:position pos:line="8" pos:column="43"/></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="45"/></condition><then pos:line="8" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">ret<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">|=<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="24">CONVERT_STAT_BITS_BIN<pos:position pos:line="9" pos:column="45"/></name></expr>;<pos:position pos:line="9" pos:column="46"/></expr_stmt></block></then></if>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">stats<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">crlf<pos:position pos:line="10" pos:column="23"/></name></name></expr>)<pos:position pos:line="10" pos:column="24"/></condition><then pos:line="10" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">ret<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">|=<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="24">CONVERT_STAT_BITS_TXT_CRLF<pos:position pos:line="11" pos:column="50"/></name></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt></block></then></if>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">stats<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">.<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">lonelf<pos:position pos:line="12" pos:column="25"/></name></name></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="17">ret<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">|=<pos:position pos:line="13" pos:column="23"/></operator>  <name pos:line="13" pos:column="25">CONVERT_STAT_BITS_TXT_LF<pos:position pos:line="13" pos:column="49"/></name></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt></block></then></if>

	<return pos:line="15" pos:column="9">return <expr><name pos:line="15" pos:column="16">ret<pos:position pos:line="15" pos:column="19"/></name></expr>;<pos:position pos:line="15" pos:column="20"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
