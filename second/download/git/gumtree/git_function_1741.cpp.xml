<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1741.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">ref_lock<pos:position pos:line="1" pos:column="23"/></name></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">lock_ref_sha1_basic<pos:position pos:line="1" pos:column="44"/></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">refname<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
					    <parameter><decl><type><specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <name pos:line="2" pos:column="51">unsigned<pos:position pos:line="2" pos:column="59"/></name> <name pos:line="2" pos:column="60">char<pos:position pos:line="2" pos:column="64"/></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">old_sha1<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>,
					    <parameter><decl><type><specifier pos:line="3" pos:column="45">const<pos:position pos:line="3" pos:column="50"/></specifier> <name><name pos:line="3" pos:column="51">struct<pos:position pos:line="3" pos:column="57"/></name> <name pos:line="3" pos:column="58">string_list<pos:position pos:line="3" pos:column="69"/></name></name> <modifier pos:line="3" pos:column="70">*<pos:position pos:line="3" pos:column="71"/></modifier></type><name pos:line="3" pos:column="71">skip<pos:position pos:line="3" pos:column="75"/></name></decl></parameter>,
					    <parameter><decl><type><name pos:line="4" pos:column="45">int<pos:position pos:line="4" pos:column="48"/></name></type> <name pos:line="4" pos:column="49">flags<pos:position pos:line="4" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="56">int<pos:position pos:line="4" pos:column="59"/></name> <modifier pos:line="4" pos:column="60">*<pos:position pos:line="4" pos:column="61"/></modifier></type><name pos:line="4" pos:column="61">type_p<pos:position pos:line="4" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="68"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">ref_file<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">orig_refname<pos:position pos:line="7" pos:column="33"/></name> <init pos:line="7" pos:column="34">= <expr><name pos:line="7" pos:column="36">refname<pos:position pos:line="7" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">ref_lock<pos:position pos:line="8" pos:column="24"/></name></name> <modifier pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></modifier></type><name pos:line="8" pos:column="26">lock<pos:position pos:line="8" pos:column="30"/></name></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">last_errno<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><literal type="number" pos:line="9" pos:column="26">0<pos:position pos:line="9" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">type<pos:position pos:line="10" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="19">lflags<pos:position pos:line="10" pos:column="25"/></name></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">mustexist<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><operator pos:line="11" pos:column="25">(<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">old_sha1<pos:position pos:line="11" pos:column="34"/></name> <operator pos:line="11" pos:column="35">&amp;&amp;<pos:position pos:line="11" pos:column="45"/></operator> <operator pos:line="11" pos:column="38">!<pos:position pos:line="11" pos:column="39"/></operator><call><name pos:line="11" pos:column="39">is_null_sha1<pos:position pos:line="11" pos:column="51"/></name><argument_list pos:line="11" pos:column="51">(<argument><expr><name pos:line="11" pos:column="52">old_sha1<pos:position pos:line="11" pos:column="60"/></name></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call><operator pos:line="11" pos:column="61">)<pos:position pos:line="11" pos:column="62"/></operator></expr></init></decl>;<pos:position pos:line="11" pos:column="63"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">resolve_flags<pos:position pos:line="12" pos:column="26"/></name> <init pos:line="12" pos:column="27">= <expr><literal type="number" pos:line="12" pos:column="29">0<pos:position pos:line="12" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">missing<pos:position pos:line="13" pos:column="20"/></name> <init pos:line="13" pos:column="21">= <expr><literal type="number" pos:line="13" pos:column="23">0<pos:position pos:line="13" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">attempts_remaining<pos:position pos:line="14" pos:column="31"/></name> <init pos:line="14" pos:column="32">= <expr><literal type="number" pos:line="14" pos:column="34">3<pos:position pos:line="14" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="36"/></decl_stmt>

	<expr_stmt><expr><name pos:line="16" pos:column="9">lock<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">xcalloc<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><literal type="number" pos:line="16" pos:column="24">1<pos:position pos:line="16" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="27">sizeof<argument_list pos:line="16" pos:column="33">(<argument><expr pos:line="16" pos:column="34">struct <name pos:line="16" pos:column="41">ref_lock<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">lock<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">-&gt;<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="15">lock_fd<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <operator pos:line="17" pos:column="25">-<pos:position pos:line="17" pos:column="26"/></operator><literal type="number" pos:line="17" pos:column="26">1<pos:position pos:line="17" pos:column="27"/></literal></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">mustexist<pos:position pos:line="19" pos:column="22"/></name></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="17">resolve_flags<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">|=<pos:position pos:line="20" pos:column="33"/></operator> <name pos:line="20" pos:column="34">RESOLVE_REF_READING<pos:position pos:line="20" pos:column="53"/></name></expr>;<pos:position pos:line="20" pos:column="54"/></expr_stmt></block></then></if>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">flags<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">&amp;<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="21">REF_DELETING<pos:position pos:line="21" pos:column="33"/></name></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34"> <block pos:line="21" pos:column="35">{
		<expr_stmt><expr><name pos:line="22" pos:column="17">resolve_flags<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">|=<pos:position pos:line="22" pos:column="33"/></operator> <name pos:line="22" pos:column="34">RESOLVE_REF_ALLOW_BAD_NAME<pos:position pos:line="22" pos:column="60"/></name></expr>;<pos:position pos:line="22" pos:column="61"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">flags<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">&amp;<pos:position pos:line="23" pos:column="32"/></operator> <name pos:line="23" pos:column="29">REF_NODEREF<pos:position pos:line="23" pos:column="40"/></name></expr>)<pos:position pos:line="23" pos:column="41"/></condition><then pos:line="23" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="25">resolve_flags<pos:position pos:line="24" pos:column="38"/></name> <operator pos:line="24" pos:column="39">|=<pos:position pos:line="24" pos:column="41"/></operator> <name pos:line="24" pos:column="42">RESOLVE_REF_NO_RECURSE<pos:position pos:line="24" pos:column="64"/></name></expr>;<pos:position pos:line="24" pos:column="65"/></expr_stmt></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="27" pos:column="9">refname<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <call><name pos:line="27" pos:column="19">resolve_ref_unsafe<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name pos:line="27" pos:column="38">refname<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="47">resolve_flags<pos:position pos:line="27" pos:column="60"/></name></expr></argument>,
				     <argument><expr><name><name pos:line="28" pos:column="38">lock<pos:position pos:line="28" pos:column="42"/></name><operator pos:line="28" pos:column="42">-&gt;<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="44">old_sha1<pos:position pos:line="28" pos:column="52"/></name></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="54">&amp;<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="55">type<pos:position pos:line="28" pos:column="59"/></name></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="61"/></expr_stmt>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">refname<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">&amp;&amp;<pos:position pos:line="29" pos:column="32"/></operator> <name pos:line="29" pos:column="25">errno<pos:position pos:line="29" pos:column="30"/></name> <operator pos:line="29" pos:column="31">==<pos:position pos:line="29" pos:column="33"/></operator> <name pos:line="29" pos:column="34">EISDIR<pos:position pos:line="29" pos:column="40"/></name></expr>)<pos:position pos:line="29" pos:column="41"/></condition><then pos:line="29" pos:column="41"> <block pos:line="29" pos:column="42">{
		<comment type="block" pos:line="30" pos:column="17">/* we are trying to lock foo but we used to
		 * have foo/bar which now does not exist;
		 * it is normal for the empty directory 'foo'
		 * to remain.
		 */</comment>
		<expr_stmt><expr><name pos:line="35" pos:column="17">ref_file<pos:position pos:line="35" pos:column="25"/></name> <operator pos:line="35" pos:column="26">=<pos:position pos:line="35" pos:column="27"/></operator> <call><name pos:line="35" pos:column="28">git_path<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><literal type="string" pos:line="35" pos:column="37">"%s"<pos:position pos:line="35" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="43">orig_refname<pos:position pos:line="35" pos:column="55"/></name></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="57"/></expr_stmt>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><call><name pos:line="36" pos:column="21">remove_empty_directories<pos:position pos:line="36" pos:column="45"/></name><argument_list pos:line="36" pos:column="45">(<argument><expr><name pos:line="36" pos:column="46">ref_file<pos:position pos:line="36" pos:column="54"/></name></expr></argument>)<pos:position pos:line="36" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="56"/></condition><then pos:line="36" pos:column="56"> <block pos:line="36" pos:column="57">{
			<expr_stmt><expr><name pos:line="37" pos:column="25">last_errno<pos:position pos:line="37" pos:column="35"/></name> <operator pos:line="37" pos:column="36">=<pos:position pos:line="37" pos:column="37"/></operator> <name pos:line="37" pos:column="38">errno<pos:position pos:line="37" pos:column="43"/></name></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="38" pos:column="25">error<pos:position pos:line="38" pos:column="30"/></name><argument_list pos:line="38" pos:column="30">(<argument><expr><literal type="string" pos:line="38" pos:column="31">"there are still refs under '%s'"<pos:position pos:line="38" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="66">orig_refname<pos:position pos:line="38" pos:column="78"/></name></expr></argument>)<pos:position pos:line="38" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="80"/></expr_stmt>
			<goto pos:line="39" pos:column="25">goto <name pos:line="39" pos:column="30">error_return<pos:position pos:line="39" pos:column="42"/></name>;<pos:position pos:line="39" pos:column="43"/></goto>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="41" pos:column="17">refname<pos:position pos:line="41" pos:column="24"/></name> <operator pos:line="41" pos:column="25">=<pos:position pos:line="41" pos:column="26"/></operator> <call><name pos:line="41" pos:column="27">resolve_ref_unsafe<pos:position pos:line="41" pos:column="45"/></name><argument_list pos:line="41" pos:column="45">(<argument><expr><name pos:line="41" pos:column="46">orig_refname<pos:position pos:line="41" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="60">resolve_flags<pos:position pos:line="41" pos:column="73"/></name></expr></argument>,
					     <argument><expr><name><name pos:line="42" pos:column="46">lock<pos:position pos:line="42" pos:column="50"/></name><operator pos:line="42" pos:column="50">-&gt;<pos:position pos:line="42" pos:column="55"/></operator><name pos:line="42" pos:column="52">old_sha1<pos:position pos:line="42" pos:column="60"/></name></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="62">&amp;<pos:position pos:line="42" pos:column="67"/></operator><name pos:line="42" pos:column="63">type<pos:position pos:line="42" pos:column="67"/></name></expr></argument>)<pos:position pos:line="42" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="69"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">type_p<pos:position pos:line="44" pos:column="19"/></name></expr>)<pos:position pos:line="44" pos:column="20"/></condition><then pos:line="44" pos:column="20">
	    <block type="pseudo"><expr_stmt><expr><operator pos:line="45" pos:column="13">*<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="14">type_p<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">=<pos:position pos:line="45" pos:column="22"/></operator> <name pos:line="45" pos:column="23">type<pos:position pos:line="45" pos:column="27"/></name></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt></block></then></if>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">refname<pos:position pos:line="46" pos:column="21"/></name></expr>)<pos:position pos:line="46" pos:column="22"/></condition><then pos:line="46" pos:column="22"> <block pos:line="46" pos:column="23">{
		<expr_stmt><expr><name pos:line="47" pos:column="17">last_errno<pos:position pos:line="47" pos:column="27"/></name> <operator pos:line="47" pos:column="28">=<pos:position pos:line="47" pos:column="29"/></operator> <name pos:line="47" pos:column="30">errno<pos:position pos:line="47" pos:column="35"/></name></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">error<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><literal type="string" pos:line="48" pos:column="23">"unable to resolve reference %s: %s"<pos:position pos:line="48" pos:column="59"/></literal></expr></argument>,
			<argument><expr><name pos:line="49" pos:column="25">orig_refname<pos:position pos:line="49" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="39">strerror<pos:position pos:line="49" pos:column="47"/></name><argument_list pos:line="49" pos:column="47">(<argument><expr><name pos:line="49" pos:column="48">errno<pos:position pos:line="49" pos:column="53"/></name></expr></argument>)<pos:position pos:line="49" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="56"/></expr_stmt>
		<goto pos:line="50" pos:column="17">goto <name pos:line="50" pos:column="22">error_return<pos:position pos:line="50" pos:column="34"/></name>;<pos:position pos:line="50" pos:column="35"/></goto>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="52" pos:column="9">missing<pos:position pos:line="52" pos:column="16"/></name> <operator pos:line="52" pos:column="17">=<pos:position pos:line="52" pos:column="18"/></operator> <call><name pos:line="52" pos:column="19">is_null_sha1<pos:position pos:line="52" pos:column="31"/></name><argument_list pos:line="52" pos:column="31">(<argument><expr><name><name pos:line="52" pos:column="32">lock<pos:position pos:line="52" pos:column="36"/></name><operator pos:line="52" pos:column="36">-&gt;<pos:position pos:line="52" pos:column="41"/></operator><name pos:line="52" pos:column="38">old_sha1<pos:position pos:line="52" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="48"/></expr_stmt>
	<comment type="block" pos:line="53" pos:column="9">/* When the ref did not exist and we are creating it,
	 * make sure there is no existing ref that is packed
	 * whose name begins with our refname, nor a ref whose
	 * name is a proper prefix of our refname.
	 */</comment>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">missing<pos:position pos:line="58" pos:column="20"/></name> <operator pos:line="58" pos:column="21">&amp;&amp;<pos:position pos:line="58" pos:column="31"/></operator>
	     <operator pos:line="59" pos:column="14">!<pos:position pos:line="59" pos:column="15"/></operator><call><name pos:line="59" pos:column="15">is_refname_available<pos:position pos:line="59" pos:column="35"/></name><argument_list pos:line="59" pos:column="35">(<argument><expr><name pos:line="59" pos:column="36">refname<pos:position pos:line="59" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="45">skip<pos:position pos:line="59" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="59" pos:column="51">get_packed_refs<pos:position pos:line="59" pos:column="66"/></name><argument_list pos:line="59" pos:column="66">(<argument><expr><operator pos:line="59" pos:column="67">&amp;<pos:position pos:line="59" pos:column="72"/></operator><name pos:line="59" pos:column="68">ref_cache<pos:position pos:line="59" pos:column="77"/></name></expr></argument>)<pos:position pos:line="59" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="80"/></condition><then pos:line="59" pos:column="80"> <block pos:line="59" pos:column="81">{
		<expr_stmt><expr><name pos:line="60" pos:column="17">last_errno<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">=<pos:position pos:line="60" pos:column="29"/></operator> <name pos:line="60" pos:column="30">ENOTDIR<pos:position pos:line="60" pos:column="37"/></name></expr>;<pos:position pos:line="60" pos:column="38"/></expr_stmt>
		<goto pos:line="61" pos:column="17">goto <name pos:line="61" pos:column="22">error_return<pos:position pos:line="61" pos:column="34"/></name>;<pos:position pos:line="61" pos:column="35"/></goto>
	}<pos:position pos:line="62" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="64" pos:column="9">lock<pos:position pos:line="64" pos:column="13"/></name><operator pos:line="64" pos:column="13">-&gt;<pos:position pos:line="64" pos:column="18"/></operator><name pos:line="64" pos:column="15">lk<pos:position pos:line="64" pos:column="17"/></name></name> <operator pos:line="64" pos:column="18">=<pos:position pos:line="64" pos:column="19"/></operator> <call><name pos:line="64" pos:column="20">xcalloc<pos:position pos:line="64" pos:column="27"/></name><argument_list pos:line="64" pos:column="27">(<argument><expr><literal type="number" pos:line="64" pos:column="28">1<pos:position pos:line="64" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="64" pos:column="31">sizeof<argument_list pos:line="64" pos:column="37">(<argument><expr pos:line="64" pos:column="38">struct <name pos:line="64" pos:column="45">lock_file<pos:position pos:line="64" pos:column="54"/></name></expr></argument>)<pos:position pos:line="64" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="64" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="57"/></expr_stmt>

	<expr_stmt><expr><name pos:line="66" pos:column="9">lflags<pos:position pos:line="66" pos:column="15"/></name> <operator pos:line="66" pos:column="16">=<pos:position pos:line="66" pos:column="17"/></operator> <literal type="number" pos:line="66" pos:column="18">0<pos:position pos:line="66" pos:column="19"/></literal></expr>;<pos:position pos:line="66" pos:column="20"/></expr_stmt>
	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">flags<pos:position pos:line="67" pos:column="18"/></name> <operator pos:line="67" pos:column="19">&amp;<pos:position pos:line="67" pos:column="24"/></operator> <name pos:line="67" pos:column="21">REF_NODEREF<pos:position pos:line="67" pos:column="32"/></name></expr>)<pos:position pos:line="67" pos:column="33"/></condition><then pos:line="67" pos:column="33"> <block pos:line="67" pos:column="34">{
		<expr_stmt><expr><name pos:line="68" pos:column="17">refname<pos:position pos:line="68" pos:column="24"/></name> <operator pos:line="68" pos:column="25">=<pos:position pos:line="68" pos:column="26"/></operator> <name pos:line="68" pos:column="27">orig_refname<pos:position pos:line="68" pos:column="39"/></name></expr>;<pos:position pos:line="68" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name pos:line="69" pos:column="17">lflags<pos:position pos:line="69" pos:column="23"/></name> <operator pos:line="69" pos:column="24">|=<pos:position pos:line="69" pos:column="26"/></operator> <name pos:line="69" pos:column="27">LOCK_NO_DEREF<pos:position pos:line="69" pos:column="40"/></name></expr>;<pos:position pos:line="69" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="70" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="71" pos:column="9">lock<pos:position pos:line="71" pos:column="13"/></name><operator pos:line="71" pos:column="13">-&gt;<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="15">ref_name<pos:position pos:line="71" pos:column="23"/></name></name> <operator pos:line="71" pos:column="24">=<pos:position pos:line="71" pos:column="25"/></operator> <call><name pos:line="71" pos:column="26">xstrdup<pos:position pos:line="71" pos:column="33"/></name><argument_list pos:line="71" pos:column="33">(<argument><expr><name pos:line="71" pos:column="34">refname<pos:position pos:line="71" pos:column="41"/></name></expr></argument>)<pos:position pos:line="71" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="72" pos:column="9">lock<pos:position pos:line="72" pos:column="13"/></name><operator pos:line="72" pos:column="13">-&gt;<pos:position pos:line="72" pos:column="18"/></operator><name pos:line="72" pos:column="15">orig_ref_name<pos:position pos:line="72" pos:column="28"/></name></name> <operator pos:line="72" pos:column="29">=<pos:position pos:line="72" pos:column="30"/></operator> <call><name pos:line="72" pos:column="31">xstrdup<pos:position pos:line="72" pos:column="38"/></name><argument_list pos:line="72" pos:column="38">(<argument><expr><name pos:line="72" pos:column="39">orig_refname<pos:position pos:line="72" pos:column="51"/></name></expr></argument>)<pos:position pos:line="72" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name pos:line="73" pos:column="9">ref_file<pos:position pos:line="73" pos:column="17"/></name> <operator pos:line="73" pos:column="18">=<pos:position pos:line="73" pos:column="19"/></operator> <call><name pos:line="73" pos:column="20">git_path<pos:position pos:line="73" pos:column="28"/></name><argument_list pos:line="73" pos:column="28">(<argument><expr><literal type="string" pos:line="73" pos:column="29">"%s"<pos:position pos:line="73" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="35">refname<pos:position pos:line="73" pos:column="42"/></name></expr></argument>)<pos:position pos:line="73" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="44"/></expr_stmt>
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">missing<pos:position pos:line="74" pos:column="20"/></name></expr>)<pos:position pos:line="74" pos:column="21"/></condition><then pos:line="74" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="75" pos:column="17">lock<pos:position pos:line="75" pos:column="21"/></name><operator pos:line="75" pos:column="21">-&gt;<pos:position pos:line="75" pos:column="26"/></operator><name pos:line="75" pos:column="23">force_write<pos:position pos:line="75" pos:column="34"/></name></name> <operator pos:line="75" pos:column="35">=<pos:position pos:line="75" pos:column="36"/></operator> <literal type="number" pos:line="75" pos:column="37">1<pos:position pos:line="75" pos:column="38"/></literal></expr>;<pos:position pos:line="75" pos:column="39"/></expr_stmt></block></then></if>
	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><operator pos:line="76" pos:column="13">(<pos:position pos:line="76" pos:column="14"/></operator><name pos:line="76" pos:column="14">flags<pos:position pos:line="76" pos:column="19"/></name> <operator pos:line="76" pos:column="20">&amp;<pos:position pos:line="76" pos:column="25"/></operator> <name pos:line="76" pos:column="22">REF_NODEREF<pos:position pos:line="76" pos:column="33"/></name><operator pos:line="76" pos:column="33">)<pos:position pos:line="76" pos:column="34"/></operator> <operator pos:line="76" pos:column="35">&amp;&amp;<pos:position pos:line="76" pos:column="45"/></operator> <operator pos:line="76" pos:column="38">(<pos:position pos:line="76" pos:column="39"/></operator><name pos:line="76" pos:column="39">type<pos:position pos:line="76" pos:column="43"/></name> <operator pos:line="76" pos:column="44">&amp;<pos:position pos:line="76" pos:column="49"/></operator> <name pos:line="76" pos:column="46">REF_ISSYMREF<pos:position pos:line="76" pos:column="58"/></name><operator pos:line="76" pos:column="58">)<pos:position pos:line="76" pos:column="59"/></operator></expr>)<pos:position pos:line="76" pos:column="60"/></condition><then pos:line="76" pos:column="60">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="77" pos:column="17">lock<pos:position pos:line="77" pos:column="21"/></name><operator pos:line="77" pos:column="21">-&gt;<pos:position pos:line="77" pos:column="26"/></operator><name pos:line="77" pos:column="23">force_write<pos:position pos:line="77" pos:column="34"/></name></name> <operator pos:line="77" pos:column="35">=<pos:position pos:line="77" pos:column="36"/></operator> <literal type="number" pos:line="77" pos:column="37">1<pos:position pos:line="77" pos:column="38"/></literal></expr>;<pos:position pos:line="77" pos:column="39"/></expr_stmt></block></then></if>

 <label><name pos:line="79" pos:column="2">retry<pos:position pos:line="79" pos:column="7"/></name>:<pos:position pos:line="79" pos:column="8"/></label>
	<switch pos:line="80" pos:column="9">switch <condition pos:line="80" pos:column="16">(<expr><call><name pos:line="80" pos:column="17">safe_create_leading_directories<pos:position pos:line="80" pos:column="48"/></name><argument_list pos:line="80" pos:column="48">(<argument><expr><name pos:line="80" pos:column="49">ref_file<pos:position pos:line="80" pos:column="57"/></name></expr></argument>)<pos:position pos:line="80" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="59"/></condition> <block pos:line="80" pos:column="60">{
	<case pos:line="81" pos:column="9">case <expr><name pos:line="81" pos:column="14">SCLD_OK<pos:position pos:line="81" pos:column="21"/></name></expr>:<pos:position pos:line="81" pos:column="22"/></case>
		<break pos:line="82" pos:column="17">break;<pos:position pos:line="82" pos:column="23"/></break> <comment type="block" pos:line="82" pos:column="24">/* success */</comment>
	<case pos:line="83" pos:column="9">case <expr><name pos:line="83" pos:column="14">SCLD_VANISHED<pos:position pos:line="83" pos:column="27"/></name></expr>:<pos:position pos:line="83" pos:column="28"/></case>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><operator pos:line="84" pos:column="21">--<pos:position pos:line="84" pos:column="23"/></operator><name pos:line="84" pos:column="23">attempts_remaining<pos:position pos:line="84" pos:column="41"/></name> <operator pos:line="84" pos:column="42">&gt;<pos:position pos:line="84" pos:column="46"/></operator> <literal type="number" pos:line="84" pos:column="44">0<pos:position pos:line="84" pos:column="45"/></literal></expr>)<pos:position pos:line="84" pos:column="46"/></condition><then pos:line="84" pos:column="46">
			<block type="pseudo"><goto pos:line="85" pos:column="25">goto <name pos:line="85" pos:column="30">retry<pos:position pos:line="85" pos:column="35"/></name>;<pos:position pos:line="85" pos:column="36"/></goto></block></then></if>
		<comment type="block" pos:line="86" pos:column="17">/* fall through */</comment>
	<default pos:line="87" pos:column="9">default:<pos:position pos:line="87" pos:column="17"/></default>
		<expr_stmt><expr><name pos:line="88" pos:column="17">last_errno<pos:position pos:line="88" pos:column="27"/></name> <operator pos:line="88" pos:column="28">=<pos:position pos:line="88" pos:column="29"/></operator> <name pos:line="88" pos:column="30">errno<pos:position pos:line="88" pos:column="35"/></name></expr>;<pos:position pos:line="88" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="89" pos:column="17">error<pos:position pos:line="89" pos:column="22"/></name><argument_list pos:line="89" pos:column="22">(<argument><expr><literal type="string" pos:line="89" pos:column="23">"unable to create directory for %s"<pos:position pos:line="89" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="60">ref_file<pos:position pos:line="89" pos:column="68"/></name></expr></argument>)<pos:position pos:line="89" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="70"/></expr_stmt>
		<goto pos:line="90" pos:column="17">goto <name pos:line="90" pos:column="22">error_return<pos:position pos:line="90" pos:column="34"/></name>;<pos:position pos:line="90" pos:column="35"/></goto>
	}<pos:position pos:line="91" pos:column="10"/></block></switch>

	<expr_stmt><expr><name><name pos:line="93" pos:column="9">lock<pos:position pos:line="93" pos:column="13"/></name><operator pos:line="93" pos:column="13">-&gt;<pos:position pos:line="93" pos:column="18"/></operator><name pos:line="93" pos:column="15">lock_fd<pos:position pos:line="93" pos:column="22"/></name></name> <operator pos:line="93" pos:column="23">=<pos:position pos:line="93" pos:column="24"/></operator> <call><name pos:line="93" pos:column="25">hold_lock_file_for_update<pos:position pos:line="93" pos:column="50"/></name><argument_list pos:line="93" pos:column="50">(<argument><expr><name><name pos:line="93" pos:column="51">lock<pos:position pos:line="93" pos:column="55"/></name><operator pos:line="93" pos:column="55">-&gt;<pos:position pos:line="93" pos:column="60"/></operator><name pos:line="93" pos:column="57">lk<pos:position pos:line="93" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="61">ref_file<pos:position pos:line="93" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="71">lflags<pos:position pos:line="93" pos:column="77"/></name></expr></argument>)<pos:position pos:line="93" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="79"/></expr_stmt>
	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><name><name pos:line="94" pos:column="13">lock<pos:position pos:line="94" pos:column="17"/></name><operator pos:line="94" pos:column="17">-&gt;<pos:position pos:line="94" pos:column="22"/></operator><name pos:line="94" pos:column="19">lock_fd<pos:position pos:line="94" pos:column="26"/></name></name> <operator pos:line="94" pos:column="27">&lt;<pos:position pos:line="94" pos:column="31"/></operator> <literal type="number" pos:line="94" pos:column="29">0<pos:position pos:line="94" pos:column="30"/></literal></expr>)<pos:position pos:line="94" pos:column="31"/></condition><then pos:line="94" pos:column="31"> <block pos:line="94" pos:column="32">{
		<expr_stmt><expr><name pos:line="95" pos:column="17">last_errno<pos:position pos:line="95" pos:column="27"/></name> <operator pos:line="95" pos:column="28">=<pos:position pos:line="95" pos:column="29"/></operator> <name pos:line="95" pos:column="30">errno<pos:position pos:line="95" pos:column="35"/></name></expr>;<pos:position pos:line="95" pos:column="36"/></expr_stmt>
		<if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><name pos:line="96" pos:column="21">errno<pos:position pos:line="96" pos:column="26"/></name> <operator pos:line="96" pos:column="27">==<pos:position pos:line="96" pos:column="29"/></operator> <name pos:line="96" pos:column="30">ENOENT<pos:position pos:line="96" pos:column="36"/></name> <operator pos:line="96" pos:column="37">&amp;&amp;<pos:position pos:line="96" pos:column="47"/></operator> <operator pos:line="96" pos:column="40">--<pos:position pos:line="96" pos:column="42"/></operator><name pos:line="96" pos:column="42">attempts_remaining<pos:position pos:line="96" pos:column="60"/></name> <operator pos:line="96" pos:column="61">&gt;<pos:position pos:line="96" pos:column="65"/></operator> <literal type="number" pos:line="96" pos:column="63">0<pos:position pos:line="96" pos:column="64"/></literal></expr>)<pos:position pos:line="96" pos:column="65"/></condition><then pos:line="96" pos:column="65">
			<comment type="block" pos:line="97" pos:column="25">/*
			 * Maybe somebody just deleted one of the
			 * directories leading to ref_file.  Try
			 * again:
			 */</comment>
			<block type="pseudo"><goto pos:line="102" pos:column="25">goto <name pos:line="102" pos:column="30">retry<pos:position pos:line="102" pos:column="35"/></name>;<pos:position pos:line="102" pos:column="36"/></goto></block></then>
		<else pos:line="103" pos:column="17">else <block pos:line="103" pos:column="22">{
			<decl_stmt><decl><type><name><name pos:line="104" pos:column="25">struct<pos:position pos:line="104" pos:column="31"/></name> <name pos:line="104" pos:column="32">strbuf<pos:position pos:line="104" pos:column="38"/></name></name></type> <name pos:line="104" pos:column="39">err<pos:position pos:line="104" pos:column="42"/></name> <init pos:line="104" pos:column="43">= <expr><name pos:line="104" pos:column="45">STRBUF_INIT<pos:position pos:line="104" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="104" pos:column="57"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="105" pos:column="25">unable_to_lock_message<pos:position pos:line="105" pos:column="47"/></name><argument_list pos:line="105" pos:column="47">(<argument><expr><name pos:line="105" pos:column="48">ref_file<pos:position pos:line="105" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="58">errno<pos:position pos:line="105" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="105" pos:column="65">&amp;<pos:position pos:line="105" pos:column="70"/></operator><name pos:line="105" pos:column="66">err<pos:position pos:line="105" pos:column="69"/></name></expr></argument>)<pos:position pos:line="105" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="71"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="106" pos:column="25">error<pos:position pos:line="106" pos:column="30"/></name><argument_list pos:line="106" pos:column="30">(<argument><expr><literal type="string" pos:line="106" pos:column="31">"%s"<pos:position pos:line="106" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="37">err<pos:position pos:line="106" pos:column="40"/></name><operator pos:line="106" pos:column="40">.<pos:position pos:line="106" pos:column="41"/></operator><name pos:line="106" pos:column="41">buf<pos:position pos:line="106" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="107" pos:column="25">strbuf_release<pos:position pos:line="107" pos:column="39"/></name><argument_list pos:line="107" pos:column="39">(<argument><expr><operator pos:line="107" pos:column="40">&amp;<pos:position pos:line="107" pos:column="45"/></operator><name pos:line="107" pos:column="41">err<pos:position pos:line="107" pos:column="44"/></name></expr></argument>)<pos:position pos:line="107" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="46"/></expr_stmt>
			<goto pos:line="108" pos:column="25">goto <name pos:line="108" pos:column="30">error_return<pos:position pos:line="108" pos:column="42"/></name>;<pos:position pos:line="108" pos:column="43"/></goto>
		}<pos:position pos:line="109" pos:column="18"/></block></else></if>
	}<pos:position pos:line="110" pos:column="10"/></block></then></if>
	<return pos:line="111" pos:column="9">return <expr><ternary><condition><expr><name pos:line="111" pos:column="16">old_sha1<pos:position pos:line="111" pos:column="24"/></name></expr> ?<pos:position pos:line="111" pos:column="26"/></condition><then pos:line="111" pos:column="26"> <expr><call><name pos:line="111" pos:column="27">verify_lock<pos:position pos:line="111" pos:column="38"/></name><argument_list pos:line="111" pos:column="38">(<argument><expr><name pos:line="111" pos:column="39">lock<pos:position pos:line="111" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="45">old_sha1<pos:position pos:line="111" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="55">mustexist<pos:position pos:line="111" pos:column="64"/></name></expr></argument>)<pos:position pos:line="111" pos:column="65"/></argument_list></call></expr> <pos:position pos:line="111" pos:column="66"/></then><else pos:line="111" pos:column="66">: <expr><name pos:line="111" pos:column="68">lock<pos:position pos:line="111" pos:column="72"/></name></expr></else></ternary></expr>;<pos:position pos:line="111" pos:column="73"/></return>

 <label><name pos:line="113" pos:column="2">error_return<pos:position pos:line="113" pos:column="14"/></name>:<pos:position pos:line="113" pos:column="15"/></label>
	<expr_stmt><expr><call><name pos:line="114" pos:column="9">unlock_ref<pos:position pos:line="114" pos:column="19"/></name><argument_list pos:line="114" pos:column="19">(<argument><expr><name pos:line="114" pos:column="20">lock<pos:position pos:line="114" pos:column="24"/></name></expr></argument>)<pos:position pos:line="114" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name pos:line="115" pos:column="9">errno<pos:position pos:line="115" pos:column="14"/></name> <operator pos:line="115" pos:column="15">=<pos:position pos:line="115" pos:column="16"/></operator> <name pos:line="115" pos:column="17">last_errno<pos:position pos:line="115" pos:column="27"/></name></expr>;<pos:position pos:line="115" pos:column="28"/></expr_stmt>
	<return pos:line="116" pos:column="9">return <expr><name pos:line="116" pos:column="16">NULL<pos:position pos:line="116" pos:column="20"/></name></expr>;<pos:position pos:line="116" pos:column="21"/></return>
}<pos:position pos:line="117" pos:column="2"/></block></function></unit>
