<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2050_git-2.13.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">raceproof_create_file<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">path<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">create_file_fn<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">fn<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">void<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">cb<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * The number of times we will try to remove empty directories
	 * in the way of path. This is only 1 because if another
	 * process is racily creating directories that conflict with
	 * us, we don't want to fight against them.
	 */</comment>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">remove_directories_remaining<pos:position pos:line="9" pos:column="41"/></name> <init pos:line="9" pos:column="42">= <expr><literal type="number" pos:line="9" pos:column="44">1<pos:position pos:line="9" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="46"/></decl_stmt>

	<comment type="block" pos:line="11" pos:column="9">/*
	 * The number of times that we will try to create the
	 * directories containing path. We are willing to attempt this
	 * more than once, because another process could be trying to
	 * clean up empty directories at the same time as we are
	 * trying to create them.
	 */</comment>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">create_directories_remaining<pos:position pos:line="18" pos:column="41"/></name> <init pos:line="18" pos:column="42">= <expr><literal type="number" pos:line="18" pos:column="44">3<pos:position pos:line="18" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="46"/></decl_stmt>

	<comment type="block" pos:line="20" pos:column="9">/* A scratch copy of path, filled lazily if we need it: */</comment>
	<decl_stmt><decl><type><name><name pos:line="21" pos:column="9">struct<pos:position pos:line="21" pos:column="15"/></name> <name pos:line="21" pos:column="16">strbuf<pos:position pos:line="21" pos:column="22"/></name></name></type> <name pos:line="21" pos:column="23">path_copy<pos:position pos:line="21" pos:column="32"/></name> <init pos:line="21" pos:column="33">= <expr><name pos:line="21" pos:column="35">STRBUF_INIT<pos:position pos:line="21" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="47"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="23" pos:column="9">int<pos:position pos:line="23" pos:column="12"/></name></type> <name pos:line="23" pos:column="13">ret<pos:position pos:line="23" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="23" pos:column="18">save_errno<pos:position pos:line="23" pos:column="28"/></name></decl>;<pos:position pos:line="23" pos:column="29"/></decl_stmt>

	<comment type="block" pos:line="25" pos:column="9">/* Sanity check: */</comment>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">assert<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><operator pos:line="26" pos:column="16">*<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">path<pos:position pos:line="26" pos:column="21"/></name></expr></argument>)<pos:position pos:line="26" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="23"/></expr_stmt>

<label><name pos:line="28" pos:column="1">retry_fn<pos:position pos:line="28" pos:column="9"/></name>:<pos:position pos:line="28" pos:column="10"/></label>
	<expr_stmt><expr><name pos:line="29" pos:column="9">ret<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">fn<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><name pos:line="29" pos:column="18">path<pos:position pos:line="29" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="24">cb<pos:position pos:line="29" pos:column="26"/></name></expr></argument>)<pos:position pos:line="29" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="30" pos:column="9">save_errno<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <name pos:line="30" pos:column="22">errno<pos:position pos:line="30" pos:column="27"/></name></expr>;<pos:position pos:line="30" pos:column="28"/></expr_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">ret<pos:position pos:line="31" pos:column="17"/></name></expr>)<pos:position pos:line="31" pos:column="18"/></condition><then pos:line="31" pos:column="18">
		<block type="pseudo"><goto pos:line="32" pos:column="17">goto <name pos:line="32" pos:column="22">out<pos:position pos:line="32" pos:column="25"/></name>;<pos:position pos:line="32" pos:column="26"/></goto></block></then></if>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">errno<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">==<pos:position pos:line="34" pos:column="21"/></operator> <name pos:line="34" pos:column="22">EISDIR<pos:position pos:line="34" pos:column="28"/></name> <operator pos:line="34" pos:column="29">&amp;&amp;<pos:position pos:line="34" pos:column="39"/></operator> <name pos:line="34" pos:column="32">remove_directories_remaining<pos:position pos:line="34" pos:column="60"/></name><operator pos:line="34" pos:column="60">--<pos:position pos:line="34" pos:column="62"/></operator> <operator pos:line="34" pos:column="63">&gt;<pos:position pos:line="34" pos:column="67"/></operator> <literal type="number" pos:line="34" pos:column="65">0<pos:position pos:line="34" pos:column="66"/></literal></expr>)<pos:position pos:line="34" pos:column="67"/></condition><then pos:line="34" pos:column="67"> <block pos:line="34" pos:column="68">{
		<comment type="block" pos:line="35" pos:column="17">/*
		 * A directory is in the way. Maybe it is empty; try
		 * to remove it:
		 */</comment>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">!<pos:position pos:line="39" pos:column="22"/></operator><name><name pos:line="39" pos:column="22">path_copy<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">.<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="32">len<pos:position pos:line="39" pos:column="35"/></name></name></expr>)<pos:position pos:line="39" pos:column="36"/></condition><then pos:line="39" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="25">strbuf_addstr<pos:position pos:line="40" pos:column="38"/></name><argument_list pos:line="40" pos:column="38">(<argument><expr><operator pos:line="40" pos:column="39">&amp;<pos:position pos:line="40" pos:column="44"/></operator><name pos:line="40" pos:column="40">path_copy<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="51">path<pos:position pos:line="40" pos:column="55"/></name></expr></argument>)<pos:position pos:line="40" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="57"/></expr_stmt></block></then></if>

		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><operator pos:line="42" pos:column="21">!<pos:position pos:line="42" pos:column="22"/></operator><call><name pos:line="42" pos:column="22">remove_dir_recursively<pos:position pos:line="42" pos:column="44"/></name><argument_list pos:line="42" pos:column="44">(<argument><expr><operator pos:line="42" pos:column="45">&amp;<pos:position pos:line="42" pos:column="50"/></operator><name pos:line="42" pos:column="46">path_copy<pos:position pos:line="42" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="57">REMOVE_DIR_EMPTY_ONLY<pos:position pos:line="42" pos:column="78"/></name></expr></argument>)<pos:position pos:line="42" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="80"/></condition><then pos:line="42" pos:column="80">
			<block type="pseudo"><goto pos:line="43" pos:column="25">goto <name pos:line="43" pos:column="30">retry_fn<pos:position pos:line="43" pos:column="38"/></name>;<pos:position pos:line="43" pos:column="39"/></goto></block></then></if>
	}<pos:position pos:line="44" pos:column="10"/></block></then> <elseif pos:line="44" pos:column="11">else <if pos:line="44" pos:column="16">if <condition pos:line="44" pos:column="19">(<expr><name pos:line="44" pos:column="20">errno<pos:position pos:line="44" pos:column="25"/></name> <operator pos:line="44" pos:column="26">==<pos:position pos:line="44" pos:column="28"/></operator> <name pos:line="44" pos:column="29">ENOENT<pos:position pos:line="44" pos:column="35"/></name> <operator pos:line="44" pos:column="36">&amp;&amp;<pos:position pos:line="44" pos:column="46"/></operator> <name pos:line="44" pos:column="39">create_directories_remaining<pos:position pos:line="44" pos:column="67"/></name><operator pos:line="44" pos:column="67">--<pos:position pos:line="44" pos:column="69"/></operator> <operator pos:line="44" pos:column="70">&gt;<pos:position pos:line="44" pos:column="74"/></operator> <literal type="number" pos:line="44" pos:column="72">0<pos:position pos:line="44" pos:column="73"/></literal></expr>)<pos:position pos:line="44" pos:column="74"/></condition><then pos:line="44" pos:column="74"> <block pos:line="44" pos:column="75">{
		<comment type="block" pos:line="45" pos:column="17">/*
		 * Maybe the containing directory didn't exist, or
		 * maybe it was just deleted by a process that is
		 * racing with us to clean up empty directories. Try
		 * to create it:
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="51" pos:column="17">enum<pos:position pos:line="51" pos:column="21"/></name> <name pos:line="51" pos:column="22">scld_error<pos:position pos:line="51" pos:column="32"/></name></name></type> <name pos:line="51" pos:column="33">scld_result<pos:position pos:line="51" pos:column="44"/></name></decl>;<pos:position pos:line="51" pos:column="45"/></decl_stmt>

		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><operator pos:line="53" pos:column="21">!<pos:position pos:line="53" pos:column="22"/></operator><name><name pos:line="53" pos:column="22">path_copy<pos:position pos:line="53" pos:column="31"/></name><operator pos:line="53" pos:column="31">.<pos:position pos:line="53" pos:column="32"/></operator><name pos:line="53" pos:column="32">len<pos:position pos:line="53" pos:column="35"/></name></name></expr>)<pos:position pos:line="53" pos:column="36"/></condition><then pos:line="53" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="25">strbuf_addstr<pos:position pos:line="54" pos:column="38"/></name><argument_list pos:line="54" pos:column="38">(<argument><expr><operator pos:line="54" pos:column="39">&amp;<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="40">path_copy<pos:position pos:line="54" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="51">path<pos:position pos:line="54" pos:column="55"/></name></expr></argument>)<pos:position pos:line="54" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="57"/></expr_stmt></block></then></if>

		<do pos:line="56" pos:column="17">do <block pos:line="56" pos:column="20">{
			<expr_stmt><expr><name pos:line="57" pos:column="25">scld_result<pos:position pos:line="57" pos:column="36"/></name> <operator pos:line="57" pos:column="37">=<pos:position pos:line="57" pos:column="38"/></operator> <call><name pos:line="57" pos:column="39">safe_create_leading_directories<pos:position pos:line="57" pos:column="70"/></name><argument_list pos:line="57" pos:column="70">(<argument><expr><name><name pos:line="57" pos:column="71">path_copy<pos:position pos:line="57" pos:column="80"/></name><operator pos:line="57" pos:column="80">.<pos:position pos:line="57" pos:column="81"/></operator><name pos:line="57" pos:column="81">buf<pos:position pos:line="57" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="86"/></expr_stmt>
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><name pos:line="58" pos:column="29">scld_result<pos:position pos:line="58" pos:column="40"/></name> <operator pos:line="58" pos:column="41">==<pos:position pos:line="58" pos:column="43"/></operator> <name pos:line="58" pos:column="44">SCLD_OK<pos:position pos:line="58" pos:column="51"/></name></expr>)<pos:position pos:line="58" pos:column="52"/></condition><then pos:line="58" pos:column="52">
				<block type="pseudo"><goto pos:line="59" pos:column="33">goto <name pos:line="59" pos:column="38">retry_fn<pos:position pos:line="59" pos:column="46"/></name>;<pos:position pos:line="59" pos:column="47"/></goto></block></then></if>
		}<pos:position pos:line="60" pos:column="18"/></block> while <condition pos:line="60" pos:column="25">(<expr><name pos:line="60" pos:column="26">scld_result<pos:position pos:line="60" pos:column="37"/></name> <operator pos:line="60" pos:column="38">==<pos:position pos:line="60" pos:column="40"/></operator> <name pos:line="60" pos:column="41">SCLD_VANISHED<pos:position pos:line="60" pos:column="54"/></name> <operator pos:line="60" pos:column="55">&amp;&amp;<pos:position pos:line="60" pos:column="65"/></operator> <name pos:line="60" pos:column="58">create_directories_remaining<pos:position pos:line="60" pos:column="86"/></name><operator pos:line="60" pos:column="86">--<pos:position pos:line="60" pos:column="88"/></operator> <operator pos:line="60" pos:column="89">&gt;<pos:position pos:line="60" pos:column="93"/></operator> <literal type="number" pos:line="60" pos:column="91">0<pos:position pos:line="60" pos:column="92"/></literal></expr>)<pos:position pos:line="60" pos:column="93"/></condition>;<pos:position pos:line="60" pos:column="94"/></do>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if></elseif></if>

<label><name pos:line="63" pos:column="1">out<pos:position pos:line="63" pos:column="4"/></name>:<pos:position pos:line="63" pos:column="5"/></label>
	<expr_stmt><expr><call><name pos:line="64" pos:column="9">strbuf_release<pos:position pos:line="64" pos:column="23"/></name><argument_list pos:line="64" pos:column="23">(<argument><expr><operator pos:line="64" pos:column="24">&amp;<pos:position pos:line="64" pos:column="29"/></operator><name pos:line="64" pos:column="25">path_copy<pos:position pos:line="64" pos:column="34"/></name></expr></argument>)<pos:position pos:line="64" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="65" pos:column="9">errno<pos:position pos:line="65" pos:column="14"/></name> <operator pos:line="65" pos:column="15">=<pos:position pos:line="65" pos:column="16"/></operator> <name pos:line="65" pos:column="17">save_errno<pos:position pos:line="65" pos:column="27"/></name></expr>;<pos:position pos:line="65" pos:column="28"/></expr_stmt>
	<return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">ret<pos:position pos:line="66" pos:column="19"/></name></expr>;<pos:position pos:line="66" pos:column="20"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
