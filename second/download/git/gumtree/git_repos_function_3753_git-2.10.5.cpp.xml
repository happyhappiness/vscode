<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3753_git-2.10.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">grep_source_1<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">grep_opt<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">opt<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">grep_source<pos:position pos:line="1" pos:column="66"/></name></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">gs<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="72">int<pos:position pos:line="1" pos:column="75"/></name></type> <name pos:line="1" pos:column="76">collect_hits<pos:position pos:line="1" pos:column="88"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="89"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">bol<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">peek_bol<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><name pos:line="4" pos:column="26">NULL<pos:position pos:line="4" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">left<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">lno<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><literal type="number" pos:line="6" pos:column="24">1<pos:position pos:line="6" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">last_hit<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">binary_match_only<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><literal type="number" pos:line="8" pos:column="33">0<pos:position pos:line="8" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">count<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><literal type="number" pos:line="9" pos:column="26">0<pos:position pos:line="9" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">try_lookahead<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><literal type="number" pos:line="10" pos:column="29">0<pos:position pos:line="10" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">show_function<pos:position pos:line="11" pos:column="26"/></name> <init pos:line="11" pos:column="27">= <expr><literal type="number" pos:line="11" pos:column="29">0<pos:position pos:line="11" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">userdiff_driver<pos:position pos:line="12" pos:column="31"/></name></name> <modifier pos:line="12" pos:column="32">*<pos:position pos:line="12" pos:column="33"/></modifier></type><name pos:line="12" pos:column="33">textconv<pos:position pos:line="12" pos:column="41"/></name> <init pos:line="12" pos:column="42">= <expr><name pos:line="12" pos:column="44">NULL<pos:position pos:line="12" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="13" pos:column="9">enum<pos:position pos:line="13" pos:column="13"/></name> <name pos:line="13" pos:column="14">grep_context<pos:position pos:line="13" pos:column="26"/></name></name></type> <name pos:line="13" pos:column="27">ctx<pos:position pos:line="13" pos:column="30"/></name> <init pos:line="13" pos:column="31">= <expr><name pos:line="13" pos:column="33">GREP_CONTEXT_HEAD<pos:position pos:line="13" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">xdemitconf_t<pos:position pos:line="14" pos:column="21"/></name></type> <name pos:line="14" pos:column="22">xecfg<pos:position pos:line="14" pos:column="27"/></name></decl>;<pos:position pos:line="14" pos:column="28"/></decl_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name><name pos:line="16" pos:column="14">opt<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">-&gt;<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="19">output<pos:position pos:line="16" pos:column="25"/></name></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="17" pos:column="17">opt<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">-&gt;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="22">output<pos:position pos:line="17" pos:column="28"/></name></name> <operator pos:line="17" pos:column="29">=<pos:position pos:line="17" pos:column="30"/></operator> <name pos:line="17" pos:column="31">std_output<pos:position pos:line="17" pos:column="41"/></name></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name><name pos:line="19" pos:column="13">opt<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">-&gt;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="18">pre_context<pos:position pos:line="19" pos:column="29"/></name></name> <operator pos:line="19" pos:column="30">||<pos:position pos:line="19" pos:column="32"/></operator> <name><name pos:line="19" pos:column="33">opt<pos:position pos:line="19" pos:column="36"/></name><operator pos:line="19" pos:column="36">-&gt;<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="38">post_context<pos:position pos:line="19" pos:column="50"/></name></name> <operator pos:line="19" pos:column="51">||<pos:position pos:line="19" pos:column="53"/></operator> <name><name pos:line="19" pos:column="54">opt<pos:position pos:line="19" pos:column="57"/></name><operator pos:line="19" pos:column="57">-&gt;<pos:position pos:line="19" pos:column="62"/></operator><name pos:line="19" pos:column="59">file_break<pos:position pos:line="19" pos:column="69"/></name></name> <operator pos:line="19" pos:column="70">||<pos:position pos:line="19" pos:column="72"/></operator>
	    <name><name pos:line="20" pos:column="13">opt<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">funcbody<pos:position pos:line="20" pos:column="26"/></name></name></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27"> <block pos:line="20" pos:column="28">{
		<comment type="block" pos:line="21" pos:column="17">/* Show hunk marks, except for the first file. */</comment>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name><name pos:line="22" pos:column="21">opt<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">-&gt;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="26">last_shown<pos:position pos:line="22" pos:column="36"/></name></name></expr>)<pos:position pos:line="22" pos:column="37"/></condition><then pos:line="22" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="23" pos:column="25">opt<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">-&gt;<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="30">show_hunk_mark<pos:position pos:line="23" pos:column="44"/></name></name> <operator pos:line="23" pos:column="45">=<pos:position pos:line="23" pos:column="46"/></operator> <literal type="number" pos:line="23" pos:column="47">1<pos:position pos:line="23" pos:column="48"/></literal></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="24" pos:column="17">/*
		 * If we're using threads then we can't easily identify
		 * the first file.  Always put hunk marks in that case
		 * and skip the very first one later in work_done().
		 */</comment>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name><name pos:line="29" pos:column="21">opt<pos:position pos:line="29" pos:column="24"/></name><operator pos:line="29" pos:column="24">-&gt;<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="26">output<pos:position pos:line="29" pos:column="32"/></name></name> <operator pos:line="29" pos:column="33">!=<pos:position pos:line="29" pos:column="35"/></operator> <name pos:line="29" pos:column="36">std_output<pos:position pos:line="29" pos:column="46"/></name></expr>)<pos:position pos:line="29" pos:column="47"/></condition><then pos:line="29" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="30" pos:column="25">opt<pos:position pos:line="30" pos:column="28"/></name><operator pos:line="30" pos:column="28">-&gt;<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="30">show_hunk_mark<pos:position pos:line="30" pos:column="44"/></name></name> <operator pos:line="30" pos:column="45">=<pos:position pos:line="30" pos:column="46"/></operator> <literal type="number" pos:line="30" pos:column="47">1<pos:position pos:line="30" pos:column="48"/></literal></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt></block></then></if>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="32" pos:column="9">opt<pos:position pos:line="32" pos:column="12"/></name><operator pos:line="32" pos:column="12">-&gt;<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="14">last_shown<pos:position pos:line="32" pos:column="24"/></name></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator> <literal type="number" pos:line="32" pos:column="27">0<pos:position pos:line="32" pos:column="28"/></literal></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>

	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name><name pos:line="34" pos:column="13">opt<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">-&gt;<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="18">allow_textconv<pos:position pos:line="34" pos:column="32"/></name></name></expr>)<pos:position pos:line="34" pos:column="33"/></condition><then pos:line="34" pos:column="33"> <block pos:line="34" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">grep_source_load_driver<pos:position pos:line="35" pos:column="40"/></name><argument_list pos:line="35" pos:column="40">(<argument><expr><name pos:line="35" pos:column="41">gs<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>
		<comment type="block" pos:line="36" pos:column="17">/*
		 * We might set up the shared textconv cache data here, which
		 * is not thread-safe.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">grep_attr_lock<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">()<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">textconv<pos:position pos:line="41" pos:column="25"/></name> <operator pos:line="41" pos:column="26">=<pos:position pos:line="41" pos:column="27"/></operator> <call><name pos:line="41" pos:column="28">userdiff_get_textconv<pos:position pos:line="41" pos:column="49"/></name><argument_list pos:line="41" pos:column="49">(<argument><expr><name><name pos:line="41" pos:column="50">gs<pos:position pos:line="41" pos:column="52"/></name><operator pos:line="41" pos:column="52">-&gt;<pos:position pos:line="41" pos:column="57"/></operator><name pos:line="41" pos:column="54">driver<pos:position pos:line="41" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">grep_attr_unlock<pos:position pos:line="42" pos:column="33"/></name><argument_list pos:line="42" pos:column="33">()<pos:position pos:line="42" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="45" pos:column="9">/*
	 * We know the result of a textconv is text, so we only have to care
	 * about binary handling if we are not using it.
	 */</comment>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><operator pos:line="49" pos:column="13">!<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="14">textconv<pos:position pos:line="49" pos:column="22"/></name></expr>)<pos:position pos:line="49" pos:column="23"/></condition><then pos:line="49" pos:column="23"> <block pos:line="49" pos:column="24">{
		<switch pos:line="50" pos:column="17">switch <condition pos:line="50" pos:column="24">(<expr><name><name pos:line="50" pos:column="25">opt<pos:position pos:line="50" pos:column="28"/></name><operator pos:line="50" pos:column="28">-&gt;<pos:position pos:line="50" pos:column="33"/></operator><name pos:line="50" pos:column="30">binary<pos:position pos:line="50" pos:column="36"/></name></name></expr>)<pos:position pos:line="50" pos:column="37"/></condition> <block pos:line="50" pos:column="38">{
		<case pos:line="51" pos:column="17">case <expr><name pos:line="51" pos:column="22">GREP_BINARY_DEFAULT<pos:position pos:line="51" pos:column="41"/></name></expr>:<pos:position pos:line="51" pos:column="42"/></case>
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><call><name pos:line="52" pos:column="29">grep_source_is_binary<pos:position pos:line="52" pos:column="50"/></name><argument_list pos:line="52" pos:column="50">(<argument><expr><name pos:line="52" pos:column="51">gs<pos:position pos:line="52" pos:column="53"/></name></expr></argument>)<pos:position pos:line="52" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="55"/></condition><then pos:line="52" pos:column="55">
				<block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="33">binary_match_only<pos:position pos:line="53" pos:column="50"/></name> <operator pos:line="53" pos:column="51">=<pos:position pos:line="53" pos:column="52"/></operator> <literal type="number" pos:line="53" pos:column="53">1<pos:position pos:line="53" pos:column="54"/></literal></expr>;<pos:position pos:line="53" pos:column="55"/></expr_stmt></block></then></if>
			<break pos:line="54" pos:column="25">break;<pos:position pos:line="54" pos:column="31"/></break>
		<case pos:line="55" pos:column="17">case <expr><name pos:line="55" pos:column="22">GREP_BINARY_NOMATCH<pos:position pos:line="55" pos:column="41"/></name></expr>:<pos:position pos:line="55" pos:column="42"/></case>
			<if pos:line="56" pos:column="25">if <condition pos:line="56" pos:column="28">(<expr><call><name pos:line="56" pos:column="29">grep_source_is_binary<pos:position pos:line="56" pos:column="50"/></name><argument_list pos:line="56" pos:column="50">(<argument><expr><name pos:line="56" pos:column="51">gs<pos:position pos:line="56" pos:column="53"/></name></expr></argument>)<pos:position pos:line="56" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="55"/></condition><then pos:line="56" pos:column="55">
				<block type="pseudo"><return pos:line="57" pos:column="33">return <expr><literal type="number" pos:line="57" pos:column="40">0<pos:position pos:line="57" pos:column="41"/></literal></expr>;<pos:position pos:line="57" pos:column="42"/></return></block></then></if> <comment type="block" pos:line="57" pos:column="43">/* Assume unmatch */</comment>
			<break pos:line="58" pos:column="25">break;<pos:position pos:line="58" pos:column="31"/></break>
		<case pos:line="59" pos:column="17">case <expr><name pos:line="59" pos:column="22">GREP_BINARY_TEXT<pos:position pos:line="59" pos:column="38"/></name></expr>:<pos:position pos:line="59" pos:column="39"/></case>
			<break pos:line="60" pos:column="25">break;<pos:position pos:line="60" pos:column="31"/></break>
		<default pos:line="61" pos:column="17">default:<pos:position pos:line="61" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">die<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><literal type="string" pos:line="62" pos:column="29">"BUG: unknown binary handling mode"<pos:position pos:line="62" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="66"/></expr_stmt>
		}<pos:position pos:line="63" pos:column="18"/></block></switch>
	}<pos:position pos:line="64" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="66" pos:column="9">memset<pos:position pos:line="66" pos:column="15"/></name><argument_list pos:line="66" pos:column="15">(<argument><expr><operator pos:line="66" pos:column="16">&amp;<pos:position pos:line="66" pos:column="21"/></operator><name pos:line="66" pos:column="17">xecfg<pos:position pos:line="66" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="24">0<pos:position pos:line="66" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="66" pos:column="27">sizeof<argument_list pos:line="66" pos:column="33">(<argument><expr><name pos:line="66" pos:column="34">xecfg<pos:position pos:line="66" pos:column="39"/></name></expr></argument>)<pos:position pos:line="66" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="66" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="67" pos:column="9">opt<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">-&gt;<pos:position pos:line="67" pos:column="17"/></operator><name pos:line="67" pos:column="14">priv<pos:position pos:line="67" pos:column="18"/></name></name> <operator pos:line="67" pos:column="19">=<pos:position pos:line="67" pos:column="20"/></operator> <operator pos:line="67" pos:column="21">&amp;<pos:position pos:line="67" pos:column="26"/></operator><name pos:line="67" pos:column="22">xecfg<pos:position pos:line="67" pos:column="27"/></name></expr>;<pos:position pos:line="67" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><name pos:line="69" pos:column="9">try_lookahead<pos:position pos:line="69" pos:column="22"/></name> <operator pos:line="69" pos:column="23">=<pos:position pos:line="69" pos:column="24"/></operator> <call><name pos:line="69" pos:column="25">should_lookahead<pos:position pos:line="69" pos:column="41"/></name><argument_list pos:line="69" pos:column="41">(<argument><expr><name pos:line="69" pos:column="42">opt<pos:position pos:line="69" pos:column="45"/></name></expr></argument>)<pos:position pos:line="69" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="47"/></expr_stmt>

	<if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><call><name pos:line="71" pos:column="13">fill_textconv_grep<pos:position pos:line="71" pos:column="31"/></name><argument_list pos:line="71" pos:column="31">(<argument><expr><name pos:line="71" pos:column="32">textconv<pos:position pos:line="71" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="42">gs<pos:position pos:line="71" pos:column="44"/></name></expr></argument>)<pos:position pos:line="71" pos:column="45"/></argument_list></call> <operator pos:line="71" pos:column="46">&lt;<pos:position pos:line="71" pos:column="50"/></operator> <literal type="number" pos:line="71" pos:column="48">0<pos:position pos:line="71" pos:column="49"/></literal></expr>)<pos:position pos:line="71" pos:column="50"/></condition><then pos:line="71" pos:column="50">
		<block type="pseudo"><return pos:line="72" pos:column="17">return <expr><literal type="number" pos:line="72" pos:column="24">0<pos:position pos:line="72" pos:column="25"/></literal></expr>;<pos:position pos:line="72" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="74" pos:column="9">bol<pos:position pos:line="74" pos:column="12"/></name> <operator pos:line="74" pos:column="13">=<pos:position pos:line="74" pos:column="14"/></operator> <name><name pos:line="74" pos:column="15">gs<pos:position pos:line="74" pos:column="17"/></name><operator pos:line="74" pos:column="17">-&gt;<pos:position pos:line="74" pos:column="22"/></operator><name pos:line="74" pos:column="19">buf<pos:position pos:line="74" pos:column="22"/></name></name></expr>;<pos:position pos:line="74" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name pos:line="75" pos:column="9">left<pos:position pos:line="75" pos:column="13"/></name> <operator pos:line="75" pos:column="14">=<pos:position pos:line="75" pos:column="15"/></operator> <name><name pos:line="75" pos:column="16">gs<pos:position pos:line="75" pos:column="18"/></name><operator pos:line="75" pos:column="18">-&gt;<pos:position pos:line="75" pos:column="23"/></operator><name pos:line="75" pos:column="20">size<pos:position pos:line="75" pos:column="24"/></name></name></expr>;<pos:position pos:line="75" pos:column="25"/></expr_stmt>
	<while pos:line="76" pos:column="9">while <condition pos:line="76" pos:column="15">(<expr><name pos:line="76" pos:column="16">left<pos:position pos:line="76" pos:column="20"/></name></expr>)<pos:position pos:line="76" pos:column="21"/></condition> <block pos:line="76" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="77" pos:column="17">char<pos:position pos:line="77" pos:column="21"/></name> <modifier pos:line="77" pos:column="22">*<pos:position pos:line="77" pos:column="23"/></modifier></type><name pos:line="77" pos:column="23">eol<pos:position pos:line="77" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="77" pos:column="28">ch<pos:position pos:line="77" pos:column="30"/></name></decl>;<pos:position pos:line="77" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="78" pos:column="17">int<pos:position pos:line="78" pos:column="20"/></name></type> <name pos:line="78" pos:column="21">hit<pos:position pos:line="78" pos:column="24"/></name></decl>;<pos:position pos:line="78" pos:column="25"/></decl_stmt>

		<comment type="block" pos:line="80" pos:column="17">/*
		 * look_ahead() skips quickly to the line that possibly
		 * has the next hit; don't call it if we need to do
		 * something more than just skipping the current line
		 * in response to an unmatch for the current line.  E.g.
		 * inside a post-context window, we will show the current
		 * line as a context around the previous hit when it
		 * doesn't hit.
		 */</comment>
		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><name pos:line="89" pos:column="21">try_lookahead<pos:position pos:line="89" pos:column="34"/></name>
		    <operator pos:line="90" pos:column="21">&amp;&amp;<pos:position pos:line="90" pos:column="31"/></operator> <operator pos:line="90" pos:column="24">!<pos:position pos:line="90" pos:column="25"/></operator><operator pos:line="90" pos:column="25">(<pos:position pos:line="90" pos:column="26"/></operator><name pos:line="90" pos:column="26">last_hit<pos:position pos:line="90" pos:column="34"/></name>
			 <operator pos:line="91" pos:column="26">&amp;&amp;<pos:position pos:line="91" pos:column="36"/></operator> <operator pos:line="91" pos:column="29">(<pos:position pos:line="91" pos:column="30"/></operator><name pos:line="91" pos:column="30">show_function<pos:position pos:line="91" pos:column="43"/></name> <operator pos:line="91" pos:column="44">||<pos:position pos:line="91" pos:column="46"/></operator>
			     <name pos:line="92" pos:column="30">lno<pos:position pos:line="92" pos:column="33"/></name> <operator pos:line="92" pos:column="34">&lt;=<pos:position pos:line="92" pos:column="39"/></operator> <name pos:line="92" pos:column="37">last_hit<pos:position pos:line="92" pos:column="45"/></name> <operator pos:line="92" pos:column="46">+<pos:position pos:line="92" pos:column="47"/></operator> <name><name pos:line="92" pos:column="48">opt<pos:position pos:line="92" pos:column="51"/></name><operator pos:line="92" pos:column="51">-&gt;<pos:position pos:line="92" pos:column="56"/></operator><name pos:line="92" pos:column="53">post_context<pos:position pos:line="92" pos:column="65"/></name></name><operator pos:line="92" pos:column="65">)<pos:position pos:line="92" pos:column="66"/></operator><operator pos:line="92" pos:column="66">)<pos:position pos:line="92" pos:column="67"/></operator>
		    <operator pos:line="93" pos:column="21">&amp;&amp;<pos:position pos:line="93" pos:column="31"/></operator> <call><name pos:line="93" pos:column="24">look_ahead<pos:position pos:line="93" pos:column="34"/></name><argument_list pos:line="93" pos:column="34">(<argument><expr><name pos:line="93" pos:column="35">opt<pos:position pos:line="93" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="40">&amp;<pos:position pos:line="93" pos:column="45"/></operator><name pos:line="93" pos:column="41">left<pos:position pos:line="93" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="47">&amp;<pos:position pos:line="93" pos:column="52"/></operator><name pos:line="93" pos:column="48">lno<pos:position pos:line="93" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="53">&amp;<pos:position pos:line="93" pos:column="58"/></operator><name pos:line="93" pos:column="54">bol<pos:position pos:line="93" pos:column="57"/></name></expr></argument>)<pos:position pos:line="93" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="93" pos:column="59"/></condition><then pos:line="93" pos:column="59">
			<block type="pseudo"><break pos:line="94" pos:column="25">break;<pos:position pos:line="94" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="95" pos:column="17">eol<pos:position pos:line="95" pos:column="20"/></name> <operator pos:line="95" pos:column="21">=<pos:position pos:line="95" pos:column="22"/></operator> <call><name pos:line="95" pos:column="23">end_of_line<pos:position pos:line="95" pos:column="34"/></name><argument_list pos:line="95" pos:column="34">(<argument><expr><name pos:line="95" pos:column="35">bol<pos:position pos:line="95" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="40">&amp;<pos:position pos:line="95" pos:column="45"/></operator><name pos:line="95" pos:column="41">left<pos:position pos:line="95" pos:column="45"/></name></expr></argument>)<pos:position pos:line="95" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name pos:line="96" pos:column="17">ch<pos:position pos:line="96" pos:column="19"/></name> <operator pos:line="96" pos:column="20">=<pos:position pos:line="96" pos:column="21"/></operator> <operator pos:line="96" pos:column="22">*<pos:position pos:line="96" pos:column="23"/></operator><name pos:line="96" pos:column="23">eol<pos:position pos:line="96" pos:column="26"/></name></expr>;<pos:position pos:line="96" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="97" pos:column="17">*<pos:position pos:line="97" pos:column="18"/></operator><name pos:line="97" pos:column="18">eol<pos:position pos:line="97" pos:column="21"/></name> <operator pos:line="97" pos:column="22">=<pos:position pos:line="97" pos:column="23"/></operator> <literal type="number" pos:line="97" pos:column="24">0<pos:position pos:line="97" pos:column="25"/></literal></expr>;<pos:position pos:line="97" pos:column="26"/></expr_stmt>

		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><operator pos:line="99" pos:column="21">(<pos:position pos:line="99" pos:column="22"/></operator><name pos:line="99" pos:column="22">ctx<pos:position pos:line="99" pos:column="25"/></name> <operator pos:line="99" pos:column="26">==<pos:position pos:line="99" pos:column="28"/></operator> <name pos:line="99" pos:column="29">GREP_CONTEXT_HEAD<pos:position pos:line="99" pos:column="46"/></name><operator pos:line="99" pos:column="46">)<pos:position pos:line="99" pos:column="47"/></operator> <operator pos:line="99" pos:column="48">&amp;&amp;<pos:position pos:line="99" pos:column="58"/></operator> <operator pos:line="99" pos:column="51">(<pos:position pos:line="99" pos:column="52"/></operator><name pos:line="99" pos:column="52">eol<pos:position pos:line="99" pos:column="55"/></name> <operator pos:line="99" pos:column="56">==<pos:position pos:line="99" pos:column="58"/></operator> <name pos:line="99" pos:column="59">bol<pos:position pos:line="99" pos:column="62"/></name><operator pos:line="99" pos:column="62">)<pos:position pos:line="99" pos:column="63"/></operator></expr>)<pos:position pos:line="99" pos:column="64"/></condition><then pos:line="99" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><name pos:line="100" pos:column="25">ctx<pos:position pos:line="100" pos:column="28"/></name> <operator pos:line="100" pos:column="29">=<pos:position pos:line="100" pos:column="30"/></operator> <name pos:line="100" pos:column="31">GREP_CONTEXT_BODY<pos:position pos:line="100" pos:column="48"/></name></expr>;<pos:position pos:line="100" pos:column="49"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name pos:line="102" pos:column="17">hit<pos:position pos:line="102" pos:column="20"/></name> <operator pos:line="102" pos:column="21">=<pos:position pos:line="102" pos:column="22"/></operator> <call><name pos:line="102" pos:column="23">match_line<pos:position pos:line="102" pos:column="33"/></name><argument_list pos:line="102" pos:column="33">(<argument><expr><name pos:line="102" pos:column="34">opt<pos:position pos:line="102" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="39">bol<pos:position pos:line="102" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="44">eol<pos:position pos:line="102" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="49">ctx<pos:position pos:line="102" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="54">collect_hits<pos:position pos:line="102" pos:column="66"/></name></expr></argument>)<pos:position pos:line="102" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="103" pos:column="17">*<pos:position pos:line="103" pos:column="18"/></operator><name pos:line="103" pos:column="18">eol<pos:position pos:line="103" pos:column="21"/></name> <operator pos:line="103" pos:column="22">=<pos:position pos:line="103" pos:column="23"/></operator> <name pos:line="103" pos:column="24">ch<pos:position pos:line="103" pos:column="26"/></name></expr>;<pos:position pos:line="103" pos:column="27"/></expr_stmt>

		<if pos:line="105" pos:column="17">if <condition pos:line="105" pos:column="20">(<expr><name pos:line="105" pos:column="21">collect_hits<pos:position pos:line="105" pos:column="33"/></name></expr>)<pos:position pos:line="105" pos:column="34"/></condition><then pos:line="105" pos:column="34">
			<block type="pseudo"><goto pos:line="106" pos:column="25">goto <name pos:line="106" pos:column="30">next_line<pos:position pos:line="106" pos:column="39"/></name>;<pos:position pos:line="106" pos:column="40"/></goto></block></then></if>

		<comment type="block" pos:line="108" pos:column="17">/* "grep -v -e foo -e bla" should list lines
		 * that do not have either, so inversion should
		 * be done outside.
		 */</comment>
		<if pos:line="112" pos:column="17">if <condition pos:line="112" pos:column="20">(<expr><name><name pos:line="112" pos:column="21">opt<pos:position pos:line="112" pos:column="24"/></name><operator pos:line="112" pos:column="24">-&gt;<pos:position pos:line="112" pos:column="29"/></operator><name pos:line="112" pos:column="26">invert<pos:position pos:line="112" pos:column="32"/></name></name></expr>)<pos:position pos:line="112" pos:column="33"/></condition><then pos:line="112" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><name pos:line="113" pos:column="25">hit<pos:position pos:line="113" pos:column="28"/></name> <operator pos:line="113" pos:column="29">=<pos:position pos:line="113" pos:column="30"/></operator> <operator pos:line="113" pos:column="31">!<pos:position pos:line="113" pos:column="32"/></operator><name pos:line="113" pos:column="32">hit<pos:position pos:line="113" pos:column="35"/></name></expr>;<pos:position pos:line="113" pos:column="36"/></expr_stmt></block></then></if>
		<if pos:line="114" pos:column="17">if <condition pos:line="114" pos:column="20">(<expr><name><name pos:line="114" pos:column="21">opt<pos:position pos:line="114" pos:column="24"/></name><operator pos:line="114" pos:column="24">-&gt;<pos:position pos:line="114" pos:column="29"/></operator><name pos:line="114" pos:column="26">unmatch_name_only<pos:position pos:line="114" pos:column="43"/></name></name></expr>)<pos:position pos:line="114" pos:column="44"/></condition><then pos:line="114" pos:column="44"> <block pos:line="114" pos:column="45">{
			<if pos:line="115" pos:column="25">if <condition pos:line="115" pos:column="28">(<expr><name pos:line="115" pos:column="29">hit<pos:position pos:line="115" pos:column="32"/></name></expr>)<pos:position pos:line="115" pos:column="33"/></condition><then pos:line="115" pos:column="33">
				<block type="pseudo"><return pos:line="116" pos:column="33">return <expr><literal type="number" pos:line="116" pos:column="40">0<pos:position pos:line="116" pos:column="41"/></literal></expr>;<pos:position pos:line="116" pos:column="42"/></return></block></then></if>
			<goto pos:line="117" pos:column="25">goto <name pos:line="117" pos:column="30">next_line<pos:position pos:line="117" pos:column="39"/></name>;<pos:position pos:line="117" pos:column="40"/></goto>
		}<pos:position pos:line="118" pos:column="18"/></block></then></if>
		<if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><name pos:line="119" pos:column="21">hit<pos:position pos:line="119" pos:column="24"/></name></expr>)<pos:position pos:line="119" pos:column="25"/></condition><then pos:line="119" pos:column="25"> <block pos:line="119" pos:column="26">{
			<expr_stmt><expr><name pos:line="120" pos:column="25">count<pos:position pos:line="120" pos:column="30"/></name><operator pos:line="120" pos:column="30">++<pos:position pos:line="120" pos:column="32"/></operator></expr>;<pos:position pos:line="120" pos:column="33"/></expr_stmt>
			<if pos:line="121" pos:column="25">if <condition pos:line="121" pos:column="28">(<expr><name><name pos:line="121" pos:column="29">opt<pos:position pos:line="121" pos:column="32"/></name><operator pos:line="121" pos:column="32">-&gt;<pos:position pos:line="121" pos:column="37"/></operator><name pos:line="121" pos:column="34">status_only<pos:position pos:line="121" pos:column="45"/></name></name></expr>)<pos:position pos:line="121" pos:column="46"/></condition><then pos:line="121" pos:column="46">
				<block type="pseudo"><return pos:line="122" pos:column="33">return <expr><literal type="number" pos:line="122" pos:column="40">1<pos:position pos:line="122" pos:column="41"/></literal></expr>;<pos:position pos:line="122" pos:column="42"/></return></block></then></if>
			<if pos:line="123" pos:column="25">if <condition pos:line="123" pos:column="28">(<expr><name><name pos:line="123" pos:column="29">opt<pos:position pos:line="123" pos:column="32"/></name><operator pos:line="123" pos:column="32">-&gt;<pos:position pos:line="123" pos:column="37"/></operator><name pos:line="123" pos:column="34">name_only<pos:position pos:line="123" pos:column="43"/></name></name></expr>)<pos:position pos:line="123" pos:column="44"/></condition><then pos:line="123" pos:column="44"> <block pos:line="123" pos:column="45">{
				<expr_stmt><expr><call><name pos:line="124" pos:column="33">show_name<pos:position pos:line="124" pos:column="42"/></name><argument_list pos:line="124" pos:column="42">(<argument><expr><name pos:line="124" pos:column="43">opt<pos:position pos:line="124" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="124" pos:column="48">gs<pos:position pos:line="124" pos:column="50"/></name><operator pos:line="124" pos:column="50">-&gt;<pos:position pos:line="124" pos:column="55"/></operator><name pos:line="124" pos:column="52">name<pos:position pos:line="124" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="124" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="58"/></expr_stmt>
				<return pos:line="125" pos:column="33">return <expr><literal type="number" pos:line="125" pos:column="40">1<pos:position pos:line="125" pos:column="41"/></literal></expr>;<pos:position pos:line="125" pos:column="42"/></return>
			}<pos:position pos:line="126" pos:column="26"/></block></then></if>
			<if pos:line="127" pos:column="25">if <condition pos:line="127" pos:column="28">(<expr><name><name pos:line="127" pos:column="29">opt<pos:position pos:line="127" pos:column="32"/></name><operator pos:line="127" pos:column="32">-&gt;<pos:position pos:line="127" pos:column="37"/></operator><name pos:line="127" pos:column="34">count<pos:position pos:line="127" pos:column="39"/></name></name></expr>)<pos:position pos:line="127" pos:column="40"/></condition><then pos:line="127" pos:column="40">
				<block type="pseudo"><goto pos:line="128" pos:column="33">goto <name pos:line="128" pos:column="38">next_line<pos:position pos:line="128" pos:column="47"/></name>;<pos:position pos:line="128" pos:column="48"/></goto></block></then></if>
			<if pos:line="129" pos:column="25">if <condition pos:line="129" pos:column="28">(<expr><name pos:line="129" pos:column="29">binary_match_only<pos:position pos:line="129" pos:column="46"/></name></expr>)<pos:position pos:line="129" pos:column="47"/></condition><then pos:line="129" pos:column="47"> <block pos:line="129" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="130" pos:column="33">opt<pos:position pos:line="130" pos:column="36"/></name><operator pos:line="130" pos:column="36">-&gt;<pos:position pos:line="130" pos:column="41"/></operator><name pos:line="130" pos:column="38">output<pos:position pos:line="130" pos:column="44"/></name></name><argument_list pos:line="130" pos:column="44">(<argument><expr><name pos:line="130" pos:column="45">opt<pos:position pos:line="130" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="130" pos:column="50">"Binary file "<pos:position pos:line="130" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="130" pos:column="66">12<pos:position pos:line="130" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="131" pos:column="33">output_color<pos:position pos:line="131" pos:column="45"/></name><argument_list pos:line="131" pos:column="45">(<argument><expr><name pos:line="131" pos:column="46">opt<pos:position pos:line="131" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="51">gs<pos:position pos:line="131" pos:column="53"/></name><operator pos:line="131" pos:column="53">-&gt;<pos:position pos:line="131" pos:column="58"/></operator><name pos:line="131" pos:column="55">name<pos:position pos:line="131" pos:column="59"/></name></name></expr></argument>, <argument><expr><call><name pos:line="131" pos:column="61">strlen<pos:position pos:line="131" pos:column="67"/></name><argument_list pos:line="131" pos:column="67">(<argument><expr><name><name pos:line="131" pos:column="68">gs<pos:position pos:line="131" pos:column="70"/></name><operator pos:line="131" pos:column="70">-&gt;<pos:position pos:line="131" pos:column="75"/></operator><name pos:line="131" pos:column="72">name<pos:position pos:line="131" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="131" pos:column="77"/></argument_list></call></expr></argument>,
					     <argument><expr><name><name pos:line="132" pos:column="46">opt<pos:position pos:line="132" pos:column="49"/></name><operator pos:line="132" pos:column="49">-&gt;<pos:position pos:line="132" pos:column="54"/></operator><name pos:line="132" pos:column="51">color_filename<pos:position pos:line="132" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="132" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="133" pos:column="33">opt<pos:position pos:line="133" pos:column="36"/></name><operator pos:line="133" pos:column="36">-&gt;<pos:position pos:line="133" pos:column="41"/></operator><name pos:line="133" pos:column="38">output<pos:position pos:line="133" pos:column="44"/></name></name><argument_list pos:line="133" pos:column="44">(<argument><expr><name pos:line="133" pos:column="45">opt<pos:position pos:line="133" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="50">" matches\n"<pos:position pos:line="133" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="133" pos:column="64">9<pos:position pos:line="133" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="67"/></expr_stmt>
				<return pos:line="134" pos:column="33">return <expr><literal type="number" pos:line="134" pos:column="40">1<pos:position pos:line="134" pos:column="41"/></literal></expr>;<pos:position pos:line="134" pos:column="42"/></return>
			}<pos:position pos:line="135" pos:column="26"/></block></then></if>
			<comment type="block" pos:line="136" pos:column="25">/* Hit at this line.  If we haven't shown the
			 * pre-context lines, we would need to show them.
			 */</comment>
			<if pos:line="139" pos:column="25">if <condition pos:line="139" pos:column="28">(<expr><name><name pos:line="139" pos:column="29">opt<pos:position pos:line="139" pos:column="32"/></name><operator pos:line="139" pos:column="32">-&gt;<pos:position pos:line="139" pos:column="37"/></operator><name pos:line="139" pos:column="34">pre_context<pos:position pos:line="139" pos:column="45"/></name></name> <operator pos:line="139" pos:column="46">||<pos:position pos:line="139" pos:column="48"/></operator> <name><name pos:line="139" pos:column="49">opt<pos:position pos:line="139" pos:column="52"/></name><operator pos:line="139" pos:column="52">-&gt;<pos:position pos:line="139" pos:column="57"/></operator><name pos:line="139" pos:column="54">funcbody<pos:position pos:line="139" pos:column="62"/></name></name></expr>)<pos:position pos:line="139" pos:column="63"/></condition><then pos:line="139" pos:column="63">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="140" pos:column="33">show_pre_context<pos:position pos:line="140" pos:column="49"/></name><argument_list pos:line="140" pos:column="49">(<argument><expr><name pos:line="140" pos:column="50">opt<pos:position pos:line="140" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="55">gs<pos:position pos:line="140" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="59">bol<pos:position pos:line="140" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="64">eol<pos:position pos:line="140" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="69">lno<pos:position pos:line="140" pos:column="72"/></name></expr></argument>)<pos:position pos:line="140" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="74"/></expr_stmt></block></then>
			<elseif pos:line="141" pos:column="25">else <if pos:line="141" pos:column="30">if <condition pos:line="141" pos:column="33">(<expr><name><name pos:line="141" pos:column="34">opt<pos:position pos:line="141" pos:column="37"/></name><operator pos:line="141" pos:column="37">-&gt;<pos:position pos:line="141" pos:column="42"/></operator><name pos:line="141" pos:column="39">funcname<pos:position pos:line="141" pos:column="47"/></name></name></expr>)<pos:position pos:line="141" pos:column="48"/></condition><then pos:line="141" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="142" pos:column="33">show_funcname_line<pos:position pos:line="142" pos:column="51"/></name><argument_list pos:line="142" pos:column="51">(<argument><expr><name pos:line="142" pos:column="52">opt<pos:position pos:line="142" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="57">gs<pos:position pos:line="142" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="61">bol<pos:position pos:line="142" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="66">lno<pos:position pos:line="142" pos:column="69"/></name></expr></argument>)<pos:position pos:line="142" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="71"/></expr_stmt></block></then></if></elseif></if>
			<expr_stmt><expr><call><name pos:line="143" pos:column="25">show_line<pos:position pos:line="143" pos:column="34"/></name><argument_list pos:line="143" pos:column="34">(<argument><expr><name pos:line="143" pos:column="35">opt<pos:position pos:line="143" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="40">bol<pos:position pos:line="143" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="45">eol<pos:position pos:line="143" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="143" pos:column="50">gs<pos:position pos:line="143" pos:column="52"/></name><operator pos:line="143" pos:column="52">-&gt;<pos:position pos:line="143" pos:column="57"/></operator><name pos:line="143" pos:column="54">name<pos:position pos:line="143" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="60">lno<pos:position pos:line="143" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="143" pos:column="65">':'<pos:position pos:line="143" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="70"/></expr_stmt>
			<expr_stmt><expr><name pos:line="144" pos:column="25">last_hit<pos:position pos:line="144" pos:column="33"/></name> <operator pos:line="144" pos:column="34">=<pos:position pos:line="144" pos:column="35"/></operator> <name pos:line="144" pos:column="36">lno<pos:position pos:line="144" pos:column="39"/></name></expr>;<pos:position pos:line="144" pos:column="40"/></expr_stmt>
			<if pos:line="145" pos:column="25">if <condition pos:line="145" pos:column="28">(<expr><name><name pos:line="145" pos:column="29">opt<pos:position pos:line="145" pos:column="32"/></name><operator pos:line="145" pos:column="32">-&gt;<pos:position pos:line="145" pos:column="37"/></operator><name pos:line="145" pos:column="34">funcbody<pos:position pos:line="145" pos:column="42"/></name></name></expr>)<pos:position pos:line="145" pos:column="43"/></condition><then pos:line="145" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><name pos:line="146" pos:column="33">show_function<pos:position pos:line="146" pos:column="46"/></name> <operator pos:line="146" pos:column="47">=<pos:position pos:line="146" pos:column="48"/></operator> <literal type="number" pos:line="146" pos:column="49">1<pos:position pos:line="146" pos:column="50"/></literal></expr>;<pos:position pos:line="146" pos:column="51"/></expr_stmt></block></then></if>
			<goto pos:line="147" pos:column="25">goto <name pos:line="147" pos:column="30">next_line<pos:position pos:line="147" pos:column="39"/></name>;<pos:position pos:line="147" pos:column="40"/></goto>
		}<pos:position pos:line="148" pos:column="18"/></block></then></if>
		<if pos:line="149" pos:column="17">if <condition pos:line="149" pos:column="20">(<expr><name pos:line="149" pos:column="21">show_function<pos:position pos:line="149" pos:column="34"/></name> <operator pos:line="149" pos:column="35">&amp;&amp;<pos:position pos:line="149" pos:column="45"/></operator> <operator pos:line="149" pos:column="38">(<pos:position pos:line="149" pos:column="39"/></operator><operator pos:line="149" pos:column="39">!<pos:position pos:line="149" pos:column="40"/></operator><name pos:line="149" pos:column="40">peek_bol<pos:position pos:line="149" pos:column="48"/></name> <operator pos:line="149" pos:column="49">||<pos:position pos:line="149" pos:column="51"/></operator> <name pos:line="149" pos:column="52">peek_bol<pos:position pos:line="149" pos:column="60"/></name> <operator pos:line="149" pos:column="61">&lt;<pos:position pos:line="149" pos:column="65"/></operator> <name pos:line="149" pos:column="63">bol<pos:position pos:line="149" pos:column="66"/></name><operator pos:line="149" pos:column="66">)<pos:position pos:line="149" pos:column="67"/></operator></expr>)<pos:position pos:line="149" pos:column="68"/></condition><then pos:line="149" pos:column="68"> <block pos:line="149" pos:column="69">{
			<decl_stmt><decl><type><name pos:line="150" pos:column="25">unsigned<pos:position pos:line="150" pos:column="33"/></name> <name pos:line="150" pos:column="34">long<pos:position pos:line="150" pos:column="38"/></name></type> <name pos:line="150" pos:column="39">peek_left<pos:position pos:line="150" pos:column="48"/></name> <init pos:line="150" pos:column="49">= <expr><name pos:line="150" pos:column="51">left<pos:position pos:line="150" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="150" pos:column="56"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="151" pos:column="25">char<pos:position pos:line="151" pos:column="29"/></name> <modifier pos:line="151" pos:column="30">*<pos:position pos:line="151" pos:column="31"/></modifier></type><name pos:line="151" pos:column="31">peek_eol<pos:position pos:line="151" pos:column="39"/></name> <init pos:line="151" pos:column="40">= <expr><name pos:line="151" pos:column="42">eol<pos:position pos:line="151" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="151" pos:column="46"/></decl_stmt>

			<comment type="block" pos:line="153" pos:column="25">/*
			 * Trailing empty lines are not interesting.
			 * Peek past them to see if they belong to the
			 * body of the current function.
			 */</comment>
			<expr_stmt><expr><name pos:line="158" pos:column="25">peek_bol<pos:position pos:line="158" pos:column="33"/></name> <operator pos:line="158" pos:column="34">=<pos:position pos:line="158" pos:column="35"/></operator> <name pos:line="158" pos:column="36">bol<pos:position pos:line="158" pos:column="39"/></name></expr>;<pos:position pos:line="158" pos:column="40"/></expr_stmt>
			<while pos:line="159" pos:column="25">while <condition pos:line="159" pos:column="31">(<expr><call><name pos:line="159" pos:column="32">is_empty_line<pos:position pos:line="159" pos:column="45"/></name><argument_list pos:line="159" pos:column="45">(<argument><expr><name pos:line="159" pos:column="46">peek_bol<pos:position pos:line="159" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="56">peek_eol<pos:position pos:line="159" pos:column="64"/></name></expr></argument>)<pos:position pos:line="159" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="159" pos:column="66"/></condition> <block pos:line="159" pos:column="67">{
				<expr_stmt><expr><name pos:line="160" pos:column="33">peek_bol<pos:position pos:line="160" pos:column="41"/></name> <operator pos:line="160" pos:column="42">=<pos:position pos:line="160" pos:column="43"/></operator> <name pos:line="160" pos:column="44">peek_eol<pos:position pos:line="160" pos:column="52"/></name> <operator pos:line="160" pos:column="53">+<pos:position pos:line="160" pos:column="54"/></operator> <literal type="number" pos:line="160" pos:column="55">1<pos:position pos:line="160" pos:column="56"/></literal></expr>;<pos:position pos:line="160" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><name pos:line="161" pos:column="33">peek_eol<pos:position pos:line="161" pos:column="41"/></name> <operator pos:line="161" pos:column="42">=<pos:position pos:line="161" pos:column="43"/></operator> <call><name pos:line="161" pos:column="44">end_of_line<pos:position pos:line="161" pos:column="55"/></name><argument_list pos:line="161" pos:column="55">(<argument><expr><name pos:line="161" pos:column="56">peek_bol<pos:position pos:line="161" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="161" pos:column="66">&amp;<pos:position pos:line="161" pos:column="71"/></operator><name pos:line="161" pos:column="67">peek_left<pos:position pos:line="161" pos:column="76"/></name></expr></argument>)<pos:position pos:line="161" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="78"/></expr_stmt>
			}<pos:position pos:line="162" pos:column="26"/></block></while>

			<if pos:line="164" pos:column="25">if <condition pos:line="164" pos:column="28">(<expr><call><name pos:line="164" pos:column="29">match_funcname<pos:position pos:line="164" pos:column="43"/></name><argument_list pos:line="164" pos:column="43">(<argument><expr><name pos:line="164" pos:column="44">opt<pos:position pos:line="164" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="49">gs<pos:position pos:line="164" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="53">peek_bol<pos:position pos:line="164" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="63">peek_eol<pos:position pos:line="164" pos:column="71"/></name></expr></argument>)<pos:position pos:line="164" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="164" pos:column="73"/></condition><then pos:line="164" pos:column="73">
				<block type="pseudo"><expr_stmt><expr><name pos:line="165" pos:column="33">show_function<pos:position pos:line="165" pos:column="46"/></name> <operator pos:line="165" pos:column="47">=<pos:position pos:line="165" pos:column="48"/></operator> <literal type="number" pos:line="165" pos:column="49">0<pos:position pos:line="165" pos:column="50"/></literal></expr>;<pos:position pos:line="165" pos:column="51"/></expr_stmt></block></then></if>
		}<pos:position pos:line="166" pos:column="18"/></block></then></if>
		<if pos:line="167" pos:column="17">if <condition pos:line="167" pos:column="20">(<expr><name pos:line="167" pos:column="21">show_function<pos:position pos:line="167" pos:column="34"/></name> <operator pos:line="167" pos:column="35">||<pos:position pos:line="167" pos:column="37"/></operator>
		    <operator pos:line="168" pos:column="21">(<pos:position pos:line="168" pos:column="22"/></operator><name pos:line="168" pos:column="22">last_hit<pos:position pos:line="168" pos:column="30"/></name> <operator pos:line="168" pos:column="31">&amp;&amp;<pos:position pos:line="168" pos:column="41"/></operator> <name pos:line="168" pos:column="34">lno<pos:position pos:line="168" pos:column="37"/></name> <operator pos:line="168" pos:column="38">&lt;=<pos:position pos:line="168" pos:column="43"/></operator> <name pos:line="168" pos:column="41">last_hit<pos:position pos:line="168" pos:column="49"/></name> <operator pos:line="168" pos:column="50">+<pos:position pos:line="168" pos:column="51"/></operator> <name><name pos:line="168" pos:column="52">opt<pos:position pos:line="168" pos:column="55"/></name><operator pos:line="168" pos:column="55">-&gt;<pos:position pos:line="168" pos:column="60"/></operator><name pos:line="168" pos:column="57">post_context<pos:position pos:line="168" pos:column="69"/></name></name><operator pos:line="168" pos:column="69">)<pos:position pos:line="168" pos:column="70"/></operator></expr>)<pos:position pos:line="168" pos:column="71"/></condition><then pos:line="168" pos:column="71"> <block pos:line="168" pos:column="72">{
			<comment type="block" pos:line="169" pos:column="25">/* If the last hit is within the post context,
			 * we need to show this line.
			 */</comment>
			<expr_stmt><expr><call><name pos:line="172" pos:column="25">show_line<pos:position pos:line="172" pos:column="34"/></name><argument_list pos:line="172" pos:column="34">(<argument><expr><name pos:line="172" pos:column="35">opt<pos:position pos:line="172" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="40">bol<pos:position pos:line="172" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="45">eol<pos:position pos:line="172" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="172" pos:column="50">gs<pos:position pos:line="172" pos:column="52"/></name><operator pos:line="172" pos:column="52">-&gt;<pos:position pos:line="172" pos:column="57"/></operator><name pos:line="172" pos:column="54">name<pos:position pos:line="172" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="60">lno<pos:position pos:line="172" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="172" pos:column="65">'-'<pos:position pos:line="172" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="172" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="70"/></expr_stmt>
		}<pos:position pos:line="173" pos:column="18"/></block></then></if>

	<label><name pos:line="175" pos:column="9">next_line<pos:position pos:line="175" pos:column="18"/></name>:<pos:position pos:line="175" pos:column="19"/></label>
		<expr_stmt><expr><name pos:line="176" pos:column="17">bol<pos:position pos:line="176" pos:column="20"/></name> <operator pos:line="176" pos:column="21">=<pos:position pos:line="176" pos:column="22"/></operator> <name pos:line="176" pos:column="23">eol<pos:position pos:line="176" pos:column="26"/></name> <operator pos:line="176" pos:column="27">+<pos:position pos:line="176" pos:column="28"/></operator> <literal type="number" pos:line="176" pos:column="29">1<pos:position pos:line="176" pos:column="30"/></literal></expr>;<pos:position pos:line="176" pos:column="31"/></expr_stmt>
		<if pos:line="177" pos:column="17">if <condition pos:line="177" pos:column="20">(<expr><operator pos:line="177" pos:column="21">!<pos:position pos:line="177" pos:column="22"/></operator><name pos:line="177" pos:column="22">left<pos:position pos:line="177" pos:column="26"/></name></expr>)<pos:position pos:line="177" pos:column="27"/></condition><then pos:line="177" pos:column="27">
			<block type="pseudo"><break pos:line="178" pos:column="25">break;<pos:position pos:line="178" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="179" pos:column="17">left<pos:position pos:line="179" pos:column="21"/></name><operator pos:line="179" pos:column="21">--<pos:position pos:line="179" pos:column="23"/></operator></expr>;<pos:position pos:line="179" pos:column="24"/></expr_stmt>
		<expr_stmt><expr><name pos:line="180" pos:column="17">lno<pos:position pos:line="180" pos:column="20"/></name><operator pos:line="180" pos:column="20">++<pos:position pos:line="180" pos:column="22"/></operator></expr>;<pos:position pos:line="180" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="181" pos:column="10"/></block></while>

	<if pos:line="183" pos:column="9">if <condition pos:line="183" pos:column="12">(<expr><name pos:line="183" pos:column="13">collect_hits<pos:position pos:line="183" pos:column="25"/></name></expr>)<pos:position pos:line="183" pos:column="26"/></condition><then pos:line="183" pos:column="26">
		<block type="pseudo"><return pos:line="184" pos:column="17">return <expr><literal type="number" pos:line="184" pos:column="24">0<pos:position pos:line="184" pos:column="25"/></literal></expr>;<pos:position pos:line="184" pos:column="26"/></return></block></then></if>

	<if pos:line="186" pos:column="9">if <condition pos:line="186" pos:column="12">(<expr><name><name pos:line="186" pos:column="13">opt<pos:position pos:line="186" pos:column="16"/></name><operator pos:line="186" pos:column="16">-&gt;<pos:position pos:line="186" pos:column="21"/></operator><name pos:line="186" pos:column="18">status_only<pos:position pos:line="186" pos:column="29"/></name></name></expr>)<pos:position pos:line="186" pos:column="30"/></condition><then pos:line="186" pos:column="30">
		<block type="pseudo"><return pos:line="187" pos:column="17">return <expr><literal type="number" pos:line="187" pos:column="24">0<pos:position pos:line="187" pos:column="25"/></literal></expr>;<pos:position pos:line="187" pos:column="26"/></return></block></then></if>
	<if pos:line="188" pos:column="9">if <condition pos:line="188" pos:column="12">(<expr><name><name pos:line="188" pos:column="13">opt<pos:position pos:line="188" pos:column="16"/></name><operator pos:line="188" pos:column="16">-&gt;<pos:position pos:line="188" pos:column="21"/></operator><name pos:line="188" pos:column="18">unmatch_name_only<pos:position pos:line="188" pos:column="35"/></name></name></expr>)<pos:position pos:line="188" pos:column="36"/></condition><then pos:line="188" pos:column="36"> <block pos:line="188" pos:column="37">{
		<comment type="block" pos:line="189" pos:column="17">/* We did not see any hit, so we want to show this */</comment>
		<expr_stmt><expr><call><name pos:line="190" pos:column="17">show_name<pos:position pos:line="190" pos:column="26"/></name><argument_list pos:line="190" pos:column="26">(<argument><expr><name pos:line="190" pos:column="27">opt<pos:position pos:line="190" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="32">gs<pos:position pos:line="190" pos:column="34"/></name><operator pos:line="190" pos:column="34">-&gt;<pos:position pos:line="190" pos:column="39"/></operator><name pos:line="190" pos:column="36">name<pos:position pos:line="190" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="190" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="42"/></expr_stmt>
		<return pos:line="191" pos:column="17">return <expr><literal type="number" pos:line="191" pos:column="24">1<pos:position pos:line="191" pos:column="25"/></literal></expr>;<pos:position pos:line="191" pos:column="26"/></return>
	}<pos:position pos:line="192" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="194" pos:column="9">xdiff_clear_find_func<pos:position pos:line="194" pos:column="30"/></name><argument_list pos:line="194" pos:column="30">(<argument><expr><operator pos:line="194" pos:column="31">&amp;<pos:position pos:line="194" pos:column="36"/></operator><name pos:line="194" pos:column="32">xecfg<pos:position pos:line="194" pos:column="37"/></name></expr></argument>)<pos:position pos:line="194" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="195" pos:column="9">opt<pos:position pos:line="195" pos:column="12"/></name><operator pos:line="195" pos:column="12">-&gt;<pos:position pos:line="195" pos:column="17"/></operator><name pos:line="195" pos:column="14">priv<pos:position pos:line="195" pos:column="18"/></name></name> <operator pos:line="195" pos:column="19">=<pos:position pos:line="195" pos:column="20"/></operator> <name pos:line="195" pos:column="21">NULL<pos:position pos:line="195" pos:column="25"/></name></expr>;<pos:position pos:line="195" pos:column="26"/></expr_stmt>

	<comment type="block" pos:line="197" pos:column="9">/* NEEDSWORK:
	 * The real "grep -c foo *.c" gives many "bar.c:0" lines,
	 * which feels mostly useless but sometimes useful.  Maybe
	 * make it another option?  For now suppress them.
	 */</comment>
	<if pos:line="202" pos:column="9">if <condition pos:line="202" pos:column="12">(<expr><name><name pos:line="202" pos:column="13">opt<pos:position pos:line="202" pos:column="16"/></name><operator pos:line="202" pos:column="16">-&gt;<pos:position pos:line="202" pos:column="21"/></operator><name pos:line="202" pos:column="18">count<pos:position pos:line="202" pos:column="23"/></name></name> <operator pos:line="202" pos:column="24">&amp;&amp;<pos:position pos:line="202" pos:column="34"/></operator> <name pos:line="202" pos:column="27">count<pos:position pos:line="202" pos:column="32"/></name></expr>)<pos:position pos:line="202" pos:column="33"/></condition><then pos:line="202" pos:column="33"> <block pos:line="202" pos:column="34">{
		<decl_stmt><decl><type><name pos:line="203" pos:column="17">char<pos:position pos:line="203" pos:column="21"/></name></type> <name><name pos:line="203" pos:column="22">buf<pos:position pos:line="203" pos:column="25"/></name><index pos:line="203" pos:column="25">[<expr><literal type="number" pos:line="203" pos:column="26">32<pos:position pos:line="203" pos:column="28"/></literal></expr>]<pos:position pos:line="203" pos:column="29"/></index></name></decl>;<pos:position pos:line="203" pos:column="30"/></decl_stmt>
		<if pos:line="204" pos:column="17">if <condition pos:line="204" pos:column="20">(<expr><name><name pos:line="204" pos:column="21">opt<pos:position pos:line="204" pos:column="24"/></name><operator pos:line="204" pos:column="24">-&gt;<pos:position pos:line="204" pos:column="29"/></operator><name pos:line="204" pos:column="26">pathname<pos:position pos:line="204" pos:column="34"/></name></name></expr>)<pos:position pos:line="204" pos:column="35"/></condition><then pos:line="204" pos:column="35"> <block pos:line="204" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="205" pos:column="25">output_color<pos:position pos:line="205" pos:column="37"/></name><argument_list pos:line="205" pos:column="37">(<argument><expr><name pos:line="205" pos:column="38">opt<pos:position pos:line="205" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="205" pos:column="43">gs<pos:position pos:line="205" pos:column="45"/></name><operator pos:line="205" pos:column="45">-&gt;<pos:position pos:line="205" pos:column="50"/></operator><name pos:line="205" pos:column="47">name<pos:position pos:line="205" pos:column="51"/></name></name></expr></argument>, <argument><expr><call><name pos:line="205" pos:column="53">strlen<pos:position pos:line="205" pos:column="59"/></name><argument_list pos:line="205" pos:column="59">(<argument><expr><name><name pos:line="205" pos:column="60">gs<pos:position pos:line="205" pos:column="62"/></name><operator pos:line="205" pos:column="62">-&gt;<pos:position pos:line="205" pos:column="67"/></operator><name pos:line="205" pos:column="64">name<pos:position pos:line="205" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="205" pos:column="69"/></argument_list></call></expr></argument>,
				     <argument><expr><name><name pos:line="206" pos:column="38">opt<pos:position pos:line="206" pos:column="41"/></name><operator pos:line="206" pos:column="41">-&gt;<pos:position pos:line="206" pos:column="46"/></operator><name pos:line="206" pos:column="43">color_filename<pos:position pos:line="206" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="206" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="207" pos:column="25">output_sep<pos:position pos:line="207" pos:column="35"/></name><argument_list pos:line="207" pos:column="35">(<argument><expr><name pos:line="207" pos:column="36">opt<pos:position pos:line="207" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="207" pos:column="41">':'<pos:position pos:line="207" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="207" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="208" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="209" pos:column="17">snprintf<pos:position pos:line="209" pos:column="25"/></name><argument_list pos:line="209" pos:column="25">(<argument><expr><name pos:line="209" pos:column="26">buf<pos:position pos:line="209" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="209" pos:column="31">sizeof<argument_list pos:line="209" pos:column="37">(<argument><expr><name pos:line="209" pos:column="38">buf<pos:position pos:line="209" pos:column="41"/></name></expr></argument>)<pos:position pos:line="209" pos:column="42"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="209" pos:column="44">"%u\n"<pos:position pos:line="209" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="209" pos:column="52">count<pos:position pos:line="209" pos:column="57"/></name></expr></argument>)<pos:position pos:line="209" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="210" pos:column="17">opt<pos:position pos:line="210" pos:column="20"/></name><operator pos:line="210" pos:column="20">-&gt;<pos:position pos:line="210" pos:column="25"/></operator><name pos:line="210" pos:column="22">output<pos:position pos:line="210" pos:column="28"/></name></name><argument_list pos:line="210" pos:column="28">(<argument><expr><name pos:line="210" pos:column="29">opt<pos:position pos:line="210" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="210" pos:column="34">buf<pos:position pos:line="210" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="210" pos:column="39">strlen<pos:position pos:line="210" pos:column="45"/></name><argument_list pos:line="210" pos:column="45">(<argument><expr><name pos:line="210" pos:column="46">buf<pos:position pos:line="210" pos:column="49"/></name></expr></argument>)<pos:position pos:line="210" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="210" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="52"/></expr_stmt>
		<return pos:line="211" pos:column="17">return <expr><literal type="number" pos:line="211" pos:column="24">1<pos:position pos:line="211" pos:column="25"/></literal></expr>;<pos:position pos:line="211" pos:column="26"/></return>
	}<pos:position pos:line="212" pos:column="10"/></block></then></if>
	<return pos:line="213" pos:column="9">return <expr><operator pos:line="213" pos:column="16">!<pos:position pos:line="213" pos:column="17"/></operator><operator pos:line="213" pos:column="17">!<pos:position pos:line="213" pos:column="18"/></operator><name pos:line="213" pos:column="18">last_hit<pos:position pos:line="213" pos:column="26"/></name></expr>;<pos:position pos:line="213" pos:column="27"/></return>
}<pos:position pos:line="214" pos:column="2"/></block></function></unit>
