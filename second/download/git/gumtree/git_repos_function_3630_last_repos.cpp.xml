<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3630_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">register_ref<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">refname<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name><name pos:line="1" pos:column="52">struct<pos:position pos:line="1" pos:column="58"/></name> <name pos:line="1" pos:column="59">object_id<pos:position pos:line="1" pos:column="68"/></name></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">oid<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="2" pos:column="25">int<pos:position pos:line="2" pos:column="28"/></name></type> <name pos:line="2" pos:column="29">flags<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">void<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">cb_data<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">good_prefix<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><name pos:line="4" pos:column="37">STRBUF_INIT<pos:position pos:line="4" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="5" pos:column="9">strbuf_addstr<pos:position pos:line="5" pos:column="22"/></name><argument_list pos:line="5" pos:column="22">(<argument><expr><operator pos:line="5" pos:column="23">&amp;<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="24">good_prefix<pos:position pos:line="5" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="37">term_good<pos:position pos:line="5" pos:column="46"/></name></expr></argument>)<pos:position pos:line="5" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="6" pos:column="9">strbuf_addstr<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><operator pos:line="6" pos:column="23">&amp;<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="24">good_prefix<pos:position pos:line="6" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="37">"-"<pos:position pos:line="6" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="42"/></expr_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><call><name pos:line="8" pos:column="14">strcmp<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">refname<pos:position pos:line="8" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="30">term_bad<pos:position pos:line="8" pos:column="38"/></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="40"/></condition><then pos:line="8" pos:column="40"> <block pos:line="8" pos:column="41">{
		<expr_stmt><expr><name pos:line="9" pos:column="17">current_bad_oid<pos:position pos:line="9" pos:column="32"/></name> <operator pos:line="9" pos:column="33">=<pos:position pos:line="9" pos:column="34"/></operator> <call><name pos:line="9" pos:column="35">xmalloc<pos:position pos:line="9" pos:column="42"/></name><argument_list pos:line="9" pos:column="42">(<argument><expr><sizeof pos:line="9" pos:column="43">sizeof<argument_list pos:line="9" pos:column="49">(<argument><expr><operator pos:line="9" pos:column="50">*<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="51">current_bad_oid<pos:position pos:line="9" pos:column="66"/></name></expr></argument>)<pos:position pos:line="9" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">oidcpy<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">current_bad_oid<pos:position pos:line="10" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="41">oid<pos:position pos:line="10" pos:column="44"/></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then> <elseif pos:line="11" pos:column="11">else <if pos:line="11" pos:column="16">if <condition pos:line="11" pos:column="19">(<expr><call><name pos:line="11" pos:column="20">starts_with<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">refname<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="41">good_prefix<pos:position pos:line="11" pos:column="52"/></name><operator pos:line="11" pos:column="52">.<pos:position pos:line="11" pos:column="53"/></operator><name pos:line="11" pos:column="53">buf<pos:position pos:line="11" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="58"/></condition><then pos:line="11" pos:column="58"> <block pos:line="11" pos:column="59">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">oid_array_append<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><operator pos:line="12" pos:column="34">&amp;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="35">good_revs<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="46">oid<pos:position pos:line="12" pos:column="49"/></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if></elseif> <elseif pos:line="13" pos:column="11">else <if pos:line="13" pos:column="16">if <condition pos:line="13" pos:column="19">(<expr><call><name pos:line="13" pos:column="20">starts_with<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">refname<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="41">"skip-"<pos:position pos:line="13" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="50"/></condition><then pos:line="13" pos:column="50"> <block pos:line="13" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">oid_array_append<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">(<argument><expr><operator pos:line="14" pos:column="34">&amp;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="35">skipped_revs<pos:position pos:line="14" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="49">oid<pos:position pos:line="14" pos:column="52"/></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">strbuf_release<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><operator pos:line="17" pos:column="24">&amp;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="25">good_prefix<pos:position pos:line="17" pos:column="36"/></name></expr></argument>)<pos:position pos:line="17" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="38"/></expr_stmt>

	<return pos:line="19" pos:column="9">return <expr><literal type="number" pos:line="19" pos:column="16">0<pos:position pos:line="19" pos:column="17"/></literal></expr>;<pos:position pos:line="19" pos:column="18"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
