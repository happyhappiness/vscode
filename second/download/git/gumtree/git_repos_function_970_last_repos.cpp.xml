<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_970_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sane_execvp<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">file<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier> <specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier></type> <name><name pos:line="1" pos:column="48">argv<pos:position pos:line="1" pos:column="52"/></name><index pos:line="1" pos:column="52">[]<pos:position pos:line="1" pos:column="54"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><call><name pos:line="3" pos:column="14">execvp<pos:position pos:line="3" pos:column="20"/></name><argument_list pos:line="3" pos:column="20">(<argument><expr><name pos:line="3" pos:column="21">file<pos:position pos:line="3" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="27">argv<pos:position pos:line="3" pos:column="31"/></name></expr></argument>)<pos:position pos:line="3" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="33"/></condition><then pos:line="3" pos:column="33">
		<block type="pseudo"><return pos:line="4" pos:column="17">return <expr><literal type="number" pos:line="4" pos:column="24">0<pos:position pos:line="4" pos:column="25"/></literal></expr>;<pos:position pos:line="4" pos:column="26"/></return></block></then></if> <comment type="block" pos:line="4" pos:column="27">/* cannot happen ;-) */</comment>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * When a command can't be found because one of the directories
	 * listed in $PATH is unsearchable, execvp reports EACCES, but
	 * careful usability testing (read: analysis of occasional bug
	 * reports) reveals that "No such file or directory" is more
	 * intuitive.
	 *
	 * We avoid commands with "/", because execvp will not do $PATH
	 * lookups in that case.
	 *
	 * The reassignment of EACCES to errno looks like a no-op below,
	 * but we need to protect against exists_in_PATH overwriting errno.
	 */</comment>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">errno<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">==<pos:position pos:line="19" pos:column="21"/></operator> <name pos:line="19" pos:column="22">EACCES<pos:position pos:line="19" pos:column="28"/></name> <operator pos:line="19" pos:column="29">&amp;&amp;<pos:position pos:line="19" pos:column="39"/></operator> <operator pos:line="19" pos:column="32">!<pos:position pos:line="19" pos:column="33"/></operator><call><name pos:line="19" pos:column="33">strchr<pos:position pos:line="19" pos:column="39"/></name><argument_list pos:line="19" pos:column="39">(<argument><expr><name pos:line="19" pos:column="40">file<pos:position pos:line="19" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="46">'/'<pos:position pos:line="19" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="51"/></condition><then pos:line="19" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="17">errno<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <ternary><condition><expr><call><name pos:line="20" pos:column="25">exists_in_PATH<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">file<pos:position pos:line="20" pos:column="44"/></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr> ?<pos:position pos:line="20" pos:column="47"/></condition><then pos:line="20" pos:column="47"> <expr><name pos:line="20" pos:column="48">EACCES<pos:position pos:line="20" pos:column="54"/></name></expr> <pos:position pos:line="20" pos:column="55"/></then><else pos:line="20" pos:column="55">: <expr><name pos:line="20" pos:column="57">ENOENT<pos:position pos:line="20" pos:column="63"/></name></expr></else></ternary></expr>;<pos:position pos:line="20" pos:column="64"/></expr_stmt></block></then>
	<elseif pos:line="21" pos:column="9">else <if pos:line="21" pos:column="14">if <condition pos:line="21" pos:column="17">(<expr><name pos:line="21" pos:column="18">errno<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">==<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="27">ENOTDIR<pos:position pos:line="21" pos:column="34"/></name> <operator pos:line="21" pos:column="35">&amp;&amp;<pos:position pos:line="21" pos:column="45"/></operator> <operator pos:line="21" pos:column="38">!<pos:position pos:line="21" pos:column="39"/></operator><call><name pos:line="21" pos:column="39">strchr<pos:position pos:line="21" pos:column="45"/></name><argument_list pos:line="21" pos:column="45">(<argument><expr><name pos:line="21" pos:column="46">file<pos:position pos:line="21" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="21" pos:column="52">'/'<pos:position pos:line="21" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="57"/></condition><then pos:line="21" pos:column="57">
		<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="17">errno<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">ENOENT<pos:position pos:line="22" pos:column="31"/></name></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt></block></then></if></elseif></if>
	<return pos:line="23" pos:column="9">return <expr><operator pos:line="23" pos:column="16">-<pos:position pos:line="23" pos:column="17"/></operator><literal type="number" pos:line="23" pos:column="17">1<pos:position pos:line="23" pos:column="18"/></literal></expr>;<pos:position pos:line="23" pos:column="19"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
