<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1680_git-2.7.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">append_msg_id<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">strbuf<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">sb<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">msg_id<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<for pos:line="3" pos:column="9">for <control pos:line="3" pos:column="13">(<init pos:line="3" pos:column="14">;<pos:position pos:line="3" pos:column="15"/></init><condition pos:line="3" pos:column="15">;<pos:position pos:line="3" pos:column="16"/></condition><incr/>)<pos:position pos:line="3" pos:column="17"/></control> <block pos:line="3" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="4" pos:column="17">char<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">c<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><operator pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></operator><operator pos:line="4" pos:column="27">(<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="28">msg_id<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">)<pos:position pos:line="4" pos:column="35"/></operator><operator pos:line="4" pos:column="35">++<pos:position pos:line="4" pos:column="37"/></operator></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>

		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><operator pos:line="6" pos:column="21">!<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">c<pos:position pos:line="6" pos:column="23"/></name></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24">
			<block type="pseudo"><break pos:line="7" pos:column="25">break;<pos:position pos:line="7" pos:column="31"/></break></block></then></if>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">c<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">!=<pos:position pos:line="8" pos:column="25"/></operator> <literal type="char" pos:line="8" pos:column="26">'_'<pos:position pos:line="8" pos:column="29"/></literal></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="25">strbuf_addch<pos:position pos:line="9" pos:column="37"/></name><argument_list pos:line="9" pos:column="37">(<argument><expr><name pos:line="9" pos:column="38">sb<pos:position pos:line="9" pos:column="40"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="42">tolower<pos:position pos:line="9" pos:column="49"/></name><argument_list pos:line="9" pos:column="49">(<argument><expr><name pos:line="9" pos:column="50">c<pos:position pos:line="9" pos:column="51"/></name></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="54"/></expr_stmt></block></then>
		<else pos:line="10" pos:column="17">else <block pos:line="10" pos:column="22">{
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">assert<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><operator pos:line="11" pos:column="32">*<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">msg_id<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">strbuf_addch<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">(<argument><expr><name pos:line="12" pos:column="38">sb<pos:position pos:line="12" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="42">*<pos:position pos:line="12" pos:column="43"/></operator><operator pos:line="12" pos:column="43">(<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="44">msg_id<pos:position pos:line="12" pos:column="50"/></name><operator pos:line="12" pos:column="50">)<pos:position pos:line="12" pos:column="51"/></operator><operator pos:line="12" pos:column="51">++<pos:position pos:line="12" pos:column="53"/></operator></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="13" pos:column="18"/></block></else></if>
	}<pos:position pos:line="14" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">strbuf_addstr<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">sb<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="27">": "<pos:position pos:line="16" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
