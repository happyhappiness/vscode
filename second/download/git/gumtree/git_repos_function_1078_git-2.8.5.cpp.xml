<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1078_git-2.8.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">commit<pos:position pos:line="1" pos:column="21"/></name></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">get_revision_internal<pos:position pos:line="1" pos:column="44"/></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">rev_info<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">revs<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">commit<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">c<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name pos:line="3" pos:column="28">NULL<pos:position pos:line="3" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">commit_list<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">l<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">revs<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">boundary<pos:position pos:line="6" pos:column="27"/></name></name> <operator pos:line="6" pos:column="28">==<pos:position pos:line="6" pos:column="30"/></operator> <literal type="number" pos:line="6" pos:column="31">2<pos:position pos:line="6" pos:column="32"/></literal></expr>)<pos:position pos:line="6" pos:column="33"/></condition><then pos:line="6" pos:column="33"> <block pos:line="6" pos:column="34">{
		<comment type="block" pos:line="7" pos:column="17">/*
		 * All of the normal commits have already been returned,
		 * and we are now returning boundary commits.
		 * create_boundary_commit_list() has populated
		 * revs-&gt;commits with the remaining commits to return.
		 */</comment>
		<expr_stmt><expr><name pos:line="13" pos:column="17">c<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <call><name pos:line="13" pos:column="21">pop_commit<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><operator pos:line="13" pos:column="32">&amp;<pos:position pos:line="13" pos:column="37"/></operator><name><name pos:line="13" pos:column="33">revs<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">-&gt;<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="39">commits<pos:position pos:line="13" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">c<pos:position pos:line="14" pos:column="22"/></name></expr>)<pos:position pos:line="14" pos:column="23"/></condition><then pos:line="14" pos:column="23">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="25">c<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">-&gt;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="28">object<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">.<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="35">flags<pos:position pos:line="15" pos:column="40"/></name></name> <operator pos:line="15" pos:column="41">|=<pos:position pos:line="15" pos:column="43"/></operator> <name pos:line="15" pos:column="44">SHOWN<pos:position pos:line="15" pos:column="49"/></name></expr>;<pos:position pos:line="15" pos:column="50"/></expr_stmt></block></then></if>
		<return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">c<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="19" pos:column="9">/*
	 * If our max_count counter has reached zero, then we are done. We
	 * don't simply return NULL because we still might need to show
	 * boundary commits. But we want to avoid calling get_revision_1, which
	 * might do a considerable amount of work finding the next commit only
	 * for us to throw it away.
	 *
	 * If it is non-zero, then either we don't have a max_count at all
	 * (-1), or it is still counting, in which case we decrement.
	 */</comment>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name><name pos:line="29" pos:column="13">revs<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">-&gt;<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="19">max_count<pos:position pos:line="29" pos:column="28"/></name></name></expr>)<pos:position pos:line="29" pos:column="29"/></condition><then pos:line="29" pos:column="29"> <block pos:line="29" pos:column="30">{
		<expr_stmt><expr><name pos:line="30" pos:column="17">c<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <call><name pos:line="30" pos:column="21">get_revision_1<pos:position pos:line="30" pos:column="35"/></name><argument_list pos:line="30" pos:column="35">(<argument><expr><name pos:line="30" pos:column="36">revs<pos:position pos:line="30" pos:column="40"/></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">c<pos:position pos:line="31" pos:column="22"/></name></expr>)<pos:position pos:line="31" pos:column="23"/></condition><then pos:line="31" pos:column="23"> <block pos:line="31" pos:column="24">{
			<while pos:line="32" pos:column="25">while <condition pos:line="32" pos:column="31">(<expr><name><name pos:line="32" pos:column="32">revs<pos:position pos:line="32" pos:column="36"/></name><operator pos:line="32" pos:column="36">-&gt;<pos:position pos:line="32" pos:column="41"/></operator><name pos:line="32" pos:column="38">skip_count<pos:position pos:line="32" pos:column="48"/></name></name> <operator pos:line="32" pos:column="49">&gt;<pos:position pos:line="32" pos:column="53"/></operator> <literal type="number" pos:line="32" pos:column="51">0<pos:position pos:line="32" pos:column="52"/></literal></expr>)<pos:position pos:line="32" pos:column="53"/></condition> <block pos:line="32" pos:column="54">{
				<expr_stmt><expr><name><name pos:line="33" pos:column="33">revs<pos:position pos:line="33" pos:column="37"/></name><operator pos:line="33" pos:column="37">-&gt;<pos:position pos:line="33" pos:column="42"/></operator><name pos:line="33" pos:column="39">skip_count<pos:position pos:line="33" pos:column="49"/></name></name><operator pos:line="33" pos:column="49">--<pos:position pos:line="33" pos:column="51"/></operator></expr>;<pos:position pos:line="33" pos:column="52"/></expr_stmt>
				<expr_stmt><expr><name pos:line="34" pos:column="33">c<pos:position pos:line="34" pos:column="34"/></name> <operator pos:line="34" pos:column="35">=<pos:position pos:line="34" pos:column="36"/></operator> <call><name pos:line="34" pos:column="37">get_revision_1<pos:position pos:line="34" pos:column="51"/></name><argument_list pos:line="34" pos:column="51">(<argument><expr><name pos:line="34" pos:column="52">revs<pos:position pos:line="34" pos:column="56"/></name></expr></argument>)<pos:position pos:line="34" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="58"/></expr_stmt>
				<if pos:line="35" pos:column="33">if <condition pos:line="35" pos:column="36">(<expr><operator pos:line="35" pos:column="37">!<pos:position pos:line="35" pos:column="38"/></operator><name pos:line="35" pos:column="38">c<pos:position pos:line="35" pos:column="39"/></name></expr>)<pos:position pos:line="35" pos:column="40"/></condition><then pos:line="35" pos:column="40">
					<block type="pseudo"><break pos:line="36" pos:column="41">break;<pos:position pos:line="36" pos:column="47"/></break></block></then></if>
			}<pos:position pos:line="37" pos:column="26"/></block></while>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>

		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name><name pos:line="40" pos:column="21">revs<pos:position pos:line="40" pos:column="25"/></name><operator pos:line="40" pos:column="25">-&gt;<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="27">max_count<pos:position pos:line="40" pos:column="36"/></name></name> <operator pos:line="40" pos:column="37">&gt;<pos:position pos:line="40" pos:column="41"/></operator> <literal type="number" pos:line="40" pos:column="39">0<pos:position pos:line="40" pos:column="40"/></literal></expr>)<pos:position pos:line="40" pos:column="41"/></condition><then pos:line="40" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="41" pos:column="25">revs<pos:position pos:line="41" pos:column="29"/></name><operator pos:line="41" pos:column="29">-&gt;<pos:position pos:line="41" pos:column="34"/></operator><name pos:line="41" pos:column="31">max_count<pos:position pos:line="41" pos:column="40"/></name></name><operator pos:line="41" pos:column="40">--<pos:position pos:line="41" pos:column="42"/></operator></expr>;<pos:position pos:line="41" pos:column="43"/></expr_stmt></block></then></if>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">c<pos:position pos:line="44" pos:column="14"/></name></expr>)<pos:position pos:line="44" pos:column="15"/></condition><then pos:line="44" pos:column="15">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="45" pos:column="17">c<pos:position pos:line="45" pos:column="18"/></name><operator pos:line="45" pos:column="18">-&gt;<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="20">object<pos:position pos:line="45" pos:column="26"/></name><operator pos:line="45" pos:column="26">.<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="27">flags<pos:position pos:line="45" pos:column="32"/></name></name> <operator pos:line="45" pos:column="33">|=<pos:position pos:line="45" pos:column="35"/></operator> <name pos:line="45" pos:column="36">SHOWN<pos:position pos:line="45" pos:column="41"/></name></expr>;<pos:position pos:line="45" pos:column="42"/></expr_stmt></block></then></if>

	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">!<pos:position pos:line="47" pos:column="14"/></operator><name><name pos:line="47" pos:column="14">revs<pos:position pos:line="47" pos:column="18"/></name><operator pos:line="47" pos:column="18">-&gt;<pos:position pos:line="47" pos:column="23"/></operator><name pos:line="47" pos:column="20">boundary<pos:position pos:line="47" pos:column="28"/></name></name></expr>)<pos:position pos:line="47" pos:column="29"/></condition><then pos:line="47" pos:column="29">
		<block type="pseudo"><return pos:line="48" pos:column="17">return <expr><name pos:line="48" pos:column="24">c<pos:position pos:line="48" pos:column="25"/></name></expr>;<pos:position pos:line="48" pos:column="26"/></return></block></then></if>

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">!<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">c<pos:position pos:line="50" pos:column="15"/></name></expr>)<pos:position pos:line="50" pos:column="16"/></condition><then pos:line="50" pos:column="16"> <block pos:line="50" pos:column="17">{
		<comment type="block" pos:line="51" pos:column="17">/*
		 * get_revision_1() runs out the commits, and
		 * we are done computing the boundaries.
		 * switch to boundary commits output mode.
		 */</comment>
		<expr_stmt><expr><name><name pos:line="56" pos:column="17">revs<pos:position pos:line="56" pos:column="21"/></name><operator pos:line="56" pos:column="21">-&gt;<pos:position pos:line="56" pos:column="26"/></operator><name pos:line="56" pos:column="23">boundary<pos:position pos:line="56" pos:column="31"/></name></name> <operator pos:line="56" pos:column="32">=<pos:position pos:line="56" pos:column="33"/></operator> <literal type="number" pos:line="56" pos:column="34">2<pos:position pos:line="56" pos:column="35"/></literal></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>

		<comment type="block" pos:line="58" pos:column="17">/*
		 * Update revs-&gt;commits to contain the list of
		 * boundary commits.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">create_boundary_commit_list<pos:position pos:line="62" pos:column="44"/></name><argument_list pos:line="62" pos:column="44">(<argument><expr><name pos:line="62" pos:column="45">revs<pos:position pos:line="62" pos:column="49"/></name></expr></argument>)<pos:position pos:line="62" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="51"/></expr_stmt>

		<return pos:line="64" pos:column="17">return <expr><call><name pos:line="64" pos:column="24">get_revision_internal<pos:position pos:line="64" pos:column="45"/></name><argument_list pos:line="64" pos:column="45">(<argument><expr><name pos:line="64" pos:column="46">revs<pos:position pos:line="64" pos:column="50"/></name></expr></argument>)<pos:position pos:line="64" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="52"/></return>
	}<pos:position pos:line="65" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="67" pos:column="9">/*
	 * boundary commits are the commits that are parents of the
	 * ones we got from get_revision_1() but they themselves are
	 * not returned from get_revision_1().  Before returning
	 * 'c', we need to mark its parents that they could be boundaries.
	 */</comment>

	<for pos:line="74" pos:column="9">for <control pos:line="74" pos:column="13">(<init><expr><name pos:line="74" pos:column="14">l<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">=<pos:position pos:line="74" pos:column="17"/></operator> <name><name pos:line="74" pos:column="18">c<pos:position pos:line="74" pos:column="19"/></name><operator pos:line="74" pos:column="19">-&gt;<pos:position pos:line="74" pos:column="24"/></operator><name pos:line="74" pos:column="21">parents<pos:position pos:line="74" pos:column="28"/></name></name></expr>;<pos:position pos:line="74" pos:column="29"/></init> <condition><expr><name pos:line="74" pos:column="30">l<pos:position pos:line="74" pos:column="31"/></name></expr>;<pos:position pos:line="74" pos:column="32"/></condition> <incr><expr><name pos:line="74" pos:column="33">l<pos:position pos:line="74" pos:column="34"/></name> <operator pos:line="74" pos:column="35">=<pos:position pos:line="74" pos:column="36"/></operator> <name><name pos:line="74" pos:column="37">l<pos:position pos:line="74" pos:column="38"/></name><operator pos:line="74" pos:column="38">-&gt;<pos:position pos:line="74" pos:column="43"/></operator><name pos:line="74" pos:column="40">next<pos:position pos:line="74" pos:column="44"/></name></name></expr></incr>)<pos:position pos:line="74" pos:column="45"/></control> <block pos:line="74" pos:column="46">{
		<decl_stmt><decl><type><name><name pos:line="75" pos:column="17">struct<pos:position pos:line="75" pos:column="23"/></name> <name pos:line="75" pos:column="24">object<pos:position pos:line="75" pos:column="30"/></name></name> <modifier pos:line="75" pos:column="31">*<pos:position pos:line="75" pos:column="32"/></modifier></type><name pos:line="75" pos:column="32">p<pos:position pos:line="75" pos:column="33"/></name></decl>;<pos:position pos:line="75" pos:column="34"/></decl_stmt>
		<expr_stmt><expr><name pos:line="76" pos:column="17">p<pos:position pos:line="76" pos:column="18"/></name> <operator pos:line="76" pos:column="19">=<pos:position pos:line="76" pos:column="20"/></operator> <operator pos:line="76" pos:column="21">&amp;<pos:position pos:line="76" pos:column="26"/></operator><operator pos:line="76" pos:column="22">(<pos:position pos:line="76" pos:column="23"/></operator><name><name pos:line="76" pos:column="23">l<pos:position pos:line="76" pos:column="24"/></name><operator pos:line="76" pos:column="24">-&gt;<pos:position pos:line="76" pos:column="29"/></operator><name pos:line="76" pos:column="26">item<pos:position pos:line="76" pos:column="30"/></name><operator pos:line="76" pos:column="30">-&gt;<pos:position pos:line="76" pos:column="35"/></operator><name pos:line="76" pos:column="32">object<pos:position pos:line="76" pos:column="38"/></name></name><operator pos:line="76" pos:column="38">)<pos:position pos:line="76" pos:column="39"/></operator></expr>;<pos:position pos:line="76" pos:column="40"/></expr_stmt>
		<if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><name><name pos:line="77" pos:column="21">p<pos:position pos:line="77" pos:column="22"/></name><operator pos:line="77" pos:column="22">-&gt;<pos:position pos:line="77" pos:column="27"/></operator><name pos:line="77" pos:column="24">flags<pos:position pos:line="77" pos:column="29"/></name></name> <operator pos:line="77" pos:column="30">&amp;<pos:position pos:line="77" pos:column="35"/></operator> <operator pos:line="77" pos:column="32">(<pos:position pos:line="77" pos:column="33"/></operator><name pos:line="77" pos:column="33">CHILD_SHOWN<pos:position pos:line="77" pos:column="44"/></name> <operator pos:line="77" pos:column="45">|<pos:position pos:line="77" pos:column="46"/></operator> <name pos:line="77" pos:column="47">SHOWN<pos:position pos:line="77" pos:column="52"/></name><operator pos:line="77" pos:column="52">)<pos:position pos:line="77" pos:column="53"/></operator></expr>)<pos:position pos:line="77" pos:column="54"/></condition><then pos:line="77" pos:column="54">
			<block type="pseudo"><continue pos:line="78" pos:column="25">continue;<pos:position pos:line="78" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name><name pos:line="79" pos:column="17">p<pos:position pos:line="79" pos:column="18"/></name><operator pos:line="79" pos:column="18">-&gt;<pos:position pos:line="79" pos:column="23"/></operator><name pos:line="79" pos:column="20">flags<pos:position pos:line="79" pos:column="25"/></name></name> <operator pos:line="79" pos:column="26">|=<pos:position pos:line="79" pos:column="28"/></operator> <name pos:line="79" pos:column="29">CHILD_SHOWN<pos:position pos:line="79" pos:column="40"/></name></expr>;<pos:position pos:line="79" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="80" pos:column="17">gc_boundary<pos:position pos:line="80" pos:column="28"/></name><argument_list pos:line="80" pos:column="28">(<argument><expr><operator pos:line="80" pos:column="29">&amp;<pos:position pos:line="80" pos:column="34"/></operator><name><name pos:line="80" pos:column="30">revs<pos:position pos:line="80" pos:column="34"/></name><operator pos:line="80" pos:column="34">-&gt;<pos:position pos:line="80" pos:column="39"/></operator><name pos:line="80" pos:column="36">boundary_commits<pos:position pos:line="80" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="81" pos:column="17">add_object_array<pos:position pos:line="81" pos:column="33"/></name><argument_list pos:line="81" pos:column="33">(<argument><expr><name pos:line="81" pos:column="34">p<pos:position pos:line="81" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="37">NULL<pos:position pos:line="81" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="43">&amp;<pos:position pos:line="81" pos:column="48"/></operator><name><name pos:line="81" pos:column="44">revs<pos:position pos:line="81" pos:column="48"/></name><operator pos:line="81" pos:column="48">-&gt;<pos:position pos:line="81" pos:column="53"/></operator><name pos:line="81" pos:column="50">boundary_commits<pos:position pos:line="81" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="68"/></expr_stmt>
	}<pos:position pos:line="82" pos:column="10"/></block></for>

	<return pos:line="84" pos:column="9">return <expr><name pos:line="84" pos:column="16">c<pos:position pos:line="84" pos:column="17"/></name></expr>;<pos:position pos:line="84" pos:column="18"/></return>
}<pos:position pos:line="85" pos:column="2"/></block></function></unit>
