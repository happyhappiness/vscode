<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5147_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">get_color<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">var<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">def_color<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><name pos:line="3" pos:column="9">get_color_slot<pos:position pos:line="3" pos:column="23"/></name> <operator pos:line="3" pos:column="24">=<pos:position pos:line="3" pos:column="25"/></operator> <name pos:line="3" pos:column="26">var<pos:position pos:line="3" pos:column="29"/></name></expr>;<pos:position pos:line="3" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="4" pos:column="9">get_color_found<pos:position pos:line="4" pos:column="24"/></name> <operator pos:line="4" pos:column="25">=<pos:position pos:line="4" pos:column="26"/></operator> <literal type="number" pos:line="4" pos:column="27">0<pos:position pos:line="4" pos:column="28"/></literal></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="5" pos:column="9">parsed_color<pos:position pos:line="5" pos:column="21"/></name><index pos:line="5" pos:column="21">[<expr><literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr>]<pos:position pos:line="5" pos:column="24"/></index></name> <operator pos:line="5" pos:column="25">=<pos:position pos:line="5" pos:column="26"/></operator> <literal type="char" pos:line="5" pos:column="27">'\0'<pos:position pos:line="5" pos:column="31"/></literal></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="6" pos:column="9">config_with_options<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><name pos:line="6" pos:column="29">git_get_color_config<pos:position pos:line="6" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="51">NULL<pos:position pos:line="6" pos:column="55"/></name></expr></argument>,
			    <argument><expr><operator pos:line="7" pos:column="29">&amp;<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="30">given_config_source<pos:position pos:line="7" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="51">&amp;<pos:position pos:line="7" pos:column="56"/></operator><name pos:line="7" pos:column="52">config_options<pos:position pos:line="7" pos:column="66"/></name></expr></argument>)<pos:position pos:line="7" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="68"/></expr_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">get_color_found<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">&amp;&amp;<pos:position pos:line="9" pos:column="40"/></operator> <name pos:line="9" pos:column="33">def_color<pos:position pos:line="9" pos:column="42"/></name></expr>)<pos:position pos:line="9" pos:column="43"/></condition><then pos:line="9" pos:column="43"> <block pos:line="9" pos:column="44">{
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">color_parse<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name pos:line="10" pos:column="33">def_color<pos:position pos:line="10" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="44">parsed_color<pos:position pos:line="10" pos:column="56"/></name></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call> <operator pos:line="10" pos:column="58">&lt;<pos:position pos:line="10" pos:column="62"/></operator> <literal type="number" pos:line="10" pos:column="60">0<pos:position pos:line="10" pos:column="61"/></literal></expr>)<pos:position pos:line="10" pos:column="62"/></condition><then pos:line="10" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="25">die<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><call><name pos:line="11" pos:column="29">_<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><literal type="string" pos:line="11" pos:column="31">"unable to parse default color value"<pos:position pos:line="11" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="71"/></expr_stmt></block></then></if>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">fputs<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">parsed_color<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="29">stdout<pos:position pos:line="14" pos:column="35"/></name></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
