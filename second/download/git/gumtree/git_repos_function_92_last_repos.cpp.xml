<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_92_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">is_rfc2047_special<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">ch<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="40">enum<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">rfc2047_type<pos:position pos:line="1" pos:column="57"/></name></name></type> <name pos:line="1" pos:column="58">type<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * rfc2047, section 4.2:
	 *
	 *    8-bit values which correspond to printable ASCII characters other
	 *    than "=", "?", and "_" (underscore), MAY be represented as those
	 *    characters.  (But see section 5 for restrictions.)  In
	 *    particular, SPACE and TAB MUST NOT be represented as themselves
	 *    within encoded words.
	 */</comment>

	<comment type="block" pos:line="13" pos:column="9">/*
	 * rule out non-ASCII characters and non-printable characters (the
	 * non-ASCII check should be redundant as isprint() is not localized
	 * and only knows about ASCII, but be defensive about that)
	 */</comment>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">non_ascii<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">ch<pos:position pos:line="18" pos:column="25"/></name></expr></argument>)<pos:position pos:line="18" pos:column="26"/></argument_list></call> <operator pos:line="18" pos:column="27">||<pos:position pos:line="18" pos:column="29"/></operator> <operator pos:line="18" pos:column="30">!<pos:position pos:line="18" pos:column="31"/></operator><call><name pos:line="18" pos:column="31">isprint<pos:position pos:line="18" pos:column="38"/></name><argument_list pos:line="18" pos:column="38">(<argument><expr><name pos:line="18" pos:column="39">ch<pos:position pos:line="18" pos:column="41"/></name></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">1<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="21" pos:column="9">/*
	 * rule out special printable characters (' ' should be the only
	 * whitespace character considered printable, but be defensive and use
	 * isspace())
	 */</comment>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name pos:line="26" pos:column="13">isspace<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">ch<pos:position pos:line="26" pos:column="23"/></name></expr></argument>)<pos:position pos:line="26" pos:column="24"/></argument_list></call> <operator pos:line="26" pos:column="25">||<pos:position pos:line="26" pos:column="27"/></operator> <name pos:line="26" pos:column="28">ch<pos:position pos:line="26" pos:column="30"/></name> <operator pos:line="26" pos:column="31">==<pos:position pos:line="26" pos:column="33"/></operator> <literal type="char" pos:line="26" pos:column="34">'='<pos:position pos:line="26" pos:column="37"/></literal> <operator pos:line="26" pos:column="38">||<pos:position pos:line="26" pos:column="40"/></operator> <name pos:line="26" pos:column="41">ch<pos:position pos:line="26" pos:column="43"/></name> <operator pos:line="26" pos:column="44">==<pos:position pos:line="26" pos:column="46"/></operator> <literal type="char" pos:line="26" pos:column="47">'?'<pos:position pos:line="26" pos:column="50"/></literal> <operator pos:line="26" pos:column="51">||<pos:position pos:line="26" pos:column="53"/></operator> <name pos:line="26" pos:column="54">ch<pos:position pos:line="26" pos:column="56"/></name> <operator pos:line="26" pos:column="57">==<pos:position pos:line="26" pos:column="59"/></operator> <literal type="char" pos:line="26" pos:column="60">'_'<pos:position pos:line="26" pos:column="63"/></literal></expr>)<pos:position pos:line="26" pos:column="64"/></condition><then pos:line="26" pos:column="64">
		<block type="pseudo"><return pos:line="27" pos:column="17">return <expr><literal type="number" pos:line="27" pos:column="24">1<pos:position pos:line="27" pos:column="25"/></literal></expr>;<pos:position pos:line="27" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="29" pos:column="9">/*
	 * rfc2047, section 5.3:
	 *
	 *    As a replacement for a 'word' entity within a 'phrase', for example,
	 *    one that precedes an address in a From, To, or Cc header.  The ABNF
	 *    definition for 'phrase' from RFC 822 thus becomes:
	 *
	 *    phrase = 1*( encoded-word / word )
	 *
	 *    In this case the set of characters that may be used in a "Q"-encoded
	 *    'encoded-word' is restricted to: &lt;upper and lower case ASCII
	 *    letters, decimal digits, "!", "*", "+", "-", "/", "=", and "_"
	 *    (underscore, ASCII 95.)&gt;.  An 'encoded-word' that appears within a
	 *    'phrase' MUST be separated from any adjacent 'word', 'text' or
	 *    'special' by 'linear-white-space'.
	 */</comment>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">type<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">!=<pos:position pos:line="46" pos:column="20"/></operator> <name pos:line="46" pos:column="21">RFC2047_ADDRESS<pos:position pos:line="46" pos:column="36"/></name></expr>)<pos:position pos:line="46" pos:column="37"/></condition><then pos:line="46" pos:column="37">
		<block type="pseudo"><return pos:line="47" pos:column="17">return <expr><literal type="number" pos:line="47" pos:column="24">0<pos:position pos:line="47" pos:column="25"/></literal></expr>;<pos:position pos:line="47" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="49" pos:column="9">/* '=' and '_' are special cases and have been checked above */</comment>
	<return pos:line="50" pos:column="9">return <expr><operator pos:line="50" pos:column="16">!<pos:position pos:line="50" pos:column="17"/></operator><operator pos:line="50" pos:column="17">(<pos:position pos:line="50" pos:column="18"/></operator><call><name pos:line="50" pos:column="18">isalnum<pos:position pos:line="50" pos:column="25"/></name><argument_list pos:line="50" pos:column="25">(<argument><expr><name pos:line="50" pos:column="26">ch<pos:position pos:line="50" pos:column="28"/></name></expr></argument>)<pos:position pos:line="50" pos:column="29"/></argument_list></call> <operator pos:line="50" pos:column="30">||<pos:position pos:line="50" pos:column="32"/></operator> <name pos:line="50" pos:column="33">ch<pos:position pos:line="50" pos:column="35"/></name> <operator pos:line="50" pos:column="36">==<pos:position pos:line="50" pos:column="38"/></operator> <literal type="char" pos:line="50" pos:column="39">'!'<pos:position pos:line="50" pos:column="42"/></literal> <operator pos:line="50" pos:column="43">||<pos:position pos:line="50" pos:column="45"/></operator> <name pos:line="50" pos:column="46">ch<pos:position pos:line="50" pos:column="48"/></name> <operator pos:line="50" pos:column="49">==<pos:position pos:line="50" pos:column="51"/></operator> <literal type="char" pos:line="50" pos:column="52">'*'<pos:position pos:line="50" pos:column="55"/></literal> <operator pos:line="50" pos:column="56">||<pos:position pos:line="50" pos:column="58"/></operator> <name pos:line="50" pos:column="59">ch<pos:position pos:line="50" pos:column="61"/></name> <operator pos:line="50" pos:column="62">==<pos:position pos:line="50" pos:column="64"/></operator> <literal type="char" pos:line="50" pos:column="65">'+'<pos:position pos:line="50" pos:column="68"/></literal> <operator pos:line="50" pos:column="69">||<pos:position pos:line="50" pos:column="71"/></operator> <name pos:line="50" pos:column="72">ch<pos:position pos:line="50" pos:column="74"/></name> <operator pos:line="50" pos:column="75">==<pos:position pos:line="50" pos:column="77"/></operator> <literal type="char" pos:line="50" pos:column="78">'-'<pos:position pos:line="50" pos:column="81"/></literal> <operator pos:line="50" pos:column="82">||<pos:position pos:line="50" pos:column="84"/></operator> <name pos:line="50" pos:column="85">ch<pos:position pos:line="50" pos:column="87"/></name> <operator pos:line="50" pos:column="88">==<pos:position pos:line="50" pos:column="90"/></operator> <literal type="char" pos:line="50" pos:column="91">'/'<pos:position pos:line="50" pos:column="94"/></literal><operator pos:line="50" pos:column="94">)<pos:position pos:line="50" pos:column="95"/></operator></expr>;<pos:position pos:line="50" pos:column="96"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
