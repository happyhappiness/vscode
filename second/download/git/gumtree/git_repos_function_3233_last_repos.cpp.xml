<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3233_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">clear_ce_flags_dir<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">cache_entry<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier><modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">cache<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">int<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">nr<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="2" pos:column="31">struct<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">strbuf<pos:position pos:line="2" pos:column="44"/></name></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">prefix<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="3" pos:column="31">char<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">basename<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="4" pos:column="31">int<pos:position pos:line="4" pos:column="34"/></name></type> <name pos:line="4" pos:column="35">select_mask<pos:position pos:line="4" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="48">int<pos:position pos:line="4" pos:column="51"/></name></type> <name pos:line="4" pos:column="52">clear_mask<pos:position pos:line="4" pos:column="62"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="5" pos:column="31">struct<pos:position pos:line="5" pos:column="37"/></name> <name pos:line="5" pos:column="38">exclude_list<pos:position pos:line="5" pos:column="50"/></name></name> <modifier pos:line="5" pos:column="51">*<pos:position pos:line="5" pos:column="52"/></modifier></type><name pos:line="5" pos:column="52">el<pos:position pos:line="5" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="5" pos:column="56">int<pos:position pos:line="5" pos:column="59"/></name></type> <name pos:line="5" pos:column="60">defval<pos:position pos:line="5" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="67"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">cache_entry<pos:position pos:line="7" pos:column="27"/></name></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier><modifier pos:line="7" pos:column="29">*<pos:position pos:line="7" pos:column="30"/></modifier></type><name pos:line="7" pos:column="30">cache_end<pos:position pos:line="7" pos:column="39"/></name></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">dtype<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><name pos:line="8" pos:column="21">DT_DIR<pos:position pos:line="8" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">ret<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><call><name pos:line="9" pos:column="19">is_excluded_from_list<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">(<argument><expr><name><name pos:line="9" pos:column="41">prefix<pos:position pos:line="9" pos:column="47"/></name><operator pos:line="9" pos:column="47">-&gt;<pos:position pos:line="9" pos:column="52"/></operator><name pos:line="9" pos:column="49">buf<pos:position pos:line="9" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="54">prefix<pos:position pos:line="9" pos:column="60"/></name><operator pos:line="9" pos:column="60">-&gt;<pos:position pos:line="9" pos:column="65"/></operator><name pos:line="9" pos:column="62">len<pos:position pos:line="9" pos:column="65"/></name></name></expr></argument>,
					<argument><expr><name pos:line="10" pos:column="41">basename<pos:position pos:line="10" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="51">&amp;<pos:position pos:line="10" pos:column="56"/></operator><name pos:line="10" pos:column="52">dtype<pos:position pos:line="10" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="59">el<pos:position pos:line="10" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="63">&amp;<pos:position pos:line="10" pos:column="68"/></operator><name pos:line="10" pos:column="64">the_index<pos:position pos:line="10" pos:column="73"/></name></expr></argument>)<pos:position pos:line="10" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="75"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">rc<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">strbuf_addch<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">prefix<pos:position pos:line="13" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="30">'/'<pos:position pos:line="13" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>

	<comment type="block" pos:line="15" pos:column="9">/* If undecided, use matching result of parent dir in defval */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">ret<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">&lt;<pos:position pos:line="16" pos:column="21"/></operator> <literal type="number" pos:line="16" pos:column="19">0<pos:position pos:line="16" pos:column="20"/></literal></expr>)<pos:position pos:line="16" pos:column="21"/></condition><then pos:line="16" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">ret<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">defval<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt></block></then></if>

	<for pos:line="19" pos:column="9">for <control pos:line="19" pos:column="13">(<init><expr><name pos:line="19" pos:column="14">cache_end<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="26">cache<pos:position pos:line="19" pos:column="31"/></name></expr>;<pos:position pos:line="19" pos:column="32"/></init> <condition><expr><name pos:line="19" pos:column="33">cache_end<pos:position pos:line="19" pos:column="42"/></name> <operator pos:line="19" pos:column="43">!=<pos:position pos:line="19" pos:column="45"/></operator> <name pos:line="19" pos:column="46">cache<pos:position pos:line="19" pos:column="51"/></name> <operator pos:line="19" pos:column="52">+<pos:position pos:line="19" pos:column="53"/></operator> <name pos:line="19" pos:column="54">nr<pos:position pos:line="19" pos:column="56"/></name></expr>;<pos:position pos:line="19" pos:column="57"/></condition> <incr><expr><name pos:line="19" pos:column="58">cache_end<pos:position pos:line="19" pos:column="67"/></name><operator pos:line="19" pos:column="67">++<pos:position pos:line="19" pos:column="69"/></operator></expr></incr>)<pos:position pos:line="19" pos:column="70"/></control> <block pos:line="19" pos:column="71">{
		<decl_stmt><decl><type><name><name pos:line="20" pos:column="17">struct<pos:position pos:line="20" pos:column="23"/></name> <name pos:line="20" pos:column="24">cache_entry<pos:position pos:line="20" pos:column="35"/></name></name> <modifier pos:line="20" pos:column="36">*<pos:position pos:line="20" pos:column="37"/></modifier></type><name pos:line="20" pos:column="37">ce<pos:position pos:line="20" pos:column="39"/></name> <init pos:line="20" pos:column="40">= <expr><operator pos:line="20" pos:column="42">*<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="43">cache_end<pos:position pos:line="20" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="53"/></decl_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><call><name pos:line="21" pos:column="21">strncmp<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name><name pos:line="21" pos:column="29">ce<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">-&gt;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="33">name<pos:position pos:line="21" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="39">prefix<pos:position pos:line="21" pos:column="45"/></name><operator pos:line="21" pos:column="45">-&gt;<pos:position pos:line="21" pos:column="50"/></operator><name pos:line="21" pos:column="47">buf<pos:position pos:line="21" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="52">prefix<pos:position pos:line="21" pos:column="58"/></name><operator pos:line="21" pos:column="58">-&gt;<pos:position pos:line="21" pos:column="63"/></operator><name pos:line="21" pos:column="60">len<pos:position pos:line="21" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="65"/></condition><then pos:line="21" pos:column="65">
			<block type="pseudo"><break pos:line="22" pos:column="25">break;<pos:position pos:line="22" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="23" pos:column="10"/></block></for>

	<comment type="block" pos:line="25" pos:column="9">/*
	 * TODO: check el, if there are no patterns that may conflict
	 * with ret (iow, we know in advance the incl/excl
	 * decision for the entire directory), clear flag here without
	 * calling clear_ce_flags_1(). That function will call
	 * the expensive is_excluded_from_list() on every entry.
	 */</comment>
	<expr_stmt><expr><name pos:line="32" pos:column="9">rc<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <call><name pos:line="32" pos:column="14">clear_ce_flags_1<pos:position pos:line="32" pos:column="30"/></name><argument_list pos:line="32" pos:column="30">(<argument><expr><name pos:line="32" pos:column="31">cache<pos:position pos:line="32" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="38">cache_end<pos:position pos:line="32" pos:column="47"/></name> <operator pos:line="32" pos:column="48">-<pos:position pos:line="32" pos:column="49"/></operator> <name pos:line="32" pos:column="50">cache<pos:position pos:line="32" pos:column="55"/></name></expr></argument>,
			      <argument><expr><name pos:line="33" pos:column="31">prefix<pos:position pos:line="33" pos:column="37"/></name></expr></argument>,
			      <argument><expr><name pos:line="34" pos:column="31">select_mask<pos:position pos:line="34" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="44">clear_mask<pos:position pos:line="34" pos:column="54"/></name></expr></argument>,
			      <argument><expr><name pos:line="35" pos:column="31">el<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="35">ret<pos:position pos:line="35" pos:column="38"/></name></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">strbuf_setlen<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">prefix<pos:position pos:line="36" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="31">prefix<pos:position pos:line="36" pos:column="37"/></name><operator pos:line="36" pos:column="37">-&gt;<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="39">len<pos:position pos:line="36" pos:column="42"/></name></name> <operator pos:line="36" pos:column="43">-<pos:position pos:line="36" pos:column="44"/></operator> <literal type="number" pos:line="36" pos:column="45">1<pos:position pos:line="36" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="48"/></expr_stmt>
	<return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">rc<pos:position pos:line="37" pos:column="18"/></name></expr>;<pos:position pos:line="37" pos:column="19"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
