<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2618.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">create_pack_file<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">child_process<pos:position pos:line="3" pos:column="29"/></name></name></type> <name pos:line="3" pos:column="30">pack_objects<pos:position pos:line="3" pos:column="42"/></name> <init pos:line="3" pos:column="43">= <expr><name pos:line="3" pos:column="45">CHILD_PROCESS_INIT<pos:position pos:line="3" pos:column="63"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="64"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">data<pos:position pos:line="4" pos:column="18"/></name><index pos:line="4" pos:column="18">[<expr><literal type="number" pos:line="4" pos:column="19">8193<pos:position pos:line="4" pos:column="23"/></literal></expr>]<pos:position pos:line="4" pos:column="24"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="4" pos:column="26">progress<pos:position pos:line="4" pos:column="34"/></name><index pos:line="4" pos:column="34">[<expr><literal type="number" pos:line="4" pos:column="35">128<pos:position pos:line="4" pos:column="38"/></literal></expr>]<pos:position pos:line="4" pos:column="39"/></index></name></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">abort_msg<pos:position pos:line="5" pos:column="23"/></name><index pos:line="5" pos:column="23">[]<pos:position pos:line="5" pos:column="25"/></index></name> <init pos:line="5" pos:column="26">= <expr><literal type="string" pos:line="5" pos:column="28">"aborting due to possible repository "<pos:position pos:line="5" pos:column="66"/></literal>
		<literal type="string" pos:line="6" pos:column="17">"corruption on the remote side."<pos:position pos:line="6" pos:column="49"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">buffered<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><operator pos:line="7" pos:column="24">-<pos:position pos:line="7" pos:column="25"/></operator><literal type="number" pos:line="7" pos:column="25">1<pos:position pos:line="7" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">ssize_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">sz<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">char<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name><name pos:line="9" pos:column="21">argv<pos:position pos:line="9" pos:column="25"/></name><index pos:line="9" pos:column="25">[<expr><literal type="number" pos:line="9" pos:column="26">13<pos:position pos:line="9" pos:column="28"/></literal></expr>]<pos:position pos:line="9" pos:column="29"/></index></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">i<pos:position pos:line="10" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="16">arg<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><literal type="number" pos:line="10" pos:column="22">0<pos:position pos:line="10" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">FILE<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">pipe_fd<pos:position pos:line="11" pos:column="22"/></name></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">shallow_nr<pos:position pos:line="13" pos:column="23"/></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24"> <block pos:line="13" pos:column="25">{
		<expr_stmt><expr><name><name pos:line="14" pos:column="17">argv<pos:position pos:line="14" pos:column="21"/></name><index pos:line="14" pos:column="21">[<expr><name pos:line="14" pos:column="22">arg<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">++<pos:position pos:line="14" pos:column="27"/></operator></expr>]<pos:position pos:line="14" pos:column="28"/></index></name> <operator pos:line="14" pos:column="29">=<pos:position pos:line="14" pos:column="30"/></operator> <literal type="string" pos:line="14" pos:column="31">"--shallow-file"<pos:position pos:line="14" pos:column="47"/></literal></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="15" pos:column="17">argv<pos:position pos:line="15" pos:column="21"/></name><index pos:line="15" pos:column="21">[<expr><name pos:line="15" pos:column="22">arg<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">++<pos:position pos:line="15" pos:column="27"/></operator></expr>]<pos:position pos:line="15" pos:column="28"/></index></name> <operator pos:line="15" pos:column="29">=<pos:position pos:line="15" pos:column="30"/></operator> <literal type="string" pos:line="15" pos:column="31">""<pos:position pos:line="15" pos:column="33"/></literal></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">argv<pos:position pos:line="17" pos:column="13"/></name><index pos:line="17" pos:column="13">[<expr><name pos:line="17" pos:column="14">arg<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">++<pos:position pos:line="17" pos:column="19"/></operator></expr>]<pos:position pos:line="17" pos:column="20"/></index></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <literal type="string" pos:line="17" pos:column="23">"pack-objects"<pos:position pos:line="17" pos:column="37"/></literal></expr>;<pos:position pos:line="17" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">argv<pos:position pos:line="18" pos:column="13"/></name><index pos:line="18" pos:column="13">[<expr><name pos:line="18" pos:column="14">arg<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">++<pos:position pos:line="18" pos:column="19"/></operator></expr>]<pos:position pos:line="18" pos:column="20"/></index></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <literal type="string" pos:line="18" pos:column="23">"--revs"<pos:position pos:line="18" pos:column="31"/></literal></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">use_thin_pack<pos:position pos:line="19" pos:column="26"/></name></expr>)<pos:position pos:line="19" pos:column="27"/></condition><then pos:line="19" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="20" pos:column="17">argv<pos:position pos:line="20" pos:column="21"/></name><index pos:line="20" pos:column="21">[<expr><name pos:line="20" pos:column="22">arg<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">++<pos:position pos:line="20" pos:column="27"/></operator></expr>]<pos:position pos:line="20" pos:column="28"/></index></name> <operator pos:line="20" pos:column="29">=<pos:position pos:line="20" pos:column="30"/></operator> <literal type="string" pos:line="20" pos:column="31">"--thin"<pos:position pos:line="20" pos:column="39"/></literal></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="22" pos:column="9">argv<pos:position pos:line="22" pos:column="13"/></name><index pos:line="22" pos:column="13">[<expr><name pos:line="22" pos:column="14">arg<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">++<pos:position pos:line="22" pos:column="19"/></operator></expr>]<pos:position pos:line="22" pos:column="20"/></index></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <literal type="string" pos:line="22" pos:column="23">"--stdout"<pos:position pos:line="22" pos:column="33"/></literal></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">shallow_nr<pos:position pos:line="23" pos:column="23"/></name></expr>)<pos:position pos:line="23" pos:column="24"/></condition><then pos:line="23" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="24" pos:column="17">argv<pos:position pos:line="24" pos:column="21"/></name><index pos:line="24" pos:column="21">[<expr><name pos:line="24" pos:column="22">arg<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">++<pos:position pos:line="24" pos:column="27"/></operator></expr>]<pos:position pos:line="24" pos:column="28"/></index></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <literal type="string" pos:line="24" pos:column="31">"--shallow"<pos:position pos:line="24" pos:column="42"/></literal></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt></block></then></if>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">no_progress<pos:position pos:line="25" pos:column="25"/></name></expr>)<pos:position pos:line="25" pos:column="26"/></condition><then pos:line="25" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="17">argv<pos:position pos:line="26" pos:column="21"/></name><index pos:line="26" pos:column="21">[<expr><name pos:line="26" pos:column="22">arg<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">++<pos:position pos:line="26" pos:column="27"/></operator></expr>]<pos:position pos:line="26" pos:column="28"/></index></name> <operator pos:line="26" pos:column="29">=<pos:position pos:line="26" pos:column="30"/></operator> <literal type="string" pos:line="26" pos:column="31">"--progress"<pos:position pos:line="26" pos:column="43"/></literal></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt></block></then></if>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">use_ofs_delta<pos:position pos:line="27" pos:column="26"/></name></expr>)<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="28" pos:column="17">argv<pos:position pos:line="28" pos:column="21"/></name><index pos:line="28" pos:column="21">[<expr><name pos:line="28" pos:column="22">arg<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">++<pos:position pos:line="28" pos:column="27"/></operator></expr>]<pos:position pos:line="28" pos:column="28"/></index></name> <operator pos:line="28" pos:column="29">=<pos:position pos:line="28" pos:column="30"/></operator> <literal type="string" pos:line="28" pos:column="31">"--delta-base-offset"<pos:position pos:line="28" pos:column="52"/></literal></expr>;<pos:position pos:line="28" pos:column="53"/></expr_stmt></block></then></if>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">use_include_tag<pos:position pos:line="29" pos:column="28"/></name></expr>)<pos:position pos:line="29" pos:column="29"/></condition><then pos:line="29" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="30" pos:column="17">argv<pos:position pos:line="30" pos:column="21"/></name><index pos:line="30" pos:column="21">[<expr><name pos:line="30" pos:column="22">arg<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">++<pos:position pos:line="30" pos:column="27"/></operator></expr>]<pos:position pos:line="30" pos:column="28"/></index></name> <operator pos:line="30" pos:column="29">=<pos:position pos:line="30" pos:column="30"/></operator> <literal type="string" pos:line="30" pos:column="31">"--include-tag"<pos:position pos:line="30" pos:column="46"/></literal></expr>;<pos:position pos:line="30" pos:column="47"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="31" pos:column="9">argv<pos:position pos:line="31" pos:column="13"/></name><index pos:line="31" pos:column="13">[<expr><name pos:line="31" pos:column="14">arg<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">++<pos:position pos:line="31" pos:column="19"/></operator></expr>]<pos:position pos:line="31" pos:column="20"/></index></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <name pos:line="31" pos:column="23">NULL<pos:position pos:line="31" pos:column="27"/></name></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="33" pos:column="9">pack_objects<pos:position pos:line="33" pos:column="21"/></name><operator pos:line="33" pos:column="21">.<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">in<pos:position pos:line="33" pos:column="24"/></name></name> <operator pos:line="33" pos:column="25">=<pos:position pos:line="33" pos:column="26"/></operator> <operator pos:line="33" pos:column="27">-<pos:position pos:line="33" pos:column="28"/></operator><literal type="number" pos:line="33" pos:column="28">1<pos:position pos:line="33" pos:column="29"/></literal></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="34" pos:column="9">pack_objects<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">.<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">out<pos:position pos:line="34" pos:column="25"/></name></name> <operator pos:line="34" pos:column="26">=<pos:position pos:line="34" pos:column="27"/></operator> <operator pos:line="34" pos:column="28">-<pos:position pos:line="34" pos:column="29"/></operator><literal type="number" pos:line="34" pos:column="29">1<pos:position pos:line="34" pos:column="30"/></literal></expr>;<pos:position pos:line="34" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="35" pos:column="9">pack_objects<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">.<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">err<pos:position pos:line="35" pos:column="25"/></name></name> <operator pos:line="35" pos:column="26">=<pos:position pos:line="35" pos:column="27"/></operator> <operator pos:line="35" pos:column="28">-<pos:position pos:line="35" pos:column="29"/></operator><literal type="number" pos:line="35" pos:column="29">1<pos:position pos:line="35" pos:column="30"/></literal></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="36" pos:column="9">pack_objects<pos:position pos:line="36" pos:column="21"/></name><operator pos:line="36" pos:column="21">.<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="22">git_cmd<pos:position pos:line="36" pos:column="29"/></name></name> <operator pos:line="36" pos:column="30">=<pos:position pos:line="36" pos:column="31"/></operator> <literal type="number" pos:line="36" pos:column="32">1<pos:position pos:line="36" pos:column="33"/></literal></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">pack_objects<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">.<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">argv<pos:position pos:line="37" pos:column="26"/></name></name> <operator pos:line="37" pos:column="27">=<pos:position pos:line="37" pos:column="28"/></operator> <name pos:line="37" pos:column="29">argv<pos:position pos:line="37" pos:column="33"/></name></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><call><name pos:line="39" pos:column="13">start_command<pos:position pos:line="39" pos:column="26"/></name><argument_list pos:line="39" pos:column="26">(<argument><expr><operator pos:line="39" pos:column="27">&amp;<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="28">pack_objects<pos:position pos:line="39" pos:column="40"/></name></expr></argument>)<pos:position pos:line="39" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="42"/></condition><then pos:line="39" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="17">die<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><literal type="string" pos:line="40" pos:column="21">"git upload-pack: unable to fork git-pack-objects"<pos:position pos:line="40" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="73"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="42" pos:column="9">pipe_fd<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <call><name pos:line="42" pos:column="19">xfdopen<pos:position pos:line="42" pos:column="26"/></name><argument_list pos:line="42" pos:column="26">(<argument><expr><name><name pos:line="42" pos:column="27">pack_objects<pos:position pos:line="42" pos:column="39"/></name><operator pos:line="42" pos:column="39">.<pos:position pos:line="42" pos:column="40"/></operator><name pos:line="42" pos:column="40">in<pos:position pos:line="42" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="44">"w"<pos:position pos:line="42" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="49"/></expr_stmt>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">shallow_nr<pos:position pos:line="44" pos:column="23"/></name></expr>)<pos:position pos:line="44" pos:column="24"/></condition><then pos:line="44" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="17">for_each_commit_graft<pos:position pos:line="45" pos:column="38"/></name><argument_list pos:line="45" pos:column="38">(<argument><expr><name pos:line="45" pos:column="39">write_one_shallow<pos:position pos:line="45" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="58">pipe_fd<pos:position pos:line="45" pos:column="65"/></name></expr></argument>)<pos:position pos:line="45" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="67"/></expr_stmt></block></then></if>

	<for pos:line="47" pos:column="9">for <control pos:line="47" pos:column="13">(<init><expr><name pos:line="47" pos:column="14">i<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <literal type="number" pos:line="47" pos:column="18">0<pos:position pos:line="47" pos:column="19"/></literal></expr>;<pos:position pos:line="47" pos:column="20"/></init> <condition><expr><name pos:line="47" pos:column="21">i<pos:position pos:line="47" pos:column="22"/></name> <operator pos:line="47" pos:column="23">&lt;<pos:position pos:line="47" pos:column="27"/></operator> <name><name pos:line="47" pos:column="25">want_obj<pos:position pos:line="47" pos:column="33"/></name><operator pos:line="47" pos:column="33">.<pos:position pos:line="47" pos:column="34"/></operator><name pos:line="47" pos:column="34">nr<pos:position pos:line="47" pos:column="36"/></name></name></expr>;<pos:position pos:line="47" pos:column="37"/></condition> <incr><expr><name pos:line="47" pos:column="38">i<pos:position pos:line="47" pos:column="39"/></name><operator pos:line="47" pos:column="39">++<pos:position pos:line="47" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="47" pos:column="42"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="17">fprintf<pos:position pos:line="48" pos:column="24"/></name><argument_list pos:line="48" pos:column="24">(<argument><expr><name pos:line="48" pos:column="25">pipe_fd<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="34">"%s\n"<pos:position pos:line="48" pos:column="40"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="49" pos:column="25">sha1_to_hex<pos:position pos:line="49" pos:column="36"/></name><argument_list pos:line="49" pos:column="36">(<argument><expr><name><name pos:line="49" pos:column="37">want_obj<pos:position pos:line="49" pos:column="45"/></name><operator pos:line="49" pos:column="45">.<pos:position pos:line="49" pos:column="46"/></operator><name pos:line="49" pos:column="46">objects<pos:position pos:line="49" pos:column="53"/></name><index pos:line="49" pos:column="53">[<expr><name pos:line="49" pos:column="54">i<pos:position pos:line="49" pos:column="55"/></name></expr>]<pos:position pos:line="49" pos:column="56"/></index></name><operator pos:line="49" pos:column="56">.<pos:position pos:line="49" pos:column="57"/></operator><name><name pos:line="49" pos:column="57">item<pos:position pos:line="49" pos:column="61"/></name><operator pos:line="49" pos:column="61">-&gt;<pos:position pos:line="49" pos:column="66"/></operator><name pos:line="49" pos:column="63">sha1<pos:position pos:line="49" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="70"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">fprintf<pos:position pos:line="50" pos:column="16"/></name><argument_list pos:line="50" pos:column="16">(<argument><expr><name pos:line="50" pos:column="17">pipe_fd<pos:position pos:line="50" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="26">"--not\n"<pos:position pos:line="50" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="37"/></expr_stmt>
	<for pos:line="51" pos:column="9">for <control pos:line="51" pos:column="13">(<init><expr><name pos:line="51" pos:column="14">i<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">=<pos:position pos:line="51" pos:column="17"/></operator> <literal type="number" pos:line="51" pos:column="18">0<pos:position pos:line="51" pos:column="19"/></literal></expr>;<pos:position pos:line="51" pos:column="20"/></init> <condition><expr><name pos:line="51" pos:column="21">i<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">&lt;<pos:position pos:line="51" pos:column="27"/></operator> <name><name pos:line="51" pos:column="25">have_obj<pos:position pos:line="51" pos:column="33"/></name><operator pos:line="51" pos:column="33">.<pos:position pos:line="51" pos:column="34"/></operator><name pos:line="51" pos:column="34">nr<pos:position pos:line="51" pos:column="36"/></name></name></expr>;<pos:position pos:line="51" pos:column="37"/></condition> <incr><expr><name pos:line="51" pos:column="38">i<pos:position pos:line="51" pos:column="39"/></name><operator pos:line="51" pos:column="39">++<pos:position pos:line="51" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="51" pos:column="42"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="17">fprintf<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">pipe_fd<pos:position pos:line="52" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="34">"%s\n"<pos:position pos:line="52" pos:column="40"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="53" pos:column="25">sha1_to_hex<pos:position pos:line="53" pos:column="36"/></name><argument_list pos:line="53" pos:column="36">(<argument><expr><name><name pos:line="53" pos:column="37">have_obj<pos:position pos:line="53" pos:column="45"/></name><operator pos:line="53" pos:column="45">.<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="46">objects<pos:position pos:line="53" pos:column="53"/></name><index pos:line="53" pos:column="53">[<expr><name pos:line="53" pos:column="54">i<pos:position pos:line="53" pos:column="55"/></name></expr>]<pos:position pos:line="53" pos:column="56"/></index></name><operator pos:line="53" pos:column="56">.<pos:position pos:line="53" pos:column="57"/></operator><name><name pos:line="53" pos:column="57">item<pos:position pos:line="53" pos:column="61"/></name><operator pos:line="53" pos:column="61">-&gt;<pos:position pos:line="53" pos:column="66"/></operator><name pos:line="53" pos:column="63">sha1<pos:position pos:line="53" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="53" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="70"/></expr_stmt></block></for>
	<for pos:line="54" pos:column="9">for <control pos:line="54" pos:column="13">(<init><expr><name pos:line="54" pos:column="14">i<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">=<pos:position pos:line="54" pos:column="17"/></operator> <literal type="number" pos:line="54" pos:column="18">0<pos:position pos:line="54" pos:column="19"/></literal></expr>;<pos:position pos:line="54" pos:column="20"/></init> <condition><expr><name pos:line="54" pos:column="21">i<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">&lt;<pos:position pos:line="54" pos:column="27"/></operator> <name><name pos:line="54" pos:column="25">extra_edge_obj<pos:position pos:line="54" pos:column="39"/></name><operator pos:line="54" pos:column="39">.<pos:position pos:line="54" pos:column="40"/></operator><name pos:line="54" pos:column="40">nr<pos:position pos:line="54" pos:column="42"/></name></name></expr>;<pos:position pos:line="54" pos:column="43"/></condition> <incr><expr><name pos:line="54" pos:column="44">i<pos:position pos:line="54" pos:column="45"/></name><operator pos:line="54" pos:column="45">++<pos:position pos:line="54" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="54" pos:column="48"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="17">fprintf<pos:position pos:line="55" pos:column="24"/></name><argument_list pos:line="55" pos:column="24">(<argument><expr><name pos:line="55" pos:column="25">pipe_fd<pos:position pos:line="55" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="34">"%s\n"<pos:position pos:line="55" pos:column="40"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="56" pos:column="25">sha1_to_hex<pos:position pos:line="56" pos:column="36"/></name><argument_list pos:line="56" pos:column="36">(<argument><expr><name><name pos:line="56" pos:column="37">extra_edge_obj<pos:position pos:line="56" pos:column="51"/></name><operator pos:line="56" pos:column="51">.<pos:position pos:line="56" pos:column="52"/></operator><name pos:line="56" pos:column="52">objects<pos:position pos:line="56" pos:column="59"/></name><index pos:line="56" pos:column="59">[<expr><name pos:line="56" pos:column="60">i<pos:position pos:line="56" pos:column="61"/></name></expr>]<pos:position pos:line="56" pos:column="62"/></index></name><operator pos:line="56" pos:column="62">.<pos:position pos:line="56" pos:column="63"/></operator><name><name pos:line="56" pos:column="63">item<pos:position pos:line="56" pos:column="67"/></name><operator pos:line="56" pos:column="67">-&gt;<pos:position pos:line="56" pos:column="72"/></operator><name pos:line="56" pos:column="69">sha1<pos:position pos:line="56" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="76"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="57" pos:column="9">fprintf<pos:position pos:line="57" pos:column="16"/></name><argument_list pos:line="57" pos:column="16">(<argument><expr><name pos:line="57" pos:column="17">pipe_fd<pos:position pos:line="57" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="26">"\n"<pos:position pos:line="57" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">fflush<pos:position pos:line="58" pos:column="15"/></name><argument_list pos:line="58" pos:column="15">(<argument><expr><name pos:line="58" pos:column="16">pipe_fd<pos:position pos:line="58" pos:column="23"/></name></expr></argument>)<pos:position pos:line="58" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="59" pos:column="9">fclose<pos:position pos:line="59" pos:column="15"/></name><argument_list pos:line="59" pos:column="15">(<argument><expr><name pos:line="59" pos:column="16">pipe_fd<pos:position pos:line="59" pos:column="23"/></name></expr></argument>)<pos:position pos:line="59" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="25"/></expr_stmt>

	<comment type="block" pos:line="61" pos:column="9">/* We read from pack_objects.err to capture stderr output for
	 * progress bar, and pack_objects.out to capture the pack data.
	 */</comment>

	<while pos:line="65" pos:column="9">while <condition pos:line="65" pos:column="15">(<expr><literal type="number" pos:line="65" pos:column="16">1<pos:position pos:line="65" pos:column="17"/></literal></expr>)<pos:position pos:line="65" pos:column="18"/></condition> <block pos:line="65" pos:column="19">{
		<decl_stmt><decl><type><name><name pos:line="66" pos:column="17">struct<pos:position pos:line="66" pos:column="23"/></name> <name pos:line="66" pos:column="24">pollfd<pos:position pos:line="66" pos:column="30"/></name></name></type> <name><name pos:line="66" pos:column="31">pfd<pos:position pos:line="66" pos:column="34"/></name><index pos:line="66" pos:column="34">[<expr><literal type="number" pos:line="66" pos:column="35">2<pos:position pos:line="66" pos:column="36"/></literal></expr>]<pos:position pos:line="66" pos:column="37"/></index></name></decl>;<pos:position pos:line="66" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="67" pos:column="17">int<pos:position pos:line="67" pos:column="20"/></name></type> <name pos:line="67" pos:column="21">pe<pos:position pos:line="67" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="67" pos:column="25">pu<pos:position pos:line="67" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="67" pos:column="29">pollsize<pos:position pos:line="67" pos:column="37"/></name></decl>;<pos:position pos:line="67" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="68" pos:column="17">int<pos:position pos:line="68" pos:column="20"/></name></type> <name pos:line="68" pos:column="21">ret<pos:position pos:line="68" pos:column="24"/></name></decl>;<pos:position pos:line="68" pos:column="25"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="70" pos:column="17">reset_timeout<pos:position pos:line="70" pos:column="30"/></name><argument_list pos:line="70" pos:column="30">()<pos:position pos:line="70" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="33"/></expr_stmt>

		<expr_stmt><expr><name pos:line="72" pos:column="17">pollsize<pos:position pos:line="72" pos:column="25"/></name> <operator pos:line="72" pos:column="26">=<pos:position pos:line="72" pos:column="27"/></operator> <literal type="number" pos:line="72" pos:column="28">0<pos:position pos:line="72" pos:column="29"/></literal></expr>;<pos:position pos:line="72" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><name pos:line="73" pos:column="17">pe<pos:position pos:line="73" pos:column="19"/></name> <operator pos:line="73" pos:column="20">=<pos:position pos:line="73" pos:column="21"/></operator> <name pos:line="73" pos:column="22">pu<pos:position pos:line="73" pos:column="24"/></name> <operator pos:line="73" pos:column="25">=<pos:position pos:line="73" pos:column="26"/></operator> <operator pos:line="73" pos:column="27">-<pos:position pos:line="73" pos:column="28"/></operator><literal type="number" pos:line="73" pos:column="28">1<pos:position pos:line="73" pos:column="29"/></literal></expr>;<pos:position pos:line="73" pos:column="30"/></expr_stmt>

		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><literal type="number" pos:line="75" pos:column="21">0<pos:position pos:line="75" pos:column="22"/></literal> <operator pos:line="75" pos:column="23">&lt;=<pos:position pos:line="75" pos:column="28"/></operator> <name><name pos:line="75" pos:column="26">pack_objects<pos:position pos:line="75" pos:column="38"/></name><operator pos:line="75" pos:column="38">.<pos:position pos:line="75" pos:column="39"/></operator><name pos:line="75" pos:column="39">out<pos:position pos:line="75" pos:column="42"/></name></name></expr>)<pos:position pos:line="75" pos:column="43"/></condition><then pos:line="75" pos:column="43"> <block pos:line="75" pos:column="44">{
			<expr_stmt><expr><name><name pos:line="76" pos:column="25">pfd<pos:position pos:line="76" pos:column="28"/></name><index pos:line="76" pos:column="28">[<expr><name pos:line="76" pos:column="29">pollsize<pos:position pos:line="76" pos:column="37"/></name></expr>]<pos:position pos:line="76" pos:column="38"/></index></name><operator pos:line="76" pos:column="38">.<pos:position pos:line="76" pos:column="39"/></operator><name pos:line="76" pos:column="39">fd<pos:position pos:line="76" pos:column="41"/></name> <operator pos:line="76" pos:column="42">=<pos:position pos:line="76" pos:column="43"/></operator> <name><name pos:line="76" pos:column="44">pack_objects<pos:position pos:line="76" pos:column="56"/></name><operator pos:line="76" pos:column="56">.<pos:position pos:line="76" pos:column="57"/></operator><name pos:line="76" pos:column="57">out<pos:position pos:line="76" pos:column="60"/></name></name></expr>;<pos:position pos:line="76" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="77" pos:column="25">pfd<pos:position pos:line="77" pos:column="28"/></name><index pos:line="77" pos:column="28">[<expr><name pos:line="77" pos:column="29">pollsize<pos:position pos:line="77" pos:column="37"/></name></expr>]<pos:position pos:line="77" pos:column="38"/></index></name><operator pos:line="77" pos:column="38">.<pos:position pos:line="77" pos:column="39"/></operator><name pos:line="77" pos:column="39">events<pos:position pos:line="77" pos:column="45"/></name> <operator pos:line="77" pos:column="46">=<pos:position pos:line="77" pos:column="47"/></operator> <name pos:line="77" pos:column="48">POLLIN<pos:position pos:line="77" pos:column="54"/></name></expr>;<pos:position pos:line="77" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name pos:line="78" pos:column="25">pu<pos:position pos:line="78" pos:column="27"/></name> <operator pos:line="78" pos:column="28">=<pos:position pos:line="78" pos:column="29"/></operator> <name pos:line="78" pos:column="30">pollsize<pos:position pos:line="78" pos:column="38"/></name></expr>;<pos:position pos:line="78" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="79" pos:column="25">pollsize<pos:position pos:line="79" pos:column="33"/></name><operator pos:line="79" pos:column="33">++<pos:position pos:line="79" pos:column="35"/></operator></expr>;<pos:position pos:line="79" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="80" pos:column="18"/></block></then></if>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><literal type="number" pos:line="81" pos:column="21">0<pos:position pos:line="81" pos:column="22"/></literal> <operator pos:line="81" pos:column="23">&lt;=<pos:position pos:line="81" pos:column="28"/></operator> <name><name pos:line="81" pos:column="26">pack_objects<pos:position pos:line="81" pos:column="38"/></name><operator pos:line="81" pos:column="38">.<pos:position pos:line="81" pos:column="39"/></operator><name pos:line="81" pos:column="39">err<pos:position pos:line="81" pos:column="42"/></name></name></expr>)<pos:position pos:line="81" pos:column="43"/></condition><then pos:line="81" pos:column="43"> <block pos:line="81" pos:column="44">{
			<expr_stmt><expr><name><name pos:line="82" pos:column="25">pfd<pos:position pos:line="82" pos:column="28"/></name><index pos:line="82" pos:column="28">[<expr><name pos:line="82" pos:column="29">pollsize<pos:position pos:line="82" pos:column="37"/></name></expr>]<pos:position pos:line="82" pos:column="38"/></index></name><operator pos:line="82" pos:column="38">.<pos:position pos:line="82" pos:column="39"/></operator><name pos:line="82" pos:column="39">fd<pos:position pos:line="82" pos:column="41"/></name> <operator pos:line="82" pos:column="42">=<pos:position pos:line="82" pos:column="43"/></operator> <name><name pos:line="82" pos:column="44">pack_objects<pos:position pos:line="82" pos:column="56"/></name><operator pos:line="82" pos:column="56">.<pos:position pos:line="82" pos:column="57"/></operator><name pos:line="82" pos:column="57">err<pos:position pos:line="82" pos:column="60"/></name></name></expr>;<pos:position pos:line="82" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="83" pos:column="25">pfd<pos:position pos:line="83" pos:column="28"/></name><index pos:line="83" pos:column="28">[<expr><name pos:line="83" pos:column="29">pollsize<pos:position pos:line="83" pos:column="37"/></name></expr>]<pos:position pos:line="83" pos:column="38"/></index></name><operator pos:line="83" pos:column="38">.<pos:position pos:line="83" pos:column="39"/></operator><name pos:line="83" pos:column="39">events<pos:position pos:line="83" pos:column="45"/></name> <operator pos:line="83" pos:column="46">=<pos:position pos:line="83" pos:column="47"/></operator> <name pos:line="83" pos:column="48">POLLIN<pos:position pos:line="83" pos:column="54"/></name></expr>;<pos:position pos:line="83" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name pos:line="84" pos:column="25">pe<pos:position pos:line="84" pos:column="27"/></name> <operator pos:line="84" pos:column="28">=<pos:position pos:line="84" pos:column="29"/></operator> <name pos:line="84" pos:column="30">pollsize<pos:position pos:line="84" pos:column="38"/></name></expr>;<pos:position pos:line="84" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><name pos:line="85" pos:column="25">pollsize<pos:position pos:line="85" pos:column="33"/></name><operator pos:line="85" pos:column="33">++<pos:position pos:line="85" pos:column="35"/></operator></expr>;<pos:position pos:line="85" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="86" pos:column="18"/></block></then></if>

		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><operator pos:line="88" pos:column="21">!<pos:position pos:line="88" pos:column="22"/></operator><name pos:line="88" pos:column="22">pollsize<pos:position pos:line="88" pos:column="30"/></name></expr>)<pos:position pos:line="88" pos:column="31"/></condition><then pos:line="88" pos:column="31">
			<block type="pseudo"><break pos:line="89" pos:column="25">break;<pos:position pos:line="89" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><name pos:line="91" pos:column="17">ret<pos:position pos:line="91" pos:column="20"/></name> <operator pos:line="91" pos:column="21">=<pos:position pos:line="91" pos:column="22"/></operator> <call><name pos:line="91" pos:column="23">poll<pos:position pos:line="91" pos:column="27"/></name><argument_list pos:line="91" pos:column="27">(<argument><expr><name pos:line="91" pos:column="28">pfd<pos:position pos:line="91" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="33">pollsize<pos:position pos:line="91" pos:column="41"/></name></expr></argument>,
			<argument><expr><ternary><condition><expr><name pos:line="92" pos:column="25">keepalive<pos:position pos:line="92" pos:column="34"/></name> <operator pos:line="92" pos:column="35">&lt;<pos:position pos:line="92" pos:column="39"/></operator> <literal type="number" pos:line="92" pos:column="37">0<pos:position pos:line="92" pos:column="38"/></literal></expr> ?<pos:position pos:line="92" pos:column="40"/></condition><then pos:line="92" pos:column="40"> <expr><operator pos:line="92" pos:column="41">-<pos:position pos:line="92" pos:column="42"/></operator><literal type="number" pos:line="92" pos:column="42">1<pos:position pos:line="92" pos:column="43"/></literal></expr> <pos:position pos:line="92" pos:column="44"/></then><else pos:line="92" pos:column="44">: <expr><literal type="number" pos:line="92" pos:column="46">1000<pos:position pos:line="92" pos:column="50"/></literal> <operator pos:line="92" pos:column="51">*<pos:position pos:line="92" pos:column="52"/></operator> <name pos:line="92" pos:column="53">keepalive<pos:position pos:line="92" pos:column="62"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="92" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="64"/></expr_stmt>

		<if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><name pos:line="94" pos:column="21">ret<pos:position pos:line="94" pos:column="24"/></name> <operator pos:line="94" pos:column="25">&lt;<pos:position pos:line="94" pos:column="29"/></operator> <literal type="number" pos:line="94" pos:column="27">0<pos:position pos:line="94" pos:column="28"/></literal></expr>)<pos:position pos:line="94" pos:column="29"/></condition><then pos:line="94" pos:column="29"> <block pos:line="94" pos:column="30">{
			<if pos:line="95" pos:column="25">if <condition pos:line="95" pos:column="28">(<expr><name pos:line="95" pos:column="29">errno<pos:position pos:line="95" pos:column="34"/></name> <operator pos:line="95" pos:column="35">!=<pos:position pos:line="95" pos:column="37"/></operator> <name pos:line="95" pos:column="38">EINTR<pos:position pos:line="95" pos:column="43"/></name></expr>)<pos:position pos:line="95" pos:column="44"/></condition><then pos:line="95" pos:column="44"> <block pos:line="95" pos:column="45">{
				<expr_stmt><expr><call><name pos:line="96" pos:column="33">error<pos:position pos:line="96" pos:column="38"/></name><argument_list pos:line="96" pos:column="38">(<argument><expr><literal type="string" pos:line="96" pos:column="39">"poll failed, resuming: %s"<pos:position pos:line="96" pos:column="66"/></literal></expr></argument>,
				      <argument><expr><call><name pos:line="97" pos:column="39">strerror<pos:position pos:line="97" pos:column="47"/></name><argument_list pos:line="97" pos:column="47">(<argument><expr><name pos:line="97" pos:column="48">errno<pos:position pos:line="97" pos:column="53"/></name></expr></argument>)<pos:position pos:line="97" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="97" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="56"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="98" pos:column="33">sleep<pos:position pos:line="98" pos:column="38"/></name><argument_list pos:line="98" pos:column="38">(<argument><expr><literal type="number" pos:line="98" pos:column="39">1<pos:position pos:line="98" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="42"/></expr_stmt>
			}<pos:position pos:line="99" pos:column="26"/></block></then></if>
			<continue pos:line="100" pos:column="25">continue;<pos:position pos:line="100" pos:column="34"/></continue>
		}<pos:position pos:line="101" pos:column="18"/></block></then></if>
		<if pos:line="102" pos:column="17">if <condition pos:line="102" pos:column="20">(<expr><literal type="number" pos:line="102" pos:column="21">0<pos:position pos:line="102" pos:column="22"/></literal> <operator pos:line="102" pos:column="23">&lt;=<pos:position pos:line="102" pos:column="28"/></operator> <name pos:line="102" pos:column="26">pe<pos:position pos:line="102" pos:column="28"/></name> <operator pos:line="102" pos:column="29">&amp;&amp;<pos:position pos:line="102" pos:column="39"/></operator> <operator pos:line="102" pos:column="32">(<pos:position pos:line="102" pos:column="33"/></operator><name><name pos:line="102" pos:column="33">pfd<pos:position pos:line="102" pos:column="36"/></name><index pos:line="102" pos:column="36">[<expr><name pos:line="102" pos:column="37">pe<pos:position pos:line="102" pos:column="39"/></name></expr>]<pos:position pos:line="102" pos:column="40"/></index></name><operator pos:line="102" pos:column="40">.<pos:position pos:line="102" pos:column="41"/></operator><name pos:line="102" pos:column="41">revents<pos:position pos:line="102" pos:column="48"/></name> <operator pos:line="102" pos:column="49">&amp;<pos:position pos:line="102" pos:column="54"/></operator> <operator pos:line="102" pos:column="51">(<pos:position pos:line="102" pos:column="52"/></operator><name pos:line="102" pos:column="52">POLLIN<pos:position pos:line="102" pos:column="58"/></name><operator pos:line="102" pos:column="58">|<pos:position pos:line="102" pos:column="59"/></operator><name pos:line="102" pos:column="59">POLLHUP<pos:position pos:line="102" pos:column="66"/></name><operator pos:line="102" pos:column="66">)<pos:position pos:line="102" pos:column="67"/></operator><operator pos:line="102" pos:column="67">)<pos:position pos:line="102" pos:column="68"/></operator></expr>)<pos:position pos:line="102" pos:column="69"/></condition><then pos:line="102" pos:column="69"> <block pos:line="102" pos:column="70">{
			<comment type="block" pos:line="103" pos:column="25">/* Status ready; we ship that in the side-band
			 * or dump to the standard error.
			 */</comment>
			<expr_stmt><expr><name pos:line="106" pos:column="25">sz<pos:position pos:line="106" pos:column="27"/></name> <operator pos:line="106" pos:column="28">=<pos:position pos:line="106" pos:column="29"/></operator> <call><name pos:line="106" pos:column="30">xread<pos:position pos:line="106" pos:column="35"/></name><argument_list pos:line="106" pos:column="35">(<argument><expr><name><name pos:line="106" pos:column="36">pack_objects<pos:position pos:line="106" pos:column="48"/></name><operator pos:line="106" pos:column="48">.<pos:position pos:line="106" pos:column="49"/></operator><name pos:line="106" pos:column="49">err<pos:position pos:line="106" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="54">progress<pos:position pos:line="106" pos:column="62"/></name></expr></argument>,
				  <argument><expr><sizeof pos:line="107" pos:column="35">sizeof<argument_list pos:line="107" pos:column="41">(<argument><expr><name pos:line="107" pos:column="42">progress<pos:position pos:line="107" pos:column="50"/></name></expr></argument>)<pos:position pos:line="107" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="107" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="53"/></expr_stmt>
			<if pos:line="108" pos:column="25">if <condition pos:line="108" pos:column="28">(<expr><literal type="number" pos:line="108" pos:column="29">0<pos:position pos:line="108" pos:column="30"/></literal> <operator pos:line="108" pos:column="31">&lt;<pos:position pos:line="108" pos:column="35"/></operator> <name pos:line="108" pos:column="33">sz<pos:position pos:line="108" pos:column="35"/></name></expr>)<pos:position pos:line="108" pos:column="36"/></condition><then pos:line="108" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="109" pos:column="33">send_client_data<pos:position pos:line="109" pos:column="49"/></name><argument_list pos:line="109" pos:column="49">(<argument><expr><literal type="number" pos:line="109" pos:column="50">2<pos:position pos:line="109" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="53">progress<pos:position pos:line="109" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="63">sz<pos:position pos:line="109" pos:column="65"/></name></expr></argument>)<pos:position pos:line="109" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="67"/></expr_stmt></block></then>
			<elseif pos:line="110" pos:column="25">else <if pos:line="110" pos:column="30">if <condition pos:line="110" pos:column="33">(<expr><name pos:line="110" pos:column="34">sz<pos:position pos:line="110" pos:column="36"/></name> <operator pos:line="110" pos:column="37">==<pos:position pos:line="110" pos:column="39"/></operator> <literal type="number" pos:line="110" pos:column="40">0<pos:position pos:line="110" pos:column="41"/></literal></expr>)<pos:position pos:line="110" pos:column="42"/></condition><then pos:line="110" pos:column="42"> <block pos:line="110" pos:column="43">{
				<expr_stmt><expr><call><name pos:line="111" pos:column="33">close<pos:position pos:line="111" pos:column="38"/></name><argument_list pos:line="111" pos:column="38">(<argument><expr><name><name pos:line="111" pos:column="39">pack_objects<pos:position pos:line="111" pos:column="51"/></name><operator pos:line="111" pos:column="51">.<pos:position pos:line="111" pos:column="52"/></operator><name pos:line="111" pos:column="52">err<pos:position pos:line="111" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="111" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="112" pos:column="33">pack_objects<pos:position pos:line="112" pos:column="45"/></name><operator pos:line="112" pos:column="45">.<pos:position pos:line="112" pos:column="46"/></operator><name pos:line="112" pos:column="46">err<pos:position pos:line="112" pos:column="49"/></name></name> <operator pos:line="112" pos:column="50">=<pos:position pos:line="112" pos:column="51"/></operator> <operator pos:line="112" pos:column="52">-<pos:position pos:line="112" pos:column="53"/></operator><literal type="number" pos:line="112" pos:column="53">1<pos:position pos:line="112" pos:column="54"/></literal></expr>;<pos:position pos:line="112" pos:column="55"/></expr_stmt>
			}<pos:position pos:line="113" pos:column="26"/></block></then></if></elseif>
			<else pos:line="114" pos:column="25">else
				<block type="pseudo"><goto pos:line="115" pos:column="33">goto <name pos:line="115" pos:column="38">fail<pos:position pos:line="115" pos:column="42"/></name>;<pos:position pos:line="115" pos:column="43"/></goto></block></else></if>
			<comment type="block" pos:line="116" pos:column="25">/* give priority to status messages */</comment>
			<continue pos:line="117" pos:column="25">continue;<pos:position pos:line="117" pos:column="34"/></continue>
		}<pos:position pos:line="118" pos:column="18"/></block></then></if>
		<if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><literal type="number" pos:line="119" pos:column="21">0<pos:position pos:line="119" pos:column="22"/></literal> <operator pos:line="119" pos:column="23">&lt;=<pos:position pos:line="119" pos:column="28"/></operator> <name pos:line="119" pos:column="26">pu<pos:position pos:line="119" pos:column="28"/></name> <operator pos:line="119" pos:column="29">&amp;&amp;<pos:position pos:line="119" pos:column="39"/></operator> <operator pos:line="119" pos:column="32">(<pos:position pos:line="119" pos:column="33"/></operator><name><name pos:line="119" pos:column="33">pfd<pos:position pos:line="119" pos:column="36"/></name><index pos:line="119" pos:column="36">[<expr><name pos:line="119" pos:column="37">pu<pos:position pos:line="119" pos:column="39"/></name></expr>]<pos:position pos:line="119" pos:column="40"/></index></name><operator pos:line="119" pos:column="40">.<pos:position pos:line="119" pos:column="41"/></operator><name pos:line="119" pos:column="41">revents<pos:position pos:line="119" pos:column="48"/></name> <operator pos:line="119" pos:column="49">&amp;<pos:position pos:line="119" pos:column="54"/></operator> <operator pos:line="119" pos:column="51">(<pos:position pos:line="119" pos:column="52"/></operator><name pos:line="119" pos:column="52">POLLIN<pos:position pos:line="119" pos:column="58"/></name><operator pos:line="119" pos:column="58">|<pos:position pos:line="119" pos:column="59"/></operator><name pos:line="119" pos:column="59">POLLHUP<pos:position pos:line="119" pos:column="66"/></name><operator pos:line="119" pos:column="66">)<pos:position pos:line="119" pos:column="67"/></operator><operator pos:line="119" pos:column="67">)<pos:position pos:line="119" pos:column="68"/></operator></expr>)<pos:position pos:line="119" pos:column="69"/></condition><then pos:line="119" pos:column="69"> <block pos:line="119" pos:column="70">{
			<comment type="block" pos:line="120" pos:column="25">/* Data ready; we keep the last byte to ourselves
			 * in case we detect broken rev-list, so that we
			 * can leave the stream corrupted.  This is
			 * unfortunate -- unpack-objects would happily
			 * accept a valid packdata with trailing garbage,
			 * so appending garbage after we pass all the
			 * pack data is not good enough to signal
			 * breakage to downstream.
			 */</comment>
			<decl_stmt><decl><type><name pos:line="129" pos:column="25">char<pos:position pos:line="129" pos:column="29"/></name> <modifier pos:line="129" pos:column="30">*<pos:position pos:line="129" pos:column="31"/></modifier></type><name pos:line="129" pos:column="31">cp<pos:position pos:line="129" pos:column="33"/></name> <init pos:line="129" pos:column="34">= <expr><name pos:line="129" pos:column="36">data<pos:position pos:line="129" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="129" pos:column="41"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="130" pos:column="25">ssize_t<pos:position pos:line="130" pos:column="32"/></name></type> <name pos:line="130" pos:column="33">outsz<pos:position pos:line="130" pos:column="38"/></name> <init pos:line="130" pos:column="39">= <expr><literal type="number" pos:line="130" pos:column="41">0<pos:position pos:line="130" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="130" pos:column="43"/></decl_stmt>
			<if pos:line="131" pos:column="25">if <condition pos:line="131" pos:column="28">(<expr><literal type="number" pos:line="131" pos:column="29">0<pos:position pos:line="131" pos:column="30"/></literal> <operator pos:line="131" pos:column="31">&lt;=<pos:position pos:line="131" pos:column="36"/></operator> <name pos:line="131" pos:column="34">buffered<pos:position pos:line="131" pos:column="42"/></name></expr>)<pos:position pos:line="131" pos:column="43"/></condition><then pos:line="131" pos:column="43"> <block pos:line="131" pos:column="44">{
				<expr_stmt><expr><operator pos:line="132" pos:column="33">*<pos:position pos:line="132" pos:column="34"/></operator><name pos:line="132" pos:column="34">cp<pos:position pos:line="132" pos:column="36"/></name><operator pos:line="132" pos:column="36">++<pos:position pos:line="132" pos:column="38"/></operator> <operator pos:line="132" pos:column="39">=<pos:position pos:line="132" pos:column="40"/></operator> <name pos:line="132" pos:column="41">buffered<pos:position pos:line="132" pos:column="49"/></name></expr>;<pos:position pos:line="132" pos:column="50"/></expr_stmt>
				<expr_stmt><expr><name pos:line="133" pos:column="33">outsz<pos:position pos:line="133" pos:column="38"/></name><operator pos:line="133" pos:column="38">++<pos:position pos:line="133" pos:column="40"/></operator></expr>;<pos:position pos:line="133" pos:column="41"/></expr_stmt>
			}<pos:position pos:line="134" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="135" pos:column="25">sz<pos:position pos:line="135" pos:column="27"/></name> <operator pos:line="135" pos:column="28">=<pos:position pos:line="135" pos:column="29"/></operator> <call><name pos:line="135" pos:column="30">xread<pos:position pos:line="135" pos:column="35"/></name><argument_list pos:line="135" pos:column="35">(<argument><expr><name><name pos:line="135" pos:column="36">pack_objects<pos:position pos:line="135" pos:column="48"/></name><operator pos:line="135" pos:column="48">.<pos:position pos:line="135" pos:column="49"/></operator><name pos:line="135" pos:column="49">out<pos:position pos:line="135" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="54">cp<pos:position pos:line="135" pos:column="56"/></name></expr></argument>,
				  <argument><expr><sizeof pos:line="136" pos:column="35">sizeof<argument_list pos:line="136" pos:column="41">(<argument><expr><name pos:line="136" pos:column="42">data<pos:position pos:line="136" pos:column="46"/></name></expr></argument>)<pos:position pos:line="136" pos:column="47"/></argument_list></sizeof> <operator pos:line="136" pos:column="48">-<pos:position pos:line="136" pos:column="49"/></operator> <name pos:line="136" pos:column="50">outsz<pos:position pos:line="136" pos:column="55"/></name></expr></argument>)<pos:position pos:line="136" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="57"/></expr_stmt>
			<if pos:line="137" pos:column="25">if <condition pos:line="137" pos:column="28">(<expr><literal type="number" pos:line="137" pos:column="29">0<pos:position pos:line="137" pos:column="30"/></literal> <operator pos:line="137" pos:column="31">&lt;<pos:position pos:line="137" pos:column="35"/></operator> <name pos:line="137" pos:column="33">sz<pos:position pos:line="137" pos:column="35"/></name></expr>)<pos:position pos:line="137" pos:column="36"/></condition><then pos:line="137" pos:column="36">
				<block type="pseudo"><empty_stmt pos:line="138" pos:column="33">;<pos:position pos:line="138" pos:column="34"/></empty_stmt></block></then>
			<elseif pos:line="139" pos:column="25">else <if pos:line="139" pos:column="30">if <condition pos:line="139" pos:column="33">(<expr><name pos:line="139" pos:column="34">sz<pos:position pos:line="139" pos:column="36"/></name> <operator pos:line="139" pos:column="37">==<pos:position pos:line="139" pos:column="39"/></operator> <literal type="number" pos:line="139" pos:column="40">0<pos:position pos:line="139" pos:column="41"/></literal></expr>)<pos:position pos:line="139" pos:column="42"/></condition><then pos:line="139" pos:column="42"> <block pos:line="139" pos:column="43">{
				<expr_stmt><expr><call><name pos:line="140" pos:column="33">close<pos:position pos:line="140" pos:column="38"/></name><argument_list pos:line="140" pos:column="38">(<argument><expr><name><name pos:line="140" pos:column="39">pack_objects<pos:position pos:line="140" pos:column="51"/></name><operator pos:line="140" pos:column="51">.<pos:position pos:line="140" pos:column="52"/></operator><name pos:line="140" pos:column="52">out<pos:position pos:line="140" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="140" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="141" pos:column="33">pack_objects<pos:position pos:line="141" pos:column="45"/></name><operator pos:line="141" pos:column="45">.<pos:position pos:line="141" pos:column="46"/></operator><name pos:line="141" pos:column="46">out<pos:position pos:line="141" pos:column="49"/></name></name> <operator pos:line="141" pos:column="50">=<pos:position pos:line="141" pos:column="51"/></operator> <operator pos:line="141" pos:column="52">-<pos:position pos:line="141" pos:column="53"/></operator><literal type="number" pos:line="141" pos:column="53">1<pos:position pos:line="141" pos:column="54"/></literal></expr>;<pos:position pos:line="141" pos:column="55"/></expr_stmt>
			}<pos:position pos:line="142" pos:column="26"/></block></then></if></elseif>
			<else pos:line="143" pos:column="25">else
				<block type="pseudo"><goto pos:line="144" pos:column="33">goto <name pos:line="144" pos:column="38">fail<pos:position pos:line="144" pos:column="42"/></name>;<pos:position pos:line="144" pos:column="43"/></goto></block></else></if>
			<expr_stmt><expr><name pos:line="145" pos:column="25">sz<pos:position pos:line="145" pos:column="27"/></name> <operator pos:line="145" pos:column="28">+=<pos:position pos:line="145" pos:column="30"/></operator> <name pos:line="145" pos:column="31">outsz<pos:position pos:line="145" pos:column="36"/></name></expr>;<pos:position pos:line="145" pos:column="37"/></expr_stmt>
			<if pos:line="146" pos:column="25">if <condition pos:line="146" pos:column="28">(<expr><literal type="number" pos:line="146" pos:column="29">1<pos:position pos:line="146" pos:column="30"/></literal> <operator pos:line="146" pos:column="31">&lt;<pos:position pos:line="146" pos:column="35"/></operator> <name pos:line="146" pos:column="33">sz<pos:position pos:line="146" pos:column="35"/></name></expr>)<pos:position pos:line="146" pos:column="36"/></condition><then pos:line="146" pos:column="36"> <block pos:line="146" pos:column="37">{
				<expr_stmt><expr><name pos:line="147" pos:column="33">buffered<pos:position pos:line="147" pos:column="41"/></name> <operator pos:line="147" pos:column="42">=<pos:position pos:line="147" pos:column="43"/></operator> <name><name pos:line="147" pos:column="44">data<pos:position pos:line="147" pos:column="48"/></name><index pos:line="147" pos:column="48">[<expr><name pos:line="147" pos:column="49">sz<pos:position pos:line="147" pos:column="51"/></name><operator pos:line="147" pos:column="51">-<pos:position pos:line="147" pos:column="52"/></operator><literal type="number" pos:line="147" pos:column="52">1<pos:position pos:line="147" pos:column="53"/></literal></expr>]<pos:position pos:line="147" pos:column="54"/></index></name> <operator pos:line="147" pos:column="55">&amp;<pos:position pos:line="147" pos:column="60"/></operator> <literal type="number" pos:line="147" pos:column="57">0xFF<pos:position pos:line="147" pos:column="61"/></literal></expr>;<pos:position pos:line="147" pos:column="62"/></expr_stmt>
				<expr_stmt><expr><name pos:line="148" pos:column="33">sz<pos:position pos:line="148" pos:column="35"/></name><operator pos:line="148" pos:column="35">--<pos:position pos:line="148" pos:column="37"/></operator></expr>;<pos:position pos:line="148" pos:column="38"/></expr_stmt>
			}<pos:position pos:line="149" pos:column="26"/></block></then>
			<else pos:line="150" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="151" pos:column="33">buffered<pos:position pos:line="151" pos:column="41"/></name> <operator pos:line="151" pos:column="42">=<pos:position pos:line="151" pos:column="43"/></operator> <operator pos:line="151" pos:column="44">-<pos:position pos:line="151" pos:column="45"/></operator><literal type="number" pos:line="151" pos:column="45">1<pos:position pos:line="151" pos:column="46"/></literal></expr>;<pos:position pos:line="151" pos:column="47"/></expr_stmt></block></else></if>
			<expr_stmt><expr><name pos:line="152" pos:column="25">sz<pos:position pos:line="152" pos:column="27"/></name> <operator pos:line="152" pos:column="28">=<pos:position pos:line="152" pos:column="29"/></operator> <call><name pos:line="152" pos:column="30">send_client_data<pos:position pos:line="152" pos:column="46"/></name><argument_list pos:line="152" pos:column="46">(<argument><expr><literal type="number" pos:line="152" pos:column="47">1<pos:position pos:line="152" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="152" pos:column="50">data<pos:position pos:line="152" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="56">sz<pos:position pos:line="152" pos:column="58"/></name></expr></argument>)<pos:position pos:line="152" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="60"/></expr_stmt>
			<if pos:line="153" pos:column="25">if <condition pos:line="153" pos:column="28">(<expr><name pos:line="153" pos:column="29">sz<pos:position pos:line="153" pos:column="31"/></name> <operator pos:line="153" pos:column="32">&lt;<pos:position pos:line="153" pos:column="36"/></operator> <literal type="number" pos:line="153" pos:column="34">0<pos:position pos:line="153" pos:column="35"/></literal></expr>)<pos:position pos:line="153" pos:column="36"/></condition><then pos:line="153" pos:column="36">
				<block type="pseudo"><goto pos:line="154" pos:column="33">goto <name pos:line="154" pos:column="38">fail<pos:position pos:line="154" pos:column="42"/></name>;<pos:position pos:line="154" pos:column="43"/></goto></block></then></if>
		}<pos:position pos:line="155" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="157" pos:column="17">/*
		 * We hit the keepalive timeout without saying anything; send
		 * an empty message on the data sideband just to let the other
		 * side know we're still working on it, but don't have any data
		 * yet.
		 *
		 * If we don't have a sideband channel, there's no room in the
		 * protocol to say anything, so those clients are just out of
		 * luck.
		 */</comment>
		<if pos:line="167" pos:column="17">if <condition pos:line="167" pos:column="20">(<expr><operator pos:line="167" pos:column="21">!<pos:position pos:line="167" pos:column="22"/></operator><name pos:line="167" pos:column="22">ret<pos:position pos:line="167" pos:column="25"/></name> <operator pos:line="167" pos:column="26">&amp;&amp;<pos:position pos:line="167" pos:column="36"/></operator> <name pos:line="167" pos:column="29">use_sideband<pos:position pos:line="167" pos:column="41"/></name></expr>)<pos:position pos:line="167" pos:column="42"/></condition><then pos:line="167" pos:column="42"> <block pos:line="167" pos:column="43">{
			<decl_stmt><decl><specifier pos:line="168" pos:column="25">static<pos:position pos:line="168" pos:column="31"/></specifier> <type><specifier pos:line="168" pos:column="32">const<pos:position pos:line="168" pos:column="37"/></specifier> <name pos:line="168" pos:column="38">char<pos:position pos:line="168" pos:column="42"/></name></type> <name><name pos:line="168" pos:column="43">buf<pos:position pos:line="168" pos:column="46"/></name><index pos:line="168" pos:column="46">[]<pos:position pos:line="168" pos:column="48"/></index></name> <init pos:line="168" pos:column="49">= <expr><literal type="string" pos:line="168" pos:column="51">"0005\1"<pos:position pos:line="168" pos:column="59"/></literal></expr></init></decl>;<pos:position pos:line="168" pos:column="60"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="169" pos:column="25">write_or_die<pos:position pos:line="169" pos:column="37"/></name><argument_list pos:line="169" pos:column="37">(<argument><expr><literal type="number" pos:line="169" pos:column="38">1<pos:position pos:line="169" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="169" pos:column="41">buf<pos:position pos:line="169" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="169" pos:column="46">5<pos:position pos:line="169" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="169" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="170" pos:column="18"/></block></then></if>
	}<pos:position pos:line="171" pos:column="10"/></block></while>

	<if pos:line="173" pos:column="9">if <condition pos:line="173" pos:column="12">(<expr><call><name pos:line="173" pos:column="13">finish_command<pos:position pos:line="173" pos:column="27"/></name><argument_list pos:line="173" pos:column="27">(<argument><expr><operator pos:line="173" pos:column="28">&amp;<pos:position pos:line="173" pos:column="33"/></operator><name pos:line="173" pos:column="29">pack_objects<pos:position pos:line="173" pos:column="41"/></name></expr></argument>)<pos:position pos:line="173" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="173" pos:column="43"/></condition><then pos:line="173" pos:column="43"> <block pos:line="173" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="174" pos:column="17">error<pos:position pos:line="174" pos:column="22"/></name><argument_list pos:line="174" pos:column="22">(<argument><expr><literal type="string" pos:line="174" pos:column="23">"git upload-pack: git-pack-objects died with error."<pos:position pos:line="174" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="174" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="77"/></expr_stmt>
		<goto pos:line="175" pos:column="17">goto <name pos:line="175" pos:column="22">fail<pos:position pos:line="175" pos:column="26"/></name>;<pos:position pos:line="175" pos:column="27"/></goto>
	}<pos:position pos:line="176" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="178" pos:column="9">/* flush the data */</comment>
	<if pos:line="179" pos:column="9">if <condition pos:line="179" pos:column="12">(<expr><literal type="number" pos:line="179" pos:column="13">0<pos:position pos:line="179" pos:column="14"/></literal> <operator pos:line="179" pos:column="15">&lt;=<pos:position pos:line="179" pos:column="20"/></operator> <name pos:line="179" pos:column="18">buffered<pos:position pos:line="179" pos:column="26"/></name></expr>)<pos:position pos:line="179" pos:column="27"/></condition><then pos:line="179" pos:column="27"> <block pos:line="179" pos:column="28">{
		<expr_stmt><expr><name><name pos:line="180" pos:column="17">data<pos:position pos:line="180" pos:column="21"/></name><index pos:line="180" pos:column="21">[<expr><literal type="number" pos:line="180" pos:column="22">0<pos:position pos:line="180" pos:column="23"/></literal></expr>]<pos:position pos:line="180" pos:column="24"/></index></name> <operator pos:line="180" pos:column="25">=<pos:position pos:line="180" pos:column="26"/></operator> <name pos:line="180" pos:column="27">buffered<pos:position pos:line="180" pos:column="35"/></name></expr>;<pos:position pos:line="180" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="181" pos:column="17">sz<pos:position pos:line="181" pos:column="19"/></name> <operator pos:line="181" pos:column="20">=<pos:position pos:line="181" pos:column="21"/></operator> <call><name pos:line="181" pos:column="22">send_client_data<pos:position pos:line="181" pos:column="38"/></name><argument_list pos:line="181" pos:column="38">(<argument><expr><literal type="number" pos:line="181" pos:column="39">1<pos:position pos:line="181" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="181" pos:column="42">data<pos:position pos:line="181" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="181" pos:column="48">1<pos:position pos:line="181" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="51"/></expr_stmt>
		<if pos:line="182" pos:column="17">if <condition pos:line="182" pos:column="20">(<expr><name pos:line="182" pos:column="21">sz<pos:position pos:line="182" pos:column="23"/></name> <operator pos:line="182" pos:column="24">&lt;<pos:position pos:line="182" pos:column="28"/></operator> <literal type="number" pos:line="182" pos:column="26">0<pos:position pos:line="182" pos:column="27"/></literal></expr>)<pos:position pos:line="182" pos:column="28"/></condition><then pos:line="182" pos:column="28">
			<block type="pseudo"><goto pos:line="183" pos:column="25">goto <name pos:line="183" pos:column="30">fail<pos:position pos:line="183" pos:column="34"/></name>;<pos:position pos:line="183" pos:column="35"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="184" pos:column="17">fprintf<pos:position pos:line="184" pos:column="24"/></name><argument_list pos:line="184" pos:column="24">(<argument><expr><name pos:line="184" pos:column="25">stderr<pos:position pos:line="184" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="184" pos:column="33">"flushed.\n"<pos:position pos:line="184" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="184" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="185" pos:column="10"/></block></then></if>
	<if pos:line="186" pos:column="9">if <condition pos:line="186" pos:column="12">(<expr><name pos:line="186" pos:column="13">use_sideband<pos:position pos:line="186" pos:column="25"/></name></expr>)<pos:position pos:line="186" pos:column="26"/></condition><then pos:line="186" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="187" pos:column="17">packet_flush<pos:position pos:line="187" pos:column="29"/></name><argument_list pos:line="187" pos:column="29">(<argument><expr><literal type="number" pos:line="187" pos:column="30">1<pos:position pos:line="187" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="187" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="33"/></expr_stmt></block></then></if>
	<return pos:line="188" pos:column="9">return;<pos:position pos:line="188" pos:column="16"/></return>

 <label><name pos:line="190" pos:column="2">fail<pos:position pos:line="190" pos:column="6"/></name>:<pos:position pos:line="190" pos:column="7"/></label>
	<expr_stmt><expr><call><name pos:line="191" pos:column="9">send_client_data<pos:position pos:line="191" pos:column="25"/></name><argument_list pos:line="191" pos:column="25">(<argument><expr><literal type="number" pos:line="191" pos:column="26">3<pos:position pos:line="191" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="191" pos:column="29">abort_msg<pos:position pos:line="191" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="191" pos:column="40">sizeof<argument_list pos:line="191" pos:column="46">(<argument><expr><name pos:line="191" pos:column="47">abort_msg<pos:position pos:line="191" pos:column="56"/></name></expr></argument>)<pos:position pos:line="191" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="191" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="192" pos:column="9">die<pos:position pos:line="192" pos:column="12"/></name><argument_list pos:line="192" pos:column="12">(<argument><expr><literal type="string" pos:line="192" pos:column="13">"git upload-pack: %s"<pos:position pos:line="192" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="192" pos:column="36">abort_msg<pos:position pos:line="192" pos:column="45"/></name></expr></argument>)<pos:position pos:line="192" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="47"/></expr_stmt>
}<pos:position pos:line="193" pos:column="2"/></block></function></unit>
