<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1758_git-2.1.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">read_directory<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">dir_struct<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">dir<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">path<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">int<pos:position pos:line="1" pos:column="65"/></name></type> <name pos:line="1" pos:column="66">len<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="71">const<pos:position pos:line="1" pos:column="76"/></specifier> <name><name pos:line="1" pos:column="77">struct<pos:position pos:line="1" pos:column="83"/></name> <name pos:line="1" pos:column="84">pathspec<pos:position pos:line="1" pos:column="92"/></name></name> <modifier pos:line="1" pos:column="93">*<pos:position pos:line="1" pos:column="94"/></modifier></type><name pos:line="1" pos:column="94">pathspec<pos:position pos:line="1" pos:column="102"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="103"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">path_simplify<pos:position pos:line="3" pos:column="29"/></name></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="31">simplify<pos:position pos:line="3" pos:column="39"/></name></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/*
	 * Check out create_simplify()
	 */</comment>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">pathspec<pos:position pos:line="8" pos:column="21"/></name></expr>)<pos:position pos:line="8" pos:column="22"/></condition><then pos:line="8" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">GUARD_PATHSPEC<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><name pos:line="9" pos:column="32">pathspec<pos:position pos:line="9" pos:column="40"/></name></expr></argument>,
			       <argument><expr><name pos:line="10" pos:column="32">PATHSPEC_FROMTOP<pos:position pos:line="10" pos:column="48"/></name> <operator pos:line="10" pos:column="49">|<pos:position pos:line="10" pos:column="50"/></operator>
			       <name pos:line="11" pos:column="32">PATHSPEC_MAXDEPTH<pos:position pos:line="11" pos:column="49"/></name> <operator pos:line="11" pos:column="50">|<pos:position pos:line="11" pos:column="51"/></operator>
			       <name pos:line="12" pos:column="32">PATHSPEC_LITERAL<pos:position pos:line="12" pos:column="48"/></name> <operator pos:line="12" pos:column="49">|<pos:position pos:line="12" pos:column="50"/></operator>
			       <name pos:line="13" pos:column="32">PATHSPEC_GLOB<pos:position pos:line="13" pos:column="45"/></name> <operator pos:line="13" pos:column="46">|<pos:position pos:line="13" pos:column="47"/></operator>
			       <name pos:line="14" pos:column="32">PATHSPEC_ICASE<pos:position pos:line="14" pos:column="46"/></name> <operator pos:line="14" pos:column="47">|<pos:position pos:line="14" pos:column="48"/></operator>
			       <name pos:line="15" pos:column="32">PATHSPEC_EXCLUDE<pos:position pos:line="15" pos:column="48"/></name></expr></argument>)<pos:position pos:line="15" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="50"/></expr_stmt></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">has_symlink_leading_path<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><name pos:line="17" pos:column="38">path<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="44">len<pos:position pos:line="17" pos:column="47"/></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="49"/></condition><then pos:line="17" pos:column="49">
		<block type="pseudo"><return pos:line="18" pos:column="17">return <expr><name><name pos:line="18" pos:column="24">dir<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">-&gt;<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="29">nr<pos:position pos:line="18" pos:column="31"/></name></name></expr>;<pos:position pos:line="18" pos:column="32"/></return></block></then></if>

	<comment type="block" pos:line="20" pos:column="9">/*
	 * exclude patterns are treated like positive ones in
	 * create_simplify. Usually exclude patterns should be a
	 * subset of positive ones, which has no impacts on
	 * create_simplify().
	 */</comment>
	<expr_stmt><expr><name pos:line="26" pos:column="9">simplify<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">=<pos:position pos:line="26" pos:column="19"/></operator> <call><name pos:line="26" pos:column="20">create_simplify<pos:position pos:line="26" pos:column="35"/></name><argument_list pos:line="26" pos:column="35">(<argument><expr><ternary><condition><expr><name pos:line="26" pos:column="36">pathspec<pos:position pos:line="26" pos:column="44"/></name></expr> ?<pos:position pos:line="26" pos:column="46"/></condition><then pos:line="26" pos:column="46"> <expr><name><name pos:line="26" pos:column="47">pathspec<pos:position pos:line="26" pos:column="55"/></name><operator pos:line="26" pos:column="55">-&gt;<pos:position pos:line="26" pos:column="60"/></operator><name pos:line="26" pos:column="57">_raw<pos:position pos:line="26" pos:column="61"/></name></name></expr> <pos:position pos:line="26" pos:column="62"/></then><else pos:line="26" pos:column="62">: <expr><name pos:line="26" pos:column="64">NULL<pos:position pos:line="26" pos:column="68"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="26" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="70"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">len<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">||<pos:position pos:line="27" pos:column="20"/></operator> <call><name pos:line="27" pos:column="21">treat_leading_path<pos:position pos:line="27" pos:column="39"/></name><argument_list pos:line="27" pos:column="39">(<argument><expr><name pos:line="27" pos:column="40">dir<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="45">path<pos:position pos:line="27" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="51">len<pos:position pos:line="27" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="56">simplify<pos:position pos:line="27" pos:column="64"/></name></expr></argument>)<pos:position pos:line="27" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="66"/></condition><then pos:line="27" pos:column="66">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="17">read_directory_recursive<pos:position pos:line="28" pos:column="41"/></name><argument_list pos:line="28" pos:column="41">(<argument><expr><name pos:line="28" pos:column="42">dir<pos:position pos:line="28" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="47">path<pos:position pos:line="28" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="53">len<pos:position pos:line="28" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="58">0<pos:position pos:line="28" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="61">simplify<pos:position pos:line="28" pos:column="69"/></name></expr></argument>)<pos:position pos:line="28" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="71"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">free_simplify<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">simplify<pos:position pos:line="29" pos:column="31"/></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">qsort<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><name><name pos:line="30" pos:column="15">dir<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">-&gt;<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="20">entries<pos:position pos:line="30" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="29">dir<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">-&gt;<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="34">nr<pos:position pos:line="30" pos:column="36"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="38">sizeof<argument_list pos:line="30" pos:column="44">(<argument><expr pos:line="30" pos:column="45">struct <name pos:line="30" pos:column="52">dir_entry<pos:position pos:line="30" pos:column="61"/></name> <operator pos:line="30" pos:column="62">*<pos:position pos:line="30" pos:column="63"/></operator></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="30" pos:column="66">cmp_name<pos:position pos:line="30" pos:column="74"/></name></expr></argument>)<pos:position pos:line="30" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="76"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">qsort<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><name><name pos:line="31" pos:column="15">dir<pos:position pos:line="31" pos:column="18"/></name><operator pos:line="31" pos:column="18">-&gt;<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="20">ignored<pos:position pos:line="31" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="29">dir<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">-&gt;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="34">ignored_nr<pos:position pos:line="31" pos:column="44"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="46">sizeof<argument_list pos:line="31" pos:column="52">(<argument><expr pos:line="31" pos:column="53">struct <name pos:line="31" pos:column="60">dir_entry<pos:position pos:line="31" pos:column="69"/></name> <operator pos:line="31" pos:column="70">*<pos:position pos:line="31" pos:column="71"/></operator></expr></argument>)<pos:position pos:line="31" pos:column="72"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="31" pos:column="74">cmp_name<pos:position pos:line="31" pos:column="82"/></name></expr></argument>)<pos:position pos:line="31" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="84"/></expr_stmt>
	<return pos:line="32" pos:column="9">return <expr><name><name pos:line="32" pos:column="16">dir<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">-&gt;<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="21">nr<pos:position pos:line="32" pos:column="23"/></name></name></expr>;<pos:position pos:line="32" pos:column="24"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
