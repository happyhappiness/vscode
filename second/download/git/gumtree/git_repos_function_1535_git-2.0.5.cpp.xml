<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1535_git-2.0.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">parse_sha1_header<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">hdr<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">unsigned<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">long<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">sizep<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">type<pos:position pos:line="3" pos:column="18"/></name><index pos:line="3" pos:column="18">[<expr><literal type="number" pos:line="3" pos:column="19">10<pos:position pos:line="3" pos:column="21"/></literal></expr>]<pos:position pos:line="3" pos:column="22"/></index></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">size<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/*
	 * The type can be at most ten bytes (including the
	 * terminating '\0' that we add), and is followed by
	 * a space.
	 */</comment>
	<expr_stmt><expr><name pos:line="12" pos:column="9">i<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <literal type="number" pos:line="12" pos:column="13">0<pos:position pos:line="12" pos:column="14"/></literal></expr>;<pos:position pos:line="12" pos:column="15"/></expr_stmt>
	<for pos:line="13" pos:column="9">for <control pos:line="13" pos:column="13">(<init pos:line="13" pos:column="14">;<pos:position pos:line="13" pos:column="15"/></init><condition pos:line="13" pos:column="15">;<pos:position pos:line="13" pos:column="16"/></condition><incr/>)<pos:position pos:line="13" pos:column="17"/></control> <block pos:line="13" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">char<pos:position pos:line="14" pos:column="21"/></name></type> <name pos:line="14" pos:column="22">c<pos:position pos:line="14" pos:column="23"/></name> <init pos:line="14" pos:column="24">= <expr><operator pos:line="14" pos:column="26">*<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="27">hdr<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">++<pos:position pos:line="14" pos:column="32"/></operator></expr></init></decl>;<pos:position pos:line="14" pos:column="33"/></decl_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">c<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">==<pos:position pos:line="15" pos:column="25"/></operator> <literal type="char" pos:line="15" pos:column="26">' '<pos:position pos:line="15" pos:column="29"/></literal></expr>)<pos:position pos:line="15" pos:column="30"/></condition><then pos:line="15" pos:column="30">
			<block type="pseudo"><break pos:line="16" pos:column="25">break;<pos:position pos:line="16" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name><name pos:line="17" pos:column="17">type<pos:position pos:line="17" pos:column="21"/></name><index pos:line="17" pos:column="21">[<expr><name pos:line="17" pos:column="22">i<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">++<pos:position pos:line="17" pos:column="25"/></operator></expr>]<pos:position pos:line="17" pos:column="26"/></index></name> <operator pos:line="17" pos:column="27">=<pos:position pos:line="17" pos:column="28"/></operator> <name pos:line="17" pos:column="29">c<pos:position pos:line="17" pos:column="30"/></name></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">i<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">&gt;=<pos:position pos:line="18" pos:column="28"/></operator> <sizeof pos:line="18" pos:column="26">sizeof<argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">type<pos:position pos:line="18" pos:column="37"/></name></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></sizeof></expr>)<pos:position pos:line="18" pos:column="39"/></condition><then pos:line="18" pos:column="39">
			<block type="pseudo"><return pos:line="19" pos:column="25">return <expr><operator pos:line="19" pos:column="32">-<pos:position pos:line="19" pos:column="33"/></operator><literal type="number" pos:line="19" pos:column="33">1<pos:position pos:line="19" pos:column="34"/></literal></expr>;<pos:position pos:line="19" pos:column="35"/></return></block></then></if>
	}<pos:position pos:line="20" pos:column="10"/></block></for>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">type<pos:position pos:line="21" pos:column="13"/></name><index pos:line="21" pos:column="13">[<expr><name pos:line="21" pos:column="14">i<pos:position pos:line="21" pos:column="15"/></name></expr>]<pos:position pos:line="21" pos:column="16"/></index></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <literal type="number" pos:line="21" pos:column="19">0<pos:position pos:line="21" pos:column="20"/></literal></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>

	<comment type="block" pos:line="23" pos:column="9">/*
	 * The length must follow immediately, and be in canonical
	 * decimal format (ie "010" is not valid).
	 */</comment>
	<expr_stmt><expr><name pos:line="27" pos:column="9">size<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <operator pos:line="27" pos:column="16">*<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="17">hdr<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">++<pos:position pos:line="27" pos:column="22"/></operator> <operator pos:line="27" pos:column="23">-<pos:position pos:line="27" pos:column="24"/></operator> <literal type="char" pos:line="27" pos:column="25">'0'<pos:position pos:line="27" pos:column="28"/></literal></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">size<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">&gt;<pos:position pos:line="28" pos:column="22"/></operator> <literal type="number" pos:line="28" pos:column="20">9<pos:position pos:line="28" pos:column="21"/></literal></expr>)<pos:position pos:line="28" pos:column="22"/></condition><then pos:line="28" pos:column="22">
		<block type="pseudo"><return pos:line="29" pos:column="17">return <expr><operator pos:line="29" pos:column="24">-<pos:position pos:line="29" pos:column="25"/></operator><literal type="number" pos:line="29" pos:column="25">1<pos:position pos:line="29" pos:column="26"/></literal></expr>;<pos:position pos:line="29" pos:column="27"/></return></block></then></if>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">size<pos:position pos:line="30" pos:column="17"/></name></expr>)<pos:position pos:line="30" pos:column="18"/></condition><then pos:line="30" pos:column="18"> <block pos:line="30" pos:column="19">{
		<for pos:line="31" pos:column="17">for <control pos:line="31" pos:column="21">(<init pos:line="31" pos:column="22">;<pos:position pos:line="31" pos:column="23"/></init><condition pos:line="31" pos:column="23">;<pos:position pos:line="31" pos:column="24"/></condition><incr/>)<pos:position pos:line="31" pos:column="25"/></control> <block pos:line="31" pos:column="26">{
			<decl_stmt><decl><type><name pos:line="32" pos:column="25">unsigned<pos:position pos:line="32" pos:column="33"/></name> <name pos:line="32" pos:column="34">long<pos:position pos:line="32" pos:column="38"/></name></type> <name pos:line="32" pos:column="39">c<pos:position pos:line="32" pos:column="40"/></name> <init pos:line="32" pos:column="41">= <expr><operator pos:line="32" pos:column="43">*<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="44">hdr<pos:position pos:line="32" pos:column="47"/></name> <operator pos:line="32" pos:column="48">-<pos:position pos:line="32" pos:column="49"/></operator> <literal type="char" pos:line="32" pos:column="50">'0'<pos:position pos:line="32" pos:column="53"/></literal></expr></init></decl>;<pos:position pos:line="32" pos:column="54"/></decl_stmt>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">c<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">&gt;<pos:position pos:line="33" pos:column="35"/></operator> <literal type="number" pos:line="33" pos:column="33">9<pos:position pos:line="33" pos:column="34"/></literal></expr>)<pos:position pos:line="33" pos:column="35"/></condition><then pos:line="33" pos:column="35">
				<block type="pseudo"><break pos:line="34" pos:column="33">break;<pos:position pos:line="34" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="35" pos:column="25">hdr<pos:position pos:line="35" pos:column="28"/></name><operator pos:line="35" pos:column="28">++<pos:position pos:line="35" pos:column="30"/></operator></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
			<expr_stmt><expr><name pos:line="36" pos:column="25">size<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">=<pos:position pos:line="36" pos:column="31"/></operator> <name pos:line="36" pos:column="32">size<pos:position pos:line="36" pos:column="36"/></name> <operator pos:line="36" pos:column="37">*<pos:position pos:line="36" pos:column="38"/></operator> <literal type="number" pos:line="36" pos:column="39">10<pos:position pos:line="36" pos:column="41"/></literal> <operator pos:line="36" pos:column="42">+<pos:position pos:line="36" pos:column="43"/></operator> <name pos:line="36" pos:column="44">c<pos:position pos:line="36" pos:column="45"/></name></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="37" pos:column="18"/></block></for>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>
	<expr_stmt><expr><operator pos:line="39" pos:column="9">*<pos:position pos:line="39" pos:column="10"/></operator><name pos:line="39" pos:column="10">sizep<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <name pos:line="39" pos:column="18">size<pos:position pos:line="39" pos:column="22"/></name></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt>

	<comment type="block" pos:line="41" pos:column="9">/*
	 * The length must be followed by a zero byte
	 */</comment>
	<return pos:line="44" pos:column="9">return <expr><ternary><condition><expr><operator pos:line="44" pos:column="16">*<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="17">hdr<pos:position pos:line="44" pos:column="20"/></name></expr> ?<pos:position pos:line="44" pos:column="22"/></condition><then pos:line="44" pos:column="22"> <expr><operator pos:line="44" pos:column="23">-<pos:position pos:line="44" pos:column="24"/></operator><literal type="number" pos:line="44" pos:column="24">1<pos:position pos:line="44" pos:column="25"/></literal></expr> <pos:position pos:line="44" pos:column="26"/></then><else pos:line="44" pos:column="26">: <expr><call><name pos:line="44" pos:column="28">type_from_string<pos:position pos:line="44" pos:column="44"/></name><argument_list pos:line="44" pos:column="44">(<argument><expr><name pos:line="44" pos:column="45">type<pos:position pos:line="44" pos:column="49"/></name></expr></argument>)<pos:position pos:line="44" pos:column="50"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="44" pos:column="51"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
