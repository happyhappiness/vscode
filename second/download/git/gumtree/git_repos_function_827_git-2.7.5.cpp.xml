<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_827_git-2.7.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">start_async<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name><name pos:line="1" pos:column="17">struct<pos:position pos:line="1" pos:column="23"/></name> <name pos:line="1" pos:column="24">async<pos:position pos:line="1" pos:column="29"/></name></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">async<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">need_in<pos:position pos:line="3" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="22">need_out<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name><name pos:line="4" pos:column="13">fdin<pos:position pos:line="4" pos:column="17"/></name><index pos:line="4" pos:column="17">[<expr><literal type="number" pos:line="4" pos:column="18">2<pos:position pos:line="4" pos:column="19"/></literal></expr>]<pos:position pos:line="4" pos:column="20"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="4" pos:column="22">fdout<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">2<pos:position pos:line="4" pos:column="29"/></literal></expr>]<pos:position pos:line="4" pos:column="30"/></index></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">proc_in<pos:position pos:line="5" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="22">proc_out<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">need_in<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">=<pos:position pos:line="7" pos:column="18"/></operator> <name><name pos:line="7" pos:column="19">async<pos:position pos:line="7" pos:column="24"/></name><operator pos:line="7" pos:column="24">-&gt;<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="26">in<pos:position pos:line="7" pos:column="28"/></name></name> <operator pos:line="7" pos:column="29">&lt;<pos:position pos:line="7" pos:column="33"/></operator> <literal type="number" pos:line="7" pos:column="31">0<pos:position pos:line="7" pos:column="32"/></literal></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">need_in<pos:position pos:line="8" pos:column="20"/></name></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21"> <block pos:line="8" pos:column="22">{
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><call><name pos:line="9" pos:column="21">pipe<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">fdin<pos:position pos:line="9" pos:column="30"/></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></call> <operator pos:line="9" pos:column="32">&lt;<pos:position pos:line="9" pos:column="36"/></operator> <literal type="number" pos:line="9" pos:column="34">0<pos:position pos:line="9" pos:column="35"/></literal></expr>)<pos:position pos:line="9" pos:column="36"/></condition><then pos:line="9" pos:column="36"> <block pos:line="9" pos:column="37">{
			<if pos:line="10" pos:column="25">if <condition pos:line="10" pos:column="28">(<expr><name><name pos:line="10" pos:column="29">async<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">-&gt;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="36">out<pos:position pos:line="10" pos:column="39"/></name></name> <operator pos:line="10" pos:column="40">&gt;<pos:position pos:line="10" pos:column="44"/></operator> <literal type="number" pos:line="10" pos:column="42">0<pos:position pos:line="10" pos:column="43"/></literal></expr>)<pos:position pos:line="10" pos:column="44"/></condition><then pos:line="10" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="33">close<pos:position pos:line="11" pos:column="38"/></name><argument_list pos:line="11" pos:column="38">(<argument><expr><name><name pos:line="11" pos:column="39">async<pos:position pos:line="11" pos:column="44"/></name><operator pos:line="11" pos:column="44">-&gt;<pos:position pos:line="11" pos:column="49"/></operator><name pos:line="11" pos:column="46">out<pos:position pos:line="11" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt></block></then></if>
			<return pos:line="12" pos:column="25">return <expr><call><name pos:line="12" pos:column="32">error<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">(<argument><expr><literal type="string" pos:line="12" pos:column="38">"cannot create pipe: %s"<pos:position pos:line="12" pos:column="62"/></literal></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="64">strerror<pos:position pos:line="12" pos:column="72"/></name><argument_list pos:line="12" pos:column="72">(<argument><expr><name pos:line="12" pos:column="73">errno<pos:position pos:line="12" pos:column="78"/></name></expr></argument>)<pos:position pos:line="12" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="81"/></return>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="14" pos:column="17">async<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">-&gt;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="24">in<pos:position pos:line="14" pos:column="26"/></name></name> <operator pos:line="14" pos:column="27">=<pos:position pos:line="14" pos:column="28"/></operator> <name><name pos:line="14" pos:column="29">fdin<pos:position pos:line="14" pos:column="33"/></name><index pos:line="14" pos:column="33">[<expr><literal type="number" pos:line="14" pos:column="34">1<pos:position pos:line="14" pos:column="35"/></literal></expr>]<pos:position pos:line="14" pos:column="36"/></index></name></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="17" pos:column="9">need_out<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <name><name pos:line="17" pos:column="20">async<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">-&gt;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="27">out<pos:position pos:line="17" pos:column="30"/></name></name> <operator pos:line="17" pos:column="31">&lt;<pos:position pos:line="17" pos:column="35"/></operator> <literal type="number" pos:line="17" pos:column="33">0<pos:position pos:line="17" pos:column="34"/></literal></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">need_out<pos:position pos:line="18" pos:column="21"/></name></expr>)<pos:position pos:line="18" pos:column="22"/></condition><then pos:line="18" pos:column="22"> <block pos:line="18" pos:column="23">{
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><call><name pos:line="19" pos:column="21">pipe<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">fdout<pos:position pos:line="19" pos:column="31"/></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call> <operator pos:line="19" pos:column="33">&lt;<pos:position pos:line="19" pos:column="37"/></operator> <literal type="number" pos:line="19" pos:column="35">0<pos:position pos:line="19" pos:column="36"/></literal></expr>)<pos:position pos:line="19" pos:column="37"/></condition><then pos:line="19" pos:column="37"> <block pos:line="19" pos:column="38">{
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><name pos:line="20" pos:column="29">need_in<pos:position pos:line="20" pos:column="36"/></name></expr>)<pos:position pos:line="20" pos:column="37"/></condition><then pos:line="20" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="33">close_pair<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">fdin<pos:position pos:line="21" pos:column="48"/></name></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt></block></then>
			<elseif pos:line="22" pos:column="25">else <if pos:line="22" pos:column="30">if <condition pos:line="22" pos:column="33">(<expr><name><name pos:line="22" pos:column="34">async<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">-&gt;<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="41">in<pos:position pos:line="22" pos:column="43"/></name></name></expr>)<pos:position pos:line="22" pos:column="44"/></condition><then pos:line="22" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="33">close<pos:position pos:line="23" pos:column="38"/></name><argument_list pos:line="23" pos:column="38">(<argument><expr><name><name pos:line="23" pos:column="39">async<pos:position pos:line="23" pos:column="44"/></name><operator pos:line="23" pos:column="44">-&gt;<pos:position pos:line="23" pos:column="49"/></operator><name pos:line="23" pos:column="46">in<pos:position pos:line="23" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt></block></then></if></elseif></if>
			<return pos:line="24" pos:column="25">return <expr><call><name pos:line="24" pos:column="32">error<pos:position pos:line="24" pos:column="37"/></name><argument_list pos:line="24" pos:column="37">(<argument><expr><literal type="string" pos:line="24" pos:column="38">"cannot create pipe: %s"<pos:position pos:line="24" pos:column="62"/></literal></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="64">strerror<pos:position pos:line="24" pos:column="72"/></name><argument_list pos:line="24" pos:column="72">(<argument><expr><name pos:line="24" pos:column="73">errno<pos:position pos:line="24" pos:column="78"/></name></expr></argument>)<pos:position pos:line="24" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="81"/></return>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="26" pos:column="17">async<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">-&gt;<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="24">out<pos:position pos:line="26" pos:column="27"/></name></name> <operator pos:line="26" pos:column="28">=<pos:position pos:line="26" pos:column="29"/></operator> <name><name pos:line="26" pos:column="30">fdout<pos:position pos:line="26" pos:column="35"/></name><index pos:line="26" pos:column="35">[<expr><literal type="number" pos:line="26" pos:column="36">0<pos:position pos:line="26" pos:column="37"/></literal></expr>]<pos:position pos:line="26" pos:column="38"/></index></name></expr>;<pos:position pos:line="26" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">need_in<pos:position pos:line="29" pos:column="20"/></name></expr>)<pos:position pos:line="29" pos:column="21"/></condition><then pos:line="29" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="17">proc_in<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">=<pos:position pos:line="30" pos:column="26"/></operator> <name><name pos:line="30" pos:column="27">fdin<pos:position pos:line="30" pos:column="31"/></name><index pos:line="30" pos:column="31">[<expr><literal type="number" pos:line="30" pos:column="32">0<pos:position pos:line="30" pos:column="33"/></literal></expr>]<pos:position pos:line="30" pos:column="34"/></index></name></expr>;<pos:position pos:line="30" pos:column="35"/></expr_stmt></block></then>
	<elseif pos:line="31" pos:column="9">else <if pos:line="31" pos:column="14">if <condition pos:line="31" pos:column="17">(<expr><name><name pos:line="31" pos:column="18">async<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">-&gt;<pos:position pos:line="31" pos:column="28"/></operator><name pos:line="31" pos:column="25">in<pos:position pos:line="31" pos:column="27"/></name></name></expr>)<pos:position pos:line="31" pos:column="28"/></condition><then pos:line="31" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="17">proc_in<pos:position pos:line="32" pos:column="24"/></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator> <name><name pos:line="32" pos:column="27">async<pos:position pos:line="32" pos:column="32"/></name><operator pos:line="32" pos:column="32">-&gt;<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="34">in<pos:position pos:line="32" pos:column="36"/></name></name></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt></block></then></if></elseif>
	<else pos:line="33" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="17">proc_in<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">=<pos:position pos:line="34" pos:column="26"/></operator> <operator pos:line="34" pos:column="27">-<pos:position pos:line="34" pos:column="28"/></operator><literal type="number" pos:line="34" pos:column="28">1<pos:position pos:line="34" pos:column="29"/></literal></expr>;<pos:position pos:line="34" pos:column="30"/></expr_stmt></block></else></if>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">need_out<pos:position pos:line="36" pos:column="21"/></name></expr>)<pos:position pos:line="36" pos:column="22"/></condition><then pos:line="36" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="17">proc_out<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">=<pos:position pos:line="37" pos:column="27"/></operator> <name><name pos:line="37" pos:column="28">fdout<pos:position pos:line="37" pos:column="33"/></name><index pos:line="37" pos:column="33">[<expr><literal type="number" pos:line="37" pos:column="34">1<pos:position pos:line="37" pos:column="35"/></literal></expr>]<pos:position pos:line="37" pos:column="36"/></index></name></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt></block></then>
	<elseif pos:line="38" pos:column="9">else <if pos:line="38" pos:column="14">if <condition pos:line="38" pos:column="17">(<expr><name><name pos:line="38" pos:column="18">async<pos:position pos:line="38" pos:column="23"/></name><operator pos:line="38" pos:column="23">-&gt;<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="25">out<pos:position pos:line="38" pos:column="28"/></name></name></expr>)<pos:position pos:line="38" pos:column="29"/></condition><then pos:line="38" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="17">proc_out<pos:position pos:line="39" pos:column="25"/></name> <operator pos:line="39" pos:column="26">=<pos:position pos:line="39" pos:column="27"/></operator> <name><name pos:line="39" pos:column="28">async<pos:position pos:line="39" pos:column="33"/></name><operator pos:line="39" pos:column="33">-&gt;<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="35">out<pos:position pos:line="39" pos:column="38"/></name></name></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt></block></then></if></elseif>
	<else pos:line="40" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="17">proc_out<pos:position pos:line="41" pos:column="25"/></name> <operator pos:line="41" pos:column="26">=<pos:position pos:line="41" pos:column="27"/></operator> <operator pos:line="41" pos:column="28">-<pos:position pos:line="41" pos:column="29"/></operator><literal type="number" pos:line="41" pos:column="29">1<pos:position pos:line="41" pos:column="30"/></literal></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt></block></else></if>

<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">NO_PTHREADS<pos:position pos:line="43" pos:column="19"/></name></cpp:ifdef>
	<comment type="block" pos:line="44" pos:column="9">/* Flush stdio before fork() to avoid cloning buffers */</comment>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">fflush<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><name pos:line="45" pos:column="16">NULL<pos:position pos:line="45" pos:column="20"/></name></expr></argument>)<pos:position pos:line="45" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="22"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="47" pos:column="9">async<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">-&gt;<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="16">pid<pos:position pos:line="47" pos:column="19"/></name></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <call><name pos:line="47" pos:column="22">fork<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">()<pos:position pos:line="47" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="29"/></expr_stmt>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name><name pos:line="48" pos:column="13">async<pos:position pos:line="48" pos:column="18"/></name><operator pos:line="48" pos:column="18">-&gt;<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="20">pid<pos:position pos:line="48" pos:column="23"/></name></name> <operator pos:line="48" pos:column="24">&lt;<pos:position pos:line="48" pos:column="28"/></operator> <literal type="number" pos:line="48" pos:column="26">0<pos:position pos:line="48" pos:column="27"/></literal></expr>)<pos:position pos:line="48" pos:column="28"/></condition><then pos:line="48" pos:column="28"> <block pos:line="48" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">error<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">(<argument><expr><literal type="string" pos:line="49" pos:column="23">"fork (async) failed: %s"<pos:position pos:line="49" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="50">strerror<pos:position pos:line="49" pos:column="58"/></name><argument_list pos:line="49" pos:column="58">(<argument><expr><name pos:line="49" pos:column="59">errno<pos:position pos:line="49" pos:column="64"/></name></expr></argument>)<pos:position pos:line="49" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="67"/></expr_stmt>
		<goto pos:line="50" pos:column="17">goto <name pos:line="50" pos:column="22">error<pos:position pos:line="50" pos:column="27"/></name>;<pos:position pos:line="50" pos:column="28"/></goto>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><operator pos:line="52" pos:column="13">!<pos:position pos:line="52" pos:column="14"/></operator><name><name pos:line="52" pos:column="14">async<pos:position pos:line="52" pos:column="19"/></name><operator pos:line="52" pos:column="19">-&gt;<pos:position pos:line="52" pos:column="24"/></operator><name pos:line="52" pos:column="21">pid<pos:position pos:line="52" pos:column="24"/></name></name></expr>)<pos:position pos:line="52" pos:column="25"/></condition><then pos:line="52" pos:column="25"> <block pos:line="52" pos:column="26">{
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name pos:line="53" pos:column="21">need_in<pos:position pos:line="53" pos:column="28"/></name></expr>)<pos:position pos:line="53" pos:column="29"/></condition><then pos:line="53" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="25">close<pos:position pos:line="54" pos:column="30"/></name><argument_list pos:line="54" pos:column="30">(<argument><expr><name><name pos:line="54" pos:column="31">fdin<pos:position pos:line="54" pos:column="35"/></name><index pos:line="54" pos:column="35">[<expr><literal type="number" pos:line="54" pos:column="36">1<pos:position pos:line="54" pos:column="37"/></literal></expr>]<pos:position pos:line="54" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="54" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="40"/></expr_stmt></block></then></if>
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name pos:line="55" pos:column="21">need_out<pos:position pos:line="55" pos:column="29"/></name></expr>)<pos:position pos:line="55" pos:column="30"/></condition><then pos:line="55" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="25">close<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><name><name pos:line="56" pos:column="31">fdout<pos:position pos:line="56" pos:column="36"/></name><index pos:line="56" pos:column="36">[<expr><literal type="number" pos:line="56" pos:column="37">0<pos:position pos:line="56" pos:column="38"/></literal></expr>]<pos:position pos:line="56" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="56" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="41"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">git_atexit_clear<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">()<pos:position pos:line="57" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="58" pos:column="17">process_is_async<pos:position pos:line="58" pos:column="33"/></name> <operator pos:line="58" pos:column="34">=<pos:position pos:line="58" pos:column="35"/></operator> <literal type="number" pos:line="58" pos:column="36">1<pos:position pos:line="58" pos:column="37"/></literal></expr>;<pos:position pos:line="58" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">exit<pos:position pos:line="59" pos:column="21"/></name><argument_list pos:line="59" pos:column="21">(<argument><expr><operator pos:line="59" pos:column="22">!<pos:position pos:line="59" pos:column="23"/></operator><operator pos:line="59" pos:column="23">!<pos:position pos:line="59" pos:column="24"/></operator><call><name><name pos:line="59" pos:column="24">async<pos:position pos:line="59" pos:column="29"/></name><operator pos:line="59" pos:column="29">-&gt;<pos:position pos:line="59" pos:column="34"/></operator><name pos:line="59" pos:column="31">proc<pos:position pos:line="59" pos:column="35"/></name></name><argument_list pos:line="59" pos:column="35">(<argument><expr><name pos:line="59" pos:column="36">proc_in<pos:position pos:line="59" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="45">proc_out<pos:position pos:line="59" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="55">async<pos:position pos:line="59" pos:column="60"/></name><operator pos:line="59" pos:column="60">-&gt;<pos:position pos:line="59" pos:column="65"/></operator><name pos:line="59" pos:column="62">data<pos:position pos:line="59" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="69"/></expr_stmt>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="62" pos:column="9">mark_child_for_cleanup<pos:position pos:line="62" pos:column="31"/></name><argument_list pos:line="62" pos:column="31">(<argument><expr><name><name pos:line="62" pos:column="32">async<pos:position pos:line="62" pos:column="37"/></name><operator pos:line="62" pos:column="37">-&gt;<pos:position pos:line="62" pos:column="42"/></operator><name pos:line="62" pos:column="39">pid<pos:position pos:line="62" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="44"/></expr_stmt>

	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name pos:line="64" pos:column="13">need_in<pos:position pos:line="64" pos:column="20"/></name></expr>)<pos:position pos:line="64" pos:column="21"/></condition><then pos:line="64" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="17">close<pos:position pos:line="65" pos:column="22"/></name><argument_list pos:line="65" pos:column="22">(<argument><expr><name><name pos:line="65" pos:column="23">fdin<pos:position pos:line="65" pos:column="27"/></name><index pos:line="65" pos:column="27">[<expr><literal type="number" pos:line="65" pos:column="28">0<pos:position pos:line="65" pos:column="29"/></literal></expr>]<pos:position pos:line="65" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="65" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="32"/></expr_stmt></block></then>
	<elseif pos:line="66" pos:column="9">else <if pos:line="66" pos:column="14">if <condition pos:line="66" pos:column="17">(<expr><name><name pos:line="66" pos:column="18">async<pos:position pos:line="66" pos:column="23"/></name><operator pos:line="66" pos:column="23">-&gt;<pos:position pos:line="66" pos:column="28"/></operator><name pos:line="66" pos:column="25">in<pos:position pos:line="66" pos:column="27"/></name></name></expr>)<pos:position pos:line="66" pos:column="28"/></condition><then pos:line="66" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="17">close<pos:position pos:line="67" pos:column="22"/></name><argument_list pos:line="67" pos:column="22">(<argument><expr><name><name pos:line="67" pos:column="23">async<pos:position pos:line="67" pos:column="28"/></name><operator pos:line="67" pos:column="28">-&gt;<pos:position pos:line="67" pos:column="33"/></operator><name pos:line="67" pos:column="30">in<pos:position pos:line="67" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="34"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">need_out<pos:position pos:line="69" pos:column="21"/></name></expr>)<pos:position pos:line="69" pos:column="22"/></condition><then pos:line="69" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="17">close<pos:position pos:line="70" pos:column="22"/></name><argument_list pos:line="70" pos:column="22">(<argument><expr><name><name pos:line="70" pos:column="23">fdout<pos:position pos:line="70" pos:column="28"/></name><index pos:line="70" pos:column="28">[<expr><literal type="number" pos:line="70" pos:column="29">1<pos:position pos:line="70" pos:column="30"/></literal></expr>]<pos:position pos:line="70" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="70" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="33"/></expr_stmt></block></then>
	<elseif pos:line="71" pos:column="9">else <if pos:line="71" pos:column="14">if <condition pos:line="71" pos:column="17">(<expr><name><name pos:line="71" pos:column="18">async<pos:position pos:line="71" pos:column="23"/></name><operator pos:line="71" pos:column="23">-&gt;<pos:position pos:line="71" pos:column="28"/></operator><name pos:line="71" pos:column="25">out<pos:position pos:line="71" pos:column="28"/></name></name></expr>)<pos:position pos:line="71" pos:column="29"/></condition><then pos:line="71" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="17">close<pos:position pos:line="72" pos:column="22"/></name><argument_list pos:line="72" pos:column="22">(<argument><expr><name><name pos:line="72" pos:column="23">async<pos:position pos:line="72" pos:column="28"/></name><operator pos:line="72" pos:column="28">-&gt;<pos:position pos:line="72" pos:column="33"/></operator><name pos:line="72" pos:column="30">out<pos:position pos:line="72" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="35"/></expr_stmt></block></then></if></elseif></if>
<cpp:else pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">else<pos:position pos:line="73" pos:column="6"/></cpp:directive></cpp:else>
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><operator pos:line="74" pos:column="13">!<pos:position pos:line="74" pos:column="14"/></operator><name pos:line="74" pos:column="14">main_thread_set<pos:position pos:line="74" pos:column="29"/></name></expr>)<pos:position pos:line="74" pos:column="30"/></condition><then pos:line="74" pos:column="30"> <block pos:line="74" pos:column="31">{
		<comment type="block" pos:line="75" pos:column="17">/*
		 * We assume that the first time that start_async is called
		 * it is from the main thread.
		 */</comment>
		<expr_stmt><expr><name pos:line="79" pos:column="17">main_thread_set<pos:position pos:line="79" pos:column="32"/></name> <operator pos:line="79" pos:column="33">=<pos:position pos:line="79" pos:column="34"/></operator> <literal type="number" pos:line="79" pos:column="35">1<pos:position pos:line="79" pos:column="36"/></literal></expr>;<pos:position pos:line="79" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="80" pos:column="17">main_thread<pos:position pos:line="80" pos:column="28"/></name> <operator pos:line="80" pos:column="29">=<pos:position pos:line="80" pos:column="30"/></operator> <call><name pos:line="80" pos:column="31">pthread_self<pos:position pos:line="80" pos:column="43"/></name><argument_list pos:line="80" pos:column="43">()<pos:position pos:line="80" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="81" pos:column="17">pthread_key_create<pos:position pos:line="81" pos:column="35"/></name><argument_list pos:line="81" pos:column="35">(<argument><expr><operator pos:line="81" pos:column="36">&amp;<pos:position pos:line="81" pos:column="41"/></operator><name pos:line="81" pos:column="37">async_key<pos:position pos:line="81" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="48">NULL<pos:position pos:line="81" pos:column="52"/></name></expr></argument>)<pos:position pos:line="81" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="82" pos:column="17">pthread_key_create<pos:position pos:line="82" pos:column="35"/></name><argument_list pos:line="82" pos:column="35">(<argument><expr><operator pos:line="82" pos:column="36">&amp;<pos:position pos:line="82" pos:column="41"/></operator><name pos:line="82" pos:column="37">async_die_counter<pos:position pos:line="82" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="56">NULL<pos:position pos:line="82" pos:column="60"/></name></expr></argument>)<pos:position pos:line="82" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="83" pos:column="17">set_die_routine<pos:position pos:line="83" pos:column="32"/></name><argument_list pos:line="83" pos:column="32">(<argument><expr><name pos:line="83" pos:column="33">die_async<pos:position pos:line="83" pos:column="42"/></name></expr></argument>)<pos:position pos:line="83" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="84" pos:column="17">set_die_is_recursing_routine<pos:position pos:line="84" pos:column="45"/></name><argument_list pos:line="84" pos:column="45">(<argument><expr><name pos:line="84" pos:column="46">async_die_is_recursing<pos:position pos:line="84" pos:column="68"/></name></expr></argument>)<pos:position pos:line="84" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="70"/></expr_stmt>
	}<pos:position pos:line="85" pos:column="10"/></block></then></if>

	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name pos:line="87" pos:column="13">proc_in<pos:position pos:line="87" pos:column="20"/></name> <operator pos:line="87" pos:column="21">&gt;=<pos:position pos:line="87" pos:column="26"/></operator> <literal type="number" pos:line="87" pos:column="24">0<pos:position pos:line="87" pos:column="25"/></literal></expr>)<pos:position pos:line="87" pos:column="26"/></condition><then pos:line="87" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="17">set_cloexec<pos:position pos:line="88" pos:column="28"/></name><argument_list pos:line="88" pos:column="28">(<argument><expr><name pos:line="88" pos:column="29">proc_in<pos:position pos:line="88" pos:column="36"/></name></expr></argument>)<pos:position pos:line="88" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="38"/></expr_stmt></block></then></if>
	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">proc_out<pos:position pos:line="89" pos:column="21"/></name> <operator pos:line="89" pos:column="22">&gt;=<pos:position pos:line="89" pos:column="27"/></operator> <literal type="number" pos:line="89" pos:column="25">0<pos:position pos:line="89" pos:column="26"/></literal></expr>)<pos:position pos:line="89" pos:column="27"/></condition><then pos:line="89" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="17">set_cloexec<pos:position pos:line="90" pos:column="28"/></name><argument_list pos:line="90" pos:column="28">(<argument><expr><name pos:line="90" pos:column="29">proc_out<pos:position pos:line="90" pos:column="37"/></name></expr></argument>)<pos:position pos:line="90" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="39"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="91" pos:column="9">async<pos:position pos:line="91" pos:column="14"/></name><operator pos:line="91" pos:column="14">-&gt;<pos:position pos:line="91" pos:column="19"/></operator><name pos:line="91" pos:column="16">proc_in<pos:position pos:line="91" pos:column="23"/></name></name> <operator pos:line="91" pos:column="24">=<pos:position pos:line="91" pos:column="25"/></operator> <name pos:line="91" pos:column="26">proc_in<pos:position pos:line="91" pos:column="33"/></name></expr>;<pos:position pos:line="91" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="92" pos:column="9">async<pos:position pos:line="92" pos:column="14"/></name><operator pos:line="92" pos:column="14">-&gt;<pos:position pos:line="92" pos:column="19"/></operator><name pos:line="92" pos:column="16">proc_out<pos:position pos:line="92" pos:column="24"/></name></name> <operator pos:line="92" pos:column="25">=<pos:position pos:line="92" pos:column="26"/></operator> <name pos:line="92" pos:column="27">proc_out<pos:position pos:line="92" pos:column="35"/></name></expr>;<pos:position pos:line="92" pos:column="36"/></expr_stmt>
	<block pos:line="93" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="94" pos:column="17">int<pos:position pos:line="94" pos:column="20"/></name></type> <name pos:line="94" pos:column="21">err<pos:position pos:line="94" pos:column="24"/></name> <init pos:line="94" pos:column="25">= <expr><call><name pos:line="94" pos:column="27">pthread_create<pos:position pos:line="94" pos:column="41"/></name><argument_list pos:line="94" pos:column="41">(<argument><expr><operator pos:line="94" pos:column="42">&amp;<pos:position pos:line="94" pos:column="47"/></operator><name><name pos:line="94" pos:column="43">async<pos:position pos:line="94" pos:column="48"/></name><operator pos:line="94" pos:column="48">-&gt;<pos:position pos:line="94" pos:column="53"/></operator><name pos:line="94" pos:column="50">tid<pos:position pos:line="94" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="55">NULL<pos:position pos:line="94" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="61">run_thread<pos:position pos:line="94" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="73">async<pos:position pos:line="94" pos:column="78"/></name></expr></argument>)<pos:position pos:line="94" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="94" pos:column="80"/></decl_stmt>
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><name pos:line="95" pos:column="21">err<pos:position pos:line="95" pos:column="24"/></name></expr>)<pos:position pos:line="95" pos:column="25"/></condition><then pos:line="95" pos:column="25"> <block pos:line="95" pos:column="26">{
			<expr_stmt><expr><call><name pos:line="96" pos:column="25">error<pos:position pos:line="96" pos:column="30"/></name><argument_list pos:line="96" pos:column="30">(<argument><expr><literal type="string" pos:line="96" pos:column="31">"cannot create thread: %s"<pos:position pos:line="96" pos:column="57"/></literal></expr></argument>, <argument><expr><call><name pos:line="96" pos:column="59">strerror<pos:position pos:line="96" pos:column="67"/></name><argument_list pos:line="96" pos:column="67">(<argument><expr><name pos:line="96" pos:column="68">err<pos:position pos:line="96" pos:column="71"/></name></expr></argument>)<pos:position pos:line="96" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="96" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="74"/></expr_stmt>
			<goto pos:line="97" pos:column="25">goto <name pos:line="97" pos:column="30">error<pos:position pos:line="97" pos:column="35"/></name>;<pos:position pos:line="97" pos:column="36"/></goto>
		}<pos:position pos:line="98" pos:column="18"/></block></then></if>
	}<pos:position pos:line="99" pos:column="10"/></block>
<cpp:endif pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">endif<pos:position pos:line="100" pos:column="7"/></cpp:directive></cpp:endif>
	<return pos:line="101" pos:column="9">return <expr><literal type="number" pos:line="101" pos:column="16">0<pos:position pos:line="101" pos:column="17"/></literal></expr>;<pos:position pos:line="101" pos:column="18"/></return>

<label><name pos:line="103" pos:column="1">error<pos:position pos:line="103" pos:column="6"/></name>:<pos:position pos:line="103" pos:column="7"/></label>
	<if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><name pos:line="104" pos:column="13">need_in<pos:position pos:line="104" pos:column="20"/></name></expr>)<pos:position pos:line="104" pos:column="21"/></condition><then pos:line="104" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="105" pos:column="17">close_pair<pos:position pos:line="105" pos:column="27"/></name><argument_list pos:line="105" pos:column="27">(<argument><expr><name pos:line="105" pos:column="28">fdin<pos:position pos:line="105" pos:column="32"/></name></expr></argument>)<pos:position pos:line="105" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="34"/></expr_stmt></block></then>
	<elseif pos:line="106" pos:column="9">else <if pos:line="106" pos:column="14">if <condition pos:line="106" pos:column="17">(<expr><name><name pos:line="106" pos:column="18">async<pos:position pos:line="106" pos:column="23"/></name><operator pos:line="106" pos:column="23">-&gt;<pos:position pos:line="106" pos:column="28"/></operator><name pos:line="106" pos:column="25">in<pos:position pos:line="106" pos:column="27"/></name></name></expr>)<pos:position pos:line="106" pos:column="28"/></condition><then pos:line="106" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="107" pos:column="17">close<pos:position pos:line="107" pos:column="22"/></name><argument_list pos:line="107" pos:column="22">(<argument><expr><name><name pos:line="107" pos:column="23">async<pos:position pos:line="107" pos:column="28"/></name><operator pos:line="107" pos:column="28">-&gt;<pos:position pos:line="107" pos:column="33"/></operator><name pos:line="107" pos:column="30">in<pos:position pos:line="107" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="107" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="34"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">(<expr><name pos:line="109" pos:column="13">need_out<pos:position pos:line="109" pos:column="21"/></name></expr>)<pos:position pos:line="109" pos:column="22"/></condition><then pos:line="109" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="110" pos:column="17">close_pair<pos:position pos:line="110" pos:column="27"/></name><argument_list pos:line="110" pos:column="27">(<argument><expr><name pos:line="110" pos:column="28">fdout<pos:position pos:line="110" pos:column="33"/></name></expr></argument>)<pos:position pos:line="110" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="35"/></expr_stmt></block></then>
	<elseif pos:line="111" pos:column="9">else <if pos:line="111" pos:column="14">if <condition pos:line="111" pos:column="17">(<expr><name><name pos:line="111" pos:column="18">async<pos:position pos:line="111" pos:column="23"/></name><operator pos:line="111" pos:column="23">-&gt;<pos:position pos:line="111" pos:column="28"/></operator><name pos:line="111" pos:column="25">out<pos:position pos:line="111" pos:column="28"/></name></name></expr>)<pos:position pos:line="111" pos:column="29"/></condition><then pos:line="111" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="112" pos:column="17">close<pos:position pos:line="112" pos:column="22"/></name><argument_list pos:line="112" pos:column="22">(<argument><expr><name><name pos:line="112" pos:column="23">async<pos:position pos:line="112" pos:column="28"/></name><operator pos:line="112" pos:column="28">-&gt;<pos:position pos:line="112" pos:column="33"/></operator><name pos:line="112" pos:column="30">out<pos:position pos:line="112" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="112" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="35"/></expr_stmt></block></then></if></elseif></if>
	<return pos:line="113" pos:column="9">return <expr><operator pos:line="113" pos:column="16">-<pos:position pos:line="113" pos:column="17"/></operator><literal type="number" pos:line="113" pos:column="17">1<pos:position pos:line="113" pos:column="18"/></literal></expr>;<pos:position pos:line="113" pos:column="19"/></return>
}<pos:position pos:line="114" pos:column="2"/></block></function></unit>
